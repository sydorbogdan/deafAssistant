
testServo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009ef4  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000025c  0800a08c  0800a08c  0001a08c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a2e8  0800a2e8  00020090  2**0
                  CONTENTS
  4 .ARM          00000008  0800a2e8  0800a2e8  0001a2e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a2f0  0800a2f0  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a2f0  0800a2f0  0001a2f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a2f4  0800a2f4  0001a2f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  0800a2f8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000850  20000090  0800a388  00020090  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200008e0  0800a388  000208e0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001e091  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00004132  00000000  00000000  0003e151  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000016b8  00000000  00000000  00042288  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000014e8  00000000  00000000  00043940  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001a8e7  00000000  00000000  00044e28  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00018d6f  00000000  00000000  0005f70f  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00095b88  00000000  00000000  0007847e  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0010e006  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005fc8  00000000  00000000  0010e084  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000090 	.word	0x20000090
 80001b4:	00000000 	.word	0x00000000
 80001b8:	0800a074 	.word	0x0800a074

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000094 	.word	0x20000094
 80001d4:	0800a074 	.word	0x0800a074

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b972 	b.w	80004d4 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9e08      	ldr	r6, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	4688      	mov	r8, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	d14b      	bne.n	80002ae <__udivmoddi4+0xa6>
 8000216:	428a      	cmp	r2, r1
 8000218:	4615      	mov	r5, r2
 800021a:	d967      	bls.n	80002ec <__udivmoddi4+0xe4>
 800021c:	fab2 f282 	clz	r2, r2
 8000220:	b14a      	cbz	r2, 8000236 <__udivmoddi4+0x2e>
 8000222:	f1c2 0720 	rsb	r7, r2, #32
 8000226:	fa01 f302 	lsl.w	r3, r1, r2
 800022a:	fa20 f707 	lsr.w	r7, r0, r7
 800022e:	4095      	lsls	r5, r2
 8000230:	ea47 0803 	orr.w	r8, r7, r3
 8000234:	4094      	lsls	r4, r2
 8000236:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800023a:	0c23      	lsrs	r3, r4, #16
 800023c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000240:	fa1f fc85 	uxth.w	ip, r5
 8000244:	fb0e 8817 	mls	r8, lr, r7, r8
 8000248:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800024c:	fb07 f10c 	mul.w	r1, r7, ip
 8000250:	4299      	cmp	r1, r3
 8000252:	d909      	bls.n	8000268 <__udivmoddi4+0x60>
 8000254:	18eb      	adds	r3, r5, r3
 8000256:	f107 30ff 	add.w	r0, r7, #4294967295
 800025a:	f080 811b 	bcs.w	8000494 <__udivmoddi4+0x28c>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 8118 	bls.w	8000494 <__udivmoddi4+0x28c>
 8000264:	3f02      	subs	r7, #2
 8000266:	442b      	add	r3, r5
 8000268:	1a5b      	subs	r3, r3, r1
 800026a:	b2a4      	uxth	r4, r4
 800026c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000270:	fb0e 3310 	mls	r3, lr, r0, r3
 8000274:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000278:	fb00 fc0c 	mul.w	ip, r0, ip
 800027c:	45a4      	cmp	ip, r4
 800027e:	d909      	bls.n	8000294 <__udivmoddi4+0x8c>
 8000280:	192c      	adds	r4, r5, r4
 8000282:	f100 33ff 	add.w	r3, r0, #4294967295
 8000286:	f080 8107 	bcs.w	8000498 <__udivmoddi4+0x290>
 800028a:	45a4      	cmp	ip, r4
 800028c:	f240 8104 	bls.w	8000498 <__udivmoddi4+0x290>
 8000290:	3802      	subs	r0, #2
 8000292:	442c      	add	r4, r5
 8000294:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000298:	eba4 040c 	sub.w	r4, r4, ip
 800029c:	2700      	movs	r7, #0
 800029e:	b11e      	cbz	r6, 80002a8 <__udivmoddi4+0xa0>
 80002a0:	40d4      	lsrs	r4, r2
 80002a2:	2300      	movs	r3, #0
 80002a4:	e9c6 4300 	strd	r4, r3, [r6]
 80002a8:	4639      	mov	r1, r7
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d909      	bls.n	80002c6 <__udivmoddi4+0xbe>
 80002b2:	2e00      	cmp	r6, #0
 80002b4:	f000 80eb 	beq.w	800048e <__udivmoddi4+0x286>
 80002b8:	2700      	movs	r7, #0
 80002ba:	e9c6 0100 	strd	r0, r1, [r6]
 80002be:	4638      	mov	r0, r7
 80002c0:	4639      	mov	r1, r7
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	fab3 f783 	clz	r7, r3
 80002ca:	2f00      	cmp	r7, #0
 80002cc:	d147      	bne.n	800035e <__udivmoddi4+0x156>
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d302      	bcc.n	80002d8 <__udivmoddi4+0xd0>
 80002d2:	4282      	cmp	r2, r0
 80002d4:	f200 80fa 	bhi.w	80004cc <__udivmoddi4+0x2c4>
 80002d8:	1a84      	subs	r4, r0, r2
 80002da:	eb61 0303 	sbc.w	r3, r1, r3
 80002de:	2001      	movs	r0, #1
 80002e0:	4698      	mov	r8, r3
 80002e2:	2e00      	cmp	r6, #0
 80002e4:	d0e0      	beq.n	80002a8 <__udivmoddi4+0xa0>
 80002e6:	e9c6 4800 	strd	r4, r8, [r6]
 80002ea:	e7dd      	b.n	80002a8 <__udivmoddi4+0xa0>
 80002ec:	b902      	cbnz	r2, 80002f0 <__udivmoddi4+0xe8>
 80002ee:	deff      	udf	#255	; 0xff
 80002f0:	fab2 f282 	clz	r2, r2
 80002f4:	2a00      	cmp	r2, #0
 80002f6:	f040 808f 	bne.w	8000418 <__udivmoddi4+0x210>
 80002fa:	1b49      	subs	r1, r1, r5
 80002fc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000300:	fa1f f885 	uxth.w	r8, r5
 8000304:	2701      	movs	r7, #1
 8000306:	fbb1 fcfe 	udiv	ip, r1, lr
 800030a:	0c23      	lsrs	r3, r4, #16
 800030c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000310:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000314:	fb08 f10c 	mul.w	r1, r8, ip
 8000318:	4299      	cmp	r1, r3
 800031a:	d907      	bls.n	800032c <__udivmoddi4+0x124>
 800031c:	18eb      	adds	r3, r5, r3
 800031e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x122>
 8000324:	4299      	cmp	r1, r3
 8000326:	f200 80cd 	bhi.w	80004c4 <__udivmoddi4+0x2bc>
 800032a:	4684      	mov	ip, r0
 800032c:	1a59      	subs	r1, r3, r1
 800032e:	b2a3      	uxth	r3, r4
 8000330:	fbb1 f0fe 	udiv	r0, r1, lr
 8000334:	fb0e 1410 	mls	r4, lr, r0, r1
 8000338:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800033c:	fb08 f800 	mul.w	r8, r8, r0
 8000340:	45a0      	cmp	r8, r4
 8000342:	d907      	bls.n	8000354 <__udivmoddi4+0x14c>
 8000344:	192c      	adds	r4, r5, r4
 8000346:	f100 33ff 	add.w	r3, r0, #4294967295
 800034a:	d202      	bcs.n	8000352 <__udivmoddi4+0x14a>
 800034c:	45a0      	cmp	r8, r4
 800034e:	f200 80b6 	bhi.w	80004be <__udivmoddi4+0x2b6>
 8000352:	4618      	mov	r0, r3
 8000354:	eba4 0408 	sub.w	r4, r4, r8
 8000358:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800035c:	e79f      	b.n	800029e <__udivmoddi4+0x96>
 800035e:	f1c7 0c20 	rsb	ip, r7, #32
 8000362:	40bb      	lsls	r3, r7
 8000364:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000368:	ea4e 0e03 	orr.w	lr, lr, r3
 800036c:	fa01 f407 	lsl.w	r4, r1, r7
 8000370:	fa20 f50c 	lsr.w	r5, r0, ip
 8000374:	fa21 f30c 	lsr.w	r3, r1, ip
 8000378:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800037c:	4325      	orrs	r5, r4
 800037e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000382:	0c2c      	lsrs	r4, r5, #16
 8000384:	fb08 3319 	mls	r3, r8, r9, r3
 8000388:	fa1f fa8e 	uxth.w	sl, lr
 800038c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000390:	fb09 f40a 	mul.w	r4, r9, sl
 8000394:	429c      	cmp	r4, r3
 8000396:	fa02 f207 	lsl.w	r2, r2, r7
 800039a:	fa00 f107 	lsl.w	r1, r0, r7
 800039e:	d90b      	bls.n	80003b8 <__udivmoddi4+0x1b0>
 80003a0:	eb1e 0303 	adds.w	r3, lr, r3
 80003a4:	f109 30ff 	add.w	r0, r9, #4294967295
 80003a8:	f080 8087 	bcs.w	80004ba <__udivmoddi4+0x2b2>
 80003ac:	429c      	cmp	r4, r3
 80003ae:	f240 8084 	bls.w	80004ba <__udivmoddi4+0x2b2>
 80003b2:	f1a9 0902 	sub.w	r9, r9, #2
 80003b6:	4473      	add	r3, lr
 80003b8:	1b1b      	subs	r3, r3, r4
 80003ba:	b2ad      	uxth	r5, r5
 80003bc:	fbb3 f0f8 	udiv	r0, r3, r8
 80003c0:	fb08 3310 	mls	r3, r8, r0, r3
 80003c4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003c8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003cc:	45a2      	cmp	sl, r4
 80003ce:	d908      	bls.n	80003e2 <__udivmoddi4+0x1da>
 80003d0:	eb1e 0404 	adds.w	r4, lr, r4
 80003d4:	f100 33ff 	add.w	r3, r0, #4294967295
 80003d8:	d26b      	bcs.n	80004b2 <__udivmoddi4+0x2aa>
 80003da:	45a2      	cmp	sl, r4
 80003dc:	d969      	bls.n	80004b2 <__udivmoddi4+0x2aa>
 80003de:	3802      	subs	r0, #2
 80003e0:	4474      	add	r4, lr
 80003e2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003e6:	fba0 8902 	umull	r8, r9, r0, r2
 80003ea:	eba4 040a 	sub.w	r4, r4, sl
 80003ee:	454c      	cmp	r4, r9
 80003f0:	46c2      	mov	sl, r8
 80003f2:	464b      	mov	r3, r9
 80003f4:	d354      	bcc.n	80004a0 <__udivmoddi4+0x298>
 80003f6:	d051      	beq.n	800049c <__udivmoddi4+0x294>
 80003f8:	2e00      	cmp	r6, #0
 80003fa:	d069      	beq.n	80004d0 <__udivmoddi4+0x2c8>
 80003fc:	ebb1 050a 	subs.w	r5, r1, sl
 8000400:	eb64 0403 	sbc.w	r4, r4, r3
 8000404:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000408:	40fd      	lsrs	r5, r7
 800040a:	40fc      	lsrs	r4, r7
 800040c:	ea4c 0505 	orr.w	r5, ip, r5
 8000410:	e9c6 5400 	strd	r5, r4, [r6]
 8000414:	2700      	movs	r7, #0
 8000416:	e747      	b.n	80002a8 <__udivmoddi4+0xa0>
 8000418:	f1c2 0320 	rsb	r3, r2, #32
 800041c:	fa20 f703 	lsr.w	r7, r0, r3
 8000420:	4095      	lsls	r5, r2
 8000422:	fa01 f002 	lsl.w	r0, r1, r2
 8000426:	fa21 f303 	lsr.w	r3, r1, r3
 800042a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800042e:	4338      	orrs	r0, r7
 8000430:	0c01      	lsrs	r1, r0, #16
 8000432:	fbb3 f7fe 	udiv	r7, r3, lr
 8000436:	fa1f f885 	uxth.w	r8, r5
 800043a:	fb0e 3317 	mls	r3, lr, r7, r3
 800043e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000442:	fb07 f308 	mul.w	r3, r7, r8
 8000446:	428b      	cmp	r3, r1
 8000448:	fa04 f402 	lsl.w	r4, r4, r2
 800044c:	d907      	bls.n	800045e <__udivmoddi4+0x256>
 800044e:	1869      	adds	r1, r5, r1
 8000450:	f107 3cff 	add.w	ip, r7, #4294967295
 8000454:	d22f      	bcs.n	80004b6 <__udivmoddi4+0x2ae>
 8000456:	428b      	cmp	r3, r1
 8000458:	d92d      	bls.n	80004b6 <__udivmoddi4+0x2ae>
 800045a:	3f02      	subs	r7, #2
 800045c:	4429      	add	r1, r5
 800045e:	1acb      	subs	r3, r1, r3
 8000460:	b281      	uxth	r1, r0
 8000462:	fbb3 f0fe 	udiv	r0, r3, lr
 8000466:	fb0e 3310 	mls	r3, lr, r0, r3
 800046a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046e:	fb00 f308 	mul.w	r3, r0, r8
 8000472:	428b      	cmp	r3, r1
 8000474:	d907      	bls.n	8000486 <__udivmoddi4+0x27e>
 8000476:	1869      	adds	r1, r5, r1
 8000478:	f100 3cff 	add.w	ip, r0, #4294967295
 800047c:	d217      	bcs.n	80004ae <__udivmoddi4+0x2a6>
 800047e:	428b      	cmp	r3, r1
 8000480:	d915      	bls.n	80004ae <__udivmoddi4+0x2a6>
 8000482:	3802      	subs	r0, #2
 8000484:	4429      	add	r1, r5
 8000486:	1ac9      	subs	r1, r1, r3
 8000488:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800048c:	e73b      	b.n	8000306 <__udivmoddi4+0xfe>
 800048e:	4637      	mov	r7, r6
 8000490:	4630      	mov	r0, r6
 8000492:	e709      	b.n	80002a8 <__udivmoddi4+0xa0>
 8000494:	4607      	mov	r7, r0
 8000496:	e6e7      	b.n	8000268 <__udivmoddi4+0x60>
 8000498:	4618      	mov	r0, r3
 800049a:	e6fb      	b.n	8000294 <__udivmoddi4+0x8c>
 800049c:	4541      	cmp	r1, r8
 800049e:	d2ab      	bcs.n	80003f8 <__udivmoddi4+0x1f0>
 80004a0:	ebb8 0a02 	subs.w	sl, r8, r2
 80004a4:	eb69 020e 	sbc.w	r2, r9, lr
 80004a8:	3801      	subs	r0, #1
 80004aa:	4613      	mov	r3, r2
 80004ac:	e7a4      	b.n	80003f8 <__udivmoddi4+0x1f0>
 80004ae:	4660      	mov	r0, ip
 80004b0:	e7e9      	b.n	8000486 <__udivmoddi4+0x27e>
 80004b2:	4618      	mov	r0, r3
 80004b4:	e795      	b.n	80003e2 <__udivmoddi4+0x1da>
 80004b6:	4667      	mov	r7, ip
 80004b8:	e7d1      	b.n	800045e <__udivmoddi4+0x256>
 80004ba:	4681      	mov	r9, r0
 80004bc:	e77c      	b.n	80003b8 <__udivmoddi4+0x1b0>
 80004be:	3802      	subs	r0, #2
 80004c0:	442c      	add	r4, r5
 80004c2:	e747      	b.n	8000354 <__udivmoddi4+0x14c>
 80004c4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c8:	442b      	add	r3, r5
 80004ca:	e72f      	b.n	800032c <__udivmoddi4+0x124>
 80004cc:	4638      	mov	r0, r7
 80004ce:	e708      	b.n	80002e2 <__udivmoddi4+0xda>
 80004d0:	4637      	mov	r7, r6
 80004d2:	e6e9      	b.n	80002a8 <__udivmoddi4+0xa0>

080004d4 <__aeabi_idiv0>:
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop

080004d8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	b08c      	sub	sp, #48	; 0x30
 80004dc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004de:	f107 031c 	add.w	r3, r7, #28
 80004e2:	2200      	movs	r2, #0
 80004e4:	601a      	str	r2, [r3, #0]
 80004e6:	605a      	str	r2, [r3, #4]
 80004e8:	609a      	str	r2, [r3, #8]
 80004ea:	60da      	str	r2, [r3, #12]
 80004ec:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80004ee:	2300      	movs	r3, #0
 80004f0:	61bb      	str	r3, [r7, #24]
 80004f2:	4b60      	ldr	r3, [pc, #384]	; (8000674 <MX_GPIO_Init+0x19c>)
 80004f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004f6:	4a5f      	ldr	r2, [pc, #380]	; (8000674 <MX_GPIO_Init+0x19c>)
 80004f8:	f043 0310 	orr.w	r3, r3, #16
 80004fc:	6313      	str	r3, [r2, #48]	; 0x30
 80004fe:	4b5d      	ldr	r3, [pc, #372]	; (8000674 <MX_GPIO_Init+0x19c>)
 8000500:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000502:	f003 0310 	and.w	r3, r3, #16
 8000506:	61bb      	str	r3, [r7, #24]
 8000508:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800050a:	2300      	movs	r3, #0
 800050c:	617b      	str	r3, [r7, #20]
 800050e:	4b59      	ldr	r3, [pc, #356]	; (8000674 <MX_GPIO_Init+0x19c>)
 8000510:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000512:	4a58      	ldr	r2, [pc, #352]	; (8000674 <MX_GPIO_Init+0x19c>)
 8000514:	f043 0304 	orr.w	r3, r3, #4
 8000518:	6313      	str	r3, [r2, #48]	; 0x30
 800051a:	4b56      	ldr	r3, [pc, #344]	; (8000674 <MX_GPIO_Init+0x19c>)
 800051c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800051e:	f003 0304 	and.w	r3, r3, #4
 8000522:	617b      	str	r3, [r7, #20]
 8000524:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000526:	2300      	movs	r3, #0
 8000528:	613b      	str	r3, [r7, #16]
 800052a:	4b52      	ldr	r3, [pc, #328]	; (8000674 <MX_GPIO_Init+0x19c>)
 800052c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800052e:	4a51      	ldr	r2, [pc, #324]	; (8000674 <MX_GPIO_Init+0x19c>)
 8000530:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000534:	6313      	str	r3, [r2, #48]	; 0x30
 8000536:	4b4f      	ldr	r3, [pc, #316]	; (8000674 <MX_GPIO_Init+0x19c>)
 8000538:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800053a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800053e:	613b      	str	r3, [r7, #16]
 8000540:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000542:	2300      	movs	r3, #0
 8000544:	60fb      	str	r3, [r7, #12]
 8000546:	4b4b      	ldr	r3, [pc, #300]	; (8000674 <MX_GPIO_Init+0x19c>)
 8000548:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800054a:	4a4a      	ldr	r2, [pc, #296]	; (8000674 <MX_GPIO_Init+0x19c>)
 800054c:	f043 0301 	orr.w	r3, r3, #1
 8000550:	6313      	str	r3, [r2, #48]	; 0x30
 8000552:	4b48      	ldr	r3, [pc, #288]	; (8000674 <MX_GPIO_Init+0x19c>)
 8000554:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000556:	f003 0301 	and.w	r3, r3, #1
 800055a:	60fb      	str	r3, [r7, #12]
 800055c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800055e:	2300      	movs	r3, #0
 8000560:	60bb      	str	r3, [r7, #8]
 8000562:	4b44      	ldr	r3, [pc, #272]	; (8000674 <MX_GPIO_Init+0x19c>)
 8000564:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000566:	4a43      	ldr	r2, [pc, #268]	; (8000674 <MX_GPIO_Init+0x19c>)
 8000568:	f043 0302 	orr.w	r3, r3, #2
 800056c:	6313      	str	r3, [r2, #48]	; 0x30
 800056e:	4b41      	ldr	r3, [pc, #260]	; (8000674 <MX_GPIO_Init+0x19c>)
 8000570:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000572:	f003 0302 	and.w	r3, r3, #2
 8000576:	60bb      	str	r3, [r7, #8]
 8000578:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800057a:	2300      	movs	r3, #0
 800057c:	607b      	str	r3, [r7, #4]
 800057e:	4b3d      	ldr	r3, [pc, #244]	; (8000674 <MX_GPIO_Init+0x19c>)
 8000580:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000582:	4a3c      	ldr	r2, [pc, #240]	; (8000674 <MX_GPIO_Init+0x19c>)
 8000584:	f043 0308 	orr.w	r3, r3, #8
 8000588:	6313      	str	r3, [r2, #48]	; 0x30
 800058a:	4b3a      	ldr	r3, [pc, #232]	; (8000674 <MX_GPIO_Init+0x19c>)
 800058c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800058e:	f003 0308 	and.w	r3, r3, #8
 8000592:	607b      	str	r3, [r7, #4]
 8000594:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000596:	2200      	movs	r2, #0
 8000598:	2108      	movs	r1, #8
 800059a:	4837      	ldr	r0, [pc, #220]	; (8000678 <MX_GPIO_Init+0x1a0>)
 800059c:	f001 f9d6 	bl	800194c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80005a0:	2201      	movs	r2, #1
 80005a2:	2101      	movs	r1, #1
 80005a4:	4835      	ldr	r0, [pc, #212]	; (800067c <MX_GPIO_Init+0x1a4>)
 80005a6:	f001 f9d1 	bl	800194c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80005aa:	2200      	movs	r2, #0
 80005ac:	f24f 0110 	movw	r1, #61456	; 0xf010
 80005b0:	4833      	ldr	r0, [pc, #204]	; (8000680 <MX_GPIO_Init+0x1a8>)
 80005b2:	f001 f9cb 	bl	800194c <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DATA_Ready_Pin;
 80005b6:	2304      	movs	r3, #4
 80005b8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80005ba:	2300      	movs	r3, #0
 80005bc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005be:	2300      	movs	r3, #0
 80005c0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DATA_Ready_GPIO_Port, &GPIO_InitStruct);
 80005c2:	f107 031c 	add.w	r3, r7, #28
 80005c6:	4619      	mov	r1, r3
 80005c8:	482b      	ldr	r0, [pc, #172]	; (8000678 <MX_GPIO_Init+0x1a0>)
 80005ca:	f000 ff17 	bl	80013fc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 80005ce:	2308      	movs	r3, #8
 80005d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005d2:	2301      	movs	r3, #1
 80005d4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005d6:	2300      	movs	r3, #0
 80005d8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005da:	2300      	movs	r3, #0
 80005dc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 80005de:	f107 031c 	add.w	r3, r7, #28
 80005e2:	4619      	mov	r1, r3
 80005e4:	4824      	ldr	r0, [pc, #144]	; (8000678 <MX_GPIO_Init+0x1a0>)
 80005e6:	f000 ff09 	bl	80013fc <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = INT1_Pin|INT2_Pin|MEMS_INT2_Pin;
 80005ea:	2332      	movs	r3, #50	; 0x32
 80005ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80005ee:	4b25      	ldr	r3, [pc, #148]	; (8000684 <MX_GPIO_Init+0x1ac>)
 80005f0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005f2:	2300      	movs	r3, #0
 80005f4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80005f6:	f107 031c 	add.w	r3, r7, #28
 80005fa:	4619      	mov	r1, r3
 80005fc:	481e      	ldr	r0, [pc, #120]	; (8000678 <MX_GPIO_Init+0x1a0>)
 80005fe:	f000 fefd 	bl	80013fc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000602:	2301      	movs	r3, #1
 8000604:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000606:	2301      	movs	r3, #1
 8000608:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800060a:	2300      	movs	r3, #0
 800060c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800060e:	2300      	movs	r3, #0
 8000610:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000612:	f107 031c 	add.w	r3, r7, #28
 8000616:	4619      	mov	r1, r3
 8000618:	4818      	ldr	r0, [pc, #96]	; (800067c <MX_GPIO_Init+0x1a4>)
 800061a:	f000 feef 	bl	80013fc <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800061e:	2301      	movs	r3, #1
 8000620:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000622:	4b18      	ldr	r3, [pc, #96]	; (8000684 <MX_GPIO_Init+0x1ac>)
 8000624:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000626:	2300      	movs	r3, #0
 8000628:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800062a:	f107 031c 	add.w	r3, r7, #28
 800062e:	4619      	mov	r1, r3
 8000630:	4815      	ldr	r0, [pc, #84]	; (8000688 <MX_GPIO_Init+0x1b0>)
 8000632:	f000 fee3 	bl	80013fc <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PDPin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000636:	f24f 0310 	movw	r3, #61456	; 0xf010
 800063a:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800063c:	2301      	movs	r3, #1
 800063e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000640:	2300      	movs	r3, #0
 8000642:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000644:	2300      	movs	r3, #0
 8000646:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000648:	f107 031c 	add.w	r3, r7, #28
 800064c:	4619      	mov	r1, r3
 800064e:	480c      	ldr	r0, [pc, #48]	; (8000680 <MX_GPIO_Init+0x1a8>)
 8000650:	f000 fed4 	bl	80013fc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000654:	2320      	movs	r3, #32
 8000656:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000658:	2300      	movs	r3, #0
 800065a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800065c:	2300      	movs	r3, #0
 800065e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000660:	f107 031c 	add.w	r3, r7, #28
 8000664:	4619      	mov	r1, r3
 8000666:	4806      	ldr	r0, [pc, #24]	; (8000680 <MX_GPIO_Init+0x1a8>)
 8000668:	f000 fec8 	bl	80013fc <HAL_GPIO_Init>

}
 800066c:	bf00      	nop
 800066e:	3730      	adds	r7, #48	; 0x30
 8000670:	46bd      	mov	sp, r7
 8000672:	bd80      	pop	{r7, pc}
 8000674:	40023800 	.word	0x40023800
 8000678:	40021000 	.word	0x40021000
 800067c:	40020800 	.word	0x40020800
 8000680:	40020c00 	.word	0x40020c00
 8000684:	10120000 	.word	0x10120000
 8000688:	40020000 	.word	0x40020000

0800068c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8000690:	4b12      	ldr	r3, [pc, #72]	; (80006dc <MX_I2C1_Init+0x50>)
 8000692:	4a13      	ldr	r2, [pc, #76]	; (80006e0 <MX_I2C1_Init+0x54>)
 8000694:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000696:	4b11      	ldr	r3, [pc, #68]	; (80006dc <MX_I2C1_Init+0x50>)
 8000698:	4a12      	ldr	r2, [pc, #72]	; (80006e4 <MX_I2C1_Init+0x58>)
 800069a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800069c:	4b0f      	ldr	r3, [pc, #60]	; (80006dc <MX_I2C1_Init+0x50>)
 800069e:	2200      	movs	r2, #0
 80006a0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80006a2:	4b0e      	ldr	r3, [pc, #56]	; (80006dc <MX_I2C1_Init+0x50>)
 80006a4:	2200      	movs	r2, #0
 80006a6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80006a8:	4b0c      	ldr	r3, [pc, #48]	; (80006dc <MX_I2C1_Init+0x50>)
 80006aa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80006ae:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80006b0:	4b0a      	ldr	r3, [pc, #40]	; (80006dc <MX_I2C1_Init+0x50>)
 80006b2:	2200      	movs	r2, #0
 80006b4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80006b6:	4b09      	ldr	r3, [pc, #36]	; (80006dc <MX_I2C1_Init+0x50>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80006bc:	4b07      	ldr	r3, [pc, #28]	; (80006dc <MX_I2C1_Init+0x50>)
 80006be:	2200      	movs	r2, #0
 80006c0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80006c2:	4b06      	ldr	r3, [pc, #24]	; (80006dc <MX_I2C1_Init+0x50>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80006c8:	4804      	ldr	r0, [pc, #16]	; (80006dc <MX_I2C1_Init+0x50>)
 80006ca:	f002 fe6f 	bl	80033ac <HAL_I2C_Init>
 80006ce:	4603      	mov	r3, r0
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	d001      	beq.n	80006d8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80006d4:	f000 fa5a 	bl	8000b8c <Error_Handler>
  }

}
 80006d8:	bf00      	nop
 80006da:	bd80      	pop	{r7, pc}
 80006dc:	200000c0 	.word	0x200000c0
 80006e0:	40005400 	.word	0x40005400
 80006e4:	000186a0 	.word	0x000186a0

080006e8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b08a      	sub	sp, #40	; 0x28
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006f0:	f107 0314 	add.w	r3, r7, #20
 80006f4:	2200      	movs	r2, #0
 80006f6:	601a      	str	r2, [r3, #0]
 80006f8:	605a      	str	r2, [r3, #4]
 80006fa:	609a      	str	r2, [r3, #8]
 80006fc:	60da      	str	r2, [r3, #12]
 80006fe:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	681b      	ldr	r3, [r3, #0]
 8000704:	4a19      	ldr	r2, [pc, #100]	; (800076c <HAL_I2C_MspInit+0x84>)
 8000706:	4293      	cmp	r3, r2
 8000708:	d12c      	bne.n	8000764 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800070a:	2300      	movs	r3, #0
 800070c:	613b      	str	r3, [r7, #16]
 800070e:	4b18      	ldr	r3, [pc, #96]	; (8000770 <HAL_I2C_MspInit+0x88>)
 8000710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000712:	4a17      	ldr	r2, [pc, #92]	; (8000770 <HAL_I2C_MspInit+0x88>)
 8000714:	f043 0302 	orr.w	r3, r3, #2
 8000718:	6313      	str	r3, [r2, #48]	; 0x30
 800071a:	4b15      	ldr	r3, [pc, #84]	; (8000770 <HAL_I2C_MspInit+0x88>)
 800071c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800071e:	f003 0302 	and.w	r3, r3, #2
 8000722:	613b      	str	r3, [r7, #16]
 8000724:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000726:	f44f 7310 	mov.w	r3, #576	; 0x240
 800072a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800072c:	2312      	movs	r3, #18
 800072e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000730:	2301      	movs	r3, #1
 8000732:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000734:	2300      	movs	r3, #0
 8000736:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000738:	2304      	movs	r3, #4
 800073a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800073c:	f107 0314 	add.w	r3, r7, #20
 8000740:	4619      	mov	r1, r3
 8000742:	480c      	ldr	r0, [pc, #48]	; (8000774 <HAL_I2C_MspInit+0x8c>)
 8000744:	f000 fe5a 	bl	80013fc <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000748:	2300      	movs	r3, #0
 800074a:	60fb      	str	r3, [r7, #12]
 800074c:	4b08      	ldr	r3, [pc, #32]	; (8000770 <HAL_I2C_MspInit+0x88>)
 800074e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000750:	4a07      	ldr	r2, [pc, #28]	; (8000770 <HAL_I2C_MspInit+0x88>)
 8000752:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000756:	6413      	str	r3, [r2, #64]	; 0x40
 8000758:	4b05      	ldr	r3, [pc, #20]	; (8000770 <HAL_I2C_MspInit+0x88>)
 800075a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800075c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000760:	60fb      	str	r3, [r7, #12]
 8000762:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000764:	bf00      	nop
 8000766:	3728      	adds	r7, #40	; 0x28
 8000768:	46bd      	mov	sp, r7
 800076a:	bd80      	pop	{r7, pc}
 800076c:	40005400 	.word	0x40005400
 8000770:	40023800 	.word	0x40023800
 8000774:	40020400 	.word	0x40020400

08000778 <MX_I2S2_Init>:
I2S_HandleTypeDef hi2s2;
I2S_HandleTypeDef hi2s3;

/* I2S2 init function */
void MX_I2S2_Init(void)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	af00      	add	r7, sp, #0

  hi2s2.Instance = SPI2;
 800077c:	4b12      	ldr	r3, [pc, #72]	; (80007c8 <MX_I2S2_Init+0x50>)
 800077e:	4a13      	ldr	r2, [pc, #76]	; (80007cc <MX_I2S2_Init+0x54>)
 8000780:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_TX;
 8000782:	4b11      	ldr	r3, [pc, #68]	; (80007c8 <MX_I2S2_Init+0x50>)
 8000784:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000788:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 800078a:	4b0f      	ldr	r3, [pc, #60]	; (80007c8 <MX_I2S2_Init+0x50>)
 800078c:	2200      	movs	r2, #0
 800078e:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000790:	4b0d      	ldr	r3, [pc, #52]	; (80007c8 <MX_I2S2_Init+0x50>)
 8000792:	2200      	movs	r2, #0
 8000794:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 8000796:	4b0c      	ldr	r3, [pc, #48]	; (80007c8 <MX_I2S2_Init+0x50>)
 8000798:	2200      	movs	r2, #0
 800079a:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 800079c:	4b0a      	ldr	r3, [pc, #40]	; (80007c8 <MX_I2S2_Init+0x50>)
 800079e:	4a0c      	ldr	r2, [pc, #48]	; (80007d0 <MX_I2S2_Init+0x58>)
 80007a0:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 80007a2:	4b09      	ldr	r3, [pc, #36]	; (80007c8 <MX_I2S2_Init+0x50>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	619a      	str	r2, [r3, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 80007a8:	4b07      	ldr	r3, [pc, #28]	; (80007c8 <MX_I2S2_Init+0x50>)
 80007aa:	2200      	movs	r2, #0
 80007ac:	61da      	str	r2, [r3, #28]
  hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_ENABLE;
 80007ae:	4b06      	ldr	r3, [pc, #24]	; (80007c8 <MX_I2S2_Init+0x50>)
 80007b0:	2201      	movs	r2, #1
 80007b2:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 80007b4:	4804      	ldr	r0, [pc, #16]	; (80007c8 <MX_I2S2_Init+0x50>)
 80007b6:	f002 ffb9 	bl	800372c <HAL_I2S_Init>
 80007ba:	4603      	mov	r3, r0
 80007bc:	2b00      	cmp	r3, #0
 80007be:	d001      	beq.n	80007c4 <MX_I2S2_Init+0x4c>
  {
    Error_Handler();
 80007c0:	f000 f9e4 	bl	8000b8c <Error_Handler>
  }

}
 80007c4:	bf00      	nop
 80007c6:	bd80      	pop	{r7, pc}
 80007c8:	20000114 	.word	0x20000114
 80007cc:	40003800 	.word	0x40003800
 80007d0:	00017700 	.word	0x00017700

080007d4 <MX_I2S3_Init>:
/* I2S3 init function */
void MX_I2S3_Init(void)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	af00      	add	r7, sp, #0

  hi2s3.Instance = SPI3;
 80007d8:	4b13      	ldr	r3, [pc, #76]	; (8000828 <MX_I2S3_Init+0x54>)
 80007da:	4a14      	ldr	r2, [pc, #80]	; (800082c <MX_I2S3_Init+0x58>)
 80007dc:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 80007de:	4b12      	ldr	r3, [pc, #72]	; (8000828 <MX_I2S3_Init+0x54>)
 80007e0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80007e4:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 80007e6:	4b10      	ldr	r3, [pc, #64]	; (8000828 <MX_I2S3_Init+0x54>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 80007ec:	4b0e      	ldr	r3, [pc, #56]	; (8000828 <MX_I2S3_Init+0x54>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 80007f2:	4b0d      	ldr	r3, [pc, #52]	; (8000828 <MX_I2S3_Init+0x54>)
 80007f4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80007f8:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 80007fa:	4b0b      	ldr	r3, [pc, #44]	; (8000828 <MX_I2S3_Init+0x54>)
 80007fc:	4a0c      	ldr	r2, [pc, #48]	; (8000830 <MX_I2S3_Init+0x5c>)
 80007fe:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8000800:	4b09      	ldr	r3, [pc, #36]	; (8000828 <MX_I2S3_Init+0x54>)
 8000802:	2200      	movs	r2, #0
 8000804:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8000806:	4b08      	ldr	r3, [pc, #32]	; (8000828 <MX_I2S3_Init+0x54>)
 8000808:	2200      	movs	r2, #0
 800080a:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 800080c:	4b06      	ldr	r3, [pc, #24]	; (8000828 <MX_I2S3_Init+0x54>)
 800080e:	2200      	movs	r2, #0
 8000810:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8000812:	4805      	ldr	r0, [pc, #20]	; (8000828 <MX_I2S3_Init+0x54>)
 8000814:	f002 ff8a 	bl	800372c <HAL_I2S_Init>
 8000818:	4603      	mov	r3, r0
 800081a:	2b00      	cmp	r3, #0
 800081c:	d001      	beq.n	8000822 <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 800081e:	f000 f9b5 	bl	8000b8c <Error_Handler>
  }

}
 8000822:	bf00      	nop
 8000824:	bd80      	pop	{r7, pc}
 8000826:	bf00      	nop
 8000828:	2000015c 	.word	0x2000015c
 800082c:	40003c00 	.word	0x40003c00
 8000830:	00017700 	.word	0x00017700

08000834 <HAL_I2S_MspInit>:

void HAL_I2S_MspInit(I2S_HandleTypeDef* i2sHandle)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	b08e      	sub	sp, #56	; 0x38
 8000838:	af00      	add	r7, sp, #0
 800083a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800083c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000840:	2200      	movs	r2, #0
 8000842:	601a      	str	r2, [r3, #0]
 8000844:	605a      	str	r2, [r3, #4]
 8000846:	609a      	str	r2, [r3, #8]
 8000848:	60da      	str	r2, [r3, #12]
 800084a:	611a      	str	r2, [r3, #16]
  if(i2sHandle->Instance==SPI2)
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	681b      	ldr	r3, [r3, #0]
 8000850:	4a59      	ldr	r2, [pc, #356]	; (80009b8 <HAL_I2S_MspInit+0x184>)
 8000852:	4293      	cmp	r3, r2
 8000854:	d15b      	bne.n	800090e <HAL_I2S_MspInit+0xda>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* I2S2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000856:	2300      	movs	r3, #0
 8000858:	623b      	str	r3, [r7, #32]
 800085a:	4b58      	ldr	r3, [pc, #352]	; (80009bc <HAL_I2S_MspInit+0x188>)
 800085c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800085e:	4a57      	ldr	r2, [pc, #348]	; (80009bc <HAL_I2S_MspInit+0x188>)
 8000860:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000864:	6413      	str	r3, [r2, #64]	; 0x40
 8000866:	4b55      	ldr	r3, [pc, #340]	; (80009bc <HAL_I2S_MspInit+0x188>)
 8000868:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800086a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800086e:	623b      	str	r3, [r7, #32]
 8000870:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000872:	2300      	movs	r3, #0
 8000874:	61fb      	str	r3, [r7, #28]
 8000876:	4b51      	ldr	r3, [pc, #324]	; (80009bc <HAL_I2S_MspInit+0x188>)
 8000878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800087a:	4a50      	ldr	r2, [pc, #320]	; (80009bc <HAL_I2S_MspInit+0x188>)
 800087c:	f043 0304 	orr.w	r3, r3, #4
 8000880:	6313      	str	r3, [r2, #48]	; 0x30
 8000882:	4b4e      	ldr	r3, [pc, #312]	; (80009bc <HAL_I2S_MspInit+0x188>)
 8000884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000886:	f003 0304 	and.w	r3, r3, #4
 800088a:	61fb      	str	r3, [r7, #28]
 800088c:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800088e:	2300      	movs	r3, #0
 8000890:	61bb      	str	r3, [r7, #24]
 8000892:	4b4a      	ldr	r3, [pc, #296]	; (80009bc <HAL_I2S_MspInit+0x188>)
 8000894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000896:	4a49      	ldr	r2, [pc, #292]	; (80009bc <HAL_I2S_MspInit+0x188>)
 8000898:	f043 0302 	orr.w	r3, r3, #2
 800089c:	6313      	str	r3, [r2, #48]	; 0x30
 800089e:	4b47      	ldr	r3, [pc, #284]	; (80009bc <HAL_I2S_MspInit+0x188>)
 80008a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008a2:	f003 0302 	and.w	r3, r3, #2
 80008a6:	61bb      	str	r3, [r7, #24]
 80008a8:	69bb      	ldr	r3, [r7, #24]
    PC2     ------> I2S2_ext_SD
    PC3     ------> I2S2_SD
    PB10     ------> I2S2_CK
    PB12     ------> I2S2_WS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80008aa:	2304      	movs	r3, #4
 80008ac:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008ae:	2302      	movs	r3, #2
 80008b0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b2:	2300      	movs	r3, #0
 80008b4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008b6:	2300      	movs	r3, #0
 80008b8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_I2S2ext;
 80008ba:	2306      	movs	r3, #6
 80008bc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008be:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008c2:	4619      	mov	r1, r3
 80008c4:	483e      	ldr	r0, [pc, #248]	; (80009c0 <HAL_I2S_MspInit+0x18c>)
 80008c6:	f000 fd99 	bl	80013fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = PDM_OUT_Pin;
 80008ca:	2308      	movs	r3, #8
 80008cc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008ce:	2302      	movs	r3, #2
 80008d0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d2:	2300      	movs	r3, #0
 80008d4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008d6:	2300      	movs	r3, #0
 80008d8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80008da:	2305      	movs	r3, #5
 80008dc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 80008de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008e2:	4619      	mov	r1, r3
 80008e4:	4836      	ldr	r0, [pc, #216]	; (80009c0 <HAL_I2S_MspInit+0x18c>)
 80008e6:	f000 fd89 	bl	80013fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CLK_IN_Pin|GPIO_PIN_12;
 80008ea:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80008ee:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008f0:	2302      	movs	r3, #2
 80008f2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f4:	2300      	movs	r3, #0
 80008f6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008f8:	2300      	movs	r3, #0
 80008fa:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80008fc:	2305      	movs	r3, #5
 80008fe:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000900:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000904:	4619      	mov	r1, r3
 8000906:	482f      	ldr	r0, [pc, #188]	; (80009c4 <HAL_I2S_MspInit+0x190>)
 8000908:	f000 fd78 	bl	80013fc <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 800090c:	e04f      	b.n	80009ae <HAL_I2S_MspInit+0x17a>
  else if(i2sHandle->Instance==SPI3)
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	681b      	ldr	r3, [r3, #0]
 8000912:	4a2d      	ldr	r2, [pc, #180]	; (80009c8 <HAL_I2S_MspInit+0x194>)
 8000914:	4293      	cmp	r3, r2
 8000916:	d14a      	bne.n	80009ae <HAL_I2S_MspInit+0x17a>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000918:	2300      	movs	r3, #0
 800091a:	617b      	str	r3, [r7, #20]
 800091c:	4b27      	ldr	r3, [pc, #156]	; (80009bc <HAL_I2S_MspInit+0x188>)
 800091e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000920:	4a26      	ldr	r2, [pc, #152]	; (80009bc <HAL_I2S_MspInit+0x188>)
 8000922:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000926:	6413      	str	r3, [r2, #64]	; 0x40
 8000928:	4b24      	ldr	r3, [pc, #144]	; (80009bc <HAL_I2S_MspInit+0x188>)
 800092a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800092c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000930:	617b      	str	r3, [r7, #20]
 8000932:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000934:	2300      	movs	r3, #0
 8000936:	613b      	str	r3, [r7, #16]
 8000938:	4b20      	ldr	r3, [pc, #128]	; (80009bc <HAL_I2S_MspInit+0x188>)
 800093a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800093c:	4a1f      	ldr	r2, [pc, #124]	; (80009bc <HAL_I2S_MspInit+0x188>)
 800093e:	f043 0301 	orr.w	r3, r3, #1
 8000942:	6313      	str	r3, [r2, #48]	; 0x30
 8000944:	4b1d      	ldr	r3, [pc, #116]	; (80009bc <HAL_I2S_MspInit+0x188>)
 8000946:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000948:	f003 0301 	and.w	r3, r3, #1
 800094c:	613b      	str	r3, [r7, #16]
 800094e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000950:	2300      	movs	r3, #0
 8000952:	60fb      	str	r3, [r7, #12]
 8000954:	4b19      	ldr	r3, [pc, #100]	; (80009bc <HAL_I2S_MspInit+0x188>)
 8000956:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000958:	4a18      	ldr	r2, [pc, #96]	; (80009bc <HAL_I2S_MspInit+0x188>)
 800095a:	f043 0304 	orr.w	r3, r3, #4
 800095e:	6313      	str	r3, [r2, #48]	; 0x30
 8000960:	4b16      	ldr	r3, [pc, #88]	; (80009bc <HAL_I2S_MspInit+0x188>)
 8000962:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000964:	f003 0304 	and.w	r3, r3, #4
 8000968:	60fb      	str	r3, [r7, #12]
 800096a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 800096c:	2310      	movs	r3, #16
 800096e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000970:	2302      	movs	r3, #2
 8000972:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000974:	2300      	movs	r3, #0
 8000976:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000978:	2300      	movs	r3, #0
 800097a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800097c:	2306      	movs	r3, #6
 800097e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000980:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000984:	4619      	mov	r1, r3
 8000986:	4811      	ldr	r0, [pc, #68]	; (80009cc <HAL_I2S_MspInit+0x198>)
 8000988:	f000 fd38 	bl	80013fc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 800098c:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000990:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000992:	2302      	movs	r3, #2
 8000994:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000996:	2300      	movs	r3, #0
 8000998:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800099a:	2300      	movs	r3, #0
 800099c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800099e:	2306      	movs	r3, #6
 80009a0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009a2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009a6:	4619      	mov	r1, r3
 80009a8:	4805      	ldr	r0, [pc, #20]	; (80009c0 <HAL_I2S_MspInit+0x18c>)
 80009aa:	f000 fd27 	bl	80013fc <HAL_GPIO_Init>
}
 80009ae:	bf00      	nop
 80009b0:	3738      	adds	r7, #56	; 0x38
 80009b2:	46bd      	mov	sp, r7
 80009b4:	bd80      	pop	{r7, pc}
 80009b6:	bf00      	nop
 80009b8:	40003800 	.word	0x40003800
 80009bc:	40023800 	.word	0x40023800
 80009c0:	40020800 	.word	0x40020800
 80009c4:	40020400 	.word	0x40020400
 80009c8:	40003c00 	.word	0x40003c00
 80009cc:	40020000 	.word	0x40020000

080009d0 <Servo_Angle>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void Servo_Angle(int angle){
 80009d0:	b480      	push	{r7}
 80009d2:	b083      	sub	sp, #12
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	6078      	str	r0, [r7, #4]
	if (angle<0){
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	2b00      	cmp	r3, #0
 80009dc:	da01      	bge.n	80009e2 <Servo_Angle+0x12>
		angle = 0;
 80009de:	2300      	movs	r3, #0
 80009e0:	607b      	str	r3, [r7, #4]
	}
	if (angle > 180){
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	2bb4      	cmp	r3, #180	; 0xb4
 80009e6:	dd01      	ble.n	80009ec <Servo_Angle+0x1c>
		angle = 180;
 80009e8:	23b4      	movs	r3, #180	; 0xb4
 80009ea:	607b      	str	r3, [r7, #4]
	}
	angle += 45;
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	332d      	adds	r3, #45	; 0x2d
 80009f0:	607b      	str	r3, [r7, #4]
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, angle);
 80009f2:	4b05      	ldr	r3, [pc, #20]	; (8000a08 <Servo_Angle+0x38>)
 80009f4:	681b      	ldr	r3, [r3, #0]
 80009f6:	687a      	ldr	r2, [r7, #4]
 80009f8:	635a      	str	r2, [r3, #52]	; 0x34
}
 80009fa:	bf00      	nop
 80009fc:	370c      	adds	r7, #12
 80009fe:	46bd      	mov	sp, r7
 8000a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a04:	4770      	bx	lr
 8000a06:	bf00      	nop
 8000a08:	200001fc 	.word	0x200001fc

08000a0c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b082      	sub	sp, #8
 8000a10:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a12:	f000 fb1f 	bl	8001054 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a16:	f000 f837 	bl	8000a88 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a1a:	f7ff fd5d 	bl	80004d8 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000a1e:	f7ff fe35 	bl	800068c <MX_I2C1_Init>
  MX_I2S2_Init();
 8000a22:	f7ff fea9 	bl	8000778 <MX_I2S2_Init>
  MX_I2S3_Init();
 8000a26:	f7ff fed5 	bl	80007d4 <MX_I2S3_Init>
  MX_SPI1_Init();
 8000a2a:	f000 f8c1 	bl	8000bb0 <MX_SPI1_Init>
  MX_USB_HOST_Init();
 8000a2e:	f008 ff2b 	bl	8009888 <MX_USB_HOST_Init>
  MX_TIM1_Init();
 8000a32:	f000 f9e7 	bl	8000e04 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000a36:	2100      	movs	r1, #0
 8000a38:	4812      	ldr	r0, [pc, #72]	; (8000a84 <main+0x78>)
 8000a3a:	f004 fe69 	bl	8005710 <HAL_TIM_PWM_Start>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8000a3e:	f008 ff49 	bl	80098d4 <MX_USB_HOST_Process>

    /* USER CODE BEGIN 3 */
	    MX_USB_HOST_Process();
 8000a42:	f008 ff47 	bl	80098d4 <MX_USB_HOST_Process>
	    for (int i=0; i<=180; i++){
 8000a46:	2300      	movs	r3, #0
 8000a48:	607b      	str	r3, [r7, #4]
 8000a4a:	e008      	b.n	8000a5e <main+0x52>
	    	Servo_Angle(i);
 8000a4c:	6878      	ldr	r0, [r7, #4]
 8000a4e:	f7ff ffbf 	bl	80009d0 <Servo_Angle>
	    	HAL_Delay(10);
 8000a52:	200a      	movs	r0, #10
 8000a54:	f000 fb70 	bl	8001138 <HAL_Delay>
	    for (int i=0; i<=180; i++){
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	3301      	adds	r3, #1
 8000a5c:	607b      	str	r3, [r7, #4]
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	2bb4      	cmp	r3, #180	; 0xb4
 8000a62:	ddf3      	ble.n	8000a4c <main+0x40>
	    }
	    Servo_Angle(0);
 8000a64:	2000      	movs	r0, #0
 8000a66:	f7ff ffb3 	bl	80009d0 <Servo_Angle>
	    HAL_Delay(1000);
 8000a6a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000a6e:	f000 fb63 	bl	8001138 <HAL_Delay>
	    Servo_Angle(180);
 8000a72:	20b4      	movs	r0, #180	; 0xb4
 8000a74:	f7ff ffac 	bl	80009d0 <Servo_Angle>
	    HAL_Delay(5000);
 8000a78:	f241 3088 	movw	r0, #5000	; 0x1388
 8000a7c:	f000 fb5c 	bl	8001138 <HAL_Delay>
    MX_USB_HOST_Process();
 8000a80:	e7dd      	b.n	8000a3e <main+0x32>
 8000a82:	bf00      	nop
 8000a84:	200001fc 	.word	0x200001fc

08000a88 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b09a      	sub	sp, #104	; 0x68
 8000a8c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a8e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000a92:	2230      	movs	r2, #48	; 0x30
 8000a94:	2100      	movs	r1, #0
 8000a96:	4618      	mov	r0, r3
 8000a98:	f009 fa2a 	bl	8009ef0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a9c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	601a      	str	r2, [r3, #0]
 8000aa4:	605a      	str	r2, [r3, #4]
 8000aa6:	609a      	str	r2, [r3, #8]
 8000aa8:	60da      	str	r2, [r3, #12]
 8000aaa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000aac:	f107 030c 	add.w	r3, r7, #12
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	601a      	str	r2, [r3, #0]
 8000ab4:	605a      	str	r2, [r3, #4]
 8000ab6:	609a      	str	r2, [r3, #8]
 8000ab8:	60da      	str	r2, [r3, #12]
 8000aba:	611a      	str	r2, [r3, #16]
 8000abc:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000abe:	2300      	movs	r3, #0
 8000ac0:	60bb      	str	r3, [r7, #8]
 8000ac2:	4b30      	ldr	r3, [pc, #192]	; (8000b84 <SystemClock_Config+0xfc>)
 8000ac4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ac6:	4a2f      	ldr	r2, [pc, #188]	; (8000b84 <SystemClock_Config+0xfc>)
 8000ac8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000acc:	6413      	str	r3, [r2, #64]	; 0x40
 8000ace:	4b2d      	ldr	r3, [pc, #180]	; (8000b84 <SystemClock_Config+0xfc>)
 8000ad0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ad2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ad6:	60bb      	str	r3, [r7, #8]
 8000ad8:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000ada:	2300      	movs	r3, #0
 8000adc:	607b      	str	r3, [r7, #4]
 8000ade:	4b2a      	ldr	r3, [pc, #168]	; (8000b88 <SystemClock_Config+0x100>)
 8000ae0:	681b      	ldr	r3, [r3, #0]
 8000ae2:	4a29      	ldr	r2, [pc, #164]	; (8000b88 <SystemClock_Config+0x100>)
 8000ae4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000ae8:	6013      	str	r3, [r2, #0]
 8000aea:	4b27      	ldr	r3, [pc, #156]	; (8000b88 <SystemClock_Config+0x100>)
 8000aec:	681b      	ldr	r3, [r3, #0]
 8000aee:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000af2:	607b      	str	r3, [r7, #4]
 8000af4:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000af6:	2301      	movs	r3, #1
 8000af8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000afa:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000afe:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b00:	2302      	movs	r3, #2
 8000b02:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000b04:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000b08:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000b0a:	2304      	movs	r3, #4
 8000b0c:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLN = 96;
 8000b0e:	2360      	movs	r3, #96	; 0x60
 8000b10:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV6;
 8000b12:	2306      	movs	r3, #6
 8000b14:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000b16:	2304      	movs	r3, #4
 8000b18:	667b      	str	r3, [r7, #100]	; 0x64
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b1a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000b1e:	4618      	mov	r0, r3
 8000b20:	f003 fb62 	bl	80041e8 <HAL_RCC_OscConfig>
 8000b24:	4603      	mov	r3, r0
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d001      	beq.n	8000b2e <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000b2a:	f000 f82f 	bl	8000b8c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b2e:	230f      	movs	r3, #15
 8000b30:	627b      	str	r3, [r7, #36]	; 0x24
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b32:	2302      	movs	r3, #2
 8000b34:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b36:	2300      	movs	r3, #0
 8000b38:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b3e:	2300      	movs	r3, #0
 8000b40:	637b      	str	r3, [r7, #52]	; 0x34

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000b42:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b46:	2101      	movs	r1, #1
 8000b48:	4618      	mov	r0, r3
 8000b4a:	f003 fe6d 	bl	8004828 <HAL_RCC_ClockConfig>
 8000b4e:	4603      	mov	r3, r0
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d001      	beq.n	8000b58 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8000b54:	f000 f81a 	bl	8000b8c <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000b58:	2301      	movs	r3, #1
 8000b5a:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 200;
 8000b5c:	23c8      	movs	r3, #200	; 0xc8
 8000b5e:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLLI2S.PLLI2SM = 5;
 8000b60:	2305      	movs	r3, #5
 8000b62:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000b64:	2302      	movs	r3, #2
 8000b66:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000b68:	f107 030c 	add.w	r3, r7, #12
 8000b6c:	4618      	mov	r0, r3
 8000b6e:	f004 f8e1 	bl	8004d34 <HAL_RCCEx_PeriphCLKConfig>
 8000b72:	4603      	mov	r3, r0
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d001      	beq.n	8000b7c <SystemClock_Config+0xf4>
  {
    Error_Handler();
 8000b78:	f000 f808 	bl	8000b8c <Error_Handler>
  }
}
 8000b7c:	bf00      	nop
 8000b7e:	3768      	adds	r7, #104	; 0x68
 8000b80:	46bd      	mov	sp, r7
 8000b82:	bd80      	pop	{r7, pc}
 8000b84:	40023800 	.word	0x40023800
 8000b88:	40007000 	.word	0x40007000

08000b8c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b8c:	b480      	push	{r7}
 8000b8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000b90:	bf00      	nop
 8000b92:	46bd      	mov	sp, r7
 8000b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b98:	4770      	bx	lr

08000b9a <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
 8000b9a:	b480      	push	{r7}
 8000b9c:	b083      	sub	sp, #12
 8000b9e:	af00      	add	r7, sp, #0
 8000ba0:	6078      	str	r0, [r7, #4]
 8000ba2:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     tex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
 8000ba4:	bf00      	nop
 8000ba6:	370c      	adds	r7, #12
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bae:	4770      	bx	lr

08000bb0 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	af00      	add	r7, sp, #0

  hspi1.Instance = SPI1;
 8000bb4:	4b17      	ldr	r3, [pc, #92]	; (8000c14 <MX_SPI1_Init+0x64>)
 8000bb6:	4a18      	ldr	r2, [pc, #96]	; (8000c18 <MX_SPI1_Init+0x68>)
 8000bb8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000bba:	4b16      	ldr	r3, [pc, #88]	; (8000c14 <MX_SPI1_Init+0x64>)
 8000bbc:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000bc0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000bc2:	4b14      	ldr	r3, [pc, #80]	; (8000c14 <MX_SPI1_Init+0x64>)
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000bc8:	4b12      	ldr	r3, [pc, #72]	; (8000c14 <MX_SPI1_Init+0x64>)
 8000bca:	2200      	movs	r2, #0
 8000bcc:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000bce:	4b11      	ldr	r3, [pc, #68]	; (8000c14 <MX_SPI1_Init+0x64>)
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000bd4:	4b0f      	ldr	r3, [pc, #60]	; (8000c14 <MX_SPI1_Init+0x64>)
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000bda:	4b0e      	ldr	r3, [pc, #56]	; (8000c14 <MX_SPI1_Init+0x64>)
 8000bdc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000be0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000be2:	4b0c      	ldr	r3, [pc, #48]	; (8000c14 <MX_SPI1_Init+0x64>)
 8000be4:	2200      	movs	r2, #0
 8000be6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000be8:	4b0a      	ldr	r3, [pc, #40]	; (8000c14 <MX_SPI1_Init+0x64>)
 8000bea:	2200      	movs	r2, #0
 8000bec:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000bee:	4b09      	ldr	r3, [pc, #36]	; (8000c14 <MX_SPI1_Init+0x64>)
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000bf4:	4b07      	ldr	r3, [pc, #28]	; (8000c14 <MX_SPI1_Init+0x64>)
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000bfa:	4b06      	ldr	r3, [pc, #24]	; (8000c14 <MX_SPI1_Init+0x64>)
 8000bfc:	220a      	movs	r2, #10
 8000bfe:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000c00:	4804      	ldr	r0, [pc, #16]	; (8000c14 <MX_SPI1_Init+0x64>)
 8000c02:	f004 fb09 	bl	8005218 <HAL_SPI_Init>
 8000c06:	4603      	mov	r3, r0
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d001      	beq.n	8000c10 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000c0c:	f7ff ffbe 	bl	8000b8c <Error_Handler>
  }

}
 8000c10:	bf00      	nop
 8000c12:	bd80      	pop	{r7, pc}
 8000c14:	200001a4 	.word	0x200001a4
 8000c18:	40013000 	.word	0x40013000

08000c1c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b08a      	sub	sp, #40	; 0x28
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c24:	f107 0314 	add.w	r3, r7, #20
 8000c28:	2200      	movs	r2, #0
 8000c2a:	601a      	str	r2, [r3, #0]
 8000c2c:	605a      	str	r2, [r3, #4]
 8000c2e:	609a      	str	r2, [r3, #8]
 8000c30:	60da      	str	r2, [r3, #12]
 8000c32:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	4a19      	ldr	r2, [pc, #100]	; (8000ca0 <HAL_SPI_MspInit+0x84>)
 8000c3a:	4293      	cmp	r3, r2
 8000c3c:	d12b      	bne.n	8000c96 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000c3e:	2300      	movs	r3, #0
 8000c40:	613b      	str	r3, [r7, #16]
 8000c42:	4b18      	ldr	r3, [pc, #96]	; (8000ca4 <HAL_SPI_MspInit+0x88>)
 8000c44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c46:	4a17      	ldr	r2, [pc, #92]	; (8000ca4 <HAL_SPI_MspInit+0x88>)
 8000c48:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000c4c:	6453      	str	r3, [r2, #68]	; 0x44
 8000c4e:	4b15      	ldr	r3, [pc, #84]	; (8000ca4 <HAL_SPI_MspInit+0x88>)
 8000c50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c52:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000c56:	613b      	str	r3, [r7, #16]
 8000c58:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	60fb      	str	r3, [r7, #12]
 8000c5e:	4b11      	ldr	r3, [pc, #68]	; (8000ca4 <HAL_SPI_MspInit+0x88>)
 8000c60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c62:	4a10      	ldr	r2, [pc, #64]	; (8000ca4 <HAL_SPI_MspInit+0x88>)
 8000c64:	f043 0301 	orr.w	r3, r3, #1
 8000c68:	6313      	str	r3, [r2, #48]	; 0x30
 8000c6a:	4b0e      	ldr	r3, [pc, #56]	; (8000ca4 <HAL_SPI_MspInit+0x88>)
 8000c6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c6e:	f003 0301 	and.w	r3, r3, #1
 8000c72:	60fb      	str	r3, [r7, #12]
 8000c74:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000c76:	23e0      	movs	r3, #224	; 0xe0
 8000c78:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c7a:	2302      	movs	r3, #2
 8000c7c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c7e:	2300      	movs	r3, #0
 8000c80:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c82:	2303      	movs	r3, #3
 8000c84:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000c86:	2305      	movs	r3, #5
 8000c88:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c8a:	f107 0314 	add.w	r3, r7, #20
 8000c8e:	4619      	mov	r1, r3
 8000c90:	4805      	ldr	r0, [pc, #20]	; (8000ca8 <HAL_SPI_MspInit+0x8c>)
 8000c92:	f000 fbb3 	bl	80013fc <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8000c96:	bf00      	nop
 8000c98:	3728      	adds	r7, #40	; 0x28
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	bd80      	pop	{r7, pc}
 8000c9e:	bf00      	nop
 8000ca0:	40013000 	.word	0x40013000
 8000ca4:	40023800 	.word	0x40023800
 8000ca8:	40020000 	.word	0x40020000

08000cac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b082      	sub	sp, #8
 8000cb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	607b      	str	r3, [r7, #4]
 8000cb6:	4b10      	ldr	r3, [pc, #64]	; (8000cf8 <HAL_MspInit+0x4c>)
 8000cb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cba:	4a0f      	ldr	r2, [pc, #60]	; (8000cf8 <HAL_MspInit+0x4c>)
 8000cbc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000cc0:	6453      	str	r3, [r2, #68]	; 0x44
 8000cc2:	4b0d      	ldr	r3, [pc, #52]	; (8000cf8 <HAL_MspInit+0x4c>)
 8000cc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cc6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000cca:	607b      	str	r3, [r7, #4]
 8000ccc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cce:	2300      	movs	r3, #0
 8000cd0:	603b      	str	r3, [r7, #0]
 8000cd2:	4b09      	ldr	r3, [pc, #36]	; (8000cf8 <HAL_MspInit+0x4c>)
 8000cd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cd6:	4a08      	ldr	r2, [pc, #32]	; (8000cf8 <HAL_MspInit+0x4c>)
 8000cd8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000cdc:	6413      	str	r3, [r2, #64]	; 0x40
 8000cde:	4b06      	ldr	r3, [pc, #24]	; (8000cf8 <HAL_MspInit+0x4c>)
 8000ce0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ce2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ce6:	603b      	str	r3, [r7, #0]
 8000ce8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000cea:	2007      	movs	r0, #7
 8000cec:	f000 fb16 	bl	800131c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cf0:	bf00      	nop
 8000cf2:	3708      	adds	r7, #8
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	bd80      	pop	{r7, pc}
 8000cf8:	40023800 	.word	0x40023800

08000cfc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000d00:	bf00      	nop
 8000d02:	46bd      	mov	sp, r7
 8000d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d08:	4770      	bx	lr

08000d0a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d0a:	b480      	push	{r7}
 8000d0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d0e:	e7fe      	b.n	8000d0e <HardFault_Handler+0x4>

08000d10 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d10:	b480      	push	{r7}
 8000d12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d14:	e7fe      	b.n	8000d14 <MemManage_Handler+0x4>

08000d16 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d16:	b480      	push	{r7}
 8000d18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d1a:	e7fe      	b.n	8000d1a <BusFault_Handler+0x4>

08000d1c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d20:	e7fe      	b.n	8000d20 <UsageFault_Handler+0x4>

08000d22 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d22:	b480      	push	{r7}
 8000d24:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d26:	bf00      	nop
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2e:	4770      	bx	lr

08000d30 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d30:	b480      	push	{r7}
 8000d32:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d34:	bf00      	nop
 8000d36:	46bd      	mov	sp, r7
 8000d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3c:	4770      	bx	lr

08000d3e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d3e:	b480      	push	{r7}
 8000d40:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d42:	bf00      	nop
 8000d44:	46bd      	mov	sp, r7
 8000d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4a:	4770      	bx	lr

08000d4c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d50:	f000 f9d2 	bl	80010f8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d54:	bf00      	nop
 8000d56:	bd80      	pop	{r7, pc}

08000d58 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000d5c:	4802      	ldr	r0, [pc, #8]	; (8000d68 <OTG_FS_IRQHandler+0x10>)
 8000d5e:	f001 f8c3 	bl	8001ee8 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000d62:	bf00      	nop
 8000d64:	bd80      	pop	{r7, pc}
 8000d66:	bf00      	nop
 8000d68:	20000618 	.word	0x20000618

08000d6c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b086      	sub	sp, #24
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d74:	4a14      	ldr	r2, [pc, #80]	; (8000dc8 <_sbrk+0x5c>)
 8000d76:	4b15      	ldr	r3, [pc, #84]	; (8000dcc <_sbrk+0x60>)
 8000d78:	1ad3      	subs	r3, r2, r3
 8000d7a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d7c:	697b      	ldr	r3, [r7, #20]
 8000d7e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d80:	4b13      	ldr	r3, [pc, #76]	; (8000dd0 <_sbrk+0x64>)
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d102      	bne.n	8000d8e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d88:	4b11      	ldr	r3, [pc, #68]	; (8000dd0 <_sbrk+0x64>)
 8000d8a:	4a12      	ldr	r2, [pc, #72]	; (8000dd4 <_sbrk+0x68>)
 8000d8c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d8e:	4b10      	ldr	r3, [pc, #64]	; (8000dd0 <_sbrk+0x64>)
 8000d90:	681a      	ldr	r2, [r3, #0]
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	4413      	add	r3, r2
 8000d96:	693a      	ldr	r2, [r7, #16]
 8000d98:	429a      	cmp	r2, r3
 8000d9a:	d207      	bcs.n	8000dac <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d9c:	f009 f86e 	bl	8009e7c <__errno>
 8000da0:	4602      	mov	r2, r0
 8000da2:	230c      	movs	r3, #12
 8000da4:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8000da6:	f04f 33ff 	mov.w	r3, #4294967295
 8000daa:	e009      	b.n	8000dc0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000dac:	4b08      	ldr	r3, [pc, #32]	; (8000dd0 <_sbrk+0x64>)
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000db2:	4b07      	ldr	r3, [pc, #28]	; (8000dd0 <_sbrk+0x64>)
 8000db4:	681a      	ldr	r2, [r3, #0]
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	4413      	add	r3, r2
 8000dba:	4a05      	ldr	r2, [pc, #20]	; (8000dd0 <_sbrk+0x64>)
 8000dbc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000dbe:	68fb      	ldr	r3, [r7, #12]
}
 8000dc0:	4618      	mov	r0, r3
 8000dc2:	3718      	adds	r7, #24
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	bd80      	pop	{r7, pc}
 8000dc8:	20020000 	.word	0x20020000
 8000dcc:	00000400 	.word	0x00000400
 8000dd0:	200000ac 	.word	0x200000ac
 8000dd4:	200008e0 	.word	0x200008e0

08000dd8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000dd8:	b480      	push	{r7}
 8000dda:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ddc:	4b08      	ldr	r3, [pc, #32]	; (8000e00 <SystemInit+0x28>)
 8000dde:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000de2:	4a07      	ldr	r2, [pc, #28]	; (8000e00 <SystemInit+0x28>)
 8000de4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000de8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000dec:	4b04      	ldr	r3, [pc, #16]	; (8000e00 <SystemInit+0x28>)
 8000dee:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000df2:	609a      	str	r2, [r3, #8]
#endif
}
 8000df4:	bf00      	nop
 8000df6:	46bd      	mov	sp, r7
 8000df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfc:	4770      	bx	lr
 8000dfe:	bf00      	nop
 8000e00:	e000ed00 	.word	0xe000ed00

08000e04 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b096      	sub	sp, #88	; 0x58
 8000e08:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e0a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000e0e:	2200      	movs	r2, #0
 8000e10:	601a      	str	r2, [r3, #0]
 8000e12:	605a      	str	r2, [r3, #4]
 8000e14:	609a      	str	r2, [r3, #8]
 8000e16:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e18:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	601a      	str	r2, [r3, #0]
 8000e20:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000e22:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e26:	2200      	movs	r2, #0
 8000e28:	601a      	str	r2, [r3, #0]
 8000e2a:	605a      	str	r2, [r3, #4]
 8000e2c:	609a      	str	r2, [r3, #8]
 8000e2e:	60da      	str	r2, [r3, #12]
 8000e30:	611a      	str	r2, [r3, #16]
 8000e32:	615a      	str	r2, [r3, #20]
 8000e34:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000e36:	1d3b      	adds	r3, r7, #4
 8000e38:	2220      	movs	r2, #32
 8000e3a:	2100      	movs	r1, #0
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	f009 f857 	bl	8009ef0 <memset>

  htim1.Instance = TIM1;
 8000e42:	4b3f      	ldr	r3, [pc, #252]	; (8000f40 <MX_TIM1_Init+0x13c>)
 8000e44:	4a3f      	ldr	r2, [pc, #252]	; (8000f44 <MX_TIM1_Init+0x140>)
 8000e46:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 355;
 8000e48:	4b3d      	ldr	r3, [pc, #244]	; (8000f40 <MX_TIM1_Init+0x13c>)
 8000e4a:	f240 1263 	movw	r2, #355	; 0x163
 8000e4e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e50:	4b3b      	ldr	r3, [pc, #236]	; (8000f40 <MX_TIM1_Init+0x13c>)
 8000e52:	2200      	movs	r2, #0
 8000e54:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1799;
 8000e56:	4b3a      	ldr	r3, [pc, #232]	; (8000f40 <MX_TIM1_Init+0x13c>)
 8000e58:	f240 7207 	movw	r2, #1799	; 0x707
 8000e5c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e5e:	4b38      	ldr	r3, [pc, #224]	; (8000f40 <MX_TIM1_Init+0x13c>)
 8000e60:	2200      	movs	r2, #0
 8000e62:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000e64:	4b36      	ldr	r3, [pc, #216]	; (8000f40 <MX_TIM1_Init+0x13c>)
 8000e66:	2200      	movs	r2, #0
 8000e68:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e6a:	4b35      	ldr	r3, [pc, #212]	; (8000f40 <MX_TIM1_Init+0x13c>)
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000e70:	4833      	ldr	r0, [pc, #204]	; (8000f40 <MX_TIM1_Init+0x13c>)
 8000e72:	f004 faff 	bl	8005474 <HAL_TIM_Base_Init>
 8000e76:	4603      	mov	r3, r0
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d001      	beq.n	8000e80 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8000e7c:	f7ff fe86 	bl	8000b8c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e80:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e84:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000e86:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000e8a:	4619      	mov	r1, r3
 8000e8c:	482c      	ldr	r0, [pc, #176]	; (8000f40 <MX_TIM1_Init+0x13c>)
 8000e8e:	f004 fe9d 	bl	8005bcc <HAL_TIM_ConfigClockSource>
 8000e92:	4603      	mov	r3, r0
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d001      	beq.n	8000e9c <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8000e98:	f7ff fe78 	bl	8000b8c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000e9c:	4828      	ldr	r0, [pc, #160]	; (8000f40 <MX_TIM1_Init+0x13c>)
 8000e9e:	f004 fb8b 	bl	80055b8 <HAL_TIM_PWM_Init>
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d001      	beq.n	8000eac <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8000ea8:	f7ff fe70 	bl	8000b8c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000eac:	2300      	movs	r3, #0
 8000eae:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000eb4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000eb8:	4619      	mov	r1, r3
 8000eba:	4821      	ldr	r0, [pc, #132]	; (8000f40 <MX_TIM1_Init+0x13c>)
 8000ebc:	f005 fd1a 	bl	80068f4 <HAL_TIMEx_MasterConfigSynchronization>
 8000ec0:	4603      	mov	r3, r0
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d001      	beq.n	8000eca <MX_TIM1_Init+0xc6>
  {
    Error_Handler();
 8000ec6:	f7ff fe61 	bl	8000b8c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000eca:	2360      	movs	r3, #96	; 0x60
 8000ecc:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8000ece:	2300      	movs	r3, #0
 8000ed0:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000eda:	2300      	movs	r3, #0
 8000edc:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000ede:	2300      	movs	r3, #0
 8000ee0:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000ee6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000eea:	2200      	movs	r2, #0
 8000eec:	4619      	mov	r1, r3
 8000eee:	4814      	ldr	r0, [pc, #80]	; (8000f40 <MX_TIM1_Init+0x13c>)
 8000ef0:	f004 fcc2 	bl	8005878 <HAL_TIM_PWM_ConfigChannel>
 8000ef4:	4603      	mov	r3, r0
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d001      	beq.n	8000efe <MX_TIM1_Init+0xfa>
  {
    Error_Handler();
 8000efa:	f7ff fe47 	bl	8000b8c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000efe:	2300      	movs	r3, #0
 8000f00:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000f02:	2300      	movs	r3, #0
 8000f04:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000f06:	2300      	movs	r3, #0
 8000f08:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000f0e:	2300      	movs	r3, #0
 8000f10:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000f12:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f16:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000f18:	2300      	movs	r3, #0
 8000f1a:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000f1c:	1d3b      	adds	r3, r7, #4
 8000f1e:	4619      	mov	r1, r3
 8000f20:	4807      	ldr	r0, [pc, #28]	; (8000f40 <MX_TIM1_Init+0x13c>)
 8000f22:	f005 fda5 	bl	8006a70 <HAL_TIMEx_ConfigBreakDeadTime>
 8000f26:	4603      	mov	r3, r0
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d001      	beq.n	8000f30 <MX_TIM1_Init+0x12c>
  {
    Error_Handler();
 8000f2c:	f7ff fe2e 	bl	8000b8c <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim1);
 8000f30:	4803      	ldr	r0, [pc, #12]	; (8000f40 <MX_TIM1_Init+0x13c>)
 8000f32:	f000 f82b 	bl	8000f8c <HAL_TIM_MspPostInit>

}
 8000f36:	bf00      	nop
 8000f38:	3758      	adds	r7, #88	; 0x58
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	bd80      	pop	{r7, pc}
 8000f3e:	bf00      	nop
 8000f40:	200001fc 	.word	0x200001fc
 8000f44:	40010000 	.word	0x40010000

08000f48 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	b085      	sub	sp, #20
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	4a0b      	ldr	r2, [pc, #44]	; (8000f84 <HAL_TIM_Base_MspInit+0x3c>)
 8000f56:	4293      	cmp	r3, r2
 8000f58:	d10d      	bne.n	8000f76 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	60fb      	str	r3, [r7, #12]
 8000f5e:	4b0a      	ldr	r3, [pc, #40]	; (8000f88 <HAL_TIM_Base_MspInit+0x40>)
 8000f60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f62:	4a09      	ldr	r2, [pc, #36]	; (8000f88 <HAL_TIM_Base_MspInit+0x40>)
 8000f64:	f043 0301 	orr.w	r3, r3, #1
 8000f68:	6453      	str	r3, [r2, #68]	; 0x44
 8000f6a:	4b07      	ldr	r3, [pc, #28]	; (8000f88 <HAL_TIM_Base_MspInit+0x40>)
 8000f6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f6e:	f003 0301 	and.w	r3, r3, #1
 8000f72:	60fb      	str	r3, [r7, #12]
 8000f74:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8000f76:	bf00      	nop
 8000f78:	3714      	adds	r7, #20
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f80:	4770      	bx	lr
 8000f82:	bf00      	nop
 8000f84:	40010000 	.word	0x40010000
 8000f88:	40023800 	.word	0x40023800

08000f8c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b088      	sub	sp, #32
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f94:	f107 030c 	add.w	r3, r7, #12
 8000f98:	2200      	movs	r2, #0
 8000f9a:	601a      	str	r2, [r3, #0]
 8000f9c:	605a      	str	r2, [r3, #4]
 8000f9e:	609a      	str	r2, [r3, #8]
 8000fa0:	60da      	str	r2, [r3, #12]
 8000fa2:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	4a12      	ldr	r2, [pc, #72]	; (8000ff4 <HAL_TIM_MspPostInit+0x68>)
 8000faa:	4293      	cmp	r3, r2
 8000fac:	d11e      	bne.n	8000fec <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fae:	2300      	movs	r3, #0
 8000fb0:	60bb      	str	r3, [r7, #8]
 8000fb2:	4b11      	ldr	r3, [pc, #68]	; (8000ff8 <HAL_TIM_MspPostInit+0x6c>)
 8000fb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fb6:	4a10      	ldr	r2, [pc, #64]	; (8000ff8 <HAL_TIM_MspPostInit+0x6c>)
 8000fb8:	f043 0301 	orr.w	r3, r3, #1
 8000fbc:	6313      	str	r3, [r2, #48]	; 0x30
 8000fbe:	4b0e      	ldr	r3, [pc, #56]	; (8000ff8 <HAL_TIM_MspPostInit+0x6c>)
 8000fc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fc2:	f003 0301 	and.w	r3, r3, #1
 8000fc6:	60bb      	str	r3, [r7, #8]
 8000fc8:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000fca:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000fce:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fd0:	2302      	movs	r3, #2
 8000fd2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fd8:	2300      	movs	r3, #0
 8000fda:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000fdc:	2301      	movs	r3, #1
 8000fde:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fe0:	f107 030c 	add.w	r3, r7, #12
 8000fe4:	4619      	mov	r1, r3
 8000fe6:	4805      	ldr	r0, [pc, #20]	; (8000ffc <HAL_TIM_MspPostInit+0x70>)
 8000fe8:	f000 fa08 	bl	80013fc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000fec:	bf00      	nop
 8000fee:	3720      	adds	r7, #32
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	bd80      	pop	{r7, pc}
 8000ff4:	40010000 	.word	0x40010000
 8000ff8:	40023800 	.word	0x40023800
 8000ffc:	40020000 	.word	0x40020000

08001000 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001000:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001038 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001004:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001006:	e003      	b.n	8001010 <LoopCopyDataInit>

08001008 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001008:	4b0c      	ldr	r3, [pc, #48]	; (800103c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800100a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800100c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800100e:	3104      	adds	r1, #4

08001010 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001010:	480b      	ldr	r0, [pc, #44]	; (8001040 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001012:	4b0c      	ldr	r3, [pc, #48]	; (8001044 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001014:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001016:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001018:	d3f6      	bcc.n	8001008 <CopyDataInit>
  ldr  r2, =_sbss
 800101a:	4a0b      	ldr	r2, [pc, #44]	; (8001048 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800101c:	e002      	b.n	8001024 <LoopFillZerobss>

0800101e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800101e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001020:	f842 3b04 	str.w	r3, [r2], #4

08001024 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001024:	4b09      	ldr	r3, [pc, #36]	; (800104c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001026:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001028:	d3f9      	bcc.n	800101e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800102a:	f7ff fed5 	bl	8000dd8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800102e:	f008 ff2b 	bl	8009e88 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001032:	f7ff fceb 	bl	8000a0c <main>
  bx  lr    
 8001036:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001038:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 800103c:	0800a2f8 	.word	0x0800a2f8
  ldr  r0, =_sdata
 8001040:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001044:	20000090 	.word	0x20000090
  ldr  r2, =_sbss
 8001048:	20000090 	.word	0x20000090
  ldr  r3, = _ebss
 800104c:	200008e0 	.word	0x200008e0

08001050 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001050:	e7fe      	b.n	8001050 <ADC_IRQHandler>
	...

08001054 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001058:	4b0e      	ldr	r3, [pc, #56]	; (8001094 <HAL_Init+0x40>)
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	4a0d      	ldr	r2, [pc, #52]	; (8001094 <HAL_Init+0x40>)
 800105e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001062:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001064:	4b0b      	ldr	r3, [pc, #44]	; (8001094 <HAL_Init+0x40>)
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	4a0a      	ldr	r2, [pc, #40]	; (8001094 <HAL_Init+0x40>)
 800106a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800106e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001070:	4b08      	ldr	r3, [pc, #32]	; (8001094 <HAL_Init+0x40>)
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	4a07      	ldr	r2, [pc, #28]	; (8001094 <HAL_Init+0x40>)
 8001076:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800107a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800107c:	2003      	movs	r0, #3
 800107e:	f000 f94d 	bl	800131c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001082:	2000      	movs	r0, #0
 8001084:	f000 f808 	bl	8001098 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001088:	f7ff fe10 	bl	8000cac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800108c:	2300      	movs	r3, #0
}
 800108e:	4618      	mov	r0, r3
 8001090:	bd80      	pop	{r7, pc}
 8001092:	bf00      	nop
 8001094:	40023c00 	.word	0x40023c00

08001098 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b082      	sub	sp, #8
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80010a0:	4b12      	ldr	r3, [pc, #72]	; (80010ec <HAL_InitTick+0x54>)
 80010a2:	681a      	ldr	r2, [r3, #0]
 80010a4:	4b12      	ldr	r3, [pc, #72]	; (80010f0 <HAL_InitTick+0x58>)
 80010a6:	781b      	ldrb	r3, [r3, #0]
 80010a8:	4619      	mov	r1, r3
 80010aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010ae:	fbb3 f3f1 	udiv	r3, r3, r1
 80010b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80010b6:	4618      	mov	r0, r3
 80010b8:	f000 f994 	bl	80013e4 <HAL_SYSTICK_Config>
 80010bc:	4603      	mov	r3, r0
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d001      	beq.n	80010c6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80010c2:	2301      	movs	r3, #1
 80010c4:	e00e      	b.n	80010e4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	2b0f      	cmp	r3, #15
 80010ca:	d80a      	bhi.n	80010e2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010cc:	2200      	movs	r2, #0
 80010ce:	6879      	ldr	r1, [r7, #4]
 80010d0:	f04f 30ff 	mov.w	r0, #4294967295
 80010d4:	f000 f942 	bl	800135c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80010d8:	4a06      	ldr	r2, [pc, #24]	; (80010f4 <HAL_InitTick+0x5c>)
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80010de:	2300      	movs	r3, #0
 80010e0:	e000      	b.n	80010e4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80010e2:	2301      	movs	r3, #1
}
 80010e4:	4618      	mov	r0, r3
 80010e6:	3708      	adds	r7, #8
 80010e8:	46bd      	mov	sp, r7
 80010ea:	bd80      	pop	{r7, pc}
 80010ec:	20000000 	.word	0x20000000
 80010f0:	20000008 	.word	0x20000008
 80010f4:	20000004 	.word	0x20000004

080010f8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010f8:	b480      	push	{r7}
 80010fa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80010fc:	4b06      	ldr	r3, [pc, #24]	; (8001118 <HAL_IncTick+0x20>)
 80010fe:	781b      	ldrb	r3, [r3, #0]
 8001100:	461a      	mov	r2, r3
 8001102:	4b06      	ldr	r3, [pc, #24]	; (800111c <HAL_IncTick+0x24>)
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	4413      	add	r3, r2
 8001108:	4a04      	ldr	r2, [pc, #16]	; (800111c <HAL_IncTick+0x24>)
 800110a:	6013      	str	r3, [r2, #0]
}
 800110c:	bf00      	nop
 800110e:	46bd      	mov	sp, r7
 8001110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001114:	4770      	bx	lr
 8001116:	bf00      	nop
 8001118:	20000008 	.word	0x20000008
 800111c:	2000023c 	.word	0x2000023c

08001120 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001120:	b480      	push	{r7}
 8001122:	af00      	add	r7, sp, #0
  return uwTick;
 8001124:	4b03      	ldr	r3, [pc, #12]	; (8001134 <HAL_GetTick+0x14>)
 8001126:	681b      	ldr	r3, [r3, #0]
}
 8001128:	4618      	mov	r0, r3
 800112a:	46bd      	mov	sp, r7
 800112c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001130:	4770      	bx	lr
 8001132:	bf00      	nop
 8001134:	2000023c 	.word	0x2000023c

08001138 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b084      	sub	sp, #16
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001140:	f7ff ffee 	bl	8001120 <HAL_GetTick>
 8001144:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800114a:	68fb      	ldr	r3, [r7, #12]
 800114c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001150:	d005      	beq.n	800115e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001152:	4b09      	ldr	r3, [pc, #36]	; (8001178 <HAL_Delay+0x40>)
 8001154:	781b      	ldrb	r3, [r3, #0]
 8001156:	461a      	mov	r2, r3
 8001158:	68fb      	ldr	r3, [r7, #12]
 800115a:	4413      	add	r3, r2
 800115c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800115e:	bf00      	nop
 8001160:	f7ff ffde 	bl	8001120 <HAL_GetTick>
 8001164:	4602      	mov	r2, r0
 8001166:	68bb      	ldr	r3, [r7, #8]
 8001168:	1ad3      	subs	r3, r2, r3
 800116a:	68fa      	ldr	r2, [r7, #12]
 800116c:	429a      	cmp	r2, r3
 800116e:	d8f7      	bhi.n	8001160 <HAL_Delay+0x28>
  {
  }
}
 8001170:	bf00      	nop
 8001172:	3710      	adds	r7, #16
 8001174:	46bd      	mov	sp, r7
 8001176:	bd80      	pop	{r7, pc}
 8001178:	20000008 	.word	0x20000008

0800117c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800117c:	b480      	push	{r7}
 800117e:	b085      	sub	sp, #20
 8001180:	af00      	add	r7, sp, #0
 8001182:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	f003 0307 	and.w	r3, r3, #7
 800118a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800118c:	4b0c      	ldr	r3, [pc, #48]	; (80011c0 <__NVIC_SetPriorityGrouping+0x44>)
 800118e:	68db      	ldr	r3, [r3, #12]
 8001190:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001192:	68ba      	ldr	r2, [r7, #8]
 8001194:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001198:	4013      	ands	r3, r2
 800119a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800119c:	68fb      	ldr	r3, [r7, #12]
 800119e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80011a0:	68bb      	ldr	r3, [r7, #8]
 80011a2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80011a4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80011a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80011ac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80011ae:	4a04      	ldr	r2, [pc, #16]	; (80011c0 <__NVIC_SetPriorityGrouping+0x44>)
 80011b0:	68bb      	ldr	r3, [r7, #8]
 80011b2:	60d3      	str	r3, [r2, #12]
}
 80011b4:	bf00      	nop
 80011b6:	3714      	adds	r7, #20
 80011b8:	46bd      	mov	sp, r7
 80011ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011be:	4770      	bx	lr
 80011c0:	e000ed00 	.word	0xe000ed00

080011c4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80011c4:	b480      	push	{r7}
 80011c6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011c8:	4b04      	ldr	r3, [pc, #16]	; (80011dc <__NVIC_GetPriorityGrouping+0x18>)
 80011ca:	68db      	ldr	r3, [r3, #12]
 80011cc:	0a1b      	lsrs	r3, r3, #8
 80011ce:	f003 0307 	and.w	r3, r3, #7
}
 80011d2:	4618      	mov	r0, r3
 80011d4:	46bd      	mov	sp, r7
 80011d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011da:	4770      	bx	lr
 80011dc:	e000ed00 	.word	0xe000ed00

080011e0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011e0:	b480      	push	{r7}
 80011e2:	b083      	sub	sp, #12
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	4603      	mov	r3, r0
 80011e8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	db0b      	blt.n	800120a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80011f2:	79fb      	ldrb	r3, [r7, #7]
 80011f4:	f003 021f 	and.w	r2, r3, #31
 80011f8:	4907      	ldr	r1, [pc, #28]	; (8001218 <__NVIC_EnableIRQ+0x38>)
 80011fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011fe:	095b      	lsrs	r3, r3, #5
 8001200:	2001      	movs	r0, #1
 8001202:	fa00 f202 	lsl.w	r2, r0, r2
 8001206:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800120a:	bf00      	nop
 800120c:	370c      	adds	r7, #12
 800120e:	46bd      	mov	sp, r7
 8001210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001214:	4770      	bx	lr
 8001216:	bf00      	nop
 8001218:	e000e100 	.word	0xe000e100

0800121c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800121c:	b480      	push	{r7}
 800121e:	b083      	sub	sp, #12
 8001220:	af00      	add	r7, sp, #0
 8001222:	4603      	mov	r3, r0
 8001224:	6039      	str	r1, [r7, #0]
 8001226:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001228:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800122c:	2b00      	cmp	r3, #0
 800122e:	db0a      	blt.n	8001246 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001230:	683b      	ldr	r3, [r7, #0]
 8001232:	b2da      	uxtb	r2, r3
 8001234:	490c      	ldr	r1, [pc, #48]	; (8001268 <__NVIC_SetPriority+0x4c>)
 8001236:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800123a:	0112      	lsls	r2, r2, #4
 800123c:	b2d2      	uxtb	r2, r2
 800123e:	440b      	add	r3, r1
 8001240:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001244:	e00a      	b.n	800125c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001246:	683b      	ldr	r3, [r7, #0]
 8001248:	b2da      	uxtb	r2, r3
 800124a:	4908      	ldr	r1, [pc, #32]	; (800126c <__NVIC_SetPriority+0x50>)
 800124c:	79fb      	ldrb	r3, [r7, #7]
 800124e:	f003 030f 	and.w	r3, r3, #15
 8001252:	3b04      	subs	r3, #4
 8001254:	0112      	lsls	r2, r2, #4
 8001256:	b2d2      	uxtb	r2, r2
 8001258:	440b      	add	r3, r1
 800125a:	761a      	strb	r2, [r3, #24]
}
 800125c:	bf00      	nop
 800125e:	370c      	adds	r7, #12
 8001260:	46bd      	mov	sp, r7
 8001262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001266:	4770      	bx	lr
 8001268:	e000e100 	.word	0xe000e100
 800126c:	e000ed00 	.word	0xe000ed00

08001270 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001270:	b480      	push	{r7}
 8001272:	b089      	sub	sp, #36	; 0x24
 8001274:	af00      	add	r7, sp, #0
 8001276:	60f8      	str	r0, [r7, #12]
 8001278:	60b9      	str	r1, [r7, #8]
 800127a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800127c:	68fb      	ldr	r3, [r7, #12]
 800127e:	f003 0307 	and.w	r3, r3, #7
 8001282:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001284:	69fb      	ldr	r3, [r7, #28]
 8001286:	f1c3 0307 	rsb	r3, r3, #7
 800128a:	2b04      	cmp	r3, #4
 800128c:	bf28      	it	cs
 800128e:	2304      	movcs	r3, #4
 8001290:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001292:	69fb      	ldr	r3, [r7, #28]
 8001294:	3304      	adds	r3, #4
 8001296:	2b06      	cmp	r3, #6
 8001298:	d902      	bls.n	80012a0 <NVIC_EncodePriority+0x30>
 800129a:	69fb      	ldr	r3, [r7, #28]
 800129c:	3b03      	subs	r3, #3
 800129e:	e000      	b.n	80012a2 <NVIC_EncodePriority+0x32>
 80012a0:	2300      	movs	r3, #0
 80012a2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012a4:	f04f 32ff 	mov.w	r2, #4294967295
 80012a8:	69bb      	ldr	r3, [r7, #24]
 80012aa:	fa02 f303 	lsl.w	r3, r2, r3
 80012ae:	43da      	mvns	r2, r3
 80012b0:	68bb      	ldr	r3, [r7, #8]
 80012b2:	401a      	ands	r2, r3
 80012b4:	697b      	ldr	r3, [r7, #20]
 80012b6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012b8:	f04f 31ff 	mov.w	r1, #4294967295
 80012bc:	697b      	ldr	r3, [r7, #20]
 80012be:	fa01 f303 	lsl.w	r3, r1, r3
 80012c2:	43d9      	mvns	r1, r3
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012c8:	4313      	orrs	r3, r2
         );
}
 80012ca:	4618      	mov	r0, r3
 80012cc:	3724      	adds	r7, #36	; 0x24
 80012ce:	46bd      	mov	sp, r7
 80012d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d4:	4770      	bx	lr
	...

080012d8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b082      	sub	sp, #8
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	3b01      	subs	r3, #1
 80012e4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80012e8:	d301      	bcc.n	80012ee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80012ea:	2301      	movs	r3, #1
 80012ec:	e00f      	b.n	800130e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80012ee:	4a0a      	ldr	r2, [pc, #40]	; (8001318 <SysTick_Config+0x40>)
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	3b01      	subs	r3, #1
 80012f4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80012f6:	210f      	movs	r1, #15
 80012f8:	f04f 30ff 	mov.w	r0, #4294967295
 80012fc:	f7ff ff8e 	bl	800121c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001300:	4b05      	ldr	r3, [pc, #20]	; (8001318 <SysTick_Config+0x40>)
 8001302:	2200      	movs	r2, #0
 8001304:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001306:	4b04      	ldr	r3, [pc, #16]	; (8001318 <SysTick_Config+0x40>)
 8001308:	2207      	movs	r2, #7
 800130a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800130c:	2300      	movs	r3, #0
}
 800130e:	4618      	mov	r0, r3
 8001310:	3708      	adds	r7, #8
 8001312:	46bd      	mov	sp, r7
 8001314:	bd80      	pop	{r7, pc}
 8001316:	bf00      	nop
 8001318:	e000e010 	.word	0xe000e010

0800131c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b082      	sub	sp, #8
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	2b07      	cmp	r3, #7
 8001328:	d00f      	beq.n	800134a <HAL_NVIC_SetPriorityGrouping+0x2e>
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	2b06      	cmp	r3, #6
 800132e:	d00c      	beq.n	800134a <HAL_NVIC_SetPriorityGrouping+0x2e>
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	2b05      	cmp	r3, #5
 8001334:	d009      	beq.n	800134a <HAL_NVIC_SetPriorityGrouping+0x2e>
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	2b04      	cmp	r3, #4
 800133a:	d006      	beq.n	800134a <HAL_NVIC_SetPriorityGrouping+0x2e>
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	2b03      	cmp	r3, #3
 8001340:	d003      	beq.n	800134a <HAL_NVIC_SetPriorityGrouping+0x2e>
 8001342:	2192      	movs	r1, #146	; 0x92
 8001344:	4804      	ldr	r0, [pc, #16]	; (8001358 <HAL_NVIC_SetPriorityGrouping+0x3c>)
 8001346:	f7ff fc28 	bl	8000b9a <assert_failed>
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800134a:	6878      	ldr	r0, [r7, #4]
 800134c:	f7ff ff16 	bl	800117c <__NVIC_SetPriorityGrouping>
}
 8001350:	bf00      	nop
 8001352:	3708      	adds	r7, #8
 8001354:	46bd      	mov	sp, r7
 8001356:	bd80      	pop	{r7, pc}
 8001358:	0800a08c 	.word	0x0800a08c

0800135c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800135c:	b580      	push	{r7, lr}
 800135e:	b086      	sub	sp, #24
 8001360:	af00      	add	r7, sp, #0
 8001362:	4603      	mov	r3, r0
 8001364:	60b9      	str	r1, [r7, #8]
 8001366:	607a      	str	r2, [r7, #4]
 8001368:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800136a:	2300      	movs	r3, #0
 800136c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	2b0f      	cmp	r3, #15
 8001372:	d903      	bls.n	800137c <HAL_NVIC_SetPriority+0x20>
 8001374:	21aa      	movs	r1, #170	; 0xaa
 8001376:	480e      	ldr	r0, [pc, #56]	; (80013b0 <HAL_NVIC_SetPriority+0x54>)
 8001378:	f7ff fc0f 	bl	8000b9a <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 800137c:	68bb      	ldr	r3, [r7, #8]
 800137e:	2b0f      	cmp	r3, #15
 8001380:	d903      	bls.n	800138a <HAL_NVIC_SetPriority+0x2e>
 8001382:	21ab      	movs	r1, #171	; 0xab
 8001384:	480a      	ldr	r0, [pc, #40]	; (80013b0 <HAL_NVIC_SetPriority+0x54>)
 8001386:	f7ff fc08 	bl	8000b9a <assert_failed>
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800138a:	f7ff ff1b 	bl	80011c4 <__NVIC_GetPriorityGrouping>
 800138e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001390:	687a      	ldr	r2, [r7, #4]
 8001392:	68b9      	ldr	r1, [r7, #8]
 8001394:	6978      	ldr	r0, [r7, #20]
 8001396:	f7ff ff6b 	bl	8001270 <NVIC_EncodePriority>
 800139a:	4602      	mov	r2, r0
 800139c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013a0:	4611      	mov	r1, r2
 80013a2:	4618      	mov	r0, r3
 80013a4:	f7ff ff3a 	bl	800121c <__NVIC_SetPriority>
}
 80013a8:	bf00      	nop
 80013aa:	3718      	adds	r7, #24
 80013ac:	46bd      	mov	sp, r7
 80013ae:	bd80      	pop	{r7, pc}
 80013b0:	0800a08c 	.word	0x0800a08c

080013b4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b082      	sub	sp, #8
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	4603      	mov	r3, r0
 80013bc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 80013be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	da03      	bge.n	80013ce <HAL_NVIC_EnableIRQ+0x1a>
 80013c6:	21be      	movs	r1, #190	; 0xbe
 80013c8:	4805      	ldr	r0, [pc, #20]	; (80013e0 <HAL_NVIC_EnableIRQ+0x2c>)
 80013ca:	f7ff fbe6 	bl	8000b9a <assert_failed>
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80013ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013d2:	4618      	mov	r0, r3
 80013d4:	f7ff ff04 	bl	80011e0 <__NVIC_EnableIRQ>
}
 80013d8:	bf00      	nop
 80013da:	3708      	adds	r7, #8
 80013dc:	46bd      	mov	sp, r7
 80013de:	bd80      	pop	{r7, pc}
 80013e0:	0800a08c 	.word	0x0800a08c

080013e4 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b082      	sub	sp, #8
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80013ec:	6878      	ldr	r0, [r7, #4]
 80013ee:	f7ff ff73 	bl	80012d8 <SysTick_Config>
 80013f2:	4603      	mov	r3, r0
}
 80013f4:	4618      	mov	r0, r3
 80013f6:	3708      	adds	r7, #8
 80013f8:	46bd      	mov	sp, r7
 80013fa:	bd80      	pop	{r7, pc}

080013fc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b088      	sub	sp, #32
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
 8001404:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001406:	2300      	movs	r3, #0
 8001408:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800140a:	2300      	movs	r3, #0
 800140c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800140e:	2300      	movs	r3, #0
 8001410:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	4a3b      	ldr	r2, [pc, #236]	; (8001504 <HAL_GPIO_Init+0x108>)
 8001416:	4293      	cmp	r3, r2
 8001418:	d017      	beq.n	800144a <HAL_GPIO_Init+0x4e>
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	4a3a      	ldr	r2, [pc, #232]	; (8001508 <HAL_GPIO_Init+0x10c>)
 800141e:	4293      	cmp	r3, r2
 8001420:	d013      	beq.n	800144a <HAL_GPIO_Init+0x4e>
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	4a39      	ldr	r2, [pc, #228]	; (800150c <HAL_GPIO_Init+0x110>)
 8001426:	4293      	cmp	r3, r2
 8001428:	d00f      	beq.n	800144a <HAL_GPIO_Init+0x4e>
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	4a38      	ldr	r2, [pc, #224]	; (8001510 <HAL_GPIO_Init+0x114>)
 800142e:	4293      	cmp	r3, r2
 8001430:	d00b      	beq.n	800144a <HAL_GPIO_Init+0x4e>
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	4a37      	ldr	r2, [pc, #220]	; (8001514 <HAL_GPIO_Init+0x118>)
 8001436:	4293      	cmp	r3, r2
 8001438:	d007      	beq.n	800144a <HAL_GPIO_Init+0x4e>
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	4a36      	ldr	r2, [pc, #216]	; (8001518 <HAL_GPIO_Init+0x11c>)
 800143e:	4293      	cmp	r3, r2
 8001440:	d003      	beq.n	800144a <HAL_GPIO_Init+0x4e>
 8001442:	21b3      	movs	r1, #179	; 0xb3
 8001444:	4835      	ldr	r0, [pc, #212]	; (800151c <HAL_GPIO_Init+0x120>)
 8001446:	f7ff fba8 	bl	8000b9a <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 800144a:	683b      	ldr	r3, [r7, #0]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	b29b      	uxth	r3, r3
 8001450:	2b00      	cmp	r3, #0
 8001452:	d005      	beq.n	8001460 <HAL_GPIO_Init+0x64>
 8001454:	683b      	ldr	r3, [r7, #0]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	0c1b      	lsrs	r3, r3, #16
 800145a:	041b      	lsls	r3, r3, #16
 800145c:	2b00      	cmp	r3, #0
 800145e:	d003      	beq.n	8001468 <HAL_GPIO_Init+0x6c>
 8001460:	21b4      	movs	r1, #180	; 0xb4
 8001462:	482e      	ldr	r0, [pc, #184]	; (800151c <HAL_GPIO_Init+0x120>)
 8001464:	f7ff fb99 	bl	8000b9a <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 8001468:	683b      	ldr	r3, [r7, #0]
 800146a:	685b      	ldr	r3, [r3, #4]
 800146c:	2b00      	cmp	r3, #0
 800146e:	d035      	beq.n	80014dc <HAL_GPIO_Init+0xe0>
 8001470:	683b      	ldr	r3, [r7, #0]
 8001472:	685b      	ldr	r3, [r3, #4]
 8001474:	2b01      	cmp	r3, #1
 8001476:	d031      	beq.n	80014dc <HAL_GPIO_Init+0xe0>
 8001478:	683b      	ldr	r3, [r7, #0]
 800147a:	685b      	ldr	r3, [r3, #4]
 800147c:	2b11      	cmp	r3, #17
 800147e:	d02d      	beq.n	80014dc <HAL_GPIO_Init+0xe0>
 8001480:	683b      	ldr	r3, [r7, #0]
 8001482:	685b      	ldr	r3, [r3, #4]
 8001484:	2b02      	cmp	r3, #2
 8001486:	d029      	beq.n	80014dc <HAL_GPIO_Init+0xe0>
 8001488:	683b      	ldr	r3, [r7, #0]
 800148a:	685b      	ldr	r3, [r3, #4]
 800148c:	2b12      	cmp	r3, #18
 800148e:	d025      	beq.n	80014dc <HAL_GPIO_Init+0xe0>
 8001490:	683b      	ldr	r3, [r7, #0]
 8001492:	685b      	ldr	r3, [r3, #4]
 8001494:	4a22      	ldr	r2, [pc, #136]	; (8001520 <HAL_GPIO_Init+0x124>)
 8001496:	4293      	cmp	r3, r2
 8001498:	d020      	beq.n	80014dc <HAL_GPIO_Init+0xe0>
 800149a:	683b      	ldr	r3, [r7, #0]
 800149c:	685b      	ldr	r3, [r3, #4]
 800149e:	4a21      	ldr	r2, [pc, #132]	; (8001524 <HAL_GPIO_Init+0x128>)
 80014a0:	4293      	cmp	r3, r2
 80014a2:	d01b      	beq.n	80014dc <HAL_GPIO_Init+0xe0>
 80014a4:	683b      	ldr	r3, [r7, #0]
 80014a6:	685b      	ldr	r3, [r3, #4]
 80014a8:	4a1f      	ldr	r2, [pc, #124]	; (8001528 <HAL_GPIO_Init+0x12c>)
 80014aa:	4293      	cmp	r3, r2
 80014ac:	d016      	beq.n	80014dc <HAL_GPIO_Init+0xe0>
 80014ae:	683b      	ldr	r3, [r7, #0]
 80014b0:	685b      	ldr	r3, [r3, #4]
 80014b2:	4a1e      	ldr	r2, [pc, #120]	; (800152c <HAL_GPIO_Init+0x130>)
 80014b4:	4293      	cmp	r3, r2
 80014b6:	d011      	beq.n	80014dc <HAL_GPIO_Init+0xe0>
 80014b8:	683b      	ldr	r3, [r7, #0]
 80014ba:	685b      	ldr	r3, [r3, #4]
 80014bc:	4a1c      	ldr	r2, [pc, #112]	; (8001530 <HAL_GPIO_Init+0x134>)
 80014be:	4293      	cmp	r3, r2
 80014c0:	d00c      	beq.n	80014dc <HAL_GPIO_Init+0xe0>
 80014c2:	683b      	ldr	r3, [r7, #0]
 80014c4:	685b      	ldr	r3, [r3, #4]
 80014c6:	4a1b      	ldr	r2, [pc, #108]	; (8001534 <HAL_GPIO_Init+0x138>)
 80014c8:	4293      	cmp	r3, r2
 80014ca:	d007      	beq.n	80014dc <HAL_GPIO_Init+0xe0>
 80014cc:	683b      	ldr	r3, [r7, #0]
 80014ce:	685b      	ldr	r3, [r3, #4]
 80014d0:	2b03      	cmp	r3, #3
 80014d2:	d003      	beq.n	80014dc <HAL_GPIO_Init+0xe0>
 80014d4:	21b5      	movs	r1, #181	; 0xb5
 80014d6:	4811      	ldr	r0, [pc, #68]	; (800151c <HAL_GPIO_Init+0x120>)
 80014d8:	f7ff fb5f 	bl	8000b9a <assert_failed>
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 80014dc:	683b      	ldr	r3, [r7, #0]
 80014de:	689b      	ldr	r3, [r3, #8]
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d00b      	beq.n	80014fc <HAL_GPIO_Init+0x100>
 80014e4:	683b      	ldr	r3, [r7, #0]
 80014e6:	689b      	ldr	r3, [r3, #8]
 80014e8:	2b01      	cmp	r3, #1
 80014ea:	d007      	beq.n	80014fc <HAL_GPIO_Init+0x100>
 80014ec:	683b      	ldr	r3, [r7, #0]
 80014ee:	689b      	ldr	r3, [r3, #8]
 80014f0:	2b02      	cmp	r3, #2
 80014f2:	d003      	beq.n	80014fc <HAL_GPIO_Init+0x100>
 80014f4:	21b6      	movs	r1, #182	; 0xb6
 80014f6:	4809      	ldr	r0, [pc, #36]	; (800151c <HAL_GPIO_Init+0x120>)
 80014f8:	f7ff fb4f 	bl	8000b9a <assert_failed>

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80014fc:	2300      	movs	r3, #0
 80014fe:	61fb      	str	r3, [r7, #28]
 8001500:	e211      	b.n	8001926 <HAL_GPIO_Init+0x52a>
 8001502:	bf00      	nop
 8001504:	40020000 	.word	0x40020000
 8001508:	40020400 	.word	0x40020400
 800150c:	40020800 	.word	0x40020800
 8001510:	40020c00 	.word	0x40020c00
 8001514:	40021000 	.word	0x40021000
 8001518:	40021c00 	.word	0x40021c00
 800151c:	0800a0c8 	.word	0x0800a0c8
 8001520:	10110000 	.word	0x10110000
 8001524:	10210000 	.word	0x10210000
 8001528:	10310000 	.word	0x10310000
 800152c:	10120000 	.word	0x10120000
 8001530:	10220000 	.word	0x10220000
 8001534:	10320000 	.word	0x10320000
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001538:	2201      	movs	r2, #1
 800153a:	69fb      	ldr	r3, [r7, #28]
 800153c:	fa02 f303 	lsl.w	r3, r2, r3
 8001540:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001542:	683b      	ldr	r3, [r7, #0]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	697a      	ldr	r2, [r7, #20]
 8001548:	4013      	ands	r3, r2
 800154a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800154c:	693a      	ldr	r2, [r7, #16]
 800154e:	697b      	ldr	r3, [r7, #20]
 8001550:	429a      	cmp	r2, r3
 8001552:	f040 81e5 	bne.w	8001920 <HAL_GPIO_Init+0x524>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001556:	683b      	ldr	r3, [r7, #0]
 8001558:	685b      	ldr	r3, [r3, #4]
 800155a:	2b01      	cmp	r3, #1
 800155c:	d00b      	beq.n	8001576 <HAL_GPIO_Init+0x17a>
 800155e:	683b      	ldr	r3, [r7, #0]
 8001560:	685b      	ldr	r3, [r3, #4]
 8001562:	2b02      	cmp	r3, #2
 8001564:	d007      	beq.n	8001576 <HAL_GPIO_Init+0x17a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001566:	683b      	ldr	r3, [r7, #0]
 8001568:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800156a:	2b11      	cmp	r3, #17
 800156c:	d003      	beq.n	8001576 <HAL_GPIO_Init+0x17a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800156e:	683b      	ldr	r3, [r7, #0]
 8001570:	685b      	ldr	r3, [r3, #4]
 8001572:	2b12      	cmp	r3, #18
 8001574:	d144      	bne.n	8001600 <HAL_GPIO_Init+0x204>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8001576:	683b      	ldr	r3, [r7, #0]
 8001578:	68db      	ldr	r3, [r3, #12]
 800157a:	2b00      	cmp	r3, #0
 800157c:	d00f      	beq.n	800159e <HAL_GPIO_Init+0x1a2>
 800157e:	683b      	ldr	r3, [r7, #0]
 8001580:	68db      	ldr	r3, [r3, #12]
 8001582:	2b01      	cmp	r3, #1
 8001584:	d00b      	beq.n	800159e <HAL_GPIO_Init+0x1a2>
 8001586:	683b      	ldr	r3, [r7, #0]
 8001588:	68db      	ldr	r3, [r3, #12]
 800158a:	2b02      	cmp	r3, #2
 800158c:	d007      	beq.n	800159e <HAL_GPIO_Init+0x1a2>
 800158e:	683b      	ldr	r3, [r7, #0]
 8001590:	68db      	ldr	r3, [r3, #12]
 8001592:	2b03      	cmp	r3, #3
 8001594:	d003      	beq.n	800159e <HAL_GPIO_Init+0x1a2>
 8001596:	21c8      	movs	r1, #200	; 0xc8
 8001598:	489f      	ldr	r0, [pc, #636]	; (8001818 <HAL_GPIO_Init+0x41c>)
 800159a:	f7ff fafe 	bl	8000b9a <assert_failed>
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	689b      	ldr	r3, [r3, #8]
 80015a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80015a4:	69fb      	ldr	r3, [r7, #28]
 80015a6:	005b      	lsls	r3, r3, #1
 80015a8:	2203      	movs	r2, #3
 80015aa:	fa02 f303 	lsl.w	r3, r2, r3
 80015ae:	43db      	mvns	r3, r3
 80015b0:	69ba      	ldr	r2, [r7, #24]
 80015b2:	4013      	ands	r3, r2
 80015b4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80015b6:	683b      	ldr	r3, [r7, #0]
 80015b8:	68da      	ldr	r2, [r3, #12]
 80015ba:	69fb      	ldr	r3, [r7, #28]
 80015bc:	005b      	lsls	r3, r3, #1
 80015be:	fa02 f303 	lsl.w	r3, r2, r3
 80015c2:	69ba      	ldr	r2, [r7, #24]
 80015c4:	4313      	orrs	r3, r2
 80015c6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	69ba      	ldr	r2, [r7, #24]
 80015cc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	685b      	ldr	r3, [r3, #4]
 80015d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80015d4:	2201      	movs	r2, #1
 80015d6:	69fb      	ldr	r3, [r7, #28]
 80015d8:	fa02 f303 	lsl.w	r3, r2, r3
 80015dc:	43db      	mvns	r3, r3
 80015de:	69ba      	ldr	r2, [r7, #24]
 80015e0:	4013      	ands	r3, r2
 80015e2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80015e4:	683b      	ldr	r3, [r7, #0]
 80015e6:	685b      	ldr	r3, [r3, #4]
 80015e8:	091b      	lsrs	r3, r3, #4
 80015ea:	f003 0201 	and.w	r2, r3, #1
 80015ee:	69fb      	ldr	r3, [r7, #28]
 80015f0:	fa02 f303 	lsl.w	r3, r2, r3
 80015f4:	69ba      	ldr	r2, [r7, #24]
 80015f6:	4313      	orrs	r3, r2
 80015f8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	69ba      	ldr	r2, [r7, #24]
 80015fe:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	68db      	ldr	r3, [r3, #12]
 8001604:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001606:	69fb      	ldr	r3, [r7, #28]
 8001608:	005b      	lsls	r3, r3, #1
 800160a:	2203      	movs	r2, #3
 800160c:	fa02 f303 	lsl.w	r3, r2, r3
 8001610:	43db      	mvns	r3, r3
 8001612:	69ba      	ldr	r2, [r7, #24]
 8001614:	4013      	ands	r3, r2
 8001616:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001618:	683b      	ldr	r3, [r7, #0]
 800161a:	689a      	ldr	r2, [r3, #8]
 800161c:	69fb      	ldr	r3, [r7, #28]
 800161e:	005b      	lsls	r3, r3, #1
 8001620:	fa02 f303 	lsl.w	r3, r2, r3
 8001624:	69ba      	ldr	r2, [r7, #24]
 8001626:	4313      	orrs	r3, r2
 8001628:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	69ba      	ldr	r2, [r7, #24]
 800162e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001630:	683b      	ldr	r3, [r7, #0]
 8001632:	685b      	ldr	r3, [r3, #4]
 8001634:	2b02      	cmp	r3, #2
 8001636:	d004      	beq.n	8001642 <HAL_GPIO_Init+0x246>
 8001638:	683b      	ldr	r3, [r7, #0]
 800163a:	685b      	ldr	r3, [r3, #4]
 800163c:	2b12      	cmp	r3, #18
 800163e:	f040 80a0 	bne.w	8001782 <HAL_GPIO_Init+0x386>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 8001642:	683b      	ldr	r3, [r7, #0]
 8001644:	691b      	ldr	r3, [r3, #16]
 8001646:	2b00      	cmp	r3, #0
 8001648:	d077      	beq.n	800173a <HAL_GPIO_Init+0x33e>
 800164a:	683b      	ldr	r3, [r7, #0]
 800164c:	691b      	ldr	r3, [r3, #16]
 800164e:	2b09      	cmp	r3, #9
 8001650:	d073      	beq.n	800173a <HAL_GPIO_Init+0x33e>
 8001652:	683b      	ldr	r3, [r7, #0]
 8001654:	691b      	ldr	r3, [r3, #16]
 8001656:	2b00      	cmp	r3, #0
 8001658:	d06f      	beq.n	800173a <HAL_GPIO_Init+0x33e>
 800165a:	683b      	ldr	r3, [r7, #0]
 800165c:	691b      	ldr	r3, [r3, #16]
 800165e:	2b00      	cmp	r3, #0
 8001660:	d06b      	beq.n	800173a <HAL_GPIO_Init+0x33e>
 8001662:	683b      	ldr	r3, [r7, #0]
 8001664:	691b      	ldr	r3, [r3, #16]
 8001666:	2b00      	cmp	r3, #0
 8001668:	d067      	beq.n	800173a <HAL_GPIO_Init+0x33e>
 800166a:	683b      	ldr	r3, [r7, #0]
 800166c:	691b      	ldr	r3, [r3, #16]
 800166e:	2b00      	cmp	r3, #0
 8001670:	d063      	beq.n	800173a <HAL_GPIO_Init+0x33e>
 8001672:	683b      	ldr	r3, [r7, #0]
 8001674:	691b      	ldr	r3, [r3, #16]
 8001676:	2b01      	cmp	r3, #1
 8001678:	d05f      	beq.n	800173a <HAL_GPIO_Init+0x33e>
 800167a:	683b      	ldr	r3, [r7, #0]
 800167c:	691b      	ldr	r3, [r3, #16]
 800167e:	2b01      	cmp	r3, #1
 8001680:	d05b      	beq.n	800173a <HAL_GPIO_Init+0x33e>
 8001682:	683b      	ldr	r3, [r7, #0]
 8001684:	691b      	ldr	r3, [r3, #16]
 8001686:	2b02      	cmp	r3, #2
 8001688:	d057      	beq.n	800173a <HAL_GPIO_Init+0x33e>
 800168a:	683b      	ldr	r3, [r7, #0]
 800168c:	691b      	ldr	r3, [r3, #16]
 800168e:	2b02      	cmp	r3, #2
 8001690:	d053      	beq.n	800173a <HAL_GPIO_Init+0x33e>
 8001692:	683b      	ldr	r3, [r7, #0]
 8001694:	691b      	ldr	r3, [r3, #16]
 8001696:	2b02      	cmp	r3, #2
 8001698:	d04f      	beq.n	800173a <HAL_GPIO_Init+0x33e>
 800169a:	683b      	ldr	r3, [r7, #0]
 800169c:	691b      	ldr	r3, [r3, #16]
 800169e:	2b04      	cmp	r3, #4
 80016a0:	d04b      	beq.n	800173a <HAL_GPIO_Init+0x33e>
 80016a2:	683b      	ldr	r3, [r7, #0]
 80016a4:	691b      	ldr	r3, [r3, #16]
 80016a6:	2b04      	cmp	r3, #4
 80016a8:	d047      	beq.n	800173a <HAL_GPIO_Init+0x33e>
 80016aa:	683b      	ldr	r3, [r7, #0]
 80016ac:	691b      	ldr	r3, [r3, #16]
 80016ae:	2b04      	cmp	r3, #4
 80016b0:	d043      	beq.n	800173a <HAL_GPIO_Init+0x33e>
 80016b2:	683b      	ldr	r3, [r7, #0]
 80016b4:	691b      	ldr	r3, [r3, #16]
 80016b6:	2b05      	cmp	r3, #5
 80016b8:	d03f      	beq.n	800173a <HAL_GPIO_Init+0x33e>
 80016ba:	683b      	ldr	r3, [r7, #0]
 80016bc:	691b      	ldr	r3, [r3, #16]
 80016be:	2b05      	cmp	r3, #5
 80016c0:	d03b      	beq.n	800173a <HAL_GPIO_Init+0x33e>
 80016c2:	683b      	ldr	r3, [r7, #0]
 80016c4:	691b      	ldr	r3, [r3, #16]
 80016c6:	2b05      	cmp	r3, #5
 80016c8:	d037      	beq.n	800173a <HAL_GPIO_Init+0x33e>
 80016ca:	683b      	ldr	r3, [r7, #0]
 80016cc:	691b      	ldr	r3, [r3, #16]
 80016ce:	2b06      	cmp	r3, #6
 80016d0:	d033      	beq.n	800173a <HAL_GPIO_Init+0x33e>
 80016d2:	683b      	ldr	r3, [r7, #0]
 80016d4:	691b      	ldr	r3, [r3, #16]
 80016d6:	2b06      	cmp	r3, #6
 80016d8:	d02f      	beq.n	800173a <HAL_GPIO_Init+0x33e>
 80016da:	683b      	ldr	r3, [r7, #0]
 80016dc:	691b      	ldr	r3, [r3, #16]
 80016de:	2b05      	cmp	r3, #5
 80016e0:	d02b      	beq.n	800173a <HAL_GPIO_Init+0x33e>
 80016e2:	683b      	ldr	r3, [r7, #0]
 80016e4:	691b      	ldr	r3, [r3, #16]
 80016e6:	2b06      	cmp	r3, #6
 80016e8:	d027      	beq.n	800173a <HAL_GPIO_Init+0x33e>
 80016ea:	683b      	ldr	r3, [r7, #0]
 80016ec:	691b      	ldr	r3, [r3, #16]
 80016ee:	2b07      	cmp	r3, #7
 80016f0:	d023      	beq.n	800173a <HAL_GPIO_Init+0x33e>
 80016f2:	683b      	ldr	r3, [r7, #0]
 80016f4:	691b      	ldr	r3, [r3, #16]
 80016f6:	2b07      	cmp	r3, #7
 80016f8:	d01f      	beq.n	800173a <HAL_GPIO_Init+0x33e>
 80016fa:	683b      	ldr	r3, [r7, #0]
 80016fc:	691b      	ldr	r3, [r3, #16]
 80016fe:	2b07      	cmp	r3, #7
 8001700:	d01b      	beq.n	800173a <HAL_GPIO_Init+0x33e>
 8001702:	683b      	ldr	r3, [r7, #0]
 8001704:	691b      	ldr	r3, [r3, #16]
 8001706:	2b08      	cmp	r3, #8
 8001708:	d017      	beq.n	800173a <HAL_GPIO_Init+0x33e>
 800170a:	683b      	ldr	r3, [r7, #0]
 800170c:	691b      	ldr	r3, [r3, #16]
 800170e:	2b0a      	cmp	r3, #10
 8001710:	d013      	beq.n	800173a <HAL_GPIO_Init+0x33e>
 8001712:	683b      	ldr	r3, [r7, #0]
 8001714:	691b      	ldr	r3, [r3, #16]
 8001716:	2b09      	cmp	r3, #9
 8001718:	d00f      	beq.n	800173a <HAL_GPIO_Init+0x33e>
 800171a:	683b      	ldr	r3, [r7, #0]
 800171c:	691b      	ldr	r3, [r3, #16]
 800171e:	2b09      	cmp	r3, #9
 8001720:	d00b      	beq.n	800173a <HAL_GPIO_Init+0x33e>
 8001722:	683b      	ldr	r3, [r7, #0]
 8001724:	691b      	ldr	r3, [r3, #16]
 8001726:	2b0c      	cmp	r3, #12
 8001728:	d007      	beq.n	800173a <HAL_GPIO_Init+0x33e>
 800172a:	683b      	ldr	r3, [r7, #0]
 800172c:	691b      	ldr	r3, [r3, #16]
 800172e:	2b0f      	cmp	r3, #15
 8001730:	d003      	beq.n	800173a <HAL_GPIO_Init+0x33e>
 8001732:	21e0      	movs	r1, #224	; 0xe0
 8001734:	4838      	ldr	r0, [pc, #224]	; (8001818 <HAL_GPIO_Init+0x41c>)
 8001736:	f7ff fa30 	bl	8000b9a <assert_failed>
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800173a:	69fb      	ldr	r3, [r7, #28]
 800173c:	08da      	lsrs	r2, r3, #3
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	3208      	adds	r2, #8
 8001742:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001746:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001748:	69fb      	ldr	r3, [r7, #28]
 800174a:	f003 0307 	and.w	r3, r3, #7
 800174e:	009b      	lsls	r3, r3, #2
 8001750:	220f      	movs	r2, #15
 8001752:	fa02 f303 	lsl.w	r3, r2, r3
 8001756:	43db      	mvns	r3, r3
 8001758:	69ba      	ldr	r2, [r7, #24]
 800175a:	4013      	ands	r3, r2
 800175c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800175e:	683b      	ldr	r3, [r7, #0]
 8001760:	691a      	ldr	r2, [r3, #16]
 8001762:	69fb      	ldr	r3, [r7, #28]
 8001764:	f003 0307 	and.w	r3, r3, #7
 8001768:	009b      	lsls	r3, r3, #2
 800176a:	fa02 f303 	lsl.w	r3, r2, r3
 800176e:	69ba      	ldr	r2, [r7, #24]
 8001770:	4313      	orrs	r3, r2
 8001772:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001774:	69fb      	ldr	r3, [r7, #28]
 8001776:	08da      	lsrs	r2, r3, #3
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	3208      	adds	r2, #8
 800177c:	69b9      	ldr	r1, [r7, #24]
 800177e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001788:	69fb      	ldr	r3, [r7, #28]
 800178a:	005b      	lsls	r3, r3, #1
 800178c:	2203      	movs	r2, #3
 800178e:	fa02 f303 	lsl.w	r3, r2, r3
 8001792:	43db      	mvns	r3, r3
 8001794:	69ba      	ldr	r2, [r7, #24]
 8001796:	4013      	ands	r3, r2
 8001798:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800179a:	683b      	ldr	r3, [r7, #0]
 800179c:	685b      	ldr	r3, [r3, #4]
 800179e:	f003 0203 	and.w	r2, r3, #3
 80017a2:	69fb      	ldr	r3, [r7, #28]
 80017a4:	005b      	lsls	r3, r3, #1
 80017a6:	fa02 f303 	lsl.w	r3, r2, r3
 80017aa:	69ba      	ldr	r2, [r7, #24]
 80017ac:	4313      	orrs	r3, r2
 80017ae:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	69ba      	ldr	r2, [r7, #24]
 80017b4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80017b6:	683b      	ldr	r3, [r7, #0]
 80017b8:	685b      	ldr	r3, [r3, #4]
 80017ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017be:	2b00      	cmp	r3, #0
 80017c0:	f000 80ae 	beq.w	8001920 <HAL_GPIO_Init+0x524>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017c4:	2300      	movs	r3, #0
 80017c6:	60fb      	str	r3, [r7, #12]
 80017c8:	4b14      	ldr	r3, [pc, #80]	; (800181c <HAL_GPIO_Init+0x420>)
 80017ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017cc:	4a13      	ldr	r2, [pc, #76]	; (800181c <HAL_GPIO_Init+0x420>)
 80017ce:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80017d2:	6453      	str	r3, [r2, #68]	; 0x44
 80017d4:	4b11      	ldr	r3, [pc, #68]	; (800181c <HAL_GPIO_Init+0x420>)
 80017d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017d8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80017dc:	60fb      	str	r3, [r7, #12]
 80017de:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80017e0:	4a0f      	ldr	r2, [pc, #60]	; (8001820 <HAL_GPIO_Init+0x424>)
 80017e2:	69fb      	ldr	r3, [r7, #28]
 80017e4:	089b      	lsrs	r3, r3, #2
 80017e6:	3302      	adds	r3, #2
 80017e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80017ee:	69fb      	ldr	r3, [r7, #28]
 80017f0:	f003 0303 	and.w	r3, r3, #3
 80017f4:	009b      	lsls	r3, r3, #2
 80017f6:	220f      	movs	r2, #15
 80017f8:	fa02 f303 	lsl.w	r3, r2, r3
 80017fc:	43db      	mvns	r3, r3
 80017fe:	69ba      	ldr	r2, [r7, #24]
 8001800:	4013      	ands	r3, r2
 8001802:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	4a07      	ldr	r2, [pc, #28]	; (8001824 <HAL_GPIO_Init+0x428>)
 8001808:	4293      	cmp	r3, r2
 800180a:	d025      	beq.n	8001858 <HAL_GPIO_Init+0x45c>
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	4a06      	ldr	r2, [pc, #24]	; (8001828 <HAL_GPIO_Init+0x42c>)
 8001810:	4293      	cmp	r3, r2
 8001812:	d01f      	beq.n	8001854 <HAL_GPIO_Init+0x458>
 8001814:	e00a      	b.n	800182c <HAL_GPIO_Init+0x430>
 8001816:	bf00      	nop
 8001818:	0800a0c8 	.word	0x0800a0c8
 800181c:	40023800 	.word	0x40023800
 8001820:	40013800 	.word	0x40013800
 8001824:	40020000 	.word	0x40020000
 8001828:	40020400 	.word	0x40020400
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	4a42      	ldr	r2, [pc, #264]	; (8001938 <HAL_GPIO_Init+0x53c>)
 8001830:	4293      	cmp	r3, r2
 8001832:	d00d      	beq.n	8001850 <HAL_GPIO_Init+0x454>
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	4a41      	ldr	r2, [pc, #260]	; (800193c <HAL_GPIO_Init+0x540>)
 8001838:	4293      	cmp	r3, r2
 800183a:	d007      	beq.n	800184c <HAL_GPIO_Init+0x450>
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	4a40      	ldr	r2, [pc, #256]	; (8001940 <HAL_GPIO_Init+0x544>)
 8001840:	4293      	cmp	r3, r2
 8001842:	d101      	bne.n	8001848 <HAL_GPIO_Init+0x44c>
 8001844:	2304      	movs	r3, #4
 8001846:	e008      	b.n	800185a <HAL_GPIO_Init+0x45e>
 8001848:	2307      	movs	r3, #7
 800184a:	e006      	b.n	800185a <HAL_GPIO_Init+0x45e>
 800184c:	2303      	movs	r3, #3
 800184e:	e004      	b.n	800185a <HAL_GPIO_Init+0x45e>
 8001850:	2302      	movs	r3, #2
 8001852:	e002      	b.n	800185a <HAL_GPIO_Init+0x45e>
 8001854:	2301      	movs	r3, #1
 8001856:	e000      	b.n	800185a <HAL_GPIO_Init+0x45e>
 8001858:	2300      	movs	r3, #0
 800185a:	69fa      	ldr	r2, [r7, #28]
 800185c:	f002 0203 	and.w	r2, r2, #3
 8001860:	0092      	lsls	r2, r2, #2
 8001862:	4093      	lsls	r3, r2
 8001864:	69ba      	ldr	r2, [r7, #24]
 8001866:	4313      	orrs	r3, r2
 8001868:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800186a:	4936      	ldr	r1, [pc, #216]	; (8001944 <HAL_GPIO_Init+0x548>)
 800186c:	69fb      	ldr	r3, [r7, #28]
 800186e:	089b      	lsrs	r3, r3, #2
 8001870:	3302      	adds	r3, #2
 8001872:	69ba      	ldr	r2, [r7, #24]
 8001874:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001878:	4b33      	ldr	r3, [pc, #204]	; (8001948 <HAL_GPIO_Init+0x54c>)
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800187e:	693b      	ldr	r3, [r7, #16]
 8001880:	43db      	mvns	r3, r3
 8001882:	69ba      	ldr	r2, [r7, #24]
 8001884:	4013      	ands	r3, r2
 8001886:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001888:	683b      	ldr	r3, [r7, #0]
 800188a:	685b      	ldr	r3, [r3, #4]
 800188c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001890:	2b00      	cmp	r3, #0
 8001892:	d003      	beq.n	800189c <HAL_GPIO_Init+0x4a0>
        {
          temp |= iocurrent;
 8001894:	69ba      	ldr	r2, [r7, #24]
 8001896:	693b      	ldr	r3, [r7, #16]
 8001898:	4313      	orrs	r3, r2
 800189a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800189c:	4a2a      	ldr	r2, [pc, #168]	; (8001948 <HAL_GPIO_Init+0x54c>)
 800189e:	69bb      	ldr	r3, [r7, #24]
 80018a0:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80018a2:	4b29      	ldr	r3, [pc, #164]	; (8001948 <HAL_GPIO_Init+0x54c>)
 80018a4:	685b      	ldr	r3, [r3, #4]
 80018a6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018a8:	693b      	ldr	r3, [r7, #16]
 80018aa:	43db      	mvns	r3, r3
 80018ac:	69ba      	ldr	r2, [r7, #24]
 80018ae:	4013      	ands	r3, r2
 80018b0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80018b2:	683b      	ldr	r3, [r7, #0]
 80018b4:	685b      	ldr	r3, [r3, #4]
 80018b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d003      	beq.n	80018c6 <HAL_GPIO_Init+0x4ca>
        {
          temp |= iocurrent;
 80018be:	69ba      	ldr	r2, [r7, #24]
 80018c0:	693b      	ldr	r3, [r7, #16]
 80018c2:	4313      	orrs	r3, r2
 80018c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80018c6:	4a20      	ldr	r2, [pc, #128]	; (8001948 <HAL_GPIO_Init+0x54c>)
 80018c8:	69bb      	ldr	r3, [r7, #24]
 80018ca:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80018cc:	4b1e      	ldr	r3, [pc, #120]	; (8001948 <HAL_GPIO_Init+0x54c>)
 80018ce:	689b      	ldr	r3, [r3, #8]
 80018d0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018d2:	693b      	ldr	r3, [r7, #16]
 80018d4:	43db      	mvns	r3, r3
 80018d6:	69ba      	ldr	r2, [r7, #24]
 80018d8:	4013      	ands	r3, r2
 80018da:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80018dc:	683b      	ldr	r3, [r7, #0]
 80018de:	685b      	ldr	r3, [r3, #4]
 80018e0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d003      	beq.n	80018f0 <HAL_GPIO_Init+0x4f4>
        {
          temp |= iocurrent;
 80018e8:	69ba      	ldr	r2, [r7, #24]
 80018ea:	693b      	ldr	r3, [r7, #16]
 80018ec:	4313      	orrs	r3, r2
 80018ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80018f0:	4a15      	ldr	r2, [pc, #84]	; (8001948 <HAL_GPIO_Init+0x54c>)
 80018f2:	69bb      	ldr	r3, [r7, #24]
 80018f4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80018f6:	4b14      	ldr	r3, [pc, #80]	; (8001948 <HAL_GPIO_Init+0x54c>)
 80018f8:	68db      	ldr	r3, [r3, #12]
 80018fa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018fc:	693b      	ldr	r3, [r7, #16]
 80018fe:	43db      	mvns	r3, r3
 8001900:	69ba      	ldr	r2, [r7, #24]
 8001902:	4013      	ands	r3, r2
 8001904:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001906:	683b      	ldr	r3, [r7, #0]
 8001908:	685b      	ldr	r3, [r3, #4]
 800190a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800190e:	2b00      	cmp	r3, #0
 8001910:	d003      	beq.n	800191a <HAL_GPIO_Init+0x51e>
        {
          temp |= iocurrent;
 8001912:	69ba      	ldr	r2, [r7, #24]
 8001914:	693b      	ldr	r3, [r7, #16]
 8001916:	4313      	orrs	r3, r2
 8001918:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800191a:	4a0b      	ldr	r2, [pc, #44]	; (8001948 <HAL_GPIO_Init+0x54c>)
 800191c:	69bb      	ldr	r3, [r7, #24]
 800191e:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001920:	69fb      	ldr	r3, [r7, #28]
 8001922:	3301      	adds	r3, #1
 8001924:	61fb      	str	r3, [r7, #28]
 8001926:	69fb      	ldr	r3, [r7, #28]
 8001928:	2b0f      	cmp	r3, #15
 800192a:	f67f ae05 	bls.w	8001538 <HAL_GPIO_Init+0x13c>
      }
    }
  }
}
 800192e:	bf00      	nop
 8001930:	3720      	adds	r7, #32
 8001932:	46bd      	mov	sp, r7
 8001934:	bd80      	pop	{r7, pc}
 8001936:	bf00      	nop
 8001938:	40020800 	.word	0x40020800
 800193c:	40020c00 	.word	0x40020c00
 8001940:	40021000 	.word	0x40021000
 8001944:	40013800 	.word	0x40013800
 8001948:	40013c00 	.word	0x40013c00

0800194c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	b082      	sub	sp, #8
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
 8001954:	460b      	mov	r3, r1
 8001956:	807b      	strh	r3, [r7, #2]
 8001958:	4613      	mov	r3, r2
 800195a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 800195c:	887b      	ldrh	r3, [r7, #2]
 800195e:	2b00      	cmp	r3, #0
 8001960:	d004      	beq.n	800196c <HAL_GPIO_WritePin+0x20>
 8001962:	887b      	ldrh	r3, [r7, #2]
 8001964:	0c1b      	lsrs	r3, r3, #16
 8001966:	041b      	lsls	r3, r3, #16
 8001968:	2b00      	cmp	r3, #0
 800196a:	d004      	beq.n	8001976 <HAL_GPIO_WritePin+0x2a>
 800196c:	f240 119f 	movw	r1, #415	; 0x19f
 8001970:	480e      	ldr	r0, [pc, #56]	; (80019ac <HAL_GPIO_WritePin+0x60>)
 8001972:	f7ff f912 	bl	8000b9a <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 8001976:	787b      	ldrb	r3, [r7, #1]
 8001978:	2b00      	cmp	r3, #0
 800197a:	d007      	beq.n	800198c <HAL_GPIO_WritePin+0x40>
 800197c:	787b      	ldrb	r3, [r7, #1]
 800197e:	2b01      	cmp	r3, #1
 8001980:	d004      	beq.n	800198c <HAL_GPIO_WritePin+0x40>
 8001982:	f44f 71d0 	mov.w	r1, #416	; 0x1a0
 8001986:	4809      	ldr	r0, [pc, #36]	; (80019ac <HAL_GPIO_WritePin+0x60>)
 8001988:	f7ff f907 	bl	8000b9a <assert_failed>

  if(PinState != GPIO_PIN_RESET)
 800198c:	787b      	ldrb	r3, [r7, #1]
 800198e:	2b00      	cmp	r3, #0
 8001990:	d003      	beq.n	800199a <HAL_GPIO_WritePin+0x4e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001992:	887a      	ldrh	r2, [r7, #2]
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001998:	e003      	b.n	80019a2 <HAL_GPIO_WritePin+0x56>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800199a:	887b      	ldrh	r3, [r7, #2]
 800199c:	041a      	lsls	r2, r3, #16
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	619a      	str	r2, [r3, #24]
}
 80019a2:	bf00      	nop
 80019a4:	3708      	adds	r7, #8
 80019a6:	46bd      	mov	sp, r7
 80019a8:	bd80      	pop	{r7, pc}
 80019aa:	bf00      	nop
 80019ac:	0800a0c8 	.word	0x0800a0c8

080019b0 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 80019b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80019b2:	b08f      	sub	sp, #60	; 0x3c
 80019b4:	af0a      	add	r7, sp, #40	; 0x28
 80019b6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d101      	bne.n	80019c2 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 80019be:	2301      	movs	r3, #1
 80019c0:	e05d      	b.n	8001a7e <HAL_HCD_Init+0xce>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80019ca:	d003      	beq.n	80019d4 <HAL_HCD_Init+0x24>
 80019cc:	217a      	movs	r1, #122	; 0x7a
 80019ce:	482e      	ldr	r0, [pc, #184]	; (8001a88 <HAL_HCD_Init+0xd8>)
 80019d0:	f7ff f8e3 	bl	8000b9a <assert_failed>

  USBx = hhcd->Instance;
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	f893 32b9 	ldrb.w	r3, [r3, #697]	; 0x2b9
 80019e0:	b2db      	uxtb	r3, r3
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d106      	bne.n	80019f4 <HAL_HCD_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	2200      	movs	r2, #0
 80019ea:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 80019ee:	6878      	ldr	r0, [r7, #4]
 80019f0:	f007 ffa8 	bl	8009944 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	2203      	movs	r2, #3
 80019f8:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d102      	bne.n	8001a0e <HAL_HCD_Init+0x5e>
  {
    hhcd->Init.dma_enable = 0U;
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	4618      	mov	r0, r3
 8001a14:	f005 f964 	bl	8006ce0 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	603b      	str	r3, [r7, #0]
 8001a1e:	687e      	ldr	r6, [r7, #4]
 8001a20:	466d      	mov	r5, sp
 8001a22:	f106 0410 	add.w	r4, r6, #16
 8001a26:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001a28:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001a2a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001a2c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001a2e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001a32:	e885 0003 	stmia.w	r5, {r0, r1}
 8001a36:	1d33      	adds	r3, r6, #4
 8001a38:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001a3a:	6838      	ldr	r0, [r7, #0]
 8001a3c:	f005 f8de 	bl	8006bfc <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	2101      	movs	r1, #1
 8001a46:	4618      	mov	r0, r3
 8001a48:	f005 f95b 	bl	8006d02 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	603b      	str	r3, [r7, #0]
 8001a52:	687e      	ldr	r6, [r7, #4]
 8001a54:	466d      	mov	r5, sp
 8001a56:	f106 0410 	add.w	r4, r6, #16
 8001a5a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001a5c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001a5e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001a60:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001a62:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001a66:	e885 0003 	stmia.w	r5, {r0, r1}
 8001a6a:	1d33      	adds	r3, r6, #4
 8001a6c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001a6e:	6838      	ldr	r0, [r7, #0]
 8001a70:	f005 fa6e 	bl	8006f50 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	2201      	movs	r2, #1
 8001a78:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  return HAL_OK;
 8001a7c:	2300      	movs	r3, #0
}
 8001a7e:	4618      	mov	r0, r3
 8001a80:	3714      	adds	r7, #20
 8001a82:	46bd      	mov	sp, r7
 8001a84:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001a86:	bf00      	nop
 8001a88:	0800a104 	.word	0x0800a104

08001a8c <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8001a8c:	b590      	push	{r4, r7, lr}
 8001a8e:	b089      	sub	sp, #36	; 0x24
 8001a90:	af04      	add	r7, sp, #16
 8001a92:	6078      	str	r0, [r7, #4]
 8001a94:	4608      	mov	r0, r1
 8001a96:	4611      	mov	r1, r2
 8001a98:	461a      	mov	r2, r3
 8001a9a:	4603      	mov	r3, r0
 8001a9c:	70fb      	strb	r3, [r7, #3]
 8001a9e:	460b      	mov	r3, r1
 8001aa0:	70bb      	strb	r3, [r7, #2]
 8001aa2:	4613      	mov	r3, r2
 8001aa4:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8001aac:	2b01      	cmp	r3, #1
 8001aae:	d101      	bne.n	8001ab4 <HAL_HCD_HC_Init+0x28>
 8001ab0:	2302      	movs	r3, #2
 8001ab2:	e07f      	b.n	8001bb4 <HAL_HCD_HC_Init+0x128>
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	2201      	movs	r2, #1
 8001ab8:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  hhcd->hc[ch_num].do_ping = 0U;
 8001abc:	78fa      	ldrb	r2, [r7, #3]
 8001abe:	6879      	ldr	r1, [r7, #4]
 8001ac0:	4613      	mov	r3, r2
 8001ac2:	009b      	lsls	r3, r3, #2
 8001ac4:	4413      	add	r3, r2
 8001ac6:	00db      	lsls	r3, r3, #3
 8001ac8:	440b      	add	r3, r1
 8001aca:	333d      	adds	r3, #61	; 0x3d
 8001acc:	2200      	movs	r2, #0
 8001ace:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8001ad0:	78fa      	ldrb	r2, [r7, #3]
 8001ad2:	6879      	ldr	r1, [r7, #4]
 8001ad4:	4613      	mov	r3, r2
 8001ad6:	009b      	lsls	r3, r3, #2
 8001ad8:	4413      	add	r3, r2
 8001ada:	00db      	lsls	r3, r3, #3
 8001adc:	440b      	add	r3, r1
 8001ade:	3338      	adds	r3, #56	; 0x38
 8001ae0:	787a      	ldrb	r2, [r7, #1]
 8001ae2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8001ae4:	78fa      	ldrb	r2, [r7, #3]
 8001ae6:	6879      	ldr	r1, [r7, #4]
 8001ae8:	4613      	mov	r3, r2
 8001aea:	009b      	lsls	r3, r3, #2
 8001aec:	4413      	add	r3, r2
 8001aee:	00db      	lsls	r3, r3, #3
 8001af0:	440b      	add	r3, r1
 8001af2:	3340      	adds	r3, #64	; 0x40
 8001af4:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001af6:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001af8:	78fa      	ldrb	r2, [r7, #3]
 8001afa:	6879      	ldr	r1, [r7, #4]
 8001afc:	4613      	mov	r3, r2
 8001afe:	009b      	lsls	r3, r3, #2
 8001b00:	4413      	add	r3, r2
 8001b02:	00db      	lsls	r3, r3, #3
 8001b04:	440b      	add	r3, r1
 8001b06:	3339      	adds	r3, #57	; 0x39
 8001b08:	78fa      	ldrb	r2, [r7, #3]
 8001b0a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8001b0c:	78fa      	ldrb	r2, [r7, #3]
 8001b0e:	6879      	ldr	r1, [r7, #4]
 8001b10:	4613      	mov	r3, r2
 8001b12:	009b      	lsls	r3, r3, #2
 8001b14:	4413      	add	r3, r2
 8001b16:	00db      	lsls	r3, r3, #3
 8001b18:	440b      	add	r3, r1
 8001b1a:	333f      	adds	r3, #63	; 0x3f
 8001b1c:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8001b20:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8001b22:	78fa      	ldrb	r2, [r7, #3]
 8001b24:	78bb      	ldrb	r3, [r7, #2]
 8001b26:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001b2a:	b2d8      	uxtb	r0, r3
 8001b2c:	6879      	ldr	r1, [r7, #4]
 8001b2e:	4613      	mov	r3, r2
 8001b30:	009b      	lsls	r3, r3, #2
 8001b32:	4413      	add	r3, r2
 8001b34:	00db      	lsls	r3, r3, #3
 8001b36:	440b      	add	r3, r1
 8001b38:	333a      	adds	r3, #58	; 0x3a
 8001b3a:	4602      	mov	r2, r0
 8001b3c:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8001b3e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	da0a      	bge.n	8001b5c <HAL_HCD_HC_Init+0xd0>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8001b46:	78fa      	ldrb	r2, [r7, #3]
 8001b48:	6879      	ldr	r1, [r7, #4]
 8001b4a:	4613      	mov	r3, r2
 8001b4c:	009b      	lsls	r3, r3, #2
 8001b4e:	4413      	add	r3, r2
 8001b50:	00db      	lsls	r3, r3, #3
 8001b52:	440b      	add	r3, r1
 8001b54:	333b      	adds	r3, #59	; 0x3b
 8001b56:	2201      	movs	r2, #1
 8001b58:	701a      	strb	r2, [r3, #0]
 8001b5a:	e009      	b.n	8001b70 <HAL_HCD_HC_Init+0xe4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8001b5c:	78fa      	ldrb	r2, [r7, #3]
 8001b5e:	6879      	ldr	r1, [r7, #4]
 8001b60:	4613      	mov	r3, r2
 8001b62:	009b      	lsls	r3, r3, #2
 8001b64:	4413      	add	r3, r2
 8001b66:	00db      	lsls	r3, r3, #3
 8001b68:	440b      	add	r3, r1
 8001b6a:	333b      	adds	r3, #59	; 0x3b
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8001b70:	78fa      	ldrb	r2, [r7, #3]
 8001b72:	6879      	ldr	r1, [r7, #4]
 8001b74:	4613      	mov	r3, r2
 8001b76:	009b      	lsls	r3, r3, #2
 8001b78:	4413      	add	r3, r2
 8001b7a:	00db      	lsls	r3, r3, #3
 8001b7c:	440b      	add	r3, r1
 8001b7e:	333c      	adds	r3, #60	; 0x3c
 8001b80:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001b84:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	6818      	ldr	r0, [r3, #0]
 8001b8a:	787c      	ldrb	r4, [r7, #1]
 8001b8c:	78ba      	ldrb	r2, [r7, #2]
 8001b8e:	78f9      	ldrb	r1, [r7, #3]
 8001b90:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001b92:	9302      	str	r3, [sp, #8]
 8001b94:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001b98:	9301      	str	r3, [sp, #4]
 8001b9a:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001b9e:	9300      	str	r3, [sp, #0]
 8001ba0:	4623      	mov	r3, r4
 8001ba2:	f005 fb57 	bl	8007254 <USB_HC_Init>
 8001ba6:	4603      	mov	r3, r0
 8001ba8:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	2200      	movs	r2, #0
 8001bae:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 8001bb2:	7bfb      	ldrb	r3, [r7, #15]
}
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	3714      	adds	r7, #20
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	bd90      	pop	{r4, r7, pc}

08001bbc <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b084      	sub	sp, #16
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
 8001bc4:	460b      	mov	r3, r1
 8001bc6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8001bc8:	2300      	movs	r3, #0
 8001bca:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8001bd2:	2b01      	cmp	r3, #1
 8001bd4:	d101      	bne.n	8001bda <HAL_HCD_HC_Halt+0x1e>
 8001bd6:	2302      	movs	r3, #2
 8001bd8:	e00f      	b.n	8001bfa <HAL_HCD_HC_Halt+0x3e>
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	2201      	movs	r2, #1
 8001bde:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	78fa      	ldrb	r2, [r7, #3]
 8001be8:	4611      	mov	r1, r2
 8001bea:	4618      	mov	r0, r3
 8001bec:	f005 fd93 	bl	8007716 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 8001bf8:	7bfb      	ldrb	r3, [r7, #15]
}
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	3710      	adds	r7, #16
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	bd80      	pop	{r7, pc}
	...

08001c04 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b082      	sub	sp, #8
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
 8001c0c:	4608      	mov	r0, r1
 8001c0e:	4611      	mov	r1, r2
 8001c10:	461a      	mov	r2, r3
 8001c12:	4603      	mov	r3, r0
 8001c14:	70fb      	strb	r3, [r7, #3]
 8001c16:	460b      	mov	r3, r1
 8001c18:	70bb      	strb	r3, [r7, #2]
 8001c1a:	4613      	mov	r3, r2
 8001c1c:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8001c1e:	78fa      	ldrb	r2, [r7, #3]
 8001c20:	6879      	ldr	r1, [r7, #4]
 8001c22:	4613      	mov	r3, r2
 8001c24:	009b      	lsls	r3, r3, #2
 8001c26:	4413      	add	r3, r2
 8001c28:	00db      	lsls	r3, r3, #3
 8001c2a:	440b      	add	r3, r1
 8001c2c:	333b      	adds	r3, #59	; 0x3b
 8001c2e:	78ba      	ldrb	r2, [r7, #2]
 8001c30:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8001c32:	78fa      	ldrb	r2, [r7, #3]
 8001c34:	6879      	ldr	r1, [r7, #4]
 8001c36:	4613      	mov	r3, r2
 8001c38:	009b      	lsls	r3, r3, #2
 8001c3a:	4413      	add	r3, r2
 8001c3c:	00db      	lsls	r3, r3, #3
 8001c3e:	440b      	add	r3, r1
 8001c40:	333f      	adds	r3, #63	; 0x3f
 8001c42:	787a      	ldrb	r2, [r7, #1]
 8001c44:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8001c46:	7c3b      	ldrb	r3, [r7, #16]
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d114      	bne.n	8001c76 <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8001c4c:	78fa      	ldrb	r2, [r7, #3]
 8001c4e:	6879      	ldr	r1, [r7, #4]
 8001c50:	4613      	mov	r3, r2
 8001c52:	009b      	lsls	r3, r3, #2
 8001c54:	4413      	add	r3, r2
 8001c56:	00db      	lsls	r3, r3, #3
 8001c58:	440b      	add	r3, r1
 8001c5a:	3342      	adds	r3, #66	; 0x42
 8001c5c:	2203      	movs	r2, #3
 8001c5e:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8001c60:	78fa      	ldrb	r2, [r7, #3]
 8001c62:	6879      	ldr	r1, [r7, #4]
 8001c64:	4613      	mov	r3, r2
 8001c66:	009b      	lsls	r3, r3, #2
 8001c68:	4413      	add	r3, r2
 8001c6a:	00db      	lsls	r3, r3, #3
 8001c6c:	440b      	add	r3, r1
 8001c6e:	333d      	adds	r3, #61	; 0x3d
 8001c70:	7f3a      	ldrb	r2, [r7, #28]
 8001c72:	701a      	strb	r2, [r3, #0]
 8001c74:	e009      	b.n	8001c8a <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001c76:	78fa      	ldrb	r2, [r7, #3]
 8001c78:	6879      	ldr	r1, [r7, #4]
 8001c7a:	4613      	mov	r3, r2
 8001c7c:	009b      	lsls	r3, r3, #2
 8001c7e:	4413      	add	r3, r2
 8001c80:	00db      	lsls	r3, r3, #3
 8001c82:	440b      	add	r3, r1
 8001c84:	3342      	adds	r3, #66	; 0x42
 8001c86:	2202      	movs	r2, #2
 8001c88:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8001c8a:	787b      	ldrb	r3, [r7, #1]
 8001c8c:	2b03      	cmp	r3, #3
 8001c8e:	f200 80d6 	bhi.w	8001e3e <HAL_HCD_HC_SubmitRequest+0x23a>
 8001c92:	a201      	add	r2, pc, #4	; (adr r2, 8001c98 <HAL_HCD_HC_SubmitRequest+0x94>)
 8001c94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c98:	08001ca9 	.word	0x08001ca9
 8001c9c:	08001e29 	.word	0x08001e29
 8001ca0:	08001d15 	.word	0x08001d15
 8001ca4:	08001d9f 	.word	0x08001d9f
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8001ca8:	7c3b      	ldrb	r3, [r7, #16]
 8001caa:	2b01      	cmp	r3, #1
 8001cac:	f040 80c9 	bne.w	8001e42 <HAL_HCD_HC_SubmitRequest+0x23e>
 8001cb0:	78bb      	ldrb	r3, [r7, #2]
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	f040 80c5 	bne.w	8001e42 <HAL_HCD_HC_SubmitRequest+0x23e>
      {
        if (length == 0U)
 8001cb8:	8b3b      	ldrh	r3, [r7, #24]
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d109      	bne.n	8001cd2 <HAL_HCD_HC_SubmitRequest+0xce>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8001cbe:	78fa      	ldrb	r2, [r7, #3]
 8001cc0:	6879      	ldr	r1, [r7, #4]
 8001cc2:	4613      	mov	r3, r2
 8001cc4:	009b      	lsls	r3, r3, #2
 8001cc6:	4413      	add	r3, r2
 8001cc8:	00db      	lsls	r3, r3, #3
 8001cca:	440b      	add	r3, r1
 8001ccc:	3351      	adds	r3, #81	; 0x51
 8001cce:	2201      	movs	r2, #1
 8001cd0:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001cd2:	78fa      	ldrb	r2, [r7, #3]
 8001cd4:	6879      	ldr	r1, [r7, #4]
 8001cd6:	4613      	mov	r3, r2
 8001cd8:	009b      	lsls	r3, r3, #2
 8001cda:	4413      	add	r3, r2
 8001cdc:	00db      	lsls	r3, r3, #3
 8001cde:	440b      	add	r3, r1
 8001ce0:	3351      	adds	r3, #81	; 0x51
 8001ce2:	781b      	ldrb	r3, [r3, #0]
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d10a      	bne.n	8001cfe <HAL_HCD_HC_SubmitRequest+0xfa>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001ce8:	78fa      	ldrb	r2, [r7, #3]
 8001cea:	6879      	ldr	r1, [r7, #4]
 8001cec:	4613      	mov	r3, r2
 8001cee:	009b      	lsls	r3, r3, #2
 8001cf0:	4413      	add	r3, r2
 8001cf2:	00db      	lsls	r3, r3, #3
 8001cf4:	440b      	add	r3, r1
 8001cf6:	3342      	adds	r3, #66	; 0x42
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001cfc:	e0a1      	b.n	8001e42 <HAL_HCD_HC_SubmitRequest+0x23e>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001cfe:	78fa      	ldrb	r2, [r7, #3]
 8001d00:	6879      	ldr	r1, [r7, #4]
 8001d02:	4613      	mov	r3, r2
 8001d04:	009b      	lsls	r3, r3, #2
 8001d06:	4413      	add	r3, r2
 8001d08:	00db      	lsls	r3, r3, #3
 8001d0a:	440b      	add	r3, r1
 8001d0c:	3342      	adds	r3, #66	; 0x42
 8001d0e:	2202      	movs	r2, #2
 8001d10:	701a      	strb	r2, [r3, #0]
      break;
 8001d12:	e096      	b.n	8001e42 <HAL_HCD_HC_SubmitRequest+0x23e>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8001d14:	78bb      	ldrb	r3, [r7, #2]
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d120      	bne.n	8001d5c <HAL_HCD_HC_SubmitRequest+0x158>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001d1a:	78fa      	ldrb	r2, [r7, #3]
 8001d1c:	6879      	ldr	r1, [r7, #4]
 8001d1e:	4613      	mov	r3, r2
 8001d20:	009b      	lsls	r3, r3, #2
 8001d22:	4413      	add	r3, r2
 8001d24:	00db      	lsls	r3, r3, #3
 8001d26:	440b      	add	r3, r1
 8001d28:	3351      	adds	r3, #81	; 0x51
 8001d2a:	781b      	ldrb	r3, [r3, #0]
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d10a      	bne.n	8001d46 <HAL_HCD_HC_SubmitRequest+0x142>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001d30:	78fa      	ldrb	r2, [r7, #3]
 8001d32:	6879      	ldr	r1, [r7, #4]
 8001d34:	4613      	mov	r3, r2
 8001d36:	009b      	lsls	r3, r3, #2
 8001d38:	4413      	add	r3, r2
 8001d3a:	00db      	lsls	r3, r3, #3
 8001d3c:	440b      	add	r3, r1
 8001d3e:	3342      	adds	r3, #66	; 0x42
 8001d40:	2200      	movs	r2, #0
 8001d42:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8001d44:	e07e      	b.n	8001e44 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001d46:	78fa      	ldrb	r2, [r7, #3]
 8001d48:	6879      	ldr	r1, [r7, #4]
 8001d4a:	4613      	mov	r3, r2
 8001d4c:	009b      	lsls	r3, r3, #2
 8001d4e:	4413      	add	r3, r2
 8001d50:	00db      	lsls	r3, r3, #3
 8001d52:	440b      	add	r3, r1
 8001d54:	3342      	adds	r3, #66	; 0x42
 8001d56:	2202      	movs	r2, #2
 8001d58:	701a      	strb	r2, [r3, #0]
      break;
 8001d5a:	e073      	b.n	8001e44 <HAL_HCD_HC_SubmitRequest+0x240>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001d5c:	78fa      	ldrb	r2, [r7, #3]
 8001d5e:	6879      	ldr	r1, [r7, #4]
 8001d60:	4613      	mov	r3, r2
 8001d62:	009b      	lsls	r3, r3, #2
 8001d64:	4413      	add	r3, r2
 8001d66:	00db      	lsls	r3, r3, #3
 8001d68:	440b      	add	r3, r1
 8001d6a:	3350      	adds	r3, #80	; 0x50
 8001d6c:	781b      	ldrb	r3, [r3, #0]
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d10a      	bne.n	8001d88 <HAL_HCD_HC_SubmitRequest+0x184>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001d72:	78fa      	ldrb	r2, [r7, #3]
 8001d74:	6879      	ldr	r1, [r7, #4]
 8001d76:	4613      	mov	r3, r2
 8001d78:	009b      	lsls	r3, r3, #2
 8001d7a:	4413      	add	r3, r2
 8001d7c:	00db      	lsls	r3, r3, #3
 8001d7e:	440b      	add	r3, r1
 8001d80:	3342      	adds	r3, #66	; 0x42
 8001d82:	2200      	movs	r2, #0
 8001d84:	701a      	strb	r2, [r3, #0]
      break;
 8001d86:	e05d      	b.n	8001e44 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001d88:	78fa      	ldrb	r2, [r7, #3]
 8001d8a:	6879      	ldr	r1, [r7, #4]
 8001d8c:	4613      	mov	r3, r2
 8001d8e:	009b      	lsls	r3, r3, #2
 8001d90:	4413      	add	r3, r2
 8001d92:	00db      	lsls	r3, r3, #3
 8001d94:	440b      	add	r3, r1
 8001d96:	3342      	adds	r3, #66	; 0x42
 8001d98:	2202      	movs	r2, #2
 8001d9a:	701a      	strb	r2, [r3, #0]
      break;
 8001d9c:	e052      	b.n	8001e44 <HAL_HCD_HC_SubmitRequest+0x240>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8001d9e:	78bb      	ldrb	r3, [r7, #2]
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d120      	bne.n	8001de6 <HAL_HCD_HC_SubmitRequest+0x1e2>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001da4:	78fa      	ldrb	r2, [r7, #3]
 8001da6:	6879      	ldr	r1, [r7, #4]
 8001da8:	4613      	mov	r3, r2
 8001daa:	009b      	lsls	r3, r3, #2
 8001dac:	4413      	add	r3, r2
 8001dae:	00db      	lsls	r3, r3, #3
 8001db0:	440b      	add	r3, r1
 8001db2:	3351      	adds	r3, #81	; 0x51
 8001db4:	781b      	ldrb	r3, [r3, #0]
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d10a      	bne.n	8001dd0 <HAL_HCD_HC_SubmitRequest+0x1cc>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001dba:	78fa      	ldrb	r2, [r7, #3]
 8001dbc:	6879      	ldr	r1, [r7, #4]
 8001dbe:	4613      	mov	r3, r2
 8001dc0:	009b      	lsls	r3, r3, #2
 8001dc2:	4413      	add	r3, r2
 8001dc4:	00db      	lsls	r3, r3, #3
 8001dc6:	440b      	add	r3, r1
 8001dc8:	3342      	adds	r3, #66	; 0x42
 8001dca:	2200      	movs	r2, #0
 8001dcc:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001dce:	e039      	b.n	8001e44 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001dd0:	78fa      	ldrb	r2, [r7, #3]
 8001dd2:	6879      	ldr	r1, [r7, #4]
 8001dd4:	4613      	mov	r3, r2
 8001dd6:	009b      	lsls	r3, r3, #2
 8001dd8:	4413      	add	r3, r2
 8001dda:	00db      	lsls	r3, r3, #3
 8001ddc:	440b      	add	r3, r1
 8001dde:	3342      	adds	r3, #66	; 0x42
 8001de0:	2202      	movs	r2, #2
 8001de2:	701a      	strb	r2, [r3, #0]
      break;
 8001de4:	e02e      	b.n	8001e44 <HAL_HCD_HC_SubmitRequest+0x240>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001de6:	78fa      	ldrb	r2, [r7, #3]
 8001de8:	6879      	ldr	r1, [r7, #4]
 8001dea:	4613      	mov	r3, r2
 8001dec:	009b      	lsls	r3, r3, #2
 8001dee:	4413      	add	r3, r2
 8001df0:	00db      	lsls	r3, r3, #3
 8001df2:	440b      	add	r3, r1
 8001df4:	3350      	adds	r3, #80	; 0x50
 8001df6:	781b      	ldrb	r3, [r3, #0]
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d10a      	bne.n	8001e12 <HAL_HCD_HC_SubmitRequest+0x20e>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001dfc:	78fa      	ldrb	r2, [r7, #3]
 8001dfe:	6879      	ldr	r1, [r7, #4]
 8001e00:	4613      	mov	r3, r2
 8001e02:	009b      	lsls	r3, r3, #2
 8001e04:	4413      	add	r3, r2
 8001e06:	00db      	lsls	r3, r3, #3
 8001e08:	440b      	add	r3, r1
 8001e0a:	3342      	adds	r3, #66	; 0x42
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	701a      	strb	r2, [r3, #0]
      break;
 8001e10:	e018      	b.n	8001e44 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001e12:	78fa      	ldrb	r2, [r7, #3]
 8001e14:	6879      	ldr	r1, [r7, #4]
 8001e16:	4613      	mov	r3, r2
 8001e18:	009b      	lsls	r3, r3, #2
 8001e1a:	4413      	add	r3, r2
 8001e1c:	00db      	lsls	r3, r3, #3
 8001e1e:	440b      	add	r3, r1
 8001e20:	3342      	adds	r3, #66	; 0x42
 8001e22:	2202      	movs	r2, #2
 8001e24:	701a      	strb	r2, [r3, #0]
      break;
 8001e26:	e00d      	b.n	8001e44 <HAL_HCD_HC_SubmitRequest+0x240>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001e28:	78fa      	ldrb	r2, [r7, #3]
 8001e2a:	6879      	ldr	r1, [r7, #4]
 8001e2c:	4613      	mov	r3, r2
 8001e2e:	009b      	lsls	r3, r3, #2
 8001e30:	4413      	add	r3, r2
 8001e32:	00db      	lsls	r3, r3, #3
 8001e34:	440b      	add	r3, r1
 8001e36:	3342      	adds	r3, #66	; 0x42
 8001e38:	2200      	movs	r2, #0
 8001e3a:	701a      	strb	r2, [r3, #0]
      break;
 8001e3c:	e002      	b.n	8001e44 <HAL_HCD_HC_SubmitRequest+0x240>

    default:
      break;
 8001e3e:	bf00      	nop
 8001e40:	e000      	b.n	8001e44 <HAL_HCD_HC_SubmitRequest+0x240>
      break;
 8001e42:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8001e44:	78fa      	ldrb	r2, [r7, #3]
 8001e46:	6879      	ldr	r1, [r7, #4]
 8001e48:	4613      	mov	r3, r2
 8001e4a:	009b      	lsls	r3, r3, #2
 8001e4c:	4413      	add	r3, r2
 8001e4e:	00db      	lsls	r3, r3, #3
 8001e50:	440b      	add	r3, r1
 8001e52:	3344      	adds	r3, #68	; 0x44
 8001e54:	697a      	ldr	r2, [r7, #20]
 8001e56:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8001e58:	78fa      	ldrb	r2, [r7, #3]
 8001e5a:	8b39      	ldrh	r1, [r7, #24]
 8001e5c:	6878      	ldr	r0, [r7, #4]
 8001e5e:	4613      	mov	r3, r2
 8001e60:	009b      	lsls	r3, r3, #2
 8001e62:	4413      	add	r3, r2
 8001e64:	00db      	lsls	r3, r3, #3
 8001e66:	4403      	add	r3, r0
 8001e68:	3348      	adds	r3, #72	; 0x48
 8001e6a:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8001e6c:	78fa      	ldrb	r2, [r7, #3]
 8001e6e:	6879      	ldr	r1, [r7, #4]
 8001e70:	4613      	mov	r3, r2
 8001e72:	009b      	lsls	r3, r3, #2
 8001e74:	4413      	add	r3, r2
 8001e76:	00db      	lsls	r3, r3, #3
 8001e78:	440b      	add	r3, r1
 8001e7a:	335c      	adds	r3, #92	; 0x5c
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8001e80:	78fa      	ldrb	r2, [r7, #3]
 8001e82:	6879      	ldr	r1, [r7, #4]
 8001e84:	4613      	mov	r3, r2
 8001e86:	009b      	lsls	r3, r3, #2
 8001e88:	4413      	add	r3, r2
 8001e8a:	00db      	lsls	r3, r3, #3
 8001e8c:	440b      	add	r3, r1
 8001e8e:	334c      	adds	r3, #76	; 0x4c
 8001e90:	2200      	movs	r2, #0
 8001e92:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001e94:	78fa      	ldrb	r2, [r7, #3]
 8001e96:	6879      	ldr	r1, [r7, #4]
 8001e98:	4613      	mov	r3, r2
 8001e9a:	009b      	lsls	r3, r3, #2
 8001e9c:	4413      	add	r3, r2
 8001e9e:	00db      	lsls	r3, r3, #3
 8001ea0:	440b      	add	r3, r1
 8001ea2:	3339      	adds	r3, #57	; 0x39
 8001ea4:	78fa      	ldrb	r2, [r7, #3]
 8001ea6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8001ea8:	78fa      	ldrb	r2, [r7, #3]
 8001eaa:	6879      	ldr	r1, [r7, #4]
 8001eac:	4613      	mov	r3, r2
 8001eae:	009b      	lsls	r3, r3, #2
 8001eb0:	4413      	add	r3, r2
 8001eb2:	00db      	lsls	r3, r3, #3
 8001eb4:	440b      	add	r3, r1
 8001eb6:	335d      	adds	r3, #93	; 0x5d
 8001eb8:	2200      	movs	r2, #0
 8001eba:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	6818      	ldr	r0, [r3, #0]
 8001ec0:	78fa      	ldrb	r2, [r7, #3]
 8001ec2:	4613      	mov	r3, r2
 8001ec4:	009b      	lsls	r3, r3, #2
 8001ec6:	4413      	add	r3, r2
 8001ec8:	00db      	lsls	r3, r3, #3
 8001eca:	3338      	adds	r3, #56	; 0x38
 8001ecc:	687a      	ldr	r2, [r7, #4]
 8001ece:	18d1      	adds	r1, r2, r3
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	691b      	ldr	r3, [r3, #16]
 8001ed4:	b2db      	uxtb	r3, r3
 8001ed6:	461a      	mov	r2, r3
 8001ed8:	f005 fac6 	bl	8007468 <USB_HC_StartXfer>
 8001edc:	4603      	mov	r3, r0
}
 8001ede:	4618      	mov	r0, r3
 8001ee0:	3708      	adds	r7, #8
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	bd80      	pop	{r7, pc}
 8001ee6:	bf00      	nop

08001ee8 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	b086      	sub	sp, #24
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001ef6:	693b      	ldr	r3, [r7, #16]
 8001ef8:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	4618      	mov	r0, r3
 8001f00:	f004 ffe3 	bl	8006eca <USB_GetMode>
 8001f04:	4603      	mov	r3, r0
 8001f06:	2b01      	cmp	r3, #1
 8001f08:	f040 80ef 	bne.w	80020ea <HAL_HCD_IRQHandler+0x202>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	4618      	mov	r0, r3
 8001f12:	f004 ffc7 	bl	8006ea4 <USB_ReadInterrupts>
 8001f16:	4603      	mov	r3, r0
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	f000 80e5 	beq.w	80020e8 <HAL_HCD_IRQHandler+0x200>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	4618      	mov	r0, r3
 8001f24:	f004 ffbe 	bl	8006ea4 <USB_ReadInterrupts>
 8001f28:	4603      	mov	r3, r0
 8001f2a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f2e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001f32:	d104      	bne.n	8001f3e <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001f3c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	4618      	mov	r0, r3
 8001f44:	f004 ffae 	bl	8006ea4 <USB_ReadInterrupts>
 8001f48:	4603      	mov	r3, r0
 8001f4a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f4e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001f52:	d104      	bne.n	8001f5e <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001f5c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	4618      	mov	r0, r3
 8001f64:	f004 ff9e 	bl	8006ea4 <USB_ReadInterrupts>
 8001f68:	4603      	mov	r3, r0
 8001f6a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001f6e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001f72:	d104      	bne.n	8001f7e <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001f7c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	4618      	mov	r0, r3
 8001f84:	f004 ff8e 	bl	8006ea4 <USB_ReadInterrupts>
 8001f88:	4603      	mov	r3, r0
 8001f8a:	f003 0302 	and.w	r3, r3, #2
 8001f8e:	2b02      	cmp	r3, #2
 8001f90:	d103      	bne.n	8001f9a <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	2202      	movs	r2, #2
 8001f98:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	f004 ff80 	bl	8006ea4 <USB_ReadInterrupts>
 8001fa4:	4603      	mov	r3, r0
 8001fa6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001faa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001fae:	d115      	bne.n	8001fdc <HAL_HCD_IRQHandler+0xf4>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001fb8:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	f003 0301 	and.w	r3, r3, #1
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d108      	bne.n	8001fdc <HAL_HCD_IRQHandler+0xf4>
      {
        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8001fca:	6878      	ldr	r0, [r7, #4]
 8001fcc:	f007 fd2a 	bl	8009a24 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	2101      	movs	r1, #1
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	f005 f876 	bl	80070c8 <USB_InitFSLSPClkSel>
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	f004 ff5f 	bl	8006ea4 <USB_ReadInterrupts>
 8001fe6:	4603      	mov	r3, r0
 8001fe8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001fec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001ff0:	d102      	bne.n	8001ff8 <HAL_HCD_IRQHandler+0x110>
    {
      HCD_Port_IRQHandler(hhcd);
 8001ff2:	6878      	ldr	r0, [r7, #4]
 8001ff4:	f001 f966 	bl	80032c4 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	f004 ff51 	bl	8006ea4 <USB_ReadInterrupts>
 8002002:	4603      	mov	r3, r0
 8002004:	f003 0308 	and.w	r3, r3, #8
 8002008:	2b08      	cmp	r3, #8
 800200a:	d106      	bne.n	800201a <HAL_HCD_IRQHandler+0x132>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 800200c:	6878      	ldr	r0, [r7, #4]
 800200e:	f007 fced 	bl	80099ec <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	2208      	movs	r2, #8
 8002018:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	4618      	mov	r0, r3
 8002020:	f004 ff40 	bl	8006ea4 <USB_ReadInterrupts>
 8002024:	4603      	mov	r3, r0
 8002026:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800202a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800202e:	d138      	bne.n	80020a2 <HAL_HCD_IRQHandler+0x1ba>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	4618      	mov	r0, r3
 8002036:	f005 fb5d 	bl	80076f4 <USB_HC_ReadInterrupt>
 800203a:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800203c:	2300      	movs	r3, #0
 800203e:	617b      	str	r3, [r7, #20]
 8002040:	e025      	b.n	800208e <HAL_HCD_IRQHandler+0x1a6>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8002042:	697b      	ldr	r3, [r7, #20]
 8002044:	f003 030f 	and.w	r3, r3, #15
 8002048:	68ba      	ldr	r2, [r7, #8]
 800204a:	fa22 f303 	lsr.w	r3, r2, r3
 800204e:	f003 0301 	and.w	r3, r3, #1
 8002052:	2b00      	cmp	r3, #0
 8002054:	d018      	beq.n	8002088 <HAL_HCD_IRQHandler+0x1a0>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8002056:	697b      	ldr	r3, [r7, #20]
 8002058:	015a      	lsls	r2, r3, #5
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	4413      	add	r3, r2
 800205e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002068:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800206c:	d106      	bne.n	800207c <HAL_HCD_IRQHandler+0x194>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 800206e:	697b      	ldr	r3, [r7, #20]
 8002070:	b2db      	uxtb	r3, r3
 8002072:	4619      	mov	r1, r3
 8002074:	6878      	ldr	r0, [r7, #4]
 8002076:	f000 f8cf 	bl	8002218 <HCD_HC_IN_IRQHandler>
 800207a:	e005      	b.n	8002088 <HAL_HCD_IRQHandler+0x1a0>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 800207c:	697b      	ldr	r3, [r7, #20]
 800207e:	b2db      	uxtb	r3, r3
 8002080:	4619      	mov	r1, r3
 8002082:	6878      	ldr	r0, [r7, #4]
 8002084:	f000 fcfd 	bl	8002a82 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002088:	697b      	ldr	r3, [r7, #20]
 800208a:	3301      	adds	r3, #1
 800208c:	617b      	str	r3, [r7, #20]
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	689b      	ldr	r3, [r3, #8]
 8002092:	697a      	ldr	r2, [r7, #20]
 8002094:	429a      	cmp	r2, r3
 8002096:	d3d4      	bcc.n	8002042 <HAL_HCD_IRQHandler+0x15a>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80020a0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	4618      	mov	r0, r3
 80020a8:	f004 fefc 	bl	8006ea4 <USB_ReadInterrupts>
 80020ac:	4603      	mov	r3, r0
 80020ae:	f003 0310 	and.w	r3, r3, #16
 80020b2:	2b10      	cmp	r3, #16
 80020b4:	d101      	bne.n	80020ba <HAL_HCD_IRQHandler+0x1d2>
 80020b6:	2301      	movs	r3, #1
 80020b8:	e000      	b.n	80020bc <HAL_HCD_IRQHandler+0x1d4>
 80020ba:	2300      	movs	r3, #0
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d014      	beq.n	80020ea <HAL_HCD_IRQHandler+0x202>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	699a      	ldr	r2, [r3, #24]
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f022 0210 	bic.w	r2, r2, #16
 80020ce:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 80020d0:	6878      	ldr	r0, [r7, #4]
 80020d2:	f001 f84b 	bl	800316c <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	699a      	ldr	r2, [r3, #24]
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	f042 0210 	orr.w	r2, r2, #16
 80020e4:	619a      	str	r2, [r3, #24]
 80020e6:	e000      	b.n	80020ea <HAL_HCD_IRQHandler+0x202>
      return;
 80020e8:	bf00      	nop
    }
  }
}
 80020ea:	3718      	adds	r7, #24
 80020ec:	46bd      	mov	sp, r7
 80020ee:	bd80      	pop	{r7, pc}

080020f0 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	b082      	sub	sp, #8
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 80020fe:	2b01      	cmp	r3, #1
 8002100:	d101      	bne.n	8002106 <HAL_HCD_Start+0x16>
 8002102:	2302      	movs	r3, #2
 8002104:	e013      	b.n	800212e <HAL_HCD_Start+0x3e>
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	2201      	movs	r2, #1
 800210a:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  __HAL_HCD_ENABLE(hhcd);
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	4618      	mov	r0, r3
 8002114:	f004 fdd3 	bl	8006cbe <USB_EnableGlobalInt>
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	2101      	movs	r1, #1
 800211e:	4618      	mov	r0, r3
 8002120:	f005 f836 	bl	8007190 <USB_DriveVbus>
  __HAL_UNLOCK(hhcd);
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	2200      	movs	r2, #0
 8002128:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return HAL_OK;
 800212c:	2300      	movs	r3, #0
}
 800212e:	4618      	mov	r0, r3
 8002130:	3708      	adds	r7, #8
 8002132:	46bd      	mov	sp, r7
 8002134:	bd80      	pop	{r7, pc}

08002136 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8002136:	b580      	push	{r7, lr}
 8002138:	b082      	sub	sp, #8
 800213a:	af00      	add	r7, sp, #0
 800213c:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8002144:	2b01      	cmp	r3, #1
 8002146:	d101      	bne.n	800214c <HAL_HCD_Stop+0x16>
 8002148:	2302      	movs	r3, #2
 800214a:	e00d      	b.n	8002168 <HAL_HCD_Stop+0x32>
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	2201      	movs	r2, #1
 8002150:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_StopHost(hhcd->Instance);
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	4618      	mov	r0, r3
 800215a:	f005 fc17 	bl	800798c <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	2200      	movs	r2, #0
 8002162:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return HAL_OK;
 8002166:	2300      	movs	r3, #0
}
 8002168:	4618      	mov	r0, r3
 800216a:	3708      	adds	r7, #8
 800216c:	46bd      	mov	sp, r7
 800216e:	bd80      	pop	{r7, pc}

08002170 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8002170:	b580      	push	{r7, lr}
 8002172:	b082      	sub	sp, #8
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	4618      	mov	r0, r3
 800217e:	f004 ffdd 	bl	800713c <USB_ResetPort>
 8002182:	4603      	mov	r3, r0
}
 8002184:	4618      	mov	r0, r3
 8002186:	3708      	adds	r7, #8
 8002188:	46bd      	mov	sp, r7
 800218a:	bd80      	pop	{r7, pc}

0800218c <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800218c:	b480      	push	{r7}
 800218e:	b083      	sub	sp, #12
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]
 8002194:	460b      	mov	r3, r1
 8002196:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8002198:	78fa      	ldrb	r2, [r7, #3]
 800219a:	6879      	ldr	r1, [r7, #4]
 800219c:	4613      	mov	r3, r2
 800219e:	009b      	lsls	r3, r3, #2
 80021a0:	4413      	add	r3, r2
 80021a2:	00db      	lsls	r3, r3, #3
 80021a4:	440b      	add	r3, r1
 80021a6:	335c      	adds	r3, #92	; 0x5c
 80021a8:	781b      	ldrb	r3, [r3, #0]
}
 80021aa:	4618      	mov	r0, r3
 80021ac:	370c      	adds	r7, #12
 80021ae:	46bd      	mov	sp, r7
 80021b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b4:	4770      	bx	lr

080021b6 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80021b6:	b480      	push	{r7}
 80021b8:	b083      	sub	sp, #12
 80021ba:	af00      	add	r7, sp, #0
 80021bc:	6078      	str	r0, [r7, #4]
 80021be:	460b      	mov	r3, r1
 80021c0:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 80021c2:	78fa      	ldrb	r2, [r7, #3]
 80021c4:	6879      	ldr	r1, [r7, #4]
 80021c6:	4613      	mov	r3, r2
 80021c8:	009b      	lsls	r3, r3, #2
 80021ca:	4413      	add	r3, r2
 80021cc:	00db      	lsls	r3, r3, #3
 80021ce:	440b      	add	r3, r1
 80021d0:	334c      	adds	r3, #76	; 0x4c
 80021d2:	681b      	ldr	r3, [r3, #0]
}
 80021d4:	4618      	mov	r0, r3
 80021d6:	370c      	adds	r7, #12
 80021d8:	46bd      	mov	sp, r7
 80021da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021de:	4770      	bx	lr

080021e0 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	b082      	sub	sp, #8
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	4618      	mov	r0, r3
 80021ee:	f005 f81f 	bl	8007230 <USB_GetCurrentFrame>
 80021f2:	4603      	mov	r3, r0
}
 80021f4:	4618      	mov	r0, r3
 80021f6:	3708      	adds	r7, #8
 80021f8:	46bd      	mov	sp, r7
 80021fa:	bd80      	pop	{r7, pc}

080021fc <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	b082      	sub	sp, #8
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	4618      	mov	r0, r3
 800220a:	f004 fffa 	bl	8007202 <USB_GetHostSpeed>
 800220e:	4603      	mov	r3, r0
}
 8002210:	4618      	mov	r0, r3
 8002212:	3708      	adds	r7, #8
 8002214:	46bd      	mov	sp, r7
 8002216:	bd80      	pop	{r7, pc}

08002218 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002218:	b580      	push	{r7, lr}
 800221a:	b086      	sub	sp, #24
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
 8002220:	460b      	mov	r3, r1
 8002222:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800222a:	697b      	ldr	r3, [r7, #20]
 800222c:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 800222e:	78fb      	ldrb	r3, [r7, #3]
 8002230:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	015a      	lsls	r2, r3, #5
 8002236:	693b      	ldr	r3, [r7, #16]
 8002238:	4413      	add	r3, r2
 800223a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800223e:	689b      	ldr	r3, [r3, #8]
 8002240:	f003 0304 	and.w	r3, r3, #4
 8002244:	2b04      	cmp	r3, #4
 8002246:	d119      	bne.n	800227c <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	015a      	lsls	r2, r3, #5
 800224c:	693b      	ldr	r3, [r7, #16]
 800224e:	4413      	add	r3, r2
 8002250:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002254:	461a      	mov	r2, r3
 8002256:	2304      	movs	r3, #4
 8002258:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	015a      	lsls	r2, r3, #5
 800225e:	693b      	ldr	r3, [r7, #16]
 8002260:	4413      	add	r3, r2
 8002262:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002266:	68db      	ldr	r3, [r3, #12]
 8002268:	68fa      	ldr	r2, [r7, #12]
 800226a:	0151      	lsls	r1, r2, #5
 800226c:	693a      	ldr	r2, [r7, #16]
 800226e:	440a      	add	r2, r1
 8002270:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002274:	f043 0302 	orr.w	r3, r3, #2
 8002278:	60d3      	str	r3, [r2, #12]
 800227a:	e0ce      	b.n	800241a <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	015a      	lsls	r2, r3, #5
 8002280:	693b      	ldr	r3, [r7, #16]
 8002282:	4413      	add	r3, r2
 8002284:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002288:	689b      	ldr	r3, [r3, #8]
 800228a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800228e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002292:	d12c      	bne.n	80022ee <HCD_HC_IN_IRQHandler+0xd6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	015a      	lsls	r2, r3, #5
 8002298:	693b      	ldr	r3, [r7, #16]
 800229a:	4413      	add	r3, r2
 800229c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022a0:	461a      	mov	r2, r3
 80022a2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80022a6:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 80022a8:	6879      	ldr	r1, [r7, #4]
 80022aa:	68fa      	ldr	r2, [r7, #12]
 80022ac:	4613      	mov	r3, r2
 80022ae:	009b      	lsls	r3, r3, #2
 80022b0:	4413      	add	r3, r2
 80022b2:	00db      	lsls	r3, r3, #3
 80022b4:	440b      	add	r3, r1
 80022b6:	335d      	adds	r3, #93	; 0x5d
 80022b8:	2207      	movs	r2, #7
 80022ba:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	015a      	lsls	r2, r3, #5
 80022c0:	693b      	ldr	r3, [r7, #16]
 80022c2:	4413      	add	r3, r2
 80022c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022c8:	68db      	ldr	r3, [r3, #12]
 80022ca:	68fa      	ldr	r2, [r7, #12]
 80022cc:	0151      	lsls	r1, r2, #5
 80022ce:	693a      	ldr	r2, [r7, #16]
 80022d0:	440a      	add	r2, r1
 80022d2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80022d6:	f043 0302 	orr.w	r3, r3, #2
 80022da:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	68fa      	ldr	r2, [r7, #12]
 80022e2:	b2d2      	uxtb	r2, r2
 80022e4:	4611      	mov	r1, r2
 80022e6:	4618      	mov	r0, r3
 80022e8:	f005 fa15 	bl	8007716 <USB_HC_Halt>
 80022ec:	e095      	b.n	800241a <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	015a      	lsls	r2, r3, #5
 80022f2:	693b      	ldr	r3, [r7, #16]
 80022f4:	4413      	add	r3, r2
 80022f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022fa:	689b      	ldr	r3, [r3, #8]
 80022fc:	f003 0320 	and.w	r3, r3, #32
 8002300:	2b20      	cmp	r3, #32
 8002302:	d109      	bne.n	8002318 <HCD_HC_IN_IRQHandler+0x100>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	015a      	lsls	r2, r3, #5
 8002308:	693b      	ldr	r3, [r7, #16]
 800230a:	4413      	add	r3, r2
 800230c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002310:	461a      	mov	r2, r3
 8002312:	2320      	movs	r3, #32
 8002314:	6093      	str	r3, [r2, #8]
 8002316:	e080      	b.n	800241a <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	015a      	lsls	r2, r3, #5
 800231c:	693b      	ldr	r3, [r7, #16]
 800231e:	4413      	add	r3, r2
 8002320:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002324:	689b      	ldr	r3, [r3, #8]
 8002326:	f003 0308 	and.w	r3, r3, #8
 800232a:	2b08      	cmp	r3, #8
 800232c:	d134      	bne.n	8002398 <HCD_HC_IN_IRQHandler+0x180>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	015a      	lsls	r2, r3, #5
 8002332:	693b      	ldr	r3, [r7, #16]
 8002334:	4413      	add	r3, r2
 8002336:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800233a:	68db      	ldr	r3, [r3, #12]
 800233c:	68fa      	ldr	r2, [r7, #12]
 800233e:	0151      	lsls	r1, r2, #5
 8002340:	693a      	ldr	r2, [r7, #16]
 8002342:	440a      	add	r2, r1
 8002344:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002348:	f043 0302 	orr.w	r3, r3, #2
 800234c:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 800234e:	6879      	ldr	r1, [r7, #4]
 8002350:	68fa      	ldr	r2, [r7, #12]
 8002352:	4613      	mov	r3, r2
 8002354:	009b      	lsls	r3, r3, #2
 8002356:	4413      	add	r3, r2
 8002358:	00db      	lsls	r3, r3, #3
 800235a:	440b      	add	r3, r1
 800235c:	335d      	adds	r3, #93	; 0x5d
 800235e:	2205      	movs	r2, #5
 8002360:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	015a      	lsls	r2, r3, #5
 8002366:	693b      	ldr	r3, [r7, #16]
 8002368:	4413      	add	r3, r2
 800236a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800236e:	461a      	mov	r2, r3
 8002370:	2310      	movs	r3, #16
 8002372:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	015a      	lsls	r2, r3, #5
 8002378:	693b      	ldr	r3, [r7, #16]
 800237a:	4413      	add	r3, r2
 800237c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002380:	461a      	mov	r2, r3
 8002382:	2308      	movs	r3, #8
 8002384:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	68fa      	ldr	r2, [r7, #12]
 800238c:	b2d2      	uxtb	r2, r2
 800238e:	4611      	mov	r1, r2
 8002390:	4618      	mov	r0, r3
 8002392:	f005 f9c0 	bl	8007716 <USB_HC_Halt>
 8002396:	e040      	b.n	800241a <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	015a      	lsls	r2, r3, #5
 800239c:	693b      	ldr	r3, [r7, #16]
 800239e:	4413      	add	r3, r2
 80023a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023a4:	689b      	ldr	r3, [r3, #8]
 80023a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80023ae:	d134      	bne.n	800241a <HCD_HC_IN_IRQHandler+0x202>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	015a      	lsls	r2, r3, #5
 80023b4:	693b      	ldr	r3, [r7, #16]
 80023b6:	4413      	add	r3, r2
 80023b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023bc:	68db      	ldr	r3, [r3, #12]
 80023be:	68fa      	ldr	r2, [r7, #12]
 80023c0:	0151      	lsls	r1, r2, #5
 80023c2:	693a      	ldr	r2, [r7, #16]
 80023c4:	440a      	add	r2, r1
 80023c6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80023ca:	f043 0302 	orr.w	r3, r3, #2
 80023ce:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	68fa      	ldr	r2, [r7, #12]
 80023d6:	b2d2      	uxtb	r2, r2
 80023d8:	4611      	mov	r1, r2
 80023da:	4618      	mov	r0, r3
 80023dc:	f005 f99b 	bl	8007716 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	015a      	lsls	r2, r3, #5
 80023e4:	693b      	ldr	r3, [r7, #16]
 80023e6:	4413      	add	r3, r2
 80023e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023ec:	461a      	mov	r2, r3
 80023ee:	2310      	movs	r3, #16
 80023f0:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80023f2:	6879      	ldr	r1, [r7, #4]
 80023f4:	68fa      	ldr	r2, [r7, #12]
 80023f6:	4613      	mov	r3, r2
 80023f8:	009b      	lsls	r3, r3, #2
 80023fa:	4413      	add	r3, r2
 80023fc:	00db      	lsls	r3, r3, #3
 80023fe:	440b      	add	r3, r1
 8002400:	335d      	adds	r3, #93	; 0x5d
 8002402:	2208      	movs	r2, #8
 8002404:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	015a      	lsls	r2, r3, #5
 800240a:	693b      	ldr	r3, [r7, #16]
 800240c:	4413      	add	r3, r2
 800240e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002412:	461a      	mov	r2, r3
 8002414:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002418:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	015a      	lsls	r2, r3, #5
 800241e:	693b      	ldr	r3, [r7, #16]
 8002420:	4413      	add	r3, r2
 8002422:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002426:	689b      	ldr	r3, [r3, #8]
 8002428:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800242c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002430:	d122      	bne.n	8002478 <HCD_HC_IN_IRQHandler+0x260>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	015a      	lsls	r2, r3, #5
 8002436:	693b      	ldr	r3, [r7, #16]
 8002438:	4413      	add	r3, r2
 800243a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800243e:	68db      	ldr	r3, [r3, #12]
 8002440:	68fa      	ldr	r2, [r7, #12]
 8002442:	0151      	lsls	r1, r2, #5
 8002444:	693a      	ldr	r2, [r7, #16]
 8002446:	440a      	add	r2, r1
 8002448:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800244c:	f043 0302 	orr.w	r3, r3, #2
 8002450:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	68fa      	ldr	r2, [r7, #12]
 8002458:	b2d2      	uxtb	r2, r2
 800245a:	4611      	mov	r1, r2
 800245c:	4618      	mov	r0, r3
 800245e:	f005 f95a 	bl	8007716 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	015a      	lsls	r2, r3, #5
 8002466:	693b      	ldr	r3, [r7, #16]
 8002468:	4413      	add	r3, r2
 800246a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800246e:	461a      	mov	r2, r3
 8002470:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002474:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8002476:	e300      	b.n	8002a7a <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	015a      	lsls	r2, r3, #5
 800247c:	693b      	ldr	r3, [r7, #16]
 800247e:	4413      	add	r3, r2
 8002480:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002484:	689b      	ldr	r3, [r3, #8]
 8002486:	f003 0301 	and.w	r3, r3, #1
 800248a:	2b01      	cmp	r3, #1
 800248c:	f040 80fd 	bne.w	800268a <HCD_HC_IN_IRQHandler+0x472>
    if (hhcd->Init.dma_enable != 0U)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	691b      	ldr	r3, [r3, #16]
 8002494:	2b00      	cmp	r3, #0
 8002496:	d01b      	beq.n	80024d0 <HCD_HC_IN_IRQHandler+0x2b8>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8002498:	6879      	ldr	r1, [r7, #4]
 800249a:	68fa      	ldr	r2, [r7, #12]
 800249c:	4613      	mov	r3, r2
 800249e:	009b      	lsls	r3, r3, #2
 80024a0:	4413      	add	r3, r2
 80024a2:	00db      	lsls	r3, r3, #3
 80024a4:	440b      	add	r3, r1
 80024a6:	3348      	adds	r3, #72	; 0x48
 80024a8:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	0159      	lsls	r1, r3, #5
 80024ae:	693b      	ldr	r3, [r7, #16]
 80024b0:	440b      	add	r3, r1
 80024b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024b6:	691b      	ldr	r3, [r3, #16]
 80024b8:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 80024bc:	1ad1      	subs	r1, r2, r3
 80024be:	6878      	ldr	r0, [r7, #4]
 80024c0:	68fa      	ldr	r2, [r7, #12]
 80024c2:	4613      	mov	r3, r2
 80024c4:	009b      	lsls	r3, r3, #2
 80024c6:	4413      	add	r3, r2
 80024c8:	00db      	lsls	r3, r3, #3
 80024ca:	4403      	add	r3, r0
 80024cc:	334c      	adds	r3, #76	; 0x4c
 80024ce:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 80024d0:	6879      	ldr	r1, [r7, #4]
 80024d2:	68fa      	ldr	r2, [r7, #12]
 80024d4:	4613      	mov	r3, r2
 80024d6:	009b      	lsls	r3, r3, #2
 80024d8:	4413      	add	r3, r2
 80024da:	00db      	lsls	r3, r3, #3
 80024dc:	440b      	add	r3, r1
 80024de:	335d      	adds	r3, #93	; 0x5d
 80024e0:	2201      	movs	r2, #1
 80024e2:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80024e4:	6879      	ldr	r1, [r7, #4]
 80024e6:	68fa      	ldr	r2, [r7, #12]
 80024e8:	4613      	mov	r3, r2
 80024ea:	009b      	lsls	r3, r3, #2
 80024ec:	4413      	add	r3, r2
 80024ee:	00db      	lsls	r3, r3, #3
 80024f0:	440b      	add	r3, r1
 80024f2:	3358      	adds	r3, #88	; 0x58
 80024f4:	2200      	movs	r2, #0
 80024f6:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	015a      	lsls	r2, r3, #5
 80024fc:	693b      	ldr	r3, [r7, #16]
 80024fe:	4413      	add	r3, r2
 8002500:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002504:	461a      	mov	r2, r3
 8002506:	2301      	movs	r3, #1
 8002508:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800250a:	6879      	ldr	r1, [r7, #4]
 800250c:	68fa      	ldr	r2, [r7, #12]
 800250e:	4613      	mov	r3, r2
 8002510:	009b      	lsls	r3, r3, #2
 8002512:	4413      	add	r3, r2
 8002514:	00db      	lsls	r3, r3, #3
 8002516:	440b      	add	r3, r1
 8002518:	333f      	adds	r3, #63	; 0x3f
 800251a:	781b      	ldrb	r3, [r3, #0]
 800251c:	2b00      	cmp	r3, #0
 800251e:	d00a      	beq.n	8002536 <HCD_HC_IN_IRQHandler+0x31e>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002520:	6879      	ldr	r1, [r7, #4]
 8002522:	68fa      	ldr	r2, [r7, #12]
 8002524:	4613      	mov	r3, r2
 8002526:	009b      	lsls	r3, r3, #2
 8002528:	4413      	add	r3, r2
 800252a:	00db      	lsls	r3, r3, #3
 800252c:	440b      	add	r3, r1
 800252e:	333f      	adds	r3, #63	; 0x3f
 8002530:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002532:	2b02      	cmp	r3, #2
 8002534:	d121      	bne.n	800257a <HCD_HC_IN_IRQHandler+0x362>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	015a      	lsls	r2, r3, #5
 800253a:	693b      	ldr	r3, [r7, #16]
 800253c:	4413      	add	r3, r2
 800253e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002542:	68db      	ldr	r3, [r3, #12]
 8002544:	68fa      	ldr	r2, [r7, #12]
 8002546:	0151      	lsls	r1, r2, #5
 8002548:	693a      	ldr	r2, [r7, #16]
 800254a:	440a      	add	r2, r1
 800254c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002550:	f043 0302 	orr.w	r3, r3, #2
 8002554:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	68fa      	ldr	r2, [r7, #12]
 800255c:	b2d2      	uxtb	r2, r2
 800255e:	4611      	mov	r1, r2
 8002560:	4618      	mov	r0, r3
 8002562:	f005 f8d8 	bl	8007716 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	015a      	lsls	r2, r3, #5
 800256a:	693b      	ldr	r3, [r7, #16]
 800256c:	4413      	add	r3, r2
 800256e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002572:	461a      	mov	r2, r3
 8002574:	2310      	movs	r3, #16
 8002576:	6093      	str	r3, [r2, #8]
 8002578:	e070      	b.n	800265c <HCD_HC_IN_IRQHandler+0x444>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 800257a:	6879      	ldr	r1, [r7, #4]
 800257c:	68fa      	ldr	r2, [r7, #12]
 800257e:	4613      	mov	r3, r2
 8002580:	009b      	lsls	r3, r3, #2
 8002582:	4413      	add	r3, r2
 8002584:	00db      	lsls	r3, r3, #3
 8002586:	440b      	add	r3, r1
 8002588:	333f      	adds	r3, #63	; 0x3f
 800258a:	781b      	ldrb	r3, [r3, #0]
 800258c:	2b03      	cmp	r3, #3
 800258e:	d12a      	bne.n	80025e6 <HCD_HC_IN_IRQHandler+0x3ce>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	015a      	lsls	r2, r3, #5
 8002594:	693b      	ldr	r3, [r7, #16]
 8002596:	4413      	add	r3, r2
 8002598:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	68fa      	ldr	r2, [r7, #12]
 80025a0:	0151      	lsls	r1, r2, #5
 80025a2:	693a      	ldr	r2, [r7, #16]
 80025a4:	440a      	add	r2, r1
 80025a6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80025aa:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80025ae:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80025b0:	6879      	ldr	r1, [r7, #4]
 80025b2:	68fa      	ldr	r2, [r7, #12]
 80025b4:	4613      	mov	r3, r2
 80025b6:	009b      	lsls	r3, r3, #2
 80025b8:	4413      	add	r3, r2
 80025ba:	00db      	lsls	r3, r3, #3
 80025bc:	440b      	add	r3, r1
 80025be:	335c      	adds	r3, #92	; 0x5c
 80025c0:	2201      	movs	r2, #1
 80025c2:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	b2d8      	uxtb	r0, r3
 80025c8:	6879      	ldr	r1, [r7, #4]
 80025ca:	68fa      	ldr	r2, [r7, #12]
 80025cc:	4613      	mov	r3, r2
 80025ce:	009b      	lsls	r3, r3, #2
 80025d0:	4413      	add	r3, r2
 80025d2:	00db      	lsls	r3, r3, #3
 80025d4:	440b      	add	r3, r1
 80025d6:	335c      	adds	r3, #92	; 0x5c
 80025d8:	781b      	ldrb	r3, [r3, #0]
 80025da:	461a      	mov	r2, r3
 80025dc:	4601      	mov	r1, r0
 80025de:	6878      	ldr	r0, [r7, #4]
 80025e0:	f007 fa2e 	bl	8009a40 <HAL_HCD_HC_NotifyURBChange_Callback>
 80025e4:	e03a      	b.n	800265c <HCD_HC_IN_IRQHandler+0x444>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 80025e6:	6879      	ldr	r1, [r7, #4]
 80025e8:	68fa      	ldr	r2, [r7, #12]
 80025ea:	4613      	mov	r3, r2
 80025ec:	009b      	lsls	r3, r3, #2
 80025ee:	4413      	add	r3, r2
 80025f0:	00db      	lsls	r3, r3, #3
 80025f2:	440b      	add	r3, r1
 80025f4:	333f      	adds	r3, #63	; 0x3f
 80025f6:	781b      	ldrb	r3, [r3, #0]
 80025f8:	2b01      	cmp	r3, #1
 80025fa:	d12f      	bne.n	800265c <HCD_HC_IN_IRQHandler+0x444>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80025fc:	6879      	ldr	r1, [r7, #4]
 80025fe:	68fa      	ldr	r2, [r7, #12]
 8002600:	4613      	mov	r3, r2
 8002602:	009b      	lsls	r3, r3, #2
 8002604:	4413      	add	r3, r2
 8002606:	00db      	lsls	r3, r3, #3
 8002608:	440b      	add	r3, r1
 800260a:	335c      	adds	r3, #92	; 0x5c
 800260c:	2201      	movs	r2, #1
 800260e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8002610:	6879      	ldr	r1, [r7, #4]
 8002612:	68fa      	ldr	r2, [r7, #12]
 8002614:	4613      	mov	r3, r2
 8002616:	009b      	lsls	r3, r3, #2
 8002618:	4413      	add	r3, r2
 800261a:	00db      	lsls	r3, r3, #3
 800261c:	440b      	add	r3, r1
 800261e:	3350      	adds	r3, #80	; 0x50
 8002620:	781b      	ldrb	r3, [r3, #0]
 8002622:	f083 0301 	eor.w	r3, r3, #1
 8002626:	b2d8      	uxtb	r0, r3
 8002628:	6879      	ldr	r1, [r7, #4]
 800262a:	68fa      	ldr	r2, [r7, #12]
 800262c:	4613      	mov	r3, r2
 800262e:	009b      	lsls	r3, r3, #2
 8002630:	4413      	add	r3, r2
 8002632:	00db      	lsls	r3, r3, #3
 8002634:	440b      	add	r3, r1
 8002636:	3350      	adds	r3, #80	; 0x50
 8002638:	4602      	mov	r2, r0
 800263a:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	b2d8      	uxtb	r0, r3
 8002640:	6879      	ldr	r1, [r7, #4]
 8002642:	68fa      	ldr	r2, [r7, #12]
 8002644:	4613      	mov	r3, r2
 8002646:	009b      	lsls	r3, r3, #2
 8002648:	4413      	add	r3, r2
 800264a:	00db      	lsls	r3, r3, #3
 800264c:	440b      	add	r3, r1
 800264e:	335c      	adds	r3, #92	; 0x5c
 8002650:	781b      	ldrb	r3, [r3, #0]
 8002652:	461a      	mov	r2, r3
 8002654:	4601      	mov	r1, r0
 8002656:	6878      	ldr	r0, [r7, #4]
 8002658:	f007 f9f2 	bl	8009a40 <HAL_HCD_HC_NotifyURBChange_Callback>
    hhcd->hc[ch_num].toggle_in ^= 1U;
 800265c:	6879      	ldr	r1, [r7, #4]
 800265e:	68fa      	ldr	r2, [r7, #12]
 8002660:	4613      	mov	r3, r2
 8002662:	009b      	lsls	r3, r3, #2
 8002664:	4413      	add	r3, r2
 8002666:	00db      	lsls	r3, r3, #3
 8002668:	440b      	add	r3, r1
 800266a:	3350      	adds	r3, #80	; 0x50
 800266c:	781b      	ldrb	r3, [r3, #0]
 800266e:	f083 0301 	eor.w	r3, r3, #1
 8002672:	b2d8      	uxtb	r0, r3
 8002674:	6879      	ldr	r1, [r7, #4]
 8002676:	68fa      	ldr	r2, [r7, #12]
 8002678:	4613      	mov	r3, r2
 800267a:	009b      	lsls	r3, r3, #2
 800267c:	4413      	add	r3, r2
 800267e:	00db      	lsls	r3, r3, #3
 8002680:	440b      	add	r3, r1
 8002682:	3350      	adds	r3, #80	; 0x50
 8002684:	4602      	mov	r2, r0
 8002686:	701a      	strb	r2, [r3, #0]
}
 8002688:	e1f7      	b.n	8002a7a <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	015a      	lsls	r2, r3, #5
 800268e:	693b      	ldr	r3, [r7, #16]
 8002690:	4413      	add	r3, r2
 8002692:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002696:	689b      	ldr	r3, [r3, #8]
 8002698:	f003 0302 	and.w	r3, r3, #2
 800269c:	2b02      	cmp	r3, #2
 800269e:	f040 811a 	bne.w	80028d6 <HCD_HC_IN_IRQHandler+0x6be>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	015a      	lsls	r2, r3, #5
 80026a6:	693b      	ldr	r3, [r7, #16]
 80026a8:	4413      	add	r3, r2
 80026aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026ae:	68db      	ldr	r3, [r3, #12]
 80026b0:	68fa      	ldr	r2, [r7, #12]
 80026b2:	0151      	lsls	r1, r2, #5
 80026b4:	693a      	ldr	r2, [r7, #16]
 80026b6:	440a      	add	r2, r1
 80026b8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80026bc:	f023 0302 	bic.w	r3, r3, #2
 80026c0:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80026c2:	6879      	ldr	r1, [r7, #4]
 80026c4:	68fa      	ldr	r2, [r7, #12]
 80026c6:	4613      	mov	r3, r2
 80026c8:	009b      	lsls	r3, r3, #2
 80026ca:	4413      	add	r3, r2
 80026cc:	00db      	lsls	r3, r3, #3
 80026ce:	440b      	add	r3, r1
 80026d0:	335d      	adds	r3, #93	; 0x5d
 80026d2:	781b      	ldrb	r3, [r3, #0]
 80026d4:	2b01      	cmp	r3, #1
 80026d6:	d10a      	bne.n	80026ee <HCD_HC_IN_IRQHandler+0x4d6>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 80026d8:	6879      	ldr	r1, [r7, #4]
 80026da:	68fa      	ldr	r2, [r7, #12]
 80026dc:	4613      	mov	r3, r2
 80026de:	009b      	lsls	r3, r3, #2
 80026e0:	4413      	add	r3, r2
 80026e2:	00db      	lsls	r3, r3, #3
 80026e4:	440b      	add	r3, r1
 80026e6:	335c      	adds	r3, #92	; 0x5c
 80026e8:	2201      	movs	r2, #1
 80026ea:	701a      	strb	r2, [r3, #0]
 80026ec:	e0d9      	b.n	80028a2 <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80026ee:	6879      	ldr	r1, [r7, #4]
 80026f0:	68fa      	ldr	r2, [r7, #12]
 80026f2:	4613      	mov	r3, r2
 80026f4:	009b      	lsls	r3, r3, #2
 80026f6:	4413      	add	r3, r2
 80026f8:	00db      	lsls	r3, r3, #3
 80026fa:	440b      	add	r3, r1
 80026fc:	335d      	adds	r3, #93	; 0x5d
 80026fe:	781b      	ldrb	r3, [r3, #0]
 8002700:	2b05      	cmp	r3, #5
 8002702:	d10a      	bne.n	800271a <HCD_HC_IN_IRQHandler+0x502>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8002704:	6879      	ldr	r1, [r7, #4]
 8002706:	68fa      	ldr	r2, [r7, #12]
 8002708:	4613      	mov	r3, r2
 800270a:	009b      	lsls	r3, r3, #2
 800270c:	4413      	add	r3, r2
 800270e:	00db      	lsls	r3, r3, #3
 8002710:	440b      	add	r3, r1
 8002712:	335c      	adds	r3, #92	; 0x5c
 8002714:	2205      	movs	r2, #5
 8002716:	701a      	strb	r2, [r3, #0]
 8002718:	e0c3      	b.n	80028a2 <HCD_HC_IN_IRQHandler+0x68a>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800271a:	6879      	ldr	r1, [r7, #4]
 800271c:	68fa      	ldr	r2, [r7, #12]
 800271e:	4613      	mov	r3, r2
 8002720:	009b      	lsls	r3, r3, #2
 8002722:	4413      	add	r3, r2
 8002724:	00db      	lsls	r3, r3, #3
 8002726:	440b      	add	r3, r1
 8002728:	335d      	adds	r3, #93	; 0x5d
 800272a:	781b      	ldrb	r3, [r3, #0]
 800272c:	2b06      	cmp	r3, #6
 800272e:	d00a      	beq.n	8002746 <HCD_HC_IN_IRQHandler+0x52e>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002730:	6879      	ldr	r1, [r7, #4]
 8002732:	68fa      	ldr	r2, [r7, #12]
 8002734:	4613      	mov	r3, r2
 8002736:	009b      	lsls	r3, r3, #2
 8002738:	4413      	add	r3, r2
 800273a:	00db      	lsls	r3, r3, #3
 800273c:	440b      	add	r3, r1
 800273e:	335d      	adds	r3, #93	; 0x5d
 8002740:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002742:	2b08      	cmp	r3, #8
 8002744:	d156      	bne.n	80027f4 <HCD_HC_IN_IRQHandler+0x5dc>
      hhcd->hc[ch_num].ErrCnt++;
 8002746:	6879      	ldr	r1, [r7, #4]
 8002748:	68fa      	ldr	r2, [r7, #12]
 800274a:	4613      	mov	r3, r2
 800274c:	009b      	lsls	r3, r3, #2
 800274e:	4413      	add	r3, r2
 8002750:	00db      	lsls	r3, r3, #3
 8002752:	440b      	add	r3, r1
 8002754:	3358      	adds	r3, #88	; 0x58
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	1c59      	adds	r1, r3, #1
 800275a:	6878      	ldr	r0, [r7, #4]
 800275c:	68fa      	ldr	r2, [r7, #12]
 800275e:	4613      	mov	r3, r2
 8002760:	009b      	lsls	r3, r3, #2
 8002762:	4413      	add	r3, r2
 8002764:	00db      	lsls	r3, r3, #3
 8002766:	4403      	add	r3, r0
 8002768:	3358      	adds	r3, #88	; 0x58
 800276a:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 800276c:	6879      	ldr	r1, [r7, #4]
 800276e:	68fa      	ldr	r2, [r7, #12]
 8002770:	4613      	mov	r3, r2
 8002772:	009b      	lsls	r3, r3, #2
 8002774:	4413      	add	r3, r2
 8002776:	00db      	lsls	r3, r3, #3
 8002778:	440b      	add	r3, r1
 800277a:	3358      	adds	r3, #88	; 0x58
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	2b03      	cmp	r3, #3
 8002780:	d914      	bls.n	80027ac <HCD_HC_IN_IRQHandler+0x594>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002782:	6879      	ldr	r1, [r7, #4]
 8002784:	68fa      	ldr	r2, [r7, #12]
 8002786:	4613      	mov	r3, r2
 8002788:	009b      	lsls	r3, r3, #2
 800278a:	4413      	add	r3, r2
 800278c:	00db      	lsls	r3, r3, #3
 800278e:	440b      	add	r3, r1
 8002790:	3358      	adds	r3, #88	; 0x58
 8002792:	2200      	movs	r2, #0
 8002794:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002796:	6879      	ldr	r1, [r7, #4]
 8002798:	68fa      	ldr	r2, [r7, #12]
 800279a:	4613      	mov	r3, r2
 800279c:	009b      	lsls	r3, r3, #2
 800279e:	4413      	add	r3, r2
 80027a0:	00db      	lsls	r3, r3, #3
 80027a2:	440b      	add	r3, r1
 80027a4:	335c      	adds	r3, #92	; 0x5c
 80027a6:	2204      	movs	r2, #4
 80027a8:	701a      	strb	r2, [r3, #0]
 80027aa:	e009      	b.n	80027c0 <HCD_HC_IN_IRQHandler+0x5a8>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80027ac:	6879      	ldr	r1, [r7, #4]
 80027ae:	68fa      	ldr	r2, [r7, #12]
 80027b0:	4613      	mov	r3, r2
 80027b2:	009b      	lsls	r3, r3, #2
 80027b4:	4413      	add	r3, r2
 80027b6:	00db      	lsls	r3, r3, #3
 80027b8:	440b      	add	r3, r1
 80027ba:	335c      	adds	r3, #92	; 0x5c
 80027bc:	2202      	movs	r2, #2
 80027be:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	015a      	lsls	r2, r3, #5
 80027c4:	693b      	ldr	r3, [r7, #16]
 80027c6:	4413      	add	r3, r2
 80027c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80027d0:	68bb      	ldr	r3, [r7, #8]
 80027d2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80027d6:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 80027d8:	68bb      	ldr	r3, [r7, #8]
 80027da:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80027de:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	015a      	lsls	r2, r3, #5
 80027e4:	693b      	ldr	r3, [r7, #16]
 80027e6:	4413      	add	r3, r2
 80027e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027ec:	461a      	mov	r2, r3
 80027ee:	68bb      	ldr	r3, [r7, #8]
 80027f0:	6013      	str	r3, [r2, #0]
 80027f2:	e056      	b.n	80028a2 <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80027f4:	6879      	ldr	r1, [r7, #4]
 80027f6:	68fa      	ldr	r2, [r7, #12]
 80027f8:	4613      	mov	r3, r2
 80027fa:	009b      	lsls	r3, r3, #2
 80027fc:	4413      	add	r3, r2
 80027fe:	00db      	lsls	r3, r3, #3
 8002800:	440b      	add	r3, r1
 8002802:	335d      	adds	r3, #93	; 0x5d
 8002804:	781b      	ldrb	r3, [r3, #0]
 8002806:	2b03      	cmp	r3, #3
 8002808:	d123      	bne.n	8002852 <HCD_HC_IN_IRQHandler+0x63a>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800280a:	6879      	ldr	r1, [r7, #4]
 800280c:	68fa      	ldr	r2, [r7, #12]
 800280e:	4613      	mov	r3, r2
 8002810:	009b      	lsls	r3, r3, #2
 8002812:	4413      	add	r3, r2
 8002814:	00db      	lsls	r3, r3, #3
 8002816:	440b      	add	r3, r1
 8002818:	335c      	adds	r3, #92	; 0x5c
 800281a:	2202      	movs	r2, #2
 800281c:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	015a      	lsls	r2, r3, #5
 8002822:	693b      	ldr	r3, [r7, #16]
 8002824:	4413      	add	r3, r2
 8002826:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800282e:	68bb      	ldr	r3, [r7, #8]
 8002830:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002834:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002836:	68bb      	ldr	r3, [r7, #8]
 8002838:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800283c:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	015a      	lsls	r2, r3, #5
 8002842:	693b      	ldr	r3, [r7, #16]
 8002844:	4413      	add	r3, r2
 8002846:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800284a:	461a      	mov	r2, r3
 800284c:	68bb      	ldr	r3, [r7, #8]
 800284e:	6013      	str	r3, [r2, #0]
 8002850:	e027      	b.n	80028a2 <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8002852:	6879      	ldr	r1, [r7, #4]
 8002854:	68fa      	ldr	r2, [r7, #12]
 8002856:	4613      	mov	r3, r2
 8002858:	009b      	lsls	r3, r3, #2
 800285a:	4413      	add	r3, r2
 800285c:	00db      	lsls	r3, r3, #3
 800285e:	440b      	add	r3, r1
 8002860:	335d      	adds	r3, #93	; 0x5d
 8002862:	781b      	ldrb	r3, [r3, #0]
 8002864:	2b07      	cmp	r3, #7
 8002866:	d11c      	bne.n	80028a2 <HCD_HC_IN_IRQHandler+0x68a>
      hhcd->hc[ch_num].ErrCnt++;
 8002868:	6879      	ldr	r1, [r7, #4]
 800286a:	68fa      	ldr	r2, [r7, #12]
 800286c:	4613      	mov	r3, r2
 800286e:	009b      	lsls	r3, r3, #2
 8002870:	4413      	add	r3, r2
 8002872:	00db      	lsls	r3, r3, #3
 8002874:	440b      	add	r3, r1
 8002876:	3358      	adds	r3, #88	; 0x58
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	1c59      	adds	r1, r3, #1
 800287c:	6878      	ldr	r0, [r7, #4]
 800287e:	68fa      	ldr	r2, [r7, #12]
 8002880:	4613      	mov	r3, r2
 8002882:	009b      	lsls	r3, r3, #2
 8002884:	4413      	add	r3, r2
 8002886:	00db      	lsls	r3, r3, #3
 8002888:	4403      	add	r3, r0
 800288a:	3358      	adds	r3, #88	; 0x58
 800288c:	6019      	str	r1, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 800288e:	6879      	ldr	r1, [r7, #4]
 8002890:	68fa      	ldr	r2, [r7, #12]
 8002892:	4613      	mov	r3, r2
 8002894:	009b      	lsls	r3, r3, #2
 8002896:	4413      	add	r3, r2
 8002898:	00db      	lsls	r3, r3, #3
 800289a:	440b      	add	r3, r1
 800289c:	335c      	adds	r3, #92	; 0x5c
 800289e:	2204      	movs	r2, #4
 80028a0:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	015a      	lsls	r2, r3, #5
 80028a6:	693b      	ldr	r3, [r7, #16]
 80028a8:	4413      	add	r3, r2
 80028aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028ae:	461a      	mov	r2, r3
 80028b0:	2302      	movs	r3, #2
 80028b2:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	b2d8      	uxtb	r0, r3
 80028b8:	6879      	ldr	r1, [r7, #4]
 80028ba:	68fa      	ldr	r2, [r7, #12]
 80028bc:	4613      	mov	r3, r2
 80028be:	009b      	lsls	r3, r3, #2
 80028c0:	4413      	add	r3, r2
 80028c2:	00db      	lsls	r3, r3, #3
 80028c4:	440b      	add	r3, r1
 80028c6:	335c      	adds	r3, #92	; 0x5c
 80028c8:	781b      	ldrb	r3, [r3, #0]
 80028ca:	461a      	mov	r2, r3
 80028cc:	4601      	mov	r1, r0
 80028ce:	6878      	ldr	r0, [r7, #4]
 80028d0:	f007 f8b6 	bl	8009a40 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80028d4:	e0d1      	b.n	8002a7a <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	015a      	lsls	r2, r3, #5
 80028da:	693b      	ldr	r3, [r7, #16]
 80028dc:	4413      	add	r3, r2
 80028de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028e2:	689b      	ldr	r3, [r3, #8]
 80028e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028e8:	2b80      	cmp	r3, #128	; 0x80
 80028ea:	d13e      	bne.n	800296a <HCD_HC_IN_IRQHandler+0x752>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	015a      	lsls	r2, r3, #5
 80028f0:	693b      	ldr	r3, [r7, #16]
 80028f2:	4413      	add	r3, r2
 80028f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028f8:	68db      	ldr	r3, [r3, #12]
 80028fa:	68fa      	ldr	r2, [r7, #12]
 80028fc:	0151      	lsls	r1, r2, #5
 80028fe:	693a      	ldr	r2, [r7, #16]
 8002900:	440a      	add	r2, r1
 8002902:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002906:	f043 0302 	orr.w	r3, r3, #2
 800290a:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].ErrCnt++;
 800290c:	6879      	ldr	r1, [r7, #4]
 800290e:	68fa      	ldr	r2, [r7, #12]
 8002910:	4613      	mov	r3, r2
 8002912:	009b      	lsls	r3, r3, #2
 8002914:	4413      	add	r3, r2
 8002916:	00db      	lsls	r3, r3, #3
 8002918:	440b      	add	r3, r1
 800291a:	3358      	adds	r3, #88	; 0x58
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	1c59      	adds	r1, r3, #1
 8002920:	6878      	ldr	r0, [r7, #4]
 8002922:	68fa      	ldr	r2, [r7, #12]
 8002924:	4613      	mov	r3, r2
 8002926:	009b      	lsls	r3, r3, #2
 8002928:	4413      	add	r3, r2
 800292a:	00db      	lsls	r3, r3, #3
 800292c:	4403      	add	r3, r0
 800292e:	3358      	adds	r3, #88	; 0x58
 8002930:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002932:	6879      	ldr	r1, [r7, #4]
 8002934:	68fa      	ldr	r2, [r7, #12]
 8002936:	4613      	mov	r3, r2
 8002938:	009b      	lsls	r3, r3, #2
 800293a:	4413      	add	r3, r2
 800293c:	00db      	lsls	r3, r3, #3
 800293e:	440b      	add	r3, r1
 8002940:	335d      	adds	r3, #93	; 0x5d
 8002942:	2206      	movs	r2, #6
 8002944:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	68fa      	ldr	r2, [r7, #12]
 800294c:	b2d2      	uxtb	r2, r2
 800294e:	4611      	mov	r1, r2
 8002950:	4618      	mov	r0, r3
 8002952:	f004 fee0 	bl	8007716 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	015a      	lsls	r2, r3, #5
 800295a:	693b      	ldr	r3, [r7, #16]
 800295c:	4413      	add	r3, r2
 800295e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002962:	461a      	mov	r2, r3
 8002964:	2380      	movs	r3, #128	; 0x80
 8002966:	6093      	str	r3, [r2, #8]
}
 8002968:	e087      	b.n	8002a7a <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	015a      	lsls	r2, r3, #5
 800296e:	693b      	ldr	r3, [r7, #16]
 8002970:	4413      	add	r3, r2
 8002972:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002976:	689b      	ldr	r3, [r3, #8]
 8002978:	f003 0310 	and.w	r3, r3, #16
 800297c:	2b10      	cmp	r3, #16
 800297e:	d17c      	bne.n	8002a7a <HCD_HC_IN_IRQHandler+0x862>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8002980:	6879      	ldr	r1, [r7, #4]
 8002982:	68fa      	ldr	r2, [r7, #12]
 8002984:	4613      	mov	r3, r2
 8002986:	009b      	lsls	r3, r3, #2
 8002988:	4413      	add	r3, r2
 800298a:	00db      	lsls	r3, r3, #3
 800298c:	440b      	add	r3, r1
 800298e:	333f      	adds	r3, #63	; 0x3f
 8002990:	781b      	ldrb	r3, [r3, #0]
 8002992:	2b03      	cmp	r3, #3
 8002994:	d122      	bne.n	80029dc <HCD_HC_IN_IRQHandler+0x7c4>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002996:	6879      	ldr	r1, [r7, #4]
 8002998:	68fa      	ldr	r2, [r7, #12]
 800299a:	4613      	mov	r3, r2
 800299c:	009b      	lsls	r3, r3, #2
 800299e:	4413      	add	r3, r2
 80029a0:	00db      	lsls	r3, r3, #3
 80029a2:	440b      	add	r3, r1
 80029a4:	3358      	adds	r3, #88	; 0x58
 80029a6:	2200      	movs	r2, #0
 80029a8:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	015a      	lsls	r2, r3, #5
 80029ae:	693b      	ldr	r3, [r7, #16]
 80029b0:	4413      	add	r3, r2
 80029b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029b6:	68db      	ldr	r3, [r3, #12]
 80029b8:	68fa      	ldr	r2, [r7, #12]
 80029ba:	0151      	lsls	r1, r2, #5
 80029bc:	693a      	ldr	r2, [r7, #16]
 80029be:	440a      	add	r2, r1
 80029c0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80029c4:	f043 0302 	orr.w	r3, r3, #2
 80029c8:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	68fa      	ldr	r2, [r7, #12]
 80029d0:	b2d2      	uxtb	r2, r2
 80029d2:	4611      	mov	r1, r2
 80029d4:	4618      	mov	r0, r3
 80029d6:	f004 fe9e 	bl	8007716 <USB_HC_Halt>
 80029da:	e045      	b.n	8002a68 <HCD_HC_IN_IRQHandler+0x850>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80029dc:	6879      	ldr	r1, [r7, #4]
 80029de:	68fa      	ldr	r2, [r7, #12]
 80029e0:	4613      	mov	r3, r2
 80029e2:	009b      	lsls	r3, r3, #2
 80029e4:	4413      	add	r3, r2
 80029e6:	00db      	lsls	r3, r3, #3
 80029e8:	440b      	add	r3, r1
 80029ea:	333f      	adds	r3, #63	; 0x3f
 80029ec:	781b      	ldrb	r3, [r3, #0]
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d00a      	beq.n	8002a08 <HCD_HC_IN_IRQHandler+0x7f0>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80029f2:	6879      	ldr	r1, [r7, #4]
 80029f4:	68fa      	ldr	r2, [r7, #12]
 80029f6:	4613      	mov	r3, r2
 80029f8:	009b      	lsls	r3, r3, #2
 80029fa:	4413      	add	r3, r2
 80029fc:	00db      	lsls	r3, r3, #3
 80029fe:	440b      	add	r3, r1
 8002a00:	333f      	adds	r3, #63	; 0x3f
 8002a02:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002a04:	2b02      	cmp	r3, #2
 8002a06:	d12f      	bne.n	8002a68 <HCD_HC_IN_IRQHandler+0x850>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002a08:	6879      	ldr	r1, [r7, #4]
 8002a0a:	68fa      	ldr	r2, [r7, #12]
 8002a0c:	4613      	mov	r3, r2
 8002a0e:	009b      	lsls	r3, r3, #2
 8002a10:	4413      	add	r3, r2
 8002a12:	00db      	lsls	r3, r3, #3
 8002a14:	440b      	add	r3, r1
 8002a16:	3358      	adds	r3, #88	; 0x58
 8002a18:	2200      	movs	r2, #0
 8002a1a:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	691b      	ldr	r3, [r3, #16]
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d121      	bne.n	8002a68 <HCD_HC_IN_IRQHandler+0x850>
        hhcd->hc[ch_num].state = HC_NAK;
 8002a24:	6879      	ldr	r1, [r7, #4]
 8002a26:	68fa      	ldr	r2, [r7, #12]
 8002a28:	4613      	mov	r3, r2
 8002a2a:	009b      	lsls	r3, r3, #2
 8002a2c:	4413      	add	r3, r2
 8002a2e:	00db      	lsls	r3, r3, #3
 8002a30:	440b      	add	r3, r1
 8002a32:	335d      	adds	r3, #93	; 0x5d
 8002a34:	2203      	movs	r2, #3
 8002a36:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	015a      	lsls	r2, r3, #5
 8002a3c:	693b      	ldr	r3, [r7, #16]
 8002a3e:	4413      	add	r3, r2
 8002a40:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a44:	68db      	ldr	r3, [r3, #12]
 8002a46:	68fa      	ldr	r2, [r7, #12]
 8002a48:	0151      	lsls	r1, r2, #5
 8002a4a:	693a      	ldr	r2, [r7, #16]
 8002a4c:	440a      	add	r2, r1
 8002a4e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002a52:	f043 0302 	orr.w	r3, r3, #2
 8002a56:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	68fa      	ldr	r2, [r7, #12]
 8002a5e:	b2d2      	uxtb	r2, r2
 8002a60:	4611      	mov	r1, r2
 8002a62:	4618      	mov	r0, r3
 8002a64:	f004 fe57 	bl	8007716 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	015a      	lsls	r2, r3, #5
 8002a6c:	693b      	ldr	r3, [r7, #16]
 8002a6e:	4413      	add	r3, r2
 8002a70:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a74:	461a      	mov	r2, r3
 8002a76:	2310      	movs	r3, #16
 8002a78:	6093      	str	r3, [r2, #8]
}
 8002a7a:	bf00      	nop
 8002a7c:	3718      	adds	r7, #24
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	bd80      	pop	{r7, pc}

08002a82 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002a82:	b580      	push	{r7, lr}
 8002a84:	b086      	sub	sp, #24
 8002a86:	af00      	add	r7, sp, #0
 8002a88:	6078      	str	r0, [r7, #4]
 8002a8a:	460b      	mov	r3, r1
 8002a8c:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002a94:	697b      	ldr	r3, [r7, #20]
 8002a96:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8002a98:	78fb      	ldrb	r3, [r7, #3]
 8002a9a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	015a      	lsls	r2, r3, #5
 8002aa0:	693b      	ldr	r3, [r7, #16]
 8002aa2:	4413      	add	r3, r2
 8002aa4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002aa8:	689b      	ldr	r3, [r3, #8]
 8002aaa:	f003 0304 	and.w	r3, r3, #4
 8002aae:	2b04      	cmp	r3, #4
 8002ab0:	d119      	bne.n	8002ae6 <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	015a      	lsls	r2, r3, #5
 8002ab6:	693b      	ldr	r3, [r7, #16]
 8002ab8:	4413      	add	r3, r2
 8002aba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002abe:	461a      	mov	r2, r3
 8002ac0:	2304      	movs	r3, #4
 8002ac2:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	015a      	lsls	r2, r3, #5
 8002ac8:	693b      	ldr	r3, [r7, #16]
 8002aca:	4413      	add	r3, r2
 8002acc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ad0:	68db      	ldr	r3, [r3, #12]
 8002ad2:	68fa      	ldr	r2, [r7, #12]
 8002ad4:	0151      	lsls	r1, r2, #5
 8002ad6:	693a      	ldr	r2, [r7, #16]
 8002ad8:	440a      	add	r2, r1
 8002ada:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002ade:	f043 0302 	orr.w	r3, r3, #2
 8002ae2:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 8002ae4:	e33e      	b.n	8003164 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	015a      	lsls	r2, r3, #5
 8002aea:	693b      	ldr	r3, [r7, #16]
 8002aec:	4413      	add	r3, r2
 8002aee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002af2:	689b      	ldr	r3, [r3, #8]
 8002af4:	f003 0320 	and.w	r3, r3, #32
 8002af8:	2b20      	cmp	r3, #32
 8002afa:	d141      	bne.n	8002b80 <HCD_HC_OUT_IRQHandler+0xfe>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	015a      	lsls	r2, r3, #5
 8002b00:	693b      	ldr	r3, [r7, #16]
 8002b02:	4413      	add	r3, r2
 8002b04:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b08:	461a      	mov	r2, r3
 8002b0a:	2320      	movs	r3, #32
 8002b0c:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8002b0e:	6879      	ldr	r1, [r7, #4]
 8002b10:	68fa      	ldr	r2, [r7, #12]
 8002b12:	4613      	mov	r3, r2
 8002b14:	009b      	lsls	r3, r3, #2
 8002b16:	4413      	add	r3, r2
 8002b18:	00db      	lsls	r3, r3, #3
 8002b1a:	440b      	add	r3, r1
 8002b1c:	333d      	adds	r3, #61	; 0x3d
 8002b1e:	781b      	ldrb	r3, [r3, #0]
 8002b20:	2b01      	cmp	r3, #1
 8002b22:	f040 831f 	bne.w	8003164 <HCD_HC_OUT_IRQHandler+0x6e2>
      hhcd->hc[ch_num].do_ping = 0U;
 8002b26:	6879      	ldr	r1, [r7, #4]
 8002b28:	68fa      	ldr	r2, [r7, #12]
 8002b2a:	4613      	mov	r3, r2
 8002b2c:	009b      	lsls	r3, r3, #2
 8002b2e:	4413      	add	r3, r2
 8002b30:	00db      	lsls	r3, r3, #3
 8002b32:	440b      	add	r3, r1
 8002b34:	333d      	adds	r3, #61	; 0x3d
 8002b36:	2200      	movs	r2, #0
 8002b38:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002b3a:	6879      	ldr	r1, [r7, #4]
 8002b3c:	68fa      	ldr	r2, [r7, #12]
 8002b3e:	4613      	mov	r3, r2
 8002b40:	009b      	lsls	r3, r3, #2
 8002b42:	4413      	add	r3, r2
 8002b44:	00db      	lsls	r3, r3, #3
 8002b46:	440b      	add	r3, r1
 8002b48:	335c      	adds	r3, #92	; 0x5c
 8002b4a:	2202      	movs	r2, #2
 8002b4c:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	015a      	lsls	r2, r3, #5
 8002b52:	693b      	ldr	r3, [r7, #16]
 8002b54:	4413      	add	r3, r2
 8002b56:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b5a:	68db      	ldr	r3, [r3, #12]
 8002b5c:	68fa      	ldr	r2, [r7, #12]
 8002b5e:	0151      	lsls	r1, r2, #5
 8002b60:	693a      	ldr	r2, [r7, #16]
 8002b62:	440a      	add	r2, r1
 8002b64:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002b68:	f043 0302 	orr.w	r3, r3, #2
 8002b6c:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	68fa      	ldr	r2, [r7, #12]
 8002b74:	b2d2      	uxtb	r2, r2
 8002b76:	4611      	mov	r1, r2
 8002b78:	4618      	mov	r0, r3
 8002b7a:	f004 fdcc 	bl	8007716 <USB_HC_Halt>
}
 8002b7e:	e2f1      	b.n	8003164 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	015a      	lsls	r2, r3, #5
 8002b84:	693b      	ldr	r3, [r7, #16]
 8002b86:	4413      	add	r3, r2
 8002b88:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b8c:	689b      	ldr	r3, [r3, #8]
 8002b8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b92:	2b40      	cmp	r3, #64	; 0x40
 8002b94:	d13f      	bne.n	8002c16 <HCD_HC_OUT_IRQHandler+0x194>
    hhcd->hc[ch_num].state = HC_NYET;
 8002b96:	6879      	ldr	r1, [r7, #4]
 8002b98:	68fa      	ldr	r2, [r7, #12]
 8002b9a:	4613      	mov	r3, r2
 8002b9c:	009b      	lsls	r3, r3, #2
 8002b9e:	4413      	add	r3, r2
 8002ba0:	00db      	lsls	r3, r3, #3
 8002ba2:	440b      	add	r3, r1
 8002ba4:	335d      	adds	r3, #93	; 0x5d
 8002ba6:	2204      	movs	r2, #4
 8002ba8:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8002baa:	6879      	ldr	r1, [r7, #4]
 8002bac:	68fa      	ldr	r2, [r7, #12]
 8002bae:	4613      	mov	r3, r2
 8002bb0:	009b      	lsls	r3, r3, #2
 8002bb2:	4413      	add	r3, r2
 8002bb4:	00db      	lsls	r3, r3, #3
 8002bb6:	440b      	add	r3, r1
 8002bb8:	333d      	adds	r3, #61	; 0x3d
 8002bba:	2201      	movs	r2, #1
 8002bbc:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002bbe:	6879      	ldr	r1, [r7, #4]
 8002bc0:	68fa      	ldr	r2, [r7, #12]
 8002bc2:	4613      	mov	r3, r2
 8002bc4:	009b      	lsls	r3, r3, #2
 8002bc6:	4413      	add	r3, r2
 8002bc8:	00db      	lsls	r3, r3, #3
 8002bca:	440b      	add	r3, r1
 8002bcc:	3358      	adds	r3, #88	; 0x58
 8002bce:	2200      	movs	r2, #0
 8002bd0:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	015a      	lsls	r2, r3, #5
 8002bd6:	693b      	ldr	r3, [r7, #16]
 8002bd8:	4413      	add	r3, r2
 8002bda:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bde:	68db      	ldr	r3, [r3, #12]
 8002be0:	68fa      	ldr	r2, [r7, #12]
 8002be2:	0151      	lsls	r1, r2, #5
 8002be4:	693a      	ldr	r2, [r7, #16]
 8002be6:	440a      	add	r2, r1
 8002be8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002bec:	f043 0302 	orr.w	r3, r3, #2
 8002bf0:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	68fa      	ldr	r2, [r7, #12]
 8002bf8:	b2d2      	uxtb	r2, r2
 8002bfa:	4611      	mov	r1, r2
 8002bfc:	4618      	mov	r0, r3
 8002bfe:	f004 fd8a 	bl	8007716 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	015a      	lsls	r2, r3, #5
 8002c06:	693b      	ldr	r3, [r7, #16]
 8002c08:	4413      	add	r3, r2
 8002c0a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c0e:	461a      	mov	r2, r3
 8002c10:	2340      	movs	r3, #64	; 0x40
 8002c12:	6093      	str	r3, [r2, #8]
}
 8002c14:	e2a6      	b.n	8003164 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	015a      	lsls	r2, r3, #5
 8002c1a:	693b      	ldr	r3, [r7, #16]
 8002c1c:	4413      	add	r3, r2
 8002c1e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c22:	689b      	ldr	r3, [r3, #8]
 8002c24:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002c28:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002c2c:	d122      	bne.n	8002c74 <HCD_HC_OUT_IRQHandler+0x1f2>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	015a      	lsls	r2, r3, #5
 8002c32:	693b      	ldr	r3, [r7, #16]
 8002c34:	4413      	add	r3, r2
 8002c36:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c3a:	68db      	ldr	r3, [r3, #12]
 8002c3c:	68fa      	ldr	r2, [r7, #12]
 8002c3e:	0151      	lsls	r1, r2, #5
 8002c40:	693a      	ldr	r2, [r7, #16]
 8002c42:	440a      	add	r2, r1
 8002c44:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002c48:	f043 0302 	orr.w	r3, r3, #2
 8002c4c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	68fa      	ldr	r2, [r7, #12]
 8002c54:	b2d2      	uxtb	r2, r2
 8002c56:	4611      	mov	r1, r2
 8002c58:	4618      	mov	r0, r3
 8002c5a:	f004 fd5c 	bl	8007716 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	015a      	lsls	r2, r3, #5
 8002c62:	693b      	ldr	r3, [r7, #16]
 8002c64:	4413      	add	r3, r2
 8002c66:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c6a:	461a      	mov	r2, r3
 8002c6c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002c70:	6093      	str	r3, [r2, #8]
}
 8002c72:	e277      	b.n	8003164 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	015a      	lsls	r2, r3, #5
 8002c78:	693b      	ldr	r3, [r7, #16]
 8002c7a:	4413      	add	r3, r2
 8002c7c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c80:	689b      	ldr	r3, [r3, #8]
 8002c82:	f003 0301 	and.w	r3, r3, #1
 8002c86:	2b01      	cmp	r3, #1
 8002c88:	d135      	bne.n	8002cf6 <HCD_HC_OUT_IRQHandler+0x274>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002c8a:	6879      	ldr	r1, [r7, #4]
 8002c8c:	68fa      	ldr	r2, [r7, #12]
 8002c8e:	4613      	mov	r3, r2
 8002c90:	009b      	lsls	r3, r3, #2
 8002c92:	4413      	add	r3, r2
 8002c94:	00db      	lsls	r3, r3, #3
 8002c96:	440b      	add	r3, r1
 8002c98:	3358      	adds	r3, #88	; 0x58
 8002c9a:	2200      	movs	r2, #0
 8002c9c:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	015a      	lsls	r2, r3, #5
 8002ca2:	693b      	ldr	r3, [r7, #16]
 8002ca4:	4413      	add	r3, r2
 8002ca6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002caa:	68db      	ldr	r3, [r3, #12]
 8002cac:	68fa      	ldr	r2, [r7, #12]
 8002cae:	0151      	lsls	r1, r2, #5
 8002cb0:	693a      	ldr	r2, [r7, #16]
 8002cb2:	440a      	add	r2, r1
 8002cb4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002cb8:	f043 0302 	orr.w	r3, r3, #2
 8002cbc:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	68fa      	ldr	r2, [r7, #12]
 8002cc4:	b2d2      	uxtb	r2, r2
 8002cc6:	4611      	mov	r1, r2
 8002cc8:	4618      	mov	r0, r3
 8002cca:	f004 fd24 	bl	8007716 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	015a      	lsls	r2, r3, #5
 8002cd2:	693b      	ldr	r3, [r7, #16]
 8002cd4:	4413      	add	r3, r2
 8002cd6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002cda:	461a      	mov	r2, r3
 8002cdc:	2301      	movs	r3, #1
 8002cde:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002ce0:	6879      	ldr	r1, [r7, #4]
 8002ce2:	68fa      	ldr	r2, [r7, #12]
 8002ce4:	4613      	mov	r3, r2
 8002ce6:	009b      	lsls	r3, r3, #2
 8002ce8:	4413      	add	r3, r2
 8002cea:	00db      	lsls	r3, r3, #3
 8002cec:	440b      	add	r3, r1
 8002cee:	335d      	adds	r3, #93	; 0x5d
 8002cf0:	2201      	movs	r2, #1
 8002cf2:	701a      	strb	r2, [r3, #0]
}
 8002cf4:	e236      	b.n	8003164 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	015a      	lsls	r2, r3, #5
 8002cfa:	693b      	ldr	r3, [r7, #16]
 8002cfc:	4413      	add	r3, r2
 8002cfe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d02:	689b      	ldr	r3, [r3, #8]
 8002d04:	f003 0308 	and.w	r3, r3, #8
 8002d08:	2b08      	cmp	r3, #8
 8002d0a:	d12b      	bne.n	8002d64 <HCD_HC_OUT_IRQHandler+0x2e2>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	015a      	lsls	r2, r3, #5
 8002d10:	693b      	ldr	r3, [r7, #16]
 8002d12:	4413      	add	r3, r2
 8002d14:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d18:	461a      	mov	r2, r3
 8002d1a:	2308      	movs	r3, #8
 8002d1c:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	015a      	lsls	r2, r3, #5
 8002d22:	693b      	ldr	r3, [r7, #16]
 8002d24:	4413      	add	r3, r2
 8002d26:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d2a:	68db      	ldr	r3, [r3, #12]
 8002d2c:	68fa      	ldr	r2, [r7, #12]
 8002d2e:	0151      	lsls	r1, r2, #5
 8002d30:	693a      	ldr	r2, [r7, #16]
 8002d32:	440a      	add	r2, r1
 8002d34:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002d38:	f043 0302 	orr.w	r3, r3, #2
 8002d3c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	68fa      	ldr	r2, [r7, #12]
 8002d44:	b2d2      	uxtb	r2, r2
 8002d46:	4611      	mov	r1, r2
 8002d48:	4618      	mov	r0, r3
 8002d4a:	f004 fce4 	bl	8007716 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 8002d4e:	6879      	ldr	r1, [r7, #4]
 8002d50:	68fa      	ldr	r2, [r7, #12]
 8002d52:	4613      	mov	r3, r2
 8002d54:	009b      	lsls	r3, r3, #2
 8002d56:	4413      	add	r3, r2
 8002d58:	00db      	lsls	r3, r3, #3
 8002d5a:	440b      	add	r3, r1
 8002d5c:	335d      	adds	r3, #93	; 0x5d
 8002d5e:	2205      	movs	r2, #5
 8002d60:	701a      	strb	r2, [r3, #0]
}
 8002d62:	e1ff      	b.n	8003164 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	015a      	lsls	r2, r3, #5
 8002d68:	693b      	ldr	r3, [r7, #16]
 8002d6a:	4413      	add	r3, r2
 8002d6c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d70:	689b      	ldr	r3, [r3, #8]
 8002d72:	f003 0310 	and.w	r3, r3, #16
 8002d76:	2b10      	cmp	r3, #16
 8002d78:	d155      	bne.n	8002e26 <HCD_HC_OUT_IRQHandler+0x3a4>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002d7a:	6879      	ldr	r1, [r7, #4]
 8002d7c:	68fa      	ldr	r2, [r7, #12]
 8002d7e:	4613      	mov	r3, r2
 8002d80:	009b      	lsls	r3, r3, #2
 8002d82:	4413      	add	r3, r2
 8002d84:	00db      	lsls	r3, r3, #3
 8002d86:	440b      	add	r3, r1
 8002d88:	3358      	adds	r3, #88	; 0x58
 8002d8a:	2200      	movs	r2, #0
 8002d8c:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8002d8e:	6879      	ldr	r1, [r7, #4]
 8002d90:	68fa      	ldr	r2, [r7, #12]
 8002d92:	4613      	mov	r3, r2
 8002d94:	009b      	lsls	r3, r3, #2
 8002d96:	4413      	add	r3, r2
 8002d98:	00db      	lsls	r3, r3, #3
 8002d9a:	440b      	add	r3, r1
 8002d9c:	335d      	adds	r3, #93	; 0x5d
 8002d9e:	2203      	movs	r2, #3
 8002da0:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8002da2:	6879      	ldr	r1, [r7, #4]
 8002da4:	68fa      	ldr	r2, [r7, #12]
 8002da6:	4613      	mov	r3, r2
 8002da8:	009b      	lsls	r3, r3, #2
 8002daa:	4413      	add	r3, r2
 8002dac:	00db      	lsls	r3, r3, #3
 8002dae:	440b      	add	r3, r1
 8002db0:	333d      	adds	r3, #61	; 0x3d
 8002db2:	781b      	ldrb	r3, [r3, #0]
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d114      	bne.n	8002de2 <HCD_HC_OUT_IRQHandler+0x360>
      if (hhcd->hc[ch_num].speed == HCD_SPEED_HIGH)
 8002db8:	6879      	ldr	r1, [r7, #4]
 8002dba:	68fa      	ldr	r2, [r7, #12]
 8002dbc:	4613      	mov	r3, r2
 8002dbe:	009b      	lsls	r3, r3, #2
 8002dc0:	4413      	add	r3, r2
 8002dc2:	00db      	lsls	r3, r3, #3
 8002dc4:	440b      	add	r3, r1
 8002dc6:	333c      	adds	r3, #60	; 0x3c
 8002dc8:	781b      	ldrb	r3, [r3, #0]
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d109      	bne.n	8002de2 <HCD_HC_OUT_IRQHandler+0x360>
        hhcd->hc[ch_num].do_ping = 1U;
 8002dce:	6879      	ldr	r1, [r7, #4]
 8002dd0:	68fa      	ldr	r2, [r7, #12]
 8002dd2:	4613      	mov	r3, r2
 8002dd4:	009b      	lsls	r3, r3, #2
 8002dd6:	4413      	add	r3, r2
 8002dd8:	00db      	lsls	r3, r3, #3
 8002dda:	440b      	add	r3, r1
 8002ddc:	333d      	adds	r3, #61	; 0x3d
 8002dde:	2201      	movs	r2, #1
 8002de0:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	015a      	lsls	r2, r3, #5
 8002de6:	693b      	ldr	r3, [r7, #16]
 8002de8:	4413      	add	r3, r2
 8002dea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002dee:	68db      	ldr	r3, [r3, #12]
 8002df0:	68fa      	ldr	r2, [r7, #12]
 8002df2:	0151      	lsls	r1, r2, #5
 8002df4:	693a      	ldr	r2, [r7, #16]
 8002df6:	440a      	add	r2, r1
 8002df8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002dfc:	f043 0302 	orr.w	r3, r3, #2
 8002e00:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	68fa      	ldr	r2, [r7, #12]
 8002e08:	b2d2      	uxtb	r2, r2
 8002e0a:	4611      	mov	r1, r2
 8002e0c:	4618      	mov	r0, r3
 8002e0e:	f004 fc82 	bl	8007716 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	015a      	lsls	r2, r3, #5
 8002e16:	693b      	ldr	r3, [r7, #16]
 8002e18:	4413      	add	r3, r2
 8002e1a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e1e:	461a      	mov	r2, r3
 8002e20:	2310      	movs	r3, #16
 8002e22:	6093      	str	r3, [r2, #8]
}
 8002e24:	e19e      	b.n	8003164 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	015a      	lsls	r2, r3, #5
 8002e2a:	693b      	ldr	r3, [r7, #16]
 8002e2c:	4413      	add	r3, r2
 8002e2e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e32:	689b      	ldr	r3, [r3, #8]
 8002e34:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e38:	2b80      	cmp	r3, #128	; 0x80
 8002e3a:	d12b      	bne.n	8002e94 <HCD_HC_OUT_IRQHandler+0x412>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	015a      	lsls	r2, r3, #5
 8002e40:	693b      	ldr	r3, [r7, #16]
 8002e42:	4413      	add	r3, r2
 8002e44:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e48:	68db      	ldr	r3, [r3, #12]
 8002e4a:	68fa      	ldr	r2, [r7, #12]
 8002e4c:	0151      	lsls	r1, r2, #5
 8002e4e:	693a      	ldr	r2, [r7, #16]
 8002e50:	440a      	add	r2, r1
 8002e52:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002e56:	f043 0302 	orr.w	r3, r3, #2
 8002e5a:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	68fa      	ldr	r2, [r7, #12]
 8002e62:	b2d2      	uxtb	r2, r2
 8002e64:	4611      	mov	r1, r2
 8002e66:	4618      	mov	r0, r3
 8002e68:	f004 fc55 	bl	8007716 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002e6c:	6879      	ldr	r1, [r7, #4]
 8002e6e:	68fa      	ldr	r2, [r7, #12]
 8002e70:	4613      	mov	r3, r2
 8002e72:	009b      	lsls	r3, r3, #2
 8002e74:	4413      	add	r3, r2
 8002e76:	00db      	lsls	r3, r3, #3
 8002e78:	440b      	add	r3, r1
 8002e7a:	335d      	adds	r3, #93	; 0x5d
 8002e7c:	2206      	movs	r2, #6
 8002e7e:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	015a      	lsls	r2, r3, #5
 8002e84:	693b      	ldr	r3, [r7, #16]
 8002e86:	4413      	add	r3, r2
 8002e88:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e8c:	461a      	mov	r2, r3
 8002e8e:	2380      	movs	r3, #128	; 0x80
 8002e90:	6093      	str	r3, [r2, #8]
}
 8002e92:	e167      	b.n	8003164 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	015a      	lsls	r2, r3, #5
 8002e98:	693b      	ldr	r3, [r7, #16]
 8002e9a:	4413      	add	r3, r2
 8002e9c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ea0:	689b      	ldr	r3, [r3, #8]
 8002ea2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ea6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002eaa:	d135      	bne.n	8002f18 <HCD_HC_OUT_IRQHandler+0x496>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	015a      	lsls	r2, r3, #5
 8002eb0:	693b      	ldr	r3, [r7, #16]
 8002eb2:	4413      	add	r3, r2
 8002eb4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002eb8:	68db      	ldr	r3, [r3, #12]
 8002eba:	68fa      	ldr	r2, [r7, #12]
 8002ebc:	0151      	lsls	r1, r2, #5
 8002ebe:	693a      	ldr	r2, [r7, #16]
 8002ec0:	440a      	add	r2, r1
 8002ec2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002ec6:	f043 0302 	orr.w	r3, r3, #2
 8002eca:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	68fa      	ldr	r2, [r7, #12]
 8002ed2:	b2d2      	uxtb	r2, r2
 8002ed4:	4611      	mov	r1, r2
 8002ed6:	4618      	mov	r0, r3
 8002ed8:	f004 fc1d 	bl	8007716 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	015a      	lsls	r2, r3, #5
 8002ee0:	693b      	ldr	r3, [r7, #16]
 8002ee2:	4413      	add	r3, r2
 8002ee4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ee8:	461a      	mov	r2, r3
 8002eea:	2310      	movs	r3, #16
 8002eec:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	015a      	lsls	r2, r3, #5
 8002ef2:	693b      	ldr	r3, [r7, #16]
 8002ef4:	4413      	add	r3, r2
 8002ef6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002efa:	461a      	mov	r2, r3
 8002efc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002f00:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002f02:	6879      	ldr	r1, [r7, #4]
 8002f04:	68fa      	ldr	r2, [r7, #12]
 8002f06:	4613      	mov	r3, r2
 8002f08:	009b      	lsls	r3, r3, #2
 8002f0a:	4413      	add	r3, r2
 8002f0c:	00db      	lsls	r3, r3, #3
 8002f0e:	440b      	add	r3, r1
 8002f10:	335d      	adds	r3, #93	; 0x5d
 8002f12:	2208      	movs	r2, #8
 8002f14:	701a      	strb	r2, [r3, #0]
}
 8002f16:	e125      	b.n	8003164 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	015a      	lsls	r2, r3, #5
 8002f1c:	693b      	ldr	r3, [r7, #16]
 8002f1e:	4413      	add	r3, r2
 8002f20:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f24:	689b      	ldr	r3, [r3, #8]
 8002f26:	f003 0302 	and.w	r3, r3, #2
 8002f2a:	2b02      	cmp	r3, #2
 8002f2c:	f040 811a 	bne.w	8003164 <HCD_HC_OUT_IRQHandler+0x6e2>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	015a      	lsls	r2, r3, #5
 8002f34:	693b      	ldr	r3, [r7, #16]
 8002f36:	4413      	add	r3, r2
 8002f38:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f3c:	68db      	ldr	r3, [r3, #12]
 8002f3e:	68fa      	ldr	r2, [r7, #12]
 8002f40:	0151      	lsls	r1, r2, #5
 8002f42:	693a      	ldr	r2, [r7, #16]
 8002f44:	440a      	add	r2, r1
 8002f46:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002f4a:	f023 0302 	bic.w	r3, r3, #2
 8002f4e:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002f50:	6879      	ldr	r1, [r7, #4]
 8002f52:	68fa      	ldr	r2, [r7, #12]
 8002f54:	4613      	mov	r3, r2
 8002f56:	009b      	lsls	r3, r3, #2
 8002f58:	4413      	add	r3, r2
 8002f5a:	00db      	lsls	r3, r3, #3
 8002f5c:	440b      	add	r3, r1
 8002f5e:	335d      	adds	r3, #93	; 0x5d
 8002f60:	781b      	ldrb	r3, [r3, #0]
 8002f62:	2b01      	cmp	r3, #1
 8002f64:	d137      	bne.n	8002fd6 <HCD_HC_OUT_IRQHandler+0x554>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8002f66:	6879      	ldr	r1, [r7, #4]
 8002f68:	68fa      	ldr	r2, [r7, #12]
 8002f6a:	4613      	mov	r3, r2
 8002f6c:	009b      	lsls	r3, r3, #2
 8002f6e:	4413      	add	r3, r2
 8002f70:	00db      	lsls	r3, r3, #3
 8002f72:	440b      	add	r3, r1
 8002f74:	335c      	adds	r3, #92	; 0x5c
 8002f76:	2201      	movs	r2, #1
 8002f78:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002f7a:	6879      	ldr	r1, [r7, #4]
 8002f7c:	68fa      	ldr	r2, [r7, #12]
 8002f7e:	4613      	mov	r3, r2
 8002f80:	009b      	lsls	r3, r3, #2
 8002f82:	4413      	add	r3, r2
 8002f84:	00db      	lsls	r3, r3, #3
 8002f86:	440b      	add	r3, r1
 8002f88:	333f      	adds	r3, #63	; 0x3f
 8002f8a:	781b      	ldrb	r3, [r3, #0]
 8002f8c:	2b02      	cmp	r3, #2
 8002f8e:	d00b      	beq.n	8002fa8 <HCD_HC_OUT_IRQHandler+0x526>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8002f90:	6879      	ldr	r1, [r7, #4]
 8002f92:	68fa      	ldr	r2, [r7, #12]
 8002f94:	4613      	mov	r3, r2
 8002f96:	009b      	lsls	r3, r3, #2
 8002f98:	4413      	add	r3, r2
 8002f9a:	00db      	lsls	r3, r3, #3
 8002f9c:	440b      	add	r3, r1
 8002f9e:	333f      	adds	r3, #63	; 0x3f
 8002fa0:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002fa2:	2b03      	cmp	r3, #3
 8002fa4:	f040 80c5 	bne.w	8003132 <HCD_HC_OUT_IRQHandler+0x6b0>
        hhcd->hc[ch_num].toggle_out ^= 1U;
 8002fa8:	6879      	ldr	r1, [r7, #4]
 8002faa:	68fa      	ldr	r2, [r7, #12]
 8002fac:	4613      	mov	r3, r2
 8002fae:	009b      	lsls	r3, r3, #2
 8002fb0:	4413      	add	r3, r2
 8002fb2:	00db      	lsls	r3, r3, #3
 8002fb4:	440b      	add	r3, r1
 8002fb6:	3351      	adds	r3, #81	; 0x51
 8002fb8:	781b      	ldrb	r3, [r3, #0]
 8002fba:	f083 0301 	eor.w	r3, r3, #1
 8002fbe:	b2d8      	uxtb	r0, r3
 8002fc0:	6879      	ldr	r1, [r7, #4]
 8002fc2:	68fa      	ldr	r2, [r7, #12]
 8002fc4:	4613      	mov	r3, r2
 8002fc6:	009b      	lsls	r3, r3, #2
 8002fc8:	4413      	add	r3, r2
 8002fca:	00db      	lsls	r3, r3, #3
 8002fcc:	440b      	add	r3, r1
 8002fce:	3351      	adds	r3, #81	; 0x51
 8002fd0:	4602      	mov	r2, r0
 8002fd2:	701a      	strb	r2, [r3, #0]
 8002fd4:	e0ad      	b.n	8003132 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002fd6:	6879      	ldr	r1, [r7, #4]
 8002fd8:	68fa      	ldr	r2, [r7, #12]
 8002fda:	4613      	mov	r3, r2
 8002fdc:	009b      	lsls	r3, r3, #2
 8002fde:	4413      	add	r3, r2
 8002fe0:	00db      	lsls	r3, r3, #3
 8002fe2:	440b      	add	r3, r1
 8002fe4:	335d      	adds	r3, #93	; 0x5d
 8002fe6:	781b      	ldrb	r3, [r3, #0]
 8002fe8:	2b03      	cmp	r3, #3
 8002fea:	d10a      	bne.n	8003002 <HCD_HC_OUT_IRQHandler+0x580>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002fec:	6879      	ldr	r1, [r7, #4]
 8002fee:	68fa      	ldr	r2, [r7, #12]
 8002ff0:	4613      	mov	r3, r2
 8002ff2:	009b      	lsls	r3, r3, #2
 8002ff4:	4413      	add	r3, r2
 8002ff6:	00db      	lsls	r3, r3, #3
 8002ff8:	440b      	add	r3, r1
 8002ffa:	335c      	adds	r3, #92	; 0x5c
 8002ffc:	2202      	movs	r2, #2
 8002ffe:	701a      	strb	r2, [r3, #0]
 8003000:	e097      	b.n	8003132 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8003002:	6879      	ldr	r1, [r7, #4]
 8003004:	68fa      	ldr	r2, [r7, #12]
 8003006:	4613      	mov	r3, r2
 8003008:	009b      	lsls	r3, r3, #2
 800300a:	4413      	add	r3, r2
 800300c:	00db      	lsls	r3, r3, #3
 800300e:	440b      	add	r3, r1
 8003010:	335d      	adds	r3, #93	; 0x5d
 8003012:	781b      	ldrb	r3, [r3, #0]
 8003014:	2b04      	cmp	r3, #4
 8003016:	d10a      	bne.n	800302e <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8003018:	6879      	ldr	r1, [r7, #4]
 800301a:	68fa      	ldr	r2, [r7, #12]
 800301c:	4613      	mov	r3, r2
 800301e:	009b      	lsls	r3, r3, #2
 8003020:	4413      	add	r3, r2
 8003022:	00db      	lsls	r3, r3, #3
 8003024:	440b      	add	r3, r1
 8003026:	335c      	adds	r3, #92	; 0x5c
 8003028:	2202      	movs	r2, #2
 800302a:	701a      	strb	r2, [r3, #0]
 800302c:	e081      	b.n	8003132 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 800302e:	6879      	ldr	r1, [r7, #4]
 8003030:	68fa      	ldr	r2, [r7, #12]
 8003032:	4613      	mov	r3, r2
 8003034:	009b      	lsls	r3, r3, #2
 8003036:	4413      	add	r3, r2
 8003038:	00db      	lsls	r3, r3, #3
 800303a:	440b      	add	r3, r1
 800303c:	335d      	adds	r3, #93	; 0x5d
 800303e:	781b      	ldrb	r3, [r3, #0]
 8003040:	2b05      	cmp	r3, #5
 8003042:	d10a      	bne.n	800305a <HCD_HC_OUT_IRQHandler+0x5d8>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8003044:	6879      	ldr	r1, [r7, #4]
 8003046:	68fa      	ldr	r2, [r7, #12]
 8003048:	4613      	mov	r3, r2
 800304a:	009b      	lsls	r3, r3, #2
 800304c:	4413      	add	r3, r2
 800304e:	00db      	lsls	r3, r3, #3
 8003050:	440b      	add	r3, r1
 8003052:	335c      	adds	r3, #92	; 0x5c
 8003054:	2205      	movs	r2, #5
 8003056:	701a      	strb	r2, [r3, #0]
 8003058:	e06b      	b.n	8003132 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800305a:	6879      	ldr	r1, [r7, #4]
 800305c:	68fa      	ldr	r2, [r7, #12]
 800305e:	4613      	mov	r3, r2
 8003060:	009b      	lsls	r3, r3, #2
 8003062:	4413      	add	r3, r2
 8003064:	00db      	lsls	r3, r3, #3
 8003066:	440b      	add	r3, r1
 8003068:	335d      	adds	r3, #93	; 0x5d
 800306a:	781b      	ldrb	r3, [r3, #0]
 800306c:	2b06      	cmp	r3, #6
 800306e:	d00a      	beq.n	8003086 <HCD_HC_OUT_IRQHandler+0x604>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8003070:	6879      	ldr	r1, [r7, #4]
 8003072:	68fa      	ldr	r2, [r7, #12]
 8003074:	4613      	mov	r3, r2
 8003076:	009b      	lsls	r3, r3, #2
 8003078:	4413      	add	r3, r2
 800307a:	00db      	lsls	r3, r3, #3
 800307c:	440b      	add	r3, r1
 800307e:	335d      	adds	r3, #93	; 0x5d
 8003080:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003082:	2b08      	cmp	r3, #8
 8003084:	d155      	bne.n	8003132 <HCD_HC_OUT_IRQHandler+0x6b0>
      hhcd->hc[ch_num].ErrCnt++;
 8003086:	6879      	ldr	r1, [r7, #4]
 8003088:	68fa      	ldr	r2, [r7, #12]
 800308a:	4613      	mov	r3, r2
 800308c:	009b      	lsls	r3, r3, #2
 800308e:	4413      	add	r3, r2
 8003090:	00db      	lsls	r3, r3, #3
 8003092:	440b      	add	r3, r1
 8003094:	3358      	adds	r3, #88	; 0x58
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	1c59      	adds	r1, r3, #1
 800309a:	6878      	ldr	r0, [r7, #4]
 800309c:	68fa      	ldr	r2, [r7, #12]
 800309e:	4613      	mov	r3, r2
 80030a0:	009b      	lsls	r3, r3, #2
 80030a2:	4413      	add	r3, r2
 80030a4:	00db      	lsls	r3, r3, #3
 80030a6:	4403      	add	r3, r0
 80030a8:	3358      	adds	r3, #88	; 0x58
 80030aa:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 80030ac:	6879      	ldr	r1, [r7, #4]
 80030ae:	68fa      	ldr	r2, [r7, #12]
 80030b0:	4613      	mov	r3, r2
 80030b2:	009b      	lsls	r3, r3, #2
 80030b4:	4413      	add	r3, r2
 80030b6:	00db      	lsls	r3, r3, #3
 80030b8:	440b      	add	r3, r1
 80030ba:	3358      	adds	r3, #88	; 0x58
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	2b03      	cmp	r3, #3
 80030c0:	d914      	bls.n	80030ec <HCD_HC_OUT_IRQHandler+0x66a>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80030c2:	6879      	ldr	r1, [r7, #4]
 80030c4:	68fa      	ldr	r2, [r7, #12]
 80030c6:	4613      	mov	r3, r2
 80030c8:	009b      	lsls	r3, r3, #2
 80030ca:	4413      	add	r3, r2
 80030cc:	00db      	lsls	r3, r3, #3
 80030ce:	440b      	add	r3, r1
 80030d0:	3358      	adds	r3, #88	; 0x58
 80030d2:	2200      	movs	r2, #0
 80030d4:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80030d6:	6879      	ldr	r1, [r7, #4]
 80030d8:	68fa      	ldr	r2, [r7, #12]
 80030da:	4613      	mov	r3, r2
 80030dc:	009b      	lsls	r3, r3, #2
 80030de:	4413      	add	r3, r2
 80030e0:	00db      	lsls	r3, r3, #3
 80030e2:	440b      	add	r3, r1
 80030e4:	335c      	adds	r3, #92	; 0x5c
 80030e6:	2204      	movs	r2, #4
 80030e8:	701a      	strb	r2, [r3, #0]
 80030ea:	e009      	b.n	8003100 <HCD_HC_OUT_IRQHandler+0x67e>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80030ec:	6879      	ldr	r1, [r7, #4]
 80030ee:	68fa      	ldr	r2, [r7, #12]
 80030f0:	4613      	mov	r3, r2
 80030f2:	009b      	lsls	r3, r3, #2
 80030f4:	4413      	add	r3, r2
 80030f6:	00db      	lsls	r3, r3, #3
 80030f8:	440b      	add	r3, r1
 80030fa:	335c      	adds	r3, #92	; 0x5c
 80030fc:	2202      	movs	r2, #2
 80030fe:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	015a      	lsls	r2, r3, #5
 8003104:	693b      	ldr	r3, [r7, #16]
 8003106:	4413      	add	r3, r2
 8003108:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003110:	68bb      	ldr	r3, [r7, #8]
 8003112:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003116:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003118:	68bb      	ldr	r3, [r7, #8]
 800311a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800311e:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	015a      	lsls	r2, r3, #5
 8003124:	693b      	ldr	r3, [r7, #16]
 8003126:	4413      	add	r3, r2
 8003128:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800312c:	461a      	mov	r2, r3
 800312e:	68bb      	ldr	r3, [r7, #8]
 8003130:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	015a      	lsls	r2, r3, #5
 8003136:	693b      	ldr	r3, [r7, #16]
 8003138:	4413      	add	r3, r2
 800313a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800313e:	461a      	mov	r2, r3
 8003140:	2302      	movs	r3, #2
 8003142:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	b2d8      	uxtb	r0, r3
 8003148:	6879      	ldr	r1, [r7, #4]
 800314a:	68fa      	ldr	r2, [r7, #12]
 800314c:	4613      	mov	r3, r2
 800314e:	009b      	lsls	r3, r3, #2
 8003150:	4413      	add	r3, r2
 8003152:	00db      	lsls	r3, r3, #3
 8003154:	440b      	add	r3, r1
 8003156:	335c      	adds	r3, #92	; 0x5c
 8003158:	781b      	ldrb	r3, [r3, #0]
 800315a:	461a      	mov	r2, r3
 800315c:	4601      	mov	r1, r0
 800315e:	6878      	ldr	r0, [r7, #4]
 8003160:	f006 fc6e 	bl	8009a40 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8003164:	bf00      	nop
 8003166:	3718      	adds	r7, #24
 8003168:	46bd      	mov	sp, r7
 800316a:	bd80      	pop	{r7, pc}

0800316c <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800316c:	b580      	push	{r7, lr}
 800316e:	b08a      	sub	sp, #40	; 0x28
 8003170:	af00      	add	r7, sp, #0
 8003172:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 800317a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800317c:	623b      	str	r3, [r7, #32]
  uint32_t pktcnt;
  uint32_t temp;
  uint32_t tmpreg;
  uint32_t ch_num;

  temp = hhcd->Instance->GRXSTSP;
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	6a1b      	ldr	r3, [r3, #32]
 8003184:	61fb      	str	r3, [r7, #28]
  ch_num = temp & USB_OTG_GRXSTSP_EPNUM;
 8003186:	69fb      	ldr	r3, [r7, #28]
 8003188:	f003 030f 	and.w	r3, r3, #15
 800318c:	61bb      	str	r3, [r7, #24]
  pktsts = (temp & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 800318e:	69fb      	ldr	r3, [r7, #28]
 8003190:	0c5b      	lsrs	r3, r3, #17
 8003192:	f003 030f 	and.w	r3, r3, #15
 8003196:	617b      	str	r3, [r7, #20]
  pktcnt = (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003198:	69fb      	ldr	r3, [r7, #28]
 800319a:	091b      	lsrs	r3, r3, #4
 800319c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80031a0:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 80031a2:	697b      	ldr	r3, [r7, #20]
 80031a4:	2b02      	cmp	r3, #2
 80031a6:	d003      	beq.n	80031b0 <HCD_RXQLVL_IRQHandler+0x44>
 80031a8:	2b05      	cmp	r3, #5
 80031aa:	f000 8082 	beq.w	80032b2 <HCD_RXQLVL_IRQHandler+0x146>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 80031ae:	e083      	b.n	80032b8 <HCD_RXQLVL_IRQHandler+0x14c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 80031b0:	693b      	ldr	r3, [r7, #16]
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d07f      	beq.n	80032b6 <HCD_RXQLVL_IRQHandler+0x14a>
 80031b6:	6879      	ldr	r1, [r7, #4]
 80031b8:	69ba      	ldr	r2, [r7, #24]
 80031ba:	4613      	mov	r3, r2
 80031bc:	009b      	lsls	r3, r3, #2
 80031be:	4413      	add	r3, r2
 80031c0:	00db      	lsls	r3, r3, #3
 80031c2:	440b      	add	r3, r1
 80031c4:	3344      	adds	r3, #68	; 0x44
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d074      	beq.n	80032b6 <HCD_RXQLVL_IRQHandler+0x14a>
        (void)USB_ReadPacket(hhcd->Instance, hhcd->hc[ch_num].xfer_buff, (uint16_t)pktcnt);
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	6818      	ldr	r0, [r3, #0]
 80031d0:	6879      	ldr	r1, [r7, #4]
 80031d2:	69ba      	ldr	r2, [r7, #24]
 80031d4:	4613      	mov	r3, r2
 80031d6:	009b      	lsls	r3, r3, #2
 80031d8:	4413      	add	r3, r2
 80031da:	00db      	lsls	r3, r3, #3
 80031dc:	440b      	add	r3, r1
 80031de:	3344      	adds	r3, #68	; 0x44
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	693a      	ldr	r2, [r7, #16]
 80031e4:	b292      	uxth	r2, r2
 80031e6:	4619      	mov	r1, r3
 80031e8:	f003 fe33 	bl	8006e52 <USB_ReadPacket>
        hhcd->hc[ch_num].xfer_buff += pktcnt;
 80031ec:	6879      	ldr	r1, [r7, #4]
 80031ee:	69ba      	ldr	r2, [r7, #24]
 80031f0:	4613      	mov	r3, r2
 80031f2:	009b      	lsls	r3, r3, #2
 80031f4:	4413      	add	r3, r2
 80031f6:	00db      	lsls	r3, r3, #3
 80031f8:	440b      	add	r3, r1
 80031fa:	3344      	adds	r3, #68	; 0x44
 80031fc:	681a      	ldr	r2, [r3, #0]
 80031fe:	693b      	ldr	r3, [r7, #16]
 8003200:	18d1      	adds	r1, r2, r3
 8003202:	6878      	ldr	r0, [r7, #4]
 8003204:	69ba      	ldr	r2, [r7, #24]
 8003206:	4613      	mov	r3, r2
 8003208:	009b      	lsls	r3, r3, #2
 800320a:	4413      	add	r3, r2
 800320c:	00db      	lsls	r3, r3, #3
 800320e:	4403      	add	r3, r0
 8003210:	3344      	adds	r3, #68	; 0x44
 8003212:	6019      	str	r1, [r3, #0]
        hhcd->hc[ch_num].xfer_count  += pktcnt;
 8003214:	6879      	ldr	r1, [r7, #4]
 8003216:	69ba      	ldr	r2, [r7, #24]
 8003218:	4613      	mov	r3, r2
 800321a:	009b      	lsls	r3, r3, #2
 800321c:	4413      	add	r3, r2
 800321e:	00db      	lsls	r3, r3, #3
 8003220:	440b      	add	r3, r1
 8003222:	334c      	adds	r3, #76	; 0x4c
 8003224:	681a      	ldr	r2, [r3, #0]
 8003226:	693b      	ldr	r3, [r7, #16]
 8003228:	18d1      	adds	r1, r2, r3
 800322a:	6878      	ldr	r0, [r7, #4]
 800322c:	69ba      	ldr	r2, [r7, #24]
 800322e:	4613      	mov	r3, r2
 8003230:	009b      	lsls	r3, r3, #2
 8003232:	4413      	add	r3, r2
 8003234:	00db      	lsls	r3, r3, #3
 8003236:	4403      	add	r3, r0
 8003238:	334c      	adds	r3, #76	; 0x4c
 800323a:	6019      	str	r1, [r3, #0]
        if ((USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0U)
 800323c:	69bb      	ldr	r3, [r7, #24]
 800323e:	015a      	lsls	r2, r3, #5
 8003240:	6a3b      	ldr	r3, [r7, #32]
 8003242:	4413      	add	r3, r2
 8003244:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003248:	691a      	ldr	r2, [r3, #16]
 800324a:	4b1d      	ldr	r3, [pc, #116]	; (80032c0 <HCD_RXQLVL_IRQHandler+0x154>)
 800324c:	4013      	ands	r3, r2
 800324e:	2b00      	cmp	r3, #0
 8003250:	d031      	beq.n	80032b6 <HCD_RXQLVL_IRQHandler+0x14a>
          tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003252:	69bb      	ldr	r3, [r7, #24]
 8003254:	015a      	lsls	r2, r3, #5
 8003256:	6a3b      	ldr	r3, [r7, #32]
 8003258:	4413      	add	r3, r2
 800325a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003268:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003270:	60fb      	str	r3, [r7, #12]
          USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003272:	69bb      	ldr	r3, [r7, #24]
 8003274:	015a      	lsls	r2, r3, #5
 8003276:	6a3b      	ldr	r3, [r7, #32]
 8003278:	4413      	add	r3, r2
 800327a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800327e:	461a      	mov	r2, r3
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	6013      	str	r3, [r2, #0]
          hhcd->hc[ch_num].toggle_in ^= 1U;
 8003284:	6879      	ldr	r1, [r7, #4]
 8003286:	69ba      	ldr	r2, [r7, #24]
 8003288:	4613      	mov	r3, r2
 800328a:	009b      	lsls	r3, r3, #2
 800328c:	4413      	add	r3, r2
 800328e:	00db      	lsls	r3, r3, #3
 8003290:	440b      	add	r3, r1
 8003292:	3350      	adds	r3, #80	; 0x50
 8003294:	781b      	ldrb	r3, [r3, #0]
 8003296:	f083 0301 	eor.w	r3, r3, #1
 800329a:	b2d8      	uxtb	r0, r3
 800329c:	6879      	ldr	r1, [r7, #4]
 800329e:	69ba      	ldr	r2, [r7, #24]
 80032a0:	4613      	mov	r3, r2
 80032a2:	009b      	lsls	r3, r3, #2
 80032a4:	4413      	add	r3, r2
 80032a6:	00db      	lsls	r3, r3, #3
 80032a8:	440b      	add	r3, r1
 80032aa:	3350      	adds	r3, #80	; 0x50
 80032ac:	4602      	mov	r2, r0
 80032ae:	701a      	strb	r2, [r3, #0]
      break;
 80032b0:	e001      	b.n	80032b6 <HCD_RXQLVL_IRQHandler+0x14a>
      break;
 80032b2:	bf00      	nop
 80032b4:	e000      	b.n	80032b8 <HCD_RXQLVL_IRQHandler+0x14c>
      break;
 80032b6:	bf00      	nop
  }
}
 80032b8:	bf00      	nop
 80032ba:	3728      	adds	r7, #40	; 0x28
 80032bc:	46bd      	mov	sp, r7
 80032be:	bd80      	pop	{r7, pc}
 80032c0:	1ff80000 	.word	0x1ff80000

080032c4 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80032c4:	b580      	push	{r7, lr}
 80032c6:	b086      	sub	sp, #24
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80032d2:	697b      	ldr	r3, [r7, #20]
 80032d4:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 80032d6:	693b      	ldr	r3, [r7, #16]
 80032d8:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 80032e0:	693b      	ldr	r3, [r7, #16]
 80032e2:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 80032ea:	68bb      	ldr	r3, [r7, #8]
 80032ec:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80032f0:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	f003 0302 	and.w	r3, r3, #2
 80032f8:	2b02      	cmp	r3, #2
 80032fa:	d10b      	bne.n	8003314 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	f003 0301 	and.w	r3, r3, #1
 8003302:	2b01      	cmp	r3, #1
 8003304:	d102      	bne.n	800330c <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8003306:	6878      	ldr	r0, [r7, #4]
 8003308:	f006 fb7e 	bl	8009a08 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 800330c:	68bb      	ldr	r3, [r7, #8]
 800330e:	f043 0302 	orr.w	r3, r3, #2
 8003312:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	f003 0308 	and.w	r3, r3, #8
 800331a:	2b08      	cmp	r3, #8
 800331c:	d132      	bne.n	8003384 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 800331e:	68bb      	ldr	r3, [r7, #8]
 8003320:	f043 0308 	orr.w	r3, r3, #8
 8003324:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	f003 0304 	and.w	r3, r3, #4
 800332c:	2b04      	cmp	r3, #4
 800332e:	d126      	bne.n	800337e <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	699b      	ldr	r3, [r3, #24]
 8003334:	2b02      	cmp	r3, #2
 8003336:	d113      	bne.n	8003360 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 800333e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003342:	d106      	bne.n	8003352 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	2102      	movs	r1, #2
 800334a:	4618      	mov	r0, r3
 800334c:	f003 febc 	bl	80070c8 <USB_InitFSLSPClkSel>
 8003350:	e011      	b.n	8003376 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	2101      	movs	r1, #1
 8003358:	4618      	mov	r0, r3
 800335a:	f003 feb5 	bl	80070c8 <USB_InitFSLSPClkSel>
 800335e:	e00a      	b.n	8003376 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	68db      	ldr	r3, [r3, #12]
 8003364:	2b01      	cmp	r3, #1
 8003366:	d106      	bne.n	8003376 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8003368:	693b      	ldr	r3, [r7, #16]
 800336a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800336e:	461a      	mov	r2, r3
 8003370:	f64e 2360 	movw	r3, #60000	; 0xea60
 8003374:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8003376:	6878      	ldr	r0, [r7, #4]
 8003378:	f006 fb70 	bl	8009a5c <HAL_HCD_PortEnabled_Callback>
 800337c:	e002      	b.n	8003384 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 800337e:	6878      	ldr	r0, [r7, #4]
 8003380:	f006 fb7a 	bl	8009a78 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	f003 0320 	and.w	r3, r3, #32
 800338a:	2b20      	cmp	r3, #32
 800338c:	d103      	bne.n	8003396 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 800338e:	68bb      	ldr	r3, [r7, #8]
 8003390:	f043 0320 	orr.w	r3, r3, #32
 8003394:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8003396:	693b      	ldr	r3, [r7, #16]
 8003398:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800339c:	461a      	mov	r2, r3
 800339e:	68bb      	ldr	r3, [r7, #8]
 80033a0:	6013      	str	r3, [r2, #0]
}
 80033a2:	bf00      	nop
 80033a4:	3718      	adds	r7, #24
 80033a6:	46bd      	mov	sp, r7
 80033a8:	bd80      	pop	{r7, pc}
	...

080033ac <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80033ac:	b580      	push	{r7, lr}
 80033ae:	b084      	sub	sp, #16
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d101      	bne.n	80033be <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80033ba:	2301      	movs	r3, #1
 80033bc:	e1b1      	b.n	8003722 <HAL_I2C_Init+0x376>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	4aa2      	ldr	r2, [pc, #648]	; (800364c <HAL_I2C_Init+0x2a0>)
 80033c4:	4293      	cmp	r3, r2
 80033c6:	d00e      	beq.n	80033e6 <HAL_I2C_Init+0x3a>
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	4aa0      	ldr	r2, [pc, #640]	; (8003650 <HAL_I2C_Init+0x2a4>)
 80033ce:	4293      	cmp	r3, r2
 80033d0:	d009      	beq.n	80033e6 <HAL_I2C_Init+0x3a>
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	4a9f      	ldr	r2, [pc, #636]	; (8003654 <HAL_I2C_Init+0x2a8>)
 80033d8:	4293      	cmp	r3, r2
 80033da:	d004      	beq.n	80033e6 <HAL_I2C_Init+0x3a>
 80033dc:	f240 11bf 	movw	r1, #447	; 0x1bf
 80033e0:	489d      	ldr	r0, [pc, #628]	; (8003658 <HAL_I2C_Init+0x2ac>)
 80033e2:	f7fd fbda 	bl	8000b9a <assert_failed>
  assert_param(IS_I2C_CLOCK_SPEED(hi2c->Init.ClockSpeed));
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	685b      	ldr	r3, [r3, #4]
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d004      	beq.n	80033f8 <HAL_I2C_Init+0x4c>
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	685b      	ldr	r3, [r3, #4]
 80033f2:	4a9a      	ldr	r2, [pc, #616]	; (800365c <HAL_I2C_Init+0x2b0>)
 80033f4:	4293      	cmp	r3, r2
 80033f6:	d904      	bls.n	8003402 <HAL_I2C_Init+0x56>
 80033f8:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 80033fc:	4896      	ldr	r0, [pc, #600]	; (8003658 <HAL_I2C_Init+0x2ac>)
 80033fe:	f7fd fbcc 	bl	8000b9a <assert_failed>
  assert_param(IS_I2C_DUTY_CYCLE(hi2c->Init.DutyCycle));
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	689b      	ldr	r3, [r3, #8]
 8003406:	2b00      	cmp	r3, #0
 8003408:	d009      	beq.n	800341e <HAL_I2C_Init+0x72>
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	689b      	ldr	r3, [r3, #8]
 800340e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003412:	d004      	beq.n	800341e <HAL_I2C_Init+0x72>
 8003414:	f240 11c1 	movw	r1, #449	; 0x1c1
 8003418:	488f      	ldr	r0, [pc, #572]	; (8003658 <HAL_I2C_Init+0x2ac>)
 800341a:	f7fd fbbe 	bl	8000b9a <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS1(hi2c->Init.OwnAddress1));
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	68db      	ldr	r3, [r3, #12]
 8003422:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003426:	f023 0303 	bic.w	r3, r3, #3
 800342a:	2b00      	cmp	r3, #0
 800342c:	d004      	beq.n	8003438 <HAL_I2C_Init+0x8c>
 800342e:	f44f 71e1 	mov.w	r1, #450	; 0x1c2
 8003432:	4889      	ldr	r0, [pc, #548]	; (8003658 <HAL_I2C_Init+0x2ac>)
 8003434:	f7fd fbb1 	bl	8000b9a <assert_failed>
  assert_param(IS_I2C_ADDRESSING_MODE(hi2c->Init.AddressingMode));
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	691b      	ldr	r3, [r3, #16]
 800343c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003440:	d009      	beq.n	8003456 <HAL_I2C_Init+0xaa>
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	691b      	ldr	r3, [r3, #16]
 8003446:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800344a:	d004      	beq.n	8003456 <HAL_I2C_Init+0xaa>
 800344c:	f240 11c3 	movw	r1, #451	; 0x1c3
 8003450:	4881      	ldr	r0, [pc, #516]	; (8003658 <HAL_I2C_Init+0x2ac>)
 8003452:	f7fd fba2 	bl	8000b9a <assert_failed>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	695b      	ldr	r3, [r3, #20]
 800345a:	2b00      	cmp	r3, #0
 800345c:	d008      	beq.n	8003470 <HAL_I2C_Init+0xc4>
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	695b      	ldr	r3, [r3, #20]
 8003462:	2b01      	cmp	r3, #1
 8003464:	d004      	beq.n	8003470 <HAL_I2C_Init+0xc4>
 8003466:	f44f 71e2 	mov.w	r1, #452	; 0x1c4
 800346a:	487b      	ldr	r0, [pc, #492]	; (8003658 <HAL_I2C_Init+0x2ac>)
 800346c:	f7fd fb95 	bl	8000b9a <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	699b      	ldr	r3, [r3, #24]
 8003474:	f023 03fe 	bic.w	r3, r3, #254	; 0xfe
 8003478:	2b00      	cmp	r3, #0
 800347a:	d004      	beq.n	8003486 <HAL_I2C_Init+0xda>
 800347c:	f240 11c5 	movw	r1, #453	; 0x1c5
 8003480:	4875      	ldr	r0, [pc, #468]	; (8003658 <HAL_I2C_Init+0x2ac>)
 8003482:	f7fd fb8a 	bl	8000b9a <assert_failed>
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	69db      	ldr	r3, [r3, #28]
 800348a:	2b00      	cmp	r3, #0
 800348c:	d008      	beq.n	80034a0 <HAL_I2C_Init+0xf4>
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	69db      	ldr	r3, [r3, #28]
 8003492:	2b40      	cmp	r3, #64	; 0x40
 8003494:	d004      	beq.n	80034a0 <HAL_I2C_Init+0xf4>
 8003496:	f44f 71e3 	mov.w	r1, #454	; 0x1c6
 800349a:	486f      	ldr	r0, [pc, #444]	; (8003658 <HAL_I2C_Init+0x2ac>)
 800349c:	f7fd fb7d 	bl	8000b9a <assert_failed>
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	6a1b      	ldr	r3, [r3, #32]
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d008      	beq.n	80034ba <HAL_I2C_Init+0x10e>
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	6a1b      	ldr	r3, [r3, #32]
 80034ac:	2b80      	cmp	r3, #128	; 0x80
 80034ae:	d004      	beq.n	80034ba <HAL_I2C_Init+0x10e>
 80034b0:	f240 11c7 	movw	r1, #455	; 0x1c7
 80034b4:	4868      	ldr	r0, [pc, #416]	; (8003658 <HAL_I2C_Init+0x2ac>)
 80034b6:	f7fd fb70 	bl	8000b9a <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034c0:	b2db      	uxtb	r3, r3
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d106      	bne.n	80034d4 <HAL_I2C_Init+0x128>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	2200      	movs	r2, #0
 80034ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80034ce:	6878      	ldr	r0, [r7, #4]
 80034d0:	f7fd f90a 	bl	80006e8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	2224      	movs	r2, #36	; 0x24
 80034d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	681a      	ldr	r2, [r3, #0]
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f022 0201 	bic.w	r2, r2, #1
 80034ea:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	681a      	ldr	r2, [r3, #0]
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80034fa:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	681a      	ldr	r2, [r3, #0]
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800350a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800350c:	f001 fbfe 	bl	8004d0c <HAL_RCC_GetPCLK1Freq>
 8003510:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	685b      	ldr	r3, [r3, #4]
 8003516:	4a52      	ldr	r2, [pc, #328]	; (8003660 <HAL_I2C_Init+0x2b4>)
 8003518:	4293      	cmp	r3, r2
 800351a:	d807      	bhi.n	800352c <HAL_I2C_Init+0x180>
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	4a51      	ldr	r2, [pc, #324]	; (8003664 <HAL_I2C_Init+0x2b8>)
 8003520:	4293      	cmp	r3, r2
 8003522:	bf94      	ite	ls
 8003524:	2301      	movls	r3, #1
 8003526:	2300      	movhi	r3, #0
 8003528:	b2db      	uxtb	r3, r3
 800352a:	e006      	b.n	800353a <HAL_I2C_Init+0x18e>
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	4a4e      	ldr	r2, [pc, #312]	; (8003668 <HAL_I2C_Init+0x2bc>)
 8003530:	4293      	cmp	r3, r2
 8003532:	bf94      	ite	ls
 8003534:	2301      	movls	r3, #1
 8003536:	2300      	movhi	r3, #0
 8003538:	b2db      	uxtb	r3, r3
 800353a:	2b00      	cmp	r3, #0
 800353c:	d001      	beq.n	8003542 <HAL_I2C_Init+0x196>
  {
    return HAL_ERROR;
 800353e:	2301      	movs	r3, #1
 8003540:	e0ef      	b.n	8003722 <HAL_I2C_Init+0x376>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	4a49      	ldr	r2, [pc, #292]	; (800366c <HAL_I2C_Init+0x2c0>)
 8003546:	fba2 2303 	umull	r2, r3, r2, r3
 800354a:	0c9b      	lsrs	r3, r3, #18
 800354c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	685b      	ldr	r3, [r3, #4]
 8003554:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	68ba      	ldr	r2, [r7, #8]
 800355e:	430a      	orrs	r2, r1
 8003560:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	6a1b      	ldr	r3, [r3, #32]
 8003568:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	685b      	ldr	r3, [r3, #4]
 8003570:	4a3b      	ldr	r2, [pc, #236]	; (8003660 <HAL_I2C_Init+0x2b4>)
 8003572:	4293      	cmp	r3, r2
 8003574:	d802      	bhi.n	800357c <HAL_I2C_Init+0x1d0>
 8003576:	68bb      	ldr	r3, [r7, #8]
 8003578:	3301      	adds	r3, #1
 800357a:	e009      	b.n	8003590 <HAL_I2C_Init+0x1e4>
 800357c:	68bb      	ldr	r3, [r7, #8]
 800357e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003582:	fb02 f303 	mul.w	r3, r2, r3
 8003586:	4a3a      	ldr	r2, [pc, #232]	; (8003670 <HAL_I2C_Init+0x2c4>)
 8003588:	fba2 2303 	umull	r2, r3, r2, r3
 800358c:	099b      	lsrs	r3, r3, #6
 800358e:	3301      	adds	r3, #1
 8003590:	687a      	ldr	r2, [r7, #4]
 8003592:	6812      	ldr	r2, [r2, #0]
 8003594:	430b      	orrs	r3, r1
 8003596:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	69db      	ldr	r3, [r3, #28]
 800359e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80035a2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	685b      	ldr	r3, [r3, #4]
 80035aa:	492d      	ldr	r1, [pc, #180]	; (8003660 <HAL_I2C_Init+0x2b4>)
 80035ac:	428b      	cmp	r3, r1
 80035ae:	d80d      	bhi.n	80035cc <HAL_I2C_Init+0x220>
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	1e59      	subs	r1, r3, #1
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	685b      	ldr	r3, [r3, #4]
 80035b8:	005b      	lsls	r3, r3, #1
 80035ba:	fbb1 f3f3 	udiv	r3, r1, r3
 80035be:	3301      	adds	r3, #1
 80035c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80035c4:	2b04      	cmp	r3, #4
 80035c6:	bf38      	it	cc
 80035c8:	2304      	movcc	r3, #4
 80035ca:	e063      	b.n	8003694 <HAL_I2C_Init+0x2e8>
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	689b      	ldr	r3, [r3, #8]
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d111      	bne.n	80035f8 <HAL_I2C_Init+0x24c>
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	1e58      	subs	r0, r3, #1
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	6859      	ldr	r1, [r3, #4]
 80035dc:	460b      	mov	r3, r1
 80035de:	005b      	lsls	r3, r3, #1
 80035e0:	440b      	add	r3, r1
 80035e2:	fbb0 f3f3 	udiv	r3, r0, r3
 80035e6:	3301      	adds	r3, #1
 80035e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	bf0c      	ite	eq
 80035f0:	2301      	moveq	r3, #1
 80035f2:	2300      	movne	r3, #0
 80035f4:	b2db      	uxtb	r3, r3
 80035f6:	e012      	b.n	800361e <HAL_I2C_Init+0x272>
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	1e58      	subs	r0, r3, #1
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	6859      	ldr	r1, [r3, #4]
 8003600:	460b      	mov	r3, r1
 8003602:	009b      	lsls	r3, r3, #2
 8003604:	440b      	add	r3, r1
 8003606:	0099      	lsls	r1, r3, #2
 8003608:	440b      	add	r3, r1
 800360a:	fbb0 f3f3 	udiv	r3, r0, r3
 800360e:	3301      	adds	r3, #1
 8003610:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003614:	2b00      	cmp	r3, #0
 8003616:	bf0c      	ite	eq
 8003618:	2301      	moveq	r3, #1
 800361a:	2300      	movne	r3, #0
 800361c:	b2db      	uxtb	r3, r3
 800361e:	2b00      	cmp	r3, #0
 8003620:	d001      	beq.n	8003626 <HAL_I2C_Init+0x27a>
 8003622:	2301      	movs	r3, #1
 8003624:	e036      	b.n	8003694 <HAL_I2C_Init+0x2e8>
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	689b      	ldr	r3, [r3, #8]
 800362a:	2b00      	cmp	r3, #0
 800362c:	d122      	bne.n	8003674 <HAL_I2C_Init+0x2c8>
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	1e58      	subs	r0, r3, #1
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	6859      	ldr	r1, [r3, #4]
 8003636:	460b      	mov	r3, r1
 8003638:	005b      	lsls	r3, r3, #1
 800363a:	440b      	add	r3, r1
 800363c:	fbb0 f3f3 	udiv	r3, r0, r3
 8003640:	3301      	adds	r3, #1
 8003642:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003646:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800364a:	e023      	b.n	8003694 <HAL_I2C_Init+0x2e8>
 800364c:	40005400 	.word	0x40005400
 8003650:	40005800 	.word	0x40005800
 8003654:	40005c00 	.word	0x40005c00
 8003658:	0800a13c 	.word	0x0800a13c
 800365c:	00061a80 	.word	0x00061a80
 8003660:	000186a0 	.word	0x000186a0
 8003664:	001e847f 	.word	0x001e847f
 8003668:	003d08ff 	.word	0x003d08ff
 800366c:	431bde83 	.word	0x431bde83
 8003670:	10624dd3 	.word	0x10624dd3
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	1e58      	subs	r0, r3, #1
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	6859      	ldr	r1, [r3, #4]
 800367c:	460b      	mov	r3, r1
 800367e:	009b      	lsls	r3, r3, #2
 8003680:	440b      	add	r3, r1
 8003682:	0099      	lsls	r1, r3, #2
 8003684:	440b      	add	r3, r1
 8003686:	fbb0 f3f3 	udiv	r3, r0, r3
 800368a:	3301      	adds	r3, #1
 800368c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003690:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003694:	6879      	ldr	r1, [r7, #4]
 8003696:	6809      	ldr	r1, [r1, #0]
 8003698:	4313      	orrs	r3, r2
 800369a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	69da      	ldr	r2, [r3, #28]
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	6a1b      	ldr	r3, [r3, #32]
 80036ae:	431a      	orrs	r2, r3
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	430a      	orrs	r2, r1
 80036b6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	689b      	ldr	r3, [r3, #8]
 80036be:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80036c2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80036c6:	687a      	ldr	r2, [r7, #4]
 80036c8:	6911      	ldr	r1, [r2, #16]
 80036ca:	687a      	ldr	r2, [r7, #4]
 80036cc:	68d2      	ldr	r2, [r2, #12]
 80036ce:	4311      	orrs	r1, r2
 80036d0:	687a      	ldr	r2, [r7, #4]
 80036d2:	6812      	ldr	r2, [r2, #0]
 80036d4:	430b      	orrs	r3, r1
 80036d6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	68db      	ldr	r3, [r3, #12]
 80036de:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	695a      	ldr	r2, [r3, #20]
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	699b      	ldr	r3, [r3, #24]
 80036ea:	431a      	orrs	r2, r3
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	430a      	orrs	r2, r1
 80036f2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	681a      	ldr	r2, [r3, #0]
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f042 0201 	orr.w	r2, r2, #1
 8003702:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	2200      	movs	r2, #0
 8003708:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	2220      	movs	r2, #32
 800370e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	2200      	movs	r2, #0
 8003716:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	2200      	movs	r2, #0
 800371c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003720:	2300      	movs	r3, #0
}
 8003722:	4618      	mov	r0, r3
 8003724:	3710      	adds	r7, #16
 8003726:	46bd      	mov	sp, r7
 8003728:	bd80      	pop	{r7, pc}
 800372a:	bf00      	nop

0800372c <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 800372c:	b580      	push	{r7, lr}
 800372e:	b088      	sub	sp, #32
 8003730:	af00      	add	r7, sp, #0
 8003732:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	2b00      	cmp	r3, #0
 8003738:	d101      	bne.n	800373e <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 800373a:	2301      	movs	r3, #1
 800373c:	e1e7      	b.n	8003b0e <HAL_I2S_Init+0x3e2>
  }

  /* Check the I2S parameters */
  assert_param(IS_I2S_ALL_INSTANCE(hi2s->Instance));
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	4a9b      	ldr	r2, [pc, #620]	; (80039b0 <HAL_I2S_Init+0x284>)
 8003744:	4293      	cmp	r3, r2
 8003746:	d018      	beq.n	800377a <HAL_I2S_Init+0x4e>
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	4a99      	ldr	r2, [pc, #612]	; (80039b4 <HAL_I2S_Init+0x288>)
 800374e:	4293      	cmp	r3, r2
 8003750:	d013      	beq.n	800377a <HAL_I2S_Init+0x4e>
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	4a98      	ldr	r2, [pc, #608]	; (80039b8 <HAL_I2S_Init+0x28c>)
 8003758:	4293      	cmp	r3, r2
 800375a:	d00e      	beq.n	800377a <HAL_I2S_Init+0x4e>
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	4a96      	ldr	r2, [pc, #600]	; (80039bc <HAL_I2S_Init+0x290>)
 8003762:	4293      	cmp	r3, r2
 8003764:	d009      	beq.n	800377a <HAL_I2S_Init+0x4e>
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	4a95      	ldr	r2, [pc, #596]	; (80039c0 <HAL_I2S_Init+0x294>)
 800376c:	4293      	cmp	r3, r2
 800376e:	d004      	beq.n	800377a <HAL_I2S_Init+0x4e>
 8003770:	f240 111b 	movw	r1, #283	; 0x11b
 8003774:	4893      	ldr	r0, [pc, #588]	; (80039c4 <HAL_I2S_Init+0x298>)
 8003776:	f7fd fa10 	bl	8000b9a <assert_failed>
  assert_param(IS_I2S_MODE(hi2s->Init.Mode));
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	685b      	ldr	r3, [r3, #4]
 800377e:	2b00      	cmp	r3, #0
 8003780:	d013      	beq.n	80037aa <HAL_I2S_Init+0x7e>
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	685b      	ldr	r3, [r3, #4]
 8003786:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800378a:	d00e      	beq.n	80037aa <HAL_I2S_Init+0x7e>
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	685b      	ldr	r3, [r3, #4]
 8003790:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003794:	d009      	beq.n	80037aa <HAL_I2S_Init+0x7e>
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	685b      	ldr	r3, [r3, #4]
 800379a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800379e:	d004      	beq.n	80037aa <HAL_I2S_Init+0x7e>
 80037a0:	f44f 718e 	mov.w	r1, #284	; 0x11c
 80037a4:	4887      	ldr	r0, [pc, #540]	; (80039c4 <HAL_I2S_Init+0x298>)
 80037a6:	f7fd f9f8 	bl	8000b9a <assert_failed>
  assert_param(IS_I2S_STANDARD(hi2s->Init.Standard));
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	689b      	ldr	r3, [r3, #8]
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d014      	beq.n	80037dc <HAL_I2S_Init+0xb0>
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	689b      	ldr	r3, [r3, #8]
 80037b6:	2b10      	cmp	r3, #16
 80037b8:	d010      	beq.n	80037dc <HAL_I2S_Init+0xb0>
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	689b      	ldr	r3, [r3, #8]
 80037be:	2b20      	cmp	r3, #32
 80037c0:	d00c      	beq.n	80037dc <HAL_I2S_Init+0xb0>
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	689b      	ldr	r3, [r3, #8]
 80037c6:	2b30      	cmp	r3, #48	; 0x30
 80037c8:	d008      	beq.n	80037dc <HAL_I2S_Init+0xb0>
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	689b      	ldr	r3, [r3, #8]
 80037ce:	2bb0      	cmp	r3, #176	; 0xb0
 80037d0:	d004      	beq.n	80037dc <HAL_I2S_Init+0xb0>
 80037d2:	f240 111d 	movw	r1, #285	; 0x11d
 80037d6:	487b      	ldr	r0, [pc, #492]	; (80039c4 <HAL_I2S_Init+0x298>)
 80037d8:	f7fd f9df 	bl	8000b9a <assert_failed>
  assert_param(IS_I2S_DATA_FORMAT(hi2s->Init.DataFormat));
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	68db      	ldr	r3, [r3, #12]
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d010      	beq.n	8003806 <HAL_I2S_Init+0xda>
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	68db      	ldr	r3, [r3, #12]
 80037e8:	2b01      	cmp	r3, #1
 80037ea:	d00c      	beq.n	8003806 <HAL_I2S_Init+0xda>
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	68db      	ldr	r3, [r3, #12]
 80037f0:	2b03      	cmp	r3, #3
 80037f2:	d008      	beq.n	8003806 <HAL_I2S_Init+0xda>
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	68db      	ldr	r3, [r3, #12]
 80037f8:	2b05      	cmp	r3, #5
 80037fa:	d004      	beq.n	8003806 <HAL_I2S_Init+0xda>
 80037fc:	f44f 718f 	mov.w	r1, #286	; 0x11e
 8003800:	4870      	ldr	r0, [pc, #448]	; (80039c4 <HAL_I2S_Init+0x298>)
 8003802:	f7fd f9ca 	bl	8000b9a <assert_failed>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	691b      	ldr	r3, [r3, #16]
 800380a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800380e:	d008      	beq.n	8003822 <HAL_I2S_Init+0xf6>
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	691b      	ldr	r3, [r3, #16]
 8003814:	2b00      	cmp	r3, #0
 8003816:	d004      	beq.n	8003822 <HAL_I2S_Init+0xf6>
 8003818:	f240 111f 	movw	r1, #287	; 0x11f
 800381c:	4869      	ldr	r0, [pc, #420]	; (80039c4 <HAL_I2S_Init+0x298>)
 800381e:	f7fd f9bc 	bl	8000b9a <assert_failed>
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	695b      	ldr	r3, [r3, #20]
 8003826:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 800382a:	d304      	bcc.n	8003836 <HAL_I2S_Init+0x10a>
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	695b      	ldr	r3, [r3, #20]
 8003830:	4a65      	ldr	r2, [pc, #404]	; (80039c8 <HAL_I2S_Init+0x29c>)
 8003832:	4293      	cmp	r3, r2
 8003834:	d908      	bls.n	8003848 <HAL_I2S_Init+0x11c>
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	695b      	ldr	r3, [r3, #20]
 800383a:	2b02      	cmp	r3, #2
 800383c:	d004      	beq.n	8003848 <HAL_I2S_Init+0x11c>
 800383e:	f44f 7190 	mov.w	r1, #288	; 0x120
 8003842:	4860      	ldr	r0, [pc, #384]	; (80039c4 <HAL_I2S_Init+0x298>)
 8003844:	f7fd f9a9 	bl	8000b9a <assert_failed>
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	699b      	ldr	r3, [r3, #24]
 800384c:	2b00      	cmp	r3, #0
 800384e:	d008      	beq.n	8003862 <HAL_I2S_Init+0x136>
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	699b      	ldr	r3, [r3, #24]
 8003854:	2b08      	cmp	r3, #8
 8003856:	d004      	beq.n	8003862 <HAL_I2S_Init+0x136>
 8003858:	f240 1121 	movw	r1, #289	; 0x121
 800385c:	4859      	ldr	r0, [pc, #356]	; (80039c4 <HAL_I2S_Init+0x298>)
 800385e:	f7fd f99c 	bl	8000b9a <assert_failed>
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	69db      	ldr	r3, [r3, #28]
 8003866:	2b01      	cmp	r3, #1
 8003868:	d008      	beq.n	800387c <HAL_I2S_Init+0x150>
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	69db      	ldr	r3, [r3, #28]
 800386e:	2b00      	cmp	r3, #0
 8003870:	d004      	beq.n	800387c <HAL_I2S_Init+0x150>
 8003872:	f44f 7191 	mov.w	r1, #290	; 0x122
 8003876:	4853      	ldr	r0, [pc, #332]	; (80039c4 <HAL_I2S_Init+0x298>)
 8003878:	f7fd f98f 	bl	8000b9a <assert_failed>

  if (hi2s->State == HAL_I2S_STATE_RESET)
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003882:	b2db      	uxtb	r3, r3
 8003884:	2b00      	cmp	r3, #0
 8003886:	d109      	bne.n	800389c <HAL_I2S_Init+0x170>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	2200      	movs	r2, #0
 800388c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	4a4e      	ldr	r2, [pc, #312]	; (80039cc <HAL_I2S_Init+0x2a0>)
 8003894:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8003896:	6878      	ldr	r0, [r7, #4]
 8003898:	f7fc ffcc 	bl	8000834 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	2202      	movs	r2, #2
 80038a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	69db      	ldr	r3, [r3, #28]
 80038aa:	687a      	ldr	r2, [r7, #4]
 80038ac:	6812      	ldr	r2, [r2, #0]
 80038ae:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80038b2:	f023 030f 	bic.w	r3, r3, #15
 80038b6:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	2202      	movs	r2, #2
 80038be:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	695b      	ldr	r3, [r3, #20]
 80038c4:	2b02      	cmp	r3, #2
 80038c6:	d060      	beq.n	800398a <HAL_I2S_Init+0x25e>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	68db      	ldr	r3, [r3, #12]
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d102      	bne.n	80038d6 <HAL_I2S_Init+0x1aa>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 80038d0:	2310      	movs	r3, #16
 80038d2:	617b      	str	r3, [r7, #20]
 80038d4:	e001      	b.n	80038da <HAL_I2S_Init+0x1ae>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 80038d6:	2320      	movs	r3, #32
 80038d8:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	689b      	ldr	r3, [r3, #8]
 80038de:	2b20      	cmp	r3, #32
 80038e0:	d802      	bhi.n	80038e8 <HAL_I2S_Init+0x1bc>
    {
      /* In I2S standard packet lenght is multiplied by 2 */
      packetlength = packetlength * 2U;
 80038e2:	697b      	ldr	r3, [r7, #20]
 80038e4:	005b      	lsls	r3, r3, #1
 80038e6:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 80038e8:	2001      	movs	r0, #1
 80038ea:	f001 fc37 	bl	800515c <HAL_RCCEx_GetPeriphCLKFreq>
 80038ee:	60f8      	str	r0, [r7, #12]
#endif

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	691b      	ldr	r3, [r3, #16]
 80038f4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80038f8:	d125      	bne.n	8003946 <HAL_I2S_Init+0x21a>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	68db      	ldr	r3, [r3, #12]
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d010      	beq.n	8003924 <HAL_I2S_Init+0x1f8>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003902:	697b      	ldr	r3, [r7, #20]
 8003904:	009b      	lsls	r3, r3, #2
 8003906:	68fa      	ldr	r2, [r7, #12]
 8003908:	fbb2 f2f3 	udiv	r2, r2, r3
 800390c:	4613      	mov	r3, r2
 800390e:	009b      	lsls	r3, r3, #2
 8003910:	4413      	add	r3, r2
 8003912:	005b      	lsls	r3, r3, #1
 8003914:	461a      	mov	r2, r3
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	695b      	ldr	r3, [r3, #20]
 800391a:	fbb2 f3f3 	udiv	r3, r2, r3
 800391e:	3305      	adds	r3, #5
 8003920:	613b      	str	r3, [r7, #16]
 8003922:	e01f      	b.n	8003964 <HAL_I2S_Init+0x238>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003924:	697b      	ldr	r3, [r7, #20]
 8003926:	00db      	lsls	r3, r3, #3
 8003928:	68fa      	ldr	r2, [r7, #12]
 800392a:	fbb2 f2f3 	udiv	r2, r2, r3
 800392e:	4613      	mov	r3, r2
 8003930:	009b      	lsls	r3, r3, #2
 8003932:	4413      	add	r3, r2
 8003934:	005b      	lsls	r3, r3, #1
 8003936:	461a      	mov	r2, r3
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	695b      	ldr	r3, [r3, #20]
 800393c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003940:	3305      	adds	r3, #5
 8003942:	613b      	str	r3, [r7, #16]
 8003944:	e00e      	b.n	8003964 <HAL_I2S_Init+0x238>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003946:	68fa      	ldr	r2, [r7, #12]
 8003948:	697b      	ldr	r3, [r7, #20]
 800394a:	fbb2 f2f3 	udiv	r2, r2, r3
 800394e:	4613      	mov	r3, r2
 8003950:	009b      	lsls	r3, r3, #2
 8003952:	4413      	add	r3, r2
 8003954:	005b      	lsls	r3, r3, #1
 8003956:	461a      	mov	r2, r3
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	695b      	ldr	r3, [r3, #20]
 800395c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003960:	3305      	adds	r3, #5
 8003962:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8003964:	693b      	ldr	r3, [r7, #16]
 8003966:	4a1a      	ldr	r2, [pc, #104]	; (80039d0 <HAL_I2S_Init+0x2a4>)
 8003968:	fba2 2303 	umull	r2, r3, r2, r3
 800396c:	08db      	lsrs	r3, r3, #3
 800396e:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8003970:	693b      	ldr	r3, [r7, #16]
 8003972:	f003 0301 	and.w	r3, r3, #1
 8003976:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8003978:	693a      	ldr	r2, [r7, #16]
 800397a:	69bb      	ldr	r3, [r7, #24]
 800397c:	1ad3      	subs	r3, r2, r3
 800397e:	085b      	lsrs	r3, r3, #1
 8003980:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8003982:	69bb      	ldr	r3, [r7, #24]
 8003984:	021b      	lsls	r3, r3, #8
 8003986:	61bb      	str	r3, [r7, #24]
 8003988:	e003      	b.n	8003992 <HAL_I2S_Init+0x266>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 800398a:	2302      	movs	r3, #2
 800398c:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 800398e:	2300      	movs	r3, #0
 8003990:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8003992:	69fb      	ldr	r3, [r7, #28]
 8003994:	2b01      	cmp	r3, #1
 8003996:	d902      	bls.n	800399e <HAL_I2S_Init+0x272>
 8003998:	69fb      	ldr	r3, [r7, #28]
 800399a:	2bff      	cmp	r3, #255	; 0xff
 800399c:	d91a      	bls.n	80039d4 <HAL_I2S_Init+0x2a8>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039a2:	f043 0210 	orr.w	r2, r3, #16
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 80039aa:	2301      	movs	r3, #1
 80039ac:	e0af      	b.n	8003b0e <HAL_I2S_Init+0x3e2>
 80039ae:	bf00      	nop
 80039b0:	40013000 	.word	0x40013000
 80039b4:	40003800 	.word	0x40003800
 80039b8:	40003c00 	.word	0x40003c00
 80039bc:	40013400 	.word	0x40013400
 80039c0:	40015000 	.word	0x40015000
 80039c4:	0800a174 	.word	0x0800a174
 80039c8:	0002ee00 	.word	0x0002ee00
 80039cc:	08003c1f 	.word	0x08003c1f
 80039d0:	cccccccd 	.word	0xcccccccd
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	691a      	ldr	r2, [r3, #16]
 80039d8:	69bb      	ldr	r3, [r7, #24]
 80039da:	ea42 0103 	orr.w	r1, r2, r3
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	69fa      	ldr	r2, [r7, #28]
 80039e4:	430a      	orrs	r2, r1
 80039e6:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	69db      	ldr	r3, [r3, #28]
 80039ee:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80039f2:	f023 030f 	bic.w	r3, r3, #15
 80039f6:	687a      	ldr	r2, [r7, #4]
 80039f8:	6851      	ldr	r1, [r2, #4]
 80039fa:	687a      	ldr	r2, [r7, #4]
 80039fc:	6892      	ldr	r2, [r2, #8]
 80039fe:	4311      	orrs	r1, r2
 8003a00:	687a      	ldr	r2, [r7, #4]
 8003a02:	68d2      	ldr	r2, [r2, #12]
 8003a04:	4311      	orrs	r1, r2
 8003a06:	687a      	ldr	r2, [r7, #4]
 8003a08:	6992      	ldr	r2, [r2, #24]
 8003a0a:	430a      	orrs	r2, r1
 8003a0c:	431a      	orrs	r2, r3
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003a16:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_ASTRTEN */

#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	6a1b      	ldr	r3, [r3, #32]
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d008      	beq.n	8003a32 <HAL_I2S_Init+0x306>
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	6a1b      	ldr	r3, [r3, #32]
 8003a24:	2b01      	cmp	r3, #1
 8003a26:	d004      	beq.n	8003a32 <HAL_I2S_Init+0x306>
 8003a28:	f240 11bd 	movw	r1, #445	; 0x1bd
 8003a2c:	483a      	ldr	r0, [pc, #232]	; (8003b18 <HAL_I2S_Init+0x3ec>)
 8003a2e:	f7fd f8b4 	bl	8000b9a <assert_failed>

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	6a1b      	ldr	r3, [r3, #32]
 8003a36:	2b01      	cmp	r3, #1
 8003a38:	d161      	bne.n	8003afe <HAL_I2S_Init+0x3d2>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	4a37      	ldr	r2, [pc, #220]	; (8003b1c <HAL_I2S_Init+0x3f0>)
 8003a3e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	4a36      	ldr	r2, [pc, #216]	; (8003b20 <HAL_I2S_Init+0x3f4>)
 8003a46:	4293      	cmp	r3, r2
 8003a48:	d101      	bne.n	8003a4e <HAL_I2S_Init+0x322>
 8003a4a:	4b36      	ldr	r3, [pc, #216]	; (8003b24 <HAL_I2S_Init+0x3f8>)
 8003a4c:	e001      	b.n	8003a52 <HAL_I2S_Init+0x326>
 8003a4e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003a52:	69db      	ldr	r3, [r3, #28]
 8003a54:	687a      	ldr	r2, [r7, #4]
 8003a56:	6812      	ldr	r2, [r2, #0]
 8003a58:	4931      	ldr	r1, [pc, #196]	; (8003b20 <HAL_I2S_Init+0x3f4>)
 8003a5a:	428a      	cmp	r2, r1
 8003a5c:	d101      	bne.n	8003a62 <HAL_I2S_Init+0x336>
 8003a5e:	4a31      	ldr	r2, [pc, #196]	; (8003b24 <HAL_I2S_Init+0x3f8>)
 8003a60:	e001      	b.n	8003a66 <HAL_I2S_Init+0x33a>
 8003a62:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8003a66:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003a6a:	f023 030f 	bic.w	r3, r3, #15
 8003a6e:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	4a2a      	ldr	r2, [pc, #168]	; (8003b20 <HAL_I2S_Init+0x3f4>)
 8003a76:	4293      	cmp	r3, r2
 8003a78:	d101      	bne.n	8003a7e <HAL_I2S_Init+0x352>
 8003a7a:	4b2a      	ldr	r3, [pc, #168]	; (8003b24 <HAL_I2S_Init+0x3f8>)
 8003a7c:	e001      	b.n	8003a82 <HAL_I2S_Init+0x356>
 8003a7e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003a82:	2202      	movs	r2, #2
 8003a84:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	4a25      	ldr	r2, [pc, #148]	; (8003b20 <HAL_I2S_Init+0x3f4>)
 8003a8c:	4293      	cmp	r3, r2
 8003a8e:	d101      	bne.n	8003a94 <HAL_I2S_Init+0x368>
 8003a90:	4b24      	ldr	r3, [pc, #144]	; (8003b24 <HAL_I2S_Init+0x3f8>)
 8003a92:	e001      	b.n	8003a98 <HAL_I2S_Init+0x36c>
 8003a94:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003a98:	69db      	ldr	r3, [r3, #28]
 8003a9a:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	685b      	ldr	r3, [r3, #4]
 8003aa0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003aa4:	d003      	beq.n	8003aae <HAL_I2S_Init+0x382>
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	685b      	ldr	r3, [r3, #4]
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d103      	bne.n	8003ab6 <HAL_I2S_Init+0x38a>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8003aae:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003ab2:	613b      	str	r3, [r7, #16]
 8003ab4:	e001      	b.n	8003aba <HAL_I2S_Init+0x38e>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8003ab6:	2300      	movs	r3, #0
 8003ab8:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 8003aba:	693b      	ldr	r3, [r7, #16]
 8003abc:	b29a      	uxth	r2, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	689b      	ldr	r3, [r3, #8]
 8003ac2:	b299      	uxth	r1, r3
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	68db      	ldr	r3, [r3, #12]
 8003ac8:	b298      	uxth	r0, r3
                                    (uint16_t)hi2s->Init.CPOL))));
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	699b      	ldr	r3, [r3, #24]
 8003ace:	b29b      	uxth	r3, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 8003ad0:	4303      	orrs	r3, r0
 8003ad2:	b29b      	uxth	r3, r3
 8003ad4:	430b      	orrs	r3, r1
 8003ad6:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 8003ad8:	4313      	orrs	r3, r2
 8003ada:	b29a      	uxth	r2, r3
 8003adc:	897b      	ldrh	r3, [r7, #10]
 8003ade:	4313      	orrs	r3, r2
 8003ae0:	b29b      	uxth	r3, r3
 8003ae2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003ae6:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	4a0c      	ldr	r2, [pc, #48]	; (8003b20 <HAL_I2S_Init+0x3f4>)
 8003aee:	4293      	cmp	r3, r2
 8003af0:	d101      	bne.n	8003af6 <HAL_I2S_Init+0x3ca>
 8003af2:	4b0c      	ldr	r3, [pc, #48]	; (8003b24 <HAL_I2S_Init+0x3f8>)
 8003af4:	e001      	b.n	8003afa <HAL_I2S_Init+0x3ce>
 8003af6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003afa:	897a      	ldrh	r2, [r7, #10]
 8003afc:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	2200      	movs	r2, #0
 8003b02:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	2201      	movs	r2, #1
 8003b08:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8003b0c:	2300      	movs	r3, #0
}
 8003b0e:	4618      	mov	r0, r3
 8003b10:	3720      	adds	r7, #32
 8003b12:	46bd      	mov	sp, r7
 8003b14:	bd80      	pop	{r7, pc}
 8003b16:	bf00      	nop
 8003b18:	0800a174 	.word	0x0800a174
 8003b1c:	08003d35 	.word	0x08003d35
 8003b20:	40003800 	.word	0x40003800
 8003b24:	40003400 	.word	0x40003400

08003b28 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003b28:	b480      	push	{r7}
 8003b2a:	b083      	sub	sp, #12
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8003b30:	bf00      	nop
 8003b32:	370c      	adds	r7, #12
 8003b34:	46bd      	mov	sp, r7
 8003b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b3a:	4770      	bx	lr

08003b3c <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003b3c:	b480      	push	{r7}
 8003b3e:	b083      	sub	sp, #12
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8003b44:	bf00      	nop
 8003b46:	370c      	adds	r7, #12
 8003b48:	46bd      	mov	sp, r7
 8003b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b4e:	4770      	bx	lr

08003b50 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8003b50:	b480      	push	{r7}
 8003b52:	b083      	sub	sp, #12
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8003b58:	bf00      	nop
 8003b5a:	370c      	adds	r7, #12
 8003b5c:	46bd      	mov	sp, r7
 8003b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b62:	4770      	bx	lr

08003b64 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8003b64:	b580      	push	{r7, lr}
 8003b66:	b082      	sub	sp, #8
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b70:	881a      	ldrh	r2, [r3, #0]
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b7c:	1c9a      	adds	r2, r3, #2
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b86:	b29b      	uxth	r3, r3
 8003b88:	3b01      	subs	r3, #1
 8003b8a:	b29a      	uxth	r2, r3
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b94:	b29b      	uxth	r3, r3
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d10e      	bne.n	8003bb8 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	685a      	ldr	r2, [r3, #4]
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003ba8:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	2201      	movs	r2, #1
 8003bae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8003bb2:	6878      	ldr	r0, [r7, #4]
 8003bb4:	f7ff ffb8 	bl	8003b28 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003bb8:	bf00      	nop
 8003bba:	3708      	adds	r7, #8
 8003bbc:	46bd      	mov	sp, r7
 8003bbe:	bd80      	pop	{r7, pc}

08003bc0 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8003bc0:	b580      	push	{r7, lr}
 8003bc2:	b082      	sub	sp, #8
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	68da      	ldr	r2, [r3, #12]
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bd2:	b292      	uxth	r2, r2
 8003bd4:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bda:	1c9a      	adds	r2, r3, #2
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003be4:	b29b      	uxth	r3, r3
 8003be6:	3b01      	subs	r3, #1
 8003be8:	b29a      	uxth	r2, r3
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003bf2:	b29b      	uxth	r3, r3
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d10e      	bne.n	8003c16 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	685a      	ldr	r2, [r3, #4]
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003c06:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	2201      	movs	r2, #1
 8003c0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8003c10:	6878      	ldr	r0, [r7, #4]
 8003c12:	f7ff ff93 	bl	8003b3c <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003c16:	bf00      	nop
 8003c18:	3708      	adds	r7, #8
 8003c1a:	46bd      	mov	sp, r7
 8003c1c:	bd80      	pop	{r7, pc}

08003c1e <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003c1e:	b580      	push	{r7, lr}
 8003c20:	b086      	sub	sp, #24
 8003c22:	af00      	add	r7, sp, #0
 8003c24:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	689b      	ldr	r3, [r3, #8]
 8003c2c:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003c34:	b2db      	uxtb	r3, r3
 8003c36:	2b04      	cmp	r3, #4
 8003c38:	d13a      	bne.n	8003cb0 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8003c3a:	697b      	ldr	r3, [r7, #20]
 8003c3c:	f003 0301 	and.w	r3, r3, #1
 8003c40:	2b01      	cmp	r3, #1
 8003c42:	d109      	bne.n	8003c58 <I2S_IRQHandler+0x3a>
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	685b      	ldr	r3, [r3, #4]
 8003c4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c4e:	2b40      	cmp	r3, #64	; 0x40
 8003c50:	d102      	bne.n	8003c58 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8003c52:	6878      	ldr	r0, [r7, #4]
 8003c54:	f7ff ffb4 	bl	8003bc0 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003c58:	697b      	ldr	r3, [r7, #20]
 8003c5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c5e:	2b40      	cmp	r3, #64	; 0x40
 8003c60:	d126      	bne.n	8003cb0 <I2S_IRQHandler+0x92>
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	685b      	ldr	r3, [r3, #4]
 8003c68:	f003 0320 	and.w	r3, r3, #32
 8003c6c:	2b20      	cmp	r3, #32
 8003c6e:	d11f      	bne.n	8003cb0 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	685a      	ldr	r2, [r3, #4]
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003c7e:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003c80:	2300      	movs	r3, #0
 8003c82:	613b      	str	r3, [r7, #16]
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	68db      	ldr	r3, [r3, #12]
 8003c8a:	613b      	str	r3, [r7, #16]
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	689b      	ldr	r3, [r3, #8]
 8003c92:	613b      	str	r3, [r7, #16]
 8003c94:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	2201      	movs	r2, #1
 8003c9a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ca2:	f043 0202 	orr.w	r2, r3, #2
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003caa:	6878      	ldr	r0, [r7, #4]
 8003cac:	f7ff ff50 	bl	8003b50 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003cb6:	b2db      	uxtb	r3, r3
 8003cb8:	2b03      	cmp	r3, #3
 8003cba:	d136      	bne.n	8003d2a <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8003cbc:	697b      	ldr	r3, [r7, #20]
 8003cbe:	f003 0302 	and.w	r3, r3, #2
 8003cc2:	2b02      	cmp	r3, #2
 8003cc4:	d109      	bne.n	8003cda <I2S_IRQHandler+0xbc>
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	685b      	ldr	r3, [r3, #4]
 8003ccc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003cd0:	2b80      	cmp	r3, #128	; 0x80
 8003cd2:	d102      	bne.n	8003cda <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8003cd4:	6878      	ldr	r0, [r7, #4]
 8003cd6:	f7ff ff45 	bl	8003b64 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003cda:	697b      	ldr	r3, [r7, #20]
 8003cdc:	f003 0308 	and.w	r3, r3, #8
 8003ce0:	2b08      	cmp	r3, #8
 8003ce2:	d122      	bne.n	8003d2a <I2S_IRQHandler+0x10c>
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	685b      	ldr	r3, [r3, #4]
 8003cea:	f003 0320 	and.w	r3, r3, #32
 8003cee:	2b20      	cmp	r3, #32
 8003cf0:	d11b      	bne.n	8003d2a <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	685a      	ldr	r2, [r3, #4]
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003d00:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003d02:	2300      	movs	r3, #0
 8003d04:	60fb      	str	r3, [r7, #12]
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	689b      	ldr	r3, [r3, #8]
 8003d0c:	60fb      	str	r3, [r7, #12]
 8003d0e:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	2201      	movs	r2, #1
 8003d14:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d1c:	f043 0204 	orr.w	r2, r3, #4
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003d24:	6878      	ldr	r0, [r7, #4]
 8003d26:	f7ff ff13 	bl	8003b50 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003d2a:	bf00      	nop
 8003d2c:	3718      	adds	r7, #24
 8003d2e:	46bd      	mov	sp, r7
 8003d30:	bd80      	pop	{r7, pc}
	...

08003d34 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003d34:	b580      	push	{r7, lr}
 8003d36:	b088      	sub	sp, #32
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	689b      	ldr	r3, [r3, #8]
 8003d42:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	4aa2      	ldr	r2, [pc, #648]	; (8003fd4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003d4a:	4293      	cmp	r3, r2
 8003d4c:	d101      	bne.n	8003d52 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8003d4e:	4ba2      	ldr	r3, [pc, #648]	; (8003fd8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003d50:	e001      	b.n	8003d56 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8003d52:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003d56:	689b      	ldr	r3, [r3, #8]
 8003d58:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	685b      	ldr	r3, [r3, #4]
 8003d60:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	4a9b      	ldr	r2, [pc, #620]	; (8003fd4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003d68:	4293      	cmp	r3, r2
 8003d6a:	d101      	bne.n	8003d70 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8003d6c:	4b9a      	ldr	r3, [pc, #616]	; (8003fd8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003d6e:	e001      	b.n	8003d74 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8003d70:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003d74:	685b      	ldr	r3, [r3, #4]
 8003d76:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	685b      	ldr	r3, [r3, #4]
 8003d7c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003d80:	d004      	beq.n	8003d8c <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	685b      	ldr	r3, [r3, #4]
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	f040 8099 	bne.w	8003ebe <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8003d8c:	69fb      	ldr	r3, [r7, #28]
 8003d8e:	f003 0302 	and.w	r3, r3, #2
 8003d92:	2b02      	cmp	r3, #2
 8003d94:	d107      	bne.n	8003da6 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8003d96:	697b      	ldr	r3, [r7, #20]
 8003d98:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d002      	beq.n	8003da6 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8003da0:	6878      	ldr	r0, [r7, #4]
 8003da2:	f000 f925 	bl	8003ff0 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8003da6:	69bb      	ldr	r3, [r7, #24]
 8003da8:	f003 0301 	and.w	r3, r3, #1
 8003dac:	2b01      	cmp	r3, #1
 8003dae:	d107      	bne.n	8003dc0 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8003db0:	693b      	ldr	r3, [r7, #16]
 8003db2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d002      	beq.n	8003dc0 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8003dba:	6878      	ldr	r0, [r7, #4]
 8003dbc:	f000 f9c8 	bl	8004150 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003dc0:	69bb      	ldr	r3, [r7, #24]
 8003dc2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003dc6:	2b40      	cmp	r3, #64	; 0x40
 8003dc8:	d13a      	bne.n	8003e40 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8003dca:	693b      	ldr	r3, [r7, #16]
 8003dcc:	f003 0320 	and.w	r3, r3, #32
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d035      	beq.n	8003e40 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	4a7e      	ldr	r2, [pc, #504]	; (8003fd4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003dda:	4293      	cmp	r3, r2
 8003ddc:	d101      	bne.n	8003de2 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8003dde:	4b7e      	ldr	r3, [pc, #504]	; (8003fd8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003de0:	e001      	b.n	8003de6 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8003de2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003de6:	685a      	ldr	r2, [r3, #4]
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	4979      	ldr	r1, [pc, #484]	; (8003fd4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003dee:	428b      	cmp	r3, r1
 8003df0:	d101      	bne.n	8003df6 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8003df2:	4b79      	ldr	r3, [pc, #484]	; (8003fd8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003df4:	e001      	b.n	8003dfa <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8003df6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003dfa:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003dfe:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	685a      	ldr	r2, [r3, #4]
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003e0e:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003e10:	2300      	movs	r3, #0
 8003e12:	60fb      	str	r3, [r7, #12]
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	68db      	ldr	r3, [r3, #12]
 8003e1a:	60fb      	str	r3, [r7, #12]
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	689b      	ldr	r3, [r3, #8]
 8003e22:	60fb      	str	r3, [r7, #12]
 8003e24:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	2201      	movs	r2, #1
 8003e2a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e32:	f043 0202 	orr.w	r2, r3, #2
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003e3a:	6878      	ldr	r0, [r7, #4]
 8003e3c:	f7ff fe88 	bl	8003b50 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003e40:	69fb      	ldr	r3, [r7, #28]
 8003e42:	f003 0308 	and.w	r3, r3, #8
 8003e46:	2b08      	cmp	r3, #8
 8003e48:	f040 80be 	bne.w	8003fc8 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 8003e4c:	697b      	ldr	r3, [r7, #20]
 8003e4e:	f003 0320 	and.w	r3, r3, #32
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	f000 80b8 	beq.w	8003fc8 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	685a      	ldr	r2, [r3, #4]
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003e66:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	4a59      	ldr	r2, [pc, #356]	; (8003fd4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003e6e:	4293      	cmp	r3, r2
 8003e70:	d101      	bne.n	8003e76 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8003e72:	4b59      	ldr	r3, [pc, #356]	; (8003fd8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003e74:	e001      	b.n	8003e7a <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8003e76:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003e7a:	685a      	ldr	r2, [r3, #4]
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	4954      	ldr	r1, [pc, #336]	; (8003fd4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003e82:	428b      	cmp	r3, r1
 8003e84:	d101      	bne.n	8003e8a <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8003e86:	4b54      	ldr	r3, [pc, #336]	; (8003fd8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003e88:	e001      	b.n	8003e8e <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8003e8a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003e8e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003e92:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003e94:	2300      	movs	r3, #0
 8003e96:	60bb      	str	r3, [r7, #8]
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	689b      	ldr	r3, [r3, #8]
 8003e9e:	60bb      	str	r3, [r7, #8]
 8003ea0:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	2201      	movs	r2, #1
 8003ea6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003eae:	f043 0204 	orr.w	r2, r3, #4
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003eb6:	6878      	ldr	r0, [r7, #4]
 8003eb8:	f7ff fe4a 	bl	8003b50 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003ebc:	e084      	b.n	8003fc8 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8003ebe:	69bb      	ldr	r3, [r7, #24]
 8003ec0:	f003 0302 	and.w	r3, r3, #2
 8003ec4:	2b02      	cmp	r3, #2
 8003ec6:	d107      	bne.n	8003ed8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8003ec8:	693b      	ldr	r3, [r7, #16]
 8003eca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d002      	beq.n	8003ed8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8003ed2:	6878      	ldr	r0, [r7, #4]
 8003ed4:	f000 f8be 	bl	8004054 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8003ed8:	69fb      	ldr	r3, [r7, #28]
 8003eda:	f003 0301 	and.w	r3, r3, #1
 8003ede:	2b01      	cmp	r3, #1
 8003ee0:	d107      	bne.n	8003ef2 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8003ee2:	697b      	ldr	r3, [r7, #20]
 8003ee4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d002      	beq.n	8003ef2 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8003eec:	6878      	ldr	r0, [r7, #4]
 8003eee:	f000 f8fd 	bl	80040ec <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003ef2:	69fb      	ldr	r3, [r7, #28]
 8003ef4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ef8:	2b40      	cmp	r3, #64	; 0x40
 8003efa:	d12f      	bne.n	8003f5c <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8003efc:	697b      	ldr	r3, [r7, #20]
 8003efe:	f003 0320 	and.w	r3, r3, #32
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d02a      	beq.n	8003f5c <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	685a      	ldr	r2, [r3, #4]
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003f14:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	4a2e      	ldr	r2, [pc, #184]	; (8003fd4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003f1c:	4293      	cmp	r3, r2
 8003f1e:	d101      	bne.n	8003f24 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8003f20:	4b2d      	ldr	r3, [pc, #180]	; (8003fd8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003f22:	e001      	b.n	8003f28 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8003f24:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003f28:	685a      	ldr	r2, [r3, #4]
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	4929      	ldr	r1, [pc, #164]	; (8003fd4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003f30:	428b      	cmp	r3, r1
 8003f32:	d101      	bne.n	8003f38 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8003f34:	4b28      	ldr	r3, [pc, #160]	; (8003fd8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003f36:	e001      	b.n	8003f3c <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8003f38:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003f3c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003f40:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	2201      	movs	r2, #1
 8003f46:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f4e:	f043 0202 	orr.w	r2, r3, #2
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003f56:	6878      	ldr	r0, [r7, #4]
 8003f58:	f7ff fdfa 	bl	8003b50 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003f5c:	69bb      	ldr	r3, [r7, #24]
 8003f5e:	f003 0308 	and.w	r3, r3, #8
 8003f62:	2b08      	cmp	r3, #8
 8003f64:	d131      	bne.n	8003fca <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 8003f66:	693b      	ldr	r3, [r7, #16]
 8003f68:	f003 0320 	and.w	r3, r3, #32
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d02c      	beq.n	8003fca <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	4a17      	ldr	r2, [pc, #92]	; (8003fd4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003f76:	4293      	cmp	r3, r2
 8003f78:	d101      	bne.n	8003f7e <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8003f7a:	4b17      	ldr	r3, [pc, #92]	; (8003fd8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003f7c:	e001      	b.n	8003f82 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8003f7e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003f82:	685a      	ldr	r2, [r3, #4]
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	4912      	ldr	r1, [pc, #72]	; (8003fd4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003f8a:	428b      	cmp	r3, r1
 8003f8c:	d101      	bne.n	8003f92 <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 8003f8e:	4b12      	ldr	r3, [pc, #72]	; (8003fd8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003f90:	e001      	b.n	8003f96 <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 8003f92:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003f96:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003f9a:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	685a      	ldr	r2, [r3, #4]
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003faa:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	2201      	movs	r2, #1
 8003fb0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fb8:	f043 0204 	orr.w	r2, r3, #4
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003fc0:	6878      	ldr	r0, [r7, #4]
 8003fc2:	f7ff fdc5 	bl	8003b50 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003fc6:	e000      	b.n	8003fca <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003fc8:	bf00      	nop
}
 8003fca:	bf00      	nop
 8003fcc:	3720      	adds	r7, #32
 8003fce:	46bd      	mov	sp, r7
 8003fd0:	bd80      	pop	{r7, pc}
 8003fd2:	bf00      	nop
 8003fd4:	40003800 	.word	0x40003800
 8003fd8:	40003400 	.word	0x40003400

08003fdc <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003fdc:	b480      	push	{r7}
 8003fde:	b083      	sub	sp, #12
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8003fe4:	bf00      	nop
 8003fe6:	370c      	adds	r7, #12
 8003fe8:	46bd      	mov	sp, r7
 8003fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fee:	4770      	bx	lr

08003ff0 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003ff0:	b580      	push	{r7, lr}
 8003ff2:	b082      	sub	sp, #8
 8003ff4:	af00      	add	r7, sp, #0
 8003ff6:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ffc:	1c99      	adds	r1, r3, #2
 8003ffe:	687a      	ldr	r2, [r7, #4]
 8004000:	6251      	str	r1, [r2, #36]	; 0x24
 8004002:	881a      	ldrh	r2, [r3, #0]
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800400e:	b29b      	uxth	r3, r3
 8004010:	3b01      	subs	r3, #1
 8004012:	b29a      	uxth	r2, r3
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800401c:	b29b      	uxth	r3, r3
 800401e:	2b00      	cmp	r3, #0
 8004020:	d113      	bne.n	800404a <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	685a      	ldr	r2, [r3, #4]
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004030:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004036:	b29b      	uxth	r3, r3
 8004038:	2b00      	cmp	r3, #0
 800403a:	d106      	bne.n	800404a <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	2201      	movs	r2, #1
 8004040:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004044:	6878      	ldr	r0, [r7, #4]
 8004046:	f7ff ffc9 	bl	8003fdc <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800404a:	bf00      	nop
 800404c:	3708      	adds	r7, #8
 800404e:	46bd      	mov	sp, r7
 8004050:	bd80      	pop	{r7, pc}
	...

08004054 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8004054:	b580      	push	{r7, lr}
 8004056:	b082      	sub	sp, #8
 8004058:	af00      	add	r7, sp, #0
 800405a:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004060:	1c99      	adds	r1, r3, #2
 8004062:	687a      	ldr	r2, [r7, #4]
 8004064:	6251      	str	r1, [r2, #36]	; 0x24
 8004066:	8819      	ldrh	r1, [r3, #0]
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	4a1d      	ldr	r2, [pc, #116]	; (80040e4 <I2SEx_TxISR_I2SExt+0x90>)
 800406e:	4293      	cmp	r3, r2
 8004070:	d101      	bne.n	8004076 <I2SEx_TxISR_I2SExt+0x22>
 8004072:	4b1d      	ldr	r3, [pc, #116]	; (80040e8 <I2SEx_TxISR_I2SExt+0x94>)
 8004074:	e001      	b.n	800407a <I2SEx_TxISR_I2SExt+0x26>
 8004076:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800407a:	460a      	mov	r2, r1
 800407c:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004082:	b29b      	uxth	r3, r3
 8004084:	3b01      	subs	r3, #1
 8004086:	b29a      	uxth	r2, r3
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004090:	b29b      	uxth	r3, r3
 8004092:	2b00      	cmp	r3, #0
 8004094:	d121      	bne.n	80040da <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	4a12      	ldr	r2, [pc, #72]	; (80040e4 <I2SEx_TxISR_I2SExt+0x90>)
 800409c:	4293      	cmp	r3, r2
 800409e:	d101      	bne.n	80040a4 <I2SEx_TxISR_I2SExt+0x50>
 80040a0:	4b11      	ldr	r3, [pc, #68]	; (80040e8 <I2SEx_TxISR_I2SExt+0x94>)
 80040a2:	e001      	b.n	80040a8 <I2SEx_TxISR_I2SExt+0x54>
 80040a4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80040a8:	685a      	ldr	r2, [r3, #4]
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	490d      	ldr	r1, [pc, #52]	; (80040e4 <I2SEx_TxISR_I2SExt+0x90>)
 80040b0:	428b      	cmp	r3, r1
 80040b2:	d101      	bne.n	80040b8 <I2SEx_TxISR_I2SExt+0x64>
 80040b4:	4b0c      	ldr	r3, [pc, #48]	; (80040e8 <I2SEx_TxISR_I2SExt+0x94>)
 80040b6:	e001      	b.n	80040bc <I2SEx_TxISR_I2SExt+0x68>
 80040b8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80040bc:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80040c0:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80040c6:	b29b      	uxth	r3, r3
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d106      	bne.n	80040da <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	2201      	movs	r2, #1
 80040d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80040d4:	6878      	ldr	r0, [r7, #4]
 80040d6:	f7ff ff81 	bl	8003fdc <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80040da:	bf00      	nop
 80040dc:	3708      	adds	r7, #8
 80040de:	46bd      	mov	sp, r7
 80040e0:	bd80      	pop	{r7, pc}
 80040e2:	bf00      	nop
 80040e4:	40003800 	.word	0x40003800
 80040e8:	40003400 	.word	0x40003400

080040ec <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80040ec:	b580      	push	{r7, lr}
 80040ee:	b082      	sub	sp, #8
 80040f0:	af00      	add	r7, sp, #0
 80040f2:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	68d8      	ldr	r0, [r3, #12]
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040fe:	1c99      	adds	r1, r3, #2
 8004100:	687a      	ldr	r2, [r7, #4]
 8004102:	62d1      	str	r1, [r2, #44]	; 0x2c
 8004104:	b282      	uxth	r2, r0
 8004106:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800410c:	b29b      	uxth	r3, r3
 800410e:	3b01      	subs	r3, #1
 8004110:	b29a      	uxth	r2, r3
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800411a:	b29b      	uxth	r3, r3
 800411c:	2b00      	cmp	r3, #0
 800411e:	d113      	bne.n	8004148 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	685a      	ldr	r2, [r3, #4]
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800412e:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004134:	b29b      	uxth	r3, r3
 8004136:	2b00      	cmp	r3, #0
 8004138:	d106      	bne.n	8004148 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	2201      	movs	r2, #1
 800413e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004142:	6878      	ldr	r0, [r7, #4]
 8004144:	f7ff ff4a 	bl	8003fdc <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004148:	bf00      	nop
 800414a:	3708      	adds	r7, #8
 800414c:	46bd      	mov	sp, r7
 800414e:	bd80      	pop	{r7, pc}

08004150 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8004150:	b580      	push	{r7, lr}
 8004152:	b082      	sub	sp, #8
 8004154:	af00      	add	r7, sp, #0
 8004156:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	4a20      	ldr	r2, [pc, #128]	; (80041e0 <I2SEx_RxISR_I2SExt+0x90>)
 800415e:	4293      	cmp	r3, r2
 8004160:	d101      	bne.n	8004166 <I2SEx_RxISR_I2SExt+0x16>
 8004162:	4b20      	ldr	r3, [pc, #128]	; (80041e4 <I2SEx_RxISR_I2SExt+0x94>)
 8004164:	e001      	b.n	800416a <I2SEx_RxISR_I2SExt+0x1a>
 8004166:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800416a:	68d8      	ldr	r0, [r3, #12]
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004170:	1c99      	adds	r1, r3, #2
 8004172:	687a      	ldr	r2, [r7, #4]
 8004174:	62d1      	str	r1, [r2, #44]	; 0x2c
 8004176:	b282      	uxth	r2, r0
 8004178:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800417e:	b29b      	uxth	r3, r3
 8004180:	3b01      	subs	r3, #1
 8004182:	b29a      	uxth	r2, r3
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800418c:	b29b      	uxth	r3, r3
 800418e:	2b00      	cmp	r3, #0
 8004190:	d121      	bne.n	80041d6 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	4a12      	ldr	r2, [pc, #72]	; (80041e0 <I2SEx_RxISR_I2SExt+0x90>)
 8004198:	4293      	cmp	r3, r2
 800419a:	d101      	bne.n	80041a0 <I2SEx_RxISR_I2SExt+0x50>
 800419c:	4b11      	ldr	r3, [pc, #68]	; (80041e4 <I2SEx_RxISR_I2SExt+0x94>)
 800419e:	e001      	b.n	80041a4 <I2SEx_RxISR_I2SExt+0x54>
 80041a0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80041a4:	685a      	ldr	r2, [r3, #4]
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	490d      	ldr	r1, [pc, #52]	; (80041e0 <I2SEx_RxISR_I2SExt+0x90>)
 80041ac:	428b      	cmp	r3, r1
 80041ae:	d101      	bne.n	80041b4 <I2SEx_RxISR_I2SExt+0x64>
 80041b0:	4b0c      	ldr	r3, [pc, #48]	; (80041e4 <I2SEx_RxISR_I2SExt+0x94>)
 80041b2:	e001      	b.n	80041b8 <I2SEx_RxISR_I2SExt+0x68>
 80041b4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80041b8:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80041bc:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041c2:	b29b      	uxth	r3, r3
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d106      	bne.n	80041d6 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	2201      	movs	r2, #1
 80041cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80041d0:	6878      	ldr	r0, [r7, #4]
 80041d2:	f7ff ff03 	bl	8003fdc <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80041d6:	bf00      	nop
 80041d8:	3708      	adds	r7, #8
 80041da:	46bd      	mov	sp, r7
 80041dc:	bd80      	pop	{r7, pc}
 80041de:	bf00      	nop
 80041e0:	40003800 	.word	0x40003800
 80041e4:	40003400 	.word	0x40003400

080041e8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80041e8:	b580      	push	{r7, lr}
 80041ea:	b086      	sub	sp, #24
 80041ec:	af00      	add	r7, sp, #0
 80041ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d101      	bne.n	80041fa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80041f6:	2301      	movs	r3, #1
 80041f8:	e30d      	b.n	8004816 <HAL_RCC_OscConfig+0x62e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	2b0f      	cmp	r3, #15
 8004200:	d903      	bls.n	800420a <HAL_RCC_OscConfig+0x22>
 8004202:	21e8      	movs	r1, #232	; 0xe8
 8004204:	48a3      	ldr	r0, [pc, #652]	; (8004494 <HAL_RCC_OscConfig+0x2ac>)
 8004206:	f7fc fcc8 	bl	8000b9a <assert_failed>
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	f003 0301 	and.w	r3, r3, #1
 8004212:	2b00      	cmp	r3, #0
 8004214:	f000 8088 	beq.w	8004328 <HAL_RCC_OscConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	685b      	ldr	r3, [r3, #4]
 800421c:	2b00      	cmp	r3, #0
 800421e:	d00d      	beq.n	800423c <HAL_RCC_OscConfig+0x54>
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	685b      	ldr	r3, [r3, #4]
 8004224:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004228:	d008      	beq.n	800423c <HAL_RCC_OscConfig+0x54>
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	685b      	ldr	r3, [r3, #4]
 800422e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004232:	d003      	beq.n	800423c <HAL_RCC_OscConfig+0x54>
 8004234:	21ed      	movs	r1, #237	; 0xed
 8004236:	4897      	ldr	r0, [pc, #604]	; (8004494 <HAL_RCC_OscConfig+0x2ac>)
 8004238:	f7fc fcaf 	bl	8000b9a <assert_failed>
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800423c:	4b96      	ldr	r3, [pc, #600]	; (8004498 <HAL_RCC_OscConfig+0x2b0>)
 800423e:	689b      	ldr	r3, [r3, #8]
 8004240:	f003 030c 	and.w	r3, r3, #12
 8004244:	2b04      	cmp	r3, #4
 8004246:	d00c      	beq.n	8004262 <HAL_RCC_OscConfig+0x7a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004248:	4b93      	ldr	r3, [pc, #588]	; (8004498 <HAL_RCC_OscConfig+0x2b0>)
 800424a:	689b      	ldr	r3, [r3, #8]
 800424c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004250:	2b08      	cmp	r3, #8
 8004252:	d112      	bne.n	800427a <HAL_RCC_OscConfig+0x92>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004254:	4b90      	ldr	r3, [pc, #576]	; (8004498 <HAL_RCC_OscConfig+0x2b0>)
 8004256:	685b      	ldr	r3, [r3, #4]
 8004258:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800425c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004260:	d10b      	bne.n	800427a <HAL_RCC_OscConfig+0x92>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004262:	4b8d      	ldr	r3, [pc, #564]	; (8004498 <HAL_RCC_OscConfig+0x2b0>)
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800426a:	2b00      	cmp	r3, #0
 800426c:	d05b      	beq.n	8004326 <HAL_RCC_OscConfig+0x13e>
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	685b      	ldr	r3, [r3, #4]
 8004272:	2b00      	cmp	r3, #0
 8004274:	d157      	bne.n	8004326 <HAL_RCC_OscConfig+0x13e>
      {
        return HAL_ERROR;
 8004276:	2301      	movs	r3, #1
 8004278:	e2cd      	b.n	8004816 <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	685b      	ldr	r3, [r3, #4]
 800427e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004282:	d106      	bne.n	8004292 <HAL_RCC_OscConfig+0xaa>
 8004284:	4b84      	ldr	r3, [pc, #528]	; (8004498 <HAL_RCC_OscConfig+0x2b0>)
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	4a83      	ldr	r2, [pc, #524]	; (8004498 <HAL_RCC_OscConfig+0x2b0>)
 800428a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800428e:	6013      	str	r3, [r2, #0]
 8004290:	e01d      	b.n	80042ce <HAL_RCC_OscConfig+0xe6>
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	685b      	ldr	r3, [r3, #4]
 8004296:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800429a:	d10c      	bne.n	80042b6 <HAL_RCC_OscConfig+0xce>
 800429c:	4b7e      	ldr	r3, [pc, #504]	; (8004498 <HAL_RCC_OscConfig+0x2b0>)
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	4a7d      	ldr	r2, [pc, #500]	; (8004498 <HAL_RCC_OscConfig+0x2b0>)
 80042a2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80042a6:	6013      	str	r3, [r2, #0]
 80042a8:	4b7b      	ldr	r3, [pc, #492]	; (8004498 <HAL_RCC_OscConfig+0x2b0>)
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	4a7a      	ldr	r2, [pc, #488]	; (8004498 <HAL_RCC_OscConfig+0x2b0>)
 80042ae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80042b2:	6013      	str	r3, [r2, #0]
 80042b4:	e00b      	b.n	80042ce <HAL_RCC_OscConfig+0xe6>
 80042b6:	4b78      	ldr	r3, [pc, #480]	; (8004498 <HAL_RCC_OscConfig+0x2b0>)
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	4a77      	ldr	r2, [pc, #476]	; (8004498 <HAL_RCC_OscConfig+0x2b0>)
 80042bc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80042c0:	6013      	str	r3, [r2, #0]
 80042c2:	4b75      	ldr	r3, [pc, #468]	; (8004498 <HAL_RCC_OscConfig+0x2b0>)
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	4a74      	ldr	r2, [pc, #464]	; (8004498 <HAL_RCC_OscConfig+0x2b0>)
 80042c8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80042cc:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	685b      	ldr	r3, [r3, #4]
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d013      	beq.n	80042fe <HAL_RCC_OscConfig+0x116>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042d6:	f7fc ff23 	bl	8001120 <HAL_GetTick>
 80042da:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80042dc:	e008      	b.n	80042f0 <HAL_RCC_OscConfig+0x108>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80042de:	f7fc ff1f 	bl	8001120 <HAL_GetTick>
 80042e2:	4602      	mov	r2, r0
 80042e4:	693b      	ldr	r3, [r7, #16]
 80042e6:	1ad3      	subs	r3, r2, r3
 80042e8:	2b64      	cmp	r3, #100	; 0x64
 80042ea:	d901      	bls.n	80042f0 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 80042ec:	2303      	movs	r3, #3
 80042ee:	e292      	b.n	8004816 <HAL_RCC_OscConfig+0x62e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80042f0:	4b69      	ldr	r3, [pc, #420]	; (8004498 <HAL_RCC_OscConfig+0x2b0>)
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d0f0      	beq.n	80042de <HAL_RCC_OscConfig+0xf6>
 80042fc:	e014      	b.n	8004328 <HAL_RCC_OscConfig+0x140>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042fe:	f7fc ff0f 	bl	8001120 <HAL_GetTick>
 8004302:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004304:	e008      	b.n	8004318 <HAL_RCC_OscConfig+0x130>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004306:	f7fc ff0b 	bl	8001120 <HAL_GetTick>
 800430a:	4602      	mov	r2, r0
 800430c:	693b      	ldr	r3, [r7, #16]
 800430e:	1ad3      	subs	r3, r2, r3
 8004310:	2b64      	cmp	r3, #100	; 0x64
 8004312:	d901      	bls.n	8004318 <HAL_RCC_OscConfig+0x130>
          {
            return HAL_TIMEOUT;
 8004314:	2303      	movs	r3, #3
 8004316:	e27e      	b.n	8004816 <HAL_RCC_OscConfig+0x62e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004318:	4b5f      	ldr	r3, [pc, #380]	; (8004498 <HAL_RCC_OscConfig+0x2b0>)
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004320:	2b00      	cmp	r3, #0
 8004322:	d1f0      	bne.n	8004306 <HAL_RCC_OscConfig+0x11e>
 8004324:	e000      	b.n	8004328 <HAL_RCC_OscConfig+0x140>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004326:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	f003 0302 	and.w	r3, r3, #2
 8004330:	2b00      	cmp	r3, #0
 8004332:	d079      	beq.n	8004428 <HAL_RCC_OscConfig+0x240>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	68db      	ldr	r3, [r3, #12]
 8004338:	2b00      	cmp	r3, #0
 800433a:	d008      	beq.n	800434e <HAL_RCC_OscConfig+0x166>
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	68db      	ldr	r3, [r3, #12]
 8004340:	2b01      	cmp	r3, #1
 8004342:	d004      	beq.n	800434e <HAL_RCC_OscConfig+0x166>
 8004344:	f240 111f 	movw	r1, #287	; 0x11f
 8004348:	4852      	ldr	r0, [pc, #328]	; (8004494 <HAL_RCC_OscConfig+0x2ac>)
 800434a:	f7fc fc26 	bl	8000b9a <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	691b      	ldr	r3, [r3, #16]
 8004352:	2b1f      	cmp	r3, #31
 8004354:	d904      	bls.n	8004360 <HAL_RCC_OscConfig+0x178>
 8004356:	f44f 7190 	mov.w	r1, #288	; 0x120
 800435a:	484e      	ldr	r0, [pc, #312]	; (8004494 <HAL_RCC_OscConfig+0x2ac>)
 800435c:	f7fc fc1d 	bl	8000b9a <assert_failed>

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004360:	4b4d      	ldr	r3, [pc, #308]	; (8004498 <HAL_RCC_OscConfig+0x2b0>)
 8004362:	689b      	ldr	r3, [r3, #8]
 8004364:	f003 030c 	and.w	r3, r3, #12
 8004368:	2b00      	cmp	r3, #0
 800436a:	d00b      	beq.n	8004384 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800436c:	4b4a      	ldr	r3, [pc, #296]	; (8004498 <HAL_RCC_OscConfig+0x2b0>)
 800436e:	689b      	ldr	r3, [r3, #8]
 8004370:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004374:	2b08      	cmp	r3, #8
 8004376:	d11c      	bne.n	80043b2 <HAL_RCC_OscConfig+0x1ca>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004378:	4b47      	ldr	r3, [pc, #284]	; (8004498 <HAL_RCC_OscConfig+0x2b0>)
 800437a:	685b      	ldr	r3, [r3, #4]
 800437c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004380:	2b00      	cmp	r3, #0
 8004382:	d116      	bne.n	80043b2 <HAL_RCC_OscConfig+0x1ca>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004384:	4b44      	ldr	r3, [pc, #272]	; (8004498 <HAL_RCC_OscConfig+0x2b0>)
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	f003 0302 	and.w	r3, r3, #2
 800438c:	2b00      	cmp	r3, #0
 800438e:	d005      	beq.n	800439c <HAL_RCC_OscConfig+0x1b4>
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	68db      	ldr	r3, [r3, #12]
 8004394:	2b01      	cmp	r3, #1
 8004396:	d001      	beq.n	800439c <HAL_RCC_OscConfig+0x1b4>
      {
        return HAL_ERROR;
 8004398:	2301      	movs	r3, #1
 800439a:	e23c      	b.n	8004816 <HAL_RCC_OscConfig+0x62e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800439c:	4b3e      	ldr	r3, [pc, #248]	; (8004498 <HAL_RCC_OscConfig+0x2b0>)
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	691b      	ldr	r3, [r3, #16]
 80043a8:	00db      	lsls	r3, r3, #3
 80043aa:	493b      	ldr	r1, [pc, #236]	; (8004498 <HAL_RCC_OscConfig+0x2b0>)
 80043ac:	4313      	orrs	r3, r2
 80043ae:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80043b0:	e03a      	b.n	8004428 <HAL_RCC_OscConfig+0x240>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	68db      	ldr	r3, [r3, #12]
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d020      	beq.n	80043fc <HAL_RCC_OscConfig+0x214>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80043ba:	4b38      	ldr	r3, [pc, #224]	; (800449c <HAL_RCC_OscConfig+0x2b4>)
 80043bc:	2201      	movs	r2, #1
 80043be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043c0:	f7fc feae 	bl	8001120 <HAL_GetTick>
 80043c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80043c6:	e008      	b.n	80043da <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80043c8:	f7fc feaa 	bl	8001120 <HAL_GetTick>
 80043cc:	4602      	mov	r2, r0
 80043ce:	693b      	ldr	r3, [r7, #16]
 80043d0:	1ad3      	subs	r3, r2, r3
 80043d2:	2b02      	cmp	r3, #2
 80043d4:	d901      	bls.n	80043da <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80043d6:	2303      	movs	r3, #3
 80043d8:	e21d      	b.n	8004816 <HAL_RCC_OscConfig+0x62e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80043da:	4b2f      	ldr	r3, [pc, #188]	; (8004498 <HAL_RCC_OscConfig+0x2b0>)
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	f003 0302 	and.w	r3, r3, #2
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d0f0      	beq.n	80043c8 <HAL_RCC_OscConfig+0x1e0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80043e6:	4b2c      	ldr	r3, [pc, #176]	; (8004498 <HAL_RCC_OscConfig+0x2b0>)
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	691b      	ldr	r3, [r3, #16]
 80043f2:	00db      	lsls	r3, r3, #3
 80043f4:	4928      	ldr	r1, [pc, #160]	; (8004498 <HAL_RCC_OscConfig+0x2b0>)
 80043f6:	4313      	orrs	r3, r2
 80043f8:	600b      	str	r3, [r1, #0]
 80043fa:	e015      	b.n	8004428 <HAL_RCC_OscConfig+0x240>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80043fc:	4b27      	ldr	r3, [pc, #156]	; (800449c <HAL_RCC_OscConfig+0x2b4>)
 80043fe:	2200      	movs	r2, #0
 8004400:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004402:	f7fc fe8d 	bl	8001120 <HAL_GetTick>
 8004406:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004408:	e008      	b.n	800441c <HAL_RCC_OscConfig+0x234>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800440a:	f7fc fe89 	bl	8001120 <HAL_GetTick>
 800440e:	4602      	mov	r2, r0
 8004410:	693b      	ldr	r3, [r7, #16]
 8004412:	1ad3      	subs	r3, r2, r3
 8004414:	2b02      	cmp	r3, #2
 8004416:	d901      	bls.n	800441c <HAL_RCC_OscConfig+0x234>
          {
            return HAL_TIMEOUT;
 8004418:	2303      	movs	r3, #3
 800441a:	e1fc      	b.n	8004816 <HAL_RCC_OscConfig+0x62e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800441c:	4b1e      	ldr	r3, [pc, #120]	; (8004498 <HAL_RCC_OscConfig+0x2b0>)
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	f003 0302 	and.w	r3, r3, #2
 8004424:	2b00      	cmp	r3, #0
 8004426:	d1f0      	bne.n	800440a <HAL_RCC_OscConfig+0x222>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	f003 0308 	and.w	r3, r3, #8
 8004430:	2b00      	cmp	r3, #0
 8004432:	d046      	beq.n	80044c2 <HAL_RCC_OscConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	695b      	ldr	r3, [r3, #20]
 8004438:	2b00      	cmp	r3, #0
 800443a:	d008      	beq.n	800444e <HAL_RCC_OscConfig+0x266>
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	695b      	ldr	r3, [r3, #20]
 8004440:	2b01      	cmp	r3, #1
 8004442:	d004      	beq.n	800444e <HAL_RCC_OscConfig+0x266>
 8004444:	f44f 71b0 	mov.w	r1, #352	; 0x160
 8004448:	4812      	ldr	r0, [pc, #72]	; (8004494 <HAL_RCC_OscConfig+0x2ac>)
 800444a:	f7fc fba6 	bl	8000b9a <assert_failed>

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	695b      	ldr	r3, [r3, #20]
 8004452:	2b00      	cmp	r3, #0
 8004454:	d016      	beq.n	8004484 <HAL_RCC_OscConfig+0x29c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004456:	4b12      	ldr	r3, [pc, #72]	; (80044a0 <HAL_RCC_OscConfig+0x2b8>)
 8004458:	2201      	movs	r2, #1
 800445a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800445c:	f7fc fe60 	bl	8001120 <HAL_GetTick>
 8004460:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004462:	e008      	b.n	8004476 <HAL_RCC_OscConfig+0x28e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004464:	f7fc fe5c 	bl	8001120 <HAL_GetTick>
 8004468:	4602      	mov	r2, r0
 800446a:	693b      	ldr	r3, [r7, #16]
 800446c:	1ad3      	subs	r3, r2, r3
 800446e:	2b02      	cmp	r3, #2
 8004470:	d901      	bls.n	8004476 <HAL_RCC_OscConfig+0x28e>
        {
          return HAL_TIMEOUT;
 8004472:	2303      	movs	r3, #3
 8004474:	e1cf      	b.n	8004816 <HAL_RCC_OscConfig+0x62e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004476:	4b08      	ldr	r3, [pc, #32]	; (8004498 <HAL_RCC_OscConfig+0x2b0>)
 8004478:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800447a:	f003 0302 	and.w	r3, r3, #2
 800447e:	2b00      	cmp	r3, #0
 8004480:	d0f0      	beq.n	8004464 <HAL_RCC_OscConfig+0x27c>
 8004482:	e01e      	b.n	80044c2 <HAL_RCC_OscConfig+0x2da>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004484:	4b06      	ldr	r3, [pc, #24]	; (80044a0 <HAL_RCC_OscConfig+0x2b8>)
 8004486:	2200      	movs	r2, #0
 8004488:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800448a:	f7fc fe49 	bl	8001120 <HAL_GetTick>
 800448e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004490:	e011      	b.n	80044b6 <HAL_RCC_OscConfig+0x2ce>
 8004492:	bf00      	nop
 8004494:	0800a1ac 	.word	0x0800a1ac
 8004498:	40023800 	.word	0x40023800
 800449c:	42470000 	.word	0x42470000
 80044a0:	42470e80 	.word	0x42470e80
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80044a4:	f7fc fe3c 	bl	8001120 <HAL_GetTick>
 80044a8:	4602      	mov	r2, r0
 80044aa:	693b      	ldr	r3, [r7, #16]
 80044ac:	1ad3      	subs	r3, r2, r3
 80044ae:	2b02      	cmp	r3, #2
 80044b0:	d901      	bls.n	80044b6 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80044b2:	2303      	movs	r3, #3
 80044b4:	e1af      	b.n	8004816 <HAL_RCC_OscConfig+0x62e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80044b6:	4b97      	ldr	r3, [pc, #604]	; (8004714 <HAL_RCC_OscConfig+0x52c>)
 80044b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80044ba:	f003 0302 	and.w	r3, r3, #2
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d1f0      	bne.n	80044a4 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	f003 0304 	and.w	r3, r3, #4
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	f000 80a8 	beq.w	8004620 <HAL_RCC_OscConfig+0x438>
  {
    FlagStatus       pwrclkchanged = RESET;
 80044d0:	2300      	movs	r3, #0
 80044d2:	75fb      	strb	r3, [r7, #23]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	689b      	ldr	r3, [r3, #8]
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d00c      	beq.n	80044f6 <HAL_RCC_OscConfig+0x30e>
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	689b      	ldr	r3, [r3, #8]
 80044e0:	2b01      	cmp	r3, #1
 80044e2:	d008      	beq.n	80044f6 <HAL_RCC_OscConfig+0x30e>
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	689b      	ldr	r3, [r3, #8]
 80044e8:	2b05      	cmp	r3, #5
 80044ea:	d004      	beq.n	80044f6 <HAL_RCC_OscConfig+0x30e>
 80044ec:	f44f 71c6 	mov.w	r1, #396	; 0x18c
 80044f0:	4889      	ldr	r0, [pc, #548]	; (8004718 <HAL_RCC_OscConfig+0x530>)
 80044f2:	f7fc fb52 	bl	8000b9a <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80044f6:	4b87      	ldr	r3, [pc, #540]	; (8004714 <HAL_RCC_OscConfig+0x52c>)
 80044f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d10f      	bne.n	8004522 <HAL_RCC_OscConfig+0x33a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004502:	2300      	movs	r3, #0
 8004504:	60bb      	str	r3, [r7, #8]
 8004506:	4b83      	ldr	r3, [pc, #524]	; (8004714 <HAL_RCC_OscConfig+0x52c>)
 8004508:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800450a:	4a82      	ldr	r2, [pc, #520]	; (8004714 <HAL_RCC_OscConfig+0x52c>)
 800450c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004510:	6413      	str	r3, [r2, #64]	; 0x40
 8004512:	4b80      	ldr	r3, [pc, #512]	; (8004714 <HAL_RCC_OscConfig+0x52c>)
 8004514:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004516:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800451a:	60bb      	str	r3, [r7, #8]
 800451c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800451e:	2301      	movs	r3, #1
 8004520:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004522:	4b7e      	ldr	r3, [pc, #504]	; (800471c <HAL_RCC_OscConfig+0x534>)
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800452a:	2b00      	cmp	r3, #0
 800452c:	d118      	bne.n	8004560 <HAL_RCC_OscConfig+0x378>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800452e:	4b7b      	ldr	r3, [pc, #492]	; (800471c <HAL_RCC_OscConfig+0x534>)
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	4a7a      	ldr	r2, [pc, #488]	; (800471c <HAL_RCC_OscConfig+0x534>)
 8004534:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004538:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800453a:	f7fc fdf1 	bl	8001120 <HAL_GetTick>
 800453e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004540:	e008      	b.n	8004554 <HAL_RCC_OscConfig+0x36c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004542:	f7fc fded 	bl	8001120 <HAL_GetTick>
 8004546:	4602      	mov	r2, r0
 8004548:	693b      	ldr	r3, [r7, #16]
 800454a:	1ad3      	subs	r3, r2, r3
 800454c:	2b02      	cmp	r3, #2
 800454e:	d901      	bls.n	8004554 <HAL_RCC_OscConfig+0x36c>
        {
          return HAL_TIMEOUT;
 8004550:	2303      	movs	r3, #3
 8004552:	e160      	b.n	8004816 <HAL_RCC_OscConfig+0x62e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004554:	4b71      	ldr	r3, [pc, #452]	; (800471c <HAL_RCC_OscConfig+0x534>)
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800455c:	2b00      	cmp	r3, #0
 800455e:	d0f0      	beq.n	8004542 <HAL_RCC_OscConfig+0x35a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	689b      	ldr	r3, [r3, #8]
 8004564:	2b01      	cmp	r3, #1
 8004566:	d106      	bne.n	8004576 <HAL_RCC_OscConfig+0x38e>
 8004568:	4b6a      	ldr	r3, [pc, #424]	; (8004714 <HAL_RCC_OscConfig+0x52c>)
 800456a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800456c:	4a69      	ldr	r2, [pc, #420]	; (8004714 <HAL_RCC_OscConfig+0x52c>)
 800456e:	f043 0301 	orr.w	r3, r3, #1
 8004572:	6713      	str	r3, [r2, #112]	; 0x70
 8004574:	e01c      	b.n	80045b0 <HAL_RCC_OscConfig+0x3c8>
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	689b      	ldr	r3, [r3, #8]
 800457a:	2b05      	cmp	r3, #5
 800457c:	d10c      	bne.n	8004598 <HAL_RCC_OscConfig+0x3b0>
 800457e:	4b65      	ldr	r3, [pc, #404]	; (8004714 <HAL_RCC_OscConfig+0x52c>)
 8004580:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004582:	4a64      	ldr	r2, [pc, #400]	; (8004714 <HAL_RCC_OscConfig+0x52c>)
 8004584:	f043 0304 	orr.w	r3, r3, #4
 8004588:	6713      	str	r3, [r2, #112]	; 0x70
 800458a:	4b62      	ldr	r3, [pc, #392]	; (8004714 <HAL_RCC_OscConfig+0x52c>)
 800458c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800458e:	4a61      	ldr	r2, [pc, #388]	; (8004714 <HAL_RCC_OscConfig+0x52c>)
 8004590:	f043 0301 	orr.w	r3, r3, #1
 8004594:	6713      	str	r3, [r2, #112]	; 0x70
 8004596:	e00b      	b.n	80045b0 <HAL_RCC_OscConfig+0x3c8>
 8004598:	4b5e      	ldr	r3, [pc, #376]	; (8004714 <HAL_RCC_OscConfig+0x52c>)
 800459a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800459c:	4a5d      	ldr	r2, [pc, #372]	; (8004714 <HAL_RCC_OscConfig+0x52c>)
 800459e:	f023 0301 	bic.w	r3, r3, #1
 80045a2:	6713      	str	r3, [r2, #112]	; 0x70
 80045a4:	4b5b      	ldr	r3, [pc, #364]	; (8004714 <HAL_RCC_OscConfig+0x52c>)
 80045a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045a8:	4a5a      	ldr	r2, [pc, #360]	; (8004714 <HAL_RCC_OscConfig+0x52c>)
 80045aa:	f023 0304 	bic.w	r3, r3, #4
 80045ae:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	689b      	ldr	r3, [r3, #8]
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d015      	beq.n	80045e4 <HAL_RCC_OscConfig+0x3fc>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045b8:	f7fc fdb2 	bl	8001120 <HAL_GetTick>
 80045bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80045be:	e00a      	b.n	80045d6 <HAL_RCC_OscConfig+0x3ee>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80045c0:	f7fc fdae 	bl	8001120 <HAL_GetTick>
 80045c4:	4602      	mov	r2, r0
 80045c6:	693b      	ldr	r3, [r7, #16]
 80045c8:	1ad3      	subs	r3, r2, r3
 80045ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80045ce:	4293      	cmp	r3, r2
 80045d0:	d901      	bls.n	80045d6 <HAL_RCC_OscConfig+0x3ee>
        {
          return HAL_TIMEOUT;
 80045d2:	2303      	movs	r3, #3
 80045d4:	e11f      	b.n	8004816 <HAL_RCC_OscConfig+0x62e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80045d6:	4b4f      	ldr	r3, [pc, #316]	; (8004714 <HAL_RCC_OscConfig+0x52c>)
 80045d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045da:	f003 0302 	and.w	r3, r3, #2
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d0ee      	beq.n	80045c0 <HAL_RCC_OscConfig+0x3d8>
 80045e2:	e014      	b.n	800460e <HAL_RCC_OscConfig+0x426>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80045e4:	f7fc fd9c 	bl	8001120 <HAL_GetTick>
 80045e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80045ea:	e00a      	b.n	8004602 <HAL_RCC_OscConfig+0x41a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80045ec:	f7fc fd98 	bl	8001120 <HAL_GetTick>
 80045f0:	4602      	mov	r2, r0
 80045f2:	693b      	ldr	r3, [r7, #16]
 80045f4:	1ad3      	subs	r3, r2, r3
 80045f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80045fa:	4293      	cmp	r3, r2
 80045fc:	d901      	bls.n	8004602 <HAL_RCC_OscConfig+0x41a>
        {
          return HAL_TIMEOUT;
 80045fe:	2303      	movs	r3, #3
 8004600:	e109      	b.n	8004816 <HAL_RCC_OscConfig+0x62e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004602:	4b44      	ldr	r3, [pc, #272]	; (8004714 <HAL_RCC_OscConfig+0x52c>)
 8004604:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004606:	f003 0302 	and.w	r3, r3, #2
 800460a:	2b00      	cmp	r3, #0
 800460c:	d1ee      	bne.n	80045ec <HAL_RCC_OscConfig+0x404>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800460e:	7dfb      	ldrb	r3, [r7, #23]
 8004610:	2b01      	cmp	r3, #1
 8004612:	d105      	bne.n	8004620 <HAL_RCC_OscConfig+0x438>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004614:	4b3f      	ldr	r3, [pc, #252]	; (8004714 <HAL_RCC_OscConfig+0x52c>)
 8004616:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004618:	4a3e      	ldr	r2, [pc, #248]	; (8004714 <HAL_RCC_OscConfig+0x52c>)
 800461a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800461e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	699b      	ldr	r3, [r3, #24]
 8004624:	2b00      	cmp	r3, #0
 8004626:	d00c      	beq.n	8004642 <HAL_RCC_OscConfig+0x45a>
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	699b      	ldr	r3, [r3, #24]
 800462c:	2b01      	cmp	r3, #1
 800462e:	d008      	beq.n	8004642 <HAL_RCC_OscConfig+0x45a>
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	699b      	ldr	r3, [r3, #24]
 8004634:	2b02      	cmp	r3, #2
 8004636:	d004      	beq.n	8004642 <HAL_RCC_OscConfig+0x45a>
 8004638:	f240 11cf 	movw	r1, #463	; 0x1cf
 800463c:	4836      	ldr	r0, [pc, #216]	; (8004718 <HAL_RCC_OscConfig+0x530>)
 800463e:	f7fc faac 	bl	8000b9a <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	699b      	ldr	r3, [r3, #24]
 8004646:	2b00      	cmp	r3, #0
 8004648:	f000 80e4 	beq.w	8004814 <HAL_RCC_OscConfig+0x62c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800464c:	4b31      	ldr	r3, [pc, #196]	; (8004714 <HAL_RCC_OscConfig+0x52c>)
 800464e:	689b      	ldr	r3, [r3, #8]
 8004650:	f003 030c 	and.w	r3, r3, #12
 8004654:	2b08      	cmp	r3, #8
 8004656:	f000 80ae 	beq.w	80047b6 <HAL_RCC_OscConfig+0x5ce>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	699b      	ldr	r3, [r3, #24]
 800465e:	2b02      	cmp	r3, #2
 8004660:	f040 8092 	bne.w	8004788 <HAL_RCC_OscConfig+0x5a0>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	69db      	ldr	r3, [r3, #28]
 8004668:	2b00      	cmp	r3, #0
 800466a:	d009      	beq.n	8004680 <HAL_RCC_OscConfig+0x498>
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	69db      	ldr	r3, [r3, #28]
 8004670:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004674:	d004      	beq.n	8004680 <HAL_RCC_OscConfig+0x498>
 8004676:	f44f 71ec 	mov.w	r1, #472	; 0x1d8
 800467a:	4827      	ldr	r0, [pc, #156]	; (8004718 <HAL_RCC_OscConfig+0x530>)
 800467c:	f7fc fa8d 	bl	8000b9a <assert_failed>
        assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	6a1b      	ldr	r3, [r3, #32]
 8004684:	2b3f      	cmp	r3, #63	; 0x3f
 8004686:	d904      	bls.n	8004692 <HAL_RCC_OscConfig+0x4aa>
 8004688:	f240 11d9 	movw	r1, #473	; 0x1d9
 800468c:	4822      	ldr	r0, [pc, #136]	; (8004718 <HAL_RCC_OscConfig+0x530>)
 800468e:	f7fc fa84 	bl	8000b9a <assert_failed>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004696:	2bbf      	cmp	r3, #191	; 0xbf
 8004698:	d904      	bls.n	80046a4 <HAL_RCC_OscConfig+0x4bc>
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800469e:	f5b3 7fd8 	cmp.w	r3, #432	; 0x1b0
 80046a2:	d904      	bls.n	80046ae <HAL_RCC_OscConfig+0x4c6>
 80046a4:	f44f 71ed 	mov.w	r1, #474	; 0x1da
 80046a8:	481b      	ldr	r0, [pc, #108]	; (8004718 <HAL_RCC_OscConfig+0x530>)
 80046aa:	f7fc fa76 	bl	8000b9a <assert_failed>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046b2:	2b02      	cmp	r3, #2
 80046b4:	d010      	beq.n	80046d8 <HAL_RCC_OscConfig+0x4f0>
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046ba:	2b04      	cmp	r3, #4
 80046bc:	d00c      	beq.n	80046d8 <HAL_RCC_OscConfig+0x4f0>
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046c2:	2b06      	cmp	r3, #6
 80046c4:	d008      	beq.n	80046d8 <HAL_RCC_OscConfig+0x4f0>
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046ca:	2b08      	cmp	r3, #8
 80046cc:	d004      	beq.n	80046d8 <HAL_RCC_OscConfig+0x4f0>
 80046ce:	f240 11db 	movw	r1, #475	; 0x1db
 80046d2:	4811      	ldr	r0, [pc, #68]	; (8004718 <HAL_RCC_OscConfig+0x530>)
 80046d4:	f7fc fa61 	bl	8000b9a <assert_failed>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046dc:	2b01      	cmp	r3, #1
 80046de:	d903      	bls.n	80046e8 <HAL_RCC_OscConfig+0x500>
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046e4:	2b0f      	cmp	r3, #15
 80046e6:	d904      	bls.n	80046f2 <HAL_RCC_OscConfig+0x50a>
 80046e8:	f44f 71ee 	mov.w	r1, #476	; 0x1dc
 80046ec:	480a      	ldr	r0, [pc, #40]	; (8004718 <HAL_RCC_OscConfig+0x530>)
 80046ee:	f7fc fa54 	bl	8000b9a <assert_failed>

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80046f2:	4b0b      	ldr	r3, [pc, #44]	; (8004720 <HAL_RCC_OscConfig+0x538>)
 80046f4:	2200      	movs	r2, #0
 80046f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046f8:	f7fc fd12 	bl	8001120 <HAL_GetTick>
 80046fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80046fe:	e011      	b.n	8004724 <HAL_RCC_OscConfig+0x53c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004700:	f7fc fd0e 	bl	8001120 <HAL_GetTick>
 8004704:	4602      	mov	r2, r0
 8004706:	693b      	ldr	r3, [r7, #16]
 8004708:	1ad3      	subs	r3, r2, r3
 800470a:	2b02      	cmp	r3, #2
 800470c:	d90a      	bls.n	8004724 <HAL_RCC_OscConfig+0x53c>
          {
            return HAL_TIMEOUT;
 800470e:	2303      	movs	r3, #3
 8004710:	e081      	b.n	8004816 <HAL_RCC_OscConfig+0x62e>
 8004712:	bf00      	nop
 8004714:	40023800 	.word	0x40023800
 8004718:	0800a1ac 	.word	0x0800a1ac
 800471c:	40007000 	.word	0x40007000
 8004720:	42470060 	.word	0x42470060
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004724:	4b3e      	ldr	r3, [pc, #248]	; (8004820 <HAL_RCC_OscConfig+0x638>)
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800472c:	2b00      	cmp	r3, #0
 800472e:	d1e7      	bne.n	8004700 <HAL_RCC_OscConfig+0x518>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	69da      	ldr	r2, [r3, #28]
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	6a1b      	ldr	r3, [r3, #32]
 8004738:	431a      	orrs	r2, r3
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800473e:	019b      	lsls	r3, r3, #6
 8004740:	431a      	orrs	r2, r3
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004746:	085b      	lsrs	r3, r3, #1
 8004748:	3b01      	subs	r3, #1
 800474a:	041b      	lsls	r3, r3, #16
 800474c:	431a      	orrs	r2, r3
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004752:	061b      	lsls	r3, r3, #24
 8004754:	4932      	ldr	r1, [pc, #200]	; (8004820 <HAL_RCC_OscConfig+0x638>)
 8004756:	4313      	orrs	r3, r2
 8004758:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800475a:	4b32      	ldr	r3, [pc, #200]	; (8004824 <HAL_RCC_OscConfig+0x63c>)
 800475c:	2201      	movs	r2, #1
 800475e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004760:	f7fc fcde 	bl	8001120 <HAL_GetTick>
 8004764:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004766:	e008      	b.n	800477a <HAL_RCC_OscConfig+0x592>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004768:	f7fc fcda 	bl	8001120 <HAL_GetTick>
 800476c:	4602      	mov	r2, r0
 800476e:	693b      	ldr	r3, [r7, #16]
 8004770:	1ad3      	subs	r3, r2, r3
 8004772:	2b02      	cmp	r3, #2
 8004774:	d901      	bls.n	800477a <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 8004776:	2303      	movs	r3, #3
 8004778:	e04d      	b.n	8004816 <HAL_RCC_OscConfig+0x62e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800477a:	4b29      	ldr	r3, [pc, #164]	; (8004820 <HAL_RCC_OscConfig+0x638>)
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004782:	2b00      	cmp	r3, #0
 8004784:	d0f0      	beq.n	8004768 <HAL_RCC_OscConfig+0x580>
 8004786:	e045      	b.n	8004814 <HAL_RCC_OscConfig+0x62c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004788:	4b26      	ldr	r3, [pc, #152]	; (8004824 <HAL_RCC_OscConfig+0x63c>)
 800478a:	2200      	movs	r2, #0
 800478c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800478e:	f7fc fcc7 	bl	8001120 <HAL_GetTick>
 8004792:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004794:	e008      	b.n	80047a8 <HAL_RCC_OscConfig+0x5c0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004796:	f7fc fcc3 	bl	8001120 <HAL_GetTick>
 800479a:	4602      	mov	r2, r0
 800479c:	693b      	ldr	r3, [r7, #16]
 800479e:	1ad3      	subs	r3, r2, r3
 80047a0:	2b02      	cmp	r3, #2
 80047a2:	d901      	bls.n	80047a8 <HAL_RCC_OscConfig+0x5c0>
          {
            return HAL_TIMEOUT;
 80047a4:	2303      	movs	r3, #3
 80047a6:	e036      	b.n	8004816 <HAL_RCC_OscConfig+0x62e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80047a8:	4b1d      	ldr	r3, [pc, #116]	; (8004820 <HAL_RCC_OscConfig+0x638>)
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d1f0      	bne.n	8004796 <HAL_RCC_OscConfig+0x5ae>
 80047b4:	e02e      	b.n	8004814 <HAL_RCC_OscConfig+0x62c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	699b      	ldr	r3, [r3, #24]
 80047ba:	2b01      	cmp	r3, #1
 80047bc:	d101      	bne.n	80047c2 <HAL_RCC_OscConfig+0x5da>
      {
        return HAL_ERROR;
 80047be:	2301      	movs	r3, #1
 80047c0:	e029      	b.n	8004816 <HAL_RCC_OscConfig+0x62e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80047c2:	4b17      	ldr	r3, [pc, #92]	; (8004820 <HAL_RCC_OscConfig+0x638>)
 80047c4:	685b      	ldr	r3, [r3, #4]
 80047c6:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	69db      	ldr	r3, [r3, #28]
 80047d2:	429a      	cmp	r2, r3
 80047d4:	d11c      	bne.n	8004810 <HAL_RCC_OscConfig+0x628>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80047e0:	429a      	cmp	r2, r3
 80047e2:	d115      	bne.n	8004810 <HAL_RCC_OscConfig+0x628>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80047e4:	68fa      	ldr	r2, [r7, #12]
 80047e6:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80047ea:	4013      	ands	r3, r2
 80047ec:	687a      	ldr	r2, [r7, #4]
 80047ee:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80047f0:	4293      	cmp	r3, r2
 80047f2:	d10d      	bne.n	8004810 <HAL_RCC_OscConfig+0x628>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80047fe:	429a      	cmp	r2, r3
 8004800:	d106      	bne.n	8004810 <HAL_RCC_OscConfig+0x628>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800480c:	429a      	cmp	r2, r3
 800480e:	d001      	beq.n	8004814 <HAL_RCC_OscConfig+0x62c>
        {
          return HAL_ERROR;
 8004810:	2301      	movs	r3, #1
 8004812:	e000      	b.n	8004816 <HAL_RCC_OscConfig+0x62e>
        }
      }
    }
  }
  return HAL_OK;
 8004814:	2300      	movs	r3, #0
}
 8004816:	4618      	mov	r0, r3
 8004818:	3718      	adds	r7, #24
 800481a:	46bd      	mov	sp, r7
 800481c:	bd80      	pop	{r7, pc}
 800481e:	bf00      	nop
 8004820:	40023800 	.word	0x40023800
 8004824:	42470060 	.word	0x42470060

08004828 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004828:	b580      	push	{r7, lr}
 800482a:	b084      	sub	sp, #16
 800482c:	af00      	add	r7, sp, #0
 800482e:	6078      	str	r0, [r7, #4]
 8004830:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	2b00      	cmp	r3, #0
 8004836:	d101      	bne.n	800483c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004838:	2301      	movs	r3, #1
 800483a:	e174      	b.n	8004b26 <HAL_RCC_ClockConfig+0x2fe>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	2b00      	cmp	r3, #0
 8004842:	d003      	beq.n	800484c <HAL_RCC_ClockConfig+0x24>
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	2b0f      	cmp	r3, #15
 800484a:	d904      	bls.n	8004856 <HAL_RCC_ClockConfig+0x2e>
 800484c:	f240 2151 	movw	r1, #593	; 0x251
 8004850:	487b      	ldr	r0, [pc, #492]	; (8004a40 <HAL_RCC_ClockConfig+0x218>)
 8004852:	f7fc f9a2 	bl	8000b9a <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 8004856:	683b      	ldr	r3, [r7, #0]
 8004858:	2b00      	cmp	r3, #0
 800485a:	d019      	beq.n	8004890 <HAL_RCC_ClockConfig+0x68>
 800485c:	683b      	ldr	r3, [r7, #0]
 800485e:	2b01      	cmp	r3, #1
 8004860:	d016      	beq.n	8004890 <HAL_RCC_ClockConfig+0x68>
 8004862:	683b      	ldr	r3, [r7, #0]
 8004864:	2b02      	cmp	r3, #2
 8004866:	d013      	beq.n	8004890 <HAL_RCC_ClockConfig+0x68>
 8004868:	683b      	ldr	r3, [r7, #0]
 800486a:	2b03      	cmp	r3, #3
 800486c:	d010      	beq.n	8004890 <HAL_RCC_ClockConfig+0x68>
 800486e:	683b      	ldr	r3, [r7, #0]
 8004870:	2b04      	cmp	r3, #4
 8004872:	d00d      	beq.n	8004890 <HAL_RCC_ClockConfig+0x68>
 8004874:	683b      	ldr	r3, [r7, #0]
 8004876:	2b05      	cmp	r3, #5
 8004878:	d00a      	beq.n	8004890 <HAL_RCC_ClockConfig+0x68>
 800487a:	683b      	ldr	r3, [r7, #0]
 800487c:	2b06      	cmp	r3, #6
 800487e:	d007      	beq.n	8004890 <HAL_RCC_ClockConfig+0x68>
 8004880:	683b      	ldr	r3, [r7, #0]
 8004882:	2b07      	cmp	r3, #7
 8004884:	d004      	beq.n	8004890 <HAL_RCC_ClockConfig+0x68>
 8004886:	f240 2152 	movw	r1, #594	; 0x252
 800488a:	486d      	ldr	r0, [pc, #436]	; (8004a40 <HAL_RCC_ClockConfig+0x218>)
 800488c:	f7fc f985 	bl	8000b9a <assert_failed>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004890:	4b6c      	ldr	r3, [pc, #432]	; (8004a44 <HAL_RCC_ClockConfig+0x21c>)
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	f003 030f 	and.w	r3, r3, #15
 8004898:	683a      	ldr	r2, [r7, #0]
 800489a:	429a      	cmp	r2, r3
 800489c:	d90c      	bls.n	80048b8 <HAL_RCC_ClockConfig+0x90>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800489e:	4b69      	ldr	r3, [pc, #420]	; (8004a44 <HAL_RCC_ClockConfig+0x21c>)
 80048a0:	683a      	ldr	r2, [r7, #0]
 80048a2:	b2d2      	uxtb	r2, r2
 80048a4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80048a6:	4b67      	ldr	r3, [pc, #412]	; (8004a44 <HAL_RCC_ClockConfig+0x21c>)
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	f003 030f 	and.w	r3, r3, #15
 80048ae:	683a      	ldr	r2, [r7, #0]
 80048b0:	429a      	cmp	r2, r3
 80048b2:	d001      	beq.n	80048b8 <HAL_RCC_ClockConfig+0x90>
    {
      return HAL_ERROR;
 80048b4:	2301      	movs	r3, #1
 80048b6:	e136      	b.n	8004b26 <HAL_RCC_ClockConfig+0x2fe>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	f003 0302 	and.w	r3, r3, #2
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d049      	beq.n	8004958 <HAL_RCC_ClockConfig+0x130>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	f003 0304 	and.w	r3, r3, #4
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d005      	beq.n	80048dc <HAL_RCC_ClockConfig+0xb4>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80048d0:	4b5d      	ldr	r3, [pc, #372]	; (8004a48 <HAL_RCC_ClockConfig+0x220>)
 80048d2:	689b      	ldr	r3, [r3, #8]
 80048d4:	4a5c      	ldr	r2, [pc, #368]	; (8004a48 <HAL_RCC_ClockConfig+0x220>)
 80048d6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80048da:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	f003 0308 	and.w	r3, r3, #8
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d005      	beq.n	80048f4 <HAL_RCC_ClockConfig+0xcc>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80048e8:	4b57      	ldr	r3, [pc, #348]	; (8004a48 <HAL_RCC_ClockConfig+0x220>)
 80048ea:	689b      	ldr	r3, [r3, #8]
 80048ec:	4a56      	ldr	r2, [pc, #344]	; (8004a48 <HAL_RCC_ClockConfig+0x220>)
 80048ee:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80048f2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	689b      	ldr	r3, [r3, #8]
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d024      	beq.n	8004946 <HAL_RCC_ClockConfig+0x11e>
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	689b      	ldr	r3, [r3, #8]
 8004900:	2b80      	cmp	r3, #128	; 0x80
 8004902:	d020      	beq.n	8004946 <HAL_RCC_ClockConfig+0x11e>
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	689b      	ldr	r3, [r3, #8]
 8004908:	2b90      	cmp	r3, #144	; 0x90
 800490a:	d01c      	beq.n	8004946 <HAL_RCC_ClockConfig+0x11e>
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	689b      	ldr	r3, [r3, #8]
 8004910:	2ba0      	cmp	r3, #160	; 0xa0
 8004912:	d018      	beq.n	8004946 <HAL_RCC_ClockConfig+0x11e>
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	689b      	ldr	r3, [r3, #8]
 8004918:	2bb0      	cmp	r3, #176	; 0xb0
 800491a:	d014      	beq.n	8004946 <HAL_RCC_ClockConfig+0x11e>
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	689b      	ldr	r3, [r3, #8]
 8004920:	2bc0      	cmp	r3, #192	; 0xc0
 8004922:	d010      	beq.n	8004946 <HAL_RCC_ClockConfig+0x11e>
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	689b      	ldr	r3, [r3, #8]
 8004928:	2bd0      	cmp	r3, #208	; 0xd0
 800492a:	d00c      	beq.n	8004946 <HAL_RCC_ClockConfig+0x11e>
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	689b      	ldr	r3, [r3, #8]
 8004930:	2be0      	cmp	r3, #224	; 0xe0
 8004932:	d008      	beq.n	8004946 <HAL_RCC_ClockConfig+0x11e>
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	689b      	ldr	r3, [r3, #8]
 8004938:	2bf0      	cmp	r3, #240	; 0xf0
 800493a:	d004      	beq.n	8004946 <HAL_RCC_ClockConfig+0x11e>
 800493c:	f240 2175 	movw	r1, #629	; 0x275
 8004940:	483f      	ldr	r0, [pc, #252]	; (8004a40 <HAL_RCC_ClockConfig+0x218>)
 8004942:	f7fc f92a 	bl	8000b9a <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004946:	4b40      	ldr	r3, [pc, #256]	; (8004a48 <HAL_RCC_ClockConfig+0x220>)
 8004948:	689b      	ldr	r3, [r3, #8]
 800494a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	689b      	ldr	r3, [r3, #8]
 8004952:	493d      	ldr	r1, [pc, #244]	; (8004a48 <HAL_RCC_ClockConfig+0x220>)
 8004954:	4313      	orrs	r3, r2
 8004956:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	f003 0301 	and.w	r3, r3, #1
 8004960:	2b00      	cmp	r3, #0
 8004962:	d059      	beq.n	8004a18 <HAL_RCC_ClockConfig+0x1f0>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	685b      	ldr	r3, [r3, #4]
 8004968:	2b00      	cmp	r3, #0
 800496a:	d010      	beq.n	800498e <HAL_RCC_ClockConfig+0x166>
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	685b      	ldr	r3, [r3, #4]
 8004970:	2b01      	cmp	r3, #1
 8004972:	d00c      	beq.n	800498e <HAL_RCC_ClockConfig+0x166>
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	685b      	ldr	r3, [r3, #4]
 8004978:	2b02      	cmp	r3, #2
 800497a:	d008      	beq.n	800498e <HAL_RCC_ClockConfig+0x166>
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	685b      	ldr	r3, [r3, #4]
 8004980:	2b03      	cmp	r3, #3
 8004982:	d004      	beq.n	800498e <HAL_RCC_ClockConfig+0x166>
 8004984:	f44f 711f 	mov.w	r1, #636	; 0x27c
 8004988:	482d      	ldr	r0, [pc, #180]	; (8004a40 <HAL_RCC_ClockConfig+0x218>)
 800498a:	f7fc f906 	bl	8000b9a <assert_failed>

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	685b      	ldr	r3, [r3, #4]
 8004992:	2b01      	cmp	r3, #1
 8004994:	d107      	bne.n	80049a6 <HAL_RCC_ClockConfig+0x17e>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004996:	4b2c      	ldr	r3, [pc, #176]	; (8004a48 <HAL_RCC_ClockConfig+0x220>)
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d119      	bne.n	80049d6 <HAL_RCC_ClockConfig+0x1ae>
      {
        return HAL_ERROR;
 80049a2:	2301      	movs	r3, #1
 80049a4:	e0bf      	b.n	8004b26 <HAL_RCC_ClockConfig+0x2fe>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	685b      	ldr	r3, [r3, #4]
 80049aa:	2b02      	cmp	r3, #2
 80049ac:	d003      	beq.n	80049b6 <HAL_RCC_ClockConfig+0x18e>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80049b2:	2b03      	cmp	r3, #3
 80049b4:	d107      	bne.n	80049c6 <HAL_RCC_ClockConfig+0x19e>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80049b6:	4b24      	ldr	r3, [pc, #144]	; (8004a48 <HAL_RCC_ClockConfig+0x220>)
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d109      	bne.n	80049d6 <HAL_RCC_ClockConfig+0x1ae>
      {
        return HAL_ERROR;
 80049c2:	2301      	movs	r3, #1
 80049c4:	e0af      	b.n	8004b26 <HAL_RCC_ClockConfig+0x2fe>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80049c6:	4b20      	ldr	r3, [pc, #128]	; (8004a48 <HAL_RCC_ClockConfig+0x220>)
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	f003 0302 	and.w	r3, r3, #2
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d101      	bne.n	80049d6 <HAL_RCC_ClockConfig+0x1ae>
      {
        return HAL_ERROR;
 80049d2:	2301      	movs	r3, #1
 80049d4:	e0a7      	b.n	8004b26 <HAL_RCC_ClockConfig+0x2fe>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80049d6:	4b1c      	ldr	r3, [pc, #112]	; (8004a48 <HAL_RCC_ClockConfig+0x220>)
 80049d8:	689b      	ldr	r3, [r3, #8]
 80049da:	f023 0203 	bic.w	r2, r3, #3
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	685b      	ldr	r3, [r3, #4]
 80049e2:	4919      	ldr	r1, [pc, #100]	; (8004a48 <HAL_RCC_ClockConfig+0x220>)
 80049e4:	4313      	orrs	r3, r2
 80049e6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80049e8:	f7fc fb9a 	bl	8001120 <HAL_GetTick>
 80049ec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80049ee:	e00a      	b.n	8004a06 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80049f0:	f7fc fb96 	bl	8001120 <HAL_GetTick>
 80049f4:	4602      	mov	r2, r0
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	1ad3      	subs	r3, r2, r3
 80049fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80049fe:	4293      	cmp	r3, r2
 8004a00:	d901      	bls.n	8004a06 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8004a02:	2303      	movs	r3, #3
 8004a04:	e08f      	b.n	8004b26 <HAL_RCC_ClockConfig+0x2fe>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a06:	4b10      	ldr	r3, [pc, #64]	; (8004a48 <HAL_RCC_ClockConfig+0x220>)
 8004a08:	689b      	ldr	r3, [r3, #8]
 8004a0a:	f003 020c 	and.w	r2, r3, #12
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	685b      	ldr	r3, [r3, #4]
 8004a12:	009b      	lsls	r3, r3, #2
 8004a14:	429a      	cmp	r2, r3
 8004a16:	d1eb      	bne.n	80049f0 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004a18:	4b0a      	ldr	r3, [pc, #40]	; (8004a44 <HAL_RCC_ClockConfig+0x21c>)
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	f003 030f 	and.w	r3, r3, #15
 8004a20:	683a      	ldr	r2, [r7, #0]
 8004a22:	429a      	cmp	r2, r3
 8004a24:	d212      	bcs.n	8004a4c <HAL_RCC_ClockConfig+0x224>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a26:	4b07      	ldr	r3, [pc, #28]	; (8004a44 <HAL_RCC_ClockConfig+0x21c>)
 8004a28:	683a      	ldr	r2, [r7, #0]
 8004a2a:	b2d2      	uxtb	r2, r2
 8004a2c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a2e:	4b05      	ldr	r3, [pc, #20]	; (8004a44 <HAL_RCC_ClockConfig+0x21c>)
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	f003 030f 	and.w	r3, r3, #15
 8004a36:	683a      	ldr	r2, [r7, #0]
 8004a38:	429a      	cmp	r2, r3
 8004a3a:	d007      	beq.n	8004a4c <HAL_RCC_ClockConfig+0x224>
    {
      return HAL_ERROR;
 8004a3c:	2301      	movs	r3, #1
 8004a3e:	e072      	b.n	8004b26 <HAL_RCC_ClockConfig+0x2fe>
 8004a40:	0800a1ac 	.word	0x0800a1ac
 8004a44:	40023c00 	.word	0x40023c00
 8004a48:	40023800 	.word	0x40023800
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	f003 0304 	and.w	r3, r3, #4
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d025      	beq.n	8004aa4 <HAL_RCC_ClockConfig+0x27c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	68db      	ldr	r3, [r3, #12]
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d018      	beq.n	8004a92 <HAL_RCC_ClockConfig+0x26a>
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	68db      	ldr	r3, [r3, #12]
 8004a64:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a68:	d013      	beq.n	8004a92 <HAL_RCC_ClockConfig+0x26a>
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	68db      	ldr	r3, [r3, #12]
 8004a6e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8004a72:	d00e      	beq.n	8004a92 <HAL_RCC_ClockConfig+0x26a>
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	68db      	ldr	r3, [r3, #12]
 8004a78:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8004a7c:	d009      	beq.n	8004a92 <HAL_RCC_ClockConfig+0x26a>
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	68db      	ldr	r3, [r3, #12]
 8004a82:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 8004a86:	d004      	beq.n	8004a92 <HAL_RCC_ClockConfig+0x26a>
 8004a88:	f240 21ba 	movw	r1, #698	; 0x2ba
 8004a8c:	4828      	ldr	r0, [pc, #160]	; (8004b30 <HAL_RCC_ClockConfig+0x308>)
 8004a8e:	f7fc f884 	bl	8000b9a <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004a92:	4b28      	ldr	r3, [pc, #160]	; (8004b34 <HAL_RCC_ClockConfig+0x30c>)
 8004a94:	689b      	ldr	r3, [r3, #8]
 8004a96:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	68db      	ldr	r3, [r3, #12]
 8004a9e:	4925      	ldr	r1, [pc, #148]	; (8004b34 <HAL_RCC_ClockConfig+0x30c>)
 8004aa0:	4313      	orrs	r3, r2
 8004aa2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	f003 0308 	and.w	r3, r3, #8
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d026      	beq.n	8004afe <HAL_RCC_ClockConfig+0x2d6>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	691b      	ldr	r3, [r3, #16]
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d018      	beq.n	8004aea <HAL_RCC_ClockConfig+0x2c2>
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	691b      	ldr	r3, [r3, #16]
 8004abc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ac0:	d013      	beq.n	8004aea <HAL_RCC_ClockConfig+0x2c2>
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	691b      	ldr	r3, [r3, #16]
 8004ac6:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8004aca:	d00e      	beq.n	8004aea <HAL_RCC_ClockConfig+0x2c2>
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	691b      	ldr	r3, [r3, #16]
 8004ad0:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8004ad4:	d009      	beq.n	8004aea <HAL_RCC_ClockConfig+0x2c2>
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	691b      	ldr	r3, [r3, #16]
 8004ada:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 8004ade:	d004      	beq.n	8004aea <HAL_RCC_ClockConfig+0x2c2>
 8004ae0:	f240 21c1 	movw	r1, #705	; 0x2c1
 8004ae4:	4812      	ldr	r0, [pc, #72]	; (8004b30 <HAL_RCC_ClockConfig+0x308>)
 8004ae6:	f7fc f858 	bl	8000b9a <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004aea:	4b12      	ldr	r3, [pc, #72]	; (8004b34 <HAL_RCC_ClockConfig+0x30c>)
 8004aec:	689b      	ldr	r3, [r3, #8]
 8004aee:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	691b      	ldr	r3, [r3, #16]
 8004af6:	00db      	lsls	r3, r3, #3
 8004af8:	490e      	ldr	r1, [pc, #56]	; (8004b34 <HAL_RCC_ClockConfig+0x30c>)
 8004afa:	4313      	orrs	r3, r2
 8004afc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004afe:	f000 f821 	bl	8004b44 <HAL_RCC_GetSysClockFreq>
 8004b02:	4601      	mov	r1, r0
 8004b04:	4b0b      	ldr	r3, [pc, #44]	; (8004b34 <HAL_RCC_ClockConfig+0x30c>)
 8004b06:	689b      	ldr	r3, [r3, #8]
 8004b08:	091b      	lsrs	r3, r3, #4
 8004b0a:	f003 030f 	and.w	r3, r3, #15
 8004b0e:	4a0a      	ldr	r2, [pc, #40]	; (8004b38 <HAL_RCC_ClockConfig+0x310>)
 8004b10:	5cd3      	ldrb	r3, [r2, r3]
 8004b12:	fa21 f303 	lsr.w	r3, r1, r3
 8004b16:	4a09      	ldr	r2, [pc, #36]	; (8004b3c <HAL_RCC_ClockConfig+0x314>)
 8004b18:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004b1a:	4b09      	ldr	r3, [pc, #36]	; (8004b40 <HAL_RCC_ClockConfig+0x318>)
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	4618      	mov	r0, r3
 8004b20:	f7fc faba 	bl	8001098 <HAL_InitTick>

  return HAL_OK;
 8004b24:	2300      	movs	r3, #0
}
 8004b26:	4618      	mov	r0, r3
 8004b28:	3710      	adds	r7, #16
 8004b2a:	46bd      	mov	sp, r7
 8004b2c:	bd80      	pop	{r7, pc}
 8004b2e:	bf00      	nop
 8004b30:	0800a1ac 	.word	0x0800a1ac
 8004b34:	40023800 	.word	0x40023800
 8004b38:	0800a2d0 	.word	0x0800a2d0
 8004b3c:	20000000 	.word	0x20000000
 8004b40:	20000004 	.word	0x20000004

08004b44 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004b44:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004b46:	b085      	sub	sp, #20
 8004b48:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004b4a:	2300      	movs	r3, #0
 8004b4c:	607b      	str	r3, [r7, #4]
 8004b4e:	2300      	movs	r3, #0
 8004b50:	60fb      	str	r3, [r7, #12]
 8004b52:	2300      	movs	r3, #0
 8004b54:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8004b56:	2300      	movs	r3, #0
 8004b58:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004b5a:	4b63      	ldr	r3, [pc, #396]	; (8004ce8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004b5c:	689b      	ldr	r3, [r3, #8]
 8004b5e:	f003 030c 	and.w	r3, r3, #12
 8004b62:	2b04      	cmp	r3, #4
 8004b64:	d007      	beq.n	8004b76 <HAL_RCC_GetSysClockFreq+0x32>
 8004b66:	2b08      	cmp	r3, #8
 8004b68:	d008      	beq.n	8004b7c <HAL_RCC_GetSysClockFreq+0x38>
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	f040 80b4 	bne.w	8004cd8 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004b70:	4b5e      	ldr	r3, [pc, #376]	; (8004cec <HAL_RCC_GetSysClockFreq+0x1a8>)
 8004b72:	60bb      	str	r3, [r7, #8]
       break;
 8004b74:	e0b3      	b.n	8004cde <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004b76:	4b5e      	ldr	r3, [pc, #376]	; (8004cf0 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8004b78:	60bb      	str	r3, [r7, #8]
      break;
 8004b7a:	e0b0      	b.n	8004cde <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004b7c:	4b5a      	ldr	r3, [pc, #360]	; (8004ce8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004b7e:	685b      	ldr	r3, [r3, #4]
 8004b80:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004b84:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004b86:	4b58      	ldr	r3, [pc, #352]	; (8004ce8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004b88:	685b      	ldr	r3, [r3, #4]
 8004b8a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d04a      	beq.n	8004c28 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004b92:	4b55      	ldr	r3, [pc, #340]	; (8004ce8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004b94:	685b      	ldr	r3, [r3, #4]
 8004b96:	099b      	lsrs	r3, r3, #6
 8004b98:	f04f 0400 	mov.w	r4, #0
 8004b9c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004ba0:	f04f 0200 	mov.w	r2, #0
 8004ba4:	ea03 0501 	and.w	r5, r3, r1
 8004ba8:	ea04 0602 	and.w	r6, r4, r2
 8004bac:	4629      	mov	r1, r5
 8004bae:	4632      	mov	r2, r6
 8004bb0:	f04f 0300 	mov.w	r3, #0
 8004bb4:	f04f 0400 	mov.w	r4, #0
 8004bb8:	0154      	lsls	r4, r2, #5
 8004bba:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004bbe:	014b      	lsls	r3, r1, #5
 8004bc0:	4619      	mov	r1, r3
 8004bc2:	4622      	mov	r2, r4
 8004bc4:	1b49      	subs	r1, r1, r5
 8004bc6:	eb62 0206 	sbc.w	r2, r2, r6
 8004bca:	f04f 0300 	mov.w	r3, #0
 8004bce:	f04f 0400 	mov.w	r4, #0
 8004bd2:	0194      	lsls	r4, r2, #6
 8004bd4:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004bd8:	018b      	lsls	r3, r1, #6
 8004bda:	1a5b      	subs	r3, r3, r1
 8004bdc:	eb64 0402 	sbc.w	r4, r4, r2
 8004be0:	f04f 0100 	mov.w	r1, #0
 8004be4:	f04f 0200 	mov.w	r2, #0
 8004be8:	00e2      	lsls	r2, r4, #3
 8004bea:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004bee:	00d9      	lsls	r1, r3, #3
 8004bf0:	460b      	mov	r3, r1
 8004bf2:	4614      	mov	r4, r2
 8004bf4:	195b      	adds	r3, r3, r5
 8004bf6:	eb44 0406 	adc.w	r4, r4, r6
 8004bfa:	f04f 0100 	mov.w	r1, #0
 8004bfe:	f04f 0200 	mov.w	r2, #0
 8004c02:	0262      	lsls	r2, r4, #9
 8004c04:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8004c08:	0259      	lsls	r1, r3, #9
 8004c0a:	460b      	mov	r3, r1
 8004c0c:	4614      	mov	r4, r2
 8004c0e:	4618      	mov	r0, r3
 8004c10:	4621      	mov	r1, r4
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	f04f 0400 	mov.w	r4, #0
 8004c18:	461a      	mov	r2, r3
 8004c1a:	4623      	mov	r3, r4
 8004c1c:	f7fb fadc 	bl	80001d8 <__aeabi_uldivmod>
 8004c20:	4603      	mov	r3, r0
 8004c22:	460c      	mov	r4, r1
 8004c24:	60fb      	str	r3, [r7, #12]
 8004c26:	e049      	b.n	8004cbc <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004c28:	4b2f      	ldr	r3, [pc, #188]	; (8004ce8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004c2a:	685b      	ldr	r3, [r3, #4]
 8004c2c:	099b      	lsrs	r3, r3, #6
 8004c2e:	f04f 0400 	mov.w	r4, #0
 8004c32:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004c36:	f04f 0200 	mov.w	r2, #0
 8004c3a:	ea03 0501 	and.w	r5, r3, r1
 8004c3e:	ea04 0602 	and.w	r6, r4, r2
 8004c42:	4629      	mov	r1, r5
 8004c44:	4632      	mov	r2, r6
 8004c46:	f04f 0300 	mov.w	r3, #0
 8004c4a:	f04f 0400 	mov.w	r4, #0
 8004c4e:	0154      	lsls	r4, r2, #5
 8004c50:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004c54:	014b      	lsls	r3, r1, #5
 8004c56:	4619      	mov	r1, r3
 8004c58:	4622      	mov	r2, r4
 8004c5a:	1b49      	subs	r1, r1, r5
 8004c5c:	eb62 0206 	sbc.w	r2, r2, r6
 8004c60:	f04f 0300 	mov.w	r3, #0
 8004c64:	f04f 0400 	mov.w	r4, #0
 8004c68:	0194      	lsls	r4, r2, #6
 8004c6a:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004c6e:	018b      	lsls	r3, r1, #6
 8004c70:	1a5b      	subs	r3, r3, r1
 8004c72:	eb64 0402 	sbc.w	r4, r4, r2
 8004c76:	f04f 0100 	mov.w	r1, #0
 8004c7a:	f04f 0200 	mov.w	r2, #0
 8004c7e:	00e2      	lsls	r2, r4, #3
 8004c80:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004c84:	00d9      	lsls	r1, r3, #3
 8004c86:	460b      	mov	r3, r1
 8004c88:	4614      	mov	r4, r2
 8004c8a:	195b      	adds	r3, r3, r5
 8004c8c:	eb44 0406 	adc.w	r4, r4, r6
 8004c90:	f04f 0100 	mov.w	r1, #0
 8004c94:	f04f 0200 	mov.w	r2, #0
 8004c98:	02a2      	lsls	r2, r4, #10
 8004c9a:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8004c9e:	0299      	lsls	r1, r3, #10
 8004ca0:	460b      	mov	r3, r1
 8004ca2:	4614      	mov	r4, r2
 8004ca4:	4618      	mov	r0, r3
 8004ca6:	4621      	mov	r1, r4
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	f04f 0400 	mov.w	r4, #0
 8004cae:	461a      	mov	r2, r3
 8004cb0:	4623      	mov	r3, r4
 8004cb2:	f7fb fa91 	bl	80001d8 <__aeabi_uldivmod>
 8004cb6:	4603      	mov	r3, r0
 8004cb8:	460c      	mov	r4, r1
 8004cba:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004cbc:	4b0a      	ldr	r3, [pc, #40]	; (8004ce8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004cbe:	685b      	ldr	r3, [r3, #4]
 8004cc0:	0c1b      	lsrs	r3, r3, #16
 8004cc2:	f003 0303 	and.w	r3, r3, #3
 8004cc6:	3301      	adds	r3, #1
 8004cc8:	005b      	lsls	r3, r3, #1
 8004cca:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004ccc:	68fa      	ldr	r2, [r7, #12]
 8004cce:	683b      	ldr	r3, [r7, #0]
 8004cd0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004cd4:	60bb      	str	r3, [r7, #8]
      break;
 8004cd6:	e002      	b.n	8004cde <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004cd8:	4b04      	ldr	r3, [pc, #16]	; (8004cec <HAL_RCC_GetSysClockFreq+0x1a8>)
 8004cda:	60bb      	str	r3, [r7, #8]
      break;
 8004cdc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004cde:	68bb      	ldr	r3, [r7, #8]
}
 8004ce0:	4618      	mov	r0, r3
 8004ce2:	3714      	adds	r7, #20
 8004ce4:	46bd      	mov	sp, r7
 8004ce6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004ce8:	40023800 	.word	0x40023800
 8004cec:	00f42400 	.word	0x00f42400
 8004cf0:	007a1200 	.word	0x007a1200

08004cf4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004cf4:	b480      	push	{r7}
 8004cf6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004cf8:	4b03      	ldr	r3, [pc, #12]	; (8004d08 <HAL_RCC_GetHCLKFreq+0x14>)
 8004cfa:	681b      	ldr	r3, [r3, #0]
}
 8004cfc:	4618      	mov	r0, r3
 8004cfe:	46bd      	mov	sp, r7
 8004d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d04:	4770      	bx	lr
 8004d06:	bf00      	nop
 8004d08:	20000000 	.word	0x20000000

08004d0c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004d0c:	b580      	push	{r7, lr}
 8004d0e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004d10:	f7ff fff0 	bl	8004cf4 <HAL_RCC_GetHCLKFreq>
 8004d14:	4601      	mov	r1, r0
 8004d16:	4b05      	ldr	r3, [pc, #20]	; (8004d2c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004d18:	689b      	ldr	r3, [r3, #8]
 8004d1a:	0a9b      	lsrs	r3, r3, #10
 8004d1c:	f003 0307 	and.w	r3, r3, #7
 8004d20:	4a03      	ldr	r2, [pc, #12]	; (8004d30 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004d22:	5cd3      	ldrb	r3, [r2, r3]
 8004d24:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004d28:	4618      	mov	r0, r3
 8004d2a:	bd80      	pop	{r7, pc}
 8004d2c:	40023800 	.word	0x40023800
 8004d30:	0800a2e0 	.word	0x0800a2e0

08004d34 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004d34:	b580      	push	{r7, lr}
 8004d36:	b086      	sub	sp, #24
 8004d38:	af00      	add	r7, sp, #0
 8004d3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004d3c:	2300      	movs	r3, #0
 8004d3e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004d40:	2300      	movs	r3, #0
 8004d42:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d003      	beq.n	8004d54 <HAL_RCCEx_PeriphCLKConfig+0x20>
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	2b0f      	cmp	r3, #15
 8004d52:	d904      	bls.n	8004d5e <HAL_RCCEx_PeriphCLKConfig+0x2a>
 8004d54:	f640 11d9 	movw	r1, #2521	; 0x9d9
 8004d58:	489d      	ldr	r0, [pc, #628]	; (8004fd0 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8004d5a:	f7fb ff1e 	bl	8000b9a <assert_failed>

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	f003 0301 	and.w	r3, r3, #1
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d105      	bne.n	8004d76 <HAL_RCCEx_PeriphCLKConfig+0x42>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d060      	beq.n	8004e38 <HAL_RCCEx_PeriphCLKConfig+0x104>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	68db      	ldr	r3, [r3, #12]
 8004d7a:	2b01      	cmp	r3, #1
 8004d7c:	d903      	bls.n	8004d86 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	68db      	ldr	r3, [r3, #12]
 8004d82:	2b07      	cmp	r3, #7
 8004d84:	d904      	bls.n	8004d90 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8004d86:	f44f 611e 	mov.w	r1, #2528	; 0x9e0
 8004d8a:	4891      	ldr	r0, [pc, #580]	; (8004fd0 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8004d8c:	f7fb ff05 	bl	8000b9a <assert_failed>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	689b      	ldr	r3, [r3, #8]
 8004d94:	2bbf      	cmp	r3, #191	; 0xbf
 8004d96:	d904      	bls.n	8004da2 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	689b      	ldr	r3, [r3, #8]
 8004d9c:	f5b3 7fd8 	cmp.w	r3, #432	; 0x1b0
 8004da0:	d904      	bls.n	8004dac <HAL_RCCEx_PeriphCLKConfig+0x78>
 8004da2:	f640 11e1 	movw	r1, #2529	; 0x9e1
 8004da6:	488a      	ldr	r0, [pc, #552]	; (8004fd0 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8004da8:	f7fb fef7 	bl	8000b9a <assert_failed>
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	685b      	ldr	r3, [r3, #4]
 8004db0:	2b01      	cmp	r3, #1
 8004db2:	d903      	bls.n	8004dbc <HAL_RCCEx_PeriphCLKConfig+0x88>
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	685b      	ldr	r3, [r3, #4]
 8004db8:	2b3f      	cmp	r3, #63	; 0x3f
 8004dba:	d904      	bls.n	8004dc6 <HAL_RCCEx_PeriphCLKConfig+0x92>
 8004dbc:	f640 11e3 	movw	r1, #2531	; 0x9e3
 8004dc0:	4883      	ldr	r0, [pc, #524]	; (8004fd0 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8004dc2:	f7fb feea 	bl	8000b9a <assert_failed>
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004dc6:	4b83      	ldr	r3, [pc, #524]	; (8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 8004dc8:	2200      	movs	r2, #0
 8004dca:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004dcc:	f7fc f9a8 	bl	8001120 <HAL_GetTick>
 8004dd0:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004dd2:	e008      	b.n	8004de6 <HAL_RCCEx_PeriphCLKConfig+0xb2>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004dd4:	f7fc f9a4 	bl	8001120 <HAL_GetTick>
 8004dd8:	4602      	mov	r2, r0
 8004dda:	697b      	ldr	r3, [r7, #20]
 8004ddc:	1ad3      	subs	r3, r2, r3
 8004dde:	2b02      	cmp	r3, #2
 8004de0:	d901      	bls.n	8004de6 <HAL_RCCEx_PeriphCLKConfig+0xb2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004de2:	2303      	movs	r3, #3
 8004de4:	e1ae      	b.n	8005144 <HAL_RCCEx_PeriphCLKConfig+0x410>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004de6:	4b7c      	ldr	r3, [pc, #496]	; (8004fd8 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d1f0      	bne.n	8004dd4 <HAL_RCCEx_PeriphCLKConfig+0xa0>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	685a      	ldr	r2, [r3, #4]
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	689b      	ldr	r3, [r3, #8]
 8004dfa:	019b      	lsls	r3, r3, #6
 8004dfc:	431a      	orrs	r2, r3
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	68db      	ldr	r3, [r3, #12]
 8004e02:	071b      	lsls	r3, r3, #28
 8004e04:	4974      	ldr	r1, [pc, #464]	; (8004fd8 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 8004e06:	4313      	orrs	r3, r2
 8004e08:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004e0c:	4b71      	ldr	r3, [pc, #452]	; (8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 8004e0e:	2201      	movs	r2, #1
 8004e10:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004e12:	f7fc f985 	bl	8001120 <HAL_GetTick>
 8004e16:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004e18:	e008      	b.n	8004e2c <HAL_RCCEx_PeriphCLKConfig+0xf8>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004e1a:	f7fc f981 	bl	8001120 <HAL_GetTick>
 8004e1e:	4602      	mov	r2, r0
 8004e20:	697b      	ldr	r3, [r7, #20]
 8004e22:	1ad3      	subs	r3, r2, r3
 8004e24:	2b02      	cmp	r3, #2
 8004e26:	d901      	bls.n	8004e2c <HAL_RCCEx_PeriphCLKConfig+0xf8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004e28:	2303      	movs	r3, #3
 8004e2a:	e18b      	b.n	8005144 <HAL_RCCEx_PeriphCLKConfig+0x410>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004e2c:	4b6a      	ldr	r3, [pc, #424]	; (8004fd8 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d0f0      	beq.n	8004e1a <HAL_RCCEx_PeriphCLKConfig+0xe6>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	f003 0302 	and.w	r3, r3, #2
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	f000 8174 	beq.w	800512e <HAL_RCCEx_PeriphCLKConfig+0x3fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	691b      	ldr	r3, [r3, #16]
 8004e4a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004e4e:	f000 80a6 	beq.w	8004f9e <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	691b      	ldr	r3, [r3, #16]
 8004e56:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004e5a:	f000 80a0 	beq.w	8004f9e <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	691b      	ldr	r3, [r3, #16]
 8004e62:	4a5e      	ldr	r2, [pc, #376]	; (8004fdc <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 8004e64:	4293      	cmp	r3, r2
 8004e66:	f000 809a 	beq.w	8004f9e <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	691b      	ldr	r3, [r3, #16]
 8004e6e:	4a5c      	ldr	r2, [pc, #368]	; (8004fe0 <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 8004e70:	4293      	cmp	r3, r2
 8004e72:	f000 8094 	beq.w	8004f9e <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	691b      	ldr	r3, [r3, #16]
 8004e7a:	4a5a      	ldr	r2, [pc, #360]	; (8004fe4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>)
 8004e7c:	4293      	cmp	r3, r2
 8004e7e:	f000 808e 	beq.w	8004f9e <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	691b      	ldr	r3, [r3, #16]
 8004e86:	4a58      	ldr	r2, [pc, #352]	; (8004fe8 <HAL_RCCEx_PeriphCLKConfig+0x2b4>)
 8004e88:	4293      	cmp	r3, r2
 8004e8a:	f000 8088 	beq.w	8004f9e <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	691b      	ldr	r3, [r3, #16]
 8004e92:	4a56      	ldr	r2, [pc, #344]	; (8004fec <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8004e94:	4293      	cmp	r3, r2
 8004e96:	f000 8082 	beq.w	8004f9e <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	691b      	ldr	r3, [r3, #16]
 8004e9e:	4a54      	ldr	r2, [pc, #336]	; (8004ff0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004ea0:	4293      	cmp	r3, r2
 8004ea2:	d07c      	beq.n	8004f9e <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	691b      	ldr	r3, [r3, #16]
 8004ea8:	4a52      	ldr	r2, [pc, #328]	; (8004ff4 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8004eaa:	4293      	cmp	r3, r2
 8004eac:	d077      	beq.n	8004f9e <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	691b      	ldr	r3, [r3, #16]
 8004eb2:	4a51      	ldr	r2, [pc, #324]	; (8004ff8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004eb4:	4293      	cmp	r3, r2
 8004eb6:	d072      	beq.n	8004f9e <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	691b      	ldr	r3, [r3, #16]
 8004ebc:	4a4f      	ldr	r2, [pc, #316]	; (8004ffc <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8004ebe:	4293      	cmp	r3, r2
 8004ec0:	d06d      	beq.n	8004f9e <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	691b      	ldr	r3, [r3, #16]
 8004ec6:	4a4e      	ldr	r2, [pc, #312]	; (8005000 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8004ec8:	4293      	cmp	r3, r2
 8004eca:	d068      	beq.n	8004f9e <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	691b      	ldr	r3, [r3, #16]
 8004ed0:	4a4c      	ldr	r2, [pc, #304]	; (8005004 <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 8004ed2:	4293      	cmp	r3, r2
 8004ed4:	d063      	beq.n	8004f9e <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	691b      	ldr	r3, [r3, #16]
 8004eda:	4a4b      	ldr	r2, [pc, #300]	; (8005008 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004edc:	4293      	cmp	r3, r2
 8004ede:	d05e      	beq.n	8004f9e <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	691b      	ldr	r3, [r3, #16]
 8004ee4:	4a49      	ldr	r2, [pc, #292]	; (800500c <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8004ee6:	4293      	cmp	r3, r2
 8004ee8:	d059      	beq.n	8004f9e <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	691b      	ldr	r3, [r3, #16]
 8004eee:	4a48      	ldr	r2, [pc, #288]	; (8005010 <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 8004ef0:	4293      	cmp	r3, r2
 8004ef2:	d054      	beq.n	8004f9e <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	691b      	ldr	r3, [r3, #16]
 8004ef8:	4a46      	ldr	r2, [pc, #280]	; (8005014 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8004efa:	4293      	cmp	r3, r2
 8004efc:	d04f      	beq.n	8004f9e <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	691b      	ldr	r3, [r3, #16]
 8004f02:	4a45      	ldr	r2, [pc, #276]	; (8005018 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8004f04:	4293      	cmp	r3, r2
 8004f06:	d04a      	beq.n	8004f9e <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	691b      	ldr	r3, [r3, #16]
 8004f0c:	4a43      	ldr	r2, [pc, #268]	; (800501c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004f0e:	4293      	cmp	r3, r2
 8004f10:	d045      	beq.n	8004f9e <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	691b      	ldr	r3, [r3, #16]
 8004f16:	4a42      	ldr	r2, [pc, #264]	; (8005020 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8004f18:	4293      	cmp	r3, r2
 8004f1a:	d040      	beq.n	8004f9e <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	691b      	ldr	r3, [r3, #16]
 8004f20:	4a40      	ldr	r2, [pc, #256]	; (8005024 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004f22:	4293      	cmp	r3, r2
 8004f24:	d03b      	beq.n	8004f9e <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	691b      	ldr	r3, [r3, #16]
 8004f2a:	4a3f      	ldr	r2, [pc, #252]	; (8005028 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004f2c:	4293      	cmp	r3, r2
 8004f2e:	d036      	beq.n	8004f9e <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	691b      	ldr	r3, [r3, #16]
 8004f34:	4a3d      	ldr	r2, [pc, #244]	; (800502c <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8004f36:	4293      	cmp	r3, r2
 8004f38:	d031      	beq.n	8004f9e <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	691b      	ldr	r3, [r3, #16]
 8004f3e:	4a3c      	ldr	r2, [pc, #240]	; (8005030 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8004f40:	4293      	cmp	r3, r2
 8004f42:	d02c      	beq.n	8004f9e <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	691b      	ldr	r3, [r3, #16]
 8004f48:	4a3a      	ldr	r2, [pc, #232]	; (8005034 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004f4a:	4293      	cmp	r3, r2
 8004f4c:	d027      	beq.n	8004f9e <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	691b      	ldr	r3, [r3, #16]
 8004f52:	4a39      	ldr	r2, [pc, #228]	; (8005038 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004f54:	4293      	cmp	r3, r2
 8004f56:	d022      	beq.n	8004f9e <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	691b      	ldr	r3, [r3, #16]
 8004f5c:	4a37      	ldr	r2, [pc, #220]	; (800503c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004f5e:	4293      	cmp	r3, r2
 8004f60:	d01d      	beq.n	8004f9e <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	691b      	ldr	r3, [r3, #16]
 8004f66:	4a36      	ldr	r2, [pc, #216]	; (8005040 <HAL_RCCEx_PeriphCLKConfig+0x30c>)
 8004f68:	4293      	cmp	r3, r2
 8004f6a:	d018      	beq.n	8004f9e <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	691b      	ldr	r3, [r3, #16]
 8004f70:	4a34      	ldr	r2, [pc, #208]	; (8005044 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004f72:	4293      	cmp	r3, r2
 8004f74:	d013      	beq.n	8004f9e <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	691b      	ldr	r3, [r3, #16]
 8004f7a:	4a33      	ldr	r2, [pc, #204]	; (8005048 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8004f7c:	4293      	cmp	r3, r2
 8004f7e:	d00e      	beq.n	8004f9e <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	691b      	ldr	r3, [r3, #16]
 8004f84:	4a31      	ldr	r2, [pc, #196]	; (800504c <HAL_RCCEx_PeriphCLKConfig+0x318>)
 8004f86:	4293      	cmp	r3, r2
 8004f88:	d009      	beq.n	8004f9e <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	691b      	ldr	r3, [r3, #16]
 8004f8e:	4a30      	ldr	r2, [pc, #192]	; (8005050 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 8004f90:	4293      	cmp	r3, r2
 8004f92:	d004      	beq.n	8004f9e <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8004f94:	f640 2112 	movw	r1, #2578	; 0xa12
 8004f98:	480d      	ldr	r0, [pc, #52]	; (8004fd0 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8004f9a:	f7fb fdfe 	bl	8000b9a <assert_failed>

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004f9e:	2300      	movs	r3, #0
 8004fa0:	60fb      	str	r3, [r7, #12]
 8004fa2:	4b0d      	ldr	r3, [pc, #52]	; (8004fd8 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 8004fa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fa6:	4a0c      	ldr	r2, [pc, #48]	; (8004fd8 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 8004fa8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004fac:	6413      	str	r3, [r2, #64]	; 0x40
 8004fae:	4b0a      	ldr	r3, [pc, #40]	; (8004fd8 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 8004fb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fb2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004fb6:	60fb      	str	r3, [r7, #12]
 8004fb8:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004fba:	4b26      	ldr	r3, [pc, #152]	; (8005054 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	4a25      	ldr	r2, [pc, #148]	; (8005054 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004fc0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004fc4:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004fc6:	f7fc f8ab 	bl	8001120 <HAL_GetTick>
 8004fca:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004fcc:	e04d      	b.n	800506a <HAL_RCCEx_PeriphCLKConfig+0x336>
 8004fce:	bf00      	nop
 8004fd0:	0800a1e4 	.word	0x0800a1e4
 8004fd4:	42470068 	.word	0x42470068
 8004fd8:	40023800 	.word	0x40023800
 8004fdc:	00020300 	.word	0x00020300
 8004fe0:	00030300 	.word	0x00030300
 8004fe4:	00040300 	.word	0x00040300
 8004fe8:	00050300 	.word	0x00050300
 8004fec:	00060300 	.word	0x00060300
 8004ff0:	00070300 	.word	0x00070300
 8004ff4:	00080300 	.word	0x00080300
 8004ff8:	00090300 	.word	0x00090300
 8004ffc:	000a0300 	.word	0x000a0300
 8005000:	000b0300 	.word	0x000b0300
 8005004:	000c0300 	.word	0x000c0300
 8005008:	000d0300 	.word	0x000d0300
 800500c:	000e0300 	.word	0x000e0300
 8005010:	000f0300 	.word	0x000f0300
 8005014:	00100300 	.word	0x00100300
 8005018:	00110300 	.word	0x00110300
 800501c:	00120300 	.word	0x00120300
 8005020:	00130300 	.word	0x00130300
 8005024:	00140300 	.word	0x00140300
 8005028:	00150300 	.word	0x00150300
 800502c:	00160300 	.word	0x00160300
 8005030:	00170300 	.word	0x00170300
 8005034:	00180300 	.word	0x00180300
 8005038:	00190300 	.word	0x00190300
 800503c:	001a0300 	.word	0x001a0300
 8005040:	001b0300 	.word	0x001b0300
 8005044:	001c0300 	.word	0x001c0300
 8005048:	001d0300 	.word	0x001d0300
 800504c:	001e0300 	.word	0x001e0300
 8005050:	001f0300 	.word	0x001f0300
 8005054:	40007000 	.word	0x40007000
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8005058:	f7fc f862 	bl	8001120 <HAL_GetTick>
 800505c:	4602      	mov	r2, r0
 800505e:	697b      	ldr	r3, [r7, #20]
 8005060:	1ad3      	subs	r3, r2, r3
 8005062:	2b02      	cmp	r3, #2
 8005064:	d901      	bls.n	800506a <HAL_RCCEx_PeriphCLKConfig+0x336>
      {
        return HAL_TIMEOUT;
 8005066:	2303      	movs	r3, #3
 8005068:	e06c      	b.n	8005144 <HAL_RCCEx_PeriphCLKConfig+0x410>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800506a:	4b38      	ldr	r3, [pc, #224]	; (800514c <HAL_RCCEx_PeriphCLKConfig+0x418>)
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005072:	2b00      	cmp	r3, #0
 8005074:	d0f0      	beq.n	8005058 <HAL_RCCEx_PeriphCLKConfig+0x324>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005076:	4b36      	ldr	r3, [pc, #216]	; (8005150 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8005078:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800507a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800507e:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005080:	693b      	ldr	r3, [r7, #16]
 8005082:	2b00      	cmp	r3, #0
 8005084:	d02f      	beq.n	80050e6 <HAL_RCCEx_PeriphCLKConfig+0x3b2>
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	691b      	ldr	r3, [r3, #16]
 800508a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800508e:	693a      	ldr	r2, [r7, #16]
 8005090:	429a      	cmp	r2, r3
 8005092:	d028      	beq.n	80050e6 <HAL_RCCEx_PeriphCLKConfig+0x3b2>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005094:	4b2e      	ldr	r3, [pc, #184]	; (8005150 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8005096:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005098:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800509c:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800509e:	4b2d      	ldr	r3, [pc, #180]	; (8005154 <HAL_RCCEx_PeriphCLKConfig+0x420>)
 80050a0:	2201      	movs	r2, #1
 80050a2:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80050a4:	4b2b      	ldr	r3, [pc, #172]	; (8005154 <HAL_RCCEx_PeriphCLKConfig+0x420>)
 80050a6:	2200      	movs	r2, #0
 80050a8:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80050aa:	4a29      	ldr	r2, [pc, #164]	; (8005150 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 80050ac:	693b      	ldr	r3, [r7, #16]
 80050ae:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80050b0:	4b27      	ldr	r3, [pc, #156]	; (8005150 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 80050b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050b4:	f003 0301 	and.w	r3, r3, #1
 80050b8:	2b01      	cmp	r3, #1
 80050ba:	d114      	bne.n	80050e6 <HAL_RCCEx_PeriphCLKConfig+0x3b2>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80050bc:	f7fc f830 	bl	8001120 <HAL_GetTick>
 80050c0:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80050c2:	e00a      	b.n	80050da <HAL_RCCEx_PeriphCLKConfig+0x3a6>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80050c4:	f7fc f82c 	bl	8001120 <HAL_GetTick>
 80050c8:	4602      	mov	r2, r0
 80050ca:	697b      	ldr	r3, [r7, #20]
 80050cc:	1ad3      	subs	r3, r2, r3
 80050ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80050d2:	4293      	cmp	r3, r2
 80050d4:	d901      	bls.n	80050da <HAL_RCCEx_PeriphCLKConfig+0x3a6>
          {
            return HAL_TIMEOUT;
 80050d6:	2303      	movs	r3, #3
 80050d8:	e034      	b.n	8005144 <HAL_RCCEx_PeriphCLKConfig+0x410>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80050da:	4b1d      	ldr	r3, [pc, #116]	; (8005150 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 80050dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050de:	f003 0302 	and.w	r3, r3, #2
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d0ee      	beq.n	80050c4 <HAL_RCCEx_PeriphCLKConfig+0x390>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	691b      	ldr	r3, [r3, #16]
 80050ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80050ee:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80050f2:	d10d      	bne.n	8005110 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
 80050f4:	4b16      	ldr	r3, [pc, #88]	; (8005150 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 80050f6:	689b      	ldr	r3, [r3, #8]
 80050f8:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	691b      	ldr	r3, [r3, #16]
 8005100:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8005104:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005108:	4911      	ldr	r1, [pc, #68]	; (8005150 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 800510a:	4313      	orrs	r3, r2
 800510c:	608b      	str	r3, [r1, #8]
 800510e:	e005      	b.n	800511c <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8005110:	4b0f      	ldr	r3, [pc, #60]	; (8005150 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8005112:	689b      	ldr	r3, [r3, #8]
 8005114:	4a0e      	ldr	r2, [pc, #56]	; (8005150 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8005116:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800511a:	6093      	str	r3, [r2, #8]
 800511c:	4b0c      	ldr	r3, [pc, #48]	; (8005150 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 800511e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	691b      	ldr	r3, [r3, #16]
 8005124:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005128:	4909      	ldr	r1, [pc, #36]	; (8005150 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 800512a:	4313      	orrs	r3, r2
 800512c:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	f003 0308 	and.w	r3, r3, #8
 8005136:	2b00      	cmp	r3, #0
 8005138:	d003      	beq.n	8005142 <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	7d1a      	ldrb	r2, [r3, #20]
 800513e:	4b06      	ldr	r3, [pc, #24]	; (8005158 <HAL_RCCEx_PeriphCLKConfig+0x424>)
 8005140:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8005142:	2300      	movs	r3, #0
}
 8005144:	4618      	mov	r0, r3
 8005146:	3718      	adds	r7, #24
 8005148:	46bd      	mov	sp, r7
 800514a:	bd80      	pop	{r7, pc}
 800514c:	40007000 	.word	0x40007000
 8005150:	40023800 	.word	0x40023800
 8005154:	42470e40 	.word	0x42470e40
 8005158:	424711e0 	.word	0x424711e0

0800515c <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800515c:	b480      	push	{r7}
 800515e:	b087      	sub	sp, #28
 8005160:	af00      	add	r7, sp, #0
 8005162:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8005164:	2300      	movs	r3, #0
 8005166:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8005168:	2300      	movs	r3, #0
 800516a:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 800516c:	2300      	movs	r3, #0
 800516e:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8005170:	2300      	movs	r3, #0
 8005172:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	2b01      	cmp	r3, #1
 8005178:	d13f      	bne.n	80051fa <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 800517a:	4b23      	ldr	r3, [pc, #140]	; (8005208 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800517c:	689b      	ldr	r3, [r3, #8]
 800517e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005182:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	2b00      	cmp	r3, #0
 8005188:	d004      	beq.n	8005194 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 800518a:	2b01      	cmp	r3, #1
 800518c:	d131      	bne.n	80051f2 <HAL_RCCEx_GetPeriphCLKFreq+0x96>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 800518e:	4b1f      	ldr	r3, [pc, #124]	; (800520c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005190:	617b      	str	r3, [r7, #20]
          break;
 8005192:	e031      	b.n	80051f8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
      case RCC_I2SCLKSOURCE_PLLI2S:
        {
#if defined(STM32F411xE)
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8005194:	4b1c      	ldr	r3, [pc, #112]	; (8005208 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8005196:	685b      	ldr	r3, [r3, #4]
 8005198:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800519c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80051a0:	d109      	bne.n	80051b6 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 80051a2:	4b19      	ldr	r3, [pc, #100]	; (8005208 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80051a4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80051a8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80051ac:	4a18      	ldr	r2, [pc, #96]	; (8005210 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 80051ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80051b2:	613b      	str	r3, [r7, #16]
 80051b4:	e008      	b.n	80051c8 <HAL_RCCEx_GetPeriphCLKFreq+0x6c>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 80051b6:	4b14      	ldr	r3, [pc, #80]	; (8005208 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80051b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80051bc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80051c0:	4a14      	ldr	r2, [pc, #80]	; (8005214 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 80051c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80051c6:	613b      	str	r3, [r7, #16]
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 80051c8:	4b0f      	ldr	r3, [pc, #60]	; (8005208 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80051ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80051ce:	099b      	lsrs	r3, r3, #6
 80051d0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80051d4:	693b      	ldr	r3, [r7, #16]
 80051d6:	fb02 f303 	mul.w	r3, r2, r3
 80051da:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 80051dc:	4b0a      	ldr	r3, [pc, #40]	; (8005208 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80051de:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80051e2:	0f1b      	lsrs	r3, r3, #28
 80051e4:	f003 0307 	and.w	r3, r3, #7
 80051e8:	68ba      	ldr	r2, [r7, #8]
 80051ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80051ee:	617b      	str	r3, [r7, #20]
          break;
 80051f0:	e002      	b.n	80051f8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 80051f2:	2300      	movs	r3, #0
 80051f4:	617b      	str	r3, [r7, #20]
          break;
 80051f6:	bf00      	nop
        }
      }
      break;
 80051f8:	bf00      	nop
    }
  }
  return frequency;
 80051fa:	697b      	ldr	r3, [r7, #20]
}
 80051fc:	4618      	mov	r0, r3
 80051fe:	371c      	adds	r7, #28
 8005200:	46bd      	mov	sp, r7
 8005202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005206:	4770      	bx	lr
 8005208:	40023800 	.word	0x40023800
 800520c:	00bb8000 	.word	0x00bb8000
 8005210:	007a1200 	.word	0x007a1200
 8005214:	00f42400 	.word	0x00f42400

08005218 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005218:	b580      	push	{r7, lr}
 800521a:	b082      	sub	sp, #8
 800521c:	af00      	add	r7, sp, #0
 800521e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	2b00      	cmp	r3, #0
 8005224:	d101      	bne.n	800522a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005226:	2301      	movs	r3, #1
 8005228:	e113      	b.n	8005452 <HAL_SPI_Init+0x23a>
  }

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	4a8b      	ldr	r2, [pc, #556]	; (800545c <HAL_SPI_Init+0x244>)
 8005230:	4293      	cmp	r3, r2
 8005232:	d018      	beq.n	8005266 <HAL_SPI_Init+0x4e>
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	4a89      	ldr	r2, [pc, #548]	; (8005460 <HAL_SPI_Init+0x248>)
 800523a:	4293      	cmp	r3, r2
 800523c:	d013      	beq.n	8005266 <HAL_SPI_Init+0x4e>
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	4a88      	ldr	r2, [pc, #544]	; (8005464 <HAL_SPI_Init+0x24c>)
 8005244:	4293      	cmp	r3, r2
 8005246:	d00e      	beq.n	8005266 <HAL_SPI_Init+0x4e>
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	4a86      	ldr	r2, [pc, #536]	; (8005468 <HAL_SPI_Init+0x250>)
 800524e:	4293      	cmp	r3, r2
 8005250:	d009      	beq.n	8005266 <HAL_SPI_Init+0x4e>
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	4a85      	ldr	r2, [pc, #532]	; (800546c <HAL_SPI_Init+0x254>)
 8005258:	4293      	cmp	r3, r2
 800525a:	d004      	beq.n	8005266 <HAL_SPI_Init+0x4e>
 800525c:	f44f 71a1 	mov.w	r1, #322	; 0x142
 8005260:	4883      	ldr	r0, [pc, #524]	; (8005470 <HAL_SPI_Init+0x258>)
 8005262:	f7fb fc9a 	bl	8000b9a <assert_failed>
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	685b      	ldr	r3, [r3, #4]
 800526a:	2b00      	cmp	r3, #0
 800526c:	d009      	beq.n	8005282 <HAL_SPI_Init+0x6a>
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	685b      	ldr	r3, [r3, #4]
 8005272:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005276:	d004      	beq.n	8005282 <HAL_SPI_Init+0x6a>
 8005278:	f240 1143 	movw	r1, #323	; 0x143
 800527c:	487c      	ldr	r0, [pc, #496]	; (8005470 <HAL_SPI_Init+0x258>)
 800527e:	f7fb fc8c 	bl	8000b9a <assert_failed>
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	689b      	ldr	r3, [r3, #8]
 8005286:	2b00      	cmp	r3, #0
 8005288:	d00e      	beq.n	80052a8 <HAL_SPI_Init+0x90>
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	689b      	ldr	r3, [r3, #8]
 800528e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005292:	d009      	beq.n	80052a8 <HAL_SPI_Init+0x90>
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	689b      	ldr	r3, [r3, #8]
 8005298:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800529c:	d004      	beq.n	80052a8 <HAL_SPI_Init+0x90>
 800529e:	f44f 71a2 	mov.w	r1, #324	; 0x144
 80052a2:	4873      	ldr	r0, [pc, #460]	; (8005470 <HAL_SPI_Init+0x258>)
 80052a4:	f7fb fc79 	bl	8000b9a <assert_failed>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	68db      	ldr	r3, [r3, #12]
 80052ac:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80052b0:	d008      	beq.n	80052c4 <HAL_SPI_Init+0xac>
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	68db      	ldr	r3, [r3, #12]
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d004      	beq.n	80052c4 <HAL_SPI_Init+0xac>
 80052ba:	f240 1145 	movw	r1, #325	; 0x145
 80052be:	486c      	ldr	r0, [pc, #432]	; (8005470 <HAL_SPI_Init+0x258>)
 80052c0:	f7fb fc6b 	bl	8000b9a <assert_failed>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	699b      	ldr	r3, [r3, #24]
 80052c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80052cc:	d00d      	beq.n	80052ea <HAL_SPI_Init+0xd2>
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	699b      	ldr	r3, [r3, #24]
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d009      	beq.n	80052ea <HAL_SPI_Init+0xd2>
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	699b      	ldr	r3, [r3, #24]
 80052da:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80052de:	d004      	beq.n	80052ea <HAL_SPI_Init+0xd2>
 80052e0:	f44f 71a3 	mov.w	r1, #326	; 0x146
 80052e4:	4862      	ldr	r0, [pc, #392]	; (8005470 <HAL_SPI_Init+0x258>)
 80052e6:	f7fb fc58 	bl	8000b9a <assert_failed>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	69db      	ldr	r3, [r3, #28]
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d020      	beq.n	8005334 <HAL_SPI_Init+0x11c>
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	69db      	ldr	r3, [r3, #28]
 80052f6:	2b08      	cmp	r3, #8
 80052f8:	d01c      	beq.n	8005334 <HAL_SPI_Init+0x11c>
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	69db      	ldr	r3, [r3, #28]
 80052fe:	2b10      	cmp	r3, #16
 8005300:	d018      	beq.n	8005334 <HAL_SPI_Init+0x11c>
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	69db      	ldr	r3, [r3, #28]
 8005306:	2b18      	cmp	r3, #24
 8005308:	d014      	beq.n	8005334 <HAL_SPI_Init+0x11c>
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	69db      	ldr	r3, [r3, #28]
 800530e:	2b20      	cmp	r3, #32
 8005310:	d010      	beq.n	8005334 <HAL_SPI_Init+0x11c>
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	69db      	ldr	r3, [r3, #28]
 8005316:	2b28      	cmp	r3, #40	; 0x28
 8005318:	d00c      	beq.n	8005334 <HAL_SPI_Init+0x11c>
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	69db      	ldr	r3, [r3, #28]
 800531e:	2b30      	cmp	r3, #48	; 0x30
 8005320:	d008      	beq.n	8005334 <HAL_SPI_Init+0x11c>
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	69db      	ldr	r3, [r3, #28]
 8005326:	2b38      	cmp	r3, #56	; 0x38
 8005328:	d004      	beq.n	8005334 <HAL_SPI_Init+0x11c>
 800532a:	f240 1147 	movw	r1, #327	; 0x147
 800532e:	4850      	ldr	r0, [pc, #320]	; (8005470 <HAL_SPI_Init+0x258>)
 8005330:	f7fb fc33 	bl	8000b9a <assert_failed>
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	6a1b      	ldr	r3, [r3, #32]
 8005338:	2b00      	cmp	r3, #0
 800533a:	d008      	beq.n	800534e <HAL_SPI_Init+0x136>
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	6a1b      	ldr	r3, [r3, #32]
 8005340:	2b80      	cmp	r3, #128	; 0x80
 8005342:	d004      	beq.n	800534e <HAL_SPI_Init+0x136>
 8005344:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8005348:	4849      	ldr	r0, [pc, #292]	; (8005470 <HAL_SPI_Init+0x258>)
 800534a:	f7fb fc26 	bl	8000b9a <assert_failed>
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005352:	2b00      	cmp	r3, #0
 8005354:	d008      	beq.n	8005368 <HAL_SPI_Init+0x150>
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800535a:	2b10      	cmp	r3, #16
 800535c:	d004      	beq.n	8005368 <HAL_SPI_Init+0x150>
 800535e:	f240 1149 	movw	r1, #329	; 0x149
 8005362:	4843      	ldr	r0, [pc, #268]	; (8005470 <HAL_SPI_Init+0x258>)
 8005364:	f7fb fc19 	bl	8000b9a <assert_failed>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800536c:	2b00      	cmp	r3, #0
 800536e:	d119      	bne.n	80053a4 <HAL_SPI_Init+0x18c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	691b      	ldr	r3, [r3, #16]
 8005374:	2b00      	cmp	r3, #0
 8005376:	d008      	beq.n	800538a <HAL_SPI_Init+0x172>
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	691b      	ldr	r3, [r3, #16]
 800537c:	2b02      	cmp	r3, #2
 800537e:	d004      	beq.n	800538a <HAL_SPI_Init+0x172>
 8005380:	f44f 71a6 	mov.w	r1, #332	; 0x14c
 8005384:	483a      	ldr	r0, [pc, #232]	; (8005470 <HAL_SPI_Init+0x258>)
 8005386:	f7fb fc08 	bl	8000b9a <assert_failed>
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	695b      	ldr	r3, [r3, #20]
 800538e:	2b00      	cmp	r3, #0
 8005390:	d008      	beq.n	80053a4 <HAL_SPI_Init+0x18c>
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	695b      	ldr	r3, [r3, #20]
 8005396:	2b01      	cmp	r3, #1
 8005398:	d004      	beq.n	80053a4 <HAL_SPI_Init+0x18c>
 800539a:	f240 114d 	movw	r1, #333	; 0x14d
 800539e:	4834      	ldr	r0, [pc, #208]	; (8005470 <HAL_SPI_Init+0x258>)
 80053a0:	f7fb fbfb 	bl	8000b9a <assert_failed>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	2200      	movs	r2, #0
 80053a8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80053b0:	b2db      	uxtb	r3, r3
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d106      	bne.n	80053c4 <HAL_SPI_Init+0x1ac>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	2200      	movs	r2, #0
 80053ba:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80053be:	6878      	ldr	r0, [r7, #4]
 80053c0:	f7fb fc2c 	bl	8000c1c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	2202      	movs	r2, #2
 80053c8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	681a      	ldr	r2, [r3, #0]
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80053da:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	685a      	ldr	r2, [r3, #4]
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	689b      	ldr	r3, [r3, #8]
 80053e4:	431a      	orrs	r2, r3
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	68db      	ldr	r3, [r3, #12]
 80053ea:	431a      	orrs	r2, r3
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	691b      	ldr	r3, [r3, #16]
 80053f0:	431a      	orrs	r2, r3
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	695b      	ldr	r3, [r3, #20]
 80053f6:	431a      	orrs	r2, r3
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	699b      	ldr	r3, [r3, #24]
 80053fc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005400:	431a      	orrs	r2, r3
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	69db      	ldr	r3, [r3, #28]
 8005406:	431a      	orrs	r2, r3
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	6a1b      	ldr	r3, [r3, #32]
 800540c:	ea42 0103 	orr.w	r1, r2, r3
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	430a      	orrs	r2, r1
 800541a:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	699b      	ldr	r3, [r3, #24]
 8005420:	0c1b      	lsrs	r3, r3, #16
 8005422:	f003 0104 	and.w	r1, r3, #4
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	430a      	orrs	r2, r1
 8005430:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	69da      	ldr	r2, [r3, #28]
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005440:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	2200      	movs	r2, #0
 8005446:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	2201      	movs	r2, #1
 800544c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005450:	2300      	movs	r3, #0
}
 8005452:	4618      	mov	r0, r3
 8005454:	3708      	adds	r7, #8
 8005456:	46bd      	mov	sp, r7
 8005458:	bd80      	pop	{r7, pc}
 800545a:	bf00      	nop
 800545c:	40013000 	.word	0x40013000
 8005460:	40003800 	.word	0x40003800
 8005464:	40003c00 	.word	0x40003c00
 8005468:	40013400 	.word	0x40013400
 800546c:	40015000 	.word	0x40015000
 8005470:	0800a220 	.word	0x0800a220

08005474 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005474:	b580      	push	{r7, lr}
 8005476:	b082      	sub	sp, #8
 8005478:	af00      	add	r7, sp, #0
 800547a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	2b00      	cmp	r3, #0
 8005480:	d101      	bne.n	8005486 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005482:	2301      	movs	r3, #1
 8005484:	e083      	b.n	800558e <HAL_TIM_Base_Init+0x11a>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	4a43      	ldr	r2, [pc, #268]	; (8005598 <HAL_TIM_Base_Init+0x124>)
 800548c:	4293      	cmp	r3, r2
 800548e:	d027      	beq.n	80054e0 <HAL_TIM_Base_Init+0x6c>
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005498:	d022      	beq.n	80054e0 <HAL_TIM_Base_Init+0x6c>
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	4a3f      	ldr	r2, [pc, #252]	; (800559c <HAL_TIM_Base_Init+0x128>)
 80054a0:	4293      	cmp	r3, r2
 80054a2:	d01d      	beq.n	80054e0 <HAL_TIM_Base_Init+0x6c>
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	4a3d      	ldr	r2, [pc, #244]	; (80055a0 <HAL_TIM_Base_Init+0x12c>)
 80054aa:	4293      	cmp	r3, r2
 80054ac:	d018      	beq.n	80054e0 <HAL_TIM_Base_Init+0x6c>
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	4a3c      	ldr	r2, [pc, #240]	; (80055a4 <HAL_TIM_Base_Init+0x130>)
 80054b4:	4293      	cmp	r3, r2
 80054b6:	d013      	beq.n	80054e0 <HAL_TIM_Base_Init+0x6c>
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	4a3a      	ldr	r2, [pc, #232]	; (80055a8 <HAL_TIM_Base_Init+0x134>)
 80054be:	4293      	cmp	r3, r2
 80054c0:	d00e      	beq.n	80054e0 <HAL_TIM_Base_Init+0x6c>
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	4a39      	ldr	r2, [pc, #228]	; (80055ac <HAL_TIM_Base_Init+0x138>)
 80054c8:	4293      	cmp	r3, r2
 80054ca:	d009      	beq.n	80054e0 <HAL_TIM_Base_Init+0x6c>
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	4a37      	ldr	r2, [pc, #220]	; (80055b0 <HAL_TIM_Base_Init+0x13c>)
 80054d2:	4293      	cmp	r3, r2
 80054d4:	d004      	beq.n	80054e0 <HAL_TIM_Base_Init+0x6c>
 80054d6:	f44f 7189 	mov.w	r1, #274	; 0x112
 80054da:	4836      	ldr	r0, [pc, #216]	; (80055b4 <HAL_TIM_Base_Init+0x140>)
 80054dc:	f7fb fb5d 	bl	8000b9a <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	689b      	ldr	r3, [r3, #8]
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d014      	beq.n	8005512 <HAL_TIM_Base_Init+0x9e>
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	689b      	ldr	r3, [r3, #8]
 80054ec:	2b10      	cmp	r3, #16
 80054ee:	d010      	beq.n	8005512 <HAL_TIM_Base_Init+0x9e>
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	689b      	ldr	r3, [r3, #8]
 80054f4:	2b20      	cmp	r3, #32
 80054f6:	d00c      	beq.n	8005512 <HAL_TIM_Base_Init+0x9e>
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	689b      	ldr	r3, [r3, #8]
 80054fc:	2b40      	cmp	r3, #64	; 0x40
 80054fe:	d008      	beq.n	8005512 <HAL_TIM_Base_Init+0x9e>
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	689b      	ldr	r3, [r3, #8]
 8005504:	2b60      	cmp	r3, #96	; 0x60
 8005506:	d004      	beq.n	8005512 <HAL_TIM_Base_Init+0x9e>
 8005508:	f240 1113 	movw	r1, #275	; 0x113
 800550c:	4829      	ldr	r0, [pc, #164]	; (80055b4 <HAL_TIM_Base_Init+0x140>)
 800550e:	f7fb fb44 	bl	8000b9a <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	691b      	ldr	r3, [r3, #16]
 8005516:	2b00      	cmp	r3, #0
 8005518:	d00e      	beq.n	8005538 <HAL_TIM_Base_Init+0xc4>
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	691b      	ldr	r3, [r3, #16]
 800551e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005522:	d009      	beq.n	8005538 <HAL_TIM_Base_Init+0xc4>
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	691b      	ldr	r3, [r3, #16]
 8005528:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800552c:	d004      	beq.n	8005538 <HAL_TIM_Base_Init+0xc4>
 800552e:	f44f 718a 	mov.w	r1, #276	; 0x114
 8005532:	4820      	ldr	r0, [pc, #128]	; (80055b4 <HAL_TIM_Base_Init+0x140>)
 8005534:	f7fb fb31 	bl	8000b9a <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	699b      	ldr	r3, [r3, #24]
 800553c:	2b00      	cmp	r3, #0
 800553e:	d008      	beq.n	8005552 <HAL_TIM_Base_Init+0xde>
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	699b      	ldr	r3, [r3, #24]
 8005544:	2b80      	cmp	r3, #128	; 0x80
 8005546:	d004      	beq.n	8005552 <HAL_TIM_Base_Init+0xde>
 8005548:	f240 1115 	movw	r1, #277	; 0x115
 800554c:	4819      	ldr	r0, [pc, #100]	; (80055b4 <HAL_TIM_Base_Init+0x140>)
 800554e:	f7fb fb24 	bl	8000b9a <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005558:	b2db      	uxtb	r3, r3
 800555a:	2b00      	cmp	r3, #0
 800555c:	d106      	bne.n	800556c <HAL_TIM_Base_Init+0xf8>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	2200      	movs	r2, #0
 8005562:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005566:	6878      	ldr	r0, [r7, #4]
 8005568:	f7fb fcee 	bl	8000f48 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	2202      	movs	r2, #2
 8005570:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681a      	ldr	r2, [r3, #0]
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	3304      	adds	r3, #4
 800557c:	4619      	mov	r1, r3
 800557e:	4610      	mov	r0, r2
 8005580:	f000 fe1c 	bl	80061bc <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	2201      	movs	r2, #1
 8005588:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800558c:	2300      	movs	r3, #0
}
 800558e:	4618      	mov	r0, r3
 8005590:	3708      	adds	r7, #8
 8005592:	46bd      	mov	sp, r7
 8005594:	bd80      	pop	{r7, pc}
 8005596:	bf00      	nop
 8005598:	40010000 	.word	0x40010000
 800559c:	40000400 	.word	0x40000400
 80055a0:	40000800 	.word	0x40000800
 80055a4:	40000c00 	.word	0x40000c00
 80055a8:	40014000 	.word	0x40014000
 80055ac:	40014400 	.word	0x40014400
 80055b0:	40014800 	.word	0x40014800
 80055b4:	0800a258 	.word	0x0800a258

080055b8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80055b8:	b580      	push	{r7, lr}
 80055ba:	b082      	sub	sp, #8
 80055bc:	af00      	add	r7, sp, #0
 80055be:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d101      	bne.n	80055ca <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80055c6:	2301      	movs	r3, #1
 80055c8:	e083      	b.n	80056d2 <HAL_TIM_PWM_Init+0x11a>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	4a43      	ldr	r2, [pc, #268]	; (80056dc <HAL_TIM_PWM_Init+0x124>)
 80055d0:	4293      	cmp	r3, r2
 80055d2:	d027      	beq.n	8005624 <HAL_TIM_PWM_Init+0x6c>
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80055dc:	d022      	beq.n	8005624 <HAL_TIM_PWM_Init+0x6c>
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	4a3f      	ldr	r2, [pc, #252]	; (80056e0 <HAL_TIM_PWM_Init+0x128>)
 80055e4:	4293      	cmp	r3, r2
 80055e6:	d01d      	beq.n	8005624 <HAL_TIM_PWM_Init+0x6c>
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	4a3d      	ldr	r2, [pc, #244]	; (80056e4 <HAL_TIM_PWM_Init+0x12c>)
 80055ee:	4293      	cmp	r3, r2
 80055f0:	d018      	beq.n	8005624 <HAL_TIM_PWM_Init+0x6c>
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	4a3c      	ldr	r2, [pc, #240]	; (80056e8 <HAL_TIM_PWM_Init+0x130>)
 80055f8:	4293      	cmp	r3, r2
 80055fa:	d013      	beq.n	8005624 <HAL_TIM_PWM_Init+0x6c>
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	4a3a      	ldr	r2, [pc, #232]	; (80056ec <HAL_TIM_PWM_Init+0x134>)
 8005602:	4293      	cmp	r3, r2
 8005604:	d00e      	beq.n	8005624 <HAL_TIM_PWM_Init+0x6c>
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	4a39      	ldr	r2, [pc, #228]	; (80056f0 <HAL_TIM_PWM_Init+0x138>)
 800560c:	4293      	cmp	r3, r2
 800560e:	d009      	beq.n	8005624 <HAL_TIM_PWM_Init+0x6c>
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	4a37      	ldr	r2, [pc, #220]	; (80056f4 <HAL_TIM_PWM_Init+0x13c>)
 8005616:	4293      	cmp	r3, r2
 8005618:	d004      	beq.n	8005624 <HAL_TIM_PWM_Init+0x6c>
 800561a:	f240 419b 	movw	r1, #1179	; 0x49b
 800561e:	4836      	ldr	r0, [pc, #216]	; (80056f8 <HAL_TIM_PWM_Init+0x140>)
 8005620:	f7fb fabb 	bl	8000b9a <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	689b      	ldr	r3, [r3, #8]
 8005628:	2b00      	cmp	r3, #0
 800562a:	d014      	beq.n	8005656 <HAL_TIM_PWM_Init+0x9e>
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	689b      	ldr	r3, [r3, #8]
 8005630:	2b10      	cmp	r3, #16
 8005632:	d010      	beq.n	8005656 <HAL_TIM_PWM_Init+0x9e>
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	689b      	ldr	r3, [r3, #8]
 8005638:	2b20      	cmp	r3, #32
 800563a:	d00c      	beq.n	8005656 <HAL_TIM_PWM_Init+0x9e>
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	689b      	ldr	r3, [r3, #8]
 8005640:	2b40      	cmp	r3, #64	; 0x40
 8005642:	d008      	beq.n	8005656 <HAL_TIM_PWM_Init+0x9e>
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	689b      	ldr	r3, [r3, #8]
 8005648:	2b60      	cmp	r3, #96	; 0x60
 800564a:	d004      	beq.n	8005656 <HAL_TIM_PWM_Init+0x9e>
 800564c:	f240 419c 	movw	r1, #1180	; 0x49c
 8005650:	4829      	ldr	r0, [pc, #164]	; (80056f8 <HAL_TIM_PWM_Init+0x140>)
 8005652:	f7fb faa2 	bl	8000b9a <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	691b      	ldr	r3, [r3, #16]
 800565a:	2b00      	cmp	r3, #0
 800565c:	d00e      	beq.n	800567c <HAL_TIM_PWM_Init+0xc4>
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	691b      	ldr	r3, [r3, #16]
 8005662:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005666:	d009      	beq.n	800567c <HAL_TIM_PWM_Init+0xc4>
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	691b      	ldr	r3, [r3, #16]
 800566c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005670:	d004      	beq.n	800567c <HAL_TIM_PWM_Init+0xc4>
 8005672:	f240 419d 	movw	r1, #1181	; 0x49d
 8005676:	4820      	ldr	r0, [pc, #128]	; (80056f8 <HAL_TIM_PWM_Init+0x140>)
 8005678:	f7fb fa8f 	bl	8000b9a <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	699b      	ldr	r3, [r3, #24]
 8005680:	2b00      	cmp	r3, #0
 8005682:	d008      	beq.n	8005696 <HAL_TIM_PWM_Init+0xde>
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	699b      	ldr	r3, [r3, #24]
 8005688:	2b80      	cmp	r3, #128	; 0x80
 800568a:	d004      	beq.n	8005696 <HAL_TIM_PWM_Init+0xde>
 800568c:	f240 419e 	movw	r1, #1182	; 0x49e
 8005690:	4819      	ldr	r0, [pc, #100]	; (80056f8 <HAL_TIM_PWM_Init+0x140>)
 8005692:	f7fb fa82 	bl	8000b9a <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800569c:	b2db      	uxtb	r3, r3
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d106      	bne.n	80056b0 <HAL_TIM_PWM_Init+0xf8>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	2200      	movs	r2, #0
 80056a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80056aa:	6878      	ldr	r0, [r7, #4]
 80056ac:	f000 f826 	bl	80056fc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	2202      	movs	r2, #2
 80056b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681a      	ldr	r2, [r3, #0]
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	3304      	adds	r3, #4
 80056c0:	4619      	mov	r1, r3
 80056c2:	4610      	mov	r0, r2
 80056c4:	f000 fd7a 	bl	80061bc <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	2201      	movs	r2, #1
 80056cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80056d0:	2300      	movs	r3, #0
}
 80056d2:	4618      	mov	r0, r3
 80056d4:	3708      	adds	r7, #8
 80056d6:	46bd      	mov	sp, r7
 80056d8:	bd80      	pop	{r7, pc}
 80056da:	bf00      	nop
 80056dc:	40010000 	.word	0x40010000
 80056e0:	40000400 	.word	0x40000400
 80056e4:	40000800 	.word	0x40000800
 80056e8:	40000c00 	.word	0x40000c00
 80056ec:	40014000 	.word	0x40014000
 80056f0:	40014400 	.word	0x40014400
 80056f4:	40014800 	.word	0x40014800
 80056f8:	0800a258 	.word	0x0800a258

080056fc <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80056fc:	b480      	push	{r7}
 80056fe:	b083      	sub	sp, #12
 8005700:	af00      	add	r7, sp, #0
 8005702:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005704:	bf00      	nop
 8005706:	370c      	adds	r7, #12
 8005708:	46bd      	mov	sp, r7
 800570a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800570e:	4770      	bx	lr

08005710 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005710:	b580      	push	{r7, lr}
 8005712:	b084      	sub	sp, #16
 8005714:	af00      	add	r7, sp, #0
 8005716:	6078      	str	r0, [r7, #4]
 8005718:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	4a4e      	ldr	r2, [pc, #312]	; (8005858 <HAL_TIM_PWM_Start+0x148>)
 8005720:	4293      	cmp	r3, r2
 8005722:	d10b      	bne.n	800573c <HAL_TIM_PWM_Start+0x2c>
 8005724:	683b      	ldr	r3, [r7, #0]
 8005726:	2b00      	cmp	r3, #0
 8005728:	d06c      	beq.n	8005804 <HAL_TIM_PWM_Start+0xf4>
 800572a:	683b      	ldr	r3, [r7, #0]
 800572c:	2b04      	cmp	r3, #4
 800572e:	d069      	beq.n	8005804 <HAL_TIM_PWM_Start+0xf4>
 8005730:	683b      	ldr	r3, [r7, #0]
 8005732:	2b08      	cmp	r3, #8
 8005734:	d066      	beq.n	8005804 <HAL_TIM_PWM_Start+0xf4>
 8005736:	683b      	ldr	r3, [r7, #0]
 8005738:	2b0c      	cmp	r3, #12
 800573a:	d063      	beq.n	8005804 <HAL_TIM_PWM_Start+0xf4>
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005744:	d10b      	bne.n	800575e <HAL_TIM_PWM_Start+0x4e>
 8005746:	683b      	ldr	r3, [r7, #0]
 8005748:	2b00      	cmp	r3, #0
 800574a:	d05b      	beq.n	8005804 <HAL_TIM_PWM_Start+0xf4>
 800574c:	683b      	ldr	r3, [r7, #0]
 800574e:	2b04      	cmp	r3, #4
 8005750:	d058      	beq.n	8005804 <HAL_TIM_PWM_Start+0xf4>
 8005752:	683b      	ldr	r3, [r7, #0]
 8005754:	2b08      	cmp	r3, #8
 8005756:	d055      	beq.n	8005804 <HAL_TIM_PWM_Start+0xf4>
 8005758:	683b      	ldr	r3, [r7, #0]
 800575a:	2b0c      	cmp	r3, #12
 800575c:	d052      	beq.n	8005804 <HAL_TIM_PWM_Start+0xf4>
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	4a3e      	ldr	r2, [pc, #248]	; (800585c <HAL_TIM_PWM_Start+0x14c>)
 8005764:	4293      	cmp	r3, r2
 8005766:	d10b      	bne.n	8005780 <HAL_TIM_PWM_Start+0x70>
 8005768:	683b      	ldr	r3, [r7, #0]
 800576a:	2b00      	cmp	r3, #0
 800576c:	d04a      	beq.n	8005804 <HAL_TIM_PWM_Start+0xf4>
 800576e:	683b      	ldr	r3, [r7, #0]
 8005770:	2b04      	cmp	r3, #4
 8005772:	d047      	beq.n	8005804 <HAL_TIM_PWM_Start+0xf4>
 8005774:	683b      	ldr	r3, [r7, #0]
 8005776:	2b08      	cmp	r3, #8
 8005778:	d044      	beq.n	8005804 <HAL_TIM_PWM_Start+0xf4>
 800577a:	683b      	ldr	r3, [r7, #0]
 800577c:	2b0c      	cmp	r3, #12
 800577e:	d041      	beq.n	8005804 <HAL_TIM_PWM_Start+0xf4>
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	4a36      	ldr	r2, [pc, #216]	; (8005860 <HAL_TIM_PWM_Start+0x150>)
 8005786:	4293      	cmp	r3, r2
 8005788:	d10b      	bne.n	80057a2 <HAL_TIM_PWM_Start+0x92>
 800578a:	683b      	ldr	r3, [r7, #0]
 800578c:	2b00      	cmp	r3, #0
 800578e:	d039      	beq.n	8005804 <HAL_TIM_PWM_Start+0xf4>
 8005790:	683b      	ldr	r3, [r7, #0]
 8005792:	2b04      	cmp	r3, #4
 8005794:	d036      	beq.n	8005804 <HAL_TIM_PWM_Start+0xf4>
 8005796:	683b      	ldr	r3, [r7, #0]
 8005798:	2b08      	cmp	r3, #8
 800579a:	d033      	beq.n	8005804 <HAL_TIM_PWM_Start+0xf4>
 800579c:	683b      	ldr	r3, [r7, #0]
 800579e:	2b0c      	cmp	r3, #12
 80057a0:	d030      	beq.n	8005804 <HAL_TIM_PWM_Start+0xf4>
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	4a2f      	ldr	r2, [pc, #188]	; (8005864 <HAL_TIM_PWM_Start+0x154>)
 80057a8:	4293      	cmp	r3, r2
 80057aa:	d10b      	bne.n	80057c4 <HAL_TIM_PWM_Start+0xb4>
 80057ac:	683b      	ldr	r3, [r7, #0]
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d028      	beq.n	8005804 <HAL_TIM_PWM_Start+0xf4>
 80057b2:	683b      	ldr	r3, [r7, #0]
 80057b4:	2b04      	cmp	r3, #4
 80057b6:	d025      	beq.n	8005804 <HAL_TIM_PWM_Start+0xf4>
 80057b8:	683b      	ldr	r3, [r7, #0]
 80057ba:	2b08      	cmp	r3, #8
 80057bc:	d022      	beq.n	8005804 <HAL_TIM_PWM_Start+0xf4>
 80057be:	683b      	ldr	r3, [r7, #0]
 80057c0:	2b0c      	cmp	r3, #12
 80057c2:	d01f      	beq.n	8005804 <HAL_TIM_PWM_Start+0xf4>
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	4a27      	ldr	r2, [pc, #156]	; (8005868 <HAL_TIM_PWM_Start+0x158>)
 80057ca:	4293      	cmp	r3, r2
 80057cc:	d105      	bne.n	80057da <HAL_TIM_PWM_Start+0xca>
 80057ce:	683b      	ldr	r3, [r7, #0]
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d017      	beq.n	8005804 <HAL_TIM_PWM_Start+0xf4>
 80057d4:	683b      	ldr	r3, [r7, #0]
 80057d6:	2b04      	cmp	r3, #4
 80057d8:	d014      	beq.n	8005804 <HAL_TIM_PWM_Start+0xf4>
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	4a23      	ldr	r2, [pc, #140]	; (800586c <HAL_TIM_PWM_Start+0x15c>)
 80057e0:	4293      	cmp	r3, r2
 80057e2:	d102      	bne.n	80057ea <HAL_TIM_PWM_Start+0xda>
 80057e4:	683b      	ldr	r3, [r7, #0]
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d00c      	beq.n	8005804 <HAL_TIM_PWM_Start+0xf4>
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	4a20      	ldr	r2, [pc, #128]	; (8005870 <HAL_TIM_PWM_Start+0x160>)
 80057f0:	4293      	cmp	r3, r2
 80057f2:	d102      	bne.n	80057fa <HAL_TIM_PWM_Start+0xea>
 80057f4:	683b      	ldr	r3, [r7, #0]
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d004      	beq.n	8005804 <HAL_TIM_PWM_Start+0xf4>
 80057fa:	f240 5113 	movw	r1, #1299	; 0x513
 80057fe:	481d      	ldr	r0, [pc, #116]	; (8005874 <HAL_TIM_PWM_Start+0x164>)
 8005800:	f7fb f9cb 	bl	8000b9a <assert_failed>

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	2201      	movs	r2, #1
 800580a:	6839      	ldr	r1, [r7, #0]
 800580c:	4618      	mov	r0, r3
 800580e:	f001 f805 	bl	800681c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	4a10      	ldr	r2, [pc, #64]	; (8005858 <HAL_TIM_PWM_Start+0x148>)
 8005818:	4293      	cmp	r3, r2
 800581a:	d107      	bne.n	800582c <HAL_TIM_PWM_Start+0x11c>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800582a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	689b      	ldr	r3, [r3, #8]
 8005832:	f003 0307 	and.w	r3, r3, #7
 8005836:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	2b06      	cmp	r3, #6
 800583c:	d007      	beq.n	800584e <HAL_TIM_PWM_Start+0x13e>
  {
    __HAL_TIM_ENABLE(htim);
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	681a      	ldr	r2, [r3, #0]
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	f042 0201 	orr.w	r2, r2, #1
 800584c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800584e:	2300      	movs	r3, #0
}
 8005850:	4618      	mov	r0, r3
 8005852:	3710      	adds	r7, #16
 8005854:	46bd      	mov	sp, r7
 8005856:	bd80      	pop	{r7, pc}
 8005858:	40010000 	.word	0x40010000
 800585c:	40000400 	.word	0x40000400
 8005860:	40000800 	.word	0x40000800
 8005864:	40000c00 	.word	0x40000c00
 8005868:	40014000 	.word	0x40014000
 800586c:	40014400 	.word	0x40014400
 8005870:	40014800 	.word	0x40014800
 8005874:	0800a258 	.word	0x0800a258

08005878 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005878:	b580      	push	{r7, lr}
 800587a:	b084      	sub	sp, #16
 800587c:	af00      	add	r7, sp, #0
 800587e:	60f8      	str	r0, [r7, #12]
 8005880:	60b9      	str	r1, [r7, #8]
 8005882:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_CHANNELS(Channel));
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	2b00      	cmp	r3, #0
 8005888:	d010      	beq.n	80058ac <HAL_TIM_PWM_ConfigChannel+0x34>
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	2b04      	cmp	r3, #4
 800588e:	d00d      	beq.n	80058ac <HAL_TIM_PWM_ConfigChannel+0x34>
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	2b08      	cmp	r3, #8
 8005894:	d00a      	beq.n	80058ac <HAL_TIM_PWM_ConfigChannel+0x34>
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	2b0c      	cmp	r3, #12
 800589a:	d007      	beq.n	80058ac <HAL_TIM_PWM_ConfigChannel+0x34>
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	2b3c      	cmp	r3, #60	; 0x3c
 80058a0:	d004      	beq.n	80058ac <HAL_TIM_PWM_ConfigChannel+0x34>
 80058a2:	f640 51ec 	movw	r1, #3564	; 0xdec
 80058a6:	4895      	ldr	r0, [pc, #596]	; (8005afc <HAL_TIM_PWM_ConfigChannel+0x284>)
 80058a8:	f7fb f977 	bl	8000b9a <assert_failed>
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
 80058ac:	68bb      	ldr	r3, [r7, #8]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	2b60      	cmp	r3, #96	; 0x60
 80058b2:	d008      	beq.n	80058c6 <HAL_TIM_PWM_ConfigChannel+0x4e>
 80058b4:	68bb      	ldr	r3, [r7, #8]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	2b70      	cmp	r3, #112	; 0x70
 80058ba:	d004      	beq.n	80058c6 <HAL_TIM_PWM_ConfigChannel+0x4e>
 80058bc:	f640 51ed 	movw	r1, #3565	; 0xded
 80058c0:	488e      	ldr	r0, [pc, #568]	; (8005afc <HAL_TIM_PWM_ConfigChannel+0x284>)
 80058c2:	f7fb f96a 	bl	8000b9a <assert_failed>
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
 80058c6:	68bb      	ldr	r3, [r7, #8]
 80058c8:	689b      	ldr	r3, [r3, #8]
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d008      	beq.n	80058e0 <HAL_TIM_PWM_ConfigChannel+0x68>
 80058ce:	68bb      	ldr	r3, [r7, #8]
 80058d0:	689b      	ldr	r3, [r3, #8]
 80058d2:	2b02      	cmp	r3, #2
 80058d4:	d004      	beq.n	80058e0 <HAL_TIM_PWM_ConfigChannel+0x68>
 80058d6:	f640 51ee 	movw	r1, #3566	; 0xdee
 80058da:	4888      	ldr	r0, [pc, #544]	; (8005afc <HAL_TIM_PWM_ConfigChannel+0x284>)
 80058dc:	f7fb f95d 	bl	8000b9a <assert_failed>
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));
 80058e0:	68bb      	ldr	r3, [r7, #8]
 80058e2:	691b      	ldr	r3, [r3, #16]
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d008      	beq.n	80058fa <HAL_TIM_PWM_ConfigChannel+0x82>
 80058e8:	68bb      	ldr	r3, [r7, #8]
 80058ea:	691b      	ldr	r3, [r3, #16]
 80058ec:	2b04      	cmp	r3, #4
 80058ee:	d004      	beq.n	80058fa <HAL_TIM_PWM_ConfigChannel+0x82>
 80058f0:	f640 51ef 	movw	r1, #3567	; 0xdef
 80058f4:	4881      	ldr	r0, [pc, #516]	; (8005afc <HAL_TIM_PWM_ConfigChannel+0x284>)
 80058f6:	f7fb f950 	bl	8000b9a <assert_failed>

  /* Process Locked */
  __HAL_LOCK(htim);
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005900:	2b01      	cmp	r3, #1
 8005902:	d101      	bne.n	8005908 <HAL_TIM_PWM_ConfigChannel+0x90>
 8005904:	2302      	movs	r3, #2
 8005906:	e152      	b.n	8005bae <HAL_TIM_PWM_ConfigChannel+0x336>
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	2201      	movs	r2, #1
 800590c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	2202      	movs	r2, #2
 8005914:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	2b0c      	cmp	r3, #12
 800591c:	f200 813d 	bhi.w	8005b9a <HAL_TIM_PWM_ConfigChannel+0x322>
 8005920:	a201      	add	r2, pc, #4	; (adr r2, 8005928 <HAL_TIM_PWM_ConfigChannel+0xb0>)
 8005922:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005926:	bf00      	nop
 8005928:	0800595d 	.word	0x0800595d
 800592c:	08005b9b 	.word	0x08005b9b
 8005930:	08005b9b 	.word	0x08005b9b
 8005934:	08005b9b 	.word	0x08005b9b
 8005938:	080059f7 	.word	0x080059f7
 800593c:	08005b9b 	.word	0x08005b9b
 8005940:	08005b9b 	.word	0x08005b9b
 8005944:	08005b9b 	.word	0x08005b9b
 8005948:	08005a7f 	.word	0x08005a7f
 800594c:	08005b9b 	.word	0x08005b9b
 8005950:	08005b9b 	.word	0x08005b9b
 8005954:	08005b9b 	.word	0x08005b9b
 8005958:	08005b1d 	.word	0x08005b1d
  {
    case TIM_CHANNEL_1:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	4a67      	ldr	r2, [pc, #412]	; (8005b00 <HAL_TIM_PWM_ConfigChannel+0x288>)
 8005962:	4293      	cmp	r3, r2
 8005964:	d027      	beq.n	80059b6 <HAL_TIM_PWM_ConfigChannel+0x13e>
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800596e:	d022      	beq.n	80059b6 <HAL_TIM_PWM_ConfigChannel+0x13e>
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	4a63      	ldr	r2, [pc, #396]	; (8005b04 <HAL_TIM_PWM_ConfigChannel+0x28c>)
 8005976:	4293      	cmp	r3, r2
 8005978:	d01d      	beq.n	80059b6 <HAL_TIM_PWM_ConfigChannel+0x13e>
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	4a62      	ldr	r2, [pc, #392]	; (8005b08 <HAL_TIM_PWM_ConfigChannel+0x290>)
 8005980:	4293      	cmp	r3, r2
 8005982:	d018      	beq.n	80059b6 <HAL_TIM_PWM_ConfigChannel+0x13e>
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	4a60      	ldr	r2, [pc, #384]	; (8005b0c <HAL_TIM_PWM_ConfigChannel+0x294>)
 800598a:	4293      	cmp	r3, r2
 800598c:	d013      	beq.n	80059b6 <HAL_TIM_PWM_ConfigChannel+0x13e>
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	4a5f      	ldr	r2, [pc, #380]	; (8005b10 <HAL_TIM_PWM_ConfigChannel+0x298>)
 8005994:	4293      	cmp	r3, r2
 8005996:	d00e      	beq.n	80059b6 <HAL_TIM_PWM_ConfigChannel+0x13e>
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	4a5d      	ldr	r2, [pc, #372]	; (8005b14 <HAL_TIM_PWM_ConfigChannel+0x29c>)
 800599e:	4293      	cmp	r3, r2
 80059a0:	d009      	beq.n	80059b6 <HAL_TIM_PWM_ConfigChannel+0x13e>
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	4a5c      	ldr	r2, [pc, #368]	; (8005b18 <HAL_TIM_PWM_ConfigChannel+0x2a0>)
 80059a8:	4293      	cmp	r3, r2
 80059aa:	d004      	beq.n	80059b6 <HAL_TIM_PWM_ConfigChannel+0x13e>
 80059ac:	f640 51fb 	movw	r1, #3579	; 0xdfb
 80059b0:	4852      	ldr	r0, [pc, #328]	; (8005afc <HAL_TIM_PWM_ConfigChannel+0x284>)
 80059b2:	f7fb f8f2 	bl	8000b9a <assert_failed>

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	68b9      	ldr	r1, [r7, #8]
 80059bc:	4618      	mov	r0, r3
 80059be:	f000 fc7d 	bl	80062bc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	699a      	ldr	r2, [r3, #24]
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	f042 0208 	orr.w	r2, r2, #8
 80059d0:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	699a      	ldr	r2, [r3, #24]
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	f022 0204 	bic.w	r2, r2, #4
 80059e0:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	6999      	ldr	r1, [r3, #24]
 80059e8:	68bb      	ldr	r3, [r7, #8]
 80059ea:	691a      	ldr	r2, [r3, #16]
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	430a      	orrs	r2, r1
 80059f2:	619a      	str	r2, [r3, #24]
      break;
 80059f4:	e0d2      	b.n	8005b9c <HAL_TIM_PWM_ConfigChannel+0x324>
    }

    case TIM_CHANNEL_2:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	4a41      	ldr	r2, [pc, #260]	; (8005b00 <HAL_TIM_PWM_ConfigChannel+0x288>)
 80059fc:	4293      	cmp	r3, r2
 80059fe:	d01d      	beq.n	8005a3c <HAL_TIM_PWM_ConfigChannel+0x1c4>
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a08:	d018      	beq.n	8005a3c <HAL_TIM_PWM_ConfigChannel+0x1c4>
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	4a3d      	ldr	r2, [pc, #244]	; (8005b04 <HAL_TIM_PWM_ConfigChannel+0x28c>)
 8005a10:	4293      	cmp	r3, r2
 8005a12:	d013      	beq.n	8005a3c <HAL_TIM_PWM_ConfigChannel+0x1c4>
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	4a3b      	ldr	r2, [pc, #236]	; (8005b08 <HAL_TIM_PWM_ConfigChannel+0x290>)
 8005a1a:	4293      	cmp	r3, r2
 8005a1c:	d00e      	beq.n	8005a3c <HAL_TIM_PWM_ConfigChannel+0x1c4>
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	4a3a      	ldr	r2, [pc, #232]	; (8005b0c <HAL_TIM_PWM_ConfigChannel+0x294>)
 8005a24:	4293      	cmp	r3, r2
 8005a26:	d009      	beq.n	8005a3c <HAL_TIM_PWM_ConfigChannel+0x1c4>
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	4a38      	ldr	r2, [pc, #224]	; (8005b10 <HAL_TIM_PWM_ConfigChannel+0x298>)
 8005a2e:	4293      	cmp	r3, r2
 8005a30:	d004      	beq.n	8005a3c <HAL_TIM_PWM_ConfigChannel+0x1c4>
 8005a32:	f640 610c 	movw	r1, #3596	; 0xe0c
 8005a36:	4831      	ldr	r0, [pc, #196]	; (8005afc <HAL_TIM_PWM_ConfigChannel+0x284>)
 8005a38:	f7fb f8af 	bl	8000b9a <assert_failed>

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	68b9      	ldr	r1, [r7, #8]
 8005a42:	4618      	mov	r0, r3
 8005a44:	f000 fcca 	bl	80063dc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	699a      	ldr	r2, [r3, #24]
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005a56:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	699a      	ldr	r2, [r3, #24]
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005a66:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	6999      	ldr	r1, [r3, #24]
 8005a6e:	68bb      	ldr	r3, [r7, #8]
 8005a70:	691b      	ldr	r3, [r3, #16]
 8005a72:	021a      	lsls	r2, r3, #8
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	430a      	orrs	r2, r1
 8005a7a:	619a      	str	r2, [r3, #24]
      break;
 8005a7c:	e08e      	b.n	8005b9c <HAL_TIM_PWM_ConfigChannel+0x324>
    }

    case TIM_CHANNEL_3:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	4a1f      	ldr	r2, [pc, #124]	; (8005b00 <HAL_TIM_PWM_ConfigChannel+0x288>)
 8005a84:	4293      	cmp	r3, r2
 8005a86:	d018      	beq.n	8005aba <HAL_TIM_PWM_ConfigChannel+0x242>
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a90:	d013      	beq.n	8005aba <HAL_TIM_PWM_ConfigChannel+0x242>
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	4a1b      	ldr	r2, [pc, #108]	; (8005b04 <HAL_TIM_PWM_ConfigChannel+0x28c>)
 8005a98:	4293      	cmp	r3, r2
 8005a9a:	d00e      	beq.n	8005aba <HAL_TIM_PWM_ConfigChannel+0x242>
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	4a19      	ldr	r2, [pc, #100]	; (8005b08 <HAL_TIM_PWM_ConfigChannel+0x290>)
 8005aa2:	4293      	cmp	r3, r2
 8005aa4:	d009      	beq.n	8005aba <HAL_TIM_PWM_ConfigChannel+0x242>
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	4a18      	ldr	r2, [pc, #96]	; (8005b0c <HAL_TIM_PWM_ConfigChannel+0x294>)
 8005aac:	4293      	cmp	r3, r2
 8005aae:	d004      	beq.n	8005aba <HAL_TIM_PWM_ConfigChannel+0x242>
 8005ab0:	f640 611d 	movw	r1, #3613	; 0xe1d
 8005ab4:	4811      	ldr	r0, [pc, #68]	; (8005afc <HAL_TIM_PWM_ConfigChannel+0x284>)
 8005ab6:	f7fb f870 	bl	8000b9a <assert_failed>

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	68b9      	ldr	r1, [r7, #8]
 8005ac0:	4618      	mov	r0, r3
 8005ac2:	f000 fd1f 	bl	8006504 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	69da      	ldr	r2, [r3, #28]
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	f042 0208 	orr.w	r2, r2, #8
 8005ad4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	69da      	ldr	r2, [r3, #28]
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	f022 0204 	bic.w	r2, r2, #4
 8005ae4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	69d9      	ldr	r1, [r3, #28]
 8005aec:	68bb      	ldr	r3, [r7, #8]
 8005aee:	691a      	ldr	r2, [r3, #16]
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	430a      	orrs	r2, r1
 8005af6:	61da      	str	r2, [r3, #28]
      break;
 8005af8:	e050      	b.n	8005b9c <HAL_TIM_PWM_ConfigChannel+0x324>
 8005afa:	bf00      	nop
 8005afc:	0800a258 	.word	0x0800a258
 8005b00:	40010000 	.word	0x40010000
 8005b04:	40000400 	.word	0x40000400
 8005b08:	40000800 	.word	0x40000800
 8005b0c:	40000c00 	.word	0x40000c00
 8005b10:	40014000 	.word	0x40014000
 8005b14:	40014400 	.word	0x40014400
 8005b18:	40014800 	.word	0x40014800
    }

    case TIM_CHANNEL_4:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	4a25      	ldr	r2, [pc, #148]	; (8005bb8 <HAL_TIM_PWM_ConfigChannel+0x340>)
 8005b22:	4293      	cmp	r3, r2
 8005b24:	d018      	beq.n	8005b58 <HAL_TIM_PWM_ConfigChannel+0x2e0>
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b2e:	d013      	beq.n	8005b58 <HAL_TIM_PWM_ConfigChannel+0x2e0>
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	4a21      	ldr	r2, [pc, #132]	; (8005bbc <HAL_TIM_PWM_ConfigChannel+0x344>)
 8005b36:	4293      	cmp	r3, r2
 8005b38:	d00e      	beq.n	8005b58 <HAL_TIM_PWM_ConfigChannel+0x2e0>
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	4a20      	ldr	r2, [pc, #128]	; (8005bc0 <HAL_TIM_PWM_ConfigChannel+0x348>)
 8005b40:	4293      	cmp	r3, r2
 8005b42:	d009      	beq.n	8005b58 <HAL_TIM_PWM_ConfigChannel+0x2e0>
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	4a1e      	ldr	r2, [pc, #120]	; (8005bc4 <HAL_TIM_PWM_ConfigChannel+0x34c>)
 8005b4a:	4293      	cmp	r3, r2
 8005b4c:	d004      	beq.n	8005b58 <HAL_TIM_PWM_ConfigChannel+0x2e0>
 8005b4e:	f640 612e 	movw	r1, #3630	; 0xe2e
 8005b52:	481d      	ldr	r0, [pc, #116]	; (8005bc8 <HAL_TIM_PWM_ConfigChannel+0x350>)
 8005b54:	f7fb f821 	bl	8000b9a <assert_failed>

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	68b9      	ldr	r1, [r7, #8]
 8005b5e:	4618      	mov	r0, r3
 8005b60:	f000 fd64 	bl	800662c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	69da      	ldr	r2, [r3, #28]
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005b72:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	69da      	ldr	r2, [r3, #28]
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005b82:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	69d9      	ldr	r1, [r3, #28]
 8005b8a:	68bb      	ldr	r3, [r7, #8]
 8005b8c:	691b      	ldr	r3, [r3, #16]
 8005b8e:	021a      	lsls	r2, r3, #8
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	430a      	orrs	r2, r1
 8005b96:	61da      	str	r2, [r3, #28]
      break;
 8005b98:	e000      	b.n	8005b9c <HAL_TIM_PWM_ConfigChannel+0x324>
    }

    default:
      break;
 8005b9a:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	2201      	movs	r2, #1
 8005ba0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	2200      	movs	r2, #0
 8005ba8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005bac:	2300      	movs	r3, #0
}
 8005bae:	4618      	mov	r0, r3
 8005bb0:	3710      	adds	r7, #16
 8005bb2:	46bd      	mov	sp, r7
 8005bb4:	bd80      	pop	{r7, pc}
 8005bb6:	bf00      	nop
 8005bb8:	40010000 	.word	0x40010000
 8005bbc:	40000400 	.word	0x40000400
 8005bc0:	40000800 	.word	0x40000800
 8005bc4:	40000c00 	.word	0x40000c00
 8005bc8:	0800a258 	.word	0x0800a258

08005bcc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005bcc:	b580      	push	{r7, lr}
 8005bce:	b084      	sub	sp, #16
 8005bd0:	af00      	add	r7, sp, #0
 8005bd2:	6078      	str	r0, [r7, #4]
 8005bd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005bdc:	2b01      	cmp	r3, #1
 8005bde:	d101      	bne.n	8005be4 <HAL_TIM_ConfigClockSource+0x18>
 8005be0:	2302      	movs	r3, #2
 8005be2:	e2db      	b.n	800619c <HAL_TIM_ConfigClockSource+0x5d0>
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	2201      	movs	r2, #1
 8005be8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	2202      	movs	r2, #2
 8005bf0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));
 8005bf4:	683b      	ldr	r3, [r7, #0]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005bfc:	d029      	beq.n	8005c52 <HAL_TIM_ConfigClockSource+0x86>
 8005bfe:	683b      	ldr	r3, [r7, #0]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005c06:	d024      	beq.n	8005c52 <HAL_TIM_ConfigClockSource+0x86>
 8005c08:	683b      	ldr	r3, [r7, #0]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d020      	beq.n	8005c52 <HAL_TIM_ConfigClockSource+0x86>
 8005c10:	683b      	ldr	r3, [r7, #0]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	2b10      	cmp	r3, #16
 8005c16:	d01c      	beq.n	8005c52 <HAL_TIM_ConfigClockSource+0x86>
 8005c18:	683b      	ldr	r3, [r7, #0]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	2b20      	cmp	r3, #32
 8005c1e:	d018      	beq.n	8005c52 <HAL_TIM_ConfigClockSource+0x86>
 8005c20:	683b      	ldr	r3, [r7, #0]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	2b30      	cmp	r3, #48	; 0x30
 8005c26:	d014      	beq.n	8005c52 <HAL_TIM_ConfigClockSource+0x86>
 8005c28:	683b      	ldr	r3, [r7, #0]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	2b40      	cmp	r3, #64	; 0x40
 8005c2e:	d010      	beq.n	8005c52 <HAL_TIM_ConfigClockSource+0x86>
 8005c30:	683b      	ldr	r3, [r7, #0]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	2b50      	cmp	r3, #80	; 0x50
 8005c36:	d00c      	beq.n	8005c52 <HAL_TIM_ConfigClockSource+0x86>
 8005c38:	683b      	ldr	r3, [r7, #0]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	2b60      	cmp	r3, #96	; 0x60
 8005c3e:	d008      	beq.n	8005c52 <HAL_TIM_ConfigClockSource+0x86>
 8005c40:	683b      	ldr	r3, [r7, #0]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	2b70      	cmp	r3, #112	; 0x70
 8005c46:	d004      	beq.n	8005c52 <HAL_TIM_ConfigClockSource+0x86>
 8005c48:	f241 118b 	movw	r1, #4491	; 0x118b
 8005c4c:	4873      	ldr	r0, [pc, #460]	; (8005e1c <HAL_TIM_ConfigClockSource+0x250>)
 8005c4e:	f7fa ffa4 	bl	8000b9a <assert_failed>

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	689b      	ldr	r3, [r3, #8]
 8005c58:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005c60:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005c68:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	68fa      	ldr	r2, [r7, #12]
 8005c70:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005c72:	683b      	ldr	r3, [r7, #0]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	2b40      	cmp	r3, #64	; 0x40
 8005c78:	f000 8204 	beq.w	8006084 <HAL_TIM_ConfigClockSource+0x4b8>
 8005c7c:	2b40      	cmp	r3, #64	; 0x40
 8005c7e:	d80f      	bhi.n	8005ca0 <HAL_TIM_ConfigClockSource+0xd4>
 8005c80:	2b10      	cmp	r3, #16
 8005c82:	f000 8255 	beq.w	8006130 <HAL_TIM_ConfigClockSource+0x564>
 8005c86:	2b10      	cmp	r3, #16
 8005c88:	d803      	bhi.n	8005c92 <HAL_TIM_ConfigClockSource+0xc6>
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	f000 8250 	beq.w	8006130 <HAL_TIM_ConfigClockSource+0x564>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8005c90:	e27b      	b.n	800618a <HAL_TIM_ConfigClockSource+0x5be>
  switch (sClockSourceConfig->ClockSource)
 8005c92:	2b20      	cmp	r3, #32
 8005c94:	f000 824c 	beq.w	8006130 <HAL_TIM_ConfigClockSource+0x564>
 8005c98:	2b30      	cmp	r3, #48	; 0x30
 8005c9a:	f000 8249 	beq.w	8006130 <HAL_TIM_ConfigClockSource+0x564>
      break;
 8005c9e:	e274      	b.n	800618a <HAL_TIM_ConfigClockSource+0x5be>
  switch (sClockSourceConfig->ClockSource)
 8005ca0:	2b70      	cmp	r3, #112	; 0x70
 8005ca2:	d046      	beq.n	8005d32 <HAL_TIM_ConfigClockSource+0x166>
 8005ca4:	2b70      	cmp	r3, #112	; 0x70
 8005ca6:	d806      	bhi.n	8005cb6 <HAL_TIM_ConfigClockSource+0xea>
 8005ca8:	2b50      	cmp	r3, #80	; 0x50
 8005caa:	f000 8133 	beq.w	8005f14 <HAL_TIM_ConfigClockSource+0x348>
 8005cae:	2b60      	cmp	r3, #96	; 0x60
 8005cb0:	f000 8186 	beq.w	8005fc0 <HAL_TIM_ConfigClockSource+0x3f4>
      break;
 8005cb4:	e269      	b.n	800618a <HAL_TIM_ConfigClockSource+0x5be>
  switch (sClockSourceConfig->ClockSource)
 8005cb6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005cba:	d004      	beq.n	8005cc6 <HAL_TIM_ConfigClockSource+0xfa>
 8005cbc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005cc0:	f000 80bc 	beq.w	8005e3c <HAL_TIM_ConfigClockSource+0x270>
      break;
 8005cc4:	e261      	b.n	800618a <HAL_TIM_ConfigClockSource+0x5be>
      assert_param(IS_TIM_INSTANCE(htim->Instance));
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	4a55      	ldr	r2, [pc, #340]	; (8005e20 <HAL_TIM_ConfigClockSource+0x254>)
 8005ccc:	4293      	cmp	r3, r2
 8005cce:	f000 825b 	beq.w	8006188 <HAL_TIM_ConfigClockSource+0x5bc>
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005cda:	f000 8255 	beq.w	8006188 <HAL_TIM_ConfigClockSource+0x5bc>
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	4a50      	ldr	r2, [pc, #320]	; (8005e24 <HAL_TIM_ConfigClockSource+0x258>)
 8005ce4:	4293      	cmp	r3, r2
 8005ce6:	f000 824f 	beq.w	8006188 <HAL_TIM_ConfigClockSource+0x5bc>
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	4a4e      	ldr	r2, [pc, #312]	; (8005e28 <HAL_TIM_ConfigClockSource+0x25c>)
 8005cf0:	4293      	cmp	r3, r2
 8005cf2:	f000 8249 	beq.w	8006188 <HAL_TIM_ConfigClockSource+0x5bc>
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	4a4c      	ldr	r2, [pc, #304]	; (8005e2c <HAL_TIM_ConfigClockSource+0x260>)
 8005cfc:	4293      	cmp	r3, r2
 8005cfe:	f000 8243 	beq.w	8006188 <HAL_TIM_ConfigClockSource+0x5bc>
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	4a4a      	ldr	r2, [pc, #296]	; (8005e30 <HAL_TIM_ConfigClockSource+0x264>)
 8005d08:	4293      	cmp	r3, r2
 8005d0a:	f000 823d 	beq.w	8006188 <HAL_TIM_ConfigClockSource+0x5bc>
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	4a48      	ldr	r2, [pc, #288]	; (8005e34 <HAL_TIM_ConfigClockSource+0x268>)
 8005d14:	4293      	cmp	r3, r2
 8005d16:	f000 8237 	beq.w	8006188 <HAL_TIM_ConfigClockSource+0x5bc>
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	4a46      	ldr	r2, [pc, #280]	; (8005e38 <HAL_TIM_ConfigClockSource+0x26c>)
 8005d20:	4293      	cmp	r3, r2
 8005d22:	f000 8231 	beq.w	8006188 <HAL_TIM_ConfigClockSource+0x5bc>
 8005d26:	f241 1197 	movw	r1, #4503	; 0x1197
 8005d2a:	483c      	ldr	r0, [pc, #240]	; (8005e1c <HAL_TIM_ConfigClockSource+0x250>)
 8005d2c:	f7fa ff35 	bl	8000b9a <assert_failed>
      break;
 8005d30:	e22a      	b.n	8006188 <HAL_TIM_ConfigClockSource+0x5bc>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	4a3a      	ldr	r2, [pc, #232]	; (8005e20 <HAL_TIM_ConfigClockSource+0x254>)
 8005d38:	4293      	cmp	r3, r2
 8005d3a:	d01d      	beq.n	8005d78 <HAL_TIM_ConfigClockSource+0x1ac>
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d44:	d018      	beq.n	8005d78 <HAL_TIM_ConfigClockSource+0x1ac>
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	4a36      	ldr	r2, [pc, #216]	; (8005e24 <HAL_TIM_ConfigClockSource+0x258>)
 8005d4c:	4293      	cmp	r3, r2
 8005d4e:	d013      	beq.n	8005d78 <HAL_TIM_ConfigClockSource+0x1ac>
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	4a34      	ldr	r2, [pc, #208]	; (8005e28 <HAL_TIM_ConfigClockSource+0x25c>)
 8005d56:	4293      	cmp	r3, r2
 8005d58:	d00e      	beq.n	8005d78 <HAL_TIM_ConfigClockSource+0x1ac>
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	4a33      	ldr	r2, [pc, #204]	; (8005e2c <HAL_TIM_ConfigClockSource+0x260>)
 8005d60:	4293      	cmp	r3, r2
 8005d62:	d009      	beq.n	8005d78 <HAL_TIM_ConfigClockSource+0x1ac>
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	4a31      	ldr	r2, [pc, #196]	; (8005e30 <HAL_TIM_ConfigClockSource+0x264>)
 8005d6a:	4293      	cmp	r3, r2
 8005d6c:	d004      	beq.n	8005d78 <HAL_TIM_ConfigClockSource+0x1ac>
 8005d6e:	f241 119e 	movw	r1, #4510	; 0x119e
 8005d72:	482a      	ldr	r0, [pc, #168]	; (8005e1c <HAL_TIM_ConfigClockSource+0x250>)
 8005d74:	f7fa ff11 	bl	8000b9a <assert_failed>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 8005d78:	683b      	ldr	r3, [r7, #0]
 8005d7a:	689b      	ldr	r3, [r3, #8]
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d013      	beq.n	8005da8 <HAL_TIM_ConfigClockSource+0x1dc>
 8005d80:	683b      	ldr	r3, [r7, #0]
 8005d82:	689b      	ldr	r3, [r3, #8]
 8005d84:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005d88:	d00e      	beq.n	8005da8 <HAL_TIM_ConfigClockSource+0x1dc>
 8005d8a:	683b      	ldr	r3, [r7, #0]
 8005d8c:	689b      	ldr	r3, [r3, #8]
 8005d8e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005d92:	d009      	beq.n	8005da8 <HAL_TIM_ConfigClockSource+0x1dc>
 8005d94:	683b      	ldr	r3, [r7, #0]
 8005d96:	689b      	ldr	r3, [r3, #8]
 8005d98:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005d9c:	d004      	beq.n	8005da8 <HAL_TIM_ConfigClockSource+0x1dc>
 8005d9e:	f241 11a1 	movw	r1, #4513	; 0x11a1
 8005da2:	481e      	ldr	r0, [pc, #120]	; (8005e1c <HAL_TIM_ConfigClockSource+0x250>)
 8005da4:	f7fa fef9 	bl	8000b9a <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8005da8:	683b      	ldr	r3, [r7, #0]
 8005daa:	685b      	ldr	r3, [r3, #4]
 8005dac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005db0:	d014      	beq.n	8005ddc <HAL_TIM_ConfigClockSource+0x210>
 8005db2:	683b      	ldr	r3, [r7, #0]
 8005db4:	685b      	ldr	r3, [r3, #4]
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d010      	beq.n	8005ddc <HAL_TIM_ConfigClockSource+0x210>
 8005dba:	683b      	ldr	r3, [r7, #0]
 8005dbc:	685b      	ldr	r3, [r3, #4]
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d00c      	beq.n	8005ddc <HAL_TIM_ConfigClockSource+0x210>
 8005dc2:	683b      	ldr	r3, [r7, #0]
 8005dc4:	685b      	ldr	r3, [r3, #4]
 8005dc6:	2b02      	cmp	r3, #2
 8005dc8:	d008      	beq.n	8005ddc <HAL_TIM_ConfigClockSource+0x210>
 8005dca:	683b      	ldr	r3, [r7, #0]
 8005dcc:	685b      	ldr	r3, [r3, #4]
 8005dce:	2b0a      	cmp	r3, #10
 8005dd0:	d004      	beq.n	8005ddc <HAL_TIM_ConfigClockSource+0x210>
 8005dd2:	f241 11a2 	movw	r1, #4514	; 0x11a2
 8005dd6:	4811      	ldr	r0, [pc, #68]	; (8005e1c <HAL_TIM_ConfigClockSource+0x250>)
 8005dd8:	f7fa fedf 	bl	8000b9a <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8005ddc:	683b      	ldr	r3, [r7, #0]
 8005dde:	68db      	ldr	r3, [r3, #12]
 8005de0:	2b0f      	cmp	r3, #15
 8005de2:	d904      	bls.n	8005dee <HAL_TIM_ConfigClockSource+0x222>
 8005de4:	f241 11a3 	movw	r1, #4515	; 0x11a3
 8005de8:	480c      	ldr	r0, [pc, #48]	; (8005e1c <HAL_TIM_ConfigClockSource+0x250>)
 8005dea:	f7fa fed6 	bl	8000b9a <assert_failed>
      TIM_ETR_SetConfig(htim->Instance,
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	6818      	ldr	r0, [r3, #0]
 8005df2:	683b      	ldr	r3, [r7, #0]
 8005df4:	6899      	ldr	r1, [r3, #8]
 8005df6:	683b      	ldr	r3, [r7, #0]
 8005df8:	685a      	ldr	r2, [r3, #4]
 8005dfa:	683b      	ldr	r3, [r7, #0]
 8005dfc:	68db      	ldr	r3, [r3, #12]
 8005dfe:	f000 fced 	bl	80067dc <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	689b      	ldr	r3, [r3, #8]
 8005e08:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005e10:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	68fa      	ldr	r2, [r7, #12]
 8005e18:	609a      	str	r2, [r3, #8]
      break;
 8005e1a:	e1b6      	b.n	800618a <HAL_TIM_ConfigClockSource+0x5be>
 8005e1c:	0800a258 	.word	0x0800a258
 8005e20:	40010000 	.word	0x40010000
 8005e24:	40000400 	.word	0x40000400
 8005e28:	40000800 	.word	0x40000800
 8005e2c:	40000c00 	.word	0x40000c00
 8005e30:	40014000 	.word	0x40014000
 8005e34:	40014400 	.word	0x40014400
 8005e38:	40014800 	.word	0x40014800
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE2_INSTANCE(htim->Instance));
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	4a8a      	ldr	r2, [pc, #552]	; (800606c <HAL_TIM_ConfigClockSource+0x4a0>)
 8005e42:	4293      	cmp	r3, r2
 8005e44:	d018      	beq.n	8005e78 <HAL_TIM_ConfigClockSource+0x2ac>
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e4e:	d013      	beq.n	8005e78 <HAL_TIM_ConfigClockSource+0x2ac>
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	4a86      	ldr	r2, [pc, #536]	; (8006070 <HAL_TIM_ConfigClockSource+0x4a4>)
 8005e56:	4293      	cmp	r3, r2
 8005e58:	d00e      	beq.n	8005e78 <HAL_TIM_ConfigClockSource+0x2ac>
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	4a85      	ldr	r2, [pc, #532]	; (8006074 <HAL_TIM_ConfigClockSource+0x4a8>)
 8005e60:	4293      	cmp	r3, r2
 8005e62:	d009      	beq.n	8005e78 <HAL_TIM_ConfigClockSource+0x2ac>
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	4a83      	ldr	r2, [pc, #524]	; (8006078 <HAL_TIM_ConfigClockSource+0x4ac>)
 8005e6a:	4293      	cmp	r3, r2
 8005e6c:	d004      	beq.n	8005e78 <HAL_TIM_ConfigClockSource+0x2ac>
 8005e6e:	f241 11b6 	movw	r1, #4534	; 0x11b6
 8005e72:	4882      	ldr	r0, [pc, #520]	; (800607c <HAL_TIM_ConfigClockSource+0x4b0>)
 8005e74:	f7fa fe91 	bl	8000b9a <assert_failed>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 8005e78:	683b      	ldr	r3, [r7, #0]
 8005e7a:	689b      	ldr	r3, [r3, #8]
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d013      	beq.n	8005ea8 <HAL_TIM_ConfigClockSource+0x2dc>
 8005e80:	683b      	ldr	r3, [r7, #0]
 8005e82:	689b      	ldr	r3, [r3, #8]
 8005e84:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e88:	d00e      	beq.n	8005ea8 <HAL_TIM_ConfigClockSource+0x2dc>
 8005e8a:	683b      	ldr	r3, [r7, #0]
 8005e8c:	689b      	ldr	r3, [r3, #8]
 8005e8e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005e92:	d009      	beq.n	8005ea8 <HAL_TIM_ConfigClockSource+0x2dc>
 8005e94:	683b      	ldr	r3, [r7, #0]
 8005e96:	689b      	ldr	r3, [r3, #8]
 8005e98:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005e9c:	d004      	beq.n	8005ea8 <HAL_TIM_ConfigClockSource+0x2dc>
 8005e9e:	f241 11b9 	movw	r1, #4537	; 0x11b9
 8005ea2:	4876      	ldr	r0, [pc, #472]	; (800607c <HAL_TIM_ConfigClockSource+0x4b0>)
 8005ea4:	f7fa fe79 	bl	8000b9a <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8005ea8:	683b      	ldr	r3, [r7, #0]
 8005eaa:	685b      	ldr	r3, [r3, #4]
 8005eac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005eb0:	d014      	beq.n	8005edc <HAL_TIM_ConfigClockSource+0x310>
 8005eb2:	683b      	ldr	r3, [r7, #0]
 8005eb4:	685b      	ldr	r3, [r3, #4]
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d010      	beq.n	8005edc <HAL_TIM_ConfigClockSource+0x310>
 8005eba:	683b      	ldr	r3, [r7, #0]
 8005ebc:	685b      	ldr	r3, [r3, #4]
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d00c      	beq.n	8005edc <HAL_TIM_ConfigClockSource+0x310>
 8005ec2:	683b      	ldr	r3, [r7, #0]
 8005ec4:	685b      	ldr	r3, [r3, #4]
 8005ec6:	2b02      	cmp	r3, #2
 8005ec8:	d008      	beq.n	8005edc <HAL_TIM_ConfigClockSource+0x310>
 8005eca:	683b      	ldr	r3, [r7, #0]
 8005ecc:	685b      	ldr	r3, [r3, #4]
 8005ece:	2b0a      	cmp	r3, #10
 8005ed0:	d004      	beq.n	8005edc <HAL_TIM_ConfigClockSource+0x310>
 8005ed2:	f241 11ba 	movw	r1, #4538	; 0x11ba
 8005ed6:	4869      	ldr	r0, [pc, #420]	; (800607c <HAL_TIM_ConfigClockSource+0x4b0>)
 8005ed8:	f7fa fe5f 	bl	8000b9a <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8005edc:	683b      	ldr	r3, [r7, #0]
 8005ede:	68db      	ldr	r3, [r3, #12]
 8005ee0:	2b0f      	cmp	r3, #15
 8005ee2:	d904      	bls.n	8005eee <HAL_TIM_ConfigClockSource+0x322>
 8005ee4:	f241 11bb 	movw	r1, #4539	; 0x11bb
 8005ee8:	4864      	ldr	r0, [pc, #400]	; (800607c <HAL_TIM_ConfigClockSource+0x4b0>)
 8005eea:	f7fa fe56 	bl	8000b9a <assert_failed>
      TIM_ETR_SetConfig(htim->Instance,
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	6818      	ldr	r0, [r3, #0]
 8005ef2:	683b      	ldr	r3, [r7, #0]
 8005ef4:	6899      	ldr	r1, [r3, #8]
 8005ef6:	683b      	ldr	r3, [r7, #0]
 8005ef8:	685a      	ldr	r2, [r3, #4]
 8005efa:	683b      	ldr	r3, [r7, #0]
 8005efc:	68db      	ldr	r3, [r3, #12]
 8005efe:	f000 fc6d 	bl	80067dc <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	689a      	ldr	r2, [r3, #8]
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005f10:	609a      	str	r2, [r3, #8]
      break;
 8005f12:	e13a      	b.n	800618a <HAL_TIM_ConfigClockSource+0x5be>
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	4a54      	ldr	r2, [pc, #336]	; (800606c <HAL_TIM_ConfigClockSource+0x4a0>)
 8005f1a:	4293      	cmp	r3, r2
 8005f1c:	d01d      	beq.n	8005f5a <HAL_TIM_ConfigClockSource+0x38e>
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f26:	d018      	beq.n	8005f5a <HAL_TIM_ConfigClockSource+0x38e>
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	4a50      	ldr	r2, [pc, #320]	; (8006070 <HAL_TIM_ConfigClockSource+0x4a4>)
 8005f2e:	4293      	cmp	r3, r2
 8005f30:	d013      	beq.n	8005f5a <HAL_TIM_ConfigClockSource+0x38e>
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	4a4f      	ldr	r2, [pc, #316]	; (8006074 <HAL_TIM_ConfigClockSource+0x4a8>)
 8005f38:	4293      	cmp	r3, r2
 8005f3a:	d00e      	beq.n	8005f5a <HAL_TIM_ConfigClockSource+0x38e>
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	4a4d      	ldr	r2, [pc, #308]	; (8006078 <HAL_TIM_ConfigClockSource+0x4ac>)
 8005f42:	4293      	cmp	r3, r2
 8005f44:	d009      	beq.n	8005f5a <HAL_TIM_ConfigClockSource+0x38e>
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	4a4d      	ldr	r2, [pc, #308]	; (8006080 <HAL_TIM_ConfigClockSource+0x4b4>)
 8005f4c:	4293      	cmp	r3, r2
 8005f4e:	d004      	beq.n	8005f5a <HAL_TIM_ConfigClockSource+0x38e>
 8005f50:	f241 11ca 	movw	r1, #4554	; 0x11ca
 8005f54:	4849      	ldr	r0, [pc, #292]	; (800607c <HAL_TIM_ConfigClockSource+0x4b0>)
 8005f56:	f7fa fe20 	bl	8000b9a <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8005f5a:	683b      	ldr	r3, [r7, #0]
 8005f5c:	685b      	ldr	r3, [r3, #4]
 8005f5e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005f62:	d014      	beq.n	8005f8e <HAL_TIM_ConfigClockSource+0x3c2>
 8005f64:	683b      	ldr	r3, [r7, #0]
 8005f66:	685b      	ldr	r3, [r3, #4]
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d010      	beq.n	8005f8e <HAL_TIM_ConfigClockSource+0x3c2>
 8005f6c:	683b      	ldr	r3, [r7, #0]
 8005f6e:	685b      	ldr	r3, [r3, #4]
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d00c      	beq.n	8005f8e <HAL_TIM_ConfigClockSource+0x3c2>
 8005f74:	683b      	ldr	r3, [r7, #0]
 8005f76:	685b      	ldr	r3, [r3, #4]
 8005f78:	2b02      	cmp	r3, #2
 8005f7a:	d008      	beq.n	8005f8e <HAL_TIM_ConfigClockSource+0x3c2>
 8005f7c:	683b      	ldr	r3, [r7, #0]
 8005f7e:	685b      	ldr	r3, [r3, #4]
 8005f80:	2b0a      	cmp	r3, #10
 8005f82:	d004      	beq.n	8005f8e <HAL_TIM_ConfigClockSource+0x3c2>
 8005f84:	f241 11cd 	movw	r1, #4557	; 0x11cd
 8005f88:	483c      	ldr	r0, [pc, #240]	; (800607c <HAL_TIM_ConfigClockSource+0x4b0>)
 8005f8a:	f7fa fe06 	bl	8000b9a <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8005f8e:	683b      	ldr	r3, [r7, #0]
 8005f90:	68db      	ldr	r3, [r3, #12]
 8005f92:	2b0f      	cmp	r3, #15
 8005f94:	d904      	bls.n	8005fa0 <HAL_TIM_ConfigClockSource+0x3d4>
 8005f96:	f241 11ce 	movw	r1, #4558	; 0x11ce
 8005f9a:	4838      	ldr	r0, [pc, #224]	; (800607c <HAL_TIM_ConfigClockSource+0x4b0>)
 8005f9c:	f7fa fdfd 	bl	8000b9a <assert_failed>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	6818      	ldr	r0, [r3, #0]
 8005fa4:	683b      	ldr	r3, [r7, #0]
 8005fa6:	6859      	ldr	r1, [r3, #4]
 8005fa8:	683b      	ldr	r3, [r7, #0]
 8005faa:	68db      	ldr	r3, [r3, #12]
 8005fac:	461a      	mov	r2, r3
 8005fae:	f000 fb9b 	bl	80066e8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	2150      	movs	r1, #80	; 0x50
 8005fb8:	4618      	mov	r0, r3
 8005fba:	f000 fbf4 	bl	80067a6 <TIM_ITRx_SetConfig>
      break;
 8005fbe:	e0e4      	b.n	800618a <HAL_TIM_ConfigClockSource+0x5be>
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	4a29      	ldr	r2, [pc, #164]	; (800606c <HAL_TIM_ConfigClockSource+0x4a0>)
 8005fc6:	4293      	cmp	r3, r2
 8005fc8:	d01d      	beq.n	8006006 <HAL_TIM_ConfigClockSource+0x43a>
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005fd2:	d018      	beq.n	8006006 <HAL_TIM_ConfigClockSource+0x43a>
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	4a25      	ldr	r2, [pc, #148]	; (8006070 <HAL_TIM_ConfigClockSource+0x4a4>)
 8005fda:	4293      	cmp	r3, r2
 8005fdc:	d013      	beq.n	8006006 <HAL_TIM_ConfigClockSource+0x43a>
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	4a24      	ldr	r2, [pc, #144]	; (8006074 <HAL_TIM_ConfigClockSource+0x4a8>)
 8005fe4:	4293      	cmp	r3, r2
 8005fe6:	d00e      	beq.n	8006006 <HAL_TIM_ConfigClockSource+0x43a>
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	4a22      	ldr	r2, [pc, #136]	; (8006078 <HAL_TIM_ConfigClockSource+0x4ac>)
 8005fee:	4293      	cmp	r3, r2
 8005ff0:	d009      	beq.n	8006006 <HAL_TIM_ConfigClockSource+0x43a>
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	4a22      	ldr	r2, [pc, #136]	; (8006080 <HAL_TIM_ConfigClockSource+0x4b4>)
 8005ff8:	4293      	cmp	r3, r2
 8005ffa:	d004      	beq.n	8006006 <HAL_TIM_ConfigClockSource+0x43a>
 8005ffc:	f241 11da 	movw	r1, #4570	; 0x11da
 8006000:	481e      	ldr	r0, [pc, #120]	; (800607c <HAL_TIM_ConfigClockSource+0x4b0>)
 8006002:	f7fa fdca 	bl	8000b9a <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8006006:	683b      	ldr	r3, [r7, #0]
 8006008:	685b      	ldr	r3, [r3, #4]
 800600a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800600e:	d014      	beq.n	800603a <HAL_TIM_ConfigClockSource+0x46e>
 8006010:	683b      	ldr	r3, [r7, #0]
 8006012:	685b      	ldr	r3, [r3, #4]
 8006014:	2b00      	cmp	r3, #0
 8006016:	d010      	beq.n	800603a <HAL_TIM_ConfigClockSource+0x46e>
 8006018:	683b      	ldr	r3, [r7, #0]
 800601a:	685b      	ldr	r3, [r3, #4]
 800601c:	2b00      	cmp	r3, #0
 800601e:	d00c      	beq.n	800603a <HAL_TIM_ConfigClockSource+0x46e>
 8006020:	683b      	ldr	r3, [r7, #0]
 8006022:	685b      	ldr	r3, [r3, #4]
 8006024:	2b02      	cmp	r3, #2
 8006026:	d008      	beq.n	800603a <HAL_TIM_ConfigClockSource+0x46e>
 8006028:	683b      	ldr	r3, [r7, #0]
 800602a:	685b      	ldr	r3, [r3, #4]
 800602c:	2b0a      	cmp	r3, #10
 800602e:	d004      	beq.n	800603a <HAL_TIM_ConfigClockSource+0x46e>
 8006030:	f241 11dd 	movw	r1, #4573	; 0x11dd
 8006034:	4811      	ldr	r0, [pc, #68]	; (800607c <HAL_TIM_ConfigClockSource+0x4b0>)
 8006036:	f7fa fdb0 	bl	8000b9a <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800603a:	683b      	ldr	r3, [r7, #0]
 800603c:	68db      	ldr	r3, [r3, #12]
 800603e:	2b0f      	cmp	r3, #15
 8006040:	d904      	bls.n	800604c <HAL_TIM_ConfigClockSource+0x480>
 8006042:	f241 11de 	movw	r1, #4574	; 0x11de
 8006046:	480d      	ldr	r0, [pc, #52]	; (800607c <HAL_TIM_ConfigClockSource+0x4b0>)
 8006048:	f7fa fda7 	bl	8000b9a <assert_failed>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	6818      	ldr	r0, [r3, #0]
 8006050:	683b      	ldr	r3, [r7, #0]
 8006052:	6859      	ldr	r1, [r3, #4]
 8006054:	683b      	ldr	r3, [r7, #0]
 8006056:	68db      	ldr	r3, [r3, #12]
 8006058:	461a      	mov	r2, r3
 800605a:	f000 fb74 	bl	8006746 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	2160      	movs	r1, #96	; 0x60
 8006064:	4618      	mov	r0, r3
 8006066:	f000 fb9e 	bl	80067a6 <TIM_ITRx_SetConfig>
      break;
 800606a:	e08e      	b.n	800618a <HAL_TIM_ConfigClockSource+0x5be>
 800606c:	40010000 	.word	0x40010000
 8006070:	40000400 	.word	0x40000400
 8006074:	40000800 	.word	0x40000800
 8006078:	40000c00 	.word	0x40000c00
 800607c:	0800a258 	.word	0x0800a258
 8006080:	40014000 	.word	0x40014000
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	4a46      	ldr	r2, [pc, #280]	; (80061a4 <HAL_TIM_ConfigClockSource+0x5d8>)
 800608a:	4293      	cmp	r3, r2
 800608c:	d01d      	beq.n	80060ca <HAL_TIM_ConfigClockSource+0x4fe>
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006096:	d018      	beq.n	80060ca <HAL_TIM_ConfigClockSource+0x4fe>
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	4a42      	ldr	r2, [pc, #264]	; (80061a8 <HAL_TIM_ConfigClockSource+0x5dc>)
 800609e:	4293      	cmp	r3, r2
 80060a0:	d013      	beq.n	80060ca <HAL_TIM_ConfigClockSource+0x4fe>
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	4a41      	ldr	r2, [pc, #260]	; (80061ac <HAL_TIM_ConfigClockSource+0x5e0>)
 80060a8:	4293      	cmp	r3, r2
 80060aa:	d00e      	beq.n	80060ca <HAL_TIM_ConfigClockSource+0x4fe>
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	4a3f      	ldr	r2, [pc, #252]	; (80061b0 <HAL_TIM_ConfigClockSource+0x5e4>)
 80060b2:	4293      	cmp	r3, r2
 80060b4:	d009      	beq.n	80060ca <HAL_TIM_ConfigClockSource+0x4fe>
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	4a3e      	ldr	r2, [pc, #248]	; (80061b4 <HAL_TIM_ConfigClockSource+0x5e8>)
 80060bc:	4293      	cmp	r3, r2
 80060be:	d004      	beq.n	80060ca <HAL_TIM_ConfigClockSource+0x4fe>
 80060c0:	f241 11ea 	movw	r1, #4586	; 0x11ea
 80060c4:	483c      	ldr	r0, [pc, #240]	; (80061b8 <HAL_TIM_ConfigClockSource+0x5ec>)
 80060c6:	f7fa fd68 	bl	8000b9a <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 80060ca:	683b      	ldr	r3, [r7, #0]
 80060cc:	685b      	ldr	r3, [r3, #4]
 80060ce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80060d2:	d014      	beq.n	80060fe <HAL_TIM_ConfigClockSource+0x532>
 80060d4:	683b      	ldr	r3, [r7, #0]
 80060d6:	685b      	ldr	r3, [r3, #4]
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d010      	beq.n	80060fe <HAL_TIM_ConfigClockSource+0x532>
 80060dc:	683b      	ldr	r3, [r7, #0]
 80060de:	685b      	ldr	r3, [r3, #4]
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d00c      	beq.n	80060fe <HAL_TIM_ConfigClockSource+0x532>
 80060e4:	683b      	ldr	r3, [r7, #0]
 80060e6:	685b      	ldr	r3, [r3, #4]
 80060e8:	2b02      	cmp	r3, #2
 80060ea:	d008      	beq.n	80060fe <HAL_TIM_ConfigClockSource+0x532>
 80060ec:	683b      	ldr	r3, [r7, #0]
 80060ee:	685b      	ldr	r3, [r3, #4]
 80060f0:	2b0a      	cmp	r3, #10
 80060f2:	d004      	beq.n	80060fe <HAL_TIM_ConfigClockSource+0x532>
 80060f4:	f241 11ed 	movw	r1, #4589	; 0x11ed
 80060f8:	482f      	ldr	r0, [pc, #188]	; (80061b8 <HAL_TIM_ConfigClockSource+0x5ec>)
 80060fa:	f7fa fd4e 	bl	8000b9a <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 80060fe:	683b      	ldr	r3, [r7, #0]
 8006100:	68db      	ldr	r3, [r3, #12]
 8006102:	2b0f      	cmp	r3, #15
 8006104:	d904      	bls.n	8006110 <HAL_TIM_ConfigClockSource+0x544>
 8006106:	f241 11ee 	movw	r1, #4590	; 0x11ee
 800610a:	482b      	ldr	r0, [pc, #172]	; (80061b8 <HAL_TIM_ConfigClockSource+0x5ec>)
 800610c:	f7fa fd45 	bl	8000b9a <assert_failed>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	6818      	ldr	r0, [r3, #0]
 8006114:	683b      	ldr	r3, [r7, #0]
 8006116:	6859      	ldr	r1, [r3, #4]
 8006118:	683b      	ldr	r3, [r7, #0]
 800611a:	68db      	ldr	r3, [r3, #12]
 800611c:	461a      	mov	r2, r3
 800611e:	f000 fae3 	bl	80066e8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	2140      	movs	r1, #64	; 0x40
 8006128:	4618      	mov	r0, r3
 800612a:	f000 fb3c 	bl	80067a6 <TIM_ITRx_SetConfig>
      break;
 800612e:	e02c      	b.n	800618a <HAL_TIM_ConfigClockSource+0x5be>
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	4a1b      	ldr	r2, [pc, #108]	; (80061a4 <HAL_TIM_ConfigClockSource+0x5d8>)
 8006136:	4293      	cmp	r3, r2
 8006138:	d01d      	beq.n	8006176 <HAL_TIM_ConfigClockSource+0x5aa>
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006142:	d018      	beq.n	8006176 <HAL_TIM_ConfigClockSource+0x5aa>
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	4a17      	ldr	r2, [pc, #92]	; (80061a8 <HAL_TIM_ConfigClockSource+0x5dc>)
 800614a:	4293      	cmp	r3, r2
 800614c:	d013      	beq.n	8006176 <HAL_TIM_ConfigClockSource+0x5aa>
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	4a16      	ldr	r2, [pc, #88]	; (80061ac <HAL_TIM_ConfigClockSource+0x5e0>)
 8006154:	4293      	cmp	r3, r2
 8006156:	d00e      	beq.n	8006176 <HAL_TIM_ConfigClockSource+0x5aa>
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	4a14      	ldr	r2, [pc, #80]	; (80061b0 <HAL_TIM_ConfigClockSource+0x5e4>)
 800615e:	4293      	cmp	r3, r2
 8006160:	d009      	beq.n	8006176 <HAL_TIM_ConfigClockSource+0x5aa>
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	4a13      	ldr	r2, [pc, #76]	; (80061b4 <HAL_TIM_ConfigClockSource+0x5e8>)
 8006168:	4293      	cmp	r3, r2
 800616a:	d004      	beq.n	8006176 <HAL_TIM_ConfigClockSource+0x5aa>
 800616c:	f241 11fd 	movw	r1, #4605	; 0x11fd
 8006170:	4811      	ldr	r0, [pc, #68]	; (80061b8 <HAL_TIM_ConfigClockSource+0x5ec>)
 8006172:	f7fa fd12 	bl	8000b9a <assert_failed>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	681a      	ldr	r2, [r3, #0]
 800617a:	683b      	ldr	r3, [r7, #0]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	4619      	mov	r1, r3
 8006180:	4610      	mov	r0, r2
 8006182:	f000 fb10 	bl	80067a6 <TIM_ITRx_SetConfig>
      break;
 8006186:	e000      	b.n	800618a <HAL_TIM_ConfigClockSource+0x5be>
      break;
 8006188:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	2201      	movs	r2, #1
 800618e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	2200      	movs	r2, #0
 8006196:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800619a:	2300      	movs	r3, #0
}
 800619c:	4618      	mov	r0, r3
 800619e:	3710      	adds	r7, #16
 80061a0:	46bd      	mov	sp, r7
 80061a2:	bd80      	pop	{r7, pc}
 80061a4:	40010000 	.word	0x40010000
 80061a8:	40000400 	.word	0x40000400
 80061ac:	40000800 	.word	0x40000800
 80061b0:	40000c00 	.word	0x40000c00
 80061b4:	40014000 	.word	0x40014000
 80061b8:	0800a258 	.word	0x0800a258

080061bc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80061bc:	b480      	push	{r7}
 80061be:	b085      	sub	sp, #20
 80061c0:	af00      	add	r7, sp, #0
 80061c2:	6078      	str	r0, [r7, #4]
 80061c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	4a34      	ldr	r2, [pc, #208]	; (80062a0 <TIM_Base_SetConfig+0xe4>)
 80061d0:	4293      	cmp	r3, r2
 80061d2:	d00f      	beq.n	80061f4 <TIM_Base_SetConfig+0x38>
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80061da:	d00b      	beq.n	80061f4 <TIM_Base_SetConfig+0x38>
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	4a31      	ldr	r2, [pc, #196]	; (80062a4 <TIM_Base_SetConfig+0xe8>)
 80061e0:	4293      	cmp	r3, r2
 80061e2:	d007      	beq.n	80061f4 <TIM_Base_SetConfig+0x38>
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	4a30      	ldr	r2, [pc, #192]	; (80062a8 <TIM_Base_SetConfig+0xec>)
 80061e8:	4293      	cmp	r3, r2
 80061ea:	d003      	beq.n	80061f4 <TIM_Base_SetConfig+0x38>
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	4a2f      	ldr	r2, [pc, #188]	; (80062ac <TIM_Base_SetConfig+0xf0>)
 80061f0:	4293      	cmp	r3, r2
 80061f2:	d108      	bne.n	8006206 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80061fa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80061fc:	683b      	ldr	r3, [r7, #0]
 80061fe:	685b      	ldr	r3, [r3, #4]
 8006200:	68fa      	ldr	r2, [r7, #12]
 8006202:	4313      	orrs	r3, r2
 8006204:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	4a25      	ldr	r2, [pc, #148]	; (80062a0 <TIM_Base_SetConfig+0xe4>)
 800620a:	4293      	cmp	r3, r2
 800620c:	d01b      	beq.n	8006246 <TIM_Base_SetConfig+0x8a>
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006214:	d017      	beq.n	8006246 <TIM_Base_SetConfig+0x8a>
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	4a22      	ldr	r2, [pc, #136]	; (80062a4 <TIM_Base_SetConfig+0xe8>)
 800621a:	4293      	cmp	r3, r2
 800621c:	d013      	beq.n	8006246 <TIM_Base_SetConfig+0x8a>
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	4a21      	ldr	r2, [pc, #132]	; (80062a8 <TIM_Base_SetConfig+0xec>)
 8006222:	4293      	cmp	r3, r2
 8006224:	d00f      	beq.n	8006246 <TIM_Base_SetConfig+0x8a>
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	4a20      	ldr	r2, [pc, #128]	; (80062ac <TIM_Base_SetConfig+0xf0>)
 800622a:	4293      	cmp	r3, r2
 800622c:	d00b      	beq.n	8006246 <TIM_Base_SetConfig+0x8a>
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	4a1f      	ldr	r2, [pc, #124]	; (80062b0 <TIM_Base_SetConfig+0xf4>)
 8006232:	4293      	cmp	r3, r2
 8006234:	d007      	beq.n	8006246 <TIM_Base_SetConfig+0x8a>
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	4a1e      	ldr	r2, [pc, #120]	; (80062b4 <TIM_Base_SetConfig+0xf8>)
 800623a:	4293      	cmp	r3, r2
 800623c:	d003      	beq.n	8006246 <TIM_Base_SetConfig+0x8a>
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	4a1d      	ldr	r2, [pc, #116]	; (80062b8 <TIM_Base_SetConfig+0xfc>)
 8006242:	4293      	cmp	r3, r2
 8006244:	d108      	bne.n	8006258 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800624c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800624e:	683b      	ldr	r3, [r7, #0]
 8006250:	68db      	ldr	r3, [r3, #12]
 8006252:	68fa      	ldr	r2, [r7, #12]
 8006254:	4313      	orrs	r3, r2
 8006256:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800625e:	683b      	ldr	r3, [r7, #0]
 8006260:	695b      	ldr	r3, [r3, #20]
 8006262:	4313      	orrs	r3, r2
 8006264:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	68fa      	ldr	r2, [r7, #12]
 800626a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800626c:	683b      	ldr	r3, [r7, #0]
 800626e:	689a      	ldr	r2, [r3, #8]
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006274:	683b      	ldr	r3, [r7, #0]
 8006276:	681a      	ldr	r2, [r3, #0]
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	4a08      	ldr	r2, [pc, #32]	; (80062a0 <TIM_Base_SetConfig+0xe4>)
 8006280:	4293      	cmp	r3, r2
 8006282:	d103      	bne.n	800628c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006284:	683b      	ldr	r3, [r7, #0]
 8006286:	691a      	ldr	r2, [r3, #16]
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	2201      	movs	r2, #1
 8006290:	615a      	str	r2, [r3, #20]
}
 8006292:	bf00      	nop
 8006294:	3714      	adds	r7, #20
 8006296:	46bd      	mov	sp, r7
 8006298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800629c:	4770      	bx	lr
 800629e:	bf00      	nop
 80062a0:	40010000 	.word	0x40010000
 80062a4:	40000400 	.word	0x40000400
 80062a8:	40000800 	.word	0x40000800
 80062ac:	40000c00 	.word	0x40000c00
 80062b0:	40014000 	.word	0x40014000
 80062b4:	40014400 	.word	0x40014400
 80062b8:	40014800 	.word	0x40014800

080062bc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80062bc:	b580      	push	{r7, lr}
 80062be:	b086      	sub	sp, #24
 80062c0:	af00      	add	r7, sp, #0
 80062c2:	6078      	str	r0, [r7, #4]
 80062c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	6a1b      	ldr	r3, [r3, #32]
 80062ca:	f023 0201 	bic.w	r2, r3, #1
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	6a1b      	ldr	r3, [r3, #32]
 80062d6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	685b      	ldr	r3, [r3, #4]
 80062dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	699b      	ldr	r3, [r3, #24]
 80062e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80062ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	f023 0303 	bic.w	r3, r3, #3
 80062f2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80062f4:	683b      	ldr	r3, [r7, #0]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	68fa      	ldr	r2, [r7, #12]
 80062fa:	4313      	orrs	r3, r2
 80062fc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80062fe:	697b      	ldr	r3, [r7, #20]
 8006300:	f023 0302 	bic.w	r3, r3, #2
 8006304:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006306:	683b      	ldr	r3, [r7, #0]
 8006308:	689b      	ldr	r3, [r3, #8]
 800630a:	697a      	ldr	r2, [r7, #20]
 800630c:	4313      	orrs	r3, r2
 800630e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	4a30      	ldr	r2, [pc, #192]	; (80063d4 <TIM_OC1_SetConfig+0x118>)
 8006314:	4293      	cmp	r3, r2
 8006316:	d119      	bne.n	800634c <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 8006318:	683b      	ldr	r3, [r7, #0]
 800631a:	68db      	ldr	r3, [r3, #12]
 800631c:	2b00      	cmp	r3, #0
 800631e:	d008      	beq.n	8006332 <TIM_OC1_SetConfig+0x76>
 8006320:	683b      	ldr	r3, [r7, #0]
 8006322:	68db      	ldr	r3, [r3, #12]
 8006324:	2b08      	cmp	r3, #8
 8006326:	d004      	beq.n	8006332 <TIM_OC1_SetConfig+0x76>
 8006328:	f241 7102 	movw	r1, #5890	; 0x1702
 800632c:	482a      	ldr	r0, [pc, #168]	; (80063d8 <TIM_OC1_SetConfig+0x11c>)
 800632e:	f7fa fc34 	bl	8000b9a <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006332:	697b      	ldr	r3, [r7, #20]
 8006334:	f023 0308 	bic.w	r3, r3, #8
 8006338:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800633a:	683b      	ldr	r3, [r7, #0]
 800633c:	68db      	ldr	r3, [r3, #12]
 800633e:	697a      	ldr	r2, [r7, #20]
 8006340:	4313      	orrs	r3, r2
 8006342:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006344:	697b      	ldr	r3, [r7, #20]
 8006346:	f023 0304 	bic.w	r3, r3, #4
 800634a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	4a21      	ldr	r2, [pc, #132]	; (80063d4 <TIM_OC1_SetConfig+0x118>)
 8006350:	4293      	cmp	r3, r2
 8006352:	d12d      	bne.n	80063b0 <TIM_OC1_SetConfig+0xf4>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 8006354:	683b      	ldr	r3, [r7, #0]
 8006356:	699b      	ldr	r3, [r3, #24]
 8006358:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800635c:	d008      	beq.n	8006370 <TIM_OC1_SetConfig+0xb4>
 800635e:	683b      	ldr	r3, [r7, #0]
 8006360:	699b      	ldr	r3, [r3, #24]
 8006362:	2b00      	cmp	r3, #0
 8006364:	d004      	beq.n	8006370 <TIM_OC1_SetConfig+0xb4>
 8006366:	f241 710f 	movw	r1, #5903	; 0x170f
 800636a:	481b      	ldr	r0, [pc, #108]	; (80063d8 <TIM_OC1_SetConfig+0x11c>)
 800636c:	f7fa fc15 	bl	8000b9a <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 8006370:	683b      	ldr	r3, [r7, #0]
 8006372:	695b      	ldr	r3, [r3, #20]
 8006374:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006378:	d008      	beq.n	800638c <TIM_OC1_SetConfig+0xd0>
 800637a:	683b      	ldr	r3, [r7, #0]
 800637c:	695b      	ldr	r3, [r3, #20]
 800637e:	2b00      	cmp	r3, #0
 8006380:	d004      	beq.n	800638c <TIM_OC1_SetConfig+0xd0>
 8006382:	f241 7110 	movw	r1, #5904	; 0x1710
 8006386:	4814      	ldr	r0, [pc, #80]	; (80063d8 <TIM_OC1_SetConfig+0x11c>)
 8006388:	f7fa fc07 	bl	8000b9a <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800638c:	693b      	ldr	r3, [r7, #16]
 800638e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006392:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006394:	693b      	ldr	r3, [r7, #16]
 8006396:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800639a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800639c:	683b      	ldr	r3, [r7, #0]
 800639e:	695b      	ldr	r3, [r3, #20]
 80063a0:	693a      	ldr	r2, [r7, #16]
 80063a2:	4313      	orrs	r3, r2
 80063a4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80063a6:	683b      	ldr	r3, [r7, #0]
 80063a8:	699b      	ldr	r3, [r3, #24]
 80063aa:	693a      	ldr	r2, [r7, #16]
 80063ac:	4313      	orrs	r3, r2
 80063ae:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	693a      	ldr	r2, [r7, #16]
 80063b4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	68fa      	ldr	r2, [r7, #12]
 80063ba:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80063bc:	683b      	ldr	r3, [r7, #0]
 80063be:	685a      	ldr	r2, [r3, #4]
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	697a      	ldr	r2, [r7, #20]
 80063c8:	621a      	str	r2, [r3, #32]
}
 80063ca:	bf00      	nop
 80063cc:	3718      	adds	r7, #24
 80063ce:	46bd      	mov	sp, r7
 80063d0:	bd80      	pop	{r7, pc}
 80063d2:	bf00      	nop
 80063d4:	40010000 	.word	0x40010000
 80063d8:	0800a258 	.word	0x0800a258

080063dc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80063dc:	b580      	push	{r7, lr}
 80063de:	b086      	sub	sp, #24
 80063e0:	af00      	add	r7, sp, #0
 80063e2:	6078      	str	r0, [r7, #4]
 80063e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	6a1b      	ldr	r3, [r3, #32]
 80063ea:	f023 0210 	bic.w	r2, r3, #16
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	6a1b      	ldr	r3, [r3, #32]
 80063f6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	685b      	ldr	r3, [r3, #4]
 80063fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	699b      	ldr	r3, [r3, #24]
 8006402:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800640a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006412:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006414:	683b      	ldr	r3, [r7, #0]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	021b      	lsls	r3, r3, #8
 800641a:	68fa      	ldr	r2, [r7, #12]
 800641c:	4313      	orrs	r3, r2
 800641e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006420:	697b      	ldr	r3, [r7, #20]
 8006422:	f023 0320 	bic.w	r3, r3, #32
 8006426:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006428:	683b      	ldr	r3, [r7, #0]
 800642a:	689b      	ldr	r3, [r3, #8]
 800642c:	011b      	lsls	r3, r3, #4
 800642e:	697a      	ldr	r2, [r7, #20]
 8006430:	4313      	orrs	r3, r2
 8006432:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	4a31      	ldr	r2, [pc, #196]	; (80064fc <TIM_OC2_SetConfig+0x120>)
 8006438:	4293      	cmp	r3, r2
 800643a:	d11a      	bne.n	8006472 <TIM_OC2_SetConfig+0x96>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 800643c:	683b      	ldr	r3, [r7, #0]
 800643e:	68db      	ldr	r3, [r3, #12]
 8006440:	2b00      	cmp	r3, #0
 8006442:	d008      	beq.n	8006456 <TIM_OC2_SetConfig+0x7a>
 8006444:	683b      	ldr	r3, [r7, #0]
 8006446:	68db      	ldr	r3, [r3, #12]
 8006448:	2b08      	cmp	r3, #8
 800644a:	d004      	beq.n	8006456 <TIM_OC2_SetConfig+0x7a>
 800644c:	f241 714d 	movw	r1, #5965	; 0x174d
 8006450:	482b      	ldr	r0, [pc, #172]	; (8006500 <TIM_OC2_SetConfig+0x124>)
 8006452:	f7fa fba2 	bl	8000b9a <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006456:	697b      	ldr	r3, [r7, #20]
 8006458:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800645c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800645e:	683b      	ldr	r3, [r7, #0]
 8006460:	68db      	ldr	r3, [r3, #12]
 8006462:	011b      	lsls	r3, r3, #4
 8006464:	697a      	ldr	r2, [r7, #20]
 8006466:	4313      	orrs	r3, r2
 8006468:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800646a:	697b      	ldr	r3, [r7, #20]
 800646c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006470:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	4a21      	ldr	r2, [pc, #132]	; (80064fc <TIM_OC2_SetConfig+0x120>)
 8006476:	4293      	cmp	r3, r2
 8006478:	d12f      	bne.n	80064da <TIM_OC2_SetConfig+0xfe>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 800647a:	683b      	ldr	r3, [r7, #0]
 800647c:	699b      	ldr	r3, [r3, #24]
 800647e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006482:	d008      	beq.n	8006496 <TIM_OC2_SetConfig+0xba>
 8006484:	683b      	ldr	r3, [r7, #0]
 8006486:	699b      	ldr	r3, [r3, #24]
 8006488:	2b00      	cmp	r3, #0
 800648a:	d004      	beq.n	8006496 <TIM_OC2_SetConfig+0xba>
 800648c:	f241 715b 	movw	r1, #5979	; 0x175b
 8006490:	481b      	ldr	r0, [pc, #108]	; (8006500 <TIM_OC2_SetConfig+0x124>)
 8006492:	f7fa fb82 	bl	8000b9a <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 8006496:	683b      	ldr	r3, [r7, #0]
 8006498:	695b      	ldr	r3, [r3, #20]
 800649a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800649e:	d008      	beq.n	80064b2 <TIM_OC2_SetConfig+0xd6>
 80064a0:	683b      	ldr	r3, [r7, #0]
 80064a2:	695b      	ldr	r3, [r3, #20]
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d004      	beq.n	80064b2 <TIM_OC2_SetConfig+0xd6>
 80064a8:	f241 715c 	movw	r1, #5980	; 0x175c
 80064ac:	4814      	ldr	r0, [pc, #80]	; (8006500 <TIM_OC2_SetConfig+0x124>)
 80064ae:	f7fa fb74 	bl	8000b9a <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80064b2:	693b      	ldr	r3, [r7, #16]
 80064b4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80064b8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80064ba:	693b      	ldr	r3, [r7, #16]
 80064bc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80064c0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80064c2:	683b      	ldr	r3, [r7, #0]
 80064c4:	695b      	ldr	r3, [r3, #20]
 80064c6:	009b      	lsls	r3, r3, #2
 80064c8:	693a      	ldr	r2, [r7, #16]
 80064ca:	4313      	orrs	r3, r2
 80064cc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80064ce:	683b      	ldr	r3, [r7, #0]
 80064d0:	699b      	ldr	r3, [r3, #24]
 80064d2:	009b      	lsls	r3, r3, #2
 80064d4:	693a      	ldr	r2, [r7, #16]
 80064d6:	4313      	orrs	r3, r2
 80064d8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	693a      	ldr	r2, [r7, #16]
 80064de:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	68fa      	ldr	r2, [r7, #12]
 80064e4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80064e6:	683b      	ldr	r3, [r7, #0]
 80064e8:	685a      	ldr	r2, [r3, #4]
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	697a      	ldr	r2, [r7, #20]
 80064f2:	621a      	str	r2, [r3, #32]
}
 80064f4:	bf00      	nop
 80064f6:	3718      	adds	r7, #24
 80064f8:	46bd      	mov	sp, r7
 80064fa:	bd80      	pop	{r7, pc}
 80064fc:	40010000 	.word	0x40010000
 8006500:	0800a258 	.word	0x0800a258

08006504 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006504:	b580      	push	{r7, lr}
 8006506:	b086      	sub	sp, #24
 8006508:	af00      	add	r7, sp, #0
 800650a:	6078      	str	r0, [r7, #4]
 800650c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	6a1b      	ldr	r3, [r3, #32]
 8006512:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	6a1b      	ldr	r3, [r3, #32]
 800651e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	685b      	ldr	r3, [r3, #4]
 8006524:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	69db      	ldr	r3, [r3, #28]
 800652a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006532:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	f023 0303 	bic.w	r3, r3, #3
 800653a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800653c:	683b      	ldr	r3, [r7, #0]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	68fa      	ldr	r2, [r7, #12]
 8006542:	4313      	orrs	r3, r2
 8006544:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006546:	697b      	ldr	r3, [r7, #20]
 8006548:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800654c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800654e:	683b      	ldr	r3, [r7, #0]
 8006550:	689b      	ldr	r3, [r3, #8]
 8006552:	021b      	lsls	r3, r3, #8
 8006554:	697a      	ldr	r2, [r7, #20]
 8006556:	4313      	orrs	r3, r2
 8006558:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	4a31      	ldr	r2, [pc, #196]	; (8006624 <TIM_OC3_SetConfig+0x120>)
 800655e:	4293      	cmp	r3, r2
 8006560:	d11a      	bne.n	8006598 <TIM_OC3_SetConfig+0x94>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 8006562:	683b      	ldr	r3, [r7, #0]
 8006564:	68db      	ldr	r3, [r3, #12]
 8006566:	2b00      	cmp	r3, #0
 8006568:	d008      	beq.n	800657c <TIM_OC3_SetConfig+0x78>
 800656a:	683b      	ldr	r3, [r7, #0]
 800656c:	68db      	ldr	r3, [r3, #12]
 800656e:	2b08      	cmp	r3, #8
 8006570:	d004      	beq.n	800657c <TIM_OC3_SetConfig+0x78>
 8006572:	f241 7198 	movw	r1, #6040	; 0x1798
 8006576:	482c      	ldr	r0, [pc, #176]	; (8006628 <TIM_OC3_SetConfig+0x124>)
 8006578:	f7fa fb0f 	bl	8000b9a <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800657c:	697b      	ldr	r3, [r7, #20]
 800657e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006582:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006584:	683b      	ldr	r3, [r7, #0]
 8006586:	68db      	ldr	r3, [r3, #12]
 8006588:	021b      	lsls	r3, r3, #8
 800658a:	697a      	ldr	r2, [r7, #20]
 800658c:	4313      	orrs	r3, r2
 800658e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006590:	697b      	ldr	r3, [r7, #20]
 8006592:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006596:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	4a22      	ldr	r2, [pc, #136]	; (8006624 <TIM_OC3_SetConfig+0x120>)
 800659c:	4293      	cmp	r3, r2
 800659e:	d12f      	bne.n	8006600 <TIM_OC3_SetConfig+0xfc>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 80065a0:	683b      	ldr	r3, [r7, #0]
 80065a2:	699b      	ldr	r3, [r3, #24]
 80065a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80065a8:	d008      	beq.n	80065bc <TIM_OC3_SetConfig+0xb8>
 80065aa:	683b      	ldr	r3, [r7, #0]
 80065ac:	699b      	ldr	r3, [r3, #24]
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d004      	beq.n	80065bc <TIM_OC3_SetConfig+0xb8>
 80065b2:	f241 71a5 	movw	r1, #6053	; 0x17a5
 80065b6:	481c      	ldr	r0, [pc, #112]	; (8006628 <TIM_OC3_SetConfig+0x124>)
 80065b8:	f7fa faef 	bl	8000b9a <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 80065bc:	683b      	ldr	r3, [r7, #0]
 80065be:	695b      	ldr	r3, [r3, #20]
 80065c0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80065c4:	d008      	beq.n	80065d8 <TIM_OC3_SetConfig+0xd4>
 80065c6:	683b      	ldr	r3, [r7, #0]
 80065c8:	695b      	ldr	r3, [r3, #20]
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d004      	beq.n	80065d8 <TIM_OC3_SetConfig+0xd4>
 80065ce:	f241 71a6 	movw	r1, #6054	; 0x17a6
 80065d2:	4815      	ldr	r0, [pc, #84]	; (8006628 <TIM_OC3_SetConfig+0x124>)
 80065d4:	f7fa fae1 	bl	8000b9a <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80065d8:	693b      	ldr	r3, [r7, #16]
 80065da:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80065de:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80065e0:	693b      	ldr	r3, [r7, #16]
 80065e2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80065e6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80065e8:	683b      	ldr	r3, [r7, #0]
 80065ea:	695b      	ldr	r3, [r3, #20]
 80065ec:	011b      	lsls	r3, r3, #4
 80065ee:	693a      	ldr	r2, [r7, #16]
 80065f0:	4313      	orrs	r3, r2
 80065f2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80065f4:	683b      	ldr	r3, [r7, #0]
 80065f6:	699b      	ldr	r3, [r3, #24]
 80065f8:	011b      	lsls	r3, r3, #4
 80065fa:	693a      	ldr	r2, [r7, #16]
 80065fc:	4313      	orrs	r3, r2
 80065fe:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	693a      	ldr	r2, [r7, #16]
 8006604:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	68fa      	ldr	r2, [r7, #12]
 800660a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800660c:	683b      	ldr	r3, [r7, #0]
 800660e:	685a      	ldr	r2, [r3, #4]
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	697a      	ldr	r2, [r7, #20]
 8006618:	621a      	str	r2, [r3, #32]
}
 800661a:	bf00      	nop
 800661c:	3718      	adds	r7, #24
 800661e:	46bd      	mov	sp, r7
 8006620:	bd80      	pop	{r7, pc}
 8006622:	bf00      	nop
 8006624:	40010000 	.word	0x40010000
 8006628:	0800a258 	.word	0x0800a258

0800662c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800662c:	b580      	push	{r7, lr}
 800662e:	b086      	sub	sp, #24
 8006630:	af00      	add	r7, sp, #0
 8006632:	6078      	str	r0, [r7, #4]
 8006634:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	6a1b      	ldr	r3, [r3, #32]
 800663a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	6a1b      	ldr	r3, [r3, #32]
 8006646:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	685b      	ldr	r3, [r3, #4]
 800664c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	69db      	ldr	r3, [r3, #28]
 8006652:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800665a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006662:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006664:	683b      	ldr	r3, [r7, #0]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	021b      	lsls	r3, r3, #8
 800666a:	68fa      	ldr	r2, [r7, #12]
 800666c:	4313      	orrs	r3, r2
 800666e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006670:	693b      	ldr	r3, [r7, #16]
 8006672:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006676:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006678:	683b      	ldr	r3, [r7, #0]
 800667a:	689b      	ldr	r3, [r3, #8]
 800667c:	031b      	lsls	r3, r3, #12
 800667e:	693a      	ldr	r2, [r7, #16]
 8006680:	4313      	orrs	r3, r2
 8006682:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	4a16      	ldr	r2, [pc, #88]	; (80066e0 <TIM_OC4_SetConfig+0xb4>)
 8006688:	4293      	cmp	r3, r2
 800668a:	d117      	bne.n	80066bc <TIM_OC4_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 800668c:	683b      	ldr	r3, [r7, #0]
 800668e:	695b      	ldr	r3, [r3, #20]
 8006690:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006694:	d008      	beq.n	80066a8 <TIM_OC4_SetConfig+0x7c>
 8006696:	683b      	ldr	r3, [r7, #0]
 8006698:	695b      	ldr	r3, [r3, #20]
 800669a:	2b00      	cmp	r3, #0
 800669c:	d004      	beq.n	80066a8 <TIM_OC4_SetConfig+0x7c>
 800669e:	f241 71e4 	movw	r1, #6116	; 0x17e4
 80066a2:	4810      	ldr	r0, [pc, #64]	; (80066e4 <TIM_OC4_SetConfig+0xb8>)
 80066a4:	f7fa fa79 	bl	8000b9a <assert_failed>

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80066a8:	697b      	ldr	r3, [r7, #20]
 80066aa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80066ae:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80066b0:	683b      	ldr	r3, [r7, #0]
 80066b2:	695b      	ldr	r3, [r3, #20]
 80066b4:	019b      	lsls	r3, r3, #6
 80066b6:	697a      	ldr	r2, [r7, #20]
 80066b8:	4313      	orrs	r3, r2
 80066ba:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	697a      	ldr	r2, [r7, #20]
 80066c0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	68fa      	ldr	r2, [r7, #12]
 80066c6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80066c8:	683b      	ldr	r3, [r7, #0]
 80066ca:	685a      	ldr	r2, [r3, #4]
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	693a      	ldr	r2, [r7, #16]
 80066d4:	621a      	str	r2, [r3, #32]
}
 80066d6:	bf00      	nop
 80066d8:	3718      	adds	r7, #24
 80066da:	46bd      	mov	sp, r7
 80066dc:	bd80      	pop	{r7, pc}
 80066de:	bf00      	nop
 80066e0:	40010000 	.word	0x40010000
 80066e4:	0800a258 	.word	0x0800a258

080066e8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80066e8:	b480      	push	{r7}
 80066ea:	b087      	sub	sp, #28
 80066ec:	af00      	add	r7, sp, #0
 80066ee:	60f8      	str	r0, [r7, #12]
 80066f0:	60b9      	str	r1, [r7, #8]
 80066f2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	6a1b      	ldr	r3, [r3, #32]
 80066f8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	6a1b      	ldr	r3, [r3, #32]
 80066fe:	f023 0201 	bic.w	r2, r3, #1
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	699b      	ldr	r3, [r3, #24]
 800670a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800670c:	693b      	ldr	r3, [r7, #16]
 800670e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006712:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	011b      	lsls	r3, r3, #4
 8006718:	693a      	ldr	r2, [r7, #16]
 800671a:	4313      	orrs	r3, r2
 800671c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800671e:	697b      	ldr	r3, [r7, #20]
 8006720:	f023 030a 	bic.w	r3, r3, #10
 8006724:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006726:	697a      	ldr	r2, [r7, #20]
 8006728:	68bb      	ldr	r3, [r7, #8]
 800672a:	4313      	orrs	r3, r2
 800672c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	693a      	ldr	r2, [r7, #16]
 8006732:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	697a      	ldr	r2, [r7, #20]
 8006738:	621a      	str	r2, [r3, #32]
}
 800673a:	bf00      	nop
 800673c:	371c      	adds	r7, #28
 800673e:	46bd      	mov	sp, r7
 8006740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006744:	4770      	bx	lr

08006746 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006746:	b480      	push	{r7}
 8006748:	b087      	sub	sp, #28
 800674a:	af00      	add	r7, sp, #0
 800674c:	60f8      	str	r0, [r7, #12]
 800674e:	60b9      	str	r1, [r7, #8]
 8006750:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	6a1b      	ldr	r3, [r3, #32]
 8006756:	f023 0210 	bic.w	r2, r3, #16
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	699b      	ldr	r3, [r3, #24]
 8006762:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	6a1b      	ldr	r3, [r3, #32]
 8006768:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800676a:	697b      	ldr	r3, [r7, #20]
 800676c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006770:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	031b      	lsls	r3, r3, #12
 8006776:	697a      	ldr	r2, [r7, #20]
 8006778:	4313      	orrs	r3, r2
 800677a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800677c:	693b      	ldr	r3, [r7, #16]
 800677e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006782:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006784:	68bb      	ldr	r3, [r7, #8]
 8006786:	011b      	lsls	r3, r3, #4
 8006788:	693a      	ldr	r2, [r7, #16]
 800678a:	4313      	orrs	r3, r2
 800678c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	697a      	ldr	r2, [r7, #20]
 8006792:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	693a      	ldr	r2, [r7, #16]
 8006798:	621a      	str	r2, [r3, #32]
}
 800679a:	bf00      	nop
 800679c:	371c      	adds	r7, #28
 800679e:	46bd      	mov	sp, r7
 80067a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067a4:	4770      	bx	lr

080067a6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80067a6:	b480      	push	{r7}
 80067a8:	b085      	sub	sp, #20
 80067aa:	af00      	add	r7, sp, #0
 80067ac:	6078      	str	r0, [r7, #4]
 80067ae:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	689b      	ldr	r3, [r3, #8]
 80067b4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80067bc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80067be:	683a      	ldr	r2, [r7, #0]
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	4313      	orrs	r3, r2
 80067c4:	f043 0307 	orr.w	r3, r3, #7
 80067c8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	68fa      	ldr	r2, [r7, #12]
 80067ce:	609a      	str	r2, [r3, #8]
}
 80067d0:	bf00      	nop
 80067d2:	3714      	adds	r7, #20
 80067d4:	46bd      	mov	sp, r7
 80067d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067da:	4770      	bx	lr

080067dc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80067dc:	b480      	push	{r7}
 80067de:	b087      	sub	sp, #28
 80067e0:	af00      	add	r7, sp, #0
 80067e2:	60f8      	str	r0, [r7, #12]
 80067e4:	60b9      	str	r1, [r7, #8]
 80067e6:	607a      	str	r2, [r7, #4]
 80067e8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	689b      	ldr	r3, [r3, #8]
 80067ee:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80067f0:	697b      	ldr	r3, [r7, #20]
 80067f2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80067f6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80067f8:	683b      	ldr	r3, [r7, #0]
 80067fa:	021a      	lsls	r2, r3, #8
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	431a      	orrs	r2, r3
 8006800:	68bb      	ldr	r3, [r7, #8]
 8006802:	4313      	orrs	r3, r2
 8006804:	697a      	ldr	r2, [r7, #20]
 8006806:	4313      	orrs	r3, r2
 8006808:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	697a      	ldr	r2, [r7, #20]
 800680e:	609a      	str	r2, [r3, #8]
}
 8006810:	bf00      	nop
 8006812:	371c      	adds	r7, #28
 8006814:	46bd      	mov	sp, r7
 8006816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800681a:	4770      	bx	lr

0800681c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800681c:	b580      	push	{r7, lr}
 800681e:	b086      	sub	sp, #24
 8006820:	af00      	add	r7, sp, #0
 8006822:	60f8      	str	r0, [r7, #12]
 8006824:	60b9      	str	r1, [r7, #8]
 8006826:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	4a2a      	ldr	r2, [pc, #168]	; (80068d4 <TIM_CCxChannelCmd+0xb8>)
 800682c:	4293      	cmp	r3, r2
 800682e:	d020      	beq.n	8006872 <TIM_CCxChannelCmd+0x56>
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006836:	d01c      	beq.n	8006872 <TIM_CCxChannelCmd+0x56>
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	4a27      	ldr	r2, [pc, #156]	; (80068d8 <TIM_CCxChannelCmd+0xbc>)
 800683c:	4293      	cmp	r3, r2
 800683e:	d018      	beq.n	8006872 <TIM_CCxChannelCmd+0x56>
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	4a26      	ldr	r2, [pc, #152]	; (80068dc <TIM_CCxChannelCmd+0xc0>)
 8006844:	4293      	cmp	r3, r2
 8006846:	d014      	beq.n	8006872 <TIM_CCxChannelCmd+0x56>
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	4a25      	ldr	r2, [pc, #148]	; (80068e0 <TIM_CCxChannelCmd+0xc4>)
 800684c:	4293      	cmp	r3, r2
 800684e:	d010      	beq.n	8006872 <TIM_CCxChannelCmd+0x56>
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	4a24      	ldr	r2, [pc, #144]	; (80068e4 <TIM_CCxChannelCmd+0xc8>)
 8006854:	4293      	cmp	r3, r2
 8006856:	d00c      	beq.n	8006872 <TIM_CCxChannelCmd+0x56>
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	4a23      	ldr	r2, [pc, #140]	; (80068e8 <TIM_CCxChannelCmd+0xcc>)
 800685c:	4293      	cmp	r3, r2
 800685e:	d008      	beq.n	8006872 <TIM_CCxChannelCmd+0x56>
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	4a22      	ldr	r2, [pc, #136]	; (80068ec <TIM_CCxChannelCmd+0xd0>)
 8006864:	4293      	cmp	r3, r2
 8006866:	d004      	beq.n	8006872 <TIM_CCxChannelCmd+0x56>
 8006868:	f641 11cc 	movw	r1, #6604	; 0x19cc
 800686c:	4820      	ldr	r0, [pc, #128]	; (80068f0 <TIM_CCxChannelCmd+0xd4>)
 800686e:	f7fa f994 	bl	8000b9a <assert_failed>
  assert_param(IS_TIM_CHANNELS(Channel));
 8006872:	68bb      	ldr	r3, [r7, #8]
 8006874:	2b00      	cmp	r3, #0
 8006876:	d010      	beq.n	800689a <TIM_CCxChannelCmd+0x7e>
 8006878:	68bb      	ldr	r3, [r7, #8]
 800687a:	2b04      	cmp	r3, #4
 800687c:	d00d      	beq.n	800689a <TIM_CCxChannelCmd+0x7e>
 800687e:	68bb      	ldr	r3, [r7, #8]
 8006880:	2b08      	cmp	r3, #8
 8006882:	d00a      	beq.n	800689a <TIM_CCxChannelCmd+0x7e>
 8006884:	68bb      	ldr	r3, [r7, #8]
 8006886:	2b0c      	cmp	r3, #12
 8006888:	d007      	beq.n	800689a <TIM_CCxChannelCmd+0x7e>
 800688a:	68bb      	ldr	r3, [r7, #8]
 800688c:	2b3c      	cmp	r3, #60	; 0x3c
 800688e:	d004      	beq.n	800689a <TIM_CCxChannelCmd+0x7e>
 8006890:	f641 11cd 	movw	r1, #6605	; 0x19cd
 8006894:	4816      	ldr	r0, [pc, #88]	; (80068f0 <TIM_CCxChannelCmd+0xd4>)
 8006896:	f7fa f980 	bl	8000b9a <assert_failed>

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800689a:	68bb      	ldr	r3, [r7, #8]
 800689c:	f003 031f 	and.w	r3, r3, #31
 80068a0:	2201      	movs	r2, #1
 80068a2:	fa02 f303 	lsl.w	r3, r2, r3
 80068a6:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	6a1a      	ldr	r2, [r3, #32]
 80068ac:	697b      	ldr	r3, [r7, #20]
 80068ae:	43db      	mvns	r3, r3
 80068b0:	401a      	ands	r2, r3
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	6a1a      	ldr	r2, [r3, #32]
 80068ba:	68bb      	ldr	r3, [r7, #8]
 80068bc:	f003 031f 	and.w	r3, r3, #31
 80068c0:	6879      	ldr	r1, [r7, #4]
 80068c2:	fa01 f303 	lsl.w	r3, r1, r3
 80068c6:	431a      	orrs	r2, r3
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	621a      	str	r2, [r3, #32]
}
 80068cc:	bf00      	nop
 80068ce:	3718      	adds	r7, #24
 80068d0:	46bd      	mov	sp, r7
 80068d2:	bd80      	pop	{r7, pc}
 80068d4:	40010000 	.word	0x40010000
 80068d8:	40000400 	.word	0x40000400
 80068dc:	40000800 	.word	0x40000800
 80068e0:	40000c00 	.word	0x40000c00
 80068e4:	40014000 	.word	0x40014000
 80068e8:	40014400 	.word	0x40014400
 80068ec:	40014800 	.word	0x40014800
 80068f0:	0800a258 	.word	0x0800a258

080068f4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80068f4:	b580      	push	{r7, lr}
 80068f6:	b084      	sub	sp, #16
 80068f8:	af00      	add	r7, sp, #0
 80068fa:	6078      	str	r0, [r7, #4]
 80068fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr2;
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	4a55      	ldr	r2, [pc, #340]	; (8006a58 <HAL_TIMEx_MasterConfigSynchronization+0x164>)
 8006904:	4293      	cmp	r3, r2
 8006906:	d018      	beq.n	800693a <HAL_TIMEx_MasterConfigSynchronization+0x46>
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006910:	d013      	beq.n	800693a <HAL_TIMEx_MasterConfigSynchronization+0x46>
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	4a51      	ldr	r2, [pc, #324]	; (8006a5c <HAL_TIMEx_MasterConfigSynchronization+0x168>)
 8006918:	4293      	cmp	r3, r2
 800691a:	d00e      	beq.n	800693a <HAL_TIMEx_MasterConfigSynchronization+0x46>
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	4a4f      	ldr	r2, [pc, #316]	; (8006a60 <HAL_TIMEx_MasterConfigSynchronization+0x16c>)
 8006922:	4293      	cmp	r3, r2
 8006924:	d009      	beq.n	800693a <HAL_TIMEx_MasterConfigSynchronization+0x46>
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	4a4e      	ldr	r2, [pc, #312]	; (8006a64 <HAL_TIMEx_MasterConfigSynchronization+0x170>)
 800692c:	4293      	cmp	r3, r2
 800692e:	d004      	beq.n	800693a <HAL_TIMEx_MasterConfigSynchronization+0x46>
 8006930:	f240 6164 	movw	r1, #1636	; 0x664
 8006934:	484c      	ldr	r0, [pc, #304]	; (8006a68 <HAL_TIMEx_MasterConfigSynchronization+0x174>)
 8006936:	f7fa f930 	bl	8000b9a <assert_failed>
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
 800693a:	683b      	ldr	r3, [r7, #0]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	2b00      	cmp	r3, #0
 8006940:	d020      	beq.n	8006984 <HAL_TIMEx_MasterConfigSynchronization+0x90>
 8006942:	683b      	ldr	r3, [r7, #0]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	2b10      	cmp	r3, #16
 8006948:	d01c      	beq.n	8006984 <HAL_TIMEx_MasterConfigSynchronization+0x90>
 800694a:	683b      	ldr	r3, [r7, #0]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	2b20      	cmp	r3, #32
 8006950:	d018      	beq.n	8006984 <HAL_TIMEx_MasterConfigSynchronization+0x90>
 8006952:	683b      	ldr	r3, [r7, #0]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	2b30      	cmp	r3, #48	; 0x30
 8006958:	d014      	beq.n	8006984 <HAL_TIMEx_MasterConfigSynchronization+0x90>
 800695a:	683b      	ldr	r3, [r7, #0]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	2b40      	cmp	r3, #64	; 0x40
 8006960:	d010      	beq.n	8006984 <HAL_TIMEx_MasterConfigSynchronization+0x90>
 8006962:	683b      	ldr	r3, [r7, #0]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	2b50      	cmp	r3, #80	; 0x50
 8006968:	d00c      	beq.n	8006984 <HAL_TIMEx_MasterConfigSynchronization+0x90>
 800696a:	683b      	ldr	r3, [r7, #0]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	2b60      	cmp	r3, #96	; 0x60
 8006970:	d008      	beq.n	8006984 <HAL_TIMEx_MasterConfigSynchronization+0x90>
 8006972:	683b      	ldr	r3, [r7, #0]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	2b70      	cmp	r3, #112	; 0x70
 8006978:	d004      	beq.n	8006984 <HAL_TIMEx_MasterConfigSynchronization+0x90>
 800697a:	f240 6165 	movw	r1, #1637	; 0x665
 800697e:	483a      	ldr	r0, [pc, #232]	; (8006a68 <HAL_TIMEx_MasterConfigSynchronization+0x174>)
 8006980:	f7fa f90b 	bl	8000b9a <assert_failed>
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
 8006984:	683b      	ldr	r3, [r7, #0]
 8006986:	685b      	ldr	r3, [r3, #4]
 8006988:	2b80      	cmp	r3, #128	; 0x80
 800698a:	d008      	beq.n	800699e <HAL_TIMEx_MasterConfigSynchronization+0xaa>
 800698c:	683b      	ldr	r3, [r7, #0]
 800698e:	685b      	ldr	r3, [r3, #4]
 8006990:	2b00      	cmp	r3, #0
 8006992:	d004      	beq.n	800699e <HAL_TIMEx_MasterConfigSynchronization+0xaa>
 8006994:	f240 6166 	movw	r1, #1638	; 0x666
 8006998:	4833      	ldr	r0, [pc, #204]	; (8006a68 <HAL_TIMEx_MasterConfigSynchronization+0x174>)
 800699a:	f7fa f8fe 	bl	8000b9a <assert_failed>

  /* Check input state */
  __HAL_LOCK(htim);
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80069a4:	2b01      	cmp	r3, #1
 80069a6:	d101      	bne.n	80069ac <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80069a8:	2302      	movs	r3, #2
 80069aa:	e050      	b.n	8006a4e <HAL_TIMEx_MasterConfigSynchronization+0x15a>
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	2201      	movs	r2, #1
 80069b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	2202      	movs	r2, #2
 80069b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	685b      	ldr	r3, [r3, #4]
 80069c2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	689b      	ldr	r3, [r3, #8]
 80069ca:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80069d2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80069d4:	683b      	ldr	r3, [r7, #0]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	68fa      	ldr	r2, [r7, #12]
 80069da:	4313      	orrs	r3, r2
 80069dc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	68fa      	ldr	r2, [r7, #12]
 80069e4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	4a1b      	ldr	r2, [pc, #108]	; (8006a58 <HAL_TIMEx_MasterConfigSynchronization+0x164>)
 80069ec:	4293      	cmp	r3, r2
 80069ee:	d018      	beq.n	8006a22 <HAL_TIMEx_MasterConfigSynchronization+0x12e>
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80069f8:	d013      	beq.n	8006a22 <HAL_TIMEx_MasterConfigSynchronization+0x12e>
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	4a17      	ldr	r2, [pc, #92]	; (8006a5c <HAL_TIMEx_MasterConfigSynchronization+0x168>)
 8006a00:	4293      	cmp	r3, r2
 8006a02:	d00e      	beq.n	8006a22 <HAL_TIMEx_MasterConfigSynchronization+0x12e>
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	4a15      	ldr	r2, [pc, #84]	; (8006a60 <HAL_TIMEx_MasterConfigSynchronization+0x16c>)
 8006a0a:	4293      	cmp	r3, r2
 8006a0c:	d009      	beq.n	8006a22 <HAL_TIMEx_MasterConfigSynchronization+0x12e>
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	4a14      	ldr	r2, [pc, #80]	; (8006a64 <HAL_TIMEx_MasterConfigSynchronization+0x170>)
 8006a14:	4293      	cmp	r3, r2
 8006a16:	d004      	beq.n	8006a22 <HAL_TIMEx_MasterConfigSynchronization+0x12e>
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	4a13      	ldr	r2, [pc, #76]	; (8006a6c <HAL_TIMEx_MasterConfigSynchronization+0x178>)
 8006a1e:	4293      	cmp	r3, r2
 8006a20:	d10c      	bne.n	8006a3c <HAL_TIMEx_MasterConfigSynchronization+0x148>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006a22:	68bb      	ldr	r3, [r7, #8]
 8006a24:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006a28:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006a2a:	683b      	ldr	r3, [r7, #0]
 8006a2c:	685b      	ldr	r3, [r3, #4]
 8006a2e:	68ba      	ldr	r2, [r7, #8]
 8006a30:	4313      	orrs	r3, r2
 8006a32:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	68ba      	ldr	r2, [r7, #8]
 8006a3a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	2201      	movs	r2, #1
 8006a40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	2200      	movs	r2, #0
 8006a48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006a4c:	2300      	movs	r3, #0
}
 8006a4e:	4618      	mov	r0, r3
 8006a50:	3710      	adds	r7, #16
 8006a52:	46bd      	mov	sp, r7
 8006a54:	bd80      	pop	{r7, pc}
 8006a56:	bf00      	nop
 8006a58:	40010000 	.word	0x40010000
 8006a5c:	40000400 	.word	0x40000400
 8006a60:	40000800 	.word	0x40000800
 8006a64:	40000c00 	.word	0x40000c00
 8006a68:	0800a290 	.word	0x0800a290
 8006a6c:	40014000 	.word	0x40014000

08006a70 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006a70:	b580      	push	{r7, lr}
 8006a72:	b084      	sub	sp, #16
 8006a74:	af00      	add	r7, sp, #0
 8006a76:	6078      	str	r0, [r7, #4]
 8006a78:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006a7a:	2300      	movs	r3, #0
 8006a7c:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_BREAK_INSTANCE(htim->Instance));
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	4a5c      	ldr	r2, [pc, #368]	; (8006bf4 <HAL_TIMEx_ConfigBreakDeadTime+0x184>)
 8006a84:	4293      	cmp	r3, r2
 8006a86:	d004      	beq.n	8006a92 <HAL_TIMEx_ConfigBreakDeadTime+0x22>
 8006a88:	f240 61a1 	movw	r1, #1697	; 0x6a1
 8006a8c:	485a      	ldr	r0, [pc, #360]	; (8006bf8 <HAL_TIMEx_ConfigBreakDeadTime+0x188>)
 8006a8e:	f7fa f884 	bl	8000b9a <assert_failed>
  assert_param(IS_TIM_OSSR_STATE(sBreakDeadTimeConfig->OffStateRunMode));
 8006a92:	683b      	ldr	r3, [r7, #0]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006a9a:	d008      	beq.n	8006aae <HAL_TIMEx_ConfigBreakDeadTime+0x3e>
 8006a9c:	683b      	ldr	r3, [r7, #0]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d004      	beq.n	8006aae <HAL_TIMEx_ConfigBreakDeadTime+0x3e>
 8006aa4:	f240 61a2 	movw	r1, #1698	; 0x6a2
 8006aa8:	4853      	ldr	r0, [pc, #332]	; (8006bf8 <HAL_TIMEx_ConfigBreakDeadTime+0x188>)
 8006aaa:	f7fa f876 	bl	8000b9a <assert_failed>
  assert_param(IS_TIM_OSSI_STATE(sBreakDeadTimeConfig->OffStateIDLEMode));
 8006aae:	683b      	ldr	r3, [r7, #0]
 8006ab0:	685b      	ldr	r3, [r3, #4]
 8006ab2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006ab6:	d008      	beq.n	8006aca <HAL_TIMEx_ConfigBreakDeadTime+0x5a>
 8006ab8:	683b      	ldr	r3, [r7, #0]
 8006aba:	685b      	ldr	r3, [r3, #4]
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d004      	beq.n	8006aca <HAL_TIMEx_ConfigBreakDeadTime+0x5a>
 8006ac0:	f240 61a3 	movw	r1, #1699	; 0x6a3
 8006ac4:	484c      	ldr	r0, [pc, #304]	; (8006bf8 <HAL_TIMEx_ConfigBreakDeadTime+0x188>)
 8006ac6:	f7fa f868 	bl	8000b9a <assert_failed>
  assert_param(IS_TIM_LOCK_LEVEL(sBreakDeadTimeConfig->LockLevel));
 8006aca:	683b      	ldr	r3, [r7, #0]
 8006acc:	689b      	ldr	r3, [r3, #8]
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d013      	beq.n	8006afa <HAL_TIMEx_ConfigBreakDeadTime+0x8a>
 8006ad2:	683b      	ldr	r3, [r7, #0]
 8006ad4:	689b      	ldr	r3, [r3, #8]
 8006ad6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006ada:	d00e      	beq.n	8006afa <HAL_TIMEx_ConfigBreakDeadTime+0x8a>
 8006adc:	683b      	ldr	r3, [r7, #0]
 8006ade:	689b      	ldr	r3, [r3, #8]
 8006ae0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006ae4:	d009      	beq.n	8006afa <HAL_TIMEx_ConfigBreakDeadTime+0x8a>
 8006ae6:	683b      	ldr	r3, [r7, #0]
 8006ae8:	689b      	ldr	r3, [r3, #8]
 8006aea:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006aee:	d004      	beq.n	8006afa <HAL_TIMEx_ConfigBreakDeadTime+0x8a>
 8006af0:	f240 61a4 	movw	r1, #1700	; 0x6a4
 8006af4:	4840      	ldr	r0, [pc, #256]	; (8006bf8 <HAL_TIMEx_ConfigBreakDeadTime+0x188>)
 8006af6:	f7fa f850 	bl	8000b9a <assert_failed>
  assert_param(IS_TIM_DEADTIME(sBreakDeadTimeConfig->DeadTime));
 8006afa:	683b      	ldr	r3, [r7, #0]
 8006afc:	68db      	ldr	r3, [r3, #12]
 8006afe:	2bff      	cmp	r3, #255	; 0xff
 8006b00:	d904      	bls.n	8006b0c <HAL_TIMEx_ConfigBreakDeadTime+0x9c>
 8006b02:	f240 61a5 	movw	r1, #1701	; 0x6a5
 8006b06:	483c      	ldr	r0, [pc, #240]	; (8006bf8 <HAL_TIMEx_ConfigBreakDeadTime+0x188>)
 8006b08:	f7fa f847 	bl	8000b9a <assert_failed>
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
 8006b0c:	683b      	ldr	r3, [r7, #0]
 8006b0e:	691b      	ldr	r3, [r3, #16]
 8006b10:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006b14:	d008      	beq.n	8006b28 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
 8006b16:	683b      	ldr	r3, [r7, #0]
 8006b18:	691b      	ldr	r3, [r3, #16]
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d004      	beq.n	8006b28 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
 8006b1e:	f240 61a6 	movw	r1, #1702	; 0x6a6
 8006b22:	4835      	ldr	r0, [pc, #212]	; (8006bf8 <HAL_TIMEx_ConfigBreakDeadTime+0x188>)
 8006b24:	f7fa f839 	bl	8000b9a <assert_failed>
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
 8006b28:	683b      	ldr	r3, [r7, #0]
 8006b2a:	695b      	ldr	r3, [r3, #20]
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d009      	beq.n	8006b44 <HAL_TIMEx_ConfigBreakDeadTime+0xd4>
 8006b30:	683b      	ldr	r3, [r7, #0]
 8006b32:	695b      	ldr	r3, [r3, #20]
 8006b34:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006b38:	d004      	beq.n	8006b44 <HAL_TIMEx_ConfigBreakDeadTime+0xd4>
 8006b3a:	f240 61a7 	movw	r1, #1703	; 0x6a7
 8006b3e:	482e      	ldr	r0, [pc, #184]	; (8006bf8 <HAL_TIMEx_ConfigBreakDeadTime+0x188>)
 8006b40:	f7fa f82b 	bl	8000b9a <assert_failed>
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
 8006b44:	683b      	ldr	r3, [r7, #0]
 8006b46:	69db      	ldr	r3, [r3, #28]
 8006b48:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006b4c:	d008      	beq.n	8006b60 <HAL_TIMEx_ConfigBreakDeadTime+0xf0>
 8006b4e:	683b      	ldr	r3, [r7, #0]
 8006b50:	69db      	ldr	r3, [r3, #28]
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d004      	beq.n	8006b60 <HAL_TIMEx_ConfigBreakDeadTime+0xf0>
 8006b56:	f44f 61d5 	mov.w	r1, #1704	; 0x6a8
 8006b5a:	4827      	ldr	r0, [pc, #156]	; (8006bf8 <HAL_TIMEx_ConfigBreakDeadTime+0x188>)
 8006b5c:	f7fa f81d 	bl	8000b9a <assert_failed>

  /* Check input state */
  __HAL_LOCK(htim);
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006b66:	2b01      	cmp	r3, #1
 8006b68:	d101      	bne.n	8006b6e <HAL_TIMEx_ConfigBreakDeadTime+0xfe>
 8006b6a:	2302      	movs	r3, #2
 8006b6c:	e03d      	b.n	8006bea <HAL_TIMEx_ConfigBreakDeadTime+0x17a>
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	2201      	movs	r2, #1
 8006b72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8006b7c:	683b      	ldr	r3, [r7, #0]
 8006b7e:	68db      	ldr	r3, [r3, #12]
 8006b80:	4313      	orrs	r3, r2
 8006b82:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006b8a:	683b      	ldr	r3, [r7, #0]
 8006b8c:	689b      	ldr	r3, [r3, #8]
 8006b8e:	4313      	orrs	r3, r2
 8006b90:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8006b98:	683b      	ldr	r3, [r7, #0]
 8006b9a:	685b      	ldr	r3, [r3, #4]
 8006b9c:	4313      	orrs	r3, r2
 8006b9e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8006ba6:	683b      	ldr	r3, [r7, #0]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	4313      	orrs	r3, r2
 8006bac:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006bb4:	683b      	ldr	r3, [r7, #0]
 8006bb6:	691b      	ldr	r3, [r3, #16]
 8006bb8:	4313      	orrs	r3, r2
 8006bba:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8006bc2:	683b      	ldr	r3, [r7, #0]
 8006bc4:	695b      	ldr	r3, [r3, #20]
 8006bc6:	4313      	orrs	r3, r2
 8006bc8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8006bd0:	683b      	ldr	r3, [r7, #0]
 8006bd2:	69db      	ldr	r3, [r3, #28]
 8006bd4:	4313      	orrs	r3, r2
 8006bd6:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	68fa      	ldr	r2, [r7, #12]
 8006bde:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	2200      	movs	r2, #0
 8006be4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006be8:	2300      	movs	r3, #0
}
 8006bea:	4618      	mov	r0, r3
 8006bec:	3710      	adds	r7, #16
 8006bee:	46bd      	mov	sp, r7
 8006bf0:	bd80      	pop	{r7, pc}
 8006bf2:	bf00      	nop
 8006bf4:	40010000 	.word	0x40010000
 8006bf8:	0800a290 	.word	0x0800a290

08006bfc <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006bfc:	b084      	sub	sp, #16
 8006bfe:	b580      	push	{r7, lr}
 8006c00:	b084      	sub	sp, #16
 8006c02:	af00      	add	r7, sp, #0
 8006c04:	6078      	str	r0, [r7, #4]
 8006c06:	f107 001c 	add.w	r0, r7, #28
 8006c0a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006c0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c10:	2b01      	cmp	r3, #1
 8006c12:	d122      	bne.n	8006c5a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c18:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	68db      	ldr	r3, [r3, #12]
 8006c24:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8006c28:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006c2c:	687a      	ldr	r2, [r7, #4]
 8006c2e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	68db      	ldr	r3, [r3, #12]
 8006c34:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006c3c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006c3e:	2b01      	cmp	r3, #1
 8006c40:	d105      	bne.n	8006c4e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	68db      	ldr	r3, [r3, #12]
 8006c46:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8006c4e:	6878      	ldr	r0, [r7, #4]
 8006c50:	f000 f94a 	bl	8006ee8 <USB_CoreReset>
 8006c54:	4603      	mov	r3, r0
 8006c56:	73fb      	strb	r3, [r7, #15]
 8006c58:	e01a      	b.n	8006c90 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	68db      	ldr	r3, [r3, #12]
 8006c5e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006c66:	6878      	ldr	r0, [r7, #4]
 8006c68:	f000 f93e 	bl	8006ee8 <USB_CoreReset>
 8006c6c:	4603      	mov	r3, r0
 8006c6e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8006c70:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d106      	bne.n	8006c84 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c7a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	639a      	str	r2, [r3, #56]	; 0x38
 8006c82:	e005      	b.n	8006c90 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c88:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8006c90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c92:	2b01      	cmp	r3, #1
 8006c94:	d10b      	bne.n	8006cae <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	689b      	ldr	r3, [r3, #8]
 8006c9a:	f043 0206 	orr.w	r2, r3, #6
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	689b      	ldr	r3, [r3, #8]
 8006ca6:	f043 0220 	orr.w	r2, r3, #32
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006cae:	7bfb      	ldrb	r3, [r7, #15]
}
 8006cb0:	4618      	mov	r0, r3
 8006cb2:	3710      	adds	r7, #16
 8006cb4:	46bd      	mov	sp, r7
 8006cb6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006cba:	b004      	add	sp, #16
 8006cbc:	4770      	bx	lr

08006cbe <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006cbe:	b480      	push	{r7}
 8006cc0:	b083      	sub	sp, #12
 8006cc2:	af00      	add	r7, sp, #0
 8006cc4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	689b      	ldr	r3, [r3, #8]
 8006cca:	f043 0201 	orr.w	r2, r3, #1
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006cd2:	2300      	movs	r3, #0
}
 8006cd4:	4618      	mov	r0, r3
 8006cd6:	370c      	adds	r7, #12
 8006cd8:	46bd      	mov	sp, r7
 8006cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cde:	4770      	bx	lr

08006ce0 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006ce0:	b480      	push	{r7}
 8006ce2:	b083      	sub	sp, #12
 8006ce4:	af00      	add	r7, sp, #0
 8006ce6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	689b      	ldr	r3, [r3, #8]
 8006cec:	f023 0201 	bic.w	r2, r3, #1
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006cf4:	2300      	movs	r3, #0
}
 8006cf6:	4618      	mov	r0, r3
 8006cf8:	370c      	adds	r7, #12
 8006cfa:	46bd      	mov	sp, r7
 8006cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d00:	4770      	bx	lr

08006d02 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006d02:	b580      	push	{r7, lr}
 8006d04:	b082      	sub	sp, #8
 8006d06:	af00      	add	r7, sp, #0
 8006d08:	6078      	str	r0, [r7, #4]
 8006d0a:	460b      	mov	r3, r1
 8006d0c:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	68db      	ldr	r3, [r3, #12]
 8006d12:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006d1a:	78fb      	ldrb	r3, [r7, #3]
 8006d1c:	2b01      	cmp	r3, #1
 8006d1e:	d106      	bne.n	8006d2e <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	68db      	ldr	r3, [r3, #12]
 8006d24:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	60da      	str	r2, [r3, #12]
 8006d2c:	e00b      	b.n	8006d46 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8006d2e:	78fb      	ldrb	r3, [r7, #3]
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d106      	bne.n	8006d42 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	68db      	ldr	r3, [r3, #12]
 8006d38:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	60da      	str	r2, [r3, #12]
 8006d40:	e001      	b.n	8006d46 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8006d42:	2301      	movs	r3, #1
 8006d44:	e003      	b.n	8006d4e <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8006d46:	2032      	movs	r0, #50	; 0x32
 8006d48:	f7fa f9f6 	bl	8001138 <HAL_Delay>

  return HAL_OK;
 8006d4c:	2300      	movs	r3, #0
}
 8006d4e:	4618      	mov	r0, r3
 8006d50:	3708      	adds	r7, #8
 8006d52:	46bd      	mov	sp, r7
 8006d54:	bd80      	pop	{r7, pc}
	...

08006d58 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006d58:	b480      	push	{r7}
 8006d5a:	b085      	sub	sp, #20
 8006d5c:	af00      	add	r7, sp, #0
 8006d5e:	6078      	str	r0, [r7, #4]
 8006d60:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8006d62:	2300      	movs	r3, #0
 8006d64:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006d66:	683b      	ldr	r3, [r7, #0]
 8006d68:	019b      	lsls	r3, r3, #6
 8006d6a:	f043 0220 	orr.w	r2, r3, #32
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	3301      	adds	r3, #1
 8006d76:	60fb      	str	r3, [r7, #12]
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	4a09      	ldr	r2, [pc, #36]	; (8006da0 <USB_FlushTxFifo+0x48>)
 8006d7c:	4293      	cmp	r3, r2
 8006d7e:	d901      	bls.n	8006d84 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8006d80:	2303      	movs	r3, #3
 8006d82:	e006      	b.n	8006d92 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	691b      	ldr	r3, [r3, #16]
 8006d88:	f003 0320 	and.w	r3, r3, #32
 8006d8c:	2b20      	cmp	r3, #32
 8006d8e:	d0f0      	beq.n	8006d72 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8006d90:	2300      	movs	r3, #0
}
 8006d92:	4618      	mov	r0, r3
 8006d94:	3714      	adds	r7, #20
 8006d96:	46bd      	mov	sp, r7
 8006d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d9c:	4770      	bx	lr
 8006d9e:	bf00      	nop
 8006da0:	00030d40 	.word	0x00030d40

08006da4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006da4:	b480      	push	{r7}
 8006da6:	b085      	sub	sp, #20
 8006da8:	af00      	add	r7, sp, #0
 8006daa:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8006dac:	2300      	movs	r3, #0
 8006dae:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	2210      	movs	r2, #16
 8006db4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	3301      	adds	r3, #1
 8006dba:	60fb      	str	r3, [r7, #12]
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	4a09      	ldr	r2, [pc, #36]	; (8006de4 <USB_FlushRxFifo+0x40>)
 8006dc0:	4293      	cmp	r3, r2
 8006dc2:	d901      	bls.n	8006dc8 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8006dc4:	2303      	movs	r3, #3
 8006dc6:	e006      	b.n	8006dd6 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	691b      	ldr	r3, [r3, #16]
 8006dcc:	f003 0310 	and.w	r3, r3, #16
 8006dd0:	2b10      	cmp	r3, #16
 8006dd2:	d0f0      	beq.n	8006db6 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8006dd4:	2300      	movs	r3, #0
}
 8006dd6:	4618      	mov	r0, r3
 8006dd8:	3714      	adds	r7, #20
 8006dda:	46bd      	mov	sp, r7
 8006ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006de0:	4770      	bx	lr
 8006de2:	bf00      	nop
 8006de4:	00030d40 	.word	0x00030d40

08006de8 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8006de8:	b480      	push	{r7}
 8006dea:	b089      	sub	sp, #36	; 0x24
 8006dec:	af00      	add	r7, sp, #0
 8006dee:	60f8      	str	r0, [r7, #12]
 8006df0:	60b9      	str	r1, [r7, #8]
 8006df2:	4611      	mov	r1, r2
 8006df4:	461a      	mov	r2, r3
 8006df6:	460b      	mov	r3, r1
 8006df8:	71fb      	strb	r3, [r7, #7]
 8006dfa:	4613      	mov	r3, r2
 8006dfc:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8006e02:	68bb      	ldr	r3, [r7, #8]
 8006e04:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8006e06:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d11a      	bne.n	8006e44 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8006e0e:	88bb      	ldrh	r3, [r7, #4]
 8006e10:	3303      	adds	r3, #3
 8006e12:	089b      	lsrs	r3, r3, #2
 8006e14:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8006e16:	2300      	movs	r3, #0
 8006e18:	61bb      	str	r3, [r7, #24]
 8006e1a:	e00f      	b.n	8006e3c <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006e1c:	79fb      	ldrb	r3, [r7, #7]
 8006e1e:	031a      	lsls	r2, r3, #12
 8006e20:	697b      	ldr	r3, [r7, #20]
 8006e22:	4413      	add	r3, r2
 8006e24:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006e28:	461a      	mov	r2, r3
 8006e2a:	69fb      	ldr	r3, [r7, #28]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	6013      	str	r3, [r2, #0]
      pSrc++;
 8006e30:	69fb      	ldr	r3, [r7, #28]
 8006e32:	3304      	adds	r3, #4
 8006e34:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8006e36:	69bb      	ldr	r3, [r7, #24]
 8006e38:	3301      	adds	r3, #1
 8006e3a:	61bb      	str	r3, [r7, #24]
 8006e3c:	69ba      	ldr	r2, [r7, #24]
 8006e3e:	693b      	ldr	r3, [r7, #16]
 8006e40:	429a      	cmp	r2, r3
 8006e42:	d3eb      	bcc.n	8006e1c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8006e44:	2300      	movs	r3, #0
}
 8006e46:	4618      	mov	r0, r3
 8006e48:	3724      	adds	r7, #36	; 0x24
 8006e4a:	46bd      	mov	sp, r7
 8006e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e50:	4770      	bx	lr

08006e52 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8006e52:	b480      	push	{r7}
 8006e54:	b089      	sub	sp, #36	; 0x24
 8006e56:	af00      	add	r7, sp, #0
 8006e58:	60f8      	str	r0, [r7, #12]
 8006e5a:	60b9      	str	r1, [r7, #8]
 8006e5c:	4613      	mov	r3, r2
 8006e5e:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8006e64:	68bb      	ldr	r3, [r7, #8]
 8006e66:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8006e68:	88fb      	ldrh	r3, [r7, #6]
 8006e6a:	3303      	adds	r3, #3
 8006e6c:	089b      	lsrs	r3, r3, #2
 8006e6e:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8006e70:	2300      	movs	r3, #0
 8006e72:	61bb      	str	r3, [r7, #24]
 8006e74:	e00b      	b.n	8006e8e <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8006e76:	697b      	ldr	r3, [r7, #20]
 8006e78:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006e7c:	681a      	ldr	r2, [r3, #0]
 8006e7e:	69fb      	ldr	r3, [r7, #28]
 8006e80:	601a      	str	r2, [r3, #0]
    pDest++;
 8006e82:	69fb      	ldr	r3, [r7, #28]
 8006e84:	3304      	adds	r3, #4
 8006e86:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8006e88:	69bb      	ldr	r3, [r7, #24]
 8006e8a:	3301      	adds	r3, #1
 8006e8c:	61bb      	str	r3, [r7, #24]
 8006e8e:	69ba      	ldr	r2, [r7, #24]
 8006e90:	693b      	ldr	r3, [r7, #16]
 8006e92:	429a      	cmp	r2, r3
 8006e94:	d3ef      	bcc.n	8006e76 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8006e96:	69fb      	ldr	r3, [r7, #28]
}
 8006e98:	4618      	mov	r0, r3
 8006e9a:	3724      	adds	r7, #36	; 0x24
 8006e9c:	46bd      	mov	sp, r7
 8006e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ea2:	4770      	bx	lr

08006ea4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8006ea4:	b480      	push	{r7}
 8006ea6:	b085      	sub	sp, #20
 8006ea8:	af00      	add	r7, sp, #0
 8006eaa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	695b      	ldr	r3, [r3, #20]
 8006eb0:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	699b      	ldr	r3, [r3, #24]
 8006eb6:	68fa      	ldr	r2, [r7, #12]
 8006eb8:	4013      	ands	r3, r2
 8006eba:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8006ebc:	68fb      	ldr	r3, [r7, #12]
}
 8006ebe:	4618      	mov	r0, r3
 8006ec0:	3714      	adds	r7, #20
 8006ec2:	46bd      	mov	sp, r7
 8006ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ec8:	4770      	bx	lr

08006eca <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8006eca:	b480      	push	{r7}
 8006ecc:	b083      	sub	sp, #12
 8006ece:	af00      	add	r7, sp, #0
 8006ed0:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	695b      	ldr	r3, [r3, #20]
 8006ed6:	f003 0301 	and.w	r3, r3, #1
}
 8006eda:	4618      	mov	r0, r3
 8006edc:	370c      	adds	r7, #12
 8006ede:	46bd      	mov	sp, r7
 8006ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ee4:	4770      	bx	lr
	...

08006ee8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006ee8:	b480      	push	{r7}
 8006eea:	b085      	sub	sp, #20
 8006eec:	af00      	add	r7, sp, #0
 8006eee:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8006ef0:	2300      	movs	r3, #0
 8006ef2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	3301      	adds	r3, #1
 8006ef8:	60fb      	str	r3, [r7, #12]
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	4a13      	ldr	r2, [pc, #76]	; (8006f4c <USB_CoreReset+0x64>)
 8006efe:	4293      	cmp	r3, r2
 8006f00:	d901      	bls.n	8006f06 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006f02:	2303      	movs	r3, #3
 8006f04:	e01b      	b.n	8006f3e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	691b      	ldr	r3, [r3, #16]
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	daf2      	bge.n	8006ef4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006f0e:	2300      	movs	r3, #0
 8006f10:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	691b      	ldr	r3, [r3, #16]
 8006f16:	f043 0201 	orr.w	r2, r3, #1
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	3301      	adds	r3, #1
 8006f22:	60fb      	str	r3, [r7, #12]
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	4a09      	ldr	r2, [pc, #36]	; (8006f4c <USB_CoreReset+0x64>)
 8006f28:	4293      	cmp	r3, r2
 8006f2a:	d901      	bls.n	8006f30 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006f2c:	2303      	movs	r3, #3
 8006f2e:	e006      	b.n	8006f3e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	691b      	ldr	r3, [r3, #16]
 8006f34:	f003 0301 	and.w	r3, r3, #1
 8006f38:	2b01      	cmp	r3, #1
 8006f3a:	d0f0      	beq.n	8006f1e <USB_CoreReset+0x36>

  return HAL_OK;
 8006f3c:	2300      	movs	r3, #0
}
 8006f3e:	4618      	mov	r0, r3
 8006f40:	3714      	adds	r7, #20
 8006f42:	46bd      	mov	sp, r7
 8006f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f48:	4770      	bx	lr
 8006f4a:	bf00      	nop
 8006f4c:	00030d40 	.word	0x00030d40

08006f50 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006f50:	b084      	sub	sp, #16
 8006f52:	b580      	push	{r7, lr}
 8006f54:	b084      	sub	sp, #16
 8006f56:	af00      	add	r7, sp, #0
 8006f58:	6078      	str	r0, [r7, #4]
 8006f5a:	f107 001c 	add.w	r0, r7, #28
 8006f5e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006f66:	68bb      	ldr	r3, [r7, #8]
 8006f68:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006f6c:	461a      	mov	r2, r3
 8006f6e:	2300      	movs	r3, #0
 8006f70:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f76:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f82:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f8e:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d018      	beq.n	8006fd4 <USB_HostInit+0x84>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8006fa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fa4:	2b01      	cmp	r3, #1
 8006fa6:	d10a      	bne.n	8006fbe <USB_HostInit+0x6e>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8006fa8:	68bb      	ldr	r3, [r7, #8]
 8006faa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	68ba      	ldr	r2, [r7, #8]
 8006fb2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006fb6:	f043 0304 	orr.w	r3, r3, #4
 8006fba:	6013      	str	r3, [r2, #0]
 8006fbc:	e014      	b.n	8006fe8 <USB_HostInit+0x98>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8006fbe:	68bb      	ldr	r3, [r7, #8]
 8006fc0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	68ba      	ldr	r2, [r7, #8]
 8006fc8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006fcc:	f023 0304 	bic.w	r3, r3, #4
 8006fd0:	6013      	str	r3, [r2, #0]
 8006fd2:	e009      	b.n	8006fe8 <USB_HostInit+0x98>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8006fd4:	68bb      	ldr	r3, [r7, #8]
 8006fd6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	68ba      	ldr	r2, [r7, #8]
 8006fde:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006fe2:	f023 0304 	bic.w	r3, r3, #4
 8006fe6:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 8006fe8:	2110      	movs	r1, #16
 8006fea:	6878      	ldr	r0, [r7, #4]
 8006fec:	f7ff feb4 	bl	8006d58 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8006ff0:	6878      	ldr	r0, [r7, #4]
 8006ff2:	f7ff fed7 	bl	8006da4 <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8006ff6:	2300      	movs	r3, #0
 8006ff8:	60fb      	str	r3, [r7, #12]
 8006ffa:	e015      	b.n	8007028 <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	015a      	lsls	r2, r3, #5
 8007000:	68bb      	ldr	r3, [r7, #8]
 8007002:	4413      	add	r3, r2
 8007004:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007008:	461a      	mov	r2, r3
 800700a:	f04f 33ff 	mov.w	r3, #4294967295
 800700e:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	015a      	lsls	r2, r3, #5
 8007014:	68bb      	ldr	r3, [r7, #8]
 8007016:	4413      	add	r3, r2
 8007018:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800701c:	461a      	mov	r2, r3
 800701e:	2300      	movs	r3, #0
 8007020:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	3301      	adds	r3, #1
 8007026:	60fb      	str	r3, [r7, #12]
 8007028:	6a3b      	ldr	r3, [r7, #32]
 800702a:	68fa      	ldr	r2, [r7, #12]
 800702c:	429a      	cmp	r2, r3
 800702e:	d3e5      	bcc.n	8006ffc <USB_HostInit+0xac>
  }

  /* Enable VBUS driving */
  (void)USB_DriveVbus(USBx, 1U);
 8007030:	2101      	movs	r1, #1
 8007032:	6878      	ldr	r0, [r7, #4]
 8007034:	f000 f8ac 	bl	8007190 <USB_DriveVbus>

  HAL_Delay(200U);
 8007038:	20c8      	movs	r0, #200	; 0xc8
 800703a:	f7fa f87d 	bl	8001138 <HAL_Delay>

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	2200      	movs	r2, #0
 8007042:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	f04f 32ff 	mov.w	r2, #4294967295
 800704a:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007050:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007054:	2b00      	cmp	r3, #0
 8007056:	d00b      	beq.n	8007070 <USB_HostInit+0x120>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800705e:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	4a14      	ldr	r2, [pc, #80]	; (80070b4 <USB_HostInit+0x164>)
 8007064:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	4a13      	ldr	r2, [pc, #76]	; (80070b8 <USB_HostInit+0x168>)
 800706a:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 800706e:	e009      	b.n	8007084 <USB_HostInit+0x134>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	2280      	movs	r2, #128	; 0x80
 8007074:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	4a10      	ldr	r2, [pc, #64]	; (80070bc <USB_HostInit+0x16c>)
 800707a:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	4a10      	ldr	r2, [pc, #64]	; (80070c0 <USB_HostInit+0x170>)
 8007080:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8007084:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007086:	2b00      	cmp	r3, #0
 8007088:	d105      	bne.n	8007096 <USB_HostInit+0x146>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	699b      	ldr	r3, [r3, #24]
 800708e:	f043 0210 	orr.w	r2, r3, #16
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	699a      	ldr	r2, [r3, #24]
 800709a:	4b0a      	ldr	r3, [pc, #40]	; (80070c4 <USB_HostInit+0x174>)
 800709c:	4313      	orrs	r3, r2
 800709e:	687a      	ldr	r2, [r7, #4]
 80070a0:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 80070a2:	2300      	movs	r3, #0
}
 80070a4:	4618      	mov	r0, r3
 80070a6:	3710      	adds	r7, #16
 80070a8:	46bd      	mov	sp, r7
 80070aa:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80070ae:	b004      	add	sp, #16
 80070b0:	4770      	bx	lr
 80070b2:	bf00      	nop
 80070b4:	01000200 	.word	0x01000200
 80070b8:	00e00300 	.word	0x00e00300
 80070bc:	00600080 	.word	0x00600080
 80070c0:	004000e0 	.word	0x004000e0
 80070c4:	a3200008 	.word	0xa3200008

080070c8 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 80070c8:	b480      	push	{r7}
 80070ca:	b085      	sub	sp, #20
 80070cc:	af00      	add	r7, sp, #0
 80070ce:	6078      	str	r0, [r7, #4]
 80070d0:	460b      	mov	r3, r1
 80070d2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	68fa      	ldr	r2, [r7, #12]
 80070e2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80070e6:	f023 0303 	bic.w	r3, r3, #3
 80070ea:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80070f2:	681a      	ldr	r2, [r3, #0]
 80070f4:	78fb      	ldrb	r3, [r7, #3]
 80070f6:	f003 0303 	and.w	r3, r3, #3
 80070fa:	68f9      	ldr	r1, [r7, #12]
 80070fc:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8007100:	4313      	orrs	r3, r2
 8007102:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8007104:	78fb      	ldrb	r3, [r7, #3]
 8007106:	2b01      	cmp	r3, #1
 8007108:	d107      	bne.n	800711a <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007110:	461a      	mov	r2, r3
 8007112:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8007116:	6053      	str	r3, [r2, #4]
 8007118:	e009      	b.n	800712e <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 800711a:	78fb      	ldrb	r3, [r7, #3]
 800711c:	2b02      	cmp	r3, #2
 800711e:	d106      	bne.n	800712e <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007126:	461a      	mov	r2, r3
 8007128:	f241 7370 	movw	r3, #6000	; 0x1770
 800712c:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 800712e:	2300      	movs	r3, #0
}
 8007130:	4618      	mov	r0, r3
 8007132:	3714      	adds	r7, #20
 8007134:	46bd      	mov	sp, r7
 8007136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800713a:	4770      	bx	lr

0800713c <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 800713c:	b580      	push	{r7, lr}
 800713e:	b084      	sub	sp, #16
 8007140:	af00      	add	r7, sp, #0
 8007142:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8007148:	2300      	movs	r3, #0
 800714a:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8007156:	68bb      	ldr	r3, [r7, #8]
 8007158:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800715c:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 800715e:	68bb      	ldr	r3, [r7, #8]
 8007160:	68fa      	ldr	r2, [r7, #12]
 8007162:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8007166:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800716a:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 800716c:	2064      	movs	r0, #100	; 0x64
 800716e:	f7f9 ffe3 	bl	8001138 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8007172:	68bb      	ldr	r3, [r7, #8]
 8007174:	68fa      	ldr	r2, [r7, #12]
 8007176:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800717a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800717e:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8007180:	200a      	movs	r0, #10
 8007182:	f7f9 ffd9 	bl	8001138 <HAL_Delay>

  return HAL_OK;
 8007186:	2300      	movs	r3, #0
}
 8007188:	4618      	mov	r0, r3
 800718a:	3710      	adds	r7, #16
 800718c:	46bd      	mov	sp, r7
 800718e:	bd80      	pop	{r7, pc}

08007190 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8007190:	b480      	push	{r7}
 8007192:	b085      	sub	sp, #20
 8007194:	af00      	add	r7, sp, #0
 8007196:	6078      	str	r0, [r7, #4]
 8007198:	460b      	mov	r3, r1
 800719a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80071a0:	2300      	movs	r3, #0
 80071a2:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80071ae:	68bb      	ldr	r3, [r7, #8]
 80071b0:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80071b4:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 80071b6:	68bb      	ldr	r3, [r7, #8]
 80071b8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d109      	bne.n	80071d4 <USB_DriveVbus+0x44>
 80071c0:	78fb      	ldrb	r3, [r7, #3]
 80071c2:	2b01      	cmp	r3, #1
 80071c4:	d106      	bne.n	80071d4 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 80071c6:	68bb      	ldr	r3, [r7, #8]
 80071c8:	68fa      	ldr	r2, [r7, #12]
 80071ca:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80071ce:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80071d2:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 80071d4:	68bb      	ldr	r3, [r7, #8]
 80071d6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80071da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80071de:	d109      	bne.n	80071f4 <USB_DriveVbus+0x64>
 80071e0:	78fb      	ldrb	r3, [r7, #3]
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d106      	bne.n	80071f4 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 80071e6:	68bb      	ldr	r3, [r7, #8]
 80071e8:	68fa      	ldr	r2, [r7, #12]
 80071ea:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80071ee:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80071f2:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 80071f4:	2300      	movs	r3, #0
}
 80071f6:	4618      	mov	r0, r3
 80071f8:	3714      	adds	r7, #20
 80071fa:	46bd      	mov	sp, r7
 80071fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007200:	4770      	bx	lr

08007202 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8007202:	b480      	push	{r7}
 8007204:	b085      	sub	sp, #20
 8007206:	af00      	add	r7, sp, #0
 8007208:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800720e:	2300      	movs	r3, #0
 8007210:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 800721c:	68bb      	ldr	r3, [r7, #8]
 800721e:	0c5b      	lsrs	r3, r3, #17
 8007220:	f003 0303 	and.w	r3, r3, #3
}
 8007224:	4618      	mov	r0, r3
 8007226:	3714      	adds	r7, #20
 8007228:	46bd      	mov	sp, r7
 800722a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800722e:	4770      	bx	lr

08007230 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8007230:	b480      	push	{r7}
 8007232:	b085      	sub	sp, #20
 8007234:	af00      	add	r7, sp, #0
 8007236:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007242:	689b      	ldr	r3, [r3, #8]
 8007244:	b29b      	uxth	r3, r3
}
 8007246:	4618      	mov	r0, r3
 8007248:	3714      	adds	r7, #20
 800724a:	46bd      	mov	sp, r7
 800724c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007250:	4770      	bx	lr
	...

08007254 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8007254:	b480      	push	{r7}
 8007256:	b087      	sub	sp, #28
 8007258:	af00      	add	r7, sp, #0
 800725a:	6078      	str	r0, [r7, #4]
 800725c:	4608      	mov	r0, r1
 800725e:	4611      	mov	r1, r2
 8007260:	461a      	mov	r2, r3
 8007262:	4603      	mov	r3, r0
 8007264:	70fb      	strb	r3, [r7, #3]
 8007266:	460b      	mov	r3, r1
 8007268:	70bb      	strb	r3, [r7, #2]
 800726a:	4613      	mov	r3, r2
 800726c:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 800726e:	2300      	movs	r3, #0
 8007270:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	60bb      	str	r3, [r7, #8]
  uint32_t HCcharEpDir, HCcharLowSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8007276:	78fb      	ldrb	r3, [r7, #3]
 8007278:	015a      	lsls	r2, r3, #5
 800727a:	68bb      	ldr	r3, [r7, #8]
 800727c:	4413      	add	r3, r2
 800727e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007282:	461a      	mov	r2, r3
 8007284:	f04f 33ff 	mov.w	r3, #4294967295
 8007288:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 800728a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800728e:	2b03      	cmp	r3, #3
 8007290:	d87e      	bhi.n	8007390 <USB_HC_Init+0x13c>
 8007292:	a201      	add	r2, pc, #4	; (adr r2, 8007298 <USB_HC_Init+0x44>)
 8007294:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007298:	080072a9 	.word	0x080072a9
 800729c:	08007353 	.word	0x08007353
 80072a0:	080072a9 	.word	0x080072a9
 80072a4:	08007315 	.word	0x08007315
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80072a8:	78fb      	ldrb	r3, [r7, #3]
 80072aa:	015a      	lsls	r2, r3, #5
 80072ac:	68bb      	ldr	r3, [r7, #8]
 80072ae:	4413      	add	r3, r2
 80072b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80072b4:	461a      	mov	r2, r3
 80072b6:	f240 439d 	movw	r3, #1181	; 0x49d
 80072ba:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 80072bc:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	da10      	bge.n	80072e6 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80072c4:	78fb      	ldrb	r3, [r7, #3]
 80072c6:	015a      	lsls	r2, r3, #5
 80072c8:	68bb      	ldr	r3, [r7, #8]
 80072ca:	4413      	add	r3, r2
 80072cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80072d0:	68db      	ldr	r3, [r3, #12]
 80072d2:	78fa      	ldrb	r2, [r7, #3]
 80072d4:	0151      	lsls	r1, r2, #5
 80072d6:	68ba      	ldr	r2, [r7, #8]
 80072d8:	440a      	add	r2, r1
 80072da:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80072de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80072e2:	60d3      	str	r3, [r2, #12]
        if ((USBx->CID & (0x1U << 8)) != 0U)
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
        }
      }
      break;
 80072e4:	e057      	b.n	8007396 <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80072ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d051      	beq.n	8007396 <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 80072f2:	78fb      	ldrb	r3, [r7, #3]
 80072f4:	015a      	lsls	r2, r3, #5
 80072f6:	68bb      	ldr	r3, [r7, #8]
 80072f8:	4413      	add	r3, r2
 80072fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80072fe:	68db      	ldr	r3, [r3, #12]
 8007300:	78fa      	ldrb	r2, [r7, #3]
 8007302:	0151      	lsls	r1, r2, #5
 8007304:	68ba      	ldr	r2, [r7, #8]
 8007306:	440a      	add	r2, r1
 8007308:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800730c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8007310:	60d3      	str	r3, [r2, #12]
      break;
 8007312:	e040      	b.n	8007396 <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8007314:	78fb      	ldrb	r3, [r7, #3]
 8007316:	015a      	lsls	r2, r3, #5
 8007318:	68bb      	ldr	r3, [r7, #8]
 800731a:	4413      	add	r3, r2
 800731c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007320:	461a      	mov	r2, r3
 8007322:	f240 639d 	movw	r3, #1693	; 0x69d
 8007326:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8007328:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800732c:	2b00      	cmp	r3, #0
 800732e:	da34      	bge.n	800739a <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8007330:	78fb      	ldrb	r3, [r7, #3]
 8007332:	015a      	lsls	r2, r3, #5
 8007334:	68bb      	ldr	r3, [r7, #8]
 8007336:	4413      	add	r3, r2
 8007338:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800733c:	68db      	ldr	r3, [r3, #12]
 800733e:	78fa      	ldrb	r2, [r7, #3]
 8007340:	0151      	lsls	r1, r2, #5
 8007342:	68ba      	ldr	r2, [r7, #8]
 8007344:	440a      	add	r2, r1
 8007346:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800734a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800734e:	60d3      	str	r3, [r2, #12]
      }

      break;
 8007350:	e023      	b.n	800739a <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8007352:	78fb      	ldrb	r3, [r7, #3]
 8007354:	015a      	lsls	r2, r3, #5
 8007356:	68bb      	ldr	r3, [r7, #8]
 8007358:	4413      	add	r3, r2
 800735a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800735e:	461a      	mov	r2, r3
 8007360:	f240 2325 	movw	r3, #549	; 0x225
 8007364:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8007366:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800736a:	2b00      	cmp	r3, #0
 800736c:	da17      	bge.n	800739e <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 800736e:	78fb      	ldrb	r3, [r7, #3]
 8007370:	015a      	lsls	r2, r3, #5
 8007372:	68bb      	ldr	r3, [r7, #8]
 8007374:	4413      	add	r3, r2
 8007376:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800737a:	68db      	ldr	r3, [r3, #12]
 800737c:	78fa      	ldrb	r2, [r7, #3]
 800737e:	0151      	lsls	r1, r2, #5
 8007380:	68ba      	ldr	r2, [r7, #8]
 8007382:	440a      	add	r2, r1
 8007384:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007388:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 800738c:	60d3      	str	r3, [r2, #12]
      }
      break;
 800738e:	e006      	b.n	800739e <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8007390:	2301      	movs	r3, #1
 8007392:	75fb      	strb	r3, [r7, #23]
      break;
 8007394:	e004      	b.n	80073a0 <USB_HC_Init+0x14c>
      break;
 8007396:	bf00      	nop
 8007398:	e002      	b.n	80073a0 <USB_HC_Init+0x14c>
      break;
 800739a:	bf00      	nop
 800739c:	e000      	b.n	80073a0 <USB_HC_Init+0x14c>
      break;
 800739e:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 80073a0:	68bb      	ldr	r3, [r7, #8]
 80073a2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80073a6:	699a      	ldr	r2, [r3, #24]
 80073a8:	78fb      	ldrb	r3, [r7, #3]
 80073aa:	f003 030f 	and.w	r3, r3, #15
 80073ae:	2101      	movs	r1, #1
 80073b0:	fa01 f303 	lsl.w	r3, r1, r3
 80073b4:	68b9      	ldr	r1, [r7, #8]
 80073b6:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80073ba:	4313      	orrs	r3, r2
 80073bc:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	699b      	ldr	r3, [r3, #24]
 80073c2:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 80073ca:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	da03      	bge.n	80073da <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 80073d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80073d6:	613b      	str	r3, [r7, #16]
 80073d8:	e001      	b.n	80073de <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 80073da:	2300      	movs	r3, #0
 80073dc:	613b      	str	r3, [r7, #16]
  }

  if (speed == HPRT0_PRTSPD_LOW_SPEED)
 80073de:	f897 3020 	ldrb.w	r3, [r7, #32]
 80073e2:	2b02      	cmp	r3, #2
 80073e4:	d103      	bne.n	80073ee <USB_HC_Init+0x19a>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 80073e6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80073ea:	60fb      	str	r3, [r7, #12]
 80073ec:	e001      	b.n	80073f2 <USB_HC_Init+0x19e>
  }
  else
  {
    HCcharLowSpeed = 0U;
 80073ee:	2300      	movs	r3, #0
 80073f0:	60fb      	str	r3, [r7, #12]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80073f2:	787b      	ldrb	r3, [r7, #1]
 80073f4:	059b      	lsls	r3, r3, #22
 80073f6:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80073fa:	78bb      	ldrb	r3, [r7, #2]
 80073fc:	02db      	lsls	r3, r3, #11
 80073fe:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007402:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8007404:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8007408:	049b      	lsls	r3, r3, #18
 800740a:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800740e:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8007410:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8007412:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8007416:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8007418:	693b      	ldr	r3, [r7, #16]
 800741a:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800741c:	78fb      	ldrb	r3, [r7, #3]
 800741e:	0159      	lsls	r1, r3, #5
 8007420:	68bb      	ldr	r3, [r7, #8]
 8007422:	440b      	add	r3, r1
 8007424:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007428:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800742e:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 8007430:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8007434:	2b03      	cmp	r3, #3
 8007436:	d10f      	bne.n	8007458 <USB_HC_Init+0x204>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 8007438:	78fb      	ldrb	r3, [r7, #3]
 800743a:	015a      	lsls	r2, r3, #5
 800743c:	68bb      	ldr	r3, [r7, #8]
 800743e:	4413      	add	r3, r2
 8007440:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	78fa      	ldrb	r2, [r7, #3]
 8007448:	0151      	lsls	r1, r2, #5
 800744a:	68ba      	ldr	r2, [r7, #8]
 800744c:	440a      	add	r2, r1
 800744e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007452:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007456:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8007458:	7dfb      	ldrb	r3, [r7, #23]
}
 800745a:	4618      	mov	r0, r3
 800745c:	371c      	adds	r7, #28
 800745e:	46bd      	mov	sp, r7
 8007460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007464:	4770      	bx	lr
 8007466:	bf00      	nop

08007468 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8007468:	b580      	push	{r7, lr}
 800746a:	b08c      	sub	sp, #48	; 0x30
 800746c:	af02      	add	r7, sp, #8
 800746e:	60f8      	str	r0, [r7, #12]
 8007470:	60b9      	str	r1, [r7, #8]
 8007472:	4613      	mov	r3, r2
 8007474:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 800747a:	68bb      	ldr	r3, [r7, #8]
 800747c:	785b      	ldrb	r3, [r3, #1]
 800747e:	61fb      	str	r3, [r7, #28]
  static __IO uint32_t tmpreg = 0U;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8007480:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007484:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800748a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800748e:	2b00      	cmp	r3, #0
 8007490:	d028      	beq.n	80074e4 <USB_HC_StartXfer+0x7c>
 8007492:	68bb      	ldr	r3, [r7, #8]
 8007494:	791b      	ldrb	r3, [r3, #4]
 8007496:	2b00      	cmp	r3, #0
 8007498:	d124      	bne.n	80074e4 <USB_HC_StartXfer+0x7c>
  {
    if ((dma == 0U) && (hc->do_ping == 1U))
 800749a:	79fb      	ldrb	r3, [r7, #7]
 800749c:	2b00      	cmp	r3, #0
 800749e:	d10b      	bne.n	80074b8 <USB_HC_StartXfer+0x50>
 80074a0:	68bb      	ldr	r3, [r7, #8]
 80074a2:	795b      	ldrb	r3, [r3, #5]
 80074a4:	2b01      	cmp	r3, #1
 80074a6:	d107      	bne.n	80074b8 <USB_HC_StartXfer+0x50>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 80074a8:	68bb      	ldr	r3, [r7, #8]
 80074aa:	785b      	ldrb	r3, [r3, #1]
 80074ac:	4619      	mov	r1, r3
 80074ae:	68f8      	ldr	r0, [r7, #12]
 80074b0:	f000 fa30 	bl	8007914 <USB_DoPing>
      return HAL_OK;
 80074b4:	2300      	movs	r3, #0
 80074b6:	e114      	b.n	80076e2 <USB_HC_StartXfer+0x27a>
    }
    else if (dma == 1U)
 80074b8:	79fb      	ldrb	r3, [r7, #7]
 80074ba:	2b01      	cmp	r3, #1
 80074bc:	d112      	bne.n	80074e4 <USB_HC_StartXfer+0x7c>
    {
      USBx_HC(ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 80074be:	69fb      	ldr	r3, [r7, #28]
 80074c0:	015a      	lsls	r2, r3, #5
 80074c2:	6a3b      	ldr	r3, [r7, #32]
 80074c4:	4413      	add	r3, r2
 80074c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80074ca:	68db      	ldr	r3, [r3, #12]
 80074cc:	69fa      	ldr	r2, [r7, #28]
 80074ce:	0151      	lsls	r1, r2, #5
 80074d0:	6a3a      	ldr	r2, [r7, #32]
 80074d2:	440a      	add	r2, r1
 80074d4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80074d8:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 80074dc:	60d3      	str	r3, [r2, #12]
      hc->do_ping = 0U;
 80074de:	68bb      	ldr	r3, [r7, #8]
 80074e0:	2200      	movs	r2, #0
 80074e2:	715a      	strb	r2, [r3, #5]
      /* ... */
    }
  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 80074e4:	68bb      	ldr	r3, [r7, #8]
 80074e6:	691b      	ldr	r3, [r3, #16]
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d018      	beq.n	800751e <USB_HC_StartXfer+0xb6>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 80074ec:	68bb      	ldr	r3, [r7, #8]
 80074ee:	691b      	ldr	r3, [r3, #16]
 80074f0:	68ba      	ldr	r2, [r7, #8]
 80074f2:	8912      	ldrh	r2, [r2, #8]
 80074f4:	4413      	add	r3, r2
 80074f6:	3b01      	subs	r3, #1
 80074f8:	68ba      	ldr	r2, [r7, #8]
 80074fa:	8912      	ldrh	r2, [r2, #8]
 80074fc:	fbb3 f3f2 	udiv	r3, r3, r2
 8007500:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8007502:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8007504:	8b7b      	ldrh	r3, [r7, #26]
 8007506:	429a      	cmp	r2, r3
 8007508:	d90b      	bls.n	8007522 <USB_HC_StartXfer+0xba>
    {
      num_packets = max_hc_pkt_count;
 800750a:	8b7b      	ldrh	r3, [r7, #26]
 800750c:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 800750e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007510:	68ba      	ldr	r2, [r7, #8]
 8007512:	8912      	ldrh	r2, [r2, #8]
 8007514:	fb02 f203 	mul.w	r2, r2, r3
 8007518:	68bb      	ldr	r3, [r7, #8]
 800751a:	611a      	str	r2, [r3, #16]
 800751c:	e001      	b.n	8007522 <USB_HC_StartXfer+0xba>
    }
  }
  else
  {
    num_packets = 1U;
 800751e:	2301      	movs	r3, #1
 8007520:	84fb      	strh	r3, [r7, #38]	; 0x26
  }
  if (hc->ep_is_in != 0U)
 8007522:	68bb      	ldr	r3, [r7, #8]
 8007524:	78db      	ldrb	r3, [r3, #3]
 8007526:	2b00      	cmp	r3, #0
 8007528:	d006      	beq.n	8007538 <USB_HC_StartXfer+0xd0>
  {
    hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 800752a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800752c:	68ba      	ldr	r2, [r7, #8]
 800752e:	8912      	ldrh	r2, [r2, #8]
 8007530:	fb02 f203 	mul.w	r2, r2, r3
 8007534:	68bb      	ldr	r3, [r7, #8]
 8007536:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8007538:	68bb      	ldr	r3, [r7, #8]
 800753a:	691b      	ldr	r3, [r3, #16]
 800753c:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8007540:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007542:	04d9      	lsls	r1, r3, #19
 8007544:	4b69      	ldr	r3, [pc, #420]	; (80076ec <USB_HC_StartXfer+0x284>)
 8007546:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8007548:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800754a:	68bb      	ldr	r3, [r7, #8]
 800754c:	7a9b      	ldrb	r3, [r3, #10]
 800754e:	075b      	lsls	r3, r3, #29
 8007550:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8007554:	69f9      	ldr	r1, [r7, #28]
 8007556:	0148      	lsls	r0, r1, #5
 8007558:	6a39      	ldr	r1, [r7, #32]
 800755a:	4401      	add	r1, r0
 800755c:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8007560:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8007562:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8007564:	79fb      	ldrb	r3, [r7, #7]
 8007566:	2b00      	cmp	r3, #0
 8007568:	d009      	beq.n	800757e <USB_HC_StartXfer+0x116>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 800756a:	68bb      	ldr	r3, [r7, #8]
 800756c:	68d9      	ldr	r1, [r3, #12]
 800756e:	69fb      	ldr	r3, [r7, #28]
 8007570:	015a      	lsls	r2, r3, #5
 8007572:	6a3b      	ldr	r3, [r7, #32]
 8007574:	4413      	add	r3, r2
 8007576:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800757a:	460a      	mov	r2, r1
 800757c:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 800757e:	6a3b      	ldr	r3, [r7, #32]
 8007580:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007584:	689b      	ldr	r3, [r3, #8]
 8007586:	f003 0301 	and.w	r3, r3, #1
 800758a:	2b00      	cmp	r3, #0
 800758c:	bf0c      	ite	eq
 800758e:	2301      	moveq	r3, #1
 8007590:	2300      	movne	r3, #0
 8007592:	b2db      	uxtb	r3, r3
 8007594:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8007596:	69fb      	ldr	r3, [r7, #28]
 8007598:	015a      	lsls	r2, r3, #5
 800759a:	6a3b      	ldr	r3, [r7, #32]
 800759c:	4413      	add	r3, r2
 800759e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	69fa      	ldr	r2, [r7, #28]
 80075a6:	0151      	lsls	r1, r2, #5
 80075a8:	6a3a      	ldr	r2, [r7, #32]
 80075aa:	440a      	add	r2, r1
 80075ac:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80075b0:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80075b4:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 80075b6:	69fb      	ldr	r3, [r7, #28]
 80075b8:	015a      	lsls	r2, r3, #5
 80075ba:	6a3b      	ldr	r3, [r7, #32]
 80075bc:	4413      	add	r3, r2
 80075be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80075c2:	681a      	ldr	r2, [r3, #0]
 80075c4:	7e7b      	ldrb	r3, [r7, #25]
 80075c6:	075b      	lsls	r3, r3, #29
 80075c8:	69f9      	ldr	r1, [r7, #28]
 80075ca:	0148      	lsls	r0, r1, #5
 80075cc:	6a39      	ldr	r1, [r7, #32]
 80075ce:	4401      	add	r1, r0
 80075d0:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 80075d4:	4313      	orrs	r3, r2
 80075d6:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 80075d8:	69fb      	ldr	r3, [r7, #28]
 80075da:	015a      	lsls	r2, r3, #5
 80075dc:	6a3b      	ldr	r3, [r7, #32]
 80075de:	4413      	add	r3, r2
 80075e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	4a42      	ldr	r2, [pc, #264]	; (80076f0 <USB_HC_StartXfer+0x288>)
 80075e8:	6013      	str	r3, [r2, #0]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80075ea:	4b41      	ldr	r3, [pc, #260]	; (80076f0 <USB_HC_StartXfer+0x288>)
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80075f2:	4a3f      	ldr	r2, [pc, #252]	; (80076f0 <USB_HC_StartXfer+0x288>)
 80075f4:	6013      	str	r3, [r2, #0]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 80075f6:	68bb      	ldr	r3, [r7, #8]
 80075f8:	78db      	ldrb	r3, [r3, #3]
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d006      	beq.n	800760c <USB_HC_StartXfer+0x1a4>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 80075fe:	4b3c      	ldr	r3, [pc, #240]	; (80076f0 <USB_HC_StartXfer+0x288>)
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007606:	4a3a      	ldr	r2, [pc, #232]	; (80076f0 <USB_HC_StartXfer+0x288>)
 8007608:	6013      	str	r3, [r2, #0]
 800760a:	e005      	b.n	8007618 <USB_HC_StartXfer+0x1b0>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 800760c:	4b38      	ldr	r3, [pc, #224]	; (80076f0 <USB_HC_StartXfer+0x288>)
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007614:	4a36      	ldr	r2, [pc, #216]	; (80076f0 <USB_HC_StartXfer+0x288>)
 8007616:	6013      	str	r3, [r2, #0]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8007618:	4b35      	ldr	r3, [pc, #212]	; (80076f0 <USB_HC_StartXfer+0x288>)
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007620:	4a33      	ldr	r2, [pc, #204]	; (80076f0 <USB_HC_StartXfer+0x288>)
 8007622:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8007624:	69fb      	ldr	r3, [r7, #28]
 8007626:	015a      	lsls	r2, r3, #5
 8007628:	6a3b      	ldr	r3, [r7, #32]
 800762a:	4413      	add	r3, r2
 800762c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007630:	461a      	mov	r2, r3
 8007632:	4b2f      	ldr	r3, [pc, #188]	; (80076f0 <USB_HC_StartXfer+0x288>)
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8007638:	79fb      	ldrb	r3, [r7, #7]
 800763a:	2b00      	cmp	r3, #0
 800763c:	d001      	beq.n	8007642 <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 800763e:	2300      	movs	r3, #0
 8007640:	e04f      	b.n	80076e2 <USB_HC_StartXfer+0x27a>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8007642:	68bb      	ldr	r3, [r7, #8]
 8007644:	78db      	ldrb	r3, [r3, #3]
 8007646:	2b00      	cmp	r3, #0
 8007648:	d14a      	bne.n	80076e0 <USB_HC_StartXfer+0x278>
 800764a:	68bb      	ldr	r3, [r7, #8]
 800764c:	691b      	ldr	r3, [r3, #16]
 800764e:	2b00      	cmp	r3, #0
 8007650:	d046      	beq.n	80076e0 <USB_HC_StartXfer+0x278>
  {
    switch (hc->ep_type)
 8007652:	68bb      	ldr	r3, [r7, #8]
 8007654:	79db      	ldrb	r3, [r3, #7]
 8007656:	2b03      	cmp	r3, #3
 8007658:	d830      	bhi.n	80076bc <USB_HC_StartXfer+0x254>
 800765a:	a201      	add	r2, pc, #4	; (adr r2, 8007660 <USB_HC_StartXfer+0x1f8>)
 800765c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007660:	08007671 	.word	0x08007671
 8007664:	08007695 	.word	0x08007695
 8007668:	08007671 	.word	0x08007671
 800766c:	08007695 	.word	0x08007695
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8007670:	68bb      	ldr	r3, [r7, #8]
 8007672:	691b      	ldr	r3, [r3, #16]
 8007674:	3303      	adds	r3, #3
 8007676:	089b      	lsrs	r3, r3, #2
 8007678:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800767a:	8afa      	ldrh	r2, [r7, #22]
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007680:	b29b      	uxth	r3, r3
 8007682:	429a      	cmp	r2, r3
 8007684:	d91c      	bls.n	80076c0 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	699b      	ldr	r3, [r3, #24]
 800768a:	f043 0220 	orr.w	r2, r3, #32
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	619a      	str	r2, [r3, #24]
        }
        break;
 8007692:	e015      	b.n	80076c0 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8007694:	68bb      	ldr	r3, [r7, #8]
 8007696:	691b      	ldr	r3, [r3, #16]
 8007698:	3303      	adds	r3, #3
 800769a:	089b      	lsrs	r3, r3, #2
 800769c:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800769e:	8afa      	ldrh	r2, [r7, #22]
 80076a0:	6a3b      	ldr	r3, [r7, #32]
 80076a2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80076a6:	691b      	ldr	r3, [r3, #16]
 80076a8:	b29b      	uxth	r3, r3
 80076aa:	429a      	cmp	r2, r3
 80076ac:	d90a      	bls.n	80076c4 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	699b      	ldr	r3, [r3, #24]
 80076b2:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	619a      	str	r2, [r3, #24]
        }
        break;
 80076ba:	e003      	b.n	80076c4 <USB_HC_StartXfer+0x25c>

      default:
        break;
 80076bc:	bf00      	nop
 80076be:	e002      	b.n	80076c6 <USB_HC_StartXfer+0x25e>
        break;
 80076c0:	bf00      	nop
 80076c2:	e000      	b.n	80076c6 <USB_HC_StartXfer+0x25e>
        break;
 80076c4:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 80076c6:	68bb      	ldr	r3, [r7, #8]
 80076c8:	68d9      	ldr	r1, [r3, #12]
 80076ca:	68bb      	ldr	r3, [r7, #8]
 80076cc:	785a      	ldrb	r2, [r3, #1]
 80076ce:	68bb      	ldr	r3, [r7, #8]
 80076d0:	691b      	ldr	r3, [r3, #16]
 80076d2:	b298      	uxth	r0, r3
 80076d4:	2300      	movs	r3, #0
 80076d6:	9300      	str	r3, [sp, #0]
 80076d8:	4603      	mov	r3, r0
 80076da:	68f8      	ldr	r0, [r7, #12]
 80076dc:	f7ff fb84 	bl	8006de8 <USB_WritePacket>
  }

  return HAL_OK;
 80076e0:	2300      	movs	r3, #0
}
 80076e2:	4618      	mov	r0, r3
 80076e4:	3728      	adds	r7, #40	; 0x28
 80076e6:	46bd      	mov	sp, r7
 80076e8:	bd80      	pop	{r7, pc}
 80076ea:	bf00      	nop
 80076ec:	1ff80000 	.word	0x1ff80000
 80076f0:	200000b0 	.word	0x200000b0

080076f4 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80076f4:	b480      	push	{r7}
 80076f6:	b085      	sub	sp, #20
 80076f8:	af00      	add	r7, sp, #0
 80076fa:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007706:	695b      	ldr	r3, [r3, #20]
 8007708:	b29b      	uxth	r3, r3
}
 800770a:	4618      	mov	r0, r3
 800770c:	3714      	adds	r7, #20
 800770e:	46bd      	mov	sp, r7
 8007710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007714:	4770      	bx	lr

08007716 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8007716:	b480      	push	{r7}
 8007718:	b087      	sub	sp, #28
 800771a:	af00      	add	r7, sp, #0
 800771c:	6078      	str	r0, [r7, #4]
 800771e:	460b      	mov	r3, r1
 8007720:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	613b      	str	r3, [r7, #16]
  uint32_t hcnum = (uint32_t)hc_num;
 8007726:	78fb      	ldrb	r3, [r7, #3]
 8007728:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 800772a:	2300      	movs	r3, #0
 800772c:	617b      	str	r3, [r7, #20]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	015a      	lsls	r2, r3, #5
 8007732:	693b      	ldr	r3, [r7, #16]
 8007734:	4413      	add	r3, r2
 8007736:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	0c9b      	lsrs	r3, r3, #18
 800773e:	f003 0303 	and.w	r3, r3, #3
 8007742:	60bb      	str	r3, [r7, #8]

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8007744:	68bb      	ldr	r3, [r7, #8]
 8007746:	2b00      	cmp	r3, #0
 8007748:	d002      	beq.n	8007750 <USB_HC_Halt+0x3a>
 800774a:	68bb      	ldr	r3, [r7, #8]
 800774c:	2b02      	cmp	r3, #2
 800774e:	d16c      	bne.n	800782a <USB_HC_Halt+0x114>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	015a      	lsls	r2, r3, #5
 8007754:	693b      	ldr	r3, [r7, #16]
 8007756:	4413      	add	r3, r2
 8007758:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	68fa      	ldr	r2, [r7, #12]
 8007760:	0151      	lsls	r1, r2, #5
 8007762:	693a      	ldr	r2, [r7, #16]
 8007764:	440a      	add	r2, r1
 8007766:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800776a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800776e:	6013      	str	r3, [r2, #0]

    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007774:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007778:	2b00      	cmp	r3, #0
 800777a:	d143      	bne.n	8007804 <USB_HC_Halt+0xee>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	015a      	lsls	r2, r3, #5
 8007780:	693b      	ldr	r3, [r7, #16]
 8007782:	4413      	add	r3, r2
 8007784:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	68fa      	ldr	r2, [r7, #12]
 800778c:	0151      	lsls	r1, r2, #5
 800778e:	693a      	ldr	r2, [r7, #16]
 8007790:	440a      	add	r2, r1
 8007792:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007796:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800779a:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	015a      	lsls	r2, r3, #5
 80077a0:	693b      	ldr	r3, [r7, #16]
 80077a2:	4413      	add	r3, r2
 80077a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	68fa      	ldr	r2, [r7, #12]
 80077ac:	0151      	lsls	r1, r2, #5
 80077ae:	693a      	ldr	r2, [r7, #16]
 80077b0:	440a      	add	r2, r1
 80077b2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80077b6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80077ba:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	015a      	lsls	r2, r3, #5
 80077c0:	693b      	ldr	r3, [r7, #16]
 80077c2:	4413      	add	r3, r2
 80077c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	68fa      	ldr	r2, [r7, #12]
 80077cc:	0151      	lsls	r1, r2, #5
 80077ce:	693a      	ldr	r2, [r7, #16]
 80077d0:	440a      	add	r2, r1
 80077d2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80077d6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80077da:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 80077dc:	697b      	ldr	r3, [r7, #20]
 80077de:	3301      	adds	r3, #1
 80077e0:	617b      	str	r3, [r7, #20]
 80077e2:	697b      	ldr	r3, [r7, #20]
 80077e4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80077e8:	d81d      	bhi.n	8007826 <USB_HC_Halt+0x110>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	015a      	lsls	r2, r3, #5
 80077ee:	693b      	ldr	r3, [r7, #16]
 80077f0:	4413      	add	r3, r2
 80077f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80077fc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007800:	d0ec      	beq.n	80077dc <USB_HC_Halt+0xc6>
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8007802:	e080      	b.n	8007906 <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	015a      	lsls	r2, r3, #5
 8007808:	693b      	ldr	r3, [r7, #16]
 800780a:	4413      	add	r3, r2
 800780c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	68fa      	ldr	r2, [r7, #12]
 8007814:	0151      	lsls	r1, r2, #5
 8007816:	693a      	ldr	r2, [r7, #16]
 8007818:	440a      	add	r2, r1
 800781a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800781e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007822:	6013      	str	r3, [r2, #0]
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8007824:	e06f      	b.n	8007906 <USB_HC_Halt+0x1f0>
          break;
 8007826:	bf00      	nop
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8007828:	e06d      	b.n	8007906 <USB_HC_Halt+0x1f0>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	015a      	lsls	r2, r3, #5
 800782e:	693b      	ldr	r3, [r7, #16]
 8007830:	4413      	add	r3, r2
 8007832:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	68fa      	ldr	r2, [r7, #12]
 800783a:	0151      	lsls	r1, r2, #5
 800783c:	693a      	ldr	r2, [r7, #16]
 800783e:	440a      	add	r2, r1
 8007840:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007844:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007848:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800784a:	693b      	ldr	r3, [r7, #16]
 800784c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007850:	691b      	ldr	r3, [r3, #16]
 8007852:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007856:	2b00      	cmp	r3, #0
 8007858:	d143      	bne.n	80078e2 <USB_HC_Halt+0x1cc>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	015a      	lsls	r2, r3, #5
 800785e:	693b      	ldr	r3, [r7, #16]
 8007860:	4413      	add	r3, r2
 8007862:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	68fa      	ldr	r2, [r7, #12]
 800786a:	0151      	lsls	r1, r2, #5
 800786c:	693a      	ldr	r2, [r7, #16]
 800786e:	440a      	add	r2, r1
 8007870:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007874:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007878:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	015a      	lsls	r2, r3, #5
 800787e:	693b      	ldr	r3, [r7, #16]
 8007880:	4413      	add	r3, r2
 8007882:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	68fa      	ldr	r2, [r7, #12]
 800788a:	0151      	lsls	r1, r2, #5
 800788c:	693a      	ldr	r2, [r7, #16]
 800788e:	440a      	add	r2, r1
 8007890:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007894:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007898:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	015a      	lsls	r2, r3, #5
 800789e:	693b      	ldr	r3, [r7, #16]
 80078a0:	4413      	add	r3, r2
 80078a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	68fa      	ldr	r2, [r7, #12]
 80078aa:	0151      	lsls	r1, r2, #5
 80078ac:	693a      	ldr	r2, [r7, #16]
 80078ae:	440a      	add	r2, r1
 80078b0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80078b4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80078b8:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 80078ba:	697b      	ldr	r3, [r7, #20]
 80078bc:	3301      	adds	r3, #1
 80078be:	617b      	str	r3, [r7, #20]
 80078c0:	697b      	ldr	r3, [r7, #20]
 80078c2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80078c6:	d81d      	bhi.n	8007904 <USB_HC_Halt+0x1ee>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	015a      	lsls	r2, r3, #5
 80078cc:	693b      	ldr	r3, [r7, #16]
 80078ce:	4413      	add	r3, r2
 80078d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80078da:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80078de:	d0ec      	beq.n	80078ba <USB_HC_Halt+0x1a4>
 80078e0:	e011      	b.n	8007906 <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	015a      	lsls	r2, r3, #5
 80078e6:	693b      	ldr	r3, [r7, #16]
 80078e8:	4413      	add	r3, r2
 80078ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	68fa      	ldr	r2, [r7, #12]
 80078f2:	0151      	lsls	r1, r2, #5
 80078f4:	693a      	ldr	r2, [r7, #16]
 80078f6:	440a      	add	r2, r1
 80078f8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80078fc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007900:	6013      	str	r3, [r2, #0]
 8007902:	e000      	b.n	8007906 <USB_HC_Halt+0x1f0>
          break;
 8007904:	bf00      	nop
    }
  }

  return HAL_OK;
 8007906:	2300      	movs	r3, #0
}
 8007908:	4618      	mov	r0, r3
 800790a:	371c      	adds	r7, #28
 800790c:	46bd      	mov	sp, r7
 800790e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007912:	4770      	bx	lr

08007914 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8007914:	b480      	push	{r7}
 8007916:	b087      	sub	sp, #28
 8007918:	af00      	add	r7, sp, #0
 800791a:	6078      	str	r0, [r7, #4]
 800791c:	460b      	mov	r3, r1
 800791e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8007924:	78fb      	ldrb	r3, [r7, #3]
 8007926:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8007928:	2301      	movs	r3, #1
 800792a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	04da      	lsls	r2, r3, #19
 8007930:	4b15      	ldr	r3, [pc, #84]	; (8007988 <USB_DoPing+0x74>)
 8007932:	4013      	ands	r3, r2
 8007934:	693a      	ldr	r2, [r7, #16]
 8007936:	0151      	lsls	r1, r2, #5
 8007938:	697a      	ldr	r2, [r7, #20]
 800793a:	440a      	add	r2, r1
 800793c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007940:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007944:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8007946:	693b      	ldr	r3, [r7, #16]
 8007948:	015a      	lsls	r2, r3, #5
 800794a:	697b      	ldr	r3, [r7, #20]
 800794c:	4413      	add	r3, r2
 800794e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8007956:	68bb      	ldr	r3, [r7, #8]
 8007958:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800795c:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800795e:	68bb      	ldr	r3, [r7, #8]
 8007960:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007964:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8007966:	693b      	ldr	r3, [r7, #16]
 8007968:	015a      	lsls	r2, r3, #5
 800796a:	697b      	ldr	r3, [r7, #20]
 800796c:	4413      	add	r3, r2
 800796e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007972:	461a      	mov	r2, r3
 8007974:	68bb      	ldr	r3, [r7, #8]
 8007976:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8007978:	2300      	movs	r3, #0
}
 800797a:	4618      	mov	r0, r3
 800797c:	371c      	adds	r7, #28
 800797e:	46bd      	mov	sp, r7
 8007980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007984:	4770      	bx	lr
 8007986:	bf00      	nop
 8007988:	1ff80000 	.word	0x1ff80000

0800798c <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 800798c:	b580      	push	{r7, lr}
 800798e:	b086      	sub	sp, #24
 8007990:	af00      	add	r7, sp, #0
 8007992:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8007998:	2300      	movs	r3, #0
 800799a:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 800799c:	6878      	ldr	r0, [r7, #4]
 800799e:	f7ff f99f 	bl	8006ce0 <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 80079a2:	2110      	movs	r1, #16
 80079a4:	6878      	ldr	r0, [r7, #4]
 80079a6:	f7ff f9d7 	bl	8006d58 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 80079aa:	6878      	ldr	r0, [r7, #4]
 80079ac:	f7ff f9fa 	bl	8006da4 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 80079b0:	2300      	movs	r3, #0
 80079b2:	613b      	str	r3, [r7, #16]
 80079b4:	e01f      	b.n	80079f6 <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 80079b6:	693b      	ldr	r3, [r7, #16]
 80079b8:	015a      	lsls	r2, r3, #5
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	4413      	add	r3, r2
 80079be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 80079c6:	68bb      	ldr	r3, [r7, #8]
 80079c8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80079cc:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 80079ce:	68bb      	ldr	r3, [r7, #8]
 80079d0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80079d4:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80079d6:	68bb      	ldr	r3, [r7, #8]
 80079d8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80079dc:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 80079de:	693b      	ldr	r3, [r7, #16]
 80079e0:	015a      	lsls	r2, r3, #5
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	4413      	add	r3, r2
 80079e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80079ea:	461a      	mov	r2, r3
 80079ec:	68bb      	ldr	r3, [r7, #8]
 80079ee:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 80079f0:	693b      	ldr	r3, [r7, #16]
 80079f2:	3301      	adds	r3, #1
 80079f4:	613b      	str	r3, [r7, #16]
 80079f6:	693b      	ldr	r3, [r7, #16]
 80079f8:	2b0f      	cmp	r3, #15
 80079fa:	d9dc      	bls.n	80079b6 <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 80079fc:	2300      	movs	r3, #0
 80079fe:	613b      	str	r3, [r7, #16]
 8007a00:	e034      	b.n	8007a6c <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 8007a02:	693b      	ldr	r3, [r7, #16]
 8007a04:	015a      	lsls	r2, r3, #5
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	4413      	add	r3, r2
 8007a0a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 8007a12:	68bb      	ldr	r3, [r7, #8]
 8007a14:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007a18:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 8007a1a:	68bb      	ldr	r3, [r7, #8]
 8007a1c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007a20:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8007a22:	68bb      	ldr	r3, [r7, #8]
 8007a24:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007a28:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8007a2a:	693b      	ldr	r3, [r7, #16]
 8007a2c:	015a      	lsls	r2, r3, #5
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	4413      	add	r3, r2
 8007a32:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007a36:	461a      	mov	r2, r3
 8007a38:	68bb      	ldr	r3, [r7, #8]
 8007a3a:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 8007a3c:	697b      	ldr	r3, [r7, #20]
 8007a3e:	3301      	adds	r3, #1
 8007a40:	617b      	str	r3, [r7, #20]
 8007a42:	697b      	ldr	r3, [r7, #20]
 8007a44:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007a48:	d80c      	bhi.n	8007a64 <USB_StopHost+0xd8>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8007a4a:	693b      	ldr	r3, [r7, #16]
 8007a4c:	015a      	lsls	r2, r3, #5
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	4413      	add	r3, r2
 8007a52:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007a5c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007a60:	d0ec      	beq.n	8007a3c <USB_StopHost+0xb0>
 8007a62:	e000      	b.n	8007a66 <USB_StopHost+0xda>
        break;
 8007a64:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8007a66:	693b      	ldr	r3, [r7, #16]
 8007a68:	3301      	adds	r3, #1
 8007a6a:	613b      	str	r3, [r7, #16]
 8007a6c:	693b      	ldr	r3, [r7, #16]
 8007a6e:	2b0f      	cmp	r3, #15
 8007a70:	d9c7      	bls.n	8007a02 <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007a78:	461a      	mov	r2, r3
 8007a7a:	f04f 33ff 	mov.w	r3, #4294967295
 8007a7e:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	f04f 32ff 	mov.w	r2, #4294967295
 8007a86:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8007a88:	6878      	ldr	r0, [r7, #4]
 8007a8a:	f7ff f918 	bl	8006cbe <USB_EnableGlobalInt>

  return HAL_OK;
 8007a8e:	2300      	movs	r3, #0
}
 8007a90:	4618      	mov	r0, r3
 8007a92:	3718      	adds	r7, #24
 8007a94:	46bd      	mov	sp, r7
 8007a96:	bd80      	pop	{r7, pc}

08007a98 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8007a98:	b590      	push	{r4, r7, lr}
 8007a9a:	b089      	sub	sp, #36	; 0x24
 8007a9c:	af04      	add	r7, sp, #16
 8007a9e:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8007aa0:	2301      	movs	r3, #1
 8007aa2:	2202      	movs	r2, #2
 8007aa4:	2102      	movs	r1, #2
 8007aa6:	6878      	ldr	r0, [r7, #4]
 8007aa8:	f000 fc68 	bl	800837c <USBH_FindInterface>
 8007aac:	4603      	mov	r3, r0
 8007aae:	73fb      	strb	r3, [r7, #15]
                                 ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8007ab0:	7bfb      	ldrb	r3, [r7, #15]
 8007ab2:	2bff      	cmp	r3, #255	; 0xff
 8007ab4:	d002      	beq.n	8007abc <USBH_CDC_InterfaceInit+0x24>
 8007ab6:	7bfb      	ldrb	r3, [r7, #15]
 8007ab8:	2b01      	cmp	r3, #1
 8007aba:	d901      	bls.n	8007ac0 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8007abc:	2302      	movs	r3, #2
 8007abe:	e13d      	b.n	8007d3c <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8007ac0:	7bfb      	ldrb	r3, [r7, #15]
 8007ac2:	4619      	mov	r1, r3
 8007ac4:	6878      	ldr	r0, [r7, #4]
 8007ac6:	f000 fc3d 	bl	8008344 <USBH_SelectInterface>
 8007aca:	4603      	mov	r3, r0
 8007acc:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8007ace:	7bbb      	ldrb	r3, [r7, #14]
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	d001      	beq.n	8007ad8 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8007ad4:	2302      	movs	r3, #2
 8007ad6:	e131      	b.n	8007d3c <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 8007ade:	2050      	movs	r0, #80	; 0x50
 8007ae0:	f002 f9f6 	bl	8009ed0 <malloc>
 8007ae4:	4603      	mov	r3, r0
 8007ae6:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007aee:	69db      	ldr	r3, [r3, #28]
 8007af0:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8007af2:	68bb      	ldr	r3, [r7, #8]
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	d101      	bne.n	8007afc <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8007af8:	2302      	movs	r3, #2
 8007afa:	e11f      	b.n	8007d3c <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8007afc:	2250      	movs	r2, #80	; 0x50
 8007afe:	2100      	movs	r1, #0
 8007b00:	68b8      	ldr	r0, [r7, #8]
 8007b02:	f002 f9f5 	bl	8009ef0 <memset>

  /*Collect the notification endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8007b06:	7bfb      	ldrb	r3, [r7, #15]
 8007b08:	687a      	ldr	r2, [r7, #4]
 8007b0a:	211a      	movs	r1, #26
 8007b0c:	fb01 f303 	mul.w	r3, r1, r3
 8007b10:	4413      	add	r3, r2
 8007b12:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8007b16:	781b      	ldrb	r3, [r3, #0]
 8007b18:	b25b      	sxtb	r3, r3
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	da15      	bge.n	8007b4a <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8007b1e:	7bfb      	ldrb	r3, [r7, #15]
 8007b20:	687a      	ldr	r2, [r7, #4]
 8007b22:	211a      	movs	r1, #26
 8007b24:	fb01 f303 	mul.w	r3, r1, r3
 8007b28:	4413      	add	r3, r2
 8007b2a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8007b2e:	781a      	ldrb	r2, [r3, #0]
 8007b30:	68bb      	ldr	r3, [r7, #8]
 8007b32:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8007b34:	7bfb      	ldrb	r3, [r7, #15]
 8007b36:	687a      	ldr	r2, [r7, #4]
 8007b38:	211a      	movs	r1, #26
 8007b3a:	fb01 f303 	mul.w	r3, r1, r3
 8007b3e:	4413      	add	r3, r2
 8007b40:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8007b44:	881a      	ldrh	r2, [r3, #0]
 8007b46:	68bb      	ldr	r3, [r7, #8]
 8007b48:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8007b4a:	68bb      	ldr	r3, [r7, #8]
 8007b4c:	785b      	ldrb	r3, [r3, #1]
 8007b4e:	4619      	mov	r1, r3
 8007b50:	6878      	ldr	r0, [r7, #4]
 8007b52:	f001 fe36 	bl	80097c2 <USBH_AllocPipe>
 8007b56:	4603      	mov	r3, r0
 8007b58:	461a      	mov	r2, r3
 8007b5a:	68bb      	ldr	r3, [r7, #8]
 8007b5c:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 8007b5e:	68bb      	ldr	r3, [r7, #8]
 8007b60:	7819      	ldrb	r1, [r3, #0]
 8007b62:	68bb      	ldr	r3, [r7, #8]
 8007b64:	7858      	ldrb	r0, [r3, #1]
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007b72:	68ba      	ldr	r2, [r7, #8]
 8007b74:	8952      	ldrh	r2, [r2, #10]
 8007b76:	9202      	str	r2, [sp, #8]
 8007b78:	2203      	movs	r2, #3
 8007b7a:	9201      	str	r2, [sp, #4]
 8007b7c:	9300      	str	r3, [sp, #0]
 8007b7e:	4623      	mov	r3, r4
 8007b80:	4602      	mov	r2, r0
 8007b82:	6878      	ldr	r0, [r7, #4]
 8007b84:	f001 fdee 	bl	8009764 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                CDC_Handle->CommItf.NotifEpSize);

  USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8007b88:	68bb      	ldr	r3, [r7, #8]
 8007b8a:	781b      	ldrb	r3, [r3, #0]
 8007b8c:	2200      	movs	r2, #0
 8007b8e:	4619      	mov	r1, r3
 8007b90:	6878      	ldr	r0, [r7, #4]
 8007b92:	f002 f8ed 	bl	8009d70 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 8007b96:	2300      	movs	r3, #0
 8007b98:	2200      	movs	r2, #0
 8007b9a:	210a      	movs	r1, #10
 8007b9c:	6878      	ldr	r0, [r7, #4]
 8007b9e:	f000 fbed 	bl	800837c <USBH_FindInterface>
 8007ba2:	4603      	mov	r3, r0
 8007ba4:	73fb      	strb	r3, [r7, #15]
                                 RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8007ba6:	7bfb      	ldrb	r3, [r7, #15]
 8007ba8:	2bff      	cmp	r3, #255	; 0xff
 8007baa:	d002      	beq.n	8007bb2 <USBH_CDC_InterfaceInit+0x11a>
 8007bac:	7bfb      	ldrb	r3, [r7, #15]
 8007bae:	2b01      	cmp	r3, #1
 8007bb0:	d901      	bls.n	8007bb6 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8007bb2:	2302      	movs	r3, #2
 8007bb4:	e0c2      	b.n	8007d3c <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8007bb6:	7bfb      	ldrb	r3, [r7, #15]
 8007bb8:	687a      	ldr	r2, [r7, #4]
 8007bba:	211a      	movs	r1, #26
 8007bbc:	fb01 f303 	mul.w	r3, r1, r3
 8007bc0:	4413      	add	r3, r2
 8007bc2:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8007bc6:	781b      	ldrb	r3, [r3, #0]
 8007bc8:	b25b      	sxtb	r3, r3
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	da16      	bge.n	8007bfc <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8007bce:	7bfb      	ldrb	r3, [r7, #15]
 8007bd0:	687a      	ldr	r2, [r7, #4]
 8007bd2:	211a      	movs	r1, #26
 8007bd4:	fb01 f303 	mul.w	r3, r1, r3
 8007bd8:	4413      	add	r3, r2
 8007bda:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8007bde:	781a      	ldrb	r2, [r3, #0]
 8007be0:	68bb      	ldr	r3, [r7, #8]
 8007be2:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8007be4:	7bfb      	ldrb	r3, [r7, #15]
 8007be6:	687a      	ldr	r2, [r7, #4]
 8007be8:	211a      	movs	r1, #26
 8007bea:	fb01 f303 	mul.w	r3, r1, r3
 8007bee:	4413      	add	r3, r2
 8007bf0:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8007bf4:	881a      	ldrh	r2, [r3, #0]
 8007bf6:	68bb      	ldr	r3, [r7, #8]
 8007bf8:	835a      	strh	r2, [r3, #26]
 8007bfa:	e015      	b.n	8007c28 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8007bfc:	7bfb      	ldrb	r3, [r7, #15]
 8007bfe:	687a      	ldr	r2, [r7, #4]
 8007c00:	211a      	movs	r1, #26
 8007c02:	fb01 f303 	mul.w	r3, r1, r3
 8007c06:	4413      	add	r3, r2
 8007c08:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8007c0c:	781a      	ldrb	r2, [r3, #0]
 8007c0e:	68bb      	ldr	r3, [r7, #8]
 8007c10:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8007c12:	7bfb      	ldrb	r3, [r7, #15]
 8007c14:	687a      	ldr	r2, [r7, #4]
 8007c16:	211a      	movs	r1, #26
 8007c18:	fb01 f303 	mul.w	r3, r1, r3
 8007c1c:	4413      	add	r3, r2
 8007c1e:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8007c22:	881a      	ldrh	r2, [r3, #0]
 8007c24:	68bb      	ldr	r3, [r7, #8]
 8007c26:	831a      	strh	r2, [r3, #24]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 8007c28:	7bfb      	ldrb	r3, [r7, #15]
 8007c2a:	687a      	ldr	r2, [r7, #4]
 8007c2c:	211a      	movs	r1, #26
 8007c2e:	fb01 f303 	mul.w	r3, r1, r3
 8007c32:	4413      	add	r3, r2
 8007c34:	f203 3356 	addw	r3, r3, #854	; 0x356
 8007c38:	781b      	ldrb	r3, [r3, #0]
 8007c3a:	b25b      	sxtb	r3, r3
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	da16      	bge.n	8007c6e <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8007c40:	7bfb      	ldrb	r3, [r7, #15]
 8007c42:	687a      	ldr	r2, [r7, #4]
 8007c44:	211a      	movs	r1, #26
 8007c46:	fb01 f303 	mul.w	r3, r1, r3
 8007c4a:	4413      	add	r3, r2
 8007c4c:	f203 3356 	addw	r3, r3, #854	; 0x356
 8007c50:	781a      	ldrb	r2, [r3, #0]
 8007c52:	68bb      	ldr	r3, [r7, #8]
 8007c54:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8007c56:	7bfb      	ldrb	r3, [r7, #15]
 8007c58:	687a      	ldr	r2, [r7, #4]
 8007c5a:	211a      	movs	r1, #26
 8007c5c:	fb01 f303 	mul.w	r3, r1, r3
 8007c60:	4413      	add	r3, r2
 8007c62:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8007c66:	881a      	ldrh	r2, [r3, #0]
 8007c68:	68bb      	ldr	r3, [r7, #8]
 8007c6a:	835a      	strh	r2, [r3, #26]
 8007c6c:	e015      	b.n	8007c9a <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8007c6e:	7bfb      	ldrb	r3, [r7, #15]
 8007c70:	687a      	ldr	r2, [r7, #4]
 8007c72:	211a      	movs	r1, #26
 8007c74:	fb01 f303 	mul.w	r3, r1, r3
 8007c78:	4413      	add	r3, r2
 8007c7a:	f203 3356 	addw	r3, r3, #854	; 0x356
 8007c7e:	781a      	ldrb	r2, [r3, #0]
 8007c80:	68bb      	ldr	r3, [r7, #8]
 8007c82:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8007c84:	7bfb      	ldrb	r3, [r7, #15]
 8007c86:	687a      	ldr	r2, [r7, #4]
 8007c88:	211a      	movs	r1, #26
 8007c8a:	fb01 f303 	mul.w	r3, r1, r3
 8007c8e:	4413      	add	r3, r2
 8007c90:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8007c94:	881a      	ldrh	r2, [r3, #0]
 8007c96:	68bb      	ldr	r3, [r7, #8]
 8007c98:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8007c9a:	68bb      	ldr	r3, [r7, #8]
 8007c9c:	7b9b      	ldrb	r3, [r3, #14]
 8007c9e:	4619      	mov	r1, r3
 8007ca0:	6878      	ldr	r0, [r7, #4]
 8007ca2:	f001 fd8e 	bl	80097c2 <USBH_AllocPipe>
 8007ca6:	4603      	mov	r3, r0
 8007ca8:	461a      	mov	r2, r3
 8007caa:	68bb      	ldr	r3, [r7, #8]
 8007cac:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8007cae:	68bb      	ldr	r3, [r7, #8]
 8007cb0:	7bdb      	ldrb	r3, [r3, #15]
 8007cb2:	4619      	mov	r1, r3
 8007cb4:	6878      	ldr	r0, [r7, #4]
 8007cb6:	f001 fd84 	bl	80097c2 <USBH_AllocPipe>
 8007cba:	4603      	mov	r3, r0
 8007cbc:	461a      	mov	r2, r3
 8007cbe:	68bb      	ldr	r3, [r7, #8]
 8007cc0:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8007cc2:	68bb      	ldr	r3, [r7, #8]
 8007cc4:	7b59      	ldrb	r1, [r3, #13]
 8007cc6:	68bb      	ldr	r3, [r7, #8]
 8007cc8:	7b98      	ldrb	r0, [r3, #14]
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007cd6:	68ba      	ldr	r2, [r7, #8]
 8007cd8:	8b12      	ldrh	r2, [r2, #24]
 8007cda:	9202      	str	r2, [sp, #8]
 8007cdc:	2202      	movs	r2, #2
 8007cde:	9201      	str	r2, [sp, #4]
 8007ce0:	9300      	str	r3, [sp, #0]
 8007ce2:	4623      	mov	r3, r4
 8007ce4:	4602      	mov	r2, r0
 8007ce6:	6878      	ldr	r0, [r7, #4]
 8007ce8:	f001 fd3c 	bl	8009764 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8007cec:	68bb      	ldr	r3, [r7, #8]
 8007cee:	7b19      	ldrb	r1, [r3, #12]
 8007cf0:	68bb      	ldr	r3, [r7, #8]
 8007cf2:	7bd8      	ldrb	r0, [r3, #15]
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007d00:	68ba      	ldr	r2, [r7, #8]
 8007d02:	8b52      	ldrh	r2, [r2, #26]
 8007d04:	9202      	str	r2, [sp, #8]
 8007d06:	2202      	movs	r2, #2
 8007d08:	9201      	str	r2, [sp, #4]
 8007d0a:	9300      	str	r3, [sp, #0]
 8007d0c:	4623      	mov	r3, r4
 8007d0e:	4602      	mov	r2, r0
 8007d10:	6878      	ldr	r0, [r7, #4]
 8007d12:	f001 fd27 	bl	8009764 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8007d16:	68bb      	ldr	r3, [r7, #8]
 8007d18:	2200      	movs	r2, #0
 8007d1a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 8007d1e:	68bb      	ldr	r3, [r7, #8]
 8007d20:	7b5b      	ldrb	r3, [r3, #13]
 8007d22:	2200      	movs	r2, #0
 8007d24:	4619      	mov	r1, r3
 8007d26:	6878      	ldr	r0, [r7, #4]
 8007d28:	f002 f822 	bl	8009d70 <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8007d2c:	68bb      	ldr	r3, [r7, #8]
 8007d2e:	7b1b      	ldrb	r3, [r3, #12]
 8007d30:	2200      	movs	r2, #0
 8007d32:	4619      	mov	r1, r3
 8007d34:	6878      	ldr	r0, [r7, #4]
 8007d36:	f002 f81b 	bl	8009d70 <USBH_LL_SetToggle>

  return USBH_OK;
 8007d3a:	2300      	movs	r3, #0
}
 8007d3c:	4618      	mov	r0, r3
 8007d3e:	3714      	adds	r7, #20
 8007d40:	46bd      	mov	sp, r7
 8007d42:	bd90      	pop	{r4, r7, pc}

08007d44 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8007d44:	b580      	push	{r7, lr}
 8007d46:	b084      	sub	sp, #16
 8007d48:	af00      	add	r7, sp, #0
 8007d4a:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007d52:	69db      	ldr	r3, [r3, #28]
 8007d54:	60fb      	str	r3, [r7, #12]

  if (CDC_Handle->CommItf.NotifPipe)
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	781b      	ldrb	r3, [r3, #0]
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	d00e      	beq.n	8007d7c <USBH_CDC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	781b      	ldrb	r3, [r3, #0]
 8007d62:	4619      	mov	r1, r3
 8007d64:	6878      	ldr	r0, [r7, #4]
 8007d66:	f001 fd1c 	bl	80097a2 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	781b      	ldrb	r3, [r3, #0]
 8007d6e:	4619      	mov	r1, r3
 8007d70:	6878      	ldr	r0, [r7, #4]
 8007d72:	f001 fd47 	bl	8009804 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	2200      	movs	r2, #0
 8007d7a:	701a      	strb	r2, [r3, #0]
  }

  if (CDC_Handle->DataItf.InPipe)
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	7b1b      	ldrb	r3, [r3, #12]
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	d00e      	beq.n	8007da2 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	7b1b      	ldrb	r3, [r3, #12]
 8007d88:	4619      	mov	r1, r3
 8007d8a:	6878      	ldr	r0, [r7, #4]
 8007d8c:	f001 fd09 	bl	80097a2 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	7b1b      	ldrb	r3, [r3, #12]
 8007d94:	4619      	mov	r1, r3
 8007d96:	6878      	ldr	r0, [r7, #4]
 8007d98:	f001 fd34 	bl	8009804 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	2200      	movs	r2, #0
 8007da0:	731a      	strb	r2, [r3, #12]
  }

  if (CDC_Handle->DataItf.OutPipe)
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	7b5b      	ldrb	r3, [r3, #13]
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	d00e      	beq.n	8007dc8 <USBH_CDC_InterfaceDeInit+0x84>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	7b5b      	ldrb	r3, [r3, #13]
 8007dae:	4619      	mov	r1, r3
 8007db0:	6878      	ldr	r0, [r7, #4]
 8007db2:	f001 fcf6 	bl	80097a2 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	7b5b      	ldrb	r3, [r3, #13]
 8007dba:	4619      	mov	r1, r3
 8007dbc:	6878      	ldr	r0, [r7, #4]
 8007dbe:	f001 fd21 	bl	8009804 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	2200      	movs	r2, #0
 8007dc6:	735a      	strb	r2, [r3, #13]
  }

  if (phost->pActiveClass->pData)
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007dce:	69db      	ldr	r3, [r3, #28]
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	d00b      	beq.n	8007dec <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007dda:	69db      	ldr	r3, [r3, #28]
 8007ddc:	4618      	mov	r0, r3
 8007dde:	f002 f87f 	bl	8009ee0 <free>
    phost->pActiveClass->pData = 0U;
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007de8:	2200      	movs	r2, #0
 8007dea:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8007dec:	2300      	movs	r3, #0
}
 8007dee:	4618      	mov	r0, r3
 8007df0:	3710      	adds	r7, #16
 8007df2:	46bd      	mov	sp, r7
 8007df4:	bd80      	pop	{r7, pc}

08007df6 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8007df6:	b580      	push	{r7, lr}
 8007df8:	b084      	sub	sp, #16
 8007dfa:	af00      	add	r7, sp, #0
 8007dfc:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007e04:	69db      	ldr	r3, [r3, #28]
 8007e06:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	3340      	adds	r3, #64	; 0x40
 8007e0c:	4619      	mov	r1, r3
 8007e0e:	6878      	ldr	r0, [r7, #4]
 8007e10:	f000 f8b1 	bl	8007f76 <GetLineCoding>
 8007e14:	4603      	mov	r3, r0
 8007e16:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8007e18:	7afb      	ldrb	r3, [r7, #11]
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	d105      	bne.n	8007e2a <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007e24:	2102      	movs	r1, #2
 8007e26:	6878      	ldr	r0, [r7, #4]
 8007e28:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 8007e2a:	7afb      	ldrb	r3, [r7, #11]
}
 8007e2c:	4618      	mov	r0, r3
 8007e2e:	3710      	adds	r7, #16
 8007e30:	46bd      	mov	sp, r7
 8007e32:	bd80      	pop	{r7, pc}

08007e34 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8007e34:	b580      	push	{r7, lr}
 8007e36:	b084      	sub	sp, #16
 8007e38:	af00      	add	r7, sp, #0
 8007e3a:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8007e3c:	2301      	movs	r3, #1
 8007e3e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8007e40:	2300      	movs	r3, #0
 8007e42:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007e4a:	69db      	ldr	r3, [r3, #28]
 8007e4c:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 8007e4e:	68bb      	ldr	r3, [r7, #8]
 8007e50:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8007e54:	2b04      	cmp	r3, #4
 8007e56:	d877      	bhi.n	8007f48 <USBH_CDC_Process+0x114>
 8007e58:	a201      	add	r2, pc, #4	; (adr r2, 8007e60 <USBH_CDC_Process+0x2c>)
 8007e5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e5e:	bf00      	nop
 8007e60:	08007e75 	.word	0x08007e75
 8007e64:	08007e7b 	.word	0x08007e7b
 8007e68:	08007eab 	.word	0x08007eab
 8007e6c:	08007f1f 	.word	0x08007f1f
 8007e70:	08007f2d 	.word	0x08007f2d
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8007e74:	2300      	movs	r3, #0
 8007e76:	73fb      	strb	r3, [r7, #15]
      break;
 8007e78:	e06d      	b.n	8007f56 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8007e7a:	68bb      	ldr	r3, [r7, #8]
 8007e7c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007e7e:	4619      	mov	r1, r3
 8007e80:	6878      	ldr	r0, [r7, #4]
 8007e82:	f000 f897 	bl	8007fb4 <SetLineCoding>
 8007e86:	4603      	mov	r3, r0
 8007e88:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8007e8a:	7bbb      	ldrb	r3, [r7, #14]
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	d104      	bne.n	8007e9a <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8007e90:	68bb      	ldr	r3, [r7, #8]
 8007e92:	2202      	movs	r2, #2
 8007e94:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8007e98:	e058      	b.n	8007f4c <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 8007e9a:	7bbb      	ldrb	r3, [r7, #14]
 8007e9c:	2b01      	cmp	r3, #1
 8007e9e:	d055      	beq.n	8007f4c <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8007ea0:	68bb      	ldr	r3, [r7, #8]
 8007ea2:	2204      	movs	r2, #4
 8007ea4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8007ea8:	e050      	b.n	8007f4c <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8007eaa:	68bb      	ldr	r3, [r7, #8]
 8007eac:	3340      	adds	r3, #64	; 0x40
 8007eae:	4619      	mov	r1, r3
 8007eb0:	6878      	ldr	r0, [r7, #4]
 8007eb2:	f000 f860 	bl	8007f76 <GetLineCoding>
 8007eb6:	4603      	mov	r3, r0
 8007eb8:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8007eba:	7bbb      	ldrb	r3, [r7, #14]
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	d126      	bne.n	8007f0e <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8007ec0:	68bb      	ldr	r3, [r7, #8]
 8007ec2:	2200      	movs	r2, #0
 8007ec4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8007ec8:	68bb      	ldr	r3, [r7, #8]
 8007eca:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8007ece:	68bb      	ldr	r3, [r7, #8]
 8007ed0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007ed2:	791b      	ldrb	r3, [r3, #4]
 8007ed4:	429a      	cmp	r2, r3
 8007ed6:	d13b      	bne.n	8007f50 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8007ed8:	68bb      	ldr	r3, [r7, #8]
 8007eda:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 8007ede:	68bb      	ldr	r3, [r7, #8]
 8007ee0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007ee2:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8007ee4:	429a      	cmp	r2, r3
 8007ee6:	d133      	bne.n	8007f50 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8007ee8:	68bb      	ldr	r3, [r7, #8]
 8007eea:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 8007eee:	68bb      	ldr	r3, [r7, #8]
 8007ef0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007ef2:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8007ef4:	429a      	cmp	r2, r3
 8007ef6:	d12b      	bne.n	8007f50 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8007ef8:	68bb      	ldr	r3, [r7, #8]
 8007efa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007efc:	68bb      	ldr	r3, [r7, #8]
 8007efe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007f00:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8007f02:	429a      	cmp	r2, r3
 8007f04:	d124      	bne.n	8007f50 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8007f06:	6878      	ldr	r0, [r7, #4]
 8007f08:	f000 f95a 	bl	80081c0 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8007f0c:	e020      	b.n	8007f50 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 8007f0e:	7bbb      	ldrb	r3, [r7, #14]
 8007f10:	2b01      	cmp	r3, #1
 8007f12:	d01d      	beq.n	8007f50 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8007f14:	68bb      	ldr	r3, [r7, #8]
 8007f16:	2204      	movs	r2, #4
 8007f18:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8007f1c:	e018      	b.n	8007f50 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 8007f1e:	6878      	ldr	r0, [r7, #4]
 8007f20:	f000 f867 	bl	8007ff2 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8007f24:	6878      	ldr	r0, [r7, #4]
 8007f26:	f000 f8dc 	bl	80080e2 <CDC_ProcessReception>
      break;
 8007f2a:	e014      	b.n	8007f56 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8007f2c:	2100      	movs	r1, #0
 8007f2e:	6878      	ldr	r0, [r7, #4]
 8007f30:	f000 ffe5 	bl	8008efe <USBH_ClrFeature>
 8007f34:	4603      	mov	r3, r0
 8007f36:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8007f38:	7bbb      	ldrb	r3, [r7, #14]
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	d10a      	bne.n	8007f54 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 8007f3e:	68bb      	ldr	r3, [r7, #8]
 8007f40:	2200      	movs	r2, #0
 8007f42:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 8007f46:	e005      	b.n	8007f54 <USBH_CDC_Process+0x120>

    default:
      break;
 8007f48:	bf00      	nop
 8007f4a:	e004      	b.n	8007f56 <USBH_CDC_Process+0x122>
      break;
 8007f4c:	bf00      	nop
 8007f4e:	e002      	b.n	8007f56 <USBH_CDC_Process+0x122>
      break;
 8007f50:	bf00      	nop
 8007f52:	e000      	b.n	8007f56 <USBH_CDC_Process+0x122>
      break;
 8007f54:	bf00      	nop

  }

  return status;
 8007f56:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f58:	4618      	mov	r0, r3
 8007f5a:	3710      	adds	r7, #16
 8007f5c:	46bd      	mov	sp, r7
 8007f5e:	bd80      	pop	{r7, pc}

08007f60 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8007f60:	b480      	push	{r7}
 8007f62:	b083      	sub	sp, #12
 8007f64:	af00      	add	r7, sp, #0
 8007f66:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8007f68:	2300      	movs	r3, #0
}
 8007f6a:	4618      	mov	r0, r3
 8007f6c:	370c      	adds	r7, #12
 8007f6e:	46bd      	mov	sp, r7
 8007f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f74:	4770      	bx	lr

08007f76 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8007f76:	b580      	push	{r7, lr}
 8007f78:	b082      	sub	sp, #8
 8007f7a:	af00      	add	r7, sp, #0
 8007f7c:	6078      	str	r0, [r7, #4]
 8007f7e:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	22a1      	movs	r2, #161	; 0xa1
 8007f84:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	2221      	movs	r2, #33	; 0x21
 8007f8a:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	2200      	movs	r2, #0
 8007f90:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	2200      	movs	r2, #0
 8007f96:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	2207      	movs	r2, #7
 8007f9c:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8007f9e:	683b      	ldr	r3, [r7, #0]
 8007fa0:	2207      	movs	r2, #7
 8007fa2:	4619      	mov	r1, r3
 8007fa4:	6878      	ldr	r0, [r7, #4]
 8007fa6:	f001 f98a 	bl	80092be <USBH_CtlReq>
 8007faa:	4603      	mov	r3, r0
}
 8007fac:	4618      	mov	r0, r3
 8007fae:	3708      	adds	r7, #8
 8007fb0:	46bd      	mov	sp, r7
 8007fb2:	bd80      	pop	{r7, pc}

08007fb4 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8007fb4:	b580      	push	{r7, lr}
 8007fb6:	b082      	sub	sp, #8
 8007fb8:	af00      	add	r7, sp, #0
 8007fba:	6078      	str	r0, [r7, #4]
 8007fbc:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	2221      	movs	r2, #33	; 0x21
 8007fc2:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	2220      	movs	r2, #32
 8007fc8:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	2200      	movs	r2, #0
 8007fce:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	2200      	movs	r2, #0
 8007fd4:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	2207      	movs	r2, #7
 8007fda:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8007fdc:	683b      	ldr	r3, [r7, #0]
 8007fde:	2207      	movs	r2, #7
 8007fe0:	4619      	mov	r1, r3
 8007fe2:	6878      	ldr	r0, [r7, #4]
 8007fe4:	f001 f96b 	bl	80092be <USBH_CtlReq>
 8007fe8:	4603      	mov	r3, r0
}
 8007fea:	4618      	mov	r0, r3
 8007fec:	3708      	adds	r7, #8
 8007fee:	46bd      	mov	sp, r7
 8007ff0:	bd80      	pop	{r7, pc}

08007ff2 <CDC_ProcessTransmission>:
* @brief  The function is responsible for sending data to the device
*  @param  pdev: Selected device
* @retval None
*/
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8007ff2:	b580      	push	{r7, lr}
 8007ff4:	b086      	sub	sp, #24
 8007ff6:	af02      	add	r7, sp, #8
 8007ff8:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008000:	69db      	ldr	r3, [r3, #28]
 8008002:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8008004:	2300      	movs	r3, #0
 8008006:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 800800e:	2b01      	cmp	r3, #1
 8008010:	d002      	beq.n	8008018 <CDC_ProcessTransmission+0x26>
 8008012:	2b02      	cmp	r3, #2
 8008014:	d025      	beq.n	8008062 <CDC_ProcessTransmission+0x70>
        }
      }
      break;

    default:
      break;
 8008016:	e060      	b.n	80080da <CDC_ProcessTransmission+0xe8>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800801c:	68fa      	ldr	r2, [r7, #12]
 800801e:	8b12      	ldrh	r2, [r2, #24]
 8008020:	4293      	cmp	r3, r2
 8008022:	d90c      	bls.n	800803e <CDC_ProcessTransmission+0x4c>
        USBH_BulkSendData(phost,
 8008024:	68fb      	ldr	r3, [r7, #12]
 8008026:	69d9      	ldr	r1, [r3, #28]
 8008028:	68fb      	ldr	r3, [r7, #12]
 800802a:	8b1a      	ldrh	r2, [r3, #24]
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	7b58      	ldrb	r0, [r3, #13]
 8008030:	2301      	movs	r3, #1
 8008032:	9300      	str	r3, [sp, #0]
 8008034:	4603      	mov	r3, r0
 8008036:	6878      	ldr	r0, [r7, #4]
 8008038:	f001 fb51 	bl	80096de <USBH_BulkSendData>
 800803c:	e00c      	b.n	8008058 <CDC_ProcessTransmission+0x66>
        USBH_BulkSendData(phost,
 800803e:	68fb      	ldr	r3, [r7, #12]
 8008040:	69d9      	ldr	r1, [r3, #28]
                          (uint16_t)CDC_Handle->TxDataLength,
 8008042:	68fb      	ldr	r3, [r7, #12]
 8008044:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        USBH_BulkSendData(phost,
 8008046:	b29a      	uxth	r2, r3
 8008048:	68fb      	ldr	r3, [r7, #12]
 800804a:	7b58      	ldrb	r0, [r3, #13]
 800804c:	2301      	movs	r3, #1
 800804e:	9300      	str	r3, [sp, #0]
 8008050:	4603      	mov	r3, r0
 8008052:	6878      	ldr	r0, [r7, #4]
 8008054:	f001 fb43 	bl	80096de <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	2202      	movs	r2, #2
 800805c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8008060:	e03b      	b.n	80080da <CDC_ProcessTransmission+0xe8>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8008062:	68fb      	ldr	r3, [r7, #12]
 8008064:	7b5b      	ldrb	r3, [r3, #13]
 8008066:	4619      	mov	r1, r3
 8008068:	6878      	ldr	r0, [r7, #4]
 800806a:	f001 fe57 	bl	8009d1c <USBH_LL_GetURBState>
 800806e:	4603      	mov	r3, r0
 8008070:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8008072:	7afb      	ldrb	r3, [r7, #11]
 8008074:	2b01      	cmp	r3, #1
 8008076:	d128      	bne.n	80080ca <CDC_ProcessTransmission+0xd8>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8008078:	68fb      	ldr	r3, [r7, #12]
 800807a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800807c:	68fa      	ldr	r2, [r7, #12]
 800807e:	8b12      	ldrh	r2, [r2, #24]
 8008080:	4293      	cmp	r3, r2
 8008082:	d90e      	bls.n	80080a2 <CDC_ProcessTransmission+0xb0>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008088:	68fa      	ldr	r2, [r7, #12]
 800808a:	8b12      	ldrh	r2, [r2, #24]
 800808c:	1a9a      	subs	r2, r3, r2
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8008092:	68fb      	ldr	r3, [r7, #12]
 8008094:	69db      	ldr	r3, [r3, #28]
 8008096:	68fa      	ldr	r2, [r7, #12]
 8008098:	8b12      	ldrh	r2, [r2, #24]
 800809a:	441a      	add	r2, r3
 800809c:	68fb      	ldr	r3, [r7, #12]
 800809e:	61da      	str	r2, [r3, #28]
 80080a0:	e002      	b.n	80080a8 <CDC_ProcessTransmission+0xb6>
          CDC_Handle->TxDataLength = 0U;
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	2200      	movs	r2, #0
 80080a6:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	d004      	beq.n	80080ba <CDC_ProcessTransmission+0xc8>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 80080b0:	68fb      	ldr	r3, [r7, #12]
 80080b2:	2201      	movs	r2, #1
 80080b4:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 80080b8:	e00e      	b.n	80080d8 <CDC_ProcessTransmission+0xe6>
          CDC_Handle->data_tx_state = CDC_IDLE;
 80080ba:	68fb      	ldr	r3, [r7, #12]
 80080bc:	2200      	movs	r2, #0
 80080be:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 80080c2:	6878      	ldr	r0, [r7, #4]
 80080c4:	f000 f868 	bl	8008198 <USBH_CDC_TransmitCallback>
      break;
 80080c8:	e006      	b.n	80080d8 <CDC_ProcessTransmission+0xe6>
        if (URB_Status == USBH_URB_NOTREADY)
 80080ca:	7afb      	ldrb	r3, [r7, #11]
 80080cc:	2b02      	cmp	r3, #2
 80080ce:	d103      	bne.n	80080d8 <CDC_ProcessTransmission+0xe6>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	2201      	movs	r2, #1
 80080d4:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 80080d8:	bf00      	nop
  }
}
 80080da:	bf00      	nop
 80080dc:	3710      	adds	r7, #16
 80080de:	46bd      	mov	sp, r7
 80080e0:	bd80      	pop	{r7, pc}

080080e2 <CDC_ProcessReception>:
*  @param  pdev: Selected device
* @retval None
*/

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 80080e2:	b580      	push	{r7, lr}
 80080e4:	b086      	sub	sp, #24
 80080e6:	af00      	add	r7, sp, #0
 80080e8:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80080f0:	69db      	ldr	r3, [r3, #28]
 80080f2:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80080f4:	2300      	movs	r3, #0
 80080f6:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 80080f8:	697b      	ldr	r3, [r7, #20]
 80080fa:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 80080fe:	2b03      	cmp	r3, #3
 8008100:	d002      	beq.n	8008108 <CDC_ProcessReception+0x26>
 8008102:	2b04      	cmp	r3, #4
 8008104:	d00e      	beq.n	8008124 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 8008106:	e043      	b.n	8008190 <CDC_ProcessReception+0xae>
      USBH_BulkReceiveData(phost,
 8008108:	697b      	ldr	r3, [r7, #20]
 800810a:	6a19      	ldr	r1, [r3, #32]
 800810c:	697b      	ldr	r3, [r7, #20]
 800810e:	8b5a      	ldrh	r2, [r3, #26]
 8008110:	697b      	ldr	r3, [r7, #20]
 8008112:	7b1b      	ldrb	r3, [r3, #12]
 8008114:	6878      	ldr	r0, [r7, #4]
 8008116:	f001 fb07 	bl	8009728 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 800811a:	697b      	ldr	r3, [r7, #20]
 800811c:	2204      	movs	r2, #4
 800811e:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8008122:	e035      	b.n	8008190 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8008124:	697b      	ldr	r3, [r7, #20]
 8008126:	7b1b      	ldrb	r3, [r3, #12]
 8008128:	4619      	mov	r1, r3
 800812a:	6878      	ldr	r0, [r7, #4]
 800812c:	f001 fdf6 	bl	8009d1c <USBH_LL_GetURBState>
 8008130:	4603      	mov	r3, r0
 8008132:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8008134:	7cfb      	ldrb	r3, [r7, #19]
 8008136:	2b01      	cmp	r3, #1
 8008138:	d129      	bne.n	800818e <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 800813a:	697b      	ldr	r3, [r7, #20]
 800813c:	7b1b      	ldrb	r3, [r3, #12]
 800813e:	4619      	mov	r1, r3
 8008140:	6878      	ldr	r0, [r7, #4]
 8008142:	f001 fd59 	bl	8009bf8 <USBH_LL_GetLastXferSize>
 8008146:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8008148:	697b      	ldr	r3, [r7, #20]
 800814a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800814c:	68fa      	ldr	r2, [r7, #12]
 800814e:	429a      	cmp	r2, r3
 8008150:	d016      	beq.n	8008180 <CDC_ProcessReception+0x9e>
 8008152:	697b      	ldr	r3, [r7, #20]
 8008154:	8b5b      	ldrh	r3, [r3, #26]
 8008156:	461a      	mov	r2, r3
 8008158:	68fb      	ldr	r3, [r7, #12]
 800815a:	4293      	cmp	r3, r2
 800815c:	d910      	bls.n	8008180 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 800815e:	697b      	ldr	r3, [r7, #20]
 8008160:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008162:	68fb      	ldr	r3, [r7, #12]
 8008164:	1ad2      	subs	r2, r2, r3
 8008166:	697b      	ldr	r3, [r7, #20]
 8008168:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 800816a:	697b      	ldr	r3, [r7, #20]
 800816c:	6a1a      	ldr	r2, [r3, #32]
 800816e:	68fb      	ldr	r3, [r7, #12]
 8008170:	441a      	add	r2, r3
 8008172:	697b      	ldr	r3, [r7, #20]
 8008174:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8008176:	697b      	ldr	r3, [r7, #20]
 8008178:	2203      	movs	r2, #3
 800817a:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 800817e:	e006      	b.n	800818e <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8008180:	697b      	ldr	r3, [r7, #20]
 8008182:	2200      	movs	r2, #0
 8008184:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8008188:	6878      	ldr	r0, [r7, #4]
 800818a:	f000 f80f 	bl	80081ac <USBH_CDC_ReceiveCallback>
      break;
 800818e:	bf00      	nop
  }
}
 8008190:	bf00      	nop
 8008192:	3718      	adds	r7, #24
 8008194:	46bd      	mov	sp, r7
 8008196:	bd80      	pop	{r7, pc}

08008198 <USBH_CDC_TransmitCallback>:
* @brief  The function informs user that data have been received
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8008198:	b480      	push	{r7}
 800819a:	b083      	sub	sp, #12
 800819c:	af00      	add	r7, sp, #0
 800819e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80081a0:	bf00      	nop
 80081a2:	370c      	adds	r7, #12
 80081a4:	46bd      	mov	sp, r7
 80081a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081aa:	4770      	bx	lr

080081ac <USBH_CDC_ReceiveCallback>:
* @brief  The function informs user that data have been sent
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 80081ac:	b480      	push	{r7}
 80081ae:	b083      	sub	sp, #12
 80081b0:	af00      	add	r7, sp, #0
 80081b2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80081b4:	bf00      	nop
 80081b6:	370c      	adds	r7, #12
 80081b8:	46bd      	mov	sp, r7
 80081ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081be:	4770      	bx	lr

080081c0 <USBH_CDC_LineCodingChanged>:
* @brief  The function informs user that Settings have been changed
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 80081c0:	b480      	push	{r7}
 80081c2:	b083      	sub	sp, #12
 80081c4:	af00      	add	r7, sp, #0
 80081c6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80081c8:	bf00      	nop
 80081ca:	370c      	adds	r7, #12
 80081cc:	46bd      	mov	sp, r7
 80081ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081d2:	4770      	bx	lr

080081d4 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 80081d4:	b580      	push	{r7, lr}
 80081d6:	b084      	sub	sp, #16
 80081d8:	af00      	add	r7, sp, #0
 80081da:	60f8      	str	r0, [r7, #12]
 80081dc:	60b9      	str	r1, [r7, #8]
 80081de:	4613      	mov	r3, r2
 80081e0:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 80081e2:	68fb      	ldr	r3, [r7, #12]
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	d101      	bne.n	80081ec <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 80081e8:	2302      	movs	r3, #2
 80081ea:	e029      	b.n	8008240 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	79fa      	ldrb	r2, [r7, #7]
 80081f0:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 80081f4:	68fb      	ldr	r3, [r7, #12]
 80081f6:	2200      	movs	r2, #0
 80081f8:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 80081fc:	68fb      	ldr	r3, [r7, #12]
 80081fe:	2200      	movs	r2, #0
 8008200:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 8008204:	68f8      	ldr	r0, [r7, #12]
 8008206:	f000 f81f 	bl	8008248 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800820a:	68fb      	ldr	r3, [r7, #12]
 800820c:	2200      	movs	r2, #0
 800820e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 8008212:	68fb      	ldr	r3, [r7, #12]
 8008214:	2200      	movs	r2, #0
 8008216:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800821a:	68fb      	ldr	r3, [r7, #12]
 800821c:	2200      	movs	r2, #0
 800821e:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8008222:	68fb      	ldr	r3, [r7, #12]
 8008224:	2200      	movs	r2, #0
 8008226:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 800822a:	68bb      	ldr	r3, [r7, #8]
 800822c:	2b00      	cmp	r3, #0
 800822e:	d003      	beq.n	8008238 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	68ba      	ldr	r2, [r7, #8]
 8008234:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 8008238:	68f8      	ldr	r0, [r7, #12]
 800823a:	f001 fc2b 	bl	8009a94 <USBH_LL_Init>

  return USBH_OK;
 800823e:	2300      	movs	r3, #0
}
 8008240:	4618      	mov	r0, r3
 8008242:	3710      	adds	r7, #16
 8008244:	46bd      	mov	sp, r7
 8008246:	bd80      	pop	{r7, pc}

08008248 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8008248:	b480      	push	{r7}
 800824a:	b085      	sub	sp, #20
 800824c:	af00      	add	r7, sp, #0
 800824e:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8008250:	2300      	movs	r3, #0
 8008252:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8008254:	2300      	movs	r3, #0
 8008256:	60fb      	str	r3, [r7, #12]
 8008258:	e009      	b.n	800826e <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 800825a:	687a      	ldr	r2, [r7, #4]
 800825c:	68fb      	ldr	r3, [r7, #12]
 800825e:	33e0      	adds	r3, #224	; 0xe0
 8008260:	009b      	lsls	r3, r3, #2
 8008262:	4413      	add	r3, r2
 8008264:	2200      	movs	r2, #0
 8008266:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8008268:	68fb      	ldr	r3, [r7, #12]
 800826a:	3301      	adds	r3, #1
 800826c:	60fb      	str	r3, [r7, #12]
 800826e:	68fb      	ldr	r3, [r7, #12]
 8008270:	2b0e      	cmp	r3, #14
 8008272:	d9f2      	bls.n	800825a <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8008274:	2300      	movs	r3, #0
 8008276:	60fb      	str	r3, [r7, #12]
 8008278:	e009      	b.n	800828e <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 800827a:	687a      	ldr	r2, [r7, #4]
 800827c:	68fb      	ldr	r3, [r7, #12]
 800827e:	4413      	add	r3, r2
 8008280:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8008284:	2200      	movs	r2, #0
 8008286:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8008288:	68fb      	ldr	r3, [r7, #12]
 800828a:	3301      	adds	r3, #1
 800828c:	60fb      	str	r3, [r7, #12]
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008294:	d3f1      	bcc.n	800827a <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	2200      	movs	r2, #0
 800829a:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	2200      	movs	r2, #0
 80082a0:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	2201      	movs	r2, #1
 80082a6:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	2200      	movs	r2, #0
 80082ac:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	2201      	movs	r2, #1
 80082b4:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	2240      	movs	r2, #64	; 0x40
 80082ba:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	2200      	movs	r2, #0
 80082c0:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	2200      	movs	r2, #0
 80082c6:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	2201      	movs	r2, #1
 80082ce:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	2200      	movs	r2, #0
 80082d6:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	2200      	movs	r2, #0
 80082de:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 80082e2:	2300      	movs	r3, #0
}
 80082e4:	4618      	mov	r0, r3
 80082e6:	3714      	adds	r7, #20
 80082e8:	46bd      	mov	sp, r7
 80082ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ee:	4770      	bx	lr

080082f0 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 80082f0:	b480      	push	{r7}
 80082f2:	b085      	sub	sp, #20
 80082f4:	af00      	add	r7, sp, #0
 80082f6:	6078      	str	r0, [r7, #4]
 80082f8:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 80082fa:	2300      	movs	r3, #0
 80082fc:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 80082fe:	683b      	ldr	r3, [r7, #0]
 8008300:	2b00      	cmp	r3, #0
 8008302:	d016      	beq.n	8008332 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800830a:	2b00      	cmp	r3, #0
 800830c:	d10e      	bne.n	800832c <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8008314:	1c59      	adds	r1, r3, #1
 8008316:	687a      	ldr	r2, [r7, #4]
 8008318:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 800831c:	687a      	ldr	r2, [r7, #4]
 800831e:	33de      	adds	r3, #222	; 0xde
 8008320:	6839      	ldr	r1, [r7, #0]
 8008322:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8008326:	2300      	movs	r3, #0
 8008328:	73fb      	strb	r3, [r7, #15]
 800832a:	e004      	b.n	8008336 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 800832c:	2302      	movs	r3, #2
 800832e:	73fb      	strb	r3, [r7, #15]
 8008330:	e001      	b.n	8008336 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8008332:	2302      	movs	r3, #2
 8008334:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8008336:	7bfb      	ldrb	r3, [r7, #15]
}
 8008338:	4618      	mov	r0, r3
 800833a:	3714      	adds	r7, #20
 800833c:	46bd      	mov	sp, r7
 800833e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008342:	4770      	bx	lr

08008344 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8008344:	b480      	push	{r7}
 8008346:	b085      	sub	sp, #20
 8008348:	af00      	add	r7, sp, #0
 800834a:	6078      	str	r0, [r7, #4]
 800834c:	460b      	mov	r3, r1
 800834e:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8008350:	2300      	movs	r3, #0
 8008352:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 800835a:	78fa      	ldrb	r2, [r7, #3]
 800835c:	429a      	cmp	r2, r3
 800835e:	d204      	bcs.n	800836a <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	78fa      	ldrb	r2, [r7, #3]
 8008364:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 8008368:	e001      	b.n	800836e <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 800836a:	2302      	movs	r3, #2
 800836c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800836e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008370:	4618      	mov	r0, r3
 8008372:	3714      	adds	r7, #20
 8008374:	46bd      	mov	sp, r7
 8008376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800837a:	4770      	bx	lr

0800837c <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800837c:	b480      	push	{r7}
 800837e:	b087      	sub	sp, #28
 8008380:	af00      	add	r7, sp, #0
 8008382:	6078      	str	r0, [r7, #4]
 8008384:	4608      	mov	r0, r1
 8008386:	4611      	mov	r1, r2
 8008388:	461a      	mov	r2, r3
 800838a:	4603      	mov	r3, r0
 800838c:	70fb      	strb	r3, [r7, #3]
 800838e:	460b      	mov	r3, r1
 8008390:	70bb      	strb	r3, [r7, #2]
 8008392:	4613      	mov	r3, r2
 8008394:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8008396:	2300      	movs	r3, #0
 8008398:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 800839a:	2300      	movs	r3, #0
 800839c:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	f503 734e 	add.w	r3, r3, #824	; 0x338
 80083a4:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 80083a6:	e025      	b.n	80083f4 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 80083a8:	7dfb      	ldrb	r3, [r7, #23]
 80083aa:	221a      	movs	r2, #26
 80083ac:	fb02 f303 	mul.w	r3, r2, r3
 80083b0:	3308      	adds	r3, #8
 80083b2:	68fa      	ldr	r2, [r7, #12]
 80083b4:	4413      	add	r3, r2
 80083b6:	3302      	adds	r3, #2
 80083b8:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 80083ba:	693b      	ldr	r3, [r7, #16]
 80083bc:	795b      	ldrb	r3, [r3, #5]
 80083be:	78fa      	ldrb	r2, [r7, #3]
 80083c0:	429a      	cmp	r2, r3
 80083c2:	d002      	beq.n	80083ca <USBH_FindInterface+0x4e>
 80083c4:	78fb      	ldrb	r3, [r7, #3]
 80083c6:	2bff      	cmp	r3, #255	; 0xff
 80083c8:	d111      	bne.n	80083ee <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80083ca:	693b      	ldr	r3, [r7, #16]
 80083cc:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 80083ce:	78ba      	ldrb	r2, [r7, #2]
 80083d0:	429a      	cmp	r2, r3
 80083d2:	d002      	beq.n	80083da <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80083d4:	78bb      	ldrb	r3, [r7, #2]
 80083d6:	2bff      	cmp	r3, #255	; 0xff
 80083d8:	d109      	bne.n	80083ee <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 80083da:	693b      	ldr	r3, [r7, #16]
 80083dc:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80083de:	787a      	ldrb	r2, [r7, #1]
 80083e0:	429a      	cmp	r2, r3
 80083e2:	d002      	beq.n	80083ea <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 80083e4:	787b      	ldrb	r3, [r7, #1]
 80083e6:	2bff      	cmp	r3, #255	; 0xff
 80083e8:	d101      	bne.n	80083ee <USBH_FindInterface+0x72>
    {
      return  if_ix;
 80083ea:	7dfb      	ldrb	r3, [r7, #23]
 80083ec:	e006      	b.n	80083fc <USBH_FindInterface+0x80>
    }
    if_ix++;
 80083ee:	7dfb      	ldrb	r3, [r7, #23]
 80083f0:	3301      	adds	r3, #1
 80083f2:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 80083f4:	7dfb      	ldrb	r3, [r7, #23]
 80083f6:	2b01      	cmp	r3, #1
 80083f8:	d9d6      	bls.n	80083a8 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 80083fa:	23ff      	movs	r3, #255	; 0xff
}
 80083fc:	4618      	mov	r0, r3
 80083fe:	371c      	adds	r7, #28
 8008400:	46bd      	mov	sp, r7
 8008402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008406:	4770      	bx	lr

08008408 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 8008408:	b580      	push	{r7, lr}
 800840a:	b082      	sub	sp, #8
 800840c:	af00      	add	r7, sp, #0
 800840e:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 8008410:	6878      	ldr	r0, [r7, #4]
 8008412:	f001 fb7b 	bl	8009b0c <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 8008416:	2101      	movs	r1, #1
 8008418:	6878      	ldr	r0, [r7, #4]
 800841a:	f001 fc92 	bl	8009d42 <USBH_LL_DriverVBUS>

  return USBH_OK;
 800841e:	2300      	movs	r3, #0
}
 8008420:	4618      	mov	r0, r3
 8008422:	3708      	adds	r7, #8
 8008424:	46bd      	mov	sp, r7
 8008426:	bd80      	pop	{r7, pc}

08008428 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 8008428:	b580      	push	{r7, lr}
 800842a:	b088      	sub	sp, #32
 800842c:	af04      	add	r7, sp, #16
 800842e:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8008430:	2302      	movs	r3, #2
 8008432:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8008434:	2300      	movs	r3, #0
 8008436:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 800843e:	b2db      	uxtb	r3, r3
 8008440:	2b01      	cmp	r3, #1
 8008442:	d102      	bne.n	800844a <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	2203      	movs	r2, #3
 8008448:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	781b      	ldrb	r3, [r3, #0]
 800844e:	b2db      	uxtb	r3, r3
 8008450:	2b0b      	cmp	r3, #11
 8008452:	f200 81b3 	bhi.w	80087bc <USBH_Process+0x394>
 8008456:	a201      	add	r2, pc, #4	; (adr r2, 800845c <USBH_Process+0x34>)
 8008458:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800845c:	0800848d 	.word	0x0800848d
 8008460:	080084bf 	.word	0x080084bf
 8008464:	08008527 	.word	0x08008527
 8008468:	08008757 	.word	0x08008757
 800846c:	080087bd 	.word	0x080087bd
 8008470:	080085cb 	.word	0x080085cb
 8008474:	080086fd 	.word	0x080086fd
 8008478:	08008601 	.word	0x08008601
 800847c:	08008621 	.word	0x08008621
 8008480:	08008641 	.word	0x08008641
 8008484:	0800866f 	.word	0x0800866f
 8008488:	0800873f 	.word	0x0800873f
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8008492:	b2db      	uxtb	r3, r3
 8008494:	2b00      	cmp	r3, #0
 8008496:	f000 8193 	beq.w	80087c0 <USBH_Process+0x398>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	2201      	movs	r2, #1
 800849e:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 80084a0:	20c8      	movs	r0, #200	; 0xc8
 80084a2:	f001 fc98 	bl	8009dd6 <USBH_Delay>
        USBH_LL_ResetPort(phost);
 80084a6:	6878      	ldr	r0, [r7, #4]
 80084a8:	f001 fb8b 	bl	8009bc2 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	2200      	movs	r2, #0
 80084b0:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	2200      	movs	r2, #0
 80084b8:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 80084bc:	e180      	b.n	80087c0 <USBH_Process+0x398>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 80084c4:	2b01      	cmp	r3, #1
 80084c6:	d107      	bne.n	80084d8 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	2200      	movs	r2, #0
 80084cc:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	2202      	movs	r2, #2
 80084d4:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80084d6:	e182      	b.n	80087de <USBH_Process+0x3b6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80084de:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80084e2:	d914      	bls.n	800850e <USBH_Process+0xe6>
          phost->device.RstCnt++;
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 80084ea:	3301      	adds	r3, #1
 80084ec:	b2da      	uxtb	r2, r3
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 80084fa:	2b03      	cmp	r3, #3
 80084fc:	d903      	bls.n	8008506 <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	220d      	movs	r2, #13
 8008502:	701a      	strb	r2, [r3, #0]
      break;
 8008504:	e16b      	b.n	80087de <USBH_Process+0x3b6>
            phost->gState = HOST_IDLE;
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	2200      	movs	r2, #0
 800850a:	701a      	strb	r2, [r3, #0]
      break;
 800850c:	e167      	b.n	80087de <USBH_Process+0x3b6>
          phost->Timeout += 10U;
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8008514:	f103 020a 	add.w	r2, r3, #10
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 800851e:	200a      	movs	r0, #10
 8008520:	f001 fc59 	bl	8009dd6 <USBH_Delay>
      break;
 8008524:	e15b      	b.n	80087de <USBH_Process+0x3b6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800852c:	2b00      	cmp	r3, #0
 800852e:	d005      	beq.n	800853c <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008536:	2104      	movs	r1, #4
 8008538:	6878      	ldr	r0, [r7, #4]
 800853a:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 800853c:	2064      	movs	r0, #100	; 0x64
 800853e:	f001 fc4a 	bl	8009dd6 <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 8008542:	6878      	ldr	r0, [r7, #4]
 8008544:	f001 fb18 	bl	8009b78 <USBH_LL_GetSpeed>
 8008548:	4603      	mov	r3, r0
 800854a:	461a      	mov	r2, r3
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	2205      	movs	r2, #5
 8008556:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8008558:	2100      	movs	r1, #0
 800855a:	6878      	ldr	r0, [r7, #4]
 800855c:	f001 f931 	bl	80097c2 <USBH_AllocPipe>
 8008560:	4603      	mov	r3, r0
 8008562:	461a      	mov	r2, r3
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8008568:	2180      	movs	r1, #128	; 0x80
 800856a:	6878      	ldr	r0, [r7, #4]
 800856c:	f001 f929 	bl	80097c2 <USBH_AllocPipe>
 8008570:	4603      	mov	r3, r0
 8008572:	461a      	mov	r2, r3
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	7919      	ldrb	r1, [r3, #4]
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8008588:	687a      	ldr	r2, [r7, #4]
 800858a:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800858c:	b292      	uxth	r2, r2
 800858e:	9202      	str	r2, [sp, #8]
 8008590:	2200      	movs	r2, #0
 8008592:	9201      	str	r2, [sp, #4]
 8008594:	9300      	str	r3, [sp, #0]
 8008596:	4603      	mov	r3, r0
 8008598:	2280      	movs	r2, #128	; 0x80
 800859a:	6878      	ldr	r0, [r7, #4]
 800859c:	f001 f8e2 	bl	8009764 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	7959      	ldrb	r1, [r3, #5]
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 80085b0:	687a      	ldr	r2, [r7, #4]
 80085b2:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 80085b4:	b292      	uxth	r2, r2
 80085b6:	9202      	str	r2, [sp, #8]
 80085b8:	2200      	movs	r2, #0
 80085ba:	9201      	str	r2, [sp, #4]
 80085bc:	9300      	str	r3, [sp, #0]
 80085be:	4603      	mov	r3, r0
 80085c0:	2200      	movs	r2, #0
 80085c2:	6878      	ldr	r0, [r7, #4]
 80085c4:	f001 f8ce 	bl	8009764 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80085c8:	e109      	b.n	80087de <USBH_Process+0x3b6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 80085ca:	6878      	ldr	r0, [r7, #4]
 80085cc:	f000 f90c 	bl	80087e8 <USBH_HandleEnum>
 80085d0:	4603      	mov	r3, r0
 80085d2:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 80085d4:	7bbb      	ldrb	r3, [r7, #14]
 80085d6:	b2db      	uxtb	r3, r3
 80085d8:	2b00      	cmp	r3, #0
 80085da:	f040 80f3 	bne.w	80087c4 <USBH_Process+0x39c>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	2200      	movs	r2, #0
 80085e2:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 80085ec:	2b01      	cmp	r3, #1
 80085ee:	d103      	bne.n	80085f8 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	2208      	movs	r2, #8
 80085f4:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 80085f6:	e0e5      	b.n	80087c4 <USBH_Process+0x39c>
          phost->gState = HOST_INPUT;
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	2207      	movs	r2, #7
 80085fc:	701a      	strb	r2, [r3, #0]
      break;
 80085fe:	e0e1      	b.n	80087c4 <USBH_Process+0x39c>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008606:	2b00      	cmp	r3, #0
 8008608:	f000 80de 	beq.w	80087c8 <USBH_Process+0x3a0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008612:	2101      	movs	r1, #1
 8008614:	6878      	ldr	r0, [r7, #4]
 8008616:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	2208      	movs	r2, #8
 800861c:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 800861e:	e0d3      	b.n	80087c8 <USBH_Process+0x3a0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 8008626:	b29b      	uxth	r3, r3
 8008628:	4619      	mov	r1, r3
 800862a:	6878      	ldr	r0, [r7, #4]
 800862c:	f000 fc20 	bl	8008e70 <USBH_SetCfg>
 8008630:	4603      	mov	r3, r0
 8008632:	2b00      	cmp	r3, #0
 8008634:	f040 80ca 	bne.w	80087cc <USBH_Process+0x3a4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	2209      	movs	r2, #9
 800863c:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800863e:	e0c5      	b.n	80087cc <USBH_Process+0x3a4>

    case  HOST_SET_WAKEUP_FEATURE:

      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 8008646:	f003 0320 	and.w	r3, r3, #32
 800864a:	2b00      	cmp	r3, #0
 800864c:	d00b      	beq.n	8008666 <USBH_Process+0x23e>
      {
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 800864e:	2101      	movs	r1, #1
 8008650:	6878      	ldr	r0, [r7, #4]
 8008652:	f000 fc30 	bl	8008eb6 <USBH_SetFeature>
 8008656:	4603      	mov	r3, r0
 8008658:	2b00      	cmp	r3, #0
 800865a:	f040 80b9 	bne.w	80087d0 <USBH_Process+0x3a8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	220a      	movs	r2, #10
 8008662:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8008664:	e0b4      	b.n	80087d0 <USBH_Process+0x3a8>
        phost->gState = HOST_CHECK_CLASS;
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	220a      	movs	r2, #10
 800866a:	701a      	strb	r2, [r3, #0]
      break;
 800866c:	e0b0      	b.n	80087d0 <USBH_Process+0x3a8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8008674:	2b00      	cmp	r3, #0
 8008676:	f000 80ad 	beq.w	80087d4 <USBH_Process+0x3ac>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	2200      	movs	r2, #0
 800867e:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8008682:	2300      	movs	r3, #0
 8008684:	73fb      	strb	r3, [r7, #15]
 8008686:	e016      	b.n	80086b6 <USBH_Process+0x28e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8008688:	7bfa      	ldrb	r2, [r7, #15]
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	32de      	adds	r2, #222	; 0xde
 800868e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008692:	791a      	ldrb	r2, [r3, #4]
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 800869a:	429a      	cmp	r2, r3
 800869c:	d108      	bne.n	80086b0 <USBH_Process+0x288>
          {
            phost->pActiveClass = phost->pClass[idx];
 800869e:	7bfa      	ldrb	r2, [r7, #15]
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	32de      	adds	r2, #222	; 0xde
 80086a4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 80086ae:	e005      	b.n	80086bc <USBH_Process+0x294>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 80086b0:	7bfb      	ldrb	r3, [r7, #15]
 80086b2:	3301      	adds	r3, #1
 80086b4:	73fb      	strb	r3, [r7, #15]
 80086b6:	7bfb      	ldrb	r3, [r7, #15]
 80086b8:	2b00      	cmp	r3, #0
 80086ba:	d0e5      	beq.n	8008688 <USBH_Process+0x260>
          }
        }

        if (phost->pActiveClass != NULL)
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	d016      	beq.n	80086f4 <USBH_Process+0x2cc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80086cc:	689b      	ldr	r3, [r3, #8]
 80086ce:	6878      	ldr	r0, [r7, #4]
 80086d0:	4798      	blx	r3
 80086d2:	4603      	mov	r3, r0
 80086d4:	2b00      	cmp	r3, #0
 80086d6:	d109      	bne.n	80086ec <USBH_Process+0x2c4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	2206      	movs	r2, #6
 80086dc:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80086e4:	2103      	movs	r1, #3
 80086e6:	6878      	ldr	r0, [r7, #4]
 80086e8:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80086ea:	e073      	b.n	80087d4 <USBH_Process+0x3ac>
            phost->gState = HOST_ABORT_STATE;
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	220d      	movs	r2, #13
 80086f0:	701a      	strb	r2, [r3, #0]
      break;
 80086f2:	e06f      	b.n	80087d4 <USBH_Process+0x3ac>
          phost->gState = HOST_ABORT_STATE;
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	220d      	movs	r2, #13
 80086f8:	701a      	strb	r2, [r3, #0]
      break;
 80086fa:	e06b      	b.n	80087d4 <USBH_Process+0x3ac>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008702:	2b00      	cmp	r3, #0
 8008704:	d017      	beq.n	8008736 <USBH_Process+0x30e>
      {
        status = phost->pActiveClass->Requests(phost);
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800870c:	691b      	ldr	r3, [r3, #16]
 800870e:	6878      	ldr	r0, [r7, #4]
 8008710:	4798      	blx	r3
 8008712:	4603      	mov	r3, r0
 8008714:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8008716:	7bbb      	ldrb	r3, [r7, #14]
 8008718:	b2db      	uxtb	r3, r3
 800871a:	2b00      	cmp	r3, #0
 800871c:	d103      	bne.n	8008726 <USBH_Process+0x2fe>
        {
          phost->gState = HOST_CLASS;
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	220b      	movs	r2, #11
 8008722:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8008724:	e058      	b.n	80087d8 <USBH_Process+0x3b0>
        else if (status == USBH_FAIL)
 8008726:	7bbb      	ldrb	r3, [r7, #14]
 8008728:	b2db      	uxtb	r3, r3
 800872a:	2b02      	cmp	r3, #2
 800872c:	d154      	bne.n	80087d8 <USBH_Process+0x3b0>
          phost->gState = HOST_ABORT_STATE;
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	220d      	movs	r2, #13
 8008732:	701a      	strb	r2, [r3, #0]
      break;
 8008734:	e050      	b.n	80087d8 <USBH_Process+0x3b0>
        phost->gState = HOST_ABORT_STATE;
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	220d      	movs	r2, #13
 800873a:	701a      	strb	r2, [r3, #0]
      break;
 800873c:	e04c      	b.n	80087d8 <USBH_Process+0x3b0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008744:	2b00      	cmp	r3, #0
 8008746:	d049      	beq.n	80087dc <USBH_Process+0x3b4>
      {
        phost->pActiveClass->BgndProcess(phost);
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800874e:	695b      	ldr	r3, [r3, #20]
 8008750:	6878      	ldr	r0, [r7, #4]
 8008752:	4798      	blx	r3
      }
      break;
 8008754:	e042      	b.n	80087dc <USBH_Process+0x3b4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	2200      	movs	r2, #0
 800875a:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      DeInitStateMachine(phost);
 800875e:	6878      	ldr	r0, [r7, #4]
 8008760:	f7ff fd72 	bl	8008248 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800876a:	2b00      	cmp	r3, #0
 800876c:	d009      	beq.n	8008782 <USBH_Process+0x35a>
      {
        phost->pActiveClass->DeInit(phost);
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008774:	68db      	ldr	r3, [r3, #12]
 8008776:	6878      	ldr	r0, [r7, #4]
 8008778:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	2200      	movs	r2, #0
 800877e:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008788:	2b00      	cmp	r3, #0
 800878a:	d005      	beq.n	8008798 <USBH_Process+0x370>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008792:	2105      	movs	r1, #5
 8008794:	6878      	ldr	r0, [r7, #4]
 8008796:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 800879e:	b2db      	uxtb	r3, r3
 80087a0:	2b01      	cmp	r3, #1
 80087a2:	d107      	bne.n	80087b4 <USBH_Process+0x38c>
      {
        phost->device.is_ReEnumerated = 0U;
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	2200      	movs	r2, #0
 80087a8:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        USBH_Start(phost);
 80087ac:	6878      	ldr	r0, [r7, #4]
 80087ae:	f7ff fe2b 	bl	8008408 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80087b2:	e014      	b.n	80087de <USBH_Process+0x3b6>
        USBH_LL_Start(phost);
 80087b4:	6878      	ldr	r0, [r7, #4]
 80087b6:	f001 f9a9 	bl	8009b0c <USBH_LL_Start>
      break;
 80087ba:	e010      	b.n	80087de <USBH_Process+0x3b6>

    case HOST_ABORT_STATE:
    default :
      break;
 80087bc:	bf00      	nop
 80087be:	e00e      	b.n	80087de <USBH_Process+0x3b6>
      break;
 80087c0:	bf00      	nop
 80087c2:	e00c      	b.n	80087de <USBH_Process+0x3b6>
      break;
 80087c4:	bf00      	nop
 80087c6:	e00a      	b.n	80087de <USBH_Process+0x3b6>
    break;
 80087c8:	bf00      	nop
 80087ca:	e008      	b.n	80087de <USBH_Process+0x3b6>
      break;
 80087cc:	bf00      	nop
 80087ce:	e006      	b.n	80087de <USBH_Process+0x3b6>
      break;
 80087d0:	bf00      	nop
 80087d2:	e004      	b.n	80087de <USBH_Process+0x3b6>
      break;
 80087d4:	bf00      	nop
 80087d6:	e002      	b.n	80087de <USBH_Process+0x3b6>
      break;
 80087d8:	bf00      	nop
 80087da:	e000      	b.n	80087de <USBH_Process+0x3b6>
      break;
 80087dc:	bf00      	nop
  }
  return USBH_OK;
 80087de:	2300      	movs	r3, #0
}
 80087e0:	4618      	mov	r0, r3
 80087e2:	3710      	adds	r7, #16
 80087e4:	46bd      	mov	sp, r7
 80087e6:	bd80      	pop	{r7, pc}

080087e8 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 80087e8:	b580      	push	{r7, lr}
 80087ea:	b088      	sub	sp, #32
 80087ec:	af04      	add	r7, sp, #16
 80087ee:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 80087f0:	2301      	movs	r3, #1
 80087f2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 80087f4:	2301      	movs	r3, #1
 80087f6:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	785b      	ldrb	r3, [r3, #1]
 80087fc:	2b07      	cmp	r3, #7
 80087fe:	f200 81c1 	bhi.w	8008b84 <USBH_HandleEnum+0x39c>
 8008802:	a201      	add	r2, pc, #4	; (adr r2, 8008808 <USBH_HandleEnum+0x20>)
 8008804:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008808:	08008829 	.word	0x08008829
 800880c:	080088e7 	.word	0x080088e7
 8008810:	08008951 	.word	0x08008951
 8008814:	080089df 	.word	0x080089df
 8008818:	08008a49 	.word	0x08008a49
 800881c:	08008ab9 	.word	0x08008ab9
 8008820:	08008aff 	.word	0x08008aff
 8008824:	08008b45 	.word	0x08008b45
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8008828:	2108      	movs	r1, #8
 800882a:	6878      	ldr	r0, [r7, #4]
 800882c:	f000 fa50 	bl	8008cd0 <USBH_Get_DevDesc>
 8008830:	4603      	mov	r3, r0
 8008832:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008834:	7bbb      	ldrb	r3, [r7, #14]
 8008836:	2b00      	cmp	r3, #0
 8008838:	d130      	bne.n	800889c <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	2201      	movs	r2, #1
 8008848:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	7919      	ldrb	r1, [r3, #4]
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800885a:	687a      	ldr	r2, [r7, #4]
 800885c:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800885e:	b292      	uxth	r2, r2
 8008860:	9202      	str	r2, [sp, #8]
 8008862:	2200      	movs	r2, #0
 8008864:	9201      	str	r2, [sp, #4]
 8008866:	9300      	str	r3, [sp, #0]
 8008868:	4603      	mov	r3, r0
 800886a:	2280      	movs	r2, #128	; 0x80
 800886c:	6878      	ldr	r0, [r7, #4]
 800886e:	f000 ff79 	bl	8009764 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	7959      	ldrb	r1, [r3, #5]
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8008882:	687a      	ldr	r2, [r7, #4]
 8008884:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8008886:	b292      	uxth	r2, r2
 8008888:	9202      	str	r2, [sp, #8]
 800888a:	2200      	movs	r2, #0
 800888c:	9201      	str	r2, [sp, #4]
 800888e:	9300      	str	r3, [sp, #0]
 8008890:	4603      	mov	r3, r0
 8008892:	2200      	movs	r2, #0
 8008894:	6878      	ldr	r0, [r7, #4]
 8008896:	f000 ff65 	bl	8009764 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800889a:	e175      	b.n	8008b88 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800889c:	7bbb      	ldrb	r3, [r7, #14]
 800889e:	2b03      	cmp	r3, #3
 80088a0:	f040 8172 	bne.w	8008b88 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80088aa:	3301      	adds	r3, #1
 80088ac:	b2da      	uxtb	r2, r3
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80088ba:	2b03      	cmp	r3, #3
 80088bc:	d903      	bls.n	80088c6 <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	220d      	movs	r2, #13
 80088c2:	701a      	strb	r2, [r3, #0]
      break;
 80088c4:	e160      	b.n	8008b88 <USBH_HandleEnum+0x3a0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	795b      	ldrb	r3, [r3, #5]
 80088ca:	4619      	mov	r1, r3
 80088cc:	6878      	ldr	r0, [r7, #4]
 80088ce:	f000 ff99 	bl	8009804 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	791b      	ldrb	r3, [r3, #4]
 80088d6:	4619      	mov	r1, r3
 80088d8:	6878      	ldr	r0, [r7, #4]
 80088da:	f000 ff93 	bl	8009804 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	2200      	movs	r2, #0
 80088e2:	701a      	strb	r2, [r3, #0]
      break;
 80088e4:	e150      	b.n	8008b88 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 80088e6:	2112      	movs	r1, #18
 80088e8:	6878      	ldr	r0, [r7, #4]
 80088ea:	f000 f9f1 	bl	8008cd0 <USBH_Get_DevDesc>
 80088ee:	4603      	mov	r3, r0
 80088f0:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80088f2:	7bbb      	ldrb	r3, [r7, #14]
 80088f4:	2b00      	cmp	r3, #0
 80088f6:	d103      	bne.n	8008900 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	2202      	movs	r2, #2
 80088fc:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80088fe:	e145      	b.n	8008b8c <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008900:	7bbb      	ldrb	r3, [r7, #14]
 8008902:	2b03      	cmp	r3, #3
 8008904:	f040 8142 	bne.w	8008b8c <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800890e:	3301      	adds	r3, #1
 8008910:	b2da      	uxtb	r2, r3
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800891e:	2b03      	cmp	r3, #3
 8008920:	d903      	bls.n	800892a <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	220d      	movs	r2, #13
 8008926:	701a      	strb	r2, [r3, #0]
      break;
 8008928:	e130      	b.n	8008b8c <USBH_HandleEnum+0x3a4>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	795b      	ldrb	r3, [r3, #5]
 800892e:	4619      	mov	r1, r3
 8008930:	6878      	ldr	r0, [r7, #4]
 8008932:	f000 ff67 	bl	8009804 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	791b      	ldrb	r3, [r3, #4]
 800893a:	4619      	mov	r1, r3
 800893c:	6878      	ldr	r0, [r7, #4]
 800893e:	f000 ff61 	bl	8009804 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	2200      	movs	r2, #0
 8008946:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	2200      	movs	r2, #0
 800894c:	701a      	strb	r2, [r3, #0]
      break;
 800894e:	e11d      	b.n	8008b8c <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8008950:	2101      	movs	r1, #1
 8008952:	6878      	ldr	r0, [r7, #4]
 8008954:	f000 fa68 	bl	8008e28 <USBH_SetAddress>
 8008958:	4603      	mov	r3, r0
 800895a:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800895c:	7bbb      	ldrb	r3, [r7, #14]
 800895e:	2b00      	cmp	r3, #0
 8008960:	d132      	bne.n	80089c8 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 8008962:	2002      	movs	r0, #2
 8008964:	f001 fa37 	bl	8009dd6 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	2201      	movs	r2, #1
 800896c:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	2203      	movs	r2, #3
 8008974:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	7919      	ldrb	r1, [r3, #4]
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8008986:	687a      	ldr	r2, [r7, #4]
 8008988:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800898a:	b292      	uxth	r2, r2
 800898c:	9202      	str	r2, [sp, #8]
 800898e:	2200      	movs	r2, #0
 8008990:	9201      	str	r2, [sp, #4]
 8008992:	9300      	str	r3, [sp, #0]
 8008994:	4603      	mov	r3, r0
 8008996:	2280      	movs	r2, #128	; 0x80
 8008998:	6878      	ldr	r0, [r7, #4]
 800899a:	f000 fee3 	bl	8009764 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	7959      	ldrb	r1, [r3, #5]
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 80089ae:	687a      	ldr	r2, [r7, #4]
 80089b0:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80089b2:	b292      	uxth	r2, r2
 80089b4:	9202      	str	r2, [sp, #8]
 80089b6:	2200      	movs	r2, #0
 80089b8:	9201      	str	r2, [sp, #4]
 80089ba:	9300      	str	r3, [sp, #0]
 80089bc:	4603      	mov	r3, r0
 80089be:	2200      	movs	r2, #0
 80089c0:	6878      	ldr	r0, [r7, #4]
 80089c2:	f000 fecf 	bl	8009764 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 80089c6:	e0e3      	b.n	8008b90 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80089c8:	7bbb      	ldrb	r3, [r7, #14]
 80089ca:	2b03      	cmp	r3, #3
 80089cc:	f040 80e0 	bne.w	8008b90 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	220d      	movs	r2, #13
 80089d4:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	2200      	movs	r2, #0
 80089da:	705a      	strb	r2, [r3, #1]
      break;
 80089dc:	e0d8      	b.n	8008b90 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 80089de:	2109      	movs	r1, #9
 80089e0:	6878      	ldr	r0, [r7, #4]
 80089e2:	f000 f99d 	bl	8008d20 <USBH_Get_CfgDesc>
 80089e6:	4603      	mov	r3, r0
 80089e8:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80089ea:	7bbb      	ldrb	r3, [r7, #14]
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	d103      	bne.n	80089f8 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	2204      	movs	r2, #4
 80089f4:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80089f6:	e0cd      	b.n	8008b94 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80089f8:	7bbb      	ldrb	r3, [r7, #14]
 80089fa:	2b03      	cmp	r3, #3
 80089fc:	f040 80ca 	bne.w	8008b94 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8008a06:	3301      	adds	r3, #1
 8008a08:	b2da      	uxtb	r2, r3
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8008a16:	2b03      	cmp	r3, #3
 8008a18:	d903      	bls.n	8008a22 <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	220d      	movs	r2, #13
 8008a1e:	701a      	strb	r2, [r3, #0]
      break;
 8008a20:	e0b8      	b.n	8008b94 <USBH_HandleEnum+0x3ac>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	795b      	ldrb	r3, [r3, #5]
 8008a26:	4619      	mov	r1, r3
 8008a28:	6878      	ldr	r0, [r7, #4]
 8008a2a:	f000 feeb 	bl	8009804 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	791b      	ldrb	r3, [r3, #4]
 8008a32:	4619      	mov	r1, r3
 8008a34:	6878      	ldr	r0, [r7, #4]
 8008a36:	f000 fee5 	bl	8009804 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	2200      	movs	r2, #0
 8008a3e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	2200      	movs	r2, #0
 8008a44:	701a      	strb	r2, [r3, #0]
      break;
 8008a46:	e0a5      	b.n	8008b94 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 8008a4e:	4619      	mov	r1, r3
 8008a50:	6878      	ldr	r0, [r7, #4]
 8008a52:	f000 f965 	bl	8008d20 <USBH_Get_CfgDesc>
 8008a56:	4603      	mov	r3, r0
 8008a58:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008a5a:	7bbb      	ldrb	r3, [r7, #14]
 8008a5c:	2b00      	cmp	r3, #0
 8008a5e:	d103      	bne.n	8008a68 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	2205      	movs	r2, #5
 8008a64:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8008a66:	e097      	b.n	8008b98 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008a68:	7bbb      	ldrb	r3, [r7, #14]
 8008a6a:	2b03      	cmp	r3, #3
 8008a6c:	f040 8094 	bne.w	8008b98 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8008a76:	3301      	adds	r3, #1
 8008a78:	b2da      	uxtb	r2, r3
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8008a86:	2b03      	cmp	r3, #3
 8008a88:	d903      	bls.n	8008a92 <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	220d      	movs	r2, #13
 8008a8e:	701a      	strb	r2, [r3, #0]
      break;
 8008a90:	e082      	b.n	8008b98 <USBH_HandleEnum+0x3b0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	795b      	ldrb	r3, [r3, #5]
 8008a96:	4619      	mov	r1, r3
 8008a98:	6878      	ldr	r0, [r7, #4]
 8008a9a:	f000 feb3 	bl	8009804 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	791b      	ldrb	r3, [r3, #4]
 8008aa2:	4619      	mov	r1, r3
 8008aa4:	6878      	ldr	r0, [r7, #4]
 8008aa6:	f000 fead 	bl	8009804 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	2200      	movs	r2, #0
 8008aae:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	2200      	movs	r2, #0
 8008ab4:	701a      	strb	r2, [r3, #0]
      break;
 8008ab6:	e06f      	b.n	8008b98 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 8008abe:	2b00      	cmp	r3, #0
 8008ac0:	d019      	beq.n	8008af6 <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8008ace:	23ff      	movs	r3, #255	; 0xff
 8008ad0:	6878      	ldr	r0, [r7, #4]
 8008ad2:	f000 f949 	bl	8008d68 <USBH_Get_StringDesc>
 8008ad6:	4603      	mov	r3, r0
 8008ad8:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8008ada:	7bbb      	ldrb	r3, [r7, #14]
 8008adc:	2b00      	cmp	r3, #0
 8008ade:	d103      	bne.n	8008ae8 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	2206      	movs	r2, #6
 8008ae4:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8008ae6:	e059      	b.n	8008b9c <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008ae8:	7bbb      	ldrb	r3, [r7, #14]
 8008aea:	2b03      	cmp	r3, #3
 8008aec:	d156      	bne.n	8008b9c <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	2206      	movs	r2, #6
 8008af2:	705a      	strb	r2, [r3, #1]
      break;
 8008af4:	e052      	b.n	8008b9c <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	2206      	movs	r2, #6
 8008afa:	705a      	strb	r2, [r3, #1]
      break;
 8008afc:	e04e      	b.n	8008b9c <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 8008b04:	2b00      	cmp	r3, #0
 8008b06:	d019      	beq.n	8008b3c <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8008b14:	23ff      	movs	r3, #255	; 0xff
 8008b16:	6878      	ldr	r0, [r7, #4]
 8008b18:	f000 f926 	bl	8008d68 <USBH_Get_StringDesc>
 8008b1c:	4603      	mov	r3, r0
 8008b1e:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8008b20:	7bbb      	ldrb	r3, [r7, #14]
 8008b22:	2b00      	cmp	r3, #0
 8008b24:	d103      	bne.n	8008b2e <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	2207      	movs	r2, #7
 8008b2a:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8008b2c:	e038      	b.n	8008ba0 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008b2e:	7bbb      	ldrb	r3, [r7, #14]
 8008b30:	2b03      	cmp	r3, #3
 8008b32:	d135      	bne.n	8008ba0 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	2207      	movs	r2, #7
 8008b38:	705a      	strb	r2, [r3, #1]
      break;
 8008b3a:	e031      	b.n	8008ba0 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	2207      	movs	r2, #7
 8008b40:	705a      	strb	r2, [r3, #1]
      break;
 8008b42:	e02d      	b.n	8008ba0 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 8008b4a:	2b00      	cmp	r3, #0
 8008b4c:	d017      	beq.n	8008b7e <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8008b5a:	23ff      	movs	r3, #255	; 0xff
 8008b5c:	6878      	ldr	r0, [r7, #4]
 8008b5e:	f000 f903 	bl	8008d68 <USBH_Get_StringDesc>
 8008b62:	4603      	mov	r3, r0
 8008b64:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8008b66:	7bbb      	ldrb	r3, [r7, #14]
 8008b68:	2b00      	cmp	r3, #0
 8008b6a:	d102      	bne.n	8008b72 <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8008b6c:	2300      	movs	r3, #0
 8008b6e:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8008b70:	e018      	b.n	8008ba4 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008b72:	7bbb      	ldrb	r3, [r7, #14]
 8008b74:	2b03      	cmp	r3, #3
 8008b76:	d115      	bne.n	8008ba4 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 8008b78:	2300      	movs	r3, #0
 8008b7a:	73fb      	strb	r3, [r7, #15]
      break;
 8008b7c:	e012      	b.n	8008ba4 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 8008b7e:	2300      	movs	r3, #0
 8008b80:	73fb      	strb	r3, [r7, #15]
      break;
 8008b82:	e00f      	b.n	8008ba4 <USBH_HandleEnum+0x3bc>

    default:
      break;
 8008b84:	bf00      	nop
 8008b86:	e00e      	b.n	8008ba6 <USBH_HandleEnum+0x3be>
      break;
 8008b88:	bf00      	nop
 8008b8a:	e00c      	b.n	8008ba6 <USBH_HandleEnum+0x3be>
      break;
 8008b8c:	bf00      	nop
 8008b8e:	e00a      	b.n	8008ba6 <USBH_HandleEnum+0x3be>
      break;
 8008b90:	bf00      	nop
 8008b92:	e008      	b.n	8008ba6 <USBH_HandleEnum+0x3be>
      break;
 8008b94:	bf00      	nop
 8008b96:	e006      	b.n	8008ba6 <USBH_HandleEnum+0x3be>
      break;
 8008b98:	bf00      	nop
 8008b9a:	e004      	b.n	8008ba6 <USBH_HandleEnum+0x3be>
      break;
 8008b9c:	bf00      	nop
 8008b9e:	e002      	b.n	8008ba6 <USBH_HandleEnum+0x3be>
      break;
 8008ba0:	bf00      	nop
 8008ba2:	e000      	b.n	8008ba6 <USBH_HandleEnum+0x3be>
      break;
 8008ba4:	bf00      	nop
  }
  return Status;
 8008ba6:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ba8:	4618      	mov	r0, r3
 8008baa:	3710      	adds	r7, #16
 8008bac:	46bd      	mov	sp, r7
 8008bae:	bd80      	pop	{r7, pc}

08008bb0 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8008bb0:	b480      	push	{r7}
 8008bb2:	b083      	sub	sp, #12
 8008bb4:	af00      	add	r7, sp, #0
 8008bb6:	6078      	str	r0, [r7, #4]
 8008bb8:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	683a      	ldr	r2, [r7, #0]
 8008bbe:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 8008bc2:	bf00      	nop
 8008bc4:	370c      	adds	r7, #12
 8008bc6:	46bd      	mov	sp, r7
 8008bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bcc:	4770      	bx	lr

08008bce <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8008bce:	b580      	push	{r7, lr}
 8008bd0:	b082      	sub	sp, #8
 8008bd2:	af00      	add	r7, sp, #0
 8008bd4:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008bdc:	1c5a      	adds	r2, r3, #1
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 8008be4:	6878      	ldr	r0, [r7, #4]
 8008be6:	f000 f804 	bl	8008bf2 <USBH_HandleSof>
}
 8008bea:	bf00      	nop
 8008bec:	3708      	adds	r7, #8
 8008bee:	46bd      	mov	sp, r7
 8008bf0:	bd80      	pop	{r7, pc}

08008bf2 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8008bf2:	b580      	push	{r7, lr}
 8008bf4:	b082      	sub	sp, #8
 8008bf6:	af00      	add	r7, sp, #0
 8008bf8:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	781b      	ldrb	r3, [r3, #0]
 8008bfe:	b2db      	uxtb	r3, r3
 8008c00:	2b0b      	cmp	r3, #11
 8008c02:	d10a      	bne.n	8008c1a <USBH_HandleSof+0x28>
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008c0a:	2b00      	cmp	r3, #0
 8008c0c:	d005      	beq.n	8008c1a <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008c14:	699b      	ldr	r3, [r3, #24]
 8008c16:	6878      	ldr	r0, [r7, #4]
 8008c18:	4798      	blx	r3
  }
}
 8008c1a:	bf00      	nop
 8008c1c:	3708      	adds	r7, #8
 8008c1e:	46bd      	mov	sp, r7
 8008c20:	bd80      	pop	{r7, pc}

08008c22 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8008c22:	b480      	push	{r7}
 8008c24:	b083      	sub	sp, #12
 8008c26:	af00      	add	r7, sp, #0
 8008c28:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	2201      	movs	r2, #1
 8008c2e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 8008c32:	bf00      	nop
}
 8008c34:	370c      	adds	r7, #12
 8008c36:	46bd      	mov	sp, r7
 8008c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c3c:	4770      	bx	lr

08008c3e <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8008c3e:	b480      	push	{r7}
 8008c40:	b083      	sub	sp, #12
 8008c42:	af00      	add	r7, sp, #0
 8008c44:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	2200      	movs	r2, #0
 8008c4a:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 8008c4e:	bf00      	nop
}
 8008c50:	370c      	adds	r7, #12
 8008c52:	46bd      	mov	sp, r7
 8008c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c58:	4770      	bx	lr

08008c5a <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8008c5a:	b480      	push	{r7}
 8008c5c:	b083      	sub	sp, #12
 8008c5e:	af00      	add	r7, sp, #0
 8008c60:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	2201      	movs	r2, #1
 8008c66:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	2200      	movs	r2, #0
 8008c6e:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	2200      	movs	r2, #0
 8008c76:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8008c7a:	2300      	movs	r3, #0
}
 8008c7c:	4618      	mov	r0, r3
 8008c7e:	370c      	adds	r7, #12
 8008c80:	46bd      	mov	sp, r7
 8008c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c86:	4770      	bx	lr

08008c88 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8008c88:	b580      	push	{r7, lr}
 8008c8a:	b082      	sub	sp, #8
 8008c8c:	af00      	add	r7, sp, #0
 8008c8e:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	2201      	movs	r2, #1
 8008c94:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	2200      	movs	r2, #0
 8008c9c:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	2200      	movs	r2, #0
 8008ca4:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 8008ca8:	6878      	ldr	r0, [r7, #4]
 8008caa:	f000 ff4a 	bl	8009b42 <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	791b      	ldrb	r3, [r3, #4]
 8008cb2:	4619      	mov	r1, r3
 8008cb4:	6878      	ldr	r0, [r7, #4]
 8008cb6:	f000 fda5 	bl	8009804 <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	795b      	ldrb	r3, [r3, #5]
 8008cbe:	4619      	mov	r1, r3
 8008cc0:	6878      	ldr	r0, [r7, #4]
 8008cc2:	f000 fd9f 	bl	8009804 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8008cc6:	2300      	movs	r3, #0
}
 8008cc8:	4618      	mov	r0, r3
 8008cca:	3708      	adds	r7, #8
 8008ccc:	46bd      	mov	sp, r7
 8008cce:	bd80      	pop	{r7, pc}

08008cd0 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 8008cd0:	b580      	push	{r7, lr}
 8008cd2:	b086      	sub	sp, #24
 8008cd4:	af02      	add	r7, sp, #8
 8008cd6:	6078      	str	r0, [r7, #4]
 8008cd8:	460b      	mov	r3, r1
 8008cda:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_DEVICE, phost->device.Data,
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 8008ce2:	78fb      	ldrb	r3, [r7, #3]
 8008ce4:	b29b      	uxth	r3, r3
 8008ce6:	9300      	str	r3, [sp, #0]
 8008ce8:	4613      	mov	r3, r2
 8008cea:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008cee:	2100      	movs	r1, #0
 8008cf0:	6878      	ldr	r0, [r7, #4]
 8008cf2:	f000 f864 	bl	8008dbe <USBH_GetDescriptor>
 8008cf6:	4603      	mov	r3, r0
 8008cf8:	73fb      	strb	r3, [r7, #15]
 8008cfa:	7bfb      	ldrb	r3, [r7, #15]
 8008cfc:	2b00      	cmp	r3, #0
 8008cfe:	d10a      	bne.n	8008d16 <USBH_Get_DevDesc+0x46>
                                   (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	f203 3026 	addw	r0, r3, #806	; 0x326
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8008d0c:	78fa      	ldrb	r2, [r7, #3]
 8008d0e:	b292      	uxth	r2, r2
 8008d10:	4619      	mov	r1, r3
 8008d12:	f000 f918 	bl	8008f46 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 8008d16:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d18:	4618      	mov	r0, r3
 8008d1a:	3710      	adds	r7, #16
 8008d1c:	46bd      	mov	sp, r7
 8008d1e:	bd80      	pop	{r7, pc}

08008d20 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 8008d20:	b580      	push	{r7, lr}
 8008d22:	b086      	sub	sp, #24
 8008d24:	af02      	add	r7, sp, #8
 8008d26:	6078      	str	r0, [r7, #4]
 8008d28:	460b      	mov	r3, r1
 8008d2a:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;;
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	331c      	adds	r3, #28
 8008d30:	60fb      	str	r3, [r7, #12]

  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8008d32:	887b      	ldrh	r3, [r7, #2]
 8008d34:	9300      	str	r3, [sp, #0]
 8008d36:	68fb      	ldr	r3, [r7, #12]
 8008d38:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008d3c:	2100      	movs	r1, #0
 8008d3e:	6878      	ldr	r0, [r7, #4]
 8008d40:	f000 f83d 	bl	8008dbe <USBH_GetDescriptor>
 8008d44:	4603      	mov	r3, r0
 8008d46:	72fb      	strb	r3, [r7, #11]
 8008d48:	7afb      	ldrb	r3, [r7, #11]
 8008d4a:	2b00      	cmp	r3, #0
 8008d4c:	d107      	bne.n	8008d5e <USBH_Get_CfgDesc+0x3e>
                                   USB_DESC_CONFIGURATION, pData, length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8008d54:	887a      	ldrh	r2, [r7, #2]
 8008d56:	68f9      	ldr	r1, [r7, #12]
 8008d58:	4618      	mov	r0, r3
 8008d5a:	f000 f964 	bl	8009026 <USBH_ParseCfgDesc>
  }

  return status;
 8008d5e:	7afb      	ldrb	r3, [r7, #11]
}
 8008d60:	4618      	mov	r0, r3
 8008d62:	3710      	adds	r7, #16
 8008d64:	46bd      	mov	sp, r7
 8008d66:	bd80      	pop	{r7, pc}

08008d68 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 8008d68:	b580      	push	{r7, lr}
 8008d6a:	b088      	sub	sp, #32
 8008d6c:	af02      	add	r7, sp, #8
 8008d6e:	60f8      	str	r0, [r7, #12]
 8008d70:	607a      	str	r2, [r7, #4]
 8008d72:	461a      	mov	r2, r3
 8008d74:	460b      	mov	r3, r1
 8008d76:	72fb      	strb	r3, [r7, #11]
 8008d78:	4613      	mov	r3, r2
 8008d7a:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 8008d7c:	7afb      	ldrb	r3, [r7, #11]
 8008d7e:	b29b      	uxth	r3, r3
 8008d80:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8008d84:	b29a      	uxth	r2, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,
                                   phost->device.Data, length)) == USBH_OK)
 8008d86:	68fb      	ldr	r3, [r7, #12]
 8008d88:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 8008d8c:	893b      	ldrh	r3, [r7, #8]
 8008d8e:	9300      	str	r3, [sp, #0]
 8008d90:	460b      	mov	r3, r1
 8008d92:	2100      	movs	r1, #0
 8008d94:	68f8      	ldr	r0, [r7, #12]
 8008d96:	f000 f812 	bl	8008dbe <USBH_GetDescriptor>
 8008d9a:	4603      	mov	r3, r0
 8008d9c:	75fb      	strb	r3, [r7, #23]
 8008d9e:	7dfb      	ldrb	r3, [r7, #23]
 8008da0:	2b00      	cmp	r3, #0
 8008da2:	d107      	bne.n	8008db4 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8008da4:	68fb      	ldr	r3, [r7, #12]
 8008da6:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8008daa:	893a      	ldrh	r2, [r7, #8]
 8008dac:	6879      	ldr	r1, [r7, #4]
 8008dae:	4618      	mov	r0, r3
 8008db0:	f000 fa37 	bl	8009222 <USBH_ParseStringDesc>
  }

  return status;
 8008db4:	7dfb      	ldrb	r3, [r7, #23]
}
 8008db6:	4618      	mov	r0, r3
 8008db8:	3718      	adds	r7, #24
 8008dba:	46bd      	mov	sp, r7
 8008dbc:	bd80      	pop	{r7, pc}

08008dbe <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 8008dbe:	b580      	push	{r7, lr}
 8008dc0:	b084      	sub	sp, #16
 8008dc2:	af00      	add	r7, sp, #0
 8008dc4:	60f8      	str	r0, [r7, #12]
 8008dc6:	607b      	str	r3, [r7, #4]
 8008dc8:	460b      	mov	r3, r1
 8008dca:	72fb      	strb	r3, [r7, #11]
 8008dcc:	4613      	mov	r3, r2
 8008dce:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8008dd0:	68fb      	ldr	r3, [r7, #12]
 8008dd2:	789b      	ldrb	r3, [r3, #2]
 8008dd4:	2b01      	cmp	r3, #1
 8008dd6:	d11c      	bne.n	8008e12 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8008dd8:	7afb      	ldrb	r3, [r7, #11]
 8008dda:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008dde:	b2da      	uxtb	r2, r3
 8008de0:	68fb      	ldr	r3, [r7, #12]
 8008de2:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8008de4:	68fb      	ldr	r3, [r7, #12]
 8008de6:	2206      	movs	r2, #6
 8008de8:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8008dea:	68fb      	ldr	r3, [r7, #12]
 8008dec:	893a      	ldrh	r2, [r7, #8]
 8008dee:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8008df0:	893b      	ldrh	r3, [r7, #8]
 8008df2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8008df6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008dfa:	d104      	bne.n	8008e06 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8008dfc:	68fb      	ldr	r3, [r7, #12]
 8008dfe:	f240 4209 	movw	r2, #1033	; 0x409
 8008e02:	829a      	strh	r2, [r3, #20]
 8008e04:	e002      	b.n	8008e0c <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8008e06:	68fb      	ldr	r3, [r7, #12]
 8008e08:	2200      	movs	r2, #0
 8008e0a:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8008e0c:	68fb      	ldr	r3, [r7, #12]
 8008e0e:	8b3a      	ldrh	r2, [r7, #24]
 8008e10:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8008e12:	8b3b      	ldrh	r3, [r7, #24]
 8008e14:	461a      	mov	r2, r3
 8008e16:	6879      	ldr	r1, [r7, #4]
 8008e18:	68f8      	ldr	r0, [r7, #12]
 8008e1a:	f000 fa50 	bl	80092be <USBH_CtlReq>
 8008e1e:	4603      	mov	r3, r0
}
 8008e20:	4618      	mov	r0, r3
 8008e22:	3710      	adds	r7, #16
 8008e24:	46bd      	mov	sp, r7
 8008e26:	bd80      	pop	{r7, pc}

08008e28 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8008e28:	b580      	push	{r7, lr}
 8008e2a:	b082      	sub	sp, #8
 8008e2c:	af00      	add	r7, sp, #0
 8008e2e:	6078      	str	r0, [r7, #4]
 8008e30:	460b      	mov	r3, r1
 8008e32:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	789b      	ldrb	r3, [r3, #2]
 8008e38:	2b01      	cmp	r3, #1
 8008e3a:	d10f      	bne.n	8008e5c <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	2200      	movs	r2, #0
 8008e40:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	2205      	movs	r2, #5
 8008e46:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8008e48:	78fb      	ldrb	r3, [r7, #3]
 8008e4a:	b29a      	uxth	r2, r3
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	2200      	movs	r2, #0
 8008e54:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	2200      	movs	r2, #0
 8008e5a:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8008e5c:	2200      	movs	r2, #0
 8008e5e:	2100      	movs	r1, #0
 8008e60:	6878      	ldr	r0, [r7, #4]
 8008e62:	f000 fa2c 	bl	80092be <USBH_CtlReq>
 8008e66:	4603      	mov	r3, r0
}
 8008e68:	4618      	mov	r0, r3
 8008e6a:	3708      	adds	r7, #8
 8008e6c:	46bd      	mov	sp, r7
 8008e6e:	bd80      	pop	{r7, pc}

08008e70 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8008e70:	b580      	push	{r7, lr}
 8008e72:	b082      	sub	sp, #8
 8008e74:	af00      	add	r7, sp, #0
 8008e76:	6078      	str	r0, [r7, #4]
 8008e78:	460b      	mov	r3, r1
 8008e7a:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	789b      	ldrb	r3, [r3, #2]
 8008e80:	2b01      	cmp	r3, #1
 8008e82:	d10e      	bne.n	8008ea2 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	2200      	movs	r2, #0
 8008e88:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	2209      	movs	r2, #9
 8008e8e:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	887a      	ldrh	r2, [r7, #2]
 8008e94:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	2200      	movs	r2, #0
 8008e9a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	2200      	movs	r2, #0
 8008ea0:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8008ea2:	2200      	movs	r2, #0
 8008ea4:	2100      	movs	r1, #0
 8008ea6:	6878      	ldr	r0, [r7, #4]
 8008ea8:	f000 fa09 	bl	80092be <USBH_CtlReq>
 8008eac:	4603      	mov	r3, r0
}
 8008eae:	4618      	mov	r0, r3
 8008eb0:	3708      	adds	r7, #8
 8008eb2:	46bd      	mov	sp, r7
 8008eb4:	bd80      	pop	{r7, pc}

08008eb6 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8008eb6:	b580      	push	{r7, lr}
 8008eb8:	b082      	sub	sp, #8
 8008eba:	af00      	add	r7, sp, #0
 8008ebc:	6078      	str	r0, [r7, #4]
 8008ebe:	460b      	mov	r3, r1
 8008ec0:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	789b      	ldrb	r3, [r3, #2]
 8008ec6:	2b01      	cmp	r3, #1
 8008ec8:	d10f      	bne.n	8008eea <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	2200      	movs	r2, #0
 8008ece:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	2203      	movs	r2, #3
 8008ed4:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8008ed6:	78fb      	ldrb	r3, [r7, #3]
 8008ed8:	b29a      	uxth	r2, r3
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	2200      	movs	r2, #0
 8008ee2:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	2200      	movs	r2, #0
 8008ee8:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8008eea:	2200      	movs	r2, #0
 8008eec:	2100      	movs	r1, #0
 8008eee:	6878      	ldr	r0, [r7, #4]
 8008ef0:	f000 f9e5 	bl	80092be <USBH_CtlReq>
 8008ef4:	4603      	mov	r3, r0
}
 8008ef6:	4618      	mov	r0, r3
 8008ef8:	3708      	adds	r7, #8
 8008efa:	46bd      	mov	sp, r7
 8008efc:	bd80      	pop	{r7, pc}

08008efe <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8008efe:	b580      	push	{r7, lr}
 8008f00:	b082      	sub	sp, #8
 8008f02:	af00      	add	r7, sp, #0
 8008f04:	6078      	str	r0, [r7, #4]
 8008f06:	460b      	mov	r3, r1
 8008f08:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	789b      	ldrb	r3, [r3, #2]
 8008f0e:	2b01      	cmp	r3, #1
 8008f10:	d10f      	bne.n	8008f32 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	2202      	movs	r2, #2
 8008f16:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	2201      	movs	r2, #1
 8008f1c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	2200      	movs	r2, #0
 8008f22:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8008f24:	78fb      	ldrb	r3, [r7, #3]
 8008f26:	b29a      	uxth	r2, r3
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	2200      	movs	r2, #0
 8008f30:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 8008f32:	2200      	movs	r2, #0
 8008f34:	2100      	movs	r1, #0
 8008f36:	6878      	ldr	r0, [r7, #4]
 8008f38:	f000 f9c1 	bl	80092be <USBH_CtlReq>
 8008f3c:	4603      	mov	r3, r0
}
 8008f3e:	4618      	mov	r0, r3
 8008f40:	3708      	adds	r7, #8
 8008f42:	46bd      	mov	sp, r7
 8008f44:	bd80      	pop	{r7, pc}

08008f46 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 8008f46:	b480      	push	{r7}
 8008f48:	b085      	sub	sp, #20
 8008f4a:	af00      	add	r7, sp, #0
 8008f4c:	60f8      	str	r0, [r7, #12]
 8008f4e:	60b9      	str	r1, [r7, #8]
 8008f50:	4613      	mov	r3, r2
 8008f52:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 8008f54:	68bb      	ldr	r3, [r7, #8]
 8008f56:	781a      	ldrb	r2, [r3, #0]
 8008f58:	68fb      	ldr	r3, [r7, #12]
 8008f5a:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 8008f5c:	68bb      	ldr	r3, [r7, #8]
 8008f5e:	785a      	ldrb	r2, [r3, #1]
 8008f60:	68fb      	ldr	r3, [r7, #12]
 8008f62:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 8008f64:	68bb      	ldr	r3, [r7, #8]
 8008f66:	3302      	adds	r3, #2
 8008f68:	781b      	ldrb	r3, [r3, #0]
 8008f6a:	b29a      	uxth	r2, r3
 8008f6c:	68bb      	ldr	r3, [r7, #8]
 8008f6e:	3303      	adds	r3, #3
 8008f70:	781b      	ldrb	r3, [r3, #0]
 8008f72:	b29b      	uxth	r3, r3
 8008f74:	021b      	lsls	r3, r3, #8
 8008f76:	b29b      	uxth	r3, r3
 8008f78:	4313      	orrs	r3, r2
 8008f7a:	b29a      	uxth	r2, r3
 8008f7c:	68fb      	ldr	r3, [r7, #12]
 8008f7e:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 8008f80:	68bb      	ldr	r3, [r7, #8]
 8008f82:	791a      	ldrb	r2, [r3, #4]
 8008f84:	68fb      	ldr	r3, [r7, #12]
 8008f86:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 8008f88:	68bb      	ldr	r3, [r7, #8]
 8008f8a:	795a      	ldrb	r2, [r3, #5]
 8008f8c:	68fb      	ldr	r3, [r7, #12]
 8008f8e:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 8008f90:	68bb      	ldr	r3, [r7, #8]
 8008f92:	799a      	ldrb	r2, [r3, #6]
 8008f94:	68fb      	ldr	r3, [r7, #12]
 8008f96:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 8008f98:	68bb      	ldr	r3, [r7, #8]
 8008f9a:	79da      	ldrb	r2, [r3, #7]
 8008f9c:	68fb      	ldr	r3, [r7, #12]
 8008f9e:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 8008fa0:	88fb      	ldrh	r3, [r7, #6]
 8008fa2:	2b08      	cmp	r3, #8
 8008fa4:	d939      	bls.n	800901a <USBH_ParseDevDesc+0xd4>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 8008fa6:	68bb      	ldr	r3, [r7, #8]
 8008fa8:	3308      	adds	r3, #8
 8008faa:	781b      	ldrb	r3, [r3, #0]
 8008fac:	b29a      	uxth	r2, r3
 8008fae:	68bb      	ldr	r3, [r7, #8]
 8008fb0:	3309      	adds	r3, #9
 8008fb2:	781b      	ldrb	r3, [r3, #0]
 8008fb4:	b29b      	uxth	r3, r3
 8008fb6:	021b      	lsls	r3, r3, #8
 8008fb8:	b29b      	uxth	r3, r3
 8008fba:	4313      	orrs	r3, r2
 8008fbc:	b29a      	uxth	r2, r3
 8008fbe:	68fb      	ldr	r3, [r7, #12]
 8008fc0:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 8008fc2:	68bb      	ldr	r3, [r7, #8]
 8008fc4:	330a      	adds	r3, #10
 8008fc6:	781b      	ldrb	r3, [r3, #0]
 8008fc8:	b29a      	uxth	r2, r3
 8008fca:	68bb      	ldr	r3, [r7, #8]
 8008fcc:	330b      	adds	r3, #11
 8008fce:	781b      	ldrb	r3, [r3, #0]
 8008fd0:	b29b      	uxth	r3, r3
 8008fd2:	021b      	lsls	r3, r3, #8
 8008fd4:	b29b      	uxth	r3, r3
 8008fd6:	4313      	orrs	r3, r2
 8008fd8:	b29a      	uxth	r2, r3
 8008fda:	68fb      	ldr	r3, [r7, #12]
 8008fdc:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 8008fde:	68bb      	ldr	r3, [r7, #8]
 8008fe0:	330c      	adds	r3, #12
 8008fe2:	781b      	ldrb	r3, [r3, #0]
 8008fe4:	b29a      	uxth	r2, r3
 8008fe6:	68bb      	ldr	r3, [r7, #8]
 8008fe8:	330d      	adds	r3, #13
 8008fea:	781b      	ldrb	r3, [r3, #0]
 8008fec:	b29b      	uxth	r3, r3
 8008fee:	021b      	lsls	r3, r3, #8
 8008ff0:	b29b      	uxth	r3, r3
 8008ff2:	4313      	orrs	r3, r2
 8008ff4:	b29a      	uxth	r2, r3
 8008ff6:	68fb      	ldr	r3, [r7, #12]
 8008ff8:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 8008ffa:	68bb      	ldr	r3, [r7, #8]
 8008ffc:	7b9a      	ldrb	r2, [r3, #14]
 8008ffe:	68fb      	ldr	r3, [r7, #12]
 8009000:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 8009002:	68bb      	ldr	r3, [r7, #8]
 8009004:	7bda      	ldrb	r2, [r3, #15]
 8009006:	68fb      	ldr	r3, [r7, #12]
 8009008:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 800900a:	68bb      	ldr	r3, [r7, #8]
 800900c:	7c1a      	ldrb	r2, [r3, #16]
 800900e:	68fb      	ldr	r3, [r7, #12]
 8009010:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 8009012:	68bb      	ldr	r3, [r7, #8]
 8009014:	7c5a      	ldrb	r2, [r3, #17]
 8009016:	68fb      	ldr	r3, [r7, #12]
 8009018:	745a      	strb	r2, [r3, #17]
  }
}
 800901a:	bf00      	nop
 800901c:	3714      	adds	r7, #20
 800901e:	46bd      	mov	sp, r7
 8009020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009024:	4770      	bx	lr

08009026 <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc(USBH_CfgDescTypeDef *cfg_desc, uint8_t *buf,
                              uint16_t length)
{
 8009026:	b580      	push	{r7, lr}
 8009028:	b08a      	sub	sp, #40	; 0x28
 800902a:	af00      	add	r7, sp, #0
 800902c:	60f8      	str	r0, [r7, #12]
 800902e:	60b9      	str	r1, [r7, #8]
 8009030:	4613      	mov	r3, r2
 8009032:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 8009034:	68bb      	ldr	r3, [r7, #8]
 8009036:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8009038:	2300      	movs	r3, #0
 800903a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 800903e:	2300      	movs	r3, #0
 8009040:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 8009044:	68bb      	ldr	r3, [r7, #8]
 8009046:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 8009048:	68bb      	ldr	r3, [r7, #8]
 800904a:	781a      	ldrb	r2, [r3, #0]
 800904c:	68fb      	ldr	r3, [r7, #12]
 800904e:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 8009050:	68bb      	ldr	r3, [r7, #8]
 8009052:	785a      	ldrb	r2, [r3, #1]
 8009054:	68fb      	ldr	r3, [r7, #12]
 8009056:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 8009058:	68bb      	ldr	r3, [r7, #8]
 800905a:	3302      	adds	r3, #2
 800905c:	781b      	ldrb	r3, [r3, #0]
 800905e:	b29a      	uxth	r2, r3
 8009060:	68bb      	ldr	r3, [r7, #8]
 8009062:	3303      	adds	r3, #3
 8009064:	781b      	ldrb	r3, [r3, #0]
 8009066:	b29b      	uxth	r3, r3
 8009068:	021b      	lsls	r3, r3, #8
 800906a:	b29b      	uxth	r3, r3
 800906c:	4313      	orrs	r3, r2
 800906e:	b29a      	uxth	r2, r3
 8009070:	68fb      	ldr	r3, [r7, #12]
 8009072:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 8009074:	68bb      	ldr	r3, [r7, #8]
 8009076:	791a      	ldrb	r2, [r3, #4]
 8009078:	68fb      	ldr	r3, [r7, #12]
 800907a:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 800907c:	68bb      	ldr	r3, [r7, #8]
 800907e:	795a      	ldrb	r2, [r3, #5]
 8009080:	68fb      	ldr	r3, [r7, #12]
 8009082:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 8009084:	68bb      	ldr	r3, [r7, #8]
 8009086:	799a      	ldrb	r2, [r3, #6]
 8009088:	68fb      	ldr	r3, [r7, #12]
 800908a:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 800908c:	68bb      	ldr	r3, [r7, #8]
 800908e:	79da      	ldrb	r2, [r3, #7]
 8009090:	68fb      	ldr	r3, [r7, #12]
 8009092:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 8009094:	68bb      	ldr	r3, [r7, #8]
 8009096:	7a1a      	ldrb	r2, [r3, #8]
 8009098:	68fb      	ldr	r3, [r7, #12]
 800909a:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800909c:	88fb      	ldrh	r3, [r7, #6]
 800909e:	2b09      	cmp	r3, #9
 80090a0:	d95f      	bls.n	8009162 <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 80090a2:	2309      	movs	r3, #9
 80090a4:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 80090a6:	2300      	movs	r3, #0
 80090a8:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 80090aa:	e051      	b.n	8009150 <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 80090ac:	f107 0316 	add.w	r3, r7, #22
 80090b0:	4619      	mov	r1, r3
 80090b2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80090b4:	f000 f8e8 	bl	8009288 <USBH_GetNextDesc>
 80090b8:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 80090ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090bc:	785b      	ldrb	r3, [r3, #1]
 80090be:	2b04      	cmp	r3, #4
 80090c0:	d146      	bne.n	8009150 <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 80090c2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80090c6:	221a      	movs	r2, #26
 80090c8:	fb02 f303 	mul.w	r3, r2, r3
 80090cc:	3308      	adds	r3, #8
 80090ce:	68fa      	ldr	r2, [r7, #12]
 80090d0:	4413      	add	r3, r2
 80090d2:	3302      	adds	r3, #2
 80090d4:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 80090d6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80090d8:	69f8      	ldr	r0, [r7, #28]
 80090da:	f000 f846 	bl	800916a <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 80090de:	2300      	movs	r3, #0
 80090e0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 80090e4:	2300      	movs	r3, #0
 80090e6:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 80090e8:	e022      	b.n	8009130 <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 80090ea:	f107 0316 	add.w	r3, r7, #22
 80090ee:	4619      	mov	r1, r3
 80090f0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80090f2:	f000 f8c9 	bl	8009288 <USBH_GetNextDesc>
 80090f6:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 80090f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090fa:	785b      	ldrb	r3, [r3, #1]
 80090fc:	2b05      	cmp	r3, #5
 80090fe:	d117      	bne.n	8009130 <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8009100:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009104:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8009108:	3201      	adds	r2, #1
 800910a:	00d2      	lsls	r2, r2, #3
 800910c:	211a      	movs	r1, #26
 800910e:	fb01 f303 	mul.w	r3, r1, r3
 8009112:	4413      	add	r3, r2
 8009114:	3308      	adds	r3, #8
 8009116:	68fa      	ldr	r2, [r7, #12]
 8009118:	4413      	add	r3, r2
 800911a:	3304      	adds	r3, #4
 800911c:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 800911e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009120:	69b8      	ldr	r0, [r7, #24]
 8009122:	f000 f851 	bl	80091c8 <USBH_ParseEPDesc>
            ep_ix++;
 8009126:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800912a:	3301      	adds	r3, #1
 800912c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8009130:	69fb      	ldr	r3, [r7, #28]
 8009132:	791b      	ldrb	r3, [r3, #4]
 8009134:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8009138:	429a      	cmp	r2, r3
 800913a:	d204      	bcs.n	8009146 <USBH_ParseCfgDesc+0x120>
 800913c:	68fb      	ldr	r3, [r7, #12]
 800913e:	885a      	ldrh	r2, [r3, #2]
 8009140:	8afb      	ldrh	r3, [r7, #22]
 8009142:	429a      	cmp	r2, r3
 8009144:	d8d1      	bhi.n	80090ea <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 8009146:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800914a:	3301      	adds	r3, #1
 800914c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8009150:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009154:	2b01      	cmp	r3, #1
 8009156:	d804      	bhi.n	8009162 <USBH_ParseCfgDesc+0x13c>
 8009158:	68fb      	ldr	r3, [r7, #12]
 800915a:	885a      	ldrh	r2, [r3, #2]
 800915c:	8afb      	ldrh	r3, [r7, #22]
 800915e:	429a      	cmp	r2, r3
 8009160:	d8a4      	bhi.n	80090ac <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 8009162:	bf00      	nop
 8009164:	3728      	adds	r7, #40	; 0x28
 8009166:	46bd      	mov	sp, r7
 8009168:	bd80      	pop	{r7, pc}

0800916a <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 800916a:	b480      	push	{r7}
 800916c:	b083      	sub	sp, #12
 800916e:	af00      	add	r7, sp, #0
 8009170:	6078      	str	r0, [r7, #4]
 8009172:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 8009174:	683b      	ldr	r3, [r7, #0]
 8009176:	781a      	ldrb	r2, [r3, #0]
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 800917c:	683b      	ldr	r3, [r7, #0]
 800917e:	785a      	ldrb	r2, [r3, #1]
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 8009184:	683b      	ldr	r3, [r7, #0]
 8009186:	789a      	ldrb	r2, [r3, #2]
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 800918c:	683b      	ldr	r3, [r7, #0]
 800918e:	78da      	ldrb	r2, [r3, #3]
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 8009194:	683b      	ldr	r3, [r7, #0]
 8009196:	791a      	ldrb	r2, [r3, #4]
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 800919c:	683b      	ldr	r3, [r7, #0]
 800919e:	795a      	ldrb	r2, [r3, #5]
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 80091a4:	683b      	ldr	r3, [r7, #0]
 80091a6:	799a      	ldrb	r2, [r3, #6]
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 80091ac:	683b      	ldr	r3, [r7, #0]
 80091ae:	79da      	ldrb	r2, [r3, #7]
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 80091b4:	683b      	ldr	r3, [r7, #0]
 80091b6:	7a1a      	ldrb	r2, [r3, #8]
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	721a      	strb	r2, [r3, #8]
}
 80091bc:	bf00      	nop
 80091be:	370c      	adds	r7, #12
 80091c0:	46bd      	mov	sp, r7
 80091c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091c6:	4770      	bx	lr

080091c8 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
 80091c8:	b480      	push	{r7}
 80091ca:	b083      	sub	sp, #12
 80091cc:	af00      	add	r7, sp, #0
 80091ce:	6078      	str	r0, [r7, #4]
 80091d0:	6039      	str	r1, [r7, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 80091d2:	683b      	ldr	r3, [r7, #0]
 80091d4:	781a      	ldrb	r2, [r3, #0]
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 80091da:	683b      	ldr	r3, [r7, #0]
 80091dc:	785a      	ldrb	r2, [r3, #1]
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 80091e2:	683b      	ldr	r3, [r7, #0]
 80091e4:	789a      	ldrb	r2, [r3, #2]
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 80091ea:	683b      	ldr	r3, [r7, #0]
 80091ec:	78da      	ldrb	r2, [r3, #3]
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 80091f2:	683b      	ldr	r3, [r7, #0]
 80091f4:	3304      	adds	r3, #4
 80091f6:	781b      	ldrb	r3, [r3, #0]
 80091f8:	b29a      	uxth	r2, r3
 80091fa:	683b      	ldr	r3, [r7, #0]
 80091fc:	3305      	adds	r3, #5
 80091fe:	781b      	ldrb	r3, [r3, #0]
 8009200:	b29b      	uxth	r3, r3
 8009202:	021b      	lsls	r3, r3, #8
 8009204:	b29b      	uxth	r3, r3
 8009206:	4313      	orrs	r3, r2
 8009208:	b29a      	uxth	r2, r3
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 800920e:	683b      	ldr	r3, [r7, #0]
 8009210:	799a      	ldrb	r2, [r3, #6]
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	719a      	strb	r2, [r3, #6]
}
 8009216:	bf00      	nop
 8009218:	370c      	adds	r7, #12
 800921a:	46bd      	mov	sp, r7
 800921c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009220:	4770      	bx	lr

08009222 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8009222:	b480      	push	{r7}
 8009224:	b087      	sub	sp, #28
 8009226:	af00      	add	r7, sp, #0
 8009228:	60f8      	str	r0, [r7, #12]
 800922a:	60b9      	str	r1, [r7, #8]
 800922c:	4613      	mov	r3, r2
 800922e:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8009230:	68fb      	ldr	r3, [r7, #12]
 8009232:	3301      	adds	r3, #1
 8009234:	781b      	ldrb	r3, [r3, #0]
 8009236:	2b03      	cmp	r3, #3
 8009238:	d120      	bne.n	800927c <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800923a:	68fb      	ldr	r3, [r7, #12]
 800923c:	781b      	ldrb	r3, [r3, #0]
 800923e:	1e9a      	subs	r2, r3, #2
 8009240:	88fb      	ldrh	r3, [r7, #6]
 8009242:	4293      	cmp	r3, r2
 8009244:	bf28      	it	cs
 8009246:	4613      	movcs	r3, r2
 8009248:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800924a:	68fb      	ldr	r3, [r7, #12]
 800924c:	3302      	adds	r3, #2
 800924e:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8009250:	2300      	movs	r3, #0
 8009252:	82fb      	strh	r3, [r7, #22]
 8009254:	e00b      	b.n	800926e <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8009256:	8afb      	ldrh	r3, [r7, #22]
 8009258:	68fa      	ldr	r2, [r7, #12]
 800925a:	4413      	add	r3, r2
 800925c:	781a      	ldrb	r2, [r3, #0]
 800925e:	68bb      	ldr	r3, [r7, #8]
 8009260:	701a      	strb	r2, [r3, #0]
      pdest++;
 8009262:	68bb      	ldr	r3, [r7, #8]
 8009264:	3301      	adds	r3, #1
 8009266:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8009268:	8afb      	ldrh	r3, [r7, #22]
 800926a:	3302      	adds	r3, #2
 800926c:	82fb      	strh	r3, [r7, #22]
 800926e:	8afa      	ldrh	r2, [r7, #22]
 8009270:	8abb      	ldrh	r3, [r7, #20]
 8009272:	429a      	cmp	r2, r3
 8009274:	d3ef      	bcc.n	8009256 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8009276:	68bb      	ldr	r3, [r7, #8]
 8009278:	2200      	movs	r2, #0
 800927a:	701a      	strb	r2, [r3, #0]
  }
}
 800927c:	bf00      	nop
 800927e:	371c      	adds	r7, #28
 8009280:	46bd      	mov	sp, r7
 8009282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009286:	4770      	bx	lr

08009288 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 8009288:	b480      	push	{r7}
 800928a:	b085      	sub	sp, #20
 800928c:	af00      	add	r7, sp, #0
 800928e:	6078      	str	r0, [r7, #4]
 8009290:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8009292:	683b      	ldr	r3, [r7, #0]
 8009294:	881a      	ldrh	r2, [r3, #0]
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	781b      	ldrb	r3, [r3, #0]
 800929a:	b29b      	uxth	r3, r3
 800929c:	4413      	add	r3, r2
 800929e:	b29a      	uxth	r2, r3
 80092a0:	683b      	ldr	r3, [r7, #0]
 80092a2:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	781b      	ldrb	r3, [r3, #0]
 80092a8:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	4413      	add	r3, r2
 80092ae:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80092b0:	68fb      	ldr	r3, [r7, #12]
}
 80092b2:	4618      	mov	r0, r3
 80092b4:	3714      	adds	r7, #20
 80092b6:	46bd      	mov	sp, r7
 80092b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092bc:	4770      	bx	lr

080092be <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 80092be:	b580      	push	{r7, lr}
 80092c0:	b086      	sub	sp, #24
 80092c2:	af00      	add	r7, sp, #0
 80092c4:	60f8      	str	r0, [r7, #12]
 80092c6:	60b9      	str	r1, [r7, #8]
 80092c8:	4613      	mov	r3, r2
 80092ca:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 80092cc:	2301      	movs	r3, #1
 80092ce:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 80092d0:	68fb      	ldr	r3, [r7, #12]
 80092d2:	789b      	ldrb	r3, [r3, #2]
 80092d4:	2b01      	cmp	r3, #1
 80092d6:	d002      	beq.n	80092de <USBH_CtlReq+0x20>
 80092d8:	2b02      	cmp	r3, #2
 80092da:	d00f      	beq.n	80092fc <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 80092dc:	e027      	b.n	800932e <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 80092de:	68fb      	ldr	r3, [r7, #12]
 80092e0:	68ba      	ldr	r2, [r7, #8]
 80092e2:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 80092e4:	68fb      	ldr	r3, [r7, #12]
 80092e6:	88fa      	ldrh	r2, [r7, #6]
 80092e8:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 80092ea:	68fb      	ldr	r3, [r7, #12]
 80092ec:	2201      	movs	r2, #1
 80092ee:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 80092f0:	68fb      	ldr	r3, [r7, #12]
 80092f2:	2202      	movs	r2, #2
 80092f4:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 80092f6:	2301      	movs	r3, #1
 80092f8:	75fb      	strb	r3, [r7, #23]
      break;
 80092fa:	e018      	b.n	800932e <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 80092fc:	68f8      	ldr	r0, [r7, #12]
 80092fe:	f000 f81b 	bl	8009338 <USBH_HandleControl>
 8009302:	4603      	mov	r3, r0
 8009304:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8009306:	7dfb      	ldrb	r3, [r7, #23]
 8009308:	2b00      	cmp	r3, #0
 800930a:	d002      	beq.n	8009312 <USBH_CtlReq+0x54>
 800930c:	7dfb      	ldrb	r3, [r7, #23]
 800930e:	2b03      	cmp	r3, #3
 8009310:	d106      	bne.n	8009320 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 8009312:	68fb      	ldr	r3, [r7, #12]
 8009314:	2201      	movs	r2, #1
 8009316:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8009318:	68fb      	ldr	r3, [r7, #12]
 800931a:	2200      	movs	r2, #0
 800931c:	761a      	strb	r2, [r3, #24]
      break;
 800931e:	e005      	b.n	800932c <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 8009320:	7dfb      	ldrb	r3, [r7, #23]
 8009322:	2b02      	cmp	r3, #2
 8009324:	d102      	bne.n	800932c <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 8009326:	68fb      	ldr	r3, [r7, #12]
 8009328:	2201      	movs	r2, #1
 800932a:	709a      	strb	r2, [r3, #2]
      break;
 800932c:	bf00      	nop
  }
  return status;
 800932e:	7dfb      	ldrb	r3, [r7, #23]
}
 8009330:	4618      	mov	r0, r3
 8009332:	3718      	adds	r7, #24
 8009334:	46bd      	mov	sp, r7
 8009336:	bd80      	pop	{r7, pc}

08009338 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8009338:	b580      	push	{r7, lr}
 800933a:	b086      	sub	sp, #24
 800933c:	af02      	add	r7, sp, #8
 800933e:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8009340:	2301      	movs	r3, #1
 8009342:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8009344:	2300      	movs	r3, #0
 8009346:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	7e1b      	ldrb	r3, [r3, #24]
 800934c:	3b01      	subs	r3, #1
 800934e:	2b0a      	cmp	r3, #10
 8009350:	f200 8158 	bhi.w	8009604 <USBH_HandleControl+0x2cc>
 8009354:	a201      	add	r2, pc, #4	; (adr r2, 800935c <USBH_HandleControl+0x24>)
 8009356:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800935a:	bf00      	nop
 800935c:	08009389 	.word	0x08009389
 8009360:	080093a3 	.word	0x080093a3
 8009364:	0800940d 	.word	0x0800940d
 8009368:	08009433 	.word	0x08009433
 800936c:	0800946b 	.word	0x0800946b
 8009370:	08009497 	.word	0x08009497
 8009374:	080094e9 	.word	0x080094e9
 8009378:	0800950b 	.word	0x0800950b
 800937c:	08009547 	.word	0x08009547
 8009380:	0800956f 	.word	0x0800956f
 8009384:	080095ad 	.word	0x080095ad
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	f103 0110 	add.w	r1, r3, #16
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	795b      	ldrb	r3, [r3, #5]
 8009392:	461a      	mov	r2, r3
 8009394:	6878      	ldr	r0, [r7, #4]
 8009396:	f000 f945 	bl	8009624 <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	2202      	movs	r2, #2
 800939e:	761a      	strb	r2, [r3, #24]
      break;
 80093a0:	e13b      	b.n	800961a <USBH_HandleControl+0x2e2>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	795b      	ldrb	r3, [r3, #5]
 80093a6:	4619      	mov	r1, r3
 80093a8:	6878      	ldr	r0, [r7, #4]
 80093aa:	f000 fcb7 	bl	8009d1c <USBH_LL_GetURBState>
 80093ae:	4603      	mov	r3, r0
 80093b0:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 80093b2:	7bbb      	ldrb	r3, [r7, #14]
 80093b4:	2b01      	cmp	r3, #1
 80093b6:	d11e      	bne.n	80093f6 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	7c1b      	ldrb	r3, [r3, #16]
 80093bc:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80093c0:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	8adb      	ldrh	r3, [r3, #22]
 80093c6:	2b00      	cmp	r3, #0
 80093c8:	d00a      	beq.n	80093e0 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 80093ca:	7b7b      	ldrb	r3, [r7, #13]
 80093cc:	2b80      	cmp	r3, #128	; 0x80
 80093ce:	d103      	bne.n	80093d8 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	2203      	movs	r2, #3
 80093d4:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 80093d6:	e117      	b.n	8009608 <USBH_HandleControl+0x2d0>
            phost->Control.state = CTRL_DATA_OUT;
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	2205      	movs	r2, #5
 80093dc:	761a      	strb	r2, [r3, #24]
      break;
 80093de:	e113      	b.n	8009608 <USBH_HandleControl+0x2d0>
          if (direction == USB_D2H)
 80093e0:	7b7b      	ldrb	r3, [r7, #13]
 80093e2:	2b80      	cmp	r3, #128	; 0x80
 80093e4:	d103      	bne.n	80093ee <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	2209      	movs	r2, #9
 80093ea:	761a      	strb	r2, [r3, #24]
      break;
 80093ec:	e10c      	b.n	8009608 <USBH_HandleControl+0x2d0>
            phost->Control.state = CTRL_STATUS_IN;
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	2207      	movs	r2, #7
 80093f2:	761a      	strb	r2, [r3, #24]
      break;
 80093f4:	e108      	b.n	8009608 <USBH_HandleControl+0x2d0>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 80093f6:	7bbb      	ldrb	r3, [r7, #14]
 80093f8:	2b04      	cmp	r3, #4
 80093fa:	d003      	beq.n	8009404 <USBH_HandleControl+0xcc>
 80093fc:	7bbb      	ldrb	r3, [r7, #14]
 80093fe:	2b02      	cmp	r3, #2
 8009400:	f040 8102 	bne.w	8009608 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	220b      	movs	r2, #11
 8009408:	761a      	strb	r2, [r3, #24]
      break;
 800940a:	e0fd      	b.n	8009608 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8009412:	b29a      	uxth	r2, r3
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	6899      	ldr	r1, [r3, #8]
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	899a      	ldrh	r2, [r3, #12]
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	791b      	ldrb	r3, [r3, #4]
 8009424:	6878      	ldr	r0, [r7, #4]
 8009426:	f000 f93c 	bl	80096a2 <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	2204      	movs	r2, #4
 800942e:	761a      	strb	r2, [r3, #24]
      break;
 8009430:	e0f3      	b.n	800961a <USBH_HandleControl+0x2e2>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	791b      	ldrb	r3, [r3, #4]
 8009436:	4619      	mov	r1, r3
 8009438:	6878      	ldr	r0, [r7, #4]
 800943a:	f000 fc6f 	bl	8009d1c <USBH_LL_GetURBState>
 800943e:	4603      	mov	r3, r0
 8009440:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8009442:	7bbb      	ldrb	r3, [r7, #14]
 8009444:	2b01      	cmp	r3, #1
 8009446:	d102      	bne.n	800944e <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	2209      	movs	r2, #9
 800944c:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800944e:	7bbb      	ldrb	r3, [r7, #14]
 8009450:	2b05      	cmp	r3, #5
 8009452:	d102      	bne.n	800945a <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8009454:	2303      	movs	r3, #3
 8009456:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8009458:	e0d8      	b.n	800960c <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 800945a:	7bbb      	ldrb	r3, [r7, #14]
 800945c:	2b04      	cmp	r3, #4
 800945e:	f040 80d5 	bne.w	800960c <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	220b      	movs	r2, #11
 8009466:	761a      	strb	r2, [r3, #24]
      break;
 8009468:	e0d0      	b.n	800960c <USBH_HandleControl+0x2d4>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	6899      	ldr	r1, [r3, #8]
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	899a      	ldrh	r2, [r3, #12]
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	7958      	ldrb	r0, [r3, #5]
 8009476:	2301      	movs	r3, #1
 8009478:	9300      	str	r3, [sp, #0]
 800947a:	4603      	mov	r3, r0
 800947c:	6878      	ldr	r0, [r7, #4]
 800947e:	f000 f8eb 	bl	8009658 <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8009488:	b29a      	uxth	r2, r3
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	2206      	movs	r2, #6
 8009492:	761a      	strb	r2, [r3, #24]
      break;
 8009494:	e0c1      	b.n	800961a <USBH_HandleControl+0x2e2>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	795b      	ldrb	r3, [r3, #5]
 800949a:	4619      	mov	r1, r3
 800949c:	6878      	ldr	r0, [r7, #4]
 800949e:	f000 fc3d 	bl	8009d1c <USBH_LL_GetURBState>
 80094a2:	4603      	mov	r3, r0
 80094a4:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 80094a6:	7bbb      	ldrb	r3, [r7, #14]
 80094a8:	2b01      	cmp	r3, #1
 80094aa:	d103      	bne.n	80094b4 <USBH_HandleControl+0x17c>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	2207      	movs	r2, #7
 80094b0:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 80094b2:	e0ad      	b.n	8009610 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_STALL)
 80094b4:	7bbb      	ldrb	r3, [r7, #14]
 80094b6:	2b05      	cmp	r3, #5
 80094b8:	d105      	bne.n	80094c6 <USBH_HandleControl+0x18e>
        phost->Control.state = CTRL_STALLED;
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	220c      	movs	r2, #12
 80094be:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 80094c0:	2303      	movs	r3, #3
 80094c2:	73fb      	strb	r3, [r7, #15]
      break;
 80094c4:	e0a4      	b.n	8009610 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_NOTREADY)
 80094c6:	7bbb      	ldrb	r3, [r7, #14]
 80094c8:	2b02      	cmp	r3, #2
 80094ca:	d103      	bne.n	80094d4 <USBH_HandleControl+0x19c>
        phost->Control.state = CTRL_DATA_OUT;
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	2205      	movs	r2, #5
 80094d0:	761a      	strb	r2, [r3, #24]
      break;
 80094d2:	e09d      	b.n	8009610 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_ERROR)
 80094d4:	7bbb      	ldrb	r3, [r7, #14]
 80094d6:	2b04      	cmp	r3, #4
 80094d8:	f040 809a 	bne.w	8009610 <USBH_HandleControl+0x2d8>
          phost->Control.state = CTRL_ERROR;
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	220b      	movs	r2, #11
 80094e0:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 80094e2:	2302      	movs	r3, #2
 80094e4:	73fb      	strb	r3, [r7, #15]
      break;
 80094e6:	e093      	b.n	8009610 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	791b      	ldrb	r3, [r3, #4]
 80094ec:	2200      	movs	r2, #0
 80094ee:	2100      	movs	r1, #0
 80094f0:	6878      	ldr	r0, [r7, #4]
 80094f2:	f000 f8d6 	bl	80096a2 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80094fc:	b29a      	uxth	r2, r3
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	2208      	movs	r2, #8
 8009506:	761a      	strb	r2, [r3, #24]

      break;
 8009508:	e087      	b.n	800961a <USBH_HandleControl+0x2e2>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	791b      	ldrb	r3, [r3, #4]
 800950e:	4619      	mov	r1, r3
 8009510:	6878      	ldr	r0, [r7, #4]
 8009512:	f000 fc03 	bl	8009d1c <USBH_LL_GetURBState>
 8009516:	4603      	mov	r3, r0
 8009518:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800951a:	7bbb      	ldrb	r3, [r7, #14]
 800951c:	2b01      	cmp	r3, #1
 800951e:	d105      	bne.n	800952c <USBH_HandleControl+0x1f4>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	220d      	movs	r2, #13
 8009524:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8009526:	2300      	movs	r3, #0
 8009528:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800952a:	e073      	b.n	8009614 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_ERROR)
 800952c:	7bbb      	ldrb	r3, [r7, #14]
 800952e:	2b04      	cmp	r3, #4
 8009530:	d103      	bne.n	800953a <USBH_HandleControl+0x202>
        phost->Control.state = CTRL_ERROR;
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	220b      	movs	r2, #11
 8009536:	761a      	strb	r2, [r3, #24]
      break;
 8009538:	e06c      	b.n	8009614 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_STALL)
 800953a:	7bbb      	ldrb	r3, [r7, #14]
 800953c:	2b05      	cmp	r3, #5
 800953e:	d169      	bne.n	8009614 <USBH_HandleControl+0x2dc>
          status = USBH_NOT_SUPPORTED;
 8009540:	2303      	movs	r3, #3
 8009542:	73fb      	strb	r3, [r7, #15]
      break;
 8009544:	e066      	b.n	8009614 <USBH_HandleControl+0x2dc>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	795a      	ldrb	r2, [r3, #5]
 800954a:	2301      	movs	r3, #1
 800954c:	9300      	str	r3, [sp, #0]
 800954e:	4613      	mov	r3, r2
 8009550:	2200      	movs	r2, #0
 8009552:	2100      	movs	r1, #0
 8009554:	6878      	ldr	r0, [r7, #4]
 8009556:	f000 f87f 	bl	8009658 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8009560:	b29a      	uxth	r2, r3
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	220a      	movs	r2, #10
 800956a:	761a      	strb	r2, [r3, #24]
      break;
 800956c:	e055      	b.n	800961a <USBH_HandleControl+0x2e2>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	795b      	ldrb	r3, [r3, #5]
 8009572:	4619      	mov	r1, r3
 8009574:	6878      	ldr	r0, [r7, #4]
 8009576:	f000 fbd1 	bl	8009d1c <USBH_LL_GetURBState>
 800957a:	4603      	mov	r3, r0
 800957c:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800957e:	7bbb      	ldrb	r3, [r7, #14]
 8009580:	2b01      	cmp	r3, #1
 8009582:	d105      	bne.n	8009590 <USBH_HandleControl+0x258>
      {
        status = USBH_OK;
 8009584:	2300      	movs	r3, #0
 8009586:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	220d      	movs	r2, #13
 800958c:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800958e:	e043      	b.n	8009618 <USBH_HandleControl+0x2e0>
      else if (URB_Status == USBH_URB_NOTREADY)
 8009590:	7bbb      	ldrb	r3, [r7, #14]
 8009592:	2b02      	cmp	r3, #2
 8009594:	d103      	bne.n	800959e <USBH_HandleControl+0x266>
        phost->Control.state = CTRL_STATUS_OUT;
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	2209      	movs	r2, #9
 800959a:	761a      	strb	r2, [r3, #24]
      break;
 800959c:	e03c      	b.n	8009618 <USBH_HandleControl+0x2e0>
        if (URB_Status == USBH_URB_ERROR)
 800959e:	7bbb      	ldrb	r3, [r7, #14]
 80095a0:	2b04      	cmp	r3, #4
 80095a2:	d139      	bne.n	8009618 <USBH_HandleControl+0x2e0>
          phost->Control.state = CTRL_ERROR;
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	220b      	movs	r2, #11
 80095a8:	761a      	strb	r2, [r3, #24]
      break;
 80095aa:	e035      	b.n	8009618 <USBH_HandleControl+0x2e0>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	7e5b      	ldrb	r3, [r3, #25]
 80095b0:	3301      	adds	r3, #1
 80095b2:	b2da      	uxtb	r2, r3
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	765a      	strb	r2, [r3, #25]
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	7e5b      	ldrb	r3, [r3, #25]
 80095bc:	2b02      	cmp	r3, #2
 80095be:	d806      	bhi.n	80095ce <USBH_HandleControl+0x296>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	2201      	movs	r2, #1
 80095c4:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	2201      	movs	r2, #1
 80095ca:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 80095cc:	e025      	b.n	800961a <USBH_HandleControl+0x2e2>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80095d4:	2106      	movs	r1, #6
 80095d6:	6878      	ldr	r0, [r7, #4]
 80095d8:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	2200      	movs	r2, #0
 80095de:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	795b      	ldrb	r3, [r3, #5]
 80095e4:	4619      	mov	r1, r3
 80095e6:	6878      	ldr	r0, [r7, #4]
 80095e8:	f000 f90c 	bl	8009804 <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	791b      	ldrb	r3, [r3, #4]
 80095f0:	4619      	mov	r1, r3
 80095f2:	6878      	ldr	r0, [r7, #4]
 80095f4:	f000 f906 	bl	8009804 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	2200      	movs	r2, #0
 80095fc:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 80095fe:	2302      	movs	r3, #2
 8009600:	73fb      	strb	r3, [r7, #15]
      break;
 8009602:	e00a      	b.n	800961a <USBH_HandleControl+0x2e2>

    default:
      break;
 8009604:	bf00      	nop
 8009606:	e008      	b.n	800961a <USBH_HandleControl+0x2e2>
      break;
 8009608:	bf00      	nop
 800960a:	e006      	b.n	800961a <USBH_HandleControl+0x2e2>
      break;
 800960c:	bf00      	nop
 800960e:	e004      	b.n	800961a <USBH_HandleControl+0x2e2>
      break;
 8009610:	bf00      	nop
 8009612:	e002      	b.n	800961a <USBH_HandleControl+0x2e2>
      break;
 8009614:	bf00      	nop
 8009616:	e000      	b.n	800961a <USBH_HandleControl+0x2e2>
      break;
 8009618:	bf00      	nop
  }

  return status;
 800961a:	7bfb      	ldrb	r3, [r7, #15]
}
 800961c:	4618      	mov	r0, r3
 800961e:	3710      	adds	r7, #16
 8009620:	46bd      	mov	sp, r7
 8009622:	bd80      	pop	{r7, pc}

08009624 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8009624:	b580      	push	{r7, lr}
 8009626:	b088      	sub	sp, #32
 8009628:	af04      	add	r7, sp, #16
 800962a:	60f8      	str	r0, [r7, #12]
 800962c:	60b9      	str	r1, [r7, #8]
 800962e:	4613      	mov	r3, r2
 8009630:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8009632:	79f9      	ldrb	r1, [r7, #7]
 8009634:	2300      	movs	r3, #0
 8009636:	9303      	str	r3, [sp, #12]
 8009638:	2308      	movs	r3, #8
 800963a:	9302      	str	r3, [sp, #8]
 800963c:	68bb      	ldr	r3, [r7, #8]
 800963e:	9301      	str	r3, [sp, #4]
 8009640:	2300      	movs	r3, #0
 8009642:	9300      	str	r3, [sp, #0]
 8009644:	2300      	movs	r3, #0
 8009646:	2200      	movs	r2, #0
 8009648:	68f8      	ldr	r0, [r7, #12]
 800964a:	f000 fb36 	bl	8009cba <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 800964e:	2300      	movs	r3, #0
}
 8009650:	4618      	mov	r0, r3
 8009652:	3710      	adds	r7, #16
 8009654:	46bd      	mov	sp, r7
 8009656:	bd80      	pop	{r7, pc}

08009658 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8009658:	b580      	push	{r7, lr}
 800965a:	b088      	sub	sp, #32
 800965c:	af04      	add	r7, sp, #16
 800965e:	60f8      	str	r0, [r7, #12]
 8009660:	60b9      	str	r1, [r7, #8]
 8009662:	4611      	mov	r1, r2
 8009664:	461a      	mov	r2, r3
 8009666:	460b      	mov	r3, r1
 8009668:	80fb      	strh	r3, [r7, #6]
 800966a:	4613      	mov	r3, r2
 800966c:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800966e:	68fb      	ldr	r3, [r7, #12]
 8009670:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8009674:	2b00      	cmp	r3, #0
 8009676:	d001      	beq.n	800967c <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8009678:	2300      	movs	r3, #0
 800967a:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800967c:	7979      	ldrb	r1, [r7, #5]
 800967e:	7e3b      	ldrb	r3, [r7, #24]
 8009680:	9303      	str	r3, [sp, #12]
 8009682:	88fb      	ldrh	r3, [r7, #6]
 8009684:	9302      	str	r3, [sp, #8]
 8009686:	68bb      	ldr	r3, [r7, #8]
 8009688:	9301      	str	r3, [sp, #4]
 800968a:	2301      	movs	r3, #1
 800968c:	9300      	str	r3, [sp, #0]
 800968e:	2300      	movs	r3, #0
 8009690:	2200      	movs	r2, #0
 8009692:	68f8      	ldr	r0, [r7, #12]
 8009694:	f000 fb11 	bl	8009cba <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8009698:	2300      	movs	r3, #0
}
 800969a:	4618      	mov	r0, r3
 800969c:	3710      	adds	r7, #16
 800969e:	46bd      	mov	sp, r7
 80096a0:	bd80      	pop	{r7, pc}

080096a2 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 80096a2:	b580      	push	{r7, lr}
 80096a4:	b088      	sub	sp, #32
 80096a6:	af04      	add	r7, sp, #16
 80096a8:	60f8      	str	r0, [r7, #12]
 80096aa:	60b9      	str	r1, [r7, #8]
 80096ac:	4611      	mov	r1, r2
 80096ae:	461a      	mov	r2, r3
 80096b0:	460b      	mov	r3, r1
 80096b2:	80fb      	strh	r3, [r7, #6]
 80096b4:	4613      	mov	r3, r2
 80096b6:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 80096b8:	7979      	ldrb	r1, [r7, #5]
 80096ba:	2300      	movs	r3, #0
 80096bc:	9303      	str	r3, [sp, #12]
 80096be:	88fb      	ldrh	r3, [r7, #6]
 80096c0:	9302      	str	r3, [sp, #8]
 80096c2:	68bb      	ldr	r3, [r7, #8]
 80096c4:	9301      	str	r3, [sp, #4]
 80096c6:	2301      	movs	r3, #1
 80096c8:	9300      	str	r3, [sp, #0]
 80096ca:	2300      	movs	r3, #0
 80096cc:	2201      	movs	r2, #1
 80096ce:	68f8      	ldr	r0, [r7, #12]
 80096d0:	f000 faf3 	bl	8009cba <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 80096d4:	2300      	movs	r3, #0

}
 80096d6:	4618      	mov	r0, r3
 80096d8:	3710      	adds	r7, #16
 80096da:	46bd      	mov	sp, r7
 80096dc:	bd80      	pop	{r7, pc}

080096de <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 80096de:	b580      	push	{r7, lr}
 80096e0:	b088      	sub	sp, #32
 80096e2:	af04      	add	r7, sp, #16
 80096e4:	60f8      	str	r0, [r7, #12]
 80096e6:	60b9      	str	r1, [r7, #8]
 80096e8:	4611      	mov	r1, r2
 80096ea:	461a      	mov	r2, r3
 80096ec:	460b      	mov	r3, r1
 80096ee:	80fb      	strh	r3, [r7, #6]
 80096f0:	4613      	mov	r3, r2
 80096f2:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 80096f4:	68fb      	ldr	r3, [r7, #12]
 80096f6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80096fa:	2b00      	cmp	r3, #0
 80096fc:	d001      	beq.n	8009702 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 80096fe:	2300      	movs	r3, #0
 8009700:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8009702:	7979      	ldrb	r1, [r7, #5]
 8009704:	7e3b      	ldrb	r3, [r7, #24]
 8009706:	9303      	str	r3, [sp, #12]
 8009708:	88fb      	ldrh	r3, [r7, #6]
 800970a:	9302      	str	r3, [sp, #8]
 800970c:	68bb      	ldr	r3, [r7, #8]
 800970e:	9301      	str	r3, [sp, #4]
 8009710:	2301      	movs	r3, #1
 8009712:	9300      	str	r3, [sp, #0]
 8009714:	2302      	movs	r3, #2
 8009716:	2200      	movs	r2, #0
 8009718:	68f8      	ldr	r0, [r7, #12]
 800971a:	f000 face 	bl	8009cba <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800971e:	2300      	movs	r3, #0
}
 8009720:	4618      	mov	r0, r3
 8009722:	3710      	adds	r7, #16
 8009724:	46bd      	mov	sp, r7
 8009726:	bd80      	pop	{r7, pc}

08009728 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8009728:	b580      	push	{r7, lr}
 800972a:	b088      	sub	sp, #32
 800972c:	af04      	add	r7, sp, #16
 800972e:	60f8      	str	r0, [r7, #12]
 8009730:	60b9      	str	r1, [r7, #8]
 8009732:	4611      	mov	r1, r2
 8009734:	461a      	mov	r2, r3
 8009736:	460b      	mov	r3, r1
 8009738:	80fb      	strh	r3, [r7, #6]
 800973a:	4613      	mov	r3, r2
 800973c:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800973e:	7979      	ldrb	r1, [r7, #5]
 8009740:	2300      	movs	r3, #0
 8009742:	9303      	str	r3, [sp, #12]
 8009744:	88fb      	ldrh	r3, [r7, #6]
 8009746:	9302      	str	r3, [sp, #8]
 8009748:	68bb      	ldr	r3, [r7, #8]
 800974a:	9301      	str	r3, [sp, #4]
 800974c:	2301      	movs	r3, #1
 800974e:	9300      	str	r3, [sp, #0]
 8009750:	2302      	movs	r3, #2
 8009752:	2201      	movs	r2, #1
 8009754:	68f8      	ldr	r0, [r7, #12]
 8009756:	f000 fab0 	bl	8009cba <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800975a:	2300      	movs	r3, #0
}
 800975c:	4618      	mov	r0, r3
 800975e:	3710      	adds	r7, #16
 8009760:	46bd      	mov	sp, r7
 8009762:	bd80      	pop	{r7, pc}

08009764 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8009764:	b580      	push	{r7, lr}
 8009766:	b086      	sub	sp, #24
 8009768:	af04      	add	r7, sp, #16
 800976a:	6078      	str	r0, [r7, #4]
 800976c:	4608      	mov	r0, r1
 800976e:	4611      	mov	r1, r2
 8009770:	461a      	mov	r2, r3
 8009772:	4603      	mov	r3, r0
 8009774:	70fb      	strb	r3, [r7, #3]
 8009776:	460b      	mov	r3, r1
 8009778:	70bb      	strb	r3, [r7, #2]
 800977a:	4613      	mov	r3, r2
 800977c:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800977e:	7878      	ldrb	r0, [r7, #1]
 8009780:	78ba      	ldrb	r2, [r7, #2]
 8009782:	78f9      	ldrb	r1, [r7, #3]
 8009784:	8b3b      	ldrh	r3, [r7, #24]
 8009786:	9302      	str	r3, [sp, #8]
 8009788:	7d3b      	ldrb	r3, [r7, #20]
 800978a:	9301      	str	r3, [sp, #4]
 800978c:	7c3b      	ldrb	r3, [r7, #16]
 800978e:	9300      	str	r3, [sp, #0]
 8009790:	4603      	mov	r3, r0
 8009792:	6878      	ldr	r0, [r7, #4]
 8009794:	f000 fa43 	bl	8009c1e <USBH_LL_OpenPipe>

  return USBH_OK;
 8009798:	2300      	movs	r3, #0
}
 800979a:	4618      	mov	r0, r3
 800979c:	3708      	adds	r7, #8
 800979e:	46bd      	mov	sp, r7
 80097a0:	bd80      	pop	{r7, pc}

080097a2 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 80097a2:	b580      	push	{r7, lr}
 80097a4:	b082      	sub	sp, #8
 80097a6:	af00      	add	r7, sp, #0
 80097a8:	6078      	str	r0, [r7, #4]
 80097aa:	460b      	mov	r3, r1
 80097ac:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 80097ae:	78fb      	ldrb	r3, [r7, #3]
 80097b0:	4619      	mov	r1, r3
 80097b2:	6878      	ldr	r0, [r7, #4]
 80097b4:	f000 fa62 	bl	8009c7c <USBH_LL_ClosePipe>

  return USBH_OK;
 80097b8:	2300      	movs	r3, #0
}
 80097ba:	4618      	mov	r0, r3
 80097bc:	3708      	adds	r7, #8
 80097be:	46bd      	mov	sp, r7
 80097c0:	bd80      	pop	{r7, pc}

080097c2 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 80097c2:	b580      	push	{r7, lr}
 80097c4:	b084      	sub	sp, #16
 80097c6:	af00      	add	r7, sp, #0
 80097c8:	6078      	str	r0, [r7, #4]
 80097ca:	460b      	mov	r3, r1
 80097cc:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 80097ce:	6878      	ldr	r0, [r7, #4]
 80097d0:	f000 f836 	bl	8009840 <USBH_GetFreePipe>
 80097d4:	4603      	mov	r3, r0
 80097d6:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 80097d8:	89fb      	ldrh	r3, [r7, #14]
 80097da:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80097de:	4293      	cmp	r3, r2
 80097e0:	d00a      	beq.n	80097f8 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 80097e2:	78fa      	ldrb	r2, [r7, #3]
 80097e4:	89fb      	ldrh	r3, [r7, #14]
 80097e6:	f003 030f 	and.w	r3, r3, #15
 80097ea:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80097ee:	6879      	ldr	r1, [r7, #4]
 80097f0:	33e0      	adds	r3, #224	; 0xe0
 80097f2:	009b      	lsls	r3, r3, #2
 80097f4:	440b      	add	r3, r1
 80097f6:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 80097f8:	89fb      	ldrh	r3, [r7, #14]
 80097fa:	b2db      	uxtb	r3, r3
}
 80097fc:	4618      	mov	r0, r3
 80097fe:	3710      	adds	r7, #16
 8009800:	46bd      	mov	sp, r7
 8009802:	bd80      	pop	{r7, pc}

08009804 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8009804:	b480      	push	{r7}
 8009806:	b083      	sub	sp, #12
 8009808:	af00      	add	r7, sp, #0
 800980a:	6078      	str	r0, [r7, #4]
 800980c:	460b      	mov	r3, r1
 800980e:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 8009810:	78fb      	ldrb	r3, [r7, #3]
 8009812:	2b0a      	cmp	r3, #10
 8009814:	d80d      	bhi.n	8009832 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8009816:	78fb      	ldrb	r3, [r7, #3]
 8009818:	687a      	ldr	r2, [r7, #4]
 800981a:	33e0      	adds	r3, #224	; 0xe0
 800981c:	009b      	lsls	r3, r3, #2
 800981e:	4413      	add	r3, r2
 8009820:	685a      	ldr	r2, [r3, #4]
 8009822:	78fb      	ldrb	r3, [r7, #3]
 8009824:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8009828:	6879      	ldr	r1, [r7, #4]
 800982a:	33e0      	adds	r3, #224	; 0xe0
 800982c:	009b      	lsls	r3, r3, #2
 800982e:	440b      	add	r3, r1
 8009830:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8009832:	2300      	movs	r3, #0
}
 8009834:	4618      	mov	r0, r3
 8009836:	370c      	adds	r7, #12
 8009838:	46bd      	mov	sp, r7
 800983a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800983e:	4770      	bx	lr

08009840 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8009840:	b480      	push	{r7}
 8009842:	b085      	sub	sp, #20
 8009844:	af00      	add	r7, sp, #0
 8009846:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8009848:	2300      	movs	r3, #0
 800984a:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 800984c:	2300      	movs	r3, #0
 800984e:	73fb      	strb	r3, [r7, #15]
 8009850:	e00f      	b.n	8009872 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8009852:	7bfb      	ldrb	r3, [r7, #15]
 8009854:	687a      	ldr	r2, [r7, #4]
 8009856:	33e0      	adds	r3, #224	; 0xe0
 8009858:	009b      	lsls	r3, r3, #2
 800985a:	4413      	add	r3, r2
 800985c:	685b      	ldr	r3, [r3, #4]
 800985e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009862:	2b00      	cmp	r3, #0
 8009864:	d102      	bne.n	800986c <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 8009866:	7bfb      	ldrb	r3, [r7, #15]
 8009868:	b29b      	uxth	r3, r3
 800986a:	e007      	b.n	800987c <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 800986c:	7bfb      	ldrb	r3, [r7, #15]
 800986e:	3301      	adds	r3, #1
 8009870:	73fb      	strb	r3, [r7, #15]
 8009872:	7bfb      	ldrb	r3, [r7, #15]
 8009874:	2b0a      	cmp	r3, #10
 8009876:	d9ec      	bls.n	8009852 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8009878:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800987c:	4618      	mov	r0, r3
 800987e:	3714      	adds	r7, #20
 8009880:	46bd      	mov	sp, r7
 8009882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009886:	4770      	bx	lr

08009888 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8009888:	b580      	push	{r7, lr}
 800988a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800988c:	2201      	movs	r2, #1
 800988e:	490e      	ldr	r1, [pc, #56]	; (80098c8 <MX_USB_HOST_Init+0x40>)
 8009890:	480e      	ldr	r0, [pc, #56]	; (80098cc <MX_USB_HOST_Init+0x44>)
 8009892:	f7fe fc9f 	bl	80081d4 <USBH_Init>
 8009896:	4603      	mov	r3, r0
 8009898:	2b00      	cmp	r3, #0
 800989a:	d001      	beq.n	80098a0 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800989c:	f7f7 f976 	bl	8000b8c <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 80098a0:	490b      	ldr	r1, [pc, #44]	; (80098d0 <MX_USB_HOST_Init+0x48>)
 80098a2:	480a      	ldr	r0, [pc, #40]	; (80098cc <MX_USB_HOST_Init+0x44>)
 80098a4:	f7fe fd24 	bl	80082f0 <USBH_RegisterClass>
 80098a8:	4603      	mov	r3, r0
 80098aa:	2b00      	cmp	r3, #0
 80098ac:	d001      	beq.n	80098b2 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 80098ae:	f7f7 f96d 	bl	8000b8c <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 80098b2:	4806      	ldr	r0, [pc, #24]	; (80098cc <MX_USB_HOST_Init+0x44>)
 80098b4:	f7fe fda8 	bl	8008408 <USBH_Start>
 80098b8:	4603      	mov	r3, r0
 80098ba:	2b00      	cmp	r3, #0
 80098bc:	d001      	beq.n	80098c2 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 80098be:	f7f7 f965 	bl	8000b8c <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 80098c2:	bf00      	nop
 80098c4:	bd80      	pop	{r7, pc}
 80098c6:	bf00      	nop
 80098c8:	080098e9 	.word	0x080098e9
 80098cc:	20000240 	.word	0x20000240
 80098d0:	2000000c 	.word	0x2000000c

080098d4 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 80098d4:	b580      	push	{r7, lr}
 80098d6:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 80098d8:	4802      	ldr	r0, [pc, #8]	; (80098e4 <MX_USB_HOST_Process+0x10>)
 80098da:	f7fe fda5 	bl	8008428 <USBH_Process>
}
 80098de:	bf00      	nop
 80098e0:	bd80      	pop	{r7, pc}
 80098e2:	bf00      	nop
 80098e4:	20000240 	.word	0x20000240

080098e8 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 80098e8:	b480      	push	{r7}
 80098ea:	b083      	sub	sp, #12
 80098ec:	af00      	add	r7, sp, #0
 80098ee:	6078      	str	r0, [r7, #4]
 80098f0:	460b      	mov	r3, r1
 80098f2:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 80098f4:	78fb      	ldrb	r3, [r7, #3]
 80098f6:	3b01      	subs	r3, #1
 80098f8:	2b04      	cmp	r3, #4
 80098fa:	d819      	bhi.n	8009930 <USBH_UserProcess+0x48>
 80098fc:	a201      	add	r2, pc, #4	; (adr r2, 8009904 <USBH_UserProcess+0x1c>)
 80098fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009902:	bf00      	nop
 8009904:	08009931 	.word	0x08009931
 8009908:	08009921 	.word	0x08009921
 800990c:	08009931 	.word	0x08009931
 8009910:	08009929 	.word	0x08009929
 8009914:	08009919 	.word	0x08009919
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8009918:	4b09      	ldr	r3, [pc, #36]	; (8009940 <USBH_UserProcess+0x58>)
 800991a:	2203      	movs	r2, #3
 800991c:	701a      	strb	r2, [r3, #0]
  break;
 800991e:	e008      	b.n	8009932 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8009920:	4b07      	ldr	r3, [pc, #28]	; (8009940 <USBH_UserProcess+0x58>)
 8009922:	2202      	movs	r2, #2
 8009924:	701a      	strb	r2, [r3, #0]
  break;
 8009926:	e004      	b.n	8009932 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8009928:	4b05      	ldr	r3, [pc, #20]	; (8009940 <USBH_UserProcess+0x58>)
 800992a:	2201      	movs	r2, #1
 800992c:	701a      	strb	r2, [r3, #0]
  break;
 800992e:	e000      	b.n	8009932 <USBH_UserProcess+0x4a>

  default:
  break;
 8009930:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 8009932:	bf00      	nop
 8009934:	370c      	adds	r7, #12
 8009936:	46bd      	mov	sp, r7
 8009938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800993c:	4770      	bx	lr
 800993e:	bf00      	nop
 8009940:	200000b4 	.word	0x200000b4

08009944 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8009944:	b580      	push	{r7, lr}
 8009946:	b08a      	sub	sp, #40	; 0x28
 8009948:	af00      	add	r7, sp, #0
 800994a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800994c:	f107 0314 	add.w	r3, r7, #20
 8009950:	2200      	movs	r2, #0
 8009952:	601a      	str	r2, [r3, #0]
 8009954:	605a      	str	r2, [r3, #4]
 8009956:	609a      	str	r2, [r3, #8]
 8009958:	60da      	str	r2, [r3, #12]
 800995a:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	681b      	ldr	r3, [r3, #0]
 8009960:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009964:	d13a      	bne.n	80099dc <HAL_HCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009966:	2300      	movs	r3, #0
 8009968:	613b      	str	r3, [r7, #16]
 800996a:	4b1e      	ldr	r3, [pc, #120]	; (80099e4 <HAL_HCD_MspInit+0xa0>)
 800996c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800996e:	4a1d      	ldr	r2, [pc, #116]	; (80099e4 <HAL_HCD_MspInit+0xa0>)
 8009970:	f043 0301 	orr.w	r3, r3, #1
 8009974:	6313      	str	r3, [r2, #48]	; 0x30
 8009976:	4b1b      	ldr	r3, [pc, #108]	; (80099e4 <HAL_HCD_MspInit+0xa0>)
 8009978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800997a:	f003 0301 	and.w	r3, r3, #1
 800997e:	613b      	str	r3, [r7, #16]
 8009980:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8009982:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8009986:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009988:	2302      	movs	r3, #2
 800998a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800998c:	2300      	movs	r3, #0
 800998e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009990:	2303      	movs	r3, #3
 8009992:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8009994:	230a      	movs	r3, #10
 8009996:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009998:	f107 0314 	add.w	r3, r7, #20
 800999c:	4619      	mov	r1, r3
 800999e:	4812      	ldr	r0, [pc, #72]	; (80099e8 <HAL_HCD_MspInit+0xa4>)
 80099a0:	f7f7 fd2c 	bl	80013fc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80099a4:	4b0f      	ldr	r3, [pc, #60]	; (80099e4 <HAL_HCD_MspInit+0xa0>)
 80099a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80099a8:	4a0e      	ldr	r2, [pc, #56]	; (80099e4 <HAL_HCD_MspInit+0xa0>)
 80099aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80099ae:	6353      	str	r3, [r2, #52]	; 0x34
 80099b0:	2300      	movs	r3, #0
 80099b2:	60fb      	str	r3, [r7, #12]
 80099b4:	4b0b      	ldr	r3, [pc, #44]	; (80099e4 <HAL_HCD_MspInit+0xa0>)
 80099b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80099b8:	4a0a      	ldr	r2, [pc, #40]	; (80099e4 <HAL_HCD_MspInit+0xa0>)
 80099ba:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80099be:	6453      	str	r3, [r2, #68]	; 0x44
 80099c0:	4b08      	ldr	r3, [pc, #32]	; (80099e4 <HAL_HCD_MspInit+0xa0>)
 80099c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80099c4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80099c8:	60fb      	str	r3, [r7, #12]
 80099ca:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80099cc:	2200      	movs	r2, #0
 80099ce:	2100      	movs	r1, #0
 80099d0:	2043      	movs	r0, #67	; 0x43
 80099d2:	f7f7 fcc3 	bl	800135c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80099d6:	2043      	movs	r0, #67	; 0x43
 80099d8:	f7f7 fcec 	bl	80013b4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80099dc:	bf00      	nop
 80099de:	3728      	adds	r7, #40	; 0x28
 80099e0:	46bd      	mov	sp, r7
 80099e2:	bd80      	pop	{r7, pc}
 80099e4:	40023800 	.word	0x40023800
 80099e8:	40020000 	.word	0x40020000

080099ec <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 80099ec:	b580      	push	{r7, lr}
 80099ee:	b082      	sub	sp, #8
 80099f0:	af00      	add	r7, sp, #0
 80099f2:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80099fa:	4618      	mov	r0, r3
 80099fc:	f7ff f8e7 	bl	8008bce <USBH_LL_IncTimer>
}
 8009a00:	bf00      	nop
 8009a02:	3708      	adds	r7, #8
 8009a04:	46bd      	mov	sp, r7
 8009a06:	bd80      	pop	{r7, pc}

08009a08 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8009a08:	b580      	push	{r7, lr}
 8009a0a:	b082      	sub	sp, #8
 8009a0c:	af00      	add	r7, sp, #0
 8009a0e:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009a16:	4618      	mov	r0, r3
 8009a18:	f7ff f91f 	bl	8008c5a <USBH_LL_Connect>
}
 8009a1c:	bf00      	nop
 8009a1e:	3708      	adds	r7, #8
 8009a20:	46bd      	mov	sp, r7
 8009a22:	bd80      	pop	{r7, pc}

08009a24 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8009a24:	b580      	push	{r7, lr}
 8009a26:	b082      	sub	sp, #8
 8009a28:	af00      	add	r7, sp, #0
 8009a2a:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009a32:	4618      	mov	r0, r3
 8009a34:	f7ff f928 	bl	8008c88 <USBH_LL_Disconnect>
}
 8009a38:	bf00      	nop
 8009a3a:	3708      	adds	r7, #8
 8009a3c:	46bd      	mov	sp, r7
 8009a3e:	bd80      	pop	{r7, pc}

08009a40 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8009a40:	b480      	push	{r7}
 8009a42:	b083      	sub	sp, #12
 8009a44:	af00      	add	r7, sp, #0
 8009a46:	6078      	str	r0, [r7, #4]
 8009a48:	460b      	mov	r3, r1
 8009a4a:	70fb      	strb	r3, [r7, #3]
 8009a4c:	4613      	mov	r3, r2
 8009a4e:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8009a50:	bf00      	nop
 8009a52:	370c      	adds	r7, #12
 8009a54:	46bd      	mov	sp, r7
 8009a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a5a:	4770      	bx	lr

08009a5c <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8009a5c:	b580      	push	{r7, lr}
 8009a5e:	b082      	sub	sp, #8
 8009a60:	af00      	add	r7, sp, #0
 8009a62:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009a6a:	4618      	mov	r0, r3
 8009a6c:	f7ff f8d9 	bl	8008c22 <USBH_LL_PortEnabled>
}
 8009a70:	bf00      	nop
 8009a72:	3708      	adds	r7, #8
 8009a74:	46bd      	mov	sp, r7
 8009a76:	bd80      	pop	{r7, pc}

08009a78 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8009a78:	b580      	push	{r7, lr}
 8009a7a:	b082      	sub	sp, #8
 8009a7c:	af00      	add	r7, sp, #0
 8009a7e:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009a86:	4618      	mov	r0, r3
 8009a88:	f7ff f8d9 	bl	8008c3e <USBH_LL_PortDisabled>
}
 8009a8c:	bf00      	nop
 8009a8e:	3708      	adds	r7, #8
 8009a90:	46bd      	mov	sp, r7
 8009a92:	bd80      	pop	{r7, pc}

08009a94 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8009a94:	b580      	push	{r7, lr}
 8009a96:	b082      	sub	sp, #8
 8009a98:	af00      	add	r7, sp, #0
 8009a9a:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8009aa2:	2b01      	cmp	r3, #1
 8009aa4:	d12a      	bne.n	8009afc <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8009aa6:	4a18      	ldr	r2, [pc, #96]	; (8009b08 <USBH_LL_Init+0x74>)
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	f8c2 32c0 	str.w	r3, [r2, #704]	; 0x2c0
  phost->pData = &hhcd_USB_OTG_FS;
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	4a15      	ldr	r2, [pc, #84]	; (8009b08 <USBH_LL_Init+0x74>)
 8009ab2:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8009ab6:	4b14      	ldr	r3, [pc, #80]	; (8009b08 <USBH_LL_Init+0x74>)
 8009ab8:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8009abc:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 8009abe:	4b12      	ldr	r3, [pc, #72]	; (8009b08 <USBH_LL_Init+0x74>)
 8009ac0:	2208      	movs	r2, #8
 8009ac2:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8009ac4:	4b10      	ldr	r3, [pc, #64]	; (8009b08 <USBH_LL_Init+0x74>)
 8009ac6:	2201      	movs	r2, #1
 8009ac8:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8009aca:	4b0f      	ldr	r3, [pc, #60]	; (8009b08 <USBH_LL_Init+0x74>)
 8009acc:	2200      	movs	r2, #0
 8009ace:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8009ad0:	4b0d      	ldr	r3, [pc, #52]	; (8009b08 <USBH_LL_Init+0x74>)
 8009ad2:	2202      	movs	r2, #2
 8009ad4:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8009ad6:	4b0c      	ldr	r3, [pc, #48]	; (8009b08 <USBH_LL_Init+0x74>)
 8009ad8:	2200      	movs	r2, #0
 8009ada:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8009adc:	480a      	ldr	r0, [pc, #40]	; (8009b08 <USBH_LL_Init+0x74>)
 8009ade:	f7f7 ff67 	bl	80019b0 <HAL_HCD_Init>
 8009ae2:	4603      	mov	r3, r0
 8009ae4:	2b00      	cmp	r3, #0
 8009ae6:	d001      	beq.n	8009aec <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8009ae8:	f7f7 f850 	bl	8000b8c <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8009aec:	4806      	ldr	r0, [pc, #24]	; (8009b08 <USBH_LL_Init+0x74>)
 8009aee:	f7f8 fb77 	bl	80021e0 <HAL_HCD_GetCurrentFrame>
 8009af2:	4603      	mov	r3, r0
 8009af4:	4619      	mov	r1, r3
 8009af6:	6878      	ldr	r0, [r7, #4]
 8009af8:	f7ff f85a 	bl	8008bb0 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8009afc:	2300      	movs	r3, #0
}
 8009afe:	4618      	mov	r0, r3
 8009b00:	3708      	adds	r7, #8
 8009b02:	46bd      	mov	sp, r7
 8009b04:	bd80      	pop	{r7, pc}
 8009b06:	bf00      	nop
 8009b08:	20000618 	.word	0x20000618

08009b0c <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8009b0c:	b580      	push	{r7, lr}
 8009b0e:	b084      	sub	sp, #16
 8009b10:	af00      	add	r7, sp, #0
 8009b12:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009b14:	2300      	movs	r3, #0
 8009b16:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009b18:	2300      	movs	r3, #0
 8009b1a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8009b22:	4618      	mov	r0, r3
 8009b24:	f7f8 fae4 	bl	80020f0 <HAL_HCD_Start>
 8009b28:	4603      	mov	r3, r0
 8009b2a:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8009b2c:	7bfb      	ldrb	r3, [r7, #15]
 8009b2e:	4618      	mov	r0, r3
 8009b30:	f000 f95c 	bl	8009dec <USBH_Get_USB_Status>
 8009b34:	4603      	mov	r3, r0
 8009b36:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009b38:	7bbb      	ldrb	r3, [r7, #14]
}
 8009b3a:	4618      	mov	r0, r3
 8009b3c:	3710      	adds	r7, #16
 8009b3e:	46bd      	mov	sp, r7
 8009b40:	bd80      	pop	{r7, pc}

08009b42 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8009b42:	b580      	push	{r7, lr}
 8009b44:	b084      	sub	sp, #16
 8009b46:	af00      	add	r7, sp, #0
 8009b48:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009b4a:	2300      	movs	r3, #0
 8009b4c:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009b4e:	2300      	movs	r3, #0
 8009b50:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8009b58:	4618      	mov	r0, r3
 8009b5a:	f7f8 faec 	bl	8002136 <HAL_HCD_Stop>
 8009b5e:	4603      	mov	r3, r0
 8009b60:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8009b62:	7bfb      	ldrb	r3, [r7, #15]
 8009b64:	4618      	mov	r0, r3
 8009b66:	f000 f941 	bl	8009dec <USBH_Get_USB_Status>
 8009b6a:	4603      	mov	r3, r0
 8009b6c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009b6e:	7bbb      	ldrb	r3, [r7, #14]
}
 8009b70:	4618      	mov	r0, r3
 8009b72:	3710      	adds	r7, #16
 8009b74:	46bd      	mov	sp, r7
 8009b76:	bd80      	pop	{r7, pc}

08009b78 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8009b78:	b580      	push	{r7, lr}
 8009b7a:	b084      	sub	sp, #16
 8009b7c:	af00      	add	r7, sp, #0
 8009b7e:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8009b80:	2301      	movs	r3, #1
 8009b82:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8009b8a:	4618      	mov	r0, r3
 8009b8c:	f7f8 fb36 	bl	80021fc <HAL_HCD_GetCurrentSpeed>
 8009b90:	4603      	mov	r3, r0
 8009b92:	2b01      	cmp	r3, #1
 8009b94:	d007      	beq.n	8009ba6 <USBH_LL_GetSpeed+0x2e>
 8009b96:	2b01      	cmp	r3, #1
 8009b98:	d302      	bcc.n	8009ba0 <USBH_LL_GetSpeed+0x28>
 8009b9a:	2b02      	cmp	r3, #2
 8009b9c:	d006      	beq.n	8009bac <USBH_LL_GetSpeed+0x34>
 8009b9e:	e008      	b.n	8009bb2 <USBH_LL_GetSpeed+0x3a>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8009ba0:	2300      	movs	r3, #0
 8009ba2:	73fb      	strb	r3, [r7, #15]
    break;
 8009ba4:	e008      	b.n	8009bb8 <USBH_LL_GetSpeed+0x40>

  case 1 :
    speed = USBH_SPEED_FULL;
 8009ba6:	2301      	movs	r3, #1
 8009ba8:	73fb      	strb	r3, [r7, #15]
    break;
 8009baa:	e005      	b.n	8009bb8 <USBH_LL_GetSpeed+0x40>

  case 2 :
    speed = USBH_SPEED_LOW;
 8009bac:	2302      	movs	r3, #2
 8009bae:	73fb      	strb	r3, [r7, #15]
    break;
 8009bb0:	e002      	b.n	8009bb8 <USBH_LL_GetSpeed+0x40>

  default:
   speed = USBH_SPEED_FULL;
 8009bb2:	2301      	movs	r3, #1
 8009bb4:	73fb      	strb	r3, [r7, #15]
    break;
 8009bb6:	bf00      	nop
  }
  return  speed;
 8009bb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8009bba:	4618      	mov	r0, r3
 8009bbc:	3710      	adds	r7, #16
 8009bbe:	46bd      	mov	sp, r7
 8009bc0:	bd80      	pop	{r7, pc}

08009bc2 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 8009bc2:	b580      	push	{r7, lr}
 8009bc4:	b084      	sub	sp, #16
 8009bc6:	af00      	add	r7, sp, #0
 8009bc8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009bca:	2300      	movs	r3, #0
 8009bcc:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009bce:	2300      	movs	r3, #0
 8009bd0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8009bd8:	4618      	mov	r0, r3
 8009bda:	f7f8 fac9 	bl	8002170 <HAL_HCD_ResetPort>
 8009bde:	4603      	mov	r3, r0
 8009be0:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8009be2:	7bfb      	ldrb	r3, [r7, #15]
 8009be4:	4618      	mov	r0, r3
 8009be6:	f000 f901 	bl	8009dec <USBH_Get_USB_Status>
 8009bea:	4603      	mov	r3, r0
 8009bec:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009bee:	7bbb      	ldrb	r3, [r7, #14]
}
 8009bf0:	4618      	mov	r0, r3
 8009bf2:	3710      	adds	r7, #16
 8009bf4:	46bd      	mov	sp, r7
 8009bf6:	bd80      	pop	{r7, pc}

08009bf8 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8009bf8:	b580      	push	{r7, lr}
 8009bfa:	b082      	sub	sp, #8
 8009bfc:	af00      	add	r7, sp, #0
 8009bfe:	6078      	str	r0, [r7, #4]
 8009c00:	460b      	mov	r3, r1
 8009c02:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8009c0a:	78fa      	ldrb	r2, [r7, #3]
 8009c0c:	4611      	mov	r1, r2
 8009c0e:	4618      	mov	r0, r3
 8009c10:	f7f8 fad1 	bl	80021b6 <HAL_HCD_HC_GetXferCount>
 8009c14:	4603      	mov	r3, r0
}
 8009c16:	4618      	mov	r0, r3
 8009c18:	3708      	adds	r7, #8
 8009c1a:	46bd      	mov	sp, r7
 8009c1c:	bd80      	pop	{r7, pc}

08009c1e <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8009c1e:	b590      	push	{r4, r7, lr}
 8009c20:	b089      	sub	sp, #36	; 0x24
 8009c22:	af04      	add	r7, sp, #16
 8009c24:	6078      	str	r0, [r7, #4]
 8009c26:	4608      	mov	r0, r1
 8009c28:	4611      	mov	r1, r2
 8009c2a:	461a      	mov	r2, r3
 8009c2c:	4603      	mov	r3, r0
 8009c2e:	70fb      	strb	r3, [r7, #3]
 8009c30:	460b      	mov	r3, r1
 8009c32:	70bb      	strb	r3, [r7, #2]
 8009c34:	4613      	mov	r3, r2
 8009c36:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009c38:	2300      	movs	r3, #0
 8009c3a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009c3c:	2300      	movs	r3, #0
 8009c3e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8009c46:	787c      	ldrb	r4, [r7, #1]
 8009c48:	78ba      	ldrb	r2, [r7, #2]
 8009c4a:	78f9      	ldrb	r1, [r7, #3]
 8009c4c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8009c4e:	9302      	str	r3, [sp, #8]
 8009c50:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8009c54:	9301      	str	r3, [sp, #4]
 8009c56:	f897 3020 	ldrb.w	r3, [r7, #32]
 8009c5a:	9300      	str	r3, [sp, #0]
 8009c5c:	4623      	mov	r3, r4
 8009c5e:	f7f7 ff15 	bl	8001a8c <HAL_HCD_HC_Init>
 8009c62:	4603      	mov	r3, r0
 8009c64:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 8009c66:	7bfb      	ldrb	r3, [r7, #15]
 8009c68:	4618      	mov	r0, r3
 8009c6a:	f000 f8bf 	bl	8009dec <USBH_Get_USB_Status>
 8009c6e:	4603      	mov	r3, r0
 8009c70:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009c72:	7bbb      	ldrb	r3, [r7, #14]
}
 8009c74:	4618      	mov	r0, r3
 8009c76:	3714      	adds	r7, #20
 8009c78:	46bd      	mov	sp, r7
 8009c7a:	bd90      	pop	{r4, r7, pc}

08009c7c <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8009c7c:	b580      	push	{r7, lr}
 8009c7e:	b084      	sub	sp, #16
 8009c80:	af00      	add	r7, sp, #0
 8009c82:	6078      	str	r0, [r7, #4]
 8009c84:	460b      	mov	r3, r1
 8009c86:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009c88:	2300      	movs	r3, #0
 8009c8a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009c8c:	2300      	movs	r3, #0
 8009c8e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8009c96:	78fa      	ldrb	r2, [r7, #3]
 8009c98:	4611      	mov	r1, r2
 8009c9a:	4618      	mov	r0, r3
 8009c9c:	f7f7 ff8e 	bl	8001bbc <HAL_HCD_HC_Halt>
 8009ca0:	4603      	mov	r3, r0
 8009ca2:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8009ca4:	7bfb      	ldrb	r3, [r7, #15]
 8009ca6:	4618      	mov	r0, r3
 8009ca8:	f000 f8a0 	bl	8009dec <USBH_Get_USB_Status>
 8009cac:	4603      	mov	r3, r0
 8009cae:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009cb0:	7bbb      	ldrb	r3, [r7, #14]
}
 8009cb2:	4618      	mov	r0, r3
 8009cb4:	3710      	adds	r7, #16
 8009cb6:	46bd      	mov	sp, r7
 8009cb8:	bd80      	pop	{r7, pc}

08009cba <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8009cba:	b590      	push	{r4, r7, lr}
 8009cbc:	b089      	sub	sp, #36	; 0x24
 8009cbe:	af04      	add	r7, sp, #16
 8009cc0:	6078      	str	r0, [r7, #4]
 8009cc2:	4608      	mov	r0, r1
 8009cc4:	4611      	mov	r1, r2
 8009cc6:	461a      	mov	r2, r3
 8009cc8:	4603      	mov	r3, r0
 8009cca:	70fb      	strb	r3, [r7, #3]
 8009ccc:	460b      	mov	r3, r1
 8009cce:	70bb      	strb	r3, [r7, #2]
 8009cd0:	4613      	mov	r3, r2
 8009cd2:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009cd4:	2300      	movs	r3, #0
 8009cd6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009cd8:	2300      	movs	r3, #0
 8009cda:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8009ce2:	787c      	ldrb	r4, [r7, #1]
 8009ce4:	78ba      	ldrb	r2, [r7, #2]
 8009ce6:	78f9      	ldrb	r1, [r7, #3]
 8009ce8:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8009cec:	9303      	str	r3, [sp, #12]
 8009cee:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8009cf0:	9302      	str	r3, [sp, #8]
 8009cf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cf4:	9301      	str	r3, [sp, #4]
 8009cf6:	f897 3020 	ldrb.w	r3, [r7, #32]
 8009cfa:	9300      	str	r3, [sp, #0]
 8009cfc:	4623      	mov	r3, r4
 8009cfe:	f7f7 ff81 	bl	8001c04 <HAL_HCD_HC_SubmitRequest>
 8009d02:	4603      	mov	r3, r0
 8009d04:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 8009d06:	7bfb      	ldrb	r3, [r7, #15]
 8009d08:	4618      	mov	r0, r3
 8009d0a:	f000 f86f 	bl	8009dec <USBH_Get_USB_Status>
 8009d0e:	4603      	mov	r3, r0
 8009d10:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009d12:	7bbb      	ldrb	r3, [r7, #14]
}
 8009d14:	4618      	mov	r0, r3
 8009d16:	3714      	adds	r7, #20
 8009d18:	46bd      	mov	sp, r7
 8009d1a:	bd90      	pop	{r4, r7, pc}

08009d1c <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8009d1c:	b580      	push	{r7, lr}
 8009d1e:	b082      	sub	sp, #8
 8009d20:	af00      	add	r7, sp, #0
 8009d22:	6078      	str	r0, [r7, #4]
 8009d24:	460b      	mov	r3, r1
 8009d26:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8009d2e:	78fa      	ldrb	r2, [r7, #3]
 8009d30:	4611      	mov	r1, r2
 8009d32:	4618      	mov	r0, r3
 8009d34:	f7f8 fa2a 	bl	800218c <HAL_HCD_HC_GetURBState>
 8009d38:	4603      	mov	r3, r0
}
 8009d3a:	4618      	mov	r0, r3
 8009d3c:	3708      	adds	r7, #8
 8009d3e:	46bd      	mov	sp, r7
 8009d40:	bd80      	pop	{r7, pc}

08009d42 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8009d42:	b580      	push	{r7, lr}
 8009d44:	b082      	sub	sp, #8
 8009d46:	af00      	add	r7, sp, #0
 8009d48:	6078      	str	r0, [r7, #4]
 8009d4a:	460b      	mov	r3, r1
 8009d4c:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8009d54:	2b01      	cmp	r3, #1
 8009d56:	d103      	bne.n	8009d60 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8009d58:	78fb      	ldrb	r3, [r7, #3]
 8009d5a:	4618      	mov	r0, r3
 8009d5c:	f000 f872 	bl	8009e44 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8009d60:	20c8      	movs	r0, #200	; 0xc8
 8009d62:	f7f7 f9e9 	bl	8001138 <HAL_Delay>
  return USBH_OK;
 8009d66:	2300      	movs	r3, #0
}
 8009d68:	4618      	mov	r0, r3
 8009d6a:	3708      	adds	r7, #8
 8009d6c:	46bd      	mov	sp, r7
 8009d6e:	bd80      	pop	{r7, pc}

08009d70 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8009d70:	b480      	push	{r7}
 8009d72:	b085      	sub	sp, #20
 8009d74:	af00      	add	r7, sp, #0
 8009d76:	6078      	str	r0, [r7, #4]
 8009d78:	460b      	mov	r3, r1
 8009d7a:	70fb      	strb	r3, [r7, #3]
 8009d7c:	4613      	mov	r3, r2
 8009d7e:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8009d86:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8009d88:	78fa      	ldrb	r2, [r7, #3]
 8009d8a:	68f9      	ldr	r1, [r7, #12]
 8009d8c:	4613      	mov	r3, r2
 8009d8e:	009b      	lsls	r3, r3, #2
 8009d90:	4413      	add	r3, r2
 8009d92:	00db      	lsls	r3, r3, #3
 8009d94:	440b      	add	r3, r1
 8009d96:	333b      	adds	r3, #59	; 0x3b
 8009d98:	781b      	ldrb	r3, [r3, #0]
 8009d9a:	2b00      	cmp	r3, #0
 8009d9c:	d00a      	beq.n	8009db4 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8009d9e:	78fa      	ldrb	r2, [r7, #3]
 8009da0:	68f9      	ldr	r1, [r7, #12]
 8009da2:	4613      	mov	r3, r2
 8009da4:	009b      	lsls	r3, r3, #2
 8009da6:	4413      	add	r3, r2
 8009da8:	00db      	lsls	r3, r3, #3
 8009daa:	440b      	add	r3, r1
 8009dac:	3350      	adds	r3, #80	; 0x50
 8009dae:	78ba      	ldrb	r2, [r7, #2]
 8009db0:	701a      	strb	r2, [r3, #0]
 8009db2:	e009      	b.n	8009dc8 <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8009db4:	78fa      	ldrb	r2, [r7, #3]
 8009db6:	68f9      	ldr	r1, [r7, #12]
 8009db8:	4613      	mov	r3, r2
 8009dba:	009b      	lsls	r3, r3, #2
 8009dbc:	4413      	add	r3, r2
 8009dbe:	00db      	lsls	r3, r3, #3
 8009dc0:	440b      	add	r3, r1
 8009dc2:	3351      	adds	r3, #81	; 0x51
 8009dc4:	78ba      	ldrb	r2, [r7, #2]
 8009dc6:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8009dc8:	2300      	movs	r3, #0
}
 8009dca:	4618      	mov	r0, r3
 8009dcc:	3714      	adds	r7, #20
 8009dce:	46bd      	mov	sp, r7
 8009dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dd4:	4770      	bx	lr

08009dd6 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 8009dd6:	b580      	push	{r7, lr}
 8009dd8:	b082      	sub	sp, #8
 8009dda:	af00      	add	r7, sp, #0
 8009ddc:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8009dde:	6878      	ldr	r0, [r7, #4]
 8009de0:	f7f7 f9aa 	bl	8001138 <HAL_Delay>
}
 8009de4:	bf00      	nop
 8009de6:	3708      	adds	r7, #8
 8009de8:	46bd      	mov	sp, r7
 8009dea:	bd80      	pop	{r7, pc}

08009dec <USBH_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009dec:	b480      	push	{r7}
 8009dee:	b085      	sub	sp, #20
 8009df0:	af00      	add	r7, sp, #0
 8009df2:	4603      	mov	r3, r0
 8009df4:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009df6:	2300      	movs	r3, #0
 8009df8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009dfa:	79fb      	ldrb	r3, [r7, #7]
 8009dfc:	2b03      	cmp	r3, #3
 8009dfe:	d817      	bhi.n	8009e30 <USBH_Get_USB_Status+0x44>
 8009e00:	a201      	add	r2, pc, #4	; (adr r2, 8009e08 <USBH_Get_USB_Status+0x1c>)
 8009e02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e06:	bf00      	nop
 8009e08:	08009e19 	.word	0x08009e19
 8009e0c:	08009e1f 	.word	0x08009e1f
 8009e10:	08009e25 	.word	0x08009e25
 8009e14:	08009e2b 	.word	0x08009e2b
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8009e18:	2300      	movs	r3, #0
 8009e1a:	73fb      	strb	r3, [r7, #15]
    break;
 8009e1c:	e00b      	b.n	8009e36 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8009e1e:	2302      	movs	r3, #2
 8009e20:	73fb      	strb	r3, [r7, #15]
    break;
 8009e22:	e008      	b.n	8009e36 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8009e24:	2301      	movs	r3, #1
 8009e26:	73fb      	strb	r3, [r7, #15]
    break;
 8009e28:	e005      	b.n	8009e36 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8009e2a:	2302      	movs	r3, #2
 8009e2c:	73fb      	strb	r3, [r7, #15]
    break;
 8009e2e:	e002      	b.n	8009e36 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8009e30:	2302      	movs	r3, #2
 8009e32:	73fb      	strb	r3, [r7, #15]
    break;
 8009e34:	bf00      	nop
  }
  return usb_status;
 8009e36:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e38:	4618      	mov	r0, r3
 8009e3a:	3714      	adds	r7, #20
 8009e3c:	46bd      	mov	sp, r7
 8009e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e42:	4770      	bx	lr

08009e44 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 8009e44:	b580      	push	{r7, lr}
 8009e46:	b084      	sub	sp, #16
 8009e48:	af00      	add	r7, sp, #0
 8009e4a:	4603      	mov	r3, r0
 8009e4c:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 8009e4e:	79fb      	ldrb	r3, [r7, #7]
 8009e50:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 8009e52:	79fb      	ldrb	r3, [r7, #7]
 8009e54:	2b00      	cmp	r3, #0
 8009e56:	d102      	bne.n	8009e5e <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_SET;
 8009e58:	2301      	movs	r3, #1
 8009e5a:	73fb      	strb	r3, [r7, #15]
 8009e5c:	e001      	b.n	8009e62 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 8009e5e:	2300      	movs	r3, #0
 8009e60:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 8009e62:	7bfb      	ldrb	r3, [r7, #15]
 8009e64:	461a      	mov	r2, r3
 8009e66:	2101      	movs	r1, #1
 8009e68:	4803      	ldr	r0, [pc, #12]	; (8009e78 <MX_DriverVbusFS+0x34>)
 8009e6a:	f7f7 fd6f 	bl	800194c <HAL_GPIO_WritePin>
}
 8009e6e:	bf00      	nop
 8009e70:	3710      	adds	r7, #16
 8009e72:	46bd      	mov	sp, r7
 8009e74:	bd80      	pop	{r7, pc}
 8009e76:	bf00      	nop
 8009e78:	40020800 	.word	0x40020800

08009e7c <__errno>:
 8009e7c:	4b01      	ldr	r3, [pc, #4]	; (8009e84 <__errno+0x8>)
 8009e7e:	6818      	ldr	r0, [r3, #0]
 8009e80:	4770      	bx	lr
 8009e82:	bf00      	nop
 8009e84:	2000002c 	.word	0x2000002c

08009e88 <__libc_init_array>:
 8009e88:	b570      	push	{r4, r5, r6, lr}
 8009e8a:	4e0d      	ldr	r6, [pc, #52]	; (8009ec0 <__libc_init_array+0x38>)
 8009e8c:	4c0d      	ldr	r4, [pc, #52]	; (8009ec4 <__libc_init_array+0x3c>)
 8009e8e:	1ba4      	subs	r4, r4, r6
 8009e90:	10a4      	asrs	r4, r4, #2
 8009e92:	2500      	movs	r5, #0
 8009e94:	42a5      	cmp	r5, r4
 8009e96:	d109      	bne.n	8009eac <__libc_init_array+0x24>
 8009e98:	4e0b      	ldr	r6, [pc, #44]	; (8009ec8 <__libc_init_array+0x40>)
 8009e9a:	4c0c      	ldr	r4, [pc, #48]	; (8009ecc <__libc_init_array+0x44>)
 8009e9c:	f000 f8ea 	bl	800a074 <_init>
 8009ea0:	1ba4      	subs	r4, r4, r6
 8009ea2:	10a4      	asrs	r4, r4, #2
 8009ea4:	2500      	movs	r5, #0
 8009ea6:	42a5      	cmp	r5, r4
 8009ea8:	d105      	bne.n	8009eb6 <__libc_init_array+0x2e>
 8009eaa:	bd70      	pop	{r4, r5, r6, pc}
 8009eac:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009eb0:	4798      	blx	r3
 8009eb2:	3501      	adds	r5, #1
 8009eb4:	e7ee      	b.n	8009e94 <__libc_init_array+0xc>
 8009eb6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009eba:	4798      	blx	r3
 8009ebc:	3501      	adds	r5, #1
 8009ebe:	e7f2      	b.n	8009ea6 <__libc_init_array+0x1e>
 8009ec0:	0800a2f0 	.word	0x0800a2f0
 8009ec4:	0800a2f0 	.word	0x0800a2f0
 8009ec8:	0800a2f0 	.word	0x0800a2f0
 8009ecc:	0800a2f4 	.word	0x0800a2f4

08009ed0 <malloc>:
 8009ed0:	4b02      	ldr	r3, [pc, #8]	; (8009edc <malloc+0xc>)
 8009ed2:	4601      	mov	r1, r0
 8009ed4:	6818      	ldr	r0, [r3, #0]
 8009ed6:	f000 b861 	b.w	8009f9c <_malloc_r>
 8009eda:	bf00      	nop
 8009edc:	2000002c 	.word	0x2000002c

08009ee0 <free>:
 8009ee0:	4b02      	ldr	r3, [pc, #8]	; (8009eec <free+0xc>)
 8009ee2:	4601      	mov	r1, r0
 8009ee4:	6818      	ldr	r0, [r3, #0]
 8009ee6:	f000 b80b 	b.w	8009f00 <_free_r>
 8009eea:	bf00      	nop
 8009eec:	2000002c 	.word	0x2000002c

08009ef0 <memset>:
 8009ef0:	4402      	add	r2, r0
 8009ef2:	4603      	mov	r3, r0
 8009ef4:	4293      	cmp	r3, r2
 8009ef6:	d100      	bne.n	8009efa <memset+0xa>
 8009ef8:	4770      	bx	lr
 8009efa:	f803 1b01 	strb.w	r1, [r3], #1
 8009efe:	e7f9      	b.n	8009ef4 <memset+0x4>

08009f00 <_free_r>:
 8009f00:	b538      	push	{r3, r4, r5, lr}
 8009f02:	4605      	mov	r5, r0
 8009f04:	2900      	cmp	r1, #0
 8009f06:	d045      	beq.n	8009f94 <_free_r+0x94>
 8009f08:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009f0c:	1f0c      	subs	r4, r1, #4
 8009f0e:	2b00      	cmp	r3, #0
 8009f10:	bfb8      	it	lt
 8009f12:	18e4      	addlt	r4, r4, r3
 8009f14:	f000 f8ac 	bl	800a070 <__malloc_lock>
 8009f18:	4a1f      	ldr	r2, [pc, #124]	; (8009f98 <_free_r+0x98>)
 8009f1a:	6813      	ldr	r3, [r2, #0]
 8009f1c:	4610      	mov	r0, r2
 8009f1e:	b933      	cbnz	r3, 8009f2e <_free_r+0x2e>
 8009f20:	6063      	str	r3, [r4, #4]
 8009f22:	6014      	str	r4, [r2, #0]
 8009f24:	4628      	mov	r0, r5
 8009f26:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009f2a:	f000 b8a2 	b.w	800a072 <__malloc_unlock>
 8009f2e:	42a3      	cmp	r3, r4
 8009f30:	d90c      	bls.n	8009f4c <_free_r+0x4c>
 8009f32:	6821      	ldr	r1, [r4, #0]
 8009f34:	1862      	adds	r2, r4, r1
 8009f36:	4293      	cmp	r3, r2
 8009f38:	bf04      	itt	eq
 8009f3a:	681a      	ldreq	r2, [r3, #0]
 8009f3c:	685b      	ldreq	r3, [r3, #4]
 8009f3e:	6063      	str	r3, [r4, #4]
 8009f40:	bf04      	itt	eq
 8009f42:	1852      	addeq	r2, r2, r1
 8009f44:	6022      	streq	r2, [r4, #0]
 8009f46:	6004      	str	r4, [r0, #0]
 8009f48:	e7ec      	b.n	8009f24 <_free_r+0x24>
 8009f4a:	4613      	mov	r3, r2
 8009f4c:	685a      	ldr	r2, [r3, #4]
 8009f4e:	b10a      	cbz	r2, 8009f54 <_free_r+0x54>
 8009f50:	42a2      	cmp	r2, r4
 8009f52:	d9fa      	bls.n	8009f4a <_free_r+0x4a>
 8009f54:	6819      	ldr	r1, [r3, #0]
 8009f56:	1858      	adds	r0, r3, r1
 8009f58:	42a0      	cmp	r0, r4
 8009f5a:	d10b      	bne.n	8009f74 <_free_r+0x74>
 8009f5c:	6820      	ldr	r0, [r4, #0]
 8009f5e:	4401      	add	r1, r0
 8009f60:	1858      	adds	r0, r3, r1
 8009f62:	4282      	cmp	r2, r0
 8009f64:	6019      	str	r1, [r3, #0]
 8009f66:	d1dd      	bne.n	8009f24 <_free_r+0x24>
 8009f68:	6810      	ldr	r0, [r2, #0]
 8009f6a:	6852      	ldr	r2, [r2, #4]
 8009f6c:	605a      	str	r2, [r3, #4]
 8009f6e:	4401      	add	r1, r0
 8009f70:	6019      	str	r1, [r3, #0]
 8009f72:	e7d7      	b.n	8009f24 <_free_r+0x24>
 8009f74:	d902      	bls.n	8009f7c <_free_r+0x7c>
 8009f76:	230c      	movs	r3, #12
 8009f78:	602b      	str	r3, [r5, #0]
 8009f7a:	e7d3      	b.n	8009f24 <_free_r+0x24>
 8009f7c:	6820      	ldr	r0, [r4, #0]
 8009f7e:	1821      	adds	r1, r4, r0
 8009f80:	428a      	cmp	r2, r1
 8009f82:	bf04      	itt	eq
 8009f84:	6811      	ldreq	r1, [r2, #0]
 8009f86:	6852      	ldreq	r2, [r2, #4]
 8009f88:	6062      	str	r2, [r4, #4]
 8009f8a:	bf04      	itt	eq
 8009f8c:	1809      	addeq	r1, r1, r0
 8009f8e:	6021      	streq	r1, [r4, #0]
 8009f90:	605c      	str	r4, [r3, #4]
 8009f92:	e7c7      	b.n	8009f24 <_free_r+0x24>
 8009f94:	bd38      	pop	{r3, r4, r5, pc}
 8009f96:	bf00      	nop
 8009f98:	200000b8 	.word	0x200000b8

08009f9c <_malloc_r>:
 8009f9c:	b570      	push	{r4, r5, r6, lr}
 8009f9e:	1ccd      	adds	r5, r1, #3
 8009fa0:	f025 0503 	bic.w	r5, r5, #3
 8009fa4:	3508      	adds	r5, #8
 8009fa6:	2d0c      	cmp	r5, #12
 8009fa8:	bf38      	it	cc
 8009faa:	250c      	movcc	r5, #12
 8009fac:	2d00      	cmp	r5, #0
 8009fae:	4606      	mov	r6, r0
 8009fb0:	db01      	blt.n	8009fb6 <_malloc_r+0x1a>
 8009fb2:	42a9      	cmp	r1, r5
 8009fb4:	d903      	bls.n	8009fbe <_malloc_r+0x22>
 8009fb6:	230c      	movs	r3, #12
 8009fb8:	6033      	str	r3, [r6, #0]
 8009fba:	2000      	movs	r0, #0
 8009fbc:	bd70      	pop	{r4, r5, r6, pc}
 8009fbe:	f000 f857 	bl	800a070 <__malloc_lock>
 8009fc2:	4a21      	ldr	r2, [pc, #132]	; (800a048 <_malloc_r+0xac>)
 8009fc4:	6814      	ldr	r4, [r2, #0]
 8009fc6:	4621      	mov	r1, r4
 8009fc8:	b991      	cbnz	r1, 8009ff0 <_malloc_r+0x54>
 8009fca:	4c20      	ldr	r4, [pc, #128]	; (800a04c <_malloc_r+0xb0>)
 8009fcc:	6823      	ldr	r3, [r4, #0]
 8009fce:	b91b      	cbnz	r3, 8009fd8 <_malloc_r+0x3c>
 8009fd0:	4630      	mov	r0, r6
 8009fd2:	f000 f83d 	bl	800a050 <_sbrk_r>
 8009fd6:	6020      	str	r0, [r4, #0]
 8009fd8:	4629      	mov	r1, r5
 8009fda:	4630      	mov	r0, r6
 8009fdc:	f000 f838 	bl	800a050 <_sbrk_r>
 8009fe0:	1c43      	adds	r3, r0, #1
 8009fe2:	d124      	bne.n	800a02e <_malloc_r+0x92>
 8009fe4:	230c      	movs	r3, #12
 8009fe6:	6033      	str	r3, [r6, #0]
 8009fe8:	4630      	mov	r0, r6
 8009fea:	f000 f842 	bl	800a072 <__malloc_unlock>
 8009fee:	e7e4      	b.n	8009fba <_malloc_r+0x1e>
 8009ff0:	680b      	ldr	r3, [r1, #0]
 8009ff2:	1b5b      	subs	r3, r3, r5
 8009ff4:	d418      	bmi.n	800a028 <_malloc_r+0x8c>
 8009ff6:	2b0b      	cmp	r3, #11
 8009ff8:	d90f      	bls.n	800a01a <_malloc_r+0x7e>
 8009ffa:	600b      	str	r3, [r1, #0]
 8009ffc:	50cd      	str	r5, [r1, r3]
 8009ffe:	18cc      	adds	r4, r1, r3
 800a000:	4630      	mov	r0, r6
 800a002:	f000 f836 	bl	800a072 <__malloc_unlock>
 800a006:	f104 000b 	add.w	r0, r4, #11
 800a00a:	1d23      	adds	r3, r4, #4
 800a00c:	f020 0007 	bic.w	r0, r0, #7
 800a010:	1ac3      	subs	r3, r0, r3
 800a012:	d0d3      	beq.n	8009fbc <_malloc_r+0x20>
 800a014:	425a      	negs	r2, r3
 800a016:	50e2      	str	r2, [r4, r3]
 800a018:	e7d0      	b.n	8009fbc <_malloc_r+0x20>
 800a01a:	428c      	cmp	r4, r1
 800a01c:	684b      	ldr	r3, [r1, #4]
 800a01e:	bf16      	itet	ne
 800a020:	6063      	strne	r3, [r4, #4]
 800a022:	6013      	streq	r3, [r2, #0]
 800a024:	460c      	movne	r4, r1
 800a026:	e7eb      	b.n	800a000 <_malloc_r+0x64>
 800a028:	460c      	mov	r4, r1
 800a02a:	6849      	ldr	r1, [r1, #4]
 800a02c:	e7cc      	b.n	8009fc8 <_malloc_r+0x2c>
 800a02e:	1cc4      	adds	r4, r0, #3
 800a030:	f024 0403 	bic.w	r4, r4, #3
 800a034:	42a0      	cmp	r0, r4
 800a036:	d005      	beq.n	800a044 <_malloc_r+0xa8>
 800a038:	1a21      	subs	r1, r4, r0
 800a03a:	4630      	mov	r0, r6
 800a03c:	f000 f808 	bl	800a050 <_sbrk_r>
 800a040:	3001      	adds	r0, #1
 800a042:	d0cf      	beq.n	8009fe4 <_malloc_r+0x48>
 800a044:	6025      	str	r5, [r4, #0]
 800a046:	e7db      	b.n	800a000 <_malloc_r+0x64>
 800a048:	200000b8 	.word	0x200000b8
 800a04c:	200000bc 	.word	0x200000bc

0800a050 <_sbrk_r>:
 800a050:	b538      	push	{r3, r4, r5, lr}
 800a052:	4c06      	ldr	r4, [pc, #24]	; (800a06c <_sbrk_r+0x1c>)
 800a054:	2300      	movs	r3, #0
 800a056:	4605      	mov	r5, r0
 800a058:	4608      	mov	r0, r1
 800a05a:	6023      	str	r3, [r4, #0]
 800a05c:	f7f6 fe86 	bl	8000d6c <_sbrk>
 800a060:	1c43      	adds	r3, r0, #1
 800a062:	d102      	bne.n	800a06a <_sbrk_r+0x1a>
 800a064:	6823      	ldr	r3, [r4, #0]
 800a066:	b103      	cbz	r3, 800a06a <_sbrk_r+0x1a>
 800a068:	602b      	str	r3, [r5, #0]
 800a06a:	bd38      	pop	{r3, r4, r5, pc}
 800a06c:	200008dc 	.word	0x200008dc

0800a070 <__malloc_lock>:
 800a070:	4770      	bx	lr

0800a072 <__malloc_unlock>:
 800a072:	4770      	bx	lr

0800a074 <_init>:
 800a074:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a076:	bf00      	nop
 800a078:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a07a:	bc08      	pop	{r3}
 800a07c:	469e      	mov	lr, r3
 800a07e:	4770      	bx	lr

0800a080 <_fini>:
 800a080:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a082:	bf00      	nop
 800a084:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a086:	bc08      	pop	{r3}
 800a088:	469e      	mov	lr, r3
 800a08a:	4770      	bx	lr

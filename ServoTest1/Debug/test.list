
test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000da60  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000378  0800dbf8  0800dbf8  0001dbf8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800df70  0800df70  000205e8  2**0
                  CONTENTS
  4 .ARM          00000008  0800df70  0800df70  0001df70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800df78  0800df78  000205e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800df78  0800df78  0001df78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800df7c  0800df7c  0001df7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000005e8  20000000  0800df80  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001ba8  200005e8  0800e568  000205e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002190  0800e568  00022190  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000205e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00020496  00000000  00000000  00020618  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00004924  00000000  00000000  00040aae  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000018c8  00000000  00000000  000453d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001698  00000000  00000000  00046ca0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001c418  00000000  00000000  00048338  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001cd1f  00000000  00000000  00064750  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00095b51  00000000  00000000  0008146f  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      000000fa  00000000  00000000  00116fc0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006a44  00000000  00000000  001170bc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	200005e8 	.word	0x200005e8
 80001b4:	00000000 	.word	0x00000000
 80001b8:	0800dbe0 	.word	0x0800dbe0

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	200005ec 	.word	0x200005ec
 80001d4:	0800dbe0 	.word	0x0800dbe0

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000316:	f1a4 0401 	sub.w	r4, r4, #1
 800031a:	d1e9      	bne.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__aeabi_d2iz>:
 8000974:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000978:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 800097c:	d215      	bcs.n	80009aa <__aeabi_d2iz+0x36>
 800097e:	d511      	bpl.n	80009a4 <__aeabi_d2iz+0x30>
 8000980:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000984:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000988:	d912      	bls.n	80009b0 <__aeabi_d2iz+0x3c>
 800098a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800098e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000992:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000996:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800099a:	fa23 f002 	lsr.w	r0, r3, r2
 800099e:	bf18      	it	ne
 80009a0:	4240      	negne	r0, r0
 80009a2:	4770      	bx	lr
 80009a4:	f04f 0000 	mov.w	r0, #0
 80009a8:	4770      	bx	lr
 80009aa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009ae:	d105      	bne.n	80009bc <__aeabi_d2iz+0x48>
 80009b0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 80009b4:	bf08      	it	eq
 80009b6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80009ba:	4770      	bx	lr
 80009bc:	f04f 0000 	mov.w	r0, #0
 80009c0:	4770      	bx	lr
 80009c2:	bf00      	nop

080009c4 <__aeabi_d2f>:
 80009c4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009c8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80009cc:	bf24      	itt	cs
 80009ce:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80009d2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80009d6:	d90d      	bls.n	80009f4 <__aeabi_d2f+0x30>
 80009d8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80009dc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80009e0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80009e4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80009e8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80009ec:	bf08      	it	eq
 80009ee:	f020 0001 	biceq.w	r0, r0, #1
 80009f2:	4770      	bx	lr
 80009f4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80009f8:	d121      	bne.n	8000a3e <__aeabi_d2f+0x7a>
 80009fa:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80009fe:	bfbc      	itt	lt
 8000a00:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a04:	4770      	bxlt	lr
 8000a06:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a0a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a0e:	f1c2 0218 	rsb	r2, r2, #24
 8000a12:	f1c2 0c20 	rsb	ip, r2, #32
 8000a16:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a1a:	fa20 f002 	lsr.w	r0, r0, r2
 8000a1e:	bf18      	it	ne
 8000a20:	f040 0001 	orrne.w	r0, r0, #1
 8000a24:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a28:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a2c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a30:	ea40 000c 	orr.w	r0, r0, ip
 8000a34:	fa23 f302 	lsr.w	r3, r3, r2
 8000a38:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a3c:	e7cc      	b.n	80009d8 <__aeabi_d2f+0x14>
 8000a3e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a42:	d107      	bne.n	8000a54 <__aeabi_d2f+0x90>
 8000a44:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a48:	bf1e      	ittt	ne
 8000a4a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000a4e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a52:	4770      	bxne	lr
 8000a54:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000a58:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000a5c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a60:	4770      	bx	lr
 8000a62:	bf00      	nop

08000a64 <__aeabi_uldivmod>:
 8000a64:	b953      	cbnz	r3, 8000a7c <__aeabi_uldivmod+0x18>
 8000a66:	b94a      	cbnz	r2, 8000a7c <__aeabi_uldivmod+0x18>
 8000a68:	2900      	cmp	r1, #0
 8000a6a:	bf08      	it	eq
 8000a6c:	2800      	cmpeq	r0, #0
 8000a6e:	bf1c      	itt	ne
 8000a70:	f04f 31ff 	movne.w	r1, #4294967295
 8000a74:	f04f 30ff 	movne.w	r0, #4294967295
 8000a78:	f000 b972 	b.w	8000d60 <__aeabi_idiv0>
 8000a7c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a80:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a84:	f000 f806 	bl	8000a94 <__udivmoddi4>
 8000a88:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a8c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a90:	b004      	add	sp, #16
 8000a92:	4770      	bx	lr

08000a94 <__udivmoddi4>:
 8000a94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a98:	9e08      	ldr	r6, [sp, #32]
 8000a9a:	4604      	mov	r4, r0
 8000a9c:	4688      	mov	r8, r1
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d14b      	bne.n	8000b3a <__udivmoddi4+0xa6>
 8000aa2:	428a      	cmp	r2, r1
 8000aa4:	4615      	mov	r5, r2
 8000aa6:	d967      	bls.n	8000b78 <__udivmoddi4+0xe4>
 8000aa8:	fab2 f282 	clz	r2, r2
 8000aac:	b14a      	cbz	r2, 8000ac2 <__udivmoddi4+0x2e>
 8000aae:	f1c2 0720 	rsb	r7, r2, #32
 8000ab2:	fa01 f302 	lsl.w	r3, r1, r2
 8000ab6:	fa20 f707 	lsr.w	r7, r0, r7
 8000aba:	4095      	lsls	r5, r2
 8000abc:	ea47 0803 	orr.w	r8, r7, r3
 8000ac0:	4094      	lsls	r4, r2
 8000ac2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000ac6:	0c23      	lsrs	r3, r4, #16
 8000ac8:	fbb8 f7fe 	udiv	r7, r8, lr
 8000acc:	fa1f fc85 	uxth.w	ip, r5
 8000ad0:	fb0e 8817 	mls	r8, lr, r7, r8
 8000ad4:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000ad8:	fb07 f10c 	mul.w	r1, r7, ip
 8000adc:	4299      	cmp	r1, r3
 8000ade:	d909      	bls.n	8000af4 <__udivmoddi4+0x60>
 8000ae0:	18eb      	adds	r3, r5, r3
 8000ae2:	f107 30ff 	add.w	r0, r7, #4294967295
 8000ae6:	f080 811b 	bcs.w	8000d20 <__udivmoddi4+0x28c>
 8000aea:	4299      	cmp	r1, r3
 8000aec:	f240 8118 	bls.w	8000d20 <__udivmoddi4+0x28c>
 8000af0:	3f02      	subs	r7, #2
 8000af2:	442b      	add	r3, r5
 8000af4:	1a5b      	subs	r3, r3, r1
 8000af6:	b2a4      	uxth	r4, r4
 8000af8:	fbb3 f0fe 	udiv	r0, r3, lr
 8000afc:	fb0e 3310 	mls	r3, lr, r0, r3
 8000b00:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b04:	fb00 fc0c 	mul.w	ip, r0, ip
 8000b08:	45a4      	cmp	ip, r4
 8000b0a:	d909      	bls.n	8000b20 <__udivmoddi4+0x8c>
 8000b0c:	192c      	adds	r4, r5, r4
 8000b0e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b12:	f080 8107 	bcs.w	8000d24 <__udivmoddi4+0x290>
 8000b16:	45a4      	cmp	ip, r4
 8000b18:	f240 8104 	bls.w	8000d24 <__udivmoddi4+0x290>
 8000b1c:	3802      	subs	r0, #2
 8000b1e:	442c      	add	r4, r5
 8000b20:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000b24:	eba4 040c 	sub.w	r4, r4, ip
 8000b28:	2700      	movs	r7, #0
 8000b2a:	b11e      	cbz	r6, 8000b34 <__udivmoddi4+0xa0>
 8000b2c:	40d4      	lsrs	r4, r2
 8000b2e:	2300      	movs	r3, #0
 8000b30:	e9c6 4300 	strd	r4, r3, [r6]
 8000b34:	4639      	mov	r1, r7
 8000b36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b3a:	428b      	cmp	r3, r1
 8000b3c:	d909      	bls.n	8000b52 <__udivmoddi4+0xbe>
 8000b3e:	2e00      	cmp	r6, #0
 8000b40:	f000 80eb 	beq.w	8000d1a <__udivmoddi4+0x286>
 8000b44:	2700      	movs	r7, #0
 8000b46:	e9c6 0100 	strd	r0, r1, [r6]
 8000b4a:	4638      	mov	r0, r7
 8000b4c:	4639      	mov	r1, r7
 8000b4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b52:	fab3 f783 	clz	r7, r3
 8000b56:	2f00      	cmp	r7, #0
 8000b58:	d147      	bne.n	8000bea <__udivmoddi4+0x156>
 8000b5a:	428b      	cmp	r3, r1
 8000b5c:	d302      	bcc.n	8000b64 <__udivmoddi4+0xd0>
 8000b5e:	4282      	cmp	r2, r0
 8000b60:	f200 80fa 	bhi.w	8000d58 <__udivmoddi4+0x2c4>
 8000b64:	1a84      	subs	r4, r0, r2
 8000b66:	eb61 0303 	sbc.w	r3, r1, r3
 8000b6a:	2001      	movs	r0, #1
 8000b6c:	4698      	mov	r8, r3
 8000b6e:	2e00      	cmp	r6, #0
 8000b70:	d0e0      	beq.n	8000b34 <__udivmoddi4+0xa0>
 8000b72:	e9c6 4800 	strd	r4, r8, [r6]
 8000b76:	e7dd      	b.n	8000b34 <__udivmoddi4+0xa0>
 8000b78:	b902      	cbnz	r2, 8000b7c <__udivmoddi4+0xe8>
 8000b7a:	deff      	udf	#255	; 0xff
 8000b7c:	fab2 f282 	clz	r2, r2
 8000b80:	2a00      	cmp	r2, #0
 8000b82:	f040 808f 	bne.w	8000ca4 <__udivmoddi4+0x210>
 8000b86:	1b49      	subs	r1, r1, r5
 8000b88:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000b8c:	fa1f f885 	uxth.w	r8, r5
 8000b90:	2701      	movs	r7, #1
 8000b92:	fbb1 fcfe 	udiv	ip, r1, lr
 8000b96:	0c23      	lsrs	r3, r4, #16
 8000b98:	fb0e 111c 	mls	r1, lr, ip, r1
 8000b9c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ba0:	fb08 f10c 	mul.w	r1, r8, ip
 8000ba4:	4299      	cmp	r1, r3
 8000ba6:	d907      	bls.n	8000bb8 <__udivmoddi4+0x124>
 8000ba8:	18eb      	adds	r3, r5, r3
 8000baa:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000bae:	d202      	bcs.n	8000bb6 <__udivmoddi4+0x122>
 8000bb0:	4299      	cmp	r1, r3
 8000bb2:	f200 80cd 	bhi.w	8000d50 <__udivmoddi4+0x2bc>
 8000bb6:	4684      	mov	ip, r0
 8000bb8:	1a59      	subs	r1, r3, r1
 8000bba:	b2a3      	uxth	r3, r4
 8000bbc:	fbb1 f0fe 	udiv	r0, r1, lr
 8000bc0:	fb0e 1410 	mls	r4, lr, r0, r1
 8000bc4:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000bc8:	fb08 f800 	mul.w	r8, r8, r0
 8000bcc:	45a0      	cmp	r8, r4
 8000bce:	d907      	bls.n	8000be0 <__udivmoddi4+0x14c>
 8000bd0:	192c      	adds	r4, r5, r4
 8000bd2:	f100 33ff 	add.w	r3, r0, #4294967295
 8000bd6:	d202      	bcs.n	8000bde <__udivmoddi4+0x14a>
 8000bd8:	45a0      	cmp	r8, r4
 8000bda:	f200 80b6 	bhi.w	8000d4a <__udivmoddi4+0x2b6>
 8000bde:	4618      	mov	r0, r3
 8000be0:	eba4 0408 	sub.w	r4, r4, r8
 8000be4:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000be8:	e79f      	b.n	8000b2a <__udivmoddi4+0x96>
 8000bea:	f1c7 0c20 	rsb	ip, r7, #32
 8000bee:	40bb      	lsls	r3, r7
 8000bf0:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000bf4:	ea4e 0e03 	orr.w	lr, lr, r3
 8000bf8:	fa01 f407 	lsl.w	r4, r1, r7
 8000bfc:	fa20 f50c 	lsr.w	r5, r0, ip
 8000c00:	fa21 f30c 	lsr.w	r3, r1, ip
 8000c04:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000c08:	4325      	orrs	r5, r4
 8000c0a:	fbb3 f9f8 	udiv	r9, r3, r8
 8000c0e:	0c2c      	lsrs	r4, r5, #16
 8000c10:	fb08 3319 	mls	r3, r8, r9, r3
 8000c14:	fa1f fa8e 	uxth.w	sl, lr
 8000c18:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000c1c:	fb09 f40a 	mul.w	r4, r9, sl
 8000c20:	429c      	cmp	r4, r3
 8000c22:	fa02 f207 	lsl.w	r2, r2, r7
 8000c26:	fa00 f107 	lsl.w	r1, r0, r7
 8000c2a:	d90b      	bls.n	8000c44 <__udivmoddi4+0x1b0>
 8000c2c:	eb1e 0303 	adds.w	r3, lr, r3
 8000c30:	f109 30ff 	add.w	r0, r9, #4294967295
 8000c34:	f080 8087 	bcs.w	8000d46 <__udivmoddi4+0x2b2>
 8000c38:	429c      	cmp	r4, r3
 8000c3a:	f240 8084 	bls.w	8000d46 <__udivmoddi4+0x2b2>
 8000c3e:	f1a9 0902 	sub.w	r9, r9, #2
 8000c42:	4473      	add	r3, lr
 8000c44:	1b1b      	subs	r3, r3, r4
 8000c46:	b2ad      	uxth	r5, r5
 8000c48:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c4c:	fb08 3310 	mls	r3, r8, r0, r3
 8000c50:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000c54:	fb00 fa0a 	mul.w	sl, r0, sl
 8000c58:	45a2      	cmp	sl, r4
 8000c5a:	d908      	bls.n	8000c6e <__udivmoddi4+0x1da>
 8000c5c:	eb1e 0404 	adds.w	r4, lr, r4
 8000c60:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c64:	d26b      	bcs.n	8000d3e <__udivmoddi4+0x2aa>
 8000c66:	45a2      	cmp	sl, r4
 8000c68:	d969      	bls.n	8000d3e <__udivmoddi4+0x2aa>
 8000c6a:	3802      	subs	r0, #2
 8000c6c:	4474      	add	r4, lr
 8000c6e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000c72:	fba0 8902 	umull	r8, r9, r0, r2
 8000c76:	eba4 040a 	sub.w	r4, r4, sl
 8000c7a:	454c      	cmp	r4, r9
 8000c7c:	46c2      	mov	sl, r8
 8000c7e:	464b      	mov	r3, r9
 8000c80:	d354      	bcc.n	8000d2c <__udivmoddi4+0x298>
 8000c82:	d051      	beq.n	8000d28 <__udivmoddi4+0x294>
 8000c84:	2e00      	cmp	r6, #0
 8000c86:	d069      	beq.n	8000d5c <__udivmoddi4+0x2c8>
 8000c88:	ebb1 050a 	subs.w	r5, r1, sl
 8000c8c:	eb64 0403 	sbc.w	r4, r4, r3
 8000c90:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000c94:	40fd      	lsrs	r5, r7
 8000c96:	40fc      	lsrs	r4, r7
 8000c98:	ea4c 0505 	orr.w	r5, ip, r5
 8000c9c:	e9c6 5400 	strd	r5, r4, [r6]
 8000ca0:	2700      	movs	r7, #0
 8000ca2:	e747      	b.n	8000b34 <__udivmoddi4+0xa0>
 8000ca4:	f1c2 0320 	rsb	r3, r2, #32
 8000ca8:	fa20 f703 	lsr.w	r7, r0, r3
 8000cac:	4095      	lsls	r5, r2
 8000cae:	fa01 f002 	lsl.w	r0, r1, r2
 8000cb2:	fa21 f303 	lsr.w	r3, r1, r3
 8000cb6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cba:	4338      	orrs	r0, r7
 8000cbc:	0c01      	lsrs	r1, r0, #16
 8000cbe:	fbb3 f7fe 	udiv	r7, r3, lr
 8000cc2:	fa1f f885 	uxth.w	r8, r5
 8000cc6:	fb0e 3317 	mls	r3, lr, r7, r3
 8000cca:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cce:	fb07 f308 	mul.w	r3, r7, r8
 8000cd2:	428b      	cmp	r3, r1
 8000cd4:	fa04 f402 	lsl.w	r4, r4, r2
 8000cd8:	d907      	bls.n	8000cea <__udivmoddi4+0x256>
 8000cda:	1869      	adds	r1, r5, r1
 8000cdc:	f107 3cff 	add.w	ip, r7, #4294967295
 8000ce0:	d22f      	bcs.n	8000d42 <__udivmoddi4+0x2ae>
 8000ce2:	428b      	cmp	r3, r1
 8000ce4:	d92d      	bls.n	8000d42 <__udivmoddi4+0x2ae>
 8000ce6:	3f02      	subs	r7, #2
 8000ce8:	4429      	add	r1, r5
 8000cea:	1acb      	subs	r3, r1, r3
 8000cec:	b281      	uxth	r1, r0
 8000cee:	fbb3 f0fe 	udiv	r0, r3, lr
 8000cf2:	fb0e 3310 	mls	r3, lr, r0, r3
 8000cf6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cfa:	fb00 f308 	mul.w	r3, r0, r8
 8000cfe:	428b      	cmp	r3, r1
 8000d00:	d907      	bls.n	8000d12 <__udivmoddi4+0x27e>
 8000d02:	1869      	adds	r1, r5, r1
 8000d04:	f100 3cff 	add.w	ip, r0, #4294967295
 8000d08:	d217      	bcs.n	8000d3a <__udivmoddi4+0x2a6>
 8000d0a:	428b      	cmp	r3, r1
 8000d0c:	d915      	bls.n	8000d3a <__udivmoddi4+0x2a6>
 8000d0e:	3802      	subs	r0, #2
 8000d10:	4429      	add	r1, r5
 8000d12:	1ac9      	subs	r1, r1, r3
 8000d14:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000d18:	e73b      	b.n	8000b92 <__udivmoddi4+0xfe>
 8000d1a:	4637      	mov	r7, r6
 8000d1c:	4630      	mov	r0, r6
 8000d1e:	e709      	b.n	8000b34 <__udivmoddi4+0xa0>
 8000d20:	4607      	mov	r7, r0
 8000d22:	e6e7      	b.n	8000af4 <__udivmoddi4+0x60>
 8000d24:	4618      	mov	r0, r3
 8000d26:	e6fb      	b.n	8000b20 <__udivmoddi4+0x8c>
 8000d28:	4541      	cmp	r1, r8
 8000d2a:	d2ab      	bcs.n	8000c84 <__udivmoddi4+0x1f0>
 8000d2c:	ebb8 0a02 	subs.w	sl, r8, r2
 8000d30:	eb69 020e 	sbc.w	r2, r9, lr
 8000d34:	3801      	subs	r0, #1
 8000d36:	4613      	mov	r3, r2
 8000d38:	e7a4      	b.n	8000c84 <__udivmoddi4+0x1f0>
 8000d3a:	4660      	mov	r0, ip
 8000d3c:	e7e9      	b.n	8000d12 <__udivmoddi4+0x27e>
 8000d3e:	4618      	mov	r0, r3
 8000d40:	e795      	b.n	8000c6e <__udivmoddi4+0x1da>
 8000d42:	4667      	mov	r7, ip
 8000d44:	e7d1      	b.n	8000cea <__udivmoddi4+0x256>
 8000d46:	4681      	mov	r9, r0
 8000d48:	e77c      	b.n	8000c44 <__udivmoddi4+0x1b0>
 8000d4a:	3802      	subs	r0, #2
 8000d4c:	442c      	add	r4, r5
 8000d4e:	e747      	b.n	8000be0 <__udivmoddi4+0x14c>
 8000d50:	f1ac 0c02 	sub.w	ip, ip, #2
 8000d54:	442b      	add	r3, r5
 8000d56:	e72f      	b.n	8000bb8 <__udivmoddi4+0x124>
 8000d58:	4638      	mov	r0, r7
 8000d5a:	e708      	b.n	8000b6e <__udivmoddi4+0xda>
 8000d5c:	4637      	mov	r7, r6
 8000d5e:	e6e9      	b.n	8000b34 <__udivmoddi4+0xa0>

08000d60 <__aeabi_idiv0>:
 8000d60:	4770      	bx	lr
 8000d62:	bf00      	nop

08000d64 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	af00      	add	r7, sp, #0

  hcrc.Instance = CRC;
 8000d68:	4b06      	ldr	r3, [pc, #24]	; (8000d84 <MX_CRC_Init+0x20>)
 8000d6a:	4a07      	ldr	r2, [pc, #28]	; (8000d88 <MX_CRC_Init+0x24>)
 8000d6c:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000d6e:	4805      	ldr	r0, [pc, #20]	; (8000d84 <MX_CRC_Init+0x20>)
 8000d70:	f001 f8c2 	bl	8001ef8 <HAL_CRC_Init>
 8000d74:	4603      	mov	r3, r0
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d001      	beq.n	8000d7e <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 8000d7a:	f000 fc73 	bl	8001664 <Error_Handler>
  }

}
 8000d7e:	bf00      	nop
 8000d80:	bd80      	pop	{r7, pc}
 8000d82:	bf00      	nop
 8000d84:	20000618 	.word	0x20000618
 8000d88:	40023000 	.word	0x40023000

08000d8c <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 8000d8c:	b480      	push	{r7}
 8000d8e:	b085      	sub	sp, #20
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	4a0b      	ldr	r2, [pc, #44]	; (8000dc8 <HAL_CRC_MspInit+0x3c>)
 8000d9a:	4293      	cmp	r3, r2
 8000d9c:	d10d      	bne.n	8000dba <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000d9e:	2300      	movs	r3, #0
 8000da0:	60fb      	str	r3, [r7, #12]
 8000da2:	4b0a      	ldr	r3, [pc, #40]	; (8000dcc <HAL_CRC_MspInit+0x40>)
 8000da4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000da6:	4a09      	ldr	r2, [pc, #36]	; (8000dcc <HAL_CRC_MspInit+0x40>)
 8000da8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000dac:	6313      	str	r3, [r2, #48]	; 0x30
 8000dae:	4b07      	ldr	r3, [pc, #28]	; (8000dcc <HAL_CRC_MspInit+0x40>)
 8000db0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000db2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000db6:	60fb      	str	r3, [r7, #12]
 8000db8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 8000dba:	bf00      	nop
 8000dbc:	3714      	adds	r7, #20
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc4:	4770      	bx	lr
 8000dc6:	bf00      	nop
 8000dc8:	40023000 	.word	0x40023000
 8000dcc:	40023800 	.word	0x40023800

08000dd0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b082      	sub	sp, #8
 8000dd4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	607b      	str	r3, [r7, #4]
 8000dda:	4b10      	ldr	r3, [pc, #64]	; (8000e1c <MX_DMA_Init+0x4c>)
 8000ddc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dde:	4a0f      	ldr	r2, [pc, #60]	; (8000e1c <MX_DMA_Init+0x4c>)
 8000de0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000de4:	6313      	str	r3, [r2, #48]	; 0x30
 8000de6:	4b0d      	ldr	r3, [pc, #52]	; (8000e1c <MX_DMA_Init+0x4c>)
 8000de8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dea:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000dee:	607b      	str	r3, [r7, #4]
 8000df0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8000df2:	2200      	movs	r2, #0
 8000df4:	2100      	movs	r1, #0
 8000df6:	200e      	movs	r0, #14
 8000df8:	f001 f82e 	bl	8001e58 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8000dfc:	200e      	movs	r0, #14
 8000dfe:	f001 f857 	bl	8001eb0 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8000e02:	2200      	movs	r2, #0
 8000e04:	2100      	movs	r1, #0
 8000e06:	2010      	movs	r0, #16
 8000e08:	f001 f826 	bl	8001e58 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000e0c:	2010      	movs	r0, #16
 8000e0e:	f001 f84f 	bl	8001eb0 <HAL_NVIC_EnableIRQ>

}
 8000e12:	bf00      	nop
 8000e14:	3708      	adds	r7, #8
 8000e16:	46bd      	mov	sp, r7
 8000e18:	bd80      	pop	{r7, pc}
 8000e1a:	bf00      	nop
 8000e1c:	40023800 	.word	0x40023800

08000e20 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b08c      	sub	sp, #48	; 0x30
 8000e24:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e26:	f107 031c 	add.w	r3, r7, #28
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	601a      	str	r2, [r3, #0]
 8000e2e:	605a      	str	r2, [r3, #4]
 8000e30:	609a      	str	r2, [r3, #8]
 8000e32:	60da      	str	r2, [r3, #12]
 8000e34:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000e36:	2300      	movs	r3, #0
 8000e38:	61bb      	str	r3, [r7, #24]
 8000e3a:	4b60      	ldr	r3, [pc, #384]	; (8000fbc <MX_GPIO_Init+0x19c>)
 8000e3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e3e:	4a5f      	ldr	r2, [pc, #380]	; (8000fbc <MX_GPIO_Init+0x19c>)
 8000e40:	f043 0310 	orr.w	r3, r3, #16
 8000e44:	6313      	str	r3, [r2, #48]	; 0x30
 8000e46:	4b5d      	ldr	r3, [pc, #372]	; (8000fbc <MX_GPIO_Init+0x19c>)
 8000e48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e4a:	f003 0310 	and.w	r3, r3, #16
 8000e4e:	61bb      	str	r3, [r7, #24]
 8000e50:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e52:	2300      	movs	r3, #0
 8000e54:	617b      	str	r3, [r7, #20]
 8000e56:	4b59      	ldr	r3, [pc, #356]	; (8000fbc <MX_GPIO_Init+0x19c>)
 8000e58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e5a:	4a58      	ldr	r2, [pc, #352]	; (8000fbc <MX_GPIO_Init+0x19c>)
 8000e5c:	f043 0304 	orr.w	r3, r3, #4
 8000e60:	6313      	str	r3, [r2, #48]	; 0x30
 8000e62:	4b56      	ldr	r3, [pc, #344]	; (8000fbc <MX_GPIO_Init+0x19c>)
 8000e64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e66:	f003 0304 	and.w	r3, r3, #4
 8000e6a:	617b      	str	r3, [r7, #20]
 8000e6c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000e6e:	2300      	movs	r3, #0
 8000e70:	613b      	str	r3, [r7, #16]
 8000e72:	4b52      	ldr	r3, [pc, #328]	; (8000fbc <MX_GPIO_Init+0x19c>)
 8000e74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e76:	4a51      	ldr	r2, [pc, #324]	; (8000fbc <MX_GPIO_Init+0x19c>)
 8000e78:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e7c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e7e:	4b4f      	ldr	r3, [pc, #316]	; (8000fbc <MX_GPIO_Init+0x19c>)
 8000e80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e86:	613b      	str	r3, [r7, #16]
 8000e88:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	60fb      	str	r3, [r7, #12]
 8000e8e:	4b4b      	ldr	r3, [pc, #300]	; (8000fbc <MX_GPIO_Init+0x19c>)
 8000e90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e92:	4a4a      	ldr	r2, [pc, #296]	; (8000fbc <MX_GPIO_Init+0x19c>)
 8000e94:	f043 0301 	orr.w	r3, r3, #1
 8000e98:	6313      	str	r3, [r2, #48]	; 0x30
 8000e9a:	4b48      	ldr	r3, [pc, #288]	; (8000fbc <MX_GPIO_Init+0x19c>)
 8000e9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e9e:	f003 0301 	and.w	r3, r3, #1
 8000ea2:	60fb      	str	r3, [r7, #12]
 8000ea4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	60bb      	str	r3, [r7, #8]
 8000eaa:	4b44      	ldr	r3, [pc, #272]	; (8000fbc <MX_GPIO_Init+0x19c>)
 8000eac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eae:	4a43      	ldr	r2, [pc, #268]	; (8000fbc <MX_GPIO_Init+0x19c>)
 8000eb0:	f043 0302 	orr.w	r3, r3, #2
 8000eb4:	6313      	str	r3, [r2, #48]	; 0x30
 8000eb6:	4b41      	ldr	r3, [pc, #260]	; (8000fbc <MX_GPIO_Init+0x19c>)
 8000eb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eba:	f003 0302 	and.w	r3, r3, #2
 8000ebe:	60bb      	str	r3, [r7, #8]
 8000ec0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	607b      	str	r3, [r7, #4]
 8000ec6:	4b3d      	ldr	r3, [pc, #244]	; (8000fbc <MX_GPIO_Init+0x19c>)
 8000ec8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eca:	4a3c      	ldr	r2, [pc, #240]	; (8000fbc <MX_GPIO_Init+0x19c>)
 8000ecc:	f043 0308 	orr.w	r3, r3, #8
 8000ed0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ed2:	4b3a      	ldr	r3, [pc, #232]	; (8000fbc <MX_GPIO_Init+0x19c>)
 8000ed4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ed6:	f003 0308 	and.w	r3, r3, #8
 8000eda:	607b      	str	r3, [r7, #4]
 8000edc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000ede:	2200      	movs	r2, #0
 8000ee0:	2108      	movs	r1, #8
 8000ee2:	4837      	ldr	r0, [pc, #220]	; (8000fc0 <MX_GPIO_Init+0x1a0>)
 8000ee4:	f001 ff30 	bl	8002d48 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000ee8:	2201      	movs	r2, #1
 8000eea:	2101      	movs	r1, #1
 8000eec:	4835      	ldr	r0, [pc, #212]	; (8000fc4 <MX_GPIO_Init+0x1a4>)
 8000eee:	f001 ff2b 	bl	8002d48 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	f24f 0110 	movw	r1, #61456	; 0xf010
 8000ef8:	4833      	ldr	r0, [pc, #204]	; (8000fc8 <MX_GPIO_Init+0x1a8>)
 8000efa:	f001 ff25 	bl	8002d48 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DATA_Ready_Pin;
 8000efe:	2304      	movs	r3, #4
 8000f00:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f02:	2300      	movs	r3, #0
 8000f04:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f06:	2300      	movs	r3, #0
 8000f08:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DATA_Ready_GPIO_Port, &GPIO_InitStruct);
 8000f0a:	f107 031c 	add.w	r3, r7, #28
 8000f0e:	4619      	mov	r1, r3
 8000f10:	482b      	ldr	r0, [pc, #172]	; (8000fc0 <MX_GPIO_Init+0x1a0>)
 8000f12:	f001 fc71 	bl	80027f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000f16:	2308      	movs	r3, #8
 8000f18:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f1a:	2301      	movs	r3, #1
 8000f1c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f1e:	2300      	movs	r3, #0
 8000f20:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f22:	2300      	movs	r3, #0
 8000f24:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000f26:	f107 031c 	add.w	r3, r7, #28
 8000f2a:	4619      	mov	r1, r3
 8000f2c:	4824      	ldr	r0, [pc, #144]	; (8000fc0 <MX_GPIO_Init+0x1a0>)
 8000f2e:	f001 fc63 	bl	80027f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = INT1_Pin|INT2_Pin|MEMS_INT2_Pin;
 8000f32:	2332      	movs	r3, #50	; 0x32
 8000f34:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000f36:	4b25      	ldr	r3, [pc, #148]	; (8000fcc <MX_GPIO_Init+0x1ac>)
 8000f38:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000f3e:	f107 031c 	add.w	r3, r7, #28
 8000f42:	4619      	mov	r1, r3
 8000f44:	481e      	ldr	r0, [pc, #120]	; (8000fc0 <MX_GPIO_Init+0x1a0>)
 8000f46:	f001 fc57 	bl	80027f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000f4a:	2301      	movs	r3, #1
 8000f4c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f4e:	2301      	movs	r3, #1
 8000f50:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f52:	2300      	movs	r3, #0
 8000f54:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f56:	2300      	movs	r3, #0
 8000f58:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000f5a:	f107 031c 	add.w	r3, r7, #28
 8000f5e:	4619      	mov	r1, r3
 8000f60:	4818      	ldr	r0, [pc, #96]	; (8000fc4 <MX_GPIO_Init+0x1a4>)
 8000f62:	f001 fc49 	bl	80027f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000f66:	2301      	movs	r3, #1
 8000f68:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000f6a:	4b18      	ldr	r3, [pc, #96]	; (8000fcc <MX_GPIO_Init+0x1ac>)
 8000f6c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f6e:	2300      	movs	r3, #0
 8000f70:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f72:	f107 031c 	add.w	r3, r7, #28
 8000f76:	4619      	mov	r1, r3
 8000f78:	4815      	ldr	r0, [pc, #84]	; (8000fd0 <MX_GPIO_Init+0x1b0>)
 8000f7a:	f001 fc3d 	bl	80027f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PDPin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000f7e:	f24f 0310 	movw	r3, #61456	; 0xf010
 8000f82:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f84:	2301      	movs	r3, #1
 8000f86:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f88:	2300      	movs	r3, #0
 8000f8a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f90:	f107 031c 	add.w	r3, r7, #28
 8000f94:	4619      	mov	r1, r3
 8000f96:	480c      	ldr	r0, [pc, #48]	; (8000fc8 <MX_GPIO_Init+0x1a8>)
 8000f98:	f001 fc2e 	bl	80027f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000f9c:	2320      	movs	r3, #32
 8000f9e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000fa8:	f107 031c 	add.w	r3, r7, #28
 8000fac:	4619      	mov	r1, r3
 8000fae:	4806      	ldr	r0, [pc, #24]	; (8000fc8 <MX_GPIO_Init+0x1a8>)
 8000fb0:	f001 fc22 	bl	80027f8 <HAL_GPIO_Init>

}
 8000fb4:	bf00      	nop
 8000fb6:	3730      	adds	r7, #48	; 0x30
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	bd80      	pop	{r7, pc}
 8000fbc:	40023800 	.word	0x40023800
 8000fc0:	40021000 	.word	0x40021000
 8000fc4:	40020800 	.word	0x40020800
 8000fc8:	40020c00 	.word	0x40020c00
 8000fcc:	10120000 	.word	0x10120000
 8000fd0:	40020000 	.word	0x40020000

08000fd4 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8000fd8:	4b12      	ldr	r3, [pc, #72]	; (8001024 <MX_I2C1_Init+0x50>)
 8000fda:	4a13      	ldr	r2, [pc, #76]	; (8001028 <MX_I2C1_Init+0x54>)
 8000fdc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000fde:	4b11      	ldr	r3, [pc, #68]	; (8001024 <MX_I2C1_Init+0x50>)
 8000fe0:	4a12      	ldr	r2, [pc, #72]	; (800102c <MX_I2C1_Init+0x58>)
 8000fe2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000fe4:	4b0f      	ldr	r3, [pc, #60]	; (8001024 <MX_I2C1_Init+0x50>)
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000fea:	4b0e      	ldr	r3, [pc, #56]	; (8001024 <MX_I2C1_Init+0x50>)
 8000fec:	2200      	movs	r2, #0
 8000fee:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000ff0:	4b0c      	ldr	r3, [pc, #48]	; (8001024 <MX_I2C1_Init+0x50>)
 8000ff2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000ff6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ff8:	4b0a      	ldr	r3, [pc, #40]	; (8001024 <MX_I2C1_Init+0x50>)
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000ffe:	4b09      	ldr	r3, [pc, #36]	; (8001024 <MX_I2C1_Init+0x50>)
 8001000:	2200      	movs	r2, #0
 8001002:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001004:	4b07      	ldr	r3, [pc, #28]	; (8001024 <MX_I2C1_Init+0x50>)
 8001006:	2200      	movs	r2, #0
 8001008:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800100a:	4b06      	ldr	r3, [pc, #24]	; (8001024 <MX_I2C1_Init+0x50>)
 800100c:	2200      	movs	r2, #0
 800100e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001010:	4804      	ldr	r0, [pc, #16]	; (8001024 <MX_I2C1_Init+0x50>)
 8001012:	f001 fef3 	bl	8002dfc <HAL_I2C_Init>
 8001016:	4603      	mov	r3, r0
 8001018:	2b00      	cmp	r3, #0
 800101a:	d001      	beq.n	8001020 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800101c:	f000 fb22 	bl	8001664 <Error_Handler>
  }

}
 8001020:	bf00      	nop
 8001022:	bd80      	pop	{r7, pc}
 8001024:	20000620 	.word	0x20000620
 8001028:	40005400 	.word	0x40005400
 800102c:	000186a0 	.word	0x000186a0

08001030 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b08a      	sub	sp, #40	; 0x28
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001038:	f107 0314 	add.w	r3, r7, #20
 800103c:	2200      	movs	r2, #0
 800103e:	601a      	str	r2, [r3, #0]
 8001040:	605a      	str	r2, [r3, #4]
 8001042:	609a      	str	r2, [r3, #8]
 8001044:	60da      	str	r2, [r3, #12]
 8001046:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	4a19      	ldr	r2, [pc, #100]	; (80010b4 <HAL_I2C_MspInit+0x84>)
 800104e:	4293      	cmp	r3, r2
 8001050:	d12c      	bne.n	80010ac <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001052:	2300      	movs	r3, #0
 8001054:	613b      	str	r3, [r7, #16]
 8001056:	4b18      	ldr	r3, [pc, #96]	; (80010b8 <HAL_I2C_MspInit+0x88>)
 8001058:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800105a:	4a17      	ldr	r2, [pc, #92]	; (80010b8 <HAL_I2C_MspInit+0x88>)
 800105c:	f043 0302 	orr.w	r3, r3, #2
 8001060:	6313      	str	r3, [r2, #48]	; 0x30
 8001062:	4b15      	ldr	r3, [pc, #84]	; (80010b8 <HAL_I2C_MspInit+0x88>)
 8001064:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001066:	f003 0302 	and.w	r3, r3, #2
 800106a:	613b      	str	r3, [r7, #16]
 800106c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 800106e:	f44f 7310 	mov.w	r3, #576	; 0x240
 8001072:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001074:	2312      	movs	r3, #18
 8001076:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001078:	2301      	movs	r3, #1
 800107a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800107c:	2300      	movs	r3, #0
 800107e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001080:	2304      	movs	r3, #4
 8001082:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001084:	f107 0314 	add.w	r3, r7, #20
 8001088:	4619      	mov	r1, r3
 800108a:	480c      	ldr	r0, [pc, #48]	; (80010bc <HAL_I2C_MspInit+0x8c>)
 800108c:	f001 fbb4 	bl	80027f8 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001090:	2300      	movs	r3, #0
 8001092:	60fb      	str	r3, [r7, #12]
 8001094:	4b08      	ldr	r3, [pc, #32]	; (80010b8 <HAL_I2C_MspInit+0x88>)
 8001096:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001098:	4a07      	ldr	r2, [pc, #28]	; (80010b8 <HAL_I2C_MspInit+0x88>)
 800109a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800109e:	6413      	str	r3, [r2, #64]	; 0x40
 80010a0:	4b05      	ldr	r3, [pc, #20]	; (80010b8 <HAL_I2C_MspInit+0x88>)
 80010a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010a4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80010a8:	60fb      	str	r3, [r7, #12]
 80010aa:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80010ac:	bf00      	nop
 80010ae:	3728      	adds	r7, #40	; 0x28
 80010b0:	46bd      	mov	sp, r7
 80010b2:	bd80      	pop	{r7, pc}
 80010b4:	40005400 	.word	0x40005400
 80010b8:	40023800 	.word	0x40023800
 80010bc:	40020400 	.word	0x40020400

080010c0 <MX_I2S2_Init>:
DMA_HandleTypeDef hdma_spi2_rx;
DMA_HandleTypeDef hdma_spi3_tx;

/* I2S2 init function */
void MX_I2S2_Init(void)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	af00      	add	r7, sp, #0

  hi2s2.Instance = SPI2;
 80010c4:	4b13      	ldr	r3, [pc, #76]	; (8001114 <MX_I2S2_Init+0x54>)
 80010c6:	4a14      	ldr	r2, [pc, #80]	; (8001118 <MX_I2S2_Init+0x58>)
 80010c8:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_SLAVE_RX;
 80010ca:	4b12      	ldr	r3, [pc, #72]	; (8001114 <MX_I2S2_Init+0x54>)
 80010cc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80010d0:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_MSB;
 80010d2:	4b10      	ldr	r3, [pc, #64]	; (8001114 <MX_I2S2_Init+0x54>)
 80010d4:	2210      	movs	r2, #16
 80010d6:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_24B;
 80010d8:	4b0e      	ldr	r3, [pc, #56]	; (8001114 <MX_I2S2_Init+0x54>)
 80010da:	2203      	movs	r2, #3
 80010dc:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 80010de:	4b0d      	ldr	r3, [pc, #52]	; (8001114 <MX_I2S2_Init+0x54>)
 80010e0:	2200      	movs	r2, #0
 80010e2:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_48K;
 80010e4:	4b0b      	ldr	r3, [pc, #44]	; (8001114 <MX_I2S2_Init+0x54>)
 80010e6:	f64b 3280 	movw	r2, #48000	; 0xbb80
 80010ea:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 80010ec:	4b09      	ldr	r3, [pc, #36]	; (8001114 <MX_I2S2_Init+0x54>)
 80010ee:	2200      	movs	r2, #0
 80010f0:	619a      	str	r2, [r3, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 80010f2:	4b08      	ldr	r3, [pc, #32]	; (8001114 <MX_I2S2_Init+0x54>)
 80010f4:	2200      	movs	r2, #0
 80010f6:	61da      	str	r2, [r3, #28]
  hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_ENABLE;
 80010f8:	4b06      	ldr	r3, [pc, #24]	; (8001114 <MX_I2S2_Init+0x54>)
 80010fa:	2201      	movs	r2, #1
 80010fc:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 80010fe:	4805      	ldr	r0, [pc, #20]	; (8001114 <MX_I2S2_Init+0x54>)
 8001100:	f002 f83c 	bl	800317c <HAL_I2S_Init>
 8001104:	4603      	mov	r3, r0
 8001106:	2b00      	cmp	r3, #0
 8001108:	d001      	beq.n	800110e <MX_I2S2_Init+0x4e>
  {
    Error_Handler();
 800110a:	f000 faab 	bl	8001664 <Error_Handler>
  }

}
 800110e:	bf00      	nop
 8001110:	bd80      	pop	{r7, pc}
 8001112:	bf00      	nop
 8001114:	20000734 	.word	0x20000734
 8001118:	40003800 	.word	0x40003800

0800111c <MX_I2S3_Init>:
/* I2S3 init function */
void MX_I2S3_Init(void)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	af00      	add	r7, sp, #0

  hi2s3.Instance = SPI3;
 8001120:	4b13      	ldr	r3, [pc, #76]	; (8001170 <MX_I2S3_Init+0x54>)
 8001122:	4a14      	ldr	r2, [pc, #80]	; (8001174 <MX_I2S3_Init+0x58>)
 8001124:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8001126:	4b12      	ldr	r3, [pc, #72]	; (8001170 <MX_I2S3_Init+0x54>)
 8001128:	f44f 7200 	mov.w	r2, #512	; 0x200
 800112c:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 800112e:	4b10      	ldr	r3, [pc, #64]	; (8001170 <MX_I2S3_Init+0x54>)
 8001130:	2200      	movs	r2, #0
 8001132:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_24B;
 8001134:	4b0e      	ldr	r3, [pc, #56]	; (8001170 <MX_I2S3_Init+0x54>)
 8001136:	2203      	movs	r2, #3
 8001138:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 800113a:	4b0d      	ldr	r3, [pc, #52]	; (8001170 <MX_I2S3_Init+0x54>)
 800113c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001140:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_48K;
 8001142:	4b0b      	ldr	r3, [pc, #44]	; (8001170 <MX_I2S3_Init+0x54>)
 8001144:	f64b 3280 	movw	r2, #48000	; 0xbb80
 8001148:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 800114a:	4b09      	ldr	r3, [pc, #36]	; (8001170 <MX_I2S3_Init+0x54>)
 800114c:	2200      	movs	r2, #0
 800114e:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8001150:	4b07      	ldr	r3, [pc, #28]	; (8001170 <MX_I2S3_Init+0x54>)
 8001152:	2200      	movs	r2, #0
 8001154:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8001156:	4b06      	ldr	r3, [pc, #24]	; (8001170 <MX_I2S3_Init+0x54>)
 8001158:	2200      	movs	r2, #0
 800115a:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 800115c:	4804      	ldr	r0, [pc, #16]	; (8001170 <MX_I2S3_Init+0x54>)
 800115e:	f002 f80d 	bl	800317c <HAL_I2S_Init>
 8001162:	4603      	mov	r3, r0
 8001164:	2b00      	cmp	r3, #0
 8001166:	d001      	beq.n	800116c <MX_I2S3_Init+0x50>
  {
    Error_Handler();
 8001168:	f000 fa7c 	bl	8001664 <Error_Handler>
  }

}
 800116c:	bf00      	nop
 800116e:	bd80      	pop	{r7, pc}
 8001170:	2000077c 	.word	0x2000077c
 8001174:	40003c00 	.word	0x40003c00

08001178 <HAL_I2S_MspInit>:

void HAL_I2S_MspInit(I2S_HandleTypeDef* i2sHandle)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b08e      	sub	sp, #56	; 0x38
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001180:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001184:	2200      	movs	r2, #0
 8001186:	601a      	str	r2, [r3, #0]
 8001188:	605a      	str	r2, [r3, #4]
 800118a:	609a      	str	r2, [r3, #8]
 800118c:	60da      	str	r2, [r3, #12]
 800118e:	611a      	str	r2, [r3, #16]
  if(i2sHandle->Instance==SPI2)
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	4a89      	ldr	r2, [pc, #548]	; (80013bc <HAL_I2S_MspInit+0x244>)
 8001196:	4293      	cmp	r3, r2
 8001198:	f040 808c 	bne.w	80012b4 <HAL_I2S_MspInit+0x13c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* I2S2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800119c:	2300      	movs	r3, #0
 800119e:	623b      	str	r3, [r7, #32]
 80011a0:	4b87      	ldr	r3, [pc, #540]	; (80013c0 <HAL_I2S_MspInit+0x248>)
 80011a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011a4:	4a86      	ldr	r2, [pc, #536]	; (80013c0 <HAL_I2S_MspInit+0x248>)
 80011a6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011aa:	6413      	str	r3, [r2, #64]	; 0x40
 80011ac:	4b84      	ldr	r3, [pc, #528]	; (80013c0 <HAL_I2S_MspInit+0x248>)
 80011ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011b0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011b4:	623b      	str	r3, [r7, #32]
 80011b6:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80011b8:	2300      	movs	r3, #0
 80011ba:	61fb      	str	r3, [r7, #28]
 80011bc:	4b80      	ldr	r3, [pc, #512]	; (80013c0 <HAL_I2S_MspInit+0x248>)
 80011be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011c0:	4a7f      	ldr	r2, [pc, #508]	; (80013c0 <HAL_I2S_MspInit+0x248>)
 80011c2:	f043 0304 	orr.w	r3, r3, #4
 80011c6:	6313      	str	r3, [r2, #48]	; 0x30
 80011c8:	4b7d      	ldr	r3, [pc, #500]	; (80013c0 <HAL_I2S_MspInit+0x248>)
 80011ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011cc:	f003 0304 	and.w	r3, r3, #4
 80011d0:	61fb      	str	r3, [r7, #28]
 80011d2:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011d4:	2300      	movs	r3, #0
 80011d6:	61bb      	str	r3, [r7, #24]
 80011d8:	4b79      	ldr	r3, [pc, #484]	; (80013c0 <HAL_I2S_MspInit+0x248>)
 80011da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011dc:	4a78      	ldr	r2, [pc, #480]	; (80013c0 <HAL_I2S_MspInit+0x248>)
 80011de:	f043 0302 	orr.w	r3, r3, #2
 80011e2:	6313      	str	r3, [r2, #48]	; 0x30
 80011e4:	4b76      	ldr	r3, [pc, #472]	; (80013c0 <HAL_I2S_MspInit+0x248>)
 80011e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011e8:	f003 0302 	and.w	r3, r3, #2
 80011ec:	61bb      	str	r3, [r7, #24]
 80011ee:	69bb      	ldr	r3, [r7, #24]
    PC2     ------> I2S2_ext_SD
    PC3     ------> I2S2_SD
    PB10     ------> I2S2_CK
    PB12     ------> I2S2_WS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80011f0:	2304      	movs	r3, #4
 80011f2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011f4:	2302      	movs	r3, #2
 80011f6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011f8:	2300      	movs	r3, #0
 80011fa:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011fc:	2300      	movs	r3, #0
 80011fe:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_I2S2ext;
 8001200:	2306      	movs	r3, #6
 8001202:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001204:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001208:	4619      	mov	r1, r3
 800120a:	486e      	ldr	r0, [pc, #440]	; (80013c4 <HAL_I2S_MspInit+0x24c>)
 800120c:	f001 faf4 	bl	80027f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8001210:	2308      	movs	r3, #8
 8001212:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001214:	2302      	movs	r3, #2
 8001216:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001218:	2300      	movs	r3, #0
 800121a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800121c:	2300      	movs	r3, #0
 800121e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001220:	2305      	movs	r3, #5
 8001222:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8001224:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001228:	4619      	mov	r1, r3
 800122a:	4866      	ldr	r0, [pc, #408]	; (80013c4 <HAL_I2S_MspInit+0x24c>)
 800122c:	f001 fae4 	bl	80027f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CLK_IN_Pin|GPIO_PIN_12;
 8001230:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001234:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001236:	2302      	movs	r3, #2
 8001238:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800123a:	2300      	movs	r3, #0
 800123c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800123e:	2300      	movs	r3, #0
 8001240:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001242:	2305      	movs	r3, #5
 8001244:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001246:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800124a:	4619      	mov	r1, r3
 800124c:	485e      	ldr	r0, [pc, #376]	; (80013c8 <HAL_I2S_MspInit+0x250>)
 800124e:	f001 fad3 	bl	80027f8 <HAL_GPIO_Init>

    /* I2S2 DMA Init */
    /* SPI2_RX Init */
    hdma_spi2_rx.Instance = DMA1_Stream3;
 8001252:	4b5e      	ldr	r3, [pc, #376]	; (80013cc <HAL_I2S_MspInit+0x254>)
 8001254:	4a5e      	ldr	r2, [pc, #376]	; (80013d0 <HAL_I2S_MspInit+0x258>)
 8001256:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Channel = DMA_CHANNEL_0;
 8001258:	4b5c      	ldr	r3, [pc, #368]	; (80013cc <HAL_I2S_MspInit+0x254>)
 800125a:	2200      	movs	r2, #0
 800125c:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800125e:	4b5b      	ldr	r3, [pc, #364]	; (80013cc <HAL_I2S_MspInit+0x254>)
 8001260:	2200      	movs	r2, #0
 8001262:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001264:	4b59      	ldr	r3, [pc, #356]	; (80013cc <HAL_I2S_MspInit+0x254>)
 8001266:	2200      	movs	r2, #0
 8001268:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800126a:	4b58      	ldr	r3, [pc, #352]	; (80013cc <HAL_I2S_MspInit+0x254>)
 800126c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001270:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001272:	4b56      	ldr	r3, [pc, #344]	; (80013cc <HAL_I2S_MspInit+0x254>)
 8001274:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001278:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800127a:	4b54      	ldr	r3, [pc, #336]	; (80013cc <HAL_I2S_MspInit+0x254>)
 800127c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001280:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_CIRCULAR;
 8001282:	4b52      	ldr	r3, [pc, #328]	; (80013cc <HAL_I2S_MspInit+0x254>)
 8001284:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001288:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 800128a:	4b50      	ldr	r3, [pc, #320]	; (80013cc <HAL_I2S_MspInit+0x254>)
 800128c:	2200      	movs	r2, #0
 800128e:	621a      	str	r2, [r3, #32]
    hdma_spi2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001290:	4b4e      	ldr	r3, [pc, #312]	; (80013cc <HAL_I2S_MspInit+0x254>)
 8001292:	2200      	movs	r2, #0
 8001294:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 8001296:	484d      	ldr	r0, [pc, #308]	; (80013cc <HAL_I2S_MspInit+0x254>)
 8001298:	f000 fe58 	bl	8001f4c <HAL_DMA_Init>
 800129c:	4603      	mov	r3, r0
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d001      	beq.n	80012a6 <HAL_I2S_MspInit+0x12e>
    {
      Error_Handler();
 80012a2:	f000 f9df 	bl	8001664 <Error_Handler>
    }

    __HAL_LINKDMA(i2sHandle,hdmarx,hdma_spi2_rx);
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	4a48      	ldr	r2, [pc, #288]	; (80013cc <HAL_I2S_MspInit+0x254>)
 80012aa:	63da      	str	r2, [r3, #60]	; 0x3c
 80012ac:	4a47      	ldr	r2, [pc, #284]	; (80013cc <HAL_I2S_MspInit+0x254>)
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 80012b2:	e07f      	b.n	80013b4 <HAL_I2S_MspInit+0x23c>
  else if(i2sHandle->Instance==SPI3)
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	4a46      	ldr	r2, [pc, #280]	; (80013d4 <HAL_I2S_MspInit+0x25c>)
 80012ba:	4293      	cmp	r3, r2
 80012bc:	d17a      	bne.n	80013b4 <HAL_I2S_MspInit+0x23c>
    __HAL_RCC_SPI3_CLK_ENABLE();
 80012be:	2300      	movs	r3, #0
 80012c0:	617b      	str	r3, [r7, #20]
 80012c2:	4b3f      	ldr	r3, [pc, #252]	; (80013c0 <HAL_I2S_MspInit+0x248>)
 80012c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012c6:	4a3e      	ldr	r2, [pc, #248]	; (80013c0 <HAL_I2S_MspInit+0x248>)
 80012c8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80012cc:	6413      	str	r3, [r2, #64]	; 0x40
 80012ce:	4b3c      	ldr	r3, [pc, #240]	; (80013c0 <HAL_I2S_MspInit+0x248>)
 80012d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012d2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80012d6:	617b      	str	r3, [r7, #20]
 80012d8:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012da:	2300      	movs	r3, #0
 80012dc:	613b      	str	r3, [r7, #16]
 80012de:	4b38      	ldr	r3, [pc, #224]	; (80013c0 <HAL_I2S_MspInit+0x248>)
 80012e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012e2:	4a37      	ldr	r2, [pc, #220]	; (80013c0 <HAL_I2S_MspInit+0x248>)
 80012e4:	f043 0301 	orr.w	r3, r3, #1
 80012e8:	6313      	str	r3, [r2, #48]	; 0x30
 80012ea:	4b35      	ldr	r3, [pc, #212]	; (80013c0 <HAL_I2S_MspInit+0x248>)
 80012ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ee:	f003 0301 	and.w	r3, r3, #1
 80012f2:	613b      	str	r3, [r7, #16]
 80012f4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80012f6:	2300      	movs	r3, #0
 80012f8:	60fb      	str	r3, [r7, #12]
 80012fa:	4b31      	ldr	r3, [pc, #196]	; (80013c0 <HAL_I2S_MspInit+0x248>)
 80012fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012fe:	4a30      	ldr	r2, [pc, #192]	; (80013c0 <HAL_I2S_MspInit+0x248>)
 8001300:	f043 0304 	orr.w	r3, r3, #4
 8001304:	6313      	str	r3, [r2, #48]	; 0x30
 8001306:	4b2e      	ldr	r3, [pc, #184]	; (80013c0 <HAL_I2S_MspInit+0x248>)
 8001308:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800130a:	f003 0304 	and.w	r3, r3, #4
 800130e:	60fb      	str	r3, [r7, #12]
 8001310:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8001312:	2310      	movs	r3, #16
 8001314:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001316:	2302      	movs	r3, #2
 8001318:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800131a:	2300      	movs	r3, #0
 800131c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800131e:	2300      	movs	r3, #0
 8001320:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001322:	2306      	movs	r3, #6
 8001324:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8001326:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800132a:	4619      	mov	r1, r3
 800132c:	482a      	ldr	r0, [pc, #168]	; (80013d8 <HAL_I2S_MspInit+0x260>)
 800132e:	f001 fa63 	bl	80027f8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8001332:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8001336:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001338:	2302      	movs	r3, #2
 800133a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800133c:	2300      	movs	r3, #0
 800133e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001340:	2300      	movs	r3, #0
 8001342:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001344:	2306      	movs	r3, #6
 8001346:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001348:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800134c:	4619      	mov	r1, r3
 800134e:	481d      	ldr	r0, [pc, #116]	; (80013c4 <HAL_I2S_MspInit+0x24c>)
 8001350:	f001 fa52 	bl	80027f8 <HAL_GPIO_Init>
    hdma_spi3_tx.Instance = DMA1_Stream5;
 8001354:	4b21      	ldr	r3, [pc, #132]	; (80013dc <HAL_I2S_MspInit+0x264>)
 8001356:	4a22      	ldr	r2, [pc, #136]	; (80013e0 <HAL_I2S_MspInit+0x268>)
 8001358:	601a      	str	r2, [r3, #0]
    hdma_spi3_tx.Init.Channel = DMA_CHANNEL_0;
 800135a:	4b20      	ldr	r3, [pc, #128]	; (80013dc <HAL_I2S_MspInit+0x264>)
 800135c:	2200      	movs	r2, #0
 800135e:	605a      	str	r2, [r3, #4]
    hdma_spi3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001360:	4b1e      	ldr	r3, [pc, #120]	; (80013dc <HAL_I2S_MspInit+0x264>)
 8001362:	2240      	movs	r2, #64	; 0x40
 8001364:	609a      	str	r2, [r3, #8]
    hdma_spi3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001366:	4b1d      	ldr	r3, [pc, #116]	; (80013dc <HAL_I2S_MspInit+0x264>)
 8001368:	2200      	movs	r2, #0
 800136a:	60da      	str	r2, [r3, #12]
    hdma_spi3_tx.Init.MemInc = DMA_MINC_ENABLE;
 800136c:	4b1b      	ldr	r3, [pc, #108]	; (80013dc <HAL_I2S_MspInit+0x264>)
 800136e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001372:	611a      	str	r2, [r3, #16]
    hdma_spi3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001374:	4b19      	ldr	r3, [pc, #100]	; (80013dc <HAL_I2S_MspInit+0x264>)
 8001376:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800137a:	615a      	str	r2, [r3, #20]
    hdma_spi3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800137c:	4b17      	ldr	r3, [pc, #92]	; (80013dc <HAL_I2S_MspInit+0x264>)
 800137e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001382:	619a      	str	r2, [r3, #24]
    hdma_spi3_tx.Init.Mode = DMA_CIRCULAR;
 8001384:	4b15      	ldr	r3, [pc, #84]	; (80013dc <HAL_I2S_MspInit+0x264>)
 8001386:	f44f 7280 	mov.w	r2, #256	; 0x100
 800138a:	61da      	str	r2, [r3, #28]
    hdma_spi3_tx.Init.Priority = DMA_PRIORITY_LOW;
 800138c:	4b13      	ldr	r3, [pc, #76]	; (80013dc <HAL_I2S_MspInit+0x264>)
 800138e:	2200      	movs	r2, #0
 8001390:	621a      	str	r2, [r3, #32]
    hdma_spi3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001392:	4b12      	ldr	r3, [pc, #72]	; (80013dc <HAL_I2S_MspInit+0x264>)
 8001394:	2200      	movs	r2, #0
 8001396:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi3_tx) != HAL_OK)
 8001398:	4810      	ldr	r0, [pc, #64]	; (80013dc <HAL_I2S_MspInit+0x264>)
 800139a:	f000 fdd7 	bl	8001f4c <HAL_DMA_Init>
 800139e:	4603      	mov	r3, r0
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d001      	beq.n	80013a8 <HAL_I2S_MspInit+0x230>
      Error_Handler();
 80013a4:	f000 f95e 	bl	8001664 <Error_Handler>
    __HAL_LINKDMA(i2sHandle,hdmatx,hdma_spi3_tx);
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	4a0c      	ldr	r2, [pc, #48]	; (80013dc <HAL_I2S_MspInit+0x264>)
 80013ac:	639a      	str	r2, [r3, #56]	; 0x38
 80013ae:	4a0b      	ldr	r2, [pc, #44]	; (80013dc <HAL_I2S_MspInit+0x264>)
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	6393      	str	r3, [r2, #56]	; 0x38
}
 80013b4:	bf00      	nop
 80013b6:	3738      	adds	r7, #56	; 0x38
 80013b8:	46bd      	mov	sp, r7
 80013ba:	bd80      	pop	{r7, pc}
 80013bc:	40003800 	.word	0x40003800
 80013c0:	40023800 	.word	0x40023800
 80013c4:	40020800 	.word	0x40020800
 80013c8:	40020400 	.word	0x40020400
 80013cc:	20000674 	.word	0x20000674
 80013d0:	40026058 	.word	0x40026058
 80013d4:	40003c00 	.word	0x40003c00
 80013d8:	40020000 	.word	0x40020000
 80013dc:	200006d4 	.word	0x200006d4
 80013e0:	40026088 	.word	0x40026088

080013e4 <map.10415>:
  MX_CRC_Init();
  MX_PDM2PCM_Init();
  MX_TIM1_Init();
  /* USER CODE BEGIN 2 */
  int map(int st1, int fn1, int st2, int fn2, int value)
  {
 80013e4:	b5b0      	push	{r4, r5, r7, lr}
 80013e6:	b086      	sub	sp, #24
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6178      	str	r0, [r7, #20]
 80013ec:	6139      	str	r1, [r7, #16]
 80013ee:	60fa      	str	r2, [r7, #12]
 80013f0:	60bb      	str	r3, [r7, #8]
 80013f2:	f8c7 c004 	str.w	ip, [r7, #4]
      return (1.0*(value-st1))/((fn1-st1)*1.0) * (fn2-st2)+st2;
 80013f6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80013f8:	697b      	ldr	r3, [r7, #20]
 80013fa:	1ad3      	subs	r3, r2, r3
 80013fc:	4618      	mov	r0, r3
 80013fe:	f7ff f83d 	bl	800047c <__aeabi_i2d>
 8001402:	4604      	mov	r4, r0
 8001404:	460d      	mov	r5, r1
 8001406:	693a      	ldr	r2, [r7, #16]
 8001408:	697b      	ldr	r3, [r7, #20]
 800140a:	1ad3      	subs	r3, r2, r3
 800140c:	4618      	mov	r0, r3
 800140e:	f7ff f835 	bl	800047c <__aeabi_i2d>
 8001412:	4602      	mov	r2, r0
 8001414:	460b      	mov	r3, r1
 8001416:	4620      	mov	r0, r4
 8001418:	4629      	mov	r1, r5
 800141a:	f7ff f9c3 	bl	80007a4 <__aeabi_ddiv>
 800141e:	4603      	mov	r3, r0
 8001420:	460c      	mov	r4, r1
 8001422:	4625      	mov	r5, r4
 8001424:	461c      	mov	r4, r3
 8001426:	68ba      	ldr	r2, [r7, #8]
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	1ad3      	subs	r3, r2, r3
 800142c:	4618      	mov	r0, r3
 800142e:	f7ff f825 	bl	800047c <__aeabi_i2d>
 8001432:	4602      	mov	r2, r0
 8001434:	460b      	mov	r3, r1
 8001436:	4620      	mov	r0, r4
 8001438:	4629      	mov	r1, r5
 800143a:	f7ff f889 	bl	8000550 <__aeabi_dmul>
 800143e:	4603      	mov	r3, r0
 8001440:	460c      	mov	r4, r1
 8001442:	4625      	mov	r5, r4
 8001444:	461c      	mov	r4, r3
 8001446:	68f8      	ldr	r0, [r7, #12]
 8001448:	f7ff f818 	bl	800047c <__aeabi_i2d>
 800144c:	4602      	mov	r2, r0
 800144e:	460b      	mov	r3, r1
 8001450:	4620      	mov	r0, r4
 8001452:	4629      	mov	r1, r5
 8001454:	f7fe fec6 	bl	80001e4 <__adddf3>
 8001458:	4603      	mov	r3, r0
 800145a:	460c      	mov	r4, r1
 800145c:	4618      	mov	r0, r3
 800145e:	4621      	mov	r1, r4
 8001460:	f7ff fa88 	bl	8000974 <__aeabi_d2iz>
 8001464:	4603      	mov	r3, r0
  }
 8001466:	4618      	mov	r0, r3
 8001468:	3718      	adds	r7, #24
 800146a:	46bd      	mov	sp, r7
 800146c:	bdb0      	pop	{r4, r5, r7, pc}
	...

08001470 <main>:
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b082      	sub	sp, #8
 8001474:	af00      	add	r7, sp, #0
int main(void)
 8001476:	f107 0310 	add.w	r3, r7, #16
 800147a:	607b      	str	r3, [r7, #4]
  HAL_Init();
 800147c:	f000 fb68 	bl	8001b50 <HAL_Init>
  SystemClock_Config();
 8001480:	f000 f86c 	bl	800155c <SystemClock_Config>
  MX_GPIO_Init();
 8001484:	f7ff fccc 	bl	8000e20 <MX_GPIO_Init>
  MX_DMA_Init();
 8001488:	f7ff fca2 	bl	8000dd0 <MX_DMA_Init>
  MX_I2C1_Init();
 800148c:	f7ff fda2 	bl	8000fd4 <MX_I2C1_Init>
  MX_I2S2_Init();
 8001490:	f7ff fe16 	bl	80010c0 <MX_I2S2_Init>
  MX_I2S3_Init();
 8001494:	f7ff fe42 	bl	800111c <MX_I2S3_Init>
  MX_SPI1_Init();
 8001498:	f000 f8f6 	bl	8001688 <MX_SPI1_Init>
  MX_USB_DEVICE_Init();
 800149c:	f009 f990 	bl	800a7c0 <MX_USB_DEVICE_Init>
  MX_CRC_Init();
 80014a0:	f7ff fc60 	bl	8000d64 <MX_CRC_Init>
  MX_PDM2PCM_Init();
 80014a4:	f009 f962 	bl	800a76c <MX_PDM2PCM_Init>
  MX_TIM1_Init();
 80014a8:	f000 fa2c 	bl	8001904 <MX_TIM1_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80014ac:	2100      	movs	r1, #0
 80014ae:	4804      	ldr	r0, [pc, #16]	; (80014c0 <main+0x50>)
 80014b0:	f004 ffe4 	bl	800647c <HAL_TIM_PWM_Start>
	servo_sweep();
 80014b4:	1d3b      	adds	r3, r7, #4
 80014b6:	469c      	mov	ip, r3
 80014b8:	f000 f81e 	bl	80014f8 <servo_sweep.10421>
    HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80014bc:	e7f6      	b.n	80014ac <main+0x3c>
 80014be:	bf00      	nop
 80014c0:	2000081c 	.word	0x2000081c

080014c4 <servo_write.10418>:
  {
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b084      	sub	sp, #16
 80014c8:	af02      	add	r7, sp, #8
 80014ca:	6078      	str	r0, [r7, #4]
 80014cc:	4662      	mov	r2, ip
 80014ce:	f8c7 c000 	str.w	ip, [r7]
  	htim1.Instance->CCR1 = map(0,180,50,250,angle);
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	9300      	str	r3, [sp, #0]
 80014d6:	4694      	mov	ip, r2
 80014d8:	23fa      	movs	r3, #250	; 0xfa
 80014da:	2232      	movs	r2, #50	; 0x32
 80014dc:	21b4      	movs	r1, #180	; 0xb4
 80014de:	2000      	movs	r0, #0
 80014e0:	f7ff ff80 	bl	80013e4 <map.10415>
 80014e4:	4602      	mov	r2, r0
 80014e6:	4b03      	ldr	r3, [pc, #12]	; (80014f4 <servo_write.10418+0x30>)
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	635a      	str	r2, [r3, #52]	; 0x34
  }
 80014ec:	bf00      	nop
 80014ee:	3708      	adds	r7, #8
 80014f0:	46bd      	mov	sp, r7
 80014f2:	bd80      	pop	{r7, pc}
 80014f4:	2000081c 	.word	0x2000081c

080014f8 <servo_sweep.10421>:
  {
 80014f8:	b590      	push	{r4, r7, lr}
 80014fa:	b085      	sub	sp, #20
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	4664      	mov	r4, ip
 8001500:	f8c7 c004 	str.w	ip, [r7, #4]
  		for(int i = 0; i <= 180; i++)
 8001504:	2300      	movs	r3, #0
 8001506:	60fb      	str	r3, [r7, #12]
 8001508:	e00e      	b.n	8001528 <servo_sweep.10421+0x30>
  			HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_15);
 800150a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800150e:	4812      	ldr	r0, [pc, #72]	; (8001558 <servo_sweep.10421+0x60>)
 8001510:	f001 fc4c 	bl	8002dac <HAL_GPIO_TogglePin>
  			servo_write(i);
 8001514:	46a4      	mov	ip, r4
 8001516:	68f8      	ldr	r0, [r7, #12]
 8001518:	f7ff ffd4 	bl	80014c4 <servo_write.10418>
  			HAL_Delay(100);
 800151c:	2064      	movs	r0, #100	; 0x64
 800151e:	f000 fb89 	bl	8001c34 <HAL_Delay>
  		for(int i = 0; i <= 180; i++)
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	3301      	adds	r3, #1
 8001526:	60fb      	str	r3, [r7, #12]
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	2bb4      	cmp	r3, #180	; 0xb4
 800152c:	dded      	ble.n	800150a <servo_sweep.10421+0x12>
  		for(int i = 180; i >= 0; i--)
 800152e:	23b4      	movs	r3, #180	; 0xb4
 8001530:	60bb      	str	r3, [r7, #8]
 8001532:	e009      	b.n	8001548 <servo_sweep.10421+0x50>
  			servo_write(i);
 8001534:	46a4      	mov	ip, r4
 8001536:	68b8      	ldr	r0, [r7, #8]
 8001538:	f7ff ffc4 	bl	80014c4 <servo_write.10418>
  			HAL_Delay(10);
 800153c:	200a      	movs	r0, #10
 800153e:	f000 fb79 	bl	8001c34 <HAL_Delay>
  		for(int i = 180; i >= 0; i--)
 8001542:	68bb      	ldr	r3, [r7, #8]
 8001544:	3b01      	subs	r3, #1
 8001546:	60bb      	str	r3, [r7, #8]
 8001548:	68bb      	ldr	r3, [r7, #8]
 800154a:	2b00      	cmp	r3, #0
 800154c:	daf2      	bge.n	8001534 <servo_sweep.10421+0x3c>
  }
 800154e:	bf00      	nop
 8001550:	3714      	adds	r7, #20
 8001552:	46bd      	mov	sp, r7
 8001554:	bd90      	pop	{r4, r7, pc}
 8001556:	bf00      	nop
 8001558:	40020c00 	.word	0x40020c00

0800155c <SystemClock_Config>:
  */



void SystemClock_Config(void)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	b09a      	sub	sp, #104	; 0x68
 8001560:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001562:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001566:	2230      	movs	r2, #48	; 0x30
 8001568:	2100      	movs	r1, #0
 800156a:	4618      	mov	r0, r3
 800156c:	f00b fd4a 	bl	800d004 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001570:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001574:	2200      	movs	r2, #0
 8001576:	601a      	str	r2, [r3, #0]
 8001578:	605a      	str	r2, [r3, #4]
 800157a:	609a      	str	r2, [r3, #8]
 800157c:	60da      	str	r2, [r3, #12]
 800157e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001580:	f107 030c 	add.w	r3, r7, #12
 8001584:	2200      	movs	r2, #0
 8001586:	601a      	str	r2, [r3, #0]
 8001588:	605a      	str	r2, [r3, #4]
 800158a:	609a      	str	r2, [r3, #8]
 800158c:	60da      	str	r2, [r3, #12]
 800158e:	611a      	str	r2, [r3, #16]
 8001590:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001592:	2300      	movs	r3, #0
 8001594:	60bb      	str	r3, [r7, #8]
 8001596:	4b31      	ldr	r3, [pc, #196]	; (800165c <SystemClock_Config+0x100>)
 8001598:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800159a:	4a30      	ldr	r2, [pc, #192]	; (800165c <SystemClock_Config+0x100>)
 800159c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015a0:	6413      	str	r3, [r2, #64]	; 0x40
 80015a2:	4b2e      	ldr	r3, [pc, #184]	; (800165c <SystemClock_Config+0x100>)
 80015a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015aa:	60bb      	str	r3, [r7, #8]
 80015ac:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80015ae:	2300      	movs	r3, #0
 80015b0:	607b      	str	r3, [r7, #4]
 80015b2:	4b2b      	ldr	r3, [pc, #172]	; (8001660 <SystemClock_Config+0x104>)
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	4a2a      	ldr	r2, [pc, #168]	; (8001660 <SystemClock_Config+0x104>)
 80015b8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80015bc:	6013      	str	r3, [r2, #0]
 80015be:	4b28      	ldr	r3, [pc, #160]	; (8001660 <SystemClock_Config+0x104>)
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80015c6:	607b      	str	r3, [r7, #4]
 80015c8:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80015ca:	2301      	movs	r3, #1
 80015cc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80015ce:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80015d2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80015d4:	2302      	movs	r3, #2
 80015d6:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80015d8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80015dc:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLM = 4;
 80015de:	2304      	movs	r3, #4
 80015e0:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLN = 192;
 80015e2:	23c0      	movs	r3, #192	; 0xc0
 80015e4:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV6;
 80015e6:	2306      	movs	r3, #6
 80015e8:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLQ = 8;
 80015ea:	2308      	movs	r3, #8
 80015ec:	667b      	str	r3, [r7, #100]	; 0x64
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80015ee:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80015f2:	4618      	mov	r0, r3
 80015f4:	f003 fcae 	bl	8004f54 <HAL_RCC_OscConfig>
 80015f8:	4603      	mov	r3, r0
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d001      	beq.n	8001602 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80015fe:	f000 f831 	bl	8001664 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001602:	230f      	movs	r3, #15
 8001604:	627b      	str	r3, [r7, #36]	; 0x24
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001606:	2302      	movs	r3, #2
 8001608:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800160a:	2300      	movs	r3, #0
 800160c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV8;
 800160e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001612:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001614:	2300      	movs	r3, #0
 8001616:	637b      	str	r3, [r7, #52]	; 0x34

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001618:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800161c:	2100      	movs	r1, #0
 800161e:	4618      	mov	r0, r3
 8001620:	f003 ffb8 	bl	8005594 <HAL_RCC_ClockConfig>
 8001624:	4603      	mov	r3, r0
 8001626:	2b00      	cmp	r3, #0
 8001628:	d001      	beq.n	800162e <SystemClock_Config+0xd2>
  {
    Error_Handler();
 800162a:	f000 f81b 	bl	8001664 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 800162e:	2301      	movs	r3, #1
 8001630:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 200;
 8001632:	23c8      	movs	r3, #200	; 0xc8
 8001634:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLLI2S.PLLI2SM = 5;
 8001636:	2305      	movs	r3, #5
 8001638:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 800163a:	2302      	movs	r3, #2
 800163c:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800163e:	f107 030c 	add.w	r3, r7, #12
 8001642:	4618      	mov	r0, r3
 8001644:	f004 fa2c 	bl	8005aa0 <HAL_RCCEx_PeriphCLKConfig>
 8001648:	4603      	mov	r3, r0
 800164a:	2b00      	cmp	r3, #0
 800164c:	d001      	beq.n	8001652 <SystemClock_Config+0xf6>
  {
    Error_Handler();
 800164e:	f000 f809 	bl	8001664 <Error_Handler>
  }
}
 8001652:	bf00      	nop
 8001654:	3768      	adds	r7, #104	; 0x68
 8001656:	46bd      	mov	sp, r7
 8001658:	bd80      	pop	{r7, pc}
 800165a:	bf00      	nop
 800165c:	40023800 	.word	0x40023800
 8001660:	40007000 	.word	0x40007000

08001664 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001664:	b480      	push	{r7}
 8001666:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001668:	bf00      	nop
 800166a:	46bd      	mov	sp, r7
 800166c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001670:	4770      	bx	lr

08001672 <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
 8001672:	b480      	push	{r7}
 8001674:	b083      	sub	sp, #12
 8001676:	af00      	add	r7, sp, #0
 8001678:	6078      	str	r0, [r7, #4]
 800167a:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     tex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
 800167c:	bf00      	nop
 800167e:	370c      	adds	r7, #12
 8001680:	46bd      	mov	sp, r7
 8001682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001686:	4770      	bx	lr

08001688 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	af00      	add	r7, sp, #0

  hspi1.Instance = SPI1;
 800168c:	4b17      	ldr	r3, [pc, #92]	; (80016ec <MX_SPI1_Init+0x64>)
 800168e:	4a18      	ldr	r2, [pc, #96]	; (80016f0 <MX_SPI1_Init+0x68>)
 8001690:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001692:	4b16      	ldr	r3, [pc, #88]	; (80016ec <MX_SPI1_Init+0x64>)
 8001694:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001698:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800169a:	4b14      	ldr	r3, [pc, #80]	; (80016ec <MX_SPI1_Init+0x64>)
 800169c:	2200      	movs	r2, #0
 800169e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80016a0:	4b12      	ldr	r3, [pc, #72]	; (80016ec <MX_SPI1_Init+0x64>)
 80016a2:	2200      	movs	r2, #0
 80016a4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80016a6:	4b11      	ldr	r3, [pc, #68]	; (80016ec <MX_SPI1_Init+0x64>)
 80016a8:	2200      	movs	r2, #0
 80016aa:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80016ac:	4b0f      	ldr	r3, [pc, #60]	; (80016ec <MX_SPI1_Init+0x64>)
 80016ae:	2200      	movs	r2, #0
 80016b0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80016b2:	4b0e      	ldr	r3, [pc, #56]	; (80016ec <MX_SPI1_Init+0x64>)
 80016b4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80016b8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80016ba:	4b0c      	ldr	r3, [pc, #48]	; (80016ec <MX_SPI1_Init+0x64>)
 80016bc:	2200      	movs	r2, #0
 80016be:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80016c0:	4b0a      	ldr	r3, [pc, #40]	; (80016ec <MX_SPI1_Init+0x64>)
 80016c2:	2200      	movs	r2, #0
 80016c4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80016c6:	4b09      	ldr	r3, [pc, #36]	; (80016ec <MX_SPI1_Init+0x64>)
 80016c8:	2200      	movs	r2, #0
 80016ca:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80016cc:	4b07      	ldr	r3, [pc, #28]	; (80016ec <MX_SPI1_Init+0x64>)
 80016ce:	2200      	movs	r2, #0
 80016d0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80016d2:	4b06      	ldr	r3, [pc, #24]	; (80016ec <MX_SPI1_Init+0x64>)
 80016d4:	220a      	movs	r2, #10
 80016d6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80016d8:	4804      	ldr	r0, [pc, #16]	; (80016ec <MX_SPI1_Init+0x64>)
 80016da:	f004 fc53 	bl	8005f84 <HAL_SPI_Init>
 80016de:	4603      	mov	r3, r0
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d001      	beq.n	80016e8 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80016e4:	f7ff ffbe 	bl	8001664 <Error_Handler>
  }

}
 80016e8:	bf00      	nop
 80016ea:	bd80      	pop	{r7, pc}
 80016ec:	200007c4 	.word	0x200007c4
 80016f0:	40013000 	.word	0x40013000

080016f4 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b08a      	sub	sp, #40	; 0x28
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016fc:	f107 0314 	add.w	r3, r7, #20
 8001700:	2200      	movs	r2, #0
 8001702:	601a      	str	r2, [r3, #0]
 8001704:	605a      	str	r2, [r3, #4]
 8001706:	609a      	str	r2, [r3, #8]
 8001708:	60da      	str	r2, [r3, #12]
 800170a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	4a19      	ldr	r2, [pc, #100]	; (8001778 <HAL_SPI_MspInit+0x84>)
 8001712:	4293      	cmp	r3, r2
 8001714:	d12b      	bne.n	800176e <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001716:	2300      	movs	r3, #0
 8001718:	613b      	str	r3, [r7, #16]
 800171a:	4b18      	ldr	r3, [pc, #96]	; (800177c <HAL_SPI_MspInit+0x88>)
 800171c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800171e:	4a17      	ldr	r2, [pc, #92]	; (800177c <HAL_SPI_MspInit+0x88>)
 8001720:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001724:	6453      	str	r3, [r2, #68]	; 0x44
 8001726:	4b15      	ldr	r3, [pc, #84]	; (800177c <HAL_SPI_MspInit+0x88>)
 8001728:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800172a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800172e:	613b      	str	r3, [r7, #16]
 8001730:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001732:	2300      	movs	r3, #0
 8001734:	60fb      	str	r3, [r7, #12]
 8001736:	4b11      	ldr	r3, [pc, #68]	; (800177c <HAL_SPI_MspInit+0x88>)
 8001738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800173a:	4a10      	ldr	r2, [pc, #64]	; (800177c <HAL_SPI_MspInit+0x88>)
 800173c:	f043 0301 	orr.w	r3, r3, #1
 8001740:	6313      	str	r3, [r2, #48]	; 0x30
 8001742:	4b0e      	ldr	r3, [pc, #56]	; (800177c <HAL_SPI_MspInit+0x88>)
 8001744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001746:	f003 0301 	and.w	r3, r3, #1
 800174a:	60fb      	str	r3, [r7, #12]
 800174c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 800174e:	23e0      	movs	r3, #224	; 0xe0
 8001750:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001752:	2302      	movs	r3, #2
 8001754:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001756:	2300      	movs	r3, #0
 8001758:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800175a:	2303      	movs	r3, #3
 800175c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800175e:	2305      	movs	r3, #5
 8001760:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001762:	f107 0314 	add.w	r3, r7, #20
 8001766:	4619      	mov	r1, r3
 8001768:	4805      	ldr	r0, [pc, #20]	; (8001780 <HAL_SPI_MspInit+0x8c>)
 800176a:	f001 f845 	bl	80027f8 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 800176e:	bf00      	nop
 8001770:	3728      	adds	r7, #40	; 0x28
 8001772:	46bd      	mov	sp, r7
 8001774:	bd80      	pop	{r7, pc}
 8001776:	bf00      	nop
 8001778:	40013000 	.word	0x40013000
 800177c:	40023800 	.word	0x40023800
 8001780:	40020000 	.word	0x40020000

08001784 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	b082      	sub	sp, #8
 8001788:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800178a:	2300      	movs	r3, #0
 800178c:	607b      	str	r3, [r7, #4]
 800178e:	4b10      	ldr	r3, [pc, #64]	; (80017d0 <HAL_MspInit+0x4c>)
 8001790:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001792:	4a0f      	ldr	r2, [pc, #60]	; (80017d0 <HAL_MspInit+0x4c>)
 8001794:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001798:	6453      	str	r3, [r2, #68]	; 0x44
 800179a:	4b0d      	ldr	r3, [pc, #52]	; (80017d0 <HAL_MspInit+0x4c>)
 800179c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800179e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80017a2:	607b      	str	r3, [r7, #4]
 80017a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80017a6:	2300      	movs	r3, #0
 80017a8:	603b      	str	r3, [r7, #0]
 80017aa:	4b09      	ldr	r3, [pc, #36]	; (80017d0 <HAL_MspInit+0x4c>)
 80017ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ae:	4a08      	ldr	r2, [pc, #32]	; (80017d0 <HAL_MspInit+0x4c>)
 80017b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017b4:	6413      	str	r3, [r2, #64]	; 0x40
 80017b6:	4b06      	ldr	r3, [pc, #24]	; (80017d0 <HAL_MspInit+0x4c>)
 80017b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017be:	603b      	str	r3, [r7, #0]
 80017c0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80017c2:	2007      	movs	r0, #7
 80017c4:	f000 fb28 	bl	8001e18 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80017c8:	bf00      	nop
 80017ca:	3708      	adds	r7, #8
 80017cc:	46bd      	mov	sp, r7
 80017ce:	bd80      	pop	{r7, pc}
 80017d0:	40023800 	.word	0x40023800

080017d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80017d4:	b480      	push	{r7}
 80017d6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80017d8:	bf00      	nop
 80017da:	46bd      	mov	sp, r7
 80017dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e0:	4770      	bx	lr

080017e2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80017e2:	b480      	push	{r7}
 80017e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017e6:	e7fe      	b.n	80017e6 <HardFault_Handler+0x4>

080017e8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80017e8:	b480      	push	{r7}
 80017ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80017ec:	e7fe      	b.n	80017ec <MemManage_Handler+0x4>

080017ee <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80017ee:	b480      	push	{r7}
 80017f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80017f2:	e7fe      	b.n	80017f2 <BusFault_Handler+0x4>

080017f4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80017f4:	b480      	push	{r7}
 80017f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80017f8:	e7fe      	b.n	80017f8 <UsageFault_Handler+0x4>

080017fa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80017fa:	b480      	push	{r7}
 80017fc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80017fe:	bf00      	nop
 8001800:	46bd      	mov	sp, r7
 8001802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001806:	4770      	bx	lr

08001808 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001808:	b480      	push	{r7}
 800180a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800180c:	bf00      	nop
 800180e:	46bd      	mov	sp, r7
 8001810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001814:	4770      	bx	lr

08001816 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001816:	b480      	push	{r7}
 8001818:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800181a:	bf00      	nop
 800181c:	46bd      	mov	sp, r7
 800181e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001822:	4770      	bx	lr

08001824 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001828:	f000 f9e4 	bl	8001bf4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800182c:	bf00      	nop
 800182e:	bd80      	pop	{r7, pc}

08001830 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 8001834:	4802      	ldr	r0, [pc, #8]	; (8001840 <DMA1_Stream3_IRQHandler+0x10>)
 8001836:	f000 fda5 	bl	8002384 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 800183a:	bf00      	nop
 800183c:	bd80      	pop	{r7, pc}
 800183e:	bf00      	nop
 8001840:	20000674 	.word	0x20000674

08001844 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_tx);
 8001848:	4802      	ldr	r0, [pc, #8]	; (8001854 <DMA1_Stream5_IRQHandler+0x10>)
 800184a:	f000 fd9b 	bl	8002384 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 800184e:	bf00      	nop
 8001850:	bd80      	pop	{r7, pc}
 8001852:	bf00      	nop
 8001854:	200006d4 	.word	0x200006d4

08001858 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 800185c:	4802      	ldr	r0, [pc, #8]	; (8001868 <OTG_FS_IRQHandler+0x10>)
 800185e:	f002 fb46 	bl	8003eee <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001862:	bf00      	nop
 8001864:	bd80      	pop	{r7, pc}
 8001866:	bf00      	nop
 8001868:	20001d84 	.word	0x20001d84

0800186c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	b086      	sub	sp, #24
 8001870:	af00      	add	r7, sp, #0
 8001872:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001874:	4a14      	ldr	r2, [pc, #80]	; (80018c8 <_sbrk+0x5c>)
 8001876:	4b15      	ldr	r3, [pc, #84]	; (80018cc <_sbrk+0x60>)
 8001878:	1ad3      	subs	r3, r2, r3
 800187a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800187c:	697b      	ldr	r3, [r7, #20]
 800187e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001880:	4b13      	ldr	r3, [pc, #76]	; (80018d0 <_sbrk+0x64>)
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	2b00      	cmp	r3, #0
 8001886:	d102      	bne.n	800188e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001888:	4b11      	ldr	r3, [pc, #68]	; (80018d0 <_sbrk+0x64>)
 800188a:	4a12      	ldr	r2, [pc, #72]	; (80018d4 <_sbrk+0x68>)
 800188c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800188e:	4b10      	ldr	r3, [pc, #64]	; (80018d0 <_sbrk+0x64>)
 8001890:	681a      	ldr	r2, [r3, #0]
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	4413      	add	r3, r2
 8001896:	693a      	ldr	r2, [r7, #16]
 8001898:	429a      	cmp	r2, r3
 800189a:	d207      	bcs.n	80018ac <_sbrk+0x40>
  {
    errno = ENOMEM;
 800189c:	f00b fb78 	bl	800cf90 <__errno>
 80018a0:	4602      	mov	r2, r0
 80018a2:	230c      	movs	r3, #12
 80018a4:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 80018a6:	f04f 33ff 	mov.w	r3, #4294967295
 80018aa:	e009      	b.n	80018c0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80018ac:	4b08      	ldr	r3, [pc, #32]	; (80018d0 <_sbrk+0x64>)
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80018b2:	4b07      	ldr	r3, [pc, #28]	; (80018d0 <_sbrk+0x64>)
 80018b4:	681a      	ldr	r2, [r3, #0]
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	4413      	add	r3, r2
 80018ba:	4a05      	ldr	r2, [pc, #20]	; (80018d0 <_sbrk+0x64>)
 80018bc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80018be:	68fb      	ldr	r3, [r7, #12]
}
 80018c0:	4618      	mov	r0, r3
 80018c2:	3718      	adds	r7, #24
 80018c4:	46bd      	mov	sp, r7
 80018c6:	bd80      	pop	{r7, pc}
 80018c8:	20020000 	.word	0x20020000
 80018cc:	00000400 	.word	0x00000400
 80018d0:	20000608 	.word	0x20000608
 80018d4:	20002190 	.word	0x20002190

080018d8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80018d8:	b480      	push	{r7}
 80018da:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80018dc:	4b08      	ldr	r3, [pc, #32]	; (8001900 <SystemInit+0x28>)
 80018de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80018e2:	4a07      	ldr	r2, [pc, #28]	; (8001900 <SystemInit+0x28>)
 80018e4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80018e8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80018ec:	4b04      	ldr	r3, [pc, #16]	; (8001900 <SystemInit+0x28>)
 80018ee:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80018f2:	609a      	str	r2, [r3, #8]
#endif
}
 80018f4:	bf00      	nop
 80018f6:	46bd      	mov	sp, r7
 80018f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fc:	4770      	bx	lr
 80018fe:	bf00      	nop
 8001900:	e000ed00 	.word	0xe000ed00

08001904 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	b096      	sub	sp, #88	; 0x58
 8001908:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800190a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800190e:	2200      	movs	r2, #0
 8001910:	601a      	str	r2, [r3, #0]
 8001912:	605a      	str	r2, [r3, #4]
 8001914:	609a      	str	r2, [r3, #8]
 8001916:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001918:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800191c:	2200      	movs	r2, #0
 800191e:	601a      	str	r2, [r3, #0]
 8001920:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001922:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001926:	2200      	movs	r2, #0
 8001928:	601a      	str	r2, [r3, #0]
 800192a:	605a      	str	r2, [r3, #4]
 800192c:	609a      	str	r2, [r3, #8]
 800192e:	60da      	str	r2, [r3, #12]
 8001930:	611a      	str	r2, [r3, #16]
 8001932:	615a      	str	r2, [r3, #20]
 8001934:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001936:	1d3b      	adds	r3, r7, #4
 8001938:	2220      	movs	r2, #32
 800193a:	2100      	movs	r1, #0
 800193c:	4618      	mov	r0, r3
 800193e:	f00b fb61 	bl	800d004 <memset>

  htim1.Instance = TIM1;
 8001942:	4b3e      	ldr	r3, [pc, #248]	; (8001a3c <MX_TIM1_Init+0x138>)
 8001944:	4a3e      	ldr	r2, [pc, #248]	; (8001a40 <MX_TIM1_Init+0x13c>)
 8001946:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 160;
 8001948:	4b3c      	ldr	r3, [pc, #240]	; (8001a3c <MX_TIM1_Init+0x138>)
 800194a:	22a0      	movs	r2, #160	; 0xa0
 800194c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800194e:	4b3b      	ldr	r3, [pc, #236]	; (8001a3c <MX_TIM1_Init+0x138>)
 8001950:	2200      	movs	r2, #0
 8001952:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 2000;
 8001954:	4b39      	ldr	r3, [pc, #228]	; (8001a3c <MX_TIM1_Init+0x138>)
 8001956:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800195a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800195c:	4b37      	ldr	r3, [pc, #220]	; (8001a3c <MX_TIM1_Init+0x138>)
 800195e:	2200      	movs	r2, #0
 8001960:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001962:	4b36      	ldr	r3, [pc, #216]	; (8001a3c <MX_TIM1_Init+0x138>)
 8001964:	2200      	movs	r2, #0
 8001966:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001968:	4b34      	ldr	r3, [pc, #208]	; (8001a3c <MX_TIM1_Init+0x138>)
 800196a:	2200      	movs	r2, #0
 800196c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800196e:	4833      	ldr	r0, [pc, #204]	; (8001a3c <MX_TIM1_Init+0x138>)
 8001970:	f004 fc36 	bl	80061e0 <HAL_TIM_Base_Init>
 8001974:	4603      	mov	r3, r0
 8001976:	2b00      	cmp	r3, #0
 8001978:	d001      	beq.n	800197e <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 800197a:	f7ff fe73 	bl	8001664 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800197e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001982:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001984:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001988:	4619      	mov	r1, r3
 800198a:	482c      	ldr	r0, [pc, #176]	; (8001a3c <MX_TIM1_Init+0x138>)
 800198c:	f004 ffd4 	bl	8006938 <HAL_TIM_ConfigClockSource>
 8001990:	4603      	mov	r3, r0
 8001992:	2b00      	cmp	r3, #0
 8001994:	d001      	beq.n	800199a <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8001996:	f7ff fe65 	bl	8001664 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800199a:	4828      	ldr	r0, [pc, #160]	; (8001a3c <MX_TIM1_Init+0x138>)
 800199c:	f004 fcc2 	bl	8006324 <HAL_TIM_PWM_Init>
 80019a0:	4603      	mov	r3, r0
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d001      	beq.n	80019aa <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 80019a6:	f7ff fe5d 	bl	8001664 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80019aa:	2300      	movs	r3, #0
 80019ac:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80019ae:	2300      	movs	r3, #0
 80019b0:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80019b2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80019b6:	4619      	mov	r1, r3
 80019b8:	4820      	ldr	r0, [pc, #128]	; (8001a3c <MX_TIM1_Init+0x138>)
 80019ba:	f005 fe51 	bl	8007660 <HAL_TIMEx_MasterConfigSynchronization>
 80019be:	4603      	mov	r3, r0
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d001      	beq.n	80019c8 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 80019c4:	f7ff fe4e 	bl	8001664 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80019c8:	2360      	movs	r3, #96	; 0x60
 80019ca:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 50;
 80019cc:	2332      	movs	r3, #50	; 0x32
 80019ce:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80019d0:	2300      	movs	r3, #0
 80019d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80019d4:	2300      	movs	r3, #0
 80019d6:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80019d8:	2300      	movs	r3, #0
 80019da:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80019dc:	2300      	movs	r3, #0
 80019de:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80019e0:	2300      	movs	r3, #0
 80019e2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80019e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019e8:	2200      	movs	r2, #0
 80019ea:	4619      	mov	r1, r3
 80019ec:	4813      	ldr	r0, [pc, #76]	; (8001a3c <MX_TIM1_Init+0x138>)
 80019ee:	f004 fdf9 	bl	80065e4 <HAL_TIM_PWM_ConfigChannel>
 80019f2:	4603      	mov	r3, r0
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d001      	beq.n	80019fc <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 80019f8:	f7ff fe34 	bl	8001664 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80019fc:	2300      	movs	r3, #0
 80019fe:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001a00:	2300      	movs	r3, #0
 8001a02:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001a04:	2300      	movs	r3, #0
 8001a06:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001a08:	2300      	movs	r3, #0
 8001a0a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001a10:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001a14:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001a16:	2300      	movs	r3, #0
 8001a18:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001a1a:	1d3b      	adds	r3, r7, #4
 8001a1c:	4619      	mov	r1, r3
 8001a1e:	4807      	ldr	r0, [pc, #28]	; (8001a3c <MX_TIM1_Init+0x138>)
 8001a20:	f005 fedc 	bl	80077dc <HAL_TIMEx_ConfigBreakDeadTime>
 8001a24:	4603      	mov	r3, r0
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d001      	beq.n	8001a2e <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 8001a2a:	f7ff fe1b 	bl	8001664 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim1);
 8001a2e:	4803      	ldr	r0, [pc, #12]	; (8001a3c <MX_TIM1_Init+0x138>)
 8001a30:	f000 f82a 	bl	8001a88 <HAL_TIM_MspPostInit>

}
 8001a34:	bf00      	nop
 8001a36:	3758      	adds	r7, #88	; 0x58
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	bd80      	pop	{r7, pc}
 8001a3c:	2000081c 	.word	0x2000081c
 8001a40:	40010000 	.word	0x40010000

08001a44 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001a44:	b480      	push	{r7}
 8001a46:	b085      	sub	sp, #20
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	4a0b      	ldr	r2, [pc, #44]	; (8001a80 <HAL_TIM_Base_MspInit+0x3c>)
 8001a52:	4293      	cmp	r3, r2
 8001a54:	d10d      	bne.n	8001a72 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001a56:	2300      	movs	r3, #0
 8001a58:	60fb      	str	r3, [r7, #12]
 8001a5a:	4b0a      	ldr	r3, [pc, #40]	; (8001a84 <HAL_TIM_Base_MspInit+0x40>)
 8001a5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a5e:	4a09      	ldr	r2, [pc, #36]	; (8001a84 <HAL_TIM_Base_MspInit+0x40>)
 8001a60:	f043 0301 	orr.w	r3, r3, #1
 8001a64:	6453      	str	r3, [r2, #68]	; 0x44
 8001a66:	4b07      	ldr	r3, [pc, #28]	; (8001a84 <HAL_TIM_Base_MspInit+0x40>)
 8001a68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a6a:	f003 0301 	and.w	r3, r3, #1
 8001a6e:	60fb      	str	r3, [r7, #12]
 8001a70:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8001a72:	bf00      	nop
 8001a74:	3714      	adds	r7, #20
 8001a76:	46bd      	mov	sp, r7
 8001a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7c:	4770      	bx	lr
 8001a7e:	bf00      	nop
 8001a80:	40010000 	.word	0x40010000
 8001a84:	40023800 	.word	0x40023800

08001a88 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b088      	sub	sp, #32
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a90:	f107 030c 	add.w	r3, r7, #12
 8001a94:	2200      	movs	r2, #0
 8001a96:	601a      	str	r2, [r3, #0]
 8001a98:	605a      	str	r2, [r3, #4]
 8001a9a:	609a      	str	r2, [r3, #8]
 8001a9c:	60da      	str	r2, [r3, #12]
 8001a9e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	4a12      	ldr	r2, [pc, #72]	; (8001af0 <HAL_TIM_MspPostInit+0x68>)
 8001aa6:	4293      	cmp	r3, r2
 8001aa8:	d11e      	bne.n	8001ae8 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001aaa:	2300      	movs	r3, #0
 8001aac:	60bb      	str	r3, [r7, #8]
 8001aae:	4b11      	ldr	r3, [pc, #68]	; (8001af4 <HAL_TIM_MspPostInit+0x6c>)
 8001ab0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ab2:	4a10      	ldr	r2, [pc, #64]	; (8001af4 <HAL_TIM_MspPostInit+0x6c>)
 8001ab4:	f043 0310 	orr.w	r3, r3, #16
 8001ab8:	6313      	str	r3, [r2, #48]	; 0x30
 8001aba:	4b0e      	ldr	r3, [pc, #56]	; (8001af4 <HAL_TIM_MspPostInit+0x6c>)
 8001abc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001abe:	f003 0310 	and.w	r3, r3, #16
 8001ac2:	60bb      	str	r3, [r7, #8]
 8001ac4:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001ac6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001aca:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001acc:	2302      	movs	r3, #2
 8001ace:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001ad8:	2301      	movs	r3, #1
 8001ada:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001adc:	f107 030c 	add.w	r3, r7, #12
 8001ae0:	4619      	mov	r1, r3
 8001ae2:	4805      	ldr	r0, [pc, #20]	; (8001af8 <HAL_TIM_MspPostInit+0x70>)
 8001ae4:	f000 fe88 	bl	80027f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001ae8:	bf00      	nop
 8001aea:	3720      	adds	r7, #32
 8001aec:	46bd      	mov	sp, r7
 8001aee:	bd80      	pop	{r7, pc}
 8001af0:	40010000 	.word	0x40010000
 8001af4:	40023800 	.word	0x40023800
 8001af8:	40021000 	.word	0x40021000

08001afc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001afc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001b34 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001b00:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001b02:	e003      	b.n	8001b0c <LoopCopyDataInit>

08001b04 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001b04:	4b0c      	ldr	r3, [pc, #48]	; (8001b38 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001b06:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001b08:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001b0a:	3104      	adds	r1, #4

08001b0c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001b0c:	480b      	ldr	r0, [pc, #44]	; (8001b3c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001b0e:	4b0c      	ldr	r3, [pc, #48]	; (8001b40 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001b10:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001b12:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001b14:	d3f6      	bcc.n	8001b04 <CopyDataInit>
  ldr  r2, =_sbss
 8001b16:	4a0b      	ldr	r2, [pc, #44]	; (8001b44 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001b18:	e002      	b.n	8001b20 <LoopFillZerobss>

08001b1a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001b1a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001b1c:	f842 3b04 	str.w	r3, [r2], #4

08001b20 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001b20:	4b09      	ldr	r3, [pc, #36]	; (8001b48 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001b22:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001b24:	d3f9      	bcc.n	8001b1a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001b26:	f7ff fed7 	bl	80018d8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001b2a:	f00b fa37 	bl	800cf9c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001b2e:	f7ff fc9f 	bl	8001470 <main>
  bx  lr    
 8001b32:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001b34:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001b38:	0800df80 	.word	0x0800df80
  ldr  r0, =_sdata
 8001b3c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001b40:	200005e8 	.word	0x200005e8
  ldr  r2, =_sbss
 8001b44:	200005e8 	.word	0x200005e8
  ldr  r3, = _ebss
 8001b48:	20002190 	.word	0x20002190

08001b4c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001b4c:	e7fe      	b.n	8001b4c <ADC_IRQHandler>
	...

08001b50 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001b54:	4b0e      	ldr	r3, [pc, #56]	; (8001b90 <HAL_Init+0x40>)
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	4a0d      	ldr	r2, [pc, #52]	; (8001b90 <HAL_Init+0x40>)
 8001b5a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001b5e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001b60:	4b0b      	ldr	r3, [pc, #44]	; (8001b90 <HAL_Init+0x40>)
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	4a0a      	ldr	r2, [pc, #40]	; (8001b90 <HAL_Init+0x40>)
 8001b66:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001b6a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b6c:	4b08      	ldr	r3, [pc, #32]	; (8001b90 <HAL_Init+0x40>)
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	4a07      	ldr	r2, [pc, #28]	; (8001b90 <HAL_Init+0x40>)
 8001b72:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b76:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b78:	2003      	movs	r0, #3
 8001b7a:	f000 f94d 	bl	8001e18 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001b7e:	2000      	movs	r0, #0
 8001b80:	f000 f808 	bl	8001b94 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001b84:	f7ff fdfe 	bl	8001784 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b88:	2300      	movs	r3, #0
}
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	bd80      	pop	{r7, pc}
 8001b8e:	bf00      	nop
 8001b90:	40023c00 	.word	0x40023c00

08001b94 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b082      	sub	sp, #8
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001b9c:	4b12      	ldr	r3, [pc, #72]	; (8001be8 <HAL_InitTick+0x54>)
 8001b9e:	681a      	ldr	r2, [r3, #0]
 8001ba0:	4b12      	ldr	r3, [pc, #72]	; (8001bec <HAL_InitTick+0x58>)
 8001ba2:	781b      	ldrb	r3, [r3, #0]
 8001ba4:	4619      	mov	r1, r3
 8001ba6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001baa:	fbb3 f3f1 	udiv	r3, r3, r1
 8001bae:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	f000 f994 	bl	8001ee0 <HAL_SYSTICK_Config>
 8001bb8:	4603      	mov	r3, r0
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d001      	beq.n	8001bc2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001bbe:	2301      	movs	r3, #1
 8001bc0:	e00e      	b.n	8001be0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	2b0f      	cmp	r3, #15
 8001bc6:	d80a      	bhi.n	8001bde <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001bc8:	2200      	movs	r2, #0
 8001bca:	6879      	ldr	r1, [r7, #4]
 8001bcc:	f04f 30ff 	mov.w	r0, #4294967295
 8001bd0:	f000 f942 	bl	8001e58 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001bd4:	4a06      	ldr	r2, [pc, #24]	; (8001bf0 <HAL_InitTick+0x5c>)
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001bda:	2300      	movs	r3, #0
 8001bdc:	e000      	b.n	8001be0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001bde:	2301      	movs	r3, #1
}
 8001be0:	4618      	mov	r0, r3
 8001be2:	3708      	adds	r7, #8
 8001be4:	46bd      	mov	sp, r7
 8001be6:	bd80      	pop	{r7, pc}
 8001be8:	20000400 	.word	0x20000400
 8001bec:	20000408 	.word	0x20000408
 8001bf0:	20000404 	.word	0x20000404

08001bf4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001bf4:	b480      	push	{r7}
 8001bf6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001bf8:	4b06      	ldr	r3, [pc, #24]	; (8001c14 <HAL_IncTick+0x20>)
 8001bfa:	781b      	ldrb	r3, [r3, #0]
 8001bfc:	461a      	mov	r2, r3
 8001bfe:	4b06      	ldr	r3, [pc, #24]	; (8001c18 <HAL_IncTick+0x24>)
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	4413      	add	r3, r2
 8001c04:	4a04      	ldr	r2, [pc, #16]	; (8001c18 <HAL_IncTick+0x24>)
 8001c06:	6013      	str	r3, [r2, #0]
}
 8001c08:	bf00      	nop
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c10:	4770      	bx	lr
 8001c12:	bf00      	nop
 8001c14:	20000408 	.word	0x20000408
 8001c18:	2000085c 	.word	0x2000085c

08001c1c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c1c:	b480      	push	{r7}
 8001c1e:	af00      	add	r7, sp, #0
  return uwTick;
 8001c20:	4b03      	ldr	r3, [pc, #12]	; (8001c30 <HAL_GetTick+0x14>)
 8001c22:	681b      	ldr	r3, [r3, #0]
}
 8001c24:	4618      	mov	r0, r3
 8001c26:	46bd      	mov	sp, r7
 8001c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2c:	4770      	bx	lr
 8001c2e:	bf00      	nop
 8001c30:	2000085c 	.word	0x2000085c

08001c34 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	b084      	sub	sp, #16
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c3c:	f7ff ffee 	bl	8001c1c <HAL_GetTick>
 8001c40:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c4c:	d005      	beq.n	8001c5a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001c4e:	4b09      	ldr	r3, [pc, #36]	; (8001c74 <HAL_Delay+0x40>)
 8001c50:	781b      	ldrb	r3, [r3, #0]
 8001c52:	461a      	mov	r2, r3
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	4413      	add	r3, r2
 8001c58:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001c5a:	bf00      	nop
 8001c5c:	f7ff ffde 	bl	8001c1c <HAL_GetTick>
 8001c60:	4602      	mov	r2, r0
 8001c62:	68bb      	ldr	r3, [r7, #8]
 8001c64:	1ad3      	subs	r3, r2, r3
 8001c66:	68fa      	ldr	r2, [r7, #12]
 8001c68:	429a      	cmp	r2, r3
 8001c6a:	d8f7      	bhi.n	8001c5c <HAL_Delay+0x28>
  {
  }
}
 8001c6c:	bf00      	nop
 8001c6e:	3710      	adds	r7, #16
 8001c70:	46bd      	mov	sp, r7
 8001c72:	bd80      	pop	{r7, pc}
 8001c74:	20000408 	.word	0x20000408

08001c78 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c78:	b480      	push	{r7}
 8001c7a:	b085      	sub	sp, #20
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	f003 0307 	and.w	r3, r3, #7
 8001c86:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c88:	4b0c      	ldr	r3, [pc, #48]	; (8001cbc <__NVIC_SetPriorityGrouping+0x44>)
 8001c8a:	68db      	ldr	r3, [r3, #12]
 8001c8c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c8e:	68ba      	ldr	r2, [r7, #8]
 8001c90:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001c94:	4013      	ands	r3, r2
 8001c96:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c9c:	68bb      	ldr	r3, [r7, #8]
 8001c9e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ca0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001ca4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ca8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001caa:	4a04      	ldr	r2, [pc, #16]	; (8001cbc <__NVIC_SetPriorityGrouping+0x44>)
 8001cac:	68bb      	ldr	r3, [r7, #8]
 8001cae:	60d3      	str	r3, [r2, #12]
}
 8001cb0:	bf00      	nop
 8001cb2:	3714      	adds	r7, #20
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cba:	4770      	bx	lr
 8001cbc:	e000ed00 	.word	0xe000ed00

08001cc0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001cc0:	b480      	push	{r7}
 8001cc2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001cc4:	4b04      	ldr	r3, [pc, #16]	; (8001cd8 <__NVIC_GetPriorityGrouping+0x18>)
 8001cc6:	68db      	ldr	r3, [r3, #12]
 8001cc8:	0a1b      	lsrs	r3, r3, #8
 8001cca:	f003 0307 	and.w	r3, r3, #7
}
 8001cce:	4618      	mov	r0, r3
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd6:	4770      	bx	lr
 8001cd8:	e000ed00 	.word	0xe000ed00

08001cdc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001cdc:	b480      	push	{r7}
 8001cde:	b083      	sub	sp, #12
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	4603      	mov	r3, r0
 8001ce4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ce6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	db0b      	blt.n	8001d06 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001cee:	79fb      	ldrb	r3, [r7, #7]
 8001cf0:	f003 021f 	and.w	r2, r3, #31
 8001cf4:	4907      	ldr	r1, [pc, #28]	; (8001d14 <__NVIC_EnableIRQ+0x38>)
 8001cf6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cfa:	095b      	lsrs	r3, r3, #5
 8001cfc:	2001      	movs	r0, #1
 8001cfe:	fa00 f202 	lsl.w	r2, r0, r2
 8001d02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001d06:	bf00      	nop
 8001d08:	370c      	adds	r7, #12
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d10:	4770      	bx	lr
 8001d12:	bf00      	nop
 8001d14:	e000e100 	.word	0xe000e100

08001d18 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d18:	b480      	push	{r7}
 8001d1a:	b083      	sub	sp, #12
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	4603      	mov	r3, r0
 8001d20:	6039      	str	r1, [r7, #0]
 8001d22:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	db0a      	blt.n	8001d42 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d2c:	683b      	ldr	r3, [r7, #0]
 8001d2e:	b2da      	uxtb	r2, r3
 8001d30:	490c      	ldr	r1, [pc, #48]	; (8001d64 <__NVIC_SetPriority+0x4c>)
 8001d32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d36:	0112      	lsls	r2, r2, #4
 8001d38:	b2d2      	uxtb	r2, r2
 8001d3a:	440b      	add	r3, r1
 8001d3c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d40:	e00a      	b.n	8001d58 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d42:	683b      	ldr	r3, [r7, #0]
 8001d44:	b2da      	uxtb	r2, r3
 8001d46:	4908      	ldr	r1, [pc, #32]	; (8001d68 <__NVIC_SetPriority+0x50>)
 8001d48:	79fb      	ldrb	r3, [r7, #7]
 8001d4a:	f003 030f 	and.w	r3, r3, #15
 8001d4e:	3b04      	subs	r3, #4
 8001d50:	0112      	lsls	r2, r2, #4
 8001d52:	b2d2      	uxtb	r2, r2
 8001d54:	440b      	add	r3, r1
 8001d56:	761a      	strb	r2, [r3, #24]
}
 8001d58:	bf00      	nop
 8001d5a:	370c      	adds	r7, #12
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d62:	4770      	bx	lr
 8001d64:	e000e100 	.word	0xe000e100
 8001d68:	e000ed00 	.word	0xe000ed00

08001d6c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d6c:	b480      	push	{r7}
 8001d6e:	b089      	sub	sp, #36	; 0x24
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	60f8      	str	r0, [r7, #12]
 8001d74:	60b9      	str	r1, [r7, #8]
 8001d76:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	f003 0307 	and.w	r3, r3, #7
 8001d7e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d80:	69fb      	ldr	r3, [r7, #28]
 8001d82:	f1c3 0307 	rsb	r3, r3, #7
 8001d86:	2b04      	cmp	r3, #4
 8001d88:	bf28      	it	cs
 8001d8a:	2304      	movcs	r3, #4
 8001d8c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d8e:	69fb      	ldr	r3, [r7, #28]
 8001d90:	3304      	adds	r3, #4
 8001d92:	2b06      	cmp	r3, #6
 8001d94:	d902      	bls.n	8001d9c <NVIC_EncodePriority+0x30>
 8001d96:	69fb      	ldr	r3, [r7, #28]
 8001d98:	3b03      	subs	r3, #3
 8001d9a:	e000      	b.n	8001d9e <NVIC_EncodePriority+0x32>
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001da0:	f04f 32ff 	mov.w	r2, #4294967295
 8001da4:	69bb      	ldr	r3, [r7, #24]
 8001da6:	fa02 f303 	lsl.w	r3, r2, r3
 8001daa:	43da      	mvns	r2, r3
 8001dac:	68bb      	ldr	r3, [r7, #8]
 8001dae:	401a      	ands	r2, r3
 8001db0:	697b      	ldr	r3, [r7, #20]
 8001db2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001db4:	f04f 31ff 	mov.w	r1, #4294967295
 8001db8:	697b      	ldr	r3, [r7, #20]
 8001dba:	fa01 f303 	lsl.w	r3, r1, r3
 8001dbe:	43d9      	mvns	r1, r3
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001dc4:	4313      	orrs	r3, r2
         );
}
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	3724      	adds	r7, #36	; 0x24
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd0:	4770      	bx	lr
	...

08001dd4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b082      	sub	sp, #8
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	3b01      	subs	r3, #1
 8001de0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001de4:	d301      	bcc.n	8001dea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001de6:	2301      	movs	r3, #1
 8001de8:	e00f      	b.n	8001e0a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001dea:	4a0a      	ldr	r2, [pc, #40]	; (8001e14 <SysTick_Config+0x40>)
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	3b01      	subs	r3, #1
 8001df0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001df2:	210f      	movs	r1, #15
 8001df4:	f04f 30ff 	mov.w	r0, #4294967295
 8001df8:	f7ff ff8e 	bl	8001d18 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001dfc:	4b05      	ldr	r3, [pc, #20]	; (8001e14 <SysTick_Config+0x40>)
 8001dfe:	2200      	movs	r2, #0
 8001e00:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e02:	4b04      	ldr	r3, [pc, #16]	; (8001e14 <SysTick_Config+0x40>)
 8001e04:	2207      	movs	r2, #7
 8001e06:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e08:	2300      	movs	r3, #0
}
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	3708      	adds	r7, #8
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	bd80      	pop	{r7, pc}
 8001e12:	bf00      	nop
 8001e14:	e000e010 	.word	0xe000e010

08001e18 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	b082      	sub	sp, #8
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	2b07      	cmp	r3, #7
 8001e24:	d00f      	beq.n	8001e46 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	2b06      	cmp	r3, #6
 8001e2a:	d00c      	beq.n	8001e46 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	2b05      	cmp	r3, #5
 8001e30:	d009      	beq.n	8001e46 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	2b04      	cmp	r3, #4
 8001e36:	d006      	beq.n	8001e46 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	2b03      	cmp	r3, #3
 8001e3c:	d003      	beq.n	8001e46 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8001e3e:	2192      	movs	r1, #146	; 0x92
 8001e40:	4804      	ldr	r0, [pc, #16]	; (8001e54 <HAL_NVIC_SetPriorityGrouping+0x3c>)
 8001e42:	f7ff fc16 	bl	8001672 <assert_failed>
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e46:	6878      	ldr	r0, [r7, #4]
 8001e48:	f7ff ff16 	bl	8001c78 <__NVIC_SetPriorityGrouping>
}
 8001e4c:	bf00      	nop
 8001e4e:	3708      	adds	r7, #8
 8001e50:	46bd      	mov	sp, r7
 8001e52:	bd80      	pop	{r7, pc}
 8001e54:	0800dbf8 	.word	0x0800dbf8

08001e58 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	b086      	sub	sp, #24
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	4603      	mov	r3, r0
 8001e60:	60b9      	str	r1, [r7, #8]
 8001e62:	607a      	str	r2, [r7, #4]
 8001e64:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001e66:	2300      	movs	r3, #0
 8001e68:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	2b0f      	cmp	r3, #15
 8001e6e:	d903      	bls.n	8001e78 <HAL_NVIC_SetPriority+0x20>
 8001e70:	21aa      	movs	r1, #170	; 0xaa
 8001e72:	480e      	ldr	r0, [pc, #56]	; (8001eac <HAL_NVIC_SetPriority+0x54>)
 8001e74:	f7ff fbfd 	bl	8001672 <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 8001e78:	68bb      	ldr	r3, [r7, #8]
 8001e7a:	2b0f      	cmp	r3, #15
 8001e7c:	d903      	bls.n	8001e86 <HAL_NVIC_SetPriority+0x2e>
 8001e7e:	21ab      	movs	r1, #171	; 0xab
 8001e80:	480a      	ldr	r0, [pc, #40]	; (8001eac <HAL_NVIC_SetPriority+0x54>)
 8001e82:	f7ff fbf6 	bl	8001672 <assert_failed>
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001e86:	f7ff ff1b 	bl	8001cc0 <__NVIC_GetPriorityGrouping>
 8001e8a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e8c:	687a      	ldr	r2, [r7, #4]
 8001e8e:	68b9      	ldr	r1, [r7, #8]
 8001e90:	6978      	ldr	r0, [r7, #20]
 8001e92:	f7ff ff6b 	bl	8001d6c <NVIC_EncodePriority>
 8001e96:	4602      	mov	r2, r0
 8001e98:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e9c:	4611      	mov	r1, r2
 8001e9e:	4618      	mov	r0, r3
 8001ea0:	f7ff ff3a 	bl	8001d18 <__NVIC_SetPriority>
}
 8001ea4:	bf00      	nop
 8001ea6:	3718      	adds	r7, #24
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	bd80      	pop	{r7, pc}
 8001eac:	0800dbf8 	.word	0x0800dbf8

08001eb0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b082      	sub	sp, #8
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	4603      	mov	r3, r0
 8001eb8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 8001eba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	da03      	bge.n	8001eca <HAL_NVIC_EnableIRQ+0x1a>
 8001ec2:	21be      	movs	r1, #190	; 0xbe
 8001ec4:	4805      	ldr	r0, [pc, #20]	; (8001edc <HAL_NVIC_EnableIRQ+0x2c>)
 8001ec6:	f7ff fbd4 	bl	8001672 <assert_failed>
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001eca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ece:	4618      	mov	r0, r3
 8001ed0:	f7ff ff04 	bl	8001cdc <__NVIC_EnableIRQ>
}
 8001ed4:	bf00      	nop
 8001ed6:	3708      	adds	r7, #8
 8001ed8:	46bd      	mov	sp, r7
 8001eda:	bd80      	pop	{r7, pc}
 8001edc:	0800dbf8 	.word	0x0800dbf8

08001ee0 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	b082      	sub	sp, #8
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001ee8:	6878      	ldr	r0, [r7, #4]
 8001eea:	f7ff ff73 	bl	8001dd4 <SysTick_Config>
 8001eee:	4603      	mov	r3, r0
}
 8001ef0:	4618      	mov	r0, r3
 8001ef2:	3708      	adds	r7, #8
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	bd80      	pop	{r7, pc}

08001ef8 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	b082      	sub	sp, #8
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d101      	bne.n	8001f0a <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8001f06:	2301      	movs	r3, #1
 8001f08:	e017      	b.n	8001f3a <HAL_CRC_Init+0x42>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	4a0d      	ldr	r2, [pc, #52]	; (8001f44 <HAL_CRC_Init+0x4c>)
 8001f10:	4293      	cmp	r3, r2
 8001f12:	d003      	beq.n	8001f1c <HAL_CRC_Init+0x24>
 8001f14:	2168      	movs	r1, #104	; 0x68
 8001f16:	480c      	ldr	r0, [pc, #48]	; (8001f48 <HAL_CRC_Init+0x50>)
 8001f18:	f7ff fbab 	bl	8001672 <assert_failed>

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	795b      	ldrb	r3, [r3, #5]
 8001f20:	b2db      	uxtb	r3, r3
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d105      	bne.n	8001f32 <HAL_CRC_Init+0x3a>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	2200      	movs	r2, #0
 8001f2a:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8001f2c:	6878      	ldr	r0, [r7, #4]
 8001f2e:	f7fe ff2d 	bl	8000d8c <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	2201      	movs	r2, #1
 8001f36:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8001f38:	2300      	movs	r3, #0
}
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	3708      	adds	r7, #8
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	bd80      	pop	{r7, pc}
 8001f42:	bf00      	nop
 8001f44:	40023000 	.word	0x40023000
 8001f48:	0800dc34 	.word	0x0800dc34

08001f4c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	b086      	sub	sp, #24
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001f54:	2300      	movs	r3, #0
 8001f56:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001f58:	f7ff fe60 	bl	8001c1c <HAL_GetTick>
 8001f5c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d101      	bne.n	8001f68 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001f64:	2301      	movs	r3, #1
 8001f66:	e204      	b.n	8002372 <HAL_DMA_Init+0x426>
  }

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	4a97      	ldr	r2, [pc, #604]	; (80021cc <HAL_DMA_Init+0x280>)
 8001f6e:	4293      	cmp	r3, r2
 8001f70:	d04e      	beq.n	8002010 <HAL_DMA_Init+0xc4>
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	4a96      	ldr	r2, [pc, #600]	; (80021d0 <HAL_DMA_Init+0x284>)
 8001f78:	4293      	cmp	r3, r2
 8001f7a:	d049      	beq.n	8002010 <HAL_DMA_Init+0xc4>
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	4a94      	ldr	r2, [pc, #592]	; (80021d4 <HAL_DMA_Init+0x288>)
 8001f82:	4293      	cmp	r3, r2
 8001f84:	d044      	beq.n	8002010 <HAL_DMA_Init+0xc4>
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	4a93      	ldr	r2, [pc, #588]	; (80021d8 <HAL_DMA_Init+0x28c>)
 8001f8c:	4293      	cmp	r3, r2
 8001f8e:	d03f      	beq.n	8002010 <HAL_DMA_Init+0xc4>
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	4a91      	ldr	r2, [pc, #580]	; (80021dc <HAL_DMA_Init+0x290>)
 8001f96:	4293      	cmp	r3, r2
 8001f98:	d03a      	beq.n	8002010 <HAL_DMA_Init+0xc4>
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	4a90      	ldr	r2, [pc, #576]	; (80021e0 <HAL_DMA_Init+0x294>)
 8001fa0:	4293      	cmp	r3, r2
 8001fa2:	d035      	beq.n	8002010 <HAL_DMA_Init+0xc4>
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	4a8e      	ldr	r2, [pc, #568]	; (80021e4 <HAL_DMA_Init+0x298>)
 8001faa:	4293      	cmp	r3, r2
 8001fac:	d030      	beq.n	8002010 <HAL_DMA_Init+0xc4>
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	4a8d      	ldr	r2, [pc, #564]	; (80021e8 <HAL_DMA_Init+0x29c>)
 8001fb4:	4293      	cmp	r3, r2
 8001fb6:	d02b      	beq.n	8002010 <HAL_DMA_Init+0xc4>
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	4a8b      	ldr	r2, [pc, #556]	; (80021ec <HAL_DMA_Init+0x2a0>)
 8001fbe:	4293      	cmp	r3, r2
 8001fc0:	d026      	beq.n	8002010 <HAL_DMA_Init+0xc4>
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	4a8a      	ldr	r2, [pc, #552]	; (80021f0 <HAL_DMA_Init+0x2a4>)
 8001fc8:	4293      	cmp	r3, r2
 8001fca:	d021      	beq.n	8002010 <HAL_DMA_Init+0xc4>
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	4a88      	ldr	r2, [pc, #544]	; (80021f4 <HAL_DMA_Init+0x2a8>)
 8001fd2:	4293      	cmp	r3, r2
 8001fd4:	d01c      	beq.n	8002010 <HAL_DMA_Init+0xc4>
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	4a87      	ldr	r2, [pc, #540]	; (80021f8 <HAL_DMA_Init+0x2ac>)
 8001fdc:	4293      	cmp	r3, r2
 8001fde:	d017      	beq.n	8002010 <HAL_DMA_Init+0xc4>
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	4a85      	ldr	r2, [pc, #532]	; (80021fc <HAL_DMA_Init+0x2b0>)
 8001fe6:	4293      	cmp	r3, r2
 8001fe8:	d012      	beq.n	8002010 <HAL_DMA_Init+0xc4>
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	4a84      	ldr	r2, [pc, #528]	; (8002200 <HAL_DMA_Init+0x2b4>)
 8001ff0:	4293      	cmp	r3, r2
 8001ff2:	d00d      	beq.n	8002010 <HAL_DMA_Init+0xc4>
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	4a82      	ldr	r2, [pc, #520]	; (8002204 <HAL_DMA_Init+0x2b8>)
 8001ffa:	4293      	cmp	r3, r2
 8001ffc:	d008      	beq.n	8002010 <HAL_DMA_Init+0xc4>
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	4a81      	ldr	r2, [pc, #516]	; (8002208 <HAL_DMA_Init+0x2bc>)
 8002004:	4293      	cmp	r3, r2
 8002006:	d003      	beq.n	8002010 <HAL_DMA_Init+0xc4>
 8002008:	21b8      	movs	r1, #184	; 0xb8
 800200a:	4880      	ldr	r0, [pc, #512]	; (800220c <HAL_DMA_Init+0x2c0>)
 800200c:	f7ff fb31 	bl	8001672 <assert_failed>
  assert_param(IS_DMA_CHANNEL(hdma->Init.Channel));
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	685b      	ldr	r3, [r3, #4]
 8002014:	2b00      	cmp	r3, #0
 8002016:	d026      	beq.n	8002066 <HAL_DMA_Init+0x11a>
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	685b      	ldr	r3, [r3, #4]
 800201c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002020:	d021      	beq.n	8002066 <HAL_DMA_Init+0x11a>
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	685b      	ldr	r3, [r3, #4]
 8002026:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800202a:	d01c      	beq.n	8002066 <HAL_DMA_Init+0x11a>
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	685b      	ldr	r3, [r3, #4]
 8002030:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 8002034:	d017      	beq.n	8002066 <HAL_DMA_Init+0x11a>
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	685b      	ldr	r3, [r3, #4]
 800203a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800203e:	d012      	beq.n	8002066 <HAL_DMA_Init+0x11a>
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	685b      	ldr	r3, [r3, #4]
 8002044:	f1b3 6f20 	cmp.w	r3, #167772160	; 0xa000000
 8002048:	d00d      	beq.n	8002066 <HAL_DMA_Init+0x11a>
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	685b      	ldr	r3, [r3, #4]
 800204e:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8002052:	d008      	beq.n	8002066 <HAL_DMA_Init+0x11a>
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	685b      	ldr	r3, [r3, #4]
 8002058:	f1b3 6f60 	cmp.w	r3, #234881024	; 0xe000000
 800205c:	d003      	beq.n	8002066 <HAL_DMA_Init+0x11a>
 800205e:	21b9      	movs	r1, #185	; 0xb9
 8002060:	486a      	ldr	r0, [pc, #424]	; (800220c <HAL_DMA_Init+0x2c0>)
 8002062:	f7ff fb06 	bl	8001672 <assert_failed>
  assert_param(IS_DMA_DIRECTION(hdma->Init.Direction));
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	689b      	ldr	r3, [r3, #8]
 800206a:	2b00      	cmp	r3, #0
 800206c:	d00b      	beq.n	8002086 <HAL_DMA_Init+0x13a>
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	689b      	ldr	r3, [r3, #8]
 8002072:	2b40      	cmp	r3, #64	; 0x40
 8002074:	d007      	beq.n	8002086 <HAL_DMA_Init+0x13a>
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	689b      	ldr	r3, [r3, #8]
 800207a:	2b80      	cmp	r3, #128	; 0x80
 800207c:	d003      	beq.n	8002086 <HAL_DMA_Init+0x13a>
 800207e:	21ba      	movs	r1, #186	; 0xba
 8002080:	4862      	ldr	r0, [pc, #392]	; (800220c <HAL_DMA_Init+0x2c0>)
 8002082:	f7ff faf6 	bl	8001672 <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_INC_STATE(hdma->Init.PeriphInc));
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	68db      	ldr	r3, [r3, #12]
 800208a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800208e:	d007      	beq.n	80020a0 <HAL_DMA_Init+0x154>
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	68db      	ldr	r3, [r3, #12]
 8002094:	2b00      	cmp	r3, #0
 8002096:	d003      	beq.n	80020a0 <HAL_DMA_Init+0x154>
 8002098:	21bb      	movs	r1, #187	; 0xbb
 800209a:	485c      	ldr	r0, [pc, #368]	; (800220c <HAL_DMA_Init+0x2c0>)
 800209c:	f7ff fae9 	bl	8001672 <assert_failed>
  assert_param(IS_DMA_MEMORY_INC_STATE(hdma->Init.MemInc));
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	691b      	ldr	r3, [r3, #16]
 80020a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80020a8:	d007      	beq.n	80020ba <HAL_DMA_Init+0x16e>
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	691b      	ldr	r3, [r3, #16]
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d003      	beq.n	80020ba <HAL_DMA_Init+0x16e>
 80020b2:	21bc      	movs	r1, #188	; 0xbc
 80020b4:	4855      	ldr	r0, [pc, #340]	; (800220c <HAL_DMA_Init+0x2c0>)
 80020b6:	f7ff fadc 	bl	8001672 <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	695b      	ldr	r3, [r3, #20]
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d00d      	beq.n	80020de <HAL_DMA_Init+0x192>
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	695b      	ldr	r3, [r3, #20]
 80020c6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80020ca:	d008      	beq.n	80020de <HAL_DMA_Init+0x192>
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	695b      	ldr	r3, [r3, #20]
 80020d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80020d4:	d003      	beq.n	80020de <HAL_DMA_Init+0x192>
 80020d6:	21bd      	movs	r1, #189	; 0xbd
 80020d8:	484c      	ldr	r0, [pc, #304]	; (800220c <HAL_DMA_Init+0x2c0>)
 80020da:	f7ff faca 	bl	8001672 <assert_failed>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	699b      	ldr	r3, [r3, #24]
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d00d      	beq.n	8002102 <HAL_DMA_Init+0x1b6>
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	699b      	ldr	r3, [r3, #24]
 80020ea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80020ee:	d008      	beq.n	8002102 <HAL_DMA_Init+0x1b6>
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	699b      	ldr	r3, [r3, #24]
 80020f4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80020f8:	d003      	beq.n	8002102 <HAL_DMA_Init+0x1b6>
 80020fa:	21be      	movs	r1, #190	; 0xbe
 80020fc:	4843      	ldr	r0, [pc, #268]	; (800220c <HAL_DMA_Init+0x2c0>)
 80020fe:	f7ff fab8 	bl	8001672 <assert_failed>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	69db      	ldr	r3, [r3, #28]
 8002106:	2b00      	cmp	r3, #0
 8002108:	d00c      	beq.n	8002124 <HAL_DMA_Init+0x1d8>
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	69db      	ldr	r3, [r3, #28]
 800210e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002112:	d007      	beq.n	8002124 <HAL_DMA_Init+0x1d8>
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	69db      	ldr	r3, [r3, #28]
 8002118:	2b20      	cmp	r3, #32
 800211a:	d003      	beq.n	8002124 <HAL_DMA_Init+0x1d8>
 800211c:	21bf      	movs	r1, #191	; 0xbf
 800211e:	483b      	ldr	r0, [pc, #236]	; (800220c <HAL_DMA_Init+0x2c0>)
 8002120:	f7ff faa7 	bl	8001672 <assert_failed>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	6a1b      	ldr	r3, [r3, #32]
 8002128:	2b00      	cmp	r3, #0
 800212a:	d012      	beq.n	8002152 <HAL_DMA_Init+0x206>
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	6a1b      	ldr	r3, [r3, #32]
 8002130:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002134:	d00d      	beq.n	8002152 <HAL_DMA_Init+0x206>
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	6a1b      	ldr	r3, [r3, #32]
 800213a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800213e:	d008      	beq.n	8002152 <HAL_DMA_Init+0x206>
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	6a1b      	ldr	r3, [r3, #32]
 8002144:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002148:	d003      	beq.n	8002152 <HAL_DMA_Init+0x206>
 800214a:	21c0      	movs	r1, #192	; 0xc0
 800214c:	482f      	ldr	r0, [pc, #188]	; (800220c <HAL_DMA_Init+0x2c0>)
 800214e:	f7ff fa90 	bl	8001672 <assert_failed>
  assert_param(IS_DMA_FIFO_MODE_STATE(hdma->Init.FIFOMode));
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002156:	2b00      	cmp	r3, #0
 8002158:	d007      	beq.n	800216a <HAL_DMA_Init+0x21e>
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800215e:	2b04      	cmp	r3, #4
 8002160:	d003      	beq.n	800216a <HAL_DMA_Init+0x21e>
 8002162:	21c1      	movs	r1, #193	; 0xc1
 8002164:	4829      	ldr	r0, [pc, #164]	; (800220c <HAL_DMA_Init+0x2c0>)
 8002166:	f7ff fa84 	bl	8001672 <assert_failed>
  /* Check the memory burst, peripheral burst and FIFO threshold parameters only
     when FIFO mode is enabled */
  if(hdma->Init.FIFOMode != DMA_FIFOMODE_DISABLE)
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800216e:	2b00      	cmp	r3, #0
 8002170:	d065      	beq.n	800223e <HAL_DMA_Init+0x2f2>
  {
    assert_param(IS_DMA_FIFO_THRESHOLD(hdma->Init.FIFOThreshold));
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002176:	2b00      	cmp	r3, #0
 8002178:	d00f      	beq.n	800219a <HAL_DMA_Init+0x24e>
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800217e:	2b01      	cmp	r3, #1
 8002180:	d00b      	beq.n	800219a <HAL_DMA_Init+0x24e>
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002186:	2b02      	cmp	r3, #2
 8002188:	d007      	beq.n	800219a <HAL_DMA_Init+0x24e>
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800218e:	2b03      	cmp	r3, #3
 8002190:	d003      	beq.n	800219a <HAL_DMA_Init+0x24e>
 8002192:	21c6      	movs	r1, #198	; 0xc6
 8002194:	481d      	ldr	r0, [pc, #116]	; (800220c <HAL_DMA_Init+0x2c0>)
 8002196:	f7ff fa6c 	bl	8001672 <assert_failed>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d036      	beq.n	8002210 <HAL_DMA_Init+0x2c4>
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021a6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80021aa:	d031      	beq.n	8002210 <HAL_DMA_Init+0x2c4>
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021b0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80021b4:	d02c      	beq.n	8002210 <HAL_DMA_Init+0x2c4>
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021ba:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80021be:	d027      	beq.n	8002210 <HAL_DMA_Init+0x2c4>
 80021c0:	21c7      	movs	r1, #199	; 0xc7
 80021c2:	4812      	ldr	r0, [pc, #72]	; (800220c <HAL_DMA_Init+0x2c0>)
 80021c4:	f7ff fa55 	bl	8001672 <assert_failed>
 80021c8:	e022      	b.n	8002210 <HAL_DMA_Init+0x2c4>
 80021ca:	bf00      	nop
 80021cc:	40026010 	.word	0x40026010
 80021d0:	40026028 	.word	0x40026028
 80021d4:	40026040 	.word	0x40026040
 80021d8:	40026058 	.word	0x40026058
 80021dc:	40026070 	.word	0x40026070
 80021e0:	40026088 	.word	0x40026088
 80021e4:	400260a0 	.word	0x400260a0
 80021e8:	400260b8 	.word	0x400260b8
 80021ec:	40026410 	.word	0x40026410
 80021f0:	40026428 	.word	0x40026428
 80021f4:	40026440 	.word	0x40026440
 80021f8:	40026458 	.word	0x40026458
 80021fc:	40026470 	.word	0x40026470
 8002200:	40026488 	.word	0x40026488
 8002204:	400264a0 	.word	0x400264a0
 8002208:	400264b8 	.word	0x400264b8
 800220c:	0800dc6c 	.word	0x0800dc6c
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002214:	2b00      	cmp	r3, #0
 8002216:	d012      	beq.n	800223e <HAL_DMA_Init+0x2f2>
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800221c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002220:	d00d      	beq.n	800223e <HAL_DMA_Init+0x2f2>
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002226:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800222a:	d008      	beq.n	800223e <HAL_DMA_Init+0x2f2>
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002230:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8002234:	d003      	beq.n	800223e <HAL_DMA_Init+0x2f2>
 8002236:	21c8      	movs	r1, #200	; 0xc8
 8002238:	4850      	ldr	r0, [pc, #320]	; (800237c <HAL_DMA_Init+0x430>)
 800223a:	f7ff fa1a 	bl	8001672 <assert_failed>
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	2200      	movs	r2, #0
 8002242:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	2202      	movs	r2, #2
 800224a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	681a      	ldr	r2, [r3, #0]
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f022 0201 	bic.w	r2, r2, #1
 800225c:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800225e:	e00f      	b.n	8002280 <HAL_DMA_Init+0x334>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002260:	f7ff fcdc 	bl	8001c1c <HAL_GetTick>
 8002264:	4602      	mov	r2, r0
 8002266:	693b      	ldr	r3, [r7, #16]
 8002268:	1ad3      	subs	r3, r2, r3
 800226a:	2b05      	cmp	r3, #5
 800226c:	d908      	bls.n	8002280 <HAL_DMA_Init+0x334>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	2220      	movs	r2, #32
 8002272:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	2203      	movs	r2, #3
 8002278:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800227c:	2303      	movs	r3, #3
 800227e:	e078      	b.n	8002372 <HAL_DMA_Init+0x426>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f003 0301 	and.w	r3, r3, #1
 800228a:	2b00      	cmp	r3, #0
 800228c:	d1e8      	bne.n	8002260 <HAL_DMA_Init+0x314>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002296:	697a      	ldr	r2, [r7, #20]
 8002298:	4b39      	ldr	r3, [pc, #228]	; (8002380 <HAL_DMA_Init+0x434>)
 800229a:	4013      	ands	r3, r2
 800229c:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	685a      	ldr	r2, [r3, #4]
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	689b      	ldr	r3, [r3, #8]
 80022a6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80022ac:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	691b      	ldr	r3, [r3, #16]
 80022b2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80022b8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	699b      	ldr	r3, [r3, #24]
 80022be:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80022c4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	6a1b      	ldr	r3, [r3, #32]
 80022ca:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80022cc:	697a      	ldr	r2, [r7, #20]
 80022ce:	4313      	orrs	r3, r2
 80022d0:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022d6:	2b04      	cmp	r3, #4
 80022d8:	d107      	bne.n	80022ea <HAL_DMA_Init+0x39e>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022e2:	4313      	orrs	r3, r2
 80022e4:	697a      	ldr	r2, [r7, #20]
 80022e6:	4313      	orrs	r3, r2
 80022e8:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	697a      	ldr	r2, [r7, #20]
 80022f0:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	695b      	ldr	r3, [r3, #20]
 80022f8:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80022fa:	697b      	ldr	r3, [r7, #20]
 80022fc:	f023 0307 	bic.w	r3, r3, #7
 8002300:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002306:	697a      	ldr	r2, [r7, #20]
 8002308:	4313      	orrs	r3, r2
 800230a:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002310:	2b04      	cmp	r3, #4
 8002312:	d117      	bne.n	8002344 <HAL_DMA_Init+0x3f8>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002318:	697a      	ldr	r2, [r7, #20]
 800231a:	4313      	orrs	r3, r2
 800231c:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002322:	2b00      	cmp	r3, #0
 8002324:	d00e      	beq.n	8002344 <HAL_DMA_Init+0x3f8>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002326:	6878      	ldr	r0, [r7, #4]
 8002328:	f000 f9ec 	bl	8002704 <DMA_CheckFifoParam>
 800232c:	4603      	mov	r3, r0
 800232e:	2b00      	cmp	r3, #0
 8002330:	d008      	beq.n	8002344 <HAL_DMA_Init+0x3f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	2240      	movs	r2, #64	; 0x40
 8002336:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	2201      	movs	r2, #1
 800233c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002340:	2301      	movs	r3, #1
 8002342:	e016      	b.n	8002372 <HAL_DMA_Init+0x426>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	697a      	ldr	r2, [r7, #20]
 800234a:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800234c:	6878      	ldr	r0, [r7, #4]
 800234e:	f000 f9a3 	bl	8002698 <DMA_CalcBaseAndBitshift>
 8002352:	4603      	mov	r3, r0
 8002354:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800235a:	223f      	movs	r2, #63	; 0x3f
 800235c:	409a      	lsls	r2, r3
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	2200      	movs	r2, #0
 8002366:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	2201      	movs	r2, #1
 800236c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002370:	2300      	movs	r3, #0
}
 8002372:	4618      	mov	r0, r3
 8002374:	3718      	adds	r7, #24
 8002376:	46bd      	mov	sp, r7
 8002378:	bd80      	pop	{r7, pc}
 800237a:	bf00      	nop
 800237c:	0800dc6c 	.word	0x0800dc6c
 8002380:	f010803f 	.word	0xf010803f

08002384 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002384:	b580      	push	{r7, lr}
 8002386:	b086      	sub	sp, #24
 8002388:	af00      	add	r7, sp, #0
 800238a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800238c:	2300      	movs	r3, #0
 800238e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002390:	4b92      	ldr	r3, [pc, #584]	; (80025dc <HAL_DMA_IRQHandler+0x258>)
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	4a92      	ldr	r2, [pc, #584]	; (80025e0 <HAL_DMA_IRQHandler+0x25c>)
 8002396:	fba2 2303 	umull	r2, r3, r2, r3
 800239a:	0a9b      	lsrs	r3, r3, #10
 800239c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023a2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80023a4:	693b      	ldr	r3, [r7, #16]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023ae:	2208      	movs	r2, #8
 80023b0:	409a      	lsls	r2, r3
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	4013      	ands	r3, r2
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d01a      	beq.n	80023f0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f003 0304 	and.w	r3, r3, #4
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d013      	beq.n	80023f0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	681a      	ldr	r2, [r3, #0]
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f022 0204 	bic.w	r2, r2, #4
 80023d6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023dc:	2208      	movs	r2, #8
 80023de:	409a      	lsls	r2, r3
 80023e0:	693b      	ldr	r3, [r7, #16]
 80023e2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023e8:	f043 0201 	orr.w	r2, r3, #1
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023f4:	2201      	movs	r2, #1
 80023f6:	409a      	lsls	r2, r3
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	4013      	ands	r3, r2
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d012      	beq.n	8002426 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	695b      	ldr	r3, [r3, #20]
 8002406:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800240a:	2b00      	cmp	r3, #0
 800240c:	d00b      	beq.n	8002426 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002412:	2201      	movs	r2, #1
 8002414:	409a      	lsls	r2, r3
 8002416:	693b      	ldr	r3, [r7, #16]
 8002418:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800241e:	f043 0202 	orr.w	r2, r3, #2
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800242a:	2204      	movs	r2, #4
 800242c:	409a      	lsls	r2, r3
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	4013      	ands	r3, r2
 8002432:	2b00      	cmp	r3, #0
 8002434:	d012      	beq.n	800245c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f003 0302 	and.w	r3, r3, #2
 8002440:	2b00      	cmp	r3, #0
 8002442:	d00b      	beq.n	800245c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002448:	2204      	movs	r2, #4
 800244a:	409a      	lsls	r2, r3
 800244c:	693b      	ldr	r3, [r7, #16]
 800244e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002454:	f043 0204 	orr.w	r2, r3, #4
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002460:	2210      	movs	r2, #16
 8002462:	409a      	lsls	r2, r3
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	4013      	ands	r3, r2
 8002468:	2b00      	cmp	r3, #0
 800246a:	d043      	beq.n	80024f4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f003 0308 	and.w	r3, r3, #8
 8002476:	2b00      	cmp	r3, #0
 8002478:	d03c      	beq.n	80024f4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800247e:	2210      	movs	r2, #16
 8002480:	409a      	lsls	r2, r3
 8002482:	693b      	ldr	r3, [r7, #16]
 8002484:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002490:	2b00      	cmp	r3, #0
 8002492:	d018      	beq.n	80024c6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d108      	bne.n	80024b4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d024      	beq.n	80024f4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024ae:	6878      	ldr	r0, [r7, #4]
 80024b0:	4798      	blx	r3
 80024b2:	e01f      	b.n	80024f4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d01b      	beq.n	80024f4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80024c0:	6878      	ldr	r0, [r7, #4]
 80024c2:	4798      	blx	r3
 80024c4:	e016      	b.n	80024f4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d107      	bne.n	80024e4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	681a      	ldr	r2, [r3, #0]
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f022 0208 	bic.w	r2, r2, #8
 80024e2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d003      	beq.n	80024f4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024f0:	6878      	ldr	r0, [r7, #4]
 80024f2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024f8:	2220      	movs	r2, #32
 80024fa:	409a      	lsls	r2, r3
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	4013      	ands	r3, r2
 8002500:	2b00      	cmp	r3, #0
 8002502:	f000 808e 	beq.w	8002622 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f003 0310 	and.w	r3, r3, #16
 8002510:	2b00      	cmp	r3, #0
 8002512:	f000 8086 	beq.w	8002622 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800251a:	2220      	movs	r2, #32
 800251c:	409a      	lsls	r2, r3
 800251e:	693b      	ldr	r3, [r7, #16]
 8002520:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002528:	b2db      	uxtb	r3, r3
 800252a:	2b05      	cmp	r3, #5
 800252c:	d136      	bne.n	800259c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	681a      	ldr	r2, [r3, #0]
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f022 0216 	bic.w	r2, r2, #22
 800253c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	695a      	ldr	r2, [r3, #20]
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800254c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002552:	2b00      	cmp	r3, #0
 8002554:	d103      	bne.n	800255e <HAL_DMA_IRQHandler+0x1da>
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800255a:	2b00      	cmp	r3, #0
 800255c:	d007      	beq.n	800256e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	681a      	ldr	r2, [r3, #0]
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f022 0208 	bic.w	r2, r2, #8
 800256c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002572:	223f      	movs	r2, #63	; 0x3f
 8002574:	409a      	lsls	r2, r3
 8002576:	693b      	ldr	r3, [r7, #16]
 8002578:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	2200      	movs	r2, #0
 800257e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	2201      	movs	r2, #1
 8002586:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800258e:	2b00      	cmp	r3, #0
 8002590:	d07d      	beq.n	800268e <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002596:	6878      	ldr	r0, [r7, #4]
 8002598:	4798      	blx	r3
        }
        return;
 800259a:	e078      	b.n	800268e <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d01c      	beq.n	80025e4 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d108      	bne.n	80025ca <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d030      	beq.n	8002622 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025c4:	6878      	ldr	r0, [r7, #4]
 80025c6:	4798      	blx	r3
 80025c8:	e02b      	b.n	8002622 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d027      	beq.n	8002622 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025d6:	6878      	ldr	r0, [r7, #4]
 80025d8:	4798      	blx	r3
 80025da:	e022      	b.n	8002622 <HAL_DMA_IRQHandler+0x29e>
 80025dc:	20000400 	.word	0x20000400
 80025e0:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d10f      	bne.n	8002612 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	681a      	ldr	r2, [r3, #0]
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f022 0210 	bic.w	r2, r2, #16
 8002600:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	2200      	movs	r2, #0
 8002606:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	2201      	movs	r2, #1
 800260e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002616:	2b00      	cmp	r3, #0
 8002618:	d003      	beq.n	8002622 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800261e:	6878      	ldr	r0, [r7, #4]
 8002620:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002626:	2b00      	cmp	r3, #0
 8002628:	d032      	beq.n	8002690 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800262e:	f003 0301 	and.w	r3, r3, #1
 8002632:	2b00      	cmp	r3, #0
 8002634:	d022      	beq.n	800267c <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	2205      	movs	r2, #5
 800263a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	681a      	ldr	r2, [r3, #0]
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f022 0201 	bic.w	r2, r2, #1
 800264c:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800264e:	68bb      	ldr	r3, [r7, #8]
 8002650:	3301      	adds	r3, #1
 8002652:	60bb      	str	r3, [r7, #8]
 8002654:	697a      	ldr	r2, [r7, #20]
 8002656:	429a      	cmp	r2, r3
 8002658:	d307      	bcc.n	800266a <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f003 0301 	and.w	r3, r3, #1
 8002664:	2b00      	cmp	r3, #0
 8002666:	d1f2      	bne.n	800264e <HAL_DMA_IRQHandler+0x2ca>
 8002668:	e000      	b.n	800266c <HAL_DMA_IRQHandler+0x2e8>
          break;
 800266a:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	2200      	movs	r2, #0
 8002670:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	2201      	movs	r2, #1
 8002678:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002680:	2b00      	cmp	r3, #0
 8002682:	d005      	beq.n	8002690 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002688:	6878      	ldr	r0, [r7, #4]
 800268a:	4798      	blx	r3
 800268c:	e000      	b.n	8002690 <HAL_DMA_IRQHandler+0x30c>
        return;
 800268e:	bf00      	nop
    }
  }
}
 8002690:	3718      	adds	r7, #24
 8002692:	46bd      	mov	sp, r7
 8002694:	bd80      	pop	{r7, pc}
 8002696:	bf00      	nop

08002698 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002698:	b480      	push	{r7}
 800269a:	b085      	sub	sp, #20
 800269c:	af00      	add	r7, sp, #0
 800269e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	b2db      	uxtb	r3, r3
 80026a6:	3b10      	subs	r3, #16
 80026a8:	4a14      	ldr	r2, [pc, #80]	; (80026fc <DMA_CalcBaseAndBitshift+0x64>)
 80026aa:	fba2 2303 	umull	r2, r3, r2, r3
 80026ae:	091b      	lsrs	r3, r3, #4
 80026b0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80026b2:	4a13      	ldr	r2, [pc, #76]	; (8002700 <DMA_CalcBaseAndBitshift+0x68>)
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	4413      	add	r3, r2
 80026b8:	781b      	ldrb	r3, [r3, #0]
 80026ba:	461a      	mov	r2, r3
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	2b03      	cmp	r3, #3
 80026c4:	d909      	bls.n	80026da <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80026ce:	f023 0303 	bic.w	r3, r3, #3
 80026d2:	1d1a      	adds	r2, r3, #4
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	659a      	str	r2, [r3, #88]	; 0x58
 80026d8:	e007      	b.n	80026ea <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80026e2:	f023 0303 	bic.w	r3, r3, #3
 80026e6:	687a      	ldr	r2, [r7, #4]
 80026e8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80026ee:	4618      	mov	r0, r3
 80026f0:	3714      	adds	r7, #20
 80026f2:	46bd      	mov	sp, r7
 80026f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f8:	4770      	bx	lr
 80026fa:	bf00      	nop
 80026fc:	aaaaaaab 	.word	0xaaaaaaab
 8002700:	0800df40 	.word	0x0800df40

08002704 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002704:	b480      	push	{r7}
 8002706:	b085      	sub	sp, #20
 8002708:	af00      	add	r7, sp, #0
 800270a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800270c:	2300      	movs	r3, #0
 800270e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002714:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	699b      	ldr	r3, [r3, #24]
 800271a:	2b00      	cmp	r3, #0
 800271c:	d11f      	bne.n	800275e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800271e:	68bb      	ldr	r3, [r7, #8]
 8002720:	2b03      	cmp	r3, #3
 8002722:	d855      	bhi.n	80027d0 <DMA_CheckFifoParam+0xcc>
 8002724:	a201      	add	r2, pc, #4	; (adr r2, 800272c <DMA_CheckFifoParam+0x28>)
 8002726:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800272a:	bf00      	nop
 800272c:	0800273d 	.word	0x0800273d
 8002730:	0800274f 	.word	0x0800274f
 8002734:	0800273d 	.word	0x0800273d
 8002738:	080027d1 	.word	0x080027d1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002740:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002744:	2b00      	cmp	r3, #0
 8002746:	d045      	beq.n	80027d4 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8002748:	2301      	movs	r3, #1
 800274a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800274c:	e042      	b.n	80027d4 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002752:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002756:	d13f      	bne.n	80027d8 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8002758:	2301      	movs	r3, #1
 800275a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800275c:	e03c      	b.n	80027d8 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	699b      	ldr	r3, [r3, #24]
 8002762:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002766:	d121      	bne.n	80027ac <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002768:	68bb      	ldr	r3, [r7, #8]
 800276a:	2b03      	cmp	r3, #3
 800276c:	d836      	bhi.n	80027dc <DMA_CheckFifoParam+0xd8>
 800276e:	a201      	add	r2, pc, #4	; (adr r2, 8002774 <DMA_CheckFifoParam+0x70>)
 8002770:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002774:	08002785 	.word	0x08002785
 8002778:	0800278b 	.word	0x0800278b
 800277c:	08002785 	.word	0x08002785
 8002780:	0800279d 	.word	0x0800279d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002784:	2301      	movs	r3, #1
 8002786:	73fb      	strb	r3, [r7, #15]
      break;
 8002788:	e02f      	b.n	80027ea <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800278e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002792:	2b00      	cmp	r3, #0
 8002794:	d024      	beq.n	80027e0 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8002796:	2301      	movs	r3, #1
 8002798:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800279a:	e021      	b.n	80027e0 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027a0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80027a4:	d11e      	bne.n	80027e4 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 80027a6:	2301      	movs	r3, #1
 80027a8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80027aa:	e01b      	b.n	80027e4 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80027ac:	68bb      	ldr	r3, [r7, #8]
 80027ae:	2b02      	cmp	r3, #2
 80027b0:	d902      	bls.n	80027b8 <DMA_CheckFifoParam+0xb4>
 80027b2:	2b03      	cmp	r3, #3
 80027b4:	d003      	beq.n	80027be <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80027b6:	e018      	b.n	80027ea <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 80027b8:	2301      	movs	r3, #1
 80027ba:	73fb      	strb	r3, [r7, #15]
      break;
 80027bc:	e015      	b.n	80027ea <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027c2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d00e      	beq.n	80027e8 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 80027ca:	2301      	movs	r3, #1
 80027cc:	73fb      	strb	r3, [r7, #15]
      break;
 80027ce:	e00b      	b.n	80027e8 <DMA_CheckFifoParam+0xe4>
      break;
 80027d0:	bf00      	nop
 80027d2:	e00a      	b.n	80027ea <DMA_CheckFifoParam+0xe6>
      break;
 80027d4:	bf00      	nop
 80027d6:	e008      	b.n	80027ea <DMA_CheckFifoParam+0xe6>
      break;
 80027d8:	bf00      	nop
 80027da:	e006      	b.n	80027ea <DMA_CheckFifoParam+0xe6>
      break;
 80027dc:	bf00      	nop
 80027de:	e004      	b.n	80027ea <DMA_CheckFifoParam+0xe6>
      break;
 80027e0:	bf00      	nop
 80027e2:	e002      	b.n	80027ea <DMA_CheckFifoParam+0xe6>
      break;   
 80027e4:	bf00      	nop
 80027e6:	e000      	b.n	80027ea <DMA_CheckFifoParam+0xe6>
      break;
 80027e8:	bf00      	nop
    }
  } 
  
  return status; 
 80027ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80027ec:	4618      	mov	r0, r3
 80027ee:	3714      	adds	r7, #20
 80027f0:	46bd      	mov	sp, r7
 80027f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f6:	4770      	bx	lr

080027f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80027f8:	b580      	push	{r7, lr}
 80027fa:	b088      	sub	sp, #32
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	6078      	str	r0, [r7, #4]
 8002800:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002802:	2300      	movs	r3, #0
 8002804:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002806:	2300      	movs	r3, #0
 8002808:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800280a:	2300      	movs	r3, #0
 800280c:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	4a3b      	ldr	r2, [pc, #236]	; (8002900 <HAL_GPIO_Init+0x108>)
 8002812:	4293      	cmp	r3, r2
 8002814:	d017      	beq.n	8002846 <HAL_GPIO_Init+0x4e>
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	4a3a      	ldr	r2, [pc, #232]	; (8002904 <HAL_GPIO_Init+0x10c>)
 800281a:	4293      	cmp	r3, r2
 800281c:	d013      	beq.n	8002846 <HAL_GPIO_Init+0x4e>
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	4a39      	ldr	r2, [pc, #228]	; (8002908 <HAL_GPIO_Init+0x110>)
 8002822:	4293      	cmp	r3, r2
 8002824:	d00f      	beq.n	8002846 <HAL_GPIO_Init+0x4e>
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	4a38      	ldr	r2, [pc, #224]	; (800290c <HAL_GPIO_Init+0x114>)
 800282a:	4293      	cmp	r3, r2
 800282c:	d00b      	beq.n	8002846 <HAL_GPIO_Init+0x4e>
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	4a37      	ldr	r2, [pc, #220]	; (8002910 <HAL_GPIO_Init+0x118>)
 8002832:	4293      	cmp	r3, r2
 8002834:	d007      	beq.n	8002846 <HAL_GPIO_Init+0x4e>
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	4a36      	ldr	r2, [pc, #216]	; (8002914 <HAL_GPIO_Init+0x11c>)
 800283a:	4293      	cmp	r3, r2
 800283c:	d003      	beq.n	8002846 <HAL_GPIO_Init+0x4e>
 800283e:	21b3      	movs	r1, #179	; 0xb3
 8002840:	4835      	ldr	r0, [pc, #212]	; (8002918 <HAL_GPIO_Init+0x120>)
 8002842:	f7fe ff16 	bl	8001672 <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 8002846:	683b      	ldr	r3, [r7, #0]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	b29b      	uxth	r3, r3
 800284c:	2b00      	cmp	r3, #0
 800284e:	d005      	beq.n	800285c <HAL_GPIO_Init+0x64>
 8002850:	683b      	ldr	r3, [r7, #0]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	0c1b      	lsrs	r3, r3, #16
 8002856:	041b      	lsls	r3, r3, #16
 8002858:	2b00      	cmp	r3, #0
 800285a:	d003      	beq.n	8002864 <HAL_GPIO_Init+0x6c>
 800285c:	21b4      	movs	r1, #180	; 0xb4
 800285e:	482e      	ldr	r0, [pc, #184]	; (8002918 <HAL_GPIO_Init+0x120>)
 8002860:	f7fe ff07 	bl	8001672 <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 8002864:	683b      	ldr	r3, [r7, #0]
 8002866:	685b      	ldr	r3, [r3, #4]
 8002868:	2b00      	cmp	r3, #0
 800286a:	d035      	beq.n	80028d8 <HAL_GPIO_Init+0xe0>
 800286c:	683b      	ldr	r3, [r7, #0]
 800286e:	685b      	ldr	r3, [r3, #4]
 8002870:	2b01      	cmp	r3, #1
 8002872:	d031      	beq.n	80028d8 <HAL_GPIO_Init+0xe0>
 8002874:	683b      	ldr	r3, [r7, #0]
 8002876:	685b      	ldr	r3, [r3, #4]
 8002878:	2b11      	cmp	r3, #17
 800287a:	d02d      	beq.n	80028d8 <HAL_GPIO_Init+0xe0>
 800287c:	683b      	ldr	r3, [r7, #0]
 800287e:	685b      	ldr	r3, [r3, #4]
 8002880:	2b02      	cmp	r3, #2
 8002882:	d029      	beq.n	80028d8 <HAL_GPIO_Init+0xe0>
 8002884:	683b      	ldr	r3, [r7, #0]
 8002886:	685b      	ldr	r3, [r3, #4]
 8002888:	2b12      	cmp	r3, #18
 800288a:	d025      	beq.n	80028d8 <HAL_GPIO_Init+0xe0>
 800288c:	683b      	ldr	r3, [r7, #0]
 800288e:	685b      	ldr	r3, [r3, #4]
 8002890:	4a22      	ldr	r2, [pc, #136]	; (800291c <HAL_GPIO_Init+0x124>)
 8002892:	4293      	cmp	r3, r2
 8002894:	d020      	beq.n	80028d8 <HAL_GPIO_Init+0xe0>
 8002896:	683b      	ldr	r3, [r7, #0]
 8002898:	685b      	ldr	r3, [r3, #4]
 800289a:	4a21      	ldr	r2, [pc, #132]	; (8002920 <HAL_GPIO_Init+0x128>)
 800289c:	4293      	cmp	r3, r2
 800289e:	d01b      	beq.n	80028d8 <HAL_GPIO_Init+0xe0>
 80028a0:	683b      	ldr	r3, [r7, #0]
 80028a2:	685b      	ldr	r3, [r3, #4]
 80028a4:	4a1f      	ldr	r2, [pc, #124]	; (8002924 <HAL_GPIO_Init+0x12c>)
 80028a6:	4293      	cmp	r3, r2
 80028a8:	d016      	beq.n	80028d8 <HAL_GPIO_Init+0xe0>
 80028aa:	683b      	ldr	r3, [r7, #0]
 80028ac:	685b      	ldr	r3, [r3, #4]
 80028ae:	4a1e      	ldr	r2, [pc, #120]	; (8002928 <HAL_GPIO_Init+0x130>)
 80028b0:	4293      	cmp	r3, r2
 80028b2:	d011      	beq.n	80028d8 <HAL_GPIO_Init+0xe0>
 80028b4:	683b      	ldr	r3, [r7, #0]
 80028b6:	685b      	ldr	r3, [r3, #4]
 80028b8:	4a1c      	ldr	r2, [pc, #112]	; (800292c <HAL_GPIO_Init+0x134>)
 80028ba:	4293      	cmp	r3, r2
 80028bc:	d00c      	beq.n	80028d8 <HAL_GPIO_Init+0xe0>
 80028be:	683b      	ldr	r3, [r7, #0]
 80028c0:	685b      	ldr	r3, [r3, #4]
 80028c2:	4a1b      	ldr	r2, [pc, #108]	; (8002930 <HAL_GPIO_Init+0x138>)
 80028c4:	4293      	cmp	r3, r2
 80028c6:	d007      	beq.n	80028d8 <HAL_GPIO_Init+0xe0>
 80028c8:	683b      	ldr	r3, [r7, #0]
 80028ca:	685b      	ldr	r3, [r3, #4]
 80028cc:	2b03      	cmp	r3, #3
 80028ce:	d003      	beq.n	80028d8 <HAL_GPIO_Init+0xe0>
 80028d0:	21b5      	movs	r1, #181	; 0xb5
 80028d2:	4811      	ldr	r0, [pc, #68]	; (8002918 <HAL_GPIO_Init+0x120>)
 80028d4:	f7fe fecd 	bl	8001672 <assert_failed>
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 80028d8:	683b      	ldr	r3, [r7, #0]
 80028da:	689b      	ldr	r3, [r3, #8]
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d00b      	beq.n	80028f8 <HAL_GPIO_Init+0x100>
 80028e0:	683b      	ldr	r3, [r7, #0]
 80028e2:	689b      	ldr	r3, [r3, #8]
 80028e4:	2b01      	cmp	r3, #1
 80028e6:	d007      	beq.n	80028f8 <HAL_GPIO_Init+0x100>
 80028e8:	683b      	ldr	r3, [r7, #0]
 80028ea:	689b      	ldr	r3, [r3, #8]
 80028ec:	2b02      	cmp	r3, #2
 80028ee:	d003      	beq.n	80028f8 <HAL_GPIO_Init+0x100>
 80028f0:	21b6      	movs	r1, #182	; 0xb6
 80028f2:	4809      	ldr	r0, [pc, #36]	; (8002918 <HAL_GPIO_Init+0x120>)
 80028f4:	f7fe febd 	bl	8001672 <assert_failed>

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80028f8:	2300      	movs	r3, #0
 80028fa:	61fb      	str	r3, [r7, #28]
 80028fc:	e211      	b.n	8002d22 <HAL_GPIO_Init+0x52a>
 80028fe:	bf00      	nop
 8002900:	40020000 	.word	0x40020000
 8002904:	40020400 	.word	0x40020400
 8002908:	40020800 	.word	0x40020800
 800290c:	40020c00 	.word	0x40020c00
 8002910:	40021000 	.word	0x40021000
 8002914:	40021c00 	.word	0x40021c00
 8002918:	0800dca4 	.word	0x0800dca4
 800291c:	10110000 	.word	0x10110000
 8002920:	10210000 	.word	0x10210000
 8002924:	10310000 	.word	0x10310000
 8002928:	10120000 	.word	0x10120000
 800292c:	10220000 	.word	0x10220000
 8002930:	10320000 	.word	0x10320000
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002934:	2201      	movs	r2, #1
 8002936:	69fb      	ldr	r3, [r7, #28]
 8002938:	fa02 f303 	lsl.w	r3, r2, r3
 800293c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800293e:	683b      	ldr	r3, [r7, #0]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	697a      	ldr	r2, [r7, #20]
 8002944:	4013      	ands	r3, r2
 8002946:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002948:	693a      	ldr	r2, [r7, #16]
 800294a:	697b      	ldr	r3, [r7, #20]
 800294c:	429a      	cmp	r2, r3
 800294e:	f040 81e5 	bne.w	8002d1c <HAL_GPIO_Init+0x524>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002952:	683b      	ldr	r3, [r7, #0]
 8002954:	685b      	ldr	r3, [r3, #4]
 8002956:	2b01      	cmp	r3, #1
 8002958:	d00b      	beq.n	8002972 <HAL_GPIO_Init+0x17a>
 800295a:	683b      	ldr	r3, [r7, #0]
 800295c:	685b      	ldr	r3, [r3, #4]
 800295e:	2b02      	cmp	r3, #2
 8002960:	d007      	beq.n	8002972 <HAL_GPIO_Init+0x17a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002962:	683b      	ldr	r3, [r7, #0]
 8002964:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002966:	2b11      	cmp	r3, #17
 8002968:	d003      	beq.n	8002972 <HAL_GPIO_Init+0x17a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800296a:	683b      	ldr	r3, [r7, #0]
 800296c:	685b      	ldr	r3, [r3, #4]
 800296e:	2b12      	cmp	r3, #18
 8002970:	d144      	bne.n	80029fc <HAL_GPIO_Init+0x204>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8002972:	683b      	ldr	r3, [r7, #0]
 8002974:	68db      	ldr	r3, [r3, #12]
 8002976:	2b00      	cmp	r3, #0
 8002978:	d00f      	beq.n	800299a <HAL_GPIO_Init+0x1a2>
 800297a:	683b      	ldr	r3, [r7, #0]
 800297c:	68db      	ldr	r3, [r3, #12]
 800297e:	2b01      	cmp	r3, #1
 8002980:	d00b      	beq.n	800299a <HAL_GPIO_Init+0x1a2>
 8002982:	683b      	ldr	r3, [r7, #0]
 8002984:	68db      	ldr	r3, [r3, #12]
 8002986:	2b02      	cmp	r3, #2
 8002988:	d007      	beq.n	800299a <HAL_GPIO_Init+0x1a2>
 800298a:	683b      	ldr	r3, [r7, #0]
 800298c:	68db      	ldr	r3, [r3, #12]
 800298e:	2b03      	cmp	r3, #3
 8002990:	d003      	beq.n	800299a <HAL_GPIO_Init+0x1a2>
 8002992:	21c8      	movs	r1, #200	; 0xc8
 8002994:	489f      	ldr	r0, [pc, #636]	; (8002c14 <HAL_GPIO_Init+0x41c>)
 8002996:	f7fe fe6c 	bl	8001672 <assert_failed>
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	689b      	ldr	r3, [r3, #8]
 800299e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80029a0:	69fb      	ldr	r3, [r7, #28]
 80029a2:	005b      	lsls	r3, r3, #1
 80029a4:	2203      	movs	r2, #3
 80029a6:	fa02 f303 	lsl.w	r3, r2, r3
 80029aa:	43db      	mvns	r3, r3
 80029ac:	69ba      	ldr	r2, [r7, #24]
 80029ae:	4013      	ands	r3, r2
 80029b0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80029b2:	683b      	ldr	r3, [r7, #0]
 80029b4:	68da      	ldr	r2, [r3, #12]
 80029b6:	69fb      	ldr	r3, [r7, #28]
 80029b8:	005b      	lsls	r3, r3, #1
 80029ba:	fa02 f303 	lsl.w	r3, r2, r3
 80029be:	69ba      	ldr	r2, [r7, #24]
 80029c0:	4313      	orrs	r3, r2
 80029c2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	69ba      	ldr	r2, [r7, #24]
 80029c8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	685b      	ldr	r3, [r3, #4]
 80029ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80029d0:	2201      	movs	r2, #1
 80029d2:	69fb      	ldr	r3, [r7, #28]
 80029d4:	fa02 f303 	lsl.w	r3, r2, r3
 80029d8:	43db      	mvns	r3, r3
 80029da:	69ba      	ldr	r2, [r7, #24]
 80029dc:	4013      	ands	r3, r2
 80029de:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80029e0:	683b      	ldr	r3, [r7, #0]
 80029e2:	685b      	ldr	r3, [r3, #4]
 80029e4:	091b      	lsrs	r3, r3, #4
 80029e6:	f003 0201 	and.w	r2, r3, #1
 80029ea:	69fb      	ldr	r3, [r7, #28]
 80029ec:	fa02 f303 	lsl.w	r3, r2, r3
 80029f0:	69ba      	ldr	r2, [r7, #24]
 80029f2:	4313      	orrs	r3, r2
 80029f4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	69ba      	ldr	r2, [r7, #24]
 80029fa:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	68db      	ldr	r3, [r3, #12]
 8002a00:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002a02:	69fb      	ldr	r3, [r7, #28]
 8002a04:	005b      	lsls	r3, r3, #1
 8002a06:	2203      	movs	r2, #3
 8002a08:	fa02 f303 	lsl.w	r3, r2, r3
 8002a0c:	43db      	mvns	r3, r3
 8002a0e:	69ba      	ldr	r2, [r7, #24]
 8002a10:	4013      	ands	r3, r2
 8002a12:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002a14:	683b      	ldr	r3, [r7, #0]
 8002a16:	689a      	ldr	r2, [r3, #8]
 8002a18:	69fb      	ldr	r3, [r7, #28]
 8002a1a:	005b      	lsls	r3, r3, #1
 8002a1c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a20:	69ba      	ldr	r2, [r7, #24]
 8002a22:	4313      	orrs	r3, r2
 8002a24:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	69ba      	ldr	r2, [r7, #24]
 8002a2a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002a2c:	683b      	ldr	r3, [r7, #0]
 8002a2e:	685b      	ldr	r3, [r3, #4]
 8002a30:	2b02      	cmp	r3, #2
 8002a32:	d004      	beq.n	8002a3e <HAL_GPIO_Init+0x246>
 8002a34:	683b      	ldr	r3, [r7, #0]
 8002a36:	685b      	ldr	r3, [r3, #4]
 8002a38:	2b12      	cmp	r3, #18
 8002a3a:	f040 80a0 	bne.w	8002b7e <HAL_GPIO_Init+0x386>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 8002a3e:	683b      	ldr	r3, [r7, #0]
 8002a40:	691b      	ldr	r3, [r3, #16]
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d077      	beq.n	8002b36 <HAL_GPIO_Init+0x33e>
 8002a46:	683b      	ldr	r3, [r7, #0]
 8002a48:	691b      	ldr	r3, [r3, #16]
 8002a4a:	2b09      	cmp	r3, #9
 8002a4c:	d073      	beq.n	8002b36 <HAL_GPIO_Init+0x33e>
 8002a4e:	683b      	ldr	r3, [r7, #0]
 8002a50:	691b      	ldr	r3, [r3, #16]
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d06f      	beq.n	8002b36 <HAL_GPIO_Init+0x33e>
 8002a56:	683b      	ldr	r3, [r7, #0]
 8002a58:	691b      	ldr	r3, [r3, #16]
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d06b      	beq.n	8002b36 <HAL_GPIO_Init+0x33e>
 8002a5e:	683b      	ldr	r3, [r7, #0]
 8002a60:	691b      	ldr	r3, [r3, #16]
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d067      	beq.n	8002b36 <HAL_GPIO_Init+0x33e>
 8002a66:	683b      	ldr	r3, [r7, #0]
 8002a68:	691b      	ldr	r3, [r3, #16]
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d063      	beq.n	8002b36 <HAL_GPIO_Init+0x33e>
 8002a6e:	683b      	ldr	r3, [r7, #0]
 8002a70:	691b      	ldr	r3, [r3, #16]
 8002a72:	2b01      	cmp	r3, #1
 8002a74:	d05f      	beq.n	8002b36 <HAL_GPIO_Init+0x33e>
 8002a76:	683b      	ldr	r3, [r7, #0]
 8002a78:	691b      	ldr	r3, [r3, #16]
 8002a7a:	2b01      	cmp	r3, #1
 8002a7c:	d05b      	beq.n	8002b36 <HAL_GPIO_Init+0x33e>
 8002a7e:	683b      	ldr	r3, [r7, #0]
 8002a80:	691b      	ldr	r3, [r3, #16]
 8002a82:	2b02      	cmp	r3, #2
 8002a84:	d057      	beq.n	8002b36 <HAL_GPIO_Init+0x33e>
 8002a86:	683b      	ldr	r3, [r7, #0]
 8002a88:	691b      	ldr	r3, [r3, #16]
 8002a8a:	2b02      	cmp	r3, #2
 8002a8c:	d053      	beq.n	8002b36 <HAL_GPIO_Init+0x33e>
 8002a8e:	683b      	ldr	r3, [r7, #0]
 8002a90:	691b      	ldr	r3, [r3, #16]
 8002a92:	2b02      	cmp	r3, #2
 8002a94:	d04f      	beq.n	8002b36 <HAL_GPIO_Init+0x33e>
 8002a96:	683b      	ldr	r3, [r7, #0]
 8002a98:	691b      	ldr	r3, [r3, #16]
 8002a9a:	2b04      	cmp	r3, #4
 8002a9c:	d04b      	beq.n	8002b36 <HAL_GPIO_Init+0x33e>
 8002a9e:	683b      	ldr	r3, [r7, #0]
 8002aa0:	691b      	ldr	r3, [r3, #16]
 8002aa2:	2b04      	cmp	r3, #4
 8002aa4:	d047      	beq.n	8002b36 <HAL_GPIO_Init+0x33e>
 8002aa6:	683b      	ldr	r3, [r7, #0]
 8002aa8:	691b      	ldr	r3, [r3, #16]
 8002aaa:	2b04      	cmp	r3, #4
 8002aac:	d043      	beq.n	8002b36 <HAL_GPIO_Init+0x33e>
 8002aae:	683b      	ldr	r3, [r7, #0]
 8002ab0:	691b      	ldr	r3, [r3, #16]
 8002ab2:	2b05      	cmp	r3, #5
 8002ab4:	d03f      	beq.n	8002b36 <HAL_GPIO_Init+0x33e>
 8002ab6:	683b      	ldr	r3, [r7, #0]
 8002ab8:	691b      	ldr	r3, [r3, #16]
 8002aba:	2b05      	cmp	r3, #5
 8002abc:	d03b      	beq.n	8002b36 <HAL_GPIO_Init+0x33e>
 8002abe:	683b      	ldr	r3, [r7, #0]
 8002ac0:	691b      	ldr	r3, [r3, #16]
 8002ac2:	2b05      	cmp	r3, #5
 8002ac4:	d037      	beq.n	8002b36 <HAL_GPIO_Init+0x33e>
 8002ac6:	683b      	ldr	r3, [r7, #0]
 8002ac8:	691b      	ldr	r3, [r3, #16]
 8002aca:	2b06      	cmp	r3, #6
 8002acc:	d033      	beq.n	8002b36 <HAL_GPIO_Init+0x33e>
 8002ace:	683b      	ldr	r3, [r7, #0]
 8002ad0:	691b      	ldr	r3, [r3, #16]
 8002ad2:	2b06      	cmp	r3, #6
 8002ad4:	d02f      	beq.n	8002b36 <HAL_GPIO_Init+0x33e>
 8002ad6:	683b      	ldr	r3, [r7, #0]
 8002ad8:	691b      	ldr	r3, [r3, #16]
 8002ada:	2b05      	cmp	r3, #5
 8002adc:	d02b      	beq.n	8002b36 <HAL_GPIO_Init+0x33e>
 8002ade:	683b      	ldr	r3, [r7, #0]
 8002ae0:	691b      	ldr	r3, [r3, #16]
 8002ae2:	2b06      	cmp	r3, #6
 8002ae4:	d027      	beq.n	8002b36 <HAL_GPIO_Init+0x33e>
 8002ae6:	683b      	ldr	r3, [r7, #0]
 8002ae8:	691b      	ldr	r3, [r3, #16]
 8002aea:	2b07      	cmp	r3, #7
 8002aec:	d023      	beq.n	8002b36 <HAL_GPIO_Init+0x33e>
 8002aee:	683b      	ldr	r3, [r7, #0]
 8002af0:	691b      	ldr	r3, [r3, #16]
 8002af2:	2b07      	cmp	r3, #7
 8002af4:	d01f      	beq.n	8002b36 <HAL_GPIO_Init+0x33e>
 8002af6:	683b      	ldr	r3, [r7, #0]
 8002af8:	691b      	ldr	r3, [r3, #16]
 8002afa:	2b07      	cmp	r3, #7
 8002afc:	d01b      	beq.n	8002b36 <HAL_GPIO_Init+0x33e>
 8002afe:	683b      	ldr	r3, [r7, #0]
 8002b00:	691b      	ldr	r3, [r3, #16]
 8002b02:	2b08      	cmp	r3, #8
 8002b04:	d017      	beq.n	8002b36 <HAL_GPIO_Init+0x33e>
 8002b06:	683b      	ldr	r3, [r7, #0]
 8002b08:	691b      	ldr	r3, [r3, #16]
 8002b0a:	2b0a      	cmp	r3, #10
 8002b0c:	d013      	beq.n	8002b36 <HAL_GPIO_Init+0x33e>
 8002b0e:	683b      	ldr	r3, [r7, #0]
 8002b10:	691b      	ldr	r3, [r3, #16]
 8002b12:	2b09      	cmp	r3, #9
 8002b14:	d00f      	beq.n	8002b36 <HAL_GPIO_Init+0x33e>
 8002b16:	683b      	ldr	r3, [r7, #0]
 8002b18:	691b      	ldr	r3, [r3, #16]
 8002b1a:	2b09      	cmp	r3, #9
 8002b1c:	d00b      	beq.n	8002b36 <HAL_GPIO_Init+0x33e>
 8002b1e:	683b      	ldr	r3, [r7, #0]
 8002b20:	691b      	ldr	r3, [r3, #16]
 8002b22:	2b0c      	cmp	r3, #12
 8002b24:	d007      	beq.n	8002b36 <HAL_GPIO_Init+0x33e>
 8002b26:	683b      	ldr	r3, [r7, #0]
 8002b28:	691b      	ldr	r3, [r3, #16]
 8002b2a:	2b0f      	cmp	r3, #15
 8002b2c:	d003      	beq.n	8002b36 <HAL_GPIO_Init+0x33e>
 8002b2e:	21e0      	movs	r1, #224	; 0xe0
 8002b30:	4838      	ldr	r0, [pc, #224]	; (8002c14 <HAL_GPIO_Init+0x41c>)
 8002b32:	f7fe fd9e 	bl	8001672 <assert_failed>
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002b36:	69fb      	ldr	r3, [r7, #28]
 8002b38:	08da      	lsrs	r2, r3, #3
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	3208      	adds	r2, #8
 8002b3e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002b42:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002b44:	69fb      	ldr	r3, [r7, #28]
 8002b46:	f003 0307 	and.w	r3, r3, #7
 8002b4a:	009b      	lsls	r3, r3, #2
 8002b4c:	220f      	movs	r2, #15
 8002b4e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b52:	43db      	mvns	r3, r3
 8002b54:	69ba      	ldr	r2, [r7, #24]
 8002b56:	4013      	ands	r3, r2
 8002b58:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002b5a:	683b      	ldr	r3, [r7, #0]
 8002b5c:	691a      	ldr	r2, [r3, #16]
 8002b5e:	69fb      	ldr	r3, [r7, #28]
 8002b60:	f003 0307 	and.w	r3, r3, #7
 8002b64:	009b      	lsls	r3, r3, #2
 8002b66:	fa02 f303 	lsl.w	r3, r2, r3
 8002b6a:	69ba      	ldr	r2, [r7, #24]
 8002b6c:	4313      	orrs	r3, r2
 8002b6e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002b70:	69fb      	ldr	r3, [r7, #28]
 8002b72:	08da      	lsrs	r2, r3, #3
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	3208      	adds	r2, #8
 8002b78:	69b9      	ldr	r1, [r7, #24]
 8002b7a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002b84:	69fb      	ldr	r3, [r7, #28]
 8002b86:	005b      	lsls	r3, r3, #1
 8002b88:	2203      	movs	r2, #3
 8002b8a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b8e:	43db      	mvns	r3, r3
 8002b90:	69ba      	ldr	r2, [r7, #24]
 8002b92:	4013      	ands	r3, r2
 8002b94:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002b96:	683b      	ldr	r3, [r7, #0]
 8002b98:	685b      	ldr	r3, [r3, #4]
 8002b9a:	f003 0203 	and.w	r2, r3, #3
 8002b9e:	69fb      	ldr	r3, [r7, #28]
 8002ba0:	005b      	lsls	r3, r3, #1
 8002ba2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ba6:	69ba      	ldr	r2, [r7, #24]
 8002ba8:	4313      	orrs	r3, r2
 8002baa:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	69ba      	ldr	r2, [r7, #24]
 8002bb0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002bb2:	683b      	ldr	r3, [r7, #0]
 8002bb4:	685b      	ldr	r3, [r3, #4]
 8002bb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	f000 80ae 	beq.w	8002d1c <HAL_GPIO_Init+0x524>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002bc0:	2300      	movs	r3, #0
 8002bc2:	60fb      	str	r3, [r7, #12]
 8002bc4:	4b14      	ldr	r3, [pc, #80]	; (8002c18 <HAL_GPIO_Init+0x420>)
 8002bc6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bc8:	4a13      	ldr	r2, [pc, #76]	; (8002c18 <HAL_GPIO_Init+0x420>)
 8002bca:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002bce:	6453      	str	r3, [r2, #68]	; 0x44
 8002bd0:	4b11      	ldr	r3, [pc, #68]	; (8002c18 <HAL_GPIO_Init+0x420>)
 8002bd2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bd4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002bd8:	60fb      	str	r3, [r7, #12]
 8002bda:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002bdc:	4a0f      	ldr	r2, [pc, #60]	; (8002c1c <HAL_GPIO_Init+0x424>)
 8002bde:	69fb      	ldr	r3, [r7, #28]
 8002be0:	089b      	lsrs	r3, r3, #2
 8002be2:	3302      	adds	r3, #2
 8002be4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002be8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002bea:	69fb      	ldr	r3, [r7, #28]
 8002bec:	f003 0303 	and.w	r3, r3, #3
 8002bf0:	009b      	lsls	r3, r3, #2
 8002bf2:	220f      	movs	r2, #15
 8002bf4:	fa02 f303 	lsl.w	r3, r2, r3
 8002bf8:	43db      	mvns	r3, r3
 8002bfa:	69ba      	ldr	r2, [r7, #24]
 8002bfc:	4013      	ands	r3, r2
 8002bfe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	4a07      	ldr	r2, [pc, #28]	; (8002c20 <HAL_GPIO_Init+0x428>)
 8002c04:	4293      	cmp	r3, r2
 8002c06:	d025      	beq.n	8002c54 <HAL_GPIO_Init+0x45c>
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	4a06      	ldr	r2, [pc, #24]	; (8002c24 <HAL_GPIO_Init+0x42c>)
 8002c0c:	4293      	cmp	r3, r2
 8002c0e:	d01f      	beq.n	8002c50 <HAL_GPIO_Init+0x458>
 8002c10:	e00a      	b.n	8002c28 <HAL_GPIO_Init+0x430>
 8002c12:	bf00      	nop
 8002c14:	0800dca4 	.word	0x0800dca4
 8002c18:	40023800 	.word	0x40023800
 8002c1c:	40013800 	.word	0x40013800
 8002c20:	40020000 	.word	0x40020000
 8002c24:	40020400 	.word	0x40020400
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	4a42      	ldr	r2, [pc, #264]	; (8002d34 <HAL_GPIO_Init+0x53c>)
 8002c2c:	4293      	cmp	r3, r2
 8002c2e:	d00d      	beq.n	8002c4c <HAL_GPIO_Init+0x454>
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	4a41      	ldr	r2, [pc, #260]	; (8002d38 <HAL_GPIO_Init+0x540>)
 8002c34:	4293      	cmp	r3, r2
 8002c36:	d007      	beq.n	8002c48 <HAL_GPIO_Init+0x450>
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	4a40      	ldr	r2, [pc, #256]	; (8002d3c <HAL_GPIO_Init+0x544>)
 8002c3c:	4293      	cmp	r3, r2
 8002c3e:	d101      	bne.n	8002c44 <HAL_GPIO_Init+0x44c>
 8002c40:	2304      	movs	r3, #4
 8002c42:	e008      	b.n	8002c56 <HAL_GPIO_Init+0x45e>
 8002c44:	2307      	movs	r3, #7
 8002c46:	e006      	b.n	8002c56 <HAL_GPIO_Init+0x45e>
 8002c48:	2303      	movs	r3, #3
 8002c4a:	e004      	b.n	8002c56 <HAL_GPIO_Init+0x45e>
 8002c4c:	2302      	movs	r3, #2
 8002c4e:	e002      	b.n	8002c56 <HAL_GPIO_Init+0x45e>
 8002c50:	2301      	movs	r3, #1
 8002c52:	e000      	b.n	8002c56 <HAL_GPIO_Init+0x45e>
 8002c54:	2300      	movs	r3, #0
 8002c56:	69fa      	ldr	r2, [r7, #28]
 8002c58:	f002 0203 	and.w	r2, r2, #3
 8002c5c:	0092      	lsls	r2, r2, #2
 8002c5e:	4093      	lsls	r3, r2
 8002c60:	69ba      	ldr	r2, [r7, #24]
 8002c62:	4313      	orrs	r3, r2
 8002c64:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002c66:	4936      	ldr	r1, [pc, #216]	; (8002d40 <HAL_GPIO_Init+0x548>)
 8002c68:	69fb      	ldr	r3, [r7, #28]
 8002c6a:	089b      	lsrs	r3, r3, #2
 8002c6c:	3302      	adds	r3, #2
 8002c6e:	69ba      	ldr	r2, [r7, #24]
 8002c70:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002c74:	4b33      	ldr	r3, [pc, #204]	; (8002d44 <HAL_GPIO_Init+0x54c>)
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c7a:	693b      	ldr	r3, [r7, #16]
 8002c7c:	43db      	mvns	r3, r3
 8002c7e:	69ba      	ldr	r2, [r7, #24]
 8002c80:	4013      	ands	r3, r2
 8002c82:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002c84:	683b      	ldr	r3, [r7, #0]
 8002c86:	685b      	ldr	r3, [r3, #4]
 8002c88:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d003      	beq.n	8002c98 <HAL_GPIO_Init+0x4a0>
        {
          temp |= iocurrent;
 8002c90:	69ba      	ldr	r2, [r7, #24]
 8002c92:	693b      	ldr	r3, [r7, #16]
 8002c94:	4313      	orrs	r3, r2
 8002c96:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002c98:	4a2a      	ldr	r2, [pc, #168]	; (8002d44 <HAL_GPIO_Init+0x54c>)
 8002c9a:	69bb      	ldr	r3, [r7, #24]
 8002c9c:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002c9e:	4b29      	ldr	r3, [pc, #164]	; (8002d44 <HAL_GPIO_Init+0x54c>)
 8002ca0:	685b      	ldr	r3, [r3, #4]
 8002ca2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ca4:	693b      	ldr	r3, [r7, #16]
 8002ca6:	43db      	mvns	r3, r3
 8002ca8:	69ba      	ldr	r2, [r7, #24]
 8002caa:	4013      	ands	r3, r2
 8002cac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002cae:	683b      	ldr	r3, [r7, #0]
 8002cb0:	685b      	ldr	r3, [r3, #4]
 8002cb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d003      	beq.n	8002cc2 <HAL_GPIO_Init+0x4ca>
        {
          temp |= iocurrent;
 8002cba:	69ba      	ldr	r2, [r7, #24]
 8002cbc:	693b      	ldr	r3, [r7, #16]
 8002cbe:	4313      	orrs	r3, r2
 8002cc0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002cc2:	4a20      	ldr	r2, [pc, #128]	; (8002d44 <HAL_GPIO_Init+0x54c>)
 8002cc4:	69bb      	ldr	r3, [r7, #24]
 8002cc6:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002cc8:	4b1e      	ldr	r3, [pc, #120]	; (8002d44 <HAL_GPIO_Init+0x54c>)
 8002cca:	689b      	ldr	r3, [r3, #8]
 8002ccc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002cce:	693b      	ldr	r3, [r7, #16]
 8002cd0:	43db      	mvns	r3, r3
 8002cd2:	69ba      	ldr	r2, [r7, #24]
 8002cd4:	4013      	ands	r3, r2
 8002cd6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002cd8:	683b      	ldr	r3, [r7, #0]
 8002cda:	685b      	ldr	r3, [r3, #4]
 8002cdc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d003      	beq.n	8002cec <HAL_GPIO_Init+0x4f4>
        {
          temp |= iocurrent;
 8002ce4:	69ba      	ldr	r2, [r7, #24]
 8002ce6:	693b      	ldr	r3, [r7, #16]
 8002ce8:	4313      	orrs	r3, r2
 8002cea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002cec:	4a15      	ldr	r2, [pc, #84]	; (8002d44 <HAL_GPIO_Init+0x54c>)
 8002cee:	69bb      	ldr	r3, [r7, #24]
 8002cf0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002cf2:	4b14      	ldr	r3, [pc, #80]	; (8002d44 <HAL_GPIO_Init+0x54c>)
 8002cf4:	68db      	ldr	r3, [r3, #12]
 8002cf6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002cf8:	693b      	ldr	r3, [r7, #16]
 8002cfa:	43db      	mvns	r3, r3
 8002cfc:	69ba      	ldr	r2, [r7, #24]
 8002cfe:	4013      	ands	r3, r2
 8002d00:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002d02:	683b      	ldr	r3, [r7, #0]
 8002d04:	685b      	ldr	r3, [r3, #4]
 8002d06:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d003      	beq.n	8002d16 <HAL_GPIO_Init+0x51e>
        {
          temp |= iocurrent;
 8002d0e:	69ba      	ldr	r2, [r7, #24]
 8002d10:	693b      	ldr	r3, [r7, #16]
 8002d12:	4313      	orrs	r3, r2
 8002d14:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002d16:	4a0b      	ldr	r2, [pc, #44]	; (8002d44 <HAL_GPIO_Init+0x54c>)
 8002d18:	69bb      	ldr	r3, [r7, #24]
 8002d1a:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002d1c:	69fb      	ldr	r3, [r7, #28]
 8002d1e:	3301      	adds	r3, #1
 8002d20:	61fb      	str	r3, [r7, #28]
 8002d22:	69fb      	ldr	r3, [r7, #28]
 8002d24:	2b0f      	cmp	r3, #15
 8002d26:	f67f ae05 	bls.w	8002934 <HAL_GPIO_Init+0x13c>
      }
    }
  }
}
 8002d2a:	bf00      	nop
 8002d2c:	3720      	adds	r7, #32
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	bd80      	pop	{r7, pc}
 8002d32:	bf00      	nop
 8002d34:	40020800 	.word	0x40020800
 8002d38:	40020c00 	.word	0x40020c00
 8002d3c:	40021000 	.word	0x40021000
 8002d40:	40013800 	.word	0x40013800
 8002d44:	40013c00 	.word	0x40013c00

08002d48 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002d48:	b580      	push	{r7, lr}
 8002d4a:	b082      	sub	sp, #8
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	6078      	str	r0, [r7, #4]
 8002d50:	460b      	mov	r3, r1
 8002d52:	807b      	strh	r3, [r7, #2]
 8002d54:	4613      	mov	r3, r2
 8002d56:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8002d58:	887b      	ldrh	r3, [r7, #2]
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d004      	beq.n	8002d68 <HAL_GPIO_WritePin+0x20>
 8002d5e:	887b      	ldrh	r3, [r7, #2]
 8002d60:	0c1b      	lsrs	r3, r3, #16
 8002d62:	041b      	lsls	r3, r3, #16
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d004      	beq.n	8002d72 <HAL_GPIO_WritePin+0x2a>
 8002d68:	f240 119f 	movw	r1, #415	; 0x19f
 8002d6c:	480e      	ldr	r0, [pc, #56]	; (8002da8 <HAL_GPIO_WritePin+0x60>)
 8002d6e:	f7fe fc80 	bl	8001672 <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 8002d72:	787b      	ldrb	r3, [r7, #1]
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d007      	beq.n	8002d88 <HAL_GPIO_WritePin+0x40>
 8002d78:	787b      	ldrb	r3, [r7, #1]
 8002d7a:	2b01      	cmp	r3, #1
 8002d7c:	d004      	beq.n	8002d88 <HAL_GPIO_WritePin+0x40>
 8002d7e:	f44f 71d0 	mov.w	r1, #416	; 0x1a0
 8002d82:	4809      	ldr	r0, [pc, #36]	; (8002da8 <HAL_GPIO_WritePin+0x60>)
 8002d84:	f7fe fc75 	bl	8001672 <assert_failed>

  if(PinState != GPIO_PIN_RESET)
 8002d88:	787b      	ldrb	r3, [r7, #1]
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d003      	beq.n	8002d96 <HAL_GPIO_WritePin+0x4e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002d8e:	887a      	ldrh	r2, [r7, #2]
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002d94:	e003      	b.n	8002d9e <HAL_GPIO_WritePin+0x56>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002d96:	887b      	ldrh	r3, [r7, #2]
 8002d98:	041a      	lsls	r2, r3, #16
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	619a      	str	r2, [r3, #24]
}
 8002d9e:	bf00      	nop
 8002da0:	3708      	adds	r7, #8
 8002da2:	46bd      	mov	sp, r7
 8002da4:	bd80      	pop	{r7, pc}
 8002da6:	bf00      	nop
 8002da8:	0800dca4 	.word	0x0800dca4

08002dac <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002dac:	b580      	push	{r7, lr}
 8002dae:	b082      	sub	sp, #8
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	6078      	str	r0, [r7, #4]
 8002db4:	460b      	mov	r3, r1
 8002db6:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8002db8:	887b      	ldrh	r3, [r7, #2]
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d004      	beq.n	8002dc8 <HAL_GPIO_TogglePin+0x1c>
 8002dbe:	887b      	ldrh	r3, [r7, #2]
 8002dc0:	0c1b      	lsrs	r3, r3, #16
 8002dc2:	041b      	lsls	r3, r3, #16
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d004      	beq.n	8002dd2 <HAL_GPIO_TogglePin+0x26>
 8002dc8:	f44f 71db 	mov.w	r1, #438	; 0x1b6
 8002dcc:	480a      	ldr	r0, [pc, #40]	; (8002df8 <HAL_GPIO_TogglePin+0x4c>)
 8002dce:	f7fe fc50 	bl	8001672 <assert_failed>

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	695a      	ldr	r2, [r3, #20]
 8002dd6:	887b      	ldrh	r3, [r7, #2]
 8002dd8:	401a      	ands	r2, r3
 8002dda:	887b      	ldrh	r3, [r7, #2]
 8002ddc:	429a      	cmp	r2, r3
 8002dde:	d104      	bne.n	8002dea <HAL_GPIO_TogglePin+0x3e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002de0:	887b      	ldrh	r3, [r7, #2]
 8002de2:	041a      	lsls	r2, r3, #16
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8002de8:	e002      	b.n	8002df0 <HAL_GPIO_TogglePin+0x44>
    GPIOx->BSRR = GPIO_Pin;
 8002dea:	887a      	ldrh	r2, [r7, #2]
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	619a      	str	r2, [r3, #24]
}
 8002df0:	bf00      	nop
 8002df2:	3708      	adds	r7, #8
 8002df4:	46bd      	mov	sp, r7
 8002df6:	bd80      	pop	{r7, pc}
 8002df8:	0800dca4 	.word	0x0800dca4

08002dfc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002dfc:	b580      	push	{r7, lr}
 8002dfe:	b084      	sub	sp, #16
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d101      	bne.n	8002e0e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002e0a:	2301      	movs	r3, #1
 8002e0c:	e1b1      	b.n	8003172 <HAL_I2C_Init+0x376>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	4aa2      	ldr	r2, [pc, #648]	; (800309c <HAL_I2C_Init+0x2a0>)
 8002e14:	4293      	cmp	r3, r2
 8002e16:	d00e      	beq.n	8002e36 <HAL_I2C_Init+0x3a>
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	4aa0      	ldr	r2, [pc, #640]	; (80030a0 <HAL_I2C_Init+0x2a4>)
 8002e1e:	4293      	cmp	r3, r2
 8002e20:	d009      	beq.n	8002e36 <HAL_I2C_Init+0x3a>
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	4a9f      	ldr	r2, [pc, #636]	; (80030a4 <HAL_I2C_Init+0x2a8>)
 8002e28:	4293      	cmp	r3, r2
 8002e2a:	d004      	beq.n	8002e36 <HAL_I2C_Init+0x3a>
 8002e2c:	f240 11bf 	movw	r1, #447	; 0x1bf
 8002e30:	489d      	ldr	r0, [pc, #628]	; (80030a8 <HAL_I2C_Init+0x2ac>)
 8002e32:	f7fe fc1e 	bl	8001672 <assert_failed>
  assert_param(IS_I2C_CLOCK_SPEED(hi2c->Init.ClockSpeed));
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	685b      	ldr	r3, [r3, #4]
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d004      	beq.n	8002e48 <HAL_I2C_Init+0x4c>
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	685b      	ldr	r3, [r3, #4]
 8002e42:	4a9a      	ldr	r2, [pc, #616]	; (80030ac <HAL_I2C_Init+0x2b0>)
 8002e44:	4293      	cmp	r3, r2
 8002e46:	d904      	bls.n	8002e52 <HAL_I2C_Init+0x56>
 8002e48:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 8002e4c:	4896      	ldr	r0, [pc, #600]	; (80030a8 <HAL_I2C_Init+0x2ac>)
 8002e4e:	f7fe fc10 	bl	8001672 <assert_failed>
  assert_param(IS_I2C_DUTY_CYCLE(hi2c->Init.DutyCycle));
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	689b      	ldr	r3, [r3, #8]
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d009      	beq.n	8002e6e <HAL_I2C_Init+0x72>
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	689b      	ldr	r3, [r3, #8]
 8002e5e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002e62:	d004      	beq.n	8002e6e <HAL_I2C_Init+0x72>
 8002e64:	f240 11c1 	movw	r1, #449	; 0x1c1
 8002e68:	488f      	ldr	r0, [pc, #572]	; (80030a8 <HAL_I2C_Init+0x2ac>)
 8002e6a:	f7fe fc02 	bl	8001672 <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS1(hi2c->Init.OwnAddress1));
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	68db      	ldr	r3, [r3, #12]
 8002e72:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002e76:	f023 0303 	bic.w	r3, r3, #3
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d004      	beq.n	8002e88 <HAL_I2C_Init+0x8c>
 8002e7e:	f44f 71e1 	mov.w	r1, #450	; 0x1c2
 8002e82:	4889      	ldr	r0, [pc, #548]	; (80030a8 <HAL_I2C_Init+0x2ac>)
 8002e84:	f7fe fbf5 	bl	8001672 <assert_failed>
  assert_param(IS_I2C_ADDRESSING_MODE(hi2c->Init.AddressingMode));
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	691b      	ldr	r3, [r3, #16]
 8002e8c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002e90:	d009      	beq.n	8002ea6 <HAL_I2C_Init+0xaa>
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	691b      	ldr	r3, [r3, #16]
 8002e96:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8002e9a:	d004      	beq.n	8002ea6 <HAL_I2C_Init+0xaa>
 8002e9c:	f240 11c3 	movw	r1, #451	; 0x1c3
 8002ea0:	4881      	ldr	r0, [pc, #516]	; (80030a8 <HAL_I2C_Init+0x2ac>)
 8002ea2:	f7fe fbe6 	bl	8001672 <assert_failed>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	695b      	ldr	r3, [r3, #20]
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d008      	beq.n	8002ec0 <HAL_I2C_Init+0xc4>
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	695b      	ldr	r3, [r3, #20]
 8002eb2:	2b01      	cmp	r3, #1
 8002eb4:	d004      	beq.n	8002ec0 <HAL_I2C_Init+0xc4>
 8002eb6:	f44f 71e2 	mov.w	r1, #452	; 0x1c4
 8002eba:	487b      	ldr	r0, [pc, #492]	; (80030a8 <HAL_I2C_Init+0x2ac>)
 8002ebc:	f7fe fbd9 	bl	8001672 <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	699b      	ldr	r3, [r3, #24]
 8002ec4:	f023 03fe 	bic.w	r3, r3, #254	; 0xfe
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d004      	beq.n	8002ed6 <HAL_I2C_Init+0xda>
 8002ecc:	f240 11c5 	movw	r1, #453	; 0x1c5
 8002ed0:	4875      	ldr	r0, [pc, #468]	; (80030a8 <HAL_I2C_Init+0x2ac>)
 8002ed2:	f7fe fbce 	bl	8001672 <assert_failed>
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	69db      	ldr	r3, [r3, #28]
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d008      	beq.n	8002ef0 <HAL_I2C_Init+0xf4>
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	69db      	ldr	r3, [r3, #28]
 8002ee2:	2b40      	cmp	r3, #64	; 0x40
 8002ee4:	d004      	beq.n	8002ef0 <HAL_I2C_Init+0xf4>
 8002ee6:	f44f 71e3 	mov.w	r1, #454	; 0x1c6
 8002eea:	486f      	ldr	r0, [pc, #444]	; (80030a8 <HAL_I2C_Init+0x2ac>)
 8002eec:	f7fe fbc1 	bl	8001672 <assert_failed>
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	6a1b      	ldr	r3, [r3, #32]
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d008      	beq.n	8002f0a <HAL_I2C_Init+0x10e>
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	6a1b      	ldr	r3, [r3, #32]
 8002efc:	2b80      	cmp	r3, #128	; 0x80
 8002efe:	d004      	beq.n	8002f0a <HAL_I2C_Init+0x10e>
 8002f00:	f240 11c7 	movw	r1, #455	; 0x1c7
 8002f04:	4868      	ldr	r0, [pc, #416]	; (80030a8 <HAL_I2C_Init+0x2ac>)
 8002f06:	f7fe fbb4 	bl	8001672 <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f10:	b2db      	uxtb	r3, r3
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d106      	bne.n	8002f24 <HAL_I2C_Init+0x128>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	2200      	movs	r2, #0
 8002f1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002f1e:	6878      	ldr	r0, [r7, #4]
 8002f20:	f7fe f886 	bl	8001030 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	2224      	movs	r2, #36	; 0x24
 8002f28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	681a      	ldr	r2, [r3, #0]
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f022 0201 	bic.w	r2, r2, #1
 8002f3a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	681a      	ldr	r2, [r3, #0]
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002f4a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	681a      	ldr	r2, [r3, #0]
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002f5a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002f5c:	f002 fd8c 	bl	8005a78 <HAL_RCC_GetPCLK1Freq>
 8002f60:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	685b      	ldr	r3, [r3, #4]
 8002f66:	4a52      	ldr	r2, [pc, #328]	; (80030b0 <HAL_I2C_Init+0x2b4>)
 8002f68:	4293      	cmp	r3, r2
 8002f6a:	d807      	bhi.n	8002f7c <HAL_I2C_Init+0x180>
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	4a51      	ldr	r2, [pc, #324]	; (80030b4 <HAL_I2C_Init+0x2b8>)
 8002f70:	4293      	cmp	r3, r2
 8002f72:	bf94      	ite	ls
 8002f74:	2301      	movls	r3, #1
 8002f76:	2300      	movhi	r3, #0
 8002f78:	b2db      	uxtb	r3, r3
 8002f7a:	e006      	b.n	8002f8a <HAL_I2C_Init+0x18e>
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	4a4e      	ldr	r2, [pc, #312]	; (80030b8 <HAL_I2C_Init+0x2bc>)
 8002f80:	4293      	cmp	r3, r2
 8002f82:	bf94      	ite	ls
 8002f84:	2301      	movls	r3, #1
 8002f86:	2300      	movhi	r3, #0
 8002f88:	b2db      	uxtb	r3, r3
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d001      	beq.n	8002f92 <HAL_I2C_Init+0x196>
  {
    return HAL_ERROR;
 8002f8e:	2301      	movs	r3, #1
 8002f90:	e0ef      	b.n	8003172 <HAL_I2C_Init+0x376>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	4a49      	ldr	r2, [pc, #292]	; (80030bc <HAL_I2C_Init+0x2c0>)
 8002f96:	fba2 2303 	umull	r2, r3, r2, r3
 8002f9a:	0c9b      	lsrs	r3, r3, #18
 8002f9c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	685b      	ldr	r3, [r3, #4]
 8002fa4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	68ba      	ldr	r2, [r7, #8]
 8002fae:	430a      	orrs	r2, r1
 8002fb0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	6a1b      	ldr	r3, [r3, #32]
 8002fb8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	685b      	ldr	r3, [r3, #4]
 8002fc0:	4a3b      	ldr	r2, [pc, #236]	; (80030b0 <HAL_I2C_Init+0x2b4>)
 8002fc2:	4293      	cmp	r3, r2
 8002fc4:	d802      	bhi.n	8002fcc <HAL_I2C_Init+0x1d0>
 8002fc6:	68bb      	ldr	r3, [r7, #8]
 8002fc8:	3301      	adds	r3, #1
 8002fca:	e009      	b.n	8002fe0 <HAL_I2C_Init+0x1e4>
 8002fcc:	68bb      	ldr	r3, [r7, #8]
 8002fce:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002fd2:	fb02 f303 	mul.w	r3, r2, r3
 8002fd6:	4a3a      	ldr	r2, [pc, #232]	; (80030c0 <HAL_I2C_Init+0x2c4>)
 8002fd8:	fba2 2303 	umull	r2, r3, r2, r3
 8002fdc:	099b      	lsrs	r3, r3, #6
 8002fde:	3301      	adds	r3, #1
 8002fe0:	687a      	ldr	r2, [r7, #4]
 8002fe2:	6812      	ldr	r2, [r2, #0]
 8002fe4:	430b      	orrs	r3, r1
 8002fe6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	69db      	ldr	r3, [r3, #28]
 8002fee:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002ff2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	685b      	ldr	r3, [r3, #4]
 8002ffa:	492d      	ldr	r1, [pc, #180]	; (80030b0 <HAL_I2C_Init+0x2b4>)
 8002ffc:	428b      	cmp	r3, r1
 8002ffe:	d80d      	bhi.n	800301c <HAL_I2C_Init+0x220>
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	1e59      	subs	r1, r3, #1
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	685b      	ldr	r3, [r3, #4]
 8003008:	005b      	lsls	r3, r3, #1
 800300a:	fbb1 f3f3 	udiv	r3, r1, r3
 800300e:	3301      	adds	r3, #1
 8003010:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003014:	2b04      	cmp	r3, #4
 8003016:	bf38      	it	cc
 8003018:	2304      	movcc	r3, #4
 800301a:	e063      	b.n	80030e4 <HAL_I2C_Init+0x2e8>
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	689b      	ldr	r3, [r3, #8]
 8003020:	2b00      	cmp	r3, #0
 8003022:	d111      	bne.n	8003048 <HAL_I2C_Init+0x24c>
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	1e58      	subs	r0, r3, #1
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	6859      	ldr	r1, [r3, #4]
 800302c:	460b      	mov	r3, r1
 800302e:	005b      	lsls	r3, r3, #1
 8003030:	440b      	add	r3, r1
 8003032:	fbb0 f3f3 	udiv	r3, r0, r3
 8003036:	3301      	adds	r3, #1
 8003038:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800303c:	2b00      	cmp	r3, #0
 800303e:	bf0c      	ite	eq
 8003040:	2301      	moveq	r3, #1
 8003042:	2300      	movne	r3, #0
 8003044:	b2db      	uxtb	r3, r3
 8003046:	e012      	b.n	800306e <HAL_I2C_Init+0x272>
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	1e58      	subs	r0, r3, #1
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	6859      	ldr	r1, [r3, #4]
 8003050:	460b      	mov	r3, r1
 8003052:	009b      	lsls	r3, r3, #2
 8003054:	440b      	add	r3, r1
 8003056:	0099      	lsls	r1, r3, #2
 8003058:	440b      	add	r3, r1
 800305a:	fbb0 f3f3 	udiv	r3, r0, r3
 800305e:	3301      	adds	r3, #1
 8003060:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003064:	2b00      	cmp	r3, #0
 8003066:	bf0c      	ite	eq
 8003068:	2301      	moveq	r3, #1
 800306a:	2300      	movne	r3, #0
 800306c:	b2db      	uxtb	r3, r3
 800306e:	2b00      	cmp	r3, #0
 8003070:	d001      	beq.n	8003076 <HAL_I2C_Init+0x27a>
 8003072:	2301      	movs	r3, #1
 8003074:	e036      	b.n	80030e4 <HAL_I2C_Init+0x2e8>
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	689b      	ldr	r3, [r3, #8]
 800307a:	2b00      	cmp	r3, #0
 800307c:	d122      	bne.n	80030c4 <HAL_I2C_Init+0x2c8>
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	1e58      	subs	r0, r3, #1
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	6859      	ldr	r1, [r3, #4]
 8003086:	460b      	mov	r3, r1
 8003088:	005b      	lsls	r3, r3, #1
 800308a:	440b      	add	r3, r1
 800308c:	fbb0 f3f3 	udiv	r3, r0, r3
 8003090:	3301      	adds	r3, #1
 8003092:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003096:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800309a:	e023      	b.n	80030e4 <HAL_I2C_Init+0x2e8>
 800309c:	40005400 	.word	0x40005400
 80030a0:	40005800 	.word	0x40005800
 80030a4:	40005c00 	.word	0x40005c00
 80030a8:	0800dce0 	.word	0x0800dce0
 80030ac:	00061a80 	.word	0x00061a80
 80030b0:	000186a0 	.word	0x000186a0
 80030b4:	001e847f 	.word	0x001e847f
 80030b8:	003d08ff 	.word	0x003d08ff
 80030bc:	431bde83 	.word	0x431bde83
 80030c0:	10624dd3 	.word	0x10624dd3
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	1e58      	subs	r0, r3, #1
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	6859      	ldr	r1, [r3, #4]
 80030cc:	460b      	mov	r3, r1
 80030ce:	009b      	lsls	r3, r3, #2
 80030d0:	440b      	add	r3, r1
 80030d2:	0099      	lsls	r1, r3, #2
 80030d4:	440b      	add	r3, r1
 80030d6:	fbb0 f3f3 	udiv	r3, r0, r3
 80030da:	3301      	adds	r3, #1
 80030dc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80030e0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80030e4:	6879      	ldr	r1, [r7, #4]
 80030e6:	6809      	ldr	r1, [r1, #0]
 80030e8:	4313      	orrs	r3, r2
 80030ea:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	69da      	ldr	r2, [r3, #28]
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	6a1b      	ldr	r3, [r3, #32]
 80030fe:	431a      	orrs	r2, r3
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	430a      	orrs	r2, r1
 8003106:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	689b      	ldr	r3, [r3, #8]
 800310e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003112:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003116:	687a      	ldr	r2, [r7, #4]
 8003118:	6911      	ldr	r1, [r2, #16]
 800311a:	687a      	ldr	r2, [r7, #4]
 800311c:	68d2      	ldr	r2, [r2, #12]
 800311e:	4311      	orrs	r1, r2
 8003120:	687a      	ldr	r2, [r7, #4]
 8003122:	6812      	ldr	r2, [r2, #0]
 8003124:	430b      	orrs	r3, r1
 8003126:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	68db      	ldr	r3, [r3, #12]
 800312e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	695a      	ldr	r2, [r3, #20]
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	699b      	ldr	r3, [r3, #24]
 800313a:	431a      	orrs	r2, r3
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	430a      	orrs	r2, r1
 8003142:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	681a      	ldr	r2, [r3, #0]
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f042 0201 	orr.w	r2, r2, #1
 8003152:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	2200      	movs	r2, #0
 8003158:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	2220      	movs	r2, #32
 800315e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	2200      	movs	r2, #0
 8003166:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	2200      	movs	r2, #0
 800316c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003170:	2300      	movs	r3, #0
}
 8003172:	4618      	mov	r0, r3
 8003174:	3710      	adds	r7, #16
 8003176:	46bd      	mov	sp, r7
 8003178:	bd80      	pop	{r7, pc}
 800317a:	bf00      	nop

0800317c <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 800317c:	b580      	push	{r7, lr}
 800317e:	b088      	sub	sp, #32
 8003180:	af00      	add	r7, sp, #0
 8003182:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	2b00      	cmp	r3, #0
 8003188:	d101      	bne.n	800318e <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 800318a:	2301      	movs	r3, #1
 800318c:	e1e7      	b.n	800355e <HAL_I2S_Init+0x3e2>
  }

  /* Check the I2S parameters */
  assert_param(IS_I2S_ALL_INSTANCE(hi2s->Instance));
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	4a9b      	ldr	r2, [pc, #620]	; (8003400 <HAL_I2S_Init+0x284>)
 8003194:	4293      	cmp	r3, r2
 8003196:	d018      	beq.n	80031ca <HAL_I2S_Init+0x4e>
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	4a99      	ldr	r2, [pc, #612]	; (8003404 <HAL_I2S_Init+0x288>)
 800319e:	4293      	cmp	r3, r2
 80031a0:	d013      	beq.n	80031ca <HAL_I2S_Init+0x4e>
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	4a98      	ldr	r2, [pc, #608]	; (8003408 <HAL_I2S_Init+0x28c>)
 80031a8:	4293      	cmp	r3, r2
 80031aa:	d00e      	beq.n	80031ca <HAL_I2S_Init+0x4e>
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	4a96      	ldr	r2, [pc, #600]	; (800340c <HAL_I2S_Init+0x290>)
 80031b2:	4293      	cmp	r3, r2
 80031b4:	d009      	beq.n	80031ca <HAL_I2S_Init+0x4e>
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	4a95      	ldr	r2, [pc, #596]	; (8003410 <HAL_I2S_Init+0x294>)
 80031bc:	4293      	cmp	r3, r2
 80031be:	d004      	beq.n	80031ca <HAL_I2S_Init+0x4e>
 80031c0:	f240 111b 	movw	r1, #283	; 0x11b
 80031c4:	4893      	ldr	r0, [pc, #588]	; (8003414 <HAL_I2S_Init+0x298>)
 80031c6:	f7fe fa54 	bl	8001672 <assert_failed>
  assert_param(IS_I2S_MODE(hi2s->Init.Mode));
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	685b      	ldr	r3, [r3, #4]
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d013      	beq.n	80031fa <HAL_I2S_Init+0x7e>
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	685b      	ldr	r3, [r3, #4]
 80031d6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80031da:	d00e      	beq.n	80031fa <HAL_I2S_Init+0x7e>
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	685b      	ldr	r3, [r3, #4]
 80031e0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80031e4:	d009      	beq.n	80031fa <HAL_I2S_Init+0x7e>
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	685b      	ldr	r3, [r3, #4]
 80031ea:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80031ee:	d004      	beq.n	80031fa <HAL_I2S_Init+0x7e>
 80031f0:	f44f 718e 	mov.w	r1, #284	; 0x11c
 80031f4:	4887      	ldr	r0, [pc, #540]	; (8003414 <HAL_I2S_Init+0x298>)
 80031f6:	f7fe fa3c 	bl	8001672 <assert_failed>
  assert_param(IS_I2S_STANDARD(hi2s->Init.Standard));
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	689b      	ldr	r3, [r3, #8]
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d014      	beq.n	800322c <HAL_I2S_Init+0xb0>
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	689b      	ldr	r3, [r3, #8]
 8003206:	2b10      	cmp	r3, #16
 8003208:	d010      	beq.n	800322c <HAL_I2S_Init+0xb0>
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	689b      	ldr	r3, [r3, #8]
 800320e:	2b20      	cmp	r3, #32
 8003210:	d00c      	beq.n	800322c <HAL_I2S_Init+0xb0>
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	689b      	ldr	r3, [r3, #8]
 8003216:	2b30      	cmp	r3, #48	; 0x30
 8003218:	d008      	beq.n	800322c <HAL_I2S_Init+0xb0>
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	689b      	ldr	r3, [r3, #8]
 800321e:	2bb0      	cmp	r3, #176	; 0xb0
 8003220:	d004      	beq.n	800322c <HAL_I2S_Init+0xb0>
 8003222:	f240 111d 	movw	r1, #285	; 0x11d
 8003226:	487b      	ldr	r0, [pc, #492]	; (8003414 <HAL_I2S_Init+0x298>)
 8003228:	f7fe fa23 	bl	8001672 <assert_failed>
  assert_param(IS_I2S_DATA_FORMAT(hi2s->Init.DataFormat));
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	68db      	ldr	r3, [r3, #12]
 8003230:	2b00      	cmp	r3, #0
 8003232:	d010      	beq.n	8003256 <HAL_I2S_Init+0xda>
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	68db      	ldr	r3, [r3, #12]
 8003238:	2b01      	cmp	r3, #1
 800323a:	d00c      	beq.n	8003256 <HAL_I2S_Init+0xda>
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	68db      	ldr	r3, [r3, #12]
 8003240:	2b03      	cmp	r3, #3
 8003242:	d008      	beq.n	8003256 <HAL_I2S_Init+0xda>
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	68db      	ldr	r3, [r3, #12]
 8003248:	2b05      	cmp	r3, #5
 800324a:	d004      	beq.n	8003256 <HAL_I2S_Init+0xda>
 800324c:	f44f 718f 	mov.w	r1, #286	; 0x11e
 8003250:	4870      	ldr	r0, [pc, #448]	; (8003414 <HAL_I2S_Init+0x298>)
 8003252:	f7fe fa0e 	bl	8001672 <assert_failed>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	691b      	ldr	r3, [r3, #16]
 800325a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800325e:	d008      	beq.n	8003272 <HAL_I2S_Init+0xf6>
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	691b      	ldr	r3, [r3, #16]
 8003264:	2b00      	cmp	r3, #0
 8003266:	d004      	beq.n	8003272 <HAL_I2S_Init+0xf6>
 8003268:	f240 111f 	movw	r1, #287	; 0x11f
 800326c:	4869      	ldr	r0, [pc, #420]	; (8003414 <HAL_I2S_Init+0x298>)
 800326e:	f7fe fa00 	bl	8001672 <assert_failed>
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	695b      	ldr	r3, [r3, #20]
 8003276:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 800327a:	d304      	bcc.n	8003286 <HAL_I2S_Init+0x10a>
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	695b      	ldr	r3, [r3, #20]
 8003280:	4a65      	ldr	r2, [pc, #404]	; (8003418 <HAL_I2S_Init+0x29c>)
 8003282:	4293      	cmp	r3, r2
 8003284:	d908      	bls.n	8003298 <HAL_I2S_Init+0x11c>
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	695b      	ldr	r3, [r3, #20]
 800328a:	2b02      	cmp	r3, #2
 800328c:	d004      	beq.n	8003298 <HAL_I2S_Init+0x11c>
 800328e:	f44f 7190 	mov.w	r1, #288	; 0x120
 8003292:	4860      	ldr	r0, [pc, #384]	; (8003414 <HAL_I2S_Init+0x298>)
 8003294:	f7fe f9ed 	bl	8001672 <assert_failed>
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	699b      	ldr	r3, [r3, #24]
 800329c:	2b00      	cmp	r3, #0
 800329e:	d008      	beq.n	80032b2 <HAL_I2S_Init+0x136>
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	699b      	ldr	r3, [r3, #24]
 80032a4:	2b08      	cmp	r3, #8
 80032a6:	d004      	beq.n	80032b2 <HAL_I2S_Init+0x136>
 80032a8:	f240 1121 	movw	r1, #289	; 0x121
 80032ac:	4859      	ldr	r0, [pc, #356]	; (8003414 <HAL_I2S_Init+0x298>)
 80032ae:	f7fe f9e0 	bl	8001672 <assert_failed>
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	69db      	ldr	r3, [r3, #28]
 80032b6:	2b01      	cmp	r3, #1
 80032b8:	d008      	beq.n	80032cc <HAL_I2S_Init+0x150>
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	69db      	ldr	r3, [r3, #28]
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d004      	beq.n	80032cc <HAL_I2S_Init+0x150>
 80032c2:	f44f 7191 	mov.w	r1, #290	; 0x122
 80032c6:	4853      	ldr	r0, [pc, #332]	; (8003414 <HAL_I2S_Init+0x298>)
 80032c8:	f7fe f9d3 	bl	8001672 <assert_failed>

  if (hi2s->State == HAL_I2S_STATE_RESET)
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80032d2:	b2db      	uxtb	r3, r3
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d109      	bne.n	80032ec <HAL_I2S_Init+0x170>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	2200      	movs	r2, #0
 80032dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	4a4e      	ldr	r2, [pc, #312]	; (800341c <HAL_I2S_Init+0x2a0>)
 80032e4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 80032e6:	6878      	ldr	r0, [r7, #4]
 80032e8:	f7fd ff46 	bl	8001178 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	2202      	movs	r2, #2
 80032f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	69db      	ldr	r3, [r3, #28]
 80032fa:	687a      	ldr	r2, [r7, #4]
 80032fc:	6812      	ldr	r2, [r2, #0]
 80032fe:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003302:	f023 030f 	bic.w	r3, r3, #15
 8003306:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	2202      	movs	r2, #2
 800330e:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	695b      	ldr	r3, [r3, #20]
 8003314:	2b02      	cmp	r3, #2
 8003316:	d060      	beq.n	80033da <HAL_I2S_Init+0x25e>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	68db      	ldr	r3, [r3, #12]
 800331c:	2b00      	cmp	r3, #0
 800331e:	d102      	bne.n	8003326 <HAL_I2S_Init+0x1aa>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8003320:	2310      	movs	r3, #16
 8003322:	617b      	str	r3, [r7, #20]
 8003324:	e001      	b.n	800332a <HAL_I2S_Init+0x1ae>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8003326:	2320      	movs	r3, #32
 8003328:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	689b      	ldr	r3, [r3, #8]
 800332e:	2b20      	cmp	r3, #32
 8003330:	d802      	bhi.n	8003338 <HAL_I2S_Init+0x1bc>
    {
      /* In I2S standard packet lenght is multiplied by 2 */
      packetlength = packetlength * 2U;
 8003332:	697b      	ldr	r3, [r7, #20]
 8003334:	005b      	lsls	r3, r3, #1
 8003336:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8003338:	2001      	movs	r0, #1
 800333a:	f002 fdc5 	bl	8005ec8 <HAL_RCCEx_GetPeriphCLKFreq>
 800333e:	60f8      	str	r0, [r7, #12]
#endif

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	691b      	ldr	r3, [r3, #16]
 8003344:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003348:	d125      	bne.n	8003396 <HAL_I2S_Init+0x21a>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	68db      	ldr	r3, [r3, #12]
 800334e:	2b00      	cmp	r3, #0
 8003350:	d010      	beq.n	8003374 <HAL_I2S_Init+0x1f8>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003352:	697b      	ldr	r3, [r7, #20]
 8003354:	009b      	lsls	r3, r3, #2
 8003356:	68fa      	ldr	r2, [r7, #12]
 8003358:	fbb2 f2f3 	udiv	r2, r2, r3
 800335c:	4613      	mov	r3, r2
 800335e:	009b      	lsls	r3, r3, #2
 8003360:	4413      	add	r3, r2
 8003362:	005b      	lsls	r3, r3, #1
 8003364:	461a      	mov	r2, r3
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	695b      	ldr	r3, [r3, #20]
 800336a:	fbb2 f3f3 	udiv	r3, r2, r3
 800336e:	3305      	adds	r3, #5
 8003370:	613b      	str	r3, [r7, #16]
 8003372:	e01f      	b.n	80033b4 <HAL_I2S_Init+0x238>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003374:	697b      	ldr	r3, [r7, #20]
 8003376:	00db      	lsls	r3, r3, #3
 8003378:	68fa      	ldr	r2, [r7, #12]
 800337a:	fbb2 f2f3 	udiv	r2, r2, r3
 800337e:	4613      	mov	r3, r2
 8003380:	009b      	lsls	r3, r3, #2
 8003382:	4413      	add	r3, r2
 8003384:	005b      	lsls	r3, r3, #1
 8003386:	461a      	mov	r2, r3
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	695b      	ldr	r3, [r3, #20]
 800338c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003390:	3305      	adds	r3, #5
 8003392:	613b      	str	r3, [r7, #16]
 8003394:	e00e      	b.n	80033b4 <HAL_I2S_Init+0x238>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003396:	68fa      	ldr	r2, [r7, #12]
 8003398:	697b      	ldr	r3, [r7, #20]
 800339a:	fbb2 f2f3 	udiv	r2, r2, r3
 800339e:	4613      	mov	r3, r2
 80033a0:	009b      	lsls	r3, r3, #2
 80033a2:	4413      	add	r3, r2
 80033a4:	005b      	lsls	r3, r3, #1
 80033a6:	461a      	mov	r2, r3
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	695b      	ldr	r3, [r3, #20]
 80033ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80033b0:	3305      	adds	r3, #5
 80033b2:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 80033b4:	693b      	ldr	r3, [r7, #16]
 80033b6:	4a1a      	ldr	r2, [pc, #104]	; (8003420 <HAL_I2S_Init+0x2a4>)
 80033b8:	fba2 2303 	umull	r2, r3, r2, r3
 80033bc:	08db      	lsrs	r3, r3, #3
 80033be:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 80033c0:	693b      	ldr	r3, [r7, #16]
 80033c2:	f003 0301 	and.w	r3, r3, #1
 80033c6:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 80033c8:	693a      	ldr	r2, [r7, #16]
 80033ca:	69bb      	ldr	r3, [r7, #24]
 80033cc:	1ad3      	subs	r3, r2, r3
 80033ce:	085b      	lsrs	r3, r3, #1
 80033d0:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 80033d2:	69bb      	ldr	r3, [r7, #24]
 80033d4:	021b      	lsls	r3, r3, #8
 80033d6:	61bb      	str	r3, [r7, #24]
 80033d8:	e003      	b.n	80033e2 <HAL_I2S_Init+0x266>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 80033da:	2302      	movs	r3, #2
 80033dc:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 80033de:	2300      	movs	r3, #0
 80033e0:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 80033e2:	69fb      	ldr	r3, [r7, #28]
 80033e4:	2b01      	cmp	r3, #1
 80033e6:	d902      	bls.n	80033ee <HAL_I2S_Init+0x272>
 80033e8:	69fb      	ldr	r3, [r7, #28]
 80033ea:	2bff      	cmp	r3, #255	; 0xff
 80033ec:	d91a      	bls.n	8003424 <HAL_I2S_Init+0x2a8>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033f2:	f043 0210 	orr.w	r2, r3, #16
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 80033fa:	2301      	movs	r3, #1
 80033fc:	e0af      	b.n	800355e <HAL_I2S_Init+0x3e2>
 80033fe:	bf00      	nop
 8003400:	40013000 	.word	0x40013000
 8003404:	40003800 	.word	0x40003800
 8003408:	40003c00 	.word	0x40003c00
 800340c:	40013400 	.word	0x40013400
 8003410:	40015000 	.word	0x40015000
 8003414:	0800dd18 	.word	0x0800dd18
 8003418:	0002ee00 	.word	0x0002ee00
 800341c:	0800366f 	.word	0x0800366f
 8003420:	cccccccd 	.word	0xcccccccd
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	691a      	ldr	r2, [r3, #16]
 8003428:	69bb      	ldr	r3, [r7, #24]
 800342a:	ea42 0103 	orr.w	r1, r2, r3
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	69fa      	ldr	r2, [r7, #28]
 8003434:	430a      	orrs	r2, r1
 8003436:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	69db      	ldr	r3, [r3, #28]
 800343e:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003442:	f023 030f 	bic.w	r3, r3, #15
 8003446:	687a      	ldr	r2, [r7, #4]
 8003448:	6851      	ldr	r1, [r2, #4]
 800344a:	687a      	ldr	r2, [r7, #4]
 800344c:	6892      	ldr	r2, [r2, #8]
 800344e:	4311      	orrs	r1, r2
 8003450:	687a      	ldr	r2, [r7, #4]
 8003452:	68d2      	ldr	r2, [r2, #12]
 8003454:	4311      	orrs	r1, r2
 8003456:	687a      	ldr	r2, [r7, #4]
 8003458:	6992      	ldr	r2, [r2, #24]
 800345a:	430a      	orrs	r2, r1
 800345c:	431a      	orrs	r2, r3
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003466:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_ASTRTEN */

#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	6a1b      	ldr	r3, [r3, #32]
 800346c:	2b00      	cmp	r3, #0
 800346e:	d008      	beq.n	8003482 <HAL_I2S_Init+0x306>
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	6a1b      	ldr	r3, [r3, #32]
 8003474:	2b01      	cmp	r3, #1
 8003476:	d004      	beq.n	8003482 <HAL_I2S_Init+0x306>
 8003478:	f240 11bd 	movw	r1, #445	; 0x1bd
 800347c:	483a      	ldr	r0, [pc, #232]	; (8003568 <HAL_I2S_Init+0x3ec>)
 800347e:	f7fe f8f8 	bl	8001672 <assert_failed>

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	6a1b      	ldr	r3, [r3, #32]
 8003486:	2b01      	cmp	r3, #1
 8003488:	d161      	bne.n	800354e <HAL_I2S_Init+0x3d2>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	4a37      	ldr	r2, [pc, #220]	; (800356c <HAL_I2S_Init+0x3f0>)
 800348e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	4a36      	ldr	r2, [pc, #216]	; (8003570 <HAL_I2S_Init+0x3f4>)
 8003496:	4293      	cmp	r3, r2
 8003498:	d101      	bne.n	800349e <HAL_I2S_Init+0x322>
 800349a:	4b36      	ldr	r3, [pc, #216]	; (8003574 <HAL_I2S_Init+0x3f8>)
 800349c:	e001      	b.n	80034a2 <HAL_I2S_Init+0x326>
 800349e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80034a2:	69db      	ldr	r3, [r3, #28]
 80034a4:	687a      	ldr	r2, [r7, #4]
 80034a6:	6812      	ldr	r2, [r2, #0]
 80034a8:	4931      	ldr	r1, [pc, #196]	; (8003570 <HAL_I2S_Init+0x3f4>)
 80034aa:	428a      	cmp	r2, r1
 80034ac:	d101      	bne.n	80034b2 <HAL_I2S_Init+0x336>
 80034ae:	4a31      	ldr	r2, [pc, #196]	; (8003574 <HAL_I2S_Init+0x3f8>)
 80034b0:	e001      	b.n	80034b6 <HAL_I2S_Init+0x33a>
 80034b2:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 80034b6:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80034ba:	f023 030f 	bic.w	r3, r3, #15
 80034be:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	4a2a      	ldr	r2, [pc, #168]	; (8003570 <HAL_I2S_Init+0x3f4>)
 80034c6:	4293      	cmp	r3, r2
 80034c8:	d101      	bne.n	80034ce <HAL_I2S_Init+0x352>
 80034ca:	4b2a      	ldr	r3, [pc, #168]	; (8003574 <HAL_I2S_Init+0x3f8>)
 80034cc:	e001      	b.n	80034d2 <HAL_I2S_Init+0x356>
 80034ce:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80034d2:	2202      	movs	r2, #2
 80034d4:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	4a25      	ldr	r2, [pc, #148]	; (8003570 <HAL_I2S_Init+0x3f4>)
 80034dc:	4293      	cmp	r3, r2
 80034de:	d101      	bne.n	80034e4 <HAL_I2S_Init+0x368>
 80034e0:	4b24      	ldr	r3, [pc, #144]	; (8003574 <HAL_I2S_Init+0x3f8>)
 80034e2:	e001      	b.n	80034e8 <HAL_I2S_Init+0x36c>
 80034e4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80034e8:	69db      	ldr	r3, [r3, #28]
 80034ea:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	685b      	ldr	r3, [r3, #4]
 80034f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80034f4:	d003      	beq.n	80034fe <HAL_I2S_Init+0x382>
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	685b      	ldr	r3, [r3, #4]
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d103      	bne.n	8003506 <HAL_I2S_Init+0x38a>
    {
      tmp = I2S_MODE_SLAVE_RX;
 80034fe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003502:	613b      	str	r3, [r7, #16]
 8003504:	e001      	b.n	800350a <HAL_I2S_Init+0x38e>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8003506:	2300      	movs	r3, #0
 8003508:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 800350a:	693b      	ldr	r3, [r7, #16]
 800350c:	b29a      	uxth	r2, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	689b      	ldr	r3, [r3, #8]
 8003512:	b299      	uxth	r1, r3
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	68db      	ldr	r3, [r3, #12]
 8003518:	b298      	uxth	r0, r3
                                    (uint16_t)hi2s->Init.CPOL))));
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	699b      	ldr	r3, [r3, #24]
 800351e:	b29b      	uxth	r3, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 8003520:	4303      	orrs	r3, r0
 8003522:	b29b      	uxth	r3, r3
 8003524:	430b      	orrs	r3, r1
 8003526:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 8003528:	4313      	orrs	r3, r2
 800352a:	b29a      	uxth	r2, r3
 800352c:	897b      	ldrh	r3, [r7, #10]
 800352e:	4313      	orrs	r3, r2
 8003530:	b29b      	uxth	r3, r3
 8003532:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003536:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	4a0c      	ldr	r2, [pc, #48]	; (8003570 <HAL_I2S_Init+0x3f4>)
 800353e:	4293      	cmp	r3, r2
 8003540:	d101      	bne.n	8003546 <HAL_I2S_Init+0x3ca>
 8003542:	4b0c      	ldr	r3, [pc, #48]	; (8003574 <HAL_I2S_Init+0x3f8>)
 8003544:	e001      	b.n	800354a <HAL_I2S_Init+0x3ce>
 8003546:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800354a:	897a      	ldrh	r2, [r7, #10]
 800354c:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	2200      	movs	r2, #0
 8003552:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	2201      	movs	r2, #1
 8003558:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 800355c:	2300      	movs	r3, #0
}
 800355e:	4618      	mov	r0, r3
 8003560:	3720      	adds	r7, #32
 8003562:	46bd      	mov	sp, r7
 8003564:	bd80      	pop	{r7, pc}
 8003566:	bf00      	nop
 8003568:	0800dd18 	.word	0x0800dd18
 800356c:	08003785 	.word	0x08003785
 8003570:	40003800 	.word	0x40003800
 8003574:	40003400 	.word	0x40003400

08003578 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003578:	b480      	push	{r7}
 800357a:	b083      	sub	sp, #12
 800357c:	af00      	add	r7, sp, #0
 800357e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8003580:	bf00      	nop
 8003582:	370c      	adds	r7, #12
 8003584:	46bd      	mov	sp, r7
 8003586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800358a:	4770      	bx	lr

0800358c <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800358c:	b480      	push	{r7}
 800358e:	b083      	sub	sp, #12
 8003590:	af00      	add	r7, sp, #0
 8003592:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8003594:	bf00      	nop
 8003596:	370c      	adds	r7, #12
 8003598:	46bd      	mov	sp, r7
 800359a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800359e:	4770      	bx	lr

080035a0 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 80035a0:	b480      	push	{r7}
 80035a2:	b083      	sub	sp, #12
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 80035a8:	bf00      	nop
 80035aa:	370c      	adds	r7, #12
 80035ac:	46bd      	mov	sp, r7
 80035ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b2:	4770      	bx	lr

080035b4 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 80035b4:	b580      	push	{r7, lr}
 80035b6:	b082      	sub	sp, #8
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035c0:	881a      	ldrh	r2, [r3, #0]
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035cc:	1c9a      	adds	r2, r3, #2
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035d6:	b29b      	uxth	r3, r3
 80035d8:	3b01      	subs	r3, #1
 80035da:	b29a      	uxth	r2, r3
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035e4:	b29b      	uxth	r3, r3
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d10e      	bne.n	8003608 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	685a      	ldr	r2, [r3, #4]
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80035f8:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	2201      	movs	r2, #1
 80035fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8003602:	6878      	ldr	r0, [r7, #4]
 8003604:	f7ff ffb8 	bl	8003578 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003608:	bf00      	nop
 800360a:	3708      	adds	r7, #8
 800360c:	46bd      	mov	sp, r7
 800360e:	bd80      	pop	{r7, pc}

08003610 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8003610:	b580      	push	{r7, lr}
 8003612:	b082      	sub	sp, #8
 8003614:	af00      	add	r7, sp, #0
 8003616:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	68da      	ldr	r2, [r3, #12]
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003622:	b292      	uxth	r2, r2
 8003624:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800362a:	1c9a      	adds	r2, r3, #2
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003634:	b29b      	uxth	r3, r3
 8003636:	3b01      	subs	r3, #1
 8003638:	b29a      	uxth	r2, r3
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003642:	b29b      	uxth	r3, r3
 8003644:	2b00      	cmp	r3, #0
 8003646:	d10e      	bne.n	8003666 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	685a      	ldr	r2, [r3, #4]
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003656:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	2201      	movs	r2, #1
 800365c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8003660:	6878      	ldr	r0, [r7, #4]
 8003662:	f7ff ff93 	bl	800358c <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003666:	bf00      	nop
 8003668:	3708      	adds	r7, #8
 800366a:	46bd      	mov	sp, r7
 800366c:	bd80      	pop	{r7, pc}

0800366e <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 800366e:	b580      	push	{r7, lr}
 8003670:	b086      	sub	sp, #24
 8003672:	af00      	add	r7, sp, #0
 8003674:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	689b      	ldr	r3, [r3, #8]
 800367c:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003684:	b2db      	uxtb	r3, r3
 8003686:	2b04      	cmp	r3, #4
 8003688:	d13a      	bne.n	8003700 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 800368a:	697b      	ldr	r3, [r7, #20]
 800368c:	f003 0301 	and.w	r3, r3, #1
 8003690:	2b01      	cmp	r3, #1
 8003692:	d109      	bne.n	80036a8 <I2S_IRQHandler+0x3a>
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	685b      	ldr	r3, [r3, #4]
 800369a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800369e:	2b40      	cmp	r3, #64	; 0x40
 80036a0:	d102      	bne.n	80036a8 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 80036a2:	6878      	ldr	r0, [r7, #4]
 80036a4:	f7ff ffb4 	bl	8003610 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80036a8:	697b      	ldr	r3, [r7, #20]
 80036aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036ae:	2b40      	cmp	r3, #64	; 0x40
 80036b0:	d126      	bne.n	8003700 <I2S_IRQHandler+0x92>
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	685b      	ldr	r3, [r3, #4]
 80036b8:	f003 0320 	and.w	r3, r3, #32
 80036bc:	2b20      	cmp	r3, #32
 80036be:	d11f      	bne.n	8003700 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	685a      	ldr	r2, [r3, #4]
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80036ce:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80036d0:	2300      	movs	r3, #0
 80036d2:	613b      	str	r3, [r7, #16]
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	68db      	ldr	r3, [r3, #12]
 80036da:	613b      	str	r3, [r7, #16]
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	689b      	ldr	r3, [r3, #8]
 80036e2:	613b      	str	r3, [r7, #16]
 80036e4:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	2201      	movs	r2, #1
 80036ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036f2:	f043 0202 	orr.w	r2, r3, #2
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80036fa:	6878      	ldr	r0, [r7, #4]
 80036fc:	f7ff ff50 	bl	80035a0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003706:	b2db      	uxtb	r3, r3
 8003708:	2b03      	cmp	r3, #3
 800370a:	d136      	bne.n	800377a <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 800370c:	697b      	ldr	r3, [r7, #20]
 800370e:	f003 0302 	and.w	r3, r3, #2
 8003712:	2b02      	cmp	r3, #2
 8003714:	d109      	bne.n	800372a <I2S_IRQHandler+0xbc>
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	685b      	ldr	r3, [r3, #4]
 800371c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003720:	2b80      	cmp	r3, #128	; 0x80
 8003722:	d102      	bne.n	800372a <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8003724:	6878      	ldr	r0, [r7, #4]
 8003726:	f7ff ff45 	bl	80035b4 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 800372a:	697b      	ldr	r3, [r7, #20]
 800372c:	f003 0308 	and.w	r3, r3, #8
 8003730:	2b08      	cmp	r3, #8
 8003732:	d122      	bne.n	800377a <I2S_IRQHandler+0x10c>
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	685b      	ldr	r3, [r3, #4]
 800373a:	f003 0320 	and.w	r3, r3, #32
 800373e:	2b20      	cmp	r3, #32
 8003740:	d11b      	bne.n	800377a <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	685a      	ldr	r2, [r3, #4]
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003750:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003752:	2300      	movs	r3, #0
 8003754:	60fb      	str	r3, [r7, #12]
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	689b      	ldr	r3, [r3, #8]
 800375c:	60fb      	str	r3, [r7, #12]
 800375e:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	2201      	movs	r2, #1
 8003764:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800376c:	f043 0204 	orr.w	r2, r3, #4
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003774:	6878      	ldr	r0, [r7, #4]
 8003776:	f7ff ff13 	bl	80035a0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800377a:	bf00      	nop
 800377c:	3718      	adds	r7, #24
 800377e:	46bd      	mov	sp, r7
 8003780:	bd80      	pop	{r7, pc}
	...

08003784 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003784:	b580      	push	{r7, lr}
 8003786:	b088      	sub	sp, #32
 8003788:	af00      	add	r7, sp, #0
 800378a:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	689b      	ldr	r3, [r3, #8]
 8003792:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	4aa2      	ldr	r2, [pc, #648]	; (8003a24 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800379a:	4293      	cmp	r3, r2
 800379c:	d101      	bne.n	80037a2 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 800379e:	4ba2      	ldr	r3, [pc, #648]	; (8003a28 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80037a0:	e001      	b.n	80037a6 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 80037a2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80037a6:	689b      	ldr	r3, [r3, #8]
 80037a8:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	685b      	ldr	r3, [r3, #4]
 80037b0:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	4a9b      	ldr	r2, [pc, #620]	; (8003a24 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80037b8:	4293      	cmp	r3, r2
 80037ba:	d101      	bne.n	80037c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 80037bc:	4b9a      	ldr	r3, [pc, #616]	; (8003a28 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80037be:	e001      	b.n	80037c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 80037c0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80037c4:	685b      	ldr	r3, [r3, #4]
 80037c6:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	685b      	ldr	r3, [r3, #4]
 80037cc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80037d0:	d004      	beq.n	80037dc <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	685b      	ldr	r3, [r3, #4]
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	f040 8099 	bne.w	800390e <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 80037dc:	69fb      	ldr	r3, [r7, #28]
 80037de:	f003 0302 	and.w	r3, r3, #2
 80037e2:	2b02      	cmp	r3, #2
 80037e4:	d107      	bne.n	80037f6 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 80037e6:	697b      	ldr	r3, [r7, #20]
 80037e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d002      	beq.n	80037f6 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 80037f0:	6878      	ldr	r0, [r7, #4]
 80037f2:	f000 f925 	bl	8003a40 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 80037f6:	69bb      	ldr	r3, [r7, #24]
 80037f8:	f003 0301 	and.w	r3, r3, #1
 80037fc:	2b01      	cmp	r3, #1
 80037fe:	d107      	bne.n	8003810 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8003800:	693b      	ldr	r3, [r7, #16]
 8003802:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003806:	2b00      	cmp	r3, #0
 8003808:	d002      	beq.n	8003810 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 800380a:	6878      	ldr	r0, [r7, #4]
 800380c:	f000 f9c8 	bl	8003ba0 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003810:	69bb      	ldr	r3, [r7, #24]
 8003812:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003816:	2b40      	cmp	r3, #64	; 0x40
 8003818:	d13a      	bne.n	8003890 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 800381a:	693b      	ldr	r3, [r7, #16]
 800381c:	f003 0320 	and.w	r3, r3, #32
 8003820:	2b00      	cmp	r3, #0
 8003822:	d035      	beq.n	8003890 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	4a7e      	ldr	r2, [pc, #504]	; (8003a24 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800382a:	4293      	cmp	r3, r2
 800382c:	d101      	bne.n	8003832 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 800382e:	4b7e      	ldr	r3, [pc, #504]	; (8003a28 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003830:	e001      	b.n	8003836 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8003832:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003836:	685a      	ldr	r2, [r3, #4]
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	4979      	ldr	r1, [pc, #484]	; (8003a24 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800383e:	428b      	cmp	r3, r1
 8003840:	d101      	bne.n	8003846 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8003842:	4b79      	ldr	r3, [pc, #484]	; (8003a28 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003844:	e001      	b.n	800384a <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8003846:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800384a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800384e:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	685a      	ldr	r2, [r3, #4]
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800385e:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003860:	2300      	movs	r3, #0
 8003862:	60fb      	str	r3, [r7, #12]
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	68db      	ldr	r3, [r3, #12]
 800386a:	60fb      	str	r3, [r7, #12]
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	689b      	ldr	r3, [r3, #8]
 8003872:	60fb      	str	r3, [r7, #12]
 8003874:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	2201      	movs	r2, #1
 800387a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003882:	f043 0202 	orr.w	r2, r3, #2
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800388a:	6878      	ldr	r0, [r7, #4]
 800388c:	f7ff fe88 	bl	80035a0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003890:	69fb      	ldr	r3, [r7, #28]
 8003892:	f003 0308 	and.w	r3, r3, #8
 8003896:	2b08      	cmp	r3, #8
 8003898:	f040 80be 	bne.w	8003a18 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 800389c:	697b      	ldr	r3, [r7, #20]
 800389e:	f003 0320 	and.w	r3, r3, #32
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	f000 80b8 	beq.w	8003a18 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	685a      	ldr	r2, [r3, #4]
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80038b6:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	4a59      	ldr	r2, [pc, #356]	; (8003a24 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80038be:	4293      	cmp	r3, r2
 80038c0:	d101      	bne.n	80038c6 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 80038c2:	4b59      	ldr	r3, [pc, #356]	; (8003a28 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80038c4:	e001      	b.n	80038ca <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 80038c6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80038ca:	685a      	ldr	r2, [r3, #4]
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	4954      	ldr	r1, [pc, #336]	; (8003a24 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80038d2:	428b      	cmp	r3, r1
 80038d4:	d101      	bne.n	80038da <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 80038d6:	4b54      	ldr	r3, [pc, #336]	; (8003a28 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80038d8:	e001      	b.n	80038de <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 80038da:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80038de:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80038e2:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80038e4:	2300      	movs	r3, #0
 80038e6:	60bb      	str	r3, [r7, #8]
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	689b      	ldr	r3, [r3, #8]
 80038ee:	60bb      	str	r3, [r7, #8]
 80038f0:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	2201      	movs	r2, #1
 80038f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038fe:	f043 0204 	orr.w	r2, r3, #4
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003906:	6878      	ldr	r0, [r7, #4]
 8003908:	f7ff fe4a 	bl	80035a0 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800390c:	e084      	b.n	8003a18 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 800390e:	69bb      	ldr	r3, [r7, #24]
 8003910:	f003 0302 	and.w	r3, r3, #2
 8003914:	2b02      	cmp	r3, #2
 8003916:	d107      	bne.n	8003928 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8003918:	693b      	ldr	r3, [r7, #16]
 800391a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800391e:	2b00      	cmp	r3, #0
 8003920:	d002      	beq.n	8003928 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8003922:	6878      	ldr	r0, [r7, #4]
 8003924:	f000 f8be 	bl	8003aa4 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8003928:	69fb      	ldr	r3, [r7, #28]
 800392a:	f003 0301 	and.w	r3, r3, #1
 800392e:	2b01      	cmp	r3, #1
 8003930:	d107      	bne.n	8003942 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8003932:	697b      	ldr	r3, [r7, #20]
 8003934:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003938:	2b00      	cmp	r3, #0
 800393a:	d002      	beq.n	8003942 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 800393c:	6878      	ldr	r0, [r7, #4]
 800393e:	f000 f8fd 	bl	8003b3c <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003942:	69fb      	ldr	r3, [r7, #28]
 8003944:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003948:	2b40      	cmp	r3, #64	; 0x40
 800394a:	d12f      	bne.n	80039ac <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 800394c:	697b      	ldr	r3, [r7, #20]
 800394e:	f003 0320 	and.w	r3, r3, #32
 8003952:	2b00      	cmp	r3, #0
 8003954:	d02a      	beq.n	80039ac <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	685a      	ldr	r2, [r3, #4]
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003964:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	4a2e      	ldr	r2, [pc, #184]	; (8003a24 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800396c:	4293      	cmp	r3, r2
 800396e:	d101      	bne.n	8003974 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8003970:	4b2d      	ldr	r3, [pc, #180]	; (8003a28 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003972:	e001      	b.n	8003978 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8003974:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003978:	685a      	ldr	r2, [r3, #4]
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	4929      	ldr	r1, [pc, #164]	; (8003a24 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003980:	428b      	cmp	r3, r1
 8003982:	d101      	bne.n	8003988 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8003984:	4b28      	ldr	r3, [pc, #160]	; (8003a28 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003986:	e001      	b.n	800398c <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8003988:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800398c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003990:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	2201      	movs	r2, #1
 8003996:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800399e:	f043 0202 	orr.w	r2, r3, #2
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80039a6:	6878      	ldr	r0, [r7, #4]
 80039a8:	f7ff fdfa 	bl	80035a0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80039ac:	69bb      	ldr	r3, [r7, #24]
 80039ae:	f003 0308 	and.w	r3, r3, #8
 80039b2:	2b08      	cmp	r3, #8
 80039b4:	d131      	bne.n	8003a1a <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 80039b6:	693b      	ldr	r3, [r7, #16]
 80039b8:	f003 0320 	and.w	r3, r3, #32
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d02c      	beq.n	8003a1a <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	4a17      	ldr	r2, [pc, #92]	; (8003a24 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80039c6:	4293      	cmp	r3, r2
 80039c8:	d101      	bne.n	80039ce <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 80039ca:	4b17      	ldr	r3, [pc, #92]	; (8003a28 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80039cc:	e001      	b.n	80039d2 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 80039ce:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80039d2:	685a      	ldr	r2, [r3, #4]
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	4912      	ldr	r1, [pc, #72]	; (8003a24 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80039da:	428b      	cmp	r3, r1
 80039dc:	d101      	bne.n	80039e2 <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 80039de:	4b12      	ldr	r3, [pc, #72]	; (8003a28 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80039e0:	e001      	b.n	80039e6 <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 80039e2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80039e6:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80039ea:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	685a      	ldr	r2, [r3, #4]
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80039fa:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	2201      	movs	r2, #1
 8003a00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a08:	f043 0204 	orr.w	r2, r3, #4
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003a10:	6878      	ldr	r0, [r7, #4]
 8003a12:	f7ff fdc5 	bl	80035a0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003a16:	e000      	b.n	8003a1a <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003a18:	bf00      	nop
}
 8003a1a:	bf00      	nop
 8003a1c:	3720      	adds	r7, #32
 8003a1e:	46bd      	mov	sp, r7
 8003a20:	bd80      	pop	{r7, pc}
 8003a22:	bf00      	nop
 8003a24:	40003800 	.word	0x40003800
 8003a28:	40003400 	.word	0x40003400

08003a2c <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003a2c:	b480      	push	{r7}
 8003a2e:	b083      	sub	sp, #12
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8003a34:	bf00      	nop
 8003a36:	370c      	adds	r7, #12
 8003a38:	46bd      	mov	sp, r7
 8003a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a3e:	4770      	bx	lr

08003a40 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003a40:	b580      	push	{r7, lr}
 8003a42:	b082      	sub	sp, #8
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a4c:	1c99      	adds	r1, r3, #2
 8003a4e:	687a      	ldr	r2, [r7, #4]
 8003a50:	6251      	str	r1, [r2, #36]	; 0x24
 8003a52:	881a      	ldrh	r2, [r3, #0]
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a5e:	b29b      	uxth	r3, r3
 8003a60:	3b01      	subs	r3, #1
 8003a62:	b29a      	uxth	r2, r3
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a6c:	b29b      	uxth	r3, r3
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d113      	bne.n	8003a9a <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	685a      	ldr	r2, [r3, #4]
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003a80:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003a86:	b29b      	uxth	r3, r3
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d106      	bne.n	8003a9a <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	2201      	movs	r2, #1
 8003a90:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003a94:	6878      	ldr	r0, [r7, #4]
 8003a96:	f7ff ffc9 	bl	8003a2c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003a9a:	bf00      	nop
 8003a9c:	3708      	adds	r7, #8
 8003a9e:	46bd      	mov	sp, r7
 8003aa0:	bd80      	pop	{r7, pc}
	...

08003aa4 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003aa4:	b580      	push	{r7, lr}
 8003aa6:	b082      	sub	sp, #8
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ab0:	1c99      	adds	r1, r3, #2
 8003ab2:	687a      	ldr	r2, [r7, #4]
 8003ab4:	6251      	str	r1, [r2, #36]	; 0x24
 8003ab6:	8819      	ldrh	r1, [r3, #0]
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	4a1d      	ldr	r2, [pc, #116]	; (8003b34 <I2SEx_TxISR_I2SExt+0x90>)
 8003abe:	4293      	cmp	r3, r2
 8003ac0:	d101      	bne.n	8003ac6 <I2SEx_TxISR_I2SExt+0x22>
 8003ac2:	4b1d      	ldr	r3, [pc, #116]	; (8003b38 <I2SEx_TxISR_I2SExt+0x94>)
 8003ac4:	e001      	b.n	8003aca <I2SEx_TxISR_I2SExt+0x26>
 8003ac6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003aca:	460a      	mov	r2, r1
 8003acc:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ad2:	b29b      	uxth	r3, r3
 8003ad4:	3b01      	subs	r3, #1
 8003ad6:	b29a      	uxth	r2, r3
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ae0:	b29b      	uxth	r3, r3
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d121      	bne.n	8003b2a <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	4a12      	ldr	r2, [pc, #72]	; (8003b34 <I2SEx_TxISR_I2SExt+0x90>)
 8003aec:	4293      	cmp	r3, r2
 8003aee:	d101      	bne.n	8003af4 <I2SEx_TxISR_I2SExt+0x50>
 8003af0:	4b11      	ldr	r3, [pc, #68]	; (8003b38 <I2SEx_TxISR_I2SExt+0x94>)
 8003af2:	e001      	b.n	8003af8 <I2SEx_TxISR_I2SExt+0x54>
 8003af4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003af8:	685a      	ldr	r2, [r3, #4]
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	490d      	ldr	r1, [pc, #52]	; (8003b34 <I2SEx_TxISR_I2SExt+0x90>)
 8003b00:	428b      	cmp	r3, r1
 8003b02:	d101      	bne.n	8003b08 <I2SEx_TxISR_I2SExt+0x64>
 8003b04:	4b0c      	ldr	r3, [pc, #48]	; (8003b38 <I2SEx_TxISR_I2SExt+0x94>)
 8003b06:	e001      	b.n	8003b0c <I2SEx_TxISR_I2SExt+0x68>
 8003b08:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003b0c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003b10:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003b16:	b29b      	uxth	r3, r3
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d106      	bne.n	8003b2a <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	2201      	movs	r2, #1
 8003b20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003b24:	6878      	ldr	r0, [r7, #4]
 8003b26:	f7ff ff81 	bl	8003a2c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003b2a:	bf00      	nop
 8003b2c:	3708      	adds	r7, #8
 8003b2e:	46bd      	mov	sp, r7
 8003b30:	bd80      	pop	{r7, pc}
 8003b32:	bf00      	nop
 8003b34:	40003800 	.word	0x40003800
 8003b38:	40003400 	.word	0x40003400

08003b3c <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003b3c:	b580      	push	{r7, lr}
 8003b3e:	b082      	sub	sp, #8
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	68d8      	ldr	r0, [r3, #12]
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b4e:	1c99      	adds	r1, r3, #2
 8003b50:	687a      	ldr	r2, [r7, #4]
 8003b52:	62d1      	str	r1, [r2, #44]	; 0x2c
 8003b54:	b282      	uxth	r2, r0
 8003b56:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003b5c:	b29b      	uxth	r3, r3
 8003b5e:	3b01      	subs	r3, #1
 8003b60:	b29a      	uxth	r2, r3
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003b6a:	b29b      	uxth	r3, r3
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d113      	bne.n	8003b98 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	685a      	ldr	r2, [r3, #4]
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003b7e:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b84:	b29b      	uxth	r3, r3
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d106      	bne.n	8003b98 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	2201      	movs	r2, #1
 8003b8e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003b92:	6878      	ldr	r0, [r7, #4]
 8003b94:	f7ff ff4a 	bl	8003a2c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003b98:	bf00      	nop
 8003b9a:	3708      	adds	r7, #8
 8003b9c:	46bd      	mov	sp, r7
 8003b9e:	bd80      	pop	{r7, pc}

08003ba0 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003ba0:	b580      	push	{r7, lr}
 8003ba2:	b082      	sub	sp, #8
 8003ba4:	af00      	add	r7, sp, #0
 8003ba6:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	4a20      	ldr	r2, [pc, #128]	; (8003c30 <I2SEx_RxISR_I2SExt+0x90>)
 8003bae:	4293      	cmp	r3, r2
 8003bb0:	d101      	bne.n	8003bb6 <I2SEx_RxISR_I2SExt+0x16>
 8003bb2:	4b20      	ldr	r3, [pc, #128]	; (8003c34 <I2SEx_RxISR_I2SExt+0x94>)
 8003bb4:	e001      	b.n	8003bba <I2SEx_RxISR_I2SExt+0x1a>
 8003bb6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003bba:	68d8      	ldr	r0, [r3, #12]
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bc0:	1c99      	adds	r1, r3, #2
 8003bc2:	687a      	ldr	r2, [r7, #4]
 8003bc4:	62d1      	str	r1, [r2, #44]	; 0x2c
 8003bc6:	b282      	uxth	r2, r0
 8003bc8:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003bce:	b29b      	uxth	r3, r3
 8003bd0:	3b01      	subs	r3, #1
 8003bd2:	b29a      	uxth	r2, r3
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003bdc:	b29b      	uxth	r3, r3
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d121      	bne.n	8003c26 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	4a12      	ldr	r2, [pc, #72]	; (8003c30 <I2SEx_RxISR_I2SExt+0x90>)
 8003be8:	4293      	cmp	r3, r2
 8003bea:	d101      	bne.n	8003bf0 <I2SEx_RxISR_I2SExt+0x50>
 8003bec:	4b11      	ldr	r3, [pc, #68]	; (8003c34 <I2SEx_RxISR_I2SExt+0x94>)
 8003bee:	e001      	b.n	8003bf4 <I2SEx_RxISR_I2SExt+0x54>
 8003bf0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003bf4:	685a      	ldr	r2, [r3, #4]
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	490d      	ldr	r1, [pc, #52]	; (8003c30 <I2SEx_RxISR_I2SExt+0x90>)
 8003bfc:	428b      	cmp	r3, r1
 8003bfe:	d101      	bne.n	8003c04 <I2SEx_RxISR_I2SExt+0x64>
 8003c00:	4b0c      	ldr	r3, [pc, #48]	; (8003c34 <I2SEx_RxISR_I2SExt+0x94>)
 8003c02:	e001      	b.n	8003c08 <I2SEx_RxISR_I2SExt+0x68>
 8003c04:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003c08:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003c0c:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c12:	b29b      	uxth	r3, r3
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d106      	bne.n	8003c26 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	2201      	movs	r2, #1
 8003c1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003c20:	6878      	ldr	r0, [r7, #4]
 8003c22:	f7ff ff03 	bl	8003a2c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003c26:	bf00      	nop
 8003c28:	3708      	adds	r7, #8
 8003c2a:	46bd      	mov	sp, r7
 8003c2c:	bd80      	pop	{r7, pc}
 8003c2e:	bf00      	nop
 8003c30:	40003800 	.word	0x40003800
 8003c34:	40003400 	.word	0x40003400

08003c38 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003c38:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003c3a:	b08f      	sub	sp, #60	; 0x3c
 8003c3c:	af0a      	add	r7, sp, #40	; 0x28
 8003c3e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d101      	bne.n	8003c4a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003c46:	2301      	movs	r3, #1
 8003c48:	e118      	b.n	8003e7c <HAL_PCD_Init+0x244>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003c52:	d003      	beq.n	8003c5c <HAL_PCD_Init+0x24>
 8003c54:	2187      	movs	r1, #135	; 0x87
 8003c56:	488b      	ldr	r0, [pc, #556]	; (8003e84 <HAL_PCD_Init+0x24c>)
 8003c58:	f7fd fd0b 	bl	8001672 <assert_failed>

  USBx = hpcd->Instance;
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8003c68:	b2db      	uxtb	r3, r3
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d106      	bne.n	8003c7c <HAL_PCD_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	2200      	movs	r2, #0
 8003c72:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003c76:	6878      	ldr	r0, [r7, #4]
 8003c78:	f006 ff80 	bl	800ab7c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	2203      	movs	r2, #3
 8003c80:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003c84:	68bb      	ldr	r3, [r7, #8]
 8003c86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d102      	bne.n	8003c96 <HAL_PCD_Init+0x5e>
  {
    hpcd->Init.dma_enable = 0U;
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	2200      	movs	r2, #0
 8003c94:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	4618      	mov	r0, r3
 8003c9c:	f003 ff79 	bl	8007b92 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	603b      	str	r3, [r7, #0]
 8003ca6:	687e      	ldr	r6, [r7, #4]
 8003ca8:	466d      	mov	r5, sp
 8003caa:	f106 0410 	add.w	r4, r6, #16
 8003cae:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003cb0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003cb2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003cb4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003cb6:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003cba:	e885 0003 	stmia.w	r5, {r0, r1}
 8003cbe:	1d33      	adds	r3, r6, #4
 8003cc0:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003cc2:	6838      	ldr	r0, [r7, #0]
 8003cc4:	f003 fe50 	bl	8007968 <USB_CoreInit>
 8003cc8:	4603      	mov	r3, r0
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d005      	beq.n	8003cda <HAL_PCD_Init+0xa2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	2202      	movs	r2, #2
 8003cd2:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8003cd6:	2301      	movs	r3, #1
 8003cd8:	e0d0      	b.n	8003e7c <HAL_PCD_Init+0x244>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	2100      	movs	r1, #0
 8003ce0:	4618      	mov	r0, r3
 8003ce2:	f003 ff67 	bl	8007bb4 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003ce6:	2300      	movs	r3, #0
 8003ce8:	73fb      	strb	r3, [r7, #15]
 8003cea:	e04a      	b.n	8003d82 <HAL_PCD_Init+0x14a>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003cec:	7bfa      	ldrb	r2, [r7, #15]
 8003cee:	6879      	ldr	r1, [r7, #4]
 8003cf0:	4613      	mov	r3, r2
 8003cf2:	00db      	lsls	r3, r3, #3
 8003cf4:	1a9b      	subs	r3, r3, r2
 8003cf6:	009b      	lsls	r3, r3, #2
 8003cf8:	440b      	add	r3, r1
 8003cfa:	333d      	adds	r3, #61	; 0x3d
 8003cfc:	2201      	movs	r2, #1
 8003cfe:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003d00:	7bfa      	ldrb	r2, [r7, #15]
 8003d02:	6879      	ldr	r1, [r7, #4]
 8003d04:	4613      	mov	r3, r2
 8003d06:	00db      	lsls	r3, r3, #3
 8003d08:	1a9b      	subs	r3, r3, r2
 8003d0a:	009b      	lsls	r3, r3, #2
 8003d0c:	440b      	add	r3, r1
 8003d0e:	333c      	adds	r3, #60	; 0x3c
 8003d10:	7bfa      	ldrb	r2, [r7, #15]
 8003d12:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003d14:	7bfa      	ldrb	r2, [r7, #15]
 8003d16:	7bfb      	ldrb	r3, [r7, #15]
 8003d18:	b298      	uxth	r0, r3
 8003d1a:	6879      	ldr	r1, [r7, #4]
 8003d1c:	4613      	mov	r3, r2
 8003d1e:	00db      	lsls	r3, r3, #3
 8003d20:	1a9b      	subs	r3, r3, r2
 8003d22:	009b      	lsls	r3, r3, #2
 8003d24:	440b      	add	r3, r1
 8003d26:	3342      	adds	r3, #66	; 0x42
 8003d28:	4602      	mov	r2, r0
 8003d2a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003d2c:	7bfa      	ldrb	r2, [r7, #15]
 8003d2e:	6879      	ldr	r1, [r7, #4]
 8003d30:	4613      	mov	r3, r2
 8003d32:	00db      	lsls	r3, r3, #3
 8003d34:	1a9b      	subs	r3, r3, r2
 8003d36:	009b      	lsls	r3, r3, #2
 8003d38:	440b      	add	r3, r1
 8003d3a:	333f      	adds	r3, #63	; 0x3f
 8003d3c:	2200      	movs	r2, #0
 8003d3e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003d40:	7bfa      	ldrb	r2, [r7, #15]
 8003d42:	6879      	ldr	r1, [r7, #4]
 8003d44:	4613      	mov	r3, r2
 8003d46:	00db      	lsls	r3, r3, #3
 8003d48:	1a9b      	subs	r3, r3, r2
 8003d4a:	009b      	lsls	r3, r3, #2
 8003d4c:	440b      	add	r3, r1
 8003d4e:	3344      	adds	r3, #68	; 0x44
 8003d50:	2200      	movs	r2, #0
 8003d52:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003d54:	7bfa      	ldrb	r2, [r7, #15]
 8003d56:	6879      	ldr	r1, [r7, #4]
 8003d58:	4613      	mov	r3, r2
 8003d5a:	00db      	lsls	r3, r3, #3
 8003d5c:	1a9b      	subs	r3, r3, r2
 8003d5e:	009b      	lsls	r3, r3, #2
 8003d60:	440b      	add	r3, r1
 8003d62:	3348      	adds	r3, #72	; 0x48
 8003d64:	2200      	movs	r2, #0
 8003d66:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003d68:	7bfa      	ldrb	r2, [r7, #15]
 8003d6a:	6879      	ldr	r1, [r7, #4]
 8003d6c:	4613      	mov	r3, r2
 8003d6e:	00db      	lsls	r3, r3, #3
 8003d70:	1a9b      	subs	r3, r3, r2
 8003d72:	009b      	lsls	r3, r3, #2
 8003d74:	440b      	add	r3, r1
 8003d76:	3350      	adds	r3, #80	; 0x50
 8003d78:	2200      	movs	r2, #0
 8003d7a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003d7c:	7bfb      	ldrb	r3, [r7, #15]
 8003d7e:	3301      	adds	r3, #1
 8003d80:	73fb      	strb	r3, [r7, #15]
 8003d82:	7bfa      	ldrb	r2, [r7, #15]
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	685b      	ldr	r3, [r3, #4]
 8003d88:	429a      	cmp	r2, r3
 8003d8a:	d3af      	bcc.n	8003cec <HAL_PCD_Init+0xb4>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003d8c:	2300      	movs	r3, #0
 8003d8e:	73fb      	strb	r3, [r7, #15]
 8003d90:	e044      	b.n	8003e1c <HAL_PCD_Init+0x1e4>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003d92:	7bfa      	ldrb	r2, [r7, #15]
 8003d94:	6879      	ldr	r1, [r7, #4]
 8003d96:	4613      	mov	r3, r2
 8003d98:	00db      	lsls	r3, r3, #3
 8003d9a:	1a9b      	subs	r3, r3, r2
 8003d9c:	009b      	lsls	r3, r3, #2
 8003d9e:	440b      	add	r3, r1
 8003da0:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8003da4:	2200      	movs	r2, #0
 8003da6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003da8:	7bfa      	ldrb	r2, [r7, #15]
 8003daa:	6879      	ldr	r1, [r7, #4]
 8003dac:	4613      	mov	r3, r2
 8003dae:	00db      	lsls	r3, r3, #3
 8003db0:	1a9b      	subs	r3, r3, r2
 8003db2:	009b      	lsls	r3, r3, #2
 8003db4:	440b      	add	r3, r1
 8003db6:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8003dba:	7bfa      	ldrb	r2, [r7, #15]
 8003dbc:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003dbe:	7bfa      	ldrb	r2, [r7, #15]
 8003dc0:	6879      	ldr	r1, [r7, #4]
 8003dc2:	4613      	mov	r3, r2
 8003dc4:	00db      	lsls	r3, r3, #3
 8003dc6:	1a9b      	subs	r3, r3, r2
 8003dc8:	009b      	lsls	r3, r3, #2
 8003dca:	440b      	add	r3, r1
 8003dcc:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8003dd0:	2200      	movs	r2, #0
 8003dd2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003dd4:	7bfa      	ldrb	r2, [r7, #15]
 8003dd6:	6879      	ldr	r1, [r7, #4]
 8003dd8:	4613      	mov	r3, r2
 8003dda:	00db      	lsls	r3, r3, #3
 8003ddc:	1a9b      	subs	r3, r3, r2
 8003dde:	009b      	lsls	r3, r3, #2
 8003de0:	440b      	add	r3, r1
 8003de2:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8003de6:	2200      	movs	r2, #0
 8003de8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003dea:	7bfa      	ldrb	r2, [r7, #15]
 8003dec:	6879      	ldr	r1, [r7, #4]
 8003dee:	4613      	mov	r3, r2
 8003df0:	00db      	lsls	r3, r3, #3
 8003df2:	1a9b      	subs	r3, r3, r2
 8003df4:	009b      	lsls	r3, r3, #2
 8003df6:	440b      	add	r3, r1
 8003df8:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003dfc:	2200      	movs	r2, #0
 8003dfe:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003e00:	7bfa      	ldrb	r2, [r7, #15]
 8003e02:	6879      	ldr	r1, [r7, #4]
 8003e04:	4613      	mov	r3, r2
 8003e06:	00db      	lsls	r3, r3, #3
 8003e08:	1a9b      	subs	r3, r3, r2
 8003e0a:	009b      	lsls	r3, r3, #2
 8003e0c:	440b      	add	r3, r1
 8003e0e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8003e12:	2200      	movs	r2, #0
 8003e14:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003e16:	7bfb      	ldrb	r3, [r7, #15]
 8003e18:	3301      	adds	r3, #1
 8003e1a:	73fb      	strb	r3, [r7, #15]
 8003e1c:	7bfa      	ldrb	r2, [r7, #15]
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	685b      	ldr	r3, [r3, #4]
 8003e22:	429a      	cmp	r2, r3
 8003e24:	d3b5      	bcc.n	8003d92 <HAL_PCD_Init+0x15a>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	603b      	str	r3, [r7, #0]
 8003e2c:	687e      	ldr	r6, [r7, #4]
 8003e2e:	466d      	mov	r5, sp
 8003e30:	f106 0410 	add.w	r4, r6, #16
 8003e34:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003e36:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003e38:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003e3a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003e3c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003e40:	e885 0003 	stmia.w	r5, {r0, r1}
 8003e44:	1d33      	adds	r3, r6, #4
 8003e46:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003e48:	6838      	ldr	r0, [r7, #0]
 8003e4a:	f003 fedd 	bl	8007c08 <USB_DevInit>
 8003e4e:	4603      	mov	r3, r0
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d005      	beq.n	8003e60 <HAL_PCD_Init+0x228>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	2202      	movs	r2, #2
 8003e58:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8003e5c:	2301      	movs	r3, #1
 8003e5e:	e00d      	b.n	8003e7c <HAL_PCD_Init+0x244>
  }

  hpcd->USB_Address = 0U;
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	2200      	movs	r2, #0
 8003e64:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	2201      	movs	r2, #1
 8003e6c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	4618      	mov	r0, r3
 8003e76:	f004 ff25 	bl	8008cc4 <USB_DevDisconnect>

  return HAL_OK;
 8003e7a:	2300      	movs	r3, #0
}
 8003e7c:	4618      	mov	r0, r3
 8003e7e:	3714      	adds	r7, #20
 8003e80:	46bd      	mov	sp, r7
 8003e82:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003e84:	0800dd50 	.word	0x0800dd50

08003e88 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003e88:	b580      	push	{r7, lr}
 8003e8a:	b084      	sub	sp, #16
 8003e8c:	af00      	add	r7, sp, #0
 8003e8e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003e9c:	2b01      	cmp	r3, #1
 8003e9e:	d101      	bne.n	8003ea4 <HAL_PCD_Start+0x1c>
 8003ea0:	2302      	movs	r3, #2
 8003ea2:	e020      	b.n	8003ee6 <HAL_PCD_Start+0x5e>
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	2201      	movs	r2, #1
 8003ea8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003eb0:	2b01      	cmp	r3, #1
 8003eb2:	d109      	bne.n	8003ec8 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8003eb8:	2b01      	cmp	r3, #1
 8003eba:	d005      	beq.n	8003ec8 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ec0:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	4618      	mov	r0, r3
 8003ece:	f003 fe4f 	bl	8007b70 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	4618      	mov	r0, r3
 8003ed8:	f004 fed3 	bl	8008c82 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	2200      	movs	r2, #0
 8003ee0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003ee4:	2300      	movs	r3, #0
}
 8003ee6:	4618      	mov	r0, r3
 8003ee8:	3710      	adds	r7, #16
 8003eea:	46bd      	mov	sp, r7
 8003eec:	bd80      	pop	{r7, pc}

08003eee <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003eee:	b590      	push	{r4, r7, lr}
 8003ef0:	b08d      	sub	sp, #52	; 0x34
 8003ef2:	af00      	add	r7, sp, #0
 8003ef4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003efc:	6a3b      	ldr	r3, [r7, #32]
 8003efe:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	4618      	mov	r0, r3
 8003f06:	f004 ff91 	bl	8008e2c <USB_GetMode>
 8003f0a:	4603      	mov	r3, r0
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	f040 839d 	bne.w	800464c <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	4618      	mov	r0, r3
 8003f18:	f004 fef5 	bl	8008d06 <USB_ReadInterrupts>
 8003f1c:	4603      	mov	r3, r0
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	f000 8393 	beq.w	800464a <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	4618      	mov	r0, r3
 8003f2a:	f004 feec 	bl	8008d06 <USB_ReadInterrupts>
 8003f2e:	4603      	mov	r3, r0
 8003f30:	f003 0302 	and.w	r3, r3, #2
 8003f34:	2b02      	cmp	r3, #2
 8003f36:	d107      	bne.n	8003f48 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	695a      	ldr	r2, [r3, #20]
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	f002 0202 	and.w	r2, r2, #2
 8003f46:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	4618      	mov	r0, r3
 8003f4e:	f004 feda 	bl	8008d06 <USB_ReadInterrupts>
 8003f52:	4603      	mov	r3, r0
 8003f54:	f003 0310 	and.w	r3, r3, #16
 8003f58:	2b10      	cmp	r3, #16
 8003f5a:	d161      	bne.n	8004020 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	699a      	ldr	r2, [r3, #24]
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	f022 0210 	bic.w	r2, r2, #16
 8003f6a:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8003f6c:	6a3b      	ldr	r3, [r7, #32]
 8003f6e:	6a1b      	ldr	r3, [r3, #32]
 8003f70:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8003f72:	69bb      	ldr	r3, [r7, #24]
 8003f74:	f003 020f 	and.w	r2, r3, #15
 8003f78:	4613      	mov	r3, r2
 8003f7a:	00db      	lsls	r3, r3, #3
 8003f7c:	1a9b      	subs	r3, r3, r2
 8003f7e:	009b      	lsls	r3, r3, #2
 8003f80:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003f84:	687a      	ldr	r2, [r7, #4]
 8003f86:	4413      	add	r3, r2
 8003f88:	3304      	adds	r3, #4
 8003f8a:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8003f8c:	69bb      	ldr	r3, [r7, #24]
 8003f8e:	0c5b      	lsrs	r3, r3, #17
 8003f90:	f003 030f 	and.w	r3, r3, #15
 8003f94:	2b02      	cmp	r3, #2
 8003f96:	d124      	bne.n	8003fe2 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8003f98:	69ba      	ldr	r2, [r7, #24]
 8003f9a:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8003f9e:	4013      	ands	r3, r2
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d035      	beq.n	8004010 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003fa4:	697b      	ldr	r3, [r7, #20]
 8003fa6:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8003fa8:	69bb      	ldr	r3, [r7, #24]
 8003faa:	091b      	lsrs	r3, r3, #4
 8003fac:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003fae:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003fb2:	b29b      	uxth	r3, r3
 8003fb4:	461a      	mov	r2, r3
 8003fb6:	6a38      	ldr	r0, [r7, #32]
 8003fb8:	f004 fd40 	bl	8008a3c <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003fbc:	697b      	ldr	r3, [r7, #20]
 8003fbe:	68da      	ldr	r2, [r3, #12]
 8003fc0:	69bb      	ldr	r3, [r7, #24]
 8003fc2:	091b      	lsrs	r3, r3, #4
 8003fc4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003fc8:	441a      	add	r2, r3
 8003fca:	697b      	ldr	r3, [r7, #20]
 8003fcc:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003fce:	697b      	ldr	r3, [r7, #20]
 8003fd0:	699a      	ldr	r2, [r3, #24]
 8003fd2:	69bb      	ldr	r3, [r7, #24]
 8003fd4:	091b      	lsrs	r3, r3, #4
 8003fd6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003fda:	441a      	add	r2, r3
 8003fdc:	697b      	ldr	r3, [r7, #20]
 8003fde:	619a      	str	r2, [r3, #24]
 8003fe0:	e016      	b.n	8004010 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8003fe2:	69bb      	ldr	r3, [r7, #24]
 8003fe4:	0c5b      	lsrs	r3, r3, #17
 8003fe6:	f003 030f 	and.w	r3, r3, #15
 8003fea:	2b06      	cmp	r3, #6
 8003fec:	d110      	bne.n	8004010 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003ff4:	2208      	movs	r2, #8
 8003ff6:	4619      	mov	r1, r3
 8003ff8:	6a38      	ldr	r0, [r7, #32]
 8003ffa:	f004 fd1f 	bl	8008a3c <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003ffe:	697b      	ldr	r3, [r7, #20]
 8004000:	699a      	ldr	r2, [r3, #24]
 8004002:	69bb      	ldr	r3, [r7, #24]
 8004004:	091b      	lsrs	r3, r3, #4
 8004006:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800400a:	441a      	add	r2, r3
 800400c:	697b      	ldr	r3, [r7, #20]
 800400e:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	699a      	ldr	r2, [r3, #24]
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	f042 0210 	orr.w	r2, r2, #16
 800401e:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	4618      	mov	r0, r3
 8004026:	f004 fe6e 	bl	8008d06 <USB_ReadInterrupts>
 800402a:	4603      	mov	r3, r0
 800402c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004030:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004034:	d16e      	bne.n	8004114 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8004036:	2300      	movs	r3, #0
 8004038:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	4618      	mov	r0, r3
 8004040:	f004 fe74 	bl	8008d2c <USB_ReadDevAllOutEpInterrupt>
 8004044:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8004046:	e062      	b.n	800410e <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8004048:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800404a:	f003 0301 	and.w	r3, r3, #1
 800404e:	2b00      	cmp	r3, #0
 8004050:	d057      	beq.n	8004102 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004058:	b2d2      	uxtb	r2, r2
 800405a:	4611      	mov	r1, r2
 800405c:	4618      	mov	r0, r3
 800405e:	f004 fe99 	bl	8008d94 <USB_ReadDevOutEPInterrupt>
 8004062:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8004064:	693b      	ldr	r3, [r7, #16]
 8004066:	f003 0301 	and.w	r3, r3, #1
 800406a:	2b00      	cmp	r3, #0
 800406c:	d00c      	beq.n	8004088 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800406e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004070:	015a      	lsls	r2, r3, #5
 8004072:	69fb      	ldr	r3, [r7, #28]
 8004074:	4413      	add	r3, r2
 8004076:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800407a:	461a      	mov	r2, r3
 800407c:	2301      	movs	r3, #1
 800407e:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8004080:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004082:	6878      	ldr	r0, [r7, #4]
 8004084:	f000 fdb0 	bl	8004be8 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8004088:	693b      	ldr	r3, [r7, #16]
 800408a:	f003 0308 	and.w	r3, r3, #8
 800408e:	2b00      	cmp	r3, #0
 8004090:	d00c      	beq.n	80040ac <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8004092:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004094:	015a      	lsls	r2, r3, #5
 8004096:	69fb      	ldr	r3, [r7, #28]
 8004098:	4413      	add	r3, r2
 800409a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800409e:	461a      	mov	r2, r3
 80040a0:	2308      	movs	r3, #8
 80040a2:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80040a4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80040a6:	6878      	ldr	r0, [r7, #4]
 80040a8:	f000 feaa 	bl	8004e00 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80040ac:	693b      	ldr	r3, [r7, #16]
 80040ae:	f003 0310 	and.w	r3, r3, #16
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d008      	beq.n	80040c8 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80040b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040b8:	015a      	lsls	r2, r3, #5
 80040ba:	69fb      	ldr	r3, [r7, #28]
 80040bc:	4413      	add	r3, r2
 80040be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040c2:	461a      	mov	r2, r3
 80040c4:	2310      	movs	r3, #16
 80040c6:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80040c8:	693b      	ldr	r3, [r7, #16]
 80040ca:	f003 0320 	and.w	r3, r3, #32
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d008      	beq.n	80040e4 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80040d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040d4:	015a      	lsls	r2, r3, #5
 80040d6:	69fb      	ldr	r3, [r7, #28]
 80040d8:	4413      	add	r3, r2
 80040da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040de:	461a      	mov	r2, r3
 80040e0:	2320      	movs	r3, #32
 80040e2:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80040e4:	693b      	ldr	r3, [r7, #16]
 80040e6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d009      	beq.n	8004102 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80040ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040f0:	015a      	lsls	r2, r3, #5
 80040f2:	69fb      	ldr	r3, [r7, #28]
 80040f4:	4413      	add	r3, r2
 80040f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040fa:	461a      	mov	r2, r3
 80040fc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004100:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8004102:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004104:	3301      	adds	r3, #1
 8004106:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8004108:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800410a:	085b      	lsrs	r3, r3, #1
 800410c:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800410e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004110:	2b00      	cmp	r3, #0
 8004112:	d199      	bne.n	8004048 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	4618      	mov	r0, r3
 800411a:	f004 fdf4 	bl	8008d06 <USB_ReadInterrupts>
 800411e:	4603      	mov	r3, r0
 8004120:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004124:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004128:	f040 80c0 	bne.w	80042ac <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	4618      	mov	r0, r3
 8004132:	f004 fe15 	bl	8008d60 <USB_ReadDevAllInEpInterrupt>
 8004136:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8004138:	2300      	movs	r3, #0
 800413a:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800413c:	e0b2      	b.n	80042a4 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800413e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004140:	f003 0301 	and.w	r3, r3, #1
 8004144:	2b00      	cmp	r3, #0
 8004146:	f000 80a7 	beq.w	8004298 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004150:	b2d2      	uxtb	r2, r2
 8004152:	4611      	mov	r1, r2
 8004154:	4618      	mov	r0, r3
 8004156:	f004 fe3b 	bl	8008dd0 <USB_ReadDevInEPInterrupt>
 800415a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800415c:	693b      	ldr	r3, [r7, #16]
 800415e:	f003 0301 	and.w	r3, r3, #1
 8004162:	2b00      	cmp	r3, #0
 8004164:	d057      	beq.n	8004216 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004166:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004168:	f003 030f 	and.w	r3, r3, #15
 800416c:	2201      	movs	r2, #1
 800416e:	fa02 f303 	lsl.w	r3, r2, r3
 8004172:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004174:	69fb      	ldr	r3, [r7, #28]
 8004176:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800417a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	43db      	mvns	r3, r3
 8004180:	69f9      	ldr	r1, [r7, #28]
 8004182:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004186:	4013      	ands	r3, r2
 8004188:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800418a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800418c:	015a      	lsls	r2, r3, #5
 800418e:	69fb      	ldr	r3, [r7, #28]
 8004190:	4413      	add	r3, r2
 8004192:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004196:	461a      	mov	r2, r3
 8004198:	2301      	movs	r3, #1
 800419a:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	691b      	ldr	r3, [r3, #16]
 80041a0:	2b01      	cmp	r3, #1
 80041a2:	d132      	bne.n	800420a <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80041a4:	6879      	ldr	r1, [r7, #4]
 80041a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80041a8:	4613      	mov	r3, r2
 80041aa:	00db      	lsls	r3, r3, #3
 80041ac:	1a9b      	subs	r3, r3, r2
 80041ae:	009b      	lsls	r3, r3, #2
 80041b0:	440b      	add	r3, r1
 80041b2:	3348      	adds	r3, #72	; 0x48
 80041b4:	6819      	ldr	r1, [r3, #0]
 80041b6:	6878      	ldr	r0, [r7, #4]
 80041b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80041ba:	4613      	mov	r3, r2
 80041bc:	00db      	lsls	r3, r3, #3
 80041be:	1a9b      	subs	r3, r3, r2
 80041c0:	009b      	lsls	r3, r3, #2
 80041c2:	4403      	add	r3, r0
 80041c4:	3344      	adds	r3, #68	; 0x44
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	4419      	add	r1, r3
 80041ca:	6878      	ldr	r0, [r7, #4]
 80041cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80041ce:	4613      	mov	r3, r2
 80041d0:	00db      	lsls	r3, r3, #3
 80041d2:	1a9b      	subs	r3, r3, r2
 80041d4:	009b      	lsls	r3, r3, #2
 80041d6:	4403      	add	r3, r0
 80041d8:	3348      	adds	r3, #72	; 0x48
 80041da:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80041dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d113      	bne.n	800420a <HAL_PCD_IRQHandler+0x31c>
 80041e2:	6879      	ldr	r1, [r7, #4]
 80041e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80041e6:	4613      	mov	r3, r2
 80041e8:	00db      	lsls	r3, r3, #3
 80041ea:	1a9b      	subs	r3, r3, r2
 80041ec:	009b      	lsls	r3, r3, #2
 80041ee:	440b      	add	r3, r1
 80041f0:	3350      	adds	r3, #80	; 0x50
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d108      	bne.n	800420a <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	6818      	ldr	r0, [r3, #0]
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004202:	461a      	mov	r2, r3
 8004204:	2101      	movs	r1, #1
 8004206:	f004 fe43 	bl	8008e90 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800420a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800420c:	b2db      	uxtb	r3, r3
 800420e:	4619      	mov	r1, r3
 8004210:	6878      	ldr	r0, [r7, #4]
 8004212:	f006 fd42 	bl	800ac9a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8004216:	693b      	ldr	r3, [r7, #16]
 8004218:	f003 0308 	and.w	r3, r3, #8
 800421c:	2b00      	cmp	r3, #0
 800421e:	d008      	beq.n	8004232 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8004220:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004222:	015a      	lsls	r2, r3, #5
 8004224:	69fb      	ldr	r3, [r7, #28]
 8004226:	4413      	add	r3, r2
 8004228:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800422c:	461a      	mov	r2, r3
 800422e:	2308      	movs	r3, #8
 8004230:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8004232:	693b      	ldr	r3, [r7, #16]
 8004234:	f003 0310 	and.w	r3, r3, #16
 8004238:	2b00      	cmp	r3, #0
 800423a:	d008      	beq.n	800424e <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800423c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800423e:	015a      	lsls	r2, r3, #5
 8004240:	69fb      	ldr	r3, [r7, #28]
 8004242:	4413      	add	r3, r2
 8004244:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004248:	461a      	mov	r2, r3
 800424a:	2310      	movs	r3, #16
 800424c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800424e:	693b      	ldr	r3, [r7, #16]
 8004250:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004254:	2b00      	cmp	r3, #0
 8004256:	d008      	beq.n	800426a <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8004258:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800425a:	015a      	lsls	r2, r3, #5
 800425c:	69fb      	ldr	r3, [r7, #28]
 800425e:	4413      	add	r3, r2
 8004260:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004264:	461a      	mov	r2, r3
 8004266:	2340      	movs	r3, #64	; 0x40
 8004268:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800426a:	693b      	ldr	r3, [r7, #16]
 800426c:	f003 0302 	and.w	r3, r3, #2
 8004270:	2b00      	cmp	r3, #0
 8004272:	d008      	beq.n	8004286 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8004274:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004276:	015a      	lsls	r2, r3, #5
 8004278:	69fb      	ldr	r3, [r7, #28]
 800427a:	4413      	add	r3, r2
 800427c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004280:	461a      	mov	r2, r3
 8004282:	2302      	movs	r3, #2
 8004284:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8004286:	693b      	ldr	r3, [r7, #16]
 8004288:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800428c:	2b00      	cmp	r3, #0
 800428e:	d003      	beq.n	8004298 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8004290:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004292:	6878      	ldr	r0, [r7, #4]
 8004294:	f000 fc1b 	bl	8004ace <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8004298:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800429a:	3301      	adds	r3, #1
 800429c:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800429e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042a0:	085b      	lsrs	r3, r3, #1
 80042a2:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80042a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	f47f af49 	bne.w	800413e <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	4618      	mov	r0, r3
 80042b2:	f004 fd28 	bl	8008d06 <USB_ReadInterrupts>
 80042b6:	4603      	mov	r3, r0
 80042b8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80042bc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80042c0:	d122      	bne.n	8004308 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80042c2:	69fb      	ldr	r3, [r7, #28]
 80042c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80042c8:	685b      	ldr	r3, [r3, #4]
 80042ca:	69fa      	ldr	r2, [r7, #28]
 80042cc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80042d0:	f023 0301 	bic.w	r3, r3, #1
 80042d4:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 80042dc:	2b01      	cmp	r3, #1
 80042de:	d108      	bne.n	80042f2 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	2200      	movs	r2, #0
 80042e4:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80042e8:	2100      	movs	r1, #0
 80042ea:	6878      	ldr	r0, [r7, #4]
 80042ec:	f000 fe26 	bl	8004f3c <HAL_PCDEx_LPM_Callback>
 80042f0:	e002      	b.n	80042f8 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80042f2:	6878      	ldr	r0, [r7, #4]
 80042f4:	f006 fd3e 	bl	800ad74 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	695a      	ldr	r2, [r3, #20]
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8004306:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	4618      	mov	r0, r3
 800430e:	f004 fcfa 	bl	8008d06 <USB_ReadInterrupts>
 8004312:	4603      	mov	r3, r0
 8004314:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004318:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800431c:	d112      	bne.n	8004344 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800431e:	69fb      	ldr	r3, [r7, #28]
 8004320:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004324:	689b      	ldr	r3, [r3, #8]
 8004326:	f003 0301 	and.w	r3, r3, #1
 800432a:	2b01      	cmp	r3, #1
 800432c:	d102      	bne.n	8004334 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800432e:	6878      	ldr	r0, [r7, #4]
 8004330:	f006 fcfa 	bl	800ad28 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	695a      	ldr	r2, [r3, #20]
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8004342:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	4618      	mov	r0, r3
 800434a:	f004 fcdc 	bl	8008d06 <USB_ReadInterrupts>
 800434e:	4603      	mov	r3, r0
 8004350:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004354:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004358:	f040 80c7 	bne.w	80044ea <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800435c:	69fb      	ldr	r3, [r7, #28]
 800435e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004362:	685b      	ldr	r3, [r3, #4]
 8004364:	69fa      	ldr	r2, [r7, #28]
 8004366:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800436a:	f023 0301 	bic.w	r3, r3, #1
 800436e:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	2110      	movs	r1, #16
 8004376:	4618      	mov	r0, r3
 8004378:	f003 fdaa 	bl	8007ed0 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800437c:	2300      	movs	r3, #0
 800437e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004380:	e056      	b.n	8004430 <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8004382:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004384:	015a      	lsls	r2, r3, #5
 8004386:	69fb      	ldr	r3, [r7, #28]
 8004388:	4413      	add	r3, r2
 800438a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800438e:	461a      	mov	r2, r3
 8004390:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004394:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8004396:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004398:	015a      	lsls	r2, r3, #5
 800439a:	69fb      	ldr	r3, [r7, #28]
 800439c:	4413      	add	r3, r2
 800439e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80043a6:	0151      	lsls	r1, r2, #5
 80043a8:	69fa      	ldr	r2, [r7, #28]
 80043aa:	440a      	add	r2, r1
 80043ac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80043b0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80043b4:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80043b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043b8:	015a      	lsls	r2, r3, #5
 80043ba:	69fb      	ldr	r3, [r7, #28]
 80043bc:	4413      	add	r3, r2
 80043be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80043c6:	0151      	lsls	r1, r2, #5
 80043c8:	69fa      	ldr	r2, [r7, #28]
 80043ca:	440a      	add	r2, r1
 80043cc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80043d0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80043d4:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80043d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043d8:	015a      	lsls	r2, r3, #5
 80043da:	69fb      	ldr	r3, [r7, #28]
 80043dc:	4413      	add	r3, r2
 80043de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043e2:	461a      	mov	r2, r3
 80043e4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80043e8:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80043ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043ec:	015a      	lsls	r2, r3, #5
 80043ee:	69fb      	ldr	r3, [r7, #28]
 80043f0:	4413      	add	r3, r2
 80043f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80043fa:	0151      	lsls	r1, r2, #5
 80043fc:	69fa      	ldr	r2, [r7, #28]
 80043fe:	440a      	add	r2, r1
 8004400:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004404:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004408:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800440a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800440c:	015a      	lsls	r2, r3, #5
 800440e:	69fb      	ldr	r3, [r7, #28]
 8004410:	4413      	add	r3, r2
 8004412:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800441a:	0151      	lsls	r1, r2, #5
 800441c:	69fa      	ldr	r2, [r7, #28]
 800441e:	440a      	add	r2, r1
 8004420:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004424:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004428:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800442a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800442c:	3301      	adds	r3, #1
 800442e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	685b      	ldr	r3, [r3, #4]
 8004434:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004436:	429a      	cmp	r2, r3
 8004438:	d3a3      	bcc.n	8004382 <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800443a:	69fb      	ldr	r3, [r7, #28]
 800443c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004440:	69db      	ldr	r3, [r3, #28]
 8004442:	69fa      	ldr	r2, [r7, #28]
 8004444:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004448:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800444c:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004452:	2b00      	cmp	r3, #0
 8004454:	d016      	beq.n	8004484 <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8004456:	69fb      	ldr	r3, [r7, #28]
 8004458:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800445c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004460:	69fa      	ldr	r2, [r7, #28]
 8004462:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004466:	f043 030b 	orr.w	r3, r3, #11
 800446a:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800446e:	69fb      	ldr	r3, [r7, #28]
 8004470:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004474:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004476:	69fa      	ldr	r2, [r7, #28]
 8004478:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800447c:	f043 030b 	orr.w	r3, r3, #11
 8004480:	6453      	str	r3, [r2, #68]	; 0x44
 8004482:	e015      	b.n	80044b0 <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8004484:	69fb      	ldr	r3, [r7, #28]
 8004486:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800448a:	695b      	ldr	r3, [r3, #20]
 800448c:	69fa      	ldr	r2, [r7, #28]
 800448e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004492:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004496:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 800449a:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800449c:	69fb      	ldr	r3, [r7, #28]
 800449e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80044a2:	691b      	ldr	r3, [r3, #16]
 80044a4:	69fa      	ldr	r2, [r7, #28]
 80044a6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80044aa:	f043 030b 	orr.w	r3, r3, #11
 80044ae:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80044b0:	69fb      	ldr	r3, [r7, #28]
 80044b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	69fa      	ldr	r2, [r7, #28]
 80044ba:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80044be:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80044c2:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	6818      	ldr	r0, [r3, #0]
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	691b      	ldr	r3, [r3, #16]
 80044cc:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80044d4:	461a      	mov	r2, r3
 80044d6:	f004 fcdb 	bl	8008e90 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	695a      	ldr	r2, [r3, #20]
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80044e8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	4618      	mov	r0, r3
 80044f0:	f004 fc09 	bl	8008d06 <USB_ReadInterrupts>
 80044f4:	4603      	mov	r3, r0
 80044f6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80044fa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80044fe:	d124      	bne.n	800454a <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	4618      	mov	r0, r3
 8004506:	f004 fc9f 	bl	8008e48 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	4618      	mov	r0, r3
 8004510:	f003 fd3f 	bl	8007f92 <USB_GetDevSpeed>
 8004514:	4603      	mov	r3, r0
 8004516:	461a      	mov	r2, r3
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681c      	ldr	r4, [r3, #0]
 8004520:	f001 fa9e 	bl	8005a60 <HAL_RCC_GetHCLKFreq>
 8004524:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800452a:	b2db      	uxtb	r3, r3
 800452c:	461a      	mov	r2, r3
 800452e:	4620      	mov	r0, r4
 8004530:	f003 fa7c 	bl	8007a2c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8004534:	6878      	ldr	r0, [r7, #4]
 8004536:	f006 fbd8 	bl	800acea <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	695a      	ldr	r2, [r3, #20]
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8004548:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	4618      	mov	r0, r3
 8004550:	f004 fbd9 	bl	8008d06 <USB_ReadInterrupts>
 8004554:	4603      	mov	r3, r0
 8004556:	f003 0308 	and.w	r3, r3, #8
 800455a:	2b08      	cmp	r3, #8
 800455c:	d10a      	bne.n	8004574 <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800455e:	6878      	ldr	r0, [r7, #4]
 8004560:	f006 fbb5 	bl	800acce <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	695a      	ldr	r2, [r3, #20]
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	f002 0208 	and.w	r2, r2, #8
 8004572:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	4618      	mov	r0, r3
 800457a:	f004 fbc4 	bl	8008d06 <USB_ReadInterrupts>
 800457e:	4603      	mov	r3, r0
 8004580:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004584:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004588:	d10f      	bne.n	80045aa <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 800458a:	2300      	movs	r3, #0
 800458c:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800458e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004590:	b2db      	uxtb	r3, r3
 8004592:	4619      	mov	r1, r3
 8004594:	6878      	ldr	r0, [r7, #4]
 8004596:	f006 fc0d 	bl	800adb4 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	695a      	ldr	r2, [r3, #20]
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80045a8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	4618      	mov	r0, r3
 80045b0:	f004 fba9 	bl	8008d06 <USB_ReadInterrupts>
 80045b4:	4603      	mov	r3, r0
 80045b6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80045ba:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80045be:	d10f      	bne.n	80045e0 <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80045c0:	2300      	movs	r3, #0
 80045c2:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80045c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045c6:	b2db      	uxtb	r3, r3
 80045c8:	4619      	mov	r1, r3
 80045ca:	6878      	ldr	r0, [r7, #4]
 80045cc:	f006 fbe0 	bl	800ad90 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	695a      	ldr	r2, [r3, #20]
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80045de:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	4618      	mov	r0, r3
 80045e6:	f004 fb8e 	bl	8008d06 <USB_ReadInterrupts>
 80045ea:	4603      	mov	r3, r0
 80045ec:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80045f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80045f4:	d10a      	bne.n	800460c <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80045f6:	6878      	ldr	r0, [r7, #4]
 80045f8:	f006 fbee 	bl	800add8 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	695a      	ldr	r2, [r3, #20]
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800460a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	4618      	mov	r0, r3
 8004612:	f004 fb78 	bl	8008d06 <USB_ReadInterrupts>
 8004616:	4603      	mov	r3, r0
 8004618:	f003 0304 	and.w	r3, r3, #4
 800461c:	2b04      	cmp	r3, #4
 800461e:	d115      	bne.n	800464c <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	685b      	ldr	r3, [r3, #4]
 8004626:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8004628:	69bb      	ldr	r3, [r7, #24]
 800462a:	f003 0304 	and.w	r3, r3, #4
 800462e:	2b00      	cmp	r3, #0
 8004630:	d002      	beq.n	8004638 <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8004632:	6878      	ldr	r0, [r7, #4]
 8004634:	f006 fbde 	bl	800adf4 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	6859      	ldr	r1, [r3, #4]
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	69ba      	ldr	r2, [r7, #24]
 8004644:	430a      	orrs	r2, r1
 8004646:	605a      	str	r2, [r3, #4]
 8004648:	e000      	b.n	800464c <HAL_PCD_IRQHandler+0x75e>
      return;
 800464a:	bf00      	nop
    }
  }
}
 800464c:	3734      	adds	r7, #52	; 0x34
 800464e:	46bd      	mov	sp, r7
 8004650:	bd90      	pop	{r4, r7, pc}

08004652 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8004652:	b580      	push	{r7, lr}
 8004654:	b082      	sub	sp, #8
 8004656:	af00      	add	r7, sp, #0
 8004658:	6078      	str	r0, [r7, #4]
 800465a:	460b      	mov	r3, r1
 800465c:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8004664:	2b01      	cmp	r3, #1
 8004666:	d101      	bne.n	800466c <HAL_PCD_SetAddress+0x1a>
 8004668:	2302      	movs	r3, #2
 800466a:	e013      	b.n	8004694 <HAL_PCD_SetAddress+0x42>
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	2201      	movs	r2, #1
 8004670:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	78fa      	ldrb	r2, [r7, #3]
 8004678:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	78fa      	ldrb	r2, [r7, #3]
 8004682:	4611      	mov	r1, r2
 8004684:	4618      	mov	r0, r3
 8004686:	f004 fad6 	bl	8008c36 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	2200      	movs	r2, #0
 800468e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8004692:	2300      	movs	r3, #0
}
 8004694:	4618      	mov	r0, r3
 8004696:	3708      	adds	r7, #8
 8004698:	46bd      	mov	sp, r7
 800469a:	bd80      	pop	{r7, pc}

0800469c <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800469c:	b580      	push	{r7, lr}
 800469e:	b084      	sub	sp, #16
 80046a0:	af00      	add	r7, sp, #0
 80046a2:	6078      	str	r0, [r7, #4]
 80046a4:	4608      	mov	r0, r1
 80046a6:	4611      	mov	r1, r2
 80046a8:	461a      	mov	r2, r3
 80046aa:	4603      	mov	r3, r0
 80046ac:	70fb      	strb	r3, [r7, #3]
 80046ae:	460b      	mov	r3, r1
 80046b0:	803b      	strh	r3, [r7, #0]
 80046b2:	4613      	mov	r3, r2
 80046b4:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80046b6:	2300      	movs	r3, #0
 80046b8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80046ba:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80046be:	2b00      	cmp	r3, #0
 80046c0:	da0f      	bge.n	80046e2 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80046c2:	78fb      	ldrb	r3, [r7, #3]
 80046c4:	f003 020f 	and.w	r2, r3, #15
 80046c8:	4613      	mov	r3, r2
 80046ca:	00db      	lsls	r3, r3, #3
 80046cc:	1a9b      	subs	r3, r3, r2
 80046ce:	009b      	lsls	r3, r3, #2
 80046d0:	3338      	adds	r3, #56	; 0x38
 80046d2:	687a      	ldr	r2, [r7, #4]
 80046d4:	4413      	add	r3, r2
 80046d6:	3304      	adds	r3, #4
 80046d8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	2201      	movs	r2, #1
 80046de:	705a      	strb	r2, [r3, #1]
 80046e0:	e00f      	b.n	8004702 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80046e2:	78fb      	ldrb	r3, [r7, #3]
 80046e4:	f003 020f 	and.w	r2, r3, #15
 80046e8:	4613      	mov	r3, r2
 80046ea:	00db      	lsls	r3, r3, #3
 80046ec:	1a9b      	subs	r3, r3, r2
 80046ee:	009b      	lsls	r3, r3, #2
 80046f0:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80046f4:	687a      	ldr	r2, [r7, #4]
 80046f6:	4413      	add	r3, r2
 80046f8:	3304      	adds	r3, #4
 80046fa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	2200      	movs	r2, #0
 8004700:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8004702:	78fb      	ldrb	r3, [r7, #3]
 8004704:	f003 030f 	and.w	r3, r3, #15
 8004708:	b2da      	uxtb	r2, r3
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800470e:	883a      	ldrh	r2, [r7, #0]
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	78ba      	ldrb	r2, [r7, #2]
 8004718:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	785b      	ldrb	r3, [r3, #1]
 800471e:	2b00      	cmp	r3, #0
 8004720:	d004      	beq.n	800472c <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	781b      	ldrb	r3, [r3, #0]
 8004726:	b29a      	uxth	r2, r3
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800472c:	78bb      	ldrb	r3, [r7, #2]
 800472e:	2b02      	cmp	r3, #2
 8004730:	d102      	bne.n	8004738 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	2200      	movs	r2, #0
 8004736:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800473e:	2b01      	cmp	r3, #1
 8004740:	d101      	bne.n	8004746 <HAL_PCD_EP_Open+0xaa>
 8004742:	2302      	movs	r3, #2
 8004744:	e00e      	b.n	8004764 <HAL_PCD_EP_Open+0xc8>
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	2201      	movs	r2, #1
 800474a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	68f9      	ldr	r1, [r7, #12]
 8004754:	4618      	mov	r0, r3
 8004756:	f003 fc41 	bl	8007fdc <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	2200      	movs	r2, #0
 800475e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8004762:	7afb      	ldrb	r3, [r7, #11]
}
 8004764:	4618      	mov	r0, r3
 8004766:	3710      	adds	r7, #16
 8004768:	46bd      	mov	sp, r7
 800476a:	bd80      	pop	{r7, pc}

0800476c <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800476c:	b580      	push	{r7, lr}
 800476e:	b084      	sub	sp, #16
 8004770:	af00      	add	r7, sp, #0
 8004772:	6078      	str	r0, [r7, #4]
 8004774:	460b      	mov	r3, r1
 8004776:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004778:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800477c:	2b00      	cmp	r3, #0
 800477e:	da0f      	bge.n	80047a0 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004780:	78fb      	ldrb	r3, [r7, #3]
 8004782:	f003 020f 	and.w	r2, r3, #15
 8004786:	4613      	mov	r3, r2
 8004788:	00db      	lsls	r3, r3, #3
 800478a:	1a9b      	subs	r3, r3, r2
 800478c:	009b      	lsls	r3, r3, #2
 800478e:	3338      	adds	r3, #56	; 0x38
 8004790:	687a      	ldr	r2, [r7, #4]
 8004792:	4413      	add	r3, r2
 8004794:	3304      	adds	r3, #4
 8004796:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	2201      	movs	r2, #1
 800479c:	705a      	strb	r2, [r3, #1]
 800479e:	e00f      	b.n	80047c0 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80047a0:	78fb      	ldrb	r3, [r7, #3]
 80047a2:	f003 020f 	and.w	r2, r3, #15
 80047a6:	4613      	mov	r3, r2
 80047a8:	00db      	lsls	r3, r3, #3
 80047aa:	1a9b      	subs	r3, r3, r2
 80047ac:	009b      	lsls	r3, r3, #2
 80047ae:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80047b2:	687a      	ldr	r2, [r7, #4]
 80047b4:	4413      	add	r3, r2
 80047b6:	3304      	adds	r3, #4
 80047b8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	2200      	movs	r2, #0
 80047be:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80047c0:	78fb      	ldrb	r3, [r7, #3]
 80047c2:	f003 030f 	and.w	r3, r3, #15
 80047c6:	b2da      	uxtb	r2, r3
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80047d2:	2b01      	cmp	r3, #1
 80047d4:	d101      	bne.n	80047da <HAL_PCD_EP_Close+0x6e>
 80047d6:	2302      	movs	r3, #2
 80047d8:	e00e      	b.n	80047f8 <HAL_PCD_EP_Close+0x8c>
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	2201      	movs	r2, #1
 80047de:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	68f9      	ldr	r1, [r7, #12]
 80047e8:	4618      	mov	r0, r3
 80047ea:	f003 fc7f 	bl	80080ec <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	2200      	movs	r2, #0
 80047f2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 80047f6:	2300      	movs	r3, #0
}
 80047f8:	4618      	mov	r0, r3
 80047fa:	3710      	adds	r7, #16
 80047fc:	46bd      	mov	sp, r7
 80047fe:	bd80      	pop	{r7, pc}

08004800 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004800:	b580      	push	{r7, lr}
 8004802:	b086      	sub	sp, #24
 8004804:	af00      	add	r7, sp, #0
 8004806:	60f8      	str	r0, [r7, #12]
 8004808:	607a      	str	r2, [r7, #4]
 800480a:	603b      	str	r3, [r7, #0]
 800480c:	460b      	mov	r3, r1
 800480e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004810:	7afb      	ldrb	r3, [r7, #11]
 8004812:	f003 020f 	and.w	r2, r3, #15
 8004816:	4613      	mov	r3, r2
 8004818:	00db      	lsls	r3, r3, #3
 800481a:	1a9b      	subs	r3, r3, r2
 800481c:	009b      	lsls	r3, r3, #2
 800481e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8004822:	68fa      	ldr	r2, [r7, #12]
 8004824:	4413      	add	r3, r2
 8004826:	3304      	adds	r3, #4
 8004828:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800482a:	697b      	ldr	r3, [r7, #20]
 800482c:	687a      	ldr	r2, [r7, #4]
 800482e:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8004830:	697b      	ldr	r3, [r7, #20]
 8004832:	683a      	ldr	r2, [r7, #0]
 8004834:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8004836:	697b      	ldr	r3, [r7, #20]
 8004838:	2200      	movs	r2, #0
 800483a:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 800483c:	697b      	ldr	r3, [r7, #20]
 800483e:	2200      	movs	r2, #0
 8004840:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004842:	7afb      	ldrb	r3, [r7, #11]
 8004844:	f003 030f 	and.w	r3, r3, #15
 8004848:	b2da      	uxtb	r2, r3
 800484a:	697b      	ldr	r3, [r7, #20]
 800484c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	691b      	ldr	r3, [r3, #16]
 8004852:	2b01      	cmp	r3, #1
 8004854:	d102      	bne.n	800485c <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004856:	687a      	ldr	r2, [r7, #4]
 8004858:	697b      	ldr	r3, [r7, #20]
 800485a:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800485c:	7afb      	ldrb	r3, [r7, #11]
 800485e:	f003 030f 	and.w	r3, r3, #15
 8004862:	2b00      	cmp	r3, #0
 8004864:	d109      	bne.n	800487a <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	6818      	ldr	r0, [r3, #0]
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	691b      	ldr	r3, [r3, #16]
 800486e:	b2db      	uxtb	r3, r3
 8004870:	461a      	mov	r2, r3
 8004872:	6979      	ldr	r1, [r7, #20]
 8004874:	f003 ff5a 	bl	800872c <USB_EP0StartXfer>
 8004878:	e008      	b.n	800488c <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	6818      	ldr	r0, [r3, #0]
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	691b      	ldr	r3, [r3, #16]
 8004882:	b2db      	uxtb	r3, r3
 8004884:	461a      	mov	r2, r3
 8004886:	6979      	ldr	r1, [r7, #20]
 8004888:	f003 fd0c 	bl	80082a4 <USB_EPStartXfer>
  }

  return HAL_OK;
 800488c:	2300      	movs	r3, #0
}
 800488e:	4618      	mov	r0, r3
 8004890:	3718      	adds	r7, #24
 8004892:	46bd      	mov	sp, r7
 8004894:	bd80      	pop	{r7, pc}

08004896 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004896:	b480      	push	{r7}
 8004898:	b083      	sub	sp, #12
 800489a:	af00      	add	r7, sp, #0
 800489c:	6078      	str	r0, [r7, #4]
 800489e:	460b      	mov	r3, r1
 80048a0:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80048a2:	78fb      	ldrb	r3, [r7, #3]
 80048a4:	f003 020f 	and.w	r2, r3, #15
 80048a8:	6879      	ldr	r1, [r7, #4]
 80048aa:	4613      	mov	r3, r2
 80048ac:	00db      	lsls	r3, r3, #3
 80048ae:	1a9b      	subs	r3, r3, r2
 80048b0:	009b      	lsls	r3, r3, #2
 80048b2:	440b      	add	r3, r1
 80048b4:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80048b8:	681b      	ldr	r3, [r3, #0]
}
 80048ba:	4618      	mov	r0, r3
 80048bc:	370c      	adds	r7, #12
 80048be:	46bd      	mov	sp, r7
 80048c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c4:	4770      	bx	lr

080048c6 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80048c6:	b580      	push	{r7, lr}
 80048c8:	b086      	sub	sp, #24
 80048ca:	af00      	add	r7, sp, #0
 80048cc:	60f8      	str	r0, [r7, #12]
 80048ce:	607a      	str	r2, [r7, #4]
 80048d0:	603b      	str	r3, [r7, #0]
 80048d2:	460b      	mov	r3, r1
 80048d4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80048d6:	7afb      	ldrb	r3, [r7, #11]
 80048d8:	f003 020f 	and.w	r2, r3, #15
 80048dc:	4613      	mov	r3, r2
 80048de:	00db      	lsls	r3, r3, #3
 80048e0:	1a9b      	subs	r3, r3, r2
 80048e2:	009b      	lsls	r3, r3, #2
 80048e4:	3338      	adds	r3, #56	; 0x38
 80048e6:	68fa      	ldr	r2, [r7, #12]
 80048e8:	4413      	add	r3, r2
 80048ea:	3304      	adds	r3, #4
 80048ec:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80048ee:	697b      	ldr	r3, [r7, #20]
 80048f0:	687a      	ldr	r2, [r7, #4]
 80048f2:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80048f4:	697b      	ldr	r3, [r7, #20]
 80048f6:	683a      	ldr	r2, [r7, #0]
 80048f8:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80048fa:	697b      	ldr	r3, [r7, #20]
 80048fc:	2200      	movs	r2, #0
 80048fe:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8004900:	697b      	ldr	r3, [r7, #20]
 8004902:	2201      	movs	r2, #1
 8004904:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004906:	7afb      	ldrb	r3, [r7, #11]
 8004908:	f003 030f 	and.w	r3, r3, #15
 800490c:	b2da      	uxtb	r2, r3
 800490e:	697b      	ldr	r3, [r7, #20]
 8004910:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	691b      	ldr	r3, [r3, #16]
 8004916:	2b01      	cmp	r3, #1
 8004918:	d102      	bne.n	8004920 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800491a:	687a      	ldr	r2, [r7, #4]
 800491c:	697b      	ldr	r3, [r7, #20]
 800491e:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004920:	7afb      	ldrb	r3, [r7, #11]
 8004922:	f003 030f 	and.w	r3, r3, #15
 8004926:	2b00      	cmp	r3, #0
 8004928:	d109      	bne.n	800493e <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	6818      	ldr	r0, [r3, #0]
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	691b      	ldr	r3, [r3, #16]
 8004932:	b2db      	uxtb	r3, r3
 8004934:	461a      	mov	r2, r3
 8004936:	6979      	ldr	r1, [r7, #20]
 8004938:	f003 fef8 	bl	800872c <USB_EP0StartXfer>
 800493c:	e008      	b.n	8004950 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	6818      	ldr	r0, [r3, #0]
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	691b      	ldr	r3, [r3, #16]
 8004946:	b2db      	uxtb	r3, r3
 8004948:	461a      	mov	r2, r3
 800494a:	6979      	ldr	r1, [r7, #20]
 800494c:	f003 fcaa 	bl	80082a4 <USB_EPStartXfer>
  }

  return HAL_OK;
 8004950:	2300      	movs	r3, #0
}
 8004952:	4618      	mov	r0, r3
 8004954:	3718      	adds	r7, #24
 8004956:	46bd      	mov	sp, r7
 8004958:	bd80      	pop	{r7, pc}

0800495a <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800495a:	b580      	push	{r7, lr}
 800495c:	b084      	sub	sp, #16
 800495e:	af00      	add	r7, sp, #0
 8004960:	6078      	str	r0, [r7, #4]
 8004962:	460b      	mov	r3, r1
 8004964:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8004966:	78fb      	ldrb	r3, [r7, #3]
 8004968:	f003 020f 	and.w	r2, r3, #15
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	685b      	ldr	r3, [r3, #4]
 8004970:	429a      	cmp	r2, r3
 8004972:	d901      	bls.n	8004978 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8004974:	2301      	movs	r3, #1
 8004976:	e050      	b.n	8004a1a <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004978:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800497c:	2b00      	cmp	r3, #0
 800497e:	da0f      	bge.n	80049a0 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004980:	78fb      	ldrb	r3, [r7, #3]
 8004982:	f003 020f 	and.w	r2, r3, #15
 8004986:	4613      	mov	r3, r2
 8004988:	00db      	lsls	r3, r3, #3
 800498a:	1a9b      	subs	r3, r3, r2
 800498c:	009b      	lsls	r3, r3, #2
 800498e:	3338      	adds	r3, #56	; 0x38
 8004990:	687a      	ldr	r2, [r7, #4]
 8004992:	4413      	add	r3, r2
 8004994:	3304      	adds	r3, #4
 8004996:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	2201      	movs	r2, #1
 800499c:	705a      	strb	r2, [r3, #1]
 800499e:	e00d      	b.n	80049bc <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80049a0:	78fa      	ldrb	r2, [r7, #3]
 80049a2:	4613      	mov	r3, r2
 80049a4:	00db      	lsls	r3, r3, #3
 80049a6:	1a9b      	subs	r3, r3, r2
 80049a8:	009b      	lsls	r3, r3, #2
 80049aa:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80049ae:	687a      	ldr	r2, [r7, #4]
 80049b0:	4413      	add	r3, r2
 80049b2:	3304      	adds	r3, #4
 80049b4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	2200      	movs	r2, #0
 80049ba:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	2201      	movs	r2, #1
 80049c0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80049c2:	78fb      	ldrb	r3, [r7, #3]
 80049c4:	f003 030f 	and.w	r3, r3, #15
 80049c8:	b2da      	uxtb	r2, r3
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80049d4:	2b01      	cmp	r3, #1
 80049d6:	d101      	bne.n	80049dc <HAL_PCD_EP_SetStall+0x82>
 80049d8:	2302      	movs	r3, #2
 80049da:	e01e      	b.n	8004a1a <HAL_PCD_EP_SetStall+0xc0>
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	2201      	movs	r2, #1
 80049e0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	68f9      	ldr	r1, [r7, #12]
 80049ea:	4618      	mov	r0, r3
 80049ec:	f004 f84f 	bl	8008a8e <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80049f0:	78fb      	ldrb	r3, [r7, #3]
 80049f2:	f003 030f 	and.w	r3, r3, #15
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d10a      	bne.n	8004a10 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	6818      	ldr	r0, [r3, #0]
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	691b      	ldr	r3, [r3, #16]
 8004a02:	b2d9      	uxtb	r1, r3
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004a0a:	461a      	mov	r2, r3
 8004a0c:	f004 fa40 	bl	8008e90 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	2200      	movs	r2, #0
 8004a14:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8004a18:	2300      	movs	r3, #0
}
 8004a1a:	4618      	mov	r0, r3
 8004a1c:	3710      	adds	r7, #16
 8004a1e:	46bd      	mov	sp, r7
 8004a20:	bd80      	pop	{r7, pc}

08004a22 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004a22:	b580      	push	{r7, lr}
 8004a24:	b084      	sub	sp, #16
 8004a26:	af00      	add	r7, sp, #0
 8004a28:	6078      	str	r0, [r7, #4]
 8004a2a:	460b      	mov	r3, r1
 8004a2c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8004a2e:	78fb      	ldrb	r3, [r7, #3]
 8004a30:	f003 020f 	and.w	r2, r3, #15
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	685b      	ldr	r3, [r3, #4]
 8004a38:	429a      	cmp	r2, r3
 8004a3a:	d901      	bls.n	8004a40 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8004a3c:	2301      	movs	r3, #1
 8004a3e:	e042      	b.n	8004ac6 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004a40:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	da0f      	bge.n	8004a68 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004a48:	78fb      	ldrb	r3, [r7, #3]
 8004a4a:	f003 020f 	and.w	r2, r3, #15
 8004a4e:	4613      	mov	r3, r2
 8004a50:	00db      	lsls	r3, r3, #3
 8004a52:	1a9b      	subs	r3, r3, r2
 8004a54:	009b      	lsls	r3, r3, #2
 8004a56:	3338      	adds	r3, #56	; 0x38
 8004a58:	687a      	ldr	r2, [r7, #4]
 8004a5a:	4413      	add	r3, r2
 8004a5c:	3304      	adds	r3, #4
 8004a5e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	2201      	movs	r2, #1
 8004a64:	705a      	strb	r2, [r3, #1]
 8004a66:	e00f      	b.n	8004a88 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004a68:	78fb      	ldrb	r3, [r7, #3]
 8004a6a:	f003 020f 	and.w	r2, r3, #15
 8004a6e:	4613      	mov	r3, r2
 8004a70:	00db      	lsls	r3, r3, #3
 8004a72:	1a9b      	subs	r3, r3, r2
 8004a74:	009b      	lsls	r3, r3, #2
 8004a76:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8004a7a:	687a      	ldr	r2, [r7, #4]
 8004a7c:	4413      	add	r3, r2
 8004a7e:	3304      	adds	r3, #4
 8004a80:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	2200      	movs	r2, #0
 8004a86:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	2200      	movs	r2, #0
 8004a8c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004a8e:	78fb      	ldrb	r3, [r7, #3]
 8004a90:	f003 030f 	and.w	r3, r3, #15
 8004a94:	b2da      	uxtb	r2, r3
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8004aa0:	2b01      	cmp	r3, #1
 8004aa2:	d101      	bne.n	8004aa8 <HAL_PCD_EP_ClrStall+0x86>
 8004aa4:	2302      	movs	r3, #2
 8004aa6:	e00e      	b.n	8004ac6 <HAL_PCD_EP_ClrStall+0xa4>
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	2201      	movs	r2, #1
 8004aac:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	68f9      	ldr	r1, [r7, #12]
 8004ab6:	4618      	mov	r0, r3
 8004ab8:	f004 f857 	bl	8008b6a <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	2200      	movs	r2, #0
 8004ac0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8004ac4:	2300      	movs	r3, #0
}
 8004ac6:	4618      	mov	r0, r3
 8004ac8:	3710      	adds	r7, #16
 8004aca:	46bd      	mov	sp, r7
 8004acc:	bd80      	pop	{r7, pc}

08004ace <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004ace:	b580      	push	{r7, lr}
 8004ad0:	b08a      	sub	sp, #40	; 0x28
 8004ad2:	af02      	add	r7, sp, #8
 8004ad4:	6078      	str	r0, [r7, #4]
 8004ad6:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ade:	697b      	ldr	r3, [r7, #20]
 8004ae0:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8004ae2:	683a      	ldr	r2, [r7, #0]
 8004ae4:	4613      	mov	r3, r2
 8004ae6:	00db      	lsls	r3, r3, #3
 8004ae8:	1a9b      	subs	r3, r3, r2
 8004aea:	009b      	lsls	r3, r3, #2
 8004aec:	3338      	adds	r3, #56	; 0x38
 8004aee:	687a      	ldr	r2, [r7, #4]
 8004af0:	4413      	add	r3, r2
 8004af2:	3304      	adds	r3, #4
 8004af4:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	699a      	ldr	r2, [r3, #24]
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	695b      	ldr	r3, [r3, #20]
 8004afe:	429a      	cmp	r2, r3
 8004b00:	d901      	bls.n	8004b06 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8004b02:	2301      	movs	r3, #1
 8004b04:	e06c      	b.n	8004be0 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	695a      	ldr	r2, [r3, #20]
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	699b      	ldr	r3, [r3, #24]
 8004b0e:	1ad3      	subs	r3, r2, r3
 8004b10:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	689b      	ldr	r3, [r3, #8]
 8004b16:	69fa      	ldr	r2, [r7, #28]
 8004b18:	429a      	cmp	r2, r3
 8004b1a:	d902      	bls.n	8004b22 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	689b      	ldr	r3, [r3, #8]
 8004b20:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8004b22:	69fb      	ldr	r3, [r7, #28]
 8004b24:	3303      	adds	r3, #3
 8004b26:	089b      	lsrs	r3, r3, #2
 8004b28:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004b2a:	e02b      	b.n	8004b84 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	695a      	ldr	r2, [r3, #20]
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	699b      	ldr	r3, [r3, #24]
 8004b34:	1ad3      	subs	r3, r2, r3
 8004b36:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	689b      	ldr	r3, [r3, #8]
 8004b3c:	69fa      	ldr	r2, [r7, #28]
 8004b3e:	429a      	cmp	r2, r3
 8004b40:	d902      	bls.n	8004b48 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	689b      	ldr	r3, [r3, #8]
 8004b46:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8004b48:	69fb      	ldr	r3, [r7, #28]
 8004b4a:	3303      	adds	r3, #3
 8004b4c:	089b      	lsrs	r3, r3, #2
 8004b4e:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	68d9      	ldr	r1, [r3, #12]
 8004b54:	683b      	ldr	r3, [r7, #0]
 8004b56:	b2da      	uxtb	r2, r3
 8004b58:	69fb      	ldr	r3, [r7, #28]
 8004b5a:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004b60:	b2db      	uxtb	r3, r3
 8004b62:	9300      	str	r3, [sp, #0]
 8004b64:	4603      	mov	r3, r0
 8004b66:	6978      	ldr	r0, [r7, #20]
 8004b68:	f003 ff33 	bl	80089d2 <USB_WritePacket>

    ep->xfer_buff  += len;
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	68da      	ldr	r2, [r3, #12]
 8004b70:	69fb      	ldr	r3, [r7, #28]
 8004b72:	441a      	add	r2, r3
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	699a      	ldr	r2, [r3, #24]
 8004b7c:	69fb      	ldr	r3, [r7, #28]
 8004b7e:	441a      	add	r2, r3
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004b84:	683b      	ldr	r3, [r7, #0]
 8004b86:	015a      	lsls	r2, r3, #5
 8004b88:	693b      	ldr	r3, [r7, #16]
 8004b8a:	4413      	add	r3, r2
 8004b8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b90:	699b      	ldr	r3, [r3, #24]
 8004b92:	b29b      	uxth	r3, r3
 8004b94:	69ba      	ldr	r2, [r7, #24]
 8004b96:	429a      	cmp	r2, r3
 8004b98:	d809      	bhi.n	8004bae <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	699a      	ldr	r2, [r3, #24]
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004ba2:	429a      	cmp	r2, r3
 8004ba4:	d203      	bcs.n	8004bae <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	695b      	ldr	r3, [r3, #20]
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d1be      	bne.n	8004b2c <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	695a      	ldr	r2, [r3, #20]
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	699b      	ldr	r3, [r3, #24]
 8004bb6:	429a      	cmp	r2, r3
 8004bb8:	d811      	bhi.n	8004bde <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004bba:	683b      	ldr	r3, [r7, #0]
 8004bbc:	f003 030f 	and.w	r3, r3, #15
 8004bc0:	2201      	movs	r2, #1
 8004bc2:	fa02 f303 	lsl.w	r3, r2, r3
 8004bc6:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004bc8:	693b      	ldr	r3, [r7, #16]
 8004bca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004bce:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004bd0:	68bb      	ldr	r3, [r7, #8]
 8004bd2:	43db      	mvns	r3, r3
 8004bd4:	6939      	ldr	r1, [r7, #16]
 8004bd6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004bda:	4013      	ands	r3, r2
 8004bdc:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8004bde:	2300      	movs	r3, #0
}
 8004be0:	4618      	mov	r0, r3
 8004be2:	3720      	adds	r7, #32
 8004be4:	46bd      	mov	sp, r7
 8004be6:	bd80      	pop	{r7, pc}

08004be8 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004be8:	b580      	push	{r7, lr}
 8004bea:	b086      	sub	sp, #24
 8004bec:	af00      	add	r7, sp, #0
 8004bee:	6078      	str	r0, [r7, #4]
 8004bf0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004bf8:	697b      	ldr	r3, [r7, #20]
 8004bfa:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004bfc:	697b      	ldr	r3, [r7, #20]
 8004bfe:	333c      	adds	r3, #60	; 0x3c
 8004c00:	3304      	adds	r3, #4
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004c06:	683b      	ldr	r3, [r7, #0]
 8004c08:	015a      	lsls	r2, r3, #5
 8004c0a:	693b      	ldr	r3, [r7, #16]
 8004c0c:	4413      	add	r3, r2
 8004c0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c12:	689b      	ldr	r3, [r3, #8]
 8004c14:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	691b      	ldr	r3, [r3, #16]
 8004c1a:	2b01      	cmp	r3, #1
 8004c1c:	f040 80a0 	bne.w	8004d60 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8004c20:	68bb      	ldr	r3, [r7, #8]
 8004c22:	f003 0308 	and.w	r3, r3, #8
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d015      	beq.n	8004c56 <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	4a72      	ldr	r2, [pc, #456]	; (8004df8 <PCD_EP_OutXfrComplete_int+0x210>)
 8004c2e:	4293      	cmp	r3, r2
 8004c30:	f240 80dd 	bls.w	8004dee <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004c34:	68bb      	ldr	r3, [r7, #8]
 8004c36:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	f000 80d7 	beq.w	8004dee <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004c40:	683b      	ldr	r3, [r7, #0]
 8004c42:	015a      	lsls	r2, r3, #5
 8004c44:	693b      	ldr	r3, [r7, #16]
 8004c46:	4413      	add	r3, r2
 8004c48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c4c:	461a      	mov	r2, r3
 8004c4e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004c52:	6093      	str	r3, [r2, #8]
 8004c54:	e0cb      	b.n	8004dee <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8004c56:	68bb      	ldr	r3, [r7, #8]
 8004c58:	f003 0320 	and.w	r3, r3, #32
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d009      	beq.n	8004c74 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004c60:	683b      	ldr	r3, [r7, #0]
 8004c62:	015a      	lsls	r2, r3, #5
 8004c64:	693b      	ldr	r3, [r7, #16]
 8004c66:	4413      	add	r3, r2
 8004c68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c6c:	461a      	mov	r2, r3
 8004c6e:	2320      	movs	r3, #32
 8004c70:	6093      	str	r3, [r2, #8]
 8004c72:	e0bc      	b.n	8004dee <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8004c74:	68bb      	ldr	r3, [r7, #8]
 8004c76:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	f040 80b7 	bne.w	8004dee <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	4a5d      	ldr	r2, [pc, #372]	; (8004df8 <PCD_EP_OutXfrComplete_int+0x210>)
 8004c84:	4293      	cmp	r3, r2
 8004c86:	d90f      	bls.n	8004ca8 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004c88:	68bb      	ldr	r3, [r7, #8]
 8004c8a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d00a      	beq.n	8004ca8 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004c92:	683b      	ldr	r3, [r7, #0]
 8004c94:	015a      	lsls	r2, r3, #5
 8004c96:	693b      	ldr	r3, [r7, #16]
 8004c98:	4413      	add	r3, r2
 8004c9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c9e:	461a      	mov	r2, r3
 8004ca0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004ca4:	6093      	str	r3, [r2, #8]
 8004ca6:	e0a2      	b.n	8004dee <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8004ca8:	6879      	ldr	r1, [r7, #4]
 8004caa:	683a      	ldr	r2, [r7, #0]
 8004cac:	4613      	mov	r3, r2
 8004cae:	00db      	lsls	r3, r3, #3
 8004cb0:	1a9b      	subs	r3, r3, r2
 8004cb2:	009b      	lsls	r3, r3, #2
 8004cb4:	440b      	add	r3, r1
 8004cb6:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8004cba:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8004cbc:	683b      	ldr	r3, [r7, #0]
 8004cbe:	0159      	lsls	r1, r3, #5
 8004cc0:	693b      	ldr	r3, [r7, #16]
 8004cc2:	440b      	add	r3, r1
 8004cc4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004cc8:	691b      	ldr	r3, [r3, #16]
 8004cca:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8004cce:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8004cd0:	6878      	ldr	r0, [r7, #4]
 8004cd2:	683a      	ldr	r2, [r7, #0]
 8004cd4:	4613      	mov	r3, r2
 8004cd6:	00db      	lsls	r3, r3, #3
 8004cd8:	1a9b      	subs	r3, r3, r2
 8004cda:	009b      	lsls	r3, r3, #2
 8004cdc:	4403      	add	r3, r0
 8004cde:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8004ce2:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8004ce4:	6879      	ldr	r1, [r7, #4]
 8004ce6:	683a      	ldr	r2, [r7, #0]
 8004ce8:	4613      	mov	r3, r2
 8004cea:	00db      	lsls	r3, r3, #3
 8004cec:	1a9b      	subs	r3, r3, r2
 8004cee:	009b      	lsls	r3, r3, #2
 8004cf0:	440b      	add	r3, r1
 8004cf2:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8004cf6:	6819      	ldr	r1, [r3, #0]
 8004cf8:	6878      	ldr	r0, [r7, #4]
 8004cfa:	683a      	ldr	r2, [r7, #0]
 8004cfc:	4613      	mov	r3, r2
 8004cfe:	00db      	lsls	r3, r3, #3
 8004d00:	1a9b      	subs	r3, r3, r2
 8004d02:	009b      	lsls	r3, r3, #2
 8004d04:	4403      	add	r3, r0
 8004d06:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	4419      	add	r1, r3
 8004d0e:	6878      	ldr	r0, [r7, #4]
 8004d10:	683a      	ldr	r2, [r7, #0]
 8004d12:	4613      	mov	r3, r2
 8004d14:	00db      	lsls	r3, r3, #3
 8004d16:	1a9b      	subs	r3, r3, r2
 8004d18:	009b      	lsls	r3, r3, #2
 8004d1a:	4403      	add	r3, r0
 8004d1c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8004d20:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8004d22:	683b      	ldr	r3, [r7, #0]
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d114      	bne.n	8004d52 <PCD_EP_OutXfrComplete_int+0x16a>
 8004d28:	6879      	ldr	r1, [r7, #4]
 8004d2a:	683a      	ldr	r2, [r7, #0]
 8004d2c:	4613      	mov	r3, r2
 8004d2e:	00db      	lsls	r3, r3, #3
 8004d30:	1a9b      	subs	r3, r3, r2
 8004d32:	009b      	lsls	r3, r3, #2
 8004d34:	440b      	add	r3, r1
 8004d36:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d108      	bne.n	8004d52 <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	6818      	ldr	r0, [r3, #0]
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004d4a:	461a      	mov	r2, r3
 8004d4c:	2101      	movs	r1, #1
 8004d4e:	f004 f89f 	bl	8008e90 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004d52:	683b      	ldr	r3, [r7, #0]
 8004d54:	b2db      	uxtb	r3, r3
 8004d56:	4619      	mov	r1, r3
 8004d58:	6878      	ldr	r0, [r7, #4]
 8004d5a:	f005 ff83 	bl	800ac64 <HAL_PCD_DataOutStageCallback>
 8004d5e:	e046      	b.n	8004dee <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	4a26      	ldr	r2, [pc, #152]	; (8004dfc <PCD_EP_OutXfrComplete_int+0x214>)
 8004d64:	4293      	cmp	r3, r2
 8004d66:	d124      	bne.n	8004db2 <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8004d68:	68bb      	ldr	r3, [r7, #8]
 8004d6a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d00a      	beq.n	8004d88 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004d72:	683b      	ldr	r3, [r7, #0]
 8004d74:	015a      	lsls	r2, r3, #5
 8004d76:	693b      	ldr	r3, [r7, #16]
 8004d78:	4413      	add	r3, r2
 8004d7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d7e:	461a      	mov	r2, r3
 8004d80:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004d84:	6093      	str	r3, [r2, #8]
 8004d86:	e032      	b.n	8004dee <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004d88:	68bb      	ldr	r3, [r7, #8]
 8004d8a:	f003 0320 	and.w	r3, r3, #32
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d008      	beq.n	8004da4 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004d92:	683b      	ldr	r3, [r7, #0]
 8004d94:	015a      	lsls	r2, r3, #5
 8004d96:	693b      	ldr	r3, [r7, #16]
 8004d98:	4413      	add	r3, r2
 8004d9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d9e:	461a      	mov	r2, r3
 8004da0:	2320      	movs	r3, #32
 8004da2:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004da4:	683b      	ldr	r3, [r7, #0]
 8004da6:	b2db      	uxtb	r3, r3
 8004da8:	4619      	mov	r1, r3
 8004daa:	6878      	ldr	r0, [r7, #4]
 8004dac:	f005 ff5a 	bl	800ac64 <HAL_PCD_DataOutStageCallback>
 8004db0:	e01d      	b.n	8004dee <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8004db2:	683b      	ldr	r3, [r7, #0]
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d114      	bne.n	8004de2 <PCD_EP_OutXfrComplete_int+0x1fa>
 8004db8:	6879      	ldr	r1, [r7, #4]
 8004dba:	683a      	ldr	r2, [r7, #0]
 8004dbc:	4613      	mov	r3, r2
 8004dbe:	00db      	lsls	r3, r3, #3
 8004dc0:	1a9b      	subs	r3, r3, r2
 8004dc2:	009b      	lsls	r3, r3, #2
 8004dc4:	440b      	add	r3, r1
 8004dc6:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d108      	bne.n	8004de2 <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	6818      	ldr	r0, [r3, #0]
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004dda:	461a      	mov	r2, r3
 8004ddc:	2100      	movs	r1, #0
 8004dde:	f004 f857 	bl	8008e90 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004de2:	683b      	ldr	r3, [r7, #0]
 8004de4:	b2db      	uxtb	r3, r3
 8004de6:	4619      	mov	r1, r3
 8004de8:	6878      	ldr	r0, [r7, #4]
 8004dea:	f005 ff3b 	bl	800ac64 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8004dee:	2300      	movs	r3, #0
}
 8004df0:	4618      	mov	r0, r3
 8004df2:	3718      	adds	r7, #24
 8004df4:	46bd      	mov	sp, r7
 8004df6:	bd80      	pop	{r7, pc}
 8004df8:	4f54300a 	.word	0x4f54300a
 8004dfc:	4f54310a 	.word	0x4f54310a

08004e00 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004e00:	b580      	push	{r7, lr}
 8004e02:	b086      	sub	sp, #24
 8004e04:	af00      	add	r7, sp, #0
 8004e06:	6078      	str	r0, [r7, #4]
 8004e08:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e10:	697b      	ldr	r3, [r7, #20]
 8004e12:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004e14:	697b      	ldr	r3, [r7, #20]
 8004e16:	333c      	adds	r3, #60	; 0x3c
 8004e18:	3304      	adds	r3, #4
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004e1e:	683b      	ldr	r3, [r7, #0]
 8004e20:	015a      	lsls	r2, r3, #5
 8004e22:	693b      	ldr	r3, [r7, #16]
 8004e24:	4413      	add	r3, r2
 8004e26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e2a:	689b      	ldr	r3, [r3, #8]
 8004e2c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	4a15      	ldr	r2, [pc, #84]	; (8004e88 <PCD_EP_OutSetupPacket_int+0x88>)
 8004e32:	4293      	cmp	r3, r2
 8004e34:	d90e      	bls.n	8004e54 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004e36:	68bb      	ldr	r3, [r7, #8]
 8004e38:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d009      	beq.n	8004e54 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004e40:	683b      	ldr	r3, [r7, #0]
 8004e42:	015a      	lsls	r2, r3, #5
 8004e44:	693b      	ldr	r3, [r7, #16]
 8004e46:	4413      	add	r3, r2
 8004e48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e4c:	461a      	mov	r2, r3
 8004e4e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004e52:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8004e54:	6878      	ldr	r0, [r7, #4]
 8004e56:	f005 fef3 	bl	800ac40 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	4a0a      	ldr	r2, [pc, #40]	; (8004e88 <PCD_EP_OutSetupPacket_int+0x88>)
 8004e5e:	4293      	cmp	r3, r2
 8004e60:	d90c      	bls.n	8004e7c <PCD_EP_OutSetupPacket_int+0x7c>
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	691b      	ldr	r3, [r3, #16]
 8004e66:	2b01      	cmp	r3, #1
 8004e68:	d108      	bne.n	8004e7c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	6818      	ldr	r0, [r3, #0]
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004e74:	461a      	mov	r2, r3
 8004e76:	2101      	movs	r1, #1
 8004e78:	f004 f80a 	bl	8008e90 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8004e7c:	2300      	movs	r3, #0
}
 8004e7e:	4618      	mov	r0, r3
 8004e80:	3718      	adds	r7, #24
 8004e82:	46bd      	mov	sp, r7
 8004e84:	bd80      	pop	{r7, pc}
 8004e86:	bf00      	nop
 8004e88:	4f54300a 	.word	0x4f54300a

08004e8c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8004e8c:	b480      	push	{r7}
 8004e8e:	b085      	sub	sp, #20
 8004e90:	af00      	add	r7, sp, #0
 8004e92:	6078      	str	r0, [r7, #4]
 8004e94:	460b      	mov	r3, r1
 8004e96:	70fb      	strb	r3, [r7, #3]
 8004e98:	4613      	mov	r3, r2
 8004e9a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ea2:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8004ea4:	78fb      	ldrb	r3, [r7, #3]
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d107      	bne.n	8004eba <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8004eaa:	883b      	ldrh	r3, [r7, #0]
 8004eac:	0419      	lsls	r1, r3, #16
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	68ba      	ldr	r2, [r7, #8]
 8004eb4:	430a      	orrs	r2, r1
 8004eb6:	629a      	str	r2, [r3, #40]	; 0x28
 8004eb8:	e028      	b.n	8004f0c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ec0:	0c1b      	lsrs	r3, r3, #16
 8004ec2:	68ba      	ldr	r2, [r7, #8]
 8004ec4:	4413      	add	r3, r2
 8004ec6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004ec8:	2300      	movs	r3, #0
 8004eca:	73fb      	strb	r3, [r7, #15]
 8004ecc:	e00d      	b.n	8004eea <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681a      	ldr	r2, [r3, #0]
 8004ed2:	7bfb      	ldrb	r3, [r7, #15]
 8004ed4:	3340      	adds	r3, #64	; 0x40
 8004ed6:	009b      	lsls	r3, r3, #2
 8004ed8:	4413      	add	r3, r2
 8004eda:	685b      	ldr	r3, [r3, #4]
 8004edc:	0c1b      	lsrs	r3, r3, #16
 8004ede:	68ba      	ldr	r2, [r7, #8]
 8004ee0:	4413      	add	r3, r2
 8004ee2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004ee4:	7bfb      	ldrb	r3, [r7, #15]
 8004ee6:	3301      	adds	r3, #1
 8004ee8:	73fb      	strb	r3, [r7, #15]
 8004eea:	7bfa      	ldrb	r2, [r7, #15]
 8004eec:	78fb      	ldrb	r3, [r7, #3]
 8004eee:	3b01      	subs	r3, #1
 8004ef0:	429a      	cmp	r2, r3
 8004ef2:	d3ec      	bcc.n	8004ece <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8004ef4:	883b      	ldrh	r3, [r7, #0]
 8004ef6:	0418      	lsls	r0, r3, #16
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	6819      	ldr	r1, [r3, #0]
 8004efc:	78fb      	ldrb	r3, [r7, #3]
 8004efe:	3b01      	subs	r3, #1
 8004f00:	68ba      	ldr	r2, [r7, #8]
 8004f02:	4302      	orrs	r2, r0
 8004f04:	3340      	adds	r3, #64	; 0x40
 8004f06:	009b      	lsls	r3, r3, #2
 8004f08:	440b      	add	r3, r1
 8004f0a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8004f0c:	2300      	movs	r3, #0
}
 8004f0e:	4618      	mov	r0, r3
 8004f10:	3714      	adds	r7, #20
 8004f12:	46bd      	mov	sp, r7
 8004f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f18:	4770      	bx	lr

08004f1a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8004f1a:	b480      	push	{r7}
 8004f1c:	b083      	sub	sp, #12
 8004f1e:	af00      	add	r7, sp, #0
 8004f20:	6078      	str	r0, [r7, #4]
 8004f22:	460b      	mov	r3, r1
 8004f24:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	887a      	ldrh	r2, [r7, #2]
 8004f2c:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8004f2e:	2300      	movs	r3, #0
}
 8004f30:	4618      	mov	r0, r3
 8004f32:	370c      	adds	r7, #12
 8004f34:	46bd      	mov	sp, r7
 8004f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f3a:	4770      	bx	lr

08004f3c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8004f3c:	b480      	push	{r7}
 8004f3e:	b083      	sub	sp, #12
 8004f40:	af00      	add	r7, sp, #0
 8004f42:	6078      	str	r0, [r7, #4]
 8004f44:	460b      	mov	r3, r1
 8004f46:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8004f48:	bf00      	nop
 8004f4a:	370c      	adds	r7, #12
 8004f4c:	46bd      	mov	sp, r7
 8004f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f52:	4770      	bx	lr

08004f54 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004f54:	b580      	push	{r7, lr}
 8004f56:	b086      	sub	sp, #24
 8004f58:	af00      	add	r7, sp, #0
 8004f5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d101      	bne.n	8004f66 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004f62:	2301      	movs	r3, #1
 8004f64:	e30d      	b.n	8005582 <HAL_RCC_OscConfig+0x62e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	2b0f      	cmp	r3, #15
 8004f6c:	d903      	bls.n	8004f76 <HAL_RCC_OscConfig+0x22>
 8004f6e:	21e8      	movs	r1, #232	; 0xe8
 8004f70:	48a3      	ldr	r0, [pc, #652]	; (8005200 <HAL_RCC_OscConfig+0x2ac>)
 8004f72:	f7fc fb7e 	bl	8001672 <assert_failed>
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	f003 0301 	and.w	r3, r3, #1
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	f000 8088 	beq.w	8005094 <HAL_RCC_OscConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	685b      	ldr	r3, [r3, #4]
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d00d      	beq.n	8004fa8 <HAL_RCC_OscConfig+0x54>
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	685b      	ldr	r3, [r3, #4]
 8004f90:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004f94:	d008      	beq.n	8004fa8 <HAL_RCC_OscConfig+0x54>
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	685b      	ldr	r3, [r3, #4]
 8004f9a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004f9e:	d003      	beq.n	8004fa8 <HAL_RCC_OscConfig+0x54>
 8004fa0:	21ed      	movs	r1, #237	; 0xed
 8004fa2:	4897      	ldr	r0, [pc, #604]	; (8005200 <HAL_RCC_OscConfig+0x2ac>)
 8004fa4:	f7fc fb65 	bl	8001672 <assert_failed>
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004fa8:	4b96      	ldr	r3, [pc, #600]	; (8005204 <HAL_RCC_OscConfig+0x2b0>)
 8004faa:	689b      	ldr	r3, [r3, #8]
 8004fac:	f003 030c 	and.w	r3, r3, #12
 8004fb0:	2b04      	cmp	r3, #4
 8004fb2:	d00c      	beq.n	8004fce <HAL_RCC_OscConfig+0x7a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004fb4:	4b93      	ldr	r3, [pc, #588]	; (8005204 <HAL_RCC_OscConfig+0x2b0>)
 8004fb6:	689b      	ldr	r3, [r3, #8]
 8004fb8:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004fbc:	2b08      	cmp	r3, #8
 8004fbe:	d112      	bne.n	8004fe6 <HAL_RCC_OscConfig+0x92>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004fc0:	4b90      	ldr	r3, [pc, #576]	; (8005204 <HAL_RCC_OscConfig+0x2b0>)
 8004fc2:	685b      	ldr	r3, [r3, #4]
 8004fc4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004fc8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004fcc:	d10b      	bne.n	8004fe6 <HAL_RCC_OscConfig+0x92>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004fce:	4b8d      	ldr	r3, [pc, #564]	; (8005204 <HAL_RCC_OscConfig+0x2b0>)
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d05b      	beq.n	8005092 <HAL_RCC_OscConfig+0x13e>
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	685b      	ldr	r3, [r3, #4]
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d157      	bne.n	8005092 <HAL_RCC_OscConfig+0x13e>
      {
        return HAL_ERROR;
 8004fe2:	2301      	movs	r3, #1
 8004fe4:	e2cd      	b.n	8005582 <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	685b      	ldr	r3, [r3, #4]
 8004fea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004fee:	d106      	bne.n	8004ffe <HAL_RCC_OscConfig+0xaa>
 8004ff0:	4b84      	ldr	r3, [pc, #528]	; (8005204 <HAL_RCC_OscConfig+0x2b0>)
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	4a83      	ldr	r2, [pc, #524]	; (8005204 <HAL_RCC_OscConfig+0x2b0>)
 8004ff6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ffa:	6013      	str	r3, [r2, #0]
 8004ffc:	e01d      	b.n	800503a <HAL_RCC_OscConfig+0xe6>
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	685b      	ldr	r3, [r3, #4]
 8005002:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005006:	d10c      	bne.n	8005022 <HAL_RCC_OscConfig+0xce>
 8005008:	4b7e      	ldr	r3, [pc, #504]	; (8005204 <HAL_RCC_OscConfig+0x2b0>)
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	4a7d      	ldr	r2, [pc, #500]	; (8005204 <HAL_RCC_OscConfig+0x2b0>)
 800500e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005012:	6013      	str	r3, [r2, #0]
 8005014:	4b7b      	ldr	r3, [pc, #492]	; (8005204 <HAL_RCC_OscConfig+0x2b0>)
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	4a7a      	ldr	r2, [pc, #488]	; (8005204 <HAL_RCC_OscConfig+0x2b0>)
 800501a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800501e:	6013      	str	r3, [r2, #0]
 8005020:	e00b      	b.n	800503a <HAL_RCC_OscConfig+0xe6>
 8005022:	4b78      	ldr	r3, [pc, #480]	; (8005204 <HAL_RCC_OscConfig+0x2b0>)
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	4a77      	ldr	r2, [pc, #476]	; (8005204 <HAL_RCC_OscConfig+0x2b0>)
 8005028:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800502c:	6013      	str	r3, [r2, #0]
 800502e:	4b75      	ldr	r3, [pc, #468]	; (8005204 <HAL_RCC_OscConfig+0x2b0>)
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	4a74      	ldr	r2, [pc, #464]	; (8005204 <HAL_RCC_OscConfig+0x2b0>)
 8005034:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005038:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	685b      	ldr	r3, [r3, #4]
 800503e:	2b00      	cmp	r3, #0
 8005040:	d013      	beq.n	800506a <HAL_RCC_OscConfig+0x116>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005042:	f7fc fdeb 	bl	8001c1c <HAL_GetTick>
 8005046:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005048:	e008      	b.n	800505c <HAL_RCC_OscConfig+0x108>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800504a:	f7fc fde7 	bl	8001c1c <HAL_GetTick>
 800504e:	4602      	mov	r2, r0
 8005050:	693b      	ldr	r3, [r7, #16]
 8005052:	1ad3      	subs	r3, r2, r3
 8005054:	2b64      	cmp	r3, #100	; 0x64
 8005056:	d901      	bls.n	800505c <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8005058:	2303      	movs	r3, #3
 800505a:	e292      	b.n	8005582 <HAL_RCC_OscConfig+0x62e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800505c:	4b69      	ldr	r3, [pc, #420]	; (8005204 <HAL_RCC_OscConfig+0x2b0>)
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005064:	2b00      	cmp	r3, #0
 8005066:	d0f0      	beq.n	800504a <HAL_RCC_OscConfig+0xf6>
 8005068:	e014      	b.n	8005094 <HAL_RCC_OscConfig+0x140>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800506a:	f7fc fdd7 	bl	8001c1c <HAL_GetTick>
 800506e:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005070:	e008      	b.n	8005084 <HAL_RCC_OscConfig+0x130>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005072:	f7fc fdd3 	bl	8001c1c <HAL_GetTick>
 8005076:	4602      	mov	r2, r0
 8005078:	693b      	ldr	r3, [r7, #16]
 800507a:	1ad3      	subs	r3, r2, r3
 800507c:	2b64      	cmp	r3, #100	; 0x64
 800507e:	d901      	bls.n	8005084 <HAL_RCC_OscConfig+0x130>
          {
            return HAL_TIMEOUT;
 8005080:	2303      	movs	r3, #3
 8005082:	e27e      	b.n	8005582 <HAL_RCC_OscConfig+0x62e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005084:	4b5f      	ldr	r3, [pc, #380]	; (8005204 <HAL_RCC_OscConfig+0x2b0>)
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800508c:	2b00      	cmp	r3, #0
 800508e:	d1f0      	bne.n	8005072 <HAL_RCC_OscConfig+0x11e>
 8005090:	e000      	b.n	8005094 <HAL_RCC_OscConfig+0x140>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005092:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	f003 0302 	and.w	r3, r3, #2
 800509c:	2b00      	cmp	r3, #0
 800509e:	d079      	beq.n	8005194 <HAL_RCC_OscConfig+0x240>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	68db      	ldr	r3, [r3, #12]
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d008      	beq.n	80050ba <HAL_RCC_OscConfig+0x166>
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	68db      	ldr	r3, [r3, #12]
 80050ac:	2b01      	cmp	r3, #1
 80050ae:	d004      	beq.n	80050ba <HAL_RCC_OscConfig+0x166>
 80050b0:	f240 111f 	movw	r1, #287	; 0x11f
 80050b4:	4852      	ldr	r0, [pc, #328]	; (8005200 <HAL_RCC_OscConfig+0x2ac>)
 80050b6:	f7fc fadc 	bl	8001672 <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	691b      	ldr	r3, [r3, #16]
 80050be:	2b1f      	cmp	r3, #31
 80050c0:	d904      	bls.n	80050cc <HAL_RCC_OscConfig+0x178>
 80050c2:	f44f 7190 	mov.w	r1, #288	; 0x120
 80050c6:	484e      	ldr	r0, [pc, #312]	; (8005200 <HAL_RCC_OscConfig+0x2ac>)
 80050c8:	f7fc fad3 	bl	8001672 <assert_failed>

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80050cc:	4b4d      	ldr	r3, [pc, #308]	; (8005204 <HAL_RCC_OscConfig+0x2b0>)
 80050ce:	689b      	ldr	r3, [r3, #8]
 80050d0:	f003 030c 	and.w	r3, r3, #12
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d00b      	beq.n	80050f0 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80050d8:	4b4a      	ldr	r3, [pc, #296]	; (8005204 <HAL_RCC_OscConfig+0x2b0>)
 80050da:	689b      	ldr	r3, [r3, #8]
 80050dc:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80050e0:	2b08      	cmp	r3, #8
 80050e2:	d11c      	bne.n	800511e <HAL_RCC_OscConfig+0x1ca>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80050e4:	4b47      	ldr	r3, [pc, #284]	; (8005204 <HAL_RCC_OscConfig+0x2b0>)
 80050e6:	685b      	ldr	r3, [r3, #4]
 80050e8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d116      	bne.n	800511e <HAL_RCC_OscConfig+0x1ca>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80050f0:	4b44      	ldr	r3, [pc, #272]	; (8005204 <HAL_RCC_OscConfig+0x2b0>)
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	f003 0302 	and.w	r3, r3, #2
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d005      	beq.n	8005108 <HAL_RCC_OscConfig+0x1b4>
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	68db      	ldr	r3, [r3, #12]
 8005100:	2b01      	cmp	r3, #1
 8005102:	d001      	beq.n	8005108 <HAL_RCC_OscConfig+0x1b4>
      {
        return HAL_ERROR;
 8005104:	2301      	movs	r3, #1
 8005106:	e23c      	b.n	8005582 <HAL_RCC_OscConfig+0x62e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005108:	4b3e      	ldr	r3, [pc, #248]	; (8005204 <HAL_RCC_OscConfig+0x2b0>)
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	691b      	ldr	r3, [r3, #16]
 8005114:	00db      	lsls	r3, r3, #3
 8005116:	493b      	ldr	r1, [pc, #236]	; (8005204 <HAL_RCC_OscConfig+0x2b0>)
 8005118:	4313      	orrs	r3, r2
 800511a:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800511c:	e03a      	b.n	8005194 <HAL_RCC_OscConfig+0x240>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	68db      	ldr	r3, [r3, #12]
 8005122:	2b00      	cmp	r3, #0
 8005124:	d020      	beq.n	8005168 <HAL_RCC_OscConfig+0x214>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005126:	4b38      	ldr	r3, [pc, #224]	; (8005208 <HAL_RCC_OscConfig+0x2b4>)
 8005128:	2201      	movs	r2, #1
 800512a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800512c:	f7fc fd76 	bl	8001c1c <HAL_GetTick>
 8005130:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005132:	e008      	b.n	8005146 <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005134:	f7fc fd72 	bl	8001c1c <HAL_GetTick>
 8005138:	4602      	mov	r2, r0
 800513a:	693b      	ldr	r3, [r7, #16]
 800513c:	1ad3      	subs	r3, r2, r3
 800513e:	2b02      	cmp	r3, #2
 8005140:	d901      	bls.n	8005146 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8005142:	2303      	movs	r3, #3
 8005144:	e21d      	b.n	8005582 <HAL_RCC_OscConfig+0x62e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005146:	4b2f      	ldr	r3, [pc, #188]	; (8005204 <HAL_RCC_OscConfig+0x2b0>)
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	f003 0302 	and.w	r3, r3, #2
 800514e:	2b00      	cmp	r3, #0
 8005150:	d0f0      	beq.n	8005134 <HAL_RCC_OscConfig+0x1e0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005152:	4b2c      	ldr	r3, [pc, #176]	; (8005204 <HAL_RCC_OscConfig+0x2b0>)
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	691b      	ldr	r3, [r3, #16]
 800515e:	00db      	lsls	r3, r3, #3
 8005160:	4928      	ldr	r1, [pc, #160]	; (8005204 <HAL_RCC_OscConfig+0x2b0>)
 8005162:	4313      	orrs	r3, r2
 8005164:	600b      	str	r3, [r1, #0]
 8005166:	e015      	b.n	8005194 <HAL_RCC_OscConfig+0x240>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005168:	4b27      	ldr	r3, [pc, #156]	; (8005208 <HAL_RCC_OscConfig+0x2b4>)
 800516a:	2200      	movs	r2, #0
 800516c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800516e:	f7fc fd55 	bl	8001c1c <HAL_GetTick>
 8005172:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005174:	e008      	b.n	8005188 <HAL_RCC_OscConfig+0x234>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005176:	f7fc fd51 	bl	8001c1c <HAL_GetTick>
 800517a:	4602      	mov	r2, r0
 800517c:	693b      	ldr	r3, [r7, #16]
 800517e:	1ad3      	subs	r3, r2, r3
 8005180:	2b02      	cmp	r3, #2
 8005182:	d901      	bls.n	8005188 <HAL_RCC_OscConfig+0x234>
          {
            return HAL_TIMEOUT;
 8005184:	2303      	movs	r3, #3
 8005186:	e1fc      	b.n	8005582 <HAL_RCC_OscConfig+0x62e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005188:	4b1e      	ldr	r3, [pc, #120]	; (8005204 <HAL_RCC_OscConfig+0x2b0>)
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	f003 0302 	and.w	r3, r3, #2
 8005190:	2b00      	cmp	r3, #0
 8005192:	d1f0      	bne.n	8005176 <HAL_RCC_OscConfig+0x222>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	f003 0308 	and.w	r3, r3, #8
 800519c:	2b00      	cmp	r3, #0
 800519e:	d046      	beq.n	800522e <HAL_RCC_OscConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	695b      	ldr	r3, [r3, #20]
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d008      	beq.n	80051ba <HAL_RCC_OscConfig+0x266>
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	695b      	ldr	r3, [r3, #20]
 80051ac:	2b01      	cmp	r3, #1
 80051ae:	d004      	beq.n	80051ba <HAL_RCC_OscConfig+0x266>
 80051b0:	f44f 71b0 	mov.w	r1, #352	; 0x160
 80051b4:	4812      	ldr	r0, [pc, #72]	; (8005200 <HAL_RCC_OscConfig+0x2ac>)
 80051b6:	f7fc fa5c 	bl	8001672 <assert_failed>

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	695b      	ldr	r3, [r3, #20]
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d016      	beq.n	80051f0 <HAL_RCC_OscConfig+0x29c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80051c2:	4b12      	ldr	r3, [pc, #72]	; (800520c <HAL_RCC_OscConfig+0x2b8>)
 80051c4:	2201      	movs	r2, #1
 80051c6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80051c8:	f7fc fd28 	bl	8001c1c <HAL_GetTick>
 80051cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80051ce:	e008      	b.n	80051e2 <HAL_RCC_OscConfig+0x28e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80051d0:	f7fc fd24 	bl	8001c1c <HAL_GetTick>
 80051d4:	4602      	mov	r2, r0
 80051d6:	693b      	ldr	r3, [r7, #16]
 80051d8:	1ad3      	subs	r3, r2, r3
 80051da:	2b02      	cmp	r3, #2
 80051dc:	d901      	bls.n	80051e2 <HAL_RCC_OscConfig+0x28e>
        {
          return HAL_TIMEOUT;
 80051de:	2303      	movs	r3, #3
 80051e0:	e1cf      	b.n	8005582 <HAL_RCC_OscConfig+0x62e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80051e2:	4b08      	ldr	r3, [pc, #32]	; (8005204 <HAL_RCC_OscConfig+0x2b0>)
 80051e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80051e6:	f003 0302 	and.w	r3, r3, #2
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d0f0      	beq.n	80051d0 <HAL_RCC_OscConfig+0x27c>
 80051ee:	e01e      	b.n	800522e <HAL_RCC_OscConfig+0x2da>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80051f0:	4b06      	ldr	r3, [pc, #24]	; (800520c <HAL_RCC_OscConfig+0x2b8>)
 80051f2:	2200      	movs	r2, #0
 80051f4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80051f6:	f7fc fd11 	bl	8001c1c <HAL_GetTick>
 80051fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80051fc:	e011      	b.n	8005222 <HAL_RCC_OscConfig+0x2ce>
 80051fe:	bf00      	nop
 8005200:	0800dd88 	.word	0x0800dd88
 8005204:	40023800 	.word	0x40023800
 8005208:	42470000 	.word	0x42470000
 800520c:	42470e80 	.word	0x42470e80
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005210:	f7fc fd04 	bl	8001c1c <HAL_GetTick>
 8005214:	4602      	mov	r2, r0
 8005216:	693b      	ldr	r3, [r7, #16]
 8005218:	1ad3      	subs	r3, r2, r3
 800521a:	2b02      	cmp	r3, #2
 800521c:	d901      	bls.n	8005222 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800521e:	2303      	movs	r3, #3
 8005220:	e1af      	b.n	8005582 <HAL_RCC_OscConfig+0x62e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005222:	4b97      	ldr	r3, [pc, #604]	; (8005480 <HAL_RCC_OscConfig+0x52c>)
 8005224:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005226:	f003 0302 	and.w	r3, r3, #2
 800522a:	2b00      	cmp	r3, #0
 800522c:	d1f0      	bne.n	8005210 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	f003 0304 	and.w	r3, r3, #4
 8005236:	2b00      	cmp	r3, #0
 8005238:	f000 80a8 	beq.w	800538c <HAL_RCC_OscConfig+0x438>
  {
    FlagStatus       pwrclkchanged = RESET;
 800523c:	2300      	movs	r3, #0
 800523e:	75fb      	strb	r3, [r7, #23]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	689b      	ldr	r3, [r3, #8]
 8005244:	2b00      	cmp	r3, #0
 8005246:	d00c      	beq.n	8005262 <HAL_RCC_OscConfig+0x30e>
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	689b      	ldr	r3, [r3, #8]
 800524c:	2b01      	cmp	r3, #1
 800524e:	d008      	beq.n	8005262 <HAL_RCC_OscConfig+0x30e>
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	689b      	ldr	r3, [r3, #8]
 8005254:	2b05      	cmp	r3, #5
 8005256:	d004      	beq.n	8005262 <HAL_RCC_OscConfig+0x30e>
 8005258:	f44f 71c6 	mov.w	r1, #396	; 0x18c
 800525c:	4889      	ldr	r0, [pc, #548]	; (8005484 <HAL_RCC_OscConfig+0x530>)
 800525e:	f7fc fa08 	bl	8001672 <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005262:	4b87      	ldr	r3, [pc, #540]	; (8005480 <HAL_RCC_OscConfig+0x52c>)
 8005264:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005266:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800526a:	2b00      	cmp	r3, #0
 800526c:	d10f      	bne.n	800528e <HAL_RCC_OscConfig+0x33a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800526e:	2300      	movs	r3, #0
 8005270:	60bb      	str	r3, [r7, #8]
 8005272:	4b83      	ldr	r3, [pc, #524]	; (8005480 <HAL_RCC_OscConfig+0x52c>)
 8005274:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005276:	4a82      	ldr	r2, [pc, #520]	; (8005480 <HAL_RCC_OscConfig+0x52c>)
 8005278:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800527c:	6413      	str	r3, [r2, #64]	; 0x40
 800527e:	4b80      	ldr	r3, [pc, #512]	; (8005480 <HAL_RCC_OscConfig+0x52c>)
 8005280:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005282:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005286:	60bb      	str	r3, [r7, #8]
 8005288:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800528a:	2301      	movs	r3, #1
 800528c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800528e:	4b7e      	ldr	r3, [pc, #504]	; (8005488 <HAL_RCC_OscConfig+0x534>)
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005296:	2b00      	cmp	r3, #0
 8005298:	d118      	bne.n	80052cc <HAL_RCC_OscConfig+0x378>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800529a:	4b7b      	ldr	r3, [pc, #492]	; (8005488 <HAL_RCC_OscConfig+0x534>)
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	4a7a      	ldr	r2, [pc, #488]	; (8005488 <HAL_RCC_OscConfig+0x534>)
 80052a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80052a4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80052a6:	f7fc fcb9 	bl	8001c1c <HAL_GetTick>
 80052aa:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80052ac:	e008      	b.n	80052c0 <HAL_RCC_OscConfig+0x36c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80052ae:	f7fc fcb5 	bl	8001c1c <HAL_GetTick>
 80052b2:	4602      	mov	r2, r0
 80052b4:	693b      	ldr	r3, [r7, #16]
 80052b6:	1ad3      	subs	r3, r2, r3
 80052b8:	2b02      	cmp	r3, #2
 80052ba:	d901      	bls.n	80052c0 <HAL_RCC_OscConfig+0x36c>
        {
          return HAL_TIMEOUT;
 80052bc:	2303      	movs	r3, #3
 80052be:	e160      	b.n	8005582 <HAL_RCC_OscConfig+0x62e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80052c0:	4b71      	ldr	r3, [pc, #452]	; (8005488 <HAL_RCC_OscConfig+0x534>)
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d0f0      	beq.n	80052ae <HAL_RCC_OscConfig+0x35a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	689b      	ldr	r3, [r3, #8]
 80052d0:	2b01      	cmp	r3, #1
 80052d2:	d106      	bne.n	80052e2 <HAL_RCC_OscConfig+0x38e>
 80052d4:	4b6a      	ldr	r3, [pc, #424]	; (8005480 <HAL_RCC_OscConfig+0x52c>)
 80052d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052d8:	4a69      	ldr	r2, [pc, #420]	; (8005480 <HAL_RCC_OscConfig+0x52c>)
 80052da:	f043 0301 	orr.w	r3, r3, #1
 80052de:	6713      	str	r3, [r2, #112]	; 0x70
 80052e0:	e01c      	b.n	800531c <HAL_RCC_OscConfig+0x3c8>
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	689b      	ldr	r3, [r3, #8]
 80052e6:	2b05      	cmp	r3, #5
 80052e8:	d10c      	bne.n	8005304 <HAL_RCC_OscConfig+0x3b0>
 80052ea:	4b65      	ldr	r3, [pc, #404]	; (8005480 <HAL_RCC_OscConfig+0x52c>)
 80052ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052ee:	4a64      	ldr	r2, [pc, #400]	; (8005480 <HAL_RCC_OscConfig+0x52c>)
 80052f0:	f043 0304 	orr.w	r3, r3, #4
 80052f4:	6713      	str	r3, [r2, #112]	; 0x70
 80052f6:	4b62      	ldr	r3, [pc, #392]	; (8005480 <HAL_RCC_OscConfig+0x52c>)
 80052f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052fa:	4a61      	ldr	r2, [pc, #388]	; (8005480 <HAL_RCC_OscConfig+0x52c>)
 80052fc:	f043 0301 	orr.w	r3, r3, #1
 8005300:	6713      	str	r3, [r2, #112]	; 0x70
 8005302:	e00b      	b.n	800531c <HAL_RCC_OscConfig+0x3c8>
 8005304:	4b5e      	ldr	r3, [pc, #376]	; (8005480 <HAL_RCC_OscConfig+0x52c>)
 8005306:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005308:	4a5d      	ldr	r2, [pc, #372]	; (8005480 <HAL_RCC_OscConfig+0x52c>)
 800530a:	f023 0301 	bic.w	r3, r3, #1
 800530e:	6713      	str	r3, [r2, #112]	; 0x70
 8005310:	4b5b      	ldr	r3, [pc, #364]	; (8005480 <HAL_RCC_OscConfig+0x52c>)
 8005312:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005314:	4a5a      	ldr	r2, [pc, #360]	; (8005480 <HAL_RCC_OscConfig+0x52c>)
 8005316:	f023 0304 	bic.w	r3, r3, #4
 800531a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	689b      	ldr	r3, [r3, #8]
 8005320:	2b00      	cmp	r3, #0
 8005322:	d015      	beq.n	8005350 <HAL_RCC_OscConfig+0x3fc>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005324:	f7fc fc7a 	bl	8001c1c <HAL_GetTick>
 8005328:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800532a:	e00a      	b.n	8005342 <HAL_RCC_OscConfig+0x3ee>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800532c:	f7fc fc76 	bl	8001c1c <HAL_GetTick>
 8005330:	4602      	mov	r2, r0
 8005332:	693b      	ldr	r3, [r7, #16]
 8005334:	1ad3      	subs	r3, r2, r3
 8005336:	f241 3288 	movw	r2, #5000	; 0x1388
 800533a:	4293      	cmp	r3, r2
 800533c:	d901      	bls.n	8005342 <HAL_RCC_OscConfig+0x3ee>
        {
          return HAL_TIMEOUT;
 800533e:	2303      	movs	r3, #3
 8005340:	e11f      	b.n	8005582 <HAL_RCC_OscConfig+0x62e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005342:	4b4f      	ldr	r3, [pc, #316]	; (8005480 <HAL_RCC_OscConfig+0x52c>)
 8005344:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005346:	f003 0302 	and.w	r3, r3, #2
 800534a:	2b00      	cmp	r3, #0
 800534c:	d0ee      	beq.n	800532c <HAL_RCC_OscConfig+0x3d8>
 800534e:	e014      	b.n	800537a <HAL_RCC_OscConfig+0x426>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005350:	f7fc fc64 	bl	8001c1c <HAL_GetTick>
 8005354:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005356:	e00a      	b.n	800536e <HAL_RCC_OscConfig+0x41a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005358:	f7fc fc60 	bl	8001c1c <HAL_GetTick>
 800535c:	4602      	mov	r2, r0
 800535e:	693b      	ldr	r3, [r7, #16]
 8005360:	1ad3      	subs	r3, r2, r3
 8005362:	f241 3288 	movw	r2, #5000	; 0x1388
 8005366:	4293      	cmp	r3, r2
 8005368:	d901      	bls.n	800536e <HAL_RCC_OscConfig+0x41a>
        {
          return HAL_TIMEOUT;
 800536a:	2303      	movs	r3, #3
 800536c:	e109      	b.n	8005582 <HAL_RCC_OscConfig+0x62e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800536e:	4b44      	ldr	r3, [pc, #272]	; (8005480 <HAL_RCC_OscConfig+0x52c>)
 8005370:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005372:	f003 0302 	and.w	r3, r3, #2
 8005376:	2b00      	cmp	r3, #0
 8005378:	d1ee      	bne.n	8005358 <HAL_RCC_OscConfig+0x404>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800537a:	7dfb      	ldrb	r3, [r7, #23]
 800537c:	2b01      	cmp	r3, #1
 800537e:	d105      	bne.n	800538c <HAL_RCC_OscConfig+0x438>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005380:	4b3f      	ldr	r3, [pc, #252]	; (8005480 <HAL_RCC_OscConfig+0x52c>)
 8005382:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005384:	4a3e      	ldr	r2, [pc, #248]	; (8005480 <HAL_RCC_OscConfig+0x52c>)
 8005386:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800538a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	699b      	ldr	r3, [r3, #24]
 8005390:	2b00      	cmp	r3, #0
 8005392:	d00c      	beq.n	80053ae <HAL_RCC_OscConfig+0x45a>
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	699b      	ldr	r3, [r3, #24]
 8005398:	2b01      	cmp	r3, #1
 800539a:	d008      	beq.n	80053ae <HAL_RCC_OscConfig+0x45a>
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	699b      	ldr	r3, [r3, #24]
 80053a0:	2b02      	cmp	r3, #2
 80053a2:	d004      	beq.n	80053ae <HAL_RCC_OscConfig+0x45a>
 80053a4:	f240 11cf 	movw	r1, #463	; 0x1cf
 80053a8:	4836      	ldr	r0, [pc, #216]	; (8005484 <HAL_RCC_OscConfig+0x530>)
 80053aa:	f7fc f962 	bl	8001672 <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	699b      	ldr	r3, [r3, #24]
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	f000 80e4 	beq.w	8005580 <HAL_RCC_OscConfig+0x62c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80053b8:	4b31      	ldr	r3, [pc, #196]	; (8005480 <HAL_RCC_OscConfig+0x52c>)
 80053ba:	689b      	ldr	r3, [r3, #8]
 80053bc:	f003 030c 	and.w	r3, r3, #12
 80053c0:	2b08      	cmp	r3, #8
 80053c2:	f000 80ae 	beq.w	8005522 <HAL_RCC_OscConfig+0x5ce>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	699b      	ldr	r3, [r3, #24]
 80053ca:	2b02      	cmp	r3, #2
 80053cc:	f040 8092 	bne.w	80054f4 <HAL_RCC_OscConfig+0x5a0>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	69db      	ldr	r3, [r3, #28]
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d009      	beq.n	80053ec <HAL_RCC_OscConfig+0x498>
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	69db      	ldr	r3, [r3, #28]
 80053dc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80053e0:	d004      	beq.n	80053ec <HAL_RCC_OscConfig+0x498>
 80053e2:	f44f 71ec 	mov.w	r1, #472	; 0x1d8
 80053e6:	4827      	ldr	r0, [pc, #156]	; (8005484 <HAL_RCC_OscConfig+0x530>)
 80053e8:	f7fc f943 	bl	8001672 <assert_failed>
        assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	6a1b      	ldr	r3, [r3, #32]
 80053f0:	2b3f      	cmp	r3, #63	; 0x3f
 80053f2:	d904      	bls.n	80053fe <HAL_RCC_OscConfig+0x4aa>
 80053f4:	f240 11d9 	movw	r1, #473	; 0x1d9
 80053f8:	4822      	ldr	r0, [pc, #136]	; (8005484 <HAL_RCC_OscConfig+0x530>)
 80053fa:	f7fc f93a 	bl	8001672 <assert_failed>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005402:	2bbf      	cmp	r3, #191	; 0xbf
 8005404:	d904      	bls.n	8005410 <HAL_RCC_OscConfig+0x4bc>
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800540a:	f5b3 7fd8 	cmp.w	r3, #432	; 0x1b0
 800540e:	d904      	bls.n	800541a <HAL_RCC_OscConfig+0x4c6>
 8005410:	f44f 71ed 	mov.w	r1, #474	; 0x1da
 8005414:	481b      	ldr	r0, [pc, #108]	; (8005484 <HAL_RCC_OscConfig+0x530>)
 8005416:	f7fc f92c 	bl	8001672 <assert_failed>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800541e:	2b02      	cmp	r3, #2
 8005420:	d010      	beq.n	8005444 <HAL_RCC_OscConfig+0x4f0>
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005426:	2b04      	cmp	r3, #4
 8005428:	d00c      	beq.n	8005444 <HAL_RCC_OscConfig+0x4f0>
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800542e:	2b06      	cmp	r3, #6
 8005430:	d008      	beq.n	8005444 <HAL_RCC_OscConfig+0x4f0>
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005436:	2b08      	cmp	r3, #8
 8005438:	d004      	beq.n	8005444 <HAL_RCC_OscConfig+0x4f0>
 800543a:	f240 11db 	movw	r1, #475	; 0x1db
 800543e:	4811      	ldr	r0, [pc, #68]	; (8005484 <HAL_RCC_OscConfig+0x530>)
 8005440:	f7fc f917 	bl	8001672 <assert_failed>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005448:	2b01      	cmp	r3, #1
 800544a:	d903      	bls.n	8005454 <HAL_RCC_OscConfig+0x500>
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005450:	2b0f      	cmp	r3, #15
 8005452:	d904      	bls.n	800545e <HAL_RCC_OscConfig+0x50a>
 8005454:	f44f 71ee 	mov.w	r1, #476	; 0x1dc
 8005458:	480a      	ldr	r0, [pc, #40]	; (8005484 <HAL_RCC_OscConfig+0x530>)
 800545a:	f7fc f90a 	bl	8001672 <assert_failed>

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800545e:	4b0b      	ldr	r3, [pc, #44]	; (800548c <HAL_RCC_OscConfig+0x538>)
 8005460:	2200      	movs	r2, #0
 8005462:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005464:	f7fc fbda 	bl	8001c1c <HAL_GetTick>
 8005468:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800546a:	e011      	b.n	8005490 <HAL_RCC_OscConfig+0x53c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800546c:	f7fc fbd6 	bl	8001c1c <HAL_GetTick>
 8005470:	4602      	mov	r2, r0
 8005472:	693b      	ldr	r3, [r7, #16]
 8005474:	1ad3      	subs	r3, r2, r3
 8005476:	2b02      	cmp	r3, #2
 8005478:	d90a      	bls.n	8005490 <HAL_RCC_OscConfig+0x53c>
          {
            return HAL_TIMEOUT;
 800547a:	2303      	movs	r3, #3
 800547c:	e081      	b.n	8005582 <HAL_RCC_OscConfig+0x62e>
 800547e:	bf00      	nop
 8005480:	40023800 	.word	0x40023800
 8005484:	0800dd88 	.word	0x0800dd88
 8005488:	40007000 	.word	0x40007000
 800548c:	42470060 	.word	0x42470060
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005490:	4b3e      	ldr	r3, [pc, #248]	; (800558c <HAL_RCC_OscConfig+0x638>)
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005498:	2b00      	cmp	r3, #0
 800549a:	d1e7      	bne.n	800546c <HAL_RCC_OscConfig+0x518>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	69da      	ldr	r2, [r3, #28]
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	6a1b      	ldr	r3, [r3, #32]
 80054a4:	431a      	orrs	r2, r3
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054aa:	019b      	lsls	r3, r3, #6
 80054ac:	431a      	orrs	r2, r3
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054b2:	085b      	lsrs	r3, r3, #1
 80054b4:	3b01      	subs	r3, #1
 80054b6:	041b      	lsls	r3, r3, #16
 80054b8:	431a      	orrs	r2, r3
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054be:	061b      	lsls	r3, r3, #24
 80054c0:	4932      	ldr	r1, [pc, #200]	; (800558c <HAL_RCC_OscConfig+0x638>)
 80054c2:	4313      	orrs	r3, r2
 80054c4:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80054c6:	4b32      	ldr	r3, [pc, #200]	; (8005590 <HAL_RCC_OscConfig+0x63c>)
 80054c8:	2201      	movs	r2, #1
 80054ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80054cc:	f7fc fba6 	bl	8001c1c <HAL_GetTick>
 80054d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80054d2:	e008      	b.n	80054e6 <HAL_RCC_OscConfig+0x592>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80054d4:	f7fc fba2 	bl	8001c1c <HAL_GetTick>
 80054d8:	4602      	mov	r2, r0
 80054da:	693b      	ldr	r3, [r7, #16]
 80054dc:	1ad3      	subs	r3, r2, r3
 80054de:	2b02      	cmp	r3, #2
 80054e0:	d901      	bls.n	80054e6 <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 80054e2:	2303      	movs	r3, #3
 80054e4:	e04d      	b.n	8005582 <HAL_RCC_OscConfig+0x62e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80054e6:	4b29      	ldr	r3, [pc, #164]	; (800558c <HAL_RCC_OscConfig+0x638>)
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d0f0      	beq.n	80054d4 <HAL_RCC_OscConfig+0x580>
 80054f2:	e045      	b.n	8005580 <HAL_RCC_OscConfig+0x62c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80054f4:	4b26      	ldr	r3, [pc, #152]	; (8005590 <HAL_RCC_OscConfig+0x63c>)
 80054f6:	2200      	movs	r2, #0
 80054f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80054fa:	f7fc fb8f 	bl	8001c1c <HAL_GetTick>
 80054fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005500:	e008      	b.n	8005514 <HAL_RCC_OscConfig+0x5c0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005502:	f7fc fb8b 	bl	8001c1c <HAL_GetTick>
 8005506:	4602      	mov	r2, r0
 8005508:	693b      	ldr	r3, [r7, #16]
 800550a:	1ad3      	subs	r3, r2, r3
 800550c:	2b02      	cmp	r3, #2
 800550e:	d901      	bls.n	8005514 <HAL_RCC_OscConfig+0x5c0>
          {
            return HAL_TIMEOUT;
 8005510:	2303      	movs	r3, #3
 8005512:	e036      	b.n	8005582 <HAL_RCC_OscConfig+0x62e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005514:	4b1d      	ldr	r3, [pc, #116]	; (800558c <HAL_RCC_OscConfig+0x638>)
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800551c:	2b00      	cmp	r3, #0
 800551e:	d1f0      	bne.n	8005502 <HAL_RCC_OscConfig+0x5ae>
 8005520:	e02e      	b.n	8005580 <HAL_RCC_OscConfig+0x62c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	699b      	ldr	r3, [r3, #24]
 8005526:	2b01      	cmp	r3, #1
 8005528:	d101      	bne.n	800552e <HAL_RCC_OscConfig+0x5da>
      {
        return HAL_ERROR;
 800552a:	2301      	movs	r3, #1
 800552c:	e029      	b.n	8005582 <HAL_RCC_OscConfig+0x62e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800552e:	4b17      	ldr	r3, [pc, #92]	; (800558c <HAL_RCC_OscConfig+0x638>)
 8005530:	685b      	ldr	r3, [r3, #4]
 8005532:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	69db      	ldr	r3, [r3, #28]
 800553e:	429a      	cmp	r2, r3
 8005540:	d11c      	bne.n	800557c <HAL_RCC_OscConfig+0x628>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800554c:	429a      	cmp	r2, r3
 800554e:	d115      	bne.n	800557c <HAL_RCC_OscConfig+0x628>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8005550:	68fa      	ldr	r2, [r7, #12]
 8005552:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005556:	4013      	ands	r3, r2
 8005558:	687a      	ldr	r2, [r7, #4]
 800555a:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800555c:	4293      	cmp	r3, r2
 800555e:	d10d      	bne.n	800557c <HAL_RCC_OscConfig+0x628>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800556a:	429a      	cmp	r2, r3
 800556c:	d106      	bne.n	800557c <HAL_RCC_OscConfig+0x628>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8005578:	429a      	cmp	r2, r3
 800557a:	d001      	beq.n	8005580 <HAL_RCC_OscConfig+0x62c>
        {
          return HAL_ERROR;
 800557c:	2301      	movs	r3, #1
 800557e:	e000      	b.n	8005582 <HAL_RCC_OscConfig+0x62e>
        }
      }
    }
  }
  return HAL_OK;
 8005580:	2300      	movs	r3, #0
}
 8005582:	4618      	mov	r0, r3
 8005584:	3718      	adds	r7, #24
 8005586:	46bd      	mov	sp, r7
 8005588:	bd80      	pop	{r7, pc}
 800558a:	bf00      	nop
 800558c:	40023800 	.word	0x40023800
 8005590:	42470060 	.word	0x42470060

08005594 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005594:	b580      	push	{r7, lr}
 8005596:	b084      	sub	sp, #16
 8005598:	af00      	add	r7, sp, #0
 800559a:	6078      	str	r0, [r7, #4]
 800559c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d101      	bne.n	80055a8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80055a4:	2301      	movs	r3, #1
 80055a6:	e174      	b.n	8005892 <HAL_RCC_ClockConfig+0x2fe>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d003      	beq.n	80055b8 <HAL_RCC_ClockConfig+0x24>
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	2b0f      	cmp	r3, #15
 80055b6:	d904      	bls.n	80055c2 <HAL_RCC_ClockConfig+0x2e>
 80055b8:	f240 2151 	movw	r1, #593	; 0x251
 80055bc:	487b      	ldr	r0, [pc, #492]	; (80057ac <HAL_RCC_ClockConfig+0x218>)
 80055be:	f7fc f858 	bl	8001672 <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 80055c2:	683b      	ldr	r3, [r7, #0]
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d019      	beq.n	80055fc <HAL_RCC_ClockConfig+0x68>
 80055c8:	683b      	ldr	r3, [r7, #0]
 80055ca:	2b01      	cmp	r3, #1
 80055cc:	d016      	beq.n	80055fc <HAL_RCC_ClockConfig+0x68>
 80055ce:	683b      	ldr	r3, [r7, #0]
 80055d0:	2b02      	cmp	r3, #2
 80055d2:	d013      	beq.n	80055fc <HAL_RCC_ClockConfig+0x68>
 80055d4:	683b      	ldr	r3, [r7, #0]
 80055d6:	2b03      	cmp	r3, #3
 80055d8:	d010      	beq.n	80055fc <HAL_RCC_ClockConfig+0x68>
 80055da:	683b      	ldr	r3, [r7, #0]
 80055dc:	2b04      	cmp	r3, #4
 80055de:	d00d      	beq.n	80055fc <HAL_RCC_ClockConfig+0x68>
 80055e0:	683b      	ldr	r3, [r7, #0]
 80055e2:	2b05      	cmp	r3, #5
 80055e4:	d00a      	beq.n	80055fc <HAL_RCC_ClockConfig+0x68>
 80055e6:	683b      	ldr	r3, [r7, #0]
 80055e8:	2b06      	cmp	r3, #6
 80055ea:	d007      	beq.n	80055fc <HAL_RCC_ClockConfig+0x68>
 80055ec:	683b      	ldr	r3, [r7, #0]
 80055ee:	2b07      	cmp	r3, #7
 80055f0:	d004      	beq.n	80055fc <HAL_RCC_ClockConfig+0x68>
 80055f2:	f240 2152 	movw	r1, #594	; 0x252
 80055f6:	486d      	ldr	r0, [pc, #436]	; (80057ac <HAL_RCC_ClockConfig+0x218>)
 80055f8:	f7fc f83b 	bl	8001672 <assert_failed>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80055fc:	4b6c      	ldr	r3, [pc, #432]	; (80057b0 <HAL_RCC_ClockConfig+0x21c>)
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	f003 030f 	and.w	r3, r3, #15
 8005604:	683a      	ldr	r2, [r7, #0]
 8005606:	429a      	cmp	r2, r3
 8005608:	d90c      	bls.n	8005624 <HAL_RCC_ClockConfig+0x90>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800560a:	4b69      	ldr	r3, [pc, #420]	; (80057b0 <HAL_RCC_ClockConfig+0x21c>)
 800560c:	683a      	ldr	r2, [r7, #0]
 800560e:	b2d2      	uxtb	r2, r2
 8005610:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005612:	4b67      	ldr	r3, [pc, #412]	; (80057b0 <HAL_RCC_ClockConfig+0x21c>)
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	f003 030f 	and.w	r3, r3, #15
 800561a:	683a      	ldr	r2, [r7, #0]
 800561c:	429a      	cmp	r2, r3
 800561e:	d001      	beq.n	8005624 <HAL_RCC_ClockConfig+0x90>
    {
      return HAL_ERROR;
 8005620:	2301      	movs	r3, #1
 8005622:	e136      	b.n	8005892 <HAL_RCC_ClockConfig+0x2fe>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	f003 0302 	and.w	r3, r3, #2
 800562c:	2b00      	cmp	r3, #0
 800562e:	d049      	beq.n	80056c4 <HAL_RCC_ClockConfig+0x130>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	f003 0304 	and.w	r3, r3, #4
 8005638:	2b00      	cmp	r3, #0
 800563a:	d005      	beq.n	8005648 <HAL_RCC_ClockConfig+0xb4>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800563c:	4b5d      	ldr	r3, [pc, #372]	; (80057b4 <HAL_RCC_ClockConfig+0x220>)
 800563e:	689b      	ldr	r3, [r3, #8]
 8005640:	4a5c      	ldr	r2, [pc, #368]	; (80057b4 <HAL_RCC_ClockConfig+0x220>)
 8005642:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005646:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	f003 0308 	and.w	r3, r3, #8
 8005650:	2b00      	cmp	r3, #0
 8005652:	d005      	beq.n	8005660 <HAL_RCC_ClockConfig+0xcc>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005654:	4b57      	ldr	r3, [pc, #348]	; (80057b4 <HAL_RCC_ClockConfig+0x220>)
 8005656:	689b      	ldr	r3, [r3, #8]
 8005658:	4a56      	ldr	r2, [pc, #344]	; (80057b4 <HAL_RCC_ClockConfig+0x220>)
 800565a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800565e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	689b      	ldr	r3, [r3, #8]
 8005664:	2b00      	cmp	r3, #0
 8005666:	d024      	beq.n	80056b2 <HAL_RCC_ClockConfig+0x11e>
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	689b      	ldr	r3, [r3, #8]
 800566c:	2b80      	cmp	r3, #128	; 0x80
 800566e:	d020      	beq.n	80056b2 <HAL_RCC_ClockConfig+0x11e>
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	689b      	ldr	r3, [r3, #8]
 8005674:	2b90      	cmp	r3, #144	; 0x90
 8005676:	d01c      	beq.n	80056b2 <HAL_RCC_ClockConfig+0x11e>
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	689b      	ldr	r3, [r3, #8]
 800567c:	2ba0      	cmp	r3, #160	; 0xa0
 800567e:	d018      	beq.n	80056b2 <HAL_RCC_ClockConfig+0x11e>
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	689b      	ldr	r3, [r3, #8]
 8005684:	2bb0      	cmp	r3, #176	; 0xb0
 8005686:	d014      	beq.n	80056b2 <HAL_RCC_ClockConfig+0x11e>
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	689b      	ldr	r3, [r3, #8]
 800568c:	2bc0      	cmp	r3, #192	; 0xc0
 800568e:	d010      	beq.n	80056b2 <HAL_RCC_ClockConfig+0x11e>
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	689b      	ldr	r3, [r3, #8]
 8005694:	2bd0      	cmp	r3, #208	; 0xd0
 8005696:	d00c      	beq.n	80056b2 <HAL_RCC_ClockConfig+0x11e>
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	689b      	ldr	r3, [r3, #8]
 800569c:	2be0      	cmp	r3, #224	; 0xe0
 800569e:	d008      	beq.n	80056b2 <HAL_RCC_ClockConfig+0x11e>
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	689b      	ldr	r3, [r3, #8]
 80056a4:	2bf0      	cmp	r3, #240	; 0xf0
 80056a6:	d004      	beq.n	80056b2 <HAL_RCC_ClockConfig+0x11e>
 80056a8:	f240 2175 	movw	r1, #629	; 0x275
 80056ac:	483f      	ldr	r0, [pc, #252]	; (80057ac <HAL_RCC_ClockConfig+0x218>)
 80056ae:	f7fb ffe0 	bl	8001672 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80056b2:	4b40      	ldr	r3, [pc, #256]	; (80057b4 <HAL_RCC_ClockConfig+0x220>)
 80056b4:	689b      	ldr	r3, [r3, #8]
 80056b6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	689b      	ldr	r3, [r3, #8]
 80056be:	493d      	ldr	r1, [pc, #244]	; (80057b4 <HAL_RCC_ClockConfig+0x220>)
 80056c0:	4313      	orrs	r3, r2
 80056c2:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	f003 0301 	and.w	r3, r3, #1
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d059      	beq.n	8005784 <HAL_RCC_ClockConfig+0x1f0>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	685b      	ldr	r3, [r3, #4]
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d010      	beq.n	80056fa <HAL_RCC_ClockConfig+0x166>
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	685b      	ldr	r3, [r3, #4]
 80056dc:	2b01      	cmp	r3, #1
 80056de:	d00c      	beq.n	80056fa <HAL_RCC_ClockConfig+0x166>
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	685b      	ldr	r3, [r3, #4]
 80056e4:	2b02      	cmp	r3, #2
 80056e6:	d008      	beq.n	80056fa <HAL_RCC_ClockConfig+0x166>
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	685b      	ldr	r3, [r3, #4]
 80056ec:	2b03      	cmp	r3, #3
 80056ee:	d004      	beq.n	80056fa <HAL_RCC_ClockConfig+0x166>
 80056f0:	f44f 711f 	mov.w	r1, #636	; 0x27c
 80056f4:	482d      	ldr	r0, [pc, #180]	; (80057ac <HAL_RCC_ClockConfig+0x218>)
 80056f6:	f7fb ffbc 	bl	8001672 <assert_failed>

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	685b      	ldr	r3, [r3, #4]
 80056fe:	2b01      	cmp	r3, #1
 8005700:	d107      	bne.n	8005712 <HAL_RCC_ClockConfig+0x17e>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005702:	4b2c      	ldr	r3, [pc, #176]	; (80057b4 <HAL_RCC_ClockConfig+0x220>)
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800570a:	2b00      	cmp	r3, #0
 800570c:	d119      	bne.n	8005742 <HAL_RCC_ClockConfig+0x1ae>
      {
        return HAL_ERROR;
 800570e:	2301      	movs	r3, #1
 8005710:	e0bf      	b.n	8005892 <HAL_RCC_ClockConfig+0x2fe>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	685b      	ldr	r3, [r3, #4]
 8005716:	2b02      	cmp	r3, #2
 8005718:	d003      	beq.n	8005722 <HAL_RCC_ClockConfig+0x18e>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800571e:	2b03      	cmp	r3, #3
 8005720:	d107      	bne.n	8005732 <HAL_RCC_ClockConfig+0x19e>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005722:	4b24      	ldr	r3, [pc, #144]	; (80057b4 <HAL_RCC_ClockConfig+0x220>)
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800572a:	2b00      	cmp	r3, #0
 800572c:	d109      	bne.n	8005742 <HAL_RCC_ClockConfig+0x1ae>
      {
        return HAL_ERROR;
 800572e:	2301      	movs	r3, #1
 8005730:	e0af      	b.n	8005892 <HAL_RCC_ClockConfig+0x2fe>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005732:	4b20      	ldr	r3, [pc, #128]	; (80057b4 <HAL_RCC_ClockConfig+0x220>)
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	f003 0302 	and.w	r3, r3, #2
 800573a:	2b00      	cmp	r3, #0
 800573c:	d101      	bne.n	8005742 <HAL_RCC_ClockConfig+0x1ae>
      {
        return HAL_ERROR;
 800573e:	2301      	movs	r3, #1
 8005740:	e0a7      	b.n	8005892 <HAL_RCC_ClockConfig+0x2fe>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005742:	4b1c      	ldr	r3, [pc, #112]	; (80057b4 <HAL_RCC_ClockConfig+0x220>)
 8005744:	689b      	ldr	r3, [r3, #8]
 8005746:	f023 0203 	bic.w	r2, r3, #3
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	685b      	ldr	r3, [r3, #4]
 800574e:	4919      	ldr	r1, [pc, #100]	; (80057b4 <HAL_RCC_ClockConfig+0x220>)
 8005750:	4313      	orrs	r3, r2
 8005752:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005754:	f7fc fa62 	bl	8001c1c <HAL_GetTick>
 8005758:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800575a:	e00a      	b.n	8005772 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800575c:	f7fc fa5e 	bl	8001c1c <HAL_GetTick>
 8005760:	4602      	mov	r2, r0
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	1ad3      	subs	r3, r2, r3
 8005766:	f241 3288 	movw	r2, #5000	; 0x1388
 800576a:	4293      	cmp	r3, r2
 800576c:	d901      	bls.n	8005772 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800576e:	2303      	movs	r3, #3
 8005770:	e08f      	b.n	8005892 <HAL_RCC_ClockConfig+0x2fe>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005772:	4b10      	ldr	r3, [pc, #64]	; (80057b4 <HAL_RCC_ClockConfig+0x220>)
 8005774:	689b      	ldr	r3, [r3, #8]
 8005776:	f003 020c 	and.w	r2, r3, #12
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	685b      	ldr	r3, [r3, #4]
 800577e:	009b      	lsls	r3, r3, #2
 8005780:	429a      	cmp	r2, r3
 8005782:	d1eb      	bne.n	800575c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005784:	4b0a      	ldr	r3, [pc, #40]	; (80057b0 <HAL_RCC_ClockConfig+0x21c>)
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	f003 030f 	and.w	r3, r3, #15
 800578c:	683a      	ldr	r2, [r7, #0]
 800578e:	429a      	cmp	r2, r3
 8005790:	d212      	bcs.n	80057b8 <HAL_RCC_ClockConfig+0x224>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005792:	4b07      	ldr	r3, [pc, #28]	; (80057b0 <HAL_RCC_ClockConfig+0x21c>)
 8005794:	683a      	ldr	r2, [r7, #0]
 8005796:	b2d2      	uxtb	r2, r2
 8005798:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800579a:	4b05      	ldr	r3, [pc, #20]	; (80057b0 <HAL_RCC_ClockConfig+0x21c>)
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	f003 030f 	and.w	r3, r3, #15
 80057a2:	683a      	ldr	r2, [r7, #0]
 80057a4:	429a      	cmp	r2, r3
 80057a6:	d007      	beq.n	80057b8 <HAL_RCC_ClockConfig+0x224>
    {
      return HAL_ERROR;
 80057a8:	2301      	movs	r3, #1
 80057aa:	e072      	b.n	8005892 <HAL_RCC_ClockConfig+0x2fe>
 80057ac:	0800dd88 	.word	0x0800dd88
 80057b0:	40023c00 	.word	0x40023c00
 80057b4:	40023800 	.word	0x40023800
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	f003 0304 	and.w	r3, r3, #4
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d025      	beq.n	8005810 <HAL_RCC_ClockConfig+0x27c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	68db      	ldr	r3, [r3, #12]
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d018      	beq.n	80057fe <HAL_RCC_ClockConfig+0x26a>
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	68db      	ldr	r3, [r3, #12]
 80057d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80057d4:	d013      	beq.n	80057fe <HAL_RCC_ClockConfig+0x26a>
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	68db      	ldr	r3, [r3, #12]
 80057da:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80057de:	d00e      	beq.n	80057fe <HAL_RCC_ClockConfig+0x26a>
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	68db      	ldr	r3, [r3, #12]
 80057e4:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 80057e8:	d009      	beq.n	80057fe <HAL_RCC_ClockConfig+0x26a>
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	68db      	ldr	r3, [r3, #12]
 80057ee:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 80057f2:	d004      	beq.n	80057fe <HAL_RCC_ClockConfig+0x26a>
 80057f4:	f240 21ba 	movw	r1, #698	; 0x2ba
 80057f8:	4828      	ldr	r0, [pc, #160]	; (800589c <HAL_RCC_ClockConfig+0x308>)
 80057fa:	f7fb ff3a 	bl	8001672 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80057fe:	4b28      	ldr	r3, [pc, #160]	; (80058a0 <HAL_RCC_ClockConfig+0x30c>)
 8005800:	689b      	ldr	r3, [r3, #8]
 8005802:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	68db      	ldr	r3, [r3, #12]
 800580a:	4925      	ldr	r1, [pc, #148]	; (80058a0 <HAL_RCC_ClockConfig+0x30c>)
 800580c:	4313      	orrs	r3, r2
 800580e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	f003 0308 	and.w	r3, r3, #8
 8005818:	2b00      	cmp	r3, #0
 800581a:	d026      	beq.n	800586a <HAL_RCC_ClockConfig+0x2d6>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	691b      	ldr	r3, [r3, #16]
 8005820:	2b00      	cmp	r3, #0
 8005822:	d018      	beq.n	8005856 <HAL_RCC_ClockConfig+0x2c2>
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	691b      	ldr	r3, [r3, #16]
 8005828:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800582c:	d013      	beq.n	8005856 <HAL_RCC_ClockConfig+0x2c2>
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	691b      	ldr	r3, [r3, #16]
 8005832:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8005836:	d00e      	beq.n	8005856 <HAL_RCC_ClockConfig+0x2c2>
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	691b      	ldr	r3, [r3, #16]
 800583c:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8005840:	d009      	beq.n	8005856 <HAL_RCC_ClockConfig+0x2c2>
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	691b      	ldr	r3, [r3, #16]
 8005846:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 800584a:	d004      	beq.n	8005856 <HAL_RCC_ClockConfig+0x2c2>
 800584c:	f240 21c1 	movw	r1, #705	; 0x2c1
 8005850:	4812      	ldr	r0, [pc, #72]	; (800589c <HAL_RCC_ClockConfig+0x308>)
 8005852:	f7fb ff0e 	bl	8001672 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005856:	4b12      	ldr	r3, [pc, #72]	; (80058a0 <HAL_RCC_ClockConfig+0x30c>)
 8005858:	689b      	ldr	r3, [r3, #8]
 800585a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	691b      	ldr	r3, [r3, #16]
 8005862:	00db      	lsls	r3, r3, #3
 8005864:	490e      	ldr	r1, [pc, #56]	; (80058a0 <HAL_RCC_ClockConfig+0x30c>)
 8005866:	4313      	orrs	r3, r2
 8005868:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800586a:	f000 f821 	bl	80058b0 <HAL_RCC_GetSysClockFreq>
 800586e:	4601      	mov	r1, r0
 8005870:	4b0b      	ldr	r3, [pc, #44]	; (80058a0 <HAL_RCC_ClockConfig+0x30c>)
 8005872:	689b      	ldr	r3, [r3, #8]
 8005874:	091b      	lsrs	r3, r3, #4
 8005876:	f003 030f 	and.w	r3, r3, #15
 800587a:	4a0a      	ldr	r2, [pc, #40]	; (80058a4 <HAL_RCC_ClockConfig+0x310>)
 800587c:	5cd3      	ldrb	r3, [r2, r3]
 800587e:	fa21 f303 	lsr.w	r3, r1, r3
 8005882:	4a09      	ldr	r2, [pc, #36]	; (80058a8 <HAL_RCC_ClockConfig+0x314>)
 8005884:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005886:	4b09      	ldr	r3, [pc, #36]	; (80058ac <HAL_RCC_ClockConfig+0x318>)
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	4618      	mov	r0, r3
 800588c:	f7fc f982 	bl	8001b94 <HAL_InitTick>

  return HAL_OK;
 8005890:	2300      	movs	r3, #0
}
 8005892:	4618      	mov	r0, r3
 8005894:	3710      	adds	r7, #16
 8005896:	46bd      	mov	sp, r7
 8005898:	bd80      	pop	{r7, pc}
 800589a:	bf00      	nop
 800589c:	0800dd88 	.word	0x0800dd88
 80058a0:	40023800 	.word	0x40023800
 80058a4:	0800df28 	.word	0x0800df28
 80058a8:	20000400 	.word	0x20000400
 80058ac:	20000404 	.word	0x20000404

080058b0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80058b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80058b2:	b085      	sub	sp, #20
 80058b4:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80058b6:	2300      	movs	r3, #0
 80058b8:	607b      	str	r3, [r7, #4]
 80058ba:	2300      	movs	r3, #0
 80058bc:	60fb      	str	r3, [r7, #12]
 80058be:	2300      	movs	r3, #0
 80058c0:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80058c2:	2300      	movs	r3, #0
 80058c4:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80058c6:	4b63      	ldr	r3, [pc, #396]	; (8005a54 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80058c8:	689b      	ldr	r3, [r3, #8]
 80058ca:	f003 030c 	and.w	r3, r3, #12
 80058ce:	2b04      	cmp	r3, #4
 80058d0:	d007      	beq.n	80058e2 <HAL_RCC_GetSysClockFreq+0x32>
 80058d2:	2b08      	cmp	r3, #8
 80058d4:	d008      	beq.n	80058e8 <HAL_RCC_GetSysClockFreq+0x38>
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	f040 80b4 	bne.w	8005a44 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80058dc:	4b5e      	ldr	r3, [pc, #376]	; (8005a58 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80058de:	60bb      	str	r3, [r7, #8]
       break;
 80058e0:	e0b3      	b.n	8005a4a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80058e2:	4b5e      	ldr	r3, [pc, #376]	; (8005a5c <HAL_RCC_GetSysClockFreq+0x1ac>)
 80058e4:	60bb      	str	r3, [r7, #8]
      break;
 80058e6:	e0b0      	b.n	8005a4a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80058e8:	4b5a      	ldr	r3, [pc, #360]	; (8005a54 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80058ea:	685b      	ldr	r3, [r3, #4]
 80058ec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80058f0:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80058f2:	4b58      	ldr	r3, [pc, #352]	; (8005a54 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80058f4:	685b      	ldr	r3, [r3, #4]
 80058f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d04a      	beq.n	8005994 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80058fe:	4b55      	ldr	r3, [pc, #340]	; (8005a54 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005900:	685b      	ldr	r3, [r3, #4]
 8005902:	099b      	lsrs	r3, r3, #6
 8005904:	f04f 0400 	mov.w	r4, #0
 8005908:	f240 11ff 	movw	r1, #511	; 0x1ff
 800590c:	f04f 0200 	mov.w	r2, #0
 8005910:	ea03 0501 	and.w	r5, r3, r1
 8005914:	ea04 0602 	and.w	r6, r4, r2
 8005918:	4629      	mov	r1, r5
 800591a:	4632      	mov	r2, r6
 800591c:	f04f 0300 	mov.w	r3, #0
 8005920:	f04f 0400 	mov.w	r4, #0
 8005924:	0154      	lsls	r4, r2, #5
 8005926:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800592a:	014b      	lsls	r3, r1, #5
 800592c:	4619      	mov	r1, r3
 800592e:	4622      	mov	r2, r4
 8005930:	1b49      	subs	r1, r1, r5
 8005932:	eb62 0206 	sbc.w	r2, r2, r6
 8005936:	f04f 0300 	mov.w	r3, #0
 800593a:	f04f 0400 	mov.w	r4, #0
 800593e:	0194      	lsls	r4, r2, #6
 8005940:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8005944:	018b      	lsls	r3, r1, #6
 8005946:	1a5b      	subs	r3, r3, r1
 8005948:	eb64 0402 	sbc.w	r4, r4, r2
 800594c:	f04f 0100 	mov.w	r1, #0
 8005950:	f04f 0200 	mov.w	r2, #0
 8005954:	00e2      	lsls	r2, r4, #3
 8005956:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800595a:	00d9      	lsls	r1, r3, #3
 800595c:	460b      	mov	r3, r1
 800595e:	4614      	mov	r4, r2
 8005960:	195b      	adds	r3, r3, r5
 8005962:	eb44 0406 	adc.w	r4, r4, r6
 8005966:	f04f 0100 	mov.w	r1, #0
 800596a:	f04f 0200 	mov.w	r2, #0
 800596e:	0262      	lsls	r2, r4, #9
 8005970:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8005974:	0259      	lsls	r1, r3, #9
 8005976:	460b      	mov	r3, r1
 8005978:	4614      	mov	r4, r2
 800597a:	4618      	mov	r0, r3
 800597c:	4621      	mov	r1, r4
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	f04f 0400 	mov.w	r4, #0
 8005984:	461a      	mov	r2, r3
 8005986:	4623      	mov	r3, r4
 8005988:	f7fb f86c 	bl	8000a64 <__aeabi_uldivmod>
 800598c:	4603      	mov	r3, r0
 800598e:	460c      	mov	r4, r1
 8005990:	60fb      	str	r3, [r7, #12]
 8005992:	e049      	b.n	8005a28 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005994:	4b2f      	ldr	r3, [pc, #188]	; (8005a54 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005996:	685b      	ldr	r3, [r3, #4]
 8005998:	099b      	lsrs	r3, r3, #6
 800599a:	f04f 0400 	mov.w	r4, #0
 800599e:	f240 11ff 	movw	r1, #511	; 0x1ff
 80059a2:	f04f 0200 	mov.w	r2, #0
 80059a6:	ea03 0501 	and.w	r5, r3, r1
 80059aa:	ea04 0602 	and.w	r6, r4, r2
 80059ae:	4629      	mov	r1, r5
 80059b0:	4632      	mov	r2, r6
 80059b2:	f04f 0300 	mov.w	r3, #0
 80059b6:	f04f 0400 	mov.w	r4, #0
 80059ba:	0154      	lsls	r4, r2, #5
 80059bc:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80059c0:	014b      	lsls	r3, r1, #5
 80059c2:	4619      	mov	r1, r3
 80059c4:	4622      	mov	r2, r4
 80059c6:	1b49      	subs	r1, r1, r5
 80059c8:	eb62 0206 	sbc.w	r2, r2, r6
 80059cc:	f04f 0300 	mov.w	r3, #0
 80059d0:	f04f 0400 	mov.w	r4, #0
 80059d4:	0194      	lsls	r4, r2, #6
 80059d6:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80059da:	018b      	lsls	r3, r1, #6
 80059dc:	1a5b      	subs	r3, r3, r1
 80059de:	eb64 0402 	sbc.w	r4, r4, r2
 80059e2:	f04f 0100 	mov.w	r1, #0
 80059e6:	f04f 0200 	mov.w	r2, #0
 80059ea:	00e2      	lsls	r2, r4, #3
 80059ec:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80059f0:	00d9      	lsls	r1, r3, #3
 80059f2:	460b      	mov	r3, r1
 80059f4:	4614      	mov	r4, r2
 80059f6:	195b      	adds	r3, r3, r5
 80059f8:	eb44 0406 	adc.w	r4, r4, r6
 80059fc:	f04f 0100 	mov.w	r1, #0
 8005a00:	f04f 0200 	mov.w	r2, #0
 8005a04:	02a2      	lsls	r2, r4, #10
 8005a06:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8005a0a:	0299      	lsls	r1, r3, #10
 8005a0c:	460b      	mov	r3, r1
 8005a0e:	4614      	mov	r4, r2
 8005a10:	4618      	mov	r0, r3
 8005a12:	4621      	mov	r1, r4
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	f04f 0400 	mov.w	r4, #0
 8005a1a:	461a      	mov	r2, r3
 8005a1c:	4623      	mov	r3, r4
 8005a1e:	f7fb f821 	bl	8000a64 <__aeabi_uldivmod>
 8005a22:	4603      	mov	r3, r0
 8005a24:	460c      	mov	r4, r1
 8005a26:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005a28:	4b0a      	ldr	r3, [pc, #40]	; (8005a54 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005a2a:	685b      	ldr	r3, [r3, #4]
 8005a2c:	0c1b      	lsrs	r3, r3, #16
 8005a2e:	f003 0303 	and.w	r3, r3, #3
 8005a32:	3301      	adds	r3, #1
 8005a34:	005b      	lsls	r3, r3, #1
 8005a36:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8005a38:	68fa      	ldr	r2, [r7, #12]
 8005a3a:	683b      	ldr	r3, [r7, #0]
 8005a3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a40:	60bb      	str	r3, [r7, #8]
      break;
 8005a42:	e002      	b.n	8005a4a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005a44:	4b04      	ldr	r3, [pc, #16]	; (8005a58 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8005a46:	60bb      	str	r3, [r7, #8]
      break;
 8005a48:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005a4a:	68bb      	ldr	r3, [r7, #8]
}
 8005a4c:	4618      	mov	r0, r3
 8005a4e:	3714      	adds	r7, #20
 8005a50:	46bd      	mov	sp, r7
 8005a52:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005a54:	40023800 	.word	0x40023800
 8005a58:	00f42400 	.word	0x00f42400
 8005a5c:	007a1200 	.word	0x007a1200

08005a60 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005a60:	b480      	push	{r7}
 8005a62:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005a64:	4b03      	ldr	r3, [pc, #12]	; (8005a74 <HAL_RCC_GetHCLKFreq+0x14>)
 8005a66:	681b      	ldr	r3, [r3, #0]
}
 8005a68:	4618      	mov	r0, r3
 8005a6a:	46bd      	mov	sp, r7
 8005a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a70:	4770      	bx	lr
 8005a72:	bf00      	nop
 8005a74:	20000400 	.word	0x20000400

08005a78 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005a78:	b580      	push	{r7, lr}
 8005a7a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005a7c:	f7ff fff0 	bl	8005a60 <HAL_RCC_GetHCLKFreq>
 8005a80:	4601      	mov	r1, r0
 8005a82:	4b05      	ldr	r3, [pc, #20]	; (8005a98 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005a84:	689b      	ldr	r3, [r3, #8]
 8005a86:	0a9b      	lsrs	r3, r3, #10
 8005a88:	f003 0307 	and.w	r3, r3, #7
 8005a8c:	4a03      	ldr	r2, [pc, #12]	; (8005a9c <HAL_RCC_GetPCLK1Freq+0x24>)
 8005a8e:	5cd3      	ldrb	r3, [r2, r3]
 8005a90:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005a94:	4618      	mov	r0, r3
 8005a96:	bd80      	pop	{r7, pc}
 8005a98:	40023800 	.word	0x40023800
 8005a9c:	0800df38 	.word	0x0800df38

08005aa0 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005aa0:	b580      	push	{r7, lr}
 8005aa2:	b086      	sub	sp, #24
 8005aa4:	af00      	add	r7, sp, #0
 8005aa6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005aa8:	2300      	movs	r3, #0
 8005aaa:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8005aac:	2300      	movs	r3, #0
 8005aae:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d003      	beq.n	8005ac0 <HAL_RCCEx_PeriphCLKConfig+0x20>
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	2b0f      	cmp	r3, #15
 8005abe:	d904      	bls.n	8005aca <HAL_RCCEx_PeriphCLKConfig+0x2a>
 8005ac0:	f640 11d9 	movw	r1, #2521	; 0x9d9
 8005ac4:	489d      	ldr	r0, [pc, #628]	; (8005d3c <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8005ac6:	f7fb fdd4 	bl	8001672 <assert_failed>

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	f003 0301 	and.w	r3, r3, #1
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d105      	bne.n	8005ae2 <HAL_RCCEx_PeriphCLKConfig+0x42>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d060      	beq.n	8005ba4 <HAL_RCCEx_PeriphCLKConfig+0x104>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	68db      	ldr	r3, [r3, #12]
 8005ae6:	2b01      	cmp	r3, #1
 8005ae8:	d903      	bls.n	8005af2 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	68db      	ldr	r3, [r3, #12]
 8005aee:	2b07      	cmp	r3, #7
 8005af0:	d904      	bls.n	8005afc <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8005af2:	f44f 611e 	mov.w	r1, #2528	; 0x9e0
 8005af6:	4891      	ldr	r0, [pc, #580]	; (8005d3c <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8005af8:	f7fb fdbb 	bl	8001672 <assert_failed>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	689b      	ldr	r3, [r3, #8]
 8005b00:	2bbf      	cmp	r3, #191	; 0xbf
 8005b02:	d904      	bls.n	8005b0e <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	689b      	ldr	r3, [r3, #8]
 8005b08:	f5b3 7fd8 	cmp.w	r3, #432	; 0x1b0
 8005b0c:	d904      	bls.n	8005b18 <HAL_RCCEx_PeriphCLKConfig+0x78>
 8005b0e:	f640 11e1 	movw	r1, #2529	; 0x9e1
 8005b12:	488a      	ldr	r0, [pc, #552]	; (8005d3c <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8005b14:	f7fb fdad 	bl	8001672 <assert_failed>
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	685b      	ldr	r3, [r3, #4]
 8005b1c:	2b01      	cmp	r3, #1
 8005b1e:	d903      	bls.n	8005b28 <HAL_RCCEx_PeriphCLKConfig+0x88>
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	685b      	ldr	r3, [r3, #4]
 8005b24:	2b3f      	cmp	r3, #63	; 0x3f
 8005b26:	d904      	bls.n	8005b32 <HAL_RCCEx_PeriphCLKConfig+0x92>
 8005b28:	f640 11e3 	movw	r1, #2531	; 0x9e3
 8005b2c:	4883      	ldr	r0, [pc, #524]	; (8005d3c <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8005b2e:	f7fb fda0 	bl	8001672 <assert_failed>
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005b32:	4b83      	ldr	r3, [pc, #524]	; (8005d40 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 8005b34:	2200      	movs	r2, #0
 8005b36:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005b38:	f7fc f870 	bl	8001c1c <HAL_GetTick>
 8005b3c:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005b3e:	e008      	b.n	8005b52 <HAL_RCCEx_PeriphCLKConfig+0xb2>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005b40:	f7fc f86c 	bl	8001c1c <HAL_GetTick>
 8005b44:	4602      	mov	r2, r0
 8005b46:	697b      	ldr	r3, [r7, #20]
 8005b48:	1ad3      	subs	r3, r2, r3
 8005b4a:	2b02      	cmp	r3, #2
 8005b4c:	d901      	bls.n	8005b52 <HAL_RCCEx_PeriphCLKConfig+0xb2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005b4e:	2303      	movs	r3, #3
 8005b50:	e1ae      	b.n	8005eb0 <HAL_RCCEx_PeriphCLKConfig+0x410>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005b52:	4b7c      	ldr	r3, [pc, #496]	; (8005d44 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d1f0      	bne.n	8005b40 <HAL_RCCEx_PeriphCLKConfig+0xa0>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	685a      	ldr	r2, [r3, #4]
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	689b      	ldr	r3, [r3, #8]
 8005b66:	019b      	lsls	r3, r3, #6
 8005b68:	431a      	orrs	r2, r3
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	68db      	ldr	r3, [r3, #12]
 8005b6e:	071b      	lsls	r3, r3, #28
 8005b70:	4974      	ldr	r1, [pc, #464]	; (8005d44 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 8005b72:	4313      	orrs	r3, r2
 8005b74:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005b78:	4b71      	ldr	r3, [pc, #452]	; (8005d40 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 8005b7a:	2201      	movs	r2, #1
 8005b7c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005b7e:	f7fc f84d 	bl	8001c1c <HAL_GetTick>
 8005b82:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005b84:	e008      	b.n	8005b98 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005b86:	f7fc f849 	bl	8001c1c <HAL_GetTick>
 8005b8a:	4602      	mov	r2, r0
 8005b8c:	697b      	ldr	r3, [r7, #20]
 8005b8e:	1ad3      	subs	r3, r2, r3
 8005b90:	2b02      	cmp	r3, #2
 8005b92:	d901      	bls.n	8005b98 <HAL_RCCEx_PeriphCLKConfig+0xf8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005b94:	2303      	movs	r3, #3
 8005b96:	e18b      	b.n	8005eb0 <HAL_RCCEx_PeriphCLKConfig+0x410>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005b98:	4b6a      	ldr	r3, [pc, #424]	; (8005d44 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d0f0      	beq.n	8005b86 <HAL_RCCEx_PeriphCLKConfig+0xe6>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	f003 0302 	and.w	r3, r3, #2
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	f000 8174 	beq.w	8005e9a <HAL_RCCEx_PeriphCLKConfig+0x3fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	691b      	ldr	r3, [r3, #16]
 8005bb6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005bba:	f000 80a6 	beq.w	8005d0a <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	691b      	ldr	r3, [r3, #16]
 8005bc2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005bc6:	f000 80a0 	beq.w	8005d0a <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	691b      	ldr	r3, [r3, #16]
 8005bce:	4a5e      	ldr	r2, [pc, #376]	; (8005d48 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 8005bd0:	4293      	cmp	r3, r2
 8005bd2:	f000 809a 	beq.w	8005d0a <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	691b      	ldr	r3, [r3, #16]
 8005bda:	4a5c      	ldr	r2, [pc, #368]	; (8005d4c <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 8005bdc:	4293      	cmp	r3, r2
 8005bde:	f000 8094 	beq.w	8005d0a <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	691b      	ldr	r3, [r3, #16]
 8005be6:	4a5a      	ldr	r2, [pc, #360]	; (8005d50 <HAL_RCCEx_PeriphCLKConfig+0x2b0>)
 8005be8:	4293      	cmp	r3, r2
 8005bea:	f000 808e 	beq.w	8005d0a <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	691b      	ldr	r3, [r3, #16]
 8005bf2:	4a58      	ldr	r2, [pc, #352]	; (8005d54 <HAL_RCCEx_PeriphCLKConfig+0x2b4>)
 8005bf4:	4293      	cmp	r3, r2
 8005bf6:	f000 8088 	beq.w	8005d0a <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	691b      	ldr	r3, [r3, #16]
 8005bfe:	4a56      	ldr	r2, [pc, #344]	; (8005d58 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8005c00:	4293      	cmp	r3, r2
 8005c02:	f000 8082 	beq.w	8005d0a <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	691b      	ldr	r3, [r3, #16]
 8005c0a:	4a54      	ldr	r2, [pc, #336]	; (8005d5c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8005c0c:	4293      	cmp	r3, r2
 8005c0e:	d07c      	beq.n	8005d0a <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	691b      	ldr	r3, [r3, #16]
 8005c14:	4a52      	ldr	r2, [pc, #328]	; (8005d60 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8005c16:	4293      	cmp	r3, r2
 8005c18:	d077      	beq.n	8005d0a <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	691b      	ldr	r3, [r3, #16]
 8005c1e:	4a51      	ldr	r2, [pc, #324]	; (8005d64 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005c20:	4293      	cmp	r3, r2
 8005c22:	d072      	beq.n	8005d0a <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	691b      	ldr	r3, [r3, #16]
 8005c28:	4a4f      	ldr	r2, [pc, #316]	; (8005d68 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8005c2a:	4293      	cmp	r3, r2
 8005c2c:	d06d      	beq.n	8005d0a <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	691b      	ldr	r3, [r3, #16]
 8005c32:	4a4e      	ldr	r2, [pc, #312]	; (8005d6c <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8005c34:	4293      	cmp	r3, r2
 8005c36:	d068      	beq.n	8005d0a <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	691b      	ldr	r3, [r3, #16]
 8005c3c:	4a4c      	ldr	r2, [pc, #304]	; (8005d70 <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 8005c3e:	4293      	cmp	r3, r2
 8005c40:	d063      	beq.n	8005d0a <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	691b      	ldr	r3, [r3, #16]
 8005c46:	4a4b      	ldr	r2, [pc, #300]	; (8005d74 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005c48:	4293      	cmp	r3, r2
 8005c4a:	d05e      	beq.n	8005d0a <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	691b      	ldr	r3, [r3, #16]
 8005c50:	4a49      	ldr	r2, [pc, #292]	; (8005d78 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8005c52:	4293      	cmp	r3, r2
 8005c54:	d059      	beq.n	8005d0a <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	691b      	ldr	r3, [r3, #16]
 8005c5a:	4a48      	ldr	r2, [pc, #288]	; (8005d7c <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 8005c5c:	4293      	cmp	r3, r2
 8005c5e:	d054      	beq.n	8005d0a <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	691b      	ldr	r3, [r3, #16]
 8005c64:	4a46      	ldr	r2, [pc, #280]	; (8005d80 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8005c66:	4293      	cmp	r3, r2
 8005c68:	d04f      	beq.n	8005d0a <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	691b      	ldr	r3, [r3, #16]
 8005c6e:	4a45      	ldr	r2, [pc, #276]	; (8005d84 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8005c70:	4293      	cmp	r3, r2
 8005c72:	d04a      	beq.n	8005d0a <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	691b      	ldr	r3, [r3, #16]
 8005c78:	4a43      	ldr	r2, [pc, #268]	; (8005d88 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8005c7a:	4293      	cmp	r3, r2
 8005c7c:	d045      	beq.n	8005d0a <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	691b      	ldr	r3, [r3, #16]
 8005c82:	4a42      	ldr	r2, [pc, #264]	; (8005d8c <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8005c84:	4293      	cmp	r3, r2
 8005c86:	d040      	beq.n	8005d0a <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	691b      	ldr	r3, [r3, #16]
 8005c8c:	4a40      	ldr	r2, [pc, #256]	; (8005d90 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005c8e:	4293      	cmp	r3, r2
 8005c90:	d03b      	beq.n	8005d0a <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	691b      	ldr	r3, [r3, #16]
 8005c96:	4a3f      	ldr	r2, [pc, #252]	; (8005d94 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005c98:	4293      	cmp	r3, r2
 8005c9a:	d036      	beq.n	8005d0a <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	691b      	ldr	r3, [r3, #16]
 8005ca0:	4a3d      	ldr	r2, [pc, #244]	; (8005d98 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8005ca2:	4293      	cmp	r3, r2
 8005ca4:	d031      	beq.n	8005d0a <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	691b      	ldr	r3, [r3, #16]
 8005caa:	4a3c      	ldr	r2, [pc, #240]	; (8005d9c <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8005cac:	4293      	cmp	r3, r2
 8005cae:	d02c      	beq.n	8005d0a <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	691b      	ldr	r3, [r3, #16]
 8005cb4:	4a3a      	ldr	r2, [pc, #232]	; (8005da0 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8005cb6:	4293      	cmp	r3, r2
 8005cb8:	d027      	beq.n	8005d0a <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	691b      	ldr	r3, [r3, #16]
 8005cbe:	4a39      	ldr	r2, [pc, #228]	; (8005da4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005cc0:	4293      	cmp	r3, r2
 8005cc2:	d022      	beq.n	8005d0a <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	691b      	ldr	r3, [r3, #16]
 8005cc8:	4a37      	ldr	r2, [pc, #220]	; (8005da8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8005cca:	4293      	cmp	r3, r2
 8005ccc:	d01d      	beq.n	8005d0a <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	691b      	ldr	r3, [r3, #16]
 8005cd2:	4a36      	ldr	r2, [pc, #216]	; (8005dac <HAL_RCCEx_PeriphCLKConfig+0x30c>)
 8005cd4:	4293      	cmp	r3, r2
 8005cd6:	d018      	beq.n	8005d0a <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	691b      	ldr	r3, [r3, #16]
 8005cdc:	4a34      	ldr	r2, [pc, #208]	; (8005db0 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8005cde:	4293      	cmp	r3, r2
 8005ce0:	d013      	beq.n	8005d0a <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	691b      	ldr	r3, [r3, #16]
 8005ce6:	4a33      	ldr	r2, [pc, #204]	; (8005db4 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8005ce8:	4293      	cmp	r3, r2
 8005cea:	d00e      	beq.n	8005d0a <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	691b      	ldr	r3, [r3, #16]
 8005cf0:	4a31      	ldr	r2, [pc, #196]	; (8005db8 <HAL_RCCEx_PeriphCLKConfig+0x318>)
 8005cf2:	4293      	cmp	r3, r2
 8005cf4:	d009      	beq.n	8005d0a <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	691b      	ldr	r3, [r3, #16]
 8005cfa:	4a30      	ldr	r2, [pc, #192]	; (8005dbc <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 8005cfc:	4293      	cmp	r3, r2
 8005cfe:	d004      	beq.n	8005d0a <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8005d00:	f640 2112 	movw	r1, #2578	; 0xa12
 8005d04:	480d      	ldr	r0, [pc, #52]	; (8005d3c <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8005d06:	f7fb fcb4 	bl	8001672 <assert_failed>

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005d0a:	2300      	movs	r3, #0
 8005d0c:	60fb      	str	r3, [r7, #12]
 8005d0e:	4b0d      	ldr	r3, [pc, #52]	; (8005d44 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 8005d10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d12:	4a0c      	ldr	r2, [pc, #48]	; (8005d44 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 8005d14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005d18:	6413      	str	r3, [r2, #64]	; 0x40
 8005d1a:	4b0a      	ldr	r3, [pc, #40]	; (8005d44 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 8005d1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005d22:	60fb      	str	r3, [r7, #12]
 8005d24:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8005d26:	4b26      	ldr	r3, [pc, #152]	; (8005dc0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	4a25      	ldr	r2, [pc, #148]	; (8005dc0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8005d2c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005d30:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005d32:	f7fb ff73 	bl	8001c1c <HAL_GetTick>
 8005d36:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005d38:	e04d      	b.n	8005dd6 <HAL_RCCEx_PeriphCLKConfig+0x336>
 8005d3a:	bf00      	nop
 8005d3c:	0800ddc0 	.word	0x0800ddc0
 8005d40:	42470068 	.word	0x42470068
 8005d44:	40023800 	.word	0x40023800
 8005d48:	00020300 	.word	0x00020300
 8005d4c:	00030300 	.word	0x00030300
 8005d50:	00040300 	.word	0x00040300
 8005d54:	00050300 	.word	0x00050300
 8005d58:	00060300 	.word	0x00060300
 8005d5c:	00070300 	.word	0x00070300
 8005d60:	00080300 	.word	0x00080300
 8005d64:	00090300 	.word	0x00090300
 8005d68:	000a0300 	.word	0x000a0300
 8005d6c:	000b0300 	.word	0x000b0300
 8005d70:	000c0300 	.word	0x000c0300
 8005d74:	000d0300 	.word	0x000d0300
 8005d78:	000e0300 	.word	0x000e0300
 8005d7c:	000f0300 	.word	0x000f0300
 8005d80:	00100300 	.word	0x00100300
 8005d84:	00110300 	.word	0x00110300
 8005d88:	00120300 	.word	0x00120300
 8005d8c:	00130300 	.word	0x00130300
 8005d90:	00140300 	.word	0x00140300
 8005d94:	00150300 	.word	0x00150300
 8005d98:	00160300 	.word	0x00160300
 8005d9c:	00170300 	.word	0x00170300
 8005da0:	00180300 	.word	0x00180300
 8005da4:	00190300 	.word	0x00190300
 8005da8:	001a0300 	.word	0x001a0300
 8005dac:	001b0300 	.word	0x001b0300
 8005db0:	001c0300 	.word	0x001c0300
 8005db4:	001d0300 	.word	0x001d0300
 8005db8:	001e0300 	.word	0x001e0300
 8005dbc:	001f0300 	.word	0x001f0300
 8005dc0:	40007000 	.word	0x40007000
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8005dc4:	f7fb ff2a 	bl	8001c1c <HAL_GetTick>
 8005dc8:	4602      	mov	r2, r0
 8005dca:	697b      	ldr	r3, [r7, #20]
 8005dcc:	1ad3      	subs	r3, r2, r3
 8005dce:	2b02      	cmp	r3, #2
 8005dd0:	d901      	bls.n	8005dd6 <HAL_RCCEx_PeriphCLKConfig+0x336>
      {
        return HAL_TIMEOUT;
 8005dd2:	2303      	movs	r3, #3
 8005dd4:	e06c      	b.n	8005eb0 <HAL_RCCEx_PeriphCLKConfig+0x410>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005dd6:	4b38      	ldr	r3, [pc, #224]	; (8005eb8 <HAL_RCCEx_PeriphCLKConfig+0x418>)
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d0f0      	beq.n	8005dc4 <HAL_RCCEx_PeriphCLKConfig+0x324>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005de2:	4b36      	ldr	r3, [pc, #216]	; (8005ebc <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8005de4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005de6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005dea:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005dec:	693b      	ldr	r3, [r7, #16]
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d02f      	beq.n	8005e52 <HAL_RCCEx_PeriphCLKConfig+0x3b2>
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	691b      	ldr	r3, [r3, #16]
 8005df6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005dfa:	693a      	ldr	r2, [r7, #16]
 8005dfc:	429a      	cmp	r2, r3
 8005dfe:	d028      	beq.n	8005e52 <HAL_RCCEx_PeriphCLKConfig+0x3b2>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005e00:	4b2e      	ldr	r3, [pc, #184]	; (8005ebc <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8005e02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e04:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005e08:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005e0a:	4b2d      	ldr	r3, [pc, #180]	; (8005ec0 <HAL_RCCEx_PeriphCLKConfig+0x420>)
 8005e0c:	2201      	movs	r2, #1
 8005e0e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005e10:	4b2b      	ldr	r3, [pc, #172]	; (8005ec0 <HAL_RCCEx_PeriphCLKConfig+0x420>)
 8005e12:	2200      	movs	r2, #0
 8005e14:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8005e16:	4a29      	ldr	r2, [pc, #164]	; (8005ebc <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8005e18:	693b      	ldr	r3, [r7, #16]
 8005e1a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005e1c:	4b27      	ldr	r3, [pc, #156]	; (8005ebc <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8005e1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e20:	f003 0301 	and.w	r3, r3, #1
 8005e24:	2b01      	cmp	r3, #1
 8005e26:	d114      	bne.n	8005e52 <HAL_RCCEx_PeriphCLKConfig+0x3b2>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8005e28:	f7fb fef8 	bl	8001c1c <HAL_GetTick>
 8005e2c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005e2e:	e00a      	b.n	8005e46 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005e30:	f7fb fef4 	bl	8001c1c <HAL_GetTick>
 8005e34:	4602      	mov	r2, r0
 8005e36:	697b      	ldr	r3, [r7, #20]
 8005e38:	1ad3      	subs	r3, r2, r3
 8005e3a:	f241 3288 	movw	r2, #5000	; 0x1388
 8005e3e:	4293      	cmp	r3, r2
 8005e40:	d901      	bls.n	8005e46 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
          {
            return HAL_TIMEOUT;
 8005e42:	2303      	movs	r3, #3
 8005e44:	e034      	b.n	8005eb0 <HAL_RCCEx_PeriphCLKConfig+0x410>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005e46:	4b1d      	ldr	r3, [pc, #116]	; (8005ebc <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8005e48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e4a:	f003 0302 	and.w	r3, r3, #2
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d0ee      	beq.n	8005e30 <HAL_RCCEx_PeriphCLKConfig+0x390>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	691b      	ldr	r3, [r3, #16]
 8005e56:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005e5a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005e5e:	d10d      	bne.n	8005e7c <HAL_RCCEx_PeriphCLKConfig+0x3dc>
 8005e60:	4b16      	ldr	r3, [pc, #88]	; (8005ebc <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8005e62:	689b      	ldr	r3, [r3, #8]
 8005e64:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	691b      	ldr	r3, [r3, #16]
 8005e6c:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8005e70:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005e74:	4911      	ldr	r1, [pc, #68]	; (8005ebc <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8005e76:	4313      	orrs	r3, r2
 8005e78:	608b      	str	r3, [r1, #8]
 8005e7a:	e005      	b.n	8005e88 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8005e7c:	4b0f      	ldr	r3, [pc, #60]	; (8005ebc <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8005e7e:	689b      	ldr	r3, [r3, #8]
 8005e80:	4a0e      	ldr	r2, [pc, #56]	; (8005ebc <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8005e82:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8005e86:	6093      	str	r3, [r2, #8]
 8005e88:	4b0c      	ldr	r3, [pc, #48]	; (8005ebc <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8005e8a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	691b      	ldr	r3, [r3, #16]
 8005e90:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005e94:	4909      	ldr	r1, [pc, #36]	; (8005ebc <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8005e96:	4313      	orrs	r3, r2
 8005e98:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	f003 0308 	and.w	r3, r3, #8
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d003      	beq.n	8005eae <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	7d1a      	ldrb	r2, [r3, #20]
 8005eaa:	4b06      	ldr	r3, [pc, #24]	; (8005ec4 <HAL_RCCEx_PeriphCLKConfig+0x424>)
 8005eac:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8005eae:	2300      	movs	r3, #0
}
 8005eb0:	4618      	mov	r0, r3
 8005eb2:	3718      	adds	r7, #24
 8005eb4:	46bd      	mov	sp, r7
 8005eb6:	bd80      	pop	{r7, pc}
 8005eb8:	40007000 	.word	0x40007000
 8005ebc:	40023800 	.word	0x40023800
 8005ec0:	42470e40 	.word	0x42470e40
 8005ec4:	424711e0 	.word	0x424711e0

08005ec8 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8005ec8:	b480      	push	{r7}
 8005eca:	b087      	sub	sp, #28
 8005ecc:	af00      	add	r7, sp, #0
 8005ece:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8005ed0:	2300      	movs	r3, #0
 8005ed2:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8005ed4:	2300      	movs	r3, #0
 8005ed6:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8005ed8:	2300      	movs	r3, #0
 8005eda:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8005edc:	2300      	movs	r3, #0
 8005ede:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	2b01      	cmp	r3, #1
 8005ee4:	d13f      	bne.n	8005f66 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8005ee6:	4b23      	ldr	r3, [pc, #140]	; (8005f74 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8005ee8:	689b      	ldr	r3, [r3, #8]
 8005eea:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005eee:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d004      	beq.n	8005f00 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8005ef6:	2b01      	cmp	r3, #1
 8005ef8:	d131      	bne.n	8005f5e <HAL_RCCEx_GetPeriphCLKFreq+0x96>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8005efa:	4b1f      	ldr	r3, [pc, #124]	; (8005f78 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005efc:	617b      	str	r3, [r7, #20]
          break;
 8005efe:	e031      	b.n	8005f64 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
      case RCC_I2SCLKSOURCE_PLLI2S:
        {
#if defined(STM32F411xE)
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8005f00:	4b1c      	ldr	r3, [pc, #112]	; (8005f74 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8005f02:	685b      	ldr	r3, [r3, #4]
 8005f04:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005f08:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005f0c:	d109      	bne.n	8005f22 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8005f0e:	4b19      	ldr	r3, [pc, #100]	; (8005f74 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8005f10:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005f14:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005f18:	4a18      	ldr	r2, [pc, #96]	; (8005f7c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8005f1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f1e:	613b      	str	r3, [r7, #16]
 8005f20:	e008      	b.n	8005f34 <HAL_RCCEx_GetPeriphCLKFreq+0x6c>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8005f22:	4b14      	ldr	r3, [pc, #80]	; (8005f74 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8005f24:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005f28:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005f2c:	4a14      	ldr	r2, [pc, #80]	; (8005f80 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8005f2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f32:	613b      	str	r3, [r7, #16]
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8005f34:	4b0f      	ldr	r3, [pc, #60]	; (8005f74 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8005f36:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005f3a:	099b      	lsrs	r3, r3, #6
 8005f3c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005f40:	693b      	ldr	r3, [r7, #16]
 8005f42:	fb02 f303 	mul.w	r3, r2, r3
 8005f46:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8005f48:	4b0a      	ldr	r3, [pc, #40]	; (8005f74 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8005f4a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005f4e:	0f1b      	lsrs	r3, r3, #28
 8005f50:	f003 0307 	and.w	r3, r3, #7
 8005f54:	68ba      	ldr	r2, [r7, #8]
 8005f56:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f5a:	617b      	str	r3, [r7, #20]
          break;
 8005f5c:	e002      	b.n	8005f64 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8005f5e:	2300      	movs	r3, #0
 8005f60:	617b      	str	r3, [r7, #20]
          break;
 8005f62:	bf00      	nop
        }
      }
      break;
 8005f64:	bf00      	nop
    }
  }
  return frequency;
 8005f66:	697b      	ldr	r3, [r7, #20]
}
 8005f68:	4618      	mov	r0, r3
 8005f6a:	371c      	adds	r7, #28
 8005f6c:	46bd      	mov	sp, r7
 8005f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f72:	4770      	bx	lr
 8005f74:	40023800 	.word	0x40023800
 8005f78:	00bb8000 	.word	0x00bb8000
 8005f7c:	007a1200 	.word	0x007a1200
 8005f80:	00f42400 	.word	0x00f42400

08005f84 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005f84:	b580      	push	{r7, lr}
 8005f86:	b082      	sub	sp, #8
 8005f88:	af00      	add	r7, sp, #0
 8005f8a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d101      	bne.n	8005f96 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005f92:	2301      	movs	r3, #1
 8005f94:	e113      	b.n	80061be <HAL_SPI_Init+0x23a>
  }

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	4a8b      	ldr	r2, [pc, #556]	; (80061c8 <HAL_SPI_Init+0x244>)
 8005f9c:	4293      	cmp	r3, r2
 8005f9e:	d018      	beq.n	8005fd2 <HAL_SPI_Init+0x4e>
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	4a89      	ldr	r2, [pc, #548]	; (80061cc <HAL_SPI_Init+0x248>)
 8005fa6:	4293      	cmp	r3, r2
 8005fa8:	d013      	beq.n	8005fd2 <HAL_SPI_Init+0x4e>
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	4a88      	ldr	r2, [pc, #544]	; (80061d0 <HAL_SPI_Init+0x24c>)
 8005fb0:	4293      	cmp	r3, r2
 8005fb2:	d00e      	beq.n	8005fd2 <HAL_SPI_Init+0x4e>
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	4a86      	ldr	r2, [pc, #536]	; (80061d4 <HAL_SPI_Init+0x250>)
 8005fba:	4293      	cmp	r3, r2
 8005fbc:	d009      	beq.n	8005fd2 <HAL_SPI_Init+0x4e>
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	4a85      	ldr	r2, [pc, #532]	; (80061d8 <HAL_SPI_Init+0x254>)
 8005fc4:	4293      	cmp	r3, r2
 8005fc6:	d004      	beq.n	8005fd2 <HAL_SPI_Init+0x4e>
 8005fc8:	f44f 71a1 	mov.w	r1, #322	; 0x142
 8005fcc:	4883      	ldr	r0, [pc, #524]	; (80061dc <HAL_SPI_Init+0x258>)
 8005fce:	f7fb fb50 	bl	8001672 <assert_failed>
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	685b      	ldr	r3, [r3, #4]
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d009      	beq.n	8005fee <HAL_SPI_Init+0x6a>
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	685b      	ldr	r3, [r3, #4]
 8005fde:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005fe2:	d004      	beq.n	8005fee <HAL_SPI_Init+0x6a>
 8005fe4:	f240 1143 	movw	r1, #323	; 0x143
 8005fe8:	487c      	ldr	r0, [pc, #496]	; (80061dc <HAL_SPI_Init+0x258>)
 8005fea:	f7fb fb42 	bl	8001672 <assert_failed>
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	689b      	ldr	r3, [r3, #8]
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d00e      	beq.n	8006014 <HAL_SPI_Init+0x90>
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	689b      	ldr	r3, [r3, #8]
 8005ffa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005ffe:	d009      	beq.n	8006014 <HAL_SPI_Init+0x90>
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	689b      	ldr	r3, [r3, #8]
 8006004:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006008:	d004      	beq.n	8006014 <HAL_SPI_Init+0x90>
 800600a:	f44f 71a2 	mov.w	r1, #324	; 0x144
 800600e:	4873      	ldr	r0, [pc, #460]	; (80061dc <HAL_SPI_Init+0x258>)
 8006010:	f7fb fb2f 	bl	8001672 <assert_failed>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	68db      	ldr	r3, [r3, #12]
 8006018:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800601c:	d008      	beq.n	8006030 <HAL_SPI_Init+0xac>
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	68db      	ldr	r3, [r3, #12]
 8006022:	2b00      	cmp	r3, #0
 8006024:	d004      	beq.n	8006030 <HAL_SPI_Init+0xac>
 8006026:	f240 1145 	movw	r1, #325	; 0x145
 800602a:	486c      	ldr	r0, [pc, #432]	; (80061dc <HAL_SPI_Init+0x258>)
 800602c:	f7fb fb21 	bl	8001672 <assert_failed>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	699b      	ldr	r3, [r3, #24]
 8006034:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006038:	d00d      	beq.n	8006056 <HAL_SPI_Init+0xd2>
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	699b      	ldr	r3, [r3, #24]
 800603e:	2b00      	cmp	r3, #0
 8006040:	d009      	beq.n	8006056 <HAL_SPI_Init+0xd2>
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	699b      	ldr	r3, [r3, #24]
 8006046:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800604a:	d004      	beq.n	8006056 <HAL_SPI_Init+0xd2>
 800604c:	f44f 71a3 	mov.w	r1, #326	; 0x146
 8006050:	4862      	ldr	r0, [pc, #392]	; (80061dc <HAL_SPI_Init+0x258>)
 8006052:	f7fb fb0e 	bl	8001672 <assert_failed>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	69db      	ldr	r3, [r3, #28]
 800605a:	2b00      	cmp	r3, #0
 800605c:	d020      	beq.n	80060a0 <HAL_SPI_Init+0x11c>
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	69db      	ldr	r3, [r3, #28]
 8006062:	2b08      	cmp	r3, #8
 8006064:	d01c      	beq.n	80060a0 <HAL_SPI_Init+0x11c>
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	69db      	ldr	r3, [r3, #28]
 800606a:	2b10      	cmp	r3, #16
 800606c:	d018      	beq.n	80060a0 <HAL_SPI_Init+0x11c>
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	69db      	ldr	r3, [r3, #28]
 8006072:	2b18      	cmp	r3, #24
 8006074:	d014      	beq.n	80060a0 <HAL_SPI_Init+0x11c>
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	69db      	ldr	r3, [r3, #28]
 800607a:	2b20      	cmp	r3, #32
 800607c:	d010      	beq.n	80060a0 <HAL_SPI_Init+0x11c>
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	69db      	ldr	r3, [r3, #28]
 8006082:	2b28      	cmp	r3, #40	; 0x28
 8006084:	d00c      	beq.n	80060a0 <HAL_SPI_Init+0x11c>
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	69db      	ldr	r3, [r3, #28]
 800608a:	2b30      	cmp	r3, #48	; 0x30
 800608c:	d008      	beq.n	80060a0 <HAL_SPI_Init+0x11c>
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	69db      	ldr	r3, [r3, #28]
 8006092:	2b38      	cmp	r3, #56	; 0x38
 8006094:	d004      	beq.n	80060a0 <HAL_SPI_Init+0x11c>
 8006096:	f240 1147 	movw	r1, #327	; 0x147
 800609a:	4850      	ldr	r0, [pc, #320]	; (80061dc <HAL_SPI_Init+0x258>)
 800609c:	f7fb fae9 	bl	8001672 <assert_failed>
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	6a1b      	ldr	r3, [r3, #32]
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d008      	beq.n	80060ba <HAL_SPI_Init+0x136>
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	6a1b      	ldr	r3, [r3, #32]
 80060ac:	2b80      	cmp	r3, #128	; 0x80
 80060ae:	d004      	beq.n	80060ba <HAL_SPI_Init+0x136>
 80060b0:	f44f 71a4 	mov.w	r1, #328	; 0x148
 80060b4:	4849      	ldr	r0, [pc, #292]	; (80061dc <HAL_SPI_Init+0x258>)
 80060b6:	f7fb fadc 	bl	8001672 <assert_failed>
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d008      	beq.n	80060d4 <HAL_SPI_Init+0x150>
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060c6:	2b10      	cmp	r3, #16
 80060c8:	d004      	beq.n	80060d4 <HAL_SPI_Init+0x150>
 80060ca:	f240 1149 	movw	r1, #329	; 0x149
 80060ce:	4843      	ldr	r0, [pc, #268]	; (80061dc <HAL_SPI_Init+0x258>)
 80060d0:	f7fb facf 	bl	8001672 <assert_failed>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d119      	bne.n	8006110 <HAL_SPI_Init+0x18c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	691b      	ldr	r3, [r3, #16]
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d008      	beq.n	80060f6 <HAL_SPI_Init+0x172>
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	691b      	ldr	r3, [r3, #16]
 80060e8:	2b02      	cmp	r3, #2
 80060ea:	d004      	beq.n	80060f6 <HAL_SPI_Init+0x172>
 80060ec:	f44f 71a6 	mov.w	r1, #332	; 0x14c
 80060f0:	483a      	ldr	r0, [pc, #232]	; (80061dc <HAL_SPI_Init+0x258>)
 80060f2:	f7fb fabe 	bl	8001672 <assert_failed>
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	695b      	ldr	r3, [r3, #20]
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d008      	beq.n	8006110 <HAL_SPI_Init+0x18c>
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	695b      	ldr	r3, [r3, #20]
 8006102:	2b01      	cmp	r3, #1
 8006104:	d004      	beq.n	8006110 <HAL_SPI_Init+0x18c>
 8006106:	f240 114d 	movw	r1, #333	; 0x14d
 800610a:	4834      	ldr	r0, [pc, #208]	; (80061dc <HAL_SPI_Init+0x258>)
 800610c:	f7fb fab1 	bl	8001672 <assert_failed>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	2200      	movs	r2, #0
 8006114:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800611c:	b2db      	uxtb	r3, r3
 800611e:	2b00      	cmp	r3, #0
 8006120:	d106      	bne.n	8006130 <HAL_SPI_Init+0x1ac>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	2200      	movs	r2, #0
 8006126:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800612a:	6878      	ldr	r0, [r7, #4]
 800612c:	f7fb fae2 	bl	80016f4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	2202      	movs	r2, #2
 8006134:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	681a      	ldr	r2, [r3, #0]
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006146:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	685a      	ldr	r2, [r3, #4]
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	689b      	ldr	r3, [r3, #8]
 8006150:	431a      	orrs	r2, r3
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	68db      	ldr	r3, [r3, #12]
 8006156:	431a      	orrs	r2, r3
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	691b      	ldr	r3, [r3, #16]
 800615c:	431a      	orrs	r2, r3
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	695b      	ldr	r3, [r3, #20]
 8006162:	431a      	orrs	r2, r3
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	699b      	ldr	r3, [r3, #24]
 8006168:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800616c:	431a      	orrs	r2, r3
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	69db      	ldr	r3, [r3, #28]
 8006172:	431a      	orrs	r2, r3
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	6a1b      	ldr	r3, [r3, #32]
 8006178:	ea42 0103 	orr.w	r1, r2, r3
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	430a      	orrs	r2, r1
 8006186:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	699b      	ldr	r3, [r3, #24]
 800618c:	0c1b      	lsrs	r3, r3, #16
 800618e:	f003 0104 	and.w	r1, r3, #4
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	430a      	orrs	r2, r1
 800619c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	69da      	ldr	r2, [r3, #28]
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80061ac:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	2200      	movs	r2, #0
 80061b2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	2201      	movs	r2, #1
 80061b8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80061bc:	2300      	movs	r3, #0
}
 80061be:	4618      	mov	r0, r3
 80061c0:	3708      	adds	r7, #8
 80061c2:	46bd      	mov	sp, r7
 80061c4:	bd80      	pop	{r7, pc}
 80061c6:	bf00      	nop
 80061c8:	40013000 	.word	0x40013000
 80061cc:	40003800 	.word	0x40003800
 80061d0:	40003c00 	.word	0x40003c00
 80061d4:	40013400 	.word	0x40013400
 80061d8:	40015000 	.word	0x40015000
 80061dc:	0800ddfc 	.word	0x0800ddfc

080061e0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80061e0:	b580      	push	{r7, lr}
 80061e2:	b082      	sub	sp, #8
 80061e4:	af00      	add	r7, sp, #0
 80061e6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d101      	bne.n	80061f2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80061ee:	2301      	movs	r3, #1
 80061f0:	e083      	b.n	80062fa <HAL_TIM_Base_Init+0x11a>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	4a43      	ldr	r2, [pc, #268]	; (8006304 <HAL_TIM_Base_Init+0x124>)
 80061f8:	4293      	cmp	r3, r2
 80061fa:	d027      	beq.n	800624c <HAL_TIM_Base_Init+0x6c>
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006204:	d022      	beq.n	800624c <HAL_TIM_Base_Init+0x6c>
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	4a3f      	ldr	r2, [pc, #252]	; (8006308 <HAL_TIM_Base_Init+0x128>)
 800620c:	4293      	cmp	r3, r2
 800620e:	d01d      	beq.n	800624c <HAL_TIM_Base_Init+0x6c>
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	4a3d      	ldr	r2, [pc, #244]	; (800630c <HAL_TIM_Base_Init+0x12c>)
 8006216:	4293      	cmp	r3, r2
 8006218:	d018      	beq.n	800624c <HAL_TIM_Base_Init+0x6c>
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	4a3c      	ldr	r2, [pc, #240]	; (8006310 <HAL_TIM_Base_Init+0x130>)
 8006220:	4293      	cmp	r3, r2
 8006222:	d013      	beq.n	800624c <HAL_TIM_Base_Init+0x6c>
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	4a3a      	ldr	r2, [pc, #232]	; (8006314 <HAL_TIM_Base_Init+0x134>)
 800622a:	4293      	cmp	r3, r2
 800622c:	d00e      	beq.n	800624c <HAL_TIM_Base_Init+0x6c>
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	4a39      	ldr	r2, [pc, #228]	; (8006318 <HAL_TIM_Base_Init+0x138>)
 8006234:	4293      	cmp	r3, r2
 8006236:	d009      	beq.n	800624c <HAL_TIM_Base_Init+0x6c>
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	4a37      	ldr	r2, [pc, #220]	; (800631c <HAL_TIM_Base_Init+0x13c>)
 800623e:	4293      	cmp	r3, r2
 8006240:	d004      	beq.n	800624c <HAL_TIM_Base_Init+0x6c>
 8006242:	f44f 7189 	mov.w	r1, #274	; 0x112
 8006246:	4836      	ldr	r0, [pc, #216]	; (8006320 <HAL_TIM_Base_Init+0x140>)
 8006248:	f7fb fa13 	bl	8001672 <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	689b      	ldr	r3, [r3, #8]
 8006250:	2b00      	cmp	r3, #0
 8006252:	d014      	beq.n	800627e <HAL_TIM_Base_Init+0x9e>
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	689b      	ldr	r3, [r3, #8]
 8006258:	2b10      	cmp	r3, #16
 800625a:	d010      	beq.n	800627e <HAL_TIM_Base_Init+0x9e>
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	689b      	ldr	r3, [r3, #8]
 8006260:	2b20      	cmp	r3, #32
 8006262:	d00c      	beq.n	800627e <HAL_TIM_Base_Init+0x9e>
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	689b      	ldr	r3, [r3, #8]
 8006268:	2b40      	cmp	r3, #64	; 0x40
 800626a:	d008      	beq.n	800627e <HAL_TIM_Base_Init+0x9e>
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	689b      	ldr	r3, [r3, #8]
 8006270:	2b60      	cmp	r3, #96	; 0x60
 8006272:	d004      	beq.n	800627e <HAL_TIM_Base_Init+0x9e>
 8006274:	f240 1113 	movw	r1, #275	; 0x113
 8006278:	4829      	ldr	r0, [pc, #164]	; (8006320 <HAL_TIM_Base_Init+0x140>)
 800627a:	f7fb f9fa 	bl	8001672 <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	691b      	ldr	r3, [r3, #16]
 8006282:	2b00      	cmp	r3, #0
 8006284:	d00e      	beq.n	80062a4 <HAL_TIM_Base_Init+0xc4>
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	691b      	ldr	r3, [r3, #16]
 800628a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800628e:	d009      	beq.n	80062a4 <HAL_TIM_Base_Init+0xc4>
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	691b      	ldr	r3, [r3, #16]
 8006294:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006298:	d004      	beq.n	80062a4 <HAL_TIM_Base_Init+0xc4>
 800629a:	f44f 718a 	mov.w	r1, #276	; 0x114
 800629e:	4820      	ldr	r0, [pc, #128]	; (8006320 <HAL_TIM_Base_Init+0x140>)
 80062a0:	f7fb f9e7 	bl	8001672 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	699b      	ldr	r3, [r3, #24]
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d008      	beq.n	80062be <HAL_TIM_Base_Init+0xde>
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	699b      	ldr	r3, [r3, #24]
 80062b0:	2b80      	cmp	r3, #128	; 0x80
 80062b2:	d004      	beq.n	80062be <HAL_TIM_Base_Init+0xde>
 80062b4:	f240 1115 	movw	r1, #277	; 0x115
 80062b8:	4819      	ldr	r0, [pc, #100]	; (8006320 <HAL_TIM_Base_Init+0x140>)
 80062ba:	f7fb f9da 	bl	8001672 <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80062c4:	b2db      	uxtb	r3, r3
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d106      	bne.n	80062d8 <HAL_TIM_Base_Init+0xf8>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	2200      	movs	r2, #0
 80062ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80062d2:	6878      	ldr	r0, [r7, #4]
 80062d4:	f7fb fbb6 	bl	8001a44 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	2202      	movs	r2, #2
 80062dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681a      	ldr	r2, [r3, #0]
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	3304      	adds	r3, #4
 80062e8:	4619      	mov	r1, r3
 80062ea:	4610      	mov	r0, r2
 80062ec:	f000 fe1c 	bl	8006f28 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	2201      	movs	r2, #1
 80062f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80062f8:	2300      	movs	r3, #0
}
 80062fa:	4618      	mov	r0, r3
 80062fc:	3708      	adds	r7, #8
 80062fe:	46bd      	mov	sp, r7
 8006300:	bd80      	pop	{r7, pc}
 8006302:	bf00      	nop
 8006304:	40010000 	.word	0x40010000
 8006308:	40000400 	.word	0x40000400
 800630c:	40000800 	.word	0x40000800
 8006310:	40000c00 	.word	0x40000c00
 8006314:	40014000 	.word	0x40014000
 8006318:	40014400 	.word	0x40014400
 800631c:	40014800 	.word	0x40014800
 8006320:	0800de34 	.word	0x0800de34

08006324 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006324:	b580      	push	{r7, lr}
 8006326:	b082      	sub	sp, #8
 8006328:	af00      	add	r7, sp, #0
 800632a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	2b00      	cmp	r3, #0
 8006330:	d101      	bne.n	8006336 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006332:	2301      	movs	r3, #1
 8006334:	e083      	b.n	800643e <HAL_TIM_PWM_Init+0x11a>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	4a43      	ldr	r2, [pc, #268]	; (8006448 <HAL_TIM_PWM_Init+0x124>)
 800633c:	4293      	cmp	r3, r2
 800633e:	d027      	beq.n	8006390 <HAL_TIM_PWM_Init+0x6c>
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006348:	d022      	beq.n	8006390 <HAL_TIM_PWM_Init+0x6c>
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	4a3f      	ldr	r2, [pc, #252]	; (800644c <HAL_TIM_PWM_Init+0x128>)
 8006350:	4293      	cmp	r3, r2
 8006352:	d01d      	beq.n	8006390 <HAL_TIM_PWM_Init+0x6c>
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	4a3d      	ldr	r2, [pc, #244]	; (8006450 <HAL_TIM_PWM_Init+0x12c>)
 800635a:	4293      	cmp	r3, r2
 800635c:	d018      	beq.n	8006390 <HAL_TIM_PWM_Init+0x6c>
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	4a3c      	ldr	r2, [pc, #240]	; (8006454 <HAL_TIM_PWM_Init+0x130>)
 8006364:	4293      	cmp	r3, r2
 8006366:	d013      	beq.n	8006390 <HAL_TIM_PWM_Init+0x6c>
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	4a3a      	ldr	r2, [pc, #232]	; (8006458 <HAL_TIM_PWM_Init+0x134>)
 800636e:	4293      	cmp	r3, r2
 8006370:	d00e      	beq.n	8006390 <HAL_TIM_PWM_Init+0x6c>
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	4a39      	ldr	r2, [pc, #228]	; (800645c <HAL_TIM_PWM_Init+0x138>)
 8006378:	4293      	cmp	r3, r2
 800637a:	d009      	beq.n	8006390 <HAL_TIM_PWM_Init+0x6c>
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	4a37      	ldr	r2, [pc, #220]	; (8006460 <HAL_TIM_PWM_Init+0x13c>)
 8006382:	4293      	cmp	r3, r2
 8006384:	d004      	beq.n	8006390 <HAL_TIM_PWM_Init+0x6c>
 8006386:	f240 419b 	movw	r1, #1179	; 0x49b
 800638a:	4836      	ldr	r0, [pc, #216]	; (8006464 <HAL_TIM_PWM_Init+0x140>)
 800638c:	f7fb f971 	bl	8001672 <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	689b      	ldr	r3, [r3, #8]
 8006394:	2b00      	cmp	r3, #0
 8006396:	d014      	beq.n	80063c2 <HAL_TIM_PWM_Init+0x9e>
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	689b      	ldr	r3, [r3, #8]
 800639c:	2b10      	cmp	r3, #16
 800639e:	d010      	beq.n	80063c2 <HAL_TIM_PWM_Init+0x9e>
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	689b      	ldr	r3, [r3, #8]
 80063a4:	2b20      	cmp	r3, #32
 80063a6:	d00c      	beq.n	80063c2 <HAL_TIM_PWM_Init+0x9e>
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	689b      	ldr	r3, [r3, #8]
 80063ac:	2b40      	cmp	r3, #64	; 0x40
 80063ae:	d008      	beq.n	80063c2 <HAL_TIM_PWM_Init+0x9e>
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	689b      	ldr	r3, [r3, #8]
 80063b4:	2b60      	cmp	r3, #96	; 0x60
 80063b6:	d004      	beq.n	80063c2 <HAL_TIM_PWM_Init+0x9e>
 80063b8:	f240 419c 	movw	r1, #1180	; 0x49c
 80063bc:	4829      	ldr	r0, [pc, #164]	; (8006464 <HAL_TIM_PWM_Init+0x140>)
 80063be:	f7fb f958 	bl	8001672 <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	691b      	ldr	r3, [r3, #16]
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d00e      	beq.n	80063e8 <HAL_TIM_PWM_Init+0xc4>
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	691b      	ldr	r3, [r3, #16]
 80063ce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80063d2:	d009      	beq.n	80063e8 <HAL_TIM_PWM_Init+0xc4>
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	691b      	ldr	r3, [r3, #16]
 80063d8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80063dc:	d004      	beq.n	80063e8 <HAL_TIM_PWM_Init+0xc4>
 80063de:	f240 419d 	movw	r1, #1181	; 0x49d
 80063e2:	4820      	ldr	r0, [pc, #128]	; (8006464 <HAL_TIM_PWM_Init+0x140>)
 80063e4:	f7fb f945 	bl	8001672 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	699b      	ldr	r3, [r3, #24]
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d008      	beq.n	8006402 <HAL_TIM_PWM_Init+0xde>
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	699b      	ldr	r3, [r3, #24]
 80063f4:	2b80      	cmp	r3, #128	; 0x80
 80063f6:	d004      	beq.n	8006402 <HAL_TIM_PWM_Init+0xde>
 80063f8:	f240 419e 	movw	r1, #1182	; 0x49e
 80063fc:	4819      	ldr	r0, [pc, #100]	; (8006464 <HAL_TIM_PWM_Init+0x140>)
 80063fe:	f7fb f938 	bl	8001672 <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006408:	b2db      	uxtb	r3, r3
 800640a:	2b00      	cmp	r3, #0
 800640c:	d106      	bne.n	800641c <HAL_TIM_PWM_Init+0xf8>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	2200      	movs	r2, #0
 8006412:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006416:	6878      	ldr	r0, [r7, #4]
 8006418:	f000 f826 	bl	8006468 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	2202      	movs	r2, #2
 8006420:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	681a      	ldr	r2, [r3, #0]
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	3304      	adds	r3, #4
 800642c:	4619      	mov	r1, r3
 800642e:	4610      	mov	r0, r2
 8006430:	f000 fd7a 	bl	8006f28 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	2201      	movs	r2, #1
 8006438:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800643c:	2300      	movs	r3, #0
}
 800643e:	4618      	mov	r0, r3
 8006440:	3708      	adds	r7, #8
 8006442:	46bd      	mov	sp, r7
 8006444:	bd80      	pop	{r7, pc}
 8006446:	bf00      	nop
 8006448:	40010000 	.word	0x40010000
 800644c:	40000400 	.word	0x40000400
 8006450:	40000800 	.word	0x40000800
 8006454:	40000c00 	.word	0x40000c00
 8006458:	40014000 	.word	0x40014000
 800645c:	40014400 	.word	0x40014400
 8006460:	40014800 	.word	0x40014800
 8006464:	0800de34 	.word	0x0800de34

08006468 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006468:	b480      	push	{r7}
 800646a:	b083      	sub	sp, #12
 800646c:	af00      	add	r7, sp, #0
 800646e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006470:	bf00      	nop
 8006472:	370c      	adds	r7, #12
 8006474:	46bd      	mov	sp, r7
 8006476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800647a:	4770      	bx	lr

0800647c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800647c:	b580      	push	{r7, lr}
 800647e:	b084      	sub	sp, #16
 8006480:	af00      	add	r7, sp, #0
 8006482:	6078      	str	r0, [r7, #4]
 8006484:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	4a4e      	ldr	r2, [pc, #312]	; (80065c4 <HAL_TIM_PWM_Start+0x148>)
 800648c:	4293      	cmp	r3, r2
 800648e:	d10b      	bne.n	80064a8 <HAL_TIM_PWM_Start+0x2c>
 8006490:	683b      	ldr	r3, [r7, #0]
 8006492:	2b00      	cmp	r3, #0
 8006494:	d06c      	beq.n	8006570 <HAL_TIM_PWM_Start+0xf4>
 8006496:	683b      	ldr	r3, [r7, #0]
 8006498:	2b04      	cmp	r3, #4
 800649a:	d069      	beq.n	8006570 <HAL_TIM_PWM_Start+0xf4>
 800649c:	683b      	ldr	r3, [r7, #0]
 800649e:	2b08      	cmp	r3, #8
 80064a0:	d066      	beq.n	8006570 <HAL_TIM_PWM_Start+0xf4>
 80064a2:	683b      	ldr	r3, [r7, #0]
 80064a4:	2b0c      	cmp	r3, #12
 80064a6:	d063      	beq.n	8006570 <HAL_TIM_PWM_Start+0xf4>
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80064b0:	d10b      	bne.n	80064ca <HAL_TIM_PWM_Start+0x4e>
 80064b2:	683b      	ldr	r3, [r7, #0]
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d05b      	beq.n	8006570 <HAL_TIM_PWM_Start+0xf4>
 80064b8:	683b      	ldr	r3, [r7, #0]
 80064ba:	2b04      	cmp	r3, #4
 80064bc:	d058      	beq.n	8006570 <HAL_TIM_PWM_Start+0xf4>
 80064be:	683b      	ldr	r3, [r7, #0]
 80064c0:	2b08      	cmp	r3, #8
 80064c2:	d055      	beq.n	8006570 <HAL_TIM_PWM_Start+0xf4>
 80064c4:	683b      	ldr	r3, [r7, #0]
 80064c6:	2b0c      	cmp	r3, #12
 80064c8:	d052      	beq.n	8006570 <HAL_TIM_PWM_Start+0xf4>
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	4a3e      	ldr	r2, [pc, #248]	; (80065c8 <HAL_TIM_PWM_Start+0x14c>)
 80064d0:	4293      	cmp	r3, r2
 80064d2:	d10b      	bne.n	80064ec <HAL_TIM_PWM_Start+0x70>
 80064d4:	683b      	ldr	r3, [r7, #0]
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d04a      	beq.n	8006570 <HAL_TIM_PWM_Start+0xf4>
 80064da:	683b      	ldr	r3, [r7, #0]
 80064dc:	2b04      	cmp	r3, #4
 80064de:	d047      	beq.n	8006570 <HAL_TIM_PWM_Start+0xf4>
 80064e0:	683b      	ldr	r3, [r7, #0]
 80064e2:	2b08      	cmp	r3, #8
 80064e4:	d044      	beq.n	8006570 <HAL_TIM_PWM_Start+0xf4>
 80064e6:	683b      	ldr	r3, [r7, #0]
 80064e8:	2b0c      	cmp	r3, #12
 80064ea:	d041      	beq.n	8006570 <HAL_TIM_PWM_Start+0xf4>
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	4a36      	ldr	r2, [pc, #216]	; (80065cc <HAL_TIM_PWM_Start+0x150>)
 80064f2:	4293      	cmp	r3, r2
 80064f4:	d10b      	bne.n	800650e <HAL_TIM_PWM_Start+0x92>
 80064f6:	683b      	ldr	r3, [r7, #0]
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d039      	beq.n	8006570 <HAL_TIM_PWM_Start+0xf4>
 80064fc:	683b      	ldr	r3, [r7, #0]
 80064fe:	2b04      	cmp	r3, #4
 8006500:	d036      	beq.n	8006570 <HAL_TIM_PWM_Start+0xf4>
 8006502:	683b      	ldr	r3, [r7, #0]
 8006504:	2b08      	cmp	r3, #8
 8006506:	d033      	beq.n	8006570 <HAL_TIM_PWM_Start+0xf4>
 8006508:	683b      	ldr	r3, [r7, #0]
 800650a:	2b0c      	cmp	r3, #12
 800650c:	d030      	beq.n	8006570 <HAL_TIM_PWM_Start+0xf4>
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	4a2f      	ldr	r2, [pc, #188]	; (80065d0 <HAL_TIM_PWM_Start+0x154>)
 8006514:	4293      	cmp	r3, r2
 8006516:	d10b      	bne.n	8006530 <HAL_TIM_PWM_Start+0xb4>
 8006518:	683b      	ldr	r3, [r7, #0]
 800651a:	2b00      	cmp	r3, #0
 800651c:	d028      	beq.n	8006570 <HAL_TIM_PWM_Start+0xf4>
 800651e:	683b      	ldr	r3, [r7, #0]
 8006520:	2b04      	cmp	r3, #4
 8006522:	d025      	beq.n	8006570 <HAL_TIM_PWM_Start+0xf4>
 8006524:	683b      	ldr	r3, [r7, #0]
 8006526:	2b08      	cmp	r3, #8
 8006528:	d022      	beq.n	8006570 <HAL_TIM_PWM_Start+0xf4>
 800652a:	683b      	ldr	r3, [r7, #0]
 800652c:	2b0c      	cmp	r3, #12
 800652e:	d01f      	beq.n	8006570 <HAL_TIM_PWM_Start+0xf4>
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	4a27      	ldr	r2, [pc, #156]	; (80065d4 <HAL_TIM_PWM_Start+0x158>)
 8006536:	4293      	cmp	r3, r2
 8006538:	d105      	bne.n	8006546 <HAL_TIM_PWM_Start+0xca>
 800653a:	683b      	ldr	r3, [r7, #0]
 800653c:	2b00      	cmp	r3, #0
 800653e:	d017      	beq.n	8006570 <HAL_TIM_PWM_Start+0xf4>
 8006540:	683b      	ldr	r3, [r7, #0]
 8006542:	2b04      	cmp	r3, #4
 8006544:	d014      	beq.n	8006570 <HAL_TIM_PWM_Start+0xf4>
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	4a23      	ldr	r2, [pc, #140]	; (80065d8 <HAL_TIM_PWM_Start+0x15c>)
 800654c:	4293      	cmp	r3, r2
 800654e:	d102      	bne.n	8006556 <HAL_TIM_PWM_Start+0xda>
 8006550:	683b      	ldr	r3, [r7, #0]
 8006552:	2b00      	cmp	r3, #0
 8006554:	d00c      	beq.n	8006570 <HAL_TIM_PWM_Start+0xf4>
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	4a20      	ldr	r2, [pc, #128]	; (80065dc <HAL_TIM_PWM_Start+0x160>)
 800655c:	4293      	cmp	r3, r2
 800655e:	d102      	bne.n	8006566 <HAL_TIM_PWM_Start+0xea>
 8006560:	683b      	ldr	r3, [r7, #0]
 8006562:	2b00      	cmp	r3, #0
 8006564:	d004      	beq.n	8006570 <HAL_TIM_PWM_Start+0xf4>
 8006566:	f240 5113 	movw	r1, #1299	; 0x513
 800656a:	481d      	ldr	r0, [pc, #116]	; (80065e0 <HAL_TIM_PWM_Start+0x164>)
 800656c:	f7fb f881 	bl	8001672 <assert_failed>

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	2201      	movs	r2, #1
 8006576:	6839      	ldr	r1, [r7, #0]
 8006578:	4618      	mov	r0, r3
 800657a:	f001 f805 	bl	8007588 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	4a10      	ldr	r2, [pc, #64]	; (80065c4 <HAL_TIM_PWM_Start+0x148>)
 8006584:	4293      	cmp	r3, r2
 8006586:	d107      	bne.n	8006598 <HAL_TIM_PWM_Start+0x11c>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006596:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	689b      	ldr	r3, [r3, #8]
 800659e:	f003 0307 	and.w	r3, r3, #7
 80065a2:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	2b06      	cmp	r3, #6
 80065a8:	d007      	beq.n	80065ba <HAL_TIM_PWM_Start+0x13e>
  {
    __HAL_TIM_ENABLE(htim);
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	681a      	ldr	r2, [r3, #0]
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	f042 0201 	orr.w	r2, r2, #1
 80065b8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80065ba:	2300      	movs	r3, #0
}
 80065bc:	4618      	mov	r0, r3
 80065be:	3710      	adds	r7, #16
 80065c0:	46bd      	mov	sp, r7
 80065c2:	bd80      	pop	{r7, pc}
 80065c4:	40010000 	.word	0x40010000
 80065c8:	40000400 	.word	0x40000400
 80065cc:	40000800 	.word	0x40000800
 80065d0:	40000c00 	.word	0x40000c00
 80065d4:	40014000 	.word	0x40014000
 80065d8:	40014400 	.word	0x40014400
 80065dc:	40014800 	.word	0x40014800
 80065e0:	0800de34 	.word	0x0800de34

080065e4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80065e4:	b580      	push	{r7, lr}
 80065e6:	b084      	sub	sp, #16
 80065e8:	af00      	add	r7, sp, #0
 80065ea:	60f8      	str	r0, [r7, #12]
 80065ec:	60b9      	str	r1, [r7, #8]
 80065ee:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_CHANNELS(Channel));
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d010      	beq.n	8006618 <HAL_TIM_PWM_ConfigChannel+0x34>
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	2b04      	cmp	r3, #4
 80065fa:	d00d      	beq.n	8006618 <HAL_TIM_PWM_ConfigChannel+0x34>
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	2b08      	cmp	r3, #8
 8006600:	d00a      	beq.n	8006618 <HAL_TIM_PWM_ConfigChannel+0x34>
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	2b0c      	cmp	r3, #12
 8006606:	d007      	beq.n	8006618 <HAL_TIM_PWM_ConfigChannel+0x34>
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	2b3c      	cmp	r3, #60	; 0x3c
 800660c:	d004      	beq.n	8006618 <HAL_TIM_PWM_ConfigChannel+0x34>
 800660e:	f640 51ec 	movw	r1, #3564	; 0xdec
 8006612:	4895      	ldr	r0, [pc, #596]	; (8006868 <HAL_TIM_PWM_ConfigChannel+0x284>)
 8006614:	f7fb f82d 	bl	8001672 <assert_failed>
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
 8006618:	68bb      	ldr	r3, [r7, #8]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	2b60      	cmp	r3, #96	; 0x60
 800661e:	d008      	beq.n	8006632 <HAL_TIM_PWM_ConfigChannel+0x4e>
 8006620:	68bb      	ldr	r3, [r7, #8]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	2b70      	cmp	r3, #112	; 0x70
 8006626:	d004      	beq.n	8006632 <HAL_TIM_PWM_ConfigChannel+0x4e>
 8006628:	f640 51ed 	movw	r1, #3565	; 0xded
 800662c:	488e      	ldr	r0, [pc, #568]	; (8006868 <HAL_TIM_PWM_ConfigChannel+0x284>)
 800662e:	f7fb f820 	bl	8001672 <assert_failed>
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
 8006632:	68bb      	ldr	r3, [r7, #8]
 8006634:	689b      	ldr	r3, [r3, #8]
 8006636:	2b00      	cmp	r3, #0
 8006638:	d008      	beq.n	800664c <HAL_TIM_PWM_ConfigChannel+0x68>
 800663a:	68bb      	ldr	r3, [r7, #8]
 800663c:	689b      	ldr	r3, [r3, #8]
 800663e:	2b02      	cmp	r3, #2
 8006640:	d004      	beq.n	800664c <HAL_TIM_PWM_ConfigChannel+0x68>
 8006642:	f640 51ee 	movw	r1, #3566	; 0xdee
 8006646:	4888      	ldr	r0, [pc, #544]	; (8006868 <HAL_TIM_PWM_ConfigChannel+0x284>)
 8006648:	f7fb f813 	bl	8001672 <assert_failed>
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));
 800664c:	68bb      	ldr	r3, [r7, #8]
 800664e:	691b      	ldr	r3, [r3, #16]
 8006650:	2b00      	cmp	r3, #0
 8006652:	d008      	beq.n	8006666 <HAL_TIM_PWM_ConfigChannel+0x82>
 8006654:	68bb      	ldr	r3, [r7, #8]
 8006656:	691b      	ldr	r3, [r3, #16]
 8006658:	2b04      	cmp	r3, #4
 800665a:	d004      	beq.n	8006666 <HAL_TIM_PWM_ConfigChannel+0x82>
 800665c:	f640 51ef 	movw	r1, #3567	; 0xdef
 8006660:	4881      	ldr	r0, [pc, #516]	; (8006868 <HAL_TIM_PWM_ConfigChannel+0x284>)
 8006662:	f7fb f806 	bl	8001672 <assert_failed>

  /* Process Locked */
  __HAL_LOCK(htim);
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800666c:	2b01      	cmp	r3, #1
 800666e:	d101      	bne.n	8006674 <HAL_TIM_PWM_ConfigChannel+0x90>
 8006670:	2302      	movs	r3, #2
 8006672:	e152      	b.n	800691a <HAL_TIM_PWM_ConfigChannel+0x336>
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	2201      	movs	r2, #1
 8006678:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	2202      	movs	r2, #2
 8006680:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	2b0c      	cmp	r3, #12
 8006688:	f200 813d 	bhi.w	8006906 <HAL_TIM_PWM_ConfigChannel+0x322>
 800668c:	a201      	add	r2, pc, #4	; (adr r2, 8006694 <HAL_TIM_PWM_ConfigChannel+0xb0>)
 800668e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006692:	bf00      	nop
 8006694:	080066c9 	.word	0x080066c9
 8006698:	08006907 	.word	0x08006907
 800669c:	08006907 	.word	0x08006907
 80066a0:	08006907 	.word	0x08006907
 80066a4:	08006763 	.word	0x08006763
 80066a8:	08006907 	.word	0x08006907
 80066ac:	08006907 	.word	0x08006907
 80066b0:	08006907 	.word	0x08006907
 80066b4:	080067eb 	.word	0x080067eb
 80066b8:	08006907 	.word	0x08006907
 80066bc:	08006907 	.word	0x08006907
 80066c0:	08006907 	.word	0x08006907
 80066c4:	08006889 	.word	0x08006889
  {
    case TIM_CHANNEL_1:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	4a67      	ldr	r2, [pc, #412]	; (800686c <HAL_TIM_PWM_ConfigChannel+0x288>)
 80066ce:	4293      	cmp	r3, r2
 80066d0:	d027      	beq.n	8006722 <HAL_TIM_PWM_ConfigChannel+0x13e>
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80066da:	d022      	beq.n	8006722 <HAL_TIM_PWM_ConfigChannel+0x13e>
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	4a63      	ldr	r2, [pc, #396]	; (8006870 <HAL_TIM_PWM_ConfigChannel+0x28c>)
 80066e2:	4293      	cmp	r3, r2
 80066e4:	d01d      	beq.n	8006722 <HAL_TIM_PWM_ConfigChannel+0x13e>
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	4a62      	ldr	r2, [pc, #392]	; (8006874 <HAL_TIM_PWM_ConfigChannel+0x290>)
 80066ec:	4293      	cmp	r3, r2
 80066ee:	d018      	beq.n	8006722 <HAL_TIM_PWM_ConfigChannel+0x13e>
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	4a60      	ldr	r2, [pc, #384]	; (8006878 <HAL_TIM_PWM_ConfigChannel+0x294>)
 80066f6:	4293      	cmp	r3, r2
 80066f8:	d013      	beq.n	8006722 <HAL_TIM_PWM_ConfigChannel+0x13e>
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	4a5f      	ldr	r2, [pc, #380]	; (800687c <HAL_TIM_PWM_ConfigChannel+0x298>)
 8006700:	4293      	cmp	r3, r2
 8006702:	d00e      	beq.n	8006722 <HAL_TIM_PWM_ConfigChannel+0x13e>
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	4a5d      	ldr	r2, [pc, #372]	; (8006880 <HAL_TIM_PWM_ConfigChannel+0x29c>)
 800670a:	4293      	cmp	r3, r2
 800670c:	d009      	beq.n	8006722 <HAL_TIM_PWM_ConfigChannel+0x13e>
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	4a5c      	ldr	r2, [pc, #368]	; (8006884 <HAL_TIM_PWM_ConfigChannel+0x2a0>)
 8006714:	4293      	cmp	r3, r2
 8006716:	d004      	beq.n	8006722 <HAL_TIM_PWM_ConfigChannel+0x13e>
 8006718:	f640 51fb 	movw	r1, #3579	; 0xdfb
 800671c:	4852      	ldr	r0, [pc, #328]	; (8006868 <HAL_TIM_PWM_ConfigChannel+0x284>)
 800671e:	f7fa ffa8 	bl	8001672 <assert_failed>

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	68b9      	ldr	r1, [r7, #8]
 8006728:	4618      	mov	r0, r3
 800672a:	f000 fc7d 	bl	8007028 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	699a      	ldr	r2, [r3, #24]
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	f042 0208 	orr.w	r2, r2, #8
 800673c:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	699a      	ldr	r2, [r3, #24]
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	f022 0204 	bic.w	r2, r2, #4
 800674c:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	6999      	ldr	r1, [r3, #24]
 8006754:	68bb      	ldr	r3, [r7, #8]
 8006756:	691a      	ldr	r2, [r3, #16]
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	430a      	orrs	r2, r1
 800675e:	619a      	str	r2, [r3, #24]
      break;
 8006760:	e0d2      	b.n	8006908 <HAL_TIM_PWM_ConfigChannel+0x324>
    }

    case TIM_CHANNEL_2:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	4a41      	ldr	r2, [pc, #260]	; (800686c <HAL_TIM_PWM_ConfigChannel+0x288>)
 8006768:	4293      	cmp	r3, r2
 800676a:	d01d      	beq.n	80067a8 <HAL_TIM_PWM_ConfigChannel+0x1c4>
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006774:	d018      	beq.n	80067a8 <HAL_TIM_PWM_ConfigChannel+0x1c4>
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	4a3d      	ldr	r2, [pc, #244]	; (8006870 <HAL_TIM_PWM_ConfigChannel+0x28c>)
 800677c:	4293      	cmp	r3, r2
 800677e:	d013      	beq.n	80067a8 <HAL_TIM_PWM_ConfigChannel+0x1c4>
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	4a3b      	ldr	r2, [pc, #236]	; (8006874 <HAL_TIM_PWM_ConfigChannel+0x290>)
 8006786:	4293      	cmp	r3, r2
 8006788:	d00e      	beq.n	80067a8 <HAL_TIM_PWM_ConfigChannel+0x1c4>
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	4a3a      	ldr	r2, [pc, #232]	; (8006878 <HAL_TIM_PWM_ConfigChannel+0x294>)
 8006790:	4293      	cmp	r3, r2
 8006792:	d009      	beq.n	80067a8 <HAL_TIM_PWM_ConfigChannel+0x1c4>
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	4a38      	ldr	r2, [pc, #224]	; (800687c <HAL_TIM_PWM_ConfigChannel+0x298>)
 800679a:	4293      	cmp	r3, r2
 800679c:	d004      	beq.n	80067a8 <HAL_TIM_PWM_ConfigChannel+0x1c4>
 800679e:	f640 610c 	movw	r1, #3596	; 0xe0c
 80067a2:	4831      	ldr	r0, [pc, #196]	; (8006868 <HAL_TIM_PWM_ConfigChannel+0x284>)
 80067a4:	f7fa ff65 	bl	8001672 <assert_failed>

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	68b9      	ldr	r1, [r7, #8]
 80067ae:	4618      	mov	r0, r3
 80067b0:	f000 fcca 	bl	8007148 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	699a      	ldr	r2, [r3, #24]
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80067c2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	699a      	ldr	r2, [r3, #24]
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80067d2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	6999      	ldr	r1, [r3, #24]
 80067da:	68bb      	ldr	r3, [r7, #8]
 80067dc:	691b      	ldr	r3, [r3, #16]
 80067de:	021a      	lsls	r2, r3, #8
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	430a      	orrs	r2, r1
 80067e6:	619a      	str	r2, [r3, #24]
      break;
 80067e8:	e08e      	b.n	8006908 <HAL_TIM_PWM_ConfigChannel+0x324>
    }

    case TIM_CHANNEL_3:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	4a1f      	ldr	r2, [pc, #124]	; (800686c <HAL_TIM_PWM_ConfigChannel+0x288>)
 80067f0:	4293      	cmp	r3, r2
 80067f2:	d018      	beq.n	8006826 <HAL_TIM_PWM_ConfigChannel+0x242>
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80067fc:	d013      	beq.n	8006826 <HAL_TIM_PWM_ConfigChannel+0x242>
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	4a1b      	ldr	r2, [pc, #108]	; (8006870 <HAL_TIM_PWM_ConfigChannel+0x28c>)
 8006804:	4293      	cmp	r3, r2
 8006806:	d00e      	beq.n	8006826 <HAL_TIM_PWM_ConfigChannel+0x242>
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	4a19      	ldr	r2, [pc, #100]	; (8006874 <HAL_TIM_PWM_ConfigChannel+0x290>)
 800680e:	4293      	cmp	r3, r2
 8006810:	d009      	beq.n	8006826 <HAL_TIM_PWM_ConfigChannel+0x242>
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	4a18      	ldr	r2, [pc, #96]	; (8006878 <HAL_TIM_PWM_ConfigChannel+0x294>)
 8006818:	4293      	cmp	r3, r2
 800681a:	d004      	beq.n	8006826 <HAL_TIM_PWM_ConfigChannel+0x242>
 800681c:	f640 611d 	movw	r1, #3613	; 0xe1d
 8006820:	4811      	ldr	r0, [pc, #68]	; (8006868 <HAL_TIM_PWM_ConfigChannel+0x284>)
 8006822:	f7fa ff26 	bl	8001672 <assert_failed>

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	68b9      	ldr	r1, [r7, #8]
 800682c:	4618      	mov	r0, r3
 800682e:	f000 fd1f 	bl	8007270 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	69da      	ldr	r2, [r3, #28]
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	f042 0208 	orr.w	r2, r2, #8
 8006840:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	69da      	ldr	r2, [r3, #28]
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	f022 0204 	bic.w	r2, r2, #4
 8006850:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	69d9      	ldr	r1, [r3, #28]
 8006858:	68bb      	ldr	r3, [r7, #8]
 800685a:	691a      	ldr	r2, [r3, #16]
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	430a      	orrs	r2, r1
 8006862:	61da      	str	r2, [r3, #28]
      break;
 8006864:	e050      	b.n	8006908 <HAL_TIM_PWM_ConfigChannel+0x324>
 8006866:	bf00      	nop
 8006868:	0800de34 	.word	0x0800de34
 800686c:	40010000 	.word	0x40010000
 8006870:	40000400 	.word	0x40000400
 8006874:	40000800 	.word	0x40000800
 8006878:	40000c00 	.word	0x40000c00
 800687c:	40014000 	.word	0x40014000
 8006880:	40014400 	.word	0x40014400
 8006884:	40014800 	.word	0x40014800
    }

    case TIM_CHANNEL_4:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	4a25      	ldr	r2, [pc, #148]	; (8006924 <HAL_TIM_PWM_ConfigChannel+0x340>)
 800688e:	4293      	cmp	r3, r2
 8006890:	d018      	beq.n	80068c4 <HAL_TIM_PWM_ConfigChannel+0x2e0>
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800689a:	d013      	beq.n	80068c4 <HAL_TIM_PWM_ConfigChannel+0x2e0>
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	4a21      	ldr	r2, [pc, #132]	; (8006928 <HAL_TIM_PWM_ConfigChannel+0x344>)
 80068a2:	4293      	cmp	r3, r2
 80068a4:	d00e      	beq.n	80068c4 <HAL_TIM_PWM_ConfigChannel+0x2e0>
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	4a20      	ldr	r2, [pc, #128]	; (800692c <HAL_TIM_PWM_ConfigChannel+0x348>)
 80068ac:	4293      	cmp	r3, r2
 80068ae:	d009      	beq.n	80068c4 <HAL_TIM_PWM_ConfigChannel+0x2e0>
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	4a1e      	ldr	r2, [pc, #120]	; (8006930 <HAL_TIM_PWM_ConfigChannel+0x34c>)
 80068b6:	4293      	cmp	r3, r2
 80068b8:	d004      	beq.n	80068c4 <HAL_TIM_PWM_ConfigChannel+0x2e0>
 80068ba:	f640 612e 	movw	r1, #3630	; 0xe2e
 80068be:	481d      	ldr	r0, [pc, #116]	; (8006934 <HAL_TIM_PWM_ConfigChannel+0x350>)
 80068c0:	f7fa fed7 	bl	8001672 <assert_failed>

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	68b9      	ldr	r1, [r7, #8]
 80068ca:	4618      	mov	r0, r3
 80068cc:	f000 fd64 	bl	8007398 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	69da      	ldr	r2, [r3, #28]
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80068de:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	69da      	ldr	r2, [r3, #28]
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80068ee:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	69d9      	ldr	r1, [r3, #28]
 80068f6:	68bb      	ldr	r3, [r7, #8]
 80068f8:	691b      	ldr	r3, [r3, #16]
 80068fa:	021a      	lsls	r2, r3, #8
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	430a      	orrs	r2, r1
 8006902:	61da      	str	r2, [r3, #28]
      break;
 8006904:	e000      	b.n	8006908 <HAL_TIM_PWM_ConfigChannel+0x324>
    }

    default:
      break;
 8006906:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	2201      	movs	r2, #1
 800690c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	2200      	movs	r2, #0
 8006914:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006918:	2300      	movs	r3, #0
}
 800691a:	4618      	mov	r0, r3
 800691c:	3710      	adds	r7, #16
 800691e:	46bd      	mov	sp, r7
 8006920:	bd80      	pop	{r7, pc}
 8006922:	bf00      	nop
 8006924:	40010000 	.word	0x40010000
 8006928:	40000400 	.word	0x40000400
 800692c:	40000800 	.word	0x40000800
 8006930:	40000c00 	.word	0x40000c00
 8006934:	0800de34 	.word	0x0800de34

08006938 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006938:	b580      	push	{r7, lr}
 800693a:	b084      	sub	sp, #16
 800693c:	af00      	add	r7, sp, #0
 800693e:	6078      	str	r0, [r7, #4]
 8006940:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006948:	2b01      	cmp	r3, #1
 800694a:	d101      	bne.n	8006950 <HAL_TIM_ConfigClockSource+0x18>
 800694c:	2302      	movs	r3, #2
 800694e:	e2db      	b.n	8006f08 <HAL_TIM_ConfigClockSource+0x5d0>
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	2201      	movs	r2, #1
 8006954:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	2202      	movs	r2, #2
 800695c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));
 8006960:	683b      	ldr	r3, [r7, #0]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006968:	d029      	beq.n	80069be <HAL_TIM_ConfigClockSource+0x86>
 800696a:	683b      	ldr	r3, [r7, #0]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006972:	d024      	beq.n	80069be <HAL_TIM_ConfigClockSource+0x86>
 8006974:	683b      	ldr	r3, [r7, #0]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	2b00      	cmp	r3, #0
 800697a:	d020      	beq.n	80069be <HAL_TIM_ConfigClockSource+0x86>
 800697c:	683b      	ldr	r3, [r7, #0]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	2b10      	cmp	r3, #16
 8006982:	d01c      	beq.n	80069be <HAL_TIM_ConfigClockSource+0x86>
 8006984:	683b      	ldr	r3, [r7, #0]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	2b20      	cmp	r3, #32
 800698a:	d018      	beq.n	80069be <HAL_TIM_ConfigClockSource+0x86>
 800698c:	683b      	ldr	r3, [r7, #0]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	2b30      	cmp	r3, #48	; 0x30
 8006992:	d014      	beq.n	80069be <HAL_TIM_ConfigClockSource+0x86>
 8006994:	683b      	ldr	r3, [r7, #0]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	2b40      	cmp	r3, #64	; 0x40
 800699a:	d010      	beq.n	80069be <HAL_TIM_ConfigClockSource+0x86>
 800699c:	683b      	ldr	r3, [r7, #0]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	2b50      	cmp	r3, #80	; 0x50
 80069a2:	d00c      	beq.n	80069be <HAL_TIM_ConfigClockSource+0x86>
 80069a4:	683b      	ldr	r3, [r7, #0]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	2b60      	cmp	r3, #96	; 0x60
 80069aa:	d008      	beq.n	80069be <HAL_TIM_ConfigClockSource+0x86>
 80069ac:	683b      	ldr	r3, [r7, #0]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	2b70      	cmp	r3, #112	; 0x70
 80069b2:	d004      	beq.n	80069be <HAL_TIM_ConfigClockSource+0x86>
 80069b4:	f241 118b 	movw	r1, #4491	; 0x118b
 80069b8:	4873      	ldr	r0, [pc, #460]	; (8006b88 <HAL_TIM_ConfigClockSource+0x250>)
 80069ba:	f7fa fe5a 	bl	8001672 <assert_failed>

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	689b      	ldr	r3, [r3, #8]
 80069c4:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80069cc:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80069d4:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	68fa      	ldr	r2, [r7, #12]
 80069dc:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80069de:	683b      	ldr	r3, [r7, #0]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	2b40      	cmp	r3, #64	; 0x40
 80069e4:	f000 8204 	beq.w	8006df0 <HAL_TIM_ConfigClockSource+0x4b8>
 80069e8:	2b40      	cmp	r3, #64	; 0x40
 80069ea:	d80f      	bhi.n	8006a0c <HAL_TIM_ConfigClockSource+0xd4>
 80069ec:	2b10      	cmp	r3, #16
 80069ee:	f000 8255 	beq.w	8006e9c <HAL_TIM_ConfigClockSource+0x564>
 80069f2:	2b10      	cmp	r3, #16
 80069f4:	d803      	bhi.n	80069fe <HAL_TIM_ConfigClockSource+0xc6>
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	f000 8250 	beq.w	8006e9c <HAL_TIM_ConfigClockSource+0x564>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80069fc:	e27b      	b.n	8006ef6 <HAL_TIM_ConfigClockSource+0x5be>
  switch (sClockSourceConfig->ClockSource)
 80069fe:	2b20      	cmp	r3, #32
 8006a00:	f000 824c 	beq.w	8006e9c <HAL_TIM_ConfigClockSource+0x564>
 8006a04:	2b30      	cmp	r3, #48	; 0x30
 8006a06:	f000 8249 	beq.w	8006e9c <HAL_TIM_ConfigClockSource+0x564>
      break;
 8006a0a:	e274      	b.n	8006ef6 <HAL_TIM_ConfigClockSource+0x5be>
  switch (sClockSourceConfig->ClockSource)
 8006a0c:	2b70      	cmp	r3, #112	; 0x70
 8006a0e:	d046      	beq.n	8006a9e <HAL_TIM_ConfigClockSource+0x166>
 8006a10:	2b70      	cmp	r3, #112	; 0x70
 8006a12:	d806      	bhi.n	8006a22 <HAL_TIM_ConfigClockSource+0xea>
 8006a14:	2b50      	cmp	r3, #80	; 0x50
 8006a16:	f000 8133 	beq.w	8006c80 <HAL_TIM_ConfigClockSource+0x348>
 8006a1a:	2b60      	cmp	r3, #96	; 0x60
 8006a1c:	f000 8186 	beq.w	8006d2c <HAL_TIM_ConfigClockSource+0x3f4>
      break;
 8006a20:	e269      	b.n	8006ef6 <HAL_TIM_ConfigClockSource+0x5be>
  switch (sClockSourceConfig->ClockSource)
 8006a22:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006a26:	d004      	beq.n	8006a32 <HAL_TIM_ConfigClockSource+0xfa>
 8006a28:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006a2c:	f000 80bc 	beq.w	8006ba8 <HAL_TIM_ConfigClockSource+0x270>
      break;
 8006a30:	e261      	b.n	8006ef6 <HAL_TIM_ConfigClockSource+0x5be>
      assert_param(IS_TIM_INSTANCE(htim->Instance));
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	4a55      	ldr	r2, [pc, #340]	; (8006b8c <HAL_TIM_ConfigClockSource+0x254>)
 8006a38:	4293      	cmp	r3, r2
 8006a3a:	f000 825b 	beq.w	8006ef4 <HAL_TIM_ConfigClockSource+0x5bc>
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006a46:	f000 8255 	beq.w	8006ef4 <HAL_TIM_ConfigClockSource+0x5bc>
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	4a50      	ldr	r2, [pc, #320]	; (8006b90 <HAL_TIM_ConfigClockSource+0x258>)
 8006a50:	4293      	cmp	r3, r2
 8006a52:	f000 824f 	beq.w	8006ef4 <HAL_TIM_ConfigClockSource+0x5bc>
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	4a4e      	ldr	r2, [pc, #312]	; (8006b94 <HAL_TIM_ConfigClockSource+0x25c>)
 8006a5c:	4293      	cmp	r3, r2
 8006a5e:	f000 8249 	beq.w	8006ef4 <HAL_TIM_ConfigClockSource+0x5bc>
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	4a4c      	ldr	r2, [pc, #304]	; (8006b98 <HAL_TIM_ConfigClockSource+0x260>)
 8006a68:	4293      	cmp	r3, r2
 8006a6a:	f000 8243 	beq.w	8006ef4 <HAL_TIM_ConfigClockSource+0x5bc>
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	4a4a      	ldr	r2, [pc, #296]	; (8006b9c <HAL_TIM_ConfigClockSource+0x264>)
 8006a74:	4293      	cmp	r3, r2
 8006a76:	f000 823d 	beq.w	8006ef4 <HAL_TIM_ConfigClockSource+0x5bc>
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	4a48      	ldr	r2, [pc, #288]	; (8006ba0 <HAL_TIM_ConfigClockSource+0x268>)
 8006a80:	4293      	cmp	r3, r2
 8006a82:	f000 8237 	beq.w	8006ef4 <HAL_TIM_ConfigClockSource+0x5bc>
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	4a46      	ldr	r2, [pc, #280]	; (8006ba4 <HAL_TIM_ConfigClockSource+0x26c>)
 8006a8c:	4293      	cmp	r3, r2
 8006a8e:	f000 8231 	beq.w	8006ef4 <HAL_TIM_ConfigClockSource+0x5bc>
 8006a92:	f241 1197 	movw	r1, #4503	; 0x1197
 8006a96:	483c      	ldr	r0, [pc, #240]	; (8006b88 <HAL_TIM_ConfigClockSource+0x250>)
 8006a98:	f7fa fdeb 	bl	8001672 <assert_failed>
      break;
 8006a9c:	e22a      	b.n	8006ef4 <HAL_TIM_ConfigClockSource+0x5bc>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	4a3a      	ldr	r2, [pc, #232]	; (8006b8c <HAL_TIM_ConfigClockSource+0x254>)
 8006aa4:	4293      	cmp	r3, r2
 8006aa6:	d01d      	beq.n	8006ae4 <HAL_TIM_ConfigClockSource+0x1ac>
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006ab0:	d018      	beq.n	8006ae4 <HAL_TIM_ConfigClockSource+0x1ac>
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	4a36      	ldr	r2, [pc, #216]	; (8006b90 <HAL_TIM_ConfigClockSource+0x258>)
 8006ab8:	4293      	cmp	r3, r2
 8006aba:	d013      	beq.n	8006ae4 <HAL_TIM_ConfigClockSource+0x1ac>
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	4a34      	ldr	r2, [pc, #208]	; (8006b94 <HAL_TIM_ConfigClockSource+0x25c>)
 8006ac2:	4293      	cmp	r3, r2
 8006ac4:	d00e      	beq.n	8006ae4 <HAL_TIM_ConfigClockSource+0x1ac>
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	4a33      	ldr	r2, [pc, #204]	; (8006b98 <HAL_TIM_ConfigClockSource+0x260>)
 8006acc:	4293      	cmp	r3, r2
 8006ace:	d009      	beq.n	8006ae4 <HAL_TIM_ConfigClockSource+0x1ac>
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	4a31      	ldr	r2, [pc, #196]	; (8006b9c <HAL_TIM_ConfigClockSource+0x264>)
 8006ad6:	4293      	cmp	r3, r2
 8006ad8:	d004      	beq.n	8006ae4 <HAL_TIM_ConfigClockSource+0x1ac>
 8006ada:	f241 119e 	movw	r1, #4510	; 0x119e
 8006ade:	482a      	ldr	r0, [pc, #168]	; (8006b88 <HAL_TIM_ConfigClockSource+0x250>)
 8006ae0:	f7fa fdc7 	bl	8001672 <assert_failed>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 8006ae4:	683b      	ldr	r3, [r7, #0]
 8006ae6:	689b      	ldr	r3, [r3, #8]
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d013      	beq.n	8006b14 <HAL_TIM_ConfigClockSource+0x1dc>
 8006aec:	683b      	ldr	r3, [r7, #0]
 8006aee:	689b      	ldr	r3, [r3, #8]
 8006af0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006af4:	d00e      	beq.n	8006b14 <HAL_TIM_ConfigClockSource+0x1dc>
 8006af6:	683b      	ldr	r3, [r7, #0]
 8006af8:	689b      	ldr	r3, [r3, #8]
 8006afa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006afe:	d009      	beq.n	8006b14 <HAL_TIM_ConfigClockSource+0x1dc>
 8006b00:	683b      	ldr	r3, [r7, #0]
 8006b02:	689b      	ldr	r3, [r3, #8]
 8006b04:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006b08:	d004      	beq.n	8006b14 <HAL_TIM_ConfigClockSource+0x1dc>
 8006b0a:	f241 11a1 	movw	r1, #4513	; 0x11a1
 8006b0e:	481e      	ldr	r0, [pc, #120]	; (8006b88 <HAL_TIM_ConfigClockSource+0x250>)
 8006b10:	f7fa fdaf 	bl	8001672 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8006b14:	683b      	ldr	r3, [r7, #0]
 8006b16:	685b      	ldr	r3, [r3, #4]
 8006b18:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006b1c:	d014      	beq.n	8006b48 <HAL_TIM_ConfigClockSource+0x210>
 8006b1e:	683b      	ldr	r3, [r7, #0]
 8006b20:	685b      	ldr	r3, [r3, #4]
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d010      	beq.n	8006b48 <HAL_TIM_ConfigClockSource+0x210>
 8006b26:	683b      	ldr	r3, [r7, #0]
 8006b28:	685b      	ldr	r3, [r3, #4]
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d00c      	beq.n	8006b48 <HAL_TIM_ConfigClockSource+0x210>
 8006b2e:	683b      	ldr	r3, [r7, #0]
 8006b30:	685b      	ldr	r3, [r3, #4]
 8006b32:	2b02      	cmp	r3, #2
 8006b34:	d008      	beq.n	8006b48 <HAL_TIM_ConfigClockSource+0x210>
 8006b36:	683b      	ldr	r3, [r7, #0]
 8006b38:	685b      	ldr	r3, [r3, #4]
 8006b3a:	2b0a      	cmp	r3, #10
 8006b3c:	d004      	beq.n	8006b48 <HAL_TIM_ConfigClockSource+0x210>
 8006b3e:	f241 11a2 	movw	r1, #4514	; 0x11a2
 8006b42:	4811      	ldr	r0, [pc, #68]	; (8006b88 <HAL_TIM_ConfigClockSource+0x250>)
 8006b44:	f7fa fd95 	bl	8001672 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8006b48:	683b      	ldr	r3, [r7, #0]
 8006b4a:	68db      	ldr	r3, [r3, #12]
 8006b4c:	2b0f      	cmp	r3, #15
 8006b4e:	d904      	bls.n	8006b5a <HAL_TIM_ConfigClockSource+0x222>
 8006b50:	f241 11a3 	movw	r1, #4515	; 0x11a3
 8006b54:	480c      	ldr	r0, [pc, #48]	; (8006b88 <HAL_TIM_ConfigClockSource+0x250>)
 8006b56:	f7fa fd8c 	bl	8001672 <assert_failed>
      TIM_ETR_SetConfig(htim->Instance,
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	6818      	ldr	r0, [r3, #0]
 8006b5e:	683b      	ldr	r3, [r7, #0]
 8006b60:	6899      	ldr	r1, [r3, #8]
 8006b62:	683b      	ldr	r3, [r7, #0]
 8006b64:	685a      	ldr	r2, [r3, #4]
 8006b66:	683b      	ldr	r3, [r7, #0]
 8006b68:	68db      	ldr	r3, [r3, #12]
 8006b6a:	f000 fced 	bl	8007548 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	689b      	ldr	r3, [r3, #8]
 8006b74:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006b7c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	68fa      	ldr	r2, [r7, #12]
 8006b84:	609a      	str	r2, [r3, #8]
      break;
 8006b86:	e1b6      	b.n	8006ef6 <HAL_TIM_ConfigClockSource+0x5be>
 8006b88:	0800de34 	.word	0x0800de34
 8006b8c:	40010000 	.word	0x40010000
 8006b90:	40000400 	.word	0x40000400
 8006b94:	40000800 	.word	0x40000800
 8006b98:	40000c00 	.word	0x40000c00
 8006b9c:	40014000 	.word	0x40014000
 8006ba0:	40014400 	.word	0x40014400
 8006ba4:	40014800 	.word	0x40014800
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE2_INSTANCE(htim->Instance));
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	4a8a      	ldr	r2, [pc, #552]	; (8006dd8 <HAL_TIM_ConfigClockSource+0x4a0>)
 8006bae:	4293      	cmp	r3, r2
 8006bb0:	d018      	beq.n	8006be4 <HAL_TIM_ConfigClockSource+0x2ac>
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006bba:	d013      	beq.n	8006be4 <HAL_TIM_ConfigClockSource+0x2ac>
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	4a86      	ldr	r2, [pc, #536]	; (8006ddc <HAL_TIM_ConfigClockSource+0x4a4>)
 8006bc2:	4293      	cmp	r3, r2
 8006bc4:	d00e      	beq.n	8006be4 <HAL_TIM_ConfigClockSource+0x2ac>
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	4a85      	ldr	r2, [pc, #532]	; (8006de0 <HAL_TIM_ConfigClockSource+0x4a8>)
 8006bcc:	4293      	cmp	r3, r2
 8006bce:	d009      	beq.n	8006be4 <HAL_TIM_ConfigClockSource+0x2ac>
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	4a83      	ldr	r2, [pc, #524]	; (8006de4 <HAL_TIM_ConfigClockSource+0x4ac>)
 8006bd6:	4293      	cmp	r3, r2
 8006bd8:	d004      	beq.n	8006be4 <HAL_TIM_ConfigClockSource+0x2ac>
 8006bda:	f241 11b6 	movw	r1, #4534	; 0x11b6
 8006bde:	4882      	ldr	r0, [pc, #520]	; (8006de8 <HAL_TIM_ConfigClockSource+0x4b0>)
 8006be0:	f7fa fd47 	bl	8001672 <assert_failed>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 8006be4:	683b      	ldr	r3, [r7, #0]
 8006be6:	689b      	ldr	r3, [r3, #8]
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d013      	beq.n	8006c14 <HAL_TIM_ConfigClockSource+0x2dc>
 8006bec:	683b      	ldr	r3, [r7, #0]
 8006bee:	689b      	ldr	r3, [r3, #8]
 8006bf0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006bf4:	d00e      	beq.n	8006c14 <HAL_TIM_ConfigClockSource+0x2dc>
 8006bf6:	683b      	ldr	r3, [r7, #0]
 8006bf8:	689b      	ldr	r3, [r3, #8]
 8006bfa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006bfe:	d009      	beq.n	8006c14 <HAL_TIM_ConfigClockSource+0x2dc>
 8006c00:	683b      	ldr	r3, [r7, #0]
 8006c02:	689b      	ldr	r3, [r3, #8]
 8006c04:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006c08:	d004      	beq.n	8006c14 <HAL_TIM_ConfigClockSource+0x2dc>
 8006c0a:	f241 11b9 	movw	r1, #4537	; 0x11b9
 8006c0e:	4876      	ldr	r0, [pc, #472]	; (8006de8 <HAL_TIM_ConfigClockSource+0x4b0>)
 8006c10:	f7fa fd2f 	bl	8001672 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8006c14:	683b      	ldr	r3, [r7, #0]
 8006c16:	685b      	ldr	r3, [r3, #4]
 8006c18:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006c1c:	d014      	beq.n	8006c48 <HAL_TIM_ConfigClockSource+0x310>
 8006c1e:	683b      	ldr	r3, [r7, #0]
 8006c20:	685b      	ldr	r3, [r3, #4]
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d010      	beq.n	8006c48 <HAL_TIM_ConfigClockSource+0x310>
 8006c26:	683b      	ldr	r3, [r7, #0]
 8006c28:	685b      	ldr	r3, [r3, #4]
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d00c      	beq.n	8006c48 <HAL_TIM_ConfigClockSource+0x310>
 8006c2e:	683b      	ldr	r3, [r7, #0]
 8006c30:	685b      	ldr	r3, [r3, #4]
 8006c32:	2b02      	cmp	r3, #2
 8006c34:	d008      	beq.n	8006c48 <HAL_TIM_ConfigClockSource+0x310>
 8006c36:	683b      	ldr	r3, [r7, #0]
 8006c38:	685b      	ldr	r3, [r3, #4]
 8006c3a:	2b0a      	cmp	r3, #10
 8006c3c:	d004      	beq.n	8006c48 <HAL_TIM_ConfigClockSource+0x310>
 8006c3e:	f241 11ba 	movw	r1, #4538	; 0x11ba
 8006c42:	4869      	ldr	r0, [pc, #420]	; (8006de8 <HAL_TIM_ConfigClockSource+0x4b0>)
 8006c44:	f7fa fd15 	bl	8001672 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8006c48:	683b      	ldr	r3, [r7, #0]
 8006c4a:	68db      	ldr	r3, [r3, #12]
 8006c4c:	2b0f      	cmp	r3, #15
 8006c4e:	d904      	bls.n	8006c5a <HAL_TIM_ConfigClockSource+0x322>
 8006c50:	f241 11bb 	movw	r1, #4539	; 0x11bb
 8006c54:	4864      	ldr	r0, [pc, #400]	; (8006de8 <HAL_TIM_ConfigClockSource+0x4b0>)
 8006c56:	f7fa fd0c 	bl	8001672 <assert_failed>
      TIM_ETR_SetConfig(htim->Instance,
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	6818      	ldr	r0, [r3, #0]
 8006c5e:	683b      	ldr	r3, [r7, #0]
 8006c60:	6899      	ldr	r1, [r3, #8]
 8006c62:	683b      	ldr	r3, [r7, #0]
 8006c64:	685a      	ldr	r2, [r3, #4]
 8006c66:	683b      	ldr	r3, [r7, #0]
 8006c68:	68db      	ldr	r3, [r3, #12]
 8006c6a:	f000 fc6d 	bl	8007548 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	689a      	ldr	r2, [r3, #8]
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006c7c:	609a      	str	r2, [r3, #8]
      break;
 8006c7e:	e13a      	b.n	8006ef6 <HAL_TIM_ConfigClockSource+0x5be>
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	4a54      	ldr	r2, [pc, #336]	; (8006dd8 <HAL_TIM_ConfigClockSource+0x4a0>)
 8006c86:	4293      	cmp	r3, r2
 8006c88:	d01d      	beq.n	8006cc6 <HAL_TIM_ConfigClockSource+0x38e>
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006c92:	d018      	beq.n	8006cc6 <HAL_TIM_ConfigClockSource+0x38e>
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	4a50      	ldr	r2, [pc, #320]	; (8006ddc <HAL_TIM_ConfigClockSource+0x4a4>)
 8006c9a:	4293      	cmp	r3, r2
 8006c9c:	d013      	beq.n	8006cc6 <HAL_TIM_ConfigClockSource+0x38e>
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	4a4f      	ldr	r2, [pc, #316]	; (8006de0 <HAL_TIM_ConfigClockSource+0x4a8>)
 8006ca4:	4293      	cmp	r3, r2
 8006ca6:	d00e      	beq.n	8006cc6 <HAL_TIM_ConfigClockSource+0x38e>
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	4a4d      	ldr	r2, [pc, #308]	; (8006de4 <HAL_TIM_ConfigClockSource+0x4ac>)
 8006cae:	4293      	cmp	r3, r2
 8006cb0:	d009      	beq.n	8006cc6 <HAL_TIM_ConfigClockSource+0x38e>
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	4a4d      	ldr	r2, [pc, #308]	; (8006dec <HAL_TIM_ConfigClockSource+0x4b4>)
 8006cb8:	4293      	cmp	r3, r2
 8006cba:	d004      	beq.n	8006cc6 <HAL_TIM_ConfigClockSource+0x38e>
 8006cbc:	f241 11ca 	movw	r1, #4554	; 0x11ca
 8006cc0:	4849      	ldr	r0, [pc, #292]	; (8006de8 <HAL_TIM_ConfigClockSource+0x4b0>)
 8006cc2:	f7fa fcd6 	bl	8001672 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8006cc6:	683b      	ldr	r3, [r7, #0]
 8006cc8:	685b      	ldr	r3, [r3, #4]
 8006cca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006cce:	d014      	beq.n	8006cfa <HAL_TIM_ConfigClockSource+0x3c2>
 8006cd0:	683b      	ldr	r3, [r7, #0]
 8006cd2:	685b      	ldr	r3, [r3, #4]
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d010      	beq.n	8006cfa <HAL_TIM_ConfigClockSource+0x3c2>
 8006cd8:	683b      	ldr	r3, [r7, #0]
 8006cda:	685b      	ldr	r3, [r3, #4]
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d00c      	beq.n	8006cfa <HAL_TIM_ConfigClockSource+0x3c2>
 8006ce0:	683b      	ldr	r3, [r7, #0]
 8006ce2:	685b      	ldr	r3, [r3, #4]
 8006ce4:	2b02      	cmp	r3, #2
 8006ce6:	d008      	beq.n	8006cfa <HAL_TIM_ConfigClockSource+0x3c2>
 8006ce8:	683b      	ldr	r3, [r7, #0]
 8006cea:	685b      	ldr	r3, [r3, #4]
 8006cec:	2b0a      	cmp	r3, #10
 8006cee:	d004      	beq.n	8006cfa <HAL_TIM_ConfigClockSource+0x3c2>
 8006cf0:	f241 11cd 	movw	r1, #4557	; 0x11cd
 8006cf4:	483c      	ldr	r0, [pc, #240]	; (8006de8 <HAL_TIM_ConfigClockSource+0x4b0>)
 8006cf6:	f7fa fcbc 	bl	8001672 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8006cfa:	683b      	ldr	r3, [r7, #0]
 8006cfc:	68db      	ldr	r3, [r3, #12]
 8006cfe:	2b0f      	cmp	r3, #15
 8006d00:	d904      	bls.n	8006d0c <HAL_TIM_ConfigClockSource+0x3d4>
 8006d02:	f241 11ce 	movw	r1, #4558	; 0x11ce
 8006d06:	4838      	ldr	r0, [pc, #224]	; (8006de8 <HAL_TIM_ConfigClockSource+0x4b0>)
 8006d08:	f7fa fcb3 	bl	8001672 <assert_failed>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	6818      	ldr	r0, [r3, #0]
 8006d10:	683b      	ldr	r3, [r7, #0]
 8006d12:	6859      	ldr	r1, [r3, #4]
 8006d14:	683b      	ldr	r3, [r7, #0]
 8006d16:	68db      	ldr	r3, [r3, #12]
 8006d18:	461a      	mov	r2, r3
 8006d1a:	f000 fb9b 	bl	8007454 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	2150      	movs	r1, #80	; 0x50
 8006d24:	4618      	mov	r0, r3
 8006d26:	f000 fbf4 	bl	8007512 <TIM_ITRx_SetConfig>
      break;
 8006d2a:	e0e4      	b.n	8006ef6 <HAL_TIM_ConfigClockSource+0x5be>
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	4a29      	ldr	r2, [pc, #164]	; (8006dd8 <HAL_TIM_ConfigClockSource+0x4a0>)
 8006d32:	4293      	cmp	r3, r2
 8006d34:	d01d      	beq.n	8006d72 <HAL_TIM_ConfigClockSource+0x43a>
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006d3e:	d018      	beq.n	8006d72 <HAL_TIM_ConfigClockSource+0x43a>
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	4a25      	ldr	r2, [pc, #148]	; (8006ddc <HAL_TIM_ConfigClockSource+0x4a4>)
 8006d46:	4293      	cmp	r3, r2
 8006d48:	d013      	beq.n	8006d72 <HAL_TIM_ConfigClockSource+0x43a>
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	4a24      	ldr	r2, [pc, #144]	; (8006de0 <HAL_TIM_ConfigClockSource+0x4a8>)
 8006d50:	4293      	cmp	r3, r2
 8006d52:	d00e      	beq.n	8006d72 <HAL_TIM_ConfigClockSource+0x43a>
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	4a22      	ldr	r2, [pc, #136]	; (8006de4 <HAL_TIM_ConfigClockSource+0x4ac>)
 8006d5a:	4293      	cmp	r3, r2
 8006d5c:	d009      	beq.n	8006d72 <HAL_TIM_ConfigClockSource+0x43a>
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	4a22      	ldr	r2, [pc, #136]	; (8006dec <HAL_TIM_ConfigClockSource+0x4b4>)
 8006d64:	4293      	cmp	r3, r2
 8006d66:	d004      	beq.n	8006d72 <HAL_TIM_ConfigClockSource+0x43a>
 8006d68:	f241 11da 	movw	r1, #4570	; 0x11da
 8006d6c:	481e      	ldr	r0, [pc, #120]	; (8006de8 <HAL_TIM_ConfigClockSource+0x4b0>)
 8006d6e:	f7fa fc80 	bl	8001672 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8006d72:	683b      	ldr	r3, [r7, #0]
 8006d74:	685b      	ldr	r3, [r3, #4]
 8006d76:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006d7a:	d014      	beq.n	8006da6 <HAL_TIM_ConfigClockSource+0x46e>
 8006d7c:	683b      	ldr	r3, [r7, #0]
 8006d7e:	685b      	ldr	r3, [r3, #4]
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d010      	beq.n	8006da6 <HAL_TIM_ConfigClockSource+0x46e>
 8006d84:	683b      	ldr	r3, [r7, #0]
 8006d86:	685b      	ldr	r3, [r3, #4]
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d00c      	beq.n	8006da6 <HAL_TIM_ConfigClockSource+0x46e>
 8006d8c:	683b      	ldr	r3, [r7, #0]
 8006d8e:	685b      	ldr	r3, [r3, #4]
 8006d90:	2b02      	cmp	r3, #2
 8006d92:	d008      	beq.n	8006da6 <HAL_TIM_ConfigClockSource+0x46e>
 8006d94:	683b      	ldr	r3, [r7, #0]
 8006d96:	685b      	ldr	r3, [r3, #4]
 8006d98:	2b0a      	cmp	r3, #10
 8006d9a:	d004      	beq.n	8006da6 <HAL_TIM_ConfigClockSource+0x46e>
 8006d9c:	f241 11dd 	movw	r1, #4573	; 0x11dd
 8006da0:	4811      	ldr	r0, [pc, #68]	; (8006de8 <HAL_TIM_ConfigClockSource+0x4b0>)
 8006da2:	f7fa fc66 	bl	8001672 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8006da6:	683b      	ldr	r3, [r7, #0]
 8006da8:	68db      	ldr	r3, [r3, #12]
 8006daa:	2b0f      	cmp	r3, #15
 8006dac:	d904      	bls.n	8006db8 <HAL_TIM_ConfigClockSource+0x480>
 8006dae:	f241 11de 	movw	r1, #4574	; 0x11de
 8006db2:	480d      	ldr	r0, [pc, #52]	; (8006de8 <HAL_TIM_ConfigClockSource+0x4b0>)
 8006db4:	f7fa fc5d 	bl	8001672 <assert_failed>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	6818      	ldr	r0, [r3, #0]
 8006dbc:	683b      	ldr	r3, [r7, #0]
 8006dbe:	6859      	ldr	r1, [r3, #4]
 8006dc0:	683b      	ldr	r3, [r7, #0]
 8006dc2:	68db      	ldr	r3, [r3, #12]
 8006dc4:	461a      	mov	r2, r3
 8006dc6:	f000 fb74 	bl	80074b2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	2160      	movs	r1, #96	; 0x60
 8006dd0:	4618      	mov	r0, r3
 8006dd2:	f000 fb9e 	bl	8007512 <TIM_ITRx_SetConfig>
      break;
 8006dd6:	e08e      	b.n	8006ef6 <HAL_TIM_ConfigClockSource+0x5be>
 8006dd8:	40010000 	.word	0x40010000
 8006ddc:	40000400 	.word	0x40000400
 8006de0:	40000800 	.word	0x40000800
 8006de4:	40000c00 	.word	0x40000c00
 8006de8:	0800de34 	.word	0x0800de34
 8006dec:	40014000 	.word	0x40014000
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	4a46      	ldr	r2, [pc, #280]	; (8006f10 <HAL_TIM_ConfigClockSource+0x5d8>)
 8006df6:	4293      	cmp	r3, r2
 8006df8:	d01d      	beq.n	8006e36 <HAL_TIM_ConfigClockSource+0x4fe>
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006e02:	d018      	beq.n	8006e36 <HAL_TIM_ConfigClockSource+0x4fe>
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	4a42      	ldr	r2, [pc, #264]	; (8006f14 <HAL_TIM_ConfigClockSource+0x5dc>)
 8006e0a:	4293      	cmp	r3, r2
 8006e0c:	d013      	beq.n	8006e36 <HAL_TIM_ConfigClockSource+0x4fe>
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	4a41      	ldr	r2, [pc, #260]	; (8006f18 <HAL_TIM_ConfigClockSource+0x5e0>)
 8006e14:	4293      	cmp	r3, r2
 8006e16:	d00e      	beq.n	8006e36 <HAL_TIM_ConfigClockSource+0x4fe>
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	4a3f      	ldr	r2, [pc, #252]	; (8006f1c <HAL_TIM_ConfigClockSource+0x5e4>)
 8006e1e:	4293      	cmp	r3, r2
 8006e20:	d009      	beq.n	8006e36 <HAL_TIM_ConfigClockSource+0x4fe>
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	4a3e      	ldr	r2, [pc, #248]	; (8006f20 <HAL_TIM_ConfigClockSource+0x5e8>)
 8006e28:	4293      	cmp	r3, r2
 8006e2a:	d004      	beq.n	8006e36 <HAL_TIM_ConfigClockSource+0x4fe>
 8006e2c:	f241 11ea 	movw	r1, #4586	; 0x11ea
 8006e30:	483c      	ldr	r0, [pc, #240]	; (8006f24 <HAL_TIM_ConfigClockSource+0x5ec>)
 8006e32:	f7fa fc1e 	bl	8001672 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8006e36:	683b      	ldr	r3, [r7, #0]
 8006e38:	685b      	ldr	r3, [r3, #4]
 8006e3a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006e3e:	d014      	beq.n	8006e6a <HAL_TIM_ConfigClockSource+0x532>
 8006e40:	683b      	ldr	r3, [r7, #0]
 8006e42:	685b      	ldr	r3, [r3, #4]
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d010      	beq.n	8006e6a <HAL_TIM_ConfigClockSource+0x532>
 8006e48:	683b      	ldr	r3, [r7, #0]
 8006e4a:	685b      	ldr	r3, [r3, #4]
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d00c      	beq.n	8006e6a <HAL_TIM_ConfigClockSource+0x532>
 8006e50:	683b      	ldr	r3, [r7, #0]
 8006e52:	685b      	ldr	r3, [r3, #4]
 8006e54:	2b02      	cmp	r3, #2
 8006e56:	d008      	beq.n	8006e6a <HAL_TIM_ConfigClockSource+0x532>
 8006e58:	683b      	ldr	r3, [r7, #0]
 8006e5a:	685b      	ldr	r3, [r3, #4]
 8006e5c:	2b0a      	cmp	r3, #10
 8006e5e:	d004      	beq.n	8006e6a <HAL_TIM_ConfigClockSource+0x532>
 8006e60:	f241 11ed 	movw	r1, #4589	; 0x11ed
 8006e64:	482f      	ldr	r0, [pc, #188]	; (8006f24 <HAL_TIM_ConfigClockSource+0x5ec>)
 8006e66:	f7fa fc04 	bl	8001672 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8006e6a:	683b      	ldr	r3, [r7, #0]
 8006e6c:	68db      	ldr	r3, [r3, #12]
 8006e6e:	2b0f      	cmp	r3, #15
 8006e70:	d904      	bls.n	8006e7c <HAL_TIM_ConfigClockSource+0x544>
 8006e72:	f241 11ee 	movw	r1, #4590	; 0x11ee
 8006e76:	482b      	ldr	r0, [pc, #172]	; (8006f24 <HAL_TIM_ConfigClockSource+0x5ec>)
 8006e78:	f7fa fbfb 	bl	8001672 <assert_failed>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	6818      	ldr	r0, [r3, #0]
 8006e80:	683b      	ldr	r3, [r7, #0]
 8006e82:	6859      	ldr	r1, [r3, #4]
 8006e84:	683b      	ldr	r3, [r7, #0]
 8006e86:	68db      	ldr	r3, [r3, #12]
 8006e88:	461a      	mov	r2, r3
 8006e8a:	f000 fae3 	bl	8007454 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	2140      	movs	r1, #64	; 0x40
 8006e94:	4618      	mov	r0, r3
 8006e96:	f000 fb3c 	bl	8007512 <TIM_ITRx_SetConfig>
      break;
 8006e9a:	e02c      	b.n	8006ef6 <HAL_TIM_ConfigClockSource+0x5be>
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	4a1b      	ldr	r2, [pc, #108]	; (8006f10 <HAL_TIM_ConfigClockSource+0x5d8>)
 8006ea2:	4293      	cmp	r3, r2
 8006ea4:	d01d      	beq.n	8006ee2 <HAL_TIM_ConfigClockSource+0x5aa>
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006eae:	d018      	beq.n	8006ee2 <HAL_TIM_ConfigClockSource+0x5aa>
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	4a17      	ldr	r2, [pc, #92]	; (8006f14 <HAL_TIM_ConfigClockSource+0x5dc>)
 8006eb6:	4293      	cmp	r3, r2
 8006eb8:	d013      	beq.n	8006ee2 <HAL_TIM_ConfigClockSource+0x5aa>
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	4a16      	ldr	r2, [pc, #88]	; (8006f18 <HAL_TIM_ConfigClockSource+0x5e0>)
 8006ec0:	4293      	cmp	r3, r2
 8006ec2:	d00e      	beq.n	8006ee2 <HAL_TIM_ConfigClockSource+0x5aa>
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	4a14      	ldr	r2, [pc, #80]	; (8006f1c <HAL_TIM_ConfigClockSource+0x5e4>)
 8006eca:	4293      	cmp	r3, r2
 8006ecc:	d009      	beq.n	8006ee2 <HAL_TIM_ConfigClockSource+0x5aa>
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	4a13      	ldr	r2, [pc, #76]	; (8006f20 <HAL_TIM_ConfigClockSource+0x5e8>)
 8006ed4:	4293      	cmp	r3, r2
 8006ed6:	d004      	beq.n	8006ee2 <HAL_TIM_ConfigClockSource+0x5aa>
 8006ed8:	f241 11fd 	movw	r1, #4605	; 0x11fd
 8006edc:	4811      	ldr	r0, [pc, #68]	; (8006f24 <HAL_TIM_ConfigClockSource+0x5ec>)
 8006ede:	f7fa fbc8 	bl	8001672 <assert_failed>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	681a      	ldr	r2, [r3, #0]
 8006ee6:	683b      	ldr	r3, [r7, #0]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	4619      	mov	r1, r3
 8006eec:	4610      	mov	r0, r2
 8006eee:	f000 fb10 	bl	8007512 <TIM_ITRx_SetConfig>
      break;
 8006ef2:	e000      	b.n	8006ef6 <HAL_TIM_ConfigClockSource+0x5be>
      break;
 8006ef4:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	2201      	movs	r2, #1
 8006efa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	2200      	movs	r2, #0
 8006f02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006f06:	2300      	movs	r3, #0
}
 8006f08:	4618      	mov	r0, r3
 8006f0a:	3710      	adds	r7, #16
 8006f0c:	46bd      	mov	sp, r7
 8006f0e:	bd80      	pop	{r7, pc}
 8006f10:	40010000 	.word	0x40010000
 8006f14:	40000400 	.word	0x40000400
 8006f18:	40000800 	.word	0x40000800
 8006f1c:	40000c00 	.word	0x40000c00
 8006f20:	40014000 	.word	0x40014000
 8006f24:	0800de34 	.word	0x0800de34

08006f28 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006f28:	b480      	push	{r7}
 8006f2a:	b085      	sub	sp, #20
 8006f2c:	af00      	add	r7, sp, #0
 8006f2e:	6078      	str	r0, [r7, #4]
 8006f30:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	4a34      	ldr	r2, [pc, #208]	; (800700c <TIM_Base_SetConfig+0xe4>)
 8006f3c:	4293      	cmp	r3, r2
 8006f3e:	d00f      	beq.n	8006f60 <TIM_Base_SetConfig+0x38>
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006f46:	d00b      	beq.n	8006f60 <TIM_Base_SetConfig+0x38>
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	4a31      	ldr	r2, [pc, #196]	; (8007010 <TIM_Base_SetConfig+0xe8>)
 8006f4c:	4293      	cmp	r3, r2
 8006f4e:	d007      	beq.n	8006f60 <TIM_Base_SetConfig+0x38>
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	4a30      	ldr	r2, [pc, #192]	; (8007014 <TIM_Base_SetConfig+0xec>)
 8006f54:	4293      	cmp	r3, r2
 8006f56:	d003      	beq.n	8006f60 <TIM_Base_SetConfig+0x38>
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	4a2f      	ldr	r2, [pc, #188]	; (8007018 <TIM_Base_SetConfig+0xf0>)
 8006f5c:	4293      	cmp	r3, r2
 8006f5e:	d108      	bne.n	8006f72 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f66:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006f68:	683b      	ldr	r3, [r7, #0]
 8006f6a:	685b      	ldr	r3, [r3, #4]
 8006f6c:	68fa      	ldr	r2, [r7, #12]
 8006f6e:	4313      	orrs	r3, r2
 8006f70:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	4a25      	ldr	r2, [pc, #148]	; (800700c <TIM_Base_SetConfig+0xe4>)
 8006f76:	4293      	cmp	r3, r2
 8006f78:	d01b      	beq.n	8006fb2 <TIM_Base_SetConfig+0x8a>
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006f80:	d017      	beq.n	8006fb2 <TIM_Base_SetConfig+0x8a>
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	4a22      	ldr	r2, [pc, #136]	; (8007010 <TIM_Base_SetConfig+0xe8>)
 8006f86:	4293      	cmp	r3, r2
 8006f88:	d013      	beq.n	8006fb2 <TIM_Base_SetConfig+0x8a>
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	4a21      	ldr	r2, [pc, #132]	; (8007014 <TIM_Base_SetConfig+0xec>)
 8006f8e:	4293      	cmp	r3, r2
 8006f90:	d00f      	beq.n	8006fb2 <TIM_Base_SetConfig+0x8a>
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	4a20      	ldr	r2, [pc, #128]	; (8007018 <TIM_Base_SetConfig+0xf0>)
 8006f96:	4293      	cmp	r3, r2
 8006f98:	d00b      	beq.n	8006fb2 <TIM_Base_SetConfig+0x8a>
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	4a1f      	ldr	r2, [pc, #124]	; (800701c <TIM_Base_SetConfig+0xf4>)
 8006f9e:	4293      	cmp	r3, r2
 8006fa0:	d007      	beq.n	8006fb2 <TIM_Base_SetConfig+0x8a>
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	4a1e      	ldr	r2, [pc, #120]	; (8007020 <TIM_Base_SetConfig+0xf8>)
 8006fa6:	4293      	cmp	r3, r2
 8006fa8:	d003      	beq.n	8006fb2 <TIM_Base_SetConfig+0x8a>
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	4a1d      	ldr	r2, [pc, #116]	; (8007024 <TIM_Base_SetConfig+0xfc>)
 8006fae:	4293      	cmp	r3, r2
 8006fb0:	d108      	bne.n	8006fc4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006fb8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006fba:	683b      	ldr	r3, [r7, #0]
 8006fbc:	68db      	ldr	r3, [r3, #12]
 8006fbe:	68fa      	ldr	r2, [r7, #12]
 8006fc0:	4313      	orrs	r3, r2
 8006fc2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006fca:	683b      	ldr	r3, [r7, #0]
 8006fcc:	695b      	ldr	r3, [r3, #20]
 8006fce:	4313      	orrs	r3, r2
 8006fd0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	68fa      	ldr	r2, [r7, #12]
 8006fd6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006fd8:	683b      	ldr	r3, [r7, #0]
 8006fda:	689a      	ldr	r2, [r3, #8]
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006fe0:	683b      	ldr	r3, [r7, #0]
 8006fe2:	681a      	ldr	r2, [r3, #0]
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	4a08      	ldr	r2, [pc, #32]	; (800700c <TIM_Base_SetConfig+0xe4>)
 8006fec:	4293      	cmp	r3, r2
 8006fee:	d103      	bne.n	8006ff8 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006ff0:	683b      	ldr	r3, [r7, #0]
 8006ff2:	691a      	ldr	r2, [r3, #16]
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	2201      	movs	r2, #1
 8006ffc:	615a      	str	r2, [r3, #20]
}
 8006ffe:	bf00      	nop
 8007000:	3714      	adds	r7, #20
 8007002:	46bd      	mov	sp, r7
 8007004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007008:	4770      	bx	lr
 800700a:	bf00      	nop
 800700c:	40010000 	.word	0x40010000
 8007010:	40000400 	.word	0x40000400
 8007014:	40000800 	.word	0x40000800
 8007018:	40000c00 	.word	0x40000c00
 800701c:	40014000 	.word	0x40014000
 8007020:	40014400 	.word	0x40014400
 8007024:	40014800 	.word	0x40014800

08007028 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007028:	b580      	push	{r7, lr}
 800702a:	b086      	sub	sp, #24
 800702c:	af00      	add	r7, sp, #0
 800702e:	6078      	str	r0, [r7, #4]
 8007030:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	6a1b      	ldr	r3, [r3, #32]
 8007036:	f023 0201 	bic.w	r2, r3, #1
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	6a1b      	ldr	r3, [r3, #32]
 8007042:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	685b      	ldr	r3, [r3, #4]
 8007048:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	699b      	ldr	r3, [r3, #24]
 800704e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007056:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	f023 0303 	bic.w	r3, r3, #3
 800705e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007060:	683b      	ldr	r3, [r7, #0]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	68fa      	ldr	r2, [r7, #12]
 8007066:	4313      	orrs	r3, r2
 8007068:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800706a:	697b      	ldr	r3, [r7, #20]
 800706c:	f023 0302 	bic.w	r3, r3, #2
 8007070:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007072:	683b      	ldr	r3, [r7, #0]
 8007074:	689b      	ldr	r3, [r3, #8]
 8007076:	697a      	ldr	r2, [r7, #20]
 8007078:	4313      	orrs	r3, r2
 800707a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	4a30      	ldr	r2, [pc, #192]	; (8007140 <TIM_OC1_SetConfig+0x118>)
 8007080:	4293      	cmp	r3, r2
 8007082:	d119      	bne.n	80070b8 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 8007084:	683b      	ldr	r3, [r7, #0]
 8007086:	68db      	ldr	r3, [r3, #12]
 8007088:	2b00      	cmp	r3, #0
 800708a:	d008      	beq.n	800709e <TIM_OC1_SetConfig+0x76>
 800708c:	683b      	ldr	r3, [r7, #0]
 800708e:	68db      	ldr	r3, [r3, #12]
 8007090:	2b08      	cmp	r3, #8
 8007092:	d004      	beq.n	800709e <TIM_OC1_SetConfig+0x76>
 8007094:	f241 7102 	movw	r1, #5890	; 0x1702
 8007098:	482a      	ldr	r0, [pc, #168]	; (8007144 <TIM_OC1_SetConfig+0x11c>)
 800709a:	f7fa faea 	bl	8001672 <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800709e:	697b      	ldr	r3, [r7, #20]
 80070a0:	f023 0308 	bic.w	r3, r3, #8
 80070a4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80070a6:	683b      	ldr	r3, [r7, #0]
 80070a8:	68db      	ldr	r3, [r3, #12]
 80070aa:	697a      	ldr	r2, [r7, #20]
 80070ac:	4313      	orrs	r3, r2
 80070ae:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80070b0:	697b      	ldr	r3, [r7, #20]
 80070b2:	f023 0304 	bic.w	r3, r3, #4
 80070b6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	4a21      	ldr	r2, [pc, #132]	; (8007140 <TIM_OC1_SetConfig+0x118>)
 80070bc:	4293      	cmp	r3, r2
 80070be:	d12d      	bne.n	800711c <TIM_OC1_SetConfig+0xf4>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 80070c0:	683b      	ldr	r3, [r7, #0]
 80070c2:	699b      	ldr	r3, [r3, #24]
 80070c4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80070c8:	d008      	beq.n	80070dc <TIM_OC1_SetConfig+0xb4>
 80070ca:	683b      	ldr	r3, [r7, #0]
 80070cc:	699b      	ldr	r3, [r3, #24]
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d004      	beq.n	80070dc <TIM_OC1_SetConfig+0xb4>
 80070d2:	f241 710f 	movw	r1, #5903	; 0x170f
 80070d6:	481b      	ldr	r0, [pc, #108]	; (8007144 <TIM_OC1_SetConfig+0x11c>)
 80070d8:	f7fa facb 	bl	8001672 <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 80070dc:	683b      	ldr	r3, [r7, #0]
 80070de:	695b      	ldr	r3, [r3, #20]
 80070e0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80070e4:	d008      	beq.n	80070f8 <TIM_OC1_SetConfig+0xd0>
 80070e6:	683b      	ldr	r3, [r7, #0]
 80070e8:	695b      	ldr	r3, [r3, #20]
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d004      	beq.n	80070f8 <TIM_OC1_SetConfig+0xd0>
 80070ee:	f241 7110 	movw	r1, #5904	; 0x1710
 80070f2:	4814      	ldr	r0, [pc, #80]	; (8007144 <TIM_OC1_SetConfig+0x11c>)
 80070f4:	f7fa fabd 	bl	8001672 <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80070f8:	693b      	ldr	r3, [r7, #16]
 80070fa:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80070fe:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007100:	693b      	ldr	r3, [r7, #16]
 8007102:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007106:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007108:	683b      	ldr	r3, [r7, #0]
 800710a:	695b      	ldr	r3, [r3, #20]
 800710c:	693a      	ldr	r2, [r7, #16]
 800710e:	4313      	orrs	r3, r2
 8007110:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007112:	683b      	ldr	r3, [r7, #0]
 8007114:	699b      	ldr	r3, [r3, #24]
 8007116:	693a      	ldr	r2, [r7, #16]
 8007118:	4313      	orrs	r3, r2
 800711a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	693a      	ldr	r2, [r7, #16]
 8007120:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	68fa      	ldr	r2, [r7, #12]
 8007126:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007128:	683b      	ldr	r3, [r7, #0]
 800712a:	685a      	ldr	r2, [r3, #4]
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	697a      	ldr	r2, [r7, #20]
 8007134:	621a      	str	r2, [r3, #32]
}
 8007136:	bf00      	nop
 8007138:	3718      	adds	r7, #24
 800713a:	46bd      	mov	sp, r7
 800713c:	bd80      	pop	{r7, pc}
 800713e:	bf00      	nop
 8007140:	40010000 	.word	0x40010000
 8007144:	0800de34 	.word	0x0800de34

08007148 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007148:	b580      	push	{r7, lr}
 800714a:	b086      	sub	sp, #24
 800714c:	af00      	add	r7, sp, #0
 800714e:	6078      	str	r0, [r7, #4]
 8007150:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	6a1b      	ldr	r3, [r3, #32]
 8007156:	f023 0210 	bic.w	r2, r3, #16
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	6a1b      	ldr	r3, [r3, #32]
 8007162:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	685b      	ldr	r3, [r3, #4]
 8007168:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	699b      	ldr	r3, [r3, #24]
 800716e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007176:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800717e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007180:	683b      	ldr	r3, [r7, #0]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	021b      	lsls	r3, r3, #8
 8007186:	68fa      	ldr	r2, [r7, #12]
 8007188:	4313      	orrs	r3, r2
 800718a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800718c:	697b      	ldr	r3, [r7, #20]
 800718e:	f023 0320 	bic.w	r3, r3, #32
 8007192:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007194:	683b      	ldr	r3, [r7, #0]
 8007196:	689b      	ldr	r3, [r3, #8]
 8007198:	011b      	lsls	r3, r3, #4
 800719a:	697a      	ldr	r2, [r7, #20]
 800719c:	4313      	orrs	r3, r2
 800719e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	4a31      	ldr	r2, [pc, #196]	; (8007268 <TIM_OC2_SetConfig+0x120>)
 80071a4:	4293      	cmp	r3, r2
 80071a6:	d11a      	bne.n	80071de <TIM_OC2_SetConfig+0x96>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 80071a8:	683b      	ldr	r3, [r7, #0]
 80071aa:	68db      	ldr	r3, [r3, #12]
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d008      	beq.n	80071c2 <TIM_OC2_SetConfig+0x7a>
 80071b0:	683b      	ldr	r3, [r7, #0]
 80071b2:	68db      	ldr	r3, [r3, #12]
 80071b4:	2b08      	cmp	r3, #8
 80071b6:	d004      	beq.n	80071c2 <TIM_OC2_SetConfig+0x7a>
 80071b8:	f241 714d 	movw	r1, #5965	; 0x174d
 80071bc:	482b      	ldr	r0, [pc, #172]	; (800726c <TIM_OC2_SetConfig+0x124>)
 80071be:	f7fa fa58 	bl	8001672 <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80071c2:	697b      	ldr	r3, [r7, #20]
 80071c4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80071c8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80071ca:	683b      	ldr	r3, [r7, #0]
 80071cc:	68db      	ldr	r3, [r3, #12]
 80071ce:	011b      	lsls	r3, r3, #4
 80071d0:	697a      	ldr	r2, [r7, #20]
 80071d2:	4313      	orrs	r3, r2
 80071d4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80071d6:	697b      	ldr	r3, [r7, #20]
 80071d8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80071dc:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	4a21      	ldr	r2, [pc, #132]	; (8007268 <TIM_OC2_SetConfig+0x120>)
 80071e2:	4293      	cmp	r3, r2
 80071e4:	d12f      	bne.n	8007246 <TIM_OC2_SetConfig+0xfe>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 80071e6:	683b      	ldr	r3, [r7, #0]
 80071e8:	699b      	ldr	r3, [r3, #24]
 80071ea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80071ee:	d008      	beq.n	8007202 <TIM_OC2_SetConfig+0xba>
 80071f0:	683b      	ldr	r3, [r7, #0]
 80071f2:	699b      	ldr	r3, [r3, #24]
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d004      	beq.n	8007202 <TIM_OC2_SetConfig+0xba>
 80071f8:	f241 715b 	movw	r1, #5979	; 0x175b
 80071fc:	481b      	ldr	r0, [pc, #108]	; (800726c <TIM_OC2_SetConfig+0x124>)
 80071fe:	f7fa fa38 	bl	8001672 <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 8007202:	683b      	ldr	r3, [r7, #0]
 8007204:	695b      	ldr	r3, [r3, #20]
 8007206:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800720a:	d008      	beq.n	800721e <TIM_OC2_SetConfig+0xd6>
 800720c:	683b      	ldr	r3, [r7, #0]
 800720e:	695b      	ldr	r3, [r3, #20]
 8007210:	2b00      	cmp	r3, #0
 8007212:	d004      	beq.n	800721e <TIM_OC2_SetConfig+0xd6>
 8007214:	f241 715c 	movw	r1, #5980	; 0x175c
 8007218:	4814      	ldr	r0, [pc, #80]	; (800726c <TIM_OC2_SetConfig+0x124>)
 800721a:	f7fa fa2a 	bl	8001672 <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800721e:	693b      	ldr	r3, [r7, #16]
 8007220:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007224:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007226:	693b      	ldr	r3, [r7, #16]
 8007228:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800722c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800722e:	683b      	ldr	r3, [r7, #0]
 8007230:	695b      	ldr	r3, [r3, #20]
 8007232:	009b      	lsls	r3, r3, #2
 8007234:	693a      	ldr	r2, [r7, #16]
 8007236:	4313      	orrs	r3, r2
 8007238:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800723a:	683b      	ldr	r3, [r7, #0]
 800723c:	699b      	ldr	r3, [r3, #24]
 800723e:	009b      	lsls	r3, r3, #2
 8007240:	693a      	ldr	r2, [r7, #16]
 8007242:	4313      	orrs	r3, r2
 8007244:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	693a      	ldr	r2, [r7, #16]
 800724a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	68fa      	ldr	r2, [r7, #12]
 8007250:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007252:	683b      	ldr	r3, [r7, #0]
 8007254:	685a      	ldr	r2, [r3, #4]
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	697a      	ldr	r2, [r7, #20]
 800725e:	621a      	str	r2, [r3, #32]
}
 8007260:	bf00      	nop
 8007262:	3718      	adds	r7, #24
 8007264:	46bd      	mov	sp, r7
 8007266:	bd80      	pop	{r7, pc}
 8007268:	40010000 	.word	0x40010000
 800726c:	0800de34 	.word	0x0800de34

08007270 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007270:	b580      	push	{r7, lr}
 8007272:	b086      	sub	sp, #24
 8007274:	af00      	add	r7, sp, #0
 8007276:	6078      	str	r0, [r7, #4]
 8007278:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	6a1b      	ldr	r3, [r3, #32]
 800727e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	6a1b      	ldr	r3, [r3, #32]
 800728a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	685b      	ldr	r3, [r3, #4]
 8007290:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	69db      	ldr	r3, [r3, #28]
 8007296:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800729e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	f023 0303 	bic.w	r3, r3, #3
 80072a6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80072a8:	683b      	ldr	r3, [r7, #0]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	68fa      	ldr	r2, [r7, #12]
 80072ae:	4313      	orrs	r3, r2
 80072b0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80072b2:	697b      	ldr	r3, [r7, #20]
 80072b4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80072b8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80072ba:	683b      	ldr	r3, [r7, #0]
 80072bc:	689b      	ldr	r3, [r3, #8]
 80072be:	021b      	lsls	r3, r3, #8
 80072c0:	697a      	ldr	r2, [r7, #20]
 80072c2:	4313      	orrs	r3, r2
 80072c4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	4a31      	ldr	r2, [pc, #196]	; (8007390 <TIM_OC3_SetConfig+0x120>)
 80072ca:	4293      	cmp	r3, r2
 80072cc:	d11a      	bne.n	8007304 <TIM_OC3_SetConfig+0x94>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 80072ce:	683b      	ldr	r3, [r7, #0]
 80072d0:	68db      	ldr	r3, [r3, #12]
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d008      	beq.n	80072e8 <TIM_OC3_SetConfig+0x78>
 80072d6:	683b      	ldr	r3, [r7, #0]
 80072d8:	68db      	ldr	r3, [r3, #12]
 80072da:	2b08      	cmp	r3, #8
 80072dc:	d004      	beq.n	80072e8 <TIM_OC3_SetConfig+0x78>
 80072de:	f241 7198 	movw	r1, #6040	; 0x1798
 80072e2:	482c      	ldr	r0, [pc, #176]	; (8007394 <TIM_OC3_SetConfig+0x124>)
 80072e4:	f7fa f9c5 	bl	8001672 <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80072e8:	697b      	ldr	r3, [r7, #20]
 80072ea:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80072ee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80072f0:	683b      	ldr	r3, [r7, #0]
 80072f2:	68db      	ldr	r3, [r3, #12]
 80072f4:	021b      	lsls	r3, r3, #8
 80072f6:	697a      	ldr	r2, [r7, #20]
 80072f8:	4313      	orrs	r3, r2
 80072fa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80072fc:	697b      	ldr	r3, [r7, #20]
 80072fe:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007302:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	4a22      	ldr	r2, [pc, #136]	; (8007390 <TIM_OC3_SetConfig+0x120>)
 8007308:	4293      	cmp	r3, r2
 800730a:	d12f      	bne.n	800736c <TIM_OC3_SetConfig+0xfc>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 800730c:	683b      	ldr	r3, [r7, #0]
 800730e:	699b      	ldr	r3, [r3, #24]
 8007310:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007314:	d008      	beq.n	8007328 <TIM_OC3_SetConfig+0xb8>
 8007316:	683b      	ldr	r3, [r7, #0]
 8007318:	699b      	ldr	r3, [r3, #24]
 800731a:	2b00      	cmp	r3, #0
 800731c:	d004      	beq.n	8007328 <TIM_OC3_SetConfig+0xb8>
 800731e:	f241 71a5 	movw	r1, #6053	; 0x17a5
 8007322:	481c      	ldr	r0, [pc, #112]	; (8007394 <TIM_OC3_SetConfig+0x124>)
 8007324:	f7fa f9a5 	bl	8001672 <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 8007328:	683b      	ldr	r3, [r7, #0]
 800732a:	695b      	ldr	r3, [r3, #20]
 800732c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007330:	d008      	beq.n	8007344 <TIM_OC3_SetConfig+0xd4>
 8007332:	683b      	ldr	r3, [r7, #0]
 8007334:	695b      	ldr	r3, [r3, #20]
 8007336:	2b00      	cmp	r3, #0
 8007338:	d004      	beq.n	8007344 <TIM_OC3_SetConfig+0xd4>
 800733a:	f241 71a6 	movw	r1, #6054	; 0x17a6
 800733e:	4815      	ldr	r0, [pc, #84]	; (8007394 <TIM_OC3_SetConfig+0x124>)
 8007340:	f7fa f997 	bl	8001672 <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007344:	693b      	ldr	r3, [r7, #16]
 8007346:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800734a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800734c:	693b      	ldr	r3, [r7, #16]
 800734e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007352:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007354:	683b      	ldr	r3, [r7, #0]
 8007356:	695b      	ldr	r3, [r3, #20]
 8007358:	011b      	lsls	r3, r3, #4
 800735a:	693a      	ldr	r2, [r7, #16]
 800735c:	4313      	orrs	r3, r2
 800735e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007360:	683b      	ldr	r3, [r7, #0]
 8007362:	699b      	ldr	r3, [r3, #24]
 8007364:	011b      	lsls	r3, r3, #4
 8007366:	693a      	ldr	r2, [r7, #16]
 8007368:	4313      	orrs	r3, r2
 800736a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	693a      	ldr	r2, [r7, #16]
 8007370:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	68fa      	ldr	r2, [r7, #12]
 8007376:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007378:	683b      	ldr	r3, [r7, #0]
 800737a:	685a      	ldr	r2, [r3, #4]
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	697a      	ldr	r2, [r7, #20]
 8007384:	621a      	str	r2, [r3, #32]
}
 8007386:	bf00      	nop
 8007388:	3718      	adds	r7, #24
 800738a:	46bd      	mov	sp, r7
 800738c:	bd80      	pop	{r7, pc}
 800738e:	bf00      	nop
 8007390:	40010000 	.word	0x40010000
 8007394:	0800de34 	.word	0x0800de34

08007398 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007398:	b580      	push	{r7, lr}
 800739a:	b086      	sub	sp, #24
 800739c:	af00      	add	r7, sp, #0
 800739e:	6078      	str	r0, [r7, #4]
 80073a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	6a1b      	ldr	r3, [r3, #32]
 80073a6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	6a1b      	ldr	r3, [r3, #32]
 80073b2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	685b      	ldr	r3, [r3, #4]
 80073b8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	69db      	ldr	r3, [r3, #28]
 80073be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80073c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80073ce:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80073d0:	683b      	ldr	r3, [r7, #0]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	021b      	lsls	r3, r3, #8
 80073d6:	68fa      	ldr	r2, [r7, #12]
 80073d8:	4313      	orrs	r3, r2
 80073da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80073dc:	693b      	ldr	r3, [r7, #16]
 80073de:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80073e2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80073e4:	683b      	ldr	r3, [r7, #0]
 80073e6:	689b      	ldr	r3, [r3, #8]
 80073e8:	031b      	lsls	r3, r3, #12
 80073ea:	693a      	ldr	r2, [r7, #16]
 80073ec:	4313      	orrs	r3, r2
 80073ee:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	4a16      	ldr	r2, [pc, #88]	; (800744c <TIM_OC4_SetConfig+0xb4>)
 80073f4:	4293      	cmp	r3, r2
 80073f6:	d117      	bne.n	8007428 <TIM_OC4_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 80073f8:	683b      	ldr	r3, [r7, #0]
 80073fa:	695b      	ldr	r3, [r3, #20]
 80073fc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007400:	d008      	beq.n	8007414 <TIM_OC4_SetConfig+0x7c>
 8007402:	683b      	ldr	r3, [r7, #0]
 8007404:	695b      	ldr	r3, [r3, #20]
 8007406:	2b00      	cmp	r3, #0
 8007408:	d004      	beq.n	8007414 <TIM_OC4_SetConfig+0x7c>
 800740a:	f241 71e4 	movw	r1, #6116	; 0x17e4
 800740e:	4810      	ldr	r0, [pc, #64]	; (8007450 <TIM_OC4_SetConfig+0xb8>)
 8007410:	f7fa f92f 	bl	8001672 <assert_failed>

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007414:	697b      	ldr	r3, [r7, #20]
 8007416:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800741a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800741c:	683b      	ldr	r3, [r7, #0]
 800741e:	695b      	ldr	r3, [r3, #20]
 8007420:	019b      	lsls	r3, r3, #6
 8007422:	697a      	ldr	r2, [r7, #20]
 8007424:	4313      	orrs	r3, r2
 8007426:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	697a      	ldr	r2, [r7, #20]
 800742c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	68fa      	ldr	r2, [r7, #12]
 8007432:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007434:	683b      	ldr	r3, [r7, #0]
 8007436:	685a      	ldr	r2, [r3, #4]
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	693a      	ldr	r2, [r7, #16]
 8007440:	621a      	str	r2, [r3, #32]
}
 8007442:	bf00      	nop
 8007444:	3718      	adds	r7, #24
 8007446:	46bd      	mov	sp, r7
 8007448:	bd80      	pop	{r7, pc}
 800744a:	bf00      	nop
 800744c:	40010000 	.word	0x40010000
 8007450:	0800de34 	.word	0x0800de34

08007454 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007454:	b480      	push	{r7}
 8007456:	b087      	sub	sp, #28
 8007458:	af00      	add	r7, sp, #0
 800745a:	60f8      	str	r0, [r7, #12]
 800745c:	60b9      	str	r1, [r7, #8]
 800745e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	6a1b      	ldr	r3, [r3, #32]
 8007464:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	6a1b      	ldr	r3, [r3, #32]
 800746a:	f023 0201 	bic.w	r2, r3, #1
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	699b      	ldr	r3, [r3, #24]
 8007476:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007478:	693b      	ldr	r3, [r7, #16]
 800747a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800747e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	011b      	lsls	r3, r3, #4
 8007484:	693a      	ldr	r2, [r7, #16]
 8007486:	4313      	orrs	r3, r2
 8007488:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800748a:	697b      	ldr	r3, [r7, #20]
 800748c:	f023 030a 	bic.w	r3, r3, #10
 8007490:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007492:	697a      	ldr	r2, [r7, #20]
 8007494:	68bb      	ldr	r3, [r7, #8]
 8007496:	4313      	orrs	r3, r2
 8007498:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	693a      	ldr	r2, [r7, #16]
 800749e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	697a      	ldr	r2, [r7, #20]
 80074a4:	621a      	str	r2, [r3, #32]
}
 80074a6:	bf00      	nop
 80074a8:	371c      	adds	r7, #28
 80074aa:	46bd      	mov	sp, r7
 80074ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074b0:	4770      	bx	lr

080074b2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80074b2:	b480      	push	{r7}
 80074b4:	b087      	sub	sp, #28
 80074b6:	af00      	add	r7, sp, #0
 80074b8:	60f8      	str	r0, [r7, #12]
 80074ba:	60b9      	str	r1, [r7, #8]
 80074bc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	6a1b      	ldr	r3, [r3, #32]
 80074c2:	f023 0210 	bic.w	r2, r3, #16
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	699b      	ldr	r3, [r3, #24]
 80074ce:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	6a1b      	ldr	r3, [r3, #32]
 80074d4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80074d6:	697b      	ldr	r3, [r7, #20]
 80074d8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80074dc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	031b      	lsls	r3, r3, #12
 80074e2:	697a      	ldr	r2, [r7, #20]
 80074e4:	4313      	orrs	r3, r2
 80074e6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80074e8:	693b      	ldr	r3, [r7, #16]
 80074ea:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80074ee:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80074f0:	68bb      	ldr	r3, [r7, #8]
 80074f2:	011b      	lsls	r3, r3, #4
 80074f4:	693a      	ldr	r2, [r7, #16]
 80074f6:	4313      	orrs	r3, r2
 80074f8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	697a      	ldr	r2, [r7, #20]
 80074fe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	693a      	ldr	r2, [r7, #16]
 8007504:	621a      	str	r2, [r3, #32]
}
 8007506:	bf00      	nop
 8007508:	371c      	adds	r7, #28
 800750a:	46bd      	mov	sp, r7
 800750c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007510:	4770      	bx	lr

08007512 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007512:	b480      	push	{r7}
 8007514:	b085      	sub	sp, #20
 8007516:	af00      	add	r7, sp, #0
 8007518:	6078      	str	r0, [r7, #4]
 800751a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	689b      	ldr	r3, [r3, #8]
 8007520:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007528:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800752a:	683a      	ldr	r2, [r7, #0]
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	4313      	orrs	r3, r2
 8007530:	f043 0307 	orr.w	r3, r3, #7
 8007534:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	68fa      	ldr	r2, [r7, #12]
 800753a:	609a      	str	r2, [r3, #8]
}
 800753c:	bf00      	nop
 800753e:	3714      	adds	r7, #20
 8007540:	46bd      	mov	sp, r7
 8007542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007546:	4770      	bx	lr

08007548 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007548:	b480      	push	{r7}
 800754a:	b087      	sub	sp, #28
 800754c:	af00      	add	r7, sp, #0
 800754e:	60f8      	str	r0, [r7, #12]
 8007550:	60b9      	str	r1, [r7, #8]
 8007552:	607a      	str	r2, [r7, #4]
 8007554:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	689b      	ldr	r3, [r3, #8]
 800755a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800755c:	697b      	ldr	r3, [r7, #20]
 800755e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007562:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007564:	683b      	ldr	r3, [r7, #0]
 8007566:	021a      	lsls	r2, r3, #8
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	431a      	orrs	r2, r3
 800756c:	68bb      	ldr	r3, [r7, #8]
 800756e:	4313      	orrs	r3, r2
 8007570:	697a      	ldr	r2, [r7, #20]
 8007572:	4313      	orrs	r3, r2
 8007574:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	697a      	ldr	r2, [r7, #20]
 800757a:	609a      	str	r2, [r3, #8]
}
 800757c:	bf00      	nop
 800757e:	371c      	adds	r7, #28
 8007580:	46bd      	mov	sp, r7
 8007582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007586:	4770      	bx	lr

08007588 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007588:	b580      	push	{r7, lr}
 800758a:	b086      	sub	sp, #24
 800758c:	af00      	add	r7, sp, #0
 800758e:	60f8      	str	r0, [r7, #12]
 8007590:	60b9      	str	r1, [r7, #8]
 8007592:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	4a2a      	ldr	r2, [pc, #168]	; (8007640 <TIM_CCxChannelCmd+0xb8>)
 8007598:	4293      	cmp	r3, r2
 800759a:	d020      	beq.n	80075de <TIM_CCxChannelCmd+0x56>
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80075a2:	d01c      	beq.n	80075de <TIM_CCxChannelCmd+0x56>
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	4a27      	ldr	r2, [pc, #156]	; (8007644 <TIM_CCxChannelCmd+0xbc>)
 80075a8:	4293      	cmp	r3, r2
 80075aa:	d018      	beq.n	80075de <TIM_CCxChannelCmd+0x56>
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	4a26      	ldr	r2, [pc, #152]	; (8007648 <TIM_CCxChannelCmd+0xc0>)
 80075b0:	4293      	cmp	r3, r2
 80075b2:	d014      	beq.n	80075de <TIM_CCxChannelCmd+0x56>
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	4a25      	ldr	r2, [pc, #148]	; (800764c <TIM_CCxChannelCmd+0xc4>)
 80075b8:	4293      	cmp	r3, r2
 80075ba:	d010      	beq.n	80075de <TIM_CCxChannelCmd+0x56>
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	4a24      	ldr	r2, [pc, #144]	; (8007650 <TIM_CCxChannelCmd+0xc8>)
 80075c0:	4293      	cmp	r3, r2
 80075c2:	d00c      	beq.n	80075de <TIM_CCxChannelCmd+0x56>
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	4a23      	ldr	r2, [pc, #140]	; (8007654 <TIM_CCxChannelCmd+0xcc>)
 80075c8:	4293      	cmp	r3, r2
 80075ca:	d008      	beq.n	80075de <TIM_CCxChannelCmd+0x56>
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	4a22      	ldr	r2, [pc, #136]	; (8007658 <TIM_CCxChannelCmd+0xd0>)
 80075d0:	4293      	cmp	r3, r2
 80075d2:	d004      	beq.n	80075de <TIM_CCxChannelCmd+0x56>
 80075d4:	f641 11cc 	movw	r1, #6604	; 0x19cc
 80075d8:	4820      	ldr	r0, [pc, #128]	; (800765c <TIM_CCxChannelCmd+0xd4>)
 80075da:	f7fa f84a 	bl	8001672 <assert_failed>
  assert_param(IS_TIM_CHANNELS(Channel));
 80075de:	68bb      	ldr	r3, [r7, #8]
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	d010      	beq.n	8007606 <TIM_CCxChannelCmd+0x7e>
 80075e4:	68bb      	ldr	r3, [r7, #8]
 80075e6:	2b04      	cmp	r3, #4
 80075e8:	d00d      	beq.n	8007606 <TIM_CCxChannelCmd+0x7e>
 80075ea:	68bb      	ldr	r3, [r7, #8]
 80075ec:	2b08      	cmp	r3, #8
 80075ee:	d00a      	beq.n	8007606 <TIM_CCxChannelCmd+0x7e>
 80075f0:	68bb      	ldr	r3, [r7, #8]
 80075f2:	2b0c      	cmp	r3, #12
 80075f4:	d007      	beq.n	8007606 <TIM_CCxChannelCmd+0x7e>
 80075f6:	68bb      	ldr	r3, [r7, #8]
 80075f8:	2b3c      	cmp	r3, #60	; 0x3c
 80075fa:	d004      	beq.n	8007606 <TIM_CCxChannelCmd+0x7e>
 80075fc:	f641 11cd 	movw	r1, #6605	; 0x19cd
 8007600:	4816      	ldr	r0, [pc, #88]	; (800765c <TIM_CCxChannelCmd+0xd4>)
 8007602:	f7fa f836 	bl	8001672 <assert_failed>

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007606:	68bb      	ldr	r3, [r7, #8]
 8007608:	f003 031f 	and.w	r3, r3, #31
 800760c:	2201      	movs	r2, #1
 800760e:	fa02 f303 	lsl.w	r3, r2, r3
 8007612:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	6a1a      	ldr	r2, [r3, #32]
 8007618:	697b      	ldr	r3, [r7, #20]
 800761a:	43db      	mvns	r3, r3
 800761c:	401a      	ands	r2, r3
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	6a1a      	ldr	r2, [r3, #32]
 8007626:	68bb      	ldr	r3, [r7, #8]
 8007628:	f003 031f 	and.w	r3, r3, #31
 800762c:	6879      	ldr	r1, [r7, #4]
 800762e:	fa01 f303 	lsl.w	r3, r1, r3
 8007632:	431a      	orrs	r2, r3
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	621a      	str	r2, [r3, #32]
}
 8007638:	bf00      	nop
 800763a:	3718      	adds	r7, #24
 800763c:	46bd      	mov	sp, r7
 800763e:	bd80      	pop	{r7, pc}
 8007640:	40010000 	.word	0x40010000
 8007644:	40000400 	.word	0x40000400
 8007648:	40000800 	.word	0x40000800
 800764c:	40000c00 	.word	0x40000c00
 8007650:	40014000 	.word	0x40014000
 8007654:	40014400 	.word	0x40014400
 8007658:	40014800 	.word	0x40014800
 800765c:	0800de34 	.word	0x0800de34

08007660 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007660:	b580      	push	{r7, lr}
 8007662:	b084      	sub	sp, #16
 8007664:	af00      	add	r7, sp, #0
 8007666:	6078      	str	r0, [r7, #4]
 8007668:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr2;
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	4a55      	ldr	r2, [pc, #340]	; (80077c4 <HAL_TIMEx_MasterConfigSynchronization+0x164>)
 8007670:	4293      	cmp	r3, r2
 8007672:	d018      	beq.n	80076a6 <HAL_TIMEx_MasterConfigSynchronization+0x46>
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800767c:	d013      	beq.n	80076a6 <HAL_TIMEx_MasterConfigSynchronization+0x46>
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	4a51      	ldr	r2, [pc, #324]	; (80077c8 <HAL_TIMEx_MasterConfigSynchronization+0x168>)
 8007684:	4293      	cmp	r3, r2
 8007686:	d00e      	beq.n	80076a6 <HAL_TIMEx_MasterConfigSynchronization+0x46>
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	4a4f      	ldr	r2, [pc, #316]	; (80077cc <HAL_TIMEx_MasterConfigSynchronization+0x16c>)
 800768e:	4293      	cmp	r3, r2
 8007690:	d009      	beq.n	80076a6 <HAL_TIMEx_MasterConfigSynchronization+0x46>
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	4a4e      	ldr	r2, [pc, #312]	; (80077d0 <HAL_TIMEx_MasterConfigSynchronization+0x170>)
 8007698:	4293      	cmp	r3, r2
 800769a:	d004      	beq.n	80076a6 <HAL_TIMEx_MasterConfigSynchronization+0x46>
 800769c:	f240 6164 	movw	r1, #1636	; 0x664
 80076a0:	484c      	ldr	r0, [pc, #304]	; (80077d4 <HAL_TIMEx_MasterConfigSynchronization+0x174>)
 80076a2:	f7f9 ffe6 	bl	8001672 <assert_failed>
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
 80076a6:	683b      	ldr	r3, [r7, #0]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d020      	beq.n	80076f0 <HAL_TIMEx_MasterConfigSynchronization+0x90>
 80076ae:	683b      	ldr	r3, [r7, #0]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	2b10      	cmp	r3, #16
 80076b4:	d01c      	beq.n	80076f0 <HAL_TIMEx_MasterConfigSynchronization+0x90>
 80076b6:	683b      	ldr	r3, [r7, #0]
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	2b20      	cmp	r3, #32
 80076bc:	d018      	beq.n	80076f0 <HAL_TIMEx_MasterConfigSynchronization+0x90>
 80076be:	683b      	ldr	r3, [r7, #0]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	2b30      	cmp	r3, #48	; 0x30
 80076c4:	d014      	beq.n	80076f0 <HAL_TIMEx_MasterConfigSynchronization+0x90>
 80076c6:	683b      	ldr	r3, [r7, #0]
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	2b40      	cmp	r3, #64	; 0x40
 80076cc:	d010      	beq.n	80076f0 <HAL_TIMEx_MasterConfigSynchronization+0x90>
 80076ce:	683b      	ldr	r3, [r7, #0]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	2b50      	cmp	r3, #80	; 0x50
 80076d4:	d00c      	beq.n	80076f0 <HAL_TIMEx_MasterConfigSynchronization+0x90>
 80076d6:	683b      	ldr	r3, [r7, #0]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	2b60      	cmp	r3, #96	; 0x60
 80076dc:	d008      	beq.n	80076f0 <HAL_TIMEx_MasterConfigSynchronization+0x90>
 80076de:	683b      	ldr	r3, [r7, #0]
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	2b70      	cmp	r3, #112	; 0x70
 80076e4:	d004      	beq.n	80076f0 <HAL_TIMEx_MasterConfigSynchronization+0x90>
 80076e6:	f240 6165 	movw	r1, #1637	; 0x665
 80076ea:	483a      	ldr	r0, [pc, #232]	; (80077d4 <HAL_TIMEx_MasterConfigSynchronization+0x174>)
 80076ec:	f7f9 ffc1 	bl	8001672 <assert_failed>
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
 80076f0:	683b      	ldr	r3, [r7, #0]
 80076f2:	685b      	ldr	r3, [r3, #4]
 80076f4:	2b80      	cmp	r3, #128	; 0x80
 80076f6:	d008      	beq.n	800770a <HAL_TIMEx_MasterConfigSynchronization+0xaa>
 80076f8:	683b      	ldr	r3, [r7, #0]
 80076fa:	685b      	ldr	r3, [r3, #4]
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d004      	beq.n	800770a <HAL_TIMEx_MasterConfigSynchronization+0xaa>
 8007700:	f240 6166 	movw	r1, #1638	; 0x666
 8007704:	4833      	ldr	r0, [pc, #204]	; (80077d4 <HAL_TIMEx_MasterConfigSynchronization+0x174>)
 8007706:	f7f9 ffb4 	bl	8001672 <assert_failed>

  /* Check input state */
  __HAL_LOCK(htim);
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007710:	2b01      	cmp	r3, #1
 8007712:	d101      	bne.n	8007718 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8007714:	2302      	movs	r3, #2
 8007716:	e050      	b.n	80077ba <HAL_TIMEx_MasterConfigSynchronization+0x15a>
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	2201      	movs	r2, #1
 800771c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	2202      	movs	r2, #2
 8007724:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	685b      	ldr	r3, [r3, #4]
 800772e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	689b      	ldr	r3, [r3, #8]
 8007736:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800773e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007740:	683b      	ldr	r3, [r7, #0]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	68fa      	ldr	r2, [r7, #12]
 8007746:	4313      	orrs	r3, r2
 8007748:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	68fa      	ldr	r2, [r7, #12]
 8007750:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	4a1b      	ldr	r2, [pc, #108]	; (80077c4 <HAL_TIMEx_MasterConfigSynchronization+0x164>)
 8007758:	4293      	cmp	r3, r2
 800775a:	d018      	beq.n	800778e <HAL_TIMEx_MasterConfigSynchronization+0x12e>
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007764:	d013      	beq.n	800778e <HAL_TIMEx_MasterConfigSynchronization+0x12e>
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	4a17      	ldr	r2, [pc, #92]	; (80077c8 <HAL_TIMEx_MasterConfigSynchronization+0x168>)
 800776c:	4293      	cmp	r3, r2
 800776e:	d00e      	beq.n	800778e <HAL_TIMEx_MasterConfigSynchronization+0x12e>
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	4a15      	ldr	r2, [pc, #84]	; (80077cc <HAL_TIMEx_MasterConfigSynchronization+0x16c>)
 8007776:	4293      	cmp	r3, r2
 8007778:	d009      	beq.n	800778e <HAL_TIMEx_MasterConfigSynchronization+0x12e>
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	4a14      	ldr	r2, [pc, #80]	; (80077d0 <HAL_TIMEx_MasterConfigSynchronization+0x170>)
 8007780:	4293      	cmp	r3, r2
 8007782:	d004      	beq.n	800778e <HAL_TIMEx_MasterConfigSynchronization+0x12e>
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	4a13      	ldr	r2, [pc, #76]	; (80077d8 <HAL_TIMEx_MasterConfigSynchronization+0x178>)
 800778a:	4293      	cmp	r3, r2
 800778c:	d10c      	bne.n	80077a8 <HAL_TIMEx_MasterConfigSynchronization+0x148>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800778e:	68bb      	ldr	r3, [r7, #8]
 8007790:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007794:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007796:	683b      	ldr	r3, [r7, #0]
 8007798:	685b      	ldr	r3, [r3, #4]
 800779a:	68ba      	ldr	r2, [r7, #8]
 800779c:	4313      	orrs	r3, r2
 800779e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	68ba      	ldr	r2, [r7, #8]
 80077a6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	2201      	movs	r2, #1
 80077ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	2200      	movs	r2, #0
 80077b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80077b8:	2300      	movs	r3, #0
}
 80077ba:	4618      	mov	r0, r3
 80077bc:	3710      	adds	r7, #16
 80077be:	46bd      	mov	sp, r7
 80077c0:	bd80      	pop	{r7, pc}
 80077c2:	bf00      	nop
 80077c4:	40010000 	.word	0x40010000
 80077c8:	40000400 	.word	0x40000400
 80077cc:	40000800 	.word	0x40000800
 80077d0:	40000c00 	.word	0x40000c00
 80077d4:	0800de6c 	.word	0x0800de6c
 80077d8:	40014000 	.word	0x40014000

080077dc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80077dc:	b580      	push	{r7, lr}
 80077de:	b084      	sub	sp, #16
 80077e0:	af00      	add	r7, sp, #0
 80077e2:	6078      	str	r0, [r7, #4]
 80077e4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80077e6:	2300      	movs	r3, #0
 80077e8:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_BREAK_INSTANCE(htim->Instance));
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	4a5c      	ldr	r2, [pc, #368]	; (8007960 <HAL_TIMEx_ConfigBreakDeadTime+0x184>)
 80077f0:	4293      	cmp	r3, r2
 80077f2:	d004      	beq.n	80077fe <HAL_TIMEx_ConfigBreakDeadTime+0x22>
 80077f4:	f240 61a1 	movw	r1, #1697	; 0x6a1
 80077f8:	485a      	ldr	r0, [pc, #360]	; (8007964 <HAL_TIMEx_ConfigBreakDeadTime+0x188>)
 80077fa:	f7f9 ff3a 	bl	8001672 <assert_failed>
  assert_param(IS_TIM_OSSR_STATE(sBreakDeadTimeConfig->OffStateRunMode));
 80077fe:	683b      	ldr	r3, [r7, #0]
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007806:	d008      	beq.n	800781a <HAL_TIMEx_ConfigBreakDeadTime+0x3e>
 8007808:	683b      	ldr	r3, [r7, #0]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	2b00      	cmp	r3, #0
 800780e:	d004      	beq.n	800781a <HAL_TIMEx_ConfigBreakDeadTime+0x3e>
 8007810:	f240 61a2 	movw	r1, #1698	; 0x6a2
 8007814:	4853      	ldr	r0, [pc, #332]	; (8007964 <HAL_TIMEx_ConfigBreakDeadTime+0x188>)
 8007816:	f7f9 ff2c 	bl	8001672 <assert_failed>
  assert_param(IS_TIM_OSSI_STATE(sBreakDeadTimeConfig->OffStateIDLEMode));
 800781a:	683b      	ldr	r3, [r7, #0]
 800781c:	685b      	ldr	r3, [r3, #4]
 800781e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007822:	d008      	beq.n	8007836 <HAL_TIMEx_ConfigBreakDeadTime+0x5a>
 8007824:	683b      	ldr	r3, [r7, #0]
 8007826:	685b      	ldr	r3, [r3, #4]
 8007828:	2b00      	cmp	r3, #0
 800782a:	d004      	beq.n	8007836 <HAL_TIMEx_ConfigBreakDeadTime+0x5a>
 800782c:	f240 61a3 	movw	r1, #1699	; 0x6a3
 8007830:	484c      	ldr	r0, [pc, #304]	; (8007964 <HAL_TIMEx_ConfigBreakDeadTime+0x188>)
 8007832:	f7f9 ff1e 	bl	8001672 <assert_failed>
  assert_param(IS_TIM_LOCK_LEVEL(sBreakDeadTimeConfig->LockLevel));
 8007836:	683b      	ldr	r3, [r7, #0]
 8007838:	689b      	ldr	r3, [r3, #8]
 800783a:	2b00      	cmp	r3, #0
 800783c:	d013      	beq.n	8007866 <HAL_TIMEx_ConfigBreakDeadTime+0x8a>
 800783e:	683b      	ldr	r3, [r7, #0]
 8007840:	689b      	ldr	r3, [r3, #8]
 8007842:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007846:	d00e      	beq.n	8007866 <HAL_TIMEx_ConfigBreakDeadTime+0x8a>
 8007848:	683b      	ldr	r3, [r7, #0]
 800784a:	689b      	ldr	r3, [r3, #8]
 800784c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007850:	d009      	beq.n	8007866 <HAL_TIMEx_ConfigBreakDeadTime+0x8a>
 8007852:	683b      	ldr	r3, [r7, #0]
 8007854:	689b      	ldr	r3, [r3, #8]
 8007856:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800785a:	d004      	beq.n	8007866 <HAL_TIMEx_ConfigBreakDeadTime+0x8a>
 800785c:	f240 61a4 	movw	r1, #1700	; 0x6a4
 8007860:	4840      	ldr	r0, [pc, #256]	; (8007964 <HAL_TIMEx_ConfigBreakDeadTime+0x188>)
 8007862:	f7f9 ff06 	bl	8001672 <assert_failed>
  assert_param(IS_TIM_DEADTIME(sBreakDeadTimeConfig->DeadTime));
 8007866:	683b      	ldr	r3, [r7, #0]
 8007868:	68db      	ldr	r3, [r3, #12]
 800786a:	2bff      	cmp	r3, #255	; 0xff
 800786c:	d904      	bls.n	8007878 <HAL_TIMEx_ConfigBreakDeadTime+0x9c>
 800786e:	f240 61a5 	movw	r1, #1701	; 0x6a5
 8007872:	483c      	ldr	r0, [pc, #240]	; (8007964 <HAL_TIMEx_ConfigBreakDeadTime+0x188>)
 8007874:	f7f9 fefd 	bl	8001672 <assert_failed>
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
 8007878:	683b      	ldr	r3, [r7, #0]
 800787a:	691b      	ldr	r3, [r3, #16]
 800787c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007880:	d008      	beq.n	8007894 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
 8007882:	683b      	ldr	r3, [r7, #0]
 8007884:	691b      	ldr	r3, [r3, #16]
 8007886:	2b00      	cmp	r3, #0
 8007888:	d004      	beq.n	8007894 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
 800788a:	f240 61a6 	movw	r1, #1702	; 0x6a6
 800788e:	4835      	ldr	r0, [pc, #212]	; (8007964 <HAL_TIMEx_ConfigBreakDeadTime+0x188>)
 8007890:	f7f9 feef 	bl	8001672 <assert_failed>
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
 8007894:	683b      	ldr	r3, [r7, #0]
 8007896:	695b      	ldr	r3, [r3, #20]
 8007898:	2b00      	cmp	r3, #0
 800789a:	d009      	beq.n	80078b0 <HAL_TIMEx_ConfigBreakDeadTime+0xd4>
 800789c:	683b      	ldr	r3, [r7, #0]
 800789e:	695b      	ldr	r3, [r3, #20]
 80078a0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80078a4:	d004      	beq.n	80078b0 <HAL_TIMEx_ConfigBreakDeadTime+0xd4>
 80078a6:	f240 61a7 	movw	r1, #1703	; 0x6a7
 80078aa:	482e      	ldr	r0, [pc, #184]	; (8007964 <HAL_TIMEx_ConfigBreakDeadTime+0x188>)
 80078ac:	f7f9 fee1 	bl	8001672 <assert_failed>
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
 80078b0:	683b      	ldr	r3, [r7, #0]
 80078b2:	69db      	ldr	r3, [r3, #28]
 80078b4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80078b8:	d008      	beq.n	80078cc <HAL_TIMEx_ConfigBreakDeadTime+0xf0>
 80078ba:	683b      	ldr	r3, [r7, #0]
 80078bc:	69db      	ldr	r3, [r3, #28]
 80078be:	2b00      	cmp	r3, #0
 80078c0:	d004      	beq.n	80078cc <HAL_TIMEx_ConfigBreakDeadTime+0xf0>
 80078c2:	f44f 61d5 	mov.w	r1, #1704	; 0x6a8
 80078c6:	4827      	ldr	r0, [pc, #156]	; (8007964 <HAL_TIMEx_ConfigBreakDeadTime+0x188>)
 80078c8:	f7f9 fed3 	bl	8001672 <assert_failed>

  /* Check input state */
  __HAL_LOCK(htim);
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80078d2:	2b01      	cmp	r3, #1
 80078d4:	d101      	bne.n	80078da <HAL_TIMEx_ConfigBreakDeadTime+0xfe>
 80078d6:	2302      	movs	r3, #2
 80078d8:	e03d      	b.n	8007956 <HAL_TIMEx_ConfigBreakDeadTime+0x17a>
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	2201      	movs	r2, #1
 80078de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80078e8:	683b      	ldr	r3, [r7, #0]
 80078ea:	68db      	ldr	r3, [r3, #12]
 80078ec:	4313      	orrs	r3, r2
 80078ee:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80078f6:	683b      	ldr	r3, [r7, #0]
 80078f8:	689b      	ldr	r3, [r3, #8]
 80078fa:	4313      	orrs	r3, r2
 80078fc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8007904:	683b      	ldr	r3, [r7, #0]
 8007906:	685b      	ldr	r3, [r3, #4]
 8007908:	4313      	orrs	r3, r2
 800790a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8007912:	683b      	ldr	r3, [r7, #0]
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	4313      	orrs	r3, r2
 8007918:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007920:	683b      	ldr	r3, [r7, #0]
 8007922:	691b      	ldr	r3, [r3, #16]
 8007924:	4313      	orrs	r3, r2
 8007926:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800792e:	683b      	ldr	r3, [r7, #0]
 8007930:	695b      	ldr	r3, [r3, #20]
 8007932:	4313      	orrs	r3, r2
 8007934:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800793c:	683b      	ldr	r3, [r7, #0]
 800793e:	69db      	ldr	r3, [r3, #28]
 8007940:	4313      	orrs	r3, r2
 8007942:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	68fa      	ldr	r2, [r7, #12]
 800794a:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	2200      	movs	r2, #0
 8007950:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007954:	2300      	movs	r3, #0
}
 8007956:	4618      	mov	r0, r3
 8007958:	3710      	adds	r7, #16
 800795a:	46bd      	mov	sp, r7
 800795c:	bd80      	pop	{r7, pc}
 800795e:	bf00      	nop
 8007960:	40010000 	.word	0x40010000
 8007964:	0800de6c 	.word	0x0800de6c

08007968 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007968:	b084      	sub	sp, #16
 800796a:	b580      	push	{r7, lr}
 800796c:	b084      	sub	sp, #16
 800796e:	af00      	add	r7, sp, #0
 8007970:	6078      	str	r0, [r7, #4]
 8007972:	f107 001c 	add.w	r0, r7, #28
 8007976:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800797a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800797c:	2b01      	cmp	r3, #1
 800797e:	d122      	bne.n	80079c6 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007984:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	68db      	ldr	r3, [r3, #12]
 8007990:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8007994:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007998:	687a      	ldr	r2, [r7, #4]
 800799a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	68db      	ldr	r3, [r3, #12]
 80079a0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80079a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80079aa:	2b01      	cmp	r3, #1
 80079ac:	d105      	bne.n	80079ba <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	68db      	ldr	r3, [r3, #12]
 80079b2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 80079ba:	6878      	ldr	r0, [r7, #4]
 80079bc:	f001 fac6 	bl	8008f4c <USB_CoreReset>
 80079c0:	4603      	mov	r3, r0
 80079c2:	73fb      	strb	r3, [r7, #15]
 80079c4:	e01a      	b.n	80079fc <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	68db      	ldr	r3, [r3, #12]
 80079ca:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80079d2:	6878      	ldr	r0, [r7, #4]
 80079d4:	f001 faba 	bl	8008f4c <USB_CoreReset>
 80079d8:	4603      	mov	r3, r0
 80079da:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80079dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d106      	bne.n	80079f0 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079e6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	639a      	str	r2, [r3, #56]	; 0x38
 80079ee:	e005      	b.n	80079fc <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079f4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80079fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079fe:	2b01      	cmp	r3, #1
 8007a00:	d10b      	bne.n	8007a1a <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	689b      	ldr	r3, [r3, #8]
 8007a06:	f043 0206 	orr.w	r2, r3, #6
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	689b      	ldr	r3, [r3, #8]
 8007a12:	f043 0220 	orr.w	r2, r3, #32
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8007a1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a1c:	4618      	mov	r0, r3
 8007a1e:	3710      	adds	r7, #16
 8007a20:	46bd      	mov	sp, r7
 8007a22:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007a26:	b004      	add	sp, #16
 8007a28:	4770      	bx	lr
	...

08007a2c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8007a2c:	b480      	push	{r7}
 8007a2e:	b087      	sub	sp, #28
 8007a30:	af00      	add	r7, sp, #0
 8007a32:	60f8      	str	r0, [r7, #12]
 8007a34:	60b9      	str	r1, [r7, #8]
 8007a36:	4613      	mov	r3, r2
 8007a38:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8007a3a:	79fb      	ldrb	r3, [r7, #7]
 8007a3c:	2b02      	cmp	r3, #2
 8007a3e:	d165      	bne.n	8007b0c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8007a40:	68bb      	ldr	r3, [r7, #8]
 8007a42:	4a41      	ldr	r2, [pc, #260]	; (8007b48 <USB_SetTurnaroundTime+0x11c>)
 8007a44:	4293      	cmp	r3, r2
 8007a46:	d906      	bls.n	8007a56 <USB_SetTurnaroundTime+0x2a>
 8007a48:	68bb      	ldr	r3, [r7, #8]
 8007a4a:	4a40      	ldr	r2, [pc, #256]	; (8007b4c <USB_SetTurnaroundTime+0x120>)
 8007a4c:	4293      	cmp	r3, r2
 8007a4e:	d802      	bhi.n	8007a56 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8007a50:	230f      	movs	r3, #15
 8007a52:	617b      	str	r3, [r7, #20]
 8007a54:	e062      	b.n	8007b1c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8007a56:	68bb      	ldr	r3, [r7, #8]
 8007a58:	4a3c      	ldr	r2, [pc, #240]	; (8007b4c <USB_SetTurnaroundTime+0x120>)
 8007a5a:	4293      	cmp	r3, r2
 8007a5c:	d906      	bls.n	8007a6c <USB_SetTurnaroundTime+0x40>
 8007a5e:	68bb      	ldr	r3, [r7, #8]
 8007a60:	4a3b      	ldr	r2, [pc, #236]	; (8007b50 <USB_SetTurnaroundTime+0x124>)
 8007a62:	4293      	cmp	r3, r2
 8007a64:	d802      	bhi.n	8007a6c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8007a66:	230e      	movs	r3, #14
 8007a68:	617b      	str	r3, [r7, #20]
 8007a6a:	e057      	b.n	8007b1c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8007a6c:	68bb      	ldr	r3, [r7, #8]
 8007a6e:	4a38      	ldr	r2, [pc, #224]	; (8007b50 <USB_SetTurnaroundTime+0x124>)
 8007a70:	4293      	cmp	r3, r2
 8007a72:	d906      	bls.n	8007a82 <USB_SetTurnaroundTime+0x56>
 8007a74:	68bb      	ldr	r3, [r7, #8]
 8007a76:	4a37      	ldr	r2, [pc, #220]	; (8007b54 <USB_SetTurnaroundTime+0x128>)
 8007a78:	4293      	cmp	r3, r2
 8007a7a:	d802      	bhi.n	8007a82 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8007a7c:	230d      	movs	r3, #13
 8007a7e:	617b      	str	r3, [r7, #20]
 8007a80:	e04c      	b.n	8007b1c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8007a82:	68bb      	ldr	r3, [r7, #8]
 8007a84:	4a33      	ldr	r2, [pc, #204]	; (8007b54 <USB_SetTurnaroundTime+0x128>)
 8007a86:	4293      	cmp	r3, r2
 8007a88:	d906      	bls.n	8007a98 <USB_SetTurnaroundTime+0x6c>
 8007a8a:	68bb      	ldr	r3, [r7, #8]
 8007a8c:	4a32      	ldr	r2, [pc, #200]	; (8007b58 <USB_SetTurnaroundTime+0x12c>)
 8007a8e:	4293      	cmp	r3, r2
 8007a90:	d802      	bhi.n	8007a98 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8007a92:	230c      	movs	r3, #12
 8007a94:	617b      	str	r3, [r7, #20]
 8007a96:	e041      	b.n	8007b1c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8007a98:	68bb      	ldr	r3, [r7, #8]
 8007a9a:	4a2f      	ldr	r2, [pc, #188]	; (8007b58 <USB_SetTurnaroundTime+0x12c>)
 8007a9c:	4293      	cmp	r3, r2
 8007a9e:	d906      	bls.n	8007aae <USB_SetTurnaroundTime+0x82>
 8007aa0:	68bb      	ldr	r3, [r7, #8]
 8007aa2:	4a2e      	ldr	r2, [pc, #184]	; (8007b5c <USB_SetTurnaroundTime+0x130>)
 8007aa4:	4293      	cmp	r3, r2
 8007aa6:	d802      	bhi.n	8007aae <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8007aa8:	230b      	movs	r3, #11
 8007aaa:	617b      	str	r3, [r7, #20]
 8007aac:	e036      	b.n	8007b1c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8007aae:	68bb      	ldr	r3, [r7, #8]
 8007ab0:	4a2a      	ldr	r2, [pc, #168]	; (8007b5c <USB_SetTurnaroundTime+0x130>)
 8007ab2:	4293      	cmp	r3, r2
 8007ab4:	d906      	bls.n	8007ac4 <USB_SetTurnaroundTime+0x98>
 8007ab6:	68bb      	ldr	r3, [r7, #8]
 8007ab8:	4a29      	ldr	r2, [pc, #164]	; (8007b60 <USB_SetTurnaroundTime+0x134>)
 8007aba:	4293      	cmp	r3, r2
 8007abc:	d802      	bhi.n	8007ac4 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8007abe:	230a      	movs	r3, #10
 8007ac0:	617b      	str	r3, [r7, #20]
 8007ac2:	e02b      	b.n	8007b1c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8007ac4:	68bb      	ldr	r3, [r7, #8]
 8007ac6:	4a26      	ldr	r2, [pc, #152]	; (8007b60 <USB_SetTurnaroundTime+0x134>)
 8007ac8:	4293      	cmp	r3, r2
 8007aca:	d906      	bls.n	8007ada <USB_SetTurnaroundTime+0xae>
 8007acc:	68bb      	ldr	r3, [r7, #8]
 8007ace:	4a25      	ldr	r2, [pc, #148]	; (8007b64 <USB_SetTurnaroundTime+0x138>)
 8007ad0:	4293      	cmp	r3, r2
 8007ad2:	d802      	bhi.n	8007ada <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8007ad4:	2309      	movs	r3, #9
 8007ad6:	617b      	str	r3, [r7, #20]
 8007ad8:	e020      	b.n	8007b1c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8007ada:	68bb      	ldr	r3, [r7, #8]
 8007adc:	4a21      	ldr	r2, [pc, #132]	; (8007b64 <USB_SetTurnaroundTime+0x138>)
 8007ade:	4293      	cmp	r3, r2
 8007ae0:	d906      	bls.n	8007af0 <USB_SetTurnaroundTime+0xc4>
 8007ae2:	68bb      	ldr	r3, [r7, #8]
 8007ae4:	4a20      	ldr	r2, [pc, #128]	; (8007b68 <USB_SetTurnaroundTime+0x13c>)
 8007ae6:	4293      	cmp	r3, r2
 8007ae8:	d802      	bhi.n	8007af0 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8007aea:	2308      	movs	r3, #8
 8007aec:	617b      	str	r3, [r7, #20]
 8007aee:	e015      	b.n	8007b1c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8007af0:	68bb      	ldr	r3, [r7, #8]
 8007af2:	4a1d      	ldr	r2, [pc, #116]	; (8007b68 <USB_SetTurnaroundTime+0x13c>)
 8007af4:	4293      	cmp	r3, r2
 8007af6:	d906      	bls.n	8007b06 <USB_SetTurnaroundTime+0xda>
 8007af8:	68bb      	ldr	r3, [r7, #8]
 8007afa:	4a1c      	ldr	r2, [pc, #112]	; (8007b6c <USB_SetTurnaroundTime+0x140>)
 8007afc:	4293      	cmp	r3, r2
 8007afe:	d802      	bhi.n	8007b06 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8007b00:	2307      	movs	r3, #7
 8007b02:	617b      	str	r3, [r7, #20]
 8007b04:	e00a      	b.n	8007b1c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8007b06:	2306      	movs	r3, #6
 8007b08:	617b      	str	r3, [r7, #20]
 8007b0a:	e007      	b.n	8007b1c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8007b0c:	79fb      	ldrb	r3, [r7, #7]
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d102      	bne.n	8007b18 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8007b12:	2309      	movs	r3, #9
 8007b14:	617b      	str	r3, [r7, #20]
 8007b16:	e001      	b.n	8007b1c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8007b18:	2309      	movs	r3, #9
 8007b1a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	68db      	ldr	r3, [r3, #12]
 8007b20:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	68da      	ldr	r2, [r3, #12]
 8007b2c:	697b      	ldr	r3, [r7, #20]
 8007b2e:	029b      	lsls	r3, r3, #10
 8007b30:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8007b34:	431a      	orrs	r2, r3
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8007b3a:	2300      	movs	r3, #0
}
 8007b3c:	4618      	mov	r0, r3
 8007b3e:	371c      	adds	r7, #28
 8007b40:	46bd      	mov	sp, r7
 8007b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b46:	4770      	bx	lr
 8007b48:	00d8acbf 	.word	0x00d8acbf
 8007b4c:	00e4e1bf 	.word	0x00e4e1bf
 8007b50:	00f423ff 	.word	0x00f423ff
 8007b54:	0106737f 	.word	0x0106737f
 8007b58:	011a499f 	.word	0x011a499f
 8007b5c:	01312cff 	.word	0x01312cff
 8007b60:	014ca43f 	.word	0x014ca43f
 8007b64:	016e35ff 	.word	0x016e35ff
 8007b68:	01a6ab1f 	.word	0x01a6ab1f
 8007b6c:	01e847ff 	.word	0x01e847ff

08007b70 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007b70:	b480      	push	{r7}
 8007b72:	b083      	sub	sp, #12
 8007b74:	af00      	add	r7, sp, #0
 8007b76:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	689b      	ldr	r3, [r3, #8]
 8007b7c:	f043 0201 	orr.w	r2, r3, #1
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007b84:	2300      	movs	r3, #0
}
 8007b86:	4618      	mov	r0, r3
 8007b88:	370c      	adds	r7, #12
 8007b8a:	46bd      	mov	sp, r7
 8007b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b90:	4770      	bx	lr

08007b92 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007b92:	b480      	push	{r7}
 8007b94:	b083      	sub	sp, #12
 8007b96:	af00      	add	r7, sp, #0
 8007b98:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	689b      	ldr	r3, [r3, #8]
 8007b9e:	f023 0201 	bic.w	r2, r3, #1
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007ba6:	2300      	movs	r3, #0
}
 8007ba8:	4618      	mov	r0, r3
 8007baa:	370c      	adds	r7, #12
 8007bac:	46bd      	mov	sp, r7
 8007bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bb2:	4770      	bx	lr

08007bb4 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8007bb4:	b580      	push	{r7, lr}
 8007bb6:	b082      	sub	sp, #8
 8007bb8:	af00      	add	r7, sp, #0
 8007bba:	6078      	str	r0, [r7, #4]
 8007bbc:	460b      	mov	r3, r1
 8007bbe:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	68db      	ldr	r3, [r3, #12]
 8007bc4:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8007bcc:	78fb      	ldrb	r3, [r7, #3]
 8007bce:	2b01      	cmp	r3, #1
 8007bd0:	d106      	bne.n	8007be0 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	68db      	ldr	r3, [r3, #12]
 8007bd6:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	60da      	str	r2, [r3, #12]
 8007bde:	e00b      	b.n	8007bf8 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8007be0:	78fb      	ldrb	r3, [r7, #3]
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	d106      	bne.n	8007bf4 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	68db      	ldr	r3, [r3, #12]
 8007bea:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	60da      	str	r2, [r3, #12]
 8007bf2:	e001      	b.n	8007bf8 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8007bf4:	2301      	movs	r3, #1
 8007bf6:	e003      	b.n	8007c00 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8007bf8:	2032      	movs	r0, #50	; 0x32
 8007bfa:	f7fa f81b 	bl	8001c34 <HAL_Delay>

  return HAL_OK;
 8007bfe:	2300      	movs	r3, #0
}
 8007c00:	4618      	mov	r0, r3
 8007c02:	3708      	adds	r7, #8
 8007c04:	46bd      	mov	sp, r7
 8007c06:	bd80      	pop	{r7, pc}

08007c08 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007c08:	b084      	sub	sp, #16
 8007c0a:	b580      	push	{r7, lr}
 8007c0c:	b086      	sub	sp, #24
 8007c0e:	af00      	add	r7, sp, #0
 8007c10:	6078      	str	r0, [r7, #4]
 8007c12:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8007c16:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8007c1a:	2300      	movs	r3, #0
 8007c1c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8007c22:	2300      	movs	r3, #0
 8007c24:	613b      	str	r3, [r7, #16]
 8007c26:	e009      	b.n	8007c3c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8007c28:	687a      	ldr	r2, [r7, #4]
 8007c2a:	693b      	ldr	r3, [r7, #16]
 8007c2c:	3340      	adds	r3, #64	; 0x40
 8007c2e:	009b      	lsls	r3, r3, #2
 8007c30:	4413      	add	r3, r2
 8007c32:	2200      	movs	r2, #0
 8007c34:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8007c36:	693b      	ldr	r3, [r7, #16]
 8007c38:	3301      	adds	r3, #1
 8007c3a:	613b      	str	r3, [r7, #16]
 8007c3c:	693b      	ldr	r3, [r7, #16]
 8007c3e:	2b0e      	cmp	r3, #14
 8007c40:	d9f2      	bls.n	8007c28 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8007c42:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d11c      	bne.n	8007c82 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007c4e:	685b      	ldr	r3, [r3, #4]
 8007c50:	68fa      	ldr	r2, [r7, #12]
 8007c52:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007c56:	f043 0302 	orr.w	r3, r3, #2
 8007c5a:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c60:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c6c:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c78:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	639a      	str	r2, [r3, #56]	; 0x38
 8007c80:	e00b      	b.n	8007c9a <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c86:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c92:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007ca0:	461a      	mov	r2, r3
 8007ca2:	2300      	movs	r3, #0
 8007ca4:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007cac:	4619      	mov	r1, r3
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007cb4:	461a      	mov	r2, r3
 8007cb6:	680b      	ldr	r3, [r1, #0]
 8007cb8:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007cba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cbc:	2b01      	cmp	r3, #1
 8007cbe:	d10c      	bne.n	8007cda <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8007cc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	d104      	bne.n	8007cd0 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8007cc6:	2100      	movs	r1, #0
 8007cc8:	6878      	ldr	r0, [r7, #4]
 8007cca:	f000 f949 	bl	8007f60 <USB_SetDevSpeed>
 8007cce:	e008      	b.n	8007ce2 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8007cd0:	2101      	movs	r1, #1
 8007cd2:	6878      	ldr	r0, [r7, #4]
 8007cd4:	f000 f944 	bl	8007f60 <USB_SetDevSpeed>
 8007cd8:	e003      	b.n	8007ce2 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8007cda:	2103      	movs	r1, #3
 8007cdc:	6878      	ldr	r0, [r7, #4]
 8007cde:	f000 f93f 	bl	8007f60 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007ce2:	2110      	movs	r1, #16
 8007ce4:	6878      	ldr	r0, [r7, #4]
 8007ce6:	f000 f8f3 	bl	8007ed0 <USB_FlushTxFifo>
 8007cea:	4603      	mov	r3, r0
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	d001      	beq.n	8007cf4 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8007cf0:	2301      	movs	r3, #1
 8007cf2:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007cf4:	6878      	ldr	r0, [r7, #4]
 8007cf6:	f000 f911 	bl	8007f1c <USB_FlushRxFifo>
 8007cfa:	4603      	mov	r3, r0
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	d001      	beq.n	8007d04 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8007d00:	2301      	movs	r3, #1
 8007d02:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007d0a:	461a      	mov	r2, r3
 8007d0c:	2300      	movs	r3, #0
 8007d0e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007d16:	461a      	mov	r2, r3
 8007d18:	2300      	movs	r3, #0
 8007d1a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007d22:	461a      	mov	r2, r3
 8007d24:	2300      	movs	r3, #0
 8007d26:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007d28:	2300      	movs	r3, #0
 8007d2a:	613b      	str	r3, [r7, #16]
 8007d2c:	e043      	b.n	8007db6 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007d2e:	693b      	ldr	r3, [r7, #16]
 8007d30:	015a      	lsls	r2, r3, #5
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	4413      	add	r3, r2
 8007d36:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007d40:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007d44:	d118      	bne.n	8007d78 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8007d46:	693b      	ldr	r3, [r7, #16]
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	d10a      	bne.n	8007d62 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8007d4c:	693b      	ldr	r3, [r7, #16]
 8007d4e:	015a      	lsls	r2, r3, #5
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	4413      	add	r3, r2
 8007d54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d58:	461a      	mov	r2, r3
 8007d5a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007d5e:	6013      	str	r3, [r2, #0]
 8007d60:	e013      	b.n	8007d8a <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8007d62:	693b      	ldr	r3, [r7, #16]
 8007d64:	015a      	lsls	r2, r3, #5
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	4413      	add	r3, r2
 8007d6a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d6e:	461a      	mov	r2, r3
 8007d70:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007d74:	6013      	str	r3, [r2, #0]
 8007d76:	e008      	b.n	8007d8a <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8007d78:	693b      	ldr	r3, [r7, #16]
 8007d7a:	015a      	lsls	r2, r3, #5
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	4413      	add	r3, r2
 8007d80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d84:	461a      	mov	r2, r3
 8007d86:	2300      	movs	r3, #0
 8007d88:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8007d8a:	693b      	ldr	r3, [r7, #16]
 8007d8c:	015a      	lsls	r2, r3, #5
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	4413      	add	r3, r2
 8007d92:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d96:	461a      	mov	r2, r3
 8007d98:	2300      	movs	r3, #0
 8007d9a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8007d9c:	693b      	ldr	r3, [r7, #16]
 8007d9e:	015a      	lsls	r2, r3, #5
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	4413      	add	r3, r2
 8007da4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007da8:	461a      	mov	r2, r3
 8007daa:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007dae:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007db0:	693b      	ldr	r3, [r7, #16]
 8007db2:	3301      	adds	r3, #1
 8007db4:	613b      	str	r3, [r7, #16]
 8007db6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007db8:	693a      	ldr	r2, [r7, #16]
 8007dba:	429a      	cmp	r2, r3
 8007dbc:	d3b7      	bcc.n	8007d2e <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007dbe:	2300      	movs	r3, #0
 8007dc0:	613b      	str	r3, [r7, #16]
 8007dc2:	e043      	b.n	8007e4c <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007dc4:	693b      	ldr	r3, [r7, #16]
 8007dc6:	015a      	lsls	r2, r3, #5
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	4413      	add	r3, r2
 8007dcc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007dd6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007dda:	d118      	bne.n	8007e0e <USB_DevInit+0x206>
    {
      if (i == 0U)
 8007ddc:	693b      	ldr	r3, [r7, #16]
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	d10a      	bne.n	8007df8 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8007de2:	693b      	ldr	r3, [r7, #16]
 8007de4:	015a      	lsls	r2, r3, #5
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	4413      	add	r3, r2
 8007dea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007dee:	461a      	mov	r2, r3
 8007df0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007df4:	6013      	str	r3, [r2, #0]
 8007df6:	e013      	b.n	8007e20 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8007df8:	693b      	ldr	r3, [r7, #16]
 8007dfa:	015a      	lsls	r2, r3, #5
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	4413      	add	r3, r2
 8007e00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007e04:	461a      	mov	r2, r3
 8007e06:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007e0a:	6013      	str	r3, [r2, #0]
 8007e0c:	e008      	b.n	8007e20 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8007e0e:	693b      	ldr	r3, [r7, #16]
 8007e10:	015a      	lsls	r2, r3, #5
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	4413      	add	r3, r2
 8007e16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007e1a:	461a      	mov	r2, r3
 8007e1c:	2300      	movs	r3, #0
 8007e1e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8007e20:	693b      	ldr	r3, [r7, #16]
 8007e22:	015a      	lsls	r2, r3, #5
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	4413      	add	r3, r2
 8007e28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007e2c:	461a      	mov	r2, r3
 8007e2e:	2300      	movs	r3, #0
 8007e30:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8007e32:	693b      	ldr	r3, [r7, #16]
 8007e34:	015a      	lsls	r2, r3, #5
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	4413      	add	r3, r2
 8007e3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007e3e:	461a      	mov	r2, r3
 8007e40:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007e44:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007e46:	693b      	ldr	r3, [r7, #16]
 8007e48:	3301      	adds	r3, #1
 8007e4a:	613b      	str	r3, [r7, #16]
 8007e4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e4e:	693a      	ldr	r2, [r7, #16]
 8007e50:	429a      	cmp	r2, r3
 8007e52:	d3b7      	bcc.n	8007dc4 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007e5a:	691b      	ldr	r3, [r3, #16]
 8007e5c:	68fa      	ldr	r2, [r7, #12]
 8007e5e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007e62:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007e66:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	2200      	movs	r2, #0
 8007e6c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8007e74:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8007e76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	d105      	bne.n	8007e88 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	699b      	ldr	r3, [r3, #24]
 8007e80:	f043 0210 	orr.w	r2, r3, #16
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	699a      	ldr	r2, [r3, #24]
 8007e8c:	4b0f      	ldr	r3, [pc, #60]	; (8007ecc <USB_DevInit+0x2c4>)
 8007e8e:	4313      	orrs	r3, r2
 8007e90:	687a      	ldr	r2, [r7, #4]
 8007e92:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8007e94:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	d005      	beq.n	8007ea6 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	699b      	ldr	r3, [r3, #24]
 8007e9e:	f043 0208 	orr.w	r2, r3, #8
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8007ea6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007ea8:	2b01      	cmp	r3, #1
 8007eaa:	d107      	bne.n	8007ebc <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	699b      	ldr	r3, [r3, #24]
 8007eb0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007eb4:	f043 0304 	orr.w	r3, r3, #4
 8007eb8:	687a      	ldr	r2, [r7, #4]
 8007eba:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8007ebc:	7dfb      	ldrb	r3, [r7, #23]
}
 8007ebe:	4618      	mov	r0, r3
 8007ec0:	3718      	adds	r7, #24
 8007ec2:	46bd      	mov	sp, r7
 8007ec4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007ec8:	b004      	add	sp, #16
 8007eca:	4770      	bx	lr
 8007ecc:	803c3800 	.word	0x803c3800

08007ed0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007ed0:	b480      	push	{r7}
 8007ed2:	b085      	sub	sp, #20
 8007ed4:	af00      	add	r7, sp, #0
 8007ed6:	6078      	str	r0, [r7, #4]
 8007ed8:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8007eda:	2300      	movs	r3, #0
 8007edc:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007ede:	683b      	ldr	r3, [r7, #0]
 8007ee0:	019b      	lsls	r3, r3, #6
 8007ee2:	f043 0220 	orr.w	r2, r3, #32
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	3301      	adds	r3, #1
 8007eee:	60fb      	str	r3, [r7, #12]
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	4a09      	ldr	r2, [pc, #36]	; (8007f18 <USB_FlushTxFifo+0x48>)
 8007ef4:	4293      	cmp	r3, r2
 8007ef6:	d901      	bls.n	8007efc <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8007ef8:	2303      	movs	r3, #3
 8007efa:	e006      	b.n	8007f0a <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	691b      	ldr	r3, [r3, #16]
 8007f00:	f003 0320 	and.w	r3, r3, #32
 8007f04:	2b20      	cmp	r3, #32
 8007f06:	d0f0      	beq.n	8007eea <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8007f08:	2300      	movs	r3, #0
}
 8007f0a:	4618      	mov	r0, r3
 8007f0c:	3714      	adds	r7, #20
 8007f0e:	46bd      	mov	sp, r7
 8007f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f14:	4770      	bx	lr
 8007f16:	bf00      	nop
 8007f18:	00030d40 	.word	0x00030d40

08007f1c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007f1c:	b480      	push	{r7}
 8007f1e:	b085      	sub	sp, #20
 8007f20:	af00      	add	r7, sp, #0
 8007f22:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8007f24:	2300      	movs	r3, #0
 8007f26:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	2210      	movs	r2, #16
 8007f2c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	3301      	adds	r3, #1
 8007f32:	60fb      	str	r3, [r7, #12]
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	4a09      	ldr	r2, [pc, #36]	; (8007f5c <USB_FlushRxFifo+0x40>)
 8007f38:	4293      	cmp	r3, r2
 8007f3a:	d901      	bls.n	8007f40 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8007f3c:	2303      	movs	r3, #3
 8007f3e:	e006      	b.n	8007f4e <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	691b      	ldr	r3, [r3, #16]
 8007f44:	f003 0310 	and.w	r3, r3, #16
 8007f48:	2b10      	cmp	r3, #16
 8007f4a:	d0f0      	beq.n	8007f2e <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8007f4c:	2300      	movs	r3, #0
}
 8007f4e:	4618      	mov	r0, r3
 8007f50:	3714      	adds	r7, #20
 8007f52:	46bd      	mov	sp, r7
 8007f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f58:	4770      	bx	lr
 8007f5a:	bf00      	nop
 8007f5c:	00030d40 	.word	0x00030d40

08007f60 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8007f60:	b480      	push	{r7}
 8007f62:	b085      	sub	sp, #20
 8007f64:	af00      	add	r7, sp, #0
 8007f66:	6078      	str	r0, [r7, #4]
 8007f68:	460b      	mov	r3, r1
 8007f6a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007f76:	681a      	ldr	r2, [r3, #0]
 8007f78:	78fb      	ldrb	r3, [r7, #3]
 8007f7a:	68f9      	ldr	r1, [r7, #12]
 8007f7c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007f80:	4313      	orrs	r3, r2
 8007f82:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8007f84:	2300      	movs	r3, #0
}
 8007f86:	4618      	mov	r0, r3
 8007f88:	3714      	adds	r7, #20
 8007f8a:	46bd      	mov	sp, r7
 8007f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f90:	4770      	bx	lr

08007f92 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8007f92:	b480      	push	{r7}
 8007f94:	b087      	sub	sp, #28
 8007f96:	af00      	add	r7, sp, #0
 8007f98:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8007f9e:	693b      	ldr	r3, [r7, #16]
 8007fa0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007fa4:	689b      	ldr	r3, [r3, #8]
 8007fa6:	f003 0306 	and.w	r3, r3, #6
 8007faa:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	d102      	bne.n	8007fb8 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8007fb2:	2300      	movs	r3, #0
 8007fb4:	75fb      	strb	r3, [r7, #23]
 8007fb6:	e00a      	b.n	8007fce <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	2b02      	cmp	r3, #2
 8007fbc:	d002      	beq.n	8007fc4 <USB_GetDevSpeed+0x32>
 8007fbe:	68fb      	ldr	r3, [r7, #12]
 8007fc0:	2b06      	cmp	r3, #6
 8007fc2:	d102      	bne.n	8007fca <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8007fc4:	2302      	movs	r3, #2
 8007fc6:	75fb      	strb	r3, [r7, #23]
 8007fc8:	e001      	b.n	8007fce <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8007fca:	230f      	movs	r3, #15
 8007fcc:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8007fce:	7dfb      	ldrb	r3, [r7, #23]
}
 8007fd0:	4618      	mov	r0, r3
 8007fd2:	371c      	adds	r7, #28
 8007fd4:	46bd      	mov	sp, r7
 8007fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fda:	4770      	bx	lr

08007fdc <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007fdc:	b480      	push	{r7}
 8007fde:	b085      	sub	sp, #20
 8007fe0:	af00      	add	r7, sp, #0
 8007fe2:	6078      	str	r0, [r7, #4]
 8007fe4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007fea:	683b      	ldr	r3, [r7, #0]
 8007fec:	781b      	ldrb	r3, [r3, #0]
 8007fee:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007ff0:	683b      	ldr	r3, [r7, #0]
 8007ff2:	785b      	ldrb	r3, [r3, #1]
 8007ff4:	2b01      	cmp	r3, #1
 8007ff6:	d13a      	bne.n	800806e <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007ffe:	69da      	ldr	r2, [r3, #28]
 8008000:	683b      	ldr	r3, [r7, #0]
 8008002:	781b      	ldrb	r3, [r3, #0]
 8008004:	f003 030f 	and.w	r3, r3, #15
 8008008:	2101      	movs	r1, #1
 800800a:	fa01 f303 	lsl.w	r3, r1, r3
 800800e:	b29b      	uxth	r3, r3
 8008010:	68f9      	ldr	r1, [r7, #12]
 8008012:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008016:	4313      	orrs	r3, r2
 8008018:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800801a:	68bb      	ldr	r3, [r7, #8]
 800801c:	015a      	lsls	r2, r3, #5
 800801e:	68fb      	ldr	r3, [r7, #12]
 8008020:	4413      	add	r3, r2
 8008022:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800802c:	2b00      	cmp	r3, #0
 800802e:	d155      	bne.n	80080dc <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008030:	68bb      	ldr	r3, [r7, #8]
 8008032:	015a      	lsls	r2, r3, #5
 8008034:	68fb      	ldr	r3, [r7, #12]
 8008036:	4413      	add	r3, r2
 8008038:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800803c:	681a      	ldr	r2, [r3, #0]
 800803e:	683b      	ldr	r3, [r7, #0]
 8008040:	689b      	ldr	r3, [r3, #8]
 8008042:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8008046:	683b      	ldr	r3, [r7, #0]
 8008048:	78db      	ldrb	r3, [r3, #3]
 800804a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800804c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800804e:	68bb      	ldr	r3, [r7, #8]
 8008050:	059b      	lsls	r3, r3, #22
 8008052:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008054:	4313      	orrs	r3, r2
 8008056:	68ba      	ldr	r2, [r7, #8]
 8008058:	0151      	lsls	r1, r2, #5
 800805a:	68fa      	ldr	r2, [r7, #12]
 800805c:	440a      	add	r2, r1
 800805e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008062:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008066:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800806a:	6013      	str	r3, [r2, #0]
 800806c:	e036      	b.n	80080dc <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800806e:	68fb      	ldr	r3, [r7, #12]
 8008070:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008074:	69da      	ldr	r2, [r3, #28]
 8008076:	683b      	ldr	r3, [r7, #0]
 8008078:	781b      	ldrb	r3, [r3, #0]
 800807a:	f003 030f 	and.w	r3, r3, #15
 800807e:	2101      	movs	r1, #1
 8008080:	fa01 f303 	lsl.w	r3, r1, r3
 8008084:	041b      	lsls	r3, r3, #16
 8008086:	68f9      	ldr	r1, [r7, #12]
 8008088:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800808c:	4313      	orrs	r3, r2
 800808e:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8008090:	68bb      	ldr	r3, [r7, #8]
 8008092:	015a      	lsls	r2, r3, #5
 8008094:	68fb      	ldr	r3, [r7, #12]
 8008096:	4413      	add	r3, r2
 8008098:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	d11a      	bne.n	80080dc <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80080a6:	68bb      	ldr	r3, [r7, #8]
 80080a8:	015a      	lsls	r2, r3, #5
 80080aa:	68fb      	ldr	r3, [r7, #12]
 80080ac:	4413      	add	r3, r2
 80080ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80080b2:	681a      	ldr	r2, [r3, #0]
 80080b4:	683b      	ldr	r3, [r7, #0]
 80080b6:	689b      	ldr	r3, [r3, #8]
 80080b8:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80080bc:	683b      	ldr	r3, [r7, #0]
 80080be:	78db      	ldrb	r3, [r3, #3]
 80080c0:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80080c2:	430b      	orrs	r3, r1
 80080c4:	4313      	orrs	r3, r2
 80080c6:	68ba      	ldr	r2, [r7, #8]
 80080c8:	0151      	lsls	r1, r2, #5
 80080ca:	68fa      	ldr	r2, [r7, #12]
 80080cc:	440a      	add	r2, r1
 80080ce:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80080d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80080d6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80080da:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80080dc:	2300      	movs	r3, #0
}
 80080de:	4618      	mov	r0, r3
 80080e0:	3714      	adds	r7, #20
 80080e2:	46bd      	mov	sp, r7
 80080e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080e8:	4770      	bx	lr
	...

080080ec <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80080ec:	b480      	push	{r7}
 80080ee:	b085      	sub	sp, #20
 80080f0:	af00      	add	r7, sp, #0
 80080f2:	6078      	str	r0, [r7, #4]
 80080f4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80080fa:	683b      	ldr	r3, [r7, #0]
 80080fc:	781b      	ldrb	r3, [r3, #0]
 80080fe:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8008100:	683b      	ldr	r3, [r7, #0]
 8008102:	785b      	ldrb	r3, [r3, #1]
 8008104:	2b01      	cmp	r3, #1
 8008106:	d161      	bne.n	80081cc <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008108:	68bb      	ldr	r3, [r7, #8]
 800810a:	015a      	lsls	r2, r3, #5
 800810c:	68fb      	ldr	r3, [r7, #12]
 800810e:	4413      	add	r3, r2
 8008110:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800811a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800811e:	d11f      	bne.n	8008160 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8008120:	68bb      	ldr	r3, [r7, #8]
 8008122:	015a      	lsls	r2, r3, #5
 8008124:	68fb      	ldr	r3, [r7, #12]
 8008126:	4413      	add	r3, r2
 8008128:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	68ba      	ldr	r2, [r7, #8]
 8008130:	0151      	lsls	r1, r2, #5
 8008132:	68fa      	ldr	r2, [r7, #12]
 8008134:	440a      	add	r2, r1
 8008136:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800813a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800813e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8008140:	68bb      	ldr	r3, [r7, #8]
 8008142:	015a      	lsls	r2, r3, #5
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	4413      	add	r3, r2
 8008148:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	68ba      	ldr	r2, [r7, #8]
 8008150:	0151      	lsls	r1, r2, #5
 8008152:	68fa      	ldr	r2, [r7, #12]
 8008154:	440a      	add	r2, r1
 8008156:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800815a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800815e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8008160:	68fb      	ldr	r3, [r7, #12]
 8008162:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008166:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008168:	683b      	ldr	r3, [r7, #0]
 800816a:	781b      	ldrb	r3, [r3, #0]
 800816c:	f003 030f 	and.w	r3, r3, #15
 8008170:	2101      	movs	r1, #1
 8008172:	fa01 f303 	lsl.w	r3, r1, r3
 8008176:	b29b      	uxth	r3, r3
 8008178:	43db      	mvns	r3, r3
 800817a:	68f9      	ldr	r1, [r7, #12]
 800817c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008180:	4013      	ands	r3, r2
 8008182:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8008184:	68fb      	ldr	r3, [r7, #12]
 8008186:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800818a:	69da      	ldr	r2, [r3, #28]
 800818c:	683b      	ldr	r3, [r7, #0]
 800818e:	781b      	ldrb	r3, [r3, #0]
 8008190:	f003 030f 	and.w	r3, r3, #15
 8008194:	2101      	movs	r1, #1
 8008196:	fa01 f303 	lsl.w	r3, r1, r3
 800819a:	b29b      	uxth	r3, r3
 800819c:	43db      	mvns	r3, r3
 800819e:	68f9      	ldr	r1, [r7, #12]
 80081a0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80081a4:	4013      	ands	r3, r2
 80081a6:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80081a8:	68bb      	ldr	r3, [r7, #8]
 80081aa:	015a      	lsls	r2, r3, #5
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	4413      	add	r3, r2
 80081b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80081b4:	681a      	ldr	r2, [r3, #0]
 80081b6:	68bb      	ldr	r3, [r7, #8]
 80081b8:	0159      	lsls	r1, r3, #5
 80081ba:	68fb      	ldr	r3, [r7, #12]
 80081bc:	440b      	add	r3, r1
 80081be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80081c2:	4619      	mov	r1, r3
 80081c4:	4b35      	ldr	r3, [pc, #212]	; (800829c <USB_DeactivateEndpoint+0x1b0>)
 80081c6:	4013      	ands	r3, r2
 80081c8:	600b      	str	r3, [r1, #0]
 80081ca:	e060      	b.n	800828e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80081cc:	68bb      	ldr	r3, [r7, #8]
 80081ce:	015a      	lsls	r2, r3, #5
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	4413      	add	r3, r2
 80081d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80081de:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80081e2:	d11f      	bne.n	8008224 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80081e4:	68bb      	ldr	r3, [r7, #8]
 80081e6:	015a      	lsls	r2, r3, #5
 80081e8:	68fb      	ldr	r3, [r7, #12]
 80081ea:	4413      	add	r3, r2
 80081ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	68ba      	ldr	r2, [r7, #8]
 80081f4:	0151      	lsls	r1, r2, #5
 80081f6:	68fa      	ldr	r2, [r7, #12]
 80081f8:	440a      	add	r2, r1
 80081fa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80081fe:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008202:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8008204:	68bb      	ldr	r3, [r7, #8]
 8008206:	015a      	lsls	r2, r3, #5
 8008208:	68fb      	ldr	r3, [r7, #12]
 800820a:	4413      	add	r3, r2
 800820c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	68ba      	ldr	r2, [r7, #8]
 8008214:	0151      	lsls	r1, r2, #5
 8008216:	68fa      	ldr	r2, [r7, #12]
 8008218:	440a      	add	r2, r1
 800821a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800821e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008222:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8008224:	68fb      	ldr	r3, [r7, #12]
 8008226:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800822a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800822c:	683b      	ldr	r3, [r7, #0]
 800822e:	781b      	ldrb	r3, [r3, #0]
 8008230:	f003 030f 	and.w	r3, r3, #15
 8008234:	2101      	movs	r1, #1
 8008236:	fa01 f303 	lsl.w	r3, r1, r3
 800823a:	041b      	lsls	r3, r3, #16
 800823c:	43db      	mvns	r3, r3
 800823e:	68f9      	ldr	r1, [r7, #12]
 8008240:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008244:	4013      	ands	r3, r2
 8008246:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800824e:	69da      	ldr	r2, [r3, #28]
 8008250:	683b      	ldr	r3, [r7, #0]
 8008252:	781b      	ldrb	r3, [r3, #0]
 8008254:	f003 030f 	and.w	r3, r3, #15
 8008258:	2101      	movs	r1, #1
 800825a:	fa01 f303 	lsl.w	r3, r1, r3
 800825e:	041b      	lsls	r3, r3, #16
 8008260:	43db      	mvns	r3, r3
 8008262:	68f9      	ldr	r1, [r7, #12]
 8008264:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008268:	4013      	ands	r3, r2
 800826a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800826c:	68bb      	ldr	r3, [r7, #8]
 800826e:	015a      	lsls	r2, r3, #5
 8008270:	68fb      	ldr	r3, [r7, #12]
 8008272:	4413      	add	r3, r2
 8008274:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008278:	681a      	ldr	r2, [r3, #0]
 800827a:	68bb      	ldr	r3, [r7, #8]
 800827c:	0159      	lsls	r1, r3, #5
 800827e:	68fb      	ldr	r3, [r7, #12]
 8008280:	440b      	add	r3, r1
 8008282:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008286:	4619      	mov	r1, r3
 8008288:	4b05      	ldr	r3, [pc, #20]	; (80082a0 <USB_DeactivateEndpoint+0x1b4>)
 800828a:	4013      	ands	r3, r2
 800828c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800828e:	2300      	movs	r3, #0
}
 8008290:	4618      	mov	r0, r3
 8008292:	3714      	adds	r7, #20
 8008294:	46bd      	mov	sp, r7
 8008296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800829a:	4770      	bx	lr
 800829c:	ec337800 	.word	0xec337800
 80082a0:	eff37800 	.word	0xeff37800

080082a4 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80082a4:	b580      	push	{r7, lr}
 80082a6:	b08a      	sub	sp, #40	; 0x28
 80082a8:	af02      	add	r7, sp, #8
 80082aa:	60f8      	str	r0, [r7, #12]
 80082ac:	60b9      	str	r1, [r7, #8]
 80082ae:	4613      	mov	r3, r2
 80082b0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80082b2:	68fb      	ldr	r3, [r7, #12]
 80082b4:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80082b6:	68bb      	ldr	r3, [r7, #8]
 80082b8:	781b      	ldrb	r3, [r3, #0]
 80082ba:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80082bc:	68bb      	ldr	r3, [r7, #8]
 80082be:	785b      	ldrb	r3, [r3, #1]
 80082c0:	2b01      	cmp	r3, #1
 80082c2:	f040 815c 	bne.w	800857e <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80082c6:	68bb      	ldr	r3, [r7, #8]
 80082c8:	695b      	ldr	r3, [r3, #20]
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	d132      	bne.n	8008334 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80082ce:	69bb      	ldr	r3, [r7, #24]
 80082d0:	015a      	lsls	r2, r3, #5
 80082d2:	69fb      	ldr	r3, [r7, #28]
 80082d4:	4413      	add	r3, r2
 80082d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80082da:	691b      	ldr	r3, [r3, #16]
 80082dc:	69ba      	ldr	r2, [r7, #24]
 80082de:	0151      	lsls	r1, r2, #5
 80082e0:	69fa      	ldr	r2, [r7, #28]
 80082e2:	440a      	add	r2, r1
 80082e4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80082e8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80082ec:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80082f0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80082f2:	69bb      	ldr	r3, [r7, #24]
 80082f4:	015a      	lsls	r2, r3, #5
 80082f6:	69fb      	ldr	r3, [r7, #28]
 80082f8:	4413      	add	r3, r2
 80082fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80082fe:	691b      	ldr	r3, [r3, #16]
 8008300:	69ba      	ldr	r2, [r7, #24]
 8008302:	0151      	lsls	r1, r2, #5
 8008304:	69fa      	ldr	r2, [r7, #28]
 8008306:	440a      	add	r2, r1
 8008308:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800830c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008310:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008312:	69bb      	ldr	r3, [r7, #24]
 8008314:	015a      	lsls	r2, r3, #5
 8008316:	69fb      	ldr	r3, [r7, #28]
 8008318:	4413      	add	r3, r2
 800831a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800831e:	691b      	ldr	r3, [r3, #16]
 8008320:	69ba      	ldr	r2, [r7, #24]
 8008322:	0151      	lsls	r1, r2, #5
 8008324:	69fa      	ldr	r2, [r7, #28]
 8008326:	440a      	add	r2, r1
 8008328:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800832c:	0cdb      	lsrs	r3, r3, #19
 800832e:	04db      	lsls	r3, r3, #19
 8008330:	6113      	str	r3, [r2, #16]
 8008332:	e074      	b.n	800841e <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008334:	69bb      	ldr	r3, [r7, #24]
 8008336:	015a      	lsls	r2, r3, #5
 8008338:	69fb      	ldr	r3, [r7, #28]
 800833a:	4413      	add	r3, r2
 800833c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008340:	691b      	ldr	r3, [r3, #16]
 8008342:	69ba      	ldr	r2, [r7, #24]
 8008344:	0151      	lsls	r1, r2, #5
 8008346:	69fa      	ldr	r2, [r7, #28]
 8008348:	440a      	add	r2, r1
 800834a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800834e:	0cdb      	lsrs	r3, r3, #19
 8008350:	04db      	lsls	r3, r3, #19
 8008352:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008354:	69bb      	ldr	r3, [r7, #24]
 8008356:	015a      	lsls	r2, r3, #5
 8008358:	69fb      	ldr	r3, [r7, #28]
 800835a:	4413      	add	r3, r2
 800835c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008360:	691b      	ldr	r3, [r3, #16]
 8008362:	69ba      	ldr	r2, [r7, #24]
 8008364:	0151      	lsls	r1, r2, #5
 8008366:	69fa      	ldr	r2, [r7, #28]
 8008368:	440a      	add	r2, r1
 800836a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800836e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008372:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008376:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8008378:	69bb      	ldr	r3, [r7, #24]
 800837a:	015a      	lsls	r2, r3, #5
 800837c:	69fb      	ldr	r3, [r7, #28]
 800837e:	4413      	add	r3, r2
 8008380:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008384:	691a      	ldr	r2, [r3, #16]
 8008386:	68bb      	ldr	r3, [r7, #8]
 8008388:	6959      	ldr	r1, [r3, #20]
 800838a:	68bb      	ldr	r3, [r7, #8]
 800838c:	689b      	ldr	r3, [r3, #8]
 800838e:	440b      	add	r3, r1
 8008390:	1e59      	subs	r1, r3, #1
 8008392:	68bb      	ldr	r3, [r7, #8]
 8008394:	689b      	ldr	r3, [r3, #8]
 8008396:	fbb1 f3f3 	udiv	r3, r1, r3
 800839a:	04d9      	lsls	r1, r3, #19
 800839c:	4b9d      	ldr	r3, [pc, #628]	; (8008614 <USB_EPStartXfer+0x370>)
 800839e:	400b      	ands	r3, r1
 80083a0:	69b9      	ldr	r1, [r7, #24]
 80083a2:	0148      	lsls	r0, r1, #5
 80083a4:	69f9      	ldr	r1, [r7, #28]
 80083a6:	4401      	add	r1, r0
 80083a8:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80083ac:	4313      	orrs	r3, r2
 80083ae:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80083b0:	69bb      	ldr	r3, [r7, #24]
 80083b2:	015a      	lsls	r2, r3, #5
 80083b4:	69fb      	ldr	r3, [r7, #28]
 80083b6:	4413      	add	r3, r2
 80083b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80083bc:	691a      	ldr	r2, [r3, #16]
 80083be:	68bb      	ldr	r3, [r7, #8]
 80083c0:	695b      	ldr	r3, [r3, #20]
 80083c2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80083c6:	69b9      	ldr	r1, [r7, #24]
 80083c8:	0148      	lsls	r0, r1, #5
 80083ca:	69f9      	ldr	r1, [r7, #28]
 80083cc:	4401      	add	r1, r0
 80083ce:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80083d2:	4313      	orrs	r3, r2
 80083d4:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80083d6:	68bb      	ldr	r3, [r7, #8]
 80083d8:	78db      	ldrb	r3, [r3, #3]
 80083da:	2b01      	cmp	r3, #1
 80083dc:	d11f      	bne.n	800841e <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80083de:	69bb      	ldr	r3, [r7, #24]
 80083e0:	015a      	lsls	r2, r3, #5
 80083e2:	69fb      	ldr	r3, [r7, #28]
 80083e4:	4413      	add	r3, r2
 80083e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80083ea:	691b      	ldr	r3, [r3, #16]
 80083ec:	69ba      	ldr	r2, [r7, #24]
 80083ee:	0151      	lsls	r1, r2, #5
 80083f0:	69fa      	ldr	r2, [r7, #28]
 80083f2:	440a      	add	r2, r1
 80083f4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80083f8:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80083fc:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80083fe:	69bb      	ldr	r3, [r7, #24]
 8008400:	015a      	lsls	r2, r3, #5
 8008402:	69fb      	ldr	r3, [r7, #28]
 8008404:	4413      	add	r3, r2
 8008406:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800840a:	691b      	ldr	r3, [r3, #16]
 800840c:	69ba      	ldr	r2, [r7, #24]
 800840e:	0151      	lsls	r1, r2, #5
 8008410:	69fa      	ldr	r2, [r7, #28]
 8008412:	440a      	add	r2, r1
 8008414:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008418:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800841c:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800841e:	79fb      	ldrb	r3, [r7, #7]
 8008420:	2b01      	cmp	r3, #1
 8008422:	d14b      	bne.n	80084bc <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8008424:	68bb      	ldr	r3, [r7, #8]
 8008426:	691b      	ldr	r3, [r3, #16]
 8008428:	2b00      	cmp	r3, #0
 800842a:	d009      	beq.n	8008440 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800842c:	69bb      	ldr	r3, [r7, #24]
 800842e:	015a      	lsls	r2, r3, #5
 8008430:	69fb      	ldr	r3, [r7, #28]
 8008432:	4413      	add	r3, r2
 8008434:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008438:	461a      	mov	r2, r3
 800843a:	68bb      	ldr	r3, [r7, #8]
 800843c:	691b      	ldr	r3, [r3, #16]
 800843e:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8008440:	68bb      	ldr	r3, [r7, #8]
 8008442:	78db      	ldrb	r3, [r3, #3]
 8008444:	2b01      	cmp	r3, #1
 8008446:	d128      	bne.n	800849a <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008448:	69fb      	ldr	r3, [r7, #28]
 800844a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800844e:	689b      	ldr	r3, [r3, #8]
 8008450:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008454:	2b00      	cmp	r3, #0
 8008456:	d110      	bne.n	800847a <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8008458:	69bb      	ldr	r3, [r7, #24]
 800845a:	015a      	lsls	r2, r3, #5
 800845c:	69fb      	ldr	r3, [r7, #28]
 800845e:	4413      	add	r3, r2
 8008460:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	69ba      	ldr	r2, [r7, #24]
 8008468:	0151      	lsls	r1, r2, #5
 800846a:	69fa      	ldr	r2, [r7, #28]
 800846c:	440a      	add	r2, r1
 800846e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008472:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008476:	6013      	str	r3, [r2, #0]
 8008478:	e00f      	b.n	800849a <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800847a:	69bb      	ldr	r3, [r7, #24]
 800847c:	015a      	lsls	r2, r3, #5
 800847e:	69fb      	ldr	r3, [r7, #28]
 8008480:	4413      	add	r3, r2
 8008482:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	69ba      	ldr	r2, [r7, #24]
 800848a:	0151      	lsls	r1, r2, #5
 800848c:	69fa      	ldr	r2, [r7, #28]
 800848e:	440a      	add	r2, r1
 8008490:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008494:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008498:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800849a:	69bb      	ldr	r3, [r7, #24]
 800849c:	015a      	lsls	r2, r3, #5
 800849e:	69fb      	ldr	r3, [r7, #28]
 80084a0:	4413      	add	r3, r2
 80084a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	69ba      	ldr	r2, [r7, #24]
 80084aa:	0151      	lsls	r1, r2, #5
 80084ac:	69fa      	ldr	r2, [r7, #28]
 80084ae:	440a      	add	r2, r1
 80084b0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80084b4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80084b8:	6013      	str	r3, [r2, #0]
 80084ba:	e12f      	b.n	800871c <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80084bc:	69bb      	ldr	r3, [r7, #24]
 80084be:	015a      	lsls	r2, r3, #5
 80084c0:	69fb      	ldr	r3, [r7, #28]
 80084c2:	4413      	add	r3, r2
 80084c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	69ba      	ldr	r2, [r7, #24]
 80084cc:	0151      	lsls	r1, r2, #5
 80084ce:	69fa      	ldr	r2, [r7, #28]
 80084d0:	440a      	add	r2, r1
 80084d2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80084d6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80084da:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80084dc:	68bb      	ldr	r3, [r7, #8]
 80084de:	78db      	ldrb	r3, [r3, #3]
 80084e0:	2b01      	cmp	r3, #1
 80084e2:	d015      	beq.n	8008510 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80084e4:	68bb      	ldr	r3, [r7, #8]
 80084e6:	695b      	ldr	r3, [r3, #20]
 80084e8:	2b00      	cmp	r3, #0
 80084ea:	f000 8117 	beq.w	800871c <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80084ee:	69fb      	ldr	r3, [r7, #28]
 80084f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80084f4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80084f6:	68bb      	ldr	r3, [r7, #8]
 80084f8:	781b      	ldrb	r3, [r3, #0]
 80084fa:	f003 030f 	and.w	r3, r3, #15
 80084fe:	2101      	movs	r1, #1
 8008500:	fa01 f303 	lsl.w	r3, r1, r3
 8008504:	69f9      	ldr	r1, [r7, #28]
 8008506:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800850a:	4313      	orrs	r3, r2
 800850c:	634b      	str	r3, [r1, #52]	; 0x34
 800850e:	e105      	b.n	800871c <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008510:	69fb      	ldr	r3, [r7, #28]
 8008512:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008516:	689b      	ldr	r3, [r3, #8]
 8008518:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800851c:	2b00      	cmp	r3, #0
 800851e:	d110      	bne.n	8008542 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8008520:	69bb      	ldr	r3, [r7, #24]
 8008522:	015a      	lsls	r2, r3, #5
 8008524:	69fb      	ldr	r3, [r7, #28]
 8008526:	4413      	add	r3, r2
 8008528:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	69ba      	ldr	r2, [r7, #24]
 8008530:	0151      	lsls	r1, r2, #5
 8008532:	69fa      	ldr	r2, [r7, #28]
 8008534:	440a      	add	r2, r1
 8008536:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800853a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800853e:	6013      	str	r3, [r2, #0]
 8008540:	e00f      	b.n	8008562 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8008542:	69bb      	ldr	r3, [r7, #24]
 8008544:	015a      	lsls	r2, r3, #5
 8008546:	69fb      	ldr	r3, [r7, #28]
 8008548:	4413      	add	r3, r2
 800854a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	69ba      	ldr	r2, [r7, #24]
 8008552:	0151      	lsls	r1, r2, #5
 8008554:	69fa      	ldr	r2, [r7, #28]
 8008556:	440a      	add	r2, r1
 8008558:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800855c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008560:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8008562:	68bb      	ldr	r3, [r7, #8]
 8008564:	68d9      	ldr	r1, [r3, #12]
 8008566:	68bb      	ldr	r3, [r7, #8]
 8008568:	781a      	ldrb	r2, [r3, #0]
 800856a:	68bb      	ldr	r3, [r7, #8]
 800856c:	695b      	ldr	r3, [r3, #20]
 800856e:	b298      	uxth	r0, r3
 8008570:	79fb      	ldrb	r3, [r7, #7]
 8008572:	9300      	str	r3, [sp, #0]
 8008574:	4603      	mov	r3, r0
 8008576:	68f8      	ldr	r0, [r7, #12]
 8008578:	f000 fa2b 	bl	80089d2 <USB_WritePacket>
 800857c:	e0ce      	b.n	800871c <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800857e:	69bb      	ldr	r3, [r7, #24]
 8008580:	015a      	lsls	r2, r3, #5
 8008582:	69fb      	ldr	r3, [r7, #28]
 8008584:	4413      	add	r3, r2
 8008586:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800858a:	691b      	ldr	r3, [r3, #16]
 800858c:	69ba      	ldr	r2, [r7, #24]
 800858e:	0151      	lsls	r1, r2, #5
 8008590:	69fa      	ldr	r2, [r7, #28]
 8008592:	440a      	add	r2, r1
 8008594:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008598:	0cdb      	lsrs	r3, r3, #19
 800859a:	04db      	lsls	r3, r3, #19
 800859c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800859e:	69bb      	ldr	r3, [r7, #24]
 80085a0:	015a      	lsls	r2, r3, #5
 80085a2:	69fb      	ldr	r3, [r7, #28]
 80085a4:	4413      	add	r3, r2
 80085a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80085aa:	691b      	ldr	r3, [r3, #16]
 80085ac:	69ba      	ldr	r2, [r7, #24]
 80085ae:	0151      	lsls	r1, r2, #5
 80085b0:	69fa      	ldr	r2, [r7, #28]
 80085b2:	440a      	add	r2, r1
 80085b4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80085b8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80085bc:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80085c0:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 80085c2:	68bb      	ldr	r3, [r7, #8]
 80085c4:	695b      	ldr	r3, [r3, #20]
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	d126      	bne.n	8008618 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80085ca:	69bb      	ldr	r3, [r7, #24]
 80085cc:	015a      	lsls	r2, r3, #5
 80085ce:	69fb      	ldr	r3, [r7, #28]
 80085d0:	4413      	add	r3, r2
 80085d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80085d6:	691a      	ldr	r2, [r3, #16]
 80085d8:	68bb      	ldr	r3, [r7, #8]
 80085da:	689b      	ldr	r3, [r3, #8]
 80085dc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80085e0:	69b9      	ldr	r1, [r7, #24]
 80085e2:	0148      	lsls	r0, r1, #5
 80085e4:	69f9      	ldr	r1, [r7, #28]
 80085e6:	4401      	add	r1, r0
 80085e8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80085ec:	4313      	orrs	r3, r2
 80085ee:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80085f0:	69bb      	ldr	r3, [r7, #24]
 80085f2:	015a      	lsls	r2, r3, #5
 80085f4:	69fb      	ldr	r3, [r7, #28]
 80085f6:	4413      	add	r3, r2
 80085f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80085fc:	691b      	ldr	r3, [r3, #16]
 80085fe:	69ba      	ldr	r2, [r7, #24]
 8008600:	0151      	lsls	r1, r2, #5
 8008602:	69fa      	ldr	r2, [r7, #28]
 8008604:	440a      	add	r2, r1
 8008606:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800860a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800860e:	6113      	str	r3, [r2, #16]
 8008610:	e036      	b.n	8008680 <USB_EPStartXfer+0x3dc>
 8008612:	bf00      	nop
 8008614:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8008618:	68bb      	ldr	r3, [r7, #8]
 800861a:	695a      	ldr	r2, [r3, #20]
 800861c:	68bb      	ldr	r3, [r7, #8]
 800861e:	689b      	ldr	r3, [r3, #8]
 8008620:	4413      	add	r3, r2
 8008622:	1e5a      	subs	r2, r3, #1
 8008624:	68bb      	ldr	r3, [r7, #8]
 8008626:	689b      	ldr	r3, [r3, #8]
 8008628:	fbb2 f3f3 	udiv	r3, r2, r3
 800862c:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800862e:	69bb      	ldr	r3, [r7, #24]
 8008630:	015a      	lsls	r2, r3, #5
 8008632:	69fb      	ldr	r3, [r7, #28]
 8008634:	4413      	add	r3, r2
 8008636:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800863a:	691a      	ldr	r2, [r3, #16]
 800863c:	8afb      	ldrh	r3, [r7, #22]
 800863e:	04d9      	lsls	r1, r3, #19
 8008640:	4b39      	ldr	r3, [pc, #228]	; (8008728 <USB_EPStartXfer+0x484>)
 8008642:	400b      	ands	r3, r1
 8008644:	69b9      	ldr	r1, [r7, #24]
 8008646:	0148      	lsls	r0, r1, #5
 8008648:	69f9      	ldr	r1, [r7, #28]
 800864a:	4401      	add	r1, r0
 800864c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8008650:	4313      	orrs	r3, r2
 8008652:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8008654:	69bb      	ldr	r3, [r7, #24]
 8008656:	015a      	lsls	r2, r3, #5
 8008658:	69fb      	ldr	r3, [r7, #28]
 800865a:	4413      	add	r3, r2
 800865c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008660:	691a      	ldr	r2, [r3, #16]
 8008662:	68bb      	ldr	r3, [r7, #8]
 8008664:	689b      	ldr	r3, [r3, #8]
 8008666:	8af9      	ldrh	r1, [r7, #22]
 8008668:	fb01 f303 	mul.w	r3, r1, r3
 800866c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008670:	69b9      	ldr	r1, [r7, #24]
 8008672:	0148      	lsls	r0, r1, #5
 8008674:	69f9      	ldr	r1, [r7, #28]
 8008676:	4401      	add	r1, r0
 8008678:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800867c:	4313      	orrs	r3, r2
 800867e:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8008680:	79fb      	ldrb	r3, [r7, #7]
 8008682:	2b01      	cmp	r3, #1
 8008684:	d10d      	bne.n	80086a2 <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8008686:	68bb      	ldr	r3, [r7, #8]
 8008688:	68db      	ldr	r3, [r3, #12]
 800868a:	2b00      	cmp	r3, #0
 800868c:	d009      	beq.n	80086a2 <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800868e:	68bb      	ldr	r3, [r7, #8]
 8008690:	68d9      	ldr	r1, [r3, #12]
 8008692:	69bb      	ldr	r3, [r7, #24]
 8008694:	015a      	lsls	r2, r3, #5
 8008696:	69fb      	ldr	r3, [r7, #28]
 8008698:	4413      	add	r3, r2
 800869a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800869e:	460a      	mov	r2, r1
 80086a0:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80086a2:	68bb      	ldr	r3, [r7, #8]
 80086a4:	78db      	ldrb	r3, [r3, #3]
 80086a6:	2b01      	cmp	r3, #1
 80086a8:	d128      	bne.n	80086fc <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80086aa:	69fb      	ldr	r3, [r7, #28]
 80086ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80086b0:	689b      	ldr	r3, [r3, #8]
 80086b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80086b6:	2b00      	cmp	r3, #0
 80086b8:	d110      	bne.n	80086dc <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80086ba:	69bb      	ldr	r3, [r7, #24]
 80086bc:	015a      	lsls	r2, r3, #5
 80086be:	69fb      	ldr	r3, [r7, #28]
 80086c0:	4413      	add	r3, r2
 80086c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	69ba      	ldr	r2, [r7, #24]
 80086ca:	0151      	lsls	r1, r2, #5
 80086cc:	69fa      	ldr	r2, [r7, #28]
 80086ce:	440a      	add	r2, r1
 80086d0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80086d4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80086d8:	6013      	str	r3, [r2, #0]
 80086da:	e00f      	b.n	80086fc <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80086dc:	69bb      	ldr	r3, [r7, #24]
 80086de:	015a      	lsls	r2, r3, #5
 80086e0:	69fb      	ldr	r3, [r7, #28]
 80086e2:	4413      	add	r3, r2
 80086e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	69ba      	ldr	r2, [r7, #24]
 80086ec:	0151      	lsls	r1, r2, #5
 80086ee:	69fa      	ldr	r2, [r7, #28]
 80086f0:	440a      	add	r2, r1
 80086f2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80086f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80086fa:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80086fc:	69bb      	ldr	r3, [r7, #24]
 80086fe:	015a      	lsls	r2, r3, #5
 8008700:	69fb      	ldr	r3, [r7, #28]
 8008702:	4413      	add	r3, r2
 8008704:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	69ba      	ldr	r2, [r7, #24]
 800870c:	0151      	lsls	r1, r2, #5
 800870e:	69fa      	ldr	r2, [r7, #28]
 8008710:	440a      	add	r2, r1
 8008712:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008716:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800871a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800871c:	2300      	movs	r3, #0
}
 800871e:	4618      	mov	r0, r3
 8008720:	3720      	adds	r7, #32
 8008722:	46bd      	mov	sp, r7
 8008724:	bd80      	pop	{r7, pc}
 8008726:	bf00      	nop
 8008728:	1ff80000 	.word	0x1ff80000

0800872c <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800872c:	b480      	push	{r7}
 800872e:	b087      	sub	sp, #28
 8008730:	af00      	add	r7, sp, #0
 8008732:	60f8      	str	r0, [r7, #12]
 8008734:	60b9      	str	r1, [r7, #8]
 8008736:	4613      	mov	r3, r2
 8008738:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800873a:	68fb      	ldr	r3, [r7, #12]
 800873c:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800873e:	68bb      	ldr	r3, [r7, #8]
 8008740:	781b      	ldrb	r3, [r3, #0]
 8008742:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008744:	68bb      	ldr	r3, [r7, #8]
 8008746:	785b      	ldrb	r3, [r3, #1]
 8008748:	2b01      	cmp	r3, #1
 800874a:	f040 80cd 	bne.w	80088e8 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800874e:	68bb      	ldr	r3, [r7, #8]
 8008750:	695b      	ldr	r3, [r3, #20]
 8008752:	2b00      	cmp	r3, #0
 8008754:	d132      	bne.n	80087bc <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008756:	693b      	ldr	r3, [r7, #16]
 8008758:	015a      	lsls	r2, r3, #5
 800875a:	697b      	ldr	r3, [r7, #20]
 800875c:	4413      	add	r3, r2
 800875e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008762:	691b      	ldr	r3, [r3, #16]
 8008764:	693a      	ldr	r2, [r7, #16]
 8008766:	0151      	lsls	r1, r2, #5
 8008768:	697a      	ldr	r2, [r7, #20]
 800876a:	440a      	add	r2, r1
 800876c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008770:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008774:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008778:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800877a:	693b      	ldr	r3, [r7, #16]
 800877c:	015a      	lsls	r2, r3, #5
 800877e:	697b      	ldr	r3, [r7, #20]
 8008780:	4413      	add	r3, r2
 8008782:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008786:	691b      	ldr	r3, [r3, #16]
 8008788:	693a      	ldr	r2, [r7, #16]
 800878a:	0151      	lsls	r1, r2, #5
 800878c:	697a      	ldr	r2, [r7, #20]
 800878e:	440a      	add	r2, r1
 8008790:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008794:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008798:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800879a:	693b      	ldr	r3, [r7, #16]
 800879c:	015a      	lsls	r2, r3, #5
 800879e:	697b      	ldr	r3, [r7, #20]
 80087a0:	4413      	add	r3, r2
 80087a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80087a6:	691b      	ldr	r3, [r3, #16]
 80087a8:	693a      	ldr	r2, [r7, #16]
 80087aa:	0151      	lsls	r1, r2, #5
 80087ac:	697a      	ldr	r2, [r7, #20]
 80087ae:	440a      	add	r2, r1
 80087b0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80087b4:	0cdb      	lsrs	r3, r3, #19
 80087b6:	04db      	lsls	r3, r3, #19
 80087b8:	6113      	str	r3, [r2, #16]
 80087ba:	e04e      	b.n	800885a <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80087bc:	693b      	ldr	r3, [r7, #16]
 80087be:	015a      	lsls	r2, r3, #5
 80087c0:	697b      	ldr	r3, [r7, #20]
 80087c2:	4413      	add	r3, r2
 80087c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80087c8:	691b      	ldr	r3, [r3, #16]
 80087ca:	693a      	ldr	r2, [r7, #16]
 80087cc:	0151      	lsls	r1, r2, #5
 80087ce:	697a      	ldr	r2, [r7, #20]
 80087d0:	440a      	add	r2, r1
 80087d2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80087d6:	0cdb      	lsrs	r3, r3, #19
 80087d8:	04db      	lsls	r3, r3, #19
 80087da:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80087dc:	693b      	ldr	r3, [r7, #16]
 80087de:	015a      	lsls	r2, r3, #5
 80087e0:	697b      	ldr	r3, [r7, #20]
 80087e2:	4413      	add	r3, r2
 80087e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80087e8:	691b      	ldr	r3, [r3, #16]
 80087ea:	693a      	ldr	r2, [r7, #16]
 80087ec:	0151      	lsls	r1, r2, #5
 80087ee:	697a      	ldr	r2, [r7, #20]
 80087f0:	440a      	add	r2, r1
 80087f2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80087f6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80087fa:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80087fe:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8008800:	68bb      	ldr	r3, [r7, #8]
 8008802:	695a      	ldr	r2, [r3, #20]
 8008804:	68bb      	ldr	r3, [r7, #8]
 8008806:	689b      	ldr	r3, [r3, #8]
 8008808:	429a      	cmp	r2, r3
 800880a:	d903      	bls.n	8008814 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800880c:	68bb      	ldr	r3, [r7, #8]
 800880e:	689a      	ldr	r2, [r3, #8]
 8008810:	68bb      	ldr	r3, [r7, #8]
 8008812:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8008814:	693b      	ldr	r3, [r7, #16]
 8008816:	015a      	lsls	r2, r3, #5
 8008818:	697b      	ldr	r3, [r7, #20]
 800881a:	4413      	add	r3, r2
 800881c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008820:	691b      	ldr	r3, [r3, #16]
 8008822:	693a      	ldr	r2, [r7, #16]
 8008824:	0151      	lsls	r1, r2, #5
 8008826:	697a      	ldr	r2, [r7, #20]
 8008828:	440a      	add	r2, r1
 800882a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800882e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008832:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8008834:	693b      	ldr	r3, [r7, #16]
 8008836:	015a      	lsls	r2, r3, #5
 8008838:	697b      	ldr	r3, [r7, #20]
 800883a:	4413      	add	r3, r2
 800883c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008840:	691a      	ldr	r2, [r3, #16]
 8008842:	68bb      	ldr	r3, [r7, #8]
 8008844:	695b      	ldr	r3, [r3, #20]
 8008846:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800884a:	6939      	ldr	r1, [r7, #16]
 800884c:	0148      	lsls	r0, r1, #5
 800884e:	6979      	ldr	r1, [r7, #20]
 8008850:	4401      	add	r1, r0
 8008852:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8008856:	4313      	orrs	r3, r2
 8008858:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800885a:	79fb      	ldrb	r3, [r7, #7]
 800885c:	2b01      	cmp	r3, #1
 800885e:	d11e      	bne.n	800889e <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8008860:	68bb      	ldr	r3, [r7, #8]
 8008862:	691b      	ldr	r3, [r3, #16]
 8008864:	2b00      	cmp	r3, #0
 8008866:	d009      	beq.n	800887c <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8008868:	693b      	ldr	r3, [r7, #16]
 800886a:	015a      	lsls	r2, r3, #5
 800886c:	697b      	ldr	r3, [r7, #20]
 800886e:	4413      	add	r3, r2
 8008870:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008874:	461a      	mov	r2, r3
 8008876:	68bb      	ldr	r3, [r7, #8]
 8008878:	691b      	ldr	r3, [r3, #16]
 800887a:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800887c:	693b      	ldr	r3, [r7, #16]
 800887e:	015a      	lsls	r2, r3, #5
 8008880:	697b      	ldr	r3, [r7, #20]
 8008882:	4413      	add	r3, r2
 8008884:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	693a      	ldr	r2, [r7, #16]
 800888c:	0151      	lsls	r1, r2, #5
 800888e:	697a      	ldr	r2, [r7, #20]
 8008890:	440a      	add	r2, r1
 8008892:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008896:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800889a:	6013      	str	r3, [r2, #0]
 800889c:	e092      	b.n	80089c4 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800889e:	693b      	ldr	r3, [r7, #16]
 80088a0:	015a      	lsls	r2, r3, #5
 80088a2:	697b      	ldr	r3, [r7, #20]
 80088a4:	4413      	add	r3, r2
 80088a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	693a      	ldr	r2, [r7, #16]
 80088ae:	0151      	lsls	r1, r2, #5
 80088b0:	697a      	ldr	r2, [r7, #20]
 80088b2:	440a      	add	r2, r1
 80088b4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80088b8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80088bc:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 80088be:	68bb      	ldr	r3, [r7, #8]
 80088c0:	695b      	ldr	r3, [r3, #20]
 80088c2:	2b00      	cmp	r3, #0
 80088c4:	d07e      	beq.n	80089c4 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80088c6:	697b      	ldr	r3, [r7, #20]
 80088c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80088cc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80088ce:	68bb      	ldr	r3, [r7, #8]
 80088d0:	781b      	ldrb	r3, [r3, #0]
 80088d2:	f003 030f 	and.w	r3, r3, #15
 80088d6:	2101      	movs	r1, #1
 80088d8:	fa01 f303 	lsl.w	r3, r1, r3
 80088dc:	6979      	ldr	r1, [r7, #20]
 80088de:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80088e2:	4313      	orrs	r3, r2
 80088e4:	634b      	str	r3, [r1, #52]	; 0x34
 80088e6:	e06d      	b.n	80089c4 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80088e8:	693b      	ldr	r3, [r7, #16]
 80088ea:	015a      	lsls	r2, r3, #5
 80088ec:	697b      	ldr	r3, [r7, #20]
 80088ee:	4413      	add	r3, r2
 80088f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80088f4:	691b      	ldr	r3, [r3, #16]
 80088f6:	693a      	ldr	r2, [r7, #16]
 80088f8:	0151      	lsls	r1, r2, #5
 80088fa:	697a      	ldr	r2, [r7, #20]
 80088fc:	440a      	add	r2, r1
 80088fe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008902:	0cdb      	lsrs	r3, r3, #19
 8008904:	04db      	lsls	r3, r3, #19
 8008906:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8008908:	693b      	ldr	r3, [r7, #16]
 800890a:	015a      	lsls	r2, r3, #5
 800890c:	697b      	ldr	r3, [r7, #20]
 800890e:	4413      	add	r3, r2
 8008910:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008914:	691b      	ldr	r3, [r3, #16]
 8008916:	693a      	ldr	r2, [r7, #16]
 8008918:	0151      	lsls	r1, r2, #5
 800891a:	697a      	ldr	r2, [r7, #20]
 800891c:	440a      	add	r2, r1
 800891e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008922:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008926:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800892a:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800892c:	68bb      	ldr	r3, [r7, #8]
 800892e:	695b      	ldr	r3, [r3, #20]
 8008930:	2b00      	cmp	r3, #0
 8008932:	d003      	beq.n	800893c <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8008934:	68bb      	ldr	r3, [r7, #8]
 8008936:	689a      	ldr	r2, [r3, #8]
 8008938:	68bb      	ldr	r3, [r7, #8]
 800893a:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800893c:	693b      	ldr	r3, [r7, #16]
 800893e:	015a      	lsls	r2, r3, #5
 8008940:	697b      	ldr	r3, [r7, #20]
 8008942:	4413      	add	r3, r2
 8008944:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008948:	691b      	ldr	r3, [r3, #16]
 800894a:	693a      	ldr	r2, [r7, #16]
 800894c:	0151      	lsls	r1, r2, #5
 800894e:	697a      	ldr	r2, [r7, #20]
 8008950:	440a      	add	r2, r1
 8008952:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008956:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800895a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 800895c:	693b      	ldr	r3, [r7, #16]
 800895e:	015a      	lsls	r2, r3, #5
 8008960:	697b      	ldr	r3, [r7, #20]
 8008962:	4413      	add	r3, r2
 8008964:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008968:	691a      	ldr	r2, [r3, #16]
 800896a:	68bb      	ldr	r3, [r7, #8]
 800896c:	689b      	ldr	r3, [r3, #8]
 800896e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008972:	6939      	ldr	r1, [r7, #16]
 8008974:	0148      	lsls	r0, r1, #5
 8008976:	6979      	ldr	r1, [r7, #20]
 8008978:	4401      	add	r1, r0
 800897a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800897e:	4313      	orrs	r3, r2
 8008980:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8008982:	79fb      	ldrb	r3, [r7, #7]
 8008984:	2b01      	cmp	r3, #1
 8008986:	d10d      	bne.n	80089a4 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8008988:	68bb      	ldr	r3, [r7, #8]
 800898a:	68db      	ldr	r3, [r3, #12]
 800898c:	2b00      	cmp	r3, #0
 800898e:	d009      	beq.n	80089a4 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8008990:	68bb      	ldr	r3, [r7, #8]
 8008992:	68d9      	ldr	r1, [r3, #12]
 8008994:	693b      	ldr	r3, [r7, #16]
 8008996:	015a      	lsls	r2, r3, #5
 8008998:	697b      	ldr	r3, [r7, #20]
 800899a:	4413      	add	r3, r2
 800899c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80089a0:	460a      	mov	r2, r1
 80089a2:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80089a4:	693b      	ldr	r3, [r7, #16]
 80089a6:	015a      	lsls	r2, r3, #5
 80089a8:	697b      	ldr	r3, [r7, #20]
 80089aa:	4413      	add	r3, r2
 80089ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	693a      	ldr	r2, [r7, #16]
 80089b4:	0151      	lsls	r1, r2, #5
 80089b6:	697a      	ldr	r2, [r7, #20]
 80089b8:	440a      	add	r2, r1
 80089ba:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80089be:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80089c2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80089c4:	2300      	movs	r3, #0
}
 80089c6:	4618      	mov	r0, r3
 80089c8:	371c      	adds	r7, #28
 80089ca:	46bd      	mov	sp, r7
 80089cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089d0:	4770      	bx	lr

080089d2 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80089d2:	b480      	push	{r7}
 80089d4:	b089      	sub	sp, #36	; 0x24
 80089d6:	af00      	add	r7, sp, #0
 80089d8:	60f8      	str	r0, [r7, #12]
 80089da:	60b9      	str	r1, [r7, #8]
 80089dc:	4611      	mov	r1, r2
 80089de:	461a      	mov	r2, r3
 80089e0:	460b      	mov	r3, r1
 80089e2:	71fb      	strb	r3, [r7, #7]
 80089e4:	4613      	mov	r3, r2
 80089e6:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80089e8:	68fb      	ldr	r3, [r7, #12]
 80089ea:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 80089ec:	68bb      	ldr	r3, [r7, #8]
 80089ee:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 80089f0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80089f4:	2b00      	cmp	r3, #0
 80089f6:	d11a      	bne.n	8008a2e <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80089f8:	88bb      	ldrh	r3, [r7, #4]
 80089fa:	3303      	adds	r3, #3
 80089fc:	089b      	lsrs	r3, r3, #2
 80089fe:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8008a00:	2300      	movs	r3, #0
 8008a02:	61bb      	str	r3, [r7, #24]
 8008a04:	e00f      	b.n	8008a26 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8008a06:	79fb      	ldrb	r3, [r7, #7]
 8008a08:	031a      	lsls	r2, r3, #12
 8008a0a:	697b      	ldr	r3, [r7, #20]
 8008a0c:	4413      	add	r3, r2
 8008a0e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008a12:	461a      	mov	r2, r3
 8008a14:	69fb      	ldr	r3, [r7, #28]
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	6013      	str	r3, [r2, #0]
      pSrc++;
 8008a1a:	69fb      	ldr	r3, [r7, #28]
 8008a1c:	3304      	adds	r3, #4
 8008a1e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8008a20:	69bb      	ldr	r3, [r7, #24]
 8008a22:	3301      	adds	r3, #1
 8008a24:	61bb      	str	r3, [r7, #24]
 8008a26:	69ba      	ldr	r2, [r7, #24]
 8008a28:	693b      	ldr	r3, [r7, #16]
 8008a2a:	429a      	cmp	r2, r3
 8008a2c:	d3eb      	bcc.n	8008a06 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8008a2e:	2300      	movs	r3, #0
}
 8008a30:	4618      	mov	r0, r3
 8008a32:	3724      	adds	r7, #36	; 0x24
 8008a34:	46bd      	mov	sp, r7
 8008a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a3a:	4770      	bx	lr

08008a3c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8008a3c:	b480      	push	{r7}
 8008a3e:	b089      	sub	sp, #36	; 0x24
 8008a40:	af00      	add	r7, sp, #0
 8008a42:	60f8      	str	r0, [r7, #12]
 8008a44:	60b9      	str	r1, [r7, #8]
 8008a46:	4613      	mov	r3, r2
 8008a48:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008a4a:	68fb      	ldr	r3, [r7, #12]
 8008a4c:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8008a4e:	68bb      	ldr	r3, [r7, #8]
 8008a50:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8008a52:	88fb      	ldrh	r3, [r7, #6]
 8008a54:	3303      	adds	r3, #3
 8008a56:	089b      	lsrs	r3, r3, #2
 8008a58:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8008a5a:	2300      	movs	r3, #0
 8008a5c:	61bb      	str	r3, [r7, #24]
 8008a5e:	e00b      	b.n	8008a78 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8008a60:	697b      	ldr	r3, [r7, #20]
 8008a62:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008a66:	681a      	ldr	r2, [r3, #0]
 8008a68:	69fb      	ldr	r3, [r7, #28]
 8008a6a:	601a      	str	r2, [r3, #0]
    pDest++;
 8008a6c:	69fb      	ldr	r3, [r7, #28]
 8008a6e:	3304      	adds	r3, #4
 8008a70:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8008a72:	69bb      	ldr	r3, [r7, #24]
 8008a74:	3301      	adds	r3, #1
 8008a76:	61bb      	str	r3, [r7, #24]
 8008a78:	69ba      	ldr	r2, [r7, #24]
 8008a7a:	693b      	ldr	r3, [r7, #16]
 8008a7c:	429a      	cmp	r2, r3
 8008a7e:	d3ef      	bcc.n	8008a60 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8008a80:	69fb      	ldr	r3, [r7, #28]
}
 8008a82:	4618      	mov	r0, r3
 8008a84:	3724      	adds	r7, #36	; 0x24
 8008a86:	46bd      	mov	sp, r7
 8008a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a8c:	4770      	bx	lr

08008a8e <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008a8e:	b480      	push	{r7}
 8008a90:	b085      	sub	sp, #20
 8008a92:	af00      	add	r7, sp, #0
 8008a94:	6078      	str	r0, [r7, #4]
 8008a96:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008a9c:	683b      	ldr	r3, [r7, #0]
 8008a9e:	781b      	ldrb	r3, [r3, #0]
 8008aa0:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008aa2:	683b      	ldr	r3, [r7, #0]
 8008aa4:	785b      	ldrb	r3, [r3, #1]
 8008aa6:	2b01      	cmp	r3, #1
 8008aa8:	d12c      	bne.n	8008b04 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8008aaa:	68bb      	ldr	r3, [r7, #8]
 8008aac:	015a      	lsls	r2, r3, #5
 8008aae:	68fb      	ldr	r3, [r7, #12]
 8008ab0:	4413      	add	r3, r2
 8008ab2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	2b00      	cmp	r3, #0
 8008aba:	db12      	blt.n	8008ae2 <USB_EPSetStall+0x54>
 8008abc:	68bb      	ldr	r3, [r7, #8]
 8008abe:	2b00      	cmp	r3, #0
 8008ac0:	d00f      	beq.n	8008ae2 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8008ac2:	68bb      	ldr	r3, [r7, #8]
 8008ac4:	015a      	lsls	r2, r3, #5
 8008ac6:	68fb      	ldr	r3, [r7, #12]
 8008ac8:	4413      	add	r3, r2
 8008aca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	68ba      	ldr	r2, [r7, #8]
 8008ad2:	0151      	lsls	r1, r2, #5
 8008ad4:	68fa      	ldr	r2, [r7, #12]
 8008ad6:	440a      	add	r2, r1
 8008ad8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008adc:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8008ae0:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8008ae2:	68bb      	ldr	r3, [r7, #8]
 8008ae4:	015a      	lsls	r2, r3, #5
 8008ae6:	68fb      	ldr	r3, [r7, #12]
 8008ae8:	4413      	add	r3, r2
 8008aea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	68ba      	ldr	r2, [r7, #8]
 8008af2:	0151      	lsls	r1, r2, #5
 8008af4:	68fa      	ldr	r2, [r7, #12]
 8008af6:	440a      	add	r2, r1
 8008af8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008afc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008b00:	6013      	str	r3, [r2, #0]
 8008b02:	e02b      	b.n	8008b5c <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8008b04:	68bb      	ldr	r3, [r7, #8]
 8008b06:	015a      	lsls	r2, r3, #5
 8008b08:	68fb      	ldr	r3, [r7, #12]
 8008b0a:	4413      	add	r3, r2
 8008b0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	2b00      	cmp	r3, #0
 8008b14:	db12      	blt.n	8008b3c <USB_EPSetStall+0xae>
 8008b16:	68bb      	ldr	r3, [r7, #8]
 8008b18:	2b00      	cmp	r3, #0
 8008b1a:	d00f      	beq.n	8008b3c <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8008b1c:	68bb      	ldr	r3, [r7, #8]
 8008b1e:	015a      	lsls	r2, r3, #5
 8008b20:	68fb      	ldr	r3, [r7, #12]
 8008b22:	4413      	add	r3, r2
 8008b24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008b28:	681b      	ldr	r3, [r3, #0]
 8008b2a:	68ba      	ldr	r2, [r7, #8]
 8008b2c:	0151      	lsls	r1, r2, #5
 8008b2e:	68fa      	ldr	r2, [r7, #12]
 8008b30:	440a      	add	r2, r1
 8008b32:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008b36:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8008b3a:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8008b3c:	68bb      	ldr	r3, [r7, #8]
 8008b3e:	015a      	lsls	r2, r3, #5
 8008b40:	68fb      	ldr	r3, [r7, #12]
 8008b42:	4413      	add	r3, r2
 8008b44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	68ba      	ldr	r2, [r7, #8]
 8008b4c:	0151      	lsls	r1, r2, #5
 8008b4e:	68fa      	ldr	r2, [r7, #12]
 8008b50:	440a      	add	r2, r1
 8008b52:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008b56:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008b5a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008b5c:	2300      	movs	r3, #0
}
 8008b5e:	4618      	mov	r0, r3
 8008b60:	3714      	adds	r7, #20
 8008b62:	46bd      	mov	sp, r7
 8008b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b68:	4770      	bx	lr

08008b6a <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008b6a:	b480      	push	{r7}
 8008b6c:	b085      	sub	sp, #20
 8008b6e:	af00      	add	r7, sp, #0
 8008b70:	6078      	str	r0, [r7, #4]
 8008b72:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008b78:	683b      	ldr	r3, [r7, #0]
 8008b7a:	781b      	ldrb	r3, [r3, #0]
 8008b7c:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008b7e:	683b      	ldr	r3, [r7, #0]
 8008b80:	785b      	ldrb	r3, [r3, #1]
 8008b82:	2b01      	cmp	r3, #1
 8008b84:	d128      	bne.n	8008bd8 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8008b86:	68bb      	ldr	r3, [r7, #8]
 8008b88:	015a      	lsls	r2, r3, #5
 8008b8a:	68fb      	ldr	r3, [r7, #12]
 8008b8c:	4413      	add	r3, r2
 8008b8e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	68ba      	ldr	r2, [r7, #8]
 8008b96:	0151      	lsls	r1, r2, #5
 8008b98:	68fa      	ldr	r2, [r7, #12]
 8008b9a:	440a      	add	r2, r1
 8008b9c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008ba0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008ba4:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8008ba6:	683b      	ldr	r3, [r7, #0]
 8008ba8:	78db      	ldrb	r3, [r3, #3]
 8008baa:	2b03      	cmp	r3, #3
 8008bac:	d003      	beq.n	8008bb6 <USB_EPClearStall+0x4c>
 8008bae:	683b      	ldr	r3, [r7, #0]
 8008bb0:	78db      	ldrb	r3, [r3, #3]
 8008bb2:	2b02      	cmp	r3, #2
 8008bb4:	d138      	bne.n	8008c28 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8008bb6:	68bb      	ldr	r3, [r7, #8]
 8008bb8:	015a      	lsls	r2, r3, #5
 8008bba:	68fb      	ldr	r3, [r7, #12]
 8008bbc:	4413      	add	r3, r2
 8008bbe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008bc2:	681b      	ldr	r3, [r3, #0]
 8008bc4:	68ba      	ldr	r2, [r7, #8]
 8008bc6:	0151      	lsls	r1, r2, #5
 8008bc8:	68fa      	ldr	r2, [r7, #12]
 8008bca:	440a      	add	r2, r1
 8008bcc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008bd0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008bd4:	6013      	str	r3, [r2, #0]
 8008bd6:	e027      	b.n	8008c28 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8008bd8:	68bb      	ldr	r3, [r7, #8]
 8008bda:	015a      	lsls	r2, r3, #5
 8008bdc:	68fb      	ldr	r3, [r7, #12]
 8008bde:	4413      	add	r3, r2
 8008be0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	68ba      	ldr	r2, [r7, #8]
 8008be8:	0151      	lsls	r1, r2, #5
 8008bea:	68fa      	ldr	r2, [r7, #12]
 8008bec:	440a      	add	r2, r1
 8008bee:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008bf2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008bf6:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8008bf8:	683b      	ldr	r3, [r7, #0]
 8008bfa:	78db      	ldrb	r3, [r3, #3]
 8008bfc:	2b03      	cmp	r3, #3
 8008bfe:	d003      	beq.n	8008c08 <USB_EPClearStall+0x9e>
 8008c00:	683b      	ldr	r3, [r7, #0]
 8008c02:	78db      	ldrb	r3, [r3, #3]
 8008c04:	2b02      	cmp	r3, #2
 8008c06:	d10f      	bne.n	8008c28 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8008c08:	68bb      	ldr	r3, [r7, #8]
 8008c0a:	015a      	lsls	r2, r3, #5
 8008c0c:	68fb      	ldr	r3, [r7, #12]
 8008c0e:	4413      	add	r3, r2
 8008c10:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	68ba      	ldr	r2, [r7, #8]
 8008c18:	0151      	lsls	r1, r2, #5
 8008c1a:	68fa      	ldr	r2, [r7, #12]
 8008c1c:	440a      	add	r2, r1
 8008c1e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008c22:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008c26:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8008c28:	2300      	movs	r3, #0
}
 8008c2a:	4618      	mov	r0, r3
 8008c2c:	3714      	adds	r7, #20
 8008c2e:	46bd      	mov	sp, r7
 8008c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c34:	4770      	bx	lr

08008c36 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8008c36:	b480      	push	{r7}
 8008c38:	b085      	sub	sp, #20
 8008c3a:	af00      	add	r7, sp, #0
 8008c3c:	6078      	str	r0, [r7, #4]
 8008c3e:	460b      	mov	r3, r1
 8008c40:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8008c46:	68fb      	ldr	r3, [r7, #12]
 8008c48:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008c4c:	681b      	ldr	r3, [r3, #0]
 8008c4e:	68fa      	ldr	r2, [r7, #12]
 8008c50:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008c54:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8008c58:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8008c5a:	68fb      	ldr	r3, [r7, #12]
 8008c5c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008c60:	681a      	ldr	r2, [r3, #0]
 8008c62:	78fb      	ldrb	r3, [r7, #3]
 8008c64:	011b      	lsls	r3, r3, #4
 8008c66:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8008c6a:	68f9      	ldr	r1, [r7, #12]
 8008c6c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008c70:	4313      	orrs	r3, r2
 8008c72:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8008c74:	2300      	movs	r3, #0
}
 8008c76:	4618      	mov	r0, r3
 8008c78:	3714      	adds	r7, #20
 8008c7a:	46bd      	mov	sp, r7
 8008c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c80:	4770      	bx	lr

08008c82 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8008c82:	b480      	push	{r7}
 8008c84:	b085      	sub	sp, #20
 8008c86:	af00      	add	r7, sp, #0
 8008c88:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8008c8e:	68fb      	ldr	r3, [r7, #12]
 8008c90:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	68fa      	ldr	r2, [r7, #12]
 8008c98:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008c9c:	f023 0303 	bic.w	r3, r3, #3
 8008ca0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8008ca2:	68fb      	ldr	r3, [r7, #12]
 8008ca4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008ca8:	685b      	ldr	r3, [r3, #4]
 8008caa:	68fa      	ldr	r2, [r7, #12]
 8008cac:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008cb0:	f023 0302 	bic.w	r3, r3, #2
 8008cb4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008cb6:	2300      	movs	r3, #0
}
 8008cb8:	4618      	mov	r0, r3
 8008cba:	3714      	adds	r7, #20
 8008cbc:	46bd      	mov	sp, r7
 8008cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cc2:	4770      	bx	lr

08008cc4 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8008cc4:	b480      	push	{r7}
 8008cc6:	b085      	sub	sp, #20
 8008cc8:	af00      	add	r7, sp, #0
 8008cca:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8008cd0:	68fb      	ldr	r3, [r7, #12]
 8008cd2:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	68fa      	ldr	r2, [r7, #12]
 8008cda:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008cde:	f023 0303 	bic.w	r3, r3, #3
 8008ce2:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008ce4:	68fb      	ldr	r3, [r7, #12]
 8008ce6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008cea:	685b      	ldr	r3, [r3, #4]
 8008cec:	68fa      	ldr	r2, [r7, #12]
 8008cee:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008cf2:	f043 0302 	orr.w	r3, r3, #2
 8008cf6:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008cf8:	2300      	movs	r3, #0
}
 8008cfa:	4618      	mov	r0, r3
 8008cfc:	3714      	adds	r7, #20
 8008cfe:	46bd      	mov	sp, r7
 8008d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d04:	4770      	bx	lr

08008d06 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8008d06:	b480      	push	{r7}
 8008d08:	b085      	sub	sp, #20
 8008d0a:	af00      	add	r7, sp, #0
 8008d0c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	695b      	ldr	r3, [r3, #20]
 8008d12:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	699b      	ldr	r3, [r3, #24]
 8008d18:	68fa      	ldr	r2, [r7, #12]
 8008d1a:	4013      	ands	r3, r2
 8008d1c:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8008d1e:	68fb      	ldr	r3, [r7, #12]
}
 8008d20:	4618      	mov	r0, r3
 8008d22:	3714      	adds	r7, #20
 8008d24:	46bd      	mov	sp, r7
 8008d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d2a:	4770      	bx	lr

08008d2c <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8008d2c:	b480      	push	{r7}
 8008d2e:	b085      	sub	sp, #20
 8008d30:	af00      	add	r7, sp, #0
 8008d32:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8008d38:	68fb      	ldr	r3, [r7, #12]
 8008d3a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008d3e:	699b      	ldr	r3, [r3, #24]
 8008d40:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8008d42:	68fb      	ldr	r3, [r7, #12]
 8008d44:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008d48:	69db      	ldr	r3, [r3, #28]
 8008d4a:	68ba      	ldr	r2, [r7, #8]
 8008d4c:	4013      	ands	r3, r2
 8008d4e:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8008d50:	68bb      	ldr	r3, [r7, #8]
 8008d52:	0c1b      	lsrs	r3, r3, #16
}
 8008d54:	4618      	mov	r0, r3
 8008d56:	3714      	adds	r7, #20
 8008d58:	46bd      	mov	sp, r7
 8008d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d5e:	4770      	bx	lr

08008d60 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8008d60:	b480      	push	{r7}
 8008d62:	b085      	sub	sp, #20
 8008d64:	af00      	add	r7, sp, #0
 8008d66:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8008d6c:	68fb      	ldr	r3, [r7, #12]
 8008d6e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008d72:	699b      	ldr	r3, [r3, #24]
 8008d74:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8008d76:	68fb      	ldr	r3, [r7, #12]
 8008d78:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008d7c:	69db      	ldr	r3, [r3, #28]
 8008d7e:	68ba      	ldr	r2, [r7, #8]
 8008d80:	4013      	ands	r3, r2
 8008d82:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8008d84:	68bb      	ldr	r3, [r7, #8]
 8008d86:	b29b      	uxth	r3, r3
}
 8008d88:	4618      	mov	r0, r3
 8008d8a:	3714      	adds	r7, #20
 8008d8c:	46bd      	mov	sp, r7
 8008d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d92:	4770      	bx	lr

08008d94 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8008d94:	b480      	push	{r7}
 8008d96:	b085      	sub	sp, #20
 8008d98:	af00      	add	r7, sp, #0
 8008d9a:	6078      	str	r0, [r7, #4]
 8008d9c:	460b      	mov	r3, r1
 8008d9e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8008da4:	78fb      	ldrb	r3, [r7, #3]
 8008da6:	015a      	lsls	r2, r3, #5
 8008da8:	68fb      	ldr	r3, [r7, #12]
 8008daa:	4413      	add	r3, r2
 8008dac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008db0:	689b      	ldr	r3, [r3, #8]
 8008db2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8008db4:	68fb      	ldr	r3, [r7, #12]
 8008db6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008dba:	695b      	ldr	r3, [r3, #20]
 8008dbc:	68ba      	ldr	r2, [r7, #8]
 8008dbe:	4013      	ands	r3, r2
 8008dc0:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8008dc2:	68bb      	ldr	r3, [r7, #8]
}
 8008dc4:	4618      	mov	r0, r3
 8008dc6:	3714      	adds	r7, #20
 8008dc8:	46bd      	mov	sp, r7
 8008dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dce:	4770      	bx	lr

08008dd0 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8008dd0:	b480      	push	{r7}
 8008dd2:	b087      	sub	sp, #28
 8008dd4:	af00      	add	r7, sp, #0
 8008dd6:	6078      	str	r0, [r7, #4]
 8008dd8:	460b      	mov	r3, r1
 8008dda:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 8008de0:	697b      	ldr	r3, [r7, #20]
 8008de2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008de6:	691b      	ldr	r3, [r3, #16]
 8008de8:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8008dea:	697b      	ldr	r3, [r7, #20]
 8008dec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008df0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008df2:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8008df4:	78fb      	ldrb	r3, [r7, #3]
 8008df6:	f003 030f 	and.w	r3, r3, #15
 8008dfa:	68fa      	ldr	r2, [r7, #12]
 8008dfc:	fa22 f303 	lsr.w	r3, r2, r3
 8008e00:	01db      	lsls	r3, r3, #7
 8008e02:	b2db      	uxtb	r3, r3
 8008e04:	693a      	ldr	r2, [r7, #16]
 8008e06:	4313      	orrs	r3, r2
 8008e08:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8008e0a:	78fb      	ldrb	r3, [r7, #3]
 8008e0c:	015a      	lsls	r2, r3, #5
 8008e0e:	697b      	ldr	r3, [r7, #20]
 8008e10:	4413      	add	r3, r2
 8008e12:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008e16:	689b      	ldr	r3, [r3, #8]
 8008e18:	693a      	ldr	r2, [r7, #16]
 8008e1a:	4013      	ands	r3, r2
 8008e1c:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8008e1e:	68bb      	ldr	r3, [r7, #8]
}
 8008e20:	4618      	mov	r0, r3
 8008e22:	371c      	adds	r7, #28
 8008e24:	46bd      	mov	sp, r7
 8008e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e2a:	4770      	bx	lr

08008e2c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8008e2c:	b480      	push	{r7}
 8008e2e:	b083      	sub	sp, #12
 8008e30:	af00      	add	r7, sp, #0
 8008e32:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	695b      	ldr	r3, [r3, #20]
 8008e38:	f003 0301 	and.w	r3, r3, #1
}
 8008e3c:	4618      	mov	r0, r3
 8008e3e:	370c      	adds	r7, #12
 8008e40:	46bd      	mov	sp, r7
 8008e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e46:	4770      	bx	lr

08008e48 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8008e48:	b480      	push	{r7}
 8008e4a:	b085      	sub	sp, #20
 8008e4c:	af00      	add	r7, sp, #0
 8008e4e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8008e54:	68fb      	ldr	r3, [r7, #12]
 8008e56:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008e5a:	681b      	ldr	r3, [r3, #0]
 8008e5c:	68fa      	ldr	r2, [r7, #12]
 8008e5e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008e62:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8008e66:	f023 0307 	bic.w	r3, r3, #7
 8008e6a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8008e6c:	68fb      	ldr	r3, [r7, #12]
 8008e6e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008e72:	685b      	ldr	r3, [r3, #4]
 8008e74:	68fa      	ldr	r2, [r7, #12]
 8008e76:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008e7a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008e7e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008e80:	2300      	movs	r3, #0
}
 8008e82:	4618      	mov	r0, r3
 8008e84:	3714      	adds	r7, #20
 8008e86:	46bd      	mov	sp, r7
 8008e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e8c:	4770      	bx	lr
	...

08008e90 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8008e90:	b480      	push	{r7}
 8008e92:	b087      	sub	sp, #28
 8008e94:	af00      	add	r7, sp, #0
 8008e96:	60f8      	str	r0, [r7, #12]
 8008e98:	460b      	mov	r3, r1
 8008e9a:	607a      	str	r2, [r7, #4]
 8008e9c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008e9e:	68fb      	ldr	r3, [r7, #12]
 8008ea0:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8008ea2:	68fb      	ldr	r3, [r7, #12]
 8008ea4:	333c      	adds	r3, #60	; 0x3c
 8008ea6:	3304      	adds	r3, #4
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8008eac:	693b      	ldr	r3, [r7, #16]
 8008eae:	4a26      	ldr	r2, [pc, #152]	; (8008f48 <USB_EP0_OutStart+0xb8>)
 8008eb0:	4293      	cmp	r3, r2
 8008eb2:	d90a      	bls.n	8008eca <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008eb4:	697b      	ldr	r3, [r7, #20]
 8008eb6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008ec0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008ec4:	d101      	bne.n	8008eca <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8008ec6:	2300      	movs	r3, #0
 8008ec8:	e037      	b.n	8008f3a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8008eca:	697b      	ldr	r3, [r7, #20]
 8008ecc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008ed0:	461a      	mov	r2, r3
 8008ed2:	2300      	movs	r3, #0
 8008ed4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008ed6:	697b      	ldr	r3, [r7, #20]
 8008ed8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008edc:	691b      	ldr	r3, [r3, #16]
 8008ede:	697a      	ldr	r2, [r7, #20]
 8008ee0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008ee4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008ee8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8008eea:	697b      	ldr	r3, [r7, #20]
 8008eec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008ef0:	691b      	ldr	r3, [r3, #16]
 8008ef2:	697a      	ldr	r2, [r7, #20]
 8008ef4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008ef8:	f043 0318 	orr.w	r3, r3, #24
 8008efc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8008efe:	697b      	ldr	r3, [r7, #20]
 8008f00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008f04:	691b      	ldr	r3, [r3, #16]
 8008f06:	697a      	ldr	r2, [r7, #20]
 8008f08:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008f0c:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8008f10:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8008f12:	7afb      	ldrb	r3, [r7, #11]
 8008f14:	2b01      	cmp	r3, #1
 8008f16:	d10f      	bne.n	8008f38 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8008f18:	697b      	ldr	r3, [r7, #20]
 8008f1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008f1e:	461a      	mov	r2, r3
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8008f24:	697b      	ldr	r3, [r7, #20]
 8008f26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008f2a:	681b      	ldr	r3, [r3, #0]
 8008f2c:	697a      	ldr	r2, [r7, #20]
 8008f2e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008f32:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8008f36:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008f38:	2300      	movs	r3, #0
}
 8008f3a:	4618      	mov	r0, r3
 8008f3c:	371c      	adds	r7, #28
 8008f3e:	46bd      	mov	sp, r7
 8008f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f44:	4770      	bx	lr
 8008f46:	bf00      	nop
 8008f48:	4f54300a 	.word	0x4f54300a

08008f4c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8008f4c:	b480      	push	{r7}
 8008f4e:	b085      	sub	sp, #20
 8008f50:	af00      	add	r7, sp, #0
 8008f52:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8008f54:	2300      	movs	r3, #0
 8008f56:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8008f58:	68fb      	ldr	r3, [r7, #12]
 8008f5a:	3301      	adds	r3, #1
 8008f5c:	60fb      	str	r3, [r7, #12]
 8008f5e:	68fb      	ldr	r3, [r7, #12]
 8008f60:	4a13      	ldr	r2, [pc, #76]	; (8008fb0 <USB_CoreReset+0x64>)
 8008f62:	4293      	cmp	r3, r2
 8008f64:	d901      	bls.n	8008f6a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8008f66:	2303      	movs	r3, #3
 8008f68:	e01b      	b.n	8008fa2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	691b      	ldr	r3, [r3, #16]
 8008f6e:	2b00      	cmp	r3, #0
 8008f70:	daf2      	bge.n	8008f58 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8008f72:	2300      	movs	r3, #0
 8008f74:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	691b      	ldr	r3, [r3, #16]
 8008f7a:	f043 0201 	orr.w	r2, r3, #1
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8008f82:	68fb      	ldr	r3, [r7, #12]
 8008f84:	3301      	adds	r3, #1
 8008f86:	60fb      	str	r3, [r7, #12]
 8008f88:	68fb      	ldr	r3, [r7, #12]
 8008f8a:	4a09      	ldr	r2, [pc, #36]	; (8008fb0 <USB_CoreReset+0x64>)
 8008f8c:	4293      	cmp	r3, r2
 8008f8e:	d901      	bls.n	8008f94 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8008f90:	2303      	movs	r3, #3
 8008f92:	e006      	b.n	8008fa2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	691b      	ldr	r3, [r3, #16]
 8008f98:	f003 0301 	and.w	r3, r3, #1
 8008f9c:	2b01      	cmp	r3, #1
 8008f9e:	d0f0      	beq.n	8008f82 <USB_CoreReset+0x36>

  return HAL_OK;
 8008fa0:	2300      	movs	r3, #0
}
 8008fa2:	4618      	mov	r0, r3
 8008fa4:	3714      	adds	r7, #20
 8008fa6:	46bd      	mov	sp, r7
 8008fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fac:	4770      	bx	lr
 8008fae:	bf00      	nop
 8008fb0:	00030d40 	.word	0x00030d40

08008fb4 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008fb4:	b580      	push	{r7, lr}
 8008fb6:	b084      	sub	sp, #16
 8008fb8:	af00      	add	r7, sp, #0
 8008fba:	6078      	str	r0, [r7, #4]
 8008fbc:	460b      	mov	r3, r1
 8008fbe:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8008fc0:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8008fc4:	f004 f80e 	bl	800cfe4 <malloc>
 8008fc8:	4603      	mov	r3, r0
 8008fca:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8008fcc:	68fb      	ldr	r3, [r7, #12]
 8008fce:	2b00      	cmp	r3, #0
 8008fd0:	d105      	bne.n	8008fde <USBD_CDC_Init+0x2a>
  {
    pdev->pClassData = NULL;
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	2200      	movs	r2, #0
 8008fd6:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8008fda:	2302      	movs	r3, #2
 8008fdc:	e066      	b.n	80090ac <USBD_CDC_Init+0xf8>
  }

  pdev->pClassData = (void *)hcdc;
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	68fa      	ldr	r2, [r7, #12]
 8008fe2:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	7c1b      	ldrb	r3, [r3, #16]
 8008fea:	2b00      	cmp	r3, #0
 8008fec:	d119      	bne.n	8009022 <USBD_CDC_Init+0x6e>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8008fee:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008ff2:	2202      	movs	r2, #2
 8008ff4:	2181      	movs	r1, #129	; 0x81
 8008ff6:	6878      	ldr	r0, [r7, #4]
 8008ff8:	f001 ff71 	bl	800aede <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	2201      	movs	r2, #1
 8009000:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8009002:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009006:	2202      	movs	r2, #2
 8009008:	2101      	movs	r1, #1
 800900a:	6878      	ldr	r0, [r7, #4]
 800900c:	f001 ff67 	bl	800aede <USBD_LL_OpenEP>
                          CDC_DATA_HS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	2201      	movs	r2, #1
 8009014:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CDC CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	2210      	movs	r2, #16
 800901c:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8009020:	e016      	b.n	8009050 <USBD_CDC_Init+0x9c>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8009022:	2340      	movs	r3, #64	; 0x40
 8009024:	2202      	movs	r2, #2
 8009026:	2181      	movs	r1, #129	; 0x81
 8009028:	6878      	ldr	r0, [r7, #4]
 800902a:	f001 ff58 	bl	800aede <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	2201      	movs	r2, #1
 8009032:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8009034:	2340      	movs	r3, #64	; 0x40
 8009036:	2202      	movs	r2, #2
 8009038:	2101      	movs	r1, #1
 800903a:	6878      	ldr	r0, [r7, #4]
 800903c:	f001 ff4f 	bl	800aede <USBD_LL_OpenEP>
                          CDC_DATA_FS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	2201      	movs	r2, #1
 8009044:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	2210      	movs	r2, #16
 800904c:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8009050:	2308      	movs	r3, #8
 8009052:	2203      	movs	r2, #3
 8009054:	2182      	movs	r1, #130	; 0x82
 8009056:	6878      	ldr	r0, [r7, #4]
 8009058:	f001 ff41 	bl	800aede <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	2201      	movs	r2, #1
 8009060:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800906a:	681b      	ldr	r3, [r3, #0]
 800906c:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800906e:	68fb      	ldr	r3, [r7, #12]
 8009070:	2200      	movs	r2, #0
 8009072:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8009076:	68fb      	ldr	r3, [r7, #12]
 8009078:	2200      	movs	r2, #0
 800907a:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	7c1b      	ldrb	r3, [r3, #16]
 8009082:	2b00      	cmp	r3, #0
 8009084:	d109      	bne.n	800909a <USBD_CDC_Init+0xe6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8009086:	68fb      	ldr	r3, [r7, #12]
 8009088:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800908c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009090:	2101      	movs	r1, #1
 8009092:	6878      	ldr	r0, [r7, #4]
 8009094:	f002 f812 	bl	800b0bc <USBD_LL_PrepareReceive>
 8009098:	e007      	b.n	80090aa <USBD_CDC_Init+0xf6>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800909a:	68fb      	ldr	r3, [r7, #12]
 800909c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80090a0:	2340      	movs	r3, #64	; 0x40
 80090a2:	2101      	movs	r1, #1
 80090a4:	6878      	ldr	r0, [r7, #4]
 80090a6:	f002 f809 	bl	800b0bc <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80090aa:	2300      	movs	r3, #0
}
 80090ac:	4618      	mov	r0, r3
 80090ae:	3710      	adds	r7, #16
 80090b0:	46bd      	mov	sp, r7
 80090b2:	bd80      	pop	{r7, pc}

080090b4 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80090b4:	b580      	push	{r7, lr}
 80090b6:	b084      	sub	sp, #16
 80090b8:	af00      	add	r7, sp, #0
 80090ba:	6078      	str	r0, [r7, #4]
 80090bc:	460b      	mov	r3, r1
 80090be:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  uint8_t ret = 0U;
 80090c0:	2300      	movs	r3, #0
 80090c2:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 80090c4:	2181      	movs	r1, #129	; 0x81
 80090c6:	6878      	ldr	r0, [r7, #4]
 80090c8:	f001 ff2f 	bl	800af2a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	2200      	movs	r2, #0
 80090d0:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 80090d2:	2101      	movs	r1, #1
 80090d4:	6878      	ldr	r0, [r7, #4]
 80090d6:	f001 ff28 	bl	800af2a <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	2200      	movs	r2, #0
 80090de:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 80090e2:	2182      	movs	r1, #130	; 0x82
 80090e4:	6878      	ldr	r0, [r7, #4]
 80090e6:	f001 ff20 	bl	800af2a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	2200      	movs	r2, #0
 80090ee:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	2200      	movs	r2, #0
 80090f6:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009100:	2b00      	cmp	r3, #0
 8009102:	d00e      	beq.n	8009122 <USBD_CDC_DeInit+0x6e>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800910a:	685b      	ldr	r3, [r3, #4]
 800910c:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009114:	4618      	mov	r0, r3
 8009116:	f003 ff6d 	bl	800cff4 <free>
    pdev->pClassData = NULL;
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	2200      	movs	r2, #0
 800911e:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return ret;
 8009122:	7bfb      	ldrb	r3, [r7, #15]
}
 8009124:	4618      	mov	r0, r3
 8009126:	3710      	adds	r7, #16
 8009128:	46bd      	mov	sp, r7
 800912a:	bd80      	pop	{r7, pc}

0800912c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800912c:	b580      	push	{r7, lr}
 800912e:	b086      	sub	sp, #24
 8009130:	af00      	add	r7, sp, #0
 8009132:	6078      	str	r0, [r7, #4]
 8009134:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800913c:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 800913e:	2300      	movs	r3, #0
 8009140:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8009142:	2300      	movs	r3, #0
 8009144:	81bb      	strh	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 8009146:	2300      	movs	r3, #0
 8009148:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800914a:	683b      	ldr	r3, [r7, #0]
 800914c:	781b      	ldrb	r3, [r3, #0]
 800914e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009152:	2b00      	cmp	r3, #0
 8009154:	d03a      	beq.n	80091cc <USBD_CDC_Setup+0xa0>
 8009156:	2b20      	cmp	r3, #32
 8009158:	f040 8097 	bne.w	800928a <USBD_CDC_Setup+0x15e>
  {
  case USB_REQ_TYPE_CLASS:
    if (req->wLength != 0U)
 800915c:	683b      	ldr	r3, [r7, #0]
 800915e:	88db      	ldrh	r3, [r3, #6]
 8009160:	2b00      	cmp	r3, #0
 8009162:	d029      	beq.n	80091b8 <USBD_CDC_Setup+0x8c>
    {
      if ((req->bmRequest & 0x80U) != 0U)
 8009164:	683b      	ldr	r3, [r7, #0]
 8009166:	781b      	ldrb	r3, [r3, #0]
 8009168:	b25b      	sxtb	r3, r3
 800916a:	2b00      	cmp	r3, #0
 800916c:	da11      	bge.n	8009192 <USBD_CDC_Setup+0x66>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009174:	689b      	ldr	r3, [r3, #8]
 8009176:	683a      	ldr	r2, [r7, #0]
 8009178:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)hcdc->data,
 800917a:	6939      	ldr	r1, [r7, #16]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800917c:	683a      	ldr	r2, [r7, #0]
 800917e:	88d2      	ldrh	r2, [r2, #6]
 8009180:	4798      	blx	r3
                                                          req->wLength);

          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, req->wLength);
 8009182:	6939      	ldr	r1, [r7, #16]
 8009184:	683b      	ldr	r3, [r7, #0]
 8009186:	88db      	ldrh	r3, [r3, #6]
 8009188:	461a      	mov	r2, r3
 800918a:	6878      	ldr	r0, [r7, #4]
 800918c:	f001 fa6d 	bl	800a66a <USBD_CtlSendData>
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t *)req, 0U);
    }
    break;
 8009190:	e082      	b.n	8009298 <USBD_CDC_Setup+0x16c>
        hcdc->CmdOpCode = req->bRequest;
 8009192:	683b      	ldr	r3, [r7, #0]
 8009194:	785a      	ldrb	r2, [r3, #1]
 8009196:	693b      	ldr	r3, [r7, #16]
 8009198:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 800919c:	683b      	ldr	r3, [r7, #0]
 800919e:	88db      	ldrh	r3, [r3, #6]
 80091a0:	b2da      	uxtb	r2, r3
 80091a2:	693b      	ldr	r3, [r7, #16]
 80091a4:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
        (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 80091a8:	6939      	ldr	r1, [r7, #16]
 80091aa:	683b      	ldr	r3, [r7, #0]
 80091ac:	88db      	ldrh	r3, [r3, #6]
 80091ae:	461a      	mov	r2, r3
 80091b0:	6878      	ldr	r0, [r7, #4]
 80091b2:	f001 fa86 	bl	800a6c2 <USBD_CtlPrepareRx>
    break;
 80091b6:	e06f      	b.n	8009298 <USBD_CDC_Setup+0x16c>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80091be:	689b      	ldr	r3, [r3, #8]
 80091c0:	683a      	ldr	r2, [r7, #0]
 80091c2:	7850      	ldrb	r0, [r2, #1]
 80091c4:	2200      	movs	r2, #0
 80091c6:	6839      	ldr	r1, [r7, #0]
 80091c8:	4798      	blx	r3
    break;
 80091ca:	e065      	b.n	8009298 <USBD_CDC_Setup+0x16c>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 80091cc:	683b      	ldr	r3, [r7, #0]
 80091ce:	785b      	ldrb	r3, [r3, #1]
 80091d0:	2b0b      	cmp	r3, #11
 80091d2:	d84f      	bhi.n	8009274 <USBD_CDC_Setup+0x148>
 80091d4:	a201      	add	r2, pc, #4	; (adr r2, 80091dc <USBD_CDC_Setup+0xb0>)
 80091d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80091da:	bf00      	nop
 80091dc:	0800920d 	.word	0x0800920d
 80091e0:	08009283 	.word	0x08009283
 80091e4:	08009275 	.word	0x08009275
 80091e8:	08009275 	.word	0x08009275
 80091ec:	08009275 	.word	0x08009275
 80091f0:	08009275 	.word	0x08009275
 80091f4:	08009275 	.word	0x08009275
 80091f8:	08009275 	.word	0x08009275
 80091fc:	08009275 	.word	0x08009275
 8009200:	08009275 	.word	0x08009275
 8009204:	08009235 	.word	0x08009235
 8009208:	0800925d 	.word	0x0800925d
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009212:	2b03      	cmp	r3, #3
 8009214:	d107      	bne.n	8009226 <USBD_CDC_Setup+0xfa>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8009216:	f107 030c 	add.w	r3, r7, #12
 800921a:	2202      	movs	r2, #2
 800921c:	4619      	mov	r1, r3
 800921e:	6878      	ldr	r0, [r7, #4]
 8009220:	f001 fa23 	bl	800a66a <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8009224:	e030      	b.n	8009288 <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 8009226:	6839      	ldr	r1, [r7, #0]
 8009228:	6878      	ldr	r0, [r7, #4]
 800922a:	f001 f9ad 	bl	800a588 <USBD_CtlError>
        ret = USBD_FAIL;
 800922e:	2303      	movs	r3, #3
 8009230:	75fb      	strb	r3, [r7, #23]
      break;
 8009232:	e029      	b.n	8009288 <USBD_CDC_Setup+0x15c>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800923a:	2b03      	cmp	r3, #3
 800923c:	d107      	bne.n	800924e <USBD_CDC_Setup+0x122>
      {
        (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800923e:	f107 030f 	add.w	r3, r7, #15
 8009242:	2201      	movs	r2, #1
 8009244:	4619      	mov	r1, r3
 8009246:	6878      	ldr	r0, [r7, #4]
 8009248:	f001 fa0f 	bl	800a66a <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 800924c:	e01c      	b.n	8009288 <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 800924e:	6839      	ldr	r1, [r7, #0]
 8009250:	6878      	ldr	r0, [r7, #4]
 8009252:	f001 f999 	bl	800a588 <USBD_CtlError>
        ret = USBD_FAIL;
 8009256:	2303      	movs	r3, #3
 8009258:	75fb      	strb	r3, [r7, #23]
      break;
 800925a:	e015      	b.n	8009288 <USBD_CDC_Setup+0x15c>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009262:	2b03      	cmp	r3, #3
 8009264:	d00f      	beq.n	8009286 <USBD_CDC_Setup+0x15a>
      {
        USBD_CtlError(pdev, req);
 8009266:	6839      	ldr	r1, [r7, #0]
 8009268:	6878      	ldr	r0, [r7, #4]
 800926a:	f001 f98d 	bl	800a588 <USBD_CtlError>
        ret = USBD_FAIL;
 800926e:	2303      	movs	r3, #3
 8009270:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8009272:	e008      	b.n	8009286 <USBD_CDC_Setup+0x15a>

    case USB_REQ_CLEAR_FEATURE:
      break;

    default:
      USBD_CtlError(pdev, req);
 8009274:	6839      	ldr	r1, [r7, #0]
 8009276:	6878      	ldr	r0, [r7, #4]
 8009278:	f001 f986 	bl	800a588 <USBD_CtlError>
      ret = USBD_FAIL;
 800927c:	2303      	movs	r3, #3
 800927e:	75fb      	strb	r3, [r7, #23]
      break;
 8009280:	e002      	b.n	8009288 <USBD_CDC_Setup+0x15c>
      break;
 8009282:	bf00      	nop
 8009284:	e008      	b.n	8009298 <USBD_CDC_Setup+0x16c>
      break;
 8009286:	bf00      	nop
    }
    break;
 8009288:	e006      	b.n	8009298 <USBD_CDC_Setup+0x16c>

  default:
    USBD_CtlError(pdev, req);
 800928a:	6839      	ldr	r1, [r7, #0]
 800928c:	6878      	ldr	r0, [r7, #4]
 800928e:	f001 f97b 	bl	800a588 <USBD_CtlError>
    ret = USBD_FAIL;
 8009292:	2303      	movs	r3, #3
 8009294:	75fb      	strb	r3, [r7, #23]
    break;
 8009296:	bf00      	nop
  }

  return (uint8_t)ret;
 8009298:	7dfb      	ldrb	r3, [r7, #23]
}
 800929a:	4618      	mov	r0, r3
 800929c:	3718      	adds	r7, #24
 800929e:	46bd      	mov	sp, r7
 80092a0:	bd80      	pop	{r7, pc}
 80092a2:	bf00      	nop

080092a4 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80092a4:	b580      	push	{r7, lr}
 80092a6:	b084      	sub	sp, #16
 80092a8:	af00      	add	r7, sp, #0
 80092aa:	6078      	str	r0, [r7, #4]
 80092ac:	460b      	mov	r3, r1
 80092ae:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80092b6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80092be:	2b00      	cmp	r3, #0
 80092c0:	d101      	bne.n	80092c6 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80092c2:	2303      	movs	r3, #3
 80092c4:	e049      	b.n	800935a <USBD_CDC_DataIn+0xb6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80092cc:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 80092ce:	78fa      	ldrb	r2, [r7, #3]
 80092d0:	6879      	ldr	r1, [r7, #4]
 80092d2:	4613      	mov	r3, r2
 80092d4:	009b      	lsls	r3, r3, #2
 80092d6:	4413      	add	r3, r2
 80092d8:	009b      	lsls	r3, r3, #2
 80092da:	440b      	add	r3, r1
 80092dc:	3318      	adds	r3, #24
 80092de:	681b      	ldr	r3, [r3, #0]
 80092e0:	2b00      	cmp	r3, #0
 80092e2:	d029      	beq.n	8009338 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 80092e4:	78fa      	ldrb	r2, [r7, #3]
 80092e6:	6879      	ldr	r1, [r7, #4]
 80092e8:	4613      	mov	r3, r2
 80092ea:	009b      	lsls	r3, r3, #2
 80092ec:	4413      	add	r3, r2
 80092ee:	009b      	lsls	r3, r3, #2
 80092f0:	440b      	add	r3, r1
 80092f2:	3318      	adds	r3, #24
 80092f4:	681a      	ldr	r2, [r3, #0]
 80092f6:	78f9      	ldrb	r1, [r7, #3]
 80092f8:	68f8      	ldr	r0, [r7, #12]
 80092fa:	460b      	mov	r3, r1
 80092fc:	00db      	lsls	r3, r3, #3
 80092fe:	1a5b      	subs	r3, r3, r1
 8009300:	009b      	lsls	r3, r3, #2
 8009302:	4403      	add	r3, r0
 8009304:	3344      	adds	r3, #68	; 0x44
 8009306:	681b      	ldr	r3, [r3, #0]
 8009308:	fbb2 f1f3 	udiv	r1, r2, r3
 800930c:	fb03 f301 	mul.w	r3, r3, r1
 8009310:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8009312:	2b00      	cmp	r3, #0
 8009314:	d110      	bne.n	8009338 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8009316:	78fa      	ldrb	r2, [r7, #3]
 8009318:	6879      	ldr	r1, [r7, #4]
 800931a:	4613      	mov	r3, r2
 800931c:	009b      	lsls	r3, r3, #2
 800931e:	4413      	add	r3, r2
 8009320:	009b      	lsls	r3, r3, #2
 8009322:	440b      	add	r3, r1
 8009324:	3318      	adds	r3, #24
 8009326:	2200      	movs	r2, #0
 8009328:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800932a:	78f9      	ldrb	r1, [r7, #3]
 800932c:	2300      	movs	r3, #0
 800932e:	2200      	movs	r2, #0
 8009330:	6878      	ldr	r0, [r7, #4]
 8009332:	f001 fea2 	bl	800b07a <USBD_LL_Transmit>
 8009336:	e00f      	b.n	8009358 <USBD_CDC_DataIn+0xb4>
  }
  else
  {
    hcdc->TxState = 0U;
 8009338:	68bb      	ldr	r3, [r7, #8]
 800933a:	2200      	movs	r2, #0
 800933c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009346:	691b      	ldr	r3, [r3, #16]
 8009348:	68ba      	ldr	r2, [r7, #8]
 800934a:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800934e:	68ba      	ldr	r2, [r7, #8]
 8009350:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8009354:	78fa      	ldrb	r2, [r7, #3]
 8009356:	4798      	blx	r3
  }

  return (uint8_t)USBD_OK;
 8009358:	2300      	movs	r3, #0
}
 800935a:	4618      	mov	r0, r3
 800935c:	3710      	adds	r7, #16
 800935e:	46bd      	mov	sp, r7
 8009360:	bd80      	pop	{r7, pc}

08009362 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009362:	b580      	push	{r7, lr}
 8009364:	b084      	sub	sp, #16
 8009366:	af00      	add	r7, sp, #0
 8009368:	6078      	str	r0, [r7, #4]
 800936a:	460b      	mov	r3, r1
 800936c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009374:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800937c:	2b00      	cmp	r3, #0
 800937e:	d101      	bne.n	8009384 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8009380:	2303      	movs	r3, #3
 8009382:	e015      	b.n	80093b0 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8009384:	78fb      	ldrb	r3, [r7, #3]
 8009386:	4619      	mov	r1, r3
 8009388:	6878      	ldr	r0, [r7, #4]
 800938a:	f001 feb8 	bl	800b0fe <USBD_LL_GetRxDataSize>
 800938e:	4602      	mov	r2, r0
 8009390:	68fb      	ldr	r3, [r7, #12]
 8009392:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800939c:	68db      	ldr	r3, [r3, #12]
 800939e:	68fa      	ldr	r2, [r7, #12]
 80093a0:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80093a4:	68fa      	ldr	r2, [r7, #12]
 80093a6:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80093aa:	4611      	mov	r1, r2
 80093ac:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80093ae:	2300      	movs	r3, #0
}
 80093b0:	4618      	mov	r0, r3
 80093b2:	3710      	adds	r7, #16
 80093b4:	46bd      	mov	sp, r7
 80093b6:	bd80      	pop	{r7, pc}

080093b8 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80093b8:	b580      	push	{r7, lr}
 80093ba:	b084      	sub	sp, #16
 80093bc:	af00      	add	r7, sp, #0
 80093be:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80093c6:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80093ce:	2b00      	cmp	r3, #0
 80093d0:	d015      	beq.n	80093fe <USBD_CDC_EP0_RxReady+0x46>
 80093d2:	68fb      	ldr	r3, [r7, #12]
 80093d4:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80093d8:	2bff      	cmp	r3, #255	; 0xff
 80093da:	d010      	beq.n	80093fe <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80093e2:	689b      	ldr	r3, [r3, #8]
 80093e4:	68fa      	ldr	r2, [r7, #12]
 80093e6:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 80093ea:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 80093ec:	68fa      	ldr	r2, [r7, #12]
 80093ee:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80093f2:	b292      	uxth	r2, r2
 80093f4:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80093f6:	68fb      	ldr	r3, [r7, #12]
 80093f8:	22ff      	movs	r2, #255	; 0xff
 80093fa:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }

  return (uint8_t)USBD_OK;
 80093fe:	2300      	movs	r3, #0
}
 8009400:	4618      	mov	r0, r3
 8009402:	3710      	adds	r7, #16
 8009404:	46bd      	mov	sp, r7
 8009406:	bd80      	pop	{r7, pc}

08009408 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8009408:	b480      	push	{r7}
 800940a:	b083      	sub	sp, #12
 800940c:	af00      	add	r7, sp, #0
 800940e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	2243      	movs	r2, #67	; 0x43
 8009414:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8009416:	4b03      	ldr	r3, [pc, #12]	; (8009424 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8009418:	4618      	mov	r0, r3
 800941a:	370c      	adds	r7, #12
 800941c:	46bd      	mov	sp, r7
 800941e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009422:	4770      	bx	lr
 8009424:	20000494 	.word	0x20000494

08009428 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8009428:	b480      	push	{r7}
 800942a:	b083      	sub	sp, #12
 800942c:	af00      	add	r7, sp, #0
 800942e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	2243      	movs	r2, #67	; 0x43
 8009434:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 8009436:	4b03      	ldr	r3, [pc, #12]	; (8009444 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8009438:	4618      	mov	r0, r3
 800943a:	370c      	adds	r7, #12
 800943c:	46bd      	mov	sp, r7
 800943e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009442:	4770      	bx	lr
 8009444:	20000450 	.word	0x20000450

08009448 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8009448:	b480      	push	{r7}
 800944a:	b083      	sub	sp, #12
 800944c:	af00      	add	r7, sp, #0
 800944e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	2243      	movs	r2, #67	; 0x43
 8009454:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 8009456:	4b03      	ldr	r3, [pc, #12]	; (8009464 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8009458:	4618      	mov	r0, r3
 800945a:	370c      	adds	r7, #12
 800945c:	46bd      	mov	sp, r7
 800945e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009462:	4770      	bx	lr
 8009464:	200004d8 	.word	0x200004d8

08009468 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8009468:	b480      	push	{r7}
 800946a:	b083      	sub	sp, #12
 800946c:	af00      	add	r7, sp, #0
 800946e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	220a      	movs	r2, #10
 8009474:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8009476:	4b03      	ldr	r3, [pc, #12]	; (8009484 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8009478:	4618      	mov	r0, r3
 800947a:	370c      	adds	r7, #12
 800947c:	46bd      	mov	sp, r7
 800947e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009482:	4770      	bx	lr
 8009484:	2000040c 	.word	0x2000040c

08009488 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8009488:	b480      	push	{r7}
 800948a:	b083      	sub	sp, #12
 800948c:	af00      	add	r7, sp, #0
 800948e:	6078      	str	r0, [r7, #4]
 8009490:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8009492:	683b      	ldr	r3, [r7, #0]
 8009494:	2b00      	cmp	r3, #0
 8009496:	d101      	bne.n	800949c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8009498:	2303      	movs	r3, #3
 800949a:	e004      	b.n	80094a6 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	683a      	ldr	r2, [r7, #0]
 80094a0:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 80094a4:	2300      	movs	r3, #0
}
 80094a6:	4618      	mov	r0, r3
 80094a8:	370c      	adds	r7, #12
 80094aa:	46bd      	mov	sp, r7
 80094ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094b0:	4770      	bx	lr

080094b2 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80094b2:	b480      	push	{r7}
 80094b4:	b087      	sub	sp, #28
 80094b6:	af00      	add	r7, sp, #0
 80094b8:	60f8      	str	r0, [r7, #12]
 80094ba:	60b9      	str	r1, [r7, #8]
 80094bc:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80094be:	68fb      	ldr	r3, [r7, #12]
 80094c0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80094c4:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 80094c6:	697b      	ldr	r3, [r7, #20]
 80094c8:	68ba      	ldr	r2, [r7, #8]
 80094ca:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80094ce:	697b      	ldr	r3, [r7, #20]
 80094d0:	687a      	ldr	r2, [r7, #4]
 80094d2:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 80094d6:	2300      	movs	r3, #0
}
 80094d8:	4618      	mov	r0, r3
 80094da:	371c      	adds	r7, #28
 80094dc:	46bd      	mov	sp, r7
 80094de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094e2:	4770      	bx	lr

080094e4 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80094e4:	b480      	push	{r7}
 80094e6:	b085      	sub	sp, #20
 80094e8:	af00      	add	r7, sp, #0
 80094ea:	6078      	str	r0, [r7, #4]
 80094ec:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80094f4:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 80094f6:	68fb      	ldr	r3, [r7, #12]
 80094f8:	683a      	ldr	r2, [r7, #0]
 80094fa:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 80094fe:	2300      	movs	r3, #0
}
 8009500:	4618      	mov	r0, r3
 8009502:	3714      	adds	r7, #20
 8009504:	46bd      	mov	sp, r7
 8009506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800950a:	4770      	bx	lr

0800950c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800950c:	b580      	push	{r7, lr}
 800950e:	b084      	sub	sp, #16
 8009510:	af00      	add	r7, sp, #0
 8009512:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800951a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009522:	2b00      	cmp	r3, #0
 8009524:	d101      	bne.n	800952a <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8009526:	2303      	movs	r3, #3
 8009528:	e016      	b.n	8009558 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	7c1b      	ldrb	r3, [r3, #16]
 800952e:	2b00      	cmp	r3, #0
 8009530:	d109      	bne.n	8009546 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8009532:	68fb      	ldr	r3, [r7, #12]
 8009534:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009538:	f44f 7300 	mov.w	r3, #512	; 0x200
 800953c:	2101      	movs	r1, #1
 800953e:	6878      	ldr	r0, [r7, #4]
 8009540:	f001 fdbc 	bl	800b0bc <USBD_LL_PrepareReceive>
 8009544:	e007      	b.n	8009556 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8009546:	68fb      	ldr	r3, [r7, #12]
 8009548:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800954c:	2340      	movs	r3, #64	; 0x40
 800954e:	2101      	movs	r1, #1
 8009550:	6878      	ldr	r0, [r7, #4]
 8009552:	f001 fdb3 	bl	800b0bc <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8009556:	2300      	movs	r3, #0
}
 8009558:	4618      	mov	r0, r3
 800955a:	3710      	adds	r7, #16
 800955c:	46bd      	mov	sp, r7
 800955e:	bd80      	pop	{r7, pc}

08009560 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8009560:	b580      	push	{r7, lr}
 8009562:	b086      	sub	sp, #24
 8009564:	af00      	add	r7, sp, #0
 8009566:	60f8      	str	r0, [r7, #12]
 8009568:	60b9      	str	r1, [r7, #8]
 800956a:	4613      	mov	r3, r2
 800956c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800956e:	68fb      	ldr	r3, [r7, #12]
 8009570:	2b00      	cmp	r3, #0
 8009572:	d101      	bne.n	8009578 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8009574:	2303      	movs	r3, #3
 8009576:	e025      	b.n	80095c4 <USBD_Init+0x64>
  }

  /* Unlink previous class */
  if (pdev->pClass != NULL)
 8009578:	68fb      	ldr	r3, [r7, #12]
 800957a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800957e:	2b00      	cmp	r3, #0
 8009580:	d003      	beq.n	800958a <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8009582:	68fb      	ldr	r3, [r7, #12]
 8009584:	2200      	movs	r2, #0
 8009586:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  if (pdev->pConfDesc != NULL)
 800958a:	68fb      	ldr	r3, [r7, #12]
 800958c:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 8009590:	2b00      	cmp	r3, #0
 8009592:	d003      	beq.n	800959c <USBD_Init+0x3c>
  {
    pdev->pConfDesc = NULL;
 8009594:	68fb      	ldr	r3, [r7, #12]
 8009596:	2200      	movs	r2, #0
 8009598:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800959c:	68bb      	ldr	r3, [r7, #8]
 800959e:	2b00      	cmp	r3, #0
 80095a0:	d003      	beq.n	80095aa <USBD_Init+0x4a>
  {
    pdev->pDesc = pdesc;
 80095a2:	68fb      	ldr	r3, [r7, #12]
 80095a4:	68ba      	ldr	r2, [r7, #8]
 80095a6:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80095aa:	68fb      	ldr	r3, [r7, #12]
 80095ac:	2201      	movs	r2, #1
 80095ae:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80095b2:	68fb      	ldr	r3, [r7, #12]
 80095b4:	79fa      	ldrb	r2, [r7, #7]
 80095b6:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80095b8:	68f8      	ldr	r0, [r7, #12]
 80095ba:	f001 fc29 	bl	800ae10 <USBD_LL_Init>
 80095be:	4603      	mov	r3, r0
 80095c0:	75fb      	strb	r3, [r7, #23]

  return ret;
 80095c2:	7dfb      	ldrb	r3, [r7, #23]
}
 80095c4:	4618      	mov	r0, r3
 80095c6:	3718      	adds	r7, #24
 80095c8:	46bd      	mov	sp, r7
 80095ca:	bd80      	pop	{r7, pc}

080095cc <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80095cc:	b580      	push	{r7, lr}
 80095ce:	b084      	sub	sp, #16
 80095d0:	af00      	add	r7, sp, #0
 80095d2:	6078      	str	r0, [r7, #4]
 80095d4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80095d6:	2300      	movs	r3, #0
 80095d8:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80095da:	683b      	ldr	r3, [r7, #0]
 80095dc:	2b00      	cmp	r3, #0
 80095de:	d101      	bne.n	80095e4 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 80095e0:	2303      	movs	r3, #3
 80095e2:	e010      	b.n	8009606 <USBD_RegisterClass+0x3a>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	683a      	ldr	r2, [r7, #0]
 80095e8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  /* Get Device Configuration Descriptor */
#ifdef USE_USB_FS
  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
#else /* USE_USB_HS */
  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80095f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80095f4:	f107 020e 	add.w	r2, r7, #14
 80095f8:	4610      	mov	r0, r2
 80095fa:	4798      	blx	r3
 80095fc:	4602      	mov	r2, r0
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#endif /* USE_USB_FS */


  return USBD_OK;
 8009604:	2300      	movs	r3, #0
}
 8009606:	4618      	mov	r0, r3
 8009608:	3710      	adds	r7, #16
 800960a:	46bd      	mov	sp, r7
 800960c:	bd80      	pop	{r7, pc}

0800960e <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800960e:	b580      	push	{r7, lr}
 8009610:	b082      	sub	sp, #8
 8009612:	af00      	add	r7, sp, #0
 8009614:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8009616:	6878      	ldr	r0, [r7, #4]
 8009618:	f001 fc46 	bl	800aea8 <USBD_LL_Start>
 800961c:	4603      	mov	r3, r0
}
 800961e:	4618      	mov	r0, r3
 8009620:	3708      	adds	r7, #8
 8009622:	46bd      	mov	sp, r7
 8009624:	bd80      	pop	{r7, pc}

08009626 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8009626:	b480      	push	{r7}
 8009628:	b083      	sub	sp, #12
 800962a:	af00      	add	r7, sp, #0
 800962c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800962e:	2300      	movs	r3, #0
}
 8009630:	4618      	mov	r0, r3
 8009632:	370c      	adds	r7, #12
 8009634:	46bd      	mov	sp, r7
 8009636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800963a:	4770      	bx	lr

0800963c <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800963c:	b580      	push	{r7, lr}
 800963e:	b084      	sub	sp, #16
 8009640:	af00      	add	r7, sp, #0
 8009642:	6078      	str	r0, [r7, #4]
 8009644:	460b      	mov	r3, r1
 8009646:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8009648:	2303      	movs	r3, #3
 800964a:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009652:	2b00      	cmp	r3, #0
 8009654:	d009      	beq.n	800966a <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800965c:	681b      	ldr	r3, [r3, #0]
 800965e:	78fa      	ldrb	r2, [r7, #3]
 8009660:	4611      	mov	r1, r2
 8009662:	6878      	ldr	r0, [r7, #4]
 8009664:	4798      	blx	r3
 8009666:	4603      	mov	r3, r0
 8009668:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800966a:	7bfb      	ldrb	r3, [r7, #15]
}
 800966c:	4618      	mov	r0, r3
 800966e:	3710      	adds	r7, #16
 8009670:	46bd      	mov	sp, r7
 8009672:	bd80      	pop	{r7, pc}

08009674 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009674:	b580      	push	{r7, lr}
 8009676:	b082      	sub	sp, #8
 8009678:	af00      	add	r7, sp, #0
 800967a:	6078      	str	r0, [r7, #4]
 800967c:	460b      	mov	r3, r1
 800967e:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009686:	2b00      	cmp	r3, #0
 8009688:	d007      	beq.n	800969a <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009690:	685b      	ldr	r3, [r3, #4]
 8009692:	78fa      	ldrb	r2, [r7, #3]
 8009694:	4611      	mov	r1, r2
 8009696:	6878      	ldr	r0, [r7, #4]
 8009698:	4798      	blx	r3
  }

  return USBD_OK;
 800969a:	2300      	movs	r3, #0
}
 800969c:	4618      	mov	r0, r3
 800969e:	3708      	adds	r7, #8
 80096a0:	46bd      	mov	sp, r7
 80096a2:	bd80      	pop	{r7, pc}

080096a4 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80096a4:	b580      	push	{r7, lr}
 80096a6:	b084      	sub	sp, #16
 80096a8:	af00      	add	r7, sp, #0
 80096aa:	6078      	str	r0, [r7, #4]
 80096ac:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80096b4:	6839      	ldr	r1, [r7, #0]
 80096b6:	4618      	mov	r0, r3
 80096b8:	f000 ff2c 	bl	800a514 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	2201      	movs	r2, #1
 80096c0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80096ca:	461a      	mov	r2, r3
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80096d8:	f003 031f 	and.w	r3, r3, #31
 80096dc:	2b01      	cmp	r3, #1
 80096de:	d00e      	beq.n	80096fe <USBD_LL_SetupStage+0x5a>
 80096e0:	2b01      	cmp	r3, #1
 80096e2:	d302      	bcc.n	80096ea <USBD_LL_SetupStage+0x46>
 80096e4:	2b02      	cmp	r3, #2
 80096e6:	d014      	beq.n	8009712 <USBD_LL_SetupStage+0x6e>
 80096e8:	e01d      	b.n	8009726 <USBD_LL_SetupStage+0x82>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80096f0:	4619      	mov	r1, r3
 80096f2:	6878      	ldr	r0, [r7, #4]
 80096f4:	f000 fa18 	bl	8009b28 <USBD_StdDevReq>
 80096f8:	4603      	mov	r3, r0
 80096fa:	73fb      	strb	r3, [r7, #15]
      break;
 80096fc:	e020      	b.n	8009740 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009704:	4619      	mov	r1, r3
 8009706:	6878      	ldr	r0, [r7, #4]
 8009708:	f000 fa7c 	bl	8009c04 <USBD_StdItfReq>
 800970c:	4603      	mov	r3, r0
 800970e:	73fb      	strb	r3, [r7, #15]
      break;
 8009710:	e016      	b.n	8009740 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009718:	4619      	mov	r1, r3
 800971a:	6878      	ldr	r0, [r7, #4]
 800971c:	f000 fab8 	bl	8009c90 <USBD_StdEPReq>
 8009720:	4603      	mov	r3, r0
 8009722:	73fb      	strb	r3, [r7, #15]
      break;
 8009724:	e00c      	b.n	8009740 <USBD_LL_SetupStage+0x9c>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800972c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8009730:	b2db      	uxtb	r3, r3
 8009732:	4619      	mov	r1, r3
 8009734:	6878      	ldr	r0, [r7, #4]
 8009736:	f001 fc17 	bl	800af68 <USBD_LL_StallEP>
 800973a:	4603      	mov	r3, r0
 800973c:	73fb      	strb	r3, [r7, #15]
      break;
 800973e:	bf00      	nop
  }

  return ret;
 8009740:	7bfb      	ldrb	r3, [r7, #15]
}
 8009742:	4618      	mov	r0, r3
 8009744:	3710      	adds	r7, #16
 8009746:	46bd      	mov	sp, r7
 8009748:	bd80      	pop	{r7, pc}

0800974a <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800974a:	b580      	push	{r7, lr}
 800974c:	b086      	sub	sp, #24
 800974e:	af00      	add	r7, sp, #0
 8009750:	60f8      	str	r0, [r7, #12]
 8009752:	460b      	mov	r3, r1
 8009754:	607a      	str	r2, [r7, #4]
 8009756:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8009758:	7afb      	ldrb	r3, [r7, #11]
 800975a:	2b00      	cmp	r3, #0
 800975c:	d137      	bne.n	80097ce <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 800975e:	68fb      	ldr	r3, [r7, #12]
 8009760:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8009764:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8009766:	68fb      	ldr	r3, [r7, #12]
 8009768:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800976c:	2b03      	cmp	r3, #3
 800976e:	d14a      	bne.n	8009806 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8009770:	693b      	ldr	r3, [r7, #16]
 8009772:	689a      	ldr	r2, [r3, #8]
 8009774:	693b      	ldr	r3, [r7, #16]
 8009776:	68db      	ldr	r3, [r3, #12]
 8009778:	429a      	cmp	r2, r3
 800977a:	d913      	bls.n	80097a4 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800977c:	693b      	ldr	r3, [r7, #16]
 800977e:	689a      	ldr	r2, [r3, #8]
 8009780:	693b      	ldr	r3, [r7, #16]
 8009782:	68db      	ldr	r3, [r3, #12]
 8009784:	1ad2      	subs	r2, r2, r3
 8009786:	693b      	ldr	r3, [r7, #16]
 8009788:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800978a:	693b      	ldr	r3, [r7, #16]
 800978c:	68da      	ldr	r2, [r3, #12]
 800978e:	693b      	ldr	r3, [r7, #16]
 8009790:	689b      	ldr	r3, [r3, #8]
 8009792:	4293      	cmp	r3, r2
 8009794:	bf28      	it	cs
 8009796:	4613      	movcs	r3, r2
 8009798:	461a      	mov	r2, r3
 800979a:	6879      	ldr	r1, [r7, #4]
 800979c:	68f8      	ldr	r0, [r7, #12]
 800979e:	f000 ffad 	bl	800a6fc <USBD_CtlContinueRx>
 80097a2:	e030      	b.n	8009806 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80097a4:	68fb      	ldr	r3, [r7, #12]
 80097a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80097aa:	691b      	ldr	r3, [r3, #16]
 80097ac:	2b00      	cmp	r3, #0
 80097ae:	d00a      	beq.n	80097c6 <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 80097b0:	68fb      	ldr	r3, [r7, #12]
 80097b2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80097b6:	2b03      	cmp	r3, #3
 80097b8:	d105      	bne.n	80097c6 <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 80097ba:	68fb      	ldr	r3, [r7, #12]
 80097bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80097c0:	691b      	ldr	r3, [r3, #16]
 80097c2:	68f8      	ldr	r0, [r7, #12]
 80097c4:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 80097c6:	68f8      	ldr	r0, [r7, #12]
 80097c8:	f000 ffa9 	bl	800a71e <USBD_CtlSendStatus>
 80097cc:	e01b      	b.n	8009806 <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 80097ce:	68fb      	ldr	r3, [r7, #12]
 80097d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80097d4:	699b      	ldr	r3, [r3, #24]
 80097d6:	2b00      	cmp	r3, #0
 80097d8:	d013      	beq.n	8009802 <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80097da:	68fb      	ldr	r3, [r7, #12]
 80097dc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 80097e0:	2b03      	cmp	r3, #3
 80097e2:	d10e      	bne.n	8009802 <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 80097e4:	68fb      	ldr	r3, [r7, #12]
 80097e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80097ea:	699b      	ldr	r3, [r3, #24]
 80097ec:	7afa      	ldrb	r2, [r7, #11]
 80097ee:	4611      	mov	r1, r2
 80097f0:	68f8      	ldr	r0, [r7, #12]
 80097f2:	4798      	blx	r3
 80097f4:	4603      	mov	r3, r0
 80097f6:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 80097f8:	7dfb      	ldrb	r3, [r7, #23]
 80097fa:	2b00      	cmp	r3, #0
 80097fc:	d003      	beq.n	8009806 <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 80097fe:	7dfb      	ldrb	r3, [r7, #23]
 8009800:	e002      	b.n	8009808 <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8009802:	2303      	movs	r3, #3
 8009804:	e000      	b.n	8009808 <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 8009806:	2300      	movs	r3, #0
}
 8009808:	4618      	mov	r0, r3
 800980a:	3718      	adds	r7, #24
 800980c:	46bd      	mov	sp, r7
 800980e:	bd80      	pop	{r7, pc}

08009810 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8009810:	b580      	push	{r7, lr}
 8009812:	b086      	sub	sp, #24
 8009814:	af00      	add	r7, sp, #0
 8009816:	60f8      	str	r0, [r7, #12]
 8009818:	460b      	mov	r3, r1
 800981a:	607a      	str	r2, [r7, #4]
 800981c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800981e:	7afb      	ldrb	r3, [r7, #11]
 8009820:	2b00      	cmp	r3, #0
 8009822:	d16a      	bne.n	80098fa <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 8009824:	68fb      	ldr	r3, [r7, #12]
 8009826:	3314      	adds	r3, #20
 8009828:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800982a:	68fb      	ldr	r3, [r7, #12]
 800982c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009830:	2b02      	cmp	r3, #2
 8009832:	d155      	bne.n	80098e0 <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 8009834:	693b      	ldr	r3, [r7, #16]
 8009836:	689a      	ldr	r2, [r3, #8]
 8009838:	693b      	ldr	r3, [r7, #16]
 800983a:	68db      	ldr	r3, [r3, #12]
 800983c:	429a      	cmp	r2, r3
 800983e:	d914      	bls.n	800986a <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8009840:	693b      	ldr	r3, [r7, #16]
 8009842:	689a      	ldr	r2, [r3, #8]
 8009844:	693b      	ldr	r3, [r7, #16]
 8009846:	68db      	ldr	r3, [r3, #12]
 8009848:	1ad2      	subs	r2, r2, r3
 800984a:	693b      	ldr	r3, [r7, #16]
 800984c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800984e:	693b      	ldr	r3, [r7, #16]
 8009850:	689b      	ldr	r3, [r3, #8]
 8009852:	461a      	mov	r2, r3
 8009854:	6879      	ldr	r1, [r7, #4]
 8009856:	68f8      	ldr	r0, [r7, #12]
 8009858:	f000 ff22 	bl	800a6a0 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800985c:	2300      	movs	r3, #0
 800985e:	2200      	movs	r2, #0
 8009860:	2100      	movs	r1, #0
 8009862:	68f8      	ldr	r0, [r7, #12]
 8009864:	f001 fc2a 	bl	800b0bc <USBD_LL_PrepareReceive>
 8009868:	e03a      	b.n	80098e0 <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800986a:	693b      	ldr	r3, [r7, #16]
 800986c:	68da      	ldr	r2, [r3, #12]
 800986e:	693b      	ldr	r3, [r7, #16]
 8009870:	689b      	ldr	r3, [r3, #8]
 8009872:	429a      	cmp	r2, r3
 8009874:	d11c      	bne.n	80098b0 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8009876:	693b      	ldr	r3, [r7, #16]
 8009878:	685a      	ldr	r2, [r3, #4]
 800987a:	693b      	ldr	r3, [r7, #16]
 800987c:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800987e:	429a      	cmp	r2, r3
 8009880:	d316      	bcc.n	80098b0 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8009882:	693b      	ldr	r3, [r7, #16]
 8009884:	685a      	ldr	r2, [r3, #4]
 8009886:	68fb      	ldr	r3, [r7, #12]
 8009888:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800988c:	429a      	cmp	r2, r3
 800988e:	d20f      	bcs.n	80098b0 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8009890:	2200      	movs	r2, #0
 8009892:	2100      	movs	r1, #0
 8009894:	68f8      	ldr	r0, [r7, #12]
 8009896:	f000 ff03 	bl	800a6a0 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800989a:	68fb      	ldr	r3, [r7, #12]
 800989c:	2200      	movs	r2, #0
 800989e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80098a2:	2300      	movs	r3, #0
 80098a4:	2200      	movs	r2, #0
 80098a6:	2100      	movs	r1, #0
 80098a8:	68f8      	ldr	r0, [r7, #12]
 80098aa:	f001 fc07 	bl	800b0bc <USBD_LL_PrepareReceive>
 80098ae:	e017      	b.n	80098e0 <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80098b0:	68fb      	ldr	r3, [r7, #12]
 80098b2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80098b6:	68db      	ldr	r3, [r3, #12]
 80098b8:	2b00      	cmp	r3, #0
 80098ba:	d00a      	beq.n	80098d2 <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 80098bc:	68fb      	ldr	r3, [r7, #12]
 80098be:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80098c2:	2b03      	cmp	r3, #3
 80098c4:	d105      	bne.n	80098d2 <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 80098c6:	68fb      	ldr	r3, [r7, #12]
 80098c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80098cc:	68db      	ldr	r3, [r3, #12]
 80098ce:	68f8      	ldr	r0, [r7, #12]
 80098d0:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80098d2:	2180      	movs	r1, #128	; 0x80
 80098d4:	68f8      	ldr	r0, [r7, #12]
 80098d6:	f001 fb47 	bl	800af68 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80098da:	68f8      	ldr	r0, [r7, #12]
 80098dc:	f000 ff32 	bl	800a744 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 80098e0:	68fb      	ldr	r3, [r7, #12]
 80098e2:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80098e6:	2b01      	cmp	r3, #1
 80098e8:	d123      	bne.n	8009932 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 80098ea:	68f8      	ldr	r0, [r7, #12]
 80098ec:	f7ff fe9b 	bl	8009626 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80098f0:	68fb      	ldr	r3, [r7, #12]
 80098f2:	2200      	movs	r2, #0
 80098f4:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80098f8:	e01b      	b.n	8009932 <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 80098fa:	68fb      	ldr	r3, [r7, #12]
 80098fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009900:	695b      	ldr	r3, [r3, #20]
 8009902:	2b00      	cmp	r3, #0
 8009904:	d013      	beq.n	800992e <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8009906:	68fb      	ldr	r3, [r7, #12]
 8009908:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800990c:	2b03      	cmp	r3, #3
 800990e:	d10e      	bne.n	800992e <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8009910:	68fb      	ldr	r3, [r7, #12]
 8009912:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009916:	695b      	ldr	r3, [r3, #20]
 8009918:	7afa      	ldrb	r2, [r7, #11]
 800991a:	4611      	mov	r1, r2
 800991c:	68f8      	ldr	r0, [r7, #12]
 800991e:	4798      	blx	r3
 8009920:	4603      	mov	r3, r0
 8009922:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 8009924:	7dfb      	ldrb	r3, [r7, #23]
 8009926:	2b00      	cmp	r3, #0
 8009928:	d003      	beq.n	8009932 <USBD_LL_DataInStage+0x122>
    {
      return ret;
 800992a:	7dfb      	ldrb	r3, [r7, #23]
 800992c:	e002      	b.n	8009934 <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800992e:	2303      	movs	r3, #3
 8009930:	e000      	b.n	8009934 <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 8009932:	2300      	movs	r3, #0
}
 8009934:	4618      	mov	r0, r3
 8009936:	3718      	adds	r7, #24
 8009938:	46bd      	mov	sp, r7
 800993a:	bd80      	pop	{r7, pc}

0800993c <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800993c:	b580      	push	{r7, lr}
 800993e:	b082      	sub	sp, #8
 8009940:	af00      	add	r7, sp, #0
 8009942:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	2201      	movs	r2, #1
 8009948:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	2200      	movs	r2, #0
 8009950:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	2200      	movs	r2, #0
 8009958:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	2200      	movs	r2, #0
 800995e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009968:	2b00      	cmp	r3, #0
 800996a:	d009      	beq.n	8009980 <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009972:	685b      	ldr	r3, [r3, #4]
 8009974:	687a      	ldr	r2, [r7, #4]
 8009976:	6852      	ldr	r2, [r2, #4]
 8009978:	b2d2      	uxtb	r2, r2
 800997a:	4611      	mov	r1, r2
 800997c:	6878      	ldr	r0, [r7, #4]
 800997e:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009980:	2340      	movs	r3, #64	; 0x40
 8009982:	2200      	movs	r2, #0
 8009984:	2100      	movs	r1, #0
 8009986:	6878      	ldr	r0, [r7, #4]
 8009988:	f001 faa9 	bl	800aede <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	2201      	movs	r2, #1
 8009990:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	2240      	movs	r2, #64	; 0x40
 8009998:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800999c:	2340      	movs	r3, #64	; 0x40
 800999e:	2200      	movs	r2, #0
 80099a0:	2180      	movs	r1, #128	; 0x80
 80099a2:	6878      	ldr	r0, [r7, #4]
 80099a4:	f001 fa9b 	bl	800aede <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	2201      	movs	r2, #1
 80099ac:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	2240      	movs	r2, #64	; 0x40
 80099b2:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 80099b4:	2300      	movs	r3, #0
}
 80099b6:	4618      	mov	r0, r3
 80099b8:	3708      	adds	r7, #8
 80099ba:	46bd      	mov	sp, r7
 80099bc:	bd80      	pop	{r7, pc}

080099be <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80099be:	b480      	push	{r7}
 80099c0:	b083      	sub	sp, #12
 80099c2:	af00      	add	r7, sp, #0
 80099c4:	6078      	str	r0, [r7, #4]
 80099c6:	460b      	mov	r3, r1
 80099c8:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	78fa      	ldrb	r2, [r7, #3]
 80099ce:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80099d0:	2300      	movs	r3, #0
}
 80099d2:	4618      	mov	r0, r3
 80099d4:	370c      	adds	r7, #12
 80099d6:	46bd      	mov	sp, r7
 80099d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099dc:	4770      	bx	lr

080099de <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80099de:	b480      	push	{r7}
 80099e0:	b083      	sub	sp, #12
 80099e2:	af00      	add	r7, sp, #0
 80099e4:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	2204      	movs	r2, #4
 80099f6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80099fa:	2300      	movs	r3, #0
}
 80099fc:	4618      	mov	r0, r3
 80099fe:	370c      	adds	r7, #12
 8009a00:	46bd      	mov	sp, r7
 8009a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a06:	4770      	bx	lr

08009a08 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8009a08:	b480      	push	{r7}
 8009a0a:	b083      	sub	sp, #12
 8009a0c:	af00      	add	r7, sp, #0
 8009a0e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009a16:	2b04      	cmp	r3, #4
 8009a18:	d105      	bne.n	8009a26 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8009a26:	2300      	movs	r3, #0
}
 8009a28:	4618      	mov	r0, r3
 8009a2a:	370c      	adds	r7, #12
 8009a2c:	46bd      	mov	sp, r7
 8009a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a32:	4770      	bx	lr

08009a34 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8009a34:	b580      	push	{r7, lr}
 8009a36:	b082      	sub	sp, #8
 8009a38:	af00      	add	r7, sp, #0
 8009a3a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009a42:	2b03      	cmp	r3, #3
 8009a44:	d10b      	bne.n	8009a5e <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009a4c:	69db      	ldr	r3, [r3, #28]
 8009a4e:	2b00      	cmp	r3, #0
 8009a50:	d005      	beq.n	8009a5e <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009a58:	69db      	ldr	r3, [r3, #28]
 8009a5a:	6878      	ldr	r0, [r7, #4]
 8009a5c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8009a5e:	2300      	movs	r3, #0
}
 8009a60:	4618      	mov	r0, r3
 8009a62:	3708      	adds	r7, #8
 8009a64:	46bd      	mov	sp, r7
 8009a66:	bd80      	pop	{r7, pc}

08009a68 <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8009a68:	b480      	push	{r7}
 8009a6a:	b083      	sub	sp, #12
 8009a6c:	af00      	add	r7, sp, #0
 8009a6e:	6078      	str	r0, [r7, #4]
 8009a70:	460b      	mov	r3, r1
 8009a72:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8009a74:	2300      	movs	r3, #0
}
 8009a76:	4618      	mov	r0, r3
 8009a78:	370c      	adds	r7, #12
 8009a7a:	46bd      	mov	sp, r7
 8009a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a80:	4770      	bx	lr

08009a82 <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8009a82:	b480      	push	{r7}
 8009a84:	b083      	sub	sp, #12
 8009a86:	af00      	add	r7, sp, #0
 8009a88:	6078      	str	r0, [r7, #4]
 8009a8a:	460b      	mov	r3, r1
 8009a8c:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8009a8e:	2300      	movs	r3, #0
}
 8009a90:	4618      	mov	r0, r3
 8009a92:	370c      	adds	r7, #12
 8009a94:	46bd      	mov	sp, r7
 8009a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a9a:	4770      	bx	lr

08009a9c <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8009a9c:	b480      	push	{r7}
 8009a9e:	b083      	sub	sp, #12
 8009aa0:	af00      	add	r7, sp, #0
 8009aa2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8009aa4:	2300      	movs	r3, #0
}
 8009aa6:	4618      	mov	r0, r3
 8009aa8:	370c      	adds	r7, #12
 8009aaa:	46bd      	mov	sp, r7
 8009aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ab0:	4770      	bx	lr

08009ab2 <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8009ab2:	b580      	push	{r7, lr}
 8009ab4:	b082      	sub	sp, #8
 8009ab6:	af00      	add	r7, sp, #0
 8009ab8:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	2201      	movs	r2, #1
 8009abe:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009ac8:	2b00      	cmp	r3, #0
 8009aca:	d009      	beq.n	8009ae0 <USBD_LL_DevDisconnected+0x2e>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009ad2:	685b      	ldr	r3, [r3, #4]
 8009ad4:	687a      	ldr	r2, [r7, #4]
 8009ad6:	6852      	ldr	r2, [r2, #4]
 8009ad8:	b2d2      	uxtb	r2, r2
 8009ada:	4611      	mov	r1, r2
 8009adc:	6878      	ldr	r0, [r7, #4]
 8009ade:	4798      	blx	r3
  }

  return USBD_OK;
 8009ae0:	2300      	movs	r3, #0
}
 8009ae2:	4618      	mov	r0, r3
 8009ae4:	3708      	adds	r7, #8
 8009ae6:	46bd      	mov	sp, r7
 8009ae8:	bd80      	pop	{r7, pc}

08009aea <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8009aea:	b480      	push	{r7}
 8009aec:	b087      	sub	sp, #28
 8009aee:	af00      	add	r7, sp, #0
 8009af0:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8009af6:	697b      	ldr	r3, [r7, #20]
 8009af8:	781b      	ldrb	r3, [r3, #0]
 8009afa:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8009afc:	697b      	ldr	r3, [r7, #20]
 8009afe:	3301      	adds	r3, #1
 8009b00:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8009b02:	697b      	ldr	r3, [r7, #20]
 8009b04:	781b      	ldrb	r3, [r3, #0]
 8009b06:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8009b08:	8a3b      	ldrh	r3, [r7, #16]
 8009b0a:	021b      	lsls	r3, r3, #8
 8009b0c:	b21a      	sxth	r2, r3
 8009b0e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8009b12:	4313      	orrs	r3, r2
 8009b14:	b21b      	sxth	r3, r3
 8009b16:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8009b18:	89fb      	ldrh	r3, [r7, #14]
}
 8009b1a:	4618      	mov	r0, r3
 8009b1c:	371c      	adds	r7, #28
 8009b1e:	46bd      	mov	sp, r7
 8009b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b24:	4770      	bx	lr
	...

08009b28 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009b28:	b580      	push	{r7, lr}
 8009b2a:	b084      	sub	sp, #16
 8009b2c:	af00      	add	r7, sp, #0
 8009b2e:	6078      	str	r0, [r7, #4]
 8009b30:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009b32:	2300      	movs	r3, #0
 8009b34:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009b36:	683b      	ldr	r3, [r7, #0]
 8009b38:	781b      	ldrb	r3, [r3, #0]
 8009b3a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009b3e:	2b20      	cmp	r3, #32
 8009b40:	d004      	beq.n	8009b4c <USBD_StdDevReq+0x24>
 8009b42:	2b40      	cmp	r3, #64	; 0x40
 8009b44:	d002      	beq.n	8009b4c <USBD_StdDevReq+0x24>
 8009b46:	2b00      	cmp	r3, #0
 8009b48:	d00a      	beq.n	8009b60 <USBD_StdDevReq+0x38>
 8009b4a:	e050      	b.n	8009bee <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009b52:	689b      	ldr	r3, [r3, #8]
 8009b54:	6839      	ldr	r1, [r7, #0]
 8009b56:	6878      	ldr	r0, [r7, #4]
 8009b58:	4798      	blx	r3
 8009b5a:	4603      	mov	r3, r0
 8009b5c:	73fb      	strb	r3, [r7, #15]
    break;
 8009b5e:	e04b      	b.n	8009bf8 <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8009b60:	683b      	ldr	r3, [r7, #0]
 8009b62:	785b      	ldrb	r3, [r3, #1]
 8009b64:	2b09      	cmp	r3, #9
 8009b66:	d83c      	bhi.n	8009be2 <USBD_StdDevReq+0xba>
 8009b68:	a201      	add	r2, pc, #4	; (adr r2, 8009b70 <USBD_StdDevReq+0x48>)
 8009b6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b6e:	bf00      	nop
 8009b70:	08009bc5 	.word	0x08009bc5
 8009b74:	08009bd9 	.word	0x08009bd9
 8009b78:	08009be3 	.word	0x08009be3
 8009b7c:	08009bcf 	.word	0x08009bcf
 8009b80:	08009be3 	.word	0x08009be3
 8009b84:	08009ba3 	.word	0x08009ba3
 8009b88:	08009b99 	.word	0x08009b99
 8009b8c:	08009be3 	.word	0x08009be3
 8009b90:	08009bbb 	.word	0x08009bbb
 8009b94:	08009bad 	.word	0x08009bad
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 8009b98:	6839      	ldr	r1, [r7, #0]
 8009b9a:	6878      	ldr	r0, [r7, #4]
 8009b9c:	f000 f9ce 	bl	8009f3c <USBD_GetDescriptor>
      break;
 8009ba0:	e024      	b.n	8009bec <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 8009ba2:	6839      	ldr	r1, [r7, #0]
 8009ba4:	6878      	ldr	r0, [r7, #4]
 8009ba6:	f000 fb33 	bl	800a210 <USBD_SetAddress>
      break;
 8009baa:	e01f      	b.n	8009bec <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 8009bac:	6839      	ldr	r1, [r7, #0]
 8009bae:	6878      	ldr	r0, [r7, #4]
 8009bb0:	f000 fb70 	bl	800a294 <USBD_SetConfig>
 8009bb4:	4603      	mov	r3, r0
 8009bb6:	73fb      	strb	r3, [r7, #15]
      break;
 8009bb8:	e018      	b.n	8009bec <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 8009bba:	6839      	ldr	r1, [r7, #0]
 8009bbc:	6878      	ldr	r0, [r7, #4]
 8009bbe:	f000 fc0d 	bl	800a3dc <USBD_GetConfig>
      break;
 8009bc2:	e013      	b.n	8009bec <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 8009bc4:	6839      	ldr	r1, [r7, #0]
 8009bc6:	6878      	ldr	r0, [r7, #4]
 8009bc8:	f000 fc3c 	bl	800a444 <USBD_GetStatus>
      break;
 8009bcc:	e00e      	b.n	8009bec <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 8009bce:	6839      	ldr	r1, [r7, #0]
 8009bd0:	6878      	ldr	r0, [r7, #4]
 8009bd2:	f000 fc6a 	bl	800a4aa <USBD_SetFeature>
      break;
 8009bd6:	e009      	b.n	8009bec <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 8009bd8:	6839      	ldr	r1, [r7, #0]
 8009bda:	6878      	ldr	r0, [r7, #4]
 8009bdc:	f000 fc79 	bl	800a4d2 <USBD_ClrFeature>
      break;
 8009be0:	e004      	b.n	8009bec <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 8009be2:	6839      	ldr	r1, [r7, #0]
 8009be4:	6878      	ldr	r0, [r7, #4]
 8009be6:	f000 fccf 	bl	800a588 <USBD_CtlError>
      break;
 8009bea:	bf00      	nop
    }
    break;
 8009bec:	e004      	b.n	8009bf8 <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 8009bee:	6839      	ldr	r1, [r7, #0]
 8009bf0:	6878      	ldr	r0, [r7, #4]
 8009bf2:	f000 fcc9 	bl	800a588 <USBD_CtlError>
    break;
 8009bf6:	bf00      	nop
  }

  return ret;
 8009bf8:	7bfb      	ldrb	r3, [r7, #15]
}
 8009bfa:	4618      	mov	r0, r3
 8009bfc:	3710      	adds	r7, #16
 8009bfe:	46bd      	mov	sp, r7
 8009c00:	bd80      	pop	{r7, pc}
 8009c02:	bf00      	nop

08009c04 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009c04:	b580      	push	{r7, lr}
 8009c06:	b084      	sub	sp, #16
 8009c08:	af00      	add	r7, sp, #0
 8009c0a:	6078      	str	r0, [r7, #4]
 8009c0c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009c0e:	2300      	movs	r3, #0
 8009c10:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009c12:	683b      	ldr	r3, [r7, #0]
 8009c14:	781b      	ldrb	r3, [r3, #0]
 8009c16:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009c1a:	2b20      	cmp	r3, #32
 8009c1c:	d003      	beq.n	8009c26 <USBD_StdItfReq+0x22>
 8009c1e:	2b40      	cmp	r3, #64	; 0x40
 8009c20:	d001      	beq.n	8009c26 <USBD_StdItfReq+0x22>
 8009c22:	2b00      	cmp	r3, #0
 8009c24:	d12a      	bne.n	8009c7c <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009c2c:	3b01      	subs	r3, #1
 8009c2e:	2b02      	cmp	r3, #2
 8009c30:	d81d      	bhi.n	8009c6e <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8009c32:	683b      	ldr	r3, [r7, #0]
 8009c34:	889b      	ldrh	r3, [r3, #4]
 8009c36:	b2db      	uxtb	r3, r3
 8009c38:	2b01      	cmp	r3, #1
 8009c3a:	d813      	bhi.n	8009c64 <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009c42:	689b      	ldr	r3, [r3, #8]
 8009c44:	6839      	ldr	r1, [r7, #0]
 8009c46:	6878      	ldr	r0, [r7, #4]
 8009c48:	4798      	blx	r3
 8009c4a:	4603      	mov	r3, r0
 8009c4c:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 8009c4e:	683b      	ldr	r3, [r7, #0]
 8009c50:	88db      	ldrh	r3, [r3, #6]
 8009c52:	2b00      	cmp	r3, #0
 8009c54:	d110      	bne.n	8009c78 <USBD_StdItfReq+0x74>
 8009c56:	7bfb      	ldrb	r3, [r7, #15]
 8009c58:	2b00      	cmp	r3, #0
 8009c5a:	d10d      	bne.n	8009c78 <USBD_StdItfReq+0x74>
        {
          (void)USBD_CtlSendStatus(pdev);
 8009c5c:	6878      	ldr	r0, [r7, #4]
 8009c5e:	f000 fd5e 	bl	800a71e <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 8009c62:	e009      	b.n	8009c78 <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 8009c64:	6839      	ldr	r1, [r7, #0]
 8009c66:	6878      	ldr	r0, [r7, #4]
 8009c68:	f000 fc8e 	bl	800a588 <USBD_CtlError>
      break;
 8009c6c:	e004      	b.n	8009c78 <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 8009c6e:	6839      	ldr	r1, [r7, #0]
 8009c70:	6878      	ldr	r0, [r7, #4]
 8009c72:	f000 fc89 	bl	800a588 <USBD_CtlError>
      break;
 8009c76:	e000      	b.n	8009c7a <USBD_StdItfReq+0x76>
      break;
 8009c78:	bf00      	nop
    }
    break;
 8009c7a:	e004      	b.n	8009c86 <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 8009c7c:	6839      	ldr	r1, [r7, #0]
 8009c7e:	6878      	ldr	r0, [r7, #4]
 8009c80:	f000 fc82 	bl	800a588 <USBD_CtlError>
    break;
 8009c84:	bf00      	nop
  }

  return ret;
 8009c86:	7bfb      	ldrb	r3, [r7, #15]
}
 8009c88:	4618      	mov	r0, r3
 8009c8a:	3710      	adds	r7, #16
 8009c8c:	46bd      	mov	sp, r7
 8009c8e:	bd80      	pop	{r7, pc}

08009c90 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009c90:	b580      	push	{r7, lr}
 8009c92:	b084      	sub	sp, #16
 8009c94:	af00      	add	r7, sp, #0
 8009c96:	6078      	str	r0, [r7, #4]
 8009c98:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8009c9a:	2300      	movs	r3, #0
 8009c9c:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8009c9e:	683b      	ldr	r3, [r7, #0]
 8009ca0:	889b      	ldrh	r3, [r3, #4]
 8009ca2:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009ca4:	683b      	ldr	r3, [r7, #0]
 8009ca6:	781b      	ldrb	r3, [r3, #0]
 8009ca8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009cac:	2b20      	cmp	r3, #32
 8009cae:	d004      	beq.n	8009cba <USBD_StdEPReq+0x2a>
 8009cb0:	2b40      	cmp	r3, #64	; 0x40
 8009cb2:	d002      	beq.n	8009cba <USBD_StdEPReq+0x2a>
 8009cb4:	2b00      	cmp	r3, #0
 8009cb6:	d00a      	beq.n	8009cce <USBD_StdEPReq+0x3e>
 8009cb8:	e135      	b.n	8009f26 <USBD_StdEPReq+0x296>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009cc0:	689b      	ldr	r3, [r3, #8]
 8009cc2:	6839      	ldr	r1, [r7, #0]
 8009cc4:	6878      	ldr	r0, [r7, #4]
 8009cc6:	4798      	blx	r3
 8009cc8:	4603      	mov	r3, r0
 8009cca:	73fb      	strb	r3, [r7, #15]
    break;
 8009ccc:	e130      	b.n	8009f30 <USBD_StdEPReq+0x2a0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8009cce:	683b      	ldr	r3, [r7, #0]
 8009cd0:	785b      	ldrb	r3, [r3, #1]
 8009cd2:	2b01      	cmp	r3, #1
 8009cd4:	d03e      	beq.n	8009d54 <USBD_StdEPReq+0xc4>
 8009cd6:	2b03      	cmp	r3, #3
 8009cd8:	d002      	beq.n	8009ce0 <USBD_StdEPReq+0x50>
 8009cda:	2b00      	cmp	r3, #0
 8009cdc:	d077      	beq.n	8009dce <USBD_StdEPReq+0x13e>
 8009cde:	e11c      	b.n	8009f1a <USBD_StdEPReq+0x28a>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009ce6:	2b02      	cmp	r3, #2
 8009ce8:	d002      	beq.n	8009cf0 <USBD_StdEPReq+0x60>
 8009cea:	2b03      	cmp	r3, #3
 8009cec:	d015      	beq.n	8009d1a <USBD_StdEPReq+0x8a>
 8009cee:	e02b      	b.n	8009d48 <USBD_StdEPReq+0xb8>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009cf0:	7bbb      	ldrb	r3, [r7, #14]
 8009cf2:	2b00      	cmp	r3, #0
 8009cf4:	d00c      	beq.n	8009d10 <USBD_StdEPReq+0x80>
 8009cf6:	7bbb      	ldrb	r3, [r7, #14]
 8009cf8:	2b80      	cmp	r3, #128	; 0x80
 8009cfa:	d009      	beq.n	8009d10 <USBD_StdEPReq+0x80>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8009cfc:	7bbb      	ldrb	r3, [r7, #14]
 8009cfe:	4619      	mov	r1, r3
 8009d00:	6878      	ldr	r0, [r7, #4]
 8009d02:	f001 f931 	bl	800af68 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8009d06:	2180      	movs	r1, #128	; 0x80
 8009d08:	6878      	ldr	r0, [r7, #4]
 8009d0a:	f001 f92d 	bl	800af68 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8009d0e:	e020      	b.n	8009d52 <USBD_StdEPReq+0xc2>
          USBD_CtlError(pdev, req);
 8009d10:	6839      	ldr	r1, [r7, #0]
 8009d12:	6878      	ldr	r0, [r7, #4]
 8009d14:	f000 fc38 	bl	800a588 <USBD_CtlError>
        break;
 8009d18:	e01b      	b.n	8009d52 <USBD_StdEPReq+0xc2>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8009d1a:	683b      	ldr	r3, [r7, #0]
 8009d1c:	885b      	ldrh	r3, [r3, #2]
 8009d1e:	2b00      	cmp	r3, #0
 8009d20:	d10e      	bne.n	8009d40 <USBD_StdEPReq+0xb0>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8009d22:	7bbb      	ldrb	r3, [r7, #14]
 8009d24:	2b00      	cmp	r3, #0
 8009d26:	d00b      	beq.n	8009d40 <USBD_StdEPReq+0xb0>
 8009d28:	7bbb      	ldrb	r3, [r7, #14]
 8009d2a:	2b80      	cmp	r3, #128	; 0x80
 8009d2c:	d008      	beq.n	8009d40 <USBD_StdEPReq+0xb0>
 8009d2e:	683b      	ldr	r3, [r7, #0]
 8009d30:	88db      	ldrh	r3, [r3, #6]
 8009d32:	2b00      	cmp	r3, #0
 8009d34:	d104      	bne.n	8009d40 <USBD_StdEPReq+0xb0>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 8009d36:	7bbb      	ldrb	r3, [r7, #14]
 8009d38:	4619      	mov	r1, r3
 8009d3a:	6878      	ldr	r0, [r7, #4]
 8009d3c:	f001 f914 	bl	800af68 <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 8009d40:	6878      	ldr	r0, [r7, #4]
 8009d42:	f000 fcec 	bl	800a71e <USBD_CtlSendStatus>

        break;
 8009d46:	e004      	b.n	8009d52 <USBD_StdEPReq+0xc2>

      default:
        USBD_CtlError(pdev, req);
 8009d48:	6839      	ldr	r1, [r7, #0]
 8009d4a:	6878      	ldr	r0, [r7, #4]
 8009d4c:	f000 fc1c 	bl	800a588 <USBD_CtlError>
        break;
 8009d50:	bf00      	nop
      }
      break;
 8009d52:	e0e7      	b.n	8009f24 <USBD_StdEPReq+0x294>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009d5a:	2b02      	cmp	r3, #2
 8009d5c:	d002      	beq.n	8009d64 <USBD_StdEPReq+0xd4>
 8009d5e:	2b03      	cmp	r3, #3
 8009d60:	d015      	beq.n	8009d8e <USBD_StdEPReq+0xfe>
 8009d62:	e02d      	b.n	8009dc0 <USBD_StdEPReq+0x130>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009d64:	7bbb      	ldrb	r3, [r7, #14]
 8009d66:	2b00      	cmp	r3, #0
 8009d68:	d00c      	beq.n	8009d84 <USBD_StdEPReq+0xf4>
 8009d6a:	7bbb      	ldrb	r3, [r7, #14]
 8009d6c:	2b80      	cmp	r3, #128	; 0x80
 8009d6e:	d009      	beq.n	8009d84 <USBD_StdEPReq+0xf4>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8009d70:	7bbb      	ldrb	r3, [r7, #14]
 8009d72:	4619      	mov	r1, r3
 8009d74:	6878      	ldr	r0, [r7, #4]
 8009d76:	f001 f8f7 	bl	800af68 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8009d7a:	2180      	movs	r1, #128	; 0x80
 8009d7c:	6878      	ldr	r0, [r7, #4]
 8009d7e:	f001 f8f3 	bl	800af68 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8009d82:	e023      	b.n	8009dcc <USBD_StdEPReq+0x13c>
          USBD_CtlError(pdev, req);
 8009d84:	6839      	ldr	r1, [r7, #0]
 8009d86:	6878      	ldr	r0, [r7, #4]
 8009d88:	f000 fbfe 	bl	800a588 <USBD_CtlError>
        break;
 8009d8c:	e01e      	b.n	8009dcc <USBD_StdEPReq+0x13c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8009d8e:	683b      	ldr	r3, [r7, #0]
 8009d90:	885b      	ldrh	r3, [r3, #2]
 8009d92:	2b00      	cmp	r3, #0
 8009d94:	d119      	bne.n	8009dca <USBD_StdEPReq+0x13a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 8009d96:	7bbb      	ldrb	r3, [r7, #14]
 8009d98:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009d9c:	2b00      	cmp	r3, #0
 8009d9e:	d004      	beq.n	8009daa <USBD_StdEPReq+0x11a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8009da0:	7bbb      	ldrb	r3, [r7, #14]
 8009da2:	4619      	mov	r1, r3
 8009da4:	6878      	ldr	r0, [r7, #4]
 8009da6:	f001 f8fe 	bl	800afa6 <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 8009daa:	6878      	ldr	r0, [r7, #4]
 8009dac:	f000 fcb7 	bl	800a71e <USBD_CtlSendStatus>
          (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009db6:	689b      	ldr	r3, [r3, #8]
 8009db8:	6839      	ldr	r1, [r7, #0]
 8009dba:	6878      	ldr	r0, [r7, #4]
 8009dbc:	4798      	blx	r3
        }
        break;
 8009dbe:	e004      	b.n	8009dca <USBD_StdEPReq+0x13a>

      default:
        USBD_CtlError(pdev, req);
 8009dc0:	6839      	ldr	r1, [r7, #0]
 8009dc2:	6878      	ldr	r0, [r7, #4]
 8009dc4:	f000 fbe0 	bl	800a588 <USBD_CtlError>
        break;
 8009dc8:	e000      	b.n	8009dcc <USBD_StdEPReq+0x13c>
        break;
 8009dca:	bf00      	nop
      }
      break;
 8009dcc:	e0aa      	b.n	8009f24 <USBD_StdEPReq+0x294>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009dd4:	2b02      	cmp	r3, #2
 8009dd6:	d002      	beq.n	8009dde <USBD_StdEPReq+0x14e>
 8009dd8:	2b03      	cmp	r3, #3
 8009dda:	d032      	beq.n	8009e42 <USBD_StdEPReq+0x1b2>
 8009ddc:	e097      	b.n	8009f0e <USBD_StdEPReq+0x27e>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009dde:	7bbb      	ldrb	r3, [r7, #14]
 8009de0:	2b00      	cmp	r3, #0
 8009de2:	d007      	beq.n	8009df4 <USBD_StdEPReq+0x164>
 8009de4:	7bbb      	ldrb	r3, [r7, #14]
 8009de6:	2b80      	cmp	r3, #128	; 0x80
 8009de8:	d004      	beq.n	8009df4 <USBD_StdEPReq+0x164>
        {
          USBD_CtlError(pdev, req);
 8009dea:	6839      	ldr	r1, [r7, #0]
 8009dec:	6878      	ldr	r0, [r7, #4]
 8009dee:	f000 fbcb 	bl	800a588 <USBD_CtlError>
          break;
 8009df2:	e091      	b.n	8009f18 <USBD_StdEPReq+0x288>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009df4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009df8:	2b00      	cmp	r3, #0
 8009dfa:	da0b      	bge.n	8009e14 <USBD_StdEPReq+0x184>
 8009dfc:	7bbb      	ldrb	r3, [r7, #14]
 8009dfe:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009e02:	4613      	mov	r3, r2
 8009e04:	009b      	lsls	r3, r3, #2
 8009e06:	4413      	add	r3, r2
 8009e08:	009b      	lsls	r3, r3, #2
 8009e0a:	3310      	adds	r3, #16
 8009e0c:	687a      	ldr	r2, [r7, #4]
 8009e0e:	4413      	add	r3, r2
 8009e10:	3304      	adds	r3, #4
 8009e12:	e00b      	b.n	8009e2c <USBD_StdEPReq+0x19c>
              &pdev->ep_out[ep_addr & 0x7FU];
 8009e14:	7bbb      	ldrb	r3, [r7, #14]
 8009e16:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009e1a:	4613      	mov	r3, r2
 8009e1c:	009b      	lsls	r3, r3, #2
 8009e1e:	4413      	add	r3, r2
 8009e20:	009b      	lsls	r3, r3, #2
 8009e22:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009e26:	687a      	ldr	r2, [r7, #4]
 8009e28:	4413      	add	r3, r2
 8009e2a:	3304      	adds	r3, #4
 8009e2c:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 8009e2e:	68bb      	ldr	r3, [r7, #8]
 8009e30:	2200      	movs	r2, #0
 8009e32:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009e34:	68bb      	ldr	r3, [r7, #8]
 8009e36:	2202      	movs	r2, #2
 8009e38:	4619      	mov	r1, r3
 8009e3a:	6878      	ldr	r0, [r7, #4]
 8009e3c:	f000 fc15 	bl	800a66a <USBD_CtlSendData>
        break;
 8009e40:	e06a      	b.n	8009f18 <USBD_StdEPReq+0x288>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 8009e42:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009e46:	2b00      	cmp	r3, #0
 8009e48:	da11      	bge.n	8009e6e <USBD_StdEPReq+0x1de>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8009e4a:	7bbb      	ldrb	r3, [r7, #14]
 8009e4c:	f003 020f 	and.w	r2, r3, #15
 8009e50:	6879      	ldr	r1, [r7, #4]
 8009e52:	4613      	mov	r3, r2
 8009e54:	009b      	lsls	r3, r3, #2
 8009e56:	4413      	add	r3, r2
 8009e58:	009b      	lsls	r3, r3, #2
 8009e5a:	440b      	add	r3, r1
 8009e5c:	3324      	adds	r3, #36	; 0x24
 8009e5e:	881b      	ldrh	r3, [r3, #0]
 8009e60:	2b00      	cmp	r3, #0
 8009e62:	d117      	bne.n	8009e94 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 8009e64:	6839      	ldr	r1, [r7, #0]
 8009e66:	6878      	ldr	r0, [r7, #4]
 8009e68:	f000 fb8e 	bl	800a588 <USBD_CtlError>
            break;
 8009e6c:	e054      	b.n	8009f18 <USBD_StdEPReq+0x288>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8009e6e:	7bbb      	ldrb	r3, [r7, #14]
 8009e70:	f003 020f 	and.w	r2, r3, #15
 8009e74:	6879      	ldr	r1, [r7, #4]
 8009e76:	4613      	mov	r3, r2
 8009e78:	009b      	lsls	r3, r3, #2
 8009e7a:	4413      	add	r3, r2
 8009e7c:	009b      	lsls	r3, r3, #2
 8009e7e:	440b      	add	r3, r1
 8009e80:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8009e84:	881b      	ldrh	r3, [r3, #0]
 8009e86:	2b00      	cmp	r3, #0
 8009e88:	d104      	bne.n	8009e94 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 8009e8a:	6839      	ldr	r1, [r7, #0]
 8009e8c:	6878      	ldr	r0, [r7, #4]
 8009e8e:	f000 fb7b 	bl	800a588 <USBD_CtlError>
            break;
 8009e92:	e041      	b.n	8009f18 <USBD_StdEPReq+0x288>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009e94:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009e98:	2b00      	cmp	r3, #0
 8009e9a:	da0b      	bge.n	8009eb4 <USBD_StdEPReq+0x224>
 8009e9c:	7bbb      	ldrb	r3, [r7, #14]
 8009e9e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009ea2:	4613      	mov	r3, r2
 8009ea4:	009b      	lsls	r3, r3, #2
 8009ea6:	4413      	add	r3, r2
 8009ea8:	009b      	lsls	r3, r3, #2
 8009eaa:	3310      	adds	r3, #16
 8009eac:	687a      	ldr	r2, [r7, #4]
 8009eae:	4413      	add	r3, r2
 8009eb0:	3304      	adds	r3, #4
 8009eb2:	e00b      	b.n	8009ecc <USBD_StdEPReq+0x23c>
              &pdev->ep_out[ep_addr & 0x7FU];
 8009eb4:	7bbb      	ldrb	r3, [r7, #14]
 8009eb6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009eba:	4613      	mov	r3, r2
 8009ebc:	009b      	lsls	r3, r3, #2
 8009ebe:	4413      	add	r3, r2
 8009ec0:	009b      	lsls	r3, r3, #2
 8009ec2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009ec6:	687a      	ldr	r2, [r7, #4]
 8009ec8:	4413      	add	r3, r2
 8009eca:	3304      	adds	r3, #4
 8009ecc:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8009ece:	7bbb      	ldrb	r3, [r7, #14]
 8009ed0:	2b00      	cmp	r3, #0
 8009ed2:	d002      	beq.n	8009eda <USBD_StdEPReq+0x24a>
 8009ed4:	7bbb      	ldrb	r3, [r7, #14]
 8009ed6:	2b80      	cmp	r3, #128	; 0x80
 8009ed8:	d103      	bne.n	8009ee2 <USBD_StdEPReq+0x252>
          {
            pep->status = 0x0000U;
 8009eda:	68bb      	ldr	r3, [r7, #8]
 8009edc:	2200      	movs	r2, #0
 8009ede:	601a      	str	r2, [r3, #0]
 8009ee0:	e00e      	b.n	8009f00 <USBD_StdEPReq+0x270>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8009ee2:	7bbb      	ldrb	r3, [r7, #14]
 8009ee4:	4619      	mov	r1, r3
 8009ee6:	6878      	ldr	r0, [r7, #4]
 8009ee8:	f001 f87c 	bl	800afe4 <USBD_LL_IsStallEP>
 8009eec:	4603      	mov	r3, r0
 8009eee:	2b00      	cmp	r3, #0
 8009ef0:	d003      	beq.n	8009efa <USBD_StdEPReq+0x26a>
          {
            pep->status = 0x0001U;
 8009ef2:	68bb      	ldr	r3, [r7, #8]
 8009ef4:	2201      	movs	r2, #1
 8009ef6:	601a      	str	r2, [r3, #0]
 8009ef8:	e002      	b.n	8009f00 <USBD_StdEPReq+0x270>
          }
          else
          {
            pep->status = 0x0000U;
 8009efa:	68bb      	ldr	r3, [r7, #8]
 8009efc:	2200      	movs	r2, #0
 8009efe:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009f00:	68bb      	ldr	r3, [r7, #8]
 8009f02:	2202      	movs	r2, #2
 8009f04:	4619      	mov	r1, r3
 8009f06:	6878      	ldr	r0, [r7, #4]
 8009f08:	f000 fbaf 	bl	800a66a <USBD_CtlSendData>
          break;
 8009f0c:	e004      	b.n	8009f18 <USBD_StdEPReq+0x288>

      default:
        USBD_CtlError(pdev, req);
 8009f0e:	6839      	ldr	r1, [r7, #0]
 8009f10:	6878      	ldr	r0, [r7, #4]
 8009f12:	f000 fb39 	bl	800a588 <USBD_CtlError>
        break;
 8009f16:	bf00      	nop
      }
      break;
 8009f18:	e004      	b.n	8009f24 <USBD_StdEPReq+0x294>

    default:
      USBD_CtlError(pdev, req);
 8009f1a:	6839      	ldr	r1, [r7, #0]
 8009f1c:	6878      	ldr	r0, [r7, #4]
 8009f1e:	f000 fb33 	bl	800a588 <USBD_CtlError>
      break;
 8009f22:	bf00      	nop
    }
    break;
 8009f24:	e004      	b.n	8009f30 <USBD_StdEPReq+0x2a0>

  default:
    USBD_CtlError(pdev, req);
 8009f26:	6839      	ldr	r1, [r7, #0]
 8009f28:	6878      	ldr	r0, [r7, #4]
 8009f2a:	f000 fb2d 	bl	800a588 <USBD_CtlError>
    break;
 8009f2e:	bf00      	nop
  }

  return ret;
 8009f30:	7bfb      	ldrb	r3, [r7, #15]
}
 8009f32:	4618      	mov	r0, r3
 8009f34:	3710      	adds	r7, #16
 8009f36:	46bd      	mov	sp, r7
 8009f38:	bd80      	pop	{r7, pc}
	...

08009f3c <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009f3c:	b580      	push	{r7, lr}
 8009f3e:	b084      	sub	sp, #16
 8009f40:	af00      	add	r7, sp, #0
 8009f42:	6078      	str	r0, [r7, #4]
 8009f44:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009f46:	2300      	movs	r3, #0
 8009f48:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8009f4a:	2300      	movs	r3, #0
 8009f4c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8009f4e:	2300      	movs	r3, #0
 8009f50:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8009f52:	683b      	ldr	r3, [r7, #0]
 8009f54:	885b      	ldrh	r3, [r3, #2]
 8009f56:	0a1b      	lsrs	r3, r3, #8
 8009f58:	b29b      	uxth	r3, r3
 8009f5a:	3b01      	subs	r3, #1
 8009f5c:	2b06      	cmp	r3, #6
 8009f5e:	f200 8128 	bhi.w	800a1b2 <USBD_GetDescriptor+0x276>
 8009f62:	a201      	add	r2, pc, #4	; (adr r2, 8009f68 <USBD_GetDescriptor+0x2c>)
 8009f64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f68:	08009f85 	.word	0x08009f85
 8009f6c:	08009f9d 	.word	0x08009f9d
 8009f70:	08009fdd 	.word	0x08009fdd
 8009f74:	0800a1b3 	.word	0x0800a1b3
 8009f78:	0800a1b3 	.word	0x0800a1b3
 8009f7c:	0800a153 	.word	0x0800a153
 8009f80:	0800a17f 	.word	0x0800a17f
      err++;
    }
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009f8a:	681b      	ldr	r3, [r3, #0]
 8009f8c:	687a      	ldr	r2, [r7, #4]
 8009f8e:	7c12      	ldrb	r2, [r2, #16]
 8009f90:	f107 0108 	add.w	r1, r7, #8
 8009f94:	4610      	mov	r0, r2
 8009f96:	4798      	blx	r3
 8009f98:	60f8      	str	r0, [r7, #12]
    break;
 8009f9a:	e112      	b.n	800a1c2 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	7c1b      	ldrb	r3, [r3, #16]
 8009fa0:	2b00      	cmp	r3, #0
 8009fa2:	d10d      	bne.n	8009fc0 <USBD_GetDescriptor+0x84>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009faa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009fac:	f107 0208 	add.w	r2, r7, #8
 8009fb0:	4610      	mov	r0, r2
 8009fb2:	4798      	blx	r3
 8009fb4:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009fb6:	68fb      	ldr	r3, [r7, #12]
 8009fb8:	3301      	adds	r3, #1
 8009fba:	2202      	movs	r2, #2
 8009fbc:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 8009fbe:	e100      	b.n	800a1c2 <USBD_GetDescriptor+0x286>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009fc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009fc8:	f107 0208 	add.w	r2, r7, #8
 8009fcc:	4610      	mov	r0, r2
 8009fce:	4798      	blx	r3
 8009fd0:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009fd2:	68fb      	ldr	r3, [r7, #12]
 8009fd4:	3301      	adds	r3, #1
 8009fd6:	2202      	movs	r2, #2
 8009fd8:	701a      	strb	r2, [r3, #0]
    break;
 8009fda:	e0f2      	b.n	800a1c2 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 8009fdc:	683b      	ldr	r3, [r7, #0]
 8009fde:	885b      	ldrh	r3, [r3, #2]
 8009fe0:	b2db      	uxtb	r3, r3
 8009fe2:	2b05      	cmp	r3, #5
 8009fe4:	f200 80ac 	bhi.w	800a140 <USBD_GetDescriptor+0x204>
 8009fe8:	a201      	add	r2, pc, #4	; (adr r2, 8009ff0 <USBD_GetDescriptor+0xb4>)
 8009fea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009fee:	bf00      	nop
 8009ff0:	0800a009 	.word	0x0800a009
 8009ff4:	0800a03d 	.word	0x0800a03d
 8009ff8:	0800a071 	.word	0x0800a071
 8009ffc:	0800a0a5 	.word	0x0800a0a5
 800a000:	0800a0d9 	.word	0x0800a0d9
 800a004:	0800a10d 	.word	0x0800a10d
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a00e:	685b      	ldr	r3, [r3, #4]
 800a010:	2b00      	cmp	r3, #0
 800a012:	d00b      	beq.n	800a02c <USBD_GetDescriptor+0xf0>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a01a:	685b      	ldr	r3, [r3, #4]
 800a01c:	687a      	ldr	r2, [r7, #4]
 800a01e:	7c12      	ldrb	r2, [r2, #16]
 800a020:	f107 0108 	add.w	r1, r7, #8
 800a024:	4610      	mov	r0, r2
 800a026:	4798      	blx	r3
 800a028:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a02a:	e091      	b.n	800a150 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800a02c:	6839      	ldr	r1, [r7, #0]
 800a02e:	6878      	ldr	r0, [r7, #4]
 800a030:	f000 faaa 	bl	800a588 <USBD_CtlError>
        err++;
 800a034:	7afb      	ldrb	r3, [r7, #11]
 800a036:	3301      	adds	r3, #1
 800a038:	72fb      	strb	r3, [r7, #11]
      break;
 800a03a:	e089      	b.n	800a150 <USBD_GetDescriptor+0x214>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a042:	689b      	ldr	r3, [r3, #8]
 800a044:	2b00      	cmp	r3, #0
 800a046:	d00b      	beq.n	800a060 <USBD_GetDescriptor+0x124>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a04e:	689b      	ldr	r3, [r3, #8]
 800a050:	687a      	ldr	r2, [r7, #4]
 800a052:	7c12      	ldrb	r2, [r2, #16]
 800a054:	f107 0108 	add.w	r1, r7, #8
 800a058:	4610      	mov	r0, r2
 800a05a:	4798      	blx	r3
 800a05c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a05e:	e077      	b.n	800a150 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800a060:	6839      	ldr	r1, [r7, #0]
 800a062:	6878      	ldr	r0, [r7, #4]
 800a064:	f000 fa90 	bl	800a588 <USBD_CtlError>
        err++;
 800a068:	7afb      	ldrb	r3, [r7, #11]
 800a06a:	3301      	adds	r3, #1
 800a06c:	72fb      	strb	r3, [r7, #11]
      break;
 800a06e:	e06f      	b.n	800a150 <USBD_GetDescriptor+0x214>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a076:	68db      	ldr	r3, [r3, #12]
 800a078:	2b00      	cmp	r3, #0
 800a07a:	d00b      	beq.n	800a094 <USBD_GetDescriptor+0x158>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a082:	68db      	ldr	r3, [r3, #12]
 800a084:	687a      	ldr	r2, [r7, #4]
 800a086:	7c12      	ldrb	r2, [r2, #16]
 800a088:	f107 0108 	add.w	r1, r7, #8
 800a08c:	4610      	mov	r0, r2
 800a08e:	4798      	blx	r3
 800a090:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a092:	e05d      	b.n	800a150 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800a094:	6839      	ldr	r1, [r7, #0]
 800a096:	6878      	ldr	r0, [r7, #4]
 800a098:	f000 fa76 	bl	800a588 <USBD_CtlError>
        err++;
 800a09c:	7afb      	ldrb	r3, [r7, #11]
 800a09e:	3301      	adds	r3, #1
 800a0a0:	72fb      	strb	r3, [r7, #11]
      break;
 800a0a2:	e055      	b.n	800a150 <USBD_GetDescriptor+0x214>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a0aa:	691b      	ldr	r3, [r3, #16]
 800a0ac:	2b00      	cmp	r3, #0
 800a0ae:	d00b      	beq.n	800a0c8 <USBD_GetDescriptor+0x18c>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a0b6:	691b      	ldr	r3, [r3, #16]
 800a0b8:	687a      	ldr	r2, [r7, #4]
 800a0ba:	7c12      	ldrb	r2, [r2, #16]
 800a0bc:	f107 0108 	add.w	r1, r7, #8
 800a0c0:	4610      	mov	r0, r2
 800a0c2:	4798      	blx	r3
 800a0c4:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a0c6:	e043      	b.n	800a150 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800a0c8:	6839      	ldr	r1, [r7, #0]
 800a0ca:	6878      	ldr	r0, [r7, #4]
 800a0cc:	f000 fa5c 	bl	800a588 <USBD_CtlError>
        err++;
 800a0d0:	7afb      	ldrb	r3, [r7, #11]
 800a0d2:	3301      	adds	r3, #1
 800a0d4:	72fb      	strb	r3, [r7, #11]
      break;
 800a0d6:	e03b      	b.n	800a150 <USBD_GetDescriptor+0x214>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a0de:	695b      	ldr	r3, [r3, #20]
 800a0e0:	2b00      	cmp	r3, #0
 800a0e2:	d00b      	beq.n	800a0fc <USBD_GetDescriptor+0x1c0>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a0ea:	695b      	ldr	r3, [r3, #20]
 800a0ec:	687a      	ldr	r2, [r7, #4]
 800a0ee:	7c12      	ldrb	r2, [r2, #16]
 800a0f0:	f107 0108 	add.w	r1, r7, #8
 800a0f4:	4610      	mov	r0, r2
 800a0f6:	4798      	blx	r3
 800a0f8:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a0fa:	e029      	b.n	800a150 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800a0fc:	6839      	ldr	r1, [r7, #0]
 800a0fe:	6878      	ldr	r0, [r7, #4]
 800a100:	f000 fa42 	bl	800a588 <USBD_CtlError>
        err++;
 800a104:	7afb      	ldrb	r3, [r7, #11]
 800a106:	3301      	adds	r3, #1
 800a108:	72fb      	strb	r3, [r7, #11]
      break;
 800a10a:	e021      	b.n	800a150 <USBD_GetDescriptor+0x214>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a112:	699b      	ldr	r3, [r3, #24]
 800a114:	2b00      	cmp	r3, #0
 800a116:	d00b      	beq.n	800a130 <USBD_GetDescriptor+0x1f4>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a11e:	699b      	ldr	r3, [r3, #24]
 800a120:	687a      	ldr	r2, [r7, #4]
 800a122:	7c12      	ldrb	r2, [r2, #16]
 800a124:	f107 0108 	add.w	r1, r7, #8
 800a128:	4610      	mov	r0, r2
 800a12a:	4798      	blx	r3
 800a12c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a12e:	e00f      	b.n	800a150 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800a130:	6839      	ldr	r1, [r7, #0]
 800a132:	6878      	ldr	r0, [r7, #4]
 800a134:	f000 fa28 	bl	800a588 <USBD_CtlError>
        err++;
 800a138:	7afb      	ldrb	r3, [r7, #11]
 800a13a:	3301      	adds	r3, #1
 800a13c:	72fb      	strb	r3, [r7, #11]
      break;
 800a13e:	e007      	b.n	800a150 <USBD_GetDescriptor+0x214>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 800a140:	6839      	ldr	r1, [r7, #0]
 800a142:	6878      	ldr	r0, [r7, #4]
 800a144:	f000 fa20 	bl	800a588 <USBD_CtlError>
      err++;
 800a148:	7afb      	ldrb	r3, [r7, #11]
 800a14a:	3301      	adds	r3, #1
 800a14c:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 800a14e:	bf00      	nop
    }
    break;
 800a150:	e037      	b.n	800a1c2 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	7c1b      	ldrb	r3, [r3, #16]
 800a156:	2b00      	cmp	r3, #0
 800a158:	d109      	bne.n	800a16e <USBD_GetDescriptor+0x232>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a160:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a162:	f107 0208 	add.w	r2, r7, #8
 800a166:	4610      	mov	r0, r2
 800a168:	4798      	blx	r3
 800a16a:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 800a16c:	e029      	b.n	800a1c2 <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 800a16e:	6839      	ldr	r1, [r7, #0]
 800a170:	6878      	ldr	r0, [r7, #4]
 800a172:	f000 fa09 	bl	800a588 <USBD_CtlError>
      err++;
 800a176:	7afb      	ldrb	r3, [r7, #11]
 800a178:	3301      	adds	r3, #1
 800a17a:	72fb      	strb	r3, [r7, #11]
    break;
 800a17c:	e021      	b.n	800a1c2 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	7c1b      	ldrb	r3, [r3, #16]
 800a182:	2b00      	cmp	r3, #0
 800a184:	d10d      	bne.n	800a1a2 <USBD_GetDescriptor+0x266>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a18c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a18e:	f107 0208 	add.w	r2, r7, #8
 800a192:	4610      	mov	r0, r2
 800a194:	4798      	blx	r3
 800a196:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800a198:	68fb      	ldr	r3, [r7, #12]
 800a19a:	3301      	adds	r3, #1
 800a19c:	2207      	movs	r2, #7
 800a19e:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 800a1a0:	e00f      	b.n	800a1c2 <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 800a1a2:	6839      	ldr	r1, [r7, #0]
 800a1a4:	6878      	ldr	r0, [r7, #4]
 800a1a6:	f000 f9ef 	bl	800a588 <USBD_CtlError>
      err++;
 800a1aa:	7afb      	ldrb	r3, [r7, #11]
 800a1ac:	3301      	adds	r3, #1
 800a1ae:	72fb      	strb	r3, [r7, #11]
    break;
 800a1b0:	e007      	b.n	800a1c2 <USBD_GetDescriptor+0x286>

  default:
    USBD_CtlError(pdev, req);
 800a1b2:	6839      	ldr	r1, [r7, #0]
 800a1b4:	6878      	ldr	r0, [r7, #4]
 800a1b6:	f000 f9e7 	bl	800a588 <USBD_CtlError>
    err++;
 800a1ba:	7afb      	ldrb	r3, [r7, #11]
 800a1bc:	3301      	adds	r3, #1
 800a1be:	72fb      	strb	r3, [r7, #11]
    break;
 800a1c0:	bf00      	nop
  }

  if (err != 0U)
 800a1c2:	7afb      	ldrb	r3, [r7, #11]
 800a1c4:	2b00      	cmp	r3, #0
 800a1c6:	d11e      	bne.n	800a206 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 800a1c8:	683b      	ldr	r3, [r7, #0]
 800a1ca:	88db      	ldrh	r3, [r3, #6]
 800a1cc:	2b00      	cmp	r3, #0
 800a1ce:	d016      	beq.n	800a1fe <USBD_GetDescriptor+0x2c2>
    {
      if (len != 0U)
 800a1d0:	893b      	ldrh	r3, [r7, #8]
 800a1d2:	2b00      	cmp	r3, #0
 800a1d4:	d00e      	beq.n	800a1f4 <USBD_GetDescriptor+0x2b8>
      {
        len = MIN(len, req->wLength);
 800a1d6:	683b      	ldr	r3, [r7, #0]
 800a1d8:	88da      	ldrh	r2, [r3, #6]
 800a1da:	893b      	ldrh	r3, [r7, #8]
 800a1dc:	4293      	cmp	r3, r2
 800a1de:	bf28      	it	cs
 800a1e0:	4613      	movcs	r3, r2
 800a1e2:	b29b      	uxth	r3, r3
 800a1e4:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 800a1e6:	893b      	ldrh	r3, [r7, #8]
 800a1e8:	461a      	mov	r2, r3
 800a1ea:	68f9      	ldr	r1, [r7, #12]
 800a1ec:	6878      	ldr	r0, [r7, #4]
 800a1ee:	f000 fa3c 	bl	800a66a <USBD_CtlSendData>
 800a1f2:	e009      	b.n	800a208 <USBD_GetDescriptor+0x2cc>
      }
      else
      {
        USBD_CtlError(pdev, req);
 800a1f4:	6839      	ldr	r1, [r7, #0]
 800a1f6:	6878      	ldr	r0, [r7, #4]
 800a1f8:	f000 f9c6 	bl	800a588 <USBD_CtlError>
 800a1fc:	e004      	b.n	800a208 <USBD_GetDescriptor+0x2cc>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 800a1fe:	6878      	ldr	r0, [r7, #4]
 800a200:	f000 fa8d 	bl	800a71e <USBD_CtlSendStatus>
 800a204:	e000      	b.n	800a208 <USBD_GetDescriptor+0x2cc>
    return;
 800a206:	bf00      	nop
    }
  }
}
 800a208:	3710      	adds	r7, #16
 800a20a:	46bd      	mov	sp, r7
 800a20c:	bd80      	pop	{r7, pc}
 800a20e:	bf00      	nop

0800a210 <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a210:	b580      	push	{r7, lr}
 800a212:	b084      	sub	sp, #16
 800a214:	af00      	add	r7, sp, #0
 800a216:	6078      	str	r0, [r7, #4]
 800a218:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800a21a:	683b      	ldr	r3, [r7, #0]
 800a21c:	889b      	ldrh	r3, [r3, #4]
 800a21e:	2b00      	cmp	r3, #0
 800a220:	d130      	bne.n	800a284 <USBD_SetAddress+0x74>
 800a222:	683b      	ldr	r3, [r7, #0]
 800a224:	88db      	ldrh	r3, [r3, #6]
 800a226:	2b00      	cmp	r3, #0
 800a228:	d12c      	bne.n	800a284 <USBD_SetAddress+0x74>
 800a22a:	683b      	ldr	r3, [r7, #0]
 800a22c:	885b      	ldrh	r3, [r3, #2]
 800a22e:	2b7f      	cmp	r3, #127	; 0x7f
 800a230:	d828      	bhi.n	800a284 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800a232:	683b      	ldr	r3, [r7, #0]
 800a234:	885b      	ldrh	r3, [r3, #2]
 800a236:	b2db      	uxtb	r3, r3
 800a238:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a23c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a244:	2b03      	cmp	r3, #3
 800a246:	d104      	bne.n	800a252 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800a248:	6839      	ldr	r1, [r7, #0]
 800a24a:	6878      	ldr	r0, [r7, #4]
 800a24c:	f000 f99c 	bl	800a588 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a250:	e01c      	b.n	800a28c <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	7bfa      	ldrb	r2, [r7, #15]
 800a256:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800a25a:	7bfb      	ldrb	r3, [r7, #15]
 800a25c:	4619      	mov	r1, r3
 800a25e:	6878      	ldr	r0, [r7, #4]
 800a260:	f000 feec 	bl	800b03c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800a264:	6878      	ldr	r0, [r7, #4]
 800a266:	f000 fa5a 	bl	800a71e <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800a26a:	7bfb      	ldrb	r3, [r7, #15]
 800a26c:	2b00      	cmp	r3, #0
 800a26e:	d004      	beq.n	800a27a <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	2202      	movs	r2, #2
 800a274:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a278:	e008      	b.n	800a28c <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	2201      	movs	r2, #1
 800a27e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a282:	e003      	b.n	800a28c <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800a284:	6839      	ldr	r1, [r7, #0]
 800a286:	6878      	ldr	r0, [r7, #4]
 800a288:	f000 f97e 	bl	800a588 <USBD_CtlError>
  }
}
 800a28c:	bf00      	nop
 800a28e:	3710      	adds	r7, #16
 800a290:	46bd      	mov	sp, r7
 800a292:	bd80      	pop	{r7, pc}

0800a294 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a294:	b580      	push	{r7, lr}
 800a296:	b084      	sub	sp, #16
 800a298:	af00      	add	r7, sp, #0
 800a29a:	6078      	str	r0, [r7, #4]
 800a29c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a29e:	2300      	movs	r3, #0
 800a2a0:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800a2a2:	683b      	ldr	r3, [r7, #0]
 800a2a4:	885b      	ldrh	r3, [r3, #2]
 800a2a6:	b2da      	uxtb	r2, r3
 800a2a8:	4b4b      	ldr	r3, [pc, #300]	; (800a3d8 <USBD_SetConfig+0x144>)
 800a2aa:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800a2ac:	4b4a      	ldr	r3, [pc, #296]	; (800a3d8 <USBD_SetConfig+0x144>)
 800a2ae:	781b      	ldrb	r3, [r3, #0]
 800a2b0:	2b01      	cmp	r3, #1
 800a2b2:	d905      	bls.n	800a2c0 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800a2b4:	6839      	ldr	r1, [r7, #0]
 800a2b6:	6878      	ldr	r0, [r7, #4]
 800a2b8:	f000 f966 	bl	800a588 <USBD_CtlError>
    return USBD_FAIL;
 800a2bc:	2303      	movs	r3, #3
 800a2be:	e087      	b.n	800a3d0 <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a2c6:	2b02      	cmp	r3, #2
 800a2c8:	d002      	beq.n	800a2d0 <USBD_SetConfig+0x3c>
 800a2ca:	2b03      	cmp	r3, #3
 800a2cc:	d025      	beq.n	800a31a <USBD_SetConfig+0x86>
 800a2ce:	e071      	b.n	800a3b4 <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 800a2d0:	4b41      	ldr	r3, [pc, #260]	; (800a3d8 <USBD_SetConfig+0x144>)
 800a2d2:	781b      	ldrb	r3, [r3, #0]
 800a2d4:	2b00      	cmp	r3, #0
 800a2d6:	d01c      	beq.n	800a312 <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 800a2d8:	4b3f      	ldr	r3, [pc, #252]	; (800a3d8 <USBD_SetConfig+0x144>)
 800a2da:	781b      	ldrb	r3, [r3, #0]
 800a2dc:	461a      	mov	r2, r3
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 800a2e2:	4b3d      	ldr	r3, [pc, #244]	; (800a3d8 <USBD_SetConfig+0x144>)
 800a2e4:	781b      	ldrb	r3, [r3, #0]
 800a2e6:	4619      	mov	r1, r3
 800a2e8:	6878      	ldr	r0, [r7, #4]
 800a2ea:	f7ff f9a7 	bl	800963c <USBD_SetClassConfig>
 800a2ee:	4603      	mov	r3, r0
 800a2f0:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 800a2f2:	7bfb      	ldrb	r3, [r7, #15]
 800a2f4:	2b00      	cmp	r3, #0
 800a2f6:	d004      	beq.n	800a302 <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 800a2f8:	6839      	ldr	r1, [r7, #0]
 800a2fa:	6878      	ldr	r0, [r7, #4]
 800a2fc:	f000 f944 	bl	800a588 <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 800a300:	e065      	b.n	800a3ce <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 800a302:	6878      	ldr	r0, [r7, #4]
 800a304:	f000 fa0b 	bl	800a71e <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	2203      	movs	r2, #3
 800a30c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 800a310:	e05d      	b.n	800a3ce <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 800a312:	6878      	ldr	r0, [r7, #4]
 800a314:	f000 fa03 	bl	800a71e <USBD_CtlSendStatus>
    break;
 800a318:	e059      	b.n	800a3ce <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 800a31a:	4b2f      	ldr	r3, [pc, #188]	; (800a3d8 <USBD_SetConfig+0x144>)
 800a31c:	781b      	ldrb	r3, [r3, #0]
 800a31e:	2b00      	cmp	r3, #0
 800a320:	d112      	bne.n	800a348 <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	2202      	movs	r2, #2
 800a326:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 800a32a:	4b2b      	ldr	r3, [pc, #172]	; (800a3d8 <USBD_SetConfig+0x144>)
 800a32c:	781b      	ldrb	r3, [r3, #0]
 800a32e:	461a      	mov	r2, r3
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800a334:	4b28      	ldr	r3, [pc, #160]	; (800a3d8 <USBD_SetConfig+0x144>)
 800a336:	781b      	ldrb	r3, [r3, #0]
 800a338:	4619      	mov	r1, r3
 800a33a:	6878      	ldr	r0, [r7, #4]
 800a33c:	f7ff f99a 	bl	8009674 <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 800a340:	6878      	ldr	r0, [r7, #4]
 800a342:	f000 f9ec 	bl	800a71e <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 800a346:	e042      	b.n	800a3ce <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 800a348:	4b23      	ldr	r3, [pc, #140]	; (800a3d8 <USBD_SetConfig+0x144>)
 800a34a:	781b      	ldrb	r3, [r3, #0]
 800a34c:	461a      	mov	r2, r3
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	685b      	ldr	r3, [r3, #4]
 800a352:	429a      	cmp	r2, r3
 800a354:	d02a      	beq.n	800a3ac <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	685b      	ldr	r3, [r3, #4]
 800a35a:	b2db      	uxtb	r3, r3
 800a35c:	4619      	mov	r1, r3
 800a35e:	6878      	ldr	r0, [r7, #4]
 800a360:	f7ff f988 	bl	8009674 <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 800a364:	4b1c      	ldr	r3, [pc, #112]	; (800a3d8 <USBD_SetConfig+0x144>)
 800a366:	781b      	ldrb	r3, [r3, #0]
 800a368:	461a      	mov	r2, r3
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 800a36e:	4b1a      	ldr	r3, [pc, #104]	; (800a3d8 <USBD_SetConfig+0x144>)
 800a370:	781b      	ldrb	r3, [r3, #0]
 800a372:	4619      	mov	r1, r3
 800a374:	6878      	ldr	r0, [r7, #4]
 800a376:	f7ff f961 	bl	800963c <USBD_SetClassConfig>
 800a37a:	4603      	mov	r3, r0
 800a37c:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 800a37e:	7bfb      	ldrb	r3, [r7, #15]
 800a380:	2b00      	cmp	r3, #0
 800a382:	d00f      	beq.n	800a3a4 <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 800a384:	6839      	ldr	r1, [r7, #0]
 800a386:	6878      	ldr	r0, [r7, #4]
 800a388:	f000 f8fe 	bl	800a588 <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	685b      	ldr	r3, [r3, #4]
 800a390:	b2db      	uxtb	r3, r3
 800a392:	4619      	mov	r1, r3
 800a394:	6878      	ldr	r0, [r7, #4]
 800a396:	f7ff f96d 	bl	8009674 <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	2202      	movs	r2, #2
 800a39e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 800a3a2:	e014      	b.n	800a3ce <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 800a3a4:	6878      	ldr	r0, [r7, #4]
 800a3a6:	f000 f9ba 	bl	800a71e <USBD_CtlSendStatus>
    break;
 800a3aa:	e010      	b.n	800a3ce <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 800a3ac:	6878      	ldr	r0, [r7, #4]
 800a3ae:	f000 f9b6 	bl	800a71e <USBD_CtlSendStatus>
    break;
 800a3b2:	e00c      	b.n	800a3ce <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 800a3b4:	6839      	ldr	r1, [r7, #0]
 800a3b6:	6878      	ldr	r0, [r7, #4]
 800a3b8:	f000 f8e6 	bl	800a588 <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 800a3bc:	4b06      	ldr	r3, [pc, #24]	; (800a3d8 <USBD_SetConfig+0x144>)
 800a3be:	781b      	ldrb	r3, [r3, #0]
 800a3c0:	4619      	mov	r1, r3
 800a3c2:	6878      	ldr	r0, [r7, #4]
 800a3c4:	f7ff f956 	bl	8009674 <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 800a3c8:	2303      	movs	r3, #3
 800a3ca:	73fb      	strb	r3, [r7, #15]
    break;
 800a3cc:	bf00      	nop
  }

  return ret;
 800a3ce:	7bfb      	ldrb	r3, [r7, #15]
}
 800a3d0:	4618      	mov	r0, r3
 800a3d2:	3710      	adds	r7, #16
 800a3d4:	46bd      	mov	sp, r7
 800a3d6:	bd80      	pop	{r7, pc}
 800a3d8:	2000060c 	.word	0x2000060c

0800a3dc <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a3dc:	b580      	push	{r7, lr}
 800a3de:	b082      	sub	sp, #8
 800a3e0:	af00      	add	r7, sp, #0
 800a3e2:	6078      	str	r0, [r7, #4]
 800a3e4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800a3e6:	683b      	ldr	r3, [r7, #0]
 800a3e8:	88db      	ldrh	r3, [r3, #6]
 800a3ea:	2b01      	cmp	r3, #1
 800a3ec:	d004      	beq.n	800a3f8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800a3ee:	6839      	ldr	r1, [r7, #0]
 800a3f0:	6878      	ldr	r0, [r7, #4]
 800a3f2:	f000 f8c9 	bl	800a588 <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 800a3f6:	e021      	b.n	800a43c <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a3fe:	2b01      	cmp	r3, #1
 800a400:	db17      	blt.n	800a432 <USBD_GetConfig+0x56>
 800a402:	2b02      	cmp	r3, #2
 800a404:	dd02      	ble.n	800a40c <USBD_GetConfig+0x30>
 800a406:	2b03      	cmp	r3, #3
 800a408:	d00b      	beq.n	800a422 <USBD_GetConfig+0x46>
 800a40a:	e012      	b.n	800a432 <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	2200      	movs	r2, #0
 800a410:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	3308      	adds	r3, #8
 800a416:	2201      	movs	r2, #1
 800a418:	4619      	mov	r1, r3
 800a41a:	6878      	ldr	r0, [r7, #4]
 800a41c:	f000 f925 	bl	800a66a <USBD_CtlSendData>
      break;
 800a420:	e00c      	b.n	800a43c <USBD_GetConfig+0x60>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	3304      	adds	r3, #4
 800a426:	2201      	movs	r2, #1
 800a428:	4619      	mov	r1, r3
 800a42a:	6878      	ldr	r0, [r7, #4]
 800a42c:	f000 f91d 	bl	800a66a <USBD_CtlSendData>
      break;
 800a430:	e004      	b.n	800a43c <USBD_GetConfig+0x60>
      USBD_CtlError(pdev, req);
 800a432:	6839      	ldr	r1, [r7, #0]
 800a434:	6878      	ldr	r0, [r7, #4]
 800a436:	f000 f8a7 	bl	800a588 <USBD_CtlError>
      break;
 800a43a:	bf00      	nop
}
 800a43c:	bf00      	nop
 800a43e:	3708      	adds	r7, #8
 800a440:	46bd      	mov	sp, r7
 800a442:	bd80      	pop	{r7, pc}

0800a444 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a444:	b580      	push	{r7, lr}
 800a446:	b082      	sub	sp, #8
 800a448:	af00      	add	r7, sp, #0
 800a44a:	6078      	str	r0, [r7, #4]
 800a44c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a454:	3b01      	subs	r3, #1
 800a456:	2b02      	cmp	r3, #2
 800a458:	d81e      	bhi.n	800a498 <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 800a45a:	683b      	ldr	r3, [r7, #0]
 800a45c:	88db      	ldrh	r3, [r3, #6]
 800a45e:	2b02      	cmp	r3, #2
 800a460:	d004      	beq.n	800a46c <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 800a462:	6839      	ldr	r1, [r7, #0]
 800a464:	6878      	ldr	r0, [r7, #4]
 800a466:	f000 f88f 	bl	800a588 <USBD_CtlError>
      break;
 800a46a:	e01a      	b.n	800a4a2 <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	2201      	movs	r2, #1
 800a470:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup != 0U)
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800a478:	2b00      	cmp	r3, #0
 800a47a:	d005      	beq.n	800a488 <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	68db      	ldr	r3, [r3, #12]
 800a480:	f043 0202 	orr.w	r2, r3, #2
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	330c      	adds	r3, #12
 800a48c:	2202      	movs	r2, #2
 800a48e:	4619      	mov	r1, r3
 800a490:	6878      	ldr	r0, [r7, #4]
 800a492:	f000 f8ea 	bl	800a66a <USBD_CtlSendData>
    break;
 800a496:	e004      	b.n	800a4a2 <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 800a498:	6839      	ldr	r1, [r7, #0]
 800a49a:	6878      	ldr	r0, [r7, #4]
 800a49c:	f000 f874 	bl	800a588 <USBD_CtlError>
    break;
 800a4a0:	bf00      	nop
  }
}
 800a4a2:	bf00      	nop
 800a4a4:	3708      	adds	r7, #8
 800a4a6:	46bd      	mov	sp, r7
 800a4a8:	bd80      	pop	{r7, pc}

0800a4aa <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a4aa:	b580      	push	{r7, lr}
 800a4ac:	b082      	sub	sp, #8
 800a4ae:	af00      	add	r7, sp, #0
 800a4b0:	6078      	str	r0, [r7, #4]
 800a4b2:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a4b4:	683b      	ldr	r3, [r7, #0]
 800a4b6:	885b      	ldrh	r3, [r3, #2]
 800a4b8:	2b01      	cmp	r3, #1
 800a4ba:	d106      	bne.n	800a4ca <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	2201      	movs	r2, #1
 800a4c0:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800a4c4:	6878      	ldr	r0, [r7, #4]
 800a4c6:	f000 f92a 	bl	800a71e <USBD_CtlSendStatus>
  }
}
 800a4ca:	bf00      	nop
 800a4cc:	3708      	adds	r7, #8
 800a4ce:	46bd      	mov	sp, r7
 800a4d0:	bd80      	pop	{r7, pc}

0800a4d2 <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a4d2:	b580      	push	{r7, lr}
 800a4d4:	b082      	sub	sp, #8
 800a4d6:	af00      	add	r7, sp, #0
 800a4d8:	6078      	str	r0, [r7, #4]
 800a4da:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a4e2:	3b01      	subs	r3, #1
 800a4e4:	2b02      	cmp	r3, #2
 800a4e6:	d80b      	bhi.n	800a500 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a4e8:	683b      	ldr	r3, [r7, #0]
 800a4ea:	885b      	ldrh	r3, [r3, #2]
 800a4ec:	2b01      	cmp	r3, #1
 800a4ee:	d10c      	bne.n	800a50a <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	2200      	movs	r2, #0
 800a4f4:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800a4f8:	6878      	ldr	r0, [r7, #4]
 800a4fa:	f000 f910 	bl	800a71e <USBD_CtlSendStatus>
      }
      break;
 800a4fe:	e004      	b.n	800a50a <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800a500:	6839      	ldr	r1, [r7, #0]
 800a502:	6878      	ldr	r0, [r7, #4]
 800a504:	f000 f840 	bl	800a588 <USBD_CtlError>
      break;
 800a508:	e000      	b.n	800a50c <USBD_ClrFeature+0x3a>
      break;
 800a50a:	bf00      	nop
  }
}
 800a50c:	bf00      	nop
 800a50e:	3708      	adds	r7, #8
 800a510:	46bd      	mov	sp, r7
 800a512:	bd80      	pop	{r7, pc}

0800a514 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800a514:	b580      	push	{r7, lr}
 800a516:	b084      	sub	sp, #16
 800a518:	af00      	add	r7, sp, #0
 800a51a:	6078      	str	r0, [r7, #4]
 800a51c:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800a51e:	683b      	ldr	r3, [r7, #0]
 800a520:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800a522:	68fb      	ldr	r3, [r7, #12]
 800a524:	781a      	ldrb	r2, [r3, #0]
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800a52a:	68fb      	ldr	r3, [r7, #12]
 800a52c:	3301      	adds	r3, #1
 800a52e:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800a530:	68fb      	ldr	r3, [r7, #12]
 800a532:	781a      	ldrb	r2, [r3, #0]
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800a538:	68fb      	ldr	r3, [r7, #12]
 800a53a:	3301      	adds	r3, #1
 800a53c:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800a53e:	68f8      	ldr	r0, [r7, #12]
 800a540:	f7ff fad3 	bl	8009aea <SWAPBYTE>
 800a544:	4603      	mov	r3, r0
 800a546:	461a      	mov	r2, r3
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800a54c:	68fb      	ldr	r3, [r7, #12]
 800a54e:	3301      	adds	r3, #1
 800a550:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800a552:	68fb      	ldr	r3, [r7, #12]
 800a554:	3301      	adds	r3, #1
 800a556:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800a558:	68f8      	ldr	r0, [r7, #12]
 800a55a:	f7ff fac6 	bl	8009aea <SWAPBYTE>
 800a55e:	4603      	mov	r3, r0
 800a560:	461a      	mov	r2, r3
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800a566:	68fb      	ldr	r3, [r7, #12]
 800a568:	3301      	adds	r3, #1
 800a56a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800a56c:	68fb      	ldr	r3, [r7, #12]
 800a56e:	3301      	adds	r3, #1
 800a570:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800a572:	68f8      	ldr	r0, [r7, #12]
 800a574:	f7ff fab9 	bl	8009aea <SWAPBYTE>
 800a578:	4603      	mov	r3, r0
 800a57a:	461a      	mov	r2, r3
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	80da      	strh	r2, [r3, #6]
}
 800a580:	bf00      	nop
 800a582:	3710      	adds	r7, #16
 800a584:	46bd      	mov	sp, r7
 800a586:	bd80      	pop	{r7, pc}

0800a588 <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a588:	b580      	push	{r7, lr}
 800a58a:	b082      	sub	sp, #8
 800a58c:	af00      	add	r7, sp, #0
 800a58e:	6078      	str	r0, [r7, #4]
 800a590:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800a592:	2180      	movs	r1, #128	; 0x80
 800a594:	6878      	ldr	r0, [r7, #4]
 800a596:	f000 fce7 	bl	800af68 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800a59a:	2100      	movs	r1, #0
 800a59c:	6878      	ldr	r0, [r7, #4]
 800a59e:	f000 fce3 	bl	800af68 <USBD_LL_StallEP>
}
 800a5a2:	bf00      	nop
 800a5a4:	3708      	adds	r7, #8
 800a5a6:	46bd      	mov	sp, r7
 800a5a8:	bd80      	pop	{r7, pc}

0800a5aa <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800a5aa:	b580      	push	{r7, lr}
 800a5ac:	b086      	sub	sp, #24
 800a5ae:	af00      	add	r7, sp, #0
 800a5b0:	60f8      	str	r0, [r7, #12]
 800a5b2:	60b9      	str	r1, [r7, #8]
 800a5b4:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800a5b6:	2300      	movs	r3, #0
 800a5b8:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800a5ba:	68fb      	ldr	r3, [r7, #12]
 800a5bc:	2b00      	cmp	r3, #0
 800a5be:	d036      	beq.n	800a62e <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800a5c0:	68fb      	ldr	r3, [r7, #12]
 800a5c2:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800a5c4:	6938      	ldr	r0, [r7, #16]
 800a5c6:	f000 f836 	bl	800a636 <USBD_GetLen>
 800a5ca:	4603      	mov	r3, r0
 800a5cc:	3301      	adds	r3, #1
 800a5ce:	b29b      	uxth	r3, r3
 800a5d0:	005b      	lsls	r3, r3, #1
 800a5d2:	b29a      	uxth	r2, r3
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800a5d8:	7dfb      	ldrb	r3, [r7, #23]
 800a5da:	68ba      	ldr	r2, [r7, #8]
 800a5dc:	4413      	add	r3, r2
 800a5de:	687a      	ldr	r2, [r7, #4]
 800a5e0:	7812      	ldrb	r2, [r2, #0]
 800a5e2:	701a      	strb	r2, [r3, #0]
  idx++;
 800a5e4:	7dfb      	ldrb	r3, [r7, #23]
 800a5e6:	3301      	adds	r3, #1
 800a5e8:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800a5ea:	7dfb      	ldrb	r3, [r7, #23]
 800a5ec:	68ba      	ldr	r2, [r7, #8]
 800a5ee:	4413      	add	r3, r2
 800a5f0:	2203      	movs	r2, #3
 800a5f2:	701a      	strb	r2, [r3, #0]
  idx++;
 800a5f4:	7dfb      	ldrb	r3, [r7, #23]
 800a5f6:	3301      	adds	r3, #1
 800a5f8:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800a5fa:	e013      	b.n	800a624 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800a5fc:	7dfb      	ldrb	r3, [r7, #23]
 800a5fe:	68ba      	ldr	r2, [r7, #8]
 800a600:	4413      	add	r3, r2
 800a602:	693a      	ldr	r2, [r7, #16]
 800a604:	7812      	ldrb	r2, [r2, #0]
 800a606:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800a608:	693b      	ldr	r3, [r7, #16]
 800a60a:	3301      	adds	r3, #1
 800a60c:	613b      	str	r3, [r7, #16]
    idx++;
 800a60e:	7dfb      	ldrb	r3, [r7, #23]
 800a610:	3301      	adds	r3, #1
 800a612:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800a614:	7dfb      	ldrb	r3, [r7, #23]
 800a616:	68ba      	ldr	r2, [r7, #8]
 800a618:	4413      	add	r3, r2
 800a61a:	2200      	movs	r2, #0
 800a61c:	701a      	strb	r2, [r3, #0]
    idx++;
 800a61e:	7dfb      	ldrb	r3, [r7, #23]
 800a620:	3301      	adds	r3, #1
 800a622:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800a624:	693b      	ldr	r3, [r7, #16]
 800a626:	781b      	ldrb	r3, [r3, #0]
 800a628:	2b00      	cmp	r3, #0
 800a62a:	d1e7      	bne.n	800a5fc <USBD_GetString+0x52>
 800a62c:	e000      	b.n	800a630 <USBD_GetString+0x86>
    return;
 800a62e:	bf00      	nop
  }
}
 800a630:	3718      	adds	r7, #24
 800a632:	46bd      	mov	sp, r7
 800a634:	bd80      	pop	{r7, pc}

0800a636 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800a636:	b480      	push	{r7}
 800a638:	b085      	sub	sp, #20
 800a63a:	af00      	add	r7, sp, #0
 800a63c:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800a63e:	2300      	movs	r3, #0
 800a640:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800a646:	e005      	b.n	800a654 <USBD_GetLen+0x1e>
  {
    len++;
 800a648:	7bfb      	ldrb	r3, [r7, #15]
 800a64a:	3301      	adds	r3, #1
 800a64c:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800a64e:	68bb      	ldr	r3, [r7, #8]
 800a650:	3301      	adds	r3, #1
 800a652:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800a654:	68bb      	ldr	r3, [r7, #8]
 800a656:	781b      	ldrb	r3, [r3, #0]
 800a658:	2b00      	cmp	r3, #0
 800a65a:	d1f5      	bne.n	800a648 <USBD_GetLen+0x12>
  }

  return len;
 800a65c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a65e:	4618      	mov	r0, r3
 800a660:	3714      	adds	r7, #20
 800a662:	46bd      	mov	sp, r7
 800a664:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a668:	4770      	bx	lr

0800a66a <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800a66a:	b580      	push	{r7, lr}
 800a66c:	b084      	sub	sp, #16
 800a66e:	af00      	add	r7, sp, #0
 800a670:	60f8      	str	r0, [r7, #12]
 800a672:	60b9      	str	r1, [r7, #8]
 800a674:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800a676:	68fb      	ldr	r3, [r7, #12]
 800a678:	2202      	movs	r2, #2
 800a67a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800a67e:	68fb      	ldr	r3, [r7, #12]
 800a680:	687a      	ldr	r2, [r7, #4]
 800a682:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 800a684:	68fb      	ldr	r3, [r7, #12]
 800a686:	687a      	ldr	r2, [r7, #4]
 800a688:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	68ba      	ldr	r2, [r7, #8]
 800a68e:	2100      	movs	r1, #0
 800a690:	68f8      	ldr	r0, [r7, #12]
 800a692:	f000 fcf2 	bl	800b07a <USBD_LL_Transmit>

  return USBD_OK;
 800a696:	2300      	movs	r3, #0
}
 800a698:	4618      	mov	r0, r3
 800a69a:	3710      	adds	r7, #16
 800a69c:	46bd      	mov	sp, r7
 800a69e:	bd80      	pop	{r7, pc}

0800a6a0 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800a6a0:	b580      	push	{r7, lr}
 800a6a2:	b084      	sub	sp, #16
 800a6a4:	af00      	add	r7, sp, #0
 800a6a6:	60f8      	str	r0, [r7, #12]
 800a6a8:	60b9      	str	r1, [r7, #8]
 800a6aa:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	68ba      	ldr	r2, [r7, #8]
 800a6b0:	2100      	movs	r1, #0
 800a6b2:	68f8      	ldr	r0, [r7, #12]
 800a6b4:	f000 fce1 	bl	800b07a <USBD_LL_Transmit>

  return USBD_OK;
 800a6b8:	2300      	movs	r3, #0
}
 800a6ba:	4618      	mov	r0, r3
 800a6bc:	3710      	adds	r7, #16
 800a6be:	46bd      	mov	sp, r7
 800a6c0:	bd80      	pop	{r7, pc}

0800a6c2 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800a6c2:	b580      	push	{r7, lr}
 800a6c4:	b084      	sub	sp, #16
 800a6c6:	af00      	add	r7, sp, #0
 800a6c8:	60f8      	str	r0, [r7, #12]
 800a6ca:	60b9      	str	r1, [r7, #8]
 800a6cc:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800a6ce:	68fb      	ldr	r3, [r7, #12]
 800a6d0:	2203      	movs	r2, #3
 800a6d2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800a6d6:	68fb      	ldr	r3, [r7, #12]
 800a6d8:	687a      	ldr	r2, [r7, #4]
 800a6da:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  pdev->ep_out[0].rem_length = len;
 800a6de:	68fb      	ldr	r3, [r7, #12]
 800a6e0:	687a      	ldr	r2, [r7, #4]
 800a6e2:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	68ba      	ldr	r2, [r7, #8]
 800a6ea:	2100      	movs	r1, #0
 800a6ec:	68f8      	ldr	r0, [r7, #12]
 800a6ee:	f000 fce5 	bl	800b0bc <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a6f2:	2300      	movs	r3, #0
}
 800a6f4:	4618      	mov	r0, r3
 800a6f6:	3710      	adds	r7, #16
 800a6f8:	46bd      	mov	sp, r7
 800a6fa:	bd80      	pop	{r7, pc}

0800a6fc <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800a6fc:	b580      	push	{r7, lr}
 800a6fe:	b084      	sub	sp, #16
 800a700:	af00      	add	r7, sp, #0
 800a702:	60f8      	str	r0, [r7, #12]
 800a704:	60b9      	str	r1, [r7, #8]
 800a706:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	68ba      	ldr	r2, [r7, #8]
 800a70c:	2100      	movs	r1, #0
 800a70e:	68f8      	ldr	r0, [r7, #12]
 800a710:	f000 fcd4 	bl	800b0bc <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a714:	2300      	movs	r3, #0
}
 800a716:	4618      	mov	r0, r3
 800a718:	3710      	adds	r7, #16
 800a71a:	46bd      	mov	sp, r7
 800a71c:	bd80      	pop	{r7, pc}

0800a71e <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800a71e:	b580      	push	{r7, lr}
 800a720:	b082      	sub	sp, #8
 800a722:	af00      	add	r7, sp, #0
 800a724:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	2204      	movs	r2, #4
 800a72a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800a72e:	2300      	movs	r3, #0
 800a730:	2200      	movs	r2, #0
 800a732:	2100      	movs	r1, #0
 800a734:	6878      	ldr	r0, [r7, #4]
 800a736:	f000 fca0 	bl	800b07a <USBD_LL_Transmit>

  return USBD_OK;
 800a73a:	2300      	movs	r3, #0
}
 800a73c:	4618      	mov	r0, r3
 800a73e:	3708      	adds	r7, #8
 800a740:	46bd      	mov	sp, r7
 800a742:	bd80      	pop	{r7, pc}

0800a744 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800a744:	b580      	push	{r7, lr}
 800a746:	b082      	sub	sp, #8
 800a748:	af00      	add	r7, sp, #0
 800a74a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	2205      	movs	r2, #5
 800a750:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a754:	2300      	movs	r3, #0
 800a756:	2200      	movs	r2, #0
 800a758:	2100      	movs	r1, #0
 800a75a:	6878      	ldr	r0, [r7, #4]
 800a75c:	f000 fcae 	bl	800b0bc <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a760:	2300      	movs	r3, #0
}
 800a762:	4618      	mov	r0, r3
 800a764:	3708      	adds	r7, #8
 800a766:	46bd      	mov	sp, r7
 800a768:	bd80      	pop	{r7, pc}
	...

0800a76c <MX_PDM2PCM_Init>:
/* USER CODE BEGIN 1 */
/* USER CODE END 1 */

/* PDM2PCM init function */
void MX_PDM2PCM_Init(void)
{
 800a76c:	b580      	push	{r7, lr}
 800a76e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 2 */
  /* USER CODE END 2 */

   /**
  */
  PDM1_filter_handler.bit_order = PDM_FILTER_BIT_ORDER_MSB;
 800a770:	4b10      	ldr	r3, [pc, #64]	; (800a7b4 <MX_PDM2PCM_Init+0x48>)
 800a772:	2201      	movs	r2, #1
 800a774:	801a      	strh	r2, [r3, #0]
  PDM1_filter_handler.endianness = PDM_FILTER_ENDIANNESS_BE;
 800a776:	4b0f      	ldr	r3, [pc, #60]	; (800a7b4 <MX_PDM2PCM_Init+0x48>)
 800a778:	2201      	movs	r2, #1
 800a77a:	805a      	strh	r2, [r3, #2]
  PDM1_filter_handler.high_pass_tap = 2104533974;
 800a77c:	4b0d      	ldr	r3, [pc, #52]	; (800a7b4 <MX_PDM2PCM_Init+0x48>)
 800a77e:	4a0e      	ldr	r2, [pc, #56]	; (800a7b8 <MX_PDM2PCM_Init+0x4c>)
 800a780:	605a      	str	r2, [r3, #4]
  PDM1_filter_handler.in_ptr_channels = 1;
 800a782:	4b0c      	ldr	r3, [pc, #48]	; (800a7b4 <MX_PDM2PCM_Init+0x48>)
 800a784:	2201      	movs	r2, #1
 800a786:	811a      	strh	r2, [r3, #8]
  PDM1_filter_handler.out_ptr_channels = 1;
 800a788:	4b0a      	ldr	r3, [pc, #40]	; (800a7b4 <MX_PDM2PCM_Init+0x48>)
 800a78a:	2201      	movs	r2, #1
 800a78c:	815a      	strh	r2, [r3, #10]
  PDM_Filter_Init(&PDM1_filter_handler);
 800a78e:	4809      	ldr	r0, [pc, #36]	; (800a7b4 <MX_PDM2PCM_Init+0x48>)
 800a790:	f002 fa44 	bl	800cc1c <PDM_Filter_Init>

  PDM1_filter_config.decimation_factor = PDM_FILTER_DEC_FACTOR_64;
 800a794:	4b09      	ldr	r3, [pc, #36]	; (800a7bc <MX_PDM2PCM_Init+0x50>)
 800a796:	2202      	movs	r2, #2
 800a798:	801a      	strh	r2, [r3, #0]
  PDM1_filter_config.output_samples_number = 16;
 800a79a:	4b08      	ldr	r3, [pc, #32]	; (800a7bc <MX_PDM2PCM_Init+0x50>)
 800a79c:	2210      	movs	r2, #16
 800a79e:	805a      	strh	r2, [r3, #2]
  PDM1_filter_config.mic_gain = 0;
 800a7a0:	4b06      	ldr	r3, [pc, #24]	; (800a7bc <MX_PDM2PCM_Init+0x50>)
 800a7a2:	2200      	movs	r2, #0
 800a7a4:	809a      	strh	r2, [r3, #4]
  PDM_Filter_setConfig(&PDM1_filter_handler, &PDM1_filter_config);
 800a7a6:	4905      	ldr	r1, [pc, #20]	; (800a7bc <MX_PDM2PCM_Init+0x50>)
 800a7a8:	4802      	ldr	r0, [pc, #8]	; (800a7b4 <MX_PDM2PCM_Init+0x48>)
 800a7aa:	f002 fac1 	bl	800cd30 <PDM_Filter_setConfig>

  /* USER CODE BEGIN 3 */
  /* USER CODE END 3 */

}
 800a7ae:	bf00      	nop
 800a7b0:	bd80      	pop	{r7, pc}
 800a7b2:	bf00      	nop
 800a7b4:	20000868 	.word	0x20000868
 800a7b8:	7d70a3d6 	.word	0x7d70a3d6
 800a7bc:	20000860 	.word	0x20000860

0800a7c0 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800a7c0:	b580      	push	{r7, lr}
 800a7c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800a7c4:	2200      	movs	r2, #0
 800a7c6:	4912      	ldr	r1, [pc, #72]	; (800a810 <MX_USB_DEVICE_Init+0x50>)
 800a7c8:	4812      	ldr	r0, [pc, #72]	; (800a814 <MX_USB_DEVICE_Init+0x54>)
 800a7ca:	f7fe fec9 	bl	8009560 <USBD_Init>
 800a7ce:	4603      	mov	r3, r0
 800a7d0:	2b00      	cmp	r3, #0
 800a7d2:	d001      	beq.n	800a7d8 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800a7d4:	f7f6 ff46 	bl	8001664 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800a7d8:	490f      	ldr	r1, [pc, #60]	; (800a818 <MX_USB_DEVICE_Init+0x58>)
 800a7da:	480e      	ldr	r0, [pc, #56]	; (800a814 <MX_USB_DEVICE_Init+0x54>)
 800a7dc:	f7fe fef6 	bl	80095cc <USBD_RegisterClass>
 800a7e0:	4603      	mov	r3, r0
 800a7e2:	2b00      	cmp	r3, #0
 800a7e4:	d001      	beq.n	800a7ea <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800a7e6:	f7f6 ff3d 	bl	8001664 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800a7ea:	490c      	ldr	r1, [pc, #48]	; (800a81c <MX_USB_DEVICE_Init+0x5c>)
 800a7ec:	4809      	ldr	r0, [pc, #36]	; (800a814 <MX_USB_DEVICE_Init+0x54>)
 800a7ee:	f7fe fe4b 	bl	8009488 <USBD_CDC_RegisterInterface>
 800a7f2:	4603      	mov	r3, r0
 800a7f4:	2b00      	cmp	r3, #0
 800a7f6:	d001      	beq.n	800a7fc <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800a7f8:	f7f6 ff34 	bl	8001664 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800a7fc:	4805      	ldr	r0, [pc, #20]	; (800a814 <MX_USB_DEVICE_Init+0x54>)
 800a7fe:	f7fe ff06 	bl	800960e <USBD_Start>
 800a802:	4603      	mov	r3, r0
 800a804:	2b00      	cmp	r3, #0
 800a806:	d001      	beq.n	800a80c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800a808:	f7f6 ff2c 	bl	8001664 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800a80c:	bf00      	nop
 800a80e:	bd80      	pop	{r7, pc}
 800a810:	20000530 	.word	0x20000530
 800a814:	200008b4 	.word	0x200008b4
 800a818:	20000418 	.word	0x20000418
 800a81c:	2000051c 	.word	0x2000051c

0800a820 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800a820:	b580      	push	{r7, lr}
 800a822:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800a824:	2200      	movs	r2, #0
 800a826:	4905      	ldr	r1, [pc, #20]	; (800a83c <CDC_Init_FS+0x1c>)
 800a828:	4805      	ldr	r0, [pc, #20]	; (800a840 <CDC_Init_FS+0x20>)
 800a82a:	f7fe fe42 	bl	80094b2 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800a82e:	4905      	ldr	r1, [pc, #20]	; (800a844 <CDC_Init_FS+0x24>)
 800a830:	4803      	ldr	r0, [pc, #12]	; (800a840 <CDC_Init_FS+0x20>)
 800a832:	f7fe fe57 	bl	80094e4 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800a836:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800a838:	4618      	mov	r0, r3
 800a83a:	bd80      	pop	{r7, pc}
 800a83c:	20001384 	.word	0x20001384
 800a840:	200008b4 	.word	0x200008b4
 800a844:	20000b84 	.word	0x20000b84

0800a848 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800a848:	b480      	push	{r7}
 800a84a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800a84c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800a84e:	4618      	mov	r0, r3
 800a850:	46bd      	mov	sp, r7
 800a852:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a856:	4770      	bx	lr

0800a858 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800a858:	b480      	push	{r7}
 800a85a:	b083      	sub	sp, #12
 800a85c:	af00      	add	r7, sp, #0
 800a85e:	4603      	mov	r3, r0
 800a860:	6039      	str	r1, [r7, #0]
 800a862:	71fb      	strb	r3, [r7, #7]
 800a864:	4613      	mov	r3, r2
 800a866:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800a868:	79fb      	ldrb	r3, [r7, #7]
 800a86a:	2b23      	cmp	r3, #35	; 0x23
 800a86c:	d84a      	bhi.n	800a904 <CDC_Control_FS+0xac>
 800a86e:	a201      	add	r2, pc, #4	; (adr r2, 800a874 <CDC_Control_FS+0x1c>)
 800a870:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a874:	0800a905 	.word	0x0800a905
 800a878:	0800a905 	.word	0x0800a905
 800a87c:	0800a905 	.word	0x0800a905
 800a880:	0800a905 	.word	0x0800a905
 800a884:	0800a905 	.word	0x0800a905
 800a888:	0800a905 	.word	0x0800a905
 800a88c:	0800a905 	.word	0x0800a905
 800a890:	0800a905 	.word	0x0800a905
 800a894:	0800a905 	.word	0x0800a905
 800a898:	0800a905 	.word	0x0800a905
 800a89c:	0800a905 	.word	0x0800a905
 800a8a0:	0800a905 	.word	0x0800a905
 800a8a4:	0800a905 	.word	0x0800a905
 800a8a8:	0800a905 	.word	0x0800a905
 800a8ac:	0800a905 	.word	0x0800a905
 800a8b0:	0800a905 	.word	0x0800a905
 800a8b4:	0800a905 	.word	0x0800a905
 800a8b8:	0800a905 	.word	0x0800a905
 800a8bc:	0800a905 	.word	0x0800a905
 800a8c0:	0800a905 	.word	0x0800a905
 800a8c4:	0800a905 	.word	0x0800a905
 800a8c8:	0800a905 	.word	0x0800a905
 800a8cc:	0800a905 	.word	0x0800a905
 800a8d0:	0800a905 	.word	0x0800a905
 800a8d4:	0800a905 	.word	0x0800a905
 800a8d8:	0800a905 	.word	0x0800a905
 800a8dc:	0800a905 	.word	0x0800a905
 800a8e0:	0800a905 	.word	0x0800a905
 800a8e4:	0800a905 	.word	0x0800a905
 800a8e8:	0800a905 	.word	0x0800a905
 800a8ec:	0800a905 	.word	0x0800a905
 800a8f0:	0800a905 	.word	0x0800a905
 800a8f4:	0800a905 	.word	0x0800a905
 800a8f8:	0800a905 	.word	0x0800a905
 800a8fc:	0800a905 	.word	0x0800a905
 800a900:	0800a905 	.word	0x0800a905
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800a904:	bf00      	nop
  }

  return (USBD_OK);
 800a906:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800a908:	4618      	mov	r0, r3
 800a90a:	370c      	adds	r7, #12
 800a90c:	46bd      	mov	sp, r7
 800a90e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a912:	4770      	bx	lr

0800a914 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800a914:	b580      	push	{r7, lr}
 800a916:	b082      	sub	sp, #8
 800a918:	af00      	add	r7, sp, #0
 800a91a:	6078      	str	r0, [r7, #4]
 800a91c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800a91e:	6879      	ldr	r1, [r7, #4]
 800a920:	4805      	ldr	r0, [pc, #20]	; (800a938 <CDC_Receive_FS+0x24>)
 800a922:	f7fe fddf 	bl	80094e4 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800a926:	4804      	ldr	r0, [pc, #16]	; (800a938 <CDC_Receive_FS+0x24>)
 800a928:	f7fe fdf0 	bl	800950c <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800a92c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800a92e:	4618      	mov	r0, r3
 800a930:	3708      	adds	r7, #8
 800a932:	46bd      	mov	sp, r7
 800a934:	bd80      	pop	{r7, pc}
 800a936:	bf00      	nop
 800a938:	200008b4 	.word	0x200008b4

0800a93c <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800a93c:	b480      	push	{r7}
 800a93e:	b087      	sub	sp, #28
 800a940:	af00      	add	r7, sp, #0
 800a942:	60f8      	str	r0, [r7, #12]
 800a944:	60b9      	str	r1, [r7, #8]
 800a946:	4613      	mov	r3, r2
 800a948:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800a94a:	2300      	movs	r3, #0
 800a94c:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800a94e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a952:	4618      	mov	r0, r3
 800a954:	371c      	adds	r7, #28
 800a956:	46bd      	mov	sp, r7
 800a958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a95c:	4770      	bx	lr
	...

0800a960 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a960:	b480      	push	{r7}
 800a962:	b083      	sub	sp, #12
 800a964:	af00      	add	r7, sp, #0
 800a966:	4603      	mov	r3, r0
 800a968:	6039      	str	r1, [r7, #0]
 800a96a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800a96c:	683b      	ldr	r3, [r7, #0]
 800a96e:	2212      	movs	r2, #18
 800a970:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800a972:	4b03      	ldr	r3, [pc, #12]	; (800a980 <USBD_FS_DeviceDescriptor+0x20>)
}
 800a974:	4618      	mov	r0, r3
 800a976:	370c      	adds	r7, #12
 800a978:	46bd      	mov	sp, r7
 800a97a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a97e:	4770      	bx	lr
 800a980:	2000054c 	.word	0x2000054c

0800a984 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a984:	b480      	push	{r7}
 800a986:	b083      	sub	sp, #12
 800a988:	af00      	add	r7, sp, #0
 800a98a:	4603      	mov	r3, r0
 800a98c:	6039      	str	r1, [r7, #0]
 800a98e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800a990:	683b      	ldr	r3, [r7, #0]
 800a992:	2204      	movs	r2, #4
 800a994:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800a996:	4b03      	ldr	r3, [pc, #12]	; (800a9a4 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800a998:	4618      	mov	r0, r3
 800a99a:	370c      	adds	r7, #12
 800a99c:	46bd      	mov	sp, r7
 800a99e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9a2:	4770      	bx	lr
 800a9a4:	20000560 	.word	0x20000560

0800a9a8 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a9a8:	b580      	push	{r7, lr}
 800a9aa:	b082      	sub	sp, #8
 800a9ac:	af00      	add	r7, sp, #0
 800a9ae:	4603      	mov	r3, r0
 800a9b0:	6039      	str	r1, [r7, #0]
 800a9b2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a9b4:	79fb      	ldrb	r3, [r7, #7]
 800a9b6:	2b00      	cmp	r3, #0
 800a9b8:	d105      	bne.n	800a9c6 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a9ba:	683a      	ldr	r2, [r7, #0]
 800a9bc:	4907      	ldr	r1, [pc, #28]	; (800a9dc <USBD_FS_ProductStrDescriptor+0x34>)
 800a9be:	4808      	ldr	r0, [pc, #32]	; (800a9e0 <USBD_FS_ProductStrDescriptor+0x38>)
 800a9c0:	f7ff fdf3 	bl	800a5aa <USBD_GetString>
 800a9c4:	e004      	b.n	800a9d0 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a9c6:	683a      	ldr	r2, [r7, #0]
 800a9c8:	4904      	ldr	r1, [pc, #16]	; (800a9dc <USBD_FS_ProductStrDescriptor+0x34>)
 800a9ca:	4805      	ldr	r0, [pc, #20]	; (800a9e0 <USBD_FS_ProductStrDescriptor+0x38>)
 800a9cc:	f7ff fded 	bl	800a5aa <USBD_GetString>
  }
  return USBD_StrDesc;
 800a9d0:	4b02      	ldr	r3, [pc, #8]	; (800a9dc <USBD_FS_ProductStrDescriptor+0x34>)
}
 800a9d2:	4618      	mov	r0, r3
 800a9d4:	3708      	adds	r7, #8
 800a9d6:	46bd      	mov	sp, r7
 800a9d8:	bd80      	pop	{r7, pc}
 800a9da:	bf00      	nop
 800a9dc:	20001b84 	.word	0x20001b84
 800a9e0:	0800dea8 	.word	0x0800dea8

0800a9e4 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a9e4:	b580      	push	{r7, lr}
 800a9e6:	b082      	sub	sp, #8
 800a9e8:	af00      	add	r7, sp, #0
 800a9ea:	4603      	mov	r3, r0
 800a9ec:	6039      	str	r1, [r7, #0]
 800a9ee:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800a9f0:	683a      	ldr	r2, [r7, #0]
 800a9f2:	4904      	ldr	r1, [pc, #16]	; (800aa04 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800a9f4:	4804      	ldr	r0, [pc, #16]	; (800aa08 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800a9f6:	f7ff fdd8 	bl	800a5aa <USBD_GetString>
  return USBD_StrDesc;
 800a9fa:	4b02      	ldr	r3, [pc, #8]	; (800aa04 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800a9fc:	4618      	mov	r0, r3
 800a9fe:	3708      	adds	r7, #8
 800aa00:	46bd      	mov	sp, r7
 800aa02:	bd80      	pop	{r7, pc}
 800aa04:	20001b84 	.word	0x20001b84
 800aa08:	0800dec0 	.word	0x0800dec0

0800aa0c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800aa0c:	b580      	push	{r7, lr}
 800aa0e:	b082      	sub	sp, #8
 800aa10:	af00      	add	r7, sp, #0
 800aa12:	4603      	mov	r3, r0
 800aa14:	6039      	str	r1, [r7, #0]
 800aa16:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800aa18:	683b      	ldr	r3, [r7, #0]
 800aa1a:	221a      	movs	r2, #26
 800aa1c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800aa1e:	f000 f843 	bl	800aaa8 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800aa22:	4b02      	ldr	r3, [pc, #8]	; (800aa2c <USBD_FS_SerialStrDescriptor+0x20>)
}
 800aa24:	4618      	mov	r0, r3
 800aa26:	3708      	adds	r7, #8
 800aa28:	46bd      	mov	sp, r7
 800aa2a:	bd80      	pop	{r7, pc}
 800aa2c:	20000564 	.word	0x20000564

0800aa30 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800aa30:	b580      	push	{r7, lr}
 800aa32:	b082      	sub	sp, #8
 800aa34:	af00      	add	r7, sp, #0
 800aa36:	4603      	mov	r3, r0
 800aa38:	6039      	str	r1, [r7, #0]
 800aa3a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800aa3c:	79fb      	ldrb	r3, [r7, #7]
 800aa3e:	2b00      	cmp	r3, #0
 800aa40:	d105      	bne.n	800aa4e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800aa42:	683a      	ldr	r2, [r7, #0]
 800aa44:	4907      	ldr	r1, [pc, #28]	; (800aa64 <USBD_FS_ConfigStrDescriptor+0x34>)
 800aa46:	4808      	ldr	r0, [pc, #32]	; (800aa68 <USBD_FS_ConfigStrDescriptor+0x38>)
 800aa48:	f7ff fdaf 	bl	800a5aa <USBD_GetString>
 800aa4c:	e004      	b.n	800aa58 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800aa4e:	683a      	ldr	r2, [r7, #0]
 800aa50:	4904      	ldr	r1, [pc, #16]	; (800aa64 <USBD_FS_ConfigStrDescriptor+0x34>)
 800aa52:	4805      	ldr	r0, [pc, #20]	; (800aa68 <USBD_FS_ConfigStrDescriptor+0x38>)
 800aa54:	f7ff fda9 	bl	800a5aa <USBD_GetString>
  }
  return USBD_StrDesc;
 800aa58:	4b02      	ldr	r3, [pc, #8]	; (800aa64 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800aa5a:	4618      	mov	r0, r3
 800aa5c:	3708      	adds	r7, #8
 800aa5e:	46bd      	mov	sp, r7
 800aa60:	bd80      	pop	{r7, pc}
 800aa62:	bf00      	nop
 800aa64:	20001b84 	.word	0x20001b84
 800aa68:	0800ded4 	.word	0x0800ded4

0800aa6c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800aa6c:	b580      	push	{r7, lr}
 800aa6e:	b082      	sub	sp, #8
 800aa70:	af00      	add	r7, sp, #0
 800aa72:	4603      	mov	r3, r0
 800aa74:	6039      	str	r1, [r7, #0]
 800aa76:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800aa78:	79fb      	ldrb	r3, [r7, #7]
 800aa7a:	2b00      	cmp	r3, #0
 800aa7c:	d105      	bne.n	800aa8a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800aa7e:	683a      	ldr	r2, [r7, #0]
 800aa80:	4907      	ldr	r1, [pc, #28]	; (800aaa0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800aa82:	4808      	ldr	r0, [pc, #32]	; (800aaa4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800aa84:	f7ff fd91 	bl	800a5aa <USBD_GetString>
 800aa88:	e004      	b.n	800aa94 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800aa8a:	683a      	ldr	r2, [r7, #0]
 800aa8c:	4904      	ldr	r1, [pc, #16]	; (800aaa0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800aa8e:	4805      	ldr	r0, [pc, #20]	; (800aaa4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800aa90:	f7ff fd8b 	bl	800a5aa <USBD_GetString>
  }
  return USBD_StrDesc;
 800aa94:	4b02      	ldr	r3, [pc, #8]	; (800aaa0 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800aa96:	4618      	mov	r0, r3
 800aa98:	3708      	adds	r7, #8
 800aa9a:	46bd      	mov	sp, r7
 800aa9c:	bd80      	pop	{r7, pc}
 800aa9e:	bf00      	nop
 800aaa0:	20001b84 	.word	0x20001b84
 800aaa4:	0800dee0 	.word	0x0800dee0

0800aaa8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800aaa8:	b580      	push	{r7, lr}
 800aaaa:	b084      	sub	sp, #16
 800aaac:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800aaae:	4b0f      	ldr	r3, [pc, #60]	; (800aaec <Get_SerialNum+0x44>)
 800aab0:	681b      	ldr	r3, [r3, #0]
 800aab2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800aab4:	4b0e      	ldr	r3, [pc, #56]	; (800aaf0 <Get_SerialNum+0x48>)
 800aab6:	681b      	ldr	r3, [r3, #0]
 800aab8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800aaba:	4b0e      	ldr	r3, [pc, #56]	; (800aaf4 <Get_SerialNum+0x4c>)
 800aabc:	681b      	ldr	r3, [r3, #0]
 800aabe:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800aac0:	68fa      	ldr	r2, [r7, #12]
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	4413      	add	r3, r2
 800aac6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800aac8:	68fb      	ldr	r3, [r7, #12]
 800aaca:	2b00      	cmp	r3, #0
 800aacc:	d009      	beq.n	800aae2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800aace:	2208      	movs	r2, #8
 800aad0:	4909      	ldr	r1, [pc, #36]	; (800aaf8 <Get_SerialNum+0x50>)
 800aad2:	68f8      	ldr	r0, [r7, #12]
 800aad4:	f000 f814 	bl	800ab00 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800aad8:	2204      	movs	r2, #4
 800aada:	4908      	ldr	r1, [pc, #32]	; (800aafc <Get_SerialNum+0x54>)
 800aadc:	68b8      	ldr	r0, [r7, #8]
 800aade:	f000 f80f 	bl	800ab00 <IntToUnicode>
  }
}
 800aae2:	bf00      	nop
 800aae4:	3710      	adds	r7, #16
 800aae6:	46bd      	mov	sp, r7
 800aae8:	bd80      	pop	{r7, pc}
 800aaea:	bf00      	nop
 800aaec:	1fff7a10 	.word	0x1fff7a10
 800aaf0:	1fff7a14 	.word	0x1fff7a14
 800aaf4:	1fff7a18 	.word	0x1fff7a18
 800aaf8:	20000566 	.word	0x20000566
 800aafc:	20000576 	.word	0x20000576

0800ab00 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800ab00:	b480      	push	{r7}
 800ab02:	b087      	sub	sp, #28
 800ab04:	af00      	add	r7, sp, #0
 800ab06:	60f8      	str	r0, [r7, #12]
 800ab08:	60b9      	str	r1, [r7, #8]
 800ab0a:	4613      	mov	r3, r2
 800ab0c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800ab0e:	2300      	movs	r3, #0
 800ab10:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800ab12:	2300      	movs	r3, #0
 800ab14:	75fb      	strb	r3, [r7, #23]
 800ab16:	e027      	b.n	800ab68 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800ab18:	68fb      	ldr	r3, [r7, #12]
 800ab1a:	0f1b      	lsrs	r3, r3, #28
 800ab1c:	2b09      	cmp	r3, #9
 800ab1e:	d80b      	bhi.n	800ab38 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800ab20:	68fb      	ldr	r3, [r7, #12]
 800ab22:	0f1b      	lsrs	r3, r3, #28
 800ab24:	b2da      	uxtb	r2, r3
 800ab26:	7dfb      	ldrb	r3, [r7, #23]
 800ab28:	005b      	lsls	r3, r3, #1
 800ab2a:	4619      	mov	r1, r3
 800ab2c:	68bb      	ldr	r3, [r7, #8]
 800ab2e:	440b      	add	r3, r1
 800ab30:	3230      	adds	r2, #48	; 0x30
 800ab32:	b2d2      	uxtb	r2, r2
 800ab34:	701a      	strb	r2, [r3, #0]
 800ab36:	e00a      	b.n	800ab4e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800ab38:	68fb      	ldr	r3, [r7, #12]
 800ab3a:	0f1b      	lsrs	r3, r3, #28
 800ab3c:	b2da      	uxtb	r2, r3
 800ab3e:	7dfb      	ldrb	r3, [r7, #23]
 800ab40:	005b      	lsls	r3, r3, #1
 800ab42:	4619      	mov	r1, r3
 800ab44:	68bb      	ldr	r3, [r7, #8]
 800ab46:	440b      	add	r3, r1
 800ab48:	3237      	adds	r2, #55	; 0x37
 800ab4a:	b2d2      	uxtb	r2, r2
 800ab4c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800ab4e:	68fb      	ldr	r3, [r7, #12]
 800ab50:	011b      	lsls	r3, r3, #4
 800ab52:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800ab54:	7dfb      	ldrb	r3, [r7, #23]
 800ab56:	005b      	lsls	r3, r3, #1
 800ab58:	3301      	adds	r3, #1
 800ab5a:	68ba      	ldr	r2, [r7, #8]
 800ab5c:	4413      	add	r3, r2
 800ab5e:	2200      	movs	r2, #0
 800ab60:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800ab62:	7dfb      	ldrb	r3, [r7, #23]
 800ab64:	3301      	adds	r3, #1
 800ab66:	75fb      	strb	r3, [r7, #23]
 800ab68:	7dfa      	ldrb	r2, [r7, #23]
 800ab6a:	79fb      	ldrb	r3, [r7, #7]
 800ab6c:	429a      	cmp	r2, r3
 800ab6e:	d3d3      	bcc.n	800ab18 <IntToUnicode+0x18>
  }
}
 800ab70:	bf00      	nop
 800ab72:	371c      	adds	r7, #28
 800ab74:	46bd      	mov	sp, r7
 800ab76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab7a:	4770      	bx	lr

0800ab7c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800ab7c:	b580      	push	{r7, lr}
 800ab7e:	b08a      	sub	sp, #40	; 0x28
 800ab80:	af00      	add	r7, sp, #0
 800ab82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ab84:	f107 0314 	add.w	r3, r7, #20
 800ab88:	2200      	movs	r2, #0
 800ab8a:	601a      	str	r2, [r3, #0]
 800ab8c:	605a      	str	r2, [r3, #4]
 800ab8e:	609a      	str	r2, [r3, #8]
 800ab90:	60da      	str	r2, [r3, #12]
 800ab92:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	681b      	ldr	r3, [r3, #0]
 800ab98:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800ab9c:	d147      	bne.n	800ac2e <HAL_PCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800ab9e:	2300      	movs	r3, #0
 800aba0:	613b      	str	r3, [r7, #16]
 800aba2:	4b25      	ldr	r3, [pc, #148]	; (800ac38 <HAL_PCD_MspInit+0xbc>)
 800aba4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aba6:	4a24      	ldr	r2, [pc, #144]	; (800ac38 <HAL_PCD_MspInit+0xbc>)
 800aba8:	f043 0301 	orr.w	r3, r3, #1
 800abac:	6313      	str	r3, [r2, #48]	; 0x30
 800abae:	4b22      	ldr	r3, [pc, #136]	; (800ac38 <HAL_PCD_MspInit+0xbc>)
 800abb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800abb2:	f003 0301 	and.w	r3, r3, #1
 800abb6:	613b      	str	r3, [r7, #16]
 800abb8:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800abba:	f44f 7300 	mov.w	r3, #512	; 0x200
 800abbe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800abc0:	2300      	movs	r3, #0
 800abc2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800abc4:	2300      	movs	r3, #0
 800abc6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800abc8:	f107 0314 	add.w	r3, r7, #20
 800abcc:	4619      	mov	r1, r3
 800abce:	481b      	ldr	r0, [pc, #108]	; (800ac3c <HAL_PCD_MspInit+0xc0>)
 800abd0:	f7f7 fe12 	bl	80027f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800abd4:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800abd8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800abda:	2302      	movs	r3, #2
 800abdc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800abde:	2300      	movs	r3, #0
 800abe0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800abe2:	2303      	movs	r3, #3
 800abe4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800abe6:	230a      	movs	r3, #10
 800abe8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800abea:	f107 0314 	add.w	r3, r7, #20
 800abee:	4619      	mov	r1, r3
 800abf0:	4812      	ldr	r0, [pc, #72]	; (800ac3c <HAL_PCD_MspInit+0xc0>)
 800abf2:	f7f7 fe01 	bl	80027f8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800abf6:	4b10      	ldr	r3, [pc, #64]	; (800ac38 <HAL_PCD_MspInit+0xbc>)
 800abf8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800abfa:	4a0f      	ldr	r2, [pc, #60]	; (800ac38 <HAL_PCD_MspInit+0xbc>)
 800abfc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ac00:	6353      	str	r3, [r2, #52]	; 0x34
 800ac02:	2300      	movs	r3, #0
 800ac04:	60fb      	str	r3, [r7, #12]
 800ac06:	4b0c      	ldr	r3, [pc, #48]	; (800ac38 <HAL_PCD_MspInit+0xbc>)
 800ac08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ac0a:	4a0b      	ldr	r2, [pc, #44]	; (800ac38 <HAL_PCD_MspInit+0xbc>)
 800ac0c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800ac10:	6453      	str	r3, [r2, #68]	; 0x44
 800ac12:	4b09      	ldr	r3, [pc, #36]	; (800ac38 <HAL_PCD_MspInit+0xbc>)
 800ac14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ac16:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ac1a:	60fb      	str	r3, [r7, #12]
 800ac1c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800ac1e:	2200      	movs	r2, #0
 800ac20:	2100      	movs	r1, #0
 800ac22:	2043      	movs	r0, #67	; 0x43
 800ac24:	f7f7 f918 	bl	8001e58 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800ac28:	2043      	movs	r0, #67	; 0x43
 800ac2a:	f7f7 f941 	bl	8001eb0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800ac2e:	bf00      	nop
 800ac30:	3728      	adds	r7, #40	; 0x28
 800ac32:	46bd      	mov	sp, r7
 800ac34:	bd80      	pop	{r7, pc}
 800ac36:	bf00      	nop
 800ac38:	40023800 	.word	0x40023800
 800ac3c:	40020000 	.word	0x40020000

0800ac40 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ac40:	b580      	push	{r7, lr}
 800ac42:	b082      	sub	sp, #8
 800ac44:	af00      	add	r7, sp, #0
 800ac46:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800ac54:	4619      	mov	r1, r3
 800ac56:	4610      	mov	r0, r2
 800ac58:	f7fe fd24 	bl	80096a4 <USBD_LL_SetupStage>
}
 800ac5c:	bf00      	nop
 800ac5e:	3708      	adds	r7, #8
 800ac60:	46bd      	mov	sp, r7
 800ac62:	bd80      	pop	{r7, pc}

0800ac64 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ac64:	b580      	push	{r7, lr}
 800ac66:	b082      	sub	sp, #8
 800ac68:	af00      	add	r7, sp, #0
 800ac6a:	6078      	str	r0, [r7, #4]
 800ac6c:	460b      	mov	r3, r1
 800ac6e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800ac76:	78fa      	ldrb	r2, [r7, #3]
 800ac78:	6879      	ldr	r1, [r7, #4]
 800ac7a:	4613      	mov	r3, r2
 800ac7c:	00db      	lsls	r3, r3, #3
 800ac7e:	1a9b      	subs	r3, r3, r2
 800ac80:	009b      	lsls	r3, r3, #2
 800ac82:	440b      	add	r3, r1
 800ac84:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800ac88:	681a      	ldr	r2, [r3, #0]
 800ac8a:	78fb      	ldrb	r3, [r7, #3]
 800ac8c:	4619      	mov	r1, r3
 800ac8e:	f7fe fd5c 	bl	800974a <USBD_LL_DataOutStage>
}
 800ac92:	bf00      	nop
 800ac94:	3708      	adds	r7, #8
 800ac96:	46bd      	mov	sp, r7
 800ac98:	bd80      	pop	{r7, pc}

0800ac9a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ac9a:	b580      	push	{r7, lr}
 800ac9c:	b082      	sub	sp, #8
 800ac9e:	af00      	add	r7, sp, #0
 800aca0:	6078      	str	r0, [r7, #4]
 800aca2:	460b      	mov	r3, r1
 800aca4:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800acac:	78fa      	ldrb	r2, [r7, #3]
 800acae:	6879      	ldr	r1, [r7, #4]
 800acb0:	4613      	mov	r3, r2
 800acb2:	00db      	lsls	r3, r3, #3
 800acb4:	1a9b      	subs	r3, r3, r2
 800acb6:	009b      	lsls	r3, r3, #2
 800acb8:	440b      	add	r3, r1
 800acba:	3348      	adds	r3, #72	; 0x48
 800acbc:	681a      	ldr	r2, [r3, #0]
 800acbe:	78fb      	ldrb	r3, [r7, #3]
 800acc0:	4619      	mov	r1, r3
 800acc2:	f7fe fda5 	bl	8009810 <USBD_LL_DataInStage>
}
 800acc6:	bf00      	nop
 800acc8:	3708      	adds	r7, #8
 800acca:	46bd      	mov	sp, r7
 800accc:	bd80      	pop	{r7, pc}

0800acce <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800acce:	b580      	push	{r7, lr}
 800acd0:	b082      	sub	sp, #8
 800acd2:	af00      	add	r7, sp, #0
 800acd4:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800acdc:	4618      	mov	r0, r3
 800acde:	f7fe fea9 	bl	8009a34 <USBD_LL_SOF>
}
 800ace2:	bf00      	nop
 800ace4:	3708      	adds	r7, #8
 800ace6:	46bd      	mov	sp, r7
 800ace8:	bd80      	pop	{r7, pc}

0800acea <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800acea:	b580      	push	{r7, lr}
 800acec:	b084      	sub	sp, #16
 800acee:	af00      	add	r7, sp, #0
 800acf0:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800acf2:	2301      	movs	r3, #1
 800acf4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800acf6:	687b      	ldr	r3, [r7, #4]
 800acf8:	68db      	ldr	r3, [r3, #12]
 800acfa:	2b02      	cmp	r3, #2
 800acfc:	d001      	beq.n	800ad02 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800acfe:	f7f6 fcb1 	bl	8001664 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800ad08:	7bfa      	ldrb	r2, [r7, #15]
 800ad0a:	4611      	mov	r1, r2
 800ad0c:	4618      	mov	r0, r3
 800ad0e:	f7fe fe56 	bl	80099be <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800ad18:	4618      	mov	r0, r3
 800ad1a:	f7fe fe0f 	bl	800993c <USBD_LL_Reset>
}
 800ad1e:	bf00      	nop
 800ad20:	3710      	adds	r7, #16
 800ad22:	46bd      	mov	sp, r7
 800ad24:	bd80      	pop	{r7, pc}
	...

0800ad28 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ad28:	b580      	push	{r7, lr}
 800ad2a:	b082      	sub	sp, #8
 800ad2c:	af00      	add	r7, sp, #0
 800ad2e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800ad36:	4618      	mov	r0, r3
 800ad38:	f7fe fe51 	bl	80099de <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	681b      	ldr	r3, [r3, #0]
 800ad40:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800ad44:	681b      	ldr	r3, [r3, #0]
 800ad46:	687a      	ldr	r2, [r7, #4]
 800ad48:	6812      	ldr	r2, [r2, #0]
 800ad4a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800ad4e:	f043 0301 	orr.w	r3, r3, #1
 800ad52:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800ad54:	687b      	ldr	r3, [r7, #4]
 800ad56:	6a1b      	ldr	r3, [r3, #32]
 800ad58:	2b00      	cmp	r3, #0
 800ad5a:	d005      	beq.n	800ad68 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800ad5c:	4b04      	ldr	r3, [pc, #16]	; (800ad70 <HAL_PCD_SuspendCallback+0x48>)
 800ad5e:	691b      	ldr	r3, [r3, #16]
 800ad60:	4a03      	ldr	r2, [pc, #12]	; (800ad70 <HAL_PCD_SuspendCallback+0x48>)
 800ad62:	f043 0306 	orr.w	r3, r3, #6
 800ad66:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800ad68:	bf00      	nop
 800ad6a:	3708      	adds	r7, #8
 800ad6c:	46bd      	mov	sp, r7
 800ad6e:	bd80      	pop	{r7, pc}
 800ad70:	e000ed00 	.word	0xe000ed00

0800ad74 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ad74:	b580      	push	{r7, lr}
 800ad76:	b082      	sub	sp, #8
 800ad78:	af00      	add	r7, sp, #0
 800ad7a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800ad82:	4618      	mov	r0, r3
 800ad84:	f7fe fe40 	bl	8009a08 <USBD_LL_Resume>
}
 800ad88:	bf00      	nop
 800ad8a:	3708      	adds	r7, #8
 800ad8c:	46bd      	mov	sp, r7
 800ad8e:	bd80      	pop	{r7, pc}

0800ad90 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ad90:	b580      	push	{r7, lr}
 800ad92:	b082      	sub	sp, #8
 800ad94:	af00      	add	r7, sp, #0
 800ad96:	6078      	str	r0, [r7, #4]
 800ad98:	460b      	mov	r3, r1
 800ad9a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800ada2:	78fa      	ldrb	r2, [r7, #3]
 800ada4:	4611      	mov	r1, r2
 800ada6:	4618      	mov	r0, r3
 800ada8:	f7fe fe6b 	bl	8009a82 <USBD_LL_IsoOUTIncomplete>
}
 800adac:	bf00      	nop
 800adae:	3708      	adds	r7, #8
 800adb0:	46bd      	mov	sp, r7
 800adb2:	bd80      	pop	{r7, pc}

0800adb4 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800adb4:	b580      	push	{r7, lr}
 800adb6:	b082      	sub	sp, #8
 800adb8:	af00      	add	r7, sp, #0
 800adba:	6078      	str	r0, [r7, #4]
 800adbc:	460b      	mov	r3, r1
 800adbe:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800adc6:	78fa      	ldrb	r2, [r7, #3]
 800adc8:	4611      	mov	r1, r2
 800adca:	4618      	mov	r0, r3
 800adcc:	f7fe fe4c 	bl	8009a68 <USBD_LL_IsoINIncomplete>
}
 800add0:	bf00      	nop
 800add2:	3708      	adds	r7, #8
 800add4:	46bd      	mov	sp, r7
 800add6:	bd80      	pop	{r7, pc}

0800add8 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800add8:	b580      	push	{r7, lr}
 800adda:	b082      	sub	sp, #8
 800addc:	af00      	add	r7, sp, #0
 800adde:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800ade6:	4618      	mov	r0, r3
 800ade8:	f7fe fe58 	bl	8009a9c <USBD_LL_DevConnected>
}
 800adec:	bf00      	nop
 800adee:	3708      	adds	r7, #8
 800adf0:	46bd      	mov	sp, r7
 800adf2:	bd80      	pop	{r7, pc}

0800adf4 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800adf4:	b580      	push	{r7, lr}
 800adf6:	b082      	sub	sp, #8
 800adf8:	af00      	add	r7, sp, #0
 800adfa:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800ae02:	4618      	mov	r0, r3
 800ae04:	f7fe fe55 	bl	8009ab2 <USBD_LL_DevDisconnected>
}
 800ae08:	bf00      	nop
 800ae0a:	3708      	adds	r7, #8
 800ae0c:	46bd      	mov	sp, r7
 800ae0e:	bd80      	pop	{r7, pc}

0800ae10 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800ae10:	b580      	push	{r7, lr}
 800ae12:	b082      	sub	sp, #8
 800ae14:	af00      	add	r7, sp, #0
 800ae16:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	781b      	ldrb	r3, [r3, #0]
 800ae1c:	2b00      	cmp	r3, #0
 800ae1e:	d13c      	bne.n	800ae9a <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800ae20:	4a20      	ldr	r2, [pc, #128]	; (800aea4 <USBD_LL_Init+0x94>)
 800ae22:	687b      	ldr	r3, [r7, #4]
 800ae24:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	4a1e      	ldr	r2, [pc, #120]	; (800aea4 <USBD_LL_Init+0x94>)
 800ae2c:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800ae30:	4b1c      	ldr	r3, [pc, #112]	; (800aea4 <USBD_LL_Init+0x94>)
 800ae32:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800ae36:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800ae38:	4b1a      	ldr	r3, [pc, #104]	; (800aea4 <USBD_LL_Init+0x94>)
 800ae3a:	2204      	movs	r2, #4
 800ae3c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800ae3e:	4b19      	ldr	r3, [pc, #100]	; (800aea4 <USBD_LL_Init+0x94>)
 800ae40:	2202      	movs	r2, #2
 800ae42:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800ae44:	4b17      	ldr	r3, [pc, #92]	; (800aea4 <USBD_LL_Init+0x94>)
 800ae46:	2200      	movs	r2, #0
 800ae48:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800ae4a:	4b16      	ldr	r3, [pc, #88]	; (800aea4 <USBD_LL_Init+0x94>)
 800ae4c:	2202      	movs	r2, #2
 800ae4e:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800ae50:	4b14      	ldr	r3, [pc, #80]	; (800aea4 <USBD_LL_Init+0x94>)
 800ae52:	2200      	movs	r2, #0
 800ae54:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800ae56:	4b13      	ldr	r3, [pc, #76]	; (800aea4 <USBD_LL_Init+0x94>)
 800ae58:	2200      	movs	r2, #0
 800ae5a:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800ae5c:	4b11      	ldr	r3, [pc, #68]	; (800aea4 <USBD_LL_Init+0x94>)
 800ae5e:	2200      	movs	r2, #0
 800ae60:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800ae62:	4b10      	ldr	r3, [pc, #64]	; (800aea4 <USBD_LL_Init+0x94>)
 800ae64:	2200      	movs	r2, #0
 800ae66:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800ae68:	4b0e      	ldr	r3, [pc, #56]	; (800aea4 <USBD_LL_Init+0x94>)
 800ae6a:	2200      	movs	r2, #0
 800ae6c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800ae6e:	480d      	ldr	r0, [pc, #52]	; (800aea4 <USBD_LL_Init+0x94>)
 800ae70:	f7f8 fee2 	bl	8003c38 <HAL_PCD_Init>
 800ae74:	4603      	mov	r3, r0
 800ae76:	2b00      	cmp	r3, #0
 800ae78:	d001      	beq.n	800ae7e <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800ae7a:	f7f6 fbf3 	bl	8001664 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800ae7e:	2180      	movs	r1, #128	; 0x80
 800ae80:	4808      	ldr	r0, [pc, #32]	; (800aea4 <USBD_LL_Init+0x94>)
 800ae82:	f7fa f84a 	bl	8004f1a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800ae86:	2240      	movs	r2, #64	; 0x40
 800ae88:	2100      	movs	r1, #0
 800ae8a:	4806      	ldr	r0, [pc, #24]	; (800aea4 <USBD_LL_Init+0x94>)
 800ae8c:	f7f9 fffe 	bl	8004e8c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800ae90:	2280      	movs	r2, #128	; 0x80
 800ae92:	2101      	movs	r1, #1
 800ae94:	4803      	ldr	r0, [pc, #12]	; (800aea4 <USBD_LL_Init+0x94>)
 800ae96:	f7f9 fff9 	bl	8004e8c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800ae9a:	2300      	movs	r3, #0
}
 800ae9c:	4618      	mov	r0, r3
 800ae9e:	3708      	adds	r7, #8
 800aea0:	46bd      	mov	sp, r7
 800aea2:	bd80      	pop	{r7, pc}
 800aea4:	20001d84 	.word	0x20001d84

0800aea8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800aea8:	b580      	push	{r7, lr}
 800aeaa:	b084      	sub	sp, #16
 800aeac:	af00      	add	r7, sp, #0
 800aeae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800aeb0:	2300      	movs	r3, #0
 800aeb2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800aeb4:	2300      	movs	r3, #0
 800aeb6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800aebe:	4618      	mov	r0, r3
 800aec0:	f7f8 ffe2 	bl	8003e88 <HAL_PCD_Start>
 800aec4:	4603      	mov	r3, r0
 800aec6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800aec8:	7bfb      	ldrb	r3, [r7, #15]
 800aeca:	4618      	mov	r0, r3
 800aecc:	f000 f92a 	bl	800b124 <USBD_Get_USB_Status>
 800aed0:	4603      	mov	r3, r0
 800aed2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800aed4:	7bbb      	ldrb	r3, [r7, #14]
}
 800aed6:	4618      	mov	r0, r3
 800aed8:	3710      	adds	r7, #16
 800aeda:	46bd      	mov	sp, r7
 800aedc:	bd80      	pop	{r7, pc}

0800aede <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800aede:	b580      	push	{r7, lr}
 800aee0:	b084      	sub	sp, #16
 800aee2:	af00      	add	r7, sp, #0
 800aee4:	6078      	str	r0, [r7, #4]
 800aee6:	4608      	mov	r0, r1
 800aee8:	4611      	mov	r1, r2
 800aeea:	461a      	mov	r2, r3
 800aeec:	4603      	mov	r3, r0
 800aeee:	70fb      	strb	r3, [r7, #3]
 800aef0:	460b      	mov	r3, r1
 800aef2:	70bb      	strb	r3, [r7, #2]
 800aef4:	4613      	mov	r3, r2
 800aef6:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800aef8:	2300      	movs	r3, #0
 800aefa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800aefc:	2300      	movs	r3, #0
 800aefe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800af06:	78bb      	ldrb	r3, [r7, #2]
 800af08:	883a      	ldrh	r2, [r7, #0]
 800af0a:	78f9      	ldrb	r1, [r7, #3]
 800af0c:	f7f9 fbc6 	bl	800469c <HAL_PCD_EP_Open>
 800af10:	4603      	mov	r3, r0
 800af12:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800af14:	7bfb      	ldrb	r3, [r7, #15]
 800af16:	4618      	mov	r0, r3
 800af18:	f000 f904 	bl	800b124 <USBD_Get_USB_Status>
 800af1c:	4603      	mov	r3, r0
 800af1e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800af20:	7bbb      	ldrb	r3, [r7, #14]
}
 800af22:	4618      	mov	r0, r3
 800af24:	3710      	adds	r7, #16
 800af26:	46bd      	mov	sp, r7
 800af28:	bd80      	pop	{r7, pc}

0800af2a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800af2a:	b580      	push	{r7, lr}
 800af2c:	b084      	sub	sp, #16
 800af2e:	af00      	add	r7, sp, #0
 800af30:	6078      	str	r0, [r7, #4]
 800af32:	460b      	mov	r3, r1
 800af34:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800af36:	2300      	movs	r3, #0
 800af38:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800af3a:	2300      	movs	r3, #0
 800af3c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800af44:	78fa      	ldrb	r2, [r7, #3]
 800af46:	4611      	mov	r1, r2
 800af48:	4618      	mov	r0, r3
 800af4a:	f7f9 fc0f 	bl	800476c <HAL_PCD_EP_Close>
 800af4e:	4603      	mov	r3, r0
 800af50:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800af52:	7bfb      	ldrb	r3, [r7, #15]
 800af54:	4618      	mov	r0, r3
 800af56:	f000 f8e5 	bl	800b124 <USBD_Get_USB_Status>
 800af5a:	4603      	mov	r3, r0
 800af5c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800af5e:	7bbb      	ldrb	r3, [r7, #14]
}
 800af60:	4618      	mov	r0, r3
 800af62:	3710      	adds	r7, #16
 800af64:	46bd      	mov	sp, r7
 800af66:	bd80      	pop	{r7, pc}

0800af68 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800af68:	b580      	push	{r7, lr}
 800af6a:	b084      	sub	sp, #16
 800af6c:	af00      	add	r7, sp, #0
 800af6e:	6078      	str	r0, [r7, #4]
 800af70:	460b      	mov	r3, r1
 800af72:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800af74:	2300      	movs	r3, #0
 800af76:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800af78:	2300      	movs	r3, #0
 800af7a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800af82:	78fa      	ldrb	r2, [r7, #3]
 800af84:	4611      	mov	r1, r2
 800af86:	4618      	mov	r0, r3
 800af88:	f7f9 fce7 	bl	800495a <HAL_PCD_EP_SetStall>
 800af8c:	4603      	mov	r3, r0
 800af8e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800af90:	7bfb      	ldrb	r3, [r7, #15]
 800af92:	4618      	mov	r0, r3
 800af94:	f000 f8c6 	bl	800b124 <USBD_Get_USB_Status>
 800af98:	4603      	mov	r3, r0
 800af9a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800af9c:	7bbb      	ldrb	r3, [r7, #14]
}
 800af9e:	4618      	mov	r0, r3
 800afa0:	3710      	adds	r7, #16
 800afa2:	46bd      	mov	sp, r7
 800afa4:	bd80      	pop	{r7, pc}

0800afa6 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800afa6:	b580      	push	{r7, lr}
 800afa8:	b084      	sub	sp, #16
 800afaa:	af00      	add	r7, sp, #0
 800afac:	6078      	str	r0, [r7, #4]
 800afae:	460b      	mov	r3, r1
 800afb0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800afb2:	2300      	movs	r3, #0
 800afb4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800afb6:	2300      	movs	r3, #0
 800afb8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800afba:	687b      	ldr	r3, [r7, #4]
 800afbc:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800afc0:	78fa      	ldrb	r2, [r7, #3]
 800afc2:	4611      	mov	r1, r2
 800afc4:	4618      	mov	r0, r3
 800afc6:	f7f9 fd2c 	bl	8004a22 <HAL_PCD_EP_ClrStall>
 800afca:	4603      	mov	r3, r0
 800afcc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800afce:	7bfb      	ldrb	r3, [r7, #15]
 800afd0:	4618      	mov	r0, r3
 800afd2:	f000 f8a7 	bl	800b124 <USBD_Get_USB_Status>
 800afd6:	4603      	mov	r3, r0
 800afd8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800afda:	7bbb      	ldrb	r3, [r7, #14]
}
 800afdc:	4618      	mov	r0, r3
 800afde:	3710      	adds	r7, #16
 800afe0:	46bd      	mov	sp, r7
 800afe2:	bd80      	pop	{r7, pc}

0800afe4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800afe4:	b480      	push	{r7}
 800afe6:	b085      	sub	sp, #20
 800afe8:	af00      	add	r7, sp, #0
 800afea:	6078      	str	r0, [r7, #4]
 800afec:	460b      	mov	r3, r1
 800afee:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800aff6:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800aff8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800affc:	2b00      	cmp	r3, #0
 800affe:	da0b      	bge.n	800b018 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800b000:	78fb      	ldrb	r3, [r7, #3]
 800b002:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b006:	68f9      	ldr	r1, [r7, #12]
 800b008:	4613      	mov	r3, r2
 800b00a:	00db      	lsls	r3, r3, #3
 800b00c:	1a9b      	subs	r3, r3, r2
 800b00e:	009b      	lsls	r3, r3, #2
 800b010:	440b      	add	r3, r1
 800b012:	333e      	adds	r3, #62	; 0x3e
 800b014:	781b      	ldrb	r3, [r3, #0]
 800b016:	e00b      	b.n	800b030 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800b018:	78fb      	ldrb	r3, [r7, #3]
 800b01a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b01e:	68f9      	ldr	r1, [r7, #12]
 800b020:	4613      	mov	r3, r2
 800b022:	00db      	lsls	r3, r3, #3
 800b024:	1a9b      	subs	r3, r3, r2
 800b026:	009b      	lsls	r3, r3, #2
 800b028:	440b      	add	r3, r1
 800b02a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800b02e:	781b      	ldrb	r3, [r3, #0]
  }
}
 800b030:	4618      	mov	r0, r3
 800b032:	3714      	adds	r7, #20
 800b034:	46bd      	mov	sp, r7
 800b036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b03a:	4770      	bx	lr

0800b03c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800b03c:	b580      	push	{r7, lr}
 800b03e:	b084      	sub	sp, #16
 800b040:	af00      	add	r7, sp, #0
 800b042:	6078      	str	r0, [r7, #4]
 800b044:	460b      	mov	r3, r1
 800b046:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b048:	2300      	movs	r3, #0
 800b04a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b04c:	2300      	movs	r3, #0
 800b04e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800b056:	78fa      	ldrb	r2, [r7, #3]
 800b058:	4611      	mov	r1, r2
 800b05a:	4618      	mov	r0, r3
 800b05c:	f7f9 faf9 	bl	8004652 <HAL_PCD_SetAddress>
 800b060:	4603      	mov	r3, r0
 800b062:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b064:	7bfb      	ldrb	r3, [r7, #15]
 800b066:	4618      	mov	r0, r3
 800b068:	f000 f85c 	bl	800b124 <USBD_Get_USB_Status>
 800b06c:	4603      	mov	r3, r0
 800b06e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b070:	7bbb      	ldrb	r3, [r7, #14]
}
 800b072:	4618      	mov	r0, r3
 800b074:	3710      	adds	r7, #16
 800b076:	46bd      	mov	sp, r7
 800b078:	bd80      	pop	{r7, pc}

0800b07a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800b07a:	b580      	push	{r7, lr}
 800b07c:	b086      	sub	sp, #24
 800b07e:	af00      	add	r7, sp, #0
 800b080:	60f8      	str	r0, [r7, #12]
 800b082:	607a      	str	r2, [r7, #4]
 800b084:	603b      	str	r3, [r7, #0]
 800b086:	460b      	mov	r3, r1
 800b088:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b08a:	2300      	movs	r3, #0
 800b08c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b08e:	2300      	movs	r3, #0
 800b090:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800b092:	68fb      	ldr	r3, [r7, #12]
 800b094:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800b098:	7af9      	ldrb	r1, [r7, #11]
 800b09a:	683b      	ldr	r3, [r7, #0]
 800b09c:	687a      	ldr	r2, [r7, #4]
 800b09e:	f7f9 fc12 	bl	80048c6 <HAL_PCD_EP_Transmit>
 800b0a2:	4603      	mov	r3, r0
 800b0a4:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b0a6:	7dfb      	ldrb	r3, [r7, #23]
 800b0a8:	4618      	mov	r0, r3
 800b0aa:	f000 f83b 	bl	800b124 <USBD_Get_USB_Status>
 800b0ae:	4603      	mov	r3, r0
 800b0b0:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800b0b2:	7dbb      	ldrb	r3, [r7, #22]
}
 800b0b4:	4618      	mov	r0, r3
 800b0b6:	3718      	adds	r7, #24
 800b0b8:	46bd      	mov	sp, r7
 800b0ba:	bd80      	pop	{r7, pc}

0800b0bc <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800b0bc:	b580      	push	{r7, lr}
 800b0be:	b086      	sub	sp, #24
 800b0c0:	af00      	add	r7, sp, #0
 800b0c2:	60f8      	str	r0, [r7, #12]
 800b0c4:	607a      	str	r2, [r7, #4]
 800b0c6:	603b      	str	r3, [r7, #0]
 800b0c8:	460b      	mov	r3, r1
 800b0ca:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b0cc:	2300      	movs	r3, #0
 800b0ce:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b0d0:	2300      	movs	r3, #0
 800b0d2:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800b0d4:	68fb      	ldr	r3, [r7, #12]
 800b0d6:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800b0da:	7af9      	ldrb	r1, [r7, #11]
 800b0dc:	683b      	ldr	r3, [r7, #0]
 800b0de:	687a      	ldr	r2, [r7, #4]
 800b0e0:	f7f9 fb8e 	bl	8004800 <HAL_PCD_EP_Receive>
 800b0e4:	4603      	mov	r3, r0
 800b0e6:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b0e8:	7dfb      	ldrb	r3, [r7, #23]
 800b0ea:	4618      	mov	r0, r3
 800b0ec:	f000 f81a 	bl	800b124 <USBD_Get_USB_Status>
 800b0f0:	4603      	mov	r3, r0
 800b0f2:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800b0f4:	7dbb      	ldrb	r3, [r7, #22]
}
 800b0f6:	4618      	mov	r0, r3
 800b0f8:	3718      	adds	r7, #24
 800b0fa:	46bd      	mov	sp, r7
 800b0fc:	bd80      	pop	{r7, pc}

0800b0fe <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b0fe:	b580      	push	{r7, lr}
 800b100:	b082      	sub	sp, #8
 800b102:	af00      	add	r7, sp, #0
 800b104:	6078      	str	r0, [r7, #4]
 800b106:	460b      	mov	r3, r1
 800b108:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800b110:	78fa      	ldrb	r2, [r7, #3]
 800b112:	4611      	mov	r1, r2
 800b114:	4618      	mov	r0, r3
 800b116:	f7f9 fbbe 	bl	8004896 <HAL_PCD_EP_GetRxCount>
 800b11a:	4603      	mov	r3, r0
}
 800b11c:	4618      	mov	r0, r3
 800b11e:	3708      	adds	r7, #8
 800b120:	46bd      	mov	sp, r7
 800b122:	bd80      	pop	{r7, pc}

0800b124 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800b124:	b480      	push	{r7}
 800b126:	b085      	sub	sp, #20
 800b128:	af00      	add	r7, sp, #0
 800b12a:	4603      	mov	r3, r0
 800b12c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b12e:	2300      	movs	r3, #0
 800b130:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800b132:	79fb      	ldrb	r3, [r7, #7]
 800b134:	2b03      	cmp	r3, #3
 800b136:	d817      	bhi.n	800b168 <USBD_Get_USB_Status+0x44>
 800b138:	a201      	add	r2, pc, #4	; (adr r2, 800b140 <USBD_Get_USB_Status+0x1c>)
 800b13a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b13e:	bf00      	nop
 800b140:	0800b151 	.word	0x0800b151
 800b144:	0800b157 	.word	0x0800b157
 800b148:	0800b15d 	.word	0x0800b15d
 800b14c:	0800b163 	.word	0x0800b163
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800b150:	2300      	movs	r3, #0
 800b152:	73fb      	strb	r3, [r7, #15]
    break;
 800b154:	e00b      	b.n	800b16e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800b156:	2303      	movs	r3, #3
 800b158:	73fb      	strb	r3, [r7, #15]
    break;
 800b15a:	e008      	b.n	800b16e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800b15c:	2301      	movs	r3, #1
 800b15e:	73fb      	strb	r3, [r7, #15]
    break;
 800b160:	e005      	b.n	800b16e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800b162:	2303      	movs	r3, #3
 800b164:	73fb      	strb	r3, [r7, #15]
    break;
 800b166:	e002      	b.n	800b16e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800b168:	2303      	movs	r3, #3
 800b16a:	73fb      	strb	r3, [r7, #15]
    break;
 800b16c:	bf00      	nop
  }
  return usb_status;
 800b16e:	7bfb      	ldrb	r3, [r7, #15]
}
 800b170:	4618      	mov	r0, r3
 800b172:	3714      	adds	r7, #20
 800b174:	46bd      	mov	sp, r7
 800b176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b17a:	4770      	bx	lr

0800b17c <D16_GENERIC>:
 800b17c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b180:	b089      	sub	sp, #36	; 0x24
 800b182:	68d4      	ldr	r4, [r2, #12]
 800b184:	8cd5      	ldrh	r5, [r2, #38]	; 0x26
 800b186:	6993      	ldr	r3, [r2, #24]
 800b188:	9407      	str	r4, [sp, #28]
 800b18a:	6b14      	ldr	r4, [r2, #48]	; 0x30
 800b18c:	9306      	str	r3, [sp, #24]
 800b18e:	9402      	str	r4, [sp, #8]
 800b190:	f8d2 a010 	ldr.w	sl, [r2, #16]
 800b194:	f8d2 b014 	ldr.w	fp, [r2, #20]
 800b198:	69d3      	ldr	r3, [r2, #28]
 800b19a:	6896      	ldr	r6, [r2, #8]
 800b19c:	6b54      	ldr	r4, [r2, #52]	; 0x34
 800b19e:	9103      	str	r1, [sp, #12]
 800b1a0:	2d00      	cmp	r5, #0
 800b1a2:	d066      	beq.n	800b272 <D16_GENERIC+0xf6>
 800b1a4:	f004 0510 	and.w	r5, r4, #16
 800b1a8:	f004 0420 	and.w	r4, r4, #32
 800b1ac:	9504      	str	r5, [sp, #16]
 800b1ae:	4938      	ldr	r1, [pc, #224]	; (800b290 <D16_GENERIC+0x114>)
 800b1b0:	9405      	str	r4, [sp, #20]
 800b1b2:	f04f 0e00 	mov.w	lr, #0
 800b1b6:	4635      	mov	r5, r6
 800b1b8:	e04f      	b.n	800b25a <D16_GENERIC+0xde>
 800b1ba:	5d87      	ldrb	r7, [r0, r6]
 800b1bc:	7804      	ldrb	r4, [r0, #0]
 800b1be:	eb00 0046 	add.w	r0, r0, r6, lsl #1
 800b1c2:	eb04 2407 	add.w	r4, r4, r7, lsl #8
 800b1c6:	b2e6      	uxtb	r6, r4
 800b1c8:	f3c4 2407 	ubfx	r4, r4, #8, #8
 800b1cc:	f851 6026 	ldr.w	r6, [r1, r6, lsl #2]
 800b1d0:	f851 4024 	ldr.w	r4, [r1, r4, lsl #2]
 800b1d4:	4433      	add	r3, r6
 800b1d6:	eb04 2493 	add.w	r4, r4, r3, lsr #10
 800b1da:	f3c4 0609 	ubfx	r6, r4, #0, #10
 800b1de:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b1e2:	ea46 4603 	orr.w	r6, r6, r3, lsl #16
 800b1e6:	0aa3      	lsrs	r3, r4, #10
 800b1e8:	4c2a      	ldr	r4, [pc, #168]	; (800b294 <D16_GENERIC+0x118>)
 800b1ea:	fb26 5404 	smlad	r4, r6, r4, r5
 800b1ee:	4d2a      	ldr	r5, [pc, #168]	; (800b298 <D16_GENERIC+0x11c>)
 800b1f0:	fb26 f505 	smuad	r5, r6, r5
 800b1f4:	f5a4 6400 	sub.w	r4, r4, #2048	; 0x800
 800b1f8:	eb04 080a 	add.w	r8, r4, sl
 800b1fc:	eba8 080b 	sub.w	r8, r8, fp
 800b200:	4646      	mov	r6, r8
 800b202:	17f7      	asrs	r7, r6, #31
 800b204:	e9cd 6700 	strd	r6, r7, [sp]
 800b208:	9e04      	ldr	r6, [sp, #16]
 800b20a:	f10e 0c01 	add.w	ip, lr, #1
 800b20e:	b16e      	cbz	r6, 800b22c <D16_GENERIC+0xb0>
 800b210:	6a16      	ldr	r6, [r2, #32]
 800b212:	9f01      	ldr	r7, [sp, #4]
 800b214:	fba8 8906 	umull	r8, r9, r8, r6
 800b218:	fb06 9907 	mla	r9, r6, r7, r9
 800b21c:	f118 4800 	adds.w	r8, r8, #2147483648	; 0x80000000
 800b220:	f149 0900 	adc.w	r9, r9, #0
 800b224:	ea4f 0a49 	mov.w	sl, r9, lsl #1
 800b228:	46a3      	mov	fp, r4
 800b22a:	4654      	mov	r4, sl
 800b22c:	8d16      	ldrh	r6, [r2, #40]	; 0x28
 800b22e:	9f02      	ldr	r7, [sp, #8]
 800b230:	0424      	lsls	r4, r4, #16
 800b232:	f04f 4800 	mov.w	r8, #2147483648	; 0x80000000
 800b236:	f04f 0900 	mov.w	r9, #0
 800b23a:	fb0e fe06 	mul.w	lr, lr, r6
 800b23e:	fbc7 8904 	smlal	r8, r9, r7, r4
 800b242:	9e03      	ldr	r6, [sp, #12]
 800b244:	464f      	mov	r7, r9
 800b246:	10bc      	asrs	r4, r7, #2
 800b248:	f304 040f 	ssat	r4, #16, r4
 800b24c:	f826 401e 	strh.w	r4, [r6, lr, lsl #1]
 800b250:	8cd4      	ldrh	r4, [r2, #38]	; 0x26
 800b252:	fa1f fe8c 	uxth.w	lr, ip
 800b256:	4574      	cmp	r4, lr
 800b258:	d90a      	bls.n	800b270 <D16_GENERIC+0xf4>
 800b25a:	8d54      	ldrh	r4, [r2, #42]	; 0x2a
 800b25c:	2c01      	cmp	r4, #1
 800b25e:	b2e6      	uxtb	r6, r4
 800b260:	d1ab      	bne.n	800b1ba <D16_GENERIC+0x3e>
 800b262:	9e05      	ldr	r6, [sp, #20]
 800b264:	f850 4b02 	ldr.w	r4, [r0], #2
 800b268:	2e00      	cmp	r6, #0
 800b26a:	d0ac      	beq.n	800b1c6 <D16_GENERIC+0x4a>
 800b26c:	ba64      	rev16	r4, r4
 800b26e:	e7aa      	b.n	800b1c6 <D16_GENERIC+0x4a>
 800b270:	462e      	mov	r6, r5
 800b272:	9907      	ldr	r1, [sp, #28]
 800b274:	61d3      	str	r3, [r2, #28]
 800b276:	9b06      	ldr	r3, [sp, #24]
 800b278:	6096      	str	r6, [r2, #8]
 800b27a:	2000      	movs	r0, #0
 800b27c:	60d1      	str	r1, [r2, #12]
 800b27e:	f8c2 a010 	str.w	sl, [r2, #16]
 800b282:	f8c2 b014 	str.w	fp, [r2, #20]
 800b286:	6193      	str	r3, [r2, #24]
 800b288:	b009      	add	sp, #36	; 0x24
 800b28a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b28e:	bf00      	nop
 800b290:	20000000 	.word	0x20000000
 800b294:	00030001 	.word	0x00030001
 800b298:	00010003 	.word	0x00010003

0800b29c <D24_GENERIC>:
 800b29c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b2a0:	8cd6      	ldrh	r6, [r2, #38]	; 0x26
 800b2a2:	6993      	ldr	r3, [r2, #24]
 800b2a4:	6b15      	ldr	r5, [r2, #48]	; 0x30
 800b2a6:	f8d2 a010 	ldr.w	sl, [r2, #16]
 800b2aa:	f8d2 9014 	ldr.w	r9, [r2, #20]
 800b2ae:	6894      	ldr	r4, [r2, #8]
 800b2b0:	f8d2 b00c 	ldr.w	fp, [r2, #12]
 800b2b4:	b089      	sub	sp, #36	; 0x24
 800b2b6:	9307      	str	r3, [sp, #28]
 800b2b8:	9503      	str	r5, [sp, #12]
 800b2ba:	69d3      	ldr	r3, [r2, #28]
 800b2bc:	6b55      	ldr	r5, [r2, #52]	; 0x34
 800b2be:	9104      	str	r1, [sp, #16]
 800b2c0:	2e00      	cmp	r6, #0
 800b2c2:	f000 8096 	beq.w	800b3f2 <D24_GENERIC+0x156>
 800b2c6:	f005 0610 	and.w	r6, r5, #16
 800b2ca:	f005 0520 	and.w	r5, r5, #32
 800b2ce:	4954      	ldr	r1, [pc, #336]	; (800b420 <D24_GENERIC+0x184>)
 800b2d0:	9605      	str	r6, [sp, #20]
 800b2d2:	9506      	str	r5, [sp, #24]
 800b2d4:	f04f 0e00 	mov.w	lr, #0
 800b2d8:	f8cd 9008 	str.w	r9, [sp, #8]
 800b2dc:	e06a      	b.n	800b3b4 <D24_GENERIC+0x118>
 800b2de:	f810 5016 	ldrb.w	r5, [r0, r6, lsl #1]
 800b2e2:	f810 8007 	ldrb.w	r8, [r0, r7]
 800b2e6:	f890 c000 	ldrb.w	ip, [r0]
 800b2ea:	042d      	lsls	r5, r5, #16
 800b2ec:	eb00 0046 	add.w	r0, r0, r6, lsl #1
 800b2f0:	eb05 2508 	add.w	r5, r5, r8, lsl #8
 800b2f4:	44ac      	add	ip, r5
 800b2f6:	4438      	add	r0, r7
 800b2f8:	fa5f f68c 	uxtb.w	r6, ip
 800b2fc:	f3cc 2507 	ubfx	r5, ip, #8, #8
 800b300:	f851 6026 	ldr.w	r6, [r1, r6, lsl #2]
 800b304:	f851 7025 	ldr.w	r7, [r1, r5, lsl #2]
 800b308:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800b30c:	eb06 2693 	add.w	r6, r6, r3, lsr #10
 800b310:	eb07 2796 	add.w	r7, r7, r6, lsr #10
 800b314:	f851 302c 	ldr.w	r3, [r1, ip, lsl #2]
 800b318:	f3c7 0509 	ubfx	r5, r7, #0, #10
 800b31c:	f3c6 0609 	ubfx	r6, r6, #0, #10
 800b320:	ea45 4606 	orr.w	r6, r5, r6, lsl #16
 800b324:	eb03 2397 	add.w	r3, r3, r7, lsr #10
 800b328:	4d3e      	ldr	r5, [pc, #248]	; (800b424 <D24_GENERIC+0x188>)
 800b32a:	fb26 b705 	smlad	r7, r6, r5, fp
 800b32e:	4d3e      	ldr	r5, [pc, #248]	; (800b428 <D24_GENERIC+0x18c>)
 800b330:	fb26 4b05 	smlad	fp, r6, r5, r4
 800b334:	f3c3 0409 	ubfx	r4, r3, #0, #10
 800b338:	eb04 0844 	add.w	r8, r4, r4, lsl #1
 800b33c:	eb0b 0b48 	add.w	fp, fp, r8, lsl #1
 800b340:	2401      	movs	r4, #1
 800b342:	fb26 f604 	smuad	r6, r6, r4
 800b346:	f5a7 55d8 	sub.w	r5, r7, #6912	; 0x1b00
 800b34a:	9f02      	ldr	r7, [sp, #8]
 800b34c:	eb0e 0c04 	add.w	ip, lr, r4
 800b350:	eb08 0406 	add.w	r4, r8, r6
 800b354:	eb05 060a 	add.w	r6, r5, sl
 800b358:	1bf6      	subs	r6, r6, r7
 800b35a:	4637      	mov	r7, r6
 800b35c:	ea4f 78e6 	mov.w	r8, r6, asr #31
 800b360:	e9cd 7800 	strd	r7, r8, [sp]
 800b364:	9f05      	ldr	r7, [sp, #20]
 800b366:	b177      	cbz	r7, 800b386 <D24_GENERIC+0xea>
 800b368:	f8d2 8020 	ldr.w	r8, [r2, #32]
 800b36c:	9502      	str	r5, [sp, #8]
 800b36e:	fba6 9a08 	umull	r9, sl, r6, r8
 800b372:	9e01      	ldr	r6, [sp, #4]
 800b374:	fb08 aa06 	mla	sl, r8, r6, sl
 800b378:	f119 4600 	adds.w	r6, r9, #2147483648	; 0x80000000
 800b37c:	f14a 0700 	adc.w	r7, sl, #0
 800b380:	ea4f 0a47 	mov.w	sl, r7, lsl #1
 800b384:	4655      	mov	r5, sl
 800b386:	8d16      	ldrh	r6, [r2, #40]	; 0x28
 800b388:	9f03      	ldr	r7, [sp, #12]
 800b38a:	03ad      	lsls	r5, r5, #14
 800b38c:	f04f 4800 	mov.w	r8, #2147483648	; 0x80000000
 800b390:	f04f 0900 	mov.w	r9, #0
 800b394:	fb0e fe06 	mul.w	lr, lr, r6
 800b398:	fbc7 8905 	smlal	r8, r9, r7, r5
 800b39c:	9e04      	ldr	r6, [sp, #16]
 800b39e:	464f      	mov	r7, r9
 800b3a0:	10bd      	asrs	r5, r7, #2
 800b3a2:	f305 050f 	ssat	r5, #16, r5
 800b3a6:	f826 501e 	strh.w	r5, [r6, lr, lsl #1]
 800b3aa:	8cd5      	ldrh	r5, [r2, #38]	; 0x26
 800b3ac:	fa1f fe8c 	uxth.w	lr, ip
 800b3b0:	4575      	cmp	r5, lr
 800b3b2:	d91c      	bls.n	800b3ee <D24_GENERIC+0x152>
 800b3b4:	8d55      	ldrh	r5, [r2, #42]	; 0x2a
 800b3b6:	b2ef      	uxtb	r7, r5
 800b3b8:	2d01      	cmp	r5, #1
 800b3ba:	b23e      	sxth	r6, r7
 800b3bc:	d18f      	bne.n	800b2de <D24_GENERIC+0x42>
 800b3be:	9d06      	ldr	r5, [sp, #24]
 800b3c0:	b15d      	cbz	r5, 800b3da <D24_GENERIC+0x13e>
 800b3c2:	f01e 0f01 	tst.w	lr, #1
 800b3c6:	d122      	bne.n	800b40e <D24_GENERIC+0x172>
 800b3c8:	7805      	ldrb	r5, [r0, #0]
 800b3ca:	78c7      	ldrb	r7, [r0, #3]
 800b3cc:	7846      	ldrb	r6, [r0, #1]
 800b3ce:	022d      	lsls	r5, r5, #8
 800b3d0:	eb05 4c07 	add.w	ip, r5, r7, lsl #16
 800b3d4:	44b4      	add	ip, r6
 800b3d6:	3002      	adds	r0, #2
 800b3d8:	e78e      	b.n	800b2f8 <D24_GENERIC+0x5c>
 800b3da:	7846      	ldrb	r6, [r0, #1]
 800b3dc:	f890 c002 	ldrb.w	ip, [r0, #2]
 800b3e0:	f810 5b03 	ldrb.w	r5, [r0], #3
 800b3e4:	0236      	lsls	r6, r6, #8
 800b3e6:	eb06 4c0c 	add.w	ip, r6, ip, lsl #16
 800b3ea:	44ac      	add	ip, r5
 800b3ec:	e784      	b.n	800b2f8 <D24_GENERIC+0x5c>
 800b3ee:	f8dd 9008 	ldr.w	r9, [sp, #8]
 800b3f2:	61d3      	str	r3, [r2, #28]
 800b3f4:	9b07      	ldr	r3, [sp, #28]
 800b3f6:	6094      	str	r4, [r2, #8]
 800b3f8:	2000      	movs	r0, #0
 800b3fa:	f8c2 b00c 	str.w	fp, [r2, #12]
 800b3fe:	f8c2 a010 	str.w	sl, [r2, #16]
 800b402:	f8c2 9014 	str.w	r9, [r2, #20]
 800b406:	6193      	str	r3, [r2, #24]
 800b408:	b009      	add	sp, #36	; 0x24
 800b40a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b40e:	78c5      	ldrb	r5, [r0, #3]
 800b410:	7887      	ldrb	r7, [r0, #2]
 800b412:	f810 6b04 	ldrb.w	r6, [r0], #4
 800b416:	022d      	lsls	r5, r5, #8
 800b418:	eb05 4c07 	add.w	ip, r5, r7, lsl #16
 800b41c:	44b4      	add	ip, r6
 800b41e:	e76b      	b.n	800b2f8 <D24_GENERIC+0x5c>
 800b420:	20000000 	.word	0x20000000
 800b424:	00030001 	.word	0x00030001
 800b428:	00060007 	.word	0x00060007

0800b42c <D32_GENERIC>:
 800b42c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b430:	8cd5      	ldrh	r5, [r2, #38]	; 0x26
 800b432:	6993      	ldr	r3, [r2, #24]
 800b434:	6b14      	ldr	r4, [r2, #48]	; 0x30
 800b436:	f8d2 a010 	ldr.w	sl, [r2, #16]
 800b43a:	f8d2 9014 	ldr.w	r9, [r2, #20]
 800b43e:	69d6      	ldr	r6, [r2, #28]
 800b440:	f8d2 b00c 	ldr.w	fp, [r2, #12]
 800b444:	b089      	sub	sp, #36	; 0x24
 800b446:	9307      	str	r3, [sp, #28]
 800b448:	9403      	str	r4, [sp, #12]
 800b44a:	6893      	ldr	r3, [r2, #8]
 800b44c:	6b54      	ldr	r4, [r2, #52]	; 0x34
 800b44e:	9104      	str	r1, [sp, #16]
 800b450:	2d00      	cmp	r5, #0
 800b452:	f000 809f 	beq.w	800b594 <D32_GENERIC+0x168>
 800b456:	f004 0510 	and.w	r5, r4, #16
 800b45a:	f004 0420 	and.w	r4, r4, #32
 800b45e:	9505      	str	r5, [sp, #20]
 800b460:	4953      	ldr	r1, [pc, #332]	; (800b5b0 <D32_GENERIC+0x184>)
 800b462:	9406      	str	r4, [sp, #24]
 800b464:	f04f 0c00 	mov.w	ip, #0
 800b468:	f8cd 9008 	str.w	r9, [sp, #8]
 800b46c:	461d      	mov	r5, r3
 800b46e:	4617      	mov	r7, r2
 800b470:	e077      	b.n	800b562 <D32_GENERIC+0x136>
 800b472:	f818 3003 	ldrb.w	r3, [r8, r3]
 800b476:	f810 800e 	ldrb.w	r8, [r0, lr]
 800b47a:	f810 e002 	ldrb.w	lr, [r0, r2]
 800b47e:	7800      	ldrb	r0, [r0, #0]
 800b480:	041b      	lsls	r3, r3, #16
 800b482:	eb03 6308 	add.w	r3, r3, r8, lsl #24
 800b486:	eb03 230e 	add.w	r3, r3, lr, lsl #8
 800b48a:	4403      	add	r3, r0
 800b48c:	eb04 0042 	add.w	r0, r4, r2, lsl #1
 800b490:	b2dc      	uxtb	r4, r3
 800b492:	f3c3 2207 	ubfx	r2, r3, #8, #8
 800b496:	f3c3 4807 	ubfx	r8, r3, #16, #8
 800b49a:	f851 4024 	ldr.w	r4, [r1, r4, lsl #2]
 800b49e:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800b4a2:	0e1b      	lsrs	r3, r3, #24
 800b4a4:	eb04 2496 	add.w	r4, r4, r6, lsr #10
 800b4a8:	f851 6028 	ldr.w	r6, [r1, r8, lsl #2]
 800b4ac:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800b4b0:	eb02 2294 	add.w	r2, r2, r4, lsr #10
 800b4b4:	eb06 2e92 	add.w	lr, r6, r2, lsr #10
 800b4b8:	eb03 269e 	add.w	r6, r3, lr, lsr #10
 800b4bc:	f3c6 0309 	ubfx	r3, r6, #0, #10
 800b4c0:	f3c4 0409 	ubfx	r4, r4, #0, #10
 800b4c4:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800b4c8:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 800b4cc:	ea43 4e0e 	orr.w	lr, r3, lr, lsl #16
 800b4d0:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800b4d4:	4b37      	ldr	r3, [pc, #220]	; (800b5b4 <D32_GENERIC+0x188>)
 800b4d6:	fb22 b403 	smlad	r4, r2, r3, fp
 800b4da:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800b4de:	fb2e 4803 	smlad	r8, lr, r3, r4
 800b4e2:	4b35      	ldr	r3, [pc, #212]	; (800b5b8 <D32_GENERIC+0x18c>)
 800b4e4:	fb22 5503 	smlad	r5, r2, r3, r5
 800b4e8:	4b34      	ldr	r3, [pc, #208]	; (800b5bc <D32_GENERIC+0x190>)
 800b4ea:	fb2e 5b03 	smlad	fp, lr, r3, r5
 800b4ee:	2301      	movs	r3, #1
 800b4f0:	fb22 f203 	smuad	r2, r2, r3
 800b4f4:	4b32      	ldr	r3, [pc, #200]	; (800b5c0 <D32_GENERIC+0x194>)
 800b4f6:	fb2e 2503 	smlad	r5, lr, r3, r2
 800b4fa:	9b02      	ldr	r3, [sp, #8]
 800b4fc:	f5a8 4480 	sub.w	r4, r8, #16384	; 0x4000
 800b500:	eb04 080a 	add.w	r8, r4, sl
 800b504:	eba8 0803 	sub.w	r8, r8, r3
 800b508:	4642      	mov	r2, r8
 800b50a:	17d3      	asrs	r3, r2, #31
 800b50c:	e9cd 2300 	strd	r2, r3, [sp]
 800b510:	9b05      	ldr	r3, [sp, #20]
 800b512:	f10c 0e01 	add.w	lr, ip, #1
 800b516:	b16b      	cbz	r3, 800b534 <D32_GENERIC+0x108>
 800b518:	6a3a      	ldr	r2, [r7, #32]
 800b51a:	9b01      	ldr	r3, [sp, #4]
 800b51c:	9402      	str	r4, [sp, #8]
 800b51e:	fba8 8902 	umull	r8, r9, r8, r2
 800b522:	fb02 9903 	mla	r9, r2, r3, r9
 800b526:	f118 4800 	adds.w	r8, r8, #2147483648	; 0x80000000
 800b52a:	f149 0900 	adc.w	r9, r9, #0
 800b52e:	ea4f 0a49 	mov.w	sl, r9, lsl #1
 800b532:	4654      	mov	r4, sl
 800b534:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800b536:	9a04      	ldr	r2, [sp, #16]
 800b538:	fb0c fc03 	mul.w	ip, ip, r3
 800b53c:	9b03      	ldr	r3, [sp, #12]
 800b53e:	0364      	lsls	r4, r4, #13
 800b540:	f04f 4800 	mov.w	r8, #2147483648	; 0x80000000
 800b544:	f04f 0900 	mov.w	r9, #0
 800b548:	fbc3 8904 	smlal	r8, r9, r3, r4
 800b54c:	464b      	mov	r3, r9
 800b54e:	109b      	asrs	r3, r3, #2
 800b550:	f303 030f 	ssat	r3, #16, r3
 800b554:	f822 301c 	strh.w	r3, [r2, ip, lsl #1]
 800b558:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800b55a:	fa1f fc8e 	uxth.w	ip, lr
 800b55e:	4563      	cmp	r3, ip
 800b560:	d914      	bls.n	800b58c <D32_GENERIC+0x160>
 800b562:	8d7c      	ldrh	r4, [r7, #42]	; 0x2a
 800b564:	b2e2      	uxtb	r2, r4
 800b566:	eb02 0e42 	add.w	lr, r2, r2, lsl #1
 800b56a:	eb00 080e 	add.w	r8, r0, lr
 800b56e:	4253      	negs	r3, r2
 800b570:	2c01      	cmp	r4, #1
 800b572:	eb08 0403 	add.w	r4, r8, r3
 800b576:	f47f af7c 	bne.w	800b472 <D32_GENERIC+0x46>
 800b57a:	1d02      	adds	r2, r0, #4
 800b57c:	6803      	ldr	r3, [r0, #0]
 800b57e:	9806      	ldr	r0, [sp, #24]
 800b580:	b110      	cbz	r0, 800b588 <D32_GENERIC+0x15c>
 800b582:	ba5b      	rev16	r3, r3
 800b584:	4610      	mov	r0, r2
 800b586:	e783      	b.n	800b490 <D32_GENERIC+0x64>
 800b588:	4610      	mov	r0, r2
 800b58a:	e781      	b.n	800b490 <D32_GENERIC+0x64>
 800b58c:	f8dd 9008 	ldr.w	r9, [sp, #8]
 800b590:	462b      	mov	r3, r5
 800b592:	463a      	mov	r2, r7
 800b594:	6093      	str	r3, [r2, #8]
 800b596:	9b07      	ldr	r3, [sp, #28]
 800b598:	f8c2 b00c 	str.w	fp, [r2, #12]
 800b59c:	2000      	movs	r0, #0
 800b59e:	61d6      	str	r6, [r2, #28]
 800b5a0:	f8c2 a010 	str.w	sl, [r2, #16]
 800b5a4:	f8c2 9014 	str.w	r9, [r2, #20]
 800b5a8:	6193      	str	r3, [r2, #24]
 800b5aa:	b009      	add	sp, #36	; 0x24
 800b5ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b5b0:	20000000 	.word	0x20000000
 800b5b4:	00060003 	.word	0x00060003
 800b5b8:	000a000c 	.word	0x000a000c
 800b5bc:	000c000a 	.word	0x000c000a
 800b5c0:	00030006 	.word	0x00030006

0800b5c4 <D48_GENERIC>:
 800b5c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b5c8:	b089      	sub	sp, #36	; 0x24
 800b5ca:	6953      	ldr	r3, [r2, #20]
 800b5cc:	68d4      	ldr	r4, [r2, #12]
 800b5ce:	8cd5      	ldrh	r5, [r2, #38]	; 0x26
 800b5d0:	9302      	str	r3, [sp, #8]
 800b5d2:	9400      	str	r4, [sp, #0]
 800b5d4:	6993      	ldr	r3, [r2, #24]
 800b5d6:	6b14      	ldr	r4, [r2, #48]	; 0x30
 800b5d8:	9307      	str	r3, [sp, #28]
 800b5da:	9403      	str	r4, [sp, #12]
 800b5dc:	f8d2 a010 	ldr.w	sl, [r2, #16]
 800b5e0:	69d6      	ldr	r6, [r2, #28]
 800b5e2:	6893      	ldr	r3, [r2, #8]
 800b5e4:	6b54      	ldr	r4, [r2, #52]	; 0x34
 800b5e6:	9104      	str	r1, [sp, #16]
 800b5e8:	2d00      	cmp	r5, #0
 800b5ea:	f000 80c5 	beq.w	800b778 <D48_GENERIC+0x1b4>
 800b5ee:	f004 0510 	and.w	r5, r4, #16
 800b5f2:	f004 0420 	and.w	r4, r4, #32
 800b5f6:	4967      	ldr	r1, [pc, #412]	; (800b794 <D48_GENERIC+0x1d0>)
 800b5f8:	9505      	str	r5, [sp, #20]
 800b5fa:	9406      	str	r4, [sp, #24]
 800b5fc:	f04f 0c00 	mov.w	ip, #0
 800b600:	4657      	mov	r7, sl
 800b602:	9301      	str	r3, [sp, #4]
 800b604:	e09c      	b.n	800b740 <D48_GENERIC+0x17c>
 800b606:	f81b 4005 	ldrb.w	r4, [fp, r5]
 800b60a:	f810 b009 	ldrb.w	fp, [r0, r9]
 800b60e:	f81a 9009 	ldrb.w	r9, [sl, r9]
 800b612:	f810 a00e 	ldrb.w	sl, [r0, lr]
 800b616:	7800      	ldrb	r0, [r0, #0]
 800b618:	0424      	lsls	r4, r4, #16
 800b61a:	eb04 6b0b 	add.w	fp, r4, fp, lsl #24
 800b61e:	f818 4005 	ldrb.w	r4, [r8, r5]
 800b622:	eb0b 2b0a 	add.w	fp, fp, sl, lsl #8
 800b626:	44a8      	add	r8, r5
 800b628:	eb04 2409 	add.w	r4, r4, r9, lsl #8
 800b62c:	eb0b 0500 	add.w	r5, fp, r0
 800b630:	eb08 004e 	add.w	r0, r8, lr, lsl #1
 800b634:	fa5f f885 	uxtb.w	r8, r5
 800b638:	f3c5 2e07 	ubfx	lr, r5, #8, #8
 800b63c:	f851 a028 	ldr.w	sl, [r1, r8, lsl #2]
 800b640:	f851 902e 	ldr.w	r9, [r1, lr, lsl #2]
 800b644:	f3c5 4e07 	ubfx	lr, r5, #16, #8
 800b648:	0e2d      	lsrs	r5, r5, #24
 800b64a:	eb0a 2a96 	add.w	sl, sl, r6, lsr #10
 800b64e:	f851 802e 	ldr.w	r8, [r1, lr, lsl #2]
 800b652:	f851 e025 	ldr.w	lr, [r1, r5, lsl #2]
 800b656:	b2e6      	uxtb	r6, r4
 800b658:	eb09 259a 	add.w	r5, r9, sl, lsr #10
 800b65c:	f3c4 2407 	ubfx	r4, r4, #8, #8
 800b660:	eb08 2895 	add.w	r8, r8, r5, lsr #10
 800b664:	f851 6026 	ldr.w	r6, [r1, r6, lsl #2]
 800b668:	f851 9024 	ldr.w	r9, [r1, r4, lsl #2]
 800b66c:	eb0e 2498 	add.w	r4, lr, r8, lsr #10
 800b670:	eb06 2e94 	add.w	lr, r6, r4, lsr #10
 800b674:	eb09 269e 	add.w	r6, r9, lr, lsr #10
 800b678:	f3c5 0509 	ubfx	r5, r5, #0, #10
 800b67c:	f3c4 0409 	ubfx	r4, r4, #0, #10
 800b680:	f3c6 0909 	ubfx	r9, r6, #0, #10
 800b684:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 800b688:	f3c8 0809 	ubfx	r8, r8, #0, #10
 800b68c:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 800b690:	ea45 4a0a 	orr.w	sl, r5, sl, lsl #16
 800b694:	ea44 4808 	orr.w	r8, r4, r8, lsl #16
 800b698:	ea49 4e0e 	orr.w	lr, r9, lr, lsl #16
 800b69c:	4c3e      	ldr	r4, [pc, #248]	; (800b798 <D48_GENERIC+0x1d4>)
 800b69e:	9d00      	ldr	r5, [sp, #0]
 800b6a0:	fb2a 5404 	smlad	r4, sl, r4, r5
 800b6a4:	4d3d      	ldr	r5, [pc, #244]	; (800b79c <D48_GENERIC+0x1d8>)
 800b6a6:	fb28 4405 	smlad	r4, r8, r5, r4
 800b6aa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800b6ae:	fb2e 4b03 	smlad	fp, lr, r3, r4
 800b6b2:	4c3b      	ldr	r4, [pc, #236]	; (800b7a0 <D48_GENERIC+0x1dc>)
 800b6b4:	9b01      	ldr	r3, [sp, #4]
 800b6b6:	fb2a 3304 	smlad	r3, sl, r4, r3
 800b6ba:	f04f 141b 	mov.w	r4, #1769499	; 0x1b001b
 800b6be:	fb28 3304 	smlad	r3, r8, r4, r3
 800b6c2:	4c38      	ldr	r4, [pc, #224]	; (800b7a4 <D48_GENERIC+0x1e0>)
 800b6c4:	fb2e 3304 	smlad	r3, lr, r4, r3
 800b6c8:	2501      	movs	r5, #1
 800b6ca:	9300      	str	r3, [sp, #0]
 800b6cc:	fb2a fa05 	smuad	sl, sl, r5
 800b6d0:	4b35      	ldr	r3, [pc, #212]	; (800b7a8 <D48_GENERIC+0x1e4>)
 800b6d2:	fb28 a803 	smlad	r8, r8, r3, sl
 800b6d6:	4b35      	ldr	r3, [pc, #212]	; (800b7ac <D48_GENERIC+0x1e8>)
 800b6d8:	fb2e 8303 	smlad	r3, lr, r3, r8
 800b6dc:	f5ab 4458 	sub.w	r4, fp, #55296	; 0xd800
 800b6e0:	9301      	str	r3, [sp, #4]
 800b6e2:	9b02      	ldr	r3, [sp, #8]
 800b6e4:	eb04 0807 	add.w	r8, r4, r7
 800b6e8:	eba8 0803 	sub.w	r8, r8, r3
 800b6ec:	9b05      	ldr	r3, [sp, #20]
 800b6ee:	4465      	add	r5, ip
 800b6f0:	ea4f 7be8 	mov.w	fp, r8, asr #31
 800b6f4:	b163      	cbz	r3, 800b710 <D48_GENERIC+0x14c>
 800b6f6:	6a17      	ldr	r7, [r2, #32]
 800b6f8:	9402      	str	r4, [sp, #8]
 800b6fa:	fba8 8907 	umull	r8, r9, r8, r7
 800b6fe:	fb07 990b 	mla	r9, r7, fp, r9
 800b702:	f118 4800 	adds.w	r8, r8, #2147483648	; 0x80000000
 800b706:	f149 0900 	adc.w	r9, r9, #0
 800b70a:	ea4f 0749 	mov.w	r7, r9, lsl #1
 800b70e:	463c      	mov	r4, r7
 800b710:	f8b2 e028 	ldrh.w	lr, [r2, #40]	; 0x28
 800b714:	9b03      	ldr	r3, [sp, #12]
 800b716:	02e4      	lsls	r4, r4, #11
 800b718:	f04f 4800 	mov.w	r8, #2147483648	; 0x80000000
 800b71c:	f04f 0900 	mov.w	r9, #0
 800b720:	fb0c fc0e 	mul.w	ip, ip, lr
 800b724:	fbc3 8904 	smlal	r8, r9, r3, r4
 800b728:	9b04      	ldr	r3, [sp, #16]
 800b72a:	ea4f 04a9 	mov.w	r4, r9, asr #2
 800b72e:	f304 040f 	ssat	r4, #16, r4
 800b732:	f823 401c 	strh.w	r4, [r3, ip, lsl #1]
 800b736:	8cd4      	ldrh	r4, [r2, #38]	; 0x26
 800b738:	fa1f fc85 	uxth.w	ip, r5
 800b73c:	4564      	cmp	r4, ip
 800b73e:	d919      	bls.n	800b774 <D48_GENERIC+0x1b0>
 800b740:	8d54      	ldrh	r4, [r2, #42]	; 0x2a
 800b742:	fa5f fe84 	uxtb.w	lr, r4
 800b746:	eb0e 094e 	add.w	r9, lr, lr, lsl #1
 800b74a:	f1ce 0500 	rsb	r5, lr, #0
 800b74e:	eb00 0b09 	add.w	fp, r0, r9
 800b752:	eb0b 0a05 	add.w	sl, fp, r5
 800b756:	2c01      	cmp	r4, #1
 800b758:	eb0a 0809 	add.w	r8, sl, r9
 800b75c:	f47f af53 	bne.w	800b606 <D48_GENERIC+0x42>
 800b760:	9b06      	ldr	r3, [sp, #24]
 800b762:	6805      	ldr	r5, [r0, #0]
 800b764:	6844      	ldr	r4, [r0, #4]
 800b766:	3006      	adds	r0, #6
 800b768:	2b00      	cmp	r3, #0
 800b76a:	f43f af63 	beq.w	800b634 <D48_GENERIC+0x70>
 800b76e:	ba6d      	rev16	r5, r5
 800b770:	ba64      	rev16	r4, r4
 800b772:	e75f      	b.n	800b634 <D48_GENERIC+0x70>
 800b774:	9b01      	ldr	r3, [sp, #4]
 800b776:	46ba      	mov	sl, r7
 800b778:	6093      	str	r3, [r2, #8]
 800b77a:	9b00      	ldr	r3, [sp, #0]
 800b77c:	60d3      	str	r3, [r2, #12]
 800b77e:	9b02      	ldr	r3, [sp, #8]
 800b780:	6153      	str	r3, [r2, #20]
 800b782:	9b07      	ldr	r3, [sp, #28]
 800b784:	61d6      	str	r6, [r2, #28]
 800b786:	2000      	movs	r0, #0
 800b788:	f8c2 a010 	str.w	sl, [r2, #16]
 800b78c:	6193      	str	r3, [r2, #24]
 800b78e:	b009      	add	sp, #36	; 0x24
 800b790:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b794:	20000000 	.word	0x20000000
 800b798:	000f000a 	.word	0x000f000a
 800b79c:	00060003 	.word	0x00060003
 800b7a0:	00150019 	.word	0x00150019
 800b7a4:	00190015 	.word	0x00190015
 800b7a8:	00030006 	.word	0x00030006
 800b7ac:	000a000f 	.word	0x000a000f

0800b7b0 <D64_GENERIC>:
 800b7b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b7b4:	b089      	sub	sp, #36	; 0x24
 800b7b6:	6913      	ldr	r3, [r2, #16]
 800b7b8:	6895      	ldr	r5, [r2, #8]
 800b7ba:	9303      	str	r3, [sp, #12]
 800b7bc:	9501      	str	r5, [sp, #4]
 800b7be:	6953      	ldr	r3, [r2, #20]
 800b7c0:	68d5      	ldr	r5, [r2, #12]
 800b7c2:	8cd4      	ldrh	r4, [r2, #38]	; 0x26
 800b7c4:	9304      	str	r3, [sp, #16]
 800b7c6:	9500      	str	r5, [sp, #0]
 800b7c8:	6993      	ldr	r3, [r2, #24]
 800b7ca:	6b15      	ldr	r5, [r2, #48]	; 0x30
 800b7cc:	9307      	str	r3, [sp, #28]
 800b7ce:	9505      	str	r5, [sp, #20]
 800b7d0:	69d3      	ldr	r3, [r2, #28]
 800b7d2:	9106      	str	r1, [sp, #24]
 800b7d4:	2c00      	cmp	r4, #0
 800b7d6:	f000 80d9 	beq.w	800b98c <D64_GENERIC+0x1dc>
 800b7da:	6a11      	ldr	r1, [r2, #32]
 800b7dc:	9102      	str	r1, [sp, #8]
 800b7de:	f8df e1ec 	ldr.w	lr, [pc, #492]	; 800b9cc <D64_GENERIC+0x21c>
 800b7e2:	f04f 0c00 	mov.w	ip, #0
 800b7e6:	4681      	mov	r9, r0
 800b7e8:	e0c1      	b.n	800b96e <D64_GENERIC+0x1be>
 800b7ea:	eb06 0846 	add.w	r8, r6, r6, lsl #1
 800b7ee:	4274      	negs	r4, r6
 800b7f0:	eb09 0708 	add.w	r7, r9, r8
 800b7f4:	eb07 0a44 	add.w	sl, r7, r4, lsl #1
 800b7f8:	eb0a 0548 	add.w	r5, sl, r8, lsl #1
 800b7fc:	5d38      	ldrb	r0, [r7, r4]
 800b7fe:	5d29      	ldrb	r1, [r5, r4]
 800b800:	f81a b018 	ldrb.w	fp, [sl, r8, lsl #1]
 800b804:	f819 a008 	ldrb.w	sl, [r9, r8]
 800b808:	f817 8014 	ldrb.w	r8, [r7, r4, lsl #1]
 800b80c:	f899 7000 	ldrb.w	r7, [r9]
 800b810:	f815 9014 	ldrb.w	r9, [r5, r4, lsl #1]
 800b814:	4425      	add	r5, r4
 800b816:	0409      	lsls	r1, r1, #16
 800b818:	0400      	lsls	r0, r0, #16
 800b81a:	eb01 610b 	add.w	r1, r1, fp, lsl #24
 800b81e:	eb00 600a 	add.w	r0, r0, sl, lsl #24
 800b822:	f815 b014 	ldrb.w	fp, [r5, r4, lsl #1]
 800b826:	eb01 2109 	add.w	r1, r1, r9, lsl #8
 800b82a:	eb05 0444 	add.w	r4, r5, r4, lsl #1
 800b82e:	eb00 2008 	add.w	r0, r0, r8, lsl #8
 800b832:	4459      	add	r1, fp
 800b834:	eb04 0986 	add.w	r9, r4, r6, lsl #2
 800b838:	4438      	add	r0, r7
 800b83a:	b2c5      	uxtb	r5, r0
 800b83c:	f3c0 2407 	ubfx	r4, r0, #8, #8
 800b840:	f85e 6025 	ldr.w	r6, [lr, r5, lsl #2]
 800b844:	f85e 5024 	ldr.w	r5, [lr, r4, lsl #2]
 800b848:	f3c0 4407 	ubfx	r4, r0, #16, #8
 800b84c:	0e00      	lsrs	r0, r0, #24
 800b84e:	eb03 0806 	add.w	r8, r3, r6
 800b852:	f85e 7024 	ldr.w	r7, [lr, r4, lsl #2]
 800b856:	f85e 4020 	ldr.w	r4, [lr, r0, lsl #2]
 800b85a:	f3c1 2307 	ubfx	r3, r1, #8, #8
 800b85e:	b2c8      	uxtb	r0, r1
 800b860:	eb05 2598 	add.w	r5, r5, r8, lsr #10
 800b864:	eb07 2795 	add.w	r7, r7, r5, lsr #10
 800b868:	f85e 6020 	ldr.w	r6, [lr, r0, lsl #2]
 800b86c:	f85e 0023 	ldr.w	r0, [lr, r3, lsl #2]
 800b870:	f3c1 4307 	ubfx	r3, r1, #16, #8
 800b874:	eb04 2497 	add.w	r4, r4, r7, lsr #10
 800b878:	0e09      	lsrs	r1, r1, #24
 800b87a:	eb06 2694 	add.w	r6, r6, r4, lsr #10
 800b87e:	f85e 3023 	ldr.w	r3, [lr, r3, lsl #2]
 800b882:	f85e 1021 	ldr.w	r1, [lr, r1, lsl #2]
 800b886:	eb00 2096 	add.w	r0, r0, r6, lsr #10
 800b88a:	eb03 2a90 	add.w	sl, r3, r0, lsr #10
 800b88e:	eb01 219a 	add.w	r1, r1, sl, lsr #10
 800b892:	f3ca 0309 	ubfx	r3, sl, #0, #10
 800b896:	f3c5 0509 	ubfx	r5, r5, #0, #10
 800b89a:	f3c4 0409 	ubfx	r4, r4, #0, #10
 800b89e:	f3c6 0609 	ubfx	r6, r6, #0, #10
 800b8a2:	f3c1 0a09 	ubfx	sl, r1, #0, #10
 800b8a6:	f3c8 0809 	ubfx	r8, r8, #0, #10
 800b8aa:	f3c7 0709 	ubfx	r7, r7, #0, #10
 800b8ae:	f3c0 0009 	ubfx	r0, r0, #0, #10
 800b8b2:	ea44 4707 	orr.w	r7, r4, r7, lsl #16
 800b8b6:	ea4a 4a03 	orr.w	sl, sl, r3, lsl #16
 800b8ba:	ea45 4808 	orr.w	r8, r5, r8, lsl #16
 800b8be:	0a8b      	lsrs	r3, r1, #10
 800b8c0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800b8c4:	4939      	ldr	r1, [pc, #228]	; (800b9ac <D64_GENERIC+0x1fc>)
 800b8c6:	9c00      	ldr	r4, [sp, #0]
 800b8c8:	fb28 4101 	smlad	r1, r8, r1, r4
 800b8cc:	4c38      	ldr	r4, [pc, #224]	; (800b9b0 <D64_GENERIC+0x200>)
 800b8ce:	fb27 1104 	smlad	r1, r7, r4, r1
 800b8d2:	4c38      	ldr	r4, [pc, #224]	; (800b9b4 <D64_GENERIC+0x204>)
 800b8d4:	fb20 1104 	smlad	r1, r0, r4, r1
 800b8d8:	f44f 3680 	mov.w	r6, #65536	; 0x10000
 800b8dc:	fb2a 1106 	smlad	r1, sl, r6, r1
 800b8e0:	4c35      	ldr	r4, [pc, #212]	; (800b9b8 <D64_GENERIC+0x208>)
 800b8e2:	9d01      	ldr	r5, [sp, #4]
 800b8e4:	fb28 5404 	smlad	r4, r8, r4, r5
 800b8e8:	4d33      	ldr	r5, [pc, #204]	; (800b9b8 <D64_GENERIC+0x208>)
 800b8ea:	fb2a 4415 	smladx	r4, sl, r5, r4
 800b8ee:	4d33      	ldr	r5, [pc, #204]	; (800b9bc <D64_GENERIC+0x20c>)
 800b8f0:	fb27 4405 	smlad	r4, r7, r5, r4
 800b8f4:	fb20 4415 	smladx	r4, r0, r5, r4
 800b8f8:	2501      	movs	r5, #1
 800b8fa:	9400      	str	r4, [sp, #0]
 800b8fc:	fb28 f805 	smuad	r8, r8, r5
 800b900:	4c2f      	ldr	r4, [pc, #188]	; (800b9c0 <D64_GENERIC+0x210>)
 800b902:	fb27 8704 	smlad	r7, r7, r4, r8
 800b906:	4c2f      	ldr	r4, [pc, #188]	; (800b9c4 <D64_GENERIC+0x214>)
 800b908:	fb20 7004 	smlad	r0, r0, r4, r7
 800b90c:	4c2e      	ldr	r4, [pc, #184]	; (800b9c8 <D64_GENERIC+0x218>)
 800b90e:	fb2a 0004 	smlad	r0, sl, r4, r0
 800b912:	f5a1 3600 	sub.w	r6, r1, #131072	; 0x20000
 800b916:	9902      	ldr	r1, [sp, #8]
 800b918:	9001      	str	r0, [sp, #4]
 800b91a:	b189      	cbz	r1, 800b940 <D64_GENERIC+0x190>
 800b91c:	9803      	ldr	r0, [sp, #12]
 800b91e:	9c04      	ldr	r4, [sp, #16]
 800b920:	9604      	str	r6, [sp, #16]
 800b922:	4430      	add	r0, r6
 800b924:	1b00      	subs	r0, r0, r4
 800b926:	17c5      	asrs	r5, r0, #31
 800b928:	460f      	mov	r7, r1
 800b92a:	fba0 0101 	umull	r0, r1, r0, r1
 800b92e:	fb07 1105 	mla	r1, r7, r5, r1
 800b932:	f110 4000 	adds.w	r0, r0, #2147483648	; 0x80000000
 800b936:	f141 0100 	adc.w	r1, r1, #0
 800b93a:	0049      	lsls	r1, r1, #1
 800b93c:	9103      	str	r1, [sp, #12]
 800b93e:	460e      	mov	r6, r1
 800b940:	8d14      	ldrh	r4, [r2, #40]	; 0x28
 800b942:	9905      	ldr	r1, [sp, #20]
 800b944:	9806      	ldr	r0, [sp, #24]
 800b946:	02b6      	lsls	r6, r6, #10
 800b948:	f04f 4700 	mov.w	r7, #2147483648	; 0x80000000
 800b94c:	f04f 0800 	mov.w	r8, #0
 800b950:	fb0c f404 	mul.w	r4, ip, r4
 800b954:	fbc1 7806 	smlal	r7, r8, r1, r6
 800b958:	4641      	mov	r1, r8
 800b95a:	1089      	asrs	r1, r1, #2
 800b95c:	f301 010f 	ssat	r1, #16, r1
 800b960:	f820 1014 	strh.w	r1, [r0, r4, lsl #1]
 800b964:	8cd1      	ldrh	r1, [r2, #38]	; 0x26
 800b966:	f10c 0c01 	add.w	ip, ip, #1
 800b96a:	4561      	cmp	r1, ip
 800b96c:	dd0e      	ble.n	800b98c <D64_GENERIC+0x1dc>
 800b96e:	8d56      	ldrh	r6, [r2, #42]	; 0x2a
 800b970:	2e01      	cmp	r6, #1
 800b972:	f47f af3a 	bne.w	800b7ea <D64_GENERIC+0x3a>
 800b976:	6b56      	ldr	r6, [r2, #52]	; 0x34
 800b978:	06b4      	lsls	r4, r6, #26
 800b97a:	e899 0003 	ldmia.w	r9, {r0, r1}
 800b97e:	f109 0908 	add.w	r9, r9, #8
 800b982:	f57f af5a 	bpl.w	800b83a <D64_GENERIC+0x8a>
 800b986:	ba40      	rev16	r0, r0
 800b988:	ba49      	rev16	r1, r1
 800b98a:	e756      	b.n	800b83a <D64_GENERIC+0x8a>
 800b98c:	61d3      	str	r3, [r2, #28]
 800b98e:	9b03      	ldr	r3, [sp, #12]
 800b990:	9901      	ldr	r1, [sp, #4]
 800b992:	6113      	str	r3, [r2, #16]
 800b994:	9b04      	ldr	r3, [sp, #16]
 800b996:	6091      	str	r1, [r2, #8]
 800b998:	6153      	str	r3, [r2, #20]
 800b99a:	9900      	ldr	r1, [sp, #0]
 800b99c:	9b07      	ldr	r3, [sp, #28]
 800b99e:	60d1      	str	r1, [r2, #12]
 800b9a0:	2000      	movs	r0, #0
 800b9a2:	6193      	str	r3, [r2, #24]
 800b9a4:	b009      	add	sp, #36	; 0x24
 800b9a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b9aa:	bf00      	nop
 800b9ac:	001c0015 	.word	0x001c0015
 800b9b0:	000f000a 	.word	0x000f000a
 800b9b4:	00060003 	.word	0x00060003
 800b9b8:	0024002a 	.word	0x0024002a
 800b9bc:	002e0030 	.word	0x002e0030
 800b9c0:	00030006 	.word	0x00030006
 800b9c4:	000a000f 	.word	0x000a000f
 800b9c8:	0015001c 	.word	0x0015001c
 800b9cc:	20000000 	.word	0x20000000

0800b9d0 <D80_GENERIC>:
 800b9d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b9d4:	b08b      	sub	sp, #44	; 0x2c
 800b9d6:	6914      	ldr	r4, [r2, #16]
 800b9d8:	9404      	str	r4, [sp, #16]
 800b9da:	6954      	ldr	r4, [r2, #20]
 800b9dc:	9405      	str	r4, [sp, #20]
 800b9de:	6994      	ldr	r4, [r2, #24]
 800b9e0:	9409      	str	r4, [sp, #36]	; 0x24
 800b9e2:	6894      	ldr	r4, [r2, #8]
 800b9e4:	9402      	str	r4, [sp, #8]
 800b9e6:	8cd3      	ldrh	r3, [r2, #38]	; 0x26
 800b9e8:	68d4      	ldr	r4, [r2, #12]
 800b9ea:	9401      	str	r4, [sp, #4]
 800b9ec:	6b14      	ldr	r4, [r2, #48]	; 0x30
 800b9ee:	f8d2 b01c 	ldr.w	fp, [r2, #28]
 800b9f2:	9406      	str	r4, [sp, #24]
 800b9f4:	9107      	str	r1, [sp, #28]
 800b9f6:	2b00      	cmp	r3, #0
 800b9f8:	f000 810f 	beq.w	800bc1a <D80_GENERIC+0x24a>
 800b9fc:	6a13      	ldr	r3, [r2, #32]
 800b9fe:	9308      	str	r3, [sp, #32]
 800ba00:	2300      	movs	r3, #0
 800ba02:	9200      	str	r2, [sp, #0]
 800ba04:	f8df 9264 	ldr.w	r9, [pc, #612]	; 800bc6c <D80_GENERIC+0x29c>
 800ba08:	f8cd b00c 	str.w	fp, [sp, #12]
 800ba0c:	461a      	mov	r2, r3
 800ba0e:	e0ed      	b.n	800bbec <D80_GENERIC+0x21c>
 800ba10:	fa5f fc8c 	uxtb.w	ip, ip
 800ba14:	fa0f f48c 	sxth.w	r4, ip
 800ba18:	0066      	lsls	r6, r4, #1
 800ba1a:	eb06 0804 	add.w	r8, r6, r4
 800ba1e:	f1cc 0500 	rsb	r5, ip, #0
 800ba22:	eb00 0108 	add.w	r1, r0, r8
 800ba26:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 800ba2a:	194b      	adds	r3, r1, r5
 800ba2c:	5d49      	ldrb	r1, [r1, r5]
 800ba2e:	f810 a008 	ldrb.w	sl, [r0, r8]
 800ba32:	f813 b004 	ldrb.w	fp, [r3, r4]
 800ba36:	f810 c00c 	ldrb.w	ip, [r0, ip]
 800ba3a:	f890 8000 	ldrb.w	r8, [r0]
 800ba3e:	eb03 0e04 	add.w	lr, r3, r4
 800ba42:	eb0e 0705 	add.w	r7, lr, r5
 800ba46:	0409      	lsls	r1, r1, #16
 800ba48:	f81e 3005 	ldrb.w	r3, [lr, r5]
 800ba4c:	f81e e015 	ldrb.w	lr, [lr, r5, lsl #1]
 800ba50:	eb01 610a 	add.w	r1, r1, sl, lsl #24
 800ba54:	eb07 0a45 	add.w	sl, r7, r5, lsl #1
 800ba58:	eb0a 0004 	add.w	r0, sl, r4
 800ba5c:	041b      	lsls	r3, r3, #16
 800ba5e:	f81a a004 	ldrb.w	sl, [sl, r4]
 800ba62:	f817 7015 	ldrb.w	r7, [r7, r5, lsl #1]
 800ba66:	5d44      	ldrb	r4, [r0, r5]
 800ba68:	eb03 630b 	add.w	r3, r3, fp, lsl #24
 800ba6c:	eb01 210c 	add.w	r1, r1, ip, lsl #8
 800ba70:	4428      	add	r0, r5
 800ba72:	eb03 230e 	add.w	r3, r3, lr, lsl #8
 800ba76:	4441      	add	r1, r8
 800ba78:	4430      	add	r0, r6
 800ba7a:	eb04 240a 	add.w	r4, r4, sl, lsl #8
 800ba7e:	441f      	add	r7, r3
 800ba80:	b2cd      	uxtb	r5, r1
 800ba82:	f3c1 2307 	ubfx	r3, r1, #8, #8
 800ba86:	f859 6025 	ldr.w	r6, [r9, r5, lsl #2]
 800ba8a:	f859 e023 	ldr.w	lr, [r9, r3, lsl #2]
 800ba8e:	9b03      	ldr	r3, [sp, #12]
 800ba90:	f3c1 4507 	ubfx	r5, r1, #16, #8
 800ba94:	0e09      	lsrs	r1, r1, #24
 800ba96:	4433      	add	r3, r6
 800ba98:	f859 8025 	ldr.w	r8, [r9, r5, lsl #2]
 800ba9c:	f859 6021 	ldr.w	r6, [r9, r1, lsl #2]
 800baa0:	b2fd      	uxtb	r5, r7
 800baa2:	eb0e 2193 	add.w	r1, lr, r3, lsr #10
 800baa6:	469b      	mov	fp, r3
 800baa8:	f3c7 2307 	ubfx	r3, r7, #8, #8
 800baac:	eb08 2891 	add.w	r8, r8, r1, lsr #10
 800bab0:	f859 c025 	ldr.w	ip, [r9, r5, lsl #2]
 800bab4:	f859 5023 	ldr.w	r5, [r9, r3, lsl #2]
 800bab8:	f3c7 4e07 	ubfx	lr, r7, #16, #8
 800babc:	eb06 2698 	add.w	r6, r6, r8, lsr #10
 800bac0:	0e3b      	lsrs	r3, r7, #24
 800bac2:	eb0c 2c96 	add.w	ip, ip, r6, lsr #10
 800bac6:	f859 702e 	ldr.w	r7, [r9, lr, lsl #2]
 800baca:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800bace:	fa5f fe84 	uxtb.w	lr, r4
 800bad2:	eb05 259c 	add.w	r5, r5, ip, lsr #10
 800bad6:	f3c4 2407 	ubfx	r4, r4, #8, #8
 800bada:	eb07 2795 	add.w	r7, r7, r5, lsr #10
 800bade:	f859 e02e 	ldr.w	lr, [r9, lr, lsl #2]
 800bae2:	f859 4024 	ldr.w	r4, [r9, r4, lsl #2]
 800bae6:	eb03 2397 	add.w	r3, r3, r7, lsr #10
 800baea:	eb0e 2e93 	add.w	lr, lr, r3, lsr #10
 800baee:	eb04 249e 	add.w	r4, r4, lr, lsr #10
 800baf2:	f3c1 0109 	ubfx	r1, r1, #0, #10
 800baf6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800bafa:	f3cb 0b09 	ubfx	fp, fp, #0, #10
 800bafe:	f3c7 0709 	ubfx	r7, r7, #0, #10
 800bb02:	f3c6 0609 	ubfx	r6, r6, #0, #10
 800bb06:	f3c5 0509 	ubfx	r5, r5, #0, #10
 800bb0a:	ea41 4b0b 	orr.w	fp, r1, fp, lsl #16
 800bb0e:	ea43 4707 	orr.w	r7, r3, r7, lsl #16
 800bb12:	f3c4 0109 	ubfx	r1, r4, #0, #10
 800bb16:	0aa3      	lsrs	r3, r4, #10
 800bb18:	f3c8 0809 	ubfx	r8, r8, #0, #10
 800bb1c:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 800bb20:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 800bb24:	ea41 4e0e 	orr.w	lr, r1, lr, lsl #16
 800bb28:	9303      	str	r3, [sp, #12]
 800bb2a:	ea46 4808 	orr.w	r8, r6, r8, lsl #16
 800bb2e:	ea45 4c0c 	orr.w	ip, r5, ip, lsl #16
 800bb32:	4b42      	ldr	r3, [pc, #264]	; (800bc3c <D80_GENERIC+0x26c>)
 800bb34:	9901      	ldr	r1, [sp, #4]
 800bb36:	fb2b 1303 	smlad	r3, fp, r3, r1
 800bb3a:	4941      	ldr	r1, [pc, #260]	; (800bc40 <D80_GENERIC+0x270>)
 800bb3c:	fb28 3301 	smlad	r3, r8, r1, r3
 800bb40:	4940      	ldr	r1, [pc, #256]	; (800bc44 <D80_GENERIC+0x274>)
 800bb42:	fb2c 3301 	smlad	r3, ip, r1, r3
 800bb46:	4940      	ldr	r1, [pc, #256]	; (800bc48 <D80_GENERIC+0x278>)
 800bb48:	fb27 3301 	smlad	r3, r7, r1, r3
 800bb4c:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 800bb50:	fb2e 3301 	smlad	r3, lr, r1, r3
 800bb54:	493d      	ldr	r1, [pc, #244]	; (800bc4c <D80_GENERIC+0x27c>)
 800bb56:	9c02      	ldr	r4, [sp, #8]
 800bb58:	fb2b 4401 	smlad	r4, fp, r1, r4
 800bb5c:	493c      	ldr	r1, [pc, #240]	; (800bc50 <D80_GENERIC+0x280>)
 800bb5e:	fb28 4401 	smlad	r4, r8, r1, r4
 800bb62:	f04f 114b 	mov.w	r1, #4915275	; 0x4b004b
 800bb66:	fb2c 4101 	smlad	r1, ip, r1, r4
 800bb6a:	4c3a      	ldr	r4, [pc, #232]	; (800bc54 <D80_GENERIC+0x284>)
 800bb6c:	fb27 1104 	smlad	r1, r7, r4, r1
 800bb70:	4c39      	ldr	r4, [pc, #228]	; (800bc58 <D80_GENERIC+0x288>)
 800bb72:	fb2e 1104 	smlad	r1, lr, r4, r1
 800bb76:	9101      	str	r1, [sp, #4]
 800bb78:	2101      	movs	r1, #1
 800bb7a:	fb2b fb01 	smuad	fp, fp, r1
 800bb7e:	4937      	ldr	r1, [pc, #220]	; (800bc5c <D80_GENERIC+0x28c>)
 800bb80:	fb28 b801 	smlad	r8, r8, r1, fp
 800bb84:	4d36      	ldr	r5, [pc, #216]	; (800bc60 <D80_GENERIC+0x290>)
 800bb86:	fb2c 8c05 	smlad	ip, ip, r5, r8
 800bb8a:	4d36      	ldr	r5, [pc, #216]	; (800bc64 <D80_GENERIC+0x294>)
 800bb8c:	fb27 c705 	smlad	r7, r7, r5, ip
 800bb90:	4d35      	ldr	r5, [pc, #212]	; (800bc68 <D80_GENERIC+0x298>)
 800bb92:	fb2e 7105 	smlad	r1, lr, r5, r7
 800bb96:	9102      	str	r1, [sp, #8]
 800bb98:	9908      	ldr	r1, [sp, #32]
 800bb9a:	f5a3 337a 	sub.w	r3, r3, #256000	; 0x3e800
 800bb9e:	b181      	cbz	r1, 800bbc2 <D80_GENERIC+0x1f2>
 800bba0:	9c04      	ldr	r4, [sp, #16]
 800bba2:	9d05      	ldr	r5, [sp, #20]
 800bba4:	9305      	str	r3, [sp, #20]
 800bba6:	441c      	add	r4, r3
 800bba8:	1b64      	subs	r4, r4, r5
 800bbaa:	17e7      	asrs	r7, r4, #31
 800bbac:	fba4 4501 	umull	r4, r5, r4, r1
 800bbb0:	fb01 5507 	mla	r5, r1, r7, r5
 800bbb4:	f114 4400 	adds.w	r4, r4, #2147483648	; 0x80000000
 800bbb8:	f145 0500 	adc.w	r5, r5, #0
 800bbbc:	0069      	lsls	r1, r5, #1
 800bbbe:	9104      	str	r1, [sp, #16]
 800bbc0:	460b      	mov	r3, r1
 800bbc2:	9e00      	ldr	r6, [sp, #0]
 800bbc4:	9f06      	ldr	r7, [sp, #24]
 800bbc6:	8d31      	ldrh	r1, [r6, #40]	; 0x28
 800bbc8:	025b      	lsls	r3, r3, #9
 800bbca:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800bbce:	2500      	movs	r5, #0
 800bbd0:	fb02 f101 	mul.w	r1, r2, r1
 800bbd4:	fbc7 4503 	smlal	r4, r5, r7, r3
 800bbd8:	9c07      	ldr	r4, [sp, #28]
 800bbda:	10ab      	asrs	r3, r5, #2
 800bbdc:	f303 030f 	ssat	r3, #16, r3
 800bbe0:	f824 3011 	strh.w	r3, [r4, r1, lsl #1]
 800bbe4:	8cf3      	ldrh	r3, [r6, #38]	; 0x26
 800bbe6:	3201      	adds	r2, #1
 800bbe8:	4293      	cmp	r3, r2
 800bbea:	dd13      	ble.n	800bc14 <D80_GENERIC+0x244>
 800bbec:	9b00      	ldr	r3, [sp, #0]
 800bbee:	f8b3 c02a 	ldrh.w	ip, [r3, #42]	; 0x2a
 800bbf2:	f1bc 0f01 	cmp.w	ip, #1
 800bbf6:	f47f af0b 	bne.w	800ba10 <D80_GENERIC+0x40>
 800bbfa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bbfc:	6884      	ldr	r4, [r0, #8]
 800bbfe:	069b      	lsls	r3, r3, #26
 800bc00:	e890 0082 	ldmia.w	r0, {r1, r7}
 800bc04:	f100 000a 	add.w	r0, r0, #10
 800bc08:	f57f af3a 	bpl.w	800ba80 <D80_GENERIC+0xb0>
 800bc0c:	ba49      	rev16	r1, r1
 800bc0e:	ba7f      	rev16	r7, r7
 800bc10:	ba64      	rev16	r4, r4
 800bc12:	e735      	b.n	800ba80 <D80_GENERIC+0xb0>
 800bc14:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800bc18:	4632      	mov	r2, r6
 800bc1a:	9b02      	ldr	r3, [sp, #8]
 800bc1c:	6093      	str	r3, [r2, #8]
 800bc1e:	9b01      	ldr	r3, [sp, #4]
 800bc20:	60d3      	str	r3, [r2, #12]
 800bc22:	9b04      	ldr	r3, [sp, #16]
 800bc24:	6113      	str	r3, [r2, #16]
 800bc26:	9b05      	ldr	r3, [sp, #20]
 800bc28:	6153      	str	r3, [r2, #20]
 800bc2a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bc2c:	f8c2 b01c 	str.w	fp, [r2, #28]
 800bc30:	2000      	movs	r0, #0
 800bc32:	6193      	str	r3, [r2, #24]
 800bc34:	b00b      	add	sp, #44	; 0x2c
 800bc36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bc3a:	bf00      	nop
 800bc3c:	002d0024 	.word	0x002d0024
 800bc40:	001c0015 	.word	0x001c0015
 800bc44:	000f000a 	.word	0x000f000a
 800bc48:	00060003 	.word	0x00060003
 800bc4c:	0037003f 	.word	0x0037003f
 800bc50:	00450049 	.word	0x00450049
 800bc54:	00490045 	.word	0x00490045
 800bc58:	003f0037 	.word	0x003f0037
 800bc5c:	00030006 	.word	0x00030006
 800bc60:	000a000f 	.word	0x000a000f
 800bc64:	0015001c 	.word	0x0015001c
 800bc68:	0024002d 	.word	0x0024002d
 800bc6c:	20000000 	.word	0x20000000

0800bc70 <D128_GENERIC>:
 800bc70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc74:	b093      	sub	sp, #76	; 0x4c
 800bc76:	8cd3      	ldrh	r3, [r2, #38]	; 0x26
 800bc78:	9005      	str	r0, [sp, #20]
 800bc7a:	4610      	mov	r0, r2
 800bc7c:	9201      	str	r2, [sp, #4]
 800bc7e:	6912      	ldr	r2, [r2, #16]
 800bc80:	920c      	str	r2, [sp, #48]	; 0x30
 800bc82:	4602      	mov	r2, r0
 800bc84:	6940      	ldr	r0, [r0, #20]
 800bc86:	900d      	str	r0, [sp, #52]	; 0x34
 800bc88:	4610      	mov	r0, r2
 800bc8a:	4614      	mov	r4, r2
 800bc8c:	6992      	ldr	r2, [r2, #24]
 800bc8e:	9211      	str	r2, [sp, #68]	; 0x44
 800bc90:	69c2      	ldr	r2, [r0, #28]
 800bc92:	9202      	str	r2, [sp, #8]
 800bc94:	68e2      	ldr	r2, [r4, #12]
 800bc96:	6880      	ldr	r0, [r0, #8]
 800bc98:	9203      	str	r2, [sp, #12]
 800bc9a:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800bc9c:	9004      	str	r0, [sp, #16]
 800bc9e:	920e      	str	r2, [sp, #56]	; 0x38
 800bca0:	910f      	str	r1, [sp, #60]	; 0x3c
 800bca2:	2b00      	cmp	r3, #0
 800bca4:	f000 819b 	beq.w	800bfde <D128_GENERIC+0x36e>
 800bca8:	6a23      	ldr	r3, [r4, #32]
 800bcaa:	9310      	str	r3, [sp, #64]	; 0x40
 800bcac:	2300      	movs	r3, #0
 800bcae:	f8df 93a8 	ldr.w	r9, [pc, #936]	; 800c058 <D128_GENERIC+0x3e8>
 800bcb2:	9306      	str	r3, [sp, #24]
 800bcb4:	e17a      	b.n	800bfac <D128_GENERIC+0x33c>
 800bcb6:	b2d2      	uxtb	r2, r2
 800bcb8:	9d05      	ldr	r5, [sp, #20]
 800bcba:	b214      	sxth	r4, r2
 800bcbc:	eb04 0a44 	add.w	sl, r4, r4, lsl #1
 800bcc0:	4250      	negs	r0, r2
 800bcc2:	eb05 010a 	add.w	r1, r5, sl
 800bcc6:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800bcca:	eb01 0800 	add.w	r8, r1, r0
 800bcce:	eb0b 0c04 	add.w	ip, fp, r4
 800bcd2:	eb08 070c 	add.w	r7, r8, ip
 800bcd6:	183b      	adds	r3, r7, r0
 800bcd8:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
 800bcdc:	eb03 0e40 	add.w	lr, r3, r0, lsl #1
 800bce0:	eb0e 0604 	add.w	r6, lr, r4
 800bce4:	9307      	str	r3, [sp, #28]
 800bce6:	1833      	adds	r3, r6, r0
 800bce8:	9305      	str	r3, [sp, #20]
 800bcea:	462b      	mov	r3, r5
 800bcec:	f815 a00a 	ldrb.w	sl, [r5, sl]
 800bcf0:	f8cd a020 	str.w	sl, [sp, #32]
 800bcf4:	f818 a00c 	ldrb.w	sl, [r8, ip]
 800bcf8:	f813 c002 	ldrb.w	ip, [r3, r2]
 800bcfc:	f81e 8004 	ldrb.w	r8, [lr, r4]
 800bd00:	5c3a      	ldrb	r2, [r7, r0]
 800bd02:	f817 e010 	ldrb.w	lr, [r7, r0, lsl #1]
 800bd06:	781f      	ldrb	r7, [r3, #0]
 800bd08:	9b07      	ldr	r3, [sp, #28]
 800bd0a:	9d05      	ldr	r5, [sp, #20]
 800bd0c:	f813 3010 	ldrb.w	r3, [r3, r0, lsl #1]
 800bd10:	5c09      	ldrb	r1, [r1, r0]
 800bd12:	9709      	str	r7, [sp, #36]	; 0x24
 800bd14:	9307      	str	r3, [sp, #28]
 800bd16:	f816 7010 	ldrb.w	r7, [r6, r0, lsl #1]
 800bd1a:	5c33      	ldrb	r3, [r6, r0]
 800bd1c:	0412      	lsls	r2, r2, #16
 800bd1e:	eb05 0640 	add.w	r6, r5, r0, lsl #1
 800bd22:	eb02 620a 	add.w	r2, r2, sl, lsl #24
 800bd26:	9d08      	ldr	r5, [sp, #32]
 800bd28:	eb06 0a04 	add.w	sl, r6, r4
 800bd2c:	0409      	lsls	r1, r1, #16
 800bd2e:	eb01 6105 	add.w	r1, r1, r5, lsl #24
 800bd32:	f81a 5000 	ldrb.w	r5, [sl, r0]
 800bd36:	5d36      	ldrb	r6, [r6, r4]
 800bd38:	9c05      	ldr	r4, [sp, #20]
 800bd3a:	042d      	lsls	r5, r5, #16
 800bd3c:	eb05 6606 	add.w	r6, r5, r6, lsl #24
 800bd40:	eb01 210c 	add.w	r1, r1, ip, lsl #8
 800bd44:	f81a 5010 	ldrb.w	r5, [sl, r0, lsl #1]
 800bd48:	f814 4010 	ldrb.w	r4, [r4, r0, lsl #1]
 800bd4c:	eb0a 0c00 	add.w	ip, sl, r0
 800bd50:	041b      	lsls	r3, r3, #16
 800bd52:	eb03 6308 	add.w	r3, r3, r8, lsl #24
 800bd56:	eb06 2605 	add.w	r6, r6, r5, lsl #8
 800bd5a:	f81c a010 	ldrb.w	sl, [ip, r0, lsl #1]
 800bd5e:	9d07      	ldr	r5, [sp, #28]
 800bd60:	eb03 2307 	add.w	r3, r3, r7, lsl #8
 800bd64:	eb0c 0040 	add.w	r0, ip, r0, lsl #1
 800bd68:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800bd6a:	4458      	add	r0, fp
 800bd6c:	eb02 220e 	add.w	r2, r2, lr, lsl #8
 800bd70:	9005      	str	r0, [sp, #20]
 800bd72:	4439      	add	r1, r7
 800bd74:	442a      	add	r2, r5
 800bd76:	44b2      	add	sl, r6
 800bd78:	1918      	adds	r0, r3, r4
 800bd7a:	b2cb      	uxtb	r3, r1
 800bd7c:	f3c1 2407 	ubfx	r4, r1, #8, #8
 800bd80:	9e02      	ldr	r6, [sp, #8]
 800bd82:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800bd86:	f859 5024 	ldr.w	r5, [r9, r4, lsl #2]
 800bd8a:	f3c1 4407 	ubfx	r4, r1, #16, #8
 800bd8e:	441e      	add	r6, r3
 800bd90:	0e09      	lsrs	r1, r1, #24
 800bd92:	4633      	mov	r3, r6
 800bd94:	f859 6024 	ldr.w	r6, [r9, r4, lsl #2]
 800bd98:	f859 7021 	ldr.w	r7, [r9, r1, lsl #2]
 800bd9c:	b2d4      	uxtb	r4, r2
 800bd9e:	eb05 2593 	add.w	r5, r5, r3, lsr #10
 800bda2:	f3c2 2107 	ubfx	r1, r2, #8, #8
 800bda6:	eb06 2b95 	add.w	fp, r6, r5, lsr #10
 800bdaa:	f859 6024 	ldr.w	r6, [r9, r4, lsl #2]
 800bdae:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800bdb2:	f3c2 4407 	ubfx	r4, r2, #16, #8
 800bdb6:	0e12      	lsrs	r2, r2, #24
 800bdb8:	eb07 279b 	add.w	r7, r7, fp, lsr #10
 800bdbc:	eb06 2897 	add.w	r8, r6, r7, lsr #10
 800bdc0:	f859 6024 	ldr.w	r6, [r9, r4, lsl #2]
 800bdc4:	f859 4022 	ldr.w	r4, [r9, r2, lsl #2]
 800bdc8:	9702      	str	r7, [sp, #8]
 800bdca:	b2c2      	uxtb	r2, r0
 800bdcc:	eb01 2198 	add.w	r1, r1, r8, lsr #10
 800bdd0:	eb06 2c91 	add.w	ip, r6, r1, lsr #10
 800bdd4:	f859 6022 	ldr.w	r6, [r9, r2, lsl #2]
 800bdd8:	eb04 249c 	add.w	r4, r4, ip, lsr #10
 800bddc:	f3c0 2207 	ubfx	r2, r0, #8, #8
 800bde0:	eb06 2e94 	add.w	lr, r6, r4, lsr #10
 800bde4:	f3c0 4607 	ubfx	r6, r0, #16, #8
 800bde8:	f859 2022 	ldr.w	r2, [r9, r2, lsl #2]
 800bdec:	f859 7026 	ldr.w	r7, [r9, r6, lsl #2]
 800bdf0:	0e00      	lsrs	r0, r0, #24
 800bdf2:	fa5f f68a 	uxtb.w	r6, sl
 800bdf6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800bdfa:	9309      	str	r3, [sp, #36]	; 0x24
 800bdfc:	f859 0020 	ldr.w	r0, [r9, r0, lsl #2]
 800be00:	f859 6026 	ldr.w	r6, [r9, r6, lsl #2]
 800be04:	eb02 229e 	add.w	r2, r2, lr, lsr #10
 800be08:	f3ca 2307 	ubfx	r3, sl, #8, #8
 800be0c:	f3c5 0509 	ubfx	r5, r5, #0, #10
 800be10:	950a      	str	r5, [sp, #40]	; 0x28
 800be12:	eb07 2792 	add.w	r7, r7, r2, lsr #10
 800be16:	f3ca 4507 	ubfx	r5, sl, #16, #8
 800be1a:	eb00 2097 	add.w	r0, r0, r7, lsr #10
 800be1e:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800be22:	f859 5025 	ldr.w	r5, [r9, r5, lsl #2]
 800be26:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800be2a:	920b      	str	r2, [sp, #44]	; 0x2c
 800be2c:	eb06 2690 	add.w	r6, r6, r0, lsr #10
 800be30:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800be32:	eb03 2396 	add.w	r3, r3, r6, lsr #10
 800be36:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 800be3a:	9307      	str	r3, [sp, #28]
 800be3c:	eb05 2593 	add.w	r5, r5, r3, lsr #10
 800be40:	ea4f 6a1a 	mov.w	sl, sl, lsr #24
 800be44:	9b02      	ldr	r3, [sp, #8]
 800be46:	f8cd c008 	str.w	ip, [sp, #8]
 800be4a:	4694      	mov	ip, r2
 800be4c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800be4e:	f859 a02a 	ldr.w	sl, [r9, sl, lsl #2]
 800be52:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 800be56:	9a02      	ldr	r2, [sp, #8]
 800be58:	f3c4 0409 	ubfx	r4, r4, #0, #10
 800be5c:	eb0a 2a95 	add.w	sl, sl, r5, lsr #10
 800be60:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800be64:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800be66:	f8cd a020 	str.w	sl, [sp, #32]
 800be6a:	f3c8 0809 	ubfx	r8, r8, #0, #10
 800be6e:	f3c3 0a09 	ubfx	sl, r3, #0, #10
 800be72:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 800be76:	9b07      	ldr	r3, [sp, #28]
 800be78:	f3c1 0109 	ubfx	r1, r1, #0, #10
 800be7c:	ea41 4108 	orr.w	r1, r1, r8, lsl #16
 800be80:	ea42 480e 	orr.w	r8, r2, lr, lsl #16
 800be84:	9a08      	ldr	r2, [sp, #32]
 800be86:	f3c6 0609 	ubfx	r6, r6, #0, #10
 800be8a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800be8e:	f3cb 0b09 	ubfx	fp, fp, #0, #10
 800be92:	f3c7 0709 	ubfx	r7, r7, #0, #10
 800be96:	f3c2 0e09 	ubfx	lr, r2, #0, #10
 800be9a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800be9e:	f3c0 0009 	ubfx	r0, r0, #0, #10
 800bea2:	0a96      	lsrs	r6, r2, #10
 800bea4:	f3c5 0509 	ubfx	r5, r5, #0, #10
 800bea8:	9602      	str	r6, [sp, #8]
 800beaa:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 800beae:	ea4a 4a0b 	orr.w	sl, sl, fp, lsl #16
 800beb2:	ea4e 4505 	orr.w	r5, lr, r5, lsl #16
 800beb6:	4e53      	ldr	r6, [pc, #332]	; (800c004 <D128_GENERIC+0x394>)
 800beb8:	9f03      	ldr	r7, [sp, #12]
 800beba:	fb2c 7606 	smlad	r6, ip, r6, r7
 800bebe:	4f52      	ldr	r7, [pc, #328]	; (800c008 <D128_GENERIC+0x398>)
 800bec0:	fb2a 6607 	smlad	r6, sl, r7, r6
 800bec4:	4f51      	ldr	r7, [pc, #324]	; (800c00c <D128_GENERIC+0x39c>)
 800bec6:	fb21 6607 	smlad	r6, r1, r7, r6
 800beca:	4f51      	ldr	r7, [pc, #324]	; (800c010 <D128_GENERIC+0x3a0>)
 800becc:	fb24 6607 	smlad	r6, r4, r7, r6
 800bed0:	4f50      	ldr	r7, [pc, #320]	; (800c014 <D128_GENERIC+0x3a4>)
 800bed2:	fb28 6607 	smlad	r6, r8, r7, r6
 800bed6:	4f50      	ldr	r7, [pc, #320]	; (800c018 <D128_GENERIC+0x3a8>)
 800bed8:	fb20 6607 	smlad	r6, r0, r7, r6
 800bedc:	4f4f      	ldr	r7, [pc, #316]	; (800c01c <D128_GENERIC+0x3ac>)
 800bede:	fb23 6607 	smlad	r6, r3, r7, r6
 800bee2:	f44f 3780 	mov.w	r7, #65536	; 0x10000
 800bee6:	fb25 6607 	smlad	r6, r5, r7, r6
 800beea:	4f4d      	ldr	r7, [pc, #308]	; (800c020 <D128_GENERIC+0x3b0>)
 800beec:	9a04      	ldr	r2, [sp, #16]
 800beee:	fb2c 2e07 	smlad	lr, ip, r7, r2
 800bef2:	4a4c      	ldr	r2, [pc, #304]	; (800c024 <D128_GENERIC+0x3b4>)
 800bef4:	fb2a ee02 	smlad	lr, sl, r2, lr
 800bef8:	4f4b      	ldr	r7, [pc, #300]	; (800c028 <D128_GENERIC+0x3b8>)
 800befa:	fb21 ee07 	smlad	lr, r1, r7, lr
 800befe:	4f4b      	ldr	r7, [pc, #300]	; (800c02c <D128_GENERIC+0x3bc>)
 800bf00:	fb24 ee07 	smlad	lr, r4, r7, lr
 800bf04:	4f4a      	ldr	r7, [pc, #296]	; (800c030 <D128_GENERIC+0x3c0>)
 800bf06:	fb28 ee07 	smlad	lr, r8, r7, lr
 800bf0a:	4f4a      	ldr	r7, [pc, #296]	; (800c034 <D128_GENERIC+0x3c4>)
 800bf0c:	fb20 ee07 	smlad	lr, r0, r7, lr
 800bf10:	4f49      	ldr	r7, [pc, #292]	; (800c038 <D128_GENERIC+0x3c8>)
 800bf12:	fb23 e707 	smlad	r7, r3, r7, lr
 800bf16:	f8df e144 	ldr.w	lr, [pc, #324]	; 800c05c <D128_GENERIC+0x3ec>
 800bf1a:	fb25 720e 	smlad	r2, r5, lr, r7
 800bf1e:	f04f 0b01 	mov.w	fp, #1
 800bf22:	9203      	str	r2, [sp, #12]
 800bf24:	fb2c fb0b 	smuad	fp, ip, fp
 800bf28:	4f44      	ldr	r7, [pc, #272]	; (800c03c <D128_GENERIC+0x3cc>)
 800bf2a:	fb2a ba07 	smlad	sl, sl, r7, fp
 800bf2e:	4f44      	ldr	r7, [pc, #272]	; (800c040 <D128_GENERIC+0x3d0>)
 800bf30:	fb21 aa07 	smlad	sl, r1, r7, sl
 800bf34:	4f43      	ldr	r7, [pc, #268]	; (800c044 <D128_GENERIC+0x3d4>)
 800bf36:	fb24 aa07 	smlad	sl, r4, r7, sl
 800bf3a:	4f43      	ldr	r7, [pc, #268]	; (800c048 <D128_GENERIC+0x3d8>)
 800bf3c:	fb28 a707 	smlad	r7, r8, r7, sl
 800bf40:	4a42      	ldr	r2, [pc, #264]	; (800c04c <D128_GENERIC+0x3dc>)
 800bf42:	fb20 7702 	smlad	r7, r0, r2, r7
 800bf46:	4a42      	ldr	r2, [pc, #264]	; (800c050 <D128_GENERIC+0x3e0>)
 800bf48:	fb23 7702 	smlad	r7, r3, r2, r7
 800bf4c:	4b41      	ldr	r3, [pc, #260]	; (800c054 <D128_GENERIC+0x3e4>)
 800bf4e:	fb25 7303 	smlad	r3, r5, r3, r7
 800bf52:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800bf54:	9304      	str	r3, [sp, #16]
 800bf56:	f5a6 1680 	sub.w	r6, r6, #1048576	; 0x100000
 800bf5a:	b185      	cbz	r5, 800bf7e <D128_GENERIC+0x30e>
 800bf5c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800bf5e:	990d      	ldr	r1, [sp, #52]	; 0x34
 800bf60:	960d      	str	r6, [sp, #52]	; 0x34
 800bf62:	4432      	add	r2, r6
 800bf64:	1a52      	subs	r2, r2, r1
 800bf66:	17d1      	asrs	r1, r2, #31
 800bf68:	fba2 2305 	umull	r2, r3, r2, r5
 800bf6c:	fb05 3301 	mla	r3, r5, r1, r3
 800bf70:	f112 4200 	adds.w	r2, r2, #2147483648	; 0x80000000
 800bf74:	f143 0300 	adc.w	r3, r3, #0
 800bf78:	005b      	lsls	r3, r3, #1
 800bf7a:	930c      	str	r3, [sp, #48]	; 0x30
 800bf7c:	461e      	mov	r6, r3
 800bf7e:	9801      	ldr	r0, [sp, #4]
 800bf80:	9c06      	ldr	r4, [sp, #24]
 800bf82:	8d01      	ldrh	r1, [r0, #40]	; 0x28
 800bf84:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 800bf86:	01f6      	lsls	r6, r6, #7
 800bf88:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800bf8c:	2300      	movs	r3, #0
 800bf8e:	fbc5 2306 	smlal	r2, r3, r5, r6
 800bf92:	fb04 f101 	mul.w	r1, r4, r1
 800bf96:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800bf98:	109b      	asrs	r3, r3, #2
 800bf9a:	f303 030f 	ssat	r3, #16, r3
 800bf9e:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
 800bfa2:	8cc3      	ldrh	r3, [r0, #38]	; 0x26
 800bfa4:	1c62      	adds	r2, r4, #1
 800bfa6:	4293      	cmp	r3, r2
 800bfa8:	9206      	str	r2, [sp, #24]
 800bfaa:	dd18      	ble.n	800bfde <D128_GENERIC+0x36e>
 800bfac:	9b01      	ldr	r3, [sp, #4]
 800bfae:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800bfb0:	2a01      	cmp	r2, #1
 800bfb2:	f47f ae80 	bne.w	800bcb6 <D128_GENERIC+0x46>
 800bfb6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bfb8:	9d05      	ldr	r5, [sp, #20]
 800bfba:	069b      	lsls	r3, r3, #26
 800bfbc:	6829      	ldr	r1, [r5, #0]
 800bfbe:	686a      	ldr	r2, [r5, #4]
 800bfc0:	68a8      	ldr	r0, [r5, #8]
 800bfc2:	f8d5 a00c 	ldr.w	sl, [r5, #12]
 800bfc6:	f105 0410 	add.w	r4, r5, #16
 800bfca:	d506      	bpl.n	800bfda <D128_GENERIC+0x36a>
 800bfcc:	ba49      	rev16	r1, r1
 800bfce:	ba52      	rev16	r2, r2
 800bfd0:	ba40      	rev16	r0, r0
 800bfd2:	fa9a fa9a 	rev16.w	sl, sl
 800bfd6:	9405      	str	r4, [sp, #20]
 800bfd8:	e6cf      	b.n	800bd7a <D128_GENERIC+0x10a>
 800bfda:	9405      	str	r4, [sp, #20]
 800bfdc:	e6cd      	b.n	800bd7a <D128_GENERIC+0x10a>
 800bfde:	9a01      	ldr	r2, [sp, #4]
 800bfe0:	9904      	ldr	r1, [sp, #16]
 800bfe2:	6091      	str	r1, [r2, #8]
 800bfe4:	9903      	ldr	r1, [sp, #12]
 800bfe6:	60d1      	str	r1, [r2, #12]
 800bfe8:	9b02      	ldr	r3, [sp, #8]
 800bfea:	61d3      	str	r3, [r2, #28]
 800bfec:	4611      	mov	r1, r2
 800bfee:	4613      	mov	r3, r2
 800bff0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800bff2:	610a      	str	r2, [r1, #16]
 800bff4:	990d      	ldr	r1, [sp, #52]	; 0x34
 800bff6:	6159      	str	r1, [r3, #20]
 800bff8:	9911      	ldr	r1, [sp, #68]	; 0x44
 800bffa:	6199      	str	r1, [r3, #24]
 800bffc:	2000      	movs	r0, #0
 800bffe:	b013      	add	sp, #76	; 0x4c
 800c000:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c004:	00780069 	.word	0x00780069
 800c008:	005b004e 	.word	0x005b004e
 800c00c:	00420037 	.word	0x00420037
 800c010:	002d0024 	.word	0x002d0024
 800c014:	001c0015 	.word	0x001c0015
 800c018:	000f000a 	.word	0x000f000a
 800c01c:	00060003 	.word	0x00060003
 800c020:	00880096 	.word	0x00880096
 800c024:	00a200ac 	.word	0x00a200ac
 800c028:	00b400ba 	.word	0x00b400ba
 800c02c:	00be00c0 	.word	0x00be00c0
 800c030:	00c000be 	.word	0x00c000be
 800c034:	00ba00b4 	.word	0x00ba00b4
 800c038:	00ac00a2 	.word	0x00ac00a2
 800c03c:	00030006 	.word	0x00030006
 800c040:	000a000f 	.word	0x000a000f
 800c044:	0015001c 	.word	0x0015001c
 800c048:	0024002d 	.word	0x0024002d
 800c04c:	00370042 	.word	0x00370042
 800c050:	004e005b 	.word	0x004e005b
 800c054:	00690078 	.word	0x00690078
 800c058:	20000000 	.word	0x20000000
 800c05c:	00960088 	.word	0x00960088

0800c060 <D16_1CH_HTONS_VOL_HP>:
 800c060:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c064:	4691      	mov	r9, r2
 800c066:	b083      	sub	sp, #12
 800c068:	8cd2      	ldrh	r2, [r2, #38]	; 0x26
 800c06a:	f8d9 3018 	ldr.w	r3, [r9, #24]
 800c06e:	f8d9 400c 	ldr.w	r4, [r9, #12]
 800c072:	9300      	str	r3, [sp, #0]
 800c074:	4680      	mov	r8, r0
 800c076:	f8d9 7014 	ldr.w	r7, [r9, #20]
 800c07a:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800c07e:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800c082:	f8d9 5008 	ldr.w	r5, [r9, #8]
 800c086:	9401      	str	r4, [sp, #4]
 800c088:	f8d9 a030 	ldr.w	sl, [r9, #48]	; 0x30
 800c08c:	f8d9 e020 	ldr.w	lr, [r9, #32]
 800c090:	2a00      	cmp	r2, #0
 800c092:	d04e      	beq.n	800c132 <D16_1CH_HTONS_VOL_HP+0xd2>
 800c094:	f8df c0a8 	ldr.w	ip, [pc, #168]	; 800c140 <D16_1CH_HTONS_VOL_HP+0xe0>
 800c098:	1e8c      	subs	r4, r1, #2
 800c09a:	eb08 0b42 	add.w	fp, r8, r2, lsl #1
 800c09e:	f858 2b02 	ldr.w	r2, [r8], #2
 800c0a2:	ba52      	rev16	r2, r2
 800c0a4:	b2d6      	uxtb	r6, r2
 800c0a6:	f3c2 2107 	ubfx	r1, r2, #8, #8
 800c0aa:	f85c 2026 	ldr.w	r2, [ip, r6, lsl #2]
 800c0ae:	f85c 1021 	ldr.w	r1, [ip, r1, lsl #2]
 800c0b2:	4413      	add	r3, r2
 800c0b4:	eb01 2293 	add.w	r2, r1, r3, lsr #10
 800c0b8:	f3c2 0109 	ubfx	r1, r2, #0, #10
 800c0bc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800c0c0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800c0c4:	0a93      	lsrs	r3, r2, #10
 800c0c6:	4a1c      	ldr	r2, [pc, #112]	; (800c138 <D16_1CH_HTONS_VOL_HP+0xd8>)
 800c0c8:	fb21 5202 	smlad	r2, r1, r2, r5
 800c0cc:	4d1b      	ldr	r5, [pc, #108]	; (800c13c <D16_1CH_HTONS_VOL_HP+0xdc>)
 800c0ce:	fb21 f505 	smuad	r5, r1, r5
 800c0d2:	f5a2 6200 	sub.w	r2, r2, #2048	; 0x800
 800c0d6:	4410      	add	r0, r2
 800c0d8:	1bc0      	subs	r0, r0, r7
 800c0da:	17c7      	asrs	r7, r0, #31
 800c0dc:	fba0 010e 	umull	r0, r1, r0, lr
 800c0e0:	f110 4000 	adds.w	r0, r0, #2147483648	; 0x80000000
 800c0e4:	fb0e 1107 	mla	r1, lr, r7, r1
 800c0e8:	f141 0100 	adc.w	r1, r1, #0
 800c0ec:	0448      	lsls	r0, r1, #17
 800c0ee:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800c0f2:	2700      	movs	r7, #0
 800c0f4:	fbc0 670a 	smlal	r6, r7, r0, sl
 800c0f8:	45d8      	cmp	r8, fp
 800c0fa:	ea4f 0041 	mov.w	r0, r1, lsl #1
 800c0fe:	ea4f 01a7 	mov.w	r1, r7, asr #2
 800c102:	4617      	mov	r7, r2
 800c104:	f301 010f 	ssat	r1, #16, r1
 800c108:	f824 1f02 	strh.w	r1, [r4, #2]!
 800c10c:	d1c7      	bne.n	800c09e <D16_1CH_HTONS_VOL_HP+0x3e>
 800c10e:	9901      	ldr	r1, [sp, #4]
 800c110:	f8c9 301c 	str.w	r3, [r9, #28]
 800c114:	9b00      	ldr	r3, [sp, #0]
 800c116:	f8c9 0010 	str.w	r0, [r9, #16]
 800c11a:	2000      	movs	r0, #0
 800c11c:	f8c9 5008 	str.w	r5, [r9, #8]
 800c120:	f8c9 100c 	str.w	r1, [r9, #12]
 800c124:	f8c9 2014 	str.w	r2, [r9, #20]
 800c128:	f8c9 3018 	str.w	r3, [r9, #24]
 800c12c:	b003      	add	sp, #12
 800c12e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c132:	463a      	mov	r2, r7
 800c134:	4621      	mov	r1, r4
 800c136:	e7eb      	b.n	800c110 <D16_1CH_HTONS_VOL_HP+0xb0>
 800c138:	00030001 	.word	0x00030001
 800c13c:	00010003 	.word	0x00010003
 800c140:	20000000 	.word	0x20000000

0800c144 <D24_1CH_HTONS_VOL_HP>:
 800c144:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c148:	b089      	sub	sp, #36	; 0x24
 800c14a:	8cd3      	ldrh	r3, [r2, #38]	; 0x26
 800c14c:	6996      	ldr	r6, [r2, #24]
 800c14e:	9304      	str	r3, [sp, #16]
 800c150:	6b17      	ldr	r7, [r2, #48]	; 0x30
 800c152:	9207      	str	r2, [sp, #28]
 800c154:	6915      	ldr	r5, [r2, #16]
 800c156:	6954      	ldr	r4, [r2, #20]
 800c158:	9606      	str	r6, [sp, #24]
 800c15a:	6893      	ldr	r3, [r2, #8]
 800c15c:	69d6      	ldr	r6, [r2, #28]
 800c15e:	f8d2 c00c 	ldr.w	ip, [r2, #12]
 800c162:	f8d2 a020 	ldr.w	sl, [r2, #32]
 800c166:	9a04      	ldr	r2, [sp, #16]
 800c168:	9705      	str	r7, [sp, #20]
 800c16a:	2a00      	cmp	r2, #0
 800c16c:	d07e      	beq.n	800c26c <D24_1CH_HTONS_VOL_HP+0x128>
 800c16e:	f1a1 0b02 	sub.w	fp, r1, #2
 800c172:	2700      	movs	r7, #0
 800c174:	46a8      	mov	r8, r5
 800c176:	f8cd b004 	str.w	fp, [sp, #4]
 800c17a:	4655      	mov	r5, sl
 800c17c:	46e3      	mov	fp, ip
 800c17e:	f8df e0f8 	ldr.w	lr, [pc, #248]	; 800c278 <D24_1CH_HTONS_VOL_HP+0x134>
 800c182:	46ba      	mov	sl, r7
 800c184:	469c      	mov	ip, r3
 800c186:	e055      	b.n	800c234 <D24_1CH_HTONS_VOL_HP+0xf0>
 800c188:	7802      	ldrb	r2, [r0, #0]
 800c18a:	78c3      	ldrb	r3, [r0, #3]
 800c18c:	7841      	ldrb	r1, [r0, #1]
 800c18e:	0212      	lsls	r2, r2, #8
 800c190:	eb02 4303 	add.w	r3, r2, r3, lsl #16
 800c194:	440b      	add	r3, r1
 800c196:	3002      	adds	r0, #2
 800c198:	b2d9      	uxtb	r1, r3
 800c19a:	f3c3 2207 	ubfx	r2, r3, #8, #8
 800c19e:	f85e 7021 	ldr.w	r7, [lr, r1, lsl #2]
 800c1a2:	f85e 2022 	ldr.w	r2, [lr, r2, lsl #2]
 800c1a6:	0c1b      	lsrs	r3, r3, #16
 800c1a8:	eb07 2796 	add.w	r7, r7, r6, lsr #10
 800c1ac:	eb02 2297 	add.w	r2, r2, r7, lsr #10
 800c1b0:	f85e 6023 	ldr.w	r6, [lr, r3, lsl #2]
 800c1b4:	f3c7 0309 	ubfx	r3, r7, #0, #10
 800c1b8:	f3c2 0709 	ubfx	r7, r2, #0, #10
 800c1bc:	eb06 2692 	add.w	r6, r6, r2, lsr #10
 800c1c0:	ea47 4303 	orr.w	r3, r7, r3, lsl #16
 800c1c4:	4a2a      	ldr	r2, [pc, #168]	; (800c270 <D24_1CH_HTONS_VOL_HP+0x12c>)
 800c1c6:	fb23 b102 	smlad	r1, r3, r2, fp
 800c1ca:	4a2a      	ldr	r2, [pc, #168]	; (800c274 <D24_1CH_HTONS_VOL_HP+0x130>)
 800c1cc:	fb23 cb02 	smlad	fp, r3, r2, ip
 800c1d0:	f3c6 0c09 	ubfx	ip, r6, #0, #10
 800c1d4:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 800c1d8:	eb0b 0b4c 	add.w	fp, fp, ip, lsl #1
 800c1dc:	2201      	movs	r2, #1
 800c1de:	fb23 f702 	smuad	r7, r3, r2
 800c1e2:	f5a1 51d8 	sub.w	r1, r1, #6912	; 0x1b00
 800c1e6:	eb01 0208 	add.w	r2, r1, r8
 800c1ea:	1b12      	subs	r2, r2, r4
 800c1ec:	17d4      	asrs	r4, r2, #31
 800c1ee:	fba2 2305 	umull	r2, r3, r2, r5
 800c1f2:	f112 4200 	adds.w	r2, r2, #2147483648	; 0x80000000
 800c1f6:	fb05 3304 	mla	r3, r5, r4, r3
 800c1fa:	f143 0300 	adc.w	r3, r3, #0
 800c1fe:	9c05      	ldr	r4, [sp, #20]
 800c200:	03da      	lsls	r2, r3, #15
 800c202:	f04f 4800 	mov.w	r8, #2147483648	; 0x80000000
 800c206:	f04f 0900 	mov.w	r9, #0
 800c20a:	fbc4 8902 	smlal	r8, r9, r4, r2
 800c20e:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800c212:	9a01      	ldr	r2, [sp, #4]
 800c214:	ea4f 0843 	mov.w	r8, r3, lsl #1
 800c218:	9b03      	ldr	r3, [sp, #12]
 800c21a:	109b      	asrs	r3, r3, #2
 800c21c:	f303 030f 	ssat	r3, #16, r3
 800c220:	f822 3f02 	strh.w	r3, [r2, #2]!
 800c224:	9b04      	ldr	r3, [sp, #16]
 800c226:	9201      	str	r2, [sp, #4]
 800c228:	f10a 0a01 	add.w	sl, sl, #1
 800c22c:	459a      	cmp	sl, r3
 800c22e:	44bc      	add	ip, r7
 800c230:	460c      	mov	r4, r1
 800c232:	d00b      	beq.n	800c24c <D24_1CH_HTONS_VOL_HP+0x108>
 800c234:	f01a 0f01 	tst.w	sl, #1
 800c238:	d0a6      	beq.n	800c188 <D24_1CH_HTONS_VOL_HP+0x44>
 800c23a:	78c2      	ldrb	r2, [r0, #3]
 800c23c:	7883      	ldrb	r3, [r0, #2]
 800c23e:	f810 1b04 	ldrb.w	r1, [r0], #4
 800c242:	0212      	lsls	r2, r2, #8
 800c244:	eb02 4303 	add.w	r3, r2, r3, lsl #16
 800c248:	440b      	add	r3, r1
 800c24a:	e7a5      	b.n	800c198 <D24_1CH_HTONS_VOL_HP+0x54>
 800c24c:	4663      	mov	r3, ip
 800c24e:	4645      	mov	r5, r8
 800c250:	46dc      	mov	ip, fp
 800c252:	9807      	ldr	r0, [sp, #28]
 800c254:	6141      	str	r1, [r0, #20]
 800c256:	9906      	ldr	r1, [sp, #24]
 800c258:	6083      	str	r3, [r0, #8]
 800c25a:	f8c0 c00c 	str.w	ip, [r0, #12]
 800c25e:	61c6      	str	r6, [r0, #28]
 800c260:	6105      	str	r5, [r0, #16]
 800c262:	6181      	str	r1, [r0, #24]
 800c264:	2000      	movs	r0, #0
 800c266:	b009      	add	sp, #36	; 0x24
 800c268:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c26c:	4621      	mov	r1, r4
 800c26e:	e7f0      	b.n	800c252 <D24_1CH_HTONS_VOL_HP+0x10e>
 800c270:	00030001 	.word	0x00030001
 800c274:	00060007 	.word	0x00060007
 800c278:	20000000 	.word	0x20000000

0800c27c <D32_1CH_HTONS_VOL_HP>:
 800c27c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c280:	4692      	mov	sl, r2
 800c282:	b087      	sub	sp, #28
 800c284:	8cd2      	ldrh	r2, [r2, #38]	; 0x26
 800c286:	f8da 3018 	ldr.w	r3, [sl, #24]
 800c28a:	f8da 5030 	ldr.w	r5, [sl, #48]	; 0x30
 800c28e:	9304      	str	r3, [sp, #16]
 800c290:	f8da 4010 	ldr.w	r4, [sl, #16]
 800c294:	f8da 8014 	ldr.w	r8, [sl, #20]
 800c298:	f8da 601c 	ldr.w	r6, [sl, #28]
 800c29c:	f8da 3008 	ldr.w	r3, [sl, #8]
 800c2a0:	f8da e00c 	ldr.w	lr, [sl, #12]
 800c2a4:	9501      	str	r5, [sp, #4]
 800c2a6:	f8da c020 	ldr.w	ip, [sl, #32]
 800c2aa:	2a00      	cmp	r2, #0
 800c2ac:	d07b      	beq.n	800c3a6 <D32_1CH_HTONS_VOL_HP+0x12a>
 800c2ae:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 800c2b2:	4f3e      	ldr	r7, [pc, #248]	; (800c3ac <D32_1CH_HTONS_VOL_HP+0x130>)
 800c2b4:	f8cd c00c 	str.w	ip, [sp, #12]
 800c2b8:	9202      	str	r2, [sp, #8]
 800c2ba:	460d      	mov	r5, r1
 800c2bc:	46a1      	mov	r9, r4
 800c2be:	4684      	mov	ip, r0
 800c2c0:	f8cd a014 	str.w	sl, [sp, #20]
 800c2c4:	f85c 1b04 	ldr.w	r1, [ip], #4
 800c2c8:	ba49      	rev16	r1, r1
 800c2ca:	b2c8      	uxtb	r0, r1
 800c2cc:	f3c1 2207 	ubfx	r2, r1, #8, #8
 800c2d0:	f3c1 4a07 	ubfx	sl, r1, #16, #8
 800c2d4:	f857 0020 	ldr.w	r0, [r7, r0, lsl #2]
 800c2d8:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
 800c2dc:	0e09      	lsrs	r1, r1, #24
 800c2de:	eb00 2096 	add.w	r0, r0, r6, lsr #10
 800c2e2:	f857 602a 	ldr.w	r6, [r7, sl, lsl #2]
 800c2e6:	f857 1021 	ldr.w	r1, [r7, r1, lsl #2]
 800c2ea:	eb02 2290 	add.w	r2, r2, r0, lsr #10
 800c2ee:	eb06 2a92 	add.w	sl, r6, r2, lsr #10
 800c2f2:	eb01 269a 	add.w	r6, r1, sl, lsr #10
 800c2f6:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800c2fa:	f3c6 0109 	ubfx	r1, r6, #0, #10
 800c2fe:	f3c0 0009 	ubfx	r0, r0, #0, #10
 800c302:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 800c306:	ea42 4000 	orr.w	r0, r2, r0, lsl #16
 800c30a:	ea41 4a0a 	orr.w	sl, r1, sl, lsl #16
 800c30e:	4a28      	ldr	r2, [pc, #160]	; (800c3b0 <D32_1CH_HTONS_VOL_HP+0x134>)
 800c310:	fb20 e202 	smlad	r2, r0, r2, lr
 800c314:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 800c318:	fb2a 2101 	smlad	r1, sl, r1, r2
 800c31c:	4a25      	ldr	r2, [pc, #148]	; (800c3b4 <D32_1CH_HTONS_VOL_HP+0x138>)
 800c31e:	fb20 3302 	smlad	r3, r0, r2, r3
 800c322:	4a25      	ldr	r2, [pc, #148]	; (800c3b8 <D32_1CH_HTONS_VOL_HP+0x13c>)
 800c324:	fb2a 3e02 	smlad	lr, sl, r2, r3
 800c328:	2301      	movs	r3, #1
 800c32a:	fb20 f003 	smuad	r0, r0, r3
 800c32e:	4b23      	ldr	r3, [pc, #140]	; (800c3bc <D32_1CH_HTONS_VOL_HP+0x140>)
 800c330:	fb2a 0303 	smlad	r3, sl, r3, r0
 800c334:	f5a1 4280 	sub.w	r2, r1, #16384	; 0x4000
 800c338:	9c03      	ldr	r4, [sp, #12]
 800c33a:	eb02 0009 	add.w	r0, r2, r9
 800c33e:	eba0 0008 	sub.w	r0, r0, r8
 800c342:	ea4f 7be0 	mov.w	fp, r0, asr #31
 800c346:	fba0 0104 	umull	r0, r1, r0, r4
 800c34a:	f110 4000 	adds.w	r0, r0, #2147483648	; 0x80000000
 800c34e:	fb04 110b 	mla	r1, r4, fp, r1
 800c352:	f141 0100 	adc.w	r1, r1, #0
 800c356:	9c01      	ldr	r4, [sp, #4]
 800c358:	0388      	lsls	r0, r1, #14
 800c35a:	f04f 4800 	mov.w	r8, #2147483648	; 0x80000000
 800c35e:	f04f 0900 	mov.w	r9, #0
 800c362:	fbc0 8904 	smlal	r8, r9, r0, r4
 800c366:	ea4f 00a9 	mov.w	r0, r9, asr #2
 800c36a:	ea4f 0941 	mov.w	r9, r1, lsl #1
 800c36e:	f300 000f 	ssat	r0, #16, r0
 800c372:	9902      	ldr	r1, [sp, #8]
 800c374:	f825 0b02 	strh.w	r0, [r5], #2
 800c378:	428d      	cmp	r5, r1
 800c37a:	4690      	mov	r8, r2
 800c37c:	d1a2      	bne.n	800c2c4 <D32_1CH_HTONS_VOL_HP+0x48>
 800c37e:	f8dd a014 	ldr.w	sl, [sp, #20]
 800c382:	464c      	mov	r4, r9
 800c384:	f8ca 3008 	str.w	r3, [sl, #8]
 800c388:	9b04      	ldr	r3, [sp, #16]
 800c38a:	f8ca e00c 	str.w	lr, [sl, #12]
 800c38e:	2000      	movs	r0, #0
 800c390:	f8ca 601c 	str.w	r6, [sl, #28]
 800c394:	f8ca 4010 	str.w	r4, [sl, #16]
 800c398:	f8ca 2014 	str.w	r2, [sl, #20]
 800c39c:	f8ca 3018 	str.w	r3, [sl, #24]
 800c3a0:	b007      	add	sp, #28
 800c3a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c3a6:	4642      	mov	r2, r8
 800c3a8:	e7ec      	b.n	800c384 <D32_1CH_HTONS_VOL_HP+0x108>
 800c3aa:	bf00      	nop
 800c3ac:	20000000 	.word	0x20000000
 800c3b0:	00060003 	.word	0x00060003
 800c3b4:	000a000c 	.word	0x000a000c
 800c3b8:	000c000a 	.word	0x000c000a
 800c3bc:	00030006 	.word	0x00030006

0800c3c0 <D48_1CH_HTONS_VOL_HP>:
 800c3c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c3c4:	4613      	mov	r3, r2
 800c3c6:	461c      	mov	r4, r3
 800c3c8:	b087      	sub	sp, #28
 800c3ca:	4625      	mov	r5, r4
 800c3cc:	4626      	mov	r6, r4
 800c3ce:	6b2d      	ldr	r5, [r5, #48]	; 0x30
 800c3d0:	9205      	str	r2, [sp, #20]
 800c3d2:	8cd2      	ldrh	r2, [r2, #38]	; 0x26
 800c3d4:	f8d3 9014 	ldr.w	r9, [r3, #20]
 800c3d8:	9501      	str	r5, [sp, #4]
 800c3da:	4680      	mov	r8, r0
 800c3dc:	6a35      	ldr	r5, [r6, #32]
 800c3de:	6918      	ldr	r0, [r3, #16]
 800c3e0:	699b      	ldr	r3, [r3, #24]
 800c3e2:	9304      	str	r3, [sp, #16]
 800c3e4:	f8d4 e01c 	ldr.w	lr, [r4, #28]
 800c3e8:	68a3      	ldr	r3, [r4, #8]
 800c3ea:	9502      	str	r5, [sp, #8]
 800c3ec:	68e4      	ldr	r4, [r4, #12]
 800c3ee:	2a00      	cmp	r2, #0
 800c3f0:	f000 808c 	beq.w	800c50c <D48_1CH_HTONS_VOL_HP+0x14c>
 800c3f4:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 800c3f8:	4d45      	ldr	r5, [pc, #276]	; (800c510 <D48_1CH_HTONS_VOL_HP+0x150>)
 800c3fa:	9203      	str	r2, [sp, #12]
 800c3fc:	468c      	mov	ip, r1
 800c3fe:	e898 0044 	ldmia.w	r8, {r2, r6}
 800c402:	f108 0806 	add.w	r8, r8, #6
 800c406:	ba52      	rev16	r2, r2
 800c408:	ba76      	rev16	r6, r6
 800c40a:	b2d7      	uxtb	r7, r2
 800c40c:	f3c2 2107 	ubfx	r1, r2, #8, #8
 800c410:	f855 a027 	ldr.w	sl, [r5, r7, lsl #2]
 800c414:	f855 1021 	ldr.w	r1, [r5, r1, lsl #2]
 800c418:	f3c2 4707 	ubfx	r7, r2, #16, #8
 800c41c:	0e12      	lsrs	r2, r2, #24
 800c41e:	eb0a 2a9e 	add.w	sl, sl, lr, lsr #10
 800c422:	f855 7027 	ldr.w	r7, [r5, r7, lsl #2]
 800c426:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 800c42a:	fa5f fb86 	uxtb.w	fp, r6
 800c42e:	eb01 219a 	add.w	r1, r1, sl, lsr #10
 800c432:	f3c6 2e07 	ubfx	lr, r6, #8, #8
 800c436:	eb07 2791 	add.w	r7, r7, r1, lsr #10
 800c43a:	f855 602b 	ldr.w	r6, [r5, fp, lsl #2]
 800c43e:	f855 e02e 	ldr.w	lr, [r5, lr, lsl #2]
 800c442:	eb02 2297 	add.w	r2, r2, r7, lsr #10
 800c446:	eb06 2692 	add.w	r6, r6, r2, lsr #10
 800c44a:	eb0e 2e96 	add.w	lr, lr, r6, lsr #10
 800c44e:	f3c1 0109 	ubfx	r1, r1, #0, #10
 800c452:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800c456:	f3ce 0b09 	ubfx	fp, lr, #0, #10
 800c45a:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 800c45e:	f3c7 0709 	ubfx	r7, r7, #0, #10
 800c462:	f3c6 0609 	ubfx	r6, r6, #0, #10
 800c466:	ea42 4707 	orr.w	r7, r2, r7, lsl #16
 800c46a:	ea41 4a0a 	orr.w	sl, r1, sl, lsl #16
 800c46e:	ea4b 4606 	orr.w	r6, fp, r6, lsl #16
 800c472:	4a28      	ldr	r2, [pc, #160]	; (800c514 <D48_1CH_HTONS_VOL_HP+0x154>)
 800c474:	fb2a 4202 	smlad	r2, sl, r2, r4
 800c478:	4927      	ldr	r1, [pc, #156]	; (800c518 <D48_1CH_HTONS_VOL_HP+0x158>)
 800c47a:	fb27 2201 	smlad	r2, r7, r1, r2
 800c47e:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 800c482:	fb26 2201 	smlad	r2, r6, r1, r2
 800c486:	4925      	ldr	r1, [pc, #148]	; (800c51c <D48_1CH_HTONS_VOL_HP+0x15c>)
 800c488:	fb2a 3401 	smlad	r4, sl, r1, r3
 800c48c:	f04f 131b 	mov.w	r3, #1769499	; 0x1b001b
 800c490:	fb27 4403 	smlad	r4, r7, r3, r4
 800c494:	4b22      	ldr	r3, [pc, #136]	; (800c520 <D48_1CH_HTONS_VOL_HP+0x160>)
 800c496:	fb26 4403 	smlad	r4, r6, r3, r4
 800c49a:	2101      	movs	r1, #1
 800c49c:	fb2a fa01 	smuad	sl, sl, r1
 800c4a0:	4b20      	ldr	r3, [pc, #128]	; (800c524 <D48_1CH_HTONS_VOL_HP+0x164>)
 800c4a2:	fb27 a703 	smlad	r7, r7, r3, sl
 800c4a6:	4b20      	ldr	r3, [pc, #128]	; (800c528 <D48_1CH_HTONS_VOL_HP+0x168>)
 800c4a8:	fb26 7303 	smlad	r3, r6, r3, r7
 800c4ac:	f5a2 4258 	sub.w	r2, r2, #55296	; 0xd800
 800c4b0:	9e02      	ldr	r6, [sp, #8]
 800c4b2:	9f01      	ldr	r7, [sp, #4]
 800c4b4:	4410      	add	r0, r2
 800c4b6:	eba0 0009 	sub.w	r0, r0, r9
 800c4ba:	ea4f 7ae0 	mov.w	sl, r0, asr #31
 800c4be:	fba0 0106 	umull	r0, r1, r0, r6
 800c4c2:	f110 4000 	adds.w	r0, r0, #2147483648	; 0x80000000
 800c4c6:	fb06 110a 	mla	r1, r6, sl, r1
 800c4ca:	f141 0100 	adc.w	r1, r1, #0
 800c4ce:	0308      	lsls	r0, r1, #12
 800c4d0:	f04f 4900 	mov.w	r9, #2147483648	; 0x80000000
 800c4d4:	f04f 0a00 	mov.w	sl, #0
 800c4d8:	fbc0 9a07 	smlal	r9, sl, r0, r7
 800c4dc:	4657      	mov	r7, sl
 800c4de:	10b8      	asrs	r0, r7, #2
 800c4e0:	f300 000f 	ssat	r0, #16, r0
 800c4e4:	f82c 0b02 	strh.w	r0, [ip], #2
 800c4e8:	0048      	lsls	r0, r1, #1
 800c4ea:	9903      	ldr	r1, [sp, #12]
 800c4ec:	458c      	cmp	ip, r1
 800c4ee:	4691      	mov	r9, r2
 800c4f0:	d185      	bne.n	800c3fe <D48_1CH_HTONS_VOL_HP+0x3e>
 800c4f2:	9d05      	ldr	r5, [sp, #20]
 800c4f4:	616a      	str	r2, [r5, #20]
 800c4f6:	9a04      	ldr	r2, [sp, #16]
 800c4f8:	6128      	str	r0, [r5, #16]
 800c4fa:	2000      	movs	r0, #0
 800c4fc:	60ab      	str	r3, [r5, #8]
 800c4fe:	60ec      	str	r4, [r5, #12]
 800c500:	f8c5 e01c 	str.w	lr, [r5, #28]
 800c504:	61aa      	str	r2, [r5, #24]
 800c506:	b007      	add	sp, #28
 800c508:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c50c:	464a      	mov	r2, r9
 800c50e:	e7f0      	b.n	800c4f2 <D48_1CH_HTONS_VOL_HP+0x132>
 800c510:	20000000 	.word	0x20000000
 800c514:	000f000a 	.word	0x000f000a
 800c518:	00060003 	.word	0x00060003
 800c51c:	00150019 	.word	0x00150019
 800c520:	00190015 	.word	0x00190015
 800c524:	00030006 	.word	0x00030006
 800c528:	000a000f 	.word	0x000a000f

0800c52c <D64_1CH_HTONS_VOL_HP>:
 800c52c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c530:	b089      	sub	sp, #36	; 0x24
 800c532:	4614      	mov	r4, r2
 800c534:	9207      	str	r2, [sp, #28]
 800c536:	8cd3      	ldrh	r3, [r2, #38]	; 0x26
 800c538:	f8d2 c010 	ldr.w	ip, [r2, #16]
 800c53c:	f8d2 8014 	ldr.w	r8, [r2, #20]
 800c540:	6992      	ldr	r2, [r2, #24]
 800c542:	9206      	str	r2, [sp, #24]
 800c544:	68e2      	ldr	r2, [r4, #12]
 800c546:	9201      	str	r2, [sp, #4]
 800c548:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800c54a:	9203      	str	r2, [sp, #12]
 800c54c:	6a22      	ldr	r2, [r4, #32]
 800c54e:	69e5      	ldr	r5, [r4, #28]
 800c550:	68a6      	ldr	r6, [r4, #8]
 800c552:	9204      	str	r2, [sp, #16]
 800c554:	2b00      	cmp	r3, #0
 800c556:	f000 80b0 	beq.w	800c6ba <D64_1CH_HTONS_VOL_HP+0x18e>
 800c55a:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 800c55e:	4f58      	ldr	r7, [pc, #352]	; (800c6c0 <D64_1CH_HTONS_VOL_HP+0x194>)
 800c560:	9305      	str	r3, [sp, #20]
 800c562:	9102      	str	r1, [sp, #8]
 800c564:	f850 2b08 	ldr.w	r2, [r0], #8
 800c568:	f850 3c04 	ldr.w	r3, [r0, #-4]
 800c56c:	ba52      	rev16	r2, r2
 800c56e:	fa93 f993 	rev16.w	r9, r3
 800c572:	b2d4      	uxtb	r4, r2
 800c574:	f3c2 2307 	ubfx	r3, r2, #8, #8
 800c578:	f857 b024 	ldr.w	fp, [r7, r4, lsl #2]
 800c57c:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
 800c580:	9901      	ldr	r1, [sp, #4]
 800c582:	f3c2 4407 	ubfx	r4, r2, #16, #8
 800c586:	0e12      	lsrs	r2, r2, #24
 800c588:	44ab      	add	fp, r5
 800c58a:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800c58e:	f857 4022 	ldr.w	r4, [r7, r2, lsl #2]
 800c592:	fa5f f289 	uxtb.w	r2, r9
 800c596:	eb03 2e9b 	add.w	lr, r3, fp, lsr #10
 800c59a:	f3c9 2307 	ubfx	r3, r9, #8, #8
 800c59e:	eb05 2a9e 	add.w	sl, r5, lr, lsr #10
 800c5a2:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
 800c5a6:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
 800c5aa:	f3c9 4507 	ubfx	r5, r9, #16, #8
 800c5ae:	eb04 249a 	add.w	r4, r4, sl, lsr #10
 800c5b2:	ea4f 6919 	mov.w	r9, r9, lsr #24
 800c5b6:	eb02 2294 	add.w	r2, r2, r4, lsr #10
 800c5ba:	f857 5025 	ldr.w	r5, [r7, r5, lsl #2]
 800c5be:	f857 9029 	ldr.w	r9, [r7, r9, lsl #2]
 800c5c2:	eb03 2392 	add.w	r3, r3, r2, lsr #10
 800c5c6:	eb05 2593 	add.w	r5, r5, r3, lsr #10
 800c5ca:	eb09 2995 	add.w	r9, r9, r5, lsr #10
 800c5ce:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 800c5d2:	f3cb 0b09 	ubfx	fp, fp, #0, #10
 800c5d6:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 800c5da:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800c5de:	f3c5 0509 	ubfx	r5, r5, #0, #10
 800c5e2:	ea4e 4b0b 	orr.w	fp, lr, fp, lsl #16
 800c5e6:	f3c4 0409 	ubfx	r4, r4, #0, #10
 800c5ea:	f3c9 0e09 	ubfx	lr, r9, #0, #10
 800c5ee:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800c5f2:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
 800c5f6:	ea4e 4e05 	orr.w	lr, lr, r5, lsl #16
 800c5fa:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800c5fe:	ea4f 2599 	mov.w	r5, r9, lsr #10
 800c602:	4b30      	ldr	r3, [pc, #192]	; (800c6c4 <D64_1CH_HTONS_VOL_HP+0x198>)
 800c604:	fb2b 1303 	smlad	r3, fp, r3, r1
 800c608:	492f      	ldr	r1, [pc, #188]	; (800c6c8 <D64_1CH_HTONS_VOL_HP+0x19c>)
 800c60a:	fb24 3301 	smlad	r3, r4, r1, r3
 800c60e:	492f      	ldr	r1, [pc, #188]	; (800c6cc <D64_1CH_HTONS_VOL_HP+0x1a0>)
 800c610:	fb22 3301 	smlad	r3, r2, r1, r3
 800c614:	f44f 3a80 	mov.w	sl, #65536	; 0x10000
 800c618:	fb2e 390a 	smlad	r9, lr, sl, r3
 800c61c:	4b2c      	ldr	r3, [pc, #176]	; (800c6d0 <D64_1CH_HTONS_VOL_HP+0x1a4>)
 800c61e:	fb2b 6603 	smlad	r6, fp, r3, r6
 800c622:	fb2e 6613 	smladx	r6, lr, r3, r6
 800c626:	4b2b      	ldr	r3, [pc, #172]	; (800c6d4 <D64_1CH_HTONS_VOL_HP+0x1a8>)
 800c628:	fb24 6603 	smlad	r6, r4, r3, r6
 800c62c:	fb22 6313 	smladx	r3, r2, r3, r6
 800c630:	f04f 0a01 	mov.w	sl, #1
 800c634:	9301      	str	r3, [sp, #4]
 800c636:	fb2b fb0a 	smuad	fp, fp, sl
 800c63a:	4b27      	ldr	r3, [pc, #156]	; (800c6d8 <D64_1CH_HTONS_VOL_HP+0x1ac>)
 800c63c:	fb24 ba03 	smlad	sl, r4, r3, fp
 800c640:	4b26      	ldr	r3, [pc, #152]	; (800c6dc <D64_1CH_HTONS_VOL_HP+0x1b0>)
 800c642:	fb22 a203 	smlad	r2, r2, r3, sl
 800c646:	4b26      	ldr	r3, [pc, #152]	; (800c6e0 <D64_1CH_HTONS_VOL_HP+0x1b4>)
 800c648:	fb2e 2603 	smlad	r6, lr, r3, r2
 800c64c:	f5a9 3a00 	sub.w	sl, r9, #131072	; 0x20000
 800c650:	eb0a 020c 	add.w	r2, sl, ip
 800c654:	9c04      	ldr	r4, [sp, #16]
 800c656:	9903      	ldr	r1, [sp, #12]
 800c658:	eba2 0208 	sub.w	r2, r2, r8
 800c65c:	ea4f 79e2 	mov.w	r9, r2, asr #31
 800c660:	fba2 2304 	umull	r2, r3, r2, r4
 800c664:	f112 4200 	adds.w	r2, r2, #2147483648	; 0x80000000
 800c668:	fb04 3309 	mla	r3, r4, r9, r3
 800c66c:	f143 0300 	adc.w	r3, r3, #0
 800c670:	02da      	lsls	r2, r3, #11
 800c672:	f04f 4800 	mov.w	r8, #2147483648	; 0x80000000
 800c676:	f04f 0900 	mov.w	r9, #0
 800c67a:	fbc1 8902 	smlal	r8, r9, r1, r2
 800c67e:	9902      	ldr	r1, [sp, #8]
 800c680:	ea4f 02a9 	mov.w	r2, r9, asr #2
 800c684:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800c688:	f302 020f 	ssat	r2, #16, r2
 800c68c:	9b05      	ldr	r3, [sp, #20]
 800c68e:	f821 2b02 	strh.w	r2, [r1], #2
 800c692:	4299      	cmp	r1, r3
 800c694:	9102      	str	r1, [sp, #8]
 800c696:	46d0      	mov	r8, sl
 800c698:	f47f af64 	bne.w	800c564 <D64_1CH_HTONS_VOL_HP+0x38>
 800c69c:	9a07      	ldr	r2, [sp, #28]
 800c69e:	9901      	ldr	r1, [sp, #4]
 800c6a0:	60d1      	str	r1, [r2, #12]
 800c6a2:	9906      	ldr	r1, [sp, #24]
 800c6a4:	6096      	str	r6, [r2, #8]
 800c6a6:	2000      	movs	r0, #0
 800c6a8:	61d5      	str	r5, [r2, #28]
 800c6aa:	f8c2 c010 	str.w	ip, [r2, #16]
 800c6ae:	f8c2 a014 	str.w	sl, [r2, #20]
 800c6b2:	6191      	str	r1, [r2, #24]
 800c6b4:	b009      	add	sp, #36	; 0x24
 800c6b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c6ba:	46c2      	mov	sl, r8
 800c6bc:	4622      	mov	r2, r4
 800c6be:	e7ee      	b.n	800c69e <D64_1CH_HTONS_VOL_HP+0x172>
 800c6c0:	20000000 	.word	0x20000000
 800c6c4:	001c0015 	.word	0x001c0015
 800c6c8:	000f000a 	.word	0x000f000a
 800c6cc:	00060003 	.word	0x00060003
 800c6d0:	0024002a 	.word	0x0024002a
 800c6d4:	002e0030 	.word	0x002e0030
 800c6d8:	00030006 	.word	0x00030006
 800c6dc:	000a000f 	.word	0x000a000f
 800c6e0:	0015001c 	.word	0x0015001c

0800c6e4 <D80_1CH_HTONS_VOL_HP>:
 800c6e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c6e8:	4613      	mov	r3, r2
 800c6ea:	b089      	sub	sp, #36	; 0x24
 800c6ec:	4686      	mov	lr, r0
 800c6ee:	6918      	ldr	r0, [r3, #16]
 800c6f0:	9000      	str	r0, [sp, #0]
 800c6f2:	4618      	mov	r0, r3
 800c6f4:	461c      	mov	r4, r3
 800c6f6:	695b      	ldr	r3, [r3, #20]
 800c6f8:	9302      	str	r3, [sp, #8]
 800c6fa:	6983      	ldr	r3, [r0, #24]
 800c6fc:	9306      	str	r3, [sp, #24]
 800c6fe:	f8d0 c008 	ldr.w	ip, [r0, #8]
 800c702:	69c3      	ldr	r3, [r0, #28]
 800c704:	68c0      	ldr	r0, [r0, #12]
 800c706:	9207      	str	r2, [sp, #28]
 800c708:	9001      	str	r0, [sp, #4]
 800c70a:	8cd2      	ldrh	r2, [r2, #38]	; 0x26
 800c70c:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800c70e:	9003      	str	r0, [sp, #12]
 800c710:	6a20      	ldr	r0, [r4, #32]
 800c712:	9004      	str	r0, [sp, #16]
 800c714:	2a00      	cmp	r2, #0
 800c716:	f000 80d2 	beq.w	800c8be <D80_1CH_HTONS_VOL_HP+0x1da>
 800c71a:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 800c71e:	4869      	ldr	r0, [pc, #420]	; (800c8c4 <D80_1CH_HTONS_VOL_HP+0x1e0>)
 800c720:	9205      	str	r2, [sp, #20]
 800c722:	461c      	mov	r4, r3
 800c724:	f8de 5000 	ldr.w	r5, [lr]
 800c728:	f8de 2004 	ldr.w	r2, [lr, #4]
 800c72c:	f8de 3008 	ldr.w	r3, [lr, #8]
 800c730:	f10e 0e0a 	add.w	lr, lr, #10
 800c734:	ba6d      	rev16	r5, r5
 800c736:	ba52      	rev16	r2, r2
 800c738:	fa93 fb93 	rev16.w	fp, r3
 800c73c:	b2ee      	uxtb	r6, r5
 800c73e:	f3c5 2307 	ubfx	r3, r5, #8, #8
 800c742:	f850 7026 	ldr.w	r7, [r0, r6, lsl #2]
 800c746:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800c74a:	f3c5 4607 	ubfx	r6, r5, #16, #8
 800c74e:	eb04 0a07 	add.w	sl, r4, r7
 800c752:	0e2d      	lsrs	r5, r5, #24
 800c754:	f850 4026 	ldr.w	r4, [r0, r6, lsl #2]
 800c758:	f850 6025 	ldr.w	r6, [r0, r5, lsl #2]
 800c75c:	eb03 239a 	add.w	r3, r3, sl, lsr #10
 800c760:	eb04 2993 	add.w	r9, r4, r3, lsr #10
 800c764:	b2d5      	uxtb	r5, r2
 800c766:	f3c2 2407 	ubfx	r4, r2, #8, #8
 800c76a:	f850 7025 	ldr.w	r7, [r0, r5, lsl #2]
 800c76e:	f850 5024 	ldr.w	r5, [r0, r4, lsl #2]
 800c772:	f3c2 4407 	ubfx	r4, r2, #16, #8
 800c776:	eb06 2699 	add.w	r6, r6, r9, lsr #10
 800c77a:	0e12      	lsrs	r2, r2, #24
 800c77c:	eb07 2896 	add.w	r8, r7, r6, lsr #10
 800c780:	f850 7024 	ldr.w	r7, [r0, r4, lsl #2]
 800c784:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
 800c788:	fa5f f48b 	uxtb.w	r4, fp
 800c78c:	eb05 2598 	add.w	r5, r5, r8, lsr #10
 800c790:	f3cb 2b07 	ubfx	fp, fp, #8, #8
 800c794:	eb07 2795 	add.w	r7, r7, r5, lsr #10
 800c798:	f850 4024 	ldr.w	r4, [r0, r4, lsl #2]
 800c79c:	f850 b02b 	ldr.w	fp, [r0, fp, lsl #2]
 800c7a0:	eb02 2297 	add.w	r2, r2, r7, lsr #10
 800c7a4:	eb04 2492 	add.w	r4, r4, r2, lsr #10
 800c7a8:	eb0b 2b94 	add.w	fp, fp, r4, lsr #10
 800c7ac:	f3c6 0609 	ubfx	r6, r6, #0, #10
 800c7b0:	f3c9 0909 	ubfx	r9, r9, #0, #10
 800c7b4:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 800c7b8:	f3c5 0509 	ubfx	r5, r5, #0, #10
 800c7bc:	f3c7 0709 	ubfx	r7, r7, #0, #10
 800c7c0:	f3c4 0409 	ubfx	r4, r4, #0, #10
 800c7c4:	ea46 4909 	orr.w	r9, r6, r9, lsl #16
 800c7c8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800c7cc:	f3cb 0609 	ubfx	r6, fp, #0, #10
 800c7d0:	f3c8 0809 	ubfx	r8, r8, #0, #10
 800c7d4:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800c7d8:	ea45 4808 	orr.w	r8, r5, r8, lsl #16
 800c7dc:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800c7e0:	ea46 4604 	orr.w	r6, r6, r4, lsl #16
 800c7e4:	ea43 430a 	orr.w	r3, r3, sl, lsl #16
 800c7e8:	ea4f 249b 	mov.w	r4, fp, lsr #10
 800c7ec:	4d36      	ldr	r5, [pc, #216]	; (800c8c8 <D80_1CH_HTONS_VOL_HP+0x1e4>)
 800c7ee:	9f01      	ldr	r7, [sp, #4]
 800c7f0:	fb23 7505 	smlad	r5, r3, r5, r7
 800c7f4:	4f35      	ldr	r7, [pc, #212]	; (800c8cc <D80_1CH_HTONS_VOL_HP+0x1e8>)
 800c7f6:	fb29 5507 	smlad	r5, r9, r7, r5
 800c7fa:	4f35      	ldr	r7, [pc, #212]	; (800c8d0 <D80_1CH_HTONS_VOL_HP+0x1ec>)
 800c7fc:	fb28 5507 	smlad	r5, r8, r7, r5
 800c800:	4f34      	ldr	r7, [pc, #208]	; (800c8d4 <D80_1CH_HTONS_VOL_HP+0x1f0>)
 800c802:	fb22 5507 	smlad	r5, r2, r7, r5
 800c806:	f44f 3a80 	mov.w	sl, #65536	; 0x10000
 800c80a:	fb26 5b0a 	smlad	fp, r6, sl, r5
 800c80e:	4d32      	ldr	r5, [pc, #200]	; (800c8d8 <D80_1CH_HTONS_VOL_HP+0x1f4>)
 800c810:	fb23 cc05 	smlad	ip, r3, r5, ip
 800c814:	4d31      	ldr	r5, [pc, #196]	; (800c8dc <D80_1CH_HTONS_VOL_HP+0x1f8>)
 800c816:	fb29 cc05 	smlad	ip, r9, r5, ip
 800c81a:	f04f 154b 	mov.w	r5, #4915275	; 0x4b004b
 800c81e:	fb28 c505 	smlad	r5, r8, r5, ip
 800c822:	4f2f      	ldr	r7, [pc, #188]	; (800c8e0 <D80_1CH_HTONS_VOL_HP+0x1fc>)
 800c824:	fb22 5507 	smlad	r5, r2, r7, r5
 800c828:	4f2e      	ldr	r7, [pc, #184]	; (800c8e4 <D80_1CH_HTONS_VOL_HP+0x200>)
 800c82a:	fb26 5507 	smlad	r5, r6, r7, r5
 800c82e:	f04f 0a01 	mov.w	sl, #1
 800c832:	9501      	str	r5, [sp, #4]
 800c834:	fb23 fa0a 	smuad	sl, r3, sl
 800c838:	4b2b      	ldr	r3, [pc, #172]	; (800c8e8 <D80_1CH_HTONS_VOL_HP+0x204>)
 800c83a:	fb29 a903 	smlad	r9, r9, r3, sl
 800c83e:	4d2b      	ldr	r5, [pc, #172]	; (800c8ec <D80_1CH_HTONS_VOL_HP+0x208>)
 800c840:	fb28 9805 	smlad	r8, r8, r5, r9
 800c844:	4d2a      	ldr	r5, [pc, #168]	; (800c8f0 <D80_1CH_HTONS_VOL_HP+0x20c>)
 800c846:	fb22 8205 	smlad	r2, r2, r5, r8
 800c84a:	4b2a      	ldr	r3, [pc, #168]	; (800c8f4 <D80_1CH_HTONS_VOL_HP+0x210>)
 800c84c:	fb26 2c03 	smlad	ip, r6, r3, r2
 800c850:	9b00      	ldr	r3, [sp, #0]
 800c852:	9d04      	ldr	r5, [sp, #16]
 800c854:	f5ab 3a7a 	sub.w	sl, fp, #256000	; 0x3e800
 800c858:	4453      	add	r3, sl
 800c85a:	461a      	mov	r2, r3
 800c85c:	9b02      	ldr	r3, [sp, #8]
 800c85e:	f8cd a008 	str.w	sl, [sp, #8]
 800c862:	1ad2      	subs	r2, r2, r3
 800c864:	17d7      	asrs	r7, r2, #31
 800c866:	fba2 2305 	umull	r2, r3, r2, r5
 800c86a:	fb05 3307 	mla	r3, r5, r7, r3
 800c86e:	f112 4200 	adds.w	r2, r2, #2147483648	; 0x80000000
 800c872:	f143 0300 	adc.w	r3, r3, #0
 800c876:	9d03      	ldr	r5, [sp, #12]
 800c878:	029a      	lsls	r2, r3, #10
 800c87a:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800c87e:	2700      	movs	r7, #0
 800c880:	005b      	lsls	r3, r3, #1
 800c882:	fbc5 6702 	smlal	r6, r7, r5, r2
 800c886:	10ba      	asrs	r2, r7, #2
 800c888:	9300      	str	r3, [sp, #0]
 800c88a:	f302 020f 	ssat	r2, #16, r2
 800c88e:	9b05      	ldr	r3, [sp, #20]
 800c890:	f821 2b02 	strh.w	r2, [r1], #2
 800c894:	4299      	cmp	r1, r3
 800c896:	f47f af45 	bne.w	800c724 <D80_1CH_HTONS_VOL_HP+0x40>
 800c89a:	4623      	mov	r3, r4
 800c89c:	9907      	ldr	r1, [sp, #28]
 800c89e:	9801      	ldr	r0, [sp, #4]
 800c8a0:	60c8      	str	r0, [r1, #12]
 800c8a2:	9a00      	ldr	r2, [sp, #0]
 800c8a4:	f8c1 c008 	str.w	ip, [r1, #8]
 800c8a8:	4608      	mov	r0, r1
 800c8aa:	61cb      	str	r3, [r1, #28]
 800c8ac:	610a      	str	r2, [r1, #16]
 800c8ae:	f8c1 a014 	str.w	sl, [r1, #20]
 800c8b2:	9906      	ldr	r1, [sp, #24]
 800c8b4:	6181      	str	r1, [r0, #24]
 800c8b6:	2000      	movs	r0, #0
 800c8b8:	b009      	add	sp, #36	; 0x24
 800c8ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c8be:	f8dd a008 	ldr.w	sl, [sp, #8]
 800c8c2:	e7eb      	b.n	800c89c <D80_1CH_HTONS_VOL_HP+0x1b8>
 800c8c4:	20000000 	.word	0x20000000
 800c8c8:	002d0024 	.word	0x002d0024
 800c8cc:	001c0015 	.word	0x001c0015
 800c8d0:	000f000a 	.word	0x000f000a
 800c8d4:	00060003 	.word	0x00060003
 800c8d8:	0037003f 	.word	0x0037003f
 800c8dc:	00450049 	.word	0x00450049
 800c8e0:	00490045 	.word	0x00490045
 800c8e4:	003f0037 	.word	0x003f0037
 800c8e8:	00030006 	.word	0x00030006
 800c8ec:	000a000f 	.word	0x000a000f
 800c8f0:	0015001c 	.word	0x0015001c
 800c8f4:	0024002d 	.word	0x0024002d

0800c8f8 <D128_1CH_HTONS_VOL_HP>:
 800c8f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c8fc:	b093      	sub	sp, #76	; 0x4c
 800c8fe:	4614      	mov	r4, r2
 800c900:	9211      	str	r2, [sp, #68]	; 0x44
 800c902:	8cd3      	ldrh	r3, [r2, #38]	; 0x26
 800c904:	6912      	ldr	r2, [r2, #16]
 800c906:	9203      	str	r2, [sp, #12]
 800c908:	4622      	mov	r2, r4
 800c90a:	4615      	mov	r5, r2
 800c90c:	6964      	ldr	r4, [r4, #20]
 800c90e:	9406      	str	r4, [sp, #24]
 800c910:	4614      	mov	r4, r2
 800c912:	6992      	ldr	r2, [r2, #24]
 800c914:	9210      	str	r2, [sp, #64]	; 0x40
 800c916:	68ea      	ldr	r2, [r5, #12]
 800c918:	9204      	str	r2, [sp, #16]
 800c91a:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 800c91c:	69e6      	ldr	r6, [r4, #28]
 800c91e:	920d      	str	r2, [sp, #52]	; 0x34
 800c920:	68a4      	ldr	r4, [r4, #8]
 800c922:	6a2a      	ldr	r2, [r5, #32]
 800c924:	9405      	str	r4, [sp, #20]
 800c926:	920e      	str	r2, [sp, #56]	; 0x38
 800c928:	2b00      	cmp	r3, #0
 800c92a:	f000 8145 	beq.w	800cbb8 <D128_1CH_HTONS_VOL_HP+0x2c0>
 800c92e:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 800c932:	930f      	str	r3, [sp, #60]	; 0x3c
 800c934:	f8df 82dc 	ldr.w	r8, [pc, #732]	; 800cc14 <D128_1CH_HTONS_VOL_HP+0x31c>
 800c938:	9107      	str	r1, [sp, #28]
 800c93a:	f100 0310 	add.w	r3, r0, #16
 800c93e:	4699      	mov	r9, r3
 800c940:	f1a9 0110 	sub.w	r1, r9, #16
 800c944:	c90e      	ldmia	r1, {r1, r2, r3}
 800c946:	f859 0c04 	ldr.w	r0, [r9, #-4]
 800c94a:	ba49      	rev16	r1, r1
 800c94c:	ba52      	rev16	r2, r2
 800c94e:	ba5b      	rev16	r3, r3
 800c950:	fa90 fa90 	rev16.w	sl, r0
 800c954:	f3c1 2007 	ubfx	r0, r1, #8, #8
 800c958:	b2cc      	uxtb	r4, r1
 800c95a:	f858 5020 	ldr.w	r5, [r8, r0, lsl #2]
 800c95e:	f858 4024 	ldr.w	r4, [r8, r4, lsl #2]
 800c962:	f3c1 4007 	ubfx	r0, r1, #16, #8
 800c966:	0e09      	lsrs	r1, r1, #24
 800c968:	4426      	add	r6, r4
 800c96a:	f858 4020 	ldr.w	r4, [r8, r0, lsl #2]
 800c96e:	f858 7021 	ldr.w	r7, [r8, r1, lsl #2]
 800c972:	b2d0      	uxtb	r0, r2
 800c974:	eb05 2596 	add.w	r5, r5, r6, lsr #10
 800c978:	eb04 2b95 	add.w	fp, r4, r5, lsr #10
 800c97c:	f3c2 2107 	ubfx	r1, r2, #8, #8
 800c980:	f858 4020 	ldr.w	r4, [r8, r0, lsl #2]
 800c984:	f858 1021 	ldr.w	r1, [r8, r1, lsl #2]
 800c988:	eb07 279b 	add.w	r7, r7, fp, lsr #10
 800c98c:	f3c2 4007 	ubfx	r0, r2, #16, #8
 800c990:	0e12      	lsrs	r2, r2, #24
 800c992:	eb04 2497 	add.w	r4, r4, r7, lsr #10
 800c996:	9701      	str	r7, [sp, #4]
 800c998:	f858 0020 	ldr.w	r0, [r8, r0, lsl #2]
 800c99c:	4627      	mov	r7, r4
 800c99e:	f858 4022 	ldr.w	r4, [r8, r2, lsl #2]
 800c9a2:	9702      	str	r7, [sp, #8]
 800c9a4:	b2da      	uxtb	r2, r3
 800c9a6:	eb01 2197 	add.w	r1, r1, r7, lsr #10
 800c9aa:	eb00 2c91 	add.w	ip, r0, r1, lsr #10
 800c9ae:	f858 0022 	ldr.w	r0, [r8, r2, lsl #2]
 800c9b2:	eb04 249c 	add.w	r4, r4, ip, lsr #10
 800c9b6:	eb00 2e94 	add.w	lr, r0, r4, lsr #10
 800c9ba:	f3c3 2207 	ubfx	r2, r3, #8, #8
 800c9be:	f3c3 4007 	ubfx	r0, r3, #16, #8
 800c9c2:	0e1b      	lsrs	r3, r3, #24
 800c9c4:	f858 7020 	ldr.w	r7, [r8, r0, lsl #2]
 800c9c8:	f858 2022 	ldr.w	r2, [r8, r2, lsl #2]
 800c9cc:	f858 0023 	ldr.w	r0, [r8, r3, lsl #2]
 800c9d0:	fa5f f38a 	uxtb.w	r3, sl
 800c9d4:	f3c6 0609 	ubfx	r6, r6, #0, #10
 800c9d8:	960a      	str	r6, [sp, #40]	; 0x28
 800c9da:	eb02 229e 	add.w	r2, r2, lr, lsr #10
 800c9de:	f858 6023 	ldr.w	r6, [r8, r3, lsl #2]
 800c9e2:	f3c5 0509 	ubfx	r5, r5, #0, #10
 800c9e6:	f3ca 2307 	ubfx	r3, sl, #8, #8
 800c9ea:	950b      	str	r5, [sp, #44]	; 0x2c
 800c9ec:	eb07 2792 	add.w	r7, r7, r2, lsr #10
 800c9f0:	f3ca 4507 	ubfx	r5, sl, #16, #8
 800c9f4:	eb00 2097 	add.w	r0, r0, r7, lsr #10
 800c9f8:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
 800c9fc:	f858 5025 	ldr.w	r5, [r8, r5, lsl #2]
 800ca00:	ea4f 6a1a 	mov.w	sl, sl, lsr #24
 800ca04:	eb06 2690 	add.w	r6, r6, r0, lsr #10
 800ca08:	eb03 2396 	add.w	r3, r3, r6, lsr #10
 800ca0c:	f858 a02a 	ldr.w	sl, [r8, sl, lsl #2]
 800ca10:	9308      	str	r3, [sp, #32]
 800ca12:	eb05 2593 	add.w	r5, r5, r3, lsr #10
 800ca16:	9b01      	ldr	r3, [sp, #4]
 800ca18:	eb0a 2a95 	add.w	sl, sl, r5, lsr #10
 800ca1c:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 800ca20:	f3c3 0a09 	ubfx	sl, r3, #0, #10
 800ca24:	9b02      	ldr	r3, [sp, #8]
 800ca26:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800ca2a:	9302      	str	r3, [sp, #8]
 800ca2c:	9b08      	ldr	r3, [sp, #32]
 800ca2e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800ca32:	9308      	str	r3, [sp, #32]
 800ca34:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ca36:	f3c5 0509 	ubfx	r5, r5, #0, #10
 800ca3a:	950c      	str	r5, [sp, #48]	; 0x30
 800ca3c:	461d      	mov	r5, r3
 800ca3e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ca40:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 800ca44:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800ca48:	ea45 4303 	orr.w	r3, r5, r3, lsl #16
 800ca4c:	ea42 420e 	orr.w	r2, r2, lr, lsl #16
 800ca50:	9301      	str	r3, [sp, #4]
 800ca52:	9b02      	ldr	r3, [sp, #8]
 800ca54:	9202      	str	r2, [sp, #8]
 800ca56:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ca58:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800ca5a:	f3c7 0709 	ubfx	r7, r7, #0, #10
 800ca5e:	f3c0 0009 	ubfx	r0, r0, #0, #10
 800ca62:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 800ca66:	f3c1 0109 	ubfx	r1, r1, #0, #10
 800ca6a:	f3c2 0709 	ubfx	r7, r2, #0, #10
 800ca6e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800ca72:	ea47 4505 	orr.w	r5, r7, r5, lsl #16
 800ca76:	9b08      	ldr	r3, [sp, #32]
 800ca78:	9f01      	ldr	r7, [sp, #4]
 800ca7a:	f3cb 0b09 	ubfx	fp, fp, #0, #10
 800ca7e:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 800ca82:	f3c6 0609 	ubfx	r6, r6, #0, #10
 800ca86:	f3c4 0409 	ubfx	r4, r4, #0, #10
 800ca8a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800ca8e:	46be      	mov	lr, r7
 800ca90:	0a96      	lsrs	r6, r2, #10
 800ca92:	ea4a 4a0b 	orr.w	sl, sl, fp, lsl #16
 800ca96:	ea44 440c 	orr.w	r4, r4, ip, lsl #16
 800ca9a:	4f49      	ldr	r7, [pc, #292]	; (800cbc0 <D128_1CH_HTONS_VOL_HP+0x2c8>)
 800ca9c:	9a04      	ldr	r2, [sp, #16]
 800ca9e:	fb2e 2e07 	smlad	lr, lr, r7, r2
 800caa2:	4a48      	ldr	r2, [pc, #288]	; (800cbc4 <D128_1CH_HTONS_VOL_HP+0x2cc>)
 800caa4:	fb2a ee02 	smlad	lr, sl, r2, lr
 800caa8:	4a47      	ldr	r2, [pc, #284]	; (800cbc8 <D128_1CH_HTONS_VOL_HP+0x2d0>)
 800caaa:	fb21 ee02 	smlad	lr, r1, r2, lr
 800caae:	4a47      	ldr	r2, [pc, #284]	; (800cbcc <D128_1CH_HTONS_VOL_HP+0x2d4>)
 800cab0:	fb24 ee02 	smlad	lr, r4, r2, lr
 800cab4:	4a46      	ldr	r2, [pc, #280]	; (800cbd0 <D128_1CH_HTONS_VOL_HP+0x2d8>)
 800cab6:	9f02      	ldr	r7, [sp, #8]
 800cab8:	fb27 ee02 	smlad	lr, r7, r2, lr
 800cabc:	4a45      	ldr	r2, [pc, #276]	; (800cbd4 <D128_1CH_HTONS_VOL_HP+0x2dc>)
 800cabe:	fb20 ee02 	smlad	lr, r0, r2, lr
 800cac2:	4a45      	ldr	r2, [pc, #276]	; (800cbd8 <D128_1CH_HTONS_VOL_HP+0x2e0>)
 800cac4:	fb23 e702 	smlad	r7, r3, r2, lr
 800cac8:	f44f 3e80 	mov.w	lr, #65536	; 0x10000
 800cacc:	fb25 7e0e 	smlad	lr, r5, lr, r7
 800cad0:	9f01      	ldr	r7, [sp, #4]
 800cad2:	4a42      	ldr	r2, [pc, #264]	; (800cbdc <D128_1CH_HTONS_VOL_HP+0x2e4>)
 800cad4:	46bc      	mov	ip, r7
 800cad6:	9f05      	ldr	r7, [sp, #20]
 800cad8:	fb2c 7c02 	smlad	ip, ip, r2, r7
 800cadc:	4a40      	ldr	r2, [pc, #256]	; (800cbe0 <D128_1CH_HTONS_VOL_HP+0x2e8>)
 800cade:	fb2a cc02 	smlad	ip, sl, r2, ip
 800cae2:	4f40      	ldr	r7, [pc, #256]	; (800cbe4 <D128_1CH_HTONS_VOL_HP+0x2ec>)
 800cae4:	fb21 cc07 	smlad	ip, r1, r7, ip
 800cae8:	4f3f      	ldr	r7, [pc, #252]	; (800cbe8 <D128_1CH_HTONS_VOL_HP+0x2f0>)
 800caea:	fb24 cc07 	smlad	ip, r4, r7, ip
 800caee:	4f3f      	ldr	r7, [pc, #252]	; (800cbec <D128_1CH_HTONS_VOL_HP+0x2f4>)
 800caf0:	9a02      	ldr	r2, [sp, #8]
 800caf2:	fb22 cc07 	smlad	ip, r2, r7, ip
 800caf6:	4f3e      	ldr	r7, [pc, #248]	; (800cbf0 <D128_1CH_HTONS_VOL_HP+0x2f8>)
 800caf8:	fb20 cc07 	smlad	ip, r0, r7, ip
 800cafc:	4f3d      	ldr	r7, [pc, #244]	; (800cbf4 <D128_1CH_HTONS_VOL_HP+0x2fc>)
 800cafe:	fb23 c707 	smlad	r7, r3, r7, ip
 800cb02:	f8df c114 	ldr.w	ip, [pc, #276]	; 800cc18 <D128_1CH_HTONS_VOL_HP+0x320>
 800cb06:	fb25 720c 	smlad	r2, r5, ip, r7
 800cb0a:	f04f 0b01 	mov.w	fp, #1
 800cb0e:	9204      	str	r2, [sp, #16]
 800cb10:	9f01      	ldr	r7, [sp, #4]
 800cb12:	fb27 fb0b 	smuad	fp, r7, fp
 800cb16:	4f38      	ldr	r7, [pc, #224]	; (800cbf8 <D128_1CH_HTONS_VOL_HP+0x300>)
 800cb18:	fb2a ba07 	smlad	sl, sl, r7, fp
 800cb1c:	4f37      	ldr	r7, [pc, #220]	; (800cbfc <D128_1CH_HTONS_VOL_HP+0x304>)
 800cb1e:	fb21 aa07 	smlad	sl, r1, r7, sl
 800cb22:	4f37      	ldr	r7, [pc, #220]	; (800cc00 <D128_1CH_HTONS_VOL_HP+0x308>)
 800cb24:	fb24 aa07 	smlad	sl, r4, r7, sl
 800cb28:	4f36      	ldr	r7, [pc, #216]	; (800cc04 <D128_1CH_HTONS_VOL_HP+0x30c>)
 800cb2a:	9a02      	ldr	r2, [sp, #8]
 800cb2c:	fb22 a707 	smlad	r7, r2, r7, sl
 800cb30:	4a35      	ldr	r2, [pc, #212]	; (800cc08 <D128_1CH_HTONS_VOL_HP+0x310>)
 800cb32:	fb20 7702 	smlad	r7, r0, r2, r7
 800cb36:	4a35      	ldr	r2, [pc, #212]	; (800cc0c <D128_1CH_HTONS_VOL_HP+0x314>)
 800cb38:	fb23 7702 	smlad	r7, r3, r2, r7
 800cb3c:	4b34      	ldr	r3, [pc, #208]	; (800cc10 <D128_1CH_HTONS_VOL_HP+0x318>)
 800cb3e:	fb25 7303 	smlad	r3, r5, r3, r7
 800cb42:	9305      	str	r3, [sp, #20]
 800cb44:	9b03      	ldr	r3, [sp, #12]
 800cb46:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 800cb48:	f5ae 1e80 	sub.w	lr, lr, #1048576	; 0x100000
 800cb4c:	4473      	add	r3, lr
 800cb4e:	461a      	mov	r2, r3
 800cb50:	9b06      	ldr	r3, [sp, #24]
 800cb52:	f8cd e018 	str.w	lr, [sp, #24]
 800cb56:	1ad2      	subs	r2, r2, r3
 800cb58:	17d1      	asrs	r1, r2, #31
 800cb5a:	fba2 2304 	umull	r2, r3, r2, r4
 800cb5e:	fb04 3301 	mla	r3, r4, r1, r3
 800cb62:	f112 4200 	adds.w	r2, r2, #2147483648	; 0x80000000
 800cb66:	f143 0300 	adc.w	r3, r3, #0
 800cb6a:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 800cb6c:	021a      	lsls	r2, r3, #8
 800cb6e:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 800cb72:	2100      	movs	r1, #0
 800cb74:	fbc4 0102 	smlal	r0, r1, r4, r2
 800cb78:	108a      	asrs	r2, r1, #2
 800cb7a:	9907      	ldr	r1, [sp, #28]
 800cb7c:	f302 020f 	ssat	r2, #16, r2
 800cb80:	005b      	lsls	r3, r3, #1
 800cb82:	f821 2b02 	strh.w	r2, [r1], #2
 800cb86:	9303      	str	r3, [sp, #12]
 800cb88:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800cb8a:	9107      	str	r1, [sp, #28]
 800cb8c:	4299      	cmp	r1, r3
 800cb8e:	f109 0910 	add.w	r9, r9, #16
 800cb92:	f47f aed5 	bne.w	800c940 <D128_1CH_HTONS_VOL_HP+0x48>
 800cb96:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800cb98:	9905      	ldr	r1, [sp, #20]
 800cb9a:	6091      	str	r1, [r2, #8]
 800cb9c:	9904      	ldr	r1, [sp, #16]
 800cb9e:	60d1      	str	r1, [r2, #12]
 800cba0:	4613      	mov	r3, r2
 800cba2:	61d6      	str	r6, [r2, #28]
 800cba4:	9910      	ldr	r1, [sp, #64]	; 0x40
 800cba6:	9a03      	ldr	r2, [sp, #12]
 800cba8:	611a      	str	r2, [r3, #16]
 800cbaa:	2000      	movs	r0, #0
 800cbac:	f8c3 e014 	str.w	lr, [r3, #20]
 800cbb0:	6199      	str	r1, [r3, #24]
 800cbb2:	b013      	add	sp, #76	; 0x4c
 800cbb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cbb8:	f8dd e018 	ldr.w	lr, [sp, #24]
 800cbbc:	e7eb      	b.n	800cb96 <D128_1CH_HTONS_VOL_HP+0x29e>
 800cbbe:	bf00      	nop
 800cbc0:	00780069 	.word	0x00780069
 800cbc4:	005b004e 	.word	0x005b004e
 800cbc8:	00420037 	.word	0x00420037
 800cbcc:	002d0024 	.word	0x002d0024
 800cbd0:	001c0015 	.word	0x001c0015
 800cbd4:	000f000a 	.word	0x000f000a
 800cbd8:	00060003 	.word	0x00060003
 800cbdc:	00880096 	.word	0x00880096
 800cbe0:	00a200ac 	.word	0x00a200ac
 800cbe4:	00b400ba 	.word	0x00b400ba
 800cbe8:	00be00c0 	.word	0x00be00c0
 800cbec:	00c000be 	.word	0x00c000be
 800cbf0:	00ba00b4 	.word	0x00ba00b4
 800cbf4:	00ac00a2 	.word	0x00ac00a2
 800cbf8:	00030006 	.word	0x00030006
 800cbfc:	000a000f 	.word	0x000a000f
 800cc00:	0015001c 	.word	0x0015001c
 800cc04:	0024002d 	.word	0x0024002d
 800cc08:	00370042 	.word	0x00370042
 800cc0c:	004e005b 	.word	0x004e005b
 800cc10:	00690078 	.word	0x00690078
 800cc14:	20000000 	.word	0x20000000
 800cc18:	00960088 	.word	0x00960088

0800cc1c <PDM_Filter_Init>:
 800cc1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cc1e:	2240      	movs	r2, #64	; 0x40
 800cc20:	4604      	mov	r4, r0
 800cc22:	2100      	movs	r1, #0
 800cc24:	300c      	adds	r0, #12
 800cc26:	f000 f9ed 	bl	800d004 <memset>
 800cc2a:	493b      	ldr	r1, [pc, #236]	; (800cd18 <PDM_Filter_Init+0xfc>)
 800cc2c:	483b      	ldr	r0, [pc, #236]	; (800cd1c <PDM_Filter_Init+0x100>)
 800cc2e:	f000 f971 	bl	800cf14 <CRC_Lock>
 800cc32:	8822      	ldrh	r2, [r4, #0]
 800cc34:	8963      	ldrh	r3, [r4, #10]
 800cc36:	4938      	ldr	r1, [pc, #224]	; (800cd18 <PDM_Filter_Init+0xfc>)
 800cc38:	8925      	ldrh	r5, [r4, #8]
 800cc3a:	86a3      	strh	r3, [r4, #52]	; 0x34
 800cc3c:	2801      	cmp	r0, #1
 800cc3e:	f04f 0300 	mov.w	r3, #0
 800cc42:	bf18      	it	ne
 800cc44:	2100      	movne	r1, #0
 800cc46:	2a01      	cmp	r2, #1
 800cc48:	6461      	str	r1, [r4, #68]	; 0x44
 800cc4a:	86e5      	strh	r5, [r4, #54]	; 0x36
 800cc4c:	61a3      	str	r3, [r4, #24]
 800cc4e:	6123      	str	r3, [r4, #16]
 800cc50:	6163      	str	r3, [r4, #20]
 800cc52:	60e3      	str	r3, [r4, #12]
 800cc54:	6263      	str	r3, [r4, #36]	; 0x24
 800cc56:	61e3      	str	r3, [r4, #28]
 800cc58:	6223      	str	r3, [r4, #32]
 800cc5a:	6423      	str	r3, [r4, #64]	; 0x40
 800cc5c:	d918      	bls.n	800cc90 <PDM_Filter_Init+0x74>
 800cc5e:	2003      	movs	r0, #3
 800cc60:	2302      	movs	r3, #2
 800cc62:	8862      	ldrh	r2, [r4, #2]
 800cc64:	2a01      	cmp	r2, #1
 800cc66:	d91d      	bls.n	800cca4 <PDM_Filter_Init+0x88>
 800cc68:	2140      	movs	r1, #64	; 0x40
 800cc6a:	2300      	movs	r3, #0
 800cc6c:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800cc6e:	f1b2 1f01 	cmp.w	r2, #65537	; 0x10001
 800cc72:	6862      	ldr	r2, [r4, #4]
 800cc74:	bf04      	itt	eq
 800cc76:	6421      	streq	r1, [r4, #64]	; 0x40
 800cc78:	460b      	moveq	r3, r1
 800cc7a:	b11a      	cbz	r2, 800cc84 <PDM_Filter_Init+0x68>
 800cc7c:	f043 0310 	orr.w	r3, r3, #16
 800cc80:	6423      	str	r3, [r4, #64]	; 0x40
 800cc82:	62e2      	str	r2, [r4, #44]	; 0x2c
 800cc84:	2200      	movs	r2, #0
 800cc86:	8722      	strh	r2, [r4, #56]	; 0x38
 800cc88:	b908      	cbnz	r0, 800cc8e <PDM_Filter_Init+0x72>
 800cc8a:	3380      	adds	r3, #128	; 0x80
 800cc8c:	6423      	str	r3, [r4, #64]	; 0x40
 800cc8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cc90:	4d23      	ldr	r5, [pc, #140]	; (800cd20 <PDM_Filter_Init+0x104>)
 800cc92:	d010      	beq.n	800ccb6 <PDM_Filter_Init+0x9a>
 800cc94:	782a      	ldrb	r2, [r5, #0]
 800cc96:	2a01      	cmp	r2, #1
 800cc98:	d027      	beq.n	800ccea <PDM_Filter_Init+0xce>
 800cc9a:	8862      	ldrh	r2, [r4, #2]
 800cc9c:	2a01      	cmp	r2, #1
 800cc9e:	f04f 0001 	mov.w	r0, #1
 800cca2:	d8e1      	bhi.n	800cc68 <PDM_Filter_Init+0x4c>
 800cca4:	d001      	beq.n	800ccaa <PDM_Filter_Init+0x8e>
 800cca6:	4618      	mov	r0, r3
 800cca8:	e7de      	b.n	800cc68 <PDM_Filter_Init+0x4c>
 800ccaa:	2220      	movs	r2, #32
 800ccac:	4618      	mov	r0, r3
 800ccae:	6422      	str	r2, [r4, #64]	; 0x40
 800ccb0:	4613      	mov	r3, r2
 800ccb2:	2160      	movs	r1, #96	; 0x60
 800ccb4:	e7da      	b.n	800cc6c <PDM_Filter_Init+0x50>
 800ccb6:	7829      	ldrb	r1, [r5, #0]
 800ccb8:	2900      	cmp	r1, #0
 800ccba:	d1ee      	bne.n	800cc9a <PDM_Filter_Init+0x7e>
 800ccbc:	4919      	ldr	r1, [pc, #100]	; (800cd24 <PDM_Filter_Init+0x108>)
 800ccbe:	f8df e06c 	ldr.w	lr, [pc, #108]	; 800cd2c <PDM_Filter_Init+0x110>
 800ccc2:	4f19      	ldr	r7, [pc, #100]	; (800cd28 <PDM_Filter_Init+0x10c>)
 800ccc4:	f501 6680 	add.w	r6, r1, #1024	; 0x400
 800ccc8:	684a      	ldr	r2, [r1, #4]
 800ccca:	ea0e 5302 	and.w	r3, lr, r2, lsl #20
 800ccce:	ea02 0007 	and.w	r0, r2, r7
 800ccd2:	4303      	orrs	r3, r0
 800ccd4:	f3c2 5209 	ubfx	r2, r2, #20, #10
 800ccd8:	4413      	add	r3, r2
 800ccda:	f841 3f04 	str.w	r3, [r1, #4]!
 800ccde:	428e      	cmp	r6, r1
 800cce0:	d1f2      	bne.n	800ccc8 <PDM_Filter_Init+0xac>
 800cce2:	2001      	movs	r0, #1
 800cce4:	7028      	strb	r0, [r5, #0]
 800cce6:	2300      	movs	r3, #0
 800cce8:	e7bb      	b.n	800cc62 <PDM_Filter_Init+0x46>
 800ccea:	490e      	ldr	r1, [pc, #56]	; (800cd24 <PDM_Filter_Init+0x108>)
 800ccec:	f8df e03c 	ldr.w	lr, [pc, #60]	; 800cd2c <PDM_Filter_Init+0x110>
 800ccf0:	4f0d      	ldr	r7, [pc, #52]	; (800cd28 <PDM_Filter_Init+0x10c>)
 800ccf2:	f501 6680 	add.w	r6, r1, #1024	; 0x400
 800ccf6:	684a      	ldr	r2, [r1, #4]
 800ccf8:	ea0e 5302 	and.w	r3, lr, r2, lsl #20
 800ccfc:	ea02 0007 	and.w	r0, r2, r7
 800cd00:	4303      	orrs	r3, r0
 800cd02:	f3c2 5209 	ubfx	r2, r2, #20, #10
 800cd06:	4413      	add	r3, r2
 800cd08:	f841 3f04 	str.w	r3, [r1, #4]!
 800cd0c:	428e      	cmp	r6, r1
 800cd0e:	d1f2      	bne.n	800ccf6 <PDM_Filter_Init+0xda>
 800cd10:	2300      	movs	r3, #0
 800cd12:	702b      	strb	r3, [r5, #0]
 800cd14:	e7c1      	b.n	800cc9a <PDM_Filter_Init+0x7e>
 800cd16:	bf00      	nop
 800cd18:	b5e8b5cd 	.word	0xb5e8b5cd
 800cd1c:	f407a5c2 	.word	0xf407a5c2
 800cd20:	20000604 	.word	0x20000604
 800cd24:	1ffffffc 	.word	0x1ffffffc
 800cd28:	000ffc00 	.word	0x000ffc00
 800cd2c:	3ff00000 	.word	0x3ff00000

0800cd30 <PDM_Filter_setConfig>:
 800cd30:	4b66      	ldr	r3, [pc, #408]	; (800cecc <PDM_Filter_setConfig+0x19c>)
 800cd32:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800cd34:	429a      	cmp	r2, r3
 800cd36:	d001      	beq.n	800cd3c <PDM_Filter_setConfig+0xc>
 800cd38:	2004      	movs	r0, #4
 800cd3a:	4770      	bx	lr
 800cd3c:	b530      	push	{r4, r5, lr}
 800cd3e:	880a      	ldrh	r2, [r1, #0]
 800cd40:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800cd42:	ed2d 8b04 	vpush	{d8-d9}
 800cd46:	4604      	mov	r4, r0
 800cd48:	460d      	mov	r5, r1
 800cd4a:	1e51      	subs	r1, r2, #1
 800cd4c:	f423 7080 	bic.w	r0, r3, #256	; 0x100
 800cd50:	2906      	cmp	r1, #6
 800cd52:	b083      	sub	sp, #12
 800cd54:	6420      	str	r0, [r4, #64]	; 0x40
 800cd56:	d91a      	bls.n	800cd8e <PDM_Filter_setConfig+0x5e>
 800cd58:	2008      	movs	r0, #8
 800cd5a:	f9b4 1038 	ldrsh.w	r1, [r4, #56]	; 0x38
 800cd5e:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
 800cd62:	4299      	cmp	r1, r3
 800cd64:	d07e      	beq.n	800ce64 <PDM_Filter_setConfig+0x134>
 800cd66:	f113 0f0c 	cmn.w	r3, #12
 800cd6a:	da2a      	bge.n	800cdc2 <PDM_Filter_setConfig+0x92>
 800cd6c:	f64f 73f4 	movw	r3, #65524	; 0xfff4
 800cd70:	3040      	adds	r0, #64	; 0x40
 800cd72:	80ab      	strh	r3, [r5, #4]
 800cd74:	8622      	strh	r2, [r4, #48]	; 0x30
 800cd76:	886b      	ldrh	r3, [r5, #2]
 800cd78:	8663      	strh	r3, [r4, #50]	; 0x32
 800cd7a:	b920      	cbnz	r0, 800cd86 <PDM_Filter_setConfig+0x56>
 800cd7c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800cd7e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800cd82:	6423      	str	r3, [r4, #64]	; 0x40
 800cd84:	2000      	movs	r0, #0
 800cd86:	b003      	add	sp, #12
 800cd88:	ecbd 8b04 	vpop	{d8-d9}
 800cd8c:	bd30      	pop	{r4, r5, pc}
 800cd8e:	8e21      	ldrh	r1, [r4, #48]	; 0x30
 800cd90:	4291      	cmp	r1, r2
 800cd92:	d06c      	beq.n	800ce6e <PDM_Filter_setConfig+0x13e>
 800cd94:	f423 7387 	bic.w	r3, r3, #270	; 0x10e
 800cd98:	f023 0301 	bic.w	r3, r3, #1
 800cd9c:	4313      	orrs	r3, r2
 800cd9e:	f003 0170 	and.w	r1, r3, #112	; 0x70
 800cda2:	6423      	str	r3, [r4, #64]	; 0x40
 800cda4:	2970      	cmp	r1, #112	; 0x70
 800cda6:	f003 030f 	and.w	r3, r3, #15
 800cdaa:	f103 33ff 	add.w	r3, r3, #4294967295
 800cdae:	d066      	beq.n	800ce7e <PDM_Filter_setConfig+0x14e>
 800cdb0:	2b06      	cmp	r3, #6
 800cdb2:	f200 8089 	bhi.w	800cec8 <PDM_Filter_setConfig+0x198>
 800cdb6:	e8df f003 	tbb	[pc, r3]
 800cdba:	4f52      	.short	0x4f52
 800cdbc:	3d43494c 	.word	0x3d43494c
 800cdc0:	46          	.byte	0x46
 800cdc1:	00          	.byte	0x00
 800cdc2:	2b33      	cmp	r3, #51	; 0x33
 800cdc4:	dc32      	bgt.n	800ce2c <PDM_Filter_setConfig+0xfc>
 800cdc6:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800cdc8:	f002 020f 	and.w	r2, r2, #15
 800cdcc:	3a01      	subs	r2, #1
 800cdce:	2a06      	cmp	r2, #6
 800cdd0:	d872      	bhi.n	800ceb8 <PDM_Filter_setConfig+0x188>
 800cdd2:	493f      	ldr	r1, [pc, #252]	; (800ced0 <PDM_Filter_setConfig+0x1a0>)
 800cdd4:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 800cdd8:	ed92 9a00 	vldr	s18, [r2]
 800cddc:	ed92 8a07 	vldr	s16, [r2, #28]
 800cde0:	9001      	str	r0, [sp, #4]
 800cde2:	ee07 3a90 	vmov	s15, r3
 800cde6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800cdea:	eef3 0a04 	vmov.f32	s1, #52	; 0x41a00000  20.0
 800cdee:	eec7 0aa0 	vdiv.f32	s1, s15, s1
 800cdf2:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 800cdf6:	f000 f9ed 	bl	800d1d4 <powf>
 800cdfa:	eddf 0a36 	vldr	s1, [pc, #216]	; 800ced4 <PDM_Filter_setConfig+0x1a4>
 800cdfe:	eef0 8a40 	vmov.f32	s17, s0
 800ce02:	ee70 0ac9 	vsub.f32	s1, s1, s18
 800ce06:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 800ce0a:	f000 f9e3 	bl	800d1d4 <powf>
 800ce0e:	ee28 8a28 	vmul.f32	s16, s16, s17
 800ce12:	ee28 0a00 	vmul.f32	s0, s16, s0
 800ce16:	f000 f9b7 	bl	800d188 <roundf>
 800ce1a:	eebc 0ac0 	vcvt.u32.f32	s0, s0
 800ce1e:	88ab      	ldrh	r3, [r5, #4]
 800ce20:	882a      	ldrh	r2, [r5, #0]
 800ce22:	9801      	ldr	r0, [sp, #4]
 800ce24:	ed84 0a0f 	vstr	s0, [r4, #60]	; 0x3c
 800ce28:	8723      	strh	r3, [r4, #56]	; 0x38
 800ce2a:	e7a3      	b.n	800cd74 <PDM_Filter_setConfig+0x44>
 800ce2c:	2333      	movs	r3, #51	; 0x33
 800ce2e:	3040      	adds	r0, #64	; 0x40
 800ce30:	80ab      	strh	r3, [r5, #4]
 800ce32:	e79f      	b.n	800cd74 <PDM_Filter_setConfig+0x44>
 800ce34:	4b28      	ldr	r3, [pc, #160]	; (800ced8 <PDM_Filter_setConfig+0x1a8>)
 800ce36:	64a3      	str	r3, [r4, #72]	; 0x48
 800ce38:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
 800ce3c:	2000      	movs	r0, #0
 800ce3e:	e792      	b.n	800cd66 <PDM_Filter_setConfig+0x36>
 800ce40:	4b26      	ldr	r3, [pc, #152]	; (800cedc <PDM_Filter_setConfig+0x1ac>)
 800ce42:	64a3      	str	r3, [r4, #72]	; 0x48
 800ce44:	e7f8      	b.n	800ce38 <PDM_Filter_setConfig+0x108>
 800ce46:	4b26      	ldr	r3, [pc, #152]	; (800cee0 <PDM_Filter_setConfig+0x1b0>)
 800ce48:	64a3      	str	r3, [r4, #72]	; 0x48
 800ce4a:	e7f5      	b.n	800ce38 <PDM_Filter_setConfig+0x108>
 800ce4c:	4b25      	ldr	r3, [pc, #148]	; (800cee4 <PDM_Filter_setConfig+0x1b4>)
 800ce4e:	64a3      	str	r3, [r4, #72]	; 0x48
 800ce50:	e7f2      	b.n	800ce38 <PDM_Filter_setConfig+0x108>
 800ce52:	4b25      	ldr	r3, [pc, #148]	; (800cee8 <PDM_Filter_setConfig+0x1b8>)
 800ce54:	64a3      	str	r3, [r4, #72]	; 0x48
 800ce56:	e7ef      	b.n	800ce38 <PDM_Filter_setConfig+0x108>
 800ce58:	4b24      	ldr	r3, [pc, #144]	; (800ceec <PDM_Filter_setConfig+0x1bc>)
 800ce5a:	64a3      	str	r3, [r4, #72]	; 0x48
 800ce5c:	e7ec      	b.n	800ce38 <PDM_Filter_setConfig+0x108>
 800ce5e:	4b24      	ldr	r3, [pc, #144]	; (800cef0 <PDM_Filter_setConfig+0x1c0>)
 800ce60:	64a3      	str	r3, [r4, #72]	; 0x48
 800ce62:	e7e9      	b.n	800ce38 <PDM_Filter_setConfig+0x108>
 800ce64:	8e21      	ldrh	r1, [r4, #48]	; 0x30
 800ce66:	4291      	cmp	r1, r2
 800ce68:	f47f af7d 	bne.w	800cd66 <PDM_Filter_setConfig+0x36>
 800ce6c:	e783      	b.n	800cd76 <PDM_Filter_setConfig+0x46>
 800ce6e:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
 800ce72:	f9b4 1038 	ldrsh.w	r1, [r4, #56]	; 0x38
 800ce76:	4299      	cmp	r1, r3
 800ce78:	d023      	beq.n	800cec2 <PDM_Filter_setConfig+0x192>
 800ce7a:	2000      	movs	r0, #0
 800ce7c:	e773      	b.n	800cd66 <PDM_Filter_setConfig+0x36>
 800ce7e:	2b06      	cmp	r3, #6
 800ce80:	d822      	bhi.n	800cec8 <PDM_Filter_setConfig+0x198>
 800ce82:	e8df f003 	tbb	[pc, r3]
 800ce86:	1316      	.short	0x1316
 800ce88:	070a0d10 	.word	0x070a0d10
 800ce8c:	04          	.byte	0x04
 800ce8d:	00          	.byte	0x00
 800ce8e:	4b19      	ldr	r3, [pc, #100]	; (800cef4 <PDM_Filter_setConfig+0x1c4>)
 800ce90:	64a3      	str	r3, [r4, #72]	; 0x48
 800ce92:	e7d1      	b.n	800ce38 <PDM_Filter_setConfig+0x108>
 800ce94:	4b18      	ldr	r3, [pc, #96]	; (800cef8 <PDM_Filter_setConfig+0x1c8>)
 800ce96:	64a3      	str	r3, [r4, #72]	; 0x48
 800ce98:	e7ce      	b.n	800ce38 <PDM_Filter_setConfig+0x108>
 800ce9a:	4b18      	ldr	r3, [pc, #96]	; (800cefc <PDM_Filter_setConfig+0x1cc>)
 800ce9c:	64a3      	str	r3, [r4, #72]	; 0x48
 800ce9e:	e7cb      	b.n	800ce38 <PDM_Filter_setConfig+0x108>
 800cea0:	4b17      	ldr	r3, [pc, #92]	; (800cf00 <PDM_Filter_setConfig+0x1d0>)
 800cea2:	64a3      	str	r3, [r4, #72]	; 0x48
 800cea4:	e7c8      	b.n	800ce38 <PDM_Filter_setConfig+0x108>
 800cea6:	4b17      	ldr	r3, [pc, #92]	; (800cf04 <PDM_Filter_setConfig+0x1d4>)
 800cea8:	64a3      	str	r3, [r4, #72]	; 0x48
 800ceaa:	e7c5      	b.n	800ce38 <PDM_Filter_setConfig+0x108>
 800ceac:	4b16      	ldr	r3, [pc, #88]	; (800cf08 <PDM_Filter_setConfig+0x1d8>)
 800ceae:	64a3      	str	r3, [r4, #72]	; 0x48
 800ceb0:	e7c2      	b.n	800ce38 <PDM_Filter_setConfig+0x108>
 800ceb2:	4b16      	ldr	r3, [pc, #88]	; (800cf0c <PDM_Filter_setConfig+0x1dc>)
 800ceb4:	64a3      	str	r3, [r4, #72]	; 0x48
 800ceb6:	e7bf      	b.n	800ce38 <PDM_Filter_setConfig+0x108>
 800ceb8:	ed9f 8a15 	vldr	s16, [pc, #84]	; 800cf10 <PDM_Filter_setConfig+0x1e0>
 800cebc:	eeb0 9a48 	vmov.f32	s18, s16
 800cec0:	e78e      	b.n	800cde0 <PDM_Filter_setConfig+0xb0>
 800cec2:	886b      	ldrh	r3, [r5, #2]
 800cec4:	8663      	strh	r3, [r4, #50]	; 0x32
 800cec6:	e759      	b.n	800cd7c <PDM_Filter_setConfig+0x4c>
 800cec8:	2000      	movs	r0, #0
 800ceca:	e746      	b.n	800cd5a <PDM_Filter_setConfig+0x2a>
 800cecc:	b5e8b5cd 	.word	0xb5e8b5cd
 800ced0:	0800def0 	.word	0x0800def0
 800ced4:	42000000 	.word	0x42000000
 800ced8:	0800b29d 	.word	0x0800b29d
 800cedc:	0800b17d 	.word	0x0800b17d
 800cee0:	0800b42d 	.word	0x0800b42d
 800cee4:	0800bc71 	.word	0x0800bc71
 800cee8:	0800b9d1 	.word	0x0800b9d1
 800ceec:	0800b7b1 	.word	0x0800b7b1
 800cef0:	0800b5c5 	.word	0x0800b5c5
 800cef4:	0800c27d 	.word	0x0800c27d
 800cef8:	0800c145 	.word	0x0800c145
 800cefc:	0800c061 	.word	0x0800c061
 800cf00:	0800c8f9 	.word	0x0800c8f9
 800cf04:	0800c6e5 	.word	0x0800c6e5
 800cf08:	0800c52d 	.word	0x0800c52d
 800cf0c:	0800c3c1 	.word	0x0800c3c1
 800cf10:	00000000 	.word	0x00000000

0800cf14 <CRC_Lock>:
 800cf14:	4a17      	ldr	r2, [pc, #92]	; (800cf74 <CRC_Lock+0x60>)
 800cf16:	6813      	ldr	r3, [r2, #0]
 800cf18:	b410      	push	{r4}
 800cf1a:	f023 0301 	bic.w	r3, r3, #1
 800cf1e:	4c16      	ldr	r4, [pc, #88]	; (800cf78 <CRC_Lock+0x64>)
 800cf20:	6013      	str	r3, [r2, #0]
 800cf22:	6823      	ldr	r3, [r4, #0]
 800cf24:	b933      	cbnz	r3, 800cf34 <CRC_Lock+0x20>
 800cf26:	4b15      	ldr	r3, [pc, #84]	; (800cf7c <CRC_Lock+0x68>)
 800cf28:	681b      	ldr	r3, [r3, #0]
 800cf2a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800cf2e:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 800cf32:	d00f      	beq.n	800cf54 <CRC_Lock+0x40>
 800cf34:	4a12      	ldr	r2, [pc, #72]	; (800cf80 <CRC_Lock+0x6c>)
 800cf36:	2301      	movs	r3, #1
 800cf38:	6013      	str	r3, [r2, #0]
 800cf3a:	6813      	ldr	r3, [r2, #0]
 800cf3c:	2b00      	cmp	r3, #0
 800cf3e:	d1fc      	bne.n	800cf3a <CRC_Lock+0x26>
 800cf40:	4b10      	ldr	r3, [pc, #64]	; (800cf84 <CRC_Lock+0x70>)
 800cf42:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cf46:	6018      	str	r0, [r3, #0]
 800cf48:	6818      	ldr	r0, [r3, #0]
 800cf4a:	1a08      	subs	r0, r1, r0
 800cf4c:	fab0 f080 	clz	r0, r0
 800cf50:	0940      	lsrs	r0, r0, #5
 800cf52:	4770      	bx	lr
 800cf54:	4a0c      	ldr	r2, [pc, #48]	; (800cf88 <CRC_Lock+0x74>)
 800cf56:	2301      	movs	r3, #1
 800cf58:	6013      	str	r3, [r2, #0]
 800cf5a:	6813      	ldr	r3, [r2, #0]
 800cf5c:	2b00      	cmp	r3, #0
 800cf5e:	d1fc      	bne.n	800cf5a <CRC_Lock+0x46>
 800cf60:	4b0a      	ldr	r3, [pc, #40]	; (800cf8c <CRC_Lock+0x78>)
 800cf62:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cf66:	6018      	str	r0, [r3, #0]
 800cf68:	6818      	ldr	r0, [r3, #0]
 800cf6a:	1a40      	subs	r0, r0, r1
 800cf6c:	fab0 f080 	clz	r0, r0
 800cf70:	0940      	lsrs	r0, r0, #5
 800cf72:	4770      	bx	lr
 800cf74:	e0002000 	.word	0xe0002000
 800cf78:	e0042000 	.word	0xe0042000
 800cf7c:	5c001000 	.word	0x5c001000
 800cf80:	40023008 	.word	0x40023008
 800cf84:	40023000 	.word	0x40023000
 800cf88:	58024c08 	.word	0x58024c08
 800cf8c:	58024c00 	.word	0x58024c00

0800cf90 <__errno>:
 800cf90:	4b01      	ldr	r3, [pc, #4]	; (800cf98 <__errno+0x8>)
 800cf92:	6818      	ldr	r0, [r3, #0]
 800cf94:	4770      	bx	lr
 800cf96:	bf00      	nop
 800cf98:	20000580 	.word	0x20000580

0800cf9c <__libc_init_array>:
 800cf9c:	b570      	push	{r4, r5, r6, lr}
 800cf9e:	4e0d      	ldr	r6, [pc, #52]	; (800cfd4 <__libc_init_array+0x38>)
 800cfa0:	4c0d      	ldr	r4, [pc, #52]	; (800cfd8 <__libc_init_array+0x3c>)
 800cfa2:	1ba4      	subs	r4, r4, r6
 800cfa4:	10a4      	asrs	r4, r4, #2
 800cfa6:	2500      	movs	r5, #0
 800cfa8:	42a5      	cmp	r5, r4
 800cfaa:	d109      	bne.n	800cfc0 <__libc_init_array+0x24>
 800cfac:	4e0b      	ldr	r6, [pc, #44]	; (800cfdc <__libc_init_array+0x40>)
 800cfae:	4c0c      	ldr	r4, [pc, #48]	; (800cfe0 <__libc_init_array+0x44>)
 800cfb0:	f000 fe16 	bl	800dbe0 <_init>
 800cfb4:	1ba4      	subs	r4, r4, r6
 800cfb6:	10a4      	asrs	r4, r4, #2
 800cfb8:	2500      	movs	r5, #0
 800cfba:	42a5      	cmp	r5, r4
 800cfbc:	d105      	bne.n	800cfca <__libc_init_array+0x2e>
 800cfbe:	bd70      	pop	{r4, r5, r6, pc}
 800cfc0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800cfc4:	4798      	blx	r3
 800cfc6:	3501      	adds	r5, #1
 800cfc8:	e7ee      	b.n	800cfa8 <__libc_init_array+0xc>
 800cfca:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800cfce:	4798      	blx	r3
 800cfd0:	3501      	adds	r5, #1
 800cfd2:	e7f2      	b.n	800cfba <__libc_init_array+0x1e>
 800cfd4:	0800df78 	.word	0x0800df78
 800cfd8:	0800df78 	.word	0x0800df78
 800cfdc:	0800df78 	.word	0x0800df78
 800cfe0:	0800df7c 	.word	0x0800df7c

0800cfe4 <malloc>:
 800cfe4:	4b02      	ldr	r3, [pc, #8]	; (800cff0 <malloc+0xc>)
 800cfe6:	4601      	mov	r1, r0
 800cfe8:	6818      	ldr	r0, [r3, #0]
 800cfea:	f000 b861 	b.w	800d0b0 <_malloc_r>
 800cfee:	bf00      	nop
 800cff0:	20000580 	.word	0x20000580

0800cff4 <free>:
 800cff4:	4b02      	ldr	r3, [pc, #8]	; (800d000 <free+0xc>)
 800cff6:	4601      	mov	r1, r0
 800cff8:	6818      	ldr	r0, [r3, #0]
 800cffa:	f000 b80b 	b.w	800d014 <_free_r>
 800cffe:	bf00      	nop
 800d000:	20000580 	.word	0x20000580

0800d004 <memset>:
 800d004:	4402      	add	r2, r0
 800d006:	4603      	mov	r3, r0
 800d008:	4293      	cmp	r3, r2
 800d00a:	d100      	bne.n	800d00e <memset+0xa>
 800d00c:	4770      	bx	lr
 800d00e:	f803 1b01 	strb.w	r1, [r3], #1
 800d012:	e7f9      	b.n	800d008 <memset+0x4>

0800d014 <_free_r>:
 800d014:	b538      	push	{r3, r4, r5, lr}
 800d016:	4605      	mov	r5, r0
 800d018:	2900      	cmp	r1, #0
 800d01a:	d045      	beq.n	800d0a8 <_free_r+0x94>
 800d01c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d020:	1f0c      	subs	r4, r1, #4
 800d022:	2b00      	cmp	r3, #0
 800d024:	bfb8      	it	lt
 800d026:	18e4      	addlt	r4, r4, r3
 800d028:	f000 f8ac 	bl	800d184 <__malloc_lock>
 800d02c:	4a1f      	ldr	r2, [pc, #124]	; (800d0ac <_free_r+0x98>)
 800d02e:	6813      	ldr	r3, [r2, #0]
 800d030:	4610      	mov	r0, r2
 800d032:	b933      	cbnz	r3, 800d042 <_free_r+0x2e>
 800d034:	6063      	str	r3, [r4, #4]
 800d036:	6014      	str	r4, [r2, #0]
 800d038:	4628      	mov	r0, r5
 800d03a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d03e:	f000 b8a2 	b.w	800d186 <__malloc_unlock>
 800d042:	42a3      	cmp	r3, r4
 800d044:	d90c      	bls.n	800d060 <_free_r+0x4c>
 800d046:	6821      	ldr	r1, [r4, #0]
 800d048:	1862      	adds	r2, r4, r1
 800d04a:	4293      	cmp	r3, r2
 800d04c:	bf04      	itt	eq
 800d04e:	681a      	ldreq	r2, [r3, #0]
 800d050:	685b      	ldreq	r3, [r3, #4]
 800d052:	6063      	str	r3, [r4, #4]
 800d054:	bf04      	itt	eq
 800d056:	1852      	addeq	r2, r2, r1
 800d058:	6022      	streq	r2, [r4, #0]
 800d05a:	6004      	str	r4, [r0, #0]
 800d05c:	e7ec      	b.n	800d038 <_free_r+0x24>
 800d05e:	4613      	mov	r3, r2
 800d060:	685a      	ldr	r2, [r3, #4]
 800d062:	b10a      	cbz	r2, 800d068 <_free_r+0x54>
 800d064:	42a2      	cmp	r2, r4
 800d066:	d9fa      	bls.n	800d05e <_free_r+0x4a>
 800d068:	6819      	ldr	r1, [r3, #0]
 800d06a:	1858      	adds	r0, r3, r1
 800d06c:	42a0      	cmp	r0, r4
 800d06e:	d10b      	bne.n	800d088 <_free_r+0x74>
 800d070:	6820      	ldr	r0, [r4, #0]
 800d072:	4401      	add	r1, r0
 800d074:	1858      	adds	r0, r3, r1
 800d076:	4282      	cmp	r2, r0
 800d078:	6019      	str	r1, [r3, #0]
 800d07a:	d1dd      	bne.n	800d038 <_free_r+0x24>
 800d07c:	6810      	ldr	r0, [r2, #0]
 800d07e:	6852      	ldr	r2, [r2, #4]
 800d080:	605a      	str	r2, [r3, #4]
 800d082:	4401      	add	r1, r0
 800d084:	6019      	str	r1, [r3, #0]
 800d086:	e7d7      	b.n	800d038 <_free_r+0x24>
 800d088:	d902      	bls.n	800d090 <_free_r+0x7c>
 800d08a:	230c      	movs	r3, #12
 800d08c:	602b      	str	r3, [r5, #0]
 800d08e:	e7d3      	b.n	800d038 <_free_r+0x24>
 800d090:	6820      	ldr	r0, [r4, #0]
 800d092:	1821      	adds	r1, r4, r0
 800d094:	428a      	cmp	r2, r1
 800d096:	bf04      	itt	eq
 800d098:	6811      	ldreq	r1, [r2, #0]
 800d09a:	6852      	ldreq	r2, [r2, #4]
 800d09c:	6062      	str	r2, [r4, #4]
 800d09e:	bf04      	itt	eq
 800d0a0:	1809      	addeq	r1, r1, r0
 800d0a2:	6021      	streq	r1, [r4, #0]
 800d0a4:	605c      	str	r4, [r3, #4]
 800d0a6:	e7c7      	b.n	800d038 <_free_r+0x24>
 800d0a8:	bd38      	pop	{r3, r4, r5, pc}
 800d0aa:	bf00      	nop
 800d0ac:	20000610 	.word	0x20000610

0800d0b0 <_malloc_r>:
 800d0b0:	b570      	push	{r4, r5, r6, lr}
 800d0b2:	1ccd      	adds	r5, r1, #3
 800d0b4:	f025 0503 	bic.w	r5, r5, #3
 800d0b8:	3508      	adds	r5, #8
 800d0ba:	2d0c      	cmp	r5, #12
 800d0bc:	bf38      	it	cc
 800d0be:	250c      	movcc	r5, #12
 800d0c0:	2d00      	cmp	r5, #0
 800d0c2:	4606      	mov	r6, r0
 800d0c4:	db01      	blt.n	800d0ca <_malloc_r+0x1a>
 800d0c6:	42a9      	cmp	r1, r5
 800d0c8:	d903      	bls.n	800d0d2 <_malloc_r+0x22>
 800d0ca:	230c      	movs	r3, #12
 800d0cc:	6033      	str	r3, [r6, #0]
 800d0ce:	2000      	movs	r0, #0
 800d0d0:	bd70      	pop	{r4, r5, r6, pc}
 800d0d2:	f000 f857 	bl	800d184 <__malloc_lock>
 800d0d6:	4a21      	ldr	r2, [pc, #132]	; (800d15c <_malloc_r+0xac>)
 800d0d8:	6814      	ldr	r4, [r2, #0]
 800d0da:	4621      	mov	r1, r4
 800d0dc:	b991      	cbnz	r1, 800d104 <_malloc_r+0x54>
 800d0de:	4c20      	ldr	r4, [pc, #128]	; (800d160 <_malloc_r+0xb0>)
 800d0e0:	6823      	ldr	r3, [r4, #0]
 800d0e2:	b91b      	cbnz	r3, 800d0ec <_malloc_r+0x3c>
 800d0e4:	4630      	mov	r0, r6
 800d0e6:	f000 f83d 	bl	800d164 <_sbrk_r>
 800d0ea:	6020      	str	r0, [r4, #0]
 800d0ec:	4629      	mov	r1, r5
 800d0ee:	4630      	mov	r0, r6
 800d0f0:	f000 f838 	bl	800d164 <_sbrk_r>
 800d0f4:	1c43      	adds	r3, r0, #1
 800d0f6:	d124      	bne.n	800d142 <_malloc_r+0x92>
 800d0f8:	230c      	movs	r3, #12
 800d0fa:	6033      	str	r3, [r6, #0]
 800d0fc:	4630      	mov	r0, r6
 800d0fe:	f000 f842 	bl	800d186 <__malloc_unlock>
 800d102:	e7e4      	b.n	800d0ce <_malloc_r+0x1e>
 800d104:	680b      	ldr	r3, [r1, #0]
 800d106:	1b5b      	subs	r3, r3, r5
 800d108:	d418      	bmi.n	800d13c <_malloc_r+0x8c>
 800d10a:	2b0b      	cmp	r3, #11
 800d10c:	d90f      	bls.n	800d12e <_malloc_r+0x7e>
 800d10e:	600b      	str	r3, [r1, #0]
 800d110:	50cd      	str	r5, [r1, r3]
 800d112:	18cc      	adds	r4, r1, r3
 800d114:	4630      	mov	r0, r6
 800d116:	f000 f836 	bl	800d186 <__malloc_unlock>
 800d11a:	f104 000b 	add.w	r0, r4, #11
 800d11e:	1d23      	adds	r3, r4, #4
 800d120:	f020 0007 	bic.w	r0, r0, #7
 800d124:	1ac3      	subs	r3, r0, r3
 800d126:	d0d3      	beq.n	800d0d0 <_malloc_r+0x20>
 800d128:	425a      	negs	r2, r3
 800d12a:	50e2      	str	r2, [r4, r3]
 800d12c:	e7d0      	b.n	800d0d0 <_malloc_r+0x20>
 800d12e:	428c      	cmp	r4, r1
 800d130:	684b      	ldr	r3, [r1, #4]
 800d132:	bf16      	itet	ne
 800d134:	6063      	strne	r3, [r4, #4]
 800d136:	6013      	streq	r3, [r2, #0]
 800d138:	460c      	movne	r4, r1
 800d13a:	e7eb      	b.n	800d114 <_malloc_r+0x64>
 800d13c:	460c      	mov	r4, r1
 800d13e:	6849      	ldr	r1, [r1, #4]
 800d140:	e7cc      	b.n	800d0dc <_malloc_r+0x2c>
 800d142:	1cc4      	adds	r4, r0, #3
 800d144:	f024 0403 	bic.w	r4, r4, #3
 800d148:	42a0      	cmp	r0, r4
 800d14a:	d005      	beq.n	800d158 <_malloc_r+0xa8>
 800d14c:	1a21      	subs	r1, r4, r0
 800d14e:	4630      	mov	r0, r6
 800d150:	f000 f808 	bl	800d164 <_sbrk_r>
 800d154:	3001      	adds	r0, #1
 800d156:	d0cf      	beq.n	800d0f8 <_malloc_r+0x48>
 800d158:	6025      	str	r5, [r4, #0]
 800d15a:	e7db      	b.n	800d114 <_malloc_r+0x64>
 800d15c:	20000610 	.word	0x20000610
 800d160:	20000614 	.word	0x20000614

0800d164 <_sbrk_r>:
 800d164:	b538      	push	{r3, r4, r5, lr}
 800d166:	4c06      	ldr	r4, [pc, #24]	; (800d180 <_sbrk_r+0x1c>)
 800d168:	2300      	movs	r3, #0
 800d16a:	4605      	mov	r5, r0
 800d16c:	4608      	mov	r0, r1
 800d16e:	6023      	str	r3, [r4, #0]
 800d170:	f7f4 fb7c 	bl	800186c <_sbrk>
 800d174:	1c43      	adds	r3, r0, #1
 800d176:	d102      	bne.n	800d17e <_sbrk_r+0x1a>
 800d178:	6823      	ldr	r3, [r4, #0]
 800d17a:	b103      	cbz	r3, 800d17e <_sbrk_r+0x1a>
 800d17c:	602b      	str	r3, [r5, #0]
 800d17e:	bd38      	pop	{r3, r4, r5, pc}
 800d180:	2000218c 	.word	0x2000218c

0800d184 <__malloc_lock>:
 800d184:	4770      	bx	lr

0800d186 <__malloc_unlock>:
 800d186:	4770      	bx	lr

0800d188 <roundf>:
 800d188:	ee10 0a10 	vmov	r0, s0
 800d18c:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 800d190:	f1a3 027f 	sub.w	r2, r3, #127	; 0x7f
 800d194:	2a16      	cmp	r2, #22
 800d196:	dc15      	bgt.n	800d1c4 <roundf+0x3c>
 800d198:	2a00      	cmp	r2, #0
 800d19a:	da08      	bge.n	800d1ae <roundf+0x26>
 800d19c:	3201      	adds	r2, #1
 800d19e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800d1a2:	d101      	bne.n	800d1a8 <roundf+0x20>
 800d1a4:	f043 537e 	orr.w	r3, r3, #1065353216	; 0x3f800000
 800d1a8:	ee00 3a10 	vmov	s0, r3
 800d1ac:	4770      	bx	lr
 800d1ae:	4908      	ldr	r1, [pc, #32]	; (800d1d0 <roundf+0x48>)
 800d1b0:	4111      	asrs	r1, r2
 800d1b2:	4208      	tst	r0, r1
 800d1b4:	d0fa      	beq.n	800d1ac <roundf+0x24>
 800d1b6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800d1ba:	4113      	asrs	r3, r2
 800d1bc:	4403      	add	r3, r0
 800d1be:	ea23 0301 	bic.w	r3, r3, r1
 800d1c2:	e7f1      	b.n	800d1a8 <roundf+0x20>
 800d1c4:	2a80      	cmp	r2, #128	; 0x80
 800d1c6:	d1f1      	bne.n	800d1ac <roundf+0x24>
 800d1c8:	ee30 0a00 	vadd.f32	s0, s0, s0
 800d1cc:	4770      	bx	lr
 800d1ce:	bf00      	nop
 800d1d0:	007fffff 	.word	0x007fffff

0800d1d4 <powf>:
 800d1d4:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
 800d1d8:	ed2d 8b04 	vpush	{d8-d9}
 800d1dc:	4ca7      	ldr	r4, [pc, #668]	; (800d47c <powf+0x2a8>)
 800d1de:	b08a      	sub	sp, #40	; 0x28
 800d1e0:	eef0 8a40 	vmov.f32	s17, s0
 800d1e4:	eeb0 8a60 	vmov.f32	s16, s1
 800d1e8:	f000 f958 	bl	800d49c <__ieee754_powf>
 800d1ec:	f994 5000 	ldrsb.w	r5, [r4]
 800d1f0:	1c6b      	adds	r3, r5, #1
 800d1f2:	eeb0 9a40 	vmov.f32	s18, s0
 800d1f6:	4626      	mov	r6, r4
 800d1f8:	d05f      	beq.n	800d2ba <powf+0xe6>
 800d1fa:	eeb4 8a48 	vcmp.f32	s16, s16
 800d1fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d202:	d65a      	bvs.n	800d2ba <powf+0xe6>
 800d204:	eef4 8a68 	vcmp.f32	s17, s17
 800d208:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d20c:	d721      	bvc.n	800d252 <powf+0x7e>
 800d20e:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800d212:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d216:	d150      	bne.n	800d2ba <powf+0xe6>
 800d218:	2301      	movs	r3, #1
 800d21a:	9300      	str	r3, [sp, #0]
 800d21c:	4b98      	ldr	r3, [pc, #608]	; (800d480 <powf+0x2ac>)
 800d21e:	9301      	str	r3, [sp, #4]
 800d220:	ee18 0a90 	vmov	r0, s17
 800d224:	2300      	movs	r3, #0
 800d226:	9308      	str	r3, [sp, #32]
 800d228:	f7f3 f93a 	bl	80004a0 <__aeabi_f2d>
 800d22c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d230:	ee18 0a10 	vmov	r0, s16
 800d234:	f7f3 f934 	bl	80004a0 <__aeabi_f2d>
 800d238:	4b92      	ldr	r3, [pc, #584]	; (800d484 <powf+0x2b0>)
 800d23a:	2200      	movs	r2, #0
 800d23c:	2d02      	cmp	r5, #2
 800d23e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800d242:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800d246:	d032      	beq.n	800d2ae <powf+0xda>
 800d248:	4668      	mov	r0, sp
 800d24a:	f000 fbea 	bl	800da22 <matherr>
 800d24e:	bb40      	cbnz	r0, 800d2a2 <powf+0xce>
 800d250:	e065      	b.n	800d31e <powf+0x14a>
 800d252:	eddf 9a8d 	vldr	s19, [pc, #564]	; 800d488 <powf+0x2b4>
 800d256:	eef4 8a69 	vcmp.f32	s17, s19
 800d25a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d25e:	d163      	bne.n	800d328 <powf+0x154>
 800d260:	eeb4 8a69 	vcmp.f32	s16, s19
 800d264:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d268:	d12e      	bne.n	800d2c8 <powf+0xf4>
 800d26a:	2301      	movs	r3, #1
 800d26c:	9300      	str	r3, [sp, #0]
 800d26e:	4b84      	ldr	r3, [pc, #528]	; (800d480 <powf+0x2ac>)
 800d270:	9301      	str	r3, [sp, #4]
 800d272:	ee18 0a90 	vmov	r0, s17
 800d276:	2300      	movs	r3, #0
 800d278:	9308      	str	r3, [sp, #32]
 800d27a:	f7f3 f911 	bl	80004a0 <__aeabi_f2d>
 800d27e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d282:	ee18 0a10 	vmov	r0, s16
 800d286:	f7f3 f90b 	bl	80004a0 <__aeabi_f2d>
 800d28a:	2200      	movs	r2, #0
 800d28c:	2300      	movs	r3, #0
 800d28e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800d292:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800d296:	2d00      	cmp	r5, #0
 800d298:	d0d6      	beq.n	800d248 <powf+0x74>
 800d29a:	4b7a      	ldr	r3, [pc, #488]	; (800d484 <powf+0x2b0>)
 800d29c:	2200      	movs	r2, #0
 800d29e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800d2a2:	9b08      	ldr	r3, [sp, #32]
 800d2a4:	b11b      	cbz	r3, 800d2ae <powf+0xda>
 800d2a6:	f7ff fe73 	bl	800cf90 <__errno>
 800d2aa:	9b08      	ldr	r3, [sp, #32]
 800d2ac:	6003      	str	r3, [r0, #0]
 800d2ae:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d2b2:	f7f3 fb87 	bl	80009c4 <__aeabi_d2f>
 800d2b6:	ee09 0a10 	vmov	s18, r0
 800d2ba:	eeb0 0a49 	vmov.f32	s0, s18
 800d2be:	b00a      	add	sp, #40	; 0x28
 800d2c0:	ecbd 8b04 	vpop	{d8-d9}
 800d2c4:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 800d2c8:	eeb0 0a48 	vmov.f32	s0, s16
 800d2cc:	f000 fbb2 	bl	800da34 <finitef>
 800d2d0:	2800      	cmp	r0, #0
 800d2d2:	d0f2      	beq.n	800d2ba <powf+0xe6>
 800d2d4:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800d2d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d2dc:	d5ed      	bpl.n	800d2ba <powf+0xe6>
 800d2de:	2301      	movs	r3, #1
 800d2e0:	9300      	str	r3, [sp, #0]
 800d2e2:	4b67      	ldr	r3, [pc, #412]	; (800d480 <powf+0x2ac>)
 800d2e4:	9301      	str	r3, [sp, #4]
 800d2e6:	ee18 0a90 	vmov	r0, s17
 800d2ea:	2300      	movs	r3, #0
 800d2ec:	9308      	str	r3, [sp, #32]
 800d2ee:	f7f3 f8d7 	bl	80004a0 <__aeabi_f2d>
 800d2f2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d2f6:	ee18 0a10 	vmov	r0, s16
 800d2fa:	f7f3 f8d1 	bl	80004a0 <__aeabi_f2d>
 800d2fe:	f994 3000 	ldrsb.w	r3, [r4]
 800d302:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800d306:	b923      	cbnz	r3, 800d312 <powf+0x13e>
 800d308:	2200      	movs	r2, #0
 800d30a:	2300      	movs	r3, #0
 800d30c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800d310:	e79a      	b.n	800d248 <powf+0x74>
 800d312:	495e      	ldr	r1, [pc, #376]	; (800d48c <powf+0x2b8>)
 800d314:	2000      	movs	r0, #0
 800d316:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800d31a:	2b02      	cmp	r3, #2
 800d31c:	d194      	bne.n	800d248 <powf+0x74>
 800d31e:	f7ff fe37 	bl	800cf90 <__errno>
 800d322:	2321      	movs	r3, #33	; 0x21
 800d324:	6003      	str	r3, [r0, #0]
 800d326:	e7bc      	b.n	800d2a2 <powf+0xce>
 800d328:	f000 fb84 	bl	800da34 <finitef>
 800d32c:	4605      	mov	r5, r0
 800d32e:	2800      	cmp	r0, #0
 800d330:	d173      	bne.n	800d41a <powf+0x246>
 800d332:	eeb0 0a68 	vmov.f32	s0, s17
 800d336:	f000 fb7d 	bl	800da34 <finitef>
 800d33a:	2800      	cmp	r0, #0
 800d33c:	d06d      	beq.n	800d41a <powf+0x246>
 800d33e:	eeb0 0a48 	vmov.f32	s0, s16
 800d342:	f000 fb77 	bl	800da34 <finitef>
 800d346:	2800      	cmp	r0, #0
 800d348:	d067      	beq.n	800d41a <powf+0x246>
 800d34a:	ee18 0a90 	vmov	r0, s17
 800d34e:	f7f3 f8a7 	bl	80004a0 <__aeabi_f2d>
 800d352:	4680      	mov	r8, r0
 800d354:	ee18 0a10 	vmov	r0, s16
 800d358:	4689      	mov	r9, r1
 800d35a:	f7f3 f8a1 	bl	80004a0 <__aeabi_f2d>
 800d35e:	eeb4 9a49 	vcmp.f32	s18, s18
 800d362:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d366:	f994 4000 	ldrsb.w	r4, [r4]
 800d36a:	4b45      	ldr	r3, [pc, #276]	; (800d480 <powf+0x2ac>)
 800d36c:	d713      	bvc.n	800d396 <powf+0x1c2>
 800d36e:	2201      	movs	r2, #1
 800d370:	e9cd 2300 	strd	r2, r3, [sp]
 800d374:	9508      	str	r5, [sp, #32]
 800d376:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800d37a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800d37e:	2c00      	cmp	r4, #0
 800d380:	d0c2      	beq.n	800d308 <powf+0x134>
 800d382:	eec9 7aa9 	vdiv.f32	s15, s19, s19
 800d386:	ee17 0a90 	vmov	r0, s15
 800d38a:	f7f3 f889 	bl	80004a0 <__aeabi_f2d>
 800d38e:	2c02      	cmp	r4, #2
 800d390:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800d394:	e7c2      	b.n	800d31c <powf+0x148>
 800d396:	2203      	movs	r2, #3
 800d398:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800d39c:	e9cd 2300 	strd	r2, r3, [sp]
 800d3a0:	9508      	str	r5, [sp, #32]
 800d3a2:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800d3a6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800d3aa:	ee28 8a27 	vmul.f32	s16, s16, s15
 800d3ae:	b9fc      	cbnz	r4, 800d3f0 <powf+0x21c>
 800d3b0:	4b37      	ldr	r3, [pc, #220]	; (800d490 <powf+0x2bc>)
 800d3b2:	eef5 8ac0 	vcmpe.f32	s17, #0.0
 800d3b6:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800d3ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d3be:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800d3c2:	d553      	bpl.n	800d46c <powf+0x298>
 800d3c4:	eeb0 0a48 	vmov.f32	s0, s16
 800d3c8:	f000 fb44 	bl	800da54 <rintf>
 800d3cc:	eeb4 0a48 	vcmp.f32	s0, s16
 800d3d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d3d4:	d004      	beq.n	800d3e0 <powf+0x20c>
 800d3d6:	4b2f      	ldr	r3, [pc, #188]	; (800d494 <powf+0x2c0>)
 800d3d8:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800d3dc:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800d3e0:	f996 3000 	ldrsb.w	r3, [r6]
 800d3e4:	2b02      	cmp	r3, #2
 800d3e6:	d141      	bne.n	800d46c <powf+0x298>
 800d3e8:	f7ff fdd2 	bl	800cf90 <__errno>
 800d3ec:	2322      	movs	r3, #34	; 0x22
 800d3ee:	e799      	b.n	800d324 <powf+0x150>
 800d3f0:	4b29      	ldr	r3, [pc, #164]	; (800d498 <powf+0x2c4>)
 800d3f2:	eef5 8ac0 	vcmpe.f32	s17, #0.0
 800d3f6:	2200      	movs	r2, #0
 800d3f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d3fc:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800d400:	d5ee      	bpl.n	800d3e0 <powf+0x20c>
 800d402:	eeb0 0a48 	vmov.f32	s0, s16
 800d406:	f000 fb25 	bl	800da54 <rintf>
 800d40a:	eeb4 0a48 	vcmp.f32	s0, s16
 800d40e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d412:	d0e5      	beq.n	800d3e0 <powf+0x20c>
 800d414:	2200      	movs	r2, #0
 800d416:	4b1d      	ldr	r3, [pc, #116]	; (800d48c <powf+0x2b8>)
 800d418:	e7e0      	b.n	800d3dc <powf+0x208>
 800d41a:	eeb5 9a40 	vcmp.f32	s18, #0.0
 800d41e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d422:	f47f af4a 	bne.w	800d2ba <powf+0xe6>
 800d426:	eeb0 0a68 	vmov.f32	s0, s17
 800d42a:	f000 fb03 	bl	800da34 <finitef>
 800d42e:	2800      	cmp	r0, #0
 800d430:	f43f af43 	beq.w	800d2ba <powf+0xe6>
 800d434:	eeb0 0a48 	vmov.f32	s0, s16
 800d438:	f000 fafc 	bl	800da34 <finitef>
 800d43c:	2800      	cmp	r0, #0
 800d43e:	f43f af3c 	beq.w	800d2ba <powf+0xe6>
 800d442:	2304      	movs	r3, #4
 800d444:	9300      	str	r3, [sp, #0]
 800d446:	4b0e      	ldr	r3, [pc, #56]	; (800d480 <powf+0x2ac>)
 800d448:	9301      	str	r3, [sp, #4]
 800d44a:	ee18 0a90 	vmov	r0, s17
 800d44e:	2300      	movs	r3, #0
 800d450:	9308      	str	r3, [sp, #32]
 800d452:	f7f3 f825 	bl	80004a0 <__aeabi_f2d>
 800d456:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d45a:	ee18 0a10 	vmov	r0, s16
 800d45e:	f7f3 f81f 	bl	80004a0 <__aeabi_f2d>
 800d462:	2200      	movs	r2, #0
 800d464:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800d468:	2300      	movs	r3, #0
 800d46a:	e7b7      	b.n	800d3dc <powf+0x208>
 800d46c:	4668      	mov	r0, sp
 800d46e:	f000 fad8 	bl	800da22 <matherr>
 800d472:	2800      	cmp	r0, #0
 800d474:	f47f af15 	bne.w	800d2a2 <powf+0xce>
 800d478:	e7b6      	b.n	800d3e8 <powf+0x214>
 800d47a:	bf00      	nop
 800d47c:	200005e4 	.word	0x200005e4
 800d480:	0800df48 	.word	0x0800df48
 800d484:	3ff00000 	.word	0x3ff00000
 800d488:	00000000 	.word	0x00000000
 800d48c:	fff00000 	.word	0xfff00000
 800d490:	47efffff 	.word	0x47efffff
 800d494:	c7efffff 	.word	0xc7efffff
 800d498:	7ff00000 	.word	0x7ff00000

0800d49c <__ieee754_powf>:
 800d49c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d4a0:	ee10 5a90 	vmov	r5, s1
 800d4a4:	f035 4700 	bics.w	r7, r5, #2147483648	; 0x80000000
 800d4a8:	ed2d 8b02 	vpush	{d8}
 800d4ac:	eeb0 8a40 	vmov.f32	s16, s0
 800d4b0:	eef0 8a60 	vmov.f32	s17, s1
 800d4b4:	f000 8293 	beq.w	800d9de <__ieee754_powf+0x542>
 800d4b8:	ee10 8a10 	vmov	r8, s0
 800d4bc:	f028 4400 	bic.w	r4, r8, #2147483648	; 0x80000000
 800d4c0:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 800d4c4:	dc06      	bgt.n	800d4d4 <__ieee754_powf+0x38>
 800d4c6:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
 800d4ca:	dd0a      	ble.n	800d4e2 <__ieee754_powf+0x46>
 800d4cc:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 800d4d0:	f000 8285 	beq.w	800d9de <__ieee754_powf+0x542>
 800d4d4:	ecbd 8b02 	vpop	{d8}
 800d4d8:	48d9      	ldr	r0, [pc, #868]	; (800d840 <__ieee754_powf+0x3a4>)
 800d4da:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d4de:	f000 bab3 	b.w	800da48 <nanf>
 800d4e2:	f1b8 0f00 	cmp.w	r8, #0
 800d4e6:	da1d      	bge.n	800d524 <__ieee754_powf+0x88>
 800d4e8:	f1b7 4f97 	cmp.w	r7, #1266679808	; 0x4b800000
 800d4ec:	da2c      	bge.n	800d548 <__ieee754_powf+0xac>
 800d4ee:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 800d4f2:	db30      	blt.n	800d556 <__ieee754_powf+0xba>
 800d4f4:	15fb      	asrs	r3, r7, #23
 800d4f6:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 800d4fa:	fa47 f603 	asr.w	r6, r7, r3
 800d4fe:	fa06 f303 	lsl.w	r3, r6, r3
 800d502:	42bb      	cmp	r3, r7
 800d504:	d127      	bne.n	800d556 <__ieee754_powf+0xba>
 800d506:	f006 0601 	and.w	r6, r6, #1
 800d50a:	f1c6 0602 	rsb	r6, r6, #2
 800d50e:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 800d512:	d122      	bne.n	800d55a <__ieee754_powf+0xbe>
 800d514:	2d00      	cmp	r5, #0
 800d516:	f280 8268 	bge.w	800d9ea <__ieee754_powf+0x54e>
 800d51a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800d51e:	ee87 0a88 	vdiv.f32	s0, s15, s16
 800d522:	e00d      	b.n	800d540 <__ieee754_powf+0xa4>
 800d524:	2600      	movs	r6, #0
 800d526:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
 800d52a:	d1f0      	bne.n	800d50e <__ieee754_powf+0x72>
 800d52c:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 800d530:	f000 8255 	beq.w	800d9de <__ieee754_powf+0x542>
 800d534:	dd0a      	ble.n	800d54c <__ieee754_powf+0xb0>
 800d536:	2d00      	cmp	r5, #0
 800d538:	f280 8254 	bge.w	800d9e4 <__ieee754_powf+0x548>
 800d53c:	ed9f 0ac1 	vldr	s0, [pc, #772]	; 800d844 <__ieee754_powf+0x3a8>
 800d540:	ecbd 8b02 	vpop	{d8}
 800d544:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d548:	2602      	movs	r6, #2
 800d54a:	e7ec      	b.n	800d526 <__ieee754_powf+0x8a>
 800d54c:	2d00      	cmp	r5, #0
 800d54e:	daf5      	bge.n	800d53c <__ieee754_powf+0xa0>
 800d550:	eeb1 0a68 	vneg.f32	s0, s17
 800d554:	e7f4      	b.n	800d540 <__ieee754_powf+0xa4>
 800d556:	2600      	movs	r6, #0
 800d558:	e7d9      	b.n	800d50e <__ieee754_powf+0x72>
 800d55a:	f1b5 4f80 	cmp.w	r5, #1073741824	; 0x40000000
 800d55e:	d102      	bne.n	800d566 <__ieee754_powf+0xca>
 800d560:	ee28 0a08 	vmul.f32	s0, s16, s16
 800d564:	e7ec      	b.n	800d540 <__ieee754_powf+0xa4>
 800d566:	f1b5 5f7c 	cmp.w	r5, #1056964608	; 0x3f000000
 800d56a:	eeb0 0a48 	vmov.f32	s0, s16
 800d56e:	d108      	bne.n	800d582 <__ieee754_powf+0xe6>
 800d570:	f1b8 0f00 	cmp.w	r8, #0
 800d574:	db05      	blt.n	800d582 <__ieee754_powf+0xe6>
 800d576:	ecbd 8b02 	vpop	{d8}
 800d57a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d57e:	f000 ba4d 	b.w	800da1c <__ieee754_sqrtf>
 800d582:	f000 fa50 	bl	800da26 <fabsf>
 800d586:	b124      	cbz	r4, 800d592 <__ieee754_powf+0xf6>
 800d588:	f028 4340 	bic.w	r3, r8, #3221225472	; 0xc0000000
 800d58c:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 800d590:	d117      	bne.n	800d5c2 <__ieee754_powf+0x126>
 800d592:	2d00      	cmp	r5, #0
 800d594:	bfbc      	itt	lt
 800d596:	eef7 7a00 	vmovlt.f32	s15, #112	; 0x3f800000  1.0
 800d59a:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 800d59e:	f1b8 0f00 	cmp.w	r8, #0
 800d5a2:	dacd      	bge.n	800d540 <__ieee754_powf+0xa4>
 800d5a4:	f1a4 547e 	sub.w	r4, r4, #1065353216	; 0x3f800000
 800d5a8:	ea54 0306 	orrs.w	r3, r4, r6
 800d5ac:	d104      	bne.n	800d5b8 <__ieee754_powf+0x11c>
 800d5ae:	ee70 7a40 	vsub.f32	s15, s0, s0
 800d5b2:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 800d5b6:	e7c3      	b.n	800d540 <__ieee754_powf+0xa4>
 800d5b8:	2e01      	cmp	r6, #1
 800d5ba:	d1c1      	bne.n	800d540 <__ieee754_powf+0xa4>
 800d5bc:	eeb1 0a40 	vneg.f32	s0, s0
 800d5c0:	e7be      	b.n	800d540 <__ieee754_powf+0xa4>
 800d5c2:	ea4f 70d8 	mov.w	r0, r8, lsr #31
 800d5c6:	3801      	subs	r0, #1
 800d5c8:	ea56 0300 	orrs.w	r3, r6, r0
 800d5cc:	d104      	bne.n	800d5d8 <__ieee754_powf+0x13c>
 800d5ce:	ee38 8a48 	vsub.f32	s16, s16, s16
 800d5d2:	ee88 0a08 	vdiv.f32	s0, s16, s16
 800d5d6:	e7b3      	b.n	800d540 <__ieee754_powf+0xa4>
 800d5d8:	f1b7 4f9a 	cmp.w	r7, #1291845632	; 0x4d000000
 800d5dc:	dd6d      	ble.n	800d6ba <__ieee754_powf+0x21e>
 800d5de:	4b9a      	ldr	r3, [pc, #616]	; (800d848 <__ieee754_powf+0x3ac>)
 800d5e0:	429c      	cmp	r4, r3
 800d5e2:	dc06      	bgt.n	800d5f2 <__ieee754_powf+0x156>
 800d5e4:	2d00      	cmp	r5, #0
 800d5e6:	daa9      	bge.n	800d53c <__ieee754_powf+0xa0>
 800d5e8:	ed9f 0a98 	vldr	s0, [pc, #608]	; 800d84c <__ieee754_powf+0x3b0>
 800d5ec:	ee20 0a00 	vmul.f32	s0, s0, s0
 800d5f0:	e7a6      	b.n	800d540 <__ieee754_powf+0xa4>
 800d5f2:	4b97      	ldr	r3, [pc, #604]	; (800d850 <__ieee754_powf+0x3b4>)
 800d5f4:	429c      	cmp	r4, r3
 800d5f6:	dd02      	ble.n	800d5fe <__ieee754_powf+0x162>
 800d5f8:	2d00      	cmp	r5, #0
 800d5fa:	dcf5      	bgt.n	800d5e8 <__ieee754_powf+0x14c>
 800d5fc:	e79e      	b.n	800d53c <__ieee754_powf+0xa0>
 800d5fe:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800d602:	ee30 0a67 	vsub.f32	s0, s0, s15
 800d606:	ed9f 7a93 	vldr	s14, [pc, #588]	; 800d854 <__ieee754_powf+0x3b8>
 800d60a:	eef1 6a40 	vneg.f32	s13, s0
 800d60e:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 800d612:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800d616:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800d61a:	eee7 7a40 	vfms.f32	s15, s14, s0
 800d61e:	ee60 0a00 	vmul.f32	s1, s0, s0
 800d622:	ed9f 7a8d 	vldr	s14, [pc, #564]	; 800d858 <__ieee754_powf+0x3bc>
 800d626:	ee67 0aa0 	vmul.f32	s1, s15, s1
 800d62a:	eddf 7a8c 	vldr	s15, [pc, #560]	; 800d85c <__ieee754_powf+0x3c0>
 800d62e:	ee67 7ae0 	vnmul.f32	s15, s15, s1
 800d632:	eee0 7a07 	vfma.f32	s15, s0, s14
 800d636:	ed9f 7a8a 	vldr	s14, [pc, #552]	; 800d860 <__ieee754_powf+0x3c4>
 800d63a:	eeb0 6a67 	vmov.f32	s12, s15
 800d63e:	eea0 6a07 	vfma.f32	s12, s0, s14
 800d642:	ee16 3a10 	vmov	r3, s12
 800d646:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800d64a:	f023 030f 	bic.w	r3, r3, #15
 800d64e:	ee00 3a90 	vmov	s1, r3
 800d652:	eee6 0a87 	vfma.f32	s1, s13, s14
 800d656:	ee77 7ae0 	vsub.f32	s15, s15, s1
 800d65a:	f425 657f 	bic.w	r5, r5, #4080	; 0xff0
 800d65e:	f025 050f 	bic.w	r5, r5, #15
 800d662:	ee07 5a10 	vmov	s14, r5
 800d666:	ee67 0aa8 	vmul.f32	s1, s15, s17
 800d66a:	ee38 7ac7 	vsub.f32	s14, s17, s14
 800d66e:	ee07 3a90 	vmov	s15, r3
 800d672:	eee7 0a27 	vfma.f32	s1, s14, s15
 800d676:	3e01      	subs	r6, #1
 800d678:	ea56 0200 	orrs.w	r2, r6, r0
 800d67c:	ee07 5a10 	vmov	s14, r5
 800d680:	ee67 7a87 	vmul.f32	s15, s15, s14
 800d684:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 800d688:	ee30 7aa7 	vadd.f32	s14, s1, s15
 800d68c:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 800d690:	ee17 4a10 	vmov	r4, s14
 800d694:	bf08      	it	eq
 800d696:	eeb0 8a40 	vmoveq.f32	s16, s0
 800d69a:	2c00      	cmp	r4, #0
 800d69c:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800d6a0:	f340 8184 	ble.w	800d9ac <__ieee754_powf+0x510>
 800d6a4:	f1b3 4f86 	cmp.w	r3, #1124073472	; 0x43000000
 800d6a8:	f340 80fc 	ble.w	800d8a4 <__ieee754_powf+0x408>
 800d6ac:	eddf 7a67 	vldr	s15, [pc, #412]	; 800d84c <__ieee754_powf+0x3b0>
 800d6b0:	ee28 0a27 	vmul.f32	s0, s16, s15
 800d6b4:	ee20 0a27 	vmul.f32	s0, s0, s15
 800d6b8:	e742      	b.n	800d540 <__ieee754_powf+0xa4>
 800d6ba:	f5b4 0f00 	cmp.w	r4, #8388608	; 0x800000
 800d6be:	bfbf      	itttt	lt
 800d6c0:	eddf 7a68 	vldrlt	s15, [pc, #416]	; 800d864 <__ieee754_powf+0x3c8>
 800d6c4:	ee60 7a27 	vmullt.f32	s15, s0, s15
 800d6c8:	f06f 0217 	mvnlt.w	r2, #23
 800d6cc:	ee17 4a90 	vmovlt	r4, s15
 800d6d0:	ea4f 53e4 	mov.w	r3, r4, asr #23
 800d6d4:	bfa8      	it	ge
 800d6d6:	2200      	movge	r2, #0
 800d6d8:	3b7f      	subs	r3, #127	; 0x7f
 800d6da:	4413      	add	r3, r2
 800d6dc:	4a62      	ldr	r2, [pc, #392]	; (800d868 <__ieee754_powf+0x3cc>)
 800d6de:	f3c4 0416 	ubfx	r4, r4, #0, #23
 800d6e2:	4294      	cmp	r4, r2
 800d6e4:	f044 517e 	orr.w	r1, r4, #1065353216	; 0x3f800000
 800d6e8:	dd06      	ble.n	800d6f8 <__ieee754_powf+0x25c>
 800d6ea:	4a60      	ldr	r2, [pc, #384]	; (800d86c <__ieee754_powf+0x3d0>)
 800d6ec:	4294      	cmp	r4, r2
 800d6ee:	f340 80a5 	ble.w	800d83c <__ieee754_powf+0x3a0>
 800d6f2:	3301      	adds	r3, #1
 800d6f4:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 800d6f8:	2400      	movs	r4, #0
 800d6fa:	4a5d      	ldr	r2, [pc, #372]	; (800d870 <__ieee754_powf+0x3d4>)
 800d6fc:	00a7      	lsls	r7, r4, #2
 800d6fe:	443a      	add	r2, r7
 800d700:	ee07 1a90 	vmov	s15, r1
 800d704:	ed92 7a00 	vldr	s14, [r2]
 800d708:	4a5a      	ldr	r2, [pc, #360]	; (800d874 <__ieee754_powf+0x3d8>)
 800d70a:	ee37 6a27 	vadd.f32	s12, s14, s15
 800d70e:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 800d712:	eec5 6a06 	vdiv.f32	s13, s10, s12
 800d716:	1049      	asrs	r1, r1, #1
 800d718:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
 800d71c:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
 800d720:	eb01 5144 	add.w	r1, r1, r4, lsl #21
 800d724:	ee77 5ac7 	vsub.f32	s11, s15, s14
 800d728:	ee06 1a10 	vmov	s12, r1
 800d72c:	ee65 4aa6 	vmul.f32	s9, s11, s13
 800d730:	ee14 ca90 	vmov	ip, s9
 800d734:	ea02 0c0c 	and.w	ip, r2, ip
 800d738:	ee05 ca10 	vmov	s10, ip
 800d73c:	eeb1 4a45 	vneg.f32	s8, s10
 800d740:	eee4 5a06 	vfma.f32	s11, s8, s12
 800d744:	ee36 6a47 	vsub.f32	s12, s12, s14
 800d748:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 800d878 <__ieee754_powf+0x3dc>
 800d74c:	ee37 6ac6 	vsub.f32	s12, s15, s12
 800d750:	ee64 7aa4 	vmul.f32	s15, s9, s9
 800d754:	eee4 5a06 	vfma.f32	s11, s8, s12
 800d758:	ee67 3aa7 	vmul.f32	s7, s15, s15
 800d75c:	ee25 6aa6 	vmul.f32	s12, s11, s13
 800d760:	eddf 5a46 	vldr	s11, [pc, #280]	; 800d87c <__ieee754_powf+0x3e0>
 800d764:	eea7 7aa5 	vfma.f32	s14, s15, s11
 800d768:	eddf 5a45 	vldr	s11, [pc, #276]	; 800d880 <__ieee754_powf+0x3e4>
 800d76c:	eee7 5a27 	vfma.f32	s11, s14, s15
 800d770:	ed9f 7a38 	vldr	s14, [pc, #224]	; 800d854 <__ieee754_powf+0x3b8>
 800d774:	eea5 7aa7 	vfma.f32	s14, s11, s15
 800d778:	eddf 5a42 	vldr	s11, [pc, #264]	; 800d884 <__ieee754_powf+0x3e8>
 800d77c:	eee7 5a27 	vfma.f32	s11, s14, s15
 800d780:	ed9f 7a41 	vldr	s14, [pc, #260]	; 800d888 <__ieee754_powf+0x3ec>
 800d784:	ee75 6a24 	vadd.f32	s13, s10, s9
 800d788:	eea5 7aa7 	vfma.f32	s14, s11, s15
 800d78c:	ee66 6a86 	vmul.f32	s13, s13, s12
 800d790:	eef0 5a08 	vmov.f32	s11, #8	; 0x40400000  3.0
 800d794:	eef0 7a65 	vmov.f32	s15, s11
 800d798:	eee3 6a87 	vfma.f32	s13, s7, s14
 800d79c:	eee5 7a05 	vfma.f32	s15, s10, s10
 800d7a0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d7a4:	ee17 1a90 	vmov	r1, s15
 800d7a8:	4011      	ands	r1, r2
 800d7aa:	ee07 1a90 	vmov	s15, r1
 800d7ae:	ee37 7ae5 	vsub.f32	s14, s15, s11
 800d7b2:	eddf 5a36 	vldr	s11, [pc, #216]	; 800d88c <__ieee754_powf+0x3f0>
 800d7b6:	eea4 7a05 	vfma.f32	s14, s8, s10
 800d7ba:	ee36 7ac7 	vsub.f32	s14, s13, s14
 800d7be:	ee27 7a24 	vmul.f32	s14, s14, s9
 800d7c2:	eea7 7a86 	vfma.f32	s14, s15, s12
 800d7c6:	eeb0 6a47 	vmov.f32	s12, s14
 800d7ca:	eea5 6a27 	vfma.f32	s12, s10, s15
 800d7ce:	ee16 1a10 	vmov	r1, s12
 800d7d2:	4011      	ands	r1, r2
 800d7d4:	ee06 1a90 	vmov	s13, r1
 800d7d8:	eee4 6a27 	vfma.f32	s13, s8, s15
 800d7dc:	eddf 7a2c 	vldr	s15, [pc, #176]	; 800d890 <__ieee754_powf+0x3f4>
 800d7e0:	ee37 7a66 	vsub.f32	s14, s14, s13
 800d7e4:	ee06 1a10 	vmov	s12, r1
 800d7e8:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d7ec:	eddf 7a29 	vldr	s15, [pc, #164]	; 800d894 <__ieee754_powf+0x3f8>
 800d7f0:	4929      	ldr	r1, [pc, #164]	; (800d898 <__ieee754_powf+0x3fc>)
 800d7f2:	eea6 7a27 	vfma.f32	s14, s12, s15
 800d7f6:	4439      	add	r1, r7
 800d7f8:	edd1 7a00 	vldr	s15, [r1]
 800d7fc:	ee37 7a27 	vadd.f32	s14, s14, s15
 800d800:	ee07 3a90 	vmov	s15, r3
 800d804:	eef0 0a47 	vmov.f32	s1, s14
 800d808:	4b24      	ldr	r3, [pc, #144]	; (800d89c <__ieee754_powf+0x400>)
 800d80a:	eee6 0a25 	vfma.f32	s1, s12, s11
 800d80e:	443b      	add	r3, r7
 800d810:	ed93 5a00 	vldr	s10, [r3]
 800d814:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800d818:	ee70 0a85 	vadd.f32	s1, s1, s10
 800d81c:	ee70 7aa6 	vadd.f32	s15, s1, s13
 800d820:	ee17 3a90 	vmov	r3, s15
 800d824:	4013      	ands	r3, r2
 800d826:	ee07 3a90 	vmov	s15, r3
 800d82a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800d82e:	ee77 7ac5 	vsub.f32	s15, s15, s10
 800d832:	eee6 7a65 	vfms.f32	s15, s12, s11
 800d836:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d83a:	e70e      	b.n	800d65a <__ieee754_powf+0x1be>
 800d83c:	2401      	movs	r4, #1
 800d83e:	e75c      	b.n	800d6fa <__ieee754_powf+0x25e>
 800d840:	0800df4c 	.word	0x0800df4c
 800d844:	00000000 	.word	0x00000000
 800d848:	3f7ffff7 	.word	0x3f7ffff7
 800d84c:	7149f2ca 	.word	0x7149f2ca
 800d850:	3f800007 	.word	0x3f800007
 800d854:	3eaaaaab 	.word	0x3eaaaaab
 800d858:	36eca570 	.word	0x36eca570
 800d85c:	3fb8aa3b 	.word	0x3fb8aa3b
 800d860:	3fb8aa00 	.word	0x3fb8aa00
 800d864:	4b800000 	.word	0x4b800000
 800d868:	001cc471 	.word	0x001cc471
 800d86c:	005db3d6 	.word	0x005db3d6
 800d870:	0800df50 	.word	0x0800df50
 800d874:	fffff000 	.word	0xfffff000
 800d878:	3e6c3255 	.word	0x3e6c3255
 800d87c:	3e53f142 	.word	0x3e53f142
 800d880:	3e8ba305 	.word	0x3e8ba305
 800d884:	3edb6db7 	.word	0x3edb6db7
 800d888:	3f19999a 	.word	0x3f19999a
 800d88c:	3f763800 	.word	0x3f763800
 800d890:	3f76384f 	.word	0x3f76384f
 800d894:	369dc3a0 	.word	0x369dc3a0
 800d898:	0800df60 	.word	0x0800df60
 800d89c:	0800df58 	.word	0x0800df58
 800d8a0:	3338aa3c 	.word	0x3338aa3c
 800d8a4:	f040 8092 	bne.w	800d9cc <__ieee754_powf+0x530>
 800d8a8:	ed5f 6a03 	vldr	s13, [pc, #-12]	; 800d8a0 <__ieee754_powf+0x404>
 800d8ac:	ee37 7a67 	vsub.f32	s14, s14, s15
 800d8b0:	ee70 6aa6 	vadd.f32	s13, s1, s13
 800d8b4:	eef4 6ac7 	vcmpe.f32	s13, s14
 800d8b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d8bc:	f73f aef6 	bgt.w	800d6ac <__ieee754_powf+0x210>
 800d8c0:	15db      	asrs	r3, r3, #23
 800d8c2:	f1a3 007e 	sub.w	r0, r3, #126	; 0x7e
 800d8c6:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800d8ca:	4103      	asrs	r3, r0
 800d8cc:	4423      	add	r3, r4
 800d8ce:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800d8d2:	4947      	ldr	r1, [pc, #284]	; (800d9f0 <__ieee754_powf+0x554>)
 800d8d4:	3a7f      	subs	r2, #127	; 0x7f
 800d8d6:	4111      	asrs	r1, r2
 800d8d8:	ea23 0101 	bic.w	r1, r3, r1
 800d8dc:	f3c3 0016 	ubfx	r0, r3, #0, #23
 800d8e0:	ee07 1a10 	vmov	s14, r1
 800d8e4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800d8e8:	f1c2 0217 	rsb	r2, r2, #23
 800d8ec:	4110      	asrs	r0, r2
 800d8ee:	2c00      	cmp	r4, #0
 800d8f0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800d8f4:	bfb8      	it	lt
 800d8f6:	4240      	neglt	r0, r0
 800d8f8:	ee37 7aa0 	vadd.f32	s14, s15, s1
 800d8fc:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800d9f4 <__ieee754_powf+0x558>
 800d900:	ee17 3a10 	vmov	r3, s14
 800d904:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800d908:	f023 030f 	bic.w	r3, r3, #15
 800d90c:	ee07 3a10 	vmov	s14, r3
 800d910:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d914:	ee70 0ae7 	vsub.f32	s1, s1, s15
 800d918:	eddf 7a37 	vldr	s15, [pc, #220]	; 800d9f8 <__ieee754_powf+0x55c>
 800d91c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d920:	eee0 7aa6 	vfma.f32	s15, s1, s13
 800d924:	eddf 6a35 	vldr	s13, [pc, #212]	; 800d9fc <__ieee754_powf+0x560>
 800d928:	eeb0 0a67 	vmov.f32	s0, s15
 800d92c:	eea7 0a26 	vfma.f32	s0, s14, s13
 800d930:	eeb0 6a40 	vmov.f32	s12, s0
 800d934:	eea7 6a66 	vfms.f32	s12, s14, s13
 800d938:	ee20 7a00 	vmul.f32	s14, s0, s0
 800d93c:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800d940:	eddf 6a2f 	vldr	s13, [pc, #188]	; 800da00 <__ieee754_powf+0x564>
 800d944:	ed9f 6a2f 	vldr	s12, [pc, #188]	; 800da04 <__ieee754_powf+0x568>
 800d948:	eea7 6a26 	vfma.f32	s12, s14, s13
 800d94c:	eddf 6a2e 	vldr	s13, [pc, #184]	; 800da08 <__ieee754_powf+0x56c>
 800d950:	eee6 6a07 	vfma.f32	s13, s12, s14
 800d954:	ed9f 6a2d 	vldr	s12, [pc, #180]	; 800da0c <__ieee754_powf+0x570>
 800d958:	eea6 6a87 	vfma.f32	s12, s13, s14
 800d95c:	eddf 6a2c 	vldr	s13, [pc, #176]	; 800da10 <__ieee754_powf+0x574>
 800d960:	eee6 6a07 	vfma.f32	s13, s12, s14
 800d964:	eeb0 6a40 	vmov.f32	s12, s0
 800d968:	eea6 6ac7 	vfms.f32	s12, s13, s14
 800d96c:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800d970:	eeb0 7a46 	vmov.f32	s14, s12
 800d974:	ee77 6a66 	vsub.f32	s13, s14, s13
 800d978:	ee20 6a06 	vmul.f32	s12, s0, s12
 800d97c:	eee0 7a27 	vfma.f32	s15, s0, s15
 800d980:	ee86 7a26 	vdiv.f32	s14, s12, s13
 800d984:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d988:	ee37 0ac0 	vsub.f32	s0, s15, s0
 800d98c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800d990:	ee37 0ac0 	vsub.f32	s0, s15, s0
 800d994:	ee10 3a10 	vmov	r3, s0
 800d998:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 800d99c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800d9a0:	da1a      	bge.n	800d9d8 <__ieee754_powf+0x53c>
 800d9a2:	f000 f8b1 	bl	800db08 <scalbnf>
 800d9a6:	ee20 0a08 	vmul.f32	s0, s0, s16
 800d9aa:	e5c9      	b.n	800d540 <__ieee754_powf+0xa4>
 800d9ac:	4a19      	ldr	r2, [pc, #100]	; (800da14 <__ieee754_powf+0x578>)
 800d9ae:	4293      	cmp	r3, r2
 800d9b0:	dd02      	ble.n	800d9b8 <__ieee754_powf+0x51c>
 800d9b2:	eddf 7a19 	vldr	s15, [pc, #100]	; 800da18 <__ieee754_powf+0x57c>
 800d9b6:	e67b      	b.n	800d6b0 <__ieee754_powf+0x214>
 800d9b8:	d108      	bne.n	800d9cc <__ieee754_powf+0x530>
 800d9ba:	ee37 7a67 	vsub.f32	s14, s14, s15
 800d9be:	eeb4 7ae0 	vcmpe.f32	s14, s1
 800d9c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d9c6:	f6ff af7b 	blt.w	800d8c0 <__ieee754_powf+0x424>
 800d9ca:	e7f2      	b.n	800d9b2 <__ieee754_powf+0x516>
 800d9cc:	f1b3 5f7c 	cmp.w	r3, #1056964608	; 0x3f000000
 800d9d0:	f73f af76 	bgt.w	800d8c0 <__ieee754_powf+0x424>
 800d9d4:	2000      	movs	r0, #0
 800d9d6:	e78f      	b.n	800d8f8 <__ieee754_powf+0x45c>
 800d9d8:	ee00 3a10 	vmov	s0, r3
 800d9dc:	e7e3      	b.n	800d9a6 <__ieee754_powf+0x50a>
 800d9de:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800d9e2:	e5ad      	b.n	800d540 <__ieee754_powf+0xa4>
 800d9e4:	eeb0 0a68 	vmov.f32	s0, s17
 800d9e8:	e5aa      	b.n	800d540 <__ieee754_powf+0xa4>
 800d9ea:	eeb0 0a48 	vmov.f32	s0, s16
 800d9ee:	e5a7      	b.n	800d540 <__ieee754_powf+0xa4>
 800d9f0:	007fffff 	.word	0x007fffff
 800d9f4:	3f317218 	.word	0x3f317218
 800d9f8:	35bfbe8c 	.word	0x35bfbe8c
 800d9fc:	3f317200 	.word	0x3f317200
 800da00:	3331bb4c 	.word	0x3331bb4c
 800da04:	b5ddea0e 	.word	0xb5ddea0e
 800da08:	388ab355 	.word	0x388ab355
 800da0c:	bb360b61 	.word	0xbb360b61
 800da10:	3e2aaaab 	.word	0x3e2aaaab
 800da14:	43160000 	.word	0x43160000
 800da18:	0da24260 	.word	0x0da24260

0800da1c <__ieee754_sqrtf>:
 800da1c:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800da20:	4770      	bx	lr

0800da22 <matherr>:
 800da22:	2000      	movs	r0, #0
 800da24:	4770      	bx	lr

0800da26 <fabsf>:
 800da26:	ee10 3a10 	vmov	r3, s0
 800da2a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800da2e:	ee00 3a10 	vmov	s0, r3
 800da32:	4770      	bx	lr

0800da34 <finitef>:
 800da34:	ee10 3a10 	vmov	r3, s0
 800da38:	f023 4000 	bic.w	r0, r3, #2147483648	; 0x80000000
 800da3c:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 800da40:	bfac      	ite	ge
 800da42:	2000      	movge	r0, #0
 800da44:	2001      	movlt	r0, #1
 800da46:	4770      	bx	lr

0800da48 <nanf>:
 800da48:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800da50 <nanf+0x8>
 800da4c:	4770      	bx	lr
 800da4e:	bf00      	nop
 800da50:	7fc00000 	.word	0x7fc00000

0800da54 <rintf>:
 800da54:	b513      	push	{r0, r1, r4, lr}
 800da56:	ee10 1a10 	vmov	r1, s0
 800da5a:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800da5e:	0ddc      	lsrs	r4, r3, #23
 800da60:	3c7f      	subs	r4, #127	; 0x7f
 800da62:	2c16      	cmp	r4, #22
 800da64:	dc46      	bgt.n	800daf4 <rintf+0xa0>
 800da66:	b32b      	cbz	r3, 800dab4 <rintf+0x60>
 800da68:	2c00      	cmp	r4, #0
 800da6a:	ee10 2a10 	vmov	r2, s0
 800da6e:	ea4f 70d1 	mov.w	r0, r1, lsr #31
 800da72:	da21      	bge.n	800dab8 <rintf+0x64>
 800da74:	f3c1 0316 	ubfx	r3, r1, #0, #23
 800da78:	425b      	negs	r3, r3
 800da7a:	4a21      	ldr	r2, [pc, #132]	; (800db00 <rintf+0xac>)
 800da7c:	0a5b      	lsrs	r3, r3, #9
 800da7e:	0d09      	lsrs	r1, r1, #20
 800da80:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800da84:	0509      	lsls	r1, r1, #20
 800da86:	430b      	orrs	r3, r1
 800da88:	eb02 0280 	add.w	r2, r2, r0, lsl #2
 800da8c:	ee07 3a90 	vmov	s15, r3
 800da90:	edd2 6a00 	vldr	s13, [r2]
 800da94:	ee36 7aa7 	vadd.f32	s14, s13, s15
 800da98:	ed8d 7a01 	vstr	s14, [sp, #4]
 800da9c:	eddd 7a01 	vldr	s15, [sp, #4]
 800daa0:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800daa4:	ee17 3a90 	vmov	r3, s15
 800daa8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800daac:	ea43 73c0 	orr.w	r3, r3, r0, lsl #31
 800dab0:	ee00 3a10 	vmov	s0, r3
 800dab4:	b002      	add	sp, #8
 800dab6:	bd10      	pop	{r4, pc}
 800dab8:	4b12      	ldr	r3, [pc, #72]	; (800db04 <rintf+0xb0>)
 800daba:	4123      	asrs	r3, r4
 800dabc:	4219      	tst	r1, r3
 800dabe:	d0f9      	beq.n	800dab4 <rintf+0x60>
 800dac0:	085b      	lsrs	r3, r3, #1
 800dac2:	4219      	tst	r1, r3
 800dac4:	d006      	beq.n	800dad4 <rintf+0x80>
 800dac6:	ea21 0203 	bic.w	r2, r1, r3
 800daca:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800dace:	fa43 f404 	asr.w	r4, r3, r4
 800dad2:	4322      	orrs	r2, r4
 800dad4:	4b0a      	ldr	r3, [pc, #40]	; (800db00 <rintf+0xac>)
 800dad6:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800dada:	ed90 7a00 	vldr	s14, [r0]
 800dade:	ee07 2a90 	vmov	s15, r2
 800dae2:	ee77 7a27 	vadd.f32	s15, s14, s15
 800dae6:	edcd 7a01 	vstr	s15, [sp, #4]
 800daea:	ed9d 0a01 	vldr	s0, [sp, #4]
 800daee:	ee30 0a47 	vsub.f32	s0, s0, s14
 800daf2:	e7df      	b.n	800dab4 <rintf+0x60>
 800daf4:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800daf8:	d3dc      	bcc.n	800dab4 <rintf+0x60>
 800dafa:	ee30 0a00 	vadd.f32	s0, s0, s0
 800dafe:	e7d9      	b.n	800dab4 <rintf+0x60>
 800db00:	0800df68 	.word	0x0800df68
 800db04:	007fffff 	.word	0x007fffff

0800db08 <scalbnf>:
 800db08:	b508      	push	{r3, lr}
 800db0a:	ee10 2a10 	vmov	r2, s0
 800db0e:	f032 4300 	bics.w	r3, r2, #2147483648	; 0x80000000
 800db12:	ed2d 8b02 	vpush	{d8}
 800db16:	eef0 0a40 	vmov.f32	s1, s0
 800db1a:	d004      	beq.n	800db26 <scalbnf+0x1e>
 800db1c:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800db20:	d306      	bcc.n	800db30 <scalbnf+0x28>
 800db22:	ee70 0a00 	vadd.f32	s1, s0, s0
 800db26:	ecbd 8b02 	vpop	{d8}
 800db2a:	eeb0 0a60 	vmov.f32	s0, s1
 800db2e:	bd08      	pop	{r3, pc}
 800db30:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800db34:	d21c      	bcs.n	800db70 <scalbnf+0x68>
 800db36:	4b1f      	ldr	r3, [pc, #124]	; (800dbb4 <scalbnf+0xac>)
 800db38:	eddf 7a1f 	vldr	s15, [pc, #124]	; 800dbb8 <scalbnf+0xb0>
 800db3c:	4298      	cmp	r0, r3
 800db3e:	ee60 0a27 	vmul.f32	s1, s0, s15
 800db42:	db10      	blt.n	800db66 <scalbnf+0x5e>
 800db44:	ee10 2a90 	vmov	r2, s1
 800db48:	f3c2 53c7 	ubfx	r3, r2, #23, #8
 800db4c:	3b19      	subs	r3, #25
 800db4e:	4403      	add	r3, r0
 800db50:	2bfe      	cmp	r3, #254	; 0xfe
 800db52:	dd0f      	ble.n	800db74 <scalbnf+0x6c>
 800db54:	ed9f 8a19 	vldr	s16, [pc, #100]	; 800dbbc <scalbnf+0xb4>
 800db58:	eeb0 0a48 	vmov.f32	s0, s16
 800db5c:	f000 f834 	bl	800dbc8 <copysignf>
 800db60:	ee60 0a08 	vmul.f32	s1, s0, s16
 800db64:	e7df      	b.n	800db26 <scalbnf+0x1e>
 800db66:	eddf 7a16 	vldr	s15, [pc, #88]	; 800dbc0 <scalbnf+0xb8>
 800db6a:	ee60 0aa7 	vmul.f32	s1, s1, s15
 800db6e:	e7da      	b.n	800db26 <scalbnf+0x1e>
 800db70:	0ddb      	lsrs	r3, r3, #23
 800db72:	e7ec      	b.n	800db4e <scalbnf+0x46>
 800db74:	2b00      	cmp	r3, #0
 800db76:	dd06      	ble.n	800db86 <scalbnf+0x7e>
 800db78:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 800db7c:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 800db80:	ee00 3a90 	vmov	s1, r3
 800db84:	e7cf      	b.n	800db26 <scalbnf+0x1e>
 800db86:	f113 0f16 	cmn.w	r3, #22
 800db8a:	da06      	bge.n	800db9a <scalbnf+0x92>
 800db8c:	f24c 3350 	movw	r3, #50000	; 0xc350
 800db90:	4298      	cmp	r0, r3
 800db92:	dcdf      	bgt.n	800db54 <scalbnf+0x4c>
 800db94:	ed9f 8a0a 	vldr	s16, [pc, #40]	; 800dbc0 <scalbnf+0xb8>
 800db98:	e7de      	b.n	800db58 <scalbnf+0x50>
 800db9a:	3319      	adds	r3, #25
 800db9c:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 800dba0:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 800dba4:	eddf 7a07 	vldr	s15, [pc, #28]	; 800dbc4 <scalbnf+0xbc>
 800dba8:	ee07 3a10 	vmov	s14, r3
 800dbac:	ee67 0a27 	vmul.f32	s1, s14, s15
 800dbb0:	e7b9      	b.n	800db26 <scalbnf+0x1e>
 800dbb2:	bf00      	nop
 800dbb4:	ffff3cb0 	.word	0xffff3cb0
 800dbb8:	4c000000 	.word	0x4c000000
 800dbbc:	7149f2ca 	.word	0x7149f2ca
 800dbc0:	0da24260 	.word	0x0da24260
 800dbc4:	33000000 	.word	0x33000000

0800dbc8 <copysignf>:
 800dbc8:	ee10 3a10 	vmov	r3, s0
 800dbcc:	ee10 2a90 	vmov	r2, s1
 800dbd0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800dbd4:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800dbd8:	4313      	orrs	r3, r2
 800dbda:	ee00 3a10 	vmov	s0, r3
 800dbde:	4770      	bx	lr

0800dbe0 <_init>:
 800dbe0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dbe2:	bf00      	nop
 800dbe4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dbe6:	bc08      	pop	{r3}
 800dbe8:	469e      	mov	lr, r3
 800dbea:	4770      	bx	lr

0800dbec <_fini>:
 800dbec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dbee:	bf00      	nop
 800dbf0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dbf2:	bc08      	pop	{r3}
 800dbf4:	469e      	mov	lr, r3
 800dbf6:	4770      	bx	lr

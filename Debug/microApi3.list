
microApi3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000fb44  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000404  0800fcdc  0800fcdc  0001fcdc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080100e0  080100e0  000305e8  2**0
                  CONTENTS
  4 .ARM          00000008  080100e0  080100e0  000200e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080100e8  080100e8  000305e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080100e8  080100e8  000200e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080100ec  080100ec  000200ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000005e8  20000000  080100f0  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000046c4  200005e8  080106d8  000305e8  2**2
                  ALLOC
 10 ._user_heap_stack 00006004  20004cac  080106d8  00034cac  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000305e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00022581  00000000  00000000  00030618  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00004d93  00000000  00000000  00052b99  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001978  00000000  00000000  00057930  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001728  00000000  00000000  000592a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001cf20  00000000  00000000  0005a9d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001d851  00000000  00000000  000778f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00096806  00000000  00000000  00095141  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      000000fa  00000000  00000000  0012b947  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006e58  00000000  00000000  0012ba44  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	200005e8 	.word	0x200005e8
 80001b4:	00000000 	.word	0x00000000
 80001b8:	0800fcc4 	.word	0x0800fcc4

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	200005ec 	.word	0x200005ec
 80001d4:	0800fcc4 	.word	0x0800fcc4

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000316:	f1a4 0401 	sub.w	r4, r4, #1
 800031a:	d1e9      	bne.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__gedf2>:
 8000974:	f04f 3cff 	mov.w	ip, #4294967295
 8000978:	e006      	b.n	8000988 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__ledf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	e002      	b.n	8000988 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__cmpdf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	f84d cd04 	str.w	ip, [sp, #-4]!
 800098c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000990:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000994:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800099e:	d01b      	beq.n	80009d8 <__cmpdf2+0x54>
 80009a0:	b001      	add	sp, #4
 80009a2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009a6:	bf0c      	ite	eq
 80009a8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ac:	ea91 0f03 	teqne	r1, r3
 80009b0:	bf02      	ittt	eq
 80009b2:	ea90 0f02 	teqeq	r0, r2
 80009b6:	2000      	moveq	r0, #0
 80009b8:	4770      	bxeq	lr
 80009ba:	f110 0f00 	cmn.w	r0, #0
 80009be:	ea91 0f03 	teq	r1, r3
 80009c2:	bf58      	it	pl
 80009c4:	4299      	cmppl	r1, r3
 80009c6:	bf08      	it	eq
 80009c8:	4290      	cmpeq	r0, r2
 80009ca:	bf2c      	ite	cs
 80009cc:	17d8      	asrcs	r0, r3, #31
 80009ce:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009d2:	f040 0001 	orr.w	r0, r0, #1
 80009d6:	4770      	bx	lr
 80009d8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d102      	bne.n	80009e8 <__cmpdf2+0x64>
 80009e2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009e6:	d107      	bne.n	80009f8 <__cmpdf2+0x74>
 80009e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d1d6      	bne.n	80009a0 <__cmpdf2+0x1c>
 80009f2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009f6:	d0d3      	beq.n	80009a0 <__cmpdf2+0x1c>
 80009f8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdrcmple>:
 8000a00:	4684      	mov	ip, r0
 8000a02:	4610      	mov	r0, r2
 8000a04:	4662      	mov	r2, ip
 8000a06:	468c      	mov	ip, r1
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4663      	mov	r3, ip
 8000a0c:	e000      	b.n	8000a10 <__aeabi_cdcmpeq>
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdcmpeq>:
 8000a10:	b501      	push	{r0, lr}
 8000a12:	f7ff ffb7 	bl	8000984 <__cmpdf2>
 8000a16:	2800      	cmp	r0, #0
 8000a18:	bf48      	it	mi
 8000a1a:	f110 0f00 	cmnmi.w	r0, #0
 8000a1e:	bd01      	pop	{r0, pc}

08000a20 <__aeabi_dcmpeq>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff fff4 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a28:	bf0c      	ite	eq
 8000a2a:	2001      	moveq	r0, #1
 8000a2c:	2000      	movne	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_dcmplt>:
 8000a34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a38:	f7ff ffea 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a3c:	bf34      	ite	cc
 8000a3e:	2001      	movcc	r0, #1
 8000a40:	2000      	movcs	r0, #0
 8000a42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a46:	bf00      	nop

08000a48 <__aeabi_dcmple>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff ffe0 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a50:	bf94      	ite	ls
 8000a52:	2001      	movls	r0, #1
 8000a54:	2000      	movhi	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmpge>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffce 	bl	8000a00 <__aeabi_cdrcmple>
 8000a64:	bf94      	ite	ls
 8000a66:	2001      	movls	r0, #1
 8000a68:	2000      	movhi	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmpgt>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffc4 	bl	8000a00 <__aeabi_cdrcmple>
 8000a78:	bf34      	ite	cc
 8000a7a:	2001      	movcc	r0, #1
 8000a7c:	2000      	movcs	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_dcmpun>:
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x10>
 8000a8e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a92:	d10a      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000a94:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	d102      	bne.n	8000aa4 <__aeabi_dcmpun+0x20>
 8000a9e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aa2:	d102      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000aa4:	f04f 0000 	mov.w	r0, #0
 8000aa8:	4770      	bx	lr
 8000aaa:	f04f 0001 	mov.w	r0, #1
 8000aae:	4770      	bx	lr

08000ab0 <__aeabi_d2uiz>:
 8000ab0:	004a      	lsls	r2, r1, #1
 8000ab2:	d211      	bcs.n	8000ad8 <__aeabi_d2uiz+0x28>
 8000ab4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ab8:	d211      	bcs.n	8000ade <__aeabi_d2uiz+0x2e>
 8000aba:	d50d      	bpl.n	8000ad8 <__aeabi_d2uiz+0x28>
 8000abc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ac0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ac4:	d40e      	bmi.n	8000ae4 <__aeabi_d2uiz+0x34>
 8000ac6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aca:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ace:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ad2:	fa23 f002 	lsr.w	r0, r3, r2
 8000ad6:	4770      	bx	lr
 8000ad8:	f04f 0000 	mov.w	r0, #0
 8000adc:	4770      	bx	lr
 8000ade:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ae2:	d102      	bne.n	8000aea <__aeabi_d2uiz+0x3a>
 8000ae4:	f04f 30ff 	mov.w	r0, #4294967295
 8000ae8:	4770      	bx	lr
 8000aea:	f04f 0000 	mov.w	r0, #0
 8000aee:	4770      	bx	lr

08000af0 <__aeabi_d2f>:
 8000af0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000af4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000af8:	bf24      	itt	cs
 8000afa:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000afe:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b02:	d90d      	bls.n	8000b20 <__aeabi_d2f+0x30>
 8000b04:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b08:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b0c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b10:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b14:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b18:	bf08      	it	eq
 8000b1a:	f020 0001 	biceq.w	r0, r0, #1
 8000b1e:	4770      	bx	lr
 8000b20:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b24:	d121      	bne.n	8000b6a <__aeabi_d2f+0x7a>
 8000b26:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b2a:	bfbc      	itt	lt
 8000b2c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b30:	4770      	bxlt	lr
 8000b32:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b36:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b3a:	f1c2 0218 	rsb	r2, r2, #24
 8000b3e:	f1c2 0c20 	rsb	ip, r2, #32
 8000b42:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b46:	fa20 f002 	lsr.w	r0, r0, r2
 8000b4a:	bf18      	it	ne
 8000b4c:	f040 0001 	orrne.w	r0, r0, #1
 8000b50:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b54:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b58:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b5c:	ea40 000c 	orr.w	r0, r0, ip
 8000b60:	fa23 f302 	lsr.w	r3, r3, r2
 8000b64:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b68:	e7cc      	b.n	8000b04 <__aeabi_d2f+0x14>
 8000b6a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b6e:	d107      	bne.n	8000b80 <__aeabi_d2f+0x90>
 8000b70:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b74:	bf1e      	ittt	ne
 8000b76:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b7a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b7e:	4770      	bxne	lr
 8000b80:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b84:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b88:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b8c:	4770      	bx	lr
 8000b8e:	bf00      	nop

08000b90 <__aeabi_uldivmod>:
 8000b90:	b953      	cbnz	r3, 8000ba8 <__aeabi_uldivmod+0x18>
 8000b92:	b94a      	cbnz	r2, 8000ba8 <__aeabi_uldivmod+0x18>
 8000b94:	2900      	cmp	r1, #0
 8000b96:	bf08      	it	eq
 8000b98:	2800      	cmpeq	r0, #0
 8000b9a:	bf1c      	itt	ne
 8000b9c:	f04f 31ff 	movne.w	r1, #4294967295
 8000ba0:	f04f 30ff 	movne.w	r0, #4294967295
 8000ba4:	f000 b972 	b.w	8000e8c <__aeabi_idiv0>
 8000ba8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bb0:	f000 f806 	bl	8000bc0 <__udivmoddi4>
 8000bb4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bb8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bbc:	b004      	add	sp, #16
 8000bbe:	4770      	bx	lr

08000bc0 <__udivmoddi4>:
 8000bc0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bc4:	9e08      	ldr	r6, [sp, #32]
 8000bc6:	4604      	mov	r4, r0
 8000bc8:	4688      	mov	r8, r1
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d14b      	bne.n	8000c66 <__udivmoddi4+0xa6>
 8000bce:	428a      	cmp	r2, r1
 8000bd0:	4615      	mov	r5, r2
 8000bd2:	d967      	bls.n	8000ca4 <__udivmoddi4+0xe4>
 8000bd4:	fab2 f282 	clz	r2, r2
 8000bd8:	b14a      	cbz	r2, 8000bee <__udivmoddi4+0x2e>
 8000bda:	f1c2 0720 	rsb	r7, r2, #32
 8000bde:	fa01 f302 	lsl.w	r3, r1, r2
 8000be2:	fa20 f707 	lsr.w	r7, r0, r7
 8000be6:	4095      	lsls	r5, r2
 8000be8:	ea47 0803 	orr.w	r8, r7, r3
 8000bec:	4094      	lsls	r4, r2
 8000bee:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000bf2:	0c23      	lsrs	r3, r4, #16
 8000bf4:	fbb8 f7fe 	udiv	r7, r8, lr
 8000bf8:	fa1f fc85 	uxth.w	ip, r5
 8000bfc:	fb0e 8817 	mls	r8, lr, r7, r8
 8000c00:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c04:	fb07 f10c 	mul.w	r1, r7, ip
 8000c08:	4299      	cmp	r1, r3
 8000c0a:	d909      	bls.n	8000c20 <__udivmoddi4+0x60>
 8000c0c:	18eb      	adds	r3, r5, r3
 8000c0e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000c12:	f080 811b 	bcs.w	8000e4c <__udivmoddi4+0x28c>
 8000c16:	4299      	cmp	r1, r3
 8000c18:	f240 8118 	bls.w	8000e4c <__udivmoddi4+0x28c>
 8000c1c:	3f02      	subs	r7, #2
 8000c1e:	442b      	add	r3, r5
 8000c20:	1a5b      	subs	r3, r3, r1
 8000c22:	b2a4      	uxth	r4, r4
 8000c24:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c28:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c2c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c30:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c34:	45a4      	cmp	ip, r4
 8000c36:	d909      	bls.n	8000c4c <__udivmoddi4+0x8c>
 8000c38:	192c      	adds	r4, r5, r4
 8000c3a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c3e:	f080 8107 	bcs.w	8000e50 <__udivmoddi4+0x290>
 8000c42:	45a4      	cmp	ip, r4
 8000c44:	f240 8104 	bls.w	8000e50 <__udivmoddi4+0x290>
 8000c48:	3802      	subs	r0, #2
 8000c4a:	442c      	add	r4, r5
 8000c4c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000c50:	eba4 040c 	sub.w	r4, r4, ip
 8000c54:	2700      	movs	r7, #0
 8000c56:	b11e      	cbz	r6, 8000c60 <__udivmoddi4+0xa0>
 8000c58:	40d4      	lsrs	r4, r2
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	e9c6 4300 	strd	r4, r3, [r6]
 8000c60:	4639      	mov	r1, r7
 8000c62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c66:	428b      	cmp	r3, r1
 8000c68:	d909      	bls.n	8000c7e <__udivmoddi4+0xbe>
 8000c6a:	2e00      	cmp	r6, #0
 8000c6c:	f000 80eb 	beq.w	8000e46 <__udivmoddi4+0x286>
 8000c70:	2700      	movs	r7, #0
 8000c72:	e9c6 0100 	strd	r0, r1, [r6]
 8000c76:	4638      	mov	r0, r7
 8000c78:	4639      	mov	r1, r7
 8000c7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c7e:	fab3 f783 	clz	r7, r3
 8000c82:	2f00      	cmp	r7, #0
 8000c84:	d147      	bne.n	8000d16 <__udivmoddi4+0x156>
 8000c86:	428b      	cmp	r3, r1
 8000c88:	d302      	bcc.n	8000c90 <__udivmoddi4+0xd0>
 8000c8a:	4282      	cmp	r2, r0
 8000c8c:	f200 80fa 	bhi.w	8000e84 <__udivmoddi4+0x2c4>
 8000c90:	1a84      	subs	r4, r0, r2
 8000c92:	eb61 0303 	sbc.w	r3, r1, r3
 8000c96:	2001      	movs	r0, #1
 8000c98:	4698      	mov	r8, r3
 8000c9a:	2e00      	cmp	r6, #0
 8000c9c:	d0e0      	beq.n	8000c60 <__udivmoddi4+0xa0>
 8000c9e:	e9c6 4800 	strd	r4, r8, [r6]
 8000ca2:	e7dd      	b.n	8000c60 <__udivmoddi4+0xa0>
 8000ca4:	b902      	cbnz	r2, 8000ca8 <__udivmoddi4+0xe8>
 8000ca6:	deff      	udf	#255	; 0xff
 8000ca8:	fab2 f282 	clz	r2, r2
 8000cac:	2a00      	cmp	r2, #0
 8000cae:	f040 808f 	bne.w	8000dd0 <__udivmoddi4+0x210>
 8000cb2:	1b49      	subs	r1, r1, r5
 8000cb4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cb8:	fa1f f885 	uxth.w	r8, r5
 8000cbc:	2701      	movs	r7, #1
 8000cbe:	fbb1 fcfe 	udiv	ip, r1, lr
 8000cc2:	0c23      	lsrs	r3, r4, #16
 8000cc4:	fb0e 111c 	mls	r1, lr, ip, r1
 8000cc8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ccc:	fb08 f10c 	mul.w	r1, r8, ip
 8000cd0:	4299      	cmp	r1, r3
 8000cd2:	d907      	bls.n	8000ce4 <__udivmoddi4+0x124>
 8000cd4:	18eb      	adds	r3, r5, r3
 8000cd6:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000cda:	d202      	bcs.n	8000ce2 <__udivmoddi4+0x122>
 8000cdc:	4299      	cmp	r1, r3
 8000cde:	f200 80cd 	bhi.w	8000e7c <__udivmoddi4+0x2bc>
 8000ce2:	4684      	mov	ip, r0
 8000ce4:	1a59      	subs	r1, r3, r1
 8000ce6:	b2a3      	uxth	r3, r4
 8000ce8:	fbb1 f0fe 	udiv	r0, r1, lr
 8000cec:	fb0e 1410 	mls	r4, lr, r0, r1
 8000cf0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000cf4:	fb08 f800 	mul.w	r8, r8, r0
 8000cf8:	45a0      	cmp	r8, r4
 8000cfa:	d907      	bls.n	8000d0c <__udivmoddi4+0x14c>
 8000cfc:	192c      	adds	r4, r5, r4
 8000cfe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d02:	d202      	bcs.n	8000d0a <__udivmoddi4+0x14a>
 8000d04:	45a0      	cmp	r8, r4
 8000d06:	f200 80b6 	bhi.w	8000e76 <__udivmoddi4+0x2b6>
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	eba4 0408 	sub.w	r4, r4, r8
 8000d10:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d14:	e79f      	b.n	8000c56 <__udivmoddi4+0x96>
 8000d16:	f1c7 0c20 	rsb	ip, r7, #32
 8000d1a:	40bb      	lsls	r3, r7
 8000d1c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000d20:	ea4e 0e03 	orr.w	lr, lr, r3
 8000d24:	fa01 f407 	lsl.w	r4, r1, r7
 8000d28:	fa20 f50c 	lsr.w	r5, r0, ip
 8000d2c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000d30:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000d34:	4325      	orrs	r5, r4
 8000d36:	fbb3 f9f8 	udiv	r9, r3, r8
 8000d3a:	0c2c      	lsrs	r4, r5, #16
 8000d3c:	fb08 3319 	mls	r3, r8, r9, r3
 8000d40:	fa1f fa8e 	uxth.w	sl, lr
 8000d44:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000d48:	fb09 f40a 	mul.w	r4, r9, sl
 8000d4c:	429c      	cmp	r4, r3
 8000d4e:	fa02 f207 	lsl.w	r2, r2, r7
 8000d52:	fa00 f107 	lsl.w	r1, r0, r7
 8000d56:	d90b      	bls.n	8000d70 <__udivmoddi4+0x1b0>
 8000d58:	eb1e 0303 	adds.w	r3, lr, r3
 8000d5c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000d60:	f080 8087 	bcs.w	8000e72 <__udivmoddi4+0x2b2>
 8000d64:	429c      	cmp	r4, r3
 8000d66:	f240 8084 	bls.w	8000e72 <__udivmoddi4+0x2b2>
 8000d6a:	f1a9 0902 	sub.w	r9, r9, #2
 8000d6e:	4473      	add	r3, lr
 8000d70:	1b1b      	subs	r3, r3, r4
 8000d72:	b2ad      	uxth	r5, r5
 8000d74:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d78:	fb08 3310 	mls	r3, r8, r0, r3
 8000d7c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000d80:	fb00 fa0a 	mul.w	sl, r0, sl
 8000d84:	45a2      	cmp	sl, r4
 8000d86:	d908      	bls.n	8000d9a <__udivmoddi4+0x1da>
 8000d88:	eb1e 0404 	adds.w	r4, lr, r4
 8000d8c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d90:	d26b      	bcs.n	8000e6a <__udivmoddi4+0x2aa>
 8000d92:	45a2      	cmp	sl, r4
 8000d94:	d969      	bls.n	8000e6a <__udivmoddi4+0x2aa>
 8000d96:	3802      	subs	r0, #2
 8000d98:	4474      	add	r4, lr
 8000d9a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000d9e:	fba0 8902 	umull	r8, r9, r0, r2
 8000da2:	eba4 040a 	sub.w	r4, r4, sl
 8000da6:	454c      	cmp	r4, r9
 8000da8:	46c2      	mov	sl, r8
 8000daa:	464b      	mov	r3, r9
 8000dac:	d354      	bcc.n	8000e58 <__udivmoddi4+0x298>
 8000dae:	d051      	beq.n	8000e54 <__udivmoddi4+0x294>
 8000db0:	2e00      	cmp	r6, #0
 8000db2:	d069      	beq.n	8000e88 <__udivmoddi4+0x2c8>
 8000db4:	ebb1 050a 	subs.w	r5, r1, sl
 8000db8:	eb64 0403 	sbc.w	r4, r4, r3
 8000dbc:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000dc0:	40fd      	lsrs	r5, r7
 8000dc2:	40fc      	lsrs	r4, r7
 8000dc4:	ea4c 0505 	orr.w	r5, ip, r5
 8000dc8:	e9c6 5400 	strd	r5, r4, [r6]
 8000dcc:	2700      	movs	r7, #0
 8000dce:	e747      	b.n	8000c60 <__udivmoddi4+0xa0>
 8000dd0:	f1c2 0320 	rsb	r3, r2, #32
 8000dd4:	fa20 f703 	lsr.w	r7, r0, r3
 8000dd8:	4095      	lsls	r5, r2
 8000dda:	fa01 f002 	lsl.w	r0, r1, r2
 8000dde:	fa21 f303 	lsr.w	r3, r1, r3
 8000de2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000de6:	4338      	orrs	r0, r7
 8000de8:	0c01      	lsrs	r1, r0, #16
 8000dea:	fbb3 f7fe 	udiv	r7, r3, lr
 8000dee:	fa1f f885 	uxth.w	r8, r5
 8000df2:	fb0e 3317 	mls	r3, lr, r7, r3
 8000df6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000dfa:	fb07 f308 	mul.w	r3, r7, r8
 8000dfe:	428b      	cmp	r3, r1
 8000e00:	fa04 f402 	lsl.w	r4, r4, r2
 8000e04:	d907      	bls.n	8000e16 <__udivmoddi4+0x256>
 8000e06:	1869      	adds	r1, r5, r1
 8000e08:	f107 3cff 	add.w	ip, r7, #4294967295
 8000e0c:	d22f      	bcs.n	8000e6e <__udivmoddi4+0x2ae>
 8000e0e:	428b      	cmp	r3, r1
 8000e10:	d92d      	bls.n	8000e6e <__udivmoddi4+0x2ae>
 8000e12:	3f02      	subs	r7, #2
 8000e14:	4429      	add	r1, r5
 8000e16:	1acb      	subs	r3, r1, r3
 8000e18:	b281      	uxth	r1, r0
 8000e1a:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e1e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e22:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e26:	fb00 f308 	mul.w	r3, r0, r8
 8000e2a:	428b      	cmp	r3, r1
 8000e2c:	d907      	bls.n	8000e3e <__udivmoddi4+0x27e>
 8000e2e:	1869      	adds	r1, r5, r1
 8000e30:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e34:	d217      	bcs.n	8000e66 <__udivmoddi4+0x2a6>
 8000e36:	428b      	cmp	r3, r1
 8000e38:	d915      	bls.n	8000e66 <__udivmoddi4+0x2a6>
 8000e3a:	3802      	subs	r0, #2
 8000e3c:	4429      	add	r1, r5
 8000e3e:	1ac9      	subs	r1, r1, r3
 8000e40:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000e44:	e73b      	b.n	8000cbe <__udivmoddi4+0xfe>
 8000e46:	4637      	mov	r7, r6
 8000e48:	4630      	mov	r0, r6
 8000e4a:	e709      	b.n	8000c60 <__udivmoddi4+0xa0>
 8000e4c:	4607      	mov	r7, r0
 8000e4e:	e6e7      	b.n	8000c20 <__udivmoddi4+0x60>
 8000e50:	4618      	mov	r0, r3
 8000e52:	e6fb      	b.n	8000c4c <__udivmoddi4+0x8c>
 8000e54:	4541      	cmp	r1, r8
 8000e56:	d2ab      	bcs.n	8000db0 <__udivmoddi4+0x1f0>
 8000e58:	ebb8 0a02 	subs.w	sl, r8, r2
 8000e5c:	eb69 020e 	sbc.w	r2, r9, lr
 8000e60:	3801      	subs	r0, #1
 8000e62:	4613      	mov	r3, r2
 8000e64:	e7a4      	b.n	8000db0 <__udivmoddi4+0x1f0>
 8000e66:	4660      	mov	r0, ip
 8000e68:	e7e9      	b.n	8000e3e <__udivmoddi4+0x27e>
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	e795      	b.n	8000d9a <__udivmoddi4+0x1da>
 8000e6e:	4667      	mov	r7, ip
 8000e70:	e7d1      	b.n	8000e16 <__udivmoddi4+0x256>
 8000e72:	4681      	mov	r9, r0
 8000e74:	e77c      	b.n	8000d70 <__udivmoddi4+0x1b0>
 8000e76:	3802      	subs	r0, #2
 8000e78:	442c      	add	r4, r5
 8000e7a:	e747      	b.n	8000d0c <__udivmoddi4+0x14c>
 8000e7c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e80:	442b      	add	r3, r5
 8000e82:	e72f      	b.n	8000ce4 <__udivmoddi4+0x124>
 8000e84:	4638      	mov	r0, r7
 8000e86:	e708      	b.n	8000c9a <__udivmoddi4+0xda>
 8000e88:	4637      	mov	r7, r6
 8000e8a:	e6e9      	b.n	8000c60 <__udivmoddi4+0xa0>

08000e8c <__aeabi_idiv0>:
 8000e8c:	4770      	bx	lr
 8000e8e:	bf00      	nop

08000e90 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	af00      	add	r7, sp, #0

  hcrc.Instance = CRC;
 8000e94:	4b06      	ldr	r3, [pc, #24]	; (8000eb0 <MX_CRC_Init+0x20>)
 8000e96:	4a07      	ldr	r2, [pc, #28]	; (8000eb4 <MX_CRC_Init+0x24>)
 8000e98:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000e9a:	4805      	ldr	r0, [pc, #20]	; (8000eb0 <MX_CRC_Init+0x20>)
 8000e9c:	f001 ff68 	bl	8002d70 <HAL_CRC_Init>
 8000ea0:	4603      	mov	r3, r0
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d001      	beq.n	8000eaa <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 8000ea6:	f001 fb17 	bl	80024d8 <Error_Handler>
  }

}
 8000eaa:	bf00      	nop
 8000eac:	bd80      	pop	{r7, pc}
 8000eae:	bf00      	nop
 8000eb0:	20000674 	.word	0x20000674
 8000eb4:	40023000 	.word	0x40023000

08000eb8 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 8000eb8:	b480      	push	{r7}
 8000eba:	b085      	sub	sp, #20
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	4a0b      	ldr	r2, [pc, #44]	; (8000ef4 <HAL_CRC_MspInit+0x3c>)
 8000ec6:	4293      	cmp	r3, r2
 8000ec8:	d10d      	bne.n	8000ee6 <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000eca:	2300      	movs	r3, #0
 8000ecc:	60fb      	str	r3, [r7, #12]
 8000ece:	4b0a      	ldr	r3, [pc, #40]	; (8000ef8 <HAL_CRC_MspInit+0x40>)
 8000ed0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ed2:	4a09      	ldr	r2, [pc, #36]	; (8000ef8 <HAL_CRC_MspInit+0x40>)
 8000ed4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000ed8:	6313      	str	r3, [r2, #48]	; 0x30
 8000eda:	4b07      	ldr	r3, [pc, #28]	; (8000ef8 <HAL_CRC_MspInit+0x40>)
 8000edc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ede:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000ee2:	60fb      	str	r3, [r7, #12]
 8000ee4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 8000ee6:	bf00      	nop
 8000ee8:	3714      	adds	r7, #20
 8000eea:	46bd      	mov	sp, r7
 8000eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef0:	4770      	bx	lr
 8000ef2:	bf00      	nop
 8000ef4:	40023000 	.word	0x40023000
 8000ef8:	40023800 	.word	0x40023800

08000efc <write_register>:

//(1): Functions definitions
//-------------- Static Functions ---------------//
// Function(1): Write to register
static void write_register(uint8_t reg, uint8_t *data)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b084      	sub	sp, #16
 8000f00:	af02      	add	r7, sp, #8
 8000f02:	4603      	mov	r3, r0
 8000f04:	6039      	str	r1, [r7, #0]
 8000f06:	71fb      	strb	r3, [r7, #7]
	iData[0] = reg;
 8000f08:	4a09      	ldr	r2, [pc, #36]	; (8000f30 <write_register+0x34>)
 8000f0a:	79fb      	ldrb	r3, [r7, #7]
 8000f0c:	7013      	strb	r3, [r2, #0]
	iData[1] = data[0];
 8000f0e:	683b      	ldr	r3, [r7, #0]
 8000f10:	781a      	ldrb	r2, [r3, #0]
 8000f12:	4b07      	ldr	r3, [pc, #28]	; (8000f30 <write_register+0x34>)
 8000f14:	705a      	strb	r2, [r3, #1]
	HAL_I2C_Master_Transmit(&i2cx, DAC_I2C_ADDR, iData, 2, 100);
 8000f16:	2364      	movs	r3, #100	; 0x64
 8000f18:	9300      	str	r3, [sp, #0]
 8000f1a:	2302      	movs	r3, #2
 8000f1c:	4a04      	ldr	r2, [pc, #16]	; (8000f30 <write_register+0x34>)
 8000f1e:	2194      	movs	r1, #148	; 0x94
 8000f20:	4804      	ldr	r0, [pc, #16]	; (8000f34 <write_register+0x38>)
 8000f22:	f003 f8d3 	bl	80040cc <HAL_I2C_Master_Transmit>
	//HAL_I2C_Master_Transmit(&i2cx, DAC_I2C_ADDR, data, size, 100);
}
 8000f26:	bf00      	nop
 8000f28:	3708      	adds	r7, #8
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	bd80      	pop	{r7, pc}
 8000f2e:	bf00      	nop
 8000f30:	20000608 	.word	0x20000608
 8000f34:	2000060c 	.word	0x2000060c

08000f38 <read_register>:
// Function(2): Read from register
static void read_register(uint8_t reg, uint8_t *data)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b084      	sub	sp, #16
 8000f3c:	af02      	add	r7, sp, #8
 8000f3e:	4603      	mov	r3, r0
 8000f40:	6039      	str	r1, [r7, #0]
 8000f42:	71fb      	strb	r3, [r7, #7]
	iData[0] = reg;
 8000f44:	4a0b      	ldr	r2, [pc, #44]	; (8000f74 <read_register+0x3c>)
 8000f46:	79fb      	ldrb	r3, [r7, #7]
 8000f48:	7013      	strb	r3, [r2, #0]
	HAL_I2C_Master_Transmit(&i2cx, DAC_I2C_ADDR, iData, 1, 100);
 8000f4a:	2364      	movs	r3, #100	; 0x64
 8000f4c:	9300      	str	r3, [sp, #0]
 8000f4e:	2301      	movs	r3, #1
 8000f50:	4a08      	ldr	r2, [pc, #32]	; (8000f74 <read_register+0x3c>)
 8000f52:	2194      	movs	r1, #148	; 0x94
 8000f54:	4808      	ldr	r0, [pc, #32]	; (8000f78 <read_register+0x40>)
 8000f56:	f003 f8b9 	bl	80040cc <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&i2cx, DAC_I2C_ADDR, data, 1, 100);
 8000f5a:	2364      	movs	r3, #100	; 0x64
 8000f5c:	9300      	str	r3, [sp, #0]
 8000f5e:	2301      	movs	r3, #1
 8000f60:	683a      	ldr	r2, [r7, #0]
 8000f62:	2194      	movs	r1, #148	; 0x94
 8000f64:	4804      	ldr	r0, [pc, #16]	; (8000f78 <read_register+0x40>)
 8000f66:	f003 f9af 	bl	80042c8 <HAL_I2C_Master_Receive>
}
 8000f6a:	bf00      	nop
 8000f6c:	3708      	adds	r7, #8
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	bd80      	pop	{r7, pc}
 8000f72:	bf00      	nop
 8000f74:	20000608 	.word	0x20000608
 8000f78:	2000060c 	.word	0x2000060c

08000f7c <CS43_Init>:

//-------------- Public Functions ----------------//
// Function(1): Initialisation
void CS43_Init(I2C_HandleTypeDef i2c_handle, CS43_MODE outputMode)
{
 8000f7c:	b084      	sub	sp, #16
 8000f7e:	b580      	push	{r7, lr}
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	f107 0c08 	add.w	ip, r7, #8
 8000f86:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	__HAL_UNLOCK(&hi2s3);     // THIS IS EXTREMELY IMPORTANT FOR I2S3 TO WORK!!
 8000f8a:	4b81      	ldr	r3, [pc, #516]	; (8001190 <CS43_Init+0x214>)
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	__HAL_I2S_ENABLE(&hi2s3); // THIS IS EXTREMELY IMPORTANT FOR I2S3 TO WORK!!
 8000f92:	4b7f      	ldr	r3, [pc, #508]	; (8001190 <CS43_Init+0x214>)
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	69da      	ldr	r2, [r3, #28]
 8000f98:	4b7d      	ldr	r3, [pc, #500]	; (8001190 <CS43_Init+0x214>)
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000fa0:	61da      	str	r2, [r3, #28]
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, GPIO_PIN_SET);
 8000fa2:	2201      	movs	r2, #1
 8000fa4:	2110      	movs	r1, #16
 8000fa6:	487b      	ldr	r0, [pc, #492]	; (8001194 <CS43_Init+0x218>)
 8000fa8:	f002 fe9e 	bl	8003ce8 <HAL_GPIO_WritePin>
	//(1): Get the I2C handle
	i2cx = i2c_handle;
 8000fac:	4b7a      	ldr	r3, [pc, #488]	; (8001198 <CS43_Init+0x21c>)
 8000fae:	4618      	mov	r0, r3
 8000fb0:	f107 0108 	add.w	r1, r7, #8
 8000fb4:	2354      	movs	r3, #84	; 0x54
 8000fb6:	461a      	mov	r2, r3
 8000fb8:	f00d ff80 	bl	800eebc <memcpy>
	//(2): Power down
	iData[1] = 0x01;
 8000fbc:	4b77      	ldr	r3, [pc, #476]	; (800119c <CS43_Init+0x220>)
 8000fbe:	2201      	movs	r2, #1
 8000fc0:	705a      	strb	r2, [r3, #1]
	write_register(POWER_CONTROL1,iData);
 8000fc2:	4976      	ldr	r1, [pc, #472]	; (800119c <CS43_Init+0x220>)
 8000fc4:	2002      	movs	r0, #2
 8000fc6:	f7ff ff99 	bl	8000efc <write_register>
	//(3): Enable Right and Left headphones
	iData[1] =  (2 << 6);  // PDN_HPB[0:1]  = 10 (HP-B always onCon)
 8000fca:	4b74      	ldr	r3, [pc, #464]	; (800119c <CS43_Init+0x220>)
 8000fcc:	2280      	movs	r2, #128	; 0x80
 8000fce:	705a      	strb	r2, [r3, #1]
	iData[1] |= (2 << 4);  // PDN_HPA[0:1]  = 10 (HP-A always on)
 8000fd0:	4b72      	ldr	r3, [pc, #456]	; (800119c <CS43_Init+0x220>)
 8000fd2:	785b      	ldrb	r3, [r3, #1]
 8000fd4:	f043 0320 	orr.w	r3, r3, #32
 8000fd8:	b2da      	uxtb	r2, r3
 8000fda:	4b70      	ldr	r3, [pc, #448]	; (800119c <CS43_Init+0x220>)
 8000fdc:	705a      	strb	r2, [r3, #1]
	iData[1] |= (3 << 2);  // PDN_SPKB[0:1] = 11 (Speaker B always off)
 8000fde:	4b6f      	ldr	r3, [pc, #444]	; (800119c <CS43_Init+0x220>)
 8000fe0:	785b      	ldrb	r3, [r3, #1]
 8000fe2:	f043 030c 	orr.w	r3, r3, #12
 8000fe6:	b2da      	uxtb	r2, r3
 8000fe8:	4b6c      	ldr	r3, [pc, #432]	; (800119c <CS43_Init+0x220>)
 8000fea:	705a      	strb	r2, [r3, #1]
	iData[1] |= (3 << 0);  // PDN_SPKA[0:1] = 11 (Speaker A always off)
 8000fec:	4b6b      	ldr	r3, [pc, #428]	; (800119c <CS43_Init+0x220>)
 8000fee:	785b      	ldrb	r3, [r3, #1]
 8000ff0:	f043 0303 	orr.w	r3, r3, #3
 8000ff4:	b2da      	uxtb	r2, r3
 8000ff6:	4b69      	ldr	r3, [pc, #420]	; (800119c <CS43_Init+0x220>)
 8000ff8:	705a      	strb	r2, [r3, #1]
	write_register(POWER_CONTROL2,&iData[1]);
 8000ffa:	4969      	ldr	r1, [pc, #420]	; (80011a0 <CS43_Init+0x224>)
 8000ffc:	2004      	movs	r0, #4
 8000ffe:	f7ff ff7d 	bl	8000efc <write_register>
	//(4): Automatic clock detection
	iData[1] = (1 << 7);
 8001002:	4b66      	ldr	r3, [pc, #408]	; (800119c <CS43_Init+0x220>)
 8001004:	2280      	movs	r2, #128	; 0x80
 8001006:	705a      	strb	r2, [r3, #1]
	write_register(CLOCKING_CONTROL,&iData[1]);
 8001008:	4965      	ldr	r1, [pc, #404]	; (80011a0 <CS43_Init+0x224>)
 800100a:	2005      	movs	r0, #5
 800100c:	f7ff ff76 	bl	8000efc <write_register>
	//(5): Interface control 1
	read_register(INTERFACE_CONTROL1, iData);
 8001010:	4962      	ldr	r1, [pc, #392]	; (800119c <CS43_Init+0x220>)
 8001012:	2006      	movs	r0, #6
 8001014:	f7ff ff90 	bl	8000f38 <read_register>
	iData[1] &= (1 << 5); // Clear all bits except bit 5 which is reserved
 8001018:	4b60      	ldr	r3, [pc, #384]	; (800119c <CS43_Init+0x220>)
 800101a:	785b      	ldrb	r3, [r3, #1]
 800101c:	f003 0320 	and.w	r3, r3, #32
 8001020:	b2da      	uxtb	r2, r3
 8001022:	4b5e      	ldr	r3, [pc, #376]	; (800119c <CS43_Init+0x220>)
 8001024:	705a      	strb	r2, [r3, #1]
	iData[1] &= ~(1 << 7);  // Slave
 8001026:	4b5d      	ldr	r3, [pc, #372]	; (800119c <CS43_Init+0x220>)
 8001028:	785b      	ldrb	r3, [r3, #1]
 800102a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800102e:	b2da      	uxtb	r2, r3
 8001030:	4b5a      	ldr	r3, [pc, #360]	; (800119c <CS43_Init+0x220>)
 8001032:	705a      	strb	r2, [r3, #1]
	iData[1] &= ~(1 << 6);  // Clock polarity: Not inverted
 8001034:	4b59      	ldr	r3, [pc, #356]	; (800119c <CS43_Init+0x220>)
 8001036:	785b      	ldrb	r3, [r3, #1]
 8001038:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800103c:	b2da      	uxtb	r2, r3
 800103e:	4b57      	ldr	r3, [pc, #348]	; (800119c <CS43_Init+0x220>)
 8001040:	705a      	strb	r2, [r3, #1]
	iData[1] &= ~(1 << 4);  // No DSP mode
 8001042:	4b56      	ldr	r3, [pc, #344]	; (800119c <CS43_Init+0x220>)
 8001044:	785b      	ldrb	r3, [r3, #1]
 8001046:	f023 0310 	bic.w	r3, r3, #16
 800104a:	b2da      	uxtb	r2, r3
 800104c:	4b53      	ldr	r3, [pc, #332]	; (800119c <CS43_Init+0x220>)
 800104e:	705a      	strb	r2, [r3, #1]
	iData[1] &= ~(1 << 2);  // Left justified, up to 24 bit (default)
 8001050:	4b52      	ldr	r3, [pc, #328]	; (800119c <CS43_Init+0x220>)
 8001052:	785b      	ldrb	r3, [r3, #1]
 8001054:	f023 0304 	bic.w	r3, r3, #4
 8001058:	b2da      	uxtb	r2, r3
 800105a:	4b50      	ldr	r3, [pc, #320]	; (800119c <CS43_Init+0x220>)
 800105c:	705a      	strb	r2, [r3, #1]
	iData[1] |= (1 << 2);
 800105e:	4b4f      	ldr	r3, [pc, #316]	; (800119c <CS43_Init+0x220>)
 8001060:	785b      	ldrb	r3, [r3, #1]
 8001062:	f043 0304 	orr.w	r3, r3, #4
 8001066:	b2da      	uxtb	r2, r3
 8001068:	4b4c      	ldr	r3, [pc, #304]	; (800119c <CS43_Init+0x220>)
 800106a:	705a      	strb	r2, [r3, #1]
	
	iData[1] |=  (3 << 0);  // 16-bit audio word length for I2S interface
 800106c:	4b4b      	ldr	r3, [pc, #300]	; (800119c <CS43_Init+0x220>)
 800106e:	785b      	ldrb	r3, [r3, #1]
 8001070:	f043 0303 	orr.w	r3, r3, #3
 8001074:	b2da      	uxtb	r2, r3
 8001076:	4b49      	ldr	r3, [pc, #292]	; (800119c <CS43_Init+0x220>)
 8001078:	705a      	strb	r2, [r3, #1]
	write_register(INTERFACE_CONTROL1,&iData[1]);
 800107a:	4949      	ldr	r1, [pc, #292]	; (80011a0 <CS43_Init+0x224>)
 800107c:	2006      	movs	r0, #6
 800107e:	f7ff ff3d 	bl	8000efc <write_register>
	//(6): Passthrough A settings
	read_register(PASSTHROUGH_A, &iData[1]);
 8001082:	4947      	ldr	r1, [pc, #284]	; (80011a0 <CS43_Init+0x224>)
 8001084:	2008      	movs	r0, #8
 8001086:	f7ff ff57 	bl	8000f38 <read_register>
	iData[1] &= 0xF0;      // Bits [4-7] are reserved
 800108a:	4b44      	ldr	r3, [pc, #272]	; (800119c <CS43_Init+0x220>)
 800108c:	785b      	ldrb	r3, [r3, #1]
 800108e:	f023 030f 	bic.w	r3, r3, #15
 8001092:	b2da      	uxtb	r2, r3
 8001094:	4b41      	ldr	r3, [pc, #260]	; (800119c <CS43_Init+0x220>)
 8001096:	705a      	strb	r2, [r3, #1]
	iData[1] |=  (1 << 0); // Use AIN1A as source for passthrough
 8001098:	4b40      	ldr	r3, [pc, #256]	; (800119c <CS43_Init+0x220>)
 800109a:	785b      	ldrb	r3, [r3, #1]
 800109c:	f043 0301 	orr.w	r3, r3, #1
 80010a0:	b2da      	uxtb	r2, r3
 80010a2:	4b3e      	ldr	r3, [pc, #248]	; (800119c <CS43_Init+0x220>)
 80010a4:	705a      	strb	r2, [r3, #1]
	write_register(PASSTHROUGH_A,&iData[1]);
 80010a6:	493e      	ldr	r1, [pc, #248]	; (80011a0 <CS43_Init+0x224>)
 80010a8:	2008      	movs	r0, #8
 80010aa:	f7ff ff27 	bl	8000efc <write_register>
	//(7): Passthrough B settings
	read_register(PASSTHROUGH_B, &iData[1]);
 80010ae:	493c      	ldr	r1, [pc, #240]	; (80011a0 <CS43_Init+0x224>)
 80010b0:	2009      	movs	r0, #9
 80010b2:	f7ff ff41 	bl	8000f38 <read_register>
	iData[1] &= 0xF0;      // Bits [4-7] are reserved
 80010b6:	4b39      	ldr	r3, [pc, #228]	; (800119c <CS43_Init+0x220>)
 80010b8:	785b      	ldrb	r3, [r3, #1]
 80010ba:	f023 030f 	bic.w	r3, r3, #15
 80010be:	b2da      	uxtb	r2, r3
 80010c0:	4b36      	ldr	r3, [pc, #216]	; (800119c <CS43_Init+0x220>)
 80010c2:	705a      	strb	r2, [r3, #1]
	iData[1] |=  (1 << 0); // Use AIN1B as source for passthrough
 80010c4:	4b35      	ldr	r3, [pc, #212]	; (800119c <CS43_Init+0x220>)
 80010c6:	785b      	ldrb	r3, [r3, #1]
 80010c8:	f043 0301 	orr.w	r3, r3, #1
 80010cc:	b2da      	uxtb	r2, r3
 80010ce:	4b33      	ldr	r3, [pc, #204]	; (800119c <CS43_Init+0x220>)
 80010d0:	705a      	strb	r2, [r3, #1]
	write_register(PASSTHROUGH_B,&iData[1]);
 80010d2:	4933      	ldr	r1, [pc, #204]	; (80011a0 <CS43_Init+0x224>)
 80010d4:	2009      	movs	r0, #9
 80010d6:	f7ff ff11 	bl	8000efc <write_register>
	//(8): Miscellaneous register settings
	read_register(MISCELLANEOUS_CONTRLS, &iData[1]);
 80010da:	4931      	ldr	r1, [pc, #196]	; (80011a0 <CS43_Init+0x224>)
 80010dc:	200e      	movs	r0, #14
 80010de:	f7ff ff2b 	bl	8000f38 <read_register>
	if(outputMode == MODE_ANALOG)
 80010e2:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 80010e6:	2b01      	cmp	r3, #1
 80010e8:	d123      	bne.n	8001132 <CS43_Init+0x1b6>
	{
		iData[1] |=  (1 << 7);   // Enable passthrough for AIN-A
 80010ea:	4b2c      	ldr	r3, [pc, #176]	; (800119c <CS43_Init+0x220>)
 80010ec:	785b      	ldrb	r3, [r3, #1]
 80010ee:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80010f2:	b2da      	uxtb	r2, r3
 80010f4:	4b29      	ldr	r3, [pc, #164]	; (800119c <CS43_Init+0x220>)
 80010f6:	705a      	strb	r2, [r3, #1]
		iData[1] |=  (1 << 6);   // Enable passthrough for AIN-B
 80010f8:	4b28      	ldr	r3, [pc, #160]	; (800119c <CS43_Init+0x220>)
 80010fa:	785b      	ldrb	r3, [r3, #1]
 80010fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001100:	b2da      	uxtb	r2, r3
 8001102:	4b26      	ldr	r3, [pc, #152]	; (800119c <CS43_Init+0x220>)
 8001104:	705a      	strb	r2, [r3, #1]
		iData[1] &= ~(1 << 5);   // Unmute passthrough on AIN-A
 8001106:	4b25      	ldr	r3, [pc, #148]	; (800119c <CS43_Init+0x220>)
 8001108:	785b      	ldrb	r3, [r3, #1]
 800110a:	f023 0320 	bic.w	r3, r3, #32
 800110e:	b2da      	uxtb	r2, r3
 8001110:	4b22      	ldr	r3, [pc, #136]	; (800119c <CS43_Init+0x220>)
 8001112:	705a      	strb	r2, [r3, #1]
		iData[1] &= ~(1 << 4);   // Unmute passthrough on AIN-B
 8001114:	4b21      	ldr	r3, [pc, #132]	; (800119c <CS43_Init+0x220>)
 8001116:	785b      	ldrb	r3, [r3, #1]
 8001118:	f023 0310 	bic.w	r3, r3, #16
 800111c:	b2da      	uxtb	r2, r3
 800111e:	4b1f      	ldr	r3, [pc, #124]	; (800119c <CS43_Init+0x220>)
 8001120:	705a      	strb	r2, [r3, #1]
		iData[1] &= ~(1 << 3);   // Changed settings take affect immediately
 8001122:	4b1e      	ldr	r3, [pc, #120]	; (800119c <CS43_Init+0x220>)
 8001124:	785b      	ldrb	r3, [r3, #1]
 8001126:	f023 0308 	bic.w	r3, r3, #8
 800112a:	b2da      	uxtb	r2, r3
 800112c:	4b1b      	ldr	r3, [pc, #108]	; (800119c <CS43_Init+0x220>)
 800112e:	705a      	strb	r2, [r3, #1]
 8001130:	e006      	b.n	8001140 <CS43_Init+0x1c4>
	}
	else if(outputMode == MODE_I2S)
 8001132:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 8001136:	2b00      	cmp	r3, #0
 8001138:	d102      	bne.n	8001140 <CS43_Init+0x1c4>
	{
		iData[1] = 0x02;
 800113a:	4b18      	ldr	r3, [pc, #96]	; (800119c <CS43_Init+0x220>)
 800113c:	2202      	movs	r2, #2
 800113e:	705a      	strb	r2, [r3, #1]
	}
	write_register(MISCELLANEOUS_CONTRLS,&iData[1]);
 8001140:	4917      	ldr	r1, [pc, #92]	; (80011a0 <CS43_Init+0x224>)
 8001142:	200e      	movs	r0, #14
 8001144:	f7ff feda 	bl	8000efc <write_register>
	//(9): Unmute headphone and speaker
	read_register(PLAYBACK_CONTROL, &iData[1]);
 8001148:	4915      	ldr	r1, [pc, #84]	; (80011a0 <CS43_Init+0x224>)
 800114a:	200f      	movs	r0, #15
 800114c:	f7ff fef4 	bl	8000f38 <read_register>
	iData[1] = 0x00;
 8001150:	4b12      	ldr	r3, [pc, #72]	; (800119c <CS43_Init+0x220>)
 8001152:	2200      	movs	r2, #0
 8001154:	705a      	strb	r2, [r3, #1]
	write_register(PLAYBACK_CONTROL,&iData[1]);
 8001156:	4912      	ldr	r1, [pc, #72]	; (80011a0 <CS43_Init+0x224>)
 8001158:	200f      	movs	r0, #15
 800115a:	f7ff fecf 	bl	8000efc <write_register>
	//(10): Set volume to default (0dB)
	iData[1] = 0x00;
 800115e:	4b0f      	ldr	r3, [pc, #60]	; (800119c <CS43_Init+0x220>)
 8001160:	2200      	movs	r2, #0
 8001162:	705a      	strb	r2, [r3, #1]
	write_register(PASSTHROUGH_VOLUME_A,&iData[1]);
 8001164:	490e      	ldr	r1, [pc, #56]	; (80011a0 <CS43_Init+0x224>)
 8001166:	2014      	movs	r0, #20
 8001168:	f7ff fec8 	bl	8000efc <write_register>
	write_register(PASSTHROUGH_VOLUME_B,&iData[1]);
 800116c:	490c      	ldr	r1, [pc, #48]	; (80011a0 <CS43_Init+0x224>)
 800116e:	2015      	movs	r0, #21
 8001170:	f7ff fec4 	bl	8000efc <write_register>
	write_register(PCM_VOLUME_A,&iData[1]);
 8001174:	490a      	ldr	r1, [pc, #40]	; (80011a0 <CS43_Init+0x224>)
 8001176:	201a      	movs	r0, #26
 8001178:	f7ff fec0 	bl	8000efc <write_register>
	write_register(PCM_VOLUME_B,&iData[1]);
 800117c:	4908      	ldr	r1, [pc, #32]	; (80011a0 <CS43_Init+0x224>)
 800117e:	201b      	movs	r0, #27
 8001180:	f7ff febc 	bl	8000efc <write_register>
}
 8001184:	bf00      	nop
 8001186:	46bd      	mov	sp, r7
 8001188:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800118c:	b004      	add	sp, #16
 800118e:	4770      	bx	lr
 8001190:	20000778 	.word	0x20000778
 8001194:	40020c00 	.word	0x40020c00
 8001198:	2000060c 	.word	0x2000060c
 800119c:	20000608 	.word	0x20000608
 80011a0:	20000609 	.word	0x20000609

080011a4 <CS43_Enable_RightLeft>:

// Function(2): Enable Right and Left headphones
void CS43_Enable_RightLeft(uint8_t side)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b082      	sub	sp, #8
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	4603      	mov	r3, r0
 80011ac:	71fb      	strb	r3, [r7, #7]
	switch (side)
 80011ae:	79fb      	ldrb	r3, [r7, #7]
 80011b0:	2b03      	cmp	r3, #3
 80011b2:	d837      	bhi.n	8001224 <CS43_Enable_RightLeft+0x80>
 80011b4:	a201      	add	r2, pc, #4	; (adr r2, 80011bc <CS43_Enable_RightLeft+0x18>)
 80011b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011ba:	bf00      	nop
 80011bc:	080011cd 	.word	0x080011cd
 80011c0:	080011e3 	.word	0x080011e3
 80011c4:	080011f9 	.word	0x080011f9
 80011c8:	0800120f 	.word	0x0800120f
	{
		case 0:
			iData[1] =  (3 << 6);  // PDN_HPB[0:1]  = 10 (HP-B always onCon)
 80011cc:	4b21      	ldr	r3, [pc, #132]	; (8001254 <CS43_Enable_RightLeft+0xb0>)
 80011ce:	22c0      	movs	r2, #192	; 0xc0
 80011d0:	705a      	strb	r2, [r3, #1]
			iData[1] |= (3 << 4);  // PDN_HPA[0:1]  = 10 (HP-A always on)
 80011d2:	4b20      	ldr	r3, [pc, #128]	; (8001254 <CS43_Enable_RightLeft+0xb0>)
 80011d4:	785b      	ldrb	r3, [r3, #1]
 80011d6:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 80011da:	b2da      	uxtb	r2, r3
 80011dc:	4b1d      	ldr	r3, [pc, #116]	; (8001254 <CS43_Enable_RightLeft+0xb0>)
 80011de:	705a      	strb	r2, [r3, #1]
			break;
 80011e0:	e021      	b.n	8001226 <CS43_Enable_RightLeft+0x82>
		case 1:
			iData[1] =  (2 << 6);  // PDN_HPB[0:1]  = 10 (HP-B always onCon)
 80011e2:	4b1c      	ldr	r3, [pc, #112]	; (8001254 <CS43_Enable_RightLeft+0xb0>)
 80011e4:	2280      	movs	r2, #128	; 0x80
 80011e6:	705a      	strb	r2, [r3, #1]
			iData[1] |= (3 << 4);  // PDN_HPA[0:1]  = 10 (HP-A always on)
 80011e8:	4b1a      	ldr	r3, [pc, #104]	; (8001254 <CS43_Enable_RightLeft+0xb0>)
 80011ea:	785b      	ldrb	r3, [r3, #1]
 80011ec:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 80011f0:	b2da      	uxtb	r2, r3
 80011f2:	4b18      	ldr	r3, [pc, #96]	; (8001254 <CS43_Enable_RightLeft+0xb0>)
 80011f4:	705a      	strb	r2, [r3, #1]
			break;
 80011f6:	e016      	b.n	8001226 <CS43_Enable_RightLeft+0x82>
		case 2:
			iData[1] =  (3 << 6);  // PDN_HPB[0:1]  = 10 (HP-B always onCon)
 80011f8:	4b16      	ldr	r3, [pc, #88]	; (8001254 <CS43_Enable_RightLeft+0xb0>)
 80011fa:	22c0      	movs	r2, #192	; 0xc0
 80011fc:	705a      	strb	r2, [r3, #1]
			iData[1] |= (2 << 4);  // PDN_HPA[0:1]  = 10 (HP-A always on)
 80011fe:	4b15      	ldr	r3, [pc, #84]	; (8001254 <CS43_Enable_RightLeft+0xb0>)
 8001200:	785b      	ldrb	r3, [r3, #1]
 8001202:	f043 0320 	orr.w	r3, r3, #32
 8001206:	b2da      	uxtb	r2, r3
 8001208:	4b12      	ldr	r3, [pc, #72]	; (8001254 <CS43_Enable_RightLeft+0xb0>)
 800120a:	705a      	strb	r2, [r3, #1]
			break;
 800120c:	e00b      	b.n	8001226 <CS43_Enable_RightLeft+0x82>
		case 3:
			iData[1] =  (2 << 6);  // PDN_HPB[0:1]  = 10 (HP-B always onCon)
 800120e:	4b11      	ldr	r3, [pc, #68]	; (8001254 <CS43_Enable_RightLeft+0xb0>)
 8001210:	2280      	movs	r2, #128	; 0x80
 8001212:	705a      	strb	r2, [r3, #1]
			iData[1] |= (2 << 4);  // PDN_HPA[0:1]  = 10 (HP-A always on)
 8001214:	4b0f      	ldr	r3, [pc, #60]	; (8001254 <CS43_Enable_RightLeft+0xb0>)
 8001216:	785b      	ldrb	r3, [r3, #1]
 8001218:	f043 0320 	orr.w	r3, r3, #32
 800121c:	b2da      	uxtb	r2, r3
 800121e:	4b0d      	ldr	r3, [pc, #52]	; (8001254 <CS43_Enable_RightLeft+0xb0>)
 8001220:	705a      	strb	r2, [r3, #1]
			break;
 8001222:	e000      	b.n	8001226 <CS43_Enable_RightLeft+0x82>
		default:
			break;
 8001224:	bf00      	nop
	}
	iData[1] |= (3 << 2);  // PDN_SPKB[0:1] = 11 (Speaker B always off)
 8001226:	4b0b      	ldr	r3, [pc, #44]	; (8001254 <CS43_Enable_RightLeft+0xb0>)
 8001228:	785b      	ldrb	r3, [r3, #1]
 800122a:	f043 030c 	orr.w	r3, r3, #12
 800122e:	b2da      	uxtb	r2, r3
 8001230:	4b08      	ldr	r3, [pc, #32]	; (8001254 <CS43_Enable_RightLeft+0xb0>)
 8001232:	705a      	strb	r2, [r3, #1]
	iData[1] |= (3 << 0);  // PDN_SPKA[0:1] = 11 (Speaker A always off)
 8001234:	4b07      	ldr	r3, [pc, #28]	; (8001254 <CS43_Enable_RightLeft+0xb0>)
 8001236:	785b      	ldrb	r3, [r3, #1]
 8001238:	f043 0303 	orr.w	r3, r3, #3
 800123c:	b2da      	uxtb	r2, r3
 800123e:	4b05      	ldr	r3, [pc, #20]	; (8001254 <CS43_Enable_RightLeft+0xb0>)
 8001240:	705a      	strb	r2, [r3, #1]
	write_register(POWER_CONTROL2,&iData[1]);
 8001242:	4905      	ldr	r1, [pc, #20]	; (8001258 <CS43_Enable_RightLeft+0xb4>)
 8001244:	2004      	movs	r0, #4
 8001246:	f7ff fe59 	bl	8000efc <write_register>
}
 800124a:	bf00      	nop
 800124c:	3708      	adds	r7, #8
 800124e:	46bd      	mov	sp, r7
 8001250:	bd80      	pop	{r7, pc}
 8001252:	bf00      	nop
 8001254:	20000608 	.word	0x20000608
 8001258:	20000609 	.word	0x20000609

0800125c <CS43_SetVolume>:

// Function(3): Set Volume Level
void CS43_SetVolume(uint8_t volume)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b084      	sub	sp, #16
 8001260:	af00      	add	r7, sp, #0
 8001262:	4603      	mov	r3, r0
 8001264:	71fb      	strb	r3, [r7, #7]
	int8_t tempVol = volume - 50;
 8001266:	79fb      	ldrb	r3, [r7, #7]
 8001268:	3b32      	subs	r3, #50	; 0x32
 800126a:	b2db      	uxtb	r3, r3
 800126c:	73fb      	strb	r3, [r7, #15]
	tempVol = tempVol*(127/50);
 800126e:	7bfb      	ldrb	r3, [r7, #15]
 8001270:	005b      	lsls	r3, r3, #1
 8001272:	b2db      	uxtb	r3, r3
 8001274:	73fb      	strb	r3, [r7, #15]
	uint8_t myVolume =  (uint8_t )tempVol;
 8001276:	7bfb      	ldrb	r3, [r7, #15]
 8001278:	73bb      	strb	r3, [r7, #14]
	iData[1] = myVolume;
 800127a:	4a16      	ldr	r2, [pc, #88]	; (80012d4 <CS43_SetVolume+0x78>)
 800127c:	7bbb      	ldrb	r3, [r7, #14]
 800127e:	7053      	strb	r3, [r2, #1]
	write_register(PASSTHROUGH_VOLUME_A,&iData[1]);
 8001280:	4915      	ldr	r1, [pc, #84]	; (80012d8 <CS43_SetVolume+0x7c>)
 8001282:	2014      	movs	r0, #20
 8001284:	f7ff fe3a 	bl	8000efc <write_register>
	write_register(PASSTHROUGH_VOLUME_B,&iData[1]);
 8001288:	4913      	ldr	r1, [pc, #76]	; (80012d8 <CS43_SetVolume+0x7c>)
 800128a:	2015      	movs	r0, #21
 800128c:	f7ff fe36 	bl	8000efc <write_register>
	
	iData[1] = VOLUME_CONVERT_D(volume);
 8001290:	79fb      	ldrb	r3, [r7, #7]
 8001292:	2b64      	cmp	r3, #100	; 0x64
 8001294:	d80e      	bhi.n	80012b4 <CS43_SetVolume+0x58>
 8001296:	79fa      	ldrb	r2, [r7, #7]
 8001298:	4613      	mov	r3, r2
 800129a:	005b      	lsls	r3, r3, #1
 800129c:	4413      	add	r3, r2
 800129e:	011b      	lsls	r3, r3, #4
 80012a0:	4a0e      	ldr	r2, [pc, #56]	; (80012dc <CS43_SetVolume+0x80>)
 80012a2:	fb82 1203 	smull	r1, r2, r2, r3
 80012a6:	1152      	asrs	r2, r2, #5
 80012a8:	17db      	asrs	r3, r3, #31
 80012aa:	1ad3      	subs	r3, r2, r3
 80012ac:	b2db      	uxtb	r3, r3
 80012ae:	3b18      	subs	r3, #24
 80012b0:	b2db      	uxtb	r3, r3
 80012b2:	e000      	b.n	80012b6 <CS43_SetVolume+0x5a>
 80012b4:	2318      	movs	r3, #24
 80012b6:	4a07      	ldr	r2, [pc, #28]	; (80012d4 <CS43_SetVolume+0x78>)
 80012b8:	7053      	strb	r3, [r2, #1]
	
	/* Set the Master volume */ 
	write_register(CS43L22_REG_MASTER_A_VOL,&iData[1]);
 80012ba:	4907      	ldr	r1, [pc, #28]	; (80012d8 <CS43_SetVolume+0x7c>)
 80012bc:	2020      	movs	r0, #32
 80012be:	f7ff fe1d 	bl	8000efc <write_register>
	write_register(CS43L22_REG_MASTER_B_VOL,&iData[1]);
 80012c2:	4905      	ldr	r1, [pc, #20]	; (80012d8 <CS43_SetVolume+0x7c>)
 80012c4:	2021      	movs	r0, #33	; 0x21
 80012c6:	f7ff fe19 	bl	8000efc <write_register>
}
 80012ca:	bf00      	nop
 80012cc:	3710      	adds	r7, #16
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bd80      	pop	{r7, pc}
 80012d2:	bf00      	nop
 80012d4:	20000608 	.word	0x20000608
 80012d8:	20000609 	.word	0x20000609
 80012dc:	51eb851f 	.word	0x51eb851f

080012e0 <CS43_Start>:

// Function(4): Start the Audio DAC
void CS43_Start(void)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	af00      	add	r7, sp, #0
	// Write 0x99 to register 0x00.
	iData[1] = 0x99;
 80012e4:	4b1d      	ldr	r3, [pc, #116]	; (800135c <CS43_Start+0x7c>)
 80012e6:	2299      	movs	r2, #153	; 0x99
 80012e8:	705a      	strb	r2, [r3, #1]
	write_register(CONFIG_00,&iData[1]);
 80012ea:	491d      	ldr	r1, [pc, #116]	; (8001360 <CS43_Start+0x80>)
 80012ec:	2000      	movs	r0, #0
 80012ee:	f7ff fe05 	bl	8000efc <write_register>
	// Write 0x80 to register 0x47.
	iData[1] = 0x80;
 80012f2:	4b1a      	ldr	r3, [pc, #104]	; (800135c <CS43_Start+0x7c>)
 80012f4:	2280      	movs	r2, #128	; 0x80
 80012f6:	705a      	strb	r2, [r3, #1]
	write_register(CONFIG_47,&iData[1]);
 80012f8:	4919      	ldr	r1, [pc, #100]	; (8001360 <CS43_Start+0x80>)
 80012fa:	2047      	movs	r0, #71	; 0x47
 80012fc:	f7ff fdfe 	bl	8000efc <write_register>
	// Write '1'b to bit 7 in register 0x32.
	read_register(CONFIG_32, &iData[1]);
 8001300:	4917      	ldr	r1, [pc, #92]	; (8001360 <CS43_Start+0x80>)
 8001302:	2032      	movs	r0, #50	; 0x32
 8001304:	f7ff fe18 	bl	8000f38 <read_register>
	iData[1] |= 0x80;
 8001308:	4b14      	ldr	r3, [pc, #80]	; (800135c <CS43_Start+0x7c>)
 800130a:	785b      	ldrb	r3, [r3, #1]
 800130c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001310:	b2da      	uxtb	r2, r3
 8001312:	4b12      	ldr	r3, [pc, #72]	; (800135c <CS43_Start+0x7c>)
 8001314:	705a      	strb	r2, [r3, #1]
	write_register(CONFIG_32,&iData[1]);
 8001316:	4912      	ldr	r1, [pc, #72]	; (8001360 <CS43_Start+0x80>)
 8001318:	2032      	movs	r0, #50	; 0x32
 800131a:	f7ff fdef 	bl	8000efc <write_register>
	// Write '0'b to bit 7 in register 0x32.
	read_register(CONFIG_32, &iData[1]);
 800131e:	4910      	ldr	r1, [pc, #64]	; (8001360 <CS43_Start+0x80>)
 8001320:	2032      	movs	r0, #50	; 0x32
 8001322:	f7ff fe09 	bl	8000f38 <read_register>
	iData[1] &= ~(0x80);
 8001326:	4b0d      	ldr	r3, [pc, #52]	; (800135c <CS43_Start+0x7c>)
 8001328:	785b      	ldrb	r3, [r3, #1]
 800132a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800132e:	b2da      	uxtb	r2, r3
 8001330:	4b0a      	ldr	r3, [pc, #40]	; (800135c <CS43_Start+0x7c>)
 8001332:	705a      	strb	r2, [r3, #1]
	write_register(CONFIG_32,&iData[1]);
 8001334:	490a      	ldr	r1, [pc, #40]	; (8001360 <CS43_Start+0x80>)
 8001336:	2032      	movs	r0, #50	; 0x32
 8001338:	f7ff fde0 	bl	8000efc <write_register>
	// Write 0x00 to register 0x00.
	iData[1] = 0x00;
 800133c:	4b07      	ldr	r3, [pc, #28]	; (800135c <CS43_Start+0x7c>)
 800133e:	2200      	movs	r2, #0
 8001340:	705a      	strb	r2, [r3, #1]
	write_register(CONFIG_00,&iData[1]);
 8001342:	4907      	ldr	r1, [pc, #28]	; (8001360 <CS43_Start+0x80>)
 8001344:	2000      	movs	r0, #0
 8001346:	f7ff fdd9 	bl	8000efc <write_register>
	//Set the "Power Ctl 1" register (0x02) to 0x9E
	iData[1] = 0x9E;
 800134a:	4b04      	ldr	r3, [pc, #16]	; (800135c <CS43_Start+0x7c>)
 800134c:	229e      	movs	r2, #158	; 0x9e
 800134e:	705a      	strb	r2, [r3, #1]
	write_register(POWER_CONTROL1,&iData[1]);
 8001350:	4903      	ldr	r1, [pc, #12]	; (8001360 <CS43_Start+0x80>)
 8001352:	2002      	movs	r0, #2
 8001354:	f7ff fdd2 	bl	8000efc <write_register>
}
 8001358:	bf00      	nop
 800135a:	bd80      	pop	{r7, pc}
 800135c:	20000608 	.word	0x20000608
 8001360:	20000609 	.word	0x20000609

08001364 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b082      	sub	sp, #8
 8001368:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800136a:	2300      	movs	r3, #0
 800136c:	607b      	str	r3, [r7, #4]
 800136e:	4b0c      	ldr	r3, [pc, #48]	; (80013a0 <MX_DMA_Init+0x3c>)
 8001370:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001372:	4a0b      	ldr	r2, [pc, #44]	; (80013a0 <MX_DMA_Init+0x3c>)
 8001374:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001378:	6313      	str	r3, [r2, #48]	; 0x30
 800137a:	4b09      	ldr	r3, [pc, #36]	; (80013a0 <MX_DMA_Init+0x3c>)
 800137c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800137e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001382:	607b      	str	r3, [r7, #4]
 8001384:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8001386:	2200      	movs	r2, #0
 8001388:	2100      	movs	r1, #0
 800138a:	2010      	movs	r0, #16
 800138c:	f001 fca0 	bl	8002cd0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001390:	2010      	movs	r0, #16
 8001392:	f001 fcc9 	bl	8002d28 <HAL_NVIC_EnableIRQ>

}
 8001396:	bf00      	nop
 8001398:	3708      	adds	r7, #8
 800139a:	46bd      	mov	sp, r7
 800139c:	bd80      	pop	{r7, pc}
 800139e:	bf00      	nop
 80013a0:	40023800 	.word	0x40023800

080013a4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b08c      	sub	sp, #48	; 0x30
 80013a8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013aa:	f107 031c 	add.w	r3, r7, #28
 80013ae:	2200      	movs	r2, #0
 80013b0:	601a      	str	r2, [r3, #0]
 80013b2:	605a      	str	r2, [r3, #4]
 80013b4:	609a      	str	r2, [r3, #8]
 80013b6:	60da      	str	r2, [r3, #12]
 80013b8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80013ba:	2300      	movs	r3, #0
 80013bc:	61bb      	str	r3, [r7, #24]
 80013be:	4b60      	ldr	r3, [pc, #384]	; (8001540 <MX_GPIO_Init+0x19c>)
 80013c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013c2:	4a5f      	ldr	r2, [pc, #380]	; (8001540 <MX_GPIO_Init+0x19c>)
 80013c4:	f043 0310 	orr.w	r3, r3, #16
 80013c8:	6313      	str	r3, [r2, #48]	; 0x30
 80013ca:	4b5d      	ldr	r3, [pc, #372]	; (8001540 <MX_GPIO_Init+0x19c>)
 80013cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ce:	f003 0310 	and.w	r3, r3, #16
 80013d2:	61bb      	str	r3, [r7, #24]
 80013d4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80013d6:	2300      	movs	r3, #0
 80013d8:	617b      	str	r3, [r7, #20]
 80013da:	4b59      	ldr	r3, [pc, #356]	; (8001540 <MX_GPIO_Init+0x19c>)
 80013dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013de:	4a58      	ldr	r2, [pc, #352]	; (8001540 <MX_GPIO_Init+0x19c>)
 80013e0:	f043 0304 	orr.w	r3, r3, #4
 80013e4:	6313      	str	r3, [r2, #48]	; 0x30
 80013e6:	4b56      	ldr	r3, [pc, #344]	; (8001540 <MX_GPIO_Init+0x19c>)
 80013e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ea:	f003 0304 	and.w	r3, r3, #4
 80013ee:	617b      	str	r3, [r7, #20]
 80013f0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80013f2:	2300      	movs	r3, #0
 80013f4:	613b      	str	r3, [r7, #16]
 80013f6:	4b52      	ldr	r3, [pc, #328]	; (8001540 <MX_GPIO_Init+0x19c>)
 80013f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013fa:	4a51      	ldr	r2, [pc, #324]	; (8001540 <MX_GPIO_Init+0x19c>)
 80013fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001400:	6313      	str	r3, [r2, #48]	; 0x30
 8001402:	4b4f      	ldr	r3, [pc, #316]	; (8001540 <MX_GPIO_Init+0x19c>)
 8001404:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001406:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800140a:	613b      	str	r3, [r7, #16]
 800140c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800140e:	2300      	movs	r3, #0
 8001410:	60fb      	str	r3, [r7, #12]
 8001412:	4b4b      	ldr	r3, [pc, #300]	; (8001540 <MX_GPIO_Init+0x19c>)
 8001414:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001416:	4a4a      	ldr	r2, [pc, #296]	; (8001540 <MX_GPIO_Init+0x19c>)
 8001418:	f043 0301 	orr.w	r3, r3, #1
 800141c:	6313      	str	r3, [r2, #48]	; 0x30
 800141e:	4b48      	ldr	r3, [pc, #288]	; (8001540 <MX_GPIO_Init+0x19c>)
 8001420:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001422:	f003 0301 	and.w	r3, r3, #1
 8001426:	60fb      	str	r3, [r7, #12]
 8001428:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800142a:	2300      	movs	r3, #0
 800142c:	60bb      	str	r3, [r7, #8]
 800142e:	4b44      	ldr	r3, [pc, #272]	; (8001540 <MX_GPIO_Init+0x19c>)
 8001430:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001432:	4a43      	ldr	r2, [pc, #268]	; (8001540 <MX_GPIO_Init+0x19c>)
 8001434:	f043 0302 	orr.w	r3, r3, #2
 8001438:	6313      	str	r3, [r2, #48]	; 0x30
 800143a:	4b41      	ldr	r3, [pc, #260]	; (8001540 <MX_GPIO_Init+0x19c>)
 800143c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800143e:	f003 0302 	and.w	r3, r3, #2
 8001442:	60bb      	str	r3, [r7, #8]
 8001444:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001446:	2300      	movs	r3, #0
 8001448:	607b      	str	r3, [r7, #4]
 800144a:	4b3d      	ldr	r3, [pc, #244]	; (8001540 <MX_GPIO_Init+0x19c>)
 800144c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800144e:	4a3c      	ldr	r2, [pc, #240]	; (8001540 <MX_GPIO_Init+0x19c>)
 8001450:	f043 0308 	orr.w	r3, r3, #8
 8001454:	6313      	str	r3, [r2, #48]	; 0x30
 8001456:	4b3a      	ldr	r3, [pc, #232]	; (8001540 <MX_GPIO_Init+0x19c>)
 8001458:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800145a:	f003 0308 	and.w	r3, r3, #8
 800145e:	607b      	str	r3, [r7, #4]
 8001460:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8001462:	2200      	movs	r2, #0
 8001464:	2108      	movs	r1, #8
 8001466:	4837      	ldr	r0, [pc, #220]	; (8001544 <MX_GPIO_Init+0x1a0>)
 8001468:	f002 fc3e 	bl	8003ce8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 800146c:	2201      	movs	r2, #1
 800146e:	2101      	movs	r1, #1
 8001470:	4835      	ldr	r0, [pc, #212]	; (8001548 <MX_GPIO_Init+0x1a4>)
 8001472:	f002 fc39 	bl	8003ce8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Audio_RST_GPIO_Port, Audio_RST_Pin, GPIO_PIN_RESET);
 8001476:	2200      	movs	r2, #0
 8001478:	2110      	movs	r1, #16
 800147a:	4834      	ldr	r0, [pc, #208]	; (800154c <MX_GPIO_Init+0x1a8>)
 800147c:	f002 fc34 	bl	8003ce8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DATA_Ready_Pin;
 8001480:	2304      	movs	r3, #4
 8001482:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001484:	2300      	movs	r3, #0
 8001486:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001488:	2300      	movs	r3, #0
 800148a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DATA_Ready_GPIO_Port, &GPIO_InitStruct);
 800148c:	f107 031c 	add.w	r3, r7, #28
 8001490:	4619      	mov	r1, r3
 8001492:	482c      	ldr	r0, [pc, #176]	; (8001544 <MX_GPIO_Init+0x1a0>)
 8001494:	f002 f980 	bl	8003798 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8001498:	2308      	movs	r3, #8
 800149a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800149c:	2301      	movs	r3, #1
 800149e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014a0:	2300      	movs	r3, #0
 80014a2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014a4:	2300      	movs	r3, #0
 80014a6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 80014a8:	f107 031c 	add.w	r3, r7, #28
 80014ac:	4619      	mov	r1, r3
 80014ae:	4825      	ldr	r0, [pc, #148]	; (8001544 <MX_GPIO_Init+0x1a0>)
 80014b0:	f002 f972 	bl	8003798 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = INT1_Pin|INT2_Pin|MEMS_INT2_Pin;
 80014b4:	2332      	movs	r3, #50	; 0x32
 80014b6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80014b8:	4b25      	ldr	r3, [pc, #148]	; (8001550 <MX_GPIO_Init+0x1ac>)
 80014ba:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014bc:	2300      	movs	r3, #0
 80014be:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80014c0:	f107 031c 	add.w	r3, r7, #28
 80014c4:	4619      	mov	r1, r3
 80014c6:	481f      	ldr	r0, [pc, #124]	; (8001544 <MX_GPIO_Init+0x1a0>)
 80014c8:	f002 f966 	bl	8003798 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80014cc:	2301      	movs	r3, #1
 80014ce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014d0:	2301      	movs	r3, #1
 80014d2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014d4:	2300      	movs	r3, #0
 80014d6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014d8:	2300      	movs	r3, #0
 80014da:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80014dc:	f107 031c 	add.w	r3, r7, #28
 80014e0:	4619      	mov	r1, r3
 80014e2:	4819      	ldr	r0, [pc, #100]	; (8001548 <MX_GPIO_Init+0x1a4>)
 80014e4:	f002 f958 	bl	8003798 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80014e8:	2301      	movs	r3, #1
 80014ea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80014ec:	4b18      	ldr	r3, [pc, #96]	; (8001550 <MX_GPIO_Init+0x1ac>)
 80014ee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014f0:	2300      	movs	r3, #0
 80014f2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014f4:	f107 031c 	add.w	r3, r7, #28
 80014f8:	4619      	mov	r1, r3
 80014fa:	4816      	ldr	r0, [pc, #88]	; (8001554 <MX_GPIO_Init+0x1b0>)
 80014fc:	f002 f94c 	bl	8003798 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD11 PDPin */
  GPIO_InitStruct.Pin = GPIO_PIN_11|OTG_FS_OverCurrent_Pin;
 8001500:	f44f 6302 	mov.w	r3, #2080	; 0x820
 8001504:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001506:	2300      	movs	r3, #0
 8001508:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800150a:	2300      	movs	r3, #0
 800150c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800150e:	f107 031c 	add.w	r3, r7, #28
 8001512:	4619      	mov	r1, r3
 8001514:	480d      	ldr	r0, [pc, #52]	; (800154c <MX_GPIO_Init+0x1a8>)
 8001516:	f002 f93f 	bl	8003798 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Audio_RST_Pin;
 800151a:	2310      	movs	r3, #16
 800151c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800151e:	2301      	movs	r3, #1
 8001520:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001522:	2300      	movs	r3, #0
 8001524:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001526:	2300      	movs	r3, #0
 8001528:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(Audio_RST_GPIO_Port, &GPIO_InitStruct);
 800152a:	f107 031c 	add.w	r3, r7, #28
 800152e:	4619      	mov	r1, r3
 8001530:	4806      	ldr	r0, [pc, #24]	; (800154c <MX_GPIO_Init+0x1a8>)
 8001532:	f002 f931 	bl	8003798 <HAL_GPIO_Init>

}
 8001536:	bf00      	nop
 8001538:	3730      	adds	r7, #48	; 0x30
 800153a:	46bd      	mov	sp, r7
 800153c:	bd80      	pop	{r7, pc}
 800153e:	bf00      	nop
 8001540:	40023800 	.word	0x40023800
 8001544:	40021000 	.word	0x40021000
 8001548:	40020800 	.word	0x40020800
 800154c:	40020c00 	.word	0x40020c00
 8001550:	10120000 	.word	0x10120000
 8001554:	40020000 	.word	0x40020000

08001558 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 800155c:	4b12      	ldr	r3, [pc, #72]	; (80015a8 <MX_I2C1_Init+0x50>)
 800155e:	4a13      	ldr	r2, [pc, #76]	; (80015ac <MX_I2C1_Init+0x54>)
 8001560:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001562:	4b11      	ldr	r3, [pc, #68]	; (80015a8 <MX_I2C1_Init+0x50>)
 8001564:	4a12      	ldr	r2, [pc, #72]	; (80015b0 <MX_I2C1_Init+0x58>)
 8001566:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001568:	4b0f      	ldr	r3, [pc, #60]	; (80015a8 <MX_I2C1_Init+0x50>)
 800156a:	2200      	movs	r2, #0
 800156c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800156e:	4b0e      	ldr	r3, [pc, #56]	; (80015a8 <MX_I2C1_Init+0x50>)
 8001570:	2200      	movs	r2, #0
 8001572:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001574:	4b0c      	ldr	r3, [pc, #48]	; (80015a8 <MX_I2C1_Init+0x50>)
 8001576:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800157a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800157c:	4b0a      	ldr	r3, [pc, #40]	; (80015a8 <MX_I2C1_Init+0x50>)
 800157e:	2200      	movs	r2, #0
 8001580:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001582:	4b09      	ldr	r3, [pc, #36]	; (80015a8 <MX_I2C1_Init+0x50>)
 8001584:	2200      	movs	r2, #0
 8001586:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001588:	4b07      	ldr	r3, [pc, #28]	; (80015a8 <MX_I2C1_Init+0x50>)
 800158a:	2200      	movs	r2, #0
 800158c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800158e:	4b06      	ldr	r3, [pc, #24]	; (80015a8 <MX_I2C1_Init+0x50>)
 8001590:	2200      	movs	r2, #0
 8001592:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001594:	4804      	ldr	r0, [pc, #16]	; (80015a8 <MX_I2C1_Init+0x50>)
 8001596:	f002 fbd9 	bl	8003d4c <HAL_I2C_Init>
 800159a:	4603      	mov	r3, r0
 800159c:	2b00      	cmp	r3, #0
 800159e:	d001      	beq.n	80015a4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80015a0:	f000 ff9a 	bl	80024d8 <Error_Handler>
  }

}
 80015a4:	bf00      	nop
 80015a6:	bd80      	pop	{r7, pc}
 80015a8:	2000067c 	.word	0x2000067c
 80015ac:	40005400 	.word	0x40005400
 80015b0:	000186a0 	.word	0x000186a0

080015b4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b08a      	sub	sp, #40	; 0x28
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015bc:	f107 0314 	add.w	r3, r7, #20
 80015c0:	2200      	movs	r2, #0
 80015c2:	601a      	str	r2, [r3, #0]
 80015c4:	605a      	str	r2, [r3, #4]
 80015c6:	609a      	str	r2, [r3, #8]
 80015c8:	60da      	str	r2, [r3, #12]
 80015ca:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	4a19      	ldr	r2, [pc, #100]	; (8001638 <HAL_I2C_MspInit+0x84>)
 80015d2:	4293      	cmp	r3, r2
 80015d4:	d12c      	bne.n	8001630 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015d6:	2300      	movs	r3, #0
 80015d8:	613b      	str	r3, [r7, #16]
 80015da:	4b18      	ldr	r3, [pc, #96]	; (800163c <HAL_I2C_MspInit+0x88>)
 80015dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015de:	4a17      	ldr	r2, [pc, #92]	; (800163c <HAL_I2C_MspInit+0x88>)
 80015e0:	f043 0302 	orr.w	r3, r3, #2
 80015e4:	6313      	str	r3, [r2, #48]	; 0x30
 80015e6:	4b15      	ldr	r3, [pc, #84]	; (800163c <HAL_I2C_MspInit+0x88>)
 80015e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ea:	f003 0302 	and.w	r3, r3, #2
 80015ee:	613b      	str	r3, [r7, #16]
 80015f0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 80015f2:	f44f 7310 	mov.w	r3, #576	; 0x240
 80015f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80015f8:	2312      	movs	r3, #18
 80015fa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80015fc:	2301      	movs	r3, #1
 80015fe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001600:	2300      	movs	r3, #0
 8001602:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001604:	2304      	movs	r3, #4
 8001606:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001608:	f107 0314 	add.w	r3, r7, #20
 800160c:	4619      	mov	r1, r3
 800160e:	480c      	ldr	r0, [pc, #48]	; (8001640 <HAL_I2C_MspInit+0x8c>)
 8001610:	f002 f8c2 	bl	8003798 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001614:	2300      	movs	r3, #0
 8001616:	60fb      	str	r3, [r7, #12]
 8001618:	4b08      	ldr	r3, [pc, #32]	; (800163c <HAL_I2C_MspInit+0x88>)
 800161a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800161c:	4a07      	ldr	r2, [pc, #28]	; (800163c <HAL_I2C_MspInit+0x88>)
 800161e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001622:	6413      	str	r3, [r2, #64]	; 0x40
 8001624:	4b05      	ldr	r3, [pc, #20]	; (800163c <HAL_I2C_MspInit+0x88>)
 8001626:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001628:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800162c:	60fb      	str	r3, [r7, #12]
 800162e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001630:	bf00      	nop
 8001632:	3728      	adds	r7, #40	; 0x28
 8001634:	46bd      	mov	sp, r7
 8001636:	bd80      	pop	{r7, pc}
 8001638:	40005400 	.word	0x40005400
 800163c:	40023800 	.word	0x40023800
 8001640:	40020400 	.word	0x40020400

08001644 <MX_I2S2_Init>:
I2S_HandleTypeDef hi2s3;
DMA_HandleTypeDef hdma_spi3_tx;

/* I2S2 init function */
void MX_I2S2_Init(void)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	af00      	add	r7, sp, #0

  hi2s2.Instance = SPI2;
 8001648:	4b12      	ldr	r3, [pc, #72]	; (8001694 <MX_I2S2_Init+0x50>)
 800164a:	4a13      	ldr	r2, [pc, #76]	; (8001698 <MX_I2S2_Init+0x54>)
 800164c:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_RX;
 800164e:	4b11      	ldr	r3, [pc, #68]	; (8001694 <MX_I2S2_Init+0x50>)
 8001650:	f44f 7240 	mov.w	r2, #768	; 0x300
 8001654:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 8001656:	4b0f      	ldr	r3, [pc, #60]	; (8001694 <MX_I2S2_Init+0x50>)
 8001658:	2200      	movs	r2, #0
 800165a:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_24B;
 800165c:	4b0d      	ldr	r3, [pc, #52]	; (8001694 <MX_I2S2_Init+0x50>)
 800165e:	2203      	movs	r2, #3
 8001660:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 8001662:	4b0c      	ldr	r3, [pc, #48]	; (8001694 <MX_I2S2_Init+0x50>)
 8001664:	2200      	movs	r2, #0
 8001666:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8001668:	4b0a      	ldr	r3, [pc, #40]	; (8001694 <MX_I2S2_Init+0x50>)
 800166a:	4a0c      	ldr	r2, [pc, #48]	; (800169c <MX_I2S2_Init+0x58>)
 800166c:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 800166e:	4b09      	ldr	r3, [pc, #36]	; (8001694 <MX_I2S2_Init+0x50>)
 8001670:	2200      	movs	r2, #0
 8001672:	619a      	str	r2, [r3, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 8001674:	4b07      	ldr	r3, [pc, #28]	; (8001694 <MX_I2S2_Init+0x50>)
 8001676:	2200      	movs	r2, #0
 8001678:	61da      	str	r2, [r3, #28]
  hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_ENABLE;
 800167a:	4b06      	ldr	r3, [pc, #24]	; (8001694 <MX_I2S2_Init+0x50>)
 800167c:	2201      	movs	r2, #1
 800167e:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 8001680:	4804      	ldr	r0, [pc, #16]	; (8001694 <MX_I2S2_Init+0x50>)
 8001682:	f003 fb75 	bl	8004d70 <HAL_I2S_Init>
 8001686:	4603      	mov	r3, r0
 8001688:	2b00      	cmp	r3, #0
 800168a:	d001      	beq.n	8001690 <MX_I2S2_Init+0x4c>
  {
    Error_Handler();
 800168c:	f000 ff24 	bl	80024d8 <Error_Handler>
  }

}
 8001690:	bf00      	nop
 8001692:	bd80      	pop	{r7, pc}
 8001694:	20000730 	.word	0x20000730
 8001698:	40003800 	.word	0x40003800
 800169c:	00017700 	.word	0x00017700

080016a0 <MX_I2S3_Init>:
/* I2S3 init function */
void MX_I2S3_Init(void)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	af00      	add	r7, sp, #0

  hi2s3.Instance = SPI3;
 80016a4:	4b13      	ldr	r3, [pc, #76]	; (80016f4 <MX_I2S3_Init+0x54>)
 80016a6:	4a14      	ldr	r2, [pc, #80]	; (80016f8 <MX_I2S3_Init+0x58>)
 80016a8:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 80016aa:	4b12      	ldr	r3, [pc, #72]	; (80016f4 <MX_I2S3_Init+0x54>)
 80016ac:	f44f 7200 	mov.w	r2, #512	; 0x200
 80016b0:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 80016b2:	4b10      	ldr	r3, [pc, #64]	; (80016f4 <MX_I2S3_Init+0x54>)
 80016b4:	2200      	movs	r2, #0
 80016b6:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_24B;
 80016b8:	4b0e      	ldr	r3, [pc, #56]	; (80016f4 <MX_I2S3_Init+0x54>)
 80016ba:	2203      	movs	r2, #3
 80016bc:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 80016be:	4b0d      	ldr	r3, [pc, #52]	; (80016f4 <MX_I2S3_Init+0x54>)
 80016c0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80016c4:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_48K;
 80016c6:	4b0b      	ldr	r3, [pc, #44]	; (80016f4 <MX_I2S3_Init+0x54>)
 80016c8:	f64b 3280 	movw	r2, #48000	; 0xbb80
 80016cc:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 80016ce:	4b09      	ldr	r3, [pc, #36]	; (80016f4 <MX_I2S3_Init+0x54>)
 80016d0:	2200      	movs	r2, #0
 80016d2:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 80016d4:	4b07      	ldr	r3, [pc, #28]	; (80016f4 <MX_I2S3_Init+0x54>)
 80016d6:	2200      	movs	r2, #0
 80016d8:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 80016da:	4b06      	ldr	r3, [pc, #24]	; (80016f4 <MX_I2S3_Init+0x54>)
 80016dc:	2200      	movs	r2, #0
 80016de:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 80016e0:	4804      	ldr	r0, [pc, #16]	; (80016f4 <MX_I2S3_Init+0x54>)
 80016e2:	f003 fb45 	bl	8004d70 <HAL_I2S_Init>
 80016e6:	4603      	mov	r3, r0
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d001      	beq.n	80016f0 <MX_I2S3_Init+0x50>
  {
    Error_Handler();
 80016ec:	f000 fef4 	bl	80024d8 <Error_Handler>
  }

}
 80016f0:	bf00      	nop
 80016f2:	bd80      	pop	{r7, pc}
 80016f4:	20000778 	.word	0x20000778
 80016f8:	40003c00 	.word	0x40003c00

080016fc <HAL_I2S_MspInit>:

void HAL_I2S_MspInit(I2S_HandleTypeDef* i2sHandle)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b08e      	sub	sp, #56	; 0x38
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001704:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001708:	2200      	movs	r2, #0
 800170a:	601a      	str	r2, [r3, #0]
 800170c:	605a      	str	r2, [r3, #4]
 800170e:	609a      	str	r2, [r3, #8]
 8001710:	60da      	str	r2, [r3, #12]
 8001712:	611a      	str	r2, [r3, #16]
  if(i2sHandle->Instance==SPI2)
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	4a79      	ldr	r2, [pc, #484]	; (8001900 <HAL_I2S_MspInit+0x204>)
 800171a:	4293      	cmp	r3, r2
 800171c:	d163      	bne.n	80017e6 <HAL_I2S_MspInit+0xea>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* I2S2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800171e:	2300      	movs	r3, #0
 8001720:	623b      	str	r3, [r7, #32]
 8001722:	4b78      	ldr	r3, [pc, #480]	; (8001904 <HAL_I2S_MspInit+0x208>)
 8001724:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001726:	4a77      	ldr	r2, [pc, #476]	; (8001904 <HAL_I2S_MspInit+0x208>)
 8001728:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800172c:	6413      	str	r3, [r2, #64]	; 0x40
 800172e:	4b75      	ldr	r3, [pc, #468]	; (8001904 <HAL_I2S_MspInit+0x208>)
 8001730:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001732:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001736:	623b      	str	r3, [r7, #32]
 8001738:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800173a:	2300      	movs	r3, #0
 800173c:	61fb      	str	r3, [r7, #28]
 800173e:	4b71      	ldr	r3, [pc, #452]	; (8001904 <HAL_I2S_MspInit+0x208>)
 8001740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001742:	4a70      	ldr	r2, [pc, #448]	; (8001904 <HAL_I2S_MspInit+0x208>)
 8001744:	f043 0304 	orr.w	r3, r3, #4
 8001748:	6313      	str	r3, [r2, #48]	; 0x30
 800174a:	4b6e      	ldr	r3, [pc, #440]	; (8001904 <HAL_I2S_MspInit+0x208>)
 800174c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800174e:	f003 0304 	and.w	r3, r3, #4
 8001752:	61fb      	str	r3, [r7, #28]
 8001754:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001756:	2300      	movs	r3, #0
 8001758:	61bb      	str	r3, [r7, #24]
 800175a:	4b6a      	ldr	r3, [pc, #424]	; (8001904 <HAL_I2S_MspInit+0x208>)
 800175c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800175e:	4a69      	ldr	r2, [pc, #420]	; (8001904 <HAL_I2S_MspInit+0x208>)
 8001760:	f043 0302 	orr.w	r3, r3, #2
 8001764:	6313      	str	r3, [r2, #48]	; 0x30
 8001766:	4b67      	ldr	r3, [pc, #412]	; (8001904 <HAL_I2S_MspInit+0x208>)
 8001768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800176a:	f003 0302 	and.w	r3, r3, #2
 800176e:	61bb      	str	r3, [r7, #24]
 8001770:	69bb      	ldr	r3, [r7, #24]
    PC2     ------> I2S2_ext_SD
    PC3     ------> I2S2_SD
    PB10     ------> I2S2_CK
    PB12     ------> I2S2_WS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001772:	2304      	movs	r3, #4
 8001774:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001776:	2302      	movs	r3, #2
 8001778:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800177a:	2300      	movs	r3, #0
 800177c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800177e:	2300      	movs	r3, #0
 8001780:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_I2S2ext;
 8001782:	2306      	movs	r3, #6
 8001784:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001786:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800178a:	4619      	mov	r1, r3
 800178c:	485e      	ldr	r0, [pc, #376]	; (8001908 <HAL_I2S_MspInit+0x20c>)
 800178e:	f002 f803 	bl	8003798 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8001792:	2308      	movs	r3, #8
 8001794:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001796:	2302      	movs	r3, #2
 8001798:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800179a:	2300      	movs	r3, #0
 800179c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800179e:	2300      	movs	r3, #0
 80017a0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80017a2:	2305      	movs	r3, #5
 80017a4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 80017a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017aa:	4619      	mov	r1, r3
 80017ac:	4856      	ldr	r0, [pc, #344]	; (8001908 <HAL_I2S_MspInit+0x20c>)
 80017ae:	f001 fff3 	bl	8003798 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CLK_IN_Pin|GPIO_PIN_12;
 80017b2:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80017b6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017b8:	2302      	movs	r3, #2
 80017ba:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017bc:	2300      	movs	r3, #0
 80017be:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017c0:	2300      	movs	r3, #0
 80017c2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80017c4:	2305      	movs	r3, #5
 80017c6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017cc:	4619      	mov	r1, r3
 80017ce:	484f      	ldr	r0, [pc, #316]	; (800190c <HAL_I2S_MspInit+0x210>)
 80017d0:	f001 ffe2 	bl	8003798 <HAL_GPIO_Init>

    /* I2S2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 80017d4:	2200      	movs	r2, #0
 80017d6:	2100      	movs	r1, #0
 80017d8:	2024      	movs	r0, #36	; 0x24
 80017da:	f001 fa79 	bl	8002cd0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 80017de:	2024      	movs	r0, #36	; 0x24
 80017e0:	f001 faa2 	bl	8002d28 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 80017e4:	e088      	b.n	80018f8 <HAL_I2S_MspInit+0x1fc>
  else if(i2sHandle->Instance==SPI3)
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	4a49      	ldr	r2, [pc, #292]	; (8001910 <HAL_I2S_MspInit+0x214>)
 80017ec:	4293      	cmp	r3, r2
 80017ee:	f040 8083 	bne.w	80018f8 <HAL_I2S_MspInit+0x1fc>
    __HAL_RCC_SPI3_CLK_ENABLE();
 80017f2:	2300      	movs	r3, #0
 80017f4:	617b      	str	r3, [r7, #20]
 80017f6:	4b43      	ldr	r3, [pc, #268]	; (8001904 <HAL_I2S_MspInit+0x208>)
 80017f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017fa:	4a42      	ldr	r2, [pc, #264]	; (8001904 <HAL_I2S_MspInit+0x208>)
 80017fc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001800:	6413      	str	r3, [r2, #64]	; 0x40
 8001802:	4b40      	ldr	r3, [pc, #256]	; (8001904 <HAL_I2S_MspInit+0x208>)
 8001804:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001806:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800180a:	617b      	str	r3, [r7, #20]
 800180c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800180e:	2300      	movs	r3, #0
 8001810:	613b      	str	r3, [r7, #16]
 8001812:	4b3c      	ldr	r3, [pc, #240]	; (8001904 <HAL_I2S_MspInit+0x208>)
 8001814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001816:	4a3b      	ldr	r2, [pc, #236]	; (8001904 <HAL_I2S_MspInit+0x208>)
 8001818:	f043 0301 	orr.w	r3, r3, #1
 800181c:	6313      	str	r3, [r2, #48]	; 0x30
 800181e:	4b39      	ldr	r3, [pc, #228]	; (8001904 <HAL_I2S_MspInit+0x208>)
 8001820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001822:	f003 0301 	and.w	r3, r3, #1
 8001826:	613b      	str	r3, [r7, #16]
 8001828:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800182a:	2300      	movs	r3, #0
 800182c:	60fb      	str	r3, [r7, #12]
 800182e:	4b35      	ldr	r3, [pc, #212]	; (8001904 <HAL_I2S_MspInit+0x208>)
 8001830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001832:	4a34      	ldr	r2, [pc, #208]	; (8001904 <HAL_I2S_MspInit+0x208>)
 8001834:	f043 0304 	orr.w	r3, r3, #4
 8001838:	6313      	str	r3, [r2, #48]	; 0x30
 800183a:	4b32      	ldr	r3, [pc, #200]	; (8001904 <HAL_I2S_MspInit+0x208>)
 800183c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800183e:	f003 0304 	and.w	r3, r3, #4
 8001842:	60fb      	str	r3, [r7, #12]
 8001844:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8001846:	2310      	movs	r3, #16
 8001848:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800184a:	2302      	movs	r3, #2
 800184c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800184e:	2300      	movs	r3, #0
 8001850:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001852:	2300      	movs	r3, #0
 8001854:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001856:	2306      	movs	r3, #6
 8001858:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 800185a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800185e:	4619      	mov	r1, r3
 8001860:	482c      	ldr	r0, [pc, #176]	; (8001914 <HAL_I2S_MspInit+0x218>)
 8001862:	f001 ff99 	bl	8003798 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8001866:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 800186a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800186c:	2302      	movs	r3, #2
 800186e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001870:	2300      	movs	r3, #0
 8001872:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001874:	2300      	movs	r3, #0
 8001876:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001878:	2306      	movs	r3, #6
 800187a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800187c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001880:	4619      	mov	r1, r3
 8001882:	4821      	ldr	r0, [pc, #132]	; (8001908 <HAL_I2S_MspInit+0x20c>)
 8001884:	f001 ff88 	bl	8003798 <HAL_GPIO_Init>
    hdma_spi3_tx.Instance = DMA1_Stream5;
 8001888:	4b23      	ldr	r3, [pc, #140]	; (8001918 <HAL_I2S_MspInit+0x21c>)
 800188a:	4a24      	ldr	r2, [pc, #144]	; (800191c <HAL_I2S_MspInit+0x220>)
 800188c:	601a      	str	r2, [r3, #0]
    hdma_spi3_tx.Init.Channel = DMA_CHANNEL_0;
 800188e:	4b22      	ldr	r3, [pc, #136]	; (8001918 <HAL_I2S_MspInit+0x21c>)
 8001890:	2200      	movs	r2, #0
 8001892:	605a      	str	r2, [r3, #4]
    hdma_spi3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001894:	4b20      	ldr	r3, [pc, #128]	; (8001918 <HAL_I2S_MspInit+0x21c>)
 8001896:	2240      	movs	r2, #64	; 0x40
 8001898:	609a      	str	r2, [r3, #8]
    hdma_spi3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800189a:	4b1f      	ldr	r3, [pc, #124]	; (8001918 <HAL_I2S_MspInit+0x21c>)
 800189c:	2200      	movs	r2, #0
 800189e:	60da      	str	r2, [r3, #12]
    hdma_spi3_tx.Init.MemInc = DMA_MINC_ENABLE;
 80018a0:	4b1d      	ldr	r3, [pc, #116]	; (8001918 <HAL_I2S_MspInit+0x21c>)
 80018a2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80018a6:	611a      	str	r2, [r3, #16]
    hdma_spi3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80018a8:	4b1b      	ldr	r3, [pc, #108]	; (8001918 <HAL_I2S_MspInit+0x21c>)
 80018aa:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80018ae:	615a      	str	r2, [r3, #20]
    hdma_spi3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80018b0:	4b19      	ldr	r3, [pc, #100]	; (8001918 <HAL_I2S_MspInit+0x21c>)
 80018b2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80018b6:	619a      	str	r2, [r3, #24]
    hdma_spi3_tx.Init.Mode = DMA_CIRCULAR;
 80018b8:	4b17      	ldr	r3, [pc, #92]	; (8001918 <HAL_I2S_MspInit+0x21c>)
 80018ba:	f44f 7280 	mov.w	r2, #256	; 0x100
 80018be:	61da      	str	r2, [r3, #28]
    hdma_spi3_tx.Init.Priority = DMA_PRIORITY_LOW;
 80018c0:	4b15      	ldr	r3, [pc, #84]	; (8001918 <HAL_I2S_MspInit+0x21c>)
 80018c2:	2200      	movs	r2, #0
 80018c4:	621a      	str	r2, [r3, #32]
    hdma_spi3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80018c6:	4b14      	ldr	r3, [pc, #80]	; (8001918 <HAL_I2S_MspInit+0x21c>)
 80018c8:	2200      	movs	r2, #0
 80018ca:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi3_tx) != HAL_OK)
 80018cc:	4812      	ldr	r0, [pc, #72]	; (8001918 <HAL_I2S_MspInit+0x21c>)
 80018ce:	f001 fa79 	bl	8002dc4 <HAL_DMA_Init>
 80018d2:	4603      	mov	r3, r0
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d001      	beq.n	80018dc <HAL_I2S_MspInit+0x1e0>
      Error_Handler();
 80018d8:	f000 fdfe 	bl	80024d8 <Error_Handler>
    __HAL_LINKDMA(i2sHandle,hdmatx,hdma_spi3_tx);
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	4a0e      	ldr	r2, [pc, #56]	; (8001918 <HAL_I2S_MspInit+0x21c>)
 80018e0:	639a      	str	r2, [r3, #56]	; 0x38
 80018e2:	4a0d      	ldr	r2, [pc, #52]	; (8001918 <HAL_I2S_MspInit+0x21c>)
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(SPI3_IRQn, 0, 0);
 80018e8:	2200      	movs	r2, #0
 80018ea:	2100      	movs	r1, #0
 80018ec:	2033      	movs	r0, #51	; 0x33
 80018ee:	f001 f9ef 	bl	8002cd0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
 80018f2:	2033      	movs	r0, #51	; 0x33
 80018f4:	f001 fa18 	bl	8002d28 <HAL_NVIC_EnableIRQ>
}
 80018f8:	bf00      	nop
 80018fa:	3738      	adds	r7, #56	; 0x38
 80018fc:	46bd      	mov	sp, r7
 80018fe:	bd80      	pop	{r7, pc}
 8001900:	40003800 	.word	0x40003800
 8001904:	40023800 	.word	0x40023800
 8001908:	40020800 	.word	0x40020800
 800190c:	40020400 	.word	0x40020400
 8001910:	40003c00 	.word	0x40003c00
 8001914:	40020000 	.word	0x40020000
 8001918:	200006d0 	.word	0x200006d0
 800191c:	40026088 	.word	0x40026088

08001920 <FFT>:

#define  NUMBER_IS_2_POW_K(x)   ((!((x)&((x)-1)))&&((x)>1))  // x is pow(2, k), k=1,2, ...
#define  FT_DIRECT        -1    // Direct transform.
#define  FT_INVERSE        1    // Inverse transform.

bool FFT(float *Rdat, float *Idat, int N, int LogN, int Ft_Flag) {
 8001920:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
 8001924:	b08f      	sub	sp, #60	; 0x3c
 8001926:	af00      	add	r7, sp, #0
 8001928:	60f8      	str	r0, [r7, #12]
 800192a:	60b9      	str	r1, [r7, #8]
 800192c:	607a      	str	r2, [r7, #4]
 800192e:	603b      	str	r3, [r7, #0]
    // parameters error check:
    if ((Rdat == NULL) || (Idat == NULL)) return false;
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	2b00      	cmp	r3, #0
 8001934:	d002      	beq.n	800193c <FFT+0x1c>
 8001936:	68bb      	ldr	r3, [r7, #8]
 8001938:	2b00      	cmp	r3, #0
 800193a:	d101      	bne.n	8001940 <FFT+0x20>
 800193c:	2300      	movs	r3, #0
 800193e:	e172      	b.n	8001c26 <FFT+0x306>
    if ((N > 16384) || (N < 1)) return false;
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001946:	dc02      	bgt.n	800194e <FFT+0x2e>
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	2b00      	cmp	r3, #0
 800194c:	dc01      	bgt.n	8001952 <FFT+0x32>
 800194e:	2300      	movs	r3, #0
 8001950:	e169      	b.n	8001c26 <FFT+0x306>
    if (!NUMBER_IS_2_POW_K(N)) return false;
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	1e5a      	subs	r2, r3, #1
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	4013      	ands	r3, r2
 800195a:	2b00      	cmp	r3, #0
 800195c:	d102      	bne.n	8001964 <FFT+0x44>
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	2b01      	cmp	r3, #1
 8001962:	dc01      	bgt.n	8001968 <FFT+0x48>
 8001964:	2300      	movs	r3, #0
 8001966:	e15e      	b.n	8001c26 <FFT+0x306>
    if ((LogN < 2) || (LogN > 14)) return false;
 8001968:	683b      	ldr	r3, [r7, #0]
 800196a:	2b01      	cmp	r3, #1
 800196c:	dd02      	ble.n	8001974 <FFT+0x54>
 800196e:	683b      	ldr	r3, [r7, #0]
 8001970:	2b0e      	cmp	r3, #14
 8001972:	dd01      	ble.n	8001978 <FFT+0x58>
 8001974:	2300      	movs	r3, #0
 8001976:	e156      	b.n	8001c26 <FFT+0x306>
    if ((Ft_Flag != FT_DIRECT) && (Ft_Flag != FT_INVERSE)) return false;
 8001978:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800197a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800197e:	d004      	beq.n	800198a <FFT+0x6a>
 8001980:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001982:	2b01      	cmp	r3, #1
 8001984:	d001      	beq.n	800198a <FFT+0x6a>
 8001986:	2300      	movs	r3, #0
 8001988:	e14d      	b.n	8001c26 <FFT+0x306>
             -0.0490676743274180F, -0.0245412285229122F, -0.0122715382857199F,
             -0.0061358846491544F, -0.0030679567629659F, -0.0015339801862847F,
             -0.0007669903187427F, -0.0003834951875714F
            };

    nn = N >> 1;
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	ea4f 0a63 	mov.w	sl, r3, asr #1
    ie = N;
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	4619      	mov	r1, r3
    for (n = 1; n <= LogN; n++) {
 8001994:	f04f 0801 	mov.w	r8, #1
 8001998:	e0ca      	b.n	8001b30 <FFT+0x210>
        rw = Rcoef[LogN - n];
 800199a:	683b      	ldr	r3, [r7, #0]
 800199c:	eba3 0308 	sub.w	r3, r3, r8
 80019a0:	4aa4      	ldr	r2, [pc, #656]	; (8001c34 <FFT+0x314>)
 80019a2:	009b      	lsls	r3, r3, #2
 80019a4:	4413      	add	r3, r2
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	62bb      	str	r3, [r7, #40]	; 0x28
        iw = Icoef[LogN - n];
 80019aa:	683b      	ldr	r3, [r7, #0]
 80019ac:	eba3 0308 	sub.w	r3, r3, r8
 80019b0:	4aa1      	ldr	r2, [pc, #644]	; (8001c38 <FFT+0x318>)
 80019b2:	009b      	lsls	r3, r3, #2
 80019b4:	4413      	add	r3, r2
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (Ft_Flag == FT_INVERSE) iw = -iw;
 80019ba:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80019bc:	2b01      	cmp	r3, #1
 80019be:	d105      	bne.n	80019cc <FFT+0xac>
 80019c0:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80019c4:	eef1 7a67 	vneg.f32	s15, s15
 80019c8:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
        in = ie >> 1;
 80019cc:	460b      	mov	r3, r1
 80019ce:	105e      	asrs	r6, r3, #1
        ru = 1.0F;
 80019d0:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80019d4:	637b      	str	r3, [r7, #52]	; 0x34
        iu = 0.0F;
 80019d6:	f04f 0300 	mov.w	r3, #0
 80019da:	633b      	str	r3, [r7, #48]	; 0x30
        for (j = 0; j < in; j++) {
 80019dc:	2500      	movs	r5, #0
 80019de:	e09f      	b.n	8001b20 <FFT+0x200>
            for (i = j; i < N; i += ie) {
 80019e0:	462c      	mov	r4, r5
 80019e2:	e077      	b.n	8001ad4 <FFT+0x1b4>
                io = i + in;
 80019e4:	eb04 0906 	add.w	r9, r4, r6
                rtp = Rdat[i] + Rdat[io];
 80019e8:	4623      	mov	r3, r4
 80019ea:	009b      	lsls	r3, r3, #2
 80019ec:	68fa      	ldr	r2, [r7, #12]
 80019ee:	4413      	add	r3, r2
 80019f0:	ed93 7a00 	vldr	s14, [r3]
 80019f4:	464b      	mov	r3, r9
 80019f6:	009b      	lsls	r3, r3, #2
 80019f8:	68fa      	ldr	r2, [r7, #12]
 80019fa:	4413      	add	r3, r2
 80019fc:	edd3 7a00 	vldr	s15, [r3]
 8001a00:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a04:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                itp = Idat[i] + Idat[io];
 8001a08:	4623      	mov	r3, r4
 8001a0a:	009b      	lsls	r3, r3, #2
 8001a0c:	68ba      	ldr	r2, [r7, #8]
 8001a0e:	4413      	add	r3, r2
 8001a10:	ed93 7a00 	vldr	s14, [r3]
 8001a14:	464b      	mov	r3, r9
 8001a16:	009b      	lsls	r3, r3, #2
 8001a18:	68ba      	ldr	r2, [r7, #8]
 8001a1a:	4413      	add	r3, r2
 8001a1c:	edd3 7a00 	vldr	s15, [r3]
 8001a20:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a24:	edc7 7a08 	vstr	s15, [r7, #32]
                rtq = Rdat[i] - Rdat[io];
 8001a28:	4623      	mov	r3, r4
 8001a2a:	009b      	lsls	r3, r3, #2
 8001a2c:	68fa      	ldr	r2, [r7, #12]
 8001a2e:	4413      	add	r3, r2
 8001a30:	ed93 7a00 	vldr	s14, [r3]
 8001a34:	464b      	mov	r3, r9
 8001a36:	009b      	lsls	r3, r3, #2
 8001a38:	68fa      	ldr	r2, [r7, #12]
 8001a3a:	4413      	add	r3, r2
 8001a3c:	edd3 7a00 	vldr	s15, [r3]
 8001a40:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001a44:	edc7 7a06 	vstr	s15, [r7, #24]
                itq = Idat[i] - Idat[io];
 8001a48:	4623      	mov	r3, r4
 8001a4a:	009b      	lsls	r3, r3, #2
 8001a4c:	68ba      	ldr	r2, [r7, #8]
 8001a4e:	4413      	add	r3, r2
 8001a50:	ed93 7a00 	vldr	s14, [r3]
 8001a54:	464b      	mov	r3, r9
 8001a56:	009b      	lsls	r3, r3, #2
 8001a58:	68ba      	ldr	r2, [r7, #8]
 8001a5a:	4413      	add	r3, r2
 8001a5c:	edd3 7a00 	vldr	s15, [r3]
 8001a60:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001a64:	edc7 7a05 	vstr	s15, [r7, #20]
                Rdat[io] = rtq * ru - itq * iu;
 8001a68:	ed97 7a06 	vldr	s14, [r7, #24]
 8001a6c:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8001a70:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001a74:	edd7 6a05 	vldr	s13, [r7, #20]
 8001a78:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8001a7c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001a80:	464b      	mov	r3, r9
 8001a82:	009b      	lsls	r3, r3, #2
 8001a84:	68fa      	ldr	r2, [r7, #12]
 8001a86:	4413      	add	r3, r2
 8001a88:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001a8c:	edc3 7a00 	vstr	s15, [r3]
                Idat[io] = itq * ru + rtq * iu;
 8001a90:	ed97 7a05 	vldr	s14, [r7, #20]
 8001a94:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8001a98:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001a9c:	edd7 6a06 	vldr	s13, [r7, #24]
 8001aa0:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8001aa4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001aa8:	464b      	mov	r3, r9
 8001aaa:	009b      	lsls	r3, r3, #2
 8001aac:	68ba      	ldr	r2, [r7, #8]
 8001aae:	4413      	add	r3, r2
 8001ab0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ab4:	edc3 7a00 	vstr	s15, [r3]
                Rdat[i] = rtp;
 8001ab8:	4623      	mov	r3, r4
 8001aba:	009b      	lsls	r3, r3, #2
 8001abc:	68fa      	ldr	r2, [r7, #12]
 8001abe:	4413      	add	r3, r2
 8001ac0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ac2:	601a      	str	r2, [r3, #0]
                Idat[i] = itp;
 8001ac4:	4623      	mov	r3, r4
 8001ac6:	009b      	lsls	r3, r3, #2
 8001ac8:	68ba      	ldr	r2, [r7, #8]
 8001aca:	4413      	add	r3, r2
 8001acc:	6a3a      	ldr	r2, [r7, #32]
 8001ace:	601a      	str	r2, [r3, #0]
            for (i = j; i < N; i += ie) {
 8001ad0:	460b      	mov	r3, r1
 8001ad2:	441c      	add	r4, r3
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	429c      	cmp	r4, r3
 8001ad8:	db84      	blt.n	80019e4 <FFT+0xc4>
            }

            sr = ru;
 8001ada:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001adc:	61fb      	str	r3, [r7, #28]
            ru = ru * rw - iu * iw;
 8001ade:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8001ae2:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8001ae6:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001aea:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 8001aee:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001af2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001af6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001afa:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
            iu = iu * rw + sr * iw;
 8001afe:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8001b02:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8001b06:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001b0a:	edd7 6a07 	vldr	s13, [r7, #28]
 8001b0e:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001b12:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001b16:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b1a:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
        for (j = 0; j < in; j++) {
 8001b1e:	3501      	adds	r5, #1
 8001b20:	42b5      	cmp	r5, r6
 8001b22:	f6ff af5d 	blt.w	80019e0 <FFT+0xc0>
        }

        ie >>= 1;
 8001b26:	460b      	mov	r3, r1
 8001b28:	105b      	asrs	r3, r3, #1
 8001b2a:	4619      	mov	r1, r3
    for (n = 1; n <= LogN; n++) {
 8001b2c:	f108 0801 	add.w	r8, r8, #1
 8001b30:	683b      	ldr	r3, [r7, #0]
 8001b32:	4598      	cmp	r8, r3
 8001b34:	f77f af31 	ble.w	800199a <FFT+0x7a>
    }

    for (j = i = 1; i < N; i++) {
 8001b38:	2401      	movs	r4, #1
 8001b3a:	4625      	mov	r5, r4
 8001b3c:	e038      	b.n	8001bb0 <FFT+0x290>
        if (i < j) {
 8001b3e:	42ac      	cmp	r4, r5
 8001b40:	da2e      	bge.n	8001ba0 <FFT+0x280>
            io = i - 1;
 8001b42:	f104 39ff 	add.w	r9, r4, #4294967295
            in = j - 1;
 8001b46:	1e6e      	subs	r6, r5, #1
            rtp = Rdat[in];
 8001b48:	4633      	mov	r3, r6
 8001b4a:	009b      	lsls	r3, r3, #2
 8001b4c:	68fa      	ldr	r2, [r7, #12]
 8001b4e:	4413      	add	r3, r2
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	627b      	str	r3, [r7, #36]	; 0x24
            itp = Idat[in];
 8001b54:	4633      	mov	r3, r6
 8001b56:	009b      	lsls	r3, r3, #2
 8001b58:	68ba      	ldr	r2, [r7, #8]
 8001b5a:	4413      	add	r3, r2
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	623b      	str	r3, [r7, #32]
            Rdat[in] = Rdat[io];
 8001b60:	464b      	mov	r3, r9
 8001b62:	009b      	lsls	r3, r3, #2
 8001b64:	68fa      	ldr	r2, [r7, #12]
 8001b66:	441a      	add	r2, r3
 8001b68:	4633      	mov	r3, r6
 8001b6a:	009b      	lsls	r3, r3, #2
 8001b6c:	68f9      	ldr	r1, [r7, #12]
 8001b6e:	440b      	add	r3, r1
 8001b70:	6812      	ldr	r2, [r2, #0]
 8001b72:	601a      	str	r2, [r3, #0]
            Idat[in] = Idat[io];
 8001b74:	464b      	mov	r3, r9
 8001b76:	009b      	lsls	r3, r3, #2
 8001b78:	68ba      	ldr	r2, [r7, #8]
 8001b7a:	441a      	add	r2, r3
 8001b7c:	4633      	mov	r3, r6
 8001b7e:	009b      	lsls	r3, r3, #2
 8001b80:	68b9      	ldr	r1, [r7, #8]
 8001b82:	440b      	add	r3, r1
 8001b84:	6812      	ldr	r2, [r2, #0]
 8001b86:	601a      	str	r2, [r3, #0]
            Rdat[io] = rtp;
 8001b88:	464b      	mov	r3, r9
 8001b8a:	009b      	lsls	r3, r3, #2
 8001b8c:	68fa      	ldr	r2, [r7, #12]
 8001b8e:	4413      	add	r3, r2
 8001b90:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b92:	601a      	str	r2, [r3, #0]
            Idat[io] = itp;
 8001b94:	464b      	mov	r3, r9
 8001b96:	009b      	lsls	r3, r3, #2
 8001b98:	68ba      	ldr	r2, [r7, #8]
 8001b9a:	4413      	add	r3, r2
 8001b9c:	6a3a      	ldr	r2, [r7, #32]
 8001b9e:	601a      	str	r2, [r3, #0]
        }

        k = nn;
 8001ba0:	4656      	mov	r6, sl

        while (k < j) {
 8001ba2:	e001      	b.n	8001ba8 <FFT+0x288>
            j = j - k;
 8001ba4:	1bad      	subs	r5, r5, r6
            k >>= 1;
 8001ba6:	1076      	asrs	r6, r6, #1
        while (k < j) {
 8001ba8:	42ae      	cmp	r6, r5
 8001baa:	dbfb      	blt.n	8001ba4 <FFT+0x284>
        }

        j = j + k;
 8001bac:	4435      	add	r5, r6
    for (j = i = 1; i < N; i++) {
 8001bae:	3401      	adds	r4, #1
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	429c      	cmp	r4, r3
 8001bb4:	dbc3      	blt.n	8001b3e <FFT+0x21e>
    }

    if (Ft_Flag == FT_DIRECT) return true;
 8001bb6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001bb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001bbc:	d101      	bne.n	8001bc2 <FFT+0x2a2>
 8001bbe:	2301      	movs	r3, #1
 8001bc0:	e031      	b.n	8001c26 <FFT+0x306>

    rw = 1.0F / N;
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	ee07 3a90 	vmov	s15, r3
 8001bc8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001bcc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001bd0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001bd4:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28

    for (i = 0; i < N; i++) {
 8001bd8:	2400      	movs	r4, #0
 8001bda:	e020      	b.n	8001c1e <FFT+0x2fe>
        Rdat[i] *= rw;
 8001bdc:	4623      	mov	r3, r4
 8001bde:	009b      	lsls	r3, r3, #2
 8001be0:	68fa      	ldr	r2, [r7, #12]
 8001be2:	4413      	add	r3, r2
 8001be4:	ed93 7a00 	vldr	s14, [r3]
 8001be8:	4623      	mov	r3, r4
 8001bea:	009b      	lsls	r3, r3, #2
 8001bec:	68fa      	ldr	r2, [r7, #12]
 8001bee:	4413      	add	r3, r2
 8001bf0:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8001bf4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001bf8:	edc3 7a00 	vstr	s15, [r3]
        Idat[i] *= rw;
 8001bfc:	4623      	mov	r3, r4
 8001bfe:	009b      	lsls	r3, r3, #2
 8001c00:	68ba      	ldr	r2, [r7, #8]
 8001c02:	4413      	add	r3, r2
 8001c04:	ed93 7a00 	vldr	s14, [r3]
 8001c08:	4623      	mov	r3, r4
 8001c0a:	009b      	lsls	r3, r3, #2
 8001c0c:	68ba      	ldr	r2, [r7, #8]
 8001c0e:	4413      	add	r3, r2
 8001c10:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8001c14:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c18:	edc3 7a00 	vstr	s15, [r3]
    for (i = 0; i < N; i++) {
 8001c1c:	3401      	adds	r4, #1
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	429c      	cmp	r4, r3
 8001c22:	dbdb      	blt.n	8001bdc <FFT+0x2bc>
    }

    return true;
 8001c24:	2301      	movs	r3, #1
}
 8001c26:	4618      	mov	r0, r3
 8001c28:	373c      	adds	r7, #60	; 0x3c
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
 8001c30:	4770      	bx	lr
 8001c32:	bf00      	nop
 8001c34:	08010024 	.word	0x08010024
 8001c38:	0801005c 	.word	0x0801005c
 8001c3c:	00000000 	.word	0x00000000

08001c40 <get_db>:
int min(int a,int b){
	if(a>b) return b;
	return a;
}

double get_db(){
 8001c40:	b590      	push	{r4, r7, lr}
 8001c42:	b085      	sub	sp, #20
 8001c44:	af00      	add	r7, sp, #0
	double sum = 0;
 8001c46:	f04f 0300 	mov.w	r3, #0
 8001c4a:	f04f 0400 	mov.w	r4, #0
 8001c4e:	e9c7 3402 	strd	r3, r4, [r7, #8]
	for(int i=1;i<512;i++){
 8001c52:	2301      	movs	r3, #1
 8001c54:	607b      	str	r3, [r7, #4]
 8001c56:	e016      	b.n	8001c86 <get_db+0x46>
			sum+=FFTBuffer[i];
 8001c58:	4a31      	ldr	r2, [pc, #196]	; (8001d20 <get_db+0xe0>)
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	009b      	lsls	r3, r3, #2
 8001c5e:	4413      	add	r3, r2
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	4618      	mov	r0, r3
 8001c64:	f7fe fc1c 	bl	80004a0 <__aeabi_f2d>
 8001c68:	4603      	mov	r3, r0
 8001c6a:	460c      	mov	r4, r1
 8001c6c:	461a      	mov	r2, r3
 8001c6e:	4623      	mov	r3, r4
 8001c70:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001c74:	f7fe fab6 	bl	80001e4 <__adddf3>
 8001c78:	4603      	mov	r3, r0
 8001c7a:	460c      	mov	r4, r1
 8001c7c:	e9c7 3402 	strd	r3, r4, [r7, #8]
	for(int i=1;i<512;i++){
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	3301      	adds	r3, #1
 8001c84:	607b      	str	r3, [r7, #4]
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001c8c:	dbe4      	blt.n	8001c58 <get_db+0x18>
	}
	sum = sqrt(2*sum);
 8001c8e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001c92:	4602      	mov	r2, r0
 8001c94:	460b      	mov	r3, r1
 8001c96:	f7fe faa5 	bl	80001e4 <__adddf3>
 8001c9a:	4603      	mov	r3, r0
 8001c9c:	460c      	mov	r4, r1
 8001c9e:	ec44 3b17 	vmov	d7, r3, r4
 8001ca2:	eeb0 0a47 	vmov.f32	s0, s14
 8001ca6:	eef0 0a67 	vmov.f32	s1, s15
 8001caa:	f00d f9fb 	bl	800f0a4 <sqrt>
 8001cae:	ed87 0b02 	vstr	d0, [r7, #8]
	sum = sum/32678;
 8001cb2:	a319      	add	r3, pc, #100	; (adr r3, 8001d18 <get_db+0xd8>)
 8001cb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cb8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001cbc:	f7fe fd72 	bl	80007a4 <__aeabi_ddiv>
 8001cc0:	4603      	mov	r3, r0
 8001cc2:	460c      	mov	r4, r1
 8001cc4:	e9c7 3402 	strd	r3, r4, [r7, #8]
	sum = 10 * sum;
 8001cc8:	f04f 0200 	mov.w	r2, #0
 8001ccc:	4b15      	ldr	r3, [pc, #84]	; (8001d24 <get_db+0xe4>)
 8001cce:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001cd2:	f7fe fc3d 	bl	8000550 <__aeabi_dmul>
 8001cd6:	4603      	mov	r3, r0
 8001cd8:	460c      	mov	r4, r1
 8001cda:	e9c7 3402 	strd	r3, r4, [r7, #8]
	return sum/3 - 2;
 8001cde:	f04f 0200 	mov.w	r2, #0
 8001ce2:	4b11      	ldr	r3, [pc, #68]	; (8001d28 <get_db+0xe8>)
 8001ce4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001ce8:	f7fe fd5c 	bl	80007a4 <__aeabi_ddiv>
 8001cec:	4603      	mov	r3, r0
 8001cee:	460c      	mov	r4, r1
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	4621      	mov	r1, r4
 8001cf4:	f04f 0200 	mov.w	r2, #0
 8001cf8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001cfc:	f7fe fa70 	bl	80001e0 <__aeabi_dsub>
 8001d00:	4603      	mov	r3, r0
 8001d02:	460c      	mov	r4, r1
 8001d04:	ec44 3b17 	vmov	d7, r3, r4
}
 8001d08:	eeb0 0a47 	vmov.f32	s0, s14
 8001d0c:	eef0 0a67 	vmov.f32	s1, s15
 8001d10:	3714      	adds	r7, #20
 8001d12:	46bd      	mov	sp, r7
 8001d14:	bd90      	pop	{r4, r7, pc}
 8001d16:	bf00      	nop
 8001d18:	00000000 	.word	0x00000000
 8001d1c:	40dfe980 	.word	0x40dfe980
 8001d20:	200007c0 	.word	0x200007c0
 8001d24:	40240000 	.word	0x40240000
 8001d28:	40080000 	.word	0x40080000

08001d2c <start_vibro>:

void start_vibro(double db)
{
 8001d2c:	b5b0      	push	{r4, r5, r7, lr}
 8001d2e:	b096      	sub	sp, #88	; 0x58
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	ed87 0b00 	vstr	d0, [r7]
	int vibros[4] = {15,50,100,1000};
 8001d36:	4b94      	ldr	r3, [pc, #592]	; (8001f88 <start_vibro+0x25c>)
 8001d38:	f107 0438 	add.w	r4, r7, #56	; 0x38
 8001d3c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001d3e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	double sums[4] = {0,0,0,0};
 8001d42:	f107 0318 	add.w	r3, r7, #24
 8001d46:	2220      	movs	r2, #32
 8001d48:	2100      	movs	r1, #0
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	f00d f8c1 	bl	800eed2 <memset>
	int j =0;
 8001d50:	2300      	movs	r3, #0
 8001d52:	657b      	str	r3, [r7, #84]	; 0x54
	for(int i=1;i<256;i+=1){
 8001d54:	2301      	movs	r3, #1
 8001d56:	653b      	str	r3, [r7, #80]	; 0x50
 8001d58:	e044      	b.n	8001de4 <start_vibro+0xb8>
		if(i > vibros[j]) j++;
 8001d5a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d5c:	009b      	lsls	r3, r3, #2
 8001d5e:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8001d62:	4413      	add	r3, r2
 8001d64:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8001d68:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8001d6a:	429a      	cmp	r2, r3
 8001d6c:	dd02      	ble.n	8001d74 <start_vibro+0x48>
 8001d6e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d70:	3301      	adds	r3, #1
 8001d72:	657b      	str	r3, [r7, #84]	; 0x54
		if(FFTBuffer[i]/100000 > sums[j])
 8001d74:	4a85      	ldr	r2, [pc, #532]	; (8001f8c <start_vibro+0x260>)
 8001d76:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001d78:	009b      	lsls	r3, r3, #2
 8001d7a:	4413      	add	r3, r2
 8001d7c:	edd3 7a00 	vldr	s15, [r3]
 8001d80:	ed9f 7a83 	vldr	s14, [pc, #524]	; 8001f90 <start_vibro+0x264>
 8001d84:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001d88:	ee16 0a90 	vmov	r0, s13
 8001d8c:	f7fe fb88 	bl	80004a0 <__aeabi_f2d>
 8001d90:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d92:	00db      	lsls	r3, r3, #3
 8001d94:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8001d98:	4413      	add	r3, r2
 8001d9a:	3b40      	subs	r3, #64	; 0x40
 8001d9c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001da0:	461a      	mov	r2, r3
 8001da2:	4623      	mov	r3, r4
 8001da4:	f7fe fe64 	bl	8000a70 <__aeabi_dcmpgt>
 8001da8:	4603      	mov	r3, r0
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d017      	beq.n	8001dde <start_vibro+0xb2>

			sums[j] = FFTBuffer[i]/100000;
 8001dae:	4a77      	ldr	r2, [pc, #476]	; (8001f8c <start_vibro+0x260>)
 8001db0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001db2:	009b      	lsls	r3, r3, #2
 8001db4:	4413      	add	r3, r2
 8001db6:	edd3 7a00 	vldr	s15, [r3]
 8001dba:	ed9f 7a75 	vldr	s14, [pc, #468]	; 8001f90 <start_vibro+0x264>
 8001dbe:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001dc2:	ee16 0a90 	vmov	r0, s13
 8001dc6:	f7fe fb6b 	bl	80004a0 <__aeabi_f2d>
 8001dca:	4603      	mov	r3, r0
 8001dcc:	460c      	mov	r4, r1
 8001dce:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001dd0:	00d2      	lsls	r2, r2, #3
 8001dd2:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8001dd6:	440a      	add	r2, r1
 8001dd8:	3a40      	subs	r2, #64	; 0x40
 8001dda:	e9c2 3400 	strd	r3, r4, [r2]
	for(int i=1;i<256;i+=1){
 8001dde:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001de0:	3301      	adds	r3, #1
 8001de2:	653b      	str	r3, [r7, #80]	; 0x50
 8001de4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001de6:	2bff      	cmp	r3, #255	; 0xff
 8001de8:	ddb7      	ble.n	8001d5a <start_vibro+0x2e>

	}
	sums[2]/=1.5;
 8001dea:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001dee:	f04f 0200 	mov.w	r2, #0
 8001df2:	4b68      	ldr	r3, [pc, #416]	; (8001f94 <start_vibro+0x268>)
 8001df4:	f7fe fcd6 	bl	80007a4 <__aeabi_ddiv>
 8001df8:	4603      	mov	r3, r0
 8001dfa:	460c      	mov	r4, r1
 8001dfc:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
	sums[1]/=1.2;
 8001e00:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001e04:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
 8001e08:	4b63      	ldr	r3, [pc, #396]	; (8001f98 <start_vibro+0x26c>)
 8001e0a:	f7fe fccb 	bl	80007a4 <__aeabi_ddiv>
 8001e0e:	4603      	mov	r3, r0
 8001e10:	460c      	mov	r4, r1
 8001e12:	e9c7 3408 	strd	r3, r4, [r7, #32]
	int diff[4] = {0,0,0,0};
 8001e16:	f107 0308 	add.w	r3, r7, #8
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	601a      	str	r2, [r3, #0]
 8001e1e:	605a      	str	r2, [r3, #4]
 8001e20:	609a      	str	r2, [r3, #8]
 8001e22:	60da      	str	r2, [r3, #12]
	for(int i= 0;i<4;i++){
 8001e24:	2300      	movs	r3, #0
 8001e26:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001e28:	e038      	b.n	8001e9c <start_vibro+0x170>
		for(int j=0;j<4;j++){
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	64bb      	str	r3, [r7, #72]	; 0x48
 8001e2e:	e02f      	b.n	8001e90 <start_vibro+0x164>
			if(sums[i] >= sums[j] - 0.5){
 8001e30:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001e32:	00db      	lsls	r3, r3, #3
 8001e34:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8001e38:	4413      	add	r3, r2
 8001e3a:	3b40      	subs	r3, #64	; 0x40
 8001e3c:	e9d3 4500 	ldrd	r4, r5, [r3]
 8001e40:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001e42:	00db      	lsls	r3, r3, #3
 8001e44:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8001e48:	4413      	add	r3, r2
 8001e4a:	3b40      	subs	r3, #64	; 0x40
 8001e4c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001e50:	f04f 0200 	mov.w	r2, #0
 8001e54:	4b51      	ldr	r3, [pc, #324]	; (8001f9c <start_vibro+0x270>)
 8001e56:	f7fe f9c3 	bl	80001e0 <__aeabi_dsub>
 8001e5a:	4602      	mov	r2, r0
 8001e5c:	460b      	mov	r3, r1
 8001e5e:	4620      	mov	r0, r4
 8001e60:	4629      	mov	r1, r5
 8001e62:	f7fe fdfb 	bl	8000a5c <__aeabi_dcmpge>
 8001e66:	4603      	mov	r3, r0
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d00e      	beq.n	8001e8a <start_vibro+0x15e>
				diff[i]+=1;
 8001e6c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001e6e:	009b      	lsls	r3, r3, #2
 8001e70:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8001e74:	4413      	add	r3, r2
 8001e76:	f853 3c50 	ldr.w	r3, [r3, #-80]
 8001e7a:	1c5a      	adds	r2, r3, #1
 8001e7c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001e7e:	009b      	lsls	r3, r3, #2
 8001e80:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8001e84:	440b      	add	r3, r1
 8001e86:	f843 2c50 	str.w	r2, [r3, #-80]
		for(int j=0;j<4;j++){
 8001e8a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001e8c:	3301      	adds	r3, #1
 8001e8e:	64bb      	str	r3, [r7, #72]	; 0x48
 8001e90:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001e92:	2b03      	cmp	r3, #3
 8001e94:	ddcc      	ble.n	8001e30 <start_vibro+0x104>
	for(int i= 0;i<4;i++){
 8001e96:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001e98:	3301      	adds	r3, #1
 8001e9a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001e9c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001e9e:	2b03      	cmp	r3, #3
 8001ea0:	ddc3      	ble.n	8001e2a <start_vibro+0xfe>
			}
			}
		}
	if(db>3)
 8001ea2:	f04f 0200 	mov.w	r2, #0
 8001ea6:	4b3e      	ldr	r3, [pc, #248]	; (8001fa0 <start_vibro+0x274>)
 8001ea8:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001eac:	f7fe fde0 	bl	8000a70 <__aeabi_dcmpgt>
 8001eb0:	4603      	mov	r3, r0
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d004      	beq.n	8001ec0 <start_vibro+0x194>
		db = 3;
 8001eb6:	f04f 0300 	mov.w	r3, #0
 8001eba:	4c39      	ldr	r4, [pc, #228]	; (8001fa0 <start_vibro+0x274>)
 8001ebc:	e9c7 3400 	strd	r3, r4, [r7]
	TIM4->CCR1 = (diff[0] * 400 - 1) * db;
 8001ec0:	68bb      	ldr	r3, [r7, #8]
 8001ec2:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8001ec6:	fb02 f303 	mul.w	r3, r2, r3
 8001eca:	3b01      	subs	r3, #1
 8001ecc:	4618      	mov	r0, r3
 8001ece:	f7fe fad5 	bl	800047c <__aeabi_i2d>
 8001ed2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001ed6:	f7fe fb3b 	bl	8000550 <__aeabi_dmul>
 8001eda:	4603      	mov	r3, r0
 8001edc:	460c      	mov	r4, r1
 8001ede:	461a      	mov	r2, r3
 8001ee0:	4623      	mov	r3, r4
 8001ee2:	4c30      	ldr	r4, [pc, #192]	; (8001fa4 <start_vibro+0x278>)
 8001ee4:	4610      	mov	r0, r2
 8001ee6:	4619      	mov	r1, r3
 8001ee8:	f7fe fde2 	bl	8000ab0 <__aeabi_d2uiz>
 8001eec:	4603      	mov	r3, r0
 8001eee:	6363      	str	r3, [r4, #52]	; 0x34
	TIM4->CCR2 = (diff[1] * 400 - 1) * db ;
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8001ef6:	fb02 f303 	mul.w	r3, r2, r3
 8001efa:	3b01      	subs	r3, #1
 8001efc:	4618      	mov	r0, r3
 8001efe:	f7fe fabd 	bl	800047c <__aeabi_i2d>
 8001f02:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001f06:	f7fe fb23 	bl	8000550 <__aeabi_dmul>
 8001f0a:	4603      	mov	r3, r0
 8001f0c:	460c      	mov	r4, r1
 8001f0e:	461a      	mov	r2, r3
 8001f10:	4623      	mov	r3, r4
 8001f12:	4c24      	ldr	r4, [pc, #144]	; (8001fa4 <start_vibro+0x278>)
 8001f14:	4610      	mov	r0, r2
 8001f16:	4619      	mov	r1, r3
 8001f18:	f7fe fdca 	bl	8000ab0 <__aeabi_d2uiz>
 8001f1c:	4603      	mov	r3, r0
 8001f1e:	63a3      	str	r3, [r4, #56]	; 0x38
	TIM4->CCR3 = (diff[2] * 400 - 1) * db;
 8001f20:	693b      	ldr	r3, [r7, #16]
 8001f22:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8001f26:	fb02 f303 	mul.w	r3, r2, r3
 8001f2a:	3b01      	subs	r3, #1
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	f7fe faa5 	bl	800047c <__aeabi_i2d>
 8001f32:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001f36:	f7fe fb0b 	bl	8000550 <__aeabi_dmul>
 8001f3a:	4603      	mov	r3, r0
 8001f3c:	460c      	mov	r4, r1
 8001f3e:	461a      	mov	r2, r3
 8001f40:	4623      	mov	r3, r4
 8001f42:	4c18      	ldr	r4, [pc, #96]	; (8001fa4 <start_vibro+0x278>)
 8001f44:	4610      	mov	r0, r2
 8001f46:	4619      	mov	r1, r3
 8001f48:	f7fe fdb2 	bl	8000ab0 <__aeabi_d2uiz>
 8001f4c:	4603      	mov	r3, r0
 8001f4e:	63e3      	str	r3, [r4, #60]	; 0x3c
	TIM4->CCR4 = (diff[3] * 400 - 1) * db ;
 8001f50:	697b      	ldr	r3, [r7, #20]
 8001f52:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8001f56:	fb02 f303 	mul.w	r3, r2, r3
 8001f5a:	3b01      	subs	r3, #1
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	f7fe fa8d 	bl	800047c <__aeabi_i2d>
 8001f62:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001f66:	f7fe faf3 	bl	8000550 <__aeabi_dmul>
 8001f6a:	4603      	mov	r3, r0
 8001f6c:	460c      	mov	r4, r1
 8001f6e:	461a      	mov	r2, r3
 8001f70:	4623      	mov	r3, r4
 8001f72:	4c0c      	ldr	r4, [pc, #48]	; (8001fa4 <start_vibro+0x278>)
 8001f74:	4610      	mov	r0, r2
 8001f76:	4619      	mov	r1, r3
 8001f78:	f7fe fd9a 	bl	8000ab0 <__aeabi_d2uiz>
 8001f7c:	4603      	mov	r3, r0
 8001f7e:	6423      	str	r3, [r4, #64]	; 0x40

}
 8001f80:	bf00      	nop
 8001f82:	3758      	adds	r7, #88	; 0x58
 8001f84:	46bd      	mov	sp, r7
 8001f86:	bdb0      	pop	{r4, r5, r7, pc}
 8001f88:	0800fcdc 	.word	0x0800fcdc
 8001f8c:	200007c0 	.word	0x200007c0
 8001f90:	47c35000 	.word	0x47c35000
 8001f94:	3ff80000 	.word	0x3ff80000
 8001f98:	3ff33333 	.word	0x3ff33333
 8001f9c:	3fe00000 	.word	0x3fe00000
 8001fa0:	40080000 	.word	0x40080000
 8001fa4:	40000800 	.word	0x40000800

08001fa8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001fa8:	b590      	push	{r4, r7, lr}
 8001faa:	b0e1      	sub	sp, #388	; 0x184
 8001fac:	af12      	add	r7, sp, #72	; 0x48
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001fae:	f000 fd0b 	bl	80029c8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001fb2:	f000 f9dd 	bl	8002370 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001fb6:	f7ff f9f5 	bl	80013a4 <MX_GPIO_Init>
  MX_DMA_Init();
 8001fba:	f7ff f9d3 	bl	8001364 <MX_DMA_Init>
  MX_I2C1_Init();
 8001fbe:	f7ff facb 	bl	8001558 <MX_I2C1_Init>
  MX_I2S2_Init();
 8001fc2:	f7ff fb3f 	bl	8001644 <MX_I2S2_Init>
  MX_I2S3_Init();
 8001fc6:	f7ff fb6b 	bl	80016a0 <MX_I2S3_Init>
  MX_SPI1_Init();
 8001fca:	f000 fa97 	bl	80024fc <MX_SPI1_Init>
  MX_CRC_Init();
 8001fce:	f7fe ff5f 	bl	8000e90 <MX_CRC_Init>
  MX_PDM2PCM_Init();
 8001fd2:	f00a fb0b 	bl	800c5ec <MX_PDM2PCM_Init>
  MX_USB_DEVICE_Init();
 8001fd6:	f00a fb33 	bl	800c640 <MX_USB_DEVICE_Init>
  MX_TIM4_Init();
 8001fda:	f000 fbd7 	bl	800278c <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
	CS43_Init(hi2c1,MODE_I2S);
 8001fde:	4c63      	ldr	r4, [pc, #396]	; (800216c <main+0x1c4>)
 8001fe0:	2300      	movs	r3, #0
 8001fe2:	9311      	str	r3, [sp, #68]	; 0x44
 8001fe4:	4668      	mov	r0, sp
 8001fe6:	f104 0310 	add.w	r3, r4, #16
 8001fea:	2244      	movs	r2, #68	; 0x44
 8001fec:	4619      	mov	r1, r3
 8001fee:	f00c ff65 	bl	800eebc <memcpy>
 8001ff2:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001ff6:	f7fe ffc1 	bl	8000f7c <CS43_Init>
	CS43_SetVolume(60);//70
 8001ffa:	203c      	movs	r0, #60	; 0x3c
 8001ffc:	f7ff f92e 	bl	800125c <CS43_SetVolume>
	CS43_Enable_RightLeft(CS43_RIGHT_LEFT);
 8002000:	2003      	movs	r0, #3
 8002002:	f7ff f8cf 	bl	80011a4 <CS43_Enable_RightLeft>
	CS43_Start();
 8002006:	f7ff f96b 	bl	80012e0 <CS43_Start>
  //HAL_I2S_Transmit_DMA(&hi2s3, &txBuf[0], 64);// 64-32 bit frames to external i2s DAC
  HAL_I2S_Receive_DMA(&hi2s2, &pdmRxBuf[0],64);//64-32 bit frames from PDM microphone
 800200a:	2240      	movs	r2, #64	; 0x40
 800200c:	4958      	ldr	r1, [pc, #352]	; (8002170 <main+0x1c8>)
 800200e:	4859      	ldr	r0, [pc, #356]	; (8002174 <main+0x1cc>)
 8002010:	f003 f976 	bl	8005300 <HAL_I2S_Receive_DMA>
  HAL_TIM_PWM_Start(&htim4,TIM_CHANNEL_1);
 8002014:	2100      	movs	r1, #0
 8002016:	4858      	ldr	r0, [pc, #352]	; (8002178 <main+0x1d0>)
 8002018:	f006 fa36 	bl	8008488 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4,TIM_CHANNEL_2);
 800201c:	2104      	movs	r1, #4
 800201e:	4856      	ldr	r0, [pc, #344]	; (8002178 <main+0x1d0>)
 8002020:	f006 fa32 	bl	8008488 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4,TIM_CHANNEL_3);
 8002024:	2108      	movs	r1, #8
 8002026:	4854      	ldr	r0, [pc, #336]	; (8002178 <main+0x1d0>)
 8002028:	f006 fa2e 	bl	8008488 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4,TIM_CHANNEL_4);
 800202c:	210c      	movs	r1, #12
 800202e:	4852      	ldr	r0, [pc, #328]	; (8002178 <main+0x1d0>)
 8002030:	f006 fa2a 	bl	8008488 <HAL_TIM_PWM_Start>
  TIM4->CCR1 = 0;
 8002034:	4b51      	ldr	r3, [pc, #324]	; (800217c <main+0x1d4>)
 8002036:	2200      	movs	r2, #0
 8002038:	635a      	str	r2, [r3, #52]	; 0x34
  TIM4->CCR2 = 0;
 800203a:	4b50      	ldr	r3, [pc, #320]	; (800217c <main+0x1d4>)
 800203c:	2200      	movs	r2, #0
 800203e:	639a      	str	r2, [r3, #56]	; 0x38
  TIM4->CCR3 = 0;
 8002040:	4b4e      	ldr	r3, [pc, #312]	; (800217c <main+0x1d4>)
 8002042:	2200      	movs	r2, #0
 8002044:	63da      	str	r2, [r3, #60]	; 0x3c
  TIM4->CCR4 = 0;
 8002046:	4b4d      	ldr	r3, [pc, #308]	; (800217c <main+0x1d4>)
 8002048:	2200      	movs	r2, #0
 800204a:	641a      	str	r2, [r3, #64]	; 0x40
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  const char str[] = "Hello!\n";
 800204c:	4a4c      	ldr	r2, [pc, #304]	; (8002180 <main+0x1d8>)
 800204e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8002052:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002056:	e883 0003 	stmia.w	r3, {r0, r1}
  uint16_t data_in[128];
  int rxIter = 0;
 800205a:	2300      	movs	r3, #0
 800205c:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  int k =0;
 8002060:	2300      	movs	r3, #0
 8002062:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  double avg = 0;
 8002066:	f04f 0300 	mov.w	r3, #0
 800206a:	f04f 0400 	mov.w	r4, #0
 800206e:	e9c7 344a 	strd	r3, r4, [r7, #296]	; 0x128

	  HAL_Delay(500);
	*/


	  volatile HAL_StatusTypeDef result = HAL_I2S_Receive(&hi2s2, data_in,32,1000);
 8002072:	f107 0108 	add.w	r1, r7, #8
 8002076:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800207a:	2220      	movs	r2, #32
 800207c:	483d      	ldr	r0, [pc, #244]	; (8002174 <main+0x1cc>)
 800207e:	f003 f875 	bl	800516c <HAL_I2S_Receive>
 8002082:	4603      	mov	r3, r0
 8002084:	461a      	mov	r2, r3
 8002086:	1dfb      	adds	r3, r7, #7
 8002088:	701a      	strb	r2, [r3, #0]
	  if (result == HAL_OK) {
 800208a:	1dfb      	adds	r3, r7, #7
 800208c:	781b      	ldrb	r3, [r3, #0]
 800208e:	b2db      	uxtb	r3, r3
 8002090:	2b00      	cmp	r3, #0
 8002092:	d11a      	bne.n	80020ca <main+0x122>
		  for(int i=0;i<32;i+=2)
 8002094:	2300      	movs	r3, #0
 8002096:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800209a:	e012      	b.n	80020c2 <main+0x11a>
			  pdmRxBuf[rxIter++] = (int16_t) data_in[i];
 800209c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80020a0:	1c5a      	adds	r2, r3, #1
 80020a2:	f8c7 2134 	str.w	r2, [r7, #308]	; 0x134
 80020a6:	f107 0208 	add.w	r2, r7, #8
 80020aa:	f8d7 1124 	ldr.w	r1, [r7, #292]	; 0x124
 80020ae:	f832 1011 	ldrh.w	r1, [r2, r1, lsl #1]
 80020b2:	4a2f      	ldr	r2, [pc, #188]	; (8002170 <main+0x1c8>)
 80020b4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		  for(int i=0;i<32;i+=2)
 80020b8:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80020bc:	3302      	adds	r3, #2
 80020be:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80020c2:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80020c6:	2b1f      	cmp	r3, #31
 80020c8:	dde8      	ble.n	800209c <main+0xf4>

	  }



		 if (rxIter == 512 * 4) {//RxHalfCpltCallba
 80020ca:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80020ce:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80020d2:	d1ce      	bne.n	8002072 <main+0xca>
			for(int y =0;y<64*32;y+=64){
 80020d4:	2300      	movs	r3, #0
 80020d6:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80020da:	e033      	b.n	8002144 <main+0x19c>
				PDM_Filter(&pdmRxBuf[y],&MidBuffer[0], &PDM1_filter_handler);//filter first 64x16bit received PDM data
 80020dc:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80020e0:	005b      	lsls	r3, r3, #1
 80020e2:	4a23      	ldr	r2, [pc, #140]	; (8002170 <main+0x1c8>)
 80020e4:	4413      	add	r3, r2
 80020e6:	4a27      	ldr	r2, [pc, #156]	; (8002184 <main+0x1dc>)
 80020e8:	4927      	ldr	r1, [pc, #156]	; (8002188 <main+0x1e0>)
 80020ea:	4618      	mov	r0, r3
 80020ec:	f00c fe52 	bl	800ed94 <PDM_Filter>
				for(int i=0;i<16;i++){
 80020f0:	2300      	movs	r3, #0
 80020f2:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80020f6:	e01c      	b.n	8002132 <main+0x18a>
					ReBuffer[i+y/4] = MidBuffer[i];
 80020f8:	4a23      	ldr	r2, [pc, #140]	; (8002188 <main+0x1e0>)
 80020fa:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80020fe:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8002102:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8002106:	2b00      	cmp	r3, #0
 8002108:	da00      	bge.n	800210c <main+0x164>
 800210a:	3303      	adds	r3, #3
 800210c:	109b      	asrs	r3, r3, #2
 800210e:	461a      	mov	r2, r3
 8002110:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002114:	4413      	add	r3, r2
 8002116:	ee07 1a90 	vmov	s15, r1
 800211a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800211e:	4a1b      	ldr	r2, [pc, #108]	; (800218c <main+0x1e4>)
 8002120:	009b      	lsls	r3, r3, #2
 8002122:	4413      	add	r3, r2
 8002124:	edc3 7a00 	vstr	s15, [r3]
				for(int i=0;i<16;i++){
 8002128:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800212c:	3301      	adds	r3, #1
 800212e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8002132:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002136:	2b0f      	cmp	r3, #15
 8002138:	ddde      	ble.n	80020f8 <main+0x150>
			for(int y =0;y<64*32;y+=64){
 800213a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800213e:	3340      	adds	r3, #64	; 0x40
 8002140:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8002144:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8002148:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800214c:	dbc6      	blt.n	80020dc <main+0x134>
				}
			}

			FFT(ReBuffer, ImBuffer, 512, 9, -1);
 800214e:	f04f 33ff 	mov.w	r3, #4294967295
 8002152:	9300      	str	r3, [sp, #0]
 8002154:	2309      	movs	r3, #9
 8002156:	f44f 7200 	mov.w	r2, #512	; 0x200
 800215a:	490d      	ldr	r1, [pc, #52]	; (8002190 <main+0x1e8>)
 800215c:	480b      	ldr	r0, [pc, #44]	; (800218c <main+0x1e4>)
 800215e:	f7ff fbdf 	bl	8001920 <FFT>

			for(int i=0;i<512;i++){
 8002162:	2300      	movs	r3, #0
 8002164:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8002168:	e066      	b.n	8002238 <main+0x290>
 800216a:	bf00      	nop
 800216c:	2000067c 	.word	0x2000067c
 8002170:	200018e0 	.word	0x200018e0
 8002174:	20000730 	.word	0x20000730
 8002178:	20003338 	.word	0x20003338
 800217c:	40000800 	.word	0x40000800
 8002180:	0800fcec 	.word	0x0800fcec
 8002184:	20003384 	.word	0x20003384
 8002188:	200018c0 	.word	0x200018c0
 800218c:	200010c0 	.word	0x200010c0
 8002190:	200028e0 	.word	0x200028e0
				FFTBuffer[i] = ReBuffer[i] * ReBuffer[i] + ImBuffer[i] * ImBuffer[i];
 8002194:	4a70      	ldr	r2, [pc, #448]	; (8002358 <main+0x3b0>)
 8002196:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800219a:	009b      	lsls	r3, r3, #2
 800219c:	4413      	add	r3, r2
 800219e:	ed93 7a00 	vldr	s14, [r3]
 80021a2:	4a6d      	ldr	r2, [pc, #436]	; (8002358 <main+0x3b0>)
 80021a4:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80021a8:	009b      	lsls	r3, r3, #2
 80021aa:	4413      	add	r3, r2
 80021ac:	edd3 7a00 	vldr	s15, [r3]
 80021b0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80021b4:	4a69      	ldr	r2, [pc, #420]	; (800235c <main+0x3b4>)
 80021b6:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80021ba:	009b      	lsls	r3, r3, #2
 80021bc:	4413      	add	r3, r2
 80021be:	edd3 6a00 	vldr	s13, [r3]
 80021c2:	4a66      	ldr	r2, [pc, #408]	; (800235c <main+0x3b4>)
 80021c4:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80021c8:	009b      	lsls	r3, r3, #2
 80021ca:	4413      	add	r3, r2
 80021cc:	edd3 7a00 	vldr	s15, [r3]
 80021d0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80021d4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80021d8:	4a61      	ldr	r2, [pc, #388]	; (8002360 <main+0x3b8>)
 80021da:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80021de:	009b      	lsls	r3, r3, #2
 80021e0:	4413      	add	r3, r2
 80021e2:	edc3 7a00 	vstr	s15, [r3]
				FFTBuffer[i] = sqrt(FFTBuffer[i]);
 80021e6:	4a5e      	ldr	r2, [pc, #376]	; (8002360 <main+0x3b8>)
 80021e8:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80021ec:	009b      	lsls	r3, r3, #2
 80021ee:	4413      	add	r3, r2
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	4618      	mov	r0, r3
 80021f4:	f7fe f954 	bl	80004a0 <__aeabi_f2d>
 80021f8:	4603      	mov	r3, r0
 80021fa:	460c      	mov	r4, r1
 80021fc:	ec44 3b10 	vmov	d0, r3, r4
 8002200:	f00c ff50 	bl	800f0a4 <sqrt>
 8002204:	ec54 3b10 	vmov	r3, r4, d0
 8002208:	4618      	mov	r0, r3
 800220a:	4621      	mov	r1, r4
 800220c:	f7fe fc70 	bl	8000af0 <__aeabi_d2f>
 8002210:	4601      	mov	r1, r0
 8002212:	4a53      	ldr	r2, [pc, #332]	; (8002360 <main+0x3b8>)
 8002214:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8002218:	009b      	lsls	r3, r3, #2
 800221a:	4413      	add	r3, r2
 800221c:	6019      	str	r1, [r3, #0]
				ImBuffer[i] = 0;
 800221e:	4a4f      	ldr	r2, [pc, #316]	; (800235c <main+0x3b4>)
 8002220:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8002224:	009b      	lsls	r3, r3, #2
 8002226:	4413      	add	r3, r2
 8002228:	f04f 0200 	mov.w	r2, #0
 800222c:	601a      	str	r2, [r3, #0]
			for(int i=0;i<512;i++){
 800222e:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8002232:	3301      	adds	r3, #1
 8002234:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8002238:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800223c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002240:	dba8      	blt.n	8002194 <main+0x1ec>
			}
			double db = get_db();
 8002242:	f7ff fcfd 	bl	8001c40 <get_db>
 8002246:	ed87 0b44 	vstr	d0, [r7, #272]	; 0x110
			db*=db;
 800224a:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 800224e:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	; 0x110
 8002252:	f7fe f97d 	bl	8000550 <__aeabi_dmul>
 8002256:	4603      	mov	r3, r0
 8002258:	460c      	mov	r4, r1
 800225a:	e9c7 3444 	strd	r3, r4, [r7, #272]	; 0x110
			db*=9;
 800225e:	f04f 0200 	mov.w	r2, #0
 8002262:	4b40      	ldr	r3, [pc, #256]	; (8002364 <main+0x3bc>)
 8002264:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	; 0x110
 8002268:	f7fe f972 	bl	8000550 <__aeabi_dmul>
 800226c:	4603      	mov	r3, r0
 800226e:	460c      	mov	r4, r1
 8002270:	e9c7 3444 	strd	r3, r4, [r7, #272]	; 0x110
			db*=db*db*db;
 8002274:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 8002278:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	; 0x110
 800227c:	f7fe f968 	bl	8000550 <__aeabi_dmul>
 8002280:	4603      	mov	r3, r0
 8002282:	460c      	mov	r4, r1
 8002284:	4618      	mov	r0, r3
 8002286:	4621      	mov	r1, r4
 8002288:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 800228c:	f7fe f960 	bl	8000550 <__aeabi_dmul>
 8002290:	4603      	mov	r3, r0
 8002292:	460c      	mov	r4, r1
 8002294:	461a      	mov	r2, r3
 8002296:	4623      	mov	r3, r4
 8002298:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	; 0x110
 800229c:	f7fe f958 	bl	8000550 <__aeabi_dmul>
 80022a0:	4603      	mov	r3, r0
 80022a2:	460c      	mov	r4, r1
 80022a4:	e9c7 3444 	strd	r3, r4, [r7, #272]	; 0x110
			db = (0.6 - db)*5;
 80022a8:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 80022ac:	a128      	add	r1, pc, #160	; (adr r1, 8002350 <main+0x3a8>)
 80022ae:	e9d1 0100 	ldrd	r0, r1, [r1]
 80022b2:	f7fd ff95 	bl	80001e0 <__aeabi_dsub>
 80022b6:	4603      	mov	r3, r0
 80022b8:	460c      	mov	r4, r1
 80022ba:	4618      	mov	r0, r3
 80022bc:	4621      	mov	r1, r4
 80022be:	f04f 0200 	mov.w	r2, #0
 80022c2:	4b29      	ldr	r3, [pc, #164]	; (8002368 <main+0x3c0>)
 80022c4:	f7fe f944 	bl	8000550 <__aeabi_dmul>
 80022c8:	4603      	mov	r3, r0
 80022ca:	460c      	mov	r4, r1
 80022cc:	e9c7 3444 	strd	r3, r4, [r7, #272]	; 0x110
			if(db<0){
 80022d0:	f04f 0200 	mov.w	r2, #0
 80022d4:	f04f 0300 	mov.w	r3, #0
 80022d8:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	; 0x110
 80022dc:	f7fe fbaa 	bl	8000a34 <__aeabi_dcmplt>
 80022e0:	4603      	mov	r3, r0
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d005      	beq.n	80022f2 <main+0x34a>
				db =0;
 80022e6:	f04f 0300 	mov.w	r3, #0
 80022ea:	f04f 0400 	mov.w	r4, #0
 80022ee:	e9c7 3444 	strd	r3, r4, [r7, #272]	; 0x110
			}
			avg+=db;
 80022f2:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 80022f6:	e9d7 014a 	ldrd	r0, r1, [r7, #296]	; 0x128
 80022fa:	f7fd ff73 	bl	80001e4 <__adddf3>
 80022fe:	4603      	mov	r3, r0
 8002300:	460c      	mov	r4, r1
 8002302:	e9c7 344a 	strd	r3, r4, [r7, #296]	; 0x128

			if(k%100==0){
 8002306:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 800230a:	4b18      	ldr	r3, [pc, #96]	; (800236c <main+0x3c4>)
 800230c:	fb83 1302 	smull	r1, r3, r3, r2
 8002310:	1159      	asrs	r1, r3, #5
 8002312:	17d3      	asrs	r3, r2, #31
 8002314:	1acb      	subs	r3, r1, r3
 8002316:	2164      	movs	r1, #100	; 0x64
 8002318:	fb01 f303 	mul.w	r3, r1, r3
 800231c:	1ad3      	subs	r3, r2, r3
 800231e:	2b00      	cmp	r3, #0
 8002320:	d108      	bne.n	8002334 <main+0x38c>
				k = 1;
 8002322:	2301      	movs	r3, #1
 8002324:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130

				avg = 0;
 8002328:	f04f 0300 	mov.w	r3, #0
 800232c:	f04f 0400 	mov.w	r4, #0
 8002330:	e9c7 344a 	strd	r3, r4, [r7, #296]	; 0x128
			}
			rxIter = 0;
 8002334:	2300      	movs	r3, #0
 8002336:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
	    	k+=1;
 800233a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800233e:	3301      	adds	r3, #1
 8002340:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
	    	start_vibro(db);
 8002344:	ed97 0b44 	vldr	d0, [r7, #272]	; 0x110
 8002348:	f7ff fcf0 	bl	8001d2c <start_vibro>
  {
 800234c:	e691      	b.n	8002072 <main+0xca>
 800234e:	bf00      	nop
 8002350:	33333333 	.word	0x33333333
 8002354:	3fe33333 	.word	0x3fe33333
 8002358:	200010c0 	.word	0x200010c0
 800235c:	200028e0 	.word	0x200028e0
 8002360:	200007c0 	.word	0x200007c0
 8002364:	40220000 	.word	0x40220000
 8002368:	40140000 	.word	0x40140000
 800236c:	51eb851f 	.word	0x51eb851f

08002370 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002370:	b580      	push	{r7, lr}
 8002372:	b09a      	sub	sp, #104	; 0x68
 8002374:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002376:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800237a:	2230      	movs	r2, #48	; 0x30
 800237c:	2100      	movs	r1, #0
 800237e:	4618      	mov	r0, r3
 8002380:	f00c fda7 	bl	800eed2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002384:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002388:	2200      	movs	r2, #0
 800238a:	601a      	str	r2, [r3, #0]
 800238c:	605a      	str	r2, [r3, #4]
 800238e:	609a      	str	r2, [r3, #8]
 8002390:	60da      	str	r2, [r3, #12]
 8002392:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002394:	f107 030c 	add.w	r3, r7, #12
 8002398:	2200      	movs	r2, #0
 800239a:	601a      	str	r2, [r3, #0]
 800239c:	605a      	str	r2, [r3, #4]
 800239e:	609a      	str	r2, [r3, #8]
 80023a0:	60da      	str	r2, [r3, #12]
 80023a2:	611a      	str	r2, [r3, #16]
 80023a4:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80023a6:	2300      	movs	r3, #0
 80023a8:	60bb      	str	r3, [r7, #8]
 80023aa:	4b31      	ldr	r3, [pc, #196]	; (8002470 <SystemClock_Config+0x100>)
 80023ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ae:	4a30      	ldr	r2, [pc, #192]	; (8002470 <SystemClock_Config+0x100>)
 80023b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023b4:	6413      	str	r3, [r2, #64]	; 0x40
 80023b6:	4b2e      	ldr	r3, [pc, #184]	; (8002470 <SystemClock_Config+0x100>)
 80023b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023be:	60bb      	str	r3, [r7, #8]
 80023c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80023c2:	2300      	movs	r3, #0
 80023c4:	607b      	str	r3, [r7, #4]
 80023c6:	4b2b      	ldr	r3, [pc, #172]	; (8002474 <SystemClock_Config+0x104>)
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	4a2a      	ldr	r2, [pc, #168]	; (8002474 <SystemClock_Config+0x104>)
 80023cc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80023d0:	6013      	str	r3, [r2, #0]
 80023d2:	4b28      	ldr	r3, [pc, #160]	; (8002474 <SystemClock_Config+0x104>)
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80023da:	607b      	str	r3, [r7, #4]
 80023dc:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80023de:	2301      	movs	r3, #1
 80023e0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80023e2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80023e6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80023e8:	2302      	movs	r3, #2
 80023ea:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80023ec:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80023f0:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLM = 4;
 80023f2:	2304      	movs	r3, #4
 80023f4:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLN = 192;
 80023f6:	23c0      	movs	r3, #192	; 0xc0
 80023f8:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80023fa:	2304      	movs	r3, #4
 80023fc:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLQ = 8;
 80023fe:	2308      	movs	r3, #8
 8002400:	667b      	str	r3, [r7, #100]	; 0x64
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002402:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002406:	4618      	mov	r0, r3
 8002408:	f004 fdaa 	bl	8006f60 <HAL_RCC_OscConfig>
 800240c:	4603      	mov	r3, r0
 800240e:	2b00      	cmp	r3, #0
 8002410:	d001      	beq.n	8002416 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8002412:	f000 f861 	bl	80024d8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002416:	230f      	movs	r3, #15
 8002418:	627b      	str	r3, [r7, #36]	; 0x24
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800241a:	2302      	movs	r3, #2
 800241c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800241e:	2300      	movs	r3, #0
 8002420:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002422:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002426:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002428:	2300      	movs	r3, #0
 800242a:	637b      	str	r3, [r7, #52]	; 0x34

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800242c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002430:	2103      	movs	r1, #3
 8002432:	4618      	mov	r0, r3
 8002434:	f005 f8b4 	bl	80075a0 <HAL_RCC_ClockConfig>
 8002438:	4603      	mov	r3, r0
 800243a:	2b00      	cmp	r3, #0
 800243c:	d001      	beq.n	8002442 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 800243e:	f000 f84b 	bl	80024d8 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8002442:	2301      	movs	r3, #1
 8002444:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 200;
 8002446:	23c8      	movs	r3, #200	; 0xc8
 8002448:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLLI2S.PLLI2SM = 5;
 800244a:	2305      	movs	r3, #5
 800244c:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 800244e:	2302      	movs	r3, #2
 8002450:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002452:	f107 030c 	add.w	r3, r7, #12
 8002456:	4618      	mov	r0, r3
 8002458:	f005 fb28 	bl	8007aac <HAL_RCCEx_PeriphCLKConfig>
 800245c:	4603      	mov	r3, r0
 800245e:	2b00      	cmp	r3, #0
 8002460:	d001      	beq.n	8002466 <SystemClock_Config+0xf6>
  {
    Error_Handler();
 8002462:	f000 f839 	bl	80024d8 <Error_Handler>
  }
}
 8002466:	bf00      	nop
 8002468:	3768      	adds	r7, #104	; 0x68
 800246a:	46bd      	mov	sp, r7
 800246c:	bd80      	pop	{r7, pc}
 800246e:	bf00      	nop
 8002470:	40023800 	.word	0x40023800
 8002474:	40007000 	.word	0x40007000

08002478 <HAL_I2S_TxCpltCallback>:
/* USER CODE BEGIN 4 */
void HAL_I2S_TxHalfCpltCallback (I2S_HandleTypeDef *hi2s) {
	txstate = 1;
}

void HAL_I2S_TxCpltCallback (I2S_HandleTypeDef *hi2s) {
 8002478:	b480      	push	{r7}
 800247a:	b083      	sub	sp, #12
 800247c:	af00      	add	r7, sp, #0
 800247e:	6078      	str	r0, [r7, #4]
	txstate = 2;
 8002480:	4b04      	ldr	r3, [pc, #16]	; (8002494 <HAL_I2S_TxCpltCallback+0x1c>)
 8002482:	2202      	movs	r2, #2
 8002484:	701a      	strb	r2, [r3, #0]
}
 8002486:	bf00      	nop
 8002488:	370c      	adds	r7, #12
 800248a:	46bd      	mov	sp, r7
 800248c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002490:	4770      	bx	lr
 8002492:	bf00      	nop
 8002494:	20000660 	.word	0x20000660

08002498 <HAL_I2S_RxHalfCpltCallback>:

void HAL_I2S_RxHalfCpltCallback (I2S_HandleTypeDef *hi2s) {
 8002498:	b480      	push	{r7}
 800249a:	b083      	sub	sp, #12
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]
	rxstate = 1;
 80024a0:	4b04      	ldr	r3, [pc, #16]	; (80024b4 <HAL_I2S_RxHalfCpltCallback+0x1c>)
 80024a2:	2201      	movs	r2, #1
 80024a4:	701a      	strb	r2, [r3, #0]
}
 80024a6:	bf00      	nop
 80024a8:	370c      	adds	r7, #12
 80024aa:	46bd      	mov	sp, r7
 80024ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b0:	4770      	bx	lr
 80024b2:	bf00      	nop
 80024b4:	20000661 	.word	0x20000661

080024b8 <HAL_I2S_RxCpltCallback>:

void HAL_I2S_RxCpltCallback (I2S_HandleTypeDef *hi2s) {
 80024b8:	b480      	push	{r7}
 80024ba:	b083      	sub	sp, #12
 80024bc:	af00      	add	r7, sp, #0
 80024be:	6078      	str	r0, [r7, #4]
	rxstate = 2;
 80024c0:	4b04      	ldr	r3, [pc, #16]	; (80024d4 <HAL_I2S_RxCpltCallback+0x1c>)
 80024c2:	2202      	movs	r2, #2
 80024c4:	701a      	strb	r2, [r3, #0]
}
 80024c6:	bf00      	nop
 80024c8:	370c      	adds	r7, #12
 80024ca:	46bd      	mov	sp, r7
 80024cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d0:	4770      	bx	lr
 80024d2:	bf00      	nop
 80024d4:	20000661 	.word	0x20000661

080024d8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80024d8:	b480      	push	{r7}
 80024da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80024dc:	bf00      	nop
 80024de:	46bd      	mov	sp, r7
 80024e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e4:	4770      	bx	lr

080024e6 <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
 80024e6:	b480      	push	{r7}
 80024e8:	b083      	sub	sp, #12
 80024ea:	af00      	add	r7, sp, #0
 80024ec:	6078      	str	r0, [r7, #4]
 80024ee:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     tex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
 80024f0:	bf00      	nop
 80024f2:	370c      	adds	r7, #12
 80024f4:	46bd      	mov	sp, r7
 80024f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fa:	4770      	bx	lr

080024fc <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80024fc:	b580      	push	{r7, lr}
 80024fe:	af00      	add	r7, sp, #0

  hspi1.Instance = SPI1;
 8002500:	4b17      	ldr	r3, [pc, #92]	; (8002560 <MX_SPI1_Init+0x64>)
 8002502:	4a18      	ldr	r2, [pc, #96]	; (8002564 <MX_SPI1_Init+0x68>)
 8002504:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002506:	4b16      	ldr	r3, [pc, #88]	; (8002560 <MX_SPI1_Init+0x64>)
 8002508:	f44f 7282 	mov.w	r2, #260	; 0x104
 800250c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800250e:	4b14      	ldr	r3, [pc, #80]	; (8002560 <MX_SPI1_Init+0x64>)
 8002510:	2200      	movs	r2, #0
 8002512:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002514:	4b12      	ldr	r3, [pc, #72]	; (8002560 <MX_SPI1_Init+0x64>)
 8002516:	2200      	movs	r2, #0
 8002518:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800251a:	4b11      	ldr	r3, [pc, #68]	; (8002560 <MX_SPI1_Init+0x64>)
 800251c:	2200      	movs	r2, #0
 800251e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002520:	4b0f      	ldr	r3, [pc, #60]	; (8002560 <MX_SPI1_Init+0x64>)
 8002522:	2200      	movs	r2, #0
 8002524:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002526:	4b0e      	ldr	r3, [pc, #56]	; (8002560 <MX_SPI1_Init+0x64>)
 8002528:	f44f 7200 	mov.w	r2, #512	; 0x200
 800252c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800252e:	4b0c      	ldr	r3, [pc, #48]	; (8002560 <MX_SPI1_Init+0x64>)
 8002530:	2200      	movs	r2, #0
 8002532:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002534:	4b0a      	ldr	r3, [pc, #40]	; (8002560 <MX_SPI1_Init+0x64>)
 8002536:	2200      	movs	r2, #0
 8002538:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800253a:	4b09      	ldr	r3, [pc, #36]	; (8002560 <MX_SPI1_Init+0x64>)
 800253c:	2200      	movs	r2, #0
 800253e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002540:	4b07      	ldr	r3, [pc, #28]	; (8002560 <MX_SPI1_Init+0x64>)
 8002542:	2200      	movs	r2, #0
 8002544:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002546:	4b06      	ldr	r3, [pc, #24]	; (8002560 <MX_SPI1_Init+0x64>)
 8002548:	220a      	movs	r2, #10
 800254a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800254c:	4804      	ldr	r0, [pc, #16]	; (8002560 <MX_SPI1_Init+0x64>)
 800254e:	f005 fd1f 	bl	8007f90 <HAL_SPI_Init>
 8002552:	4603      	mov	r3, r0
 8002554:	2b00      	cmp	r3, #0
 8002556:	d001      	beq.n	800255c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8002558:	f7ff ffbe 	bl	80024d8 <Error_Handler>
  }

}
 800255c:	bf00      	nop
 800255e:	bd80      	pop	{r7, pc}
 8002560:	200032e0 	.word	0x200032e0
 8002564:	40013000 	.word	0x40013000

08002568 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002568:	b580      	push	{r7, lr}
 800256a:	b08a      	sub	sp, #40	; 0x28
 800256c:	af00      	add	r7, sp, #0
 800256e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002570:	f107 0314 	add.w	r3, r7, #20
 8002574:	2200      	movs	r2, #0
 8002576:	601a      	str	r2, [r3, #0]
 8002578:	605a      	str	r2, [r3, #4]
 800257a:	609a      	str	r2, [r3, #8]
 800257c:	60da      	str	r2, [r3, #12]
 800257e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	4a19      	ldr	r2, [pc, #100]	; (80025ec <HAL_SPI_MspInit+0x84>)
 8002586:	4293      	cmp	r3, r2
 8002588:	d12b      	bne.n	80025e2 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800258a:	2300      	movs	r3, #0
 800258c:	613b      	str	r3, [r7, #16]
 800258e:	4b18      	ldr	r3, [pc, #96]	; (80025f0 <HAL_SPI_MspInit+0x88>)
 8002590:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002592:	4a17      	ldr	r2, [pc, #92]	; (80025f0 <HAL_SPI_MspInit+0x88>)
 8002594:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002598:	6453      	str	r3, [r2, #68]	; 0x44
 800259a:	4b15      	ldr	r3, [pc, #84]	; (80025f0 <HAL_SPI_MspInit+0x88>)
 800259c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800259e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80025a2:	613b      	str	r3, [r7, #16]
 80025a4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80025a6:	2300      	movs	r3, #0
 80025a8:	60fb      	str	r3, [r7, #12]
 80025aa:	4b11      	ldr	r3, [pc, #68]	; (80025f0 <HAL_SPI_MspInit+0x88>)
 80025ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025ae:	4a10      	ldr	r2, [pc, #64]	; (80025f0 <HAL_SPI_MspInit+0x88>)
 80025b0:	f043 0301 	orr.w	r3, r3, #1
 80025b4:	6313      	str	r3, [r2, #48]	; 0x30
 80025b6:	4b0e      	ldr	r3, [pc, #56]	; (80025f0 <HAL_SPI_MspInit+0x88>)
 80025b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025ba:	f003 0301 	and.w	r3, r3, #1
 80025be:	60fb      	str	r3, [r7, #12]
 80025c0:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 80025c2:	23e0      	movs	r3, #224	; 0xe0
 80025c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025c6:	2302      	movs	r3, #2
 80025c8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025ca:	2300      	movs	r3, #0
 80025cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025ce:	2303      	movs	r3, #3
 80025d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80025d2:	2305      	movs	r3, #5
 80025d4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025d6:	f107 0314 	add.w	r3, r7, #20
 80025da:	4619      	mov	r1, r3
 80025dc:	4805      	ldr	r0, [pc, #20]	; (80025f4 <HAL_SPI_MspInit+0x8c>)
 80025de:	f001 f8db 	bl	8003798 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80025e2:	bf00      	nop
 80025e4:	3728      	adds	r7, #40	; 0x28
 80025e6:	46bd      	mov	sp, r7
 80025e8:	bd80      	pop	{r7, pc}
 80025ea:	bf00      	nop
 80025ec:	40013000 	.word	0x40013000
 80025f0:	40023800 	.word	0x40023800
 80025f4:	40020000 	.word	0x40020000

080025f8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80025f8:	b580      	push	{r7, lr}
 80025fa:	b082      	sub	sp, #8
 80025fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80025fe:	2300      	movs	r3, #0
 8002600:	607b      	str	r3, [r7, #4]
 8002602:	4b10      	ldr	r3, [pc, #64]	; (8002644 <HAL_MspInit+0x4c>)
 8002604:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002606:	4a0f      	ldr	r2, [pc, #60]	; (8002644 <HAL_MspInit+0x4c>)
 8002608:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800260c:	6453      	str	r3, [r2, #68]	; 0x44
 800260e:	4b0d      	ldr	r3, [pc, #52]	; (8002644 <HAL_MspInit+0x4c>)
 8002610:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002612:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002616:	607b      	str	r3, [r7, #4]
 8002618:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800261a:	2300      	movs	r3, #0
 800261c:	603b      	str	r3, [r7, #0]
 800261e:	4b09      	ldr	r3, [pc, #36]	; (8002644 <HAL_MspInit+0x4c>)
 8002620:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002622:	4a08      	ldr	r2, [pc, #32]	; (8002644 <HAL_MspInit+0x4c>)
 8002624:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002628:	6413      	str	r3, [r2, #64]	; 0x40
 800262a:	4b06      	ldr	r3, [pc, #24]	; (8002644 <HAL_MspInit+0x4c>)
 800262c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800262e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002632:	603b      	str	r3, [r7, #0]
 8002634:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002636:	2007      	movs	r0, #7
 8002638:	f000 fb2a 	bl	8002c90 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800263c:	bf00      	nop
 800263e:	3708      	adds	r7, #8
 8002640:	46bd      	mov	sp, r7
 8002642:	bd80      	pop	{r7, pc}
 8002644:	40023800 	.word	0x40023800

08002648 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002648:	b480      	push	{r7}
 800264a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800264c:	bf00      	nop
 800264e:	46bd      	mov	sp, r7
 8002650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002654:	4770      	bx	lr

08002656 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002656:	b480      	push	{r7}
 8002658:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800265a:	e7fe      	b.n	800265a <HardFault_Handler+0x4>

0800265c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800265c:	b480      	push	{r7}
 800265e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002660:	e7fe      	b.n	8002660 <MemManage_Handler+0x4>

08002662 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002662:	b480      	push	{r7}
 8002664:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002666:	e7fe      	b.n	8002666 <BusFault_Handler+0x4>

08002668 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002668:	b480      	push	{r7}
 800266a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800266c:	e7fe      	b.n	800266c <UsageFault_Handler+0x4>

0800266e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800266e:	b480      	push	{r7}
 8002670:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002672:	bf00      	nop
 8002674:	46bd      	mov	sp, r7
 8002676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267a:	4770      	bx	lr

0800267c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800267c:	b480      	push	{r7}
 800267e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002680:	bf00      	nop
 8002682:	46bd      	mov	sp, r7
 8002684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002688:	4770      	bx	lr

0800268a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800268a:	b480      	push	{r7}
 800268c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800268e:	bf00      	nop
 8002690:	46bd      	mov	sp, r7
 8002692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002696:	4770      	bx	lr

08002698 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002698:	b580      	push	{r7, lr}
 800269a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800269c:	f000 f9e6 	bl	8002a6c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80026a0:	bf00      	nop
 80026a2:	bd80      	pop	{r7, pc}

080026a4 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80026a4:	b580      	push	{r7, lr}
 80026a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_tx);
 80026a8:	4802      	ldr	r0, [pc, #8]	; (80026b4 <DMA1_Stream5_IRQHandler+0x10>)
 80026aa:	f000 fe0d 	bl	80032c8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80026ae:	bf00      	nop
 80026b0:	bd80      	pop	{r7, pc}
 80026b2:	bf00      	nop
 80026b4:	200006d0 	.word	0x200006d0

080026b8 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 80026b8:	b580      	push	{r7, lr}
 80026ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_I2S_IRQHandler(&hi2s2);
 80026bc:	4802      	ldr	r0, [pc, #8]	; (80026c8 <SPI2_IRQHandler+0x10>)
 80026be:	f002 fedb 	bl	8005478 <HAL_I2S_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 80026c2:	bf00      	nop
 80026c4:	bd80      	pop	{r7, pc}
 80026c6:	bf00      	nop
 80026c8:	20000730 	.word	0x20000730

080026cc <SPI3_IRQHandler>:

/**
  * @brief This function handles SPI3 global interrupt.
  */
void SPI3_IRQHandler(void)
{
 80026cc:	b580      	push	{r7, lr}
 80026ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI3_IRQn 0 */

  /* USER CODE END SPI3_IRQn 0 */
  HAL_I2S_IRQHandler(&hi2s3);
 80026d0:	4802      	ldr	r0, [pc, #8]	; (80026dc <SPI3_IRQHandler+0x10>)
 80026d2:	f002 fed1 	bl	8005478 <HAL_I2S_IRQHandler>
  /* USER CODE BEGIN SPI3_IRQn 1 */

  /* USER CODE END SPI3_IRQn 1 */
}
 80026d6:	bf00      	nop
 80026d8:	bd80      	pop	{r7, pc}
 80026da:	bf00      	nop
 80026dc:	20000778 	.word	0x20000778

080026e0 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80026e0:	b580      	push	{r7, lr}
 80026e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80026e4:	4802      	ldr	r0, [pc, #8]	; (80026f0 <OTG_FS_IRQHandler+0x10>)
 80026e6:	f003 fc08 	bl	8005efa <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80026ea:	bf00      	nop
 80026ec:	bd80      	pop	{r7, pc}
 80026ee:	bf00      	nop
 80026f0:	200048a0 	.word	0x200048a0

080026f4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80026f4:	b580      	push	{r7, lr}
 80026f6:	b086      	sub	sp, #24
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80026fc:	4a14      	ldr	r2, [pc, #80]	; (8002750 <_sbrk+0x5c>)
 80026fe:	4b15      	ldr	r3, [pc, #84]	; (8002754 <_sbrk+0x60>)
 8002700:	1ad3      	subs	r3, r2, r3
 8002702:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002704:	697b      	ldr	r3, [r7, #20]
 8002706:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002708:	4b13      	ldr	r3, [pc, #76]	; (8002758 <_sbrk+0x64>)
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	2b00      	cmp	r3, #0
 800270e:	d102      	bne.n	8002716 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002710:	4b11      	ldr	r3, [pc, #68]	; (8002758 <_sbrk+0x64>)
 8002712:	4a12      	ldr	r2, [pc, #72]	; (800275c <_sbrk+0x68>)
 8002714:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002716:	4b10      	ldr	r3, [pc, #64]	; (8002758 <_sbrk+0x64>)
 8002718:	681a      	ldr	r2, [r3, #0]
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	4413      	add	r3, r2
 800271e:	693a      	ldr	r2, [r7, #16]
 8002720:	429a      	cmp	r2, r3
 8002722:	d207      	bcs.n	8002734 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002724:	f00c fb90 	bl	800ee48 <__errno>
 8002728:	4602      	mov	r2, r0
 800272a:	230c      	movs	r3, #12
 800272c:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 800272e:	f04f 33ff 	mov.w	r3, #4294967295
 8002732:	e009      	b.n	8002748 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002734:	4b08      	ldr	r3, [pc, #32]	; (8002758 <_sbrk+0x64>)
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800273a:	4b07      	ldr	r3, [pc, #28]	; (8002758 <_sbrk+0x64>)
 800273c:	681a      	ldr	r2, [r3, #0]
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	4413      	add	r3, r2
 8002742:	4a05      	ldr	r2, [pc, #20]	; (8002758 <_sbrk+0x64>)
 8002744:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002746:	68fb      	ldr	r3, [r7, #12]
}
 8002748:	4618      	mov	r0, r3
 800274a:	3718      	adds	r7, #24
 800274c:	46bd      	mov	sp, r7
 800274e:	bd80      	pop	{r7, pc}
 8002750:	20020000 	.word	0x20020000
 8002754:	00004000 	.word	0x00004000
 8002758:	20000664 	.word	0x20000664
 800275c:	20004cb0 	.word	0x20004cb0

08002760 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002760:	b480      	push	{r7}
 8002762:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002764:	4b08      	ldr	r3, [pc, #32]	; (8002788 <SystemInit+0x28>)
 8002766:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800276a:	4a07      	ldr	r2, [pc, #28]	; (8002788 <SystemInit+0x28>)
 800276c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002770:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002774:	4b04      	ldr	r3, [pc, #16]	; (8002788 <SystemInit+0x28>)
 8002776:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800277a:	609a      	str	r2, [r3, #8]
#endif
}
 800277c:	bf00      	nop
 800277e:	46bd      	mov	sp, r7
 8002780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002784:	4770      	bx	lr
 8002786:	bf00      	nop
 8002788:	e000ed00 	.word	0xe000ed00

0800278c <MX_TIM4_Init>:

TIM_HandleTypeDef htim4;

/* TIM4 init function */
void MX_TIM4_Init(void)
{
 800278c:	b580      	push	{r7, lr}
 800278e:	b08e      	sub	sp, #56	; 0x38
 8002790:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002792:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002796:	2200      	movs	r2, #0
 8002798:	601a      	str	r2, [r3, #0]
 800279a:	605a      	str	r2, [r3, #4]
 800279c:	609a      	str	r2, [r3, #8]
 800279e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80027a0:	f107 0320 	add.w	r3, r7, #32
 80027a4:	2200      	movs	r2, #0
 80027a6:	601a      	str	r2, [r3, #0]
 80027a8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80027aa:	1d3b      	adds	r3, r7, #4
 80027ac:	2200      	movs	r2, #0
 80027ae:	601a      	str	r2, [r3, #0]
 80027b0:	605a      	str	r2, [r3, #4]
 80027b2:	609a      	str	r2, [r3, #8]
 80027b4:	60da      	str	r2, [r3, #12]
 80027b6:	611a      	str	r2, [r3, #16]
 80027b8:	615a      	str	r2, [r3, #20]
 80027ba:	619a      	str	r2, [r3, #24]

  htim4.Instance = TIM4;
 80027bc:	4b3d      	ldr	r3, [pc, #244]	; (80028b4 <MX_TIM4_Init+0x128>)
 80027be:	4a3e      	ldr	r2, [pc, #248]	; (80028b8 <MX_TIM4_Init+0x12c>)
 80027c0:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 8;
 80027c2:	4b3c      	ldr	r3, [pc, #240]	; (80028b4 <MX_TIM4_Init+0x128>)
 80027c4:	2208      	movs	r2, #8
 80027c6:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80027c8:	4b3a      	ldr	r3, [pc, #232]	; (80028b4 <MX_TIM4_Init+0x128>)
 80027ca:	2200      	movs	r2, #0
 80027cc:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 4096;
 80027ce:	4b39      	ldr	r3, [pc, #228]	; (80028b4 <MX_TIM4_Init+0x128>)
 80027d0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80027d4:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80027d6:	4b37      	ldr	r3, [pc, #220]	; (80028b4 <MX_TIM4_Init+0x128>)
 80027d8:	2200      	movs	r2, #0
 80027da:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80027dc:	4b35      	ldr	r3, [pc, #212]	; (80028b4 <MX_TIM4_Init+0x128>)
 80027de:	2200      	movs	r2, #0
 80027e0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80027e2:	4834      	ldr	r0, [pc, #208]	; (80028b4 <MX_TIM4_Init+0x128>)
 80027e4:	f005 fd02 	bl	80081ec <HAL_TIM_Base_Init>
 80027e8:	4603      	mov	r3, r0
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d001      	beq.n	80027f2 <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 80027ee:	f7ff fe73 	bl	80024d8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80027f2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80027f6:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80027f8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80027fc:	4619      	mov	r1, r3
 80027fe:	482d      	ldr	r0, [pc, #180]	; (80028b4 <MX_TIM4_Init+0x128>)
 8002800:	f006 f8a0 	bl	8008944 <HAL_TIM_ConfigClockSource>
 8002804:	4603      	mov	r3, r0
 8002806:	2b00      	cmp	r3, #0
 8002808:	d001      	beq.n	800280e <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 800280a:	f7ff fe65 	bl	80024d8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 800280e:	4829      	ldr	r0, [pc, #164]	; (80028b4 <MX_TIM4_Init+0x128>)
 8002810:	f005 fd8e 	bl	8008330 <HAL_TIM_PWM_Init>
 8002814:	4603      	mov	r3, r0
 8002816:	2b00      	cmp	r3, #0
 8002818:	d001      	beq.n	800281e <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 800281a:	f7ff fe5d 	bl	80024d8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800281e:	2300      	movs	r3, #0
 8002820:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002822:	2300      	movs	r3, #0
 8002824:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002826:	f107 0320 	add.w	r3, r7, #32
 800282a:	4619      	mov	r1, r3
 800282c:	4821      	ldr	r0, [pc, #132]	; (80028b4 <MX_TIM4_Init+0x128>)
 800282e:	f006 ff1d 	bl	800966c <HAL_TIMEx_MasterConfigSynchronization>
 8002832:	4603      	mov	r3, r0
 8002834:	2b00      	cmp	r3, #0
 8002836:	d001      	beq.n	800283c <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8002838:	f7ff fe4e 	bl	80024d8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800283c:	2360      	movs	r3, #96	; 0x60
 800283e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002840:	2300      	movs	r3, #0
 8002842:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002844:	2300      	movs	r3, #0
 8002846:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002848:	2300      	movs	r3, #0
 800284a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800284c:	1d3b      	adds	r3, r7, #4
 800284e:	2200      	movs	r2, #0
 8002850:	4619      	mov	r1, r3
 8002852:	4818      	ldr	r0, [pc, #96]	; (80028b4 <MX_TIM4_Init+0x128>)
 8002854:	f005 fecc 	bl	80085f0 <HAL_TIM_PWM_ConfigChannel>
 8002858:	4603      	mov	r3, r0
 800285a:	2b00      	cmp	r3, #0
 800285c:	d001      	beq.n	8002862 <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 800285e:	f7ff fe3b 	bl	80024d8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002862:	1d3b      	adds	r3, r7, #4
 8002864:	2204      	movs	r2, #4
 8002866:	4619      	mov	r1, r3
 8002868:	4812      	ldr	r0, [pc, #72]	; (80028b4 <MX_TIM4_Init+0x128>)
 800286a:	f005 fec1 	bl	80085f0 <HAL_TIM_PWM_ConfigChannel>
 800286e:	4603      	mov	r3, r0
 8002870:	2b00      	cmp	r3, #0
 8002872:	d001      	beq.n	8002878 <MX_TIM4_Init+0xec>
  {
    Error_Handler();
 8002874:	f7ff fe30 	bl	80024d8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002878:	1d3b      	adds	r3, r7, #4
 800287a:	2208      	movs	r2, #8
 800287c:	4619      	mov	r1, r3
 800287e:	480d      	ldr	r0, [pc, #52]	; (80028b4 <MX_TIM4_Init+0x128>)
 8002880:	f005 feb6 	bl	80085f0 <HAL_TIM_PWM_ConfigChannel>
 8002884:	4603      	mov	r3, r0
 8002886:	2b00      	cmp	r3, #0
 8002888:	d001      	beq.n	800288e <MX_TIM4_Init+0x102>
  {
    Error_Handler();
 800288a:	f7ff fe25 	bl	80024d8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800288e:	1d3b      	adds	r3, r7, #4
 8002890:	220c      	movs	r2, #12
 8002892:	4619      	mov	r1, r3
 8002894:	4807      	ldr	r0, [pc, #28]	; (80028b4 <MX_TIM4_Init+0x128>)
 8002896:	f005 feab 	bl	80085f0 <HAL_TIM_PWM_ConfigChannel>
 800289a:	4603      	mov	r3, r0
 800289c:	2b00      	cmp	r3, #0
 800289e:	d001      	beq.n	80028a4 <MX_TIM4_Init+0x118>
  {
    Error_Handler();
 80028a0:	f7ff fe1a 	bl	80024d8 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim4);
 80028a4:	4803      	ldr	r0, [pc, #12]	; (80028b4 <MX_TIM4_Init+0x128>)
 80028a6:	f000 f82b 	bl	8002900 <HAL_TIM_MspPostInit>

}
 80028aa:	bf00      	nop
 80028ac:	3738      	adds	r7, #56	; 0x38
 80028ae:	46bd      	mov	sp, r7
 80028b0:	bd80      	pop	{r7, pc}
 80028b2:	bf00      	nop
 80028b4:	20003338 	.word	0x20003338
 80028b8:	40000800 	.word	0x40000800

080028bc <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80028bc:	b480      	push	{r7}
 80028be:	b085      	sub	sp, #20
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM4)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	4a0b      	ldr	r2, [pc, #44]	; (80028f8 <HAL_TIM_Base_MspInit+0x3c>)
 80028ca:	4293      	cmp	r3, r2
 80028cc:	d10d      	bne.n	80028ea <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 80028ce:	2300      	movs	r3, #0
 80028d0:	60fb      	str	r3, [r7, #12]
 80028d2:	4b0a      	ldr	r3, [pc, #40]	; (80028fc <HAL_TIM_Base_MspInit+0x40>)
 80028d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028d6:	4a09      	ldr	r2, [pc, #36]	; (80028fc <HAL_TIM_Base_MspInit+0x40>)
 80028d8:	f043 0304 	orr.w	r3, r3, #4
 80028dc:	6413      	str	r3, [r2, #64]	; 0x40
 80028de:	4b07      	ldr	r3, [pc, #28]	; (80028fc <HAL_TIM_Base_MspInit+0x40>)
 80028e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028e2:	f003 0304 	and.w	r3, r3, #4
 80028e6:	60fb      	str	r3, [r7, #12]
 80028e8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 80028ea:	bf00      	nop
 80028ec:	3714      	adds	r7, #20
 80028ee:	46bd      	mov	sp, r7
 80028f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f4:	4770      	bx	lr
 80028f6:	bf00      	nop
 80028f8:	40000800 	.word	0x40000800
 80028fc:	40023800 	.word	0x40023800

08002900 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002900:	b580      	push	{r7, lr}
 8002902:	b088      	sub	sp, #32
 8002904:	af00      	add	r7, sp, #0
 8002906:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002908:	f107 030c 	add.w	r3, r7, #12
 800290c:	2200      	movs	r2, #0
 800290e:	601a      	str	r2, [r3, #0]
 8002910:	605a      	str	r2, [r3, #4]
 8002912:	609a      	str	r2, [r3, #8]
 8002914:	60da      	str	r2, [r3, #12]
 8002916:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM4)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	4a12      	ldr	r2, [pc, #72]	; (8002968 <HAL_TIM_MspPostInit+0x68>)
 800291e:	4293      	cmp	r3, r2
 8002920:	d11e      	bne.n	8002960 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002922:	2300      	movs	r3, #0
 8002924:	60bb      	str	r3, [r7, #8]
 8002926:	4b11      	ldr	r3, [pc, #68]	; (800296c <HAL_TIM_MspPostInit+0x6c>)
 8002928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800292a:	4a10      	ldr	r2, [pc, #64]	; (800296c <HAL_TIM_MspPostInit+0x6c>)
 800292c:	f043 0308 	orr.w	r3, r3, #8
 8002930:	6313      	str	r3, [r2, #48]	; 0x30
 8002932:	4b0e      	ldr	r3, [pc, #56]	; (800296c <HAL_TIM_MspPostInit+0x6c>)
 8002934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002936:	f003 0308 	and.w	r3, r3, #8
 800293a:	60bb      	str	r3, [r7, #8]
 800293c:	68bb      	ldr	r3, [r7, #8]
    PD12     ------> TIM4_CH1
    PD13     ------> TIM4_CH2
    PD14     ------> TIM4_CH3
    PD15     ------> TIM4_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800293e:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8002942:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002944:	2302      	movs	r3, #2
 8002946:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002948:	2300      	movs	r3, #0
 800294a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800294c:	2300      	movs	r3, #0
 800294e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002950:	2302      	movs	r3, #2
 8002952:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002954:	f107 030c 	add.w	r3, r7, #12
 8002958:	4619      	mov	r1, r3
 800295a:	4805      	ldr	r0, [pc, #20]	; (8002970 <HAL_TIM_MspPostInit+0x70>)
 800295c:	f000 ff1c 	bl	8003798 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8002960:	bf00      	nop
 8002962:	3720      	adds	r7, #32
 8002964:	46bd      	mov	sp, r7
 8002966:	bd80      	pop	{r7, pc}
 8002968:	40000800 	.word	0x40000800
 800296c:	40023800 	.word	0x40023800
 8002970:	40020c00 	.word	0x40020c00

08002974 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002974:	f8df d034 	ldr.w	sp, [pc, #52]	; 80029ac <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002978:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800297a:	e003      	b.n	8002984 <LoopCopyDataInit>

0800297c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800297c:	4b0c      	ldr	r3, [pc, #48]	; (80029b0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800297e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002980:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002982:	3104      	adds	r1, #4

08002984 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002984:	480b      	ldr	r0, [pc, #44]	; (80029b4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002986:	4b0c      	ldr	r3, [pc, #48]	; (80029b8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002988:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800298a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800298c:	d3f6      	bcc.n	800297c <CopyDataInit>
  ldr  r2, =_sbss
 800298e:	4a0b      	ldr	r2, [pc, #44]	; (80029bc <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002990:	e002      	b.n	8002998 <LoopFillZerobss>

08002992 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002992:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002994:	f842 3b04 	str.w	r3, [r2], #4

08002998 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002998:	4b09      	ldr	r3, [pc, #36]	; (80029c0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800299a:	429a      	cmp	r2, r3

  bcc  FillZerobss
 800299c:	d3f9      	bcc.n	8002992 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800299e:	f7ff fedf 	bl	8002760 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80029a2:	f00c fa57 	bl	800ee54 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80029a6:	f7ff faff 	bl	8001fa8 <main>
  bx  lr    
 80029aa:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80029ac:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80029b0:	080100f0 	.word	0x080100f0
  ldr  r0, =_sdata
 80029b4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80029b8:	200005e8 	.word	0x200005e8
  ldr  r2, =_sbss
 80029bc:	200005e8 	.word	0x200005e8
  ldr  r3, = _ebss
 80029c0:	20004cac 	.word	0x20004cac

080029c4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80029c4:	e7fe      	b.n	80029c4 <ADC_IRQHandler>
	...

080029c8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80029c8:	b580      	push	{r7, lr}
 80029ca:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80029cc:	4b0e      	ldr	r3, [pc, #56]	; (8002a08 <HAL_Init+0x40>)
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	4a0d      	ldr	r2, [pc, #52]	; (8002a08 <HAL_Init+0x40>)
 80029d2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80029d6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80029d8:	4b0b      	ldr	r3, [pc, #44]	; (8002a08 <HAL_Init+0x40>)
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	4a0a      	ldr	r2, [pc, #40]	; (8002a08 <HAL_Init+0x40>)
 80029de:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80029e2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80029e4:	4b08      	ldr	r3, [pc, #32]	; (8002a08 <HAL_Init+0x40>)
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	4a07      	ldr	r2, [pc, #28]	; (8002a08 <HAL_Init+0x40>)
 80029ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80029ee:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80029f0:	2003      	movs	r0, #3
 80029f2:	f000 f94d 	bl	8002c90 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80029f6:	2000      	movs	r0, #0
 80029f8:	f000 f808 	bl	8002a0c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80029fc:	f7ff fdfc 	bl	80025f8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002a00:	2300      	movs	r3, #0
}
 8002a02:	4618      	mov	r0, r3
 8002a04:	bd80      	pop	{r7, pc}
 8002a06:	bf00      	nop
 8002a08:	40023c00 	.word	0x40023c00

08002a0c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	b082      	sub	sp, #8
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002a14:	4b12      	ldr	r3, [pc, #72]	; (8002a60 <HAL_InitTick+0x54>)
 8002a16:	681a      	ldr	r2, [r3, #0]
 8002a18:	4b12      	ldr	r3, [pc, #72]	; (8002a64 <HAL_InitTick+0x58>)
 8002a1a:	781b      	ldrb	r3, [r3, #0]
 8002a1c:	4619      	mov	r1, r3
 8002a1e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002a22:	fbb3 f3f1 	udiv	r3, r3, r1
 8002a26:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a2a:	4618      	mov	r0, r3
 8002a2c:	f000 f994 	bl	8002d58 <HAL_SYSTICK_Config>
 8002a30:	4603      	mov	r3, r0
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d001      	beq.n	8002a3a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002a36:	2301      	movs	r3, #1
 8002a38:	e00e      	b.n	8002a58 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	2b0f      	cmp	r3, #15
 8002a3e:	d80a      	bhi.n	8002a56 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002a40:	2200      	movs	r2, #0
 8002a42:	6879      	ldr	r1, [r7, #4]
 8002a44:	f04f 30ff 	mov.w	r0, #4294967295
 8002a48:	f000 f942 	bl	8002cd0 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002a4c:	4a06      	ldr	r2, [pc, #24]	; (8002a68 <HAL_InitTick+0x5c>)
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002a52:	2300      	movs	r3, #0
 8002a54:	e000      	b.n	8002a58 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002a56:	2301      	movs	r3, #1
}
 8002a58:	4618      	mov	r0, r3
 8002a5a:	3708      	adds	r7, #8
 8002a5c:	46bd      	mov	sp, r7
 8002a5e:	bd80      	pop	{r7, pc}
 8002a60:	20000400 	.word	0x20000400
 8002a64:	20000408 	.word	0x20000408
 8002a68:	20000404 	.word	0x20000404

08002a6c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002a6c:	b480      	push	{r7}
 8002a6e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002a70:	4b06      	ldr	r3, [pc, #24]	; (8002a8c <HAL_IncTick+0x20>)
 8002a72:	781b      	ldrb	r3, [r3, #0]
 8002a74:	461a      	mov	r2, r3
 8002a76:	4b06      	ldr	r3, [pc, #24]	; (8002a90 <HAL_IncTick+0x24>)
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	4413      	add	r3, r2
 8002a7c:	4a04      	ldr	r2, [pc, #16]	; (8002a90 <HAL_IncTick+0x24>)
 8002a7e:	6013      	str	r3, [r2, #0]
}
 8002a80:	bf00      	nop
 8002a82:	46bd      	mov	sp, r7
 8002a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a88:	4770      	bx	lr
 8002a8a:	bf00      	nop
 8002a8c:	20000408 	.word	0x20000408
 8002a90:	20003378 	.word	0x20003378

08002a94 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002a94:	b480      	push	{r7}
 8002a96:	af00      	add	r7, sp, #0
  return uwTick;
 8002a98:	4b03      	ldr	r3, [pc, #12]	; (8002aa8 <HAL_GetTick+0x14>)
 8002a9a:	681b      	ldr	r3, [r3, #0]
}
 8002a9c:	4618      	mov	r0, r3
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa4:	4770      	bx	lr
 8002aa6:	bf00      	nop
 8002aa8:	20003378 	.word	0x20003378

08002aac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002aac:	b580      	push	{r7, lr}
 8002aae:	b084      	sub	sp, #16
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002ab4:	f7ff ffee 	bl	8002a94 <HAL_GetTick>
 8002ab8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ac4:	d005      	beq.n	8002ad2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002ac6:	4b09      	ldr	r3, [pc, #36]	; (8002aec <HAL_Delay+0x40>)
 8002ac8:	781b      	ldrb	r3, [r3, #0]
 8002aca:	461a      	mov	r2, r3
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	4413      	add	r3, r2
 8002ad0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002ad2:	bf00      	nop
 8002ad4:	f7ff ffde 	bl	8002a94 <HAL_GetTick>
 8002ad8:	4602      	mov	r2, r0
 8002ada:	68bb      	ldr	r3, [r7, #8]
 8002adc:	1ad3      	subs	r3, r2, r3
 8002ade:	68fa      	ldr	r2, [r7, #12]
 8002ae0:	429a      	cmp	r2, r3
 8002ae2:	d8f7      	bhi.n	8002ad4 <HAL_Delay+0x28>
  {
  }
}
 8002ae4:	bf00      	nop
 8002ae6:	3710      	adds	r7, #16
 8002ae8:	46bd      	mov	sp, r7
 8002aea:	bd80      	pop	{r7, pc}
 8002aec:	20000408 	.word	0x20000408

08002af0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002af0:	b480      	push	{r7}
 8002af2:	b085      	sub	sp, #20
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	f003 0307 	and.w	r3, r3, #7
 8002afe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002b00:	4b0c      	ldr	r3, [pc, #48]	; (8002b34 <__NVIC_SetPriorityGrouping+0x44>)
 8002b02:	68db      	ldr	r3, [r3, #12]
 8002b04:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002b06:	68ba      	ldr	r2, [r7, #8]
 8002b08:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002b0c:	4013      	ands	r3, r2
 8002b0e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002b14:	68bb      	ldr	r3, [r7, #8]
 8002b16:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002b18:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002b1c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b20:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002b22:	4a04      	ldr	r2, [pc, #16]	; (8002b34 <__NVIC_SetPriorityGrouping+0x44>)
 8002b24:	68bb      	ldr	r3, [r7, #8]
 8002b26:	60d3      	str	r3, [r2, #12]
}
 8002b28:	bf00      	nop
 8002b2a:	3714      	adds	r7, #20
 8002b2c:	46bd      	mov	sp, r7
 8002b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b32:	4770      	bx	lr
 8002b34:	e000ed00 	.word	0xe000ed00

08002b38 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002b38:	b480      	push	{r7}
 8002b3a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002b3c:	4b04      	ldr	r3, [pc, #16]	; (8002b50 <__NVIC_GetPriorityGrouping+0x18>)
 8002b3e:	68db      	ldr	r3, [r3, #12]
 8002b40:	0a1b      	lsrs	r3, r3, #8
 8002b42:	f003 0307 	and.w	r3, r3, #7
}
 8002b46:	4618      	mov	r0, r3
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4e:	4770      	bx	lr
 8002b50:	e000ed00 	.word	0xe000ed00

08002b54 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b54:	b480      	push	{r7}
 8002b56:	b083      	sub	sp, #12
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	4603      	mov	r3, r0
 8002b5c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	db0b      	blt.n	8002b7e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002b66:	79fb      	ldrb	r3, [r7, #7]
 8002b68:	f003 021f 	and.w	r2, r3, #31
 8002b6c:	4907      	ldr	r1, [pc, #28]	; (8002b8c <__NVIC_EnableIRQ+0x38>)
 8002b6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b72:	095b      	lsrs	r3, r3, #5
 8002b74:	2001      	movs	r0, #1
 8002b76:	fa00 f202 	lsl.w	r2, r0, r2
 8002b7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002b7e:	bf00      	nop
 8002b80:	370c      	adds	r7, #12
 8002b82:	46bd      	mov	sp, r7
 8002b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b88:	4770      	bx	lr
 8002b8a:	bf00      	nop
 8002b8c:	e000e100 	.word	0xe000e100

08002b90 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002b90:	b480      	push	{r7}
 8002b92:	b083      	sub	sp, #12
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	4603      	mov	r3, r0
 8002b98:	6039      	str	r1, [r7, #0]
 8002b9a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	db0a      	blt.n	8002bba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ba4:	683b      	ldr	r3, [r7, #0]
 8002ba6:	b2da      	uxtb	r2, r3
 8002ba8:	490c      	ldr	r1, [pc, #48]	; (8002bdc <__NVIC_SetPriority+0x4c>)
 8002baa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bae:	0112      	lsls	r2, r2, #4
 8002bb0:	b2d2      	uxtb	r2, r2
 8002bb2:	440b      	add	r3, r1
 8002bb4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002bb8:	e00a      	b.n	8002bd0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002bba:	683b      	ldr	r3, [r7, #0]
 8002bbc:	b2da      	uxtb	r2, r3
 8002bbe:	4908      	ldr	r1, [pc, #32]	; (8002be0 <__NVIC_SetPriority+0x50>)
 8002bc0:	79fb      	ldrb	r3, [r7, #7]
 8002bc2:	f003 030f 	and.w	r3, r3, #15
 8002bc6:	3b04      	subs	r3, #4
 8002bc8:	0112      	lsls	r2, r2, #4
 8002bca:	b2d2      	uxtb	r2, r2
 8002bcc:	440b      	add	r3, r1
 8002bce:	761a      	strb	r2, [r3, #24]
}
 8002bd0:	bf00      	nop
 8002bd2:	370c      	adds	r7, #12
 8002bd4:	46bd      	mov	sp, r7
 8002bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bda:	4770      	bx	lr
 8002bdc:	e000e100 	.word	0xe000e100
 8002be0:	e000ed00 	.word	0xe000ed00

08002be4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002be4:	b480      	push	{r7}
 8002be6:	b089      	sub	sp, #36	; 0x24
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	60f8      	str	r0, [r7, #12]
 8002bec:	60b9      	str	r1, [r7, #8]
 8002bee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	f003 0307 	and.w	r3, r3, #7
 8002bf6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002bf8:	69fb      	ldr	r3, [r7, #28]
 8002bfa:	f1c3 0307 	rsb	r3, r3, #7
 8002bfe:	2b04      	cmp	r3, #4
 8002c00:	bf28      	it	cs
 8002c02:	2304      	movcs	r3, #4
 8002c04:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002c06:	69fb      	ldr	r3, [r7, #28]
 8002c08:	3304      	adds	r3, #4
 8002c0a:	2b06      	cmp	r3, #6
 8002c0c:	d902      	bls.n	8002c14 <NVIC_EncodePriority+0x30>
 8002c0e:	69fb      	ldr	r3, [r7, #28]
 8002c10:	3b03      	subs	r3, #3
 8002c12:	e000      	b.n	8002c16 <NVIC_EncodePriority+0x32>
 8002c14:	2300      	movs	r3, #0
 8002c16:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c18:	f04f 32ff 	mov.w	r2, #4294967295
 8002c1c:	69bb      	ldr	r3, [r7, #24]
 8002c1e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c22:	43da      	mvns	r2, r3
 8002c24:	68bb      	ldr	r3, [r7, #8]
 8002c26:	401a      	ands	r2, r3
 8002c28:	697b      	ldr	r3, [r7, #20]
 8002c2a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002c2c:	f04f 31ff 	mov.w	r1, #4294967295
 8002c30:	697b      	ldr	r3, [r7, #20]
 8002c32:	fa01 f303 	lsl.w	r3, r1, r3
 8002c36:	43d9      	mvns	r1, r3
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c3c:	4313      	orrs	r3, r2
         );
}
 8002c3e:	4618      	mov	r0, r3
 8002c40:	3724      	adds	r7, #36	; 0x24
 8002c42:	46bd      	mov	sp, r7
 8002c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c48:	4770      	bx	lr
	...

08002c4c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	b082      	sub	sp, #8
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	3b01      	subs	r3, #1
 8002c58:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002c5c:	d301      	bcc.n	8002c62 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002c5e:	2301      	movs	r3, #1
 8002c60:	e00f      	b.n	8002c82 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002c62:	4a0a      	ldr	r2, [pc, #40]	; (8002c8c <SysTick_Config+0x40>)
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	3b01      	subs	r3, #1
 8002c68:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002c6a:	210f      	movs	r1, #15
 8002c6c:	f04f 30ff 	mov.w	r0, #4294967295
 8002c70:	f7ff ff8e 	bl	8002b90 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002c74:	4b05      	ldr	r3, [pc, #20]	; (8002c8c <SysTick_Config+0x40>)
 8002c76:	2200      	movs	r2, #0
 8002c78:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002c7a:	4b04      	ldr	r3, [pc, #16]	; (8002c8c <SysTick_Config+0x40>)
 8002c7c:	2207      	movs	r2, #7
 8002c7e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002c80:	2300      	movs	r3, #0
}
 8002c82:	4618      	mov	r0, r3
 8002c84:	3708      	adds	r7, #8
 8002c86:	46bd      	mov	sp, r7
 8002c88:	bd80      	pop	{r7, pc}
 8002c8a:	bf00      	nop
 8002c8c:	e000e010 	.word	0xe000e010

08002c90 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c90:	b580      	push	{r7, lr}
 8002c92:	b082      	sub	sp, #8
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	2b07      	cmp	r3, #7
 8002c9c:	d00f      	beq.n	8002cbe <HAL_NVIC_SetPriorityGrouping+0x2e>
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	2b06      	cmp	r3, #6
 8002ca2:	d00c      	beq.n	8002cbe <HAL_NVIC_SetPriorityGrouping+0x2e>
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	2b05      	cmp	r3, #5
 8002ca8:	d009      	beq.n	8002cbe <HAL_NVIC_SetPriorityGrouping+0x2e>
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	2b04      	cmp	r3, #4
 8002cae:	d006      	beq.n	8002cbe <HAL_NVIC_SetPriorityGrouping+0x2e>
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	2b03      	cmp	r3, #3
 8002cb4:	d003      	beq.n	8002cbe <HAL_NVIC_SetPriorityGrouping+0x2e>
 8002cb6:	2192      	movs	r1, #146	; 0x92
 8002cb8:	4804      	ldr	r0, [pc, #16]	; (8002ccc <HAL_NVIC_SetPriorityGrouping+0x3c>)
 8002cba:	f7ff fc14 	bl	80024e6 <assert_failed>
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002cbe:	6878      	ldr	r0, [r7, #4]
 8002cc0:	f7ff ff16 	bl	8002af0 <__NVIC_SetPriorityGrouping>
}
 8002cc4:	bf00      	nop
 8002cc6:	3708      	adds	r7, #8
 8002cc8:	46bd      	mov	sp, r7
 8002cca:	bd80      	pop	{r7, pc}
 8002ccc:	0800fcf4 	.word	0x0800fcf4

08002cd0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002cd0:	b580      	push	{r7, lr}
 8002cd2:	b086      	sub	sp, #24
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	4603      	mov	r3, r0
 8002cd8:	60b9      	str	r1, [r7, #8]
 8002cda:	607a      	str	r2, [r7, #4]
 8002cdc:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002cde:	2300      	movs	r3, #0
 8002ce0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	2b0f      	cmp	r3, #15
 8002ce6:	d903      	bls.n	8002cf0 <HAL_NVIC_SetPriority+0x20>
 8002ce8:	21aa      	movs	r1, #170	; 0xaa
 8002cea:	480e      	ldr	r0, [pc, #56]	; (8002d24 <HAL_NVIC_SetPriority+0x54>)
 8002cec:	f7ff fbfb 	bl	80024e6 <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 8002cf0:	68bb      	ldr	r3, [r7, #8]
 8002cf2:	2b0f      	cmp	r3, #15
 8002cf4:	d903      	bls.n	8002cfe <HAL_NVIC_SetPriority+0x2e>
 8002cf6:	21ab      	movs	r1, #171	; 0xab
 8002cf8:	480a      	ldr	r0, [pc, #40]	; (8002d24 <HAL_NVIC_SetPriority+0x54>)
 8002cfa:	f7ff fbf4 	bl	80024e6 <assert_failed>
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002cfe:	f7ff ff1b 	bl	8002b38 <__NVIC_GetPriorityGrouping>
 8002d02:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002d04:	687a      	ldr	r2, [r7, #4]
 8002d06:	68b9      	ldr	r1, [r7, #8]
 8002d08:	6978      	ldr	r0, [r7, #20]
 8002d0a:	f7ff ff6b 	bl	8002be4 <NVIC_EncodePriority>
 8002d0e:	4602      	mov	r2, r0
 8002d10:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002d14:	4611      	mov	r1, r2
 8002d16:	4618      	mov	r0, r3
 8002d18:	f7ff ff3a 	bl	8002b90 <__NVIC_SetPriority>
}
 8002d1c:	bf00      	nop
 8002d1e:	3718      	adds	r7, #24
 8002d20:	46bd      	mov	sp, r7
 8002d22:	bd80      	pop	{r7, pc}
 8002d24:	0800fcf4 	.word	0x0800fcf4

08002d28 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d28:	b580      	push	{r7, lr}
 8002d2a:	b082      	sub	sp, #8
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	4603      	mov	r3, r0
 8002d30:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 8002d32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	da03      	bge.n	8002d42 <HAL_NVIC_EnableIRQ+0x1a>
 8002d3a:	21be      	movs	r1, #190	; 0xbe
 8002d3c:	4805      	ldr	r0, [pc, #20]	; (8002d54 <HAL_NVIC_EnableIRQ+0x2c>)
 8002d3e:	f7ff fbd2 	bl	80024e6 <assert_failed>
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002d42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d46:	4618      	mov	r0, r3
 8002d48:	f7ff ff04 	bl	8002b54 <__NVIC_EnableIRQ>
}
 8002d4c:	bf00      	nop
 8002d4e:	3708      	adds	r7, #8
 8002d50:	46bd      	mov	sp, r7
 8002d52:	bd80      	pop	{r7, pc}
 8002d54:	0800fcf4 	.word	0x0800fcf4

08002d58 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	b082      	sub	sp, #8
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002d60:	6878      	ldr	r0, [r7, #4]
 8002d62:	f7ff ff73 	bl	8002c4c <SysTick_Config>
 8002d66:	4603      	mov	r3, r0
}
 8002d68:	4618      	mov	r0, r3
 8002d6a:	3708      	adds	r7, #8
 8002d6c:	46bd      	mov	sp, r7
 8002d6e:	bd80      	pop	{r7, pc}

08002d70 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8002d70:	b580      	push	{r7, lr}
 8002d72:	b082      	sub	sp, #8
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d101      	bne.n	8002d82 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8002d7e:	2301      	movs	r3, #1
 8002d80:	e017      	b.n	8002db2 <HAL_CRC_Init+0x42>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	4a0d      	ldr	r2, [pc, #52]	; (8002dbc <HAL_CRC_Init+0x4c>)
 8002d88:	4293      	cmp	r3, r2
 8002d8a:	d003      	beq.n	8002d94 <HAL_CRC_Init+0x24>
 8002d8c:	2168      	movs	r1, #104	; 0x68
 8002d8e:	480c      	ldr	r0, [pc, #48]	; (8002dc0 <HAL_CRC_Init+0x50>)
 8002d90:	f7ff fba9 	bl	80024e6 <assert_failed>

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	795b      	ldrb	r3, [r3, #5]
 8002d98:	b2db      	uxtb	r3, r3
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d105      	bne.n	8002daa <HAL_CRC_Init+0x3a>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	2200      	movs	r2, #0
 8002da2:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8002da4:	6878      	ldr	r0, [r7, #4]
 8002da6:	f7fe f887 	bl	8000eb8 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	2201      	movs	r2, #1
 8002dae:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8002db0:	2300      	movs	r3, #0
}
 8002db2:	4618      	mov	r0, r3
 8002db4:	3708      	adds	r7, #8
 8002db6:	46bd      	mov	sp, r7
 8002db8:	bd80      	pop	{r7, pc}
 8002dba:	bf00      	nop
 8002dbc:	40023000 	.word	0x40023000
 8002dc0:	0800fd30 	.word	0x0800fd30

08002dc4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002dc4:	b580      	push	{r7, lr}
 8002dc6:	b086      	sub	sp, #24
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002dcc:	2300      	movs	r3, #0
 8002dce:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002dd0:	f7ff fe60 	bl	8002a94 <HAL_GetTick>
 8002dd4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d101      	bne.n	8002de0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002ddc:	2301      	movs	r3, #1
 8002dde:	e204      	b.n	80031ea <HAL_DMA_Init+0x426>
  }

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	4a97      	ldr	r2, [pc, #604]	; (8003044 <HAL_DMA_Init+0x280>)
 8002de6:	4293      	cmp	r3, r2
 8002de8:	d04e      	beq.n	8002e88 <HAL_DMA_Init+0xc4>
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	4a96      	ldr	r2, [pc, #600]	; (8003048 <HAL_DMA_Init+0x284>)
 8002df0:	4293      	cmp	r3, r2
 8002df2:	d049      	beq.n	8002e88 <HAL_DMA_Init+0xc4>
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	4a94      	ldr	r2, [pc, #592]	; (800304c <HAL_DMA_Init+0x288>)
 8002dfa:	4293      	cmp	r3, r2
 8002dfc:	d044      	beq.n	8002e88 <HAL_DMA_Init+0xc4>
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	4a93      	ldr	r2, [pc, #588]	; (8003050 <HAL_DMA_Init+0x28c>)
 8002e04:	4293      	cmp	r3, r2
 8002e06:	d03f      	beq.n	8002e88 <HAL_DMA_Init+0xc4>
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	4a91      	ldr	r2, [pc, #580]	; (8003054 <HAL_DMA_Init+0x290>)
 8002e0e:	4293      	cmp	r3, r2
 8002e10:	d03a      	beq.n	8002e88 <HAL_DMA_Init+0xc4>
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	4a90      	ldr	r2, [pc, #576]	; (8003058 <HAL_DMA_Init+0x294>)
 8002e18:	4293      	cmp	r3, r2
 8002e1a:	d035      	beq.n	8002e88 <HAL_DMA_Init+0xc4>
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	4a8e      	ldr	r2, [pc, #568]	; (800305c <HAL_DMA_Init+0x298>)
 8002e22:	4293      	cmp	r3, r2
 8002e24:	d030      	beq.n	8002e88 <HAL_DMA_Init+0xc4>
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	4a8d      	ldr	r2, [pc, #564]	; (8003060 <HAL_DMA_Init+0x29c>)
 8002e2c:	4293      	cmp	r3, r2
 8002e2e:	d02b      	beq.n	8002e88 <HAL_DMA_Init+0xc4>
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	4a8b      	ldr	r2, [pc, #556]	; (8003064 <HAL_DMA_Init+0x2a0>)
 8002e36:	4293      	cmp	r3, r2
 8002e38:	d026      	beq.n	8002e88 <HAL_DMA_Init+0xc4>
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	4a8a      	ldr	r2, [pc, #552]	; (8003068 <HAL_DMA_Init+0x2a4>)
 8002e40:	4293      	cmp	r3, r2
 8002e42:	d021      	beq.n	8002e88 <HAL_DMA_Init+0xc4>
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	4a88      	ldr	r2, [pc, #544]	; (800306c <HAL_DMA_Init+0x2a8>)
 8002e4a:	4293      	cmp	r3, r2
 8002e4c:	d01c      	beq.n	8002e88 <HAL_DMA_Init+0xc4>
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	4a87      	ldr	r2, [pc, #540]	; (8003070 <HAL_DMA_Init+0x2ac>)
 8002e54:	4293      	cmp	r3, r2
 8002e56:	d017      	beq.n	8002e88 <HAL_DMA_Init+0xc4>
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	4a85      	ldr	r2, [pc, #532]	; (8003074 <HAL_DMA_Init+0x2b0>)
 8002e5e:	4293      	cmp	r3, r2
 8002e60:	d012      	beq.n	8002e88 <HAL_DMA_Init+0xc4>
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	4a84      	ldr	r2, [pc, #528]	; (8003078 <HAL_DMA_Init+0x2b4>)
 8002e68:	4293      	cmp	r3, r2
 8002e6a:	d00d      	beq.n	8002e88 <HAL_DMA_Init+0xc4>
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	4a82      	ldr	r2, [pc, #520]	; (800307c <HAL_DMA_Init+0x2b8>)
 8002e72:	4293      	cmp	r3, r2
 8002e74:	d008      	beq.n	8002e88 <HAL_DMA_Init+0xc4>
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	4a81      	ldr	r2, [pc, #516]	; (8003080 <HAL_DMA_Init+0x2bc>)
 8002e7c:	4293      	cmp	r3, r2
 8002e7e:	d003      	beq.n	8002e88 <HAL_DMA_Init+0xc4>
 8002e80:	21b8      	movs	r1, #184	; 0xb8
 8002e82:	4880      	ldr	r0, [pc, #512]	; (8003084 <HAL_DMA_Init+0x2c0>)
 8002e84:	f7ff fb2f 	bl	80024e6 <assert_failed>
  assert_param(IS_DMA_CHANNEL(hdma->Init.Channel));
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	685b      	ldr	r3, [r3, #4]
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d026      	beq.n	8002ede <HAL_DMA_Init+0x11a>
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	685b      	ldr	r3, [r3, #4]
 8002e94:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002e98:	d021      	beq.n	8002ede <HAL_DMA_Init+0x11a>
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	685b      	ldr	r3, [r3, #4]
 8002e9e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002ea2:	d01c      	beq.n	8002ede <HAL_DMA_Init+0x11a>
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	685b      	ldr	r3, [r3, #4]
 8002ea8:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 8002eac:	d017      	beq.n	8002ede <HAL_DMA_Init+0x11a>
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	685b      	ldr	r3, [r3, #4]
 8002eb2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002eb6:	d012      	beq.n	8002ede <HAL_DMA_Init+0x11a>
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	685b      	ldr	r3, [r3, #4]
 8002ebc:	f1b3 6f20 	cmp.w	r3, #167772160	; 0xa000000
 8002ec0:	d00d      	beq.n	8002ede <HAL_DMA_Init+0x11a>
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	685b      	ldr	r3, [r3, #4]
 8002ec6:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8002eca:	d008      	beq.n	8002ede <HAL_DMA_Init+0x11a>
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	685b      	ldr	r3, [r3, #4]
 8002ed0:	f1b3 6f60 	cmp.w	r3, #234881024	; 0xe000000
 8002ed4:	d003      	beq.n	8002ede <HAL_DMA_Init+0x11a>
 8002ed6:	21b9      	movs	r1, #185	; 0xb9
 8002ed8:	486a      	ldr	r0, [pc, #424]	; (8003084 <HAL_DMA_Init+0x2c0>)
 8002eda:	f7ff fb04 	bl	80024e6 <assert_failed>
  assert_param(IS_DMA_DIRECTION(hdma->Init.Direction));
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	689b      	ldr	r3, [r3, #8]
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d00b      	beq.n	8002efe <HAL_DMA_Init+0x13a>
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	689b      	ldr	r3, [r3, #8]
 8002eea:	2b40      	cmp	r3, #64	; 0x40
 8002eec:	d007      	beq.n	8002efe <HAL_DMA_Init+0x13a>
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	689b      	ldr	r3, [r3, #8]
 8002ef2:	2b80      	cmp	r3, #128	; 0x80
 8002ef4:	d003      	beq.n	8002efe <HAL_DMA_Init+0x13a>
 8002ef6:	21ba      	movs	r1, #186	; 0xba
 8002ef8:	4862      	ldr	r0, [pc, #392]	; (8003084 <HAL_DMA_Init+0x2c0>)
 8002efa:	f7ff faf4 	bl	80024e6 <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_INC_STATE(hdma->Init.PeriphInc));
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	68db      	ldr	r3, [r3, #12]
 8002f02:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002f06:	d007      	beq.n	8002f18 <HAL_DMA_Init+0x154>
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	68db      	ldr	r3, [r3, #12]
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d003      	beq.n	8002f18 <HAL_DMA_Init+0x154>
 8002f10:	21bb      	movs	r1, #187	; 0xbb
 8002f12:	485c      	ldr	r0, [pc, #368]	; (8003084 <HAL_DMA_Init+0x2c0>)
 8002f14:	f7ff fae7 	bl	80024e6 <assert_failed>
  assert_param(IS_DMA_MEMORY_INC_STATE(hdma->Init.MemInc));
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	691b      	ldr	r3, [r3, #16]
 8002f1c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f20:	d007      	beq.n	8002f32 <HAL_DMA_Init+0x16e>
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	691b      	ldr	r3, [r3, #16]
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d003      	beq.n	8002f32 <HAL_DMA_Init+0x16e>
 8002f2a:	21bc      	movs	r1, #188	; 0xbc
 8002f2c:	4855      	ldr	r0, [pc, #340]	; (8003084 <HAL_DMA_Init+0x2c0>)
 8002f2e:	f7ff fada 	bl	80024e6 <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	695b      	ldr	r3, [r3, #20]
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d00d      	beq.n	8002f56 <HAL_DMA_Init+0x192>
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	695b      	ldr	r3, [r3, #20]
 8002f3e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002f42:	d008      	beq.n	8002f56 <HAL_DMA_Init+0x192>
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	695b      	ldr	r3, [r3, #20]
 8002f48:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f4c:	d003      	beq.n	8002f56 <HAL_DMA_Init+0x192>
 8002f4e:	21bd      	movs	r1, #189	; 0xbd
 8002f50:	484c      	ldr	r0, [pc, #304]	; (8003084 <HAL_DMA_Init+0x2c0>)
 8002f52:	f7ff fac8 	bl	80024e6 <assert_failed>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	699b      	ldr	r3, [r3, #24]
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d00d      	beq.n	8002f7a <HAL_DMA_Init+0x1b6>
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	699b      	ldr	r3, [r3, #24]
 8002f62:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002f66:	d008      	beq.n	8002f7a <HAL_DMA_Init+0x1b6>
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	699b      	ldr	r3, [r3, #24]
 8002f6c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002f70:	d003      	beq.n	8002f7a <HAL_DMA_Init+0x1b6>
 8002f72:	21be      	movs	r1, #190	; 0xbe
 8002f74:	4843      	ldr	r0, [pc, #268]	; (8003084 <HAL_DMA_Init+0x2c0>)
 8002f76:	f7ff fab6 	bl	80024e6 <assert_failed>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	69db      	ldr	r3, [r3, #28]
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d00c      	beq.n	8002f9c <HAL_DMA_Init+0x1d8>
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	69db      	ldr	r3, [r3, #28]
 8002f86:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002f8a:	d007      	beq.n	8002f9c <HAL_DMA_Init+0x1d8>
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	69db      	ldr	r3, [r3, #28]
 8002f90:	2b20      	cmp	r3, #32
 8002f92:	d003      	beq.n	8002f9c <HAL_DMA_Init+0x1d8>
 8002f94:	21bf      	movs	r1, #191	; 0xbf
 8002f96:	483b      	ldr	r0, [pc, #236]	; (8003084 <HAL_DMA_Init+0x2c0>)
 8002f98:	f7ff faa5 	bl	80024e6 <assert_failed>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	6a1b      	ldr	r3, [r3, #32]
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d012      	beq.n	8002fca <HAL_DMA_Init+0x206>
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	6a1b      	ldr	r3, [r3, #32]
 8002fa8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002fac:	d00d      	beq.n	8002fca <HAL_DMA_Init+0x206>
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	6a1b      	ldr	r3, [r3, #32]
 8002fb2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002fb6:	d008      	beq.n	8002fca <HAL_DMA_Init+0x206>
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	6a1b      	ldr	r3, [r3, #32]
 8002fbc:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002fc0:	d003      	beq.n	8002fca <HAL_DMA_Init+0x206>
 8002fc2:	21c0      	movs	r1, #192	; 0xc0
 8002fc4:	482f      	ldr	r0, [pc, #188]	; (8003084 <HAL_DMA_Init+0x2c0>)
 8002fc6:	f7ff fa8e 	bl	80024e6 <assert_failed>
  assert_param(IS_DMA_FIFO_MODE_STATE(hdma->Init.FIFOMode));
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d007      	beq.n	8002fe2 <HAL_DMA_Init+0x21e>
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fd6:	2b04      	cmp	r3, #4
 8002fd8:	d003      	beq.n	8002fe2 <HAL_DMA_Init+0x21e>
 8002fda:	21c1      	movs	r1, #193	; 0xc1
 8002fdc:	4829      	ldr	r0, [pc, #164]	; (8003084 <HAL_DMA_Init+0x2c0>)
 8002fde:	f7ff fa82 	bl	80024e6 <assert_failed>
  /* Check the memory burst, peripheral burst and FIFO threshold parameters only
     when FIFO mode is enabled */
  if(hdma->Init.FIFOMode != DMA_FIFOMODE_DISABLE)
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d065      	beq.n	80030b6 <HAL_DMA_Init+0x2f2>
  {
    assert_param(IS_DMA_FIFO_THRESHOLD(hdma->Init.FIFOThreshold));
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d00f      	beq.n	8003012 <HAL_DMA_Init+0x24e>
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ff6:	2b01      	cmp	r3, #1
 8002ff8:	d00b      	beq.n	8003012 <HAL_DMA_Init+0x24e>
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ffe:	2b02      	cmp	r3, #2
 8003000:	d007      	beq.n	8003012 <HAL_DMA_Init+0x24e>
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003006:	2b03      	cmp	r3, #3
 8003008:	d003      	beq.n	8003012 <HAL_DMA_Init+0x24e>
 800300a:	21c6      	movs	r1, #198	; 0xc6
 800300c:	481d      	ldr	r0, [pc, #116]	; (8003084 <HAL_DMA_Init+0x2c0>)
 800300e:	f7ff fa6a 	bl	80024e6 <assert_failed>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003016:	2b00      	cmp	r3, #0
 8003018:	d036      	beq.n	8003088 <HAL_DMA_Init+0x2c4>
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800301e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003022:	d031      	beq.n	8003088 <HAL_DMA_Init+0x2c4>
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003028:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800302c:	d02c      	beq.n	8003088 <HAL_DMA_Init+0x2c4>
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003032:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003036:	d027      	beq.n	8003088 <HAL_DMA_Init+0x2c4>
 8003038:	21c7      	movs	r1, #199	; 0xc7
 800303a:	4812      	ldr	r0, [pc, #72]	; (8003084 <HAL_DMA_Init+0x2c0>)
 800303c:	f7ff fa53 	bl	80024e6 <assert_failed>
 8003040:	e022      	b.n	8003088 <HAL_DMA_Init+0x2c4>
 8003042:	bf00      	nop
 8003044:	40026010 	.word	0x40026010
 8003048:	40026028 	.word	0x40026028
 800304c:	40026040 	.word	0x40026040
 8003050:	40026058 	.word	0x40026058
 8003054:	40026070 	.word	0x40026070
 8003058:	40026088 	.word	0x40026088
 800305c:	400260a0 	.word	0x400260a0
 8003060:	400260b8 	.word	0x400260b8
 8003064:	40026410 	.word	0x40026410
 8003068:	40026428 	.word	0x40026428
 800306c:	40026440 	.word	0x40026440
 8003070:	40026458 	.word	0x40026458
 8003074:	40026470 	.word	0x40026470
 8003078:	40026488 	.word	0x40026488
 800307c:	400264a0 	.word	0x400264a0
 8003080:	400264b8 	.word	0x400264b8
 8003084:	0800fd68 	.word	0x0800fd68
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800308c:	2b00      	cmp	r3, #0
 800308e:	d012      	beq.n	80030b6 <HAL_DMA_Init+0x2f2>
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003094:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003098:	d00d      	beq.n	80030b6 <HAL_DMA_Init+0x2f2>
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800309e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80030a2:	d008      	beq.n	80030b6 <HAL_DMA_Init+0x2f2>
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030a8:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80030ac:	d003      	beq.n	80030b6 <HAL_DMA_Init+0x2f2>
 80030ae:	21c8      	movs	r1, #200	; 0xc8
 80030b0:	4850      	ldr	r0, [pc, #320]	; (80031f4 <HAL_DMA_Init+0x430>)
 80030b2:	f7ff fa18 	bl	80024e6 <assert_failed>
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	2200      	movs	r2, #0
 80030ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	2202      	movs	r2, #2
 80030c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	681a      	ldr	r2, [r3, #0]
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f022 0201 	bic.w	r2, r2, #1
 80030d4:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80030d6:	e00f      	b.n	80030f8 <HAL_DMA_Init+0x334>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80030d8:	f7ff fcdc 	bl	8002a94 <HAL_GetTick>
 80030dc:	4602      	mov	r2, r0
 80030de:	693b      	ldr	r3, [r7, #16]
 80030e0:	1ad3      	subs	r3, r2, r3
 80030e2:	2b05      	cmp	r3, #5
 80030e4:	d908      	bls.n	80030f8 <HAL_DMA_Init+0x334>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	2220      	movs	r2, #32
 80030ea:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	2203      	movs	r2, #3
 80030f0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80030f4:	2303      	movs	r3, #3
 80030f6:	e078      	b.n	80031ea <HAL_DMA_Init+0x426>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f003 0301 	and.w	r3, r3, #1
 8003102:	2b00      	cmp	r3, #0
 8003104:	d1e8      	bne.n	80030d8 <HAL_DMA_Init+0x314>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800310e:	697a      	ldr	r2, [r7, #20]
 8003110:	4b39      	ldr	r3, [pc, #228]	; (80031f8 <HAL_DMA_Init+0x434>)
 8003112:	4013      	ands	r3, r2
 8003114:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	685a      	ldr	r2, [r3, #4]
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	689b      	ldr	r3, [r3, #8]
 800311e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003124:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	691b      	ldr	r3, [r3, #16]
 800312a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003130:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	699b      	ldr	r3, [r3, #24]
 8003136:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800313c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	6a1b      	ldr	r3, [r3, #32]
 8003142:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003144:	697a      	ldr	r2, [r7, #20]
 8003146:	4313      	orrs	r3, r2
 8003148:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800314e:	2b04      	cmp	r3, #4
 8003150:	d107      	bne.n	8003162 <HAL_DMA_Init+0x39e>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800315a:	4313      	orrs	r3, r2
 800315c:	697a      	ldr	r2, [r7, #20]
 800315e:	4313      	orrs	r3, r2
 8003160:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	697a      	ldr	r2, [r7, #20]
 8003168:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	695b      	ldr	r3, [r3, #20]
 8003170:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003172:	697b      	ldr	r3, [r7, #20]
 8003174:	f023 0307 	bic.w	r3, r3, #7
 8003178:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800317e:	697a      	ldr	r2, [r7, #20]
 8003180:	4313      	orrs	r3, r2
 8003182:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003188:	2b04      	cmp	r3, #4
 800318a:	d117      	bne.n	80031bc <HAL_DMA_Init+0x3f8>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003190:	697a      	ldr	r2, [r7, #20]
 8003192:	4313      	orrs	r3, r2
 8003194:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800319a:	2b00      	cmp	r3, #0
 800319c:	d00e      	beq.n	80031bc <HAL_DMA_Init+0x3f8>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800319e:	6878      	ldr	r0, [r7, #4]
 80031a0:	f000 fa80 	bl	80036a4 <DMA_CheckFifoParam>
 80031a4:	4603      	mov	r3, r0
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d008      	beq.n	80031bc <HAL_DMA_Init+0x3f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	2240      	movs	r2, #64	; 0x40
 80031ae:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	2201      	movs	r2, #1
 80031b4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80031b8:	2301      	movs	r3, #1
 80031ba:	e016      	b.n	80031ea <HAL_DMA_Init+0x426>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	697a      	ldr	r2, [r7, #20]
 80031c2:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80031c4:	6878      	ldr	r0, [r7, #4]
 80031c6:	f000 fa37 	bl	8003638 <DMA_CalcBaseAndBitshift>
 80031ca:	4603      	mov	r3, r0
 80031cc:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031d2:	223f      	movs	r2, #63	; 0x3f
 80031d4:	409a      	lsls	r2, r3
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	2200      	movs	r2, #0
 80031de:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	2201      	movs	r2, #1
 80031e4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80031e8:	2300      	movs	r3, #0
}
 80031ea:	4618      	mov	r0, r3
 80031ec:	3718      	adds	r7, #24
 80031ee:	46bd      	mov	sp, r7
 80031f0:	bd80      	pop	{r7, pc}
 80031f2:	bf00      	nop
 80031f4:	0800fd68 	.word	0x0800fd68
 80031f8:	f010803f 	.word	0xf010803f

080031fc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80031fc:	b580      	push	{r7, lr}
 80031fe:	b086      	sub	sp, #24
 8003200:	af00      	add	r7, sp, #0
 8003202:	60f8      	str	r0, [r7, #12]
 8003204:	60b9      	str	r1, [r7, #8]
 8003206:	607a      	str	r2, [r7, #4]
 8003208:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800320a:	2300      	movs	r3, #0
 800320c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003212:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 8003214:	683b      	ldr	r3, [r7, #0]
 8003216:	2b00      	cmp	r3, #0
 8003218:	d003      	beq.n	8003222 <HAL_DMA_Start_IT+0x26>
 800321a:	683b      	ldr	r3, [r7, #0]
 800321c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003220:	d304      	bcc.n	800322c <HAL_DMA_Start_IT+0x30>
 8003222:	f44f 71e6 	mov.w	r1, #460	; 0x1cc
 8003226:	4827      	ldr	r0, [pc, #156]	; (80032c4 <HAL_DMA_Start_IT+0xc8>)
 8003228:	f7ff f95d 	bl	80024e6 <assert_failed>
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003232:	2b01      	cmp	r3, #1
 8003234:	d101      	bne.n	800323a <HAL_DMA_Start_IT+0x3e>
 8003236:	2302      	movs	r3, #2
 8003238:	e040      	b.n	80032bc <HAL_DMA_Start_IT+0xc0>
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	2201      	movs	r2, #1
 800323e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003248:	b2db      	uxtb	r3, r3
 800324a:	2b01      	cmp	r3, #1
 800324c:	d12f      	bne.n	80032ae <HAL_DMA_Start_IT+0xb2>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	2202      	movs	r2, #2
 8003252:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	2200      	movs	r2, #0
 800325a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800325c:	683b      	ldr	r3, [r7, #0]
 800325e:	687a      	ldr	r2, [r7, #4]
 8003260:	68b9      	ldr	r1, [r7, #8]
 8003262:	68f8      	ldr	r0, [r7, #12]
 8003264:	f000 f9ba 	bl	80035dc <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800326c:	223f      	movs	r2, #63	; 0x3f
 800326e:	409a      	lsls	r2, r3
 8003270:	693b      	ldr	r3, [r7, #16]
 8003272:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	681a      	ldr	r2, [r3, #0]
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f042 0216 	orr.w	r2, r2, #22
 8003282:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003288:	2b00      	cmp	r3, #0
 800328a:	d007      	beq.n	800329c <HAL_DMA_Start_IT+0xa0>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	681a      	ldr	r2, [r3, #0]
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f042 0208 	orr.w	r2, r2, #8
 800329a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	681a      	ldr	r2, [r3, #0]
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f042 0201 	orr.w	r2, r2, #1
 80032aa:	601a      	str	r2, [r3, #0]
 80032ac:	e005      	b.n	80032ba <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	2200      	movs	r2, #0
 80032b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80032b6:	2302      	movs	r3, #2
 80032b8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80032ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80032bc:	4618      	mov	r0, r3
 80032be:	3718      	adds	r7, #24
 80032c0:	46bd      	mov	sp, r7
 80032c2:	bd80      	pop	{r7, pc}
 80032c4:	0800fd68 	.word	0x0800fd68

080032c8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80032c8:	b580      	push	{r7, lr}
 80032ca:	b086      	sub	sp, #24
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80032d0:	2300      	movs	r3, #0
 80032d2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80032d4:	4b92      	ldr	r3, [pc, #584]	; (8003520 <HAL_DMA_IRQHandler+0x258>)
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	4a92      	ldr	r2, [pc, #584]	; (8003524 <HAL_DMA_IRQHandler+0x25c>)
 80032da:	fba2 2303 	umull	r2, r3, r2, r3
 80032de:	0a9b      	lsrs	r3, r3, #10
 80032e0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032e6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80032e8:	693b      	ldr	r3, [r7, #16]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032f2:	2208      	movs	r2, #8
 80032f4:	409a      	lsls	r2, r3
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	4013      	ands	r3, r2
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d01a      	beq.n	8003334 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f003 0304 	and.w	r3, r3, #4
 8003308:	2b00      	cmp	r3, #0
 800330a:	d013      	beq.n	8003334 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	681a      	ldr	r2, [r3, #0]
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f022 0204 	bic.w	r2, r2, #4
 800331a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003320:	2208      	movs	r2, #8
 8003322:	409a      	lsls	r2, r3
 8003324:	693b      	ldr	r3, [r7, #16]
 8003326:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800332c:	f043 0201 	orr.w	r2, r3, #1
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003338:	2201      	movs	r2, #1
 800333a:	409a      	lsls	r2, r3
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	4013      	ands	r3, r2
 8003340:	2b00      	cmp	r3, #0
 8003342:	d012      	beq.n	800336a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	695b      	ldr	r3, [r3, #20]
 800334a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800334e:	2b00      	cmp	r3, #0
 8003350:	d00b      	beq.n	800336a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003356:	2201      	movs	r2, #1
 8003358:	409a      	lsls	r2, r3
 800335a:	693b      	ldr	r3, [r7, #16]
 800335c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003362:	f043 0202 	orr.w	r2, r3, #2
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800336e:	2204      	movs	r2, #4
 8003370:	409a      	lsls	r2, r3
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	4013      	ands	r3, r2
 8003376:	2b00      	cmp	r3, #0
 8003378:	d012      	beq.n	80033a0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f003 0302 	and.w	r3, r3, #2
 8003384:	2b00      	cmp	r3, #0
 8003386:	d00b      	beq.n	80033a0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800338c:	2204      	movs	r2, #4
 800338e:	409a      	lsls	r2, r3
 8003390:	693b      	ldr	r3, [r7, #16]
 8003392:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003398:	f043 0204 	orr.w	r2, r3, #4
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033a4:	2210      	movs	r2, #16
 80033a6:	409a      	lsls	r2, r3
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	4013      	ands	r3, r2
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d043      	beq.n	8003438 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f003 0308 	and.w	r3, r3, #8
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d03c      	beq.n	8003438 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033c2:	2210      	movs	r2, #16
 80033c4:	409a      	lsls	r2, r3
 80033c6:	693b      	ldr	r3, [r7, #16]
 80033c8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d018      	beq.n	800340a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d108      	bne.n	80033f8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d024      	beq.n	8003438 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033f2:	6878      	ldr	r0, [r7, #4]
 80033f4:	4798      	blx	r3
 80033f6:	e01f      	b.n	8003438 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d01b      	beq.n	8003438 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003404:	6878      	ldr	r0, [r7, #4]
 8003406:	4798      	blx	r3
 8003408:	e016      	b.n	8003438 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003414:	2b00      	cmp	r3, #0
 8003416:	d107      	bne.n	8003428 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	681a      	ldr	r2, [r3, #0]
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f022 0208 	bic.w	r2, r2, #8
 8003426:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800342c:	2b00      	cmp	r3, #0
 800342e:	d003      	beq.n	8003438 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003434:	6878      	ldr	r0, [r7, #4]
 8003436:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800343c:	2220      	movs	r2, #32
 800343e:	409a      	lsls	r2, r3
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	4013      	ands	r3, r2
 8003444:	2b00      	cmp	r3, #0
 8003446:	f000 808e 	beq.w	8003566 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	f003 0310 	and.w	r3, r3, #16
 8003454:	2b00      	cmp	r3, #0
 8003456:	f000 8086 	beq.w	8003566 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800345e:	2220      	movs	r2, #32
 8003460:	409a      	lsls	r2, r3
 8003462:	693b      	ldr	r3, [r7, #16]
 8003464:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800346c:	b2db      	uxtb	r3, r3
 800346e:	2b05      	cmp	r3, #5
 8003470:	d136      	bne.n	80034e0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	681a      	ldr	r2, [r3, #0]
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f022 0216 	bic.w	r2, r2, #22
 8003480:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	695a      	ldr	r2, [r3, #20]
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003490:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003496:	2b00      	cmp	r3, #0
 8003498:	d103      	bne.n	80034a2 <HAL_DMA_IRQHandler+0x1da>
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d007      	beq.n	80034b2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	681a      	ldr	r2, [r3, #0]
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f022 0208 	bic.w	r2, r2, #8
 80034b0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034b6:	223f      	movs	r2, #63	; 0x3f
 80034b8:	409a      	lsls	r2, r3
 80034ba:	693b      	ldr	r3, [r7, #16]
 80034bc:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	2200      	movs	r2, #0
 80034c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	2201      	movs	r2, #1
 80034ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d07d      	beq.n	80035d2 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80034da:	6878      	ldr	r0, [r7, #4]
 80034dc:	4798      	blx	r3
        }
        return;
 80034de:	e078      	b.n	80035d2 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d01c      	beq.n	8003528 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d108      	bne.n	800350e <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003500:	2b00      	cmp	r3, #0
 8003502:	d030      	beq.n	8003566 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003508:	6878      	ldr	r0, [r7, #4]
 800350a:	4798      	blx	r3
 800350c:	e02b      	b.n	8003566 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003512:	2b00      	cmp	r3, #0
 8003514:	d027      	beq.n	8003566 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800351a:	6878      	ldr	r0, [r7, #4]
 800351c:	4798      	blx	r3
 800351e:	e022      	b.n	8003566 <HAL_DMA_IRQHandler+0x29e>
 8003520:	20000400 	.word	0x20000400
 8003524:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003532:	2b00      	cmp	r3, #0
 8003534:	d10f      	bne.n	8003556 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	681a      	ldr	r2, [r3, #0]
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f022 0210 	bic.w	r2, r2, #16
 8003544:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	2200      	movs	r2, #0
 800354a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	2201      	movs	r2, #1
 8003552:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800355a:	2b00      	cmp	r3, #0
 800355c:	d003      	beq.n	8003566 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003562:	6878      	ldr	r0, [r7, #4]
 8003564:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800356a:	2b00      	cmp	r3, #0
 800356c:	d032      	beq.n	80035d4 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003572:	f003 0301 	and.w	r3, r3, #1
 8003576:	2b00      	cmp	r3, #0
 8003578:	d022      	beq.n	80035c0 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	2205      	movs	r2, #5
 800357e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	681a      	ldr	r2, [r3, #0]
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f022 0201 	bic.w	r2, r2, #1
 8003590:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003592:	68bb      	ldr	r3, [r7, #8]
 8003594:	3301      	adds	r3, #1
 8003596:	60bb      	str	r3, [r7, #8]
 8003598:	697a      	ldr	r2, [r7, #20]
 800359a:	429a      	cmp	r2, r3
 800359c:	d307      	bcc.n	80035ae <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f003 0301 	and.w	r3, r3, #1
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d1f2      	bne.n	8003592 <HAL_DMA_IRQHandler+0x2ca>
 80035ac:	e000      	b.n	80035b0 <HAL_DMA_IRQHandler+0x2e8>
          break;
 80035ae:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	2200      	movs	r2, #0
 80035b4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	2201      	movs	r2, #1
 80035bc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d005      	beq.n	80035d4 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80035cc:	6878      	ldr	r0, [r7, #4]
 80035ce:	4798      	blx	r3
 80035d0:	e000      	b.n	80035d4 <HAL_DMA_IRQHandler+0x30c>
        return;
 80035d2:	bf00      	nop
    }
  }
}
 80035d4:	3718      	adds	r7, #24
 80035d6:	46bd      	mov	sp, r7
 80035d8:	bd80      	pop	{r7, pc}
 80035da:	bf00      	nop

080035dc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80035dc:	b480      	push	{r7}
 80035de:	b085      	sub	sp, #20
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	60f8      	str	r0, [r7, #12]
 80035e4:	60b9      	str	r1, [r7, #8]
 80035e6:	607a      	str	r2, [r7, #4]
 80035e8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	681a      	ldr	r2, [r3, #0]
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80035f8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	683a      	ldr	r2, [r7, #0]
 8003600:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	689b      	ldr	r3, [r3, #8]
 8003606:	2b40      	cmp	r3, #64	; 0x40
 8003608:	d108      	bne.n	800361c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	687a      	ldr	r2, [r7, #4]
 8003610:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	68ba      	ldr	r2, [r7, #8]
 8003618:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800361a:	e007      	b.n	800362c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	68ba      	ldr	r2, [r7, #8]
 8003622:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	687a      	ldr	r2, [r7, #4]
 800362a:	60da      	str	r2, [r3, #12]
}
 800362c:	bf00      	nop
 800362e:	3714      	adds	r7, #20
 8003630:	46bd      	mov	sp, r7
 8003632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003636:	4770      	bx	lr

08003638 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003638:	b480      	push	{r7}
 800363a:	b085      	sub	sp, #20
 800363c:	af00      	add	r7, sp, #0
 800363e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	b2db      	uxtb	r3, r3
 8003646:	3b10      	subs	r3, #16
 8003648:	4a14      	ldr	r2, [pc, #80]	; (800369c <DMA_CalcBaseAndBitshift+0x64>)
 800364a:	fba2 2303 	umull	r2, r3, r2, r3
 800364e:	091b      	lsrs	r3, r3, #4
 8003650:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003652:	4a13      	ldr	r2, [pc, #76]	; (80036a0 <DMA_CalcBaseAndBitshift+0x68>)
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	4413      	add	r3, r2
 8003658:	781b      	ldrb	r3, [r3, #0]
 800365a:	461a      	mov	r2, r3
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	2b03      	cmp	r3, #3
 8003664:	d909      	bls.n	800367a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800366e:	f023 0303 	bic.w	r3, r3, #3
 8003672:	1d1a      	adds	r2, r3, #4
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	659a      	str	r2, [r3, #88]	; 0x58
 8003678:	e007      	b.n	800368a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003682:	f023 0303 	bic.w	r3, r3, #3
 8003686:	687a      	ldr	r2, [r7, #4]
 8003688:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800368e:	4618      	mov	r0, r3
 8003690:	3714      	adds	r7, #20
 8003692:	46bd      	mov	sp, r7
 8003694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003698:	4770      	bx	lr
 800369a:	bf00      	nop
 800369c:	aaaaaaab 	.word	0xaaaaaaab
 80036a0:	080100ac 	.word	0x080100ac

080036a4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80036a4:	b480      	push	{r7}
 80036a6:	b085      	sub	sp, #20
 80036a8:	af00      	add	r7, sp, #0
 80036aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80036ac:	2300      	movs	r3, #0
 80036ae:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036b4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	699b      	ldr	r3, [r3, #24]
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d11f      	bne.n	80036fe <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80036be:	68bb      	ldr	r3, [r7, #8]
 80036c0:	2b03      	cmp	r3, #3
 80036c2:	d855      	bhi.n	8003770 <DMA_CheckFifoParam+0xcc>
 80036c4:	a201      	add	r2, pc, #4	; (adr r2, 80036cc <DMA_CheckFifoParam+0x28>)
 80036c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036ca:	bf00      	nop
 80036cc:	080036dd 	.word	0x080036dd
 80036d0:	080036ef 	.word	0x080036ef
 80036d4:	080036dd 	.word	0x080036dd
 80036d8:	08003771 	.word	0x08003771
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036e0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d045      	beq.n	8003774 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 80036e8:	2301      	movs	r3, #1
 80036ea:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80036ec:	e042      	b.n	8003774 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036f2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80036f6:	d13f      	bne.n	8003778 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 80036f8:	2301      	movs	r3, #1
 80036fa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80036fc:	e03c      	b.n	8003778 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	699b      	ldr	r3, [r3, #24]
 8003702:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003706:	d121      	bne.n	800374c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003708:	68bb      	ldr	r3, [r7, #8]
 800370a:	2b03      	cmp	r3, #3
 800370c:	d836      	bhi.n	800377c <DMA_CheckFifoParam+0xd8>
 800370e:	a201      	add	r2, pc, #4	; (adr r2, 8003714 <DMA_CheckFifoParam+0x70>)
 8003710:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003714:	08003725 	.word	0x08003725
 8003718:	0800372b 	.word	0x0800372b
 800371c:	08003725 	.word	0x08003725
 8003720:	0800373d 	.word	0x0800373d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003724:	2301      	movs	r3, #1
 8003726:	73fb      	strb	r3, [r7, #15]
      break;
 8003728:	e02f      	b.n	800378a <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800372e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003732:	2b00      	cmp	r3, #0
 8003734:	d024      	beq.n	8003780 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8003736:	2301      	movs	r3, #1
 8003738:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800373a:	e021      	b.n	8003780 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003740:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003744:	d11e      	bne.n	8003784 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8003746:	2301      	movs	r3, #1
 8003748:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800374a:	e01b      	b.n	8003784 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800374c:	68bb      	ldr	r3, [r7, #8]
 800374e:	2b02      	cmp	r3, #2
 8003750:	d902      	bls.n	8003758 <DMA_CheckFifoParam+0xb4>
 8003752:	2b03      	cmp	r3, #3
 8003754:	d003      	beq.n	800375e <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003756:	e018      	b.n	800378a <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8003758:	2301      	movs	r3, #1
 800375a:	73fb      	strb	r3, [r7, #15]
      break;
 800375c:	e015      	b.n	800378a <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003762:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003766:	2b00      	cmp	r3, #0
 8003768:	d00e      	beq.n	8003788 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 800376a:	2301      	movs	r3, #1
 800376c:	73fb      	strb	r3, [r7, #15]
      break;
 800376e:	e00b      	b.n	8003788 <DMA_CheckFifoParam+0xe4>
      break;
 8003770:	bf00      	nop
 8003772:	e00a      	b.n	800378a <DMA_CheckFifoParam+0xe6>
      break;
 8003774:	bf00      	nop
 8003776:	e008      	b.n	800378a <DMA_CheckFifoParam+0xe6>
      break;
 8003778:	bf00      	nop
 800377a:	e006      	b.n	800378a <DMA_CheckFifoParam+0xe6>
      break;
 800377c:	bf00      	nop
 800377e:	e004      	b.n	800378a <DMA_CheckFifoParam+0xe6>
      break;
 8003780:	bf00      	nop
 8003782:	e002      	b.n	800378a <DMA_CheckFifoParam+0xe6>
      break;   
 8003784:	bf00      	nop
 8003786:	e000      	b.n	800378a <DMA_CheckFifoParam+0xe6>
      break;
 8003788:	bf00      	nop
    }
  } 
  
  return status; 
 800378a:	7bfb      	ldrb	r3, [r7, #15]
}
 800378c:	4618      	mov	r0, r3
 800378e:	3714      	adds	r7, #20
 8003790:	46bd      	mov	sp, r7
 8003792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003796:	4770      	bx	lr

08003798 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003798:	b580      	push	{r7, lr}
 800379a:	b088      	sub	sp, #32
 800379c:	af00      	add	r7, sp, #0
 800379e:	6078      	str	r0, [r7, #4]
 80037a0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80037a2:	2300      	movs	r3, #0
 80037a4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80037a6:	2300      	movs	r3, #0
 80037a8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80037aa:	2300      	movs	r3, #0
 80037ac:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	4a3b      	ldr	r2, [pc, #236]	; (80038a0 <HAL_GPIO_Init+0x108>)
 80037b2:	4293      	cmp	r3, r2
 80037b4:	d017      	beq.n	80037e6 <HAL_GPIO_Init+0x4e>
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	4a3a      	ldr	r2, [pc, #232]	; (80038a4 <HAL_GPIO_Init+0x10c>)
 80037ba:	4293      	cmp	r3, r2
 80037bc:	d013      	beq.n	80037e6 <HAL_GPIO_Init+0x4e>
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	4a39      	ldr	r2, [pc, #228]	; (80038a8 <HAL_GPIO_Init+0x110>)
 80037c2:	4293      	cmp	r3, r2
 80037c4:	d00f      	beq.n	80037e6 <HAL_GPIO_Init+0x4e>
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	4a38      	ldr	r2, [pc, #224]	; (80038ac <HAL_GPIO_Init+0x114>)
 80037ca:	4293      	cmp	r3, r2
 80037cc:	d00b      	beq.n	80037e6 <HAL_GPIO_Init+0x4e>
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	4a37      	ldr	r2, [pc, #220]	; (80038b0 <HAL_GPIO_Init+0x118>)
 80037d2:	4293      	cmp	r3, r2
 80037d4:	d007      	beq.n	80037e6 <HAL_GPIO_Init+0x4e>
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	4a36      	ldr	r2, [pc, #216]	; (80038b4 <HAL_GPIO_Init+0x11c>)
 80037da:	4293      	cmp	r3, r2
 80037dc:	d003      	beq.n	80037e6 <HAL_GPIO_Init+0x4e>
 80037de:	21b3      	movs	r1, #179	; 0xb3
 80037e0:	4835      	ldr	r0, [pc, #212]	; (80038b8 <HAL_GPIO_Init+0x120>)
 80037e2:	f7fe fe80 	bl	80024e6 <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 80037e6:	683b      	ldr	r3, [r7, #0]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	b29b      	uxth	r3, r3
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d005      	beq.n	80037fc <HAL_GPIO_Init+0x64>
 80037f0:	683b      	ldr	r3, [r7, #0]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	0c1b      	lsrs	r3, r3, #16
 80037f6:	041b      	lsls	r3, r3, #16
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d003      	beq.n	8003804 <HAL_GPIO_Init+0x6c>
 80037fc:	21b4      	movs	r1, #180	; 0xb4
 80037fe:	482e      	ldr	r0, [pc, #184]	; (80038b8 <HAL_GPIO_Init+0x120>)
 8003800:	f7fe fe71 	bl	80024e6 <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 8003804:	683b      	ldr	r3, [r7, #0]
 8003806:	685b      	ldr	r3, [r3, #4]
 8003808:	2b00      	cmp	r3, #0
 800380a:	d035      	beq.n	8003878 <HAL_GPIO_Init+0xe0>
 800380c:	683b      	ldr	r3, [r7, #0]
 800380e:	685b      	ldr	r3, [r3, #4]
 8003810:	2b01      	cmp	r3, #1
 8003812:	d031      	beq.n	8003878 <HAL_GPIO_Init+0xe0>
 8003814:	683b      	ldr	r3, [r7, #0]
 8003816:	685b      	ldr	r3, [r3, #4]
 8003818:	2b11      	cmp	r3, #17
 800381a:	d02d      	beq.n	8003878 <HAL_GPIO_Init+0xe0>
 800381c:	683b      	ldr	r3, [r7, #0]
 800381e:	685b      	ldr	r3, [r3, #4]
 8003820:	2b02      	cmp	r3, #2
 8003822:	d029      	beq.n	8003878 <HAL_GPIO_Init+0xe0>
 8003824:	683b      	ldr	r3, [r7, #0]
 8003826:	685b      	ldr	r3, [r3, #4]
 8003828:	2b12      	cmp	r3, #18
 800382a:	d025      	beq.n	8003878 <HAL_GPIO_Init+0xe0>
 800382c:	683b      	ldr	r3, [r7, #0]
 800382e:	685b      	ldr	r3, [r3, #4]
 8003830:	4a22      	ldr	r2, [pc, #136]	; (80038bc <HAL_GPIO_Init+0x124>)
 8003832:	4293      	cmp	r3, r2
 8003834:	d020      	beq.n	8003878 <HAL_GPIO_Init+0xe0>
 8003836:	683b      	ldr	r3, [r7, #0]
 8003838:	685b      	ldr	r3, [r3, #4]
 800383a:	4a21      	ldr	r2, [pc, #132]	; (80038c0 <HAL_GPIO_Init+0x128>)
 800383c:	4293      	cmp	r3, r2
 800383e:	d01b      	beq.n	8003878 <HAL_GPIO_Init+0xe0>
 8003840:	683b      	ldr	r3, [r7, #0]
 8003842:	685b      	ldr	r3, [r3, #4]
 8003844:	4a1f      	ldr	r2, [pc, #124]	; (80038c4 <HAL_GPIO_Init+0x12c>)
 8003846:	4293      	cmp	r3, r2
 8003848:	d016      	beq.n	8003878 <HAL_GPIO_Init+0xe0>
 800384a:	683b      	ldr	r3, [r7, #0]
 800384c:	685b      	ldr	r3, [r3, #4]
 800384e:	4a1e      	ldr	r2, [pc, #120]	; (80038c8 <HAL_GPIO_Init+0x130>)
 8003850:	4293      	cmp	r3, r2
 8003852:	d011      	beq.n	8003878 <HAL_GPIO_Init+0xe0>
 8003854:	683b      	ldr	r3, [r7, #0]
 8003856:	685b      	ldr	r3, [r3, #4]
 8003858:	4a1c      	ldr	r2, [pc, #112]	; (80038cc <HAL_GPIO_Init+0x134>)
 800385a:	4293      	cmp	r3, r2
 800385c:	d00c      	beq.n	8003878 <HAL_GPIO_Init+0xe0>
 800385e:	683b      	ldr	r3, [r7, #0]
 8003860:	685b      	ldr	r3, [r3, #4]
 8003862:	4a1b      	ldr	r2, [pc, #108]	; (80038d0 <HAL_GPIO_Init+0x138>)
 8003864:	4293      	cmp	r3, r2
 8003866:	d007      	beq.n	8003878 <HAL_GPIO_Init+0xe0>
 8003868:	683b      	ldr	r3, [r7, #0]
 800386a:	685b      	ldr	r3, [r3, #4]
 800386c:	2b03      	cmp	r3, #3
 800386e:	d003      	beq.n	8003878 <HAL_GPIO_Init+0xe0>
 8003870:	21b5      	movs	r1, #181	; 0xb5
 8003872:	4811      	ldr	r0, [pc, #68]	; (80038b8 <HAL_GPIO_Init+0x120>)
 8003874:	f7fe fe37 	bl	80024e6 <assert_failed>
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 8003878:	683b      	ldr	r3, [r7, #0]
 800387a:	689b      	ldr	r3, [r3, #8]
 800387c:	2b00      	cmp	r3, #0
 800387e:	d00b      	beq.n	8003898 <HAL_GPIO_Init+0x100>
 8003880:	683b      	ldr	r3, [r7, #0]
 8003882:	689b      	ldr	r3, [r3, #8]
 8003884:	2b01      	cmp	r3, #1
 8003886:	d007      	beq.n	8003898 <HAL_GPIO_Init+0x100>
 8003888:	683b      	ldr	r3, [r7, #0]
 800388a:	689b      	ldr	r3, [r3, #8]
 800388c:	2b02      	cmp	r3, #2
 800388e:	d003      	beq.n	8003898 <HAL_GPIO_Init+0x100>
 8003890:	21b6      	movs	r1, #182	; 0xb6
 8003892:	4809      	ldr	r0, [pc, #36]	; (80038b8 <HAL_GPIO_Init+0x120>)
 8003894:	f7fe fe27 	bl	80024e6 <assert_failed>

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003898:	2300      	movs	r3, #0
 800389a:	61fb      	str	r3, [r7, #28]
 800389c:	e211      	b.n	8003cc2 <HAL_GPIO_Init+0x52a>
 800389e:	bf00      	nop
 80038a0:	40020000 	.word	0x40020000
 80038a4:	40020400 	.word	0x40020400
 80038a8:	40020800 	.word	0x40020800
 80038ac:	40020c00 	.word	0x40020c00
 80038b0:	40021000 	.word	0x40021000
 80038b4:	40021c00 	.word	0x40021c00
 80038b8:	0800fda0 	.word	0x0800fda0
 80038bc:	10110000 	.word	0x10110000
 80038c0:	10210000 	.word	0x10210000
 80038c4:	10310000 	.word	0x10310000
 80038c8:	10120000 	.word	0x10120000
 80038cc:	10220000 	.word	0x10220000
 80038d0:	10320000 	.word	0x10320000
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80038d4:	2201      	movs	r2, #1
 80038d6:	69fb      	ldr	r3, [r7, #28]
 80038d8:	fa02 f303 	lsl.w	r3, r2, r3
 80038dc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80038de:	683b      	ldr	r3, [r7, #0]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	697a      	ldr	r2, [r7, #20]
 80038e4:	4013      	ands	r3, r2
 80038e6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80038e8:	693a      	ldr	r2, [r7, #16]
 80038ea:	697b      	ldr	r3, [r7, #20]
 80038ec:	429a      	cmp	r2, r3
 80038ee:	f040 81e5 	bne.w	8003cbc <HAL_GPIO_Init+0x524>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80038f2:	683b      	ldr	r3, [r7, #0]
 80038f4:	685b      	ldr	r3, [r3, #4]
 80038f6:	2b01      	cmp	r3, #1
 80038f8:	d00b      	beq.n	8003912 <HAL_GPIO_Init+0x17a>
 80038fa:	683b      	ldr	r3, [r7, #0]
 80038fc:	685b      	ldr	r3, [r3, #4]
 80038fe:	2b02      	cmp	r3, #2
 8003900:	d007      	beq.n	8003912 <HAL_GPIO_Init+0x17a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003902:	683b      	ldr	r3, [r7, #0]
 8003904:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003906:	2b11      	cmp	r3, #17
 8003908:	d003      	beq.n	8003912 <HAL_GPIO_Init+0x17a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800390a:	683b      	ldr	r3, [r7, #0]
 800390c:	685b      	ldr	r3, [r3, #4]
 800390e:	2b12      	cmp	r3, #18
 8003910:	d144      	bne.n	800399c <HAL_GPIO_Init+0x204>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8003912:	683b      	ldr	r3, [r7, #0]
 8003914:	68db      	ldr	r3, [r3, #12]
 8003916:	2b00      	cmp	r3, #0
 8003918:	d00f      	beq.n	800393a <HAL_GPIO_Init+0x1a2>
 800391a:	683b      	ldr	r3, [r7, #0]
 800391c:	68db      	ldr	r3, [r3, #12]
 800391e:	2b01      	cmp	r3, #1
 8003920:	d00b      	beq.n	800393a <HAL_GPIO_Init+0x1a2>
 8003922:	683b      	ldr	r3, [r7, #0]
 8003924:	68db      	ldr	r3, [r3, #12]
 8003926:	2b02      	cmp	r3, #2
 8003928:	d007      	beq.n	800393a <HAL_GPIO_Init+0x1a2>
 800392a:	683b      	ldr	r3, [r7, #0]
 800392c:	68db      	ldr	r3, [r3, #12]
 800392e:	2b03      	cmp	r3, #3
 8003930:	d003      	beq.n	800393a <HAL_GPIO_Init+0x1a2>
 8003932:	21c8      	movs	r1, #200	; 0xc8
 8003934:	489f      	ldr	r0, [pc, #636]	; (8003bb4 <HAL_GPIO_Init+0x41c>)
 8003936:	f7fe fdd6 	bl	80024e6 <assert_failed>
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	689b      	ldr	r3, [r3, #8]
 800393e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003940:	69fb      	ldr	r3, [r7, #28]
 8003942:	005b      	lsls	r3, r3, #1
 8003944:	2203      	movs	r2, #3
 8003946:	fa02 f303 	lsl.w	r3, r2, r3
 800394a:	43db      	mvns	r3, r3
 800394c:	69ba      	ldr	r2, [r7, #24]
 800394e:	4013      	ands	r3, r2
 8003950:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003952:	683b      	ldr	r3, [r7, #0]
 8003954:	68da      	ldr	r2, [r3, #12]
 8003956:	69fb      	ldr	r3, [r7, #28]
 8003958:	005b      	lsls	r3, r3, #1
 800395a:	fa02 f303 	lsl.w	r3, r2, r3
 800395e:	69ba      	ldr	r2, [r7, #24]
 8003960:	4313      	orrs	r3, r2
 8003962:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	69ba      	ldr	r2, [r7, #24]
 8003968:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	685b      	ldr	r3, [r3, #4]
 800396e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003970:	2201      	movs	r2, #1
 8003972:	69fb      	ldr	r3, [r7, #28]
 8003974:	fa02 f303 	lsl.w	r3, r2, r3
 8003978:	43db      	mvns	r3, r3
 800397a:	69ba      	ldr	r2, [r7, #24]
 800397c:	4013      	ands	r3, r2
 800397e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003980:	683b      	ldr	r3, [r7, #0]
 8003982:	685b      	ldr	r3, [r3, #4]
 8003984:	091b      	lsrs	r3, r3, #4
 8003986:	f003 0201 	and.w	r2, r3, #1
 800398a:	69fb      	ldr	r3, [r7, #28]
 800398c:	fa02 f303 	lsl.w	r3, r2, r3
 8003990:	69ba      	ldr	r2, [r7, #24]
 8003992:	4313      	orrs	r3, r2
 8003994:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	69ba      	ldr	r2, [r7, #24]
 800399a:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	68db      	ldr	r3, [r3, #12]
 80039a0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80039a2:	69fb      	ldr	r3, [r7, #28]
 80039a4:	005b      	lsls	r3, r3, #1
 80039a6:	2203      	movs	r2, #3
 80039a8:	fa02 f303 	lsl.w	r3, r2, r3
 80039ac:	43db      	mvns	r3, r3
 80039ae:	69ba      	ldr	r2, [r7, #24]
 80039b0:	4013      	ands	r3, r2
 80039b2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80039b4:	683b      	ldr	r3, [r7, #0]
 80039b6:	689a      	ldr	r2, [r3, #8]
 80039b8:	69fb      	ldr	r3, [r7, #28]
 80039ba:	005b      	lsls	r3, r3, #1
 80039bc:	fa02 f303 	lsl.w	r3, r2, r3
 80039c0:	69ba      	ldr	r2, [r7, #24]
 80039c2:	4313      	orrs	r3, r2
 80039c4:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	69ba      	ldr	r2, [r7, #24]
 80039ca:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80039cc:	683b      	ldr	r3, [r7, #0]
 80039ce:	685b      	ldr	r3, [r3, #4]
 80039d0:	2b02      	cmp	r3, #2
 80039d2:	d004      	beq.n	80039de <HAL_GPIO_Init+0x246>
 80039d4:	683b      	ldr	r3, [r7, #0]
 80039d6:	685b      	ldr	r3, [r3, #4]
 80039d8:	2b12      	cmp	r3, #18
 80039da:	f040 80a0 	bne.w	8003b1e <HAL_GPIO_Init+0x386>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 80039de:	683b      	ldr	r3, [r7, #0]
 80039e0:	691b      	ldr	r3, [r3, #16]
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d077      	beq.n	8003ad6 <HAL_GPIO_Init+0x33e>
 80039e6:	683b      	ldr	r3, [r7, #0]
 80039e8:	691b      	ldr	r3, [r3, #16]
 80039ea:	2b09      	cmp	r3, #9
 80039ec:	d073      	beq.n	8003ad6 <HAL_GPIO_Init+0x33e>
 80039ee:	683b      	ldr	r3, [r7, #0]
 80039f0:	691b      	ldr	r3, [r3, #16]
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d06f      	beq.n	8003ad6 <HAL_GPIO_Init+0x33e>
 80039f6:	683b      	ldr	r3, [r7, #0]
 80039f8:	691b      	ldr	r3, [r3, #16]
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d06b      	beq.n	8003ad6 <HAL_GPIO_Init+0x33e>
 80039fe:	683b      	ldr	r3, [r7, #0]
 8003a00:	691b      	ldr	r3, [r3, #16]
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d067      	beq.n	8003ad6 <HAL_GPIO_Init+0x33e>
 8003a06:	683b      	ldr	r3, [r7, #0]
 8003a08:	691b      	ldr	r3, [r3, #16]
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d063      	beq.n	8003ad6 <HAL_GPIO_Init+0x33e>
 8003a0e:	683b      	ldr	r3, [r7, #0]
 8003a10:	691b      	ldr	r3, [r3, #16]
 8003a12:	2b01      	cmp	r3, #1
 8003a14:	d05f      	beq.n	8003ad6 <HAL_GPIO_Init+0x33e>
 8003a16:	683b      	ldr	r3, [r7, #0]
 8003a18:	691b      	ldr	r3, [r3, #16]
 8003a1a:	2b01      	cmp	r3, #1
 8003a1c:	d05b      	beq.n	8003ad6 <HAL_GPIO_Init+0x33e>
 8003a1e:	683b      	ldr	r3, [r7, #0]
 8003a20:	691b      	ldr	r3, [r3, #16]
 8003a22:	2b02      	cmp	r3, #2
 8003a24:	d057      	beq.n	8003ad6 <HAL_GPIO_Init+0x33e>
 8003a26:	683b      	ldr	r3, [r7, #0]
 8003a28:	691b      	ldr	r3, [r3, #16]
 8003a2a:	2b02      	cmp	r3, #2
 8003a2c:	d053      	beq.n	8003ad6 <HAL_GPIO_Init+0x33e>
 8003a2e:	683b      	ldr	r3, [r7, #0]
 8003a30:	691b      	ldr	r3, [r3, #16]
 8003a32:	2b02      	cmp	r3, #2
 8003a34:	d04f      	beq.n	8003ad6 <HAL_GPIO_Init+0x33e>
 8003a36:	683b      	ldr	r3, [r7, #0]
 8003a38:	691b      	ldr	r3, [r3, #16]
 8003a3a:	2b04      	cmp	r3, #4
 8003a3c:	d04b      	beq.n	8003ad6 <HAL_GPIO_Init+0x33e>
 8003a3e:	683b      	ldr	r3, [r7, #0]
 8003a40:	691b      	ldr	r3, [r3, #16]
 8003a42:	2b04      	cmp	r3, #4
 8003a44:	d047      	beq.n	8003ad6 <HAL_GPIO_Init+0x33e>
 8003a46:	683b      	ldr	r3, [r7, #0]
 8003a48:	691b      	ldr	r3, [r3, #16]
 8003a4a:	2b04      	cmp	r3, #4
 8003a4c:	d043      	beq.n	8003ad6 <HAL_GPIO_Init+0x33e>
 8003a4e:	683b      	ldr	r3, [r7, #0]
 8003a50:	691b      	ldr	r3, [r3, #16]
 8003a52:	2b05      	cmp	r3, #5
 8003a54:	d03f      	beq.n	8003ad6 <HAL_GPIO_Init+0x33e>
 8003a56:	683b      	ldr	r3, [r7, #0]
 8003a58:	691b      	ldr	r3, [r3, #16]
 8003a5a:	2b05      	cmp	r3, #5
 8003a5c:	d03b      	beq.n	8003ad6 <HAL_GPIO_Init+0x33e>
 8003a5e:	683b      	ldr	r3, [r7, #0]
 8003a60:	691b      	ldr	r3, [r3, #16]
 8003a62:	2b05      	cmp	r3, #5
 8003a64:	d037      	beq.n	8003ad6 <HAL_GPIO_Init+0x33e>
 8003a66:	683b      	ldr	r3, [r7, #0]
 8003a68:	691b      	ldr	r3, [r3, #16]
 8003a6a:	2b06      	cmp	r3, #6
 8003a6c:	d033      	beq.n	8003ad6 <HAL_GPIO_Init+0x33e>
 8003a6e:	683b      	ldr	r3, [r7, #0]
 8003a70:	691b      	ldr	r3, [r3, #16]
 8003a72:	2b06      	cmp	r3, #6
 8003a74:	d02f      	beq.n	8003ad6 <HAL_GPIO_Init+0x33e>
 8003a76:	683b      	ldr	r3, [r7, #0]
 8003a78:	691b      	ldr	r3, [r3, #16]
 8003a7a:	2b05      	cmp	r3, #5
 8003a7c:	d02b      	beq.n	8003ad6 <HAL_GPIO_Init+0x33e>
 8003a7e:	683b      	ldr	r3, [r7, #0]
 8003a80:	691b      	ldr	r3, [r3, #16]
 8003a82:	2b06      	cmp	r3, #6
 8003a84:	d027      	beq.n	8003ad6 <HAL_GPIO_Init+0x33e>
 8003a86:	683b      	ldr	r3, [r7, #0]
 8003a88:	691b      	ldr	r3, [r3, #16]
 8003a8a:	2b07      	cmp	r3, #7
 8003a8c:	d023      	beq.n	8003ad6 <HAL_GPIO_Init+0x33e>
 8003a8e:	683b      	ldr	r3, [r7, #0]
 8003a90:	691b      	ldr	r3, [r3, #16]
 8003a92:	2b07      	cmp	r3, #7
 8003a94:	d01f      	beq.n	8003ad6 <HAL_GPIO_Init+0x33e>
 8003a96:	683b      	ldr	r3, [r7, #0]
 8003a98:	691b      	ldr	r3, [r3, #16]
 8003a9a:	2b07      	cmp	r3, #7
 8003a9c:	d01b      	beq.n	8003ad6 <HAL_GPIO_Init+0x33e>
 8003a9e:	683b      	ldr	r3, [r7, #0]
 8003aa0:	691b      	ldr	r3, [r3, #16]
 8003aa2:	2b08      	cmp	r3, #8
 8003aa4:	d017      	beq.n	8003ad6 <HAL_GPIO_Init+0x33e>
 8003aa6:	683b      	ldr	r3, [r7, #0]
 8003aa8:	691b      	ldr	r3, [r3, #16]
 8003aaa:	2b0a      	cmp	r3, #10
 8003aac:	d013      	beq.n	8003ad6 <HAL_GPIO_Init+0x33e>
 8003aae:	683b      	ldr	r3, [r7, #0]
 8003ab0:	691b      	ldr	r3, [r3, #16]
 8003ab2:	2b09      	cmp	r3, #9
 8003ab4:	d00f      	beq.n	8003ad6 <HAL_GPIO_Init+0x33e>
 8003ab6:	683b      	ldr	r3, [r7, #0]
 8003ab8:	691b      	ldr	r3, [r3, #16]
 8003aba:	2b09      	cmp	r3, #9
 8003abc:	d00b      	beq.n	8003ad6 <HAL_GPIO_Init+0x33e>
 8003abe:	683b      	ldr	r3, [r7, #0]
 8003ac0:	691b      	ldr	r3, [r3, #16]
 8003ac2:	2b0c      	cmp	r3, #12
 8003ac4:	d007      	beq.n	8003ad6 <HAL_GPIO_Init+0x33e>
 8003ac6:	683b      	ldr	r3, [r7, #0]
 8003ac8:	691b      	ldr	r3, [r3, #16]
 8003aca:	2b0f      	cmp	r3, #15
 8003acc:	d003      	beq.n	8003ad6 <HAL_GPIO_Init+0x33e>
 8003ace:	21e0      	movs	r1, #224	; 0xe0
 8003ad0:	4838      	ldr	r0, [pc, #224]	; (8003bb4 <HAL_GPIO_Init+0x41c>)
 8003ad2:	f7fe fd08 	bl	80024e6 <assert_failed>
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003ad6:	69fb      	ldr	r3, [r7, #28]
 8003ad8:	08da      	lsrs	r2, r3, #3
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	3208      	adds	r2, #8
 8003ade:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003ae2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003ae4:	69fb      	ldr	r3, [r7, #28]
 8003ae6:	f003 0307 	and.w	r3, r3, #7
 8003aea:	009b      	lsls	r3, r3, #2
 8003aec:	220f      	movs	r2, #15
 8003aee:	fa02 f303 	lsl.w	r3, r2, r3
 8003af2:	43db      	mvns	r3, r3
 8003af4:	69ba      	ldr	r2, [r7, #24]
 8003af6:	4013      	ands	r3, r2
 8003af8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003afa:	683b      	ldr	r3, [r7, #0]
 8003afc:	691a      	ldr	r2, [r3, #16]
 8003afe:	69fb      	ldr	r3, [r7, #28]
 8003b00:	f003 0307 	and.w	r3, r3, #7
 8003b04:	009b      	lsls	r3, r3, #2
 8003b06:	fa02 f303 	lsl.w	r3, r2, r3
 8003b0a:	69ba      	ldr	r2, [r7, #24]
 8003b0c:	4313      	orrs	r3, r2
 8003b0e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003b10:	69fb      	ldr	r3, [r7, #28]
 8003b12:	08da      	lsrs	r2, r3, #3
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	3208      	adds	r2, #8
 8003b18:	69b9      	ldr	r1, [r7, #24]
 8003b1a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003b24:	69fb      	ldr	r3, [r7, #28]
 8003b26:	005b      	lsls	r3, r3, #1
 8003b28:	2203      	movs	r2, #3
 8003b2a:	fa02 f303 	lsl.w	r3, r2, r3
 8003b2e:	43db      	mvns	r3, r3
 8003b30:	69ba      	ldr	r2, [r7, #24]
 8003b32:	4013      	ands	r3, r2
 8003b34:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003b36:	683b      	ldr	r3, [r7, #0]
 8003b38:	685b      	ldr	r3, [r3, #4]
 8003b3a:	f003 0203 	and.w	r2, r3, #3
 8003b3e:	69fb      	ldr	r3, [r7, #28]
 8003b40:	005b      	lsls	r3, r3, #1
 8003b42:	fa02 f303 	lsl.w	r3, r2, r3
 8003b46:	69ba      	ldr	r2, [r7, #24]
 8003b48:	4313      	orrs	r3, r2
 8003b4a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	69ba      	ldr	r2, [r7, #24]
 8003b50:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003b52:	683b      	ldr	r3, [r7, #0]
 8003b54:	685b      	ldr	r3, [r3, #4]
 8003b56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	f000 80ae 	beq.w	8003cbc <HAL_GPIO_Init+0x524>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003b60:	2300      	movs	r3, #0
 8003b62:	60fb      	str	r3, [r7, #12]
 8003b64:	4b14      	ldr	r3, [pc, #80]	; (8003bb8 <HAL_GPIO_Init+0x420>)
 8003b66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b68:	4a13      	ldr	r2, [pc, #76]	; (8003bb8 <HAL_GPIO_Init+0x420>)
 8003b6a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003b6e:	6453      	str	r3, [r2, #68]	; 0x44
 8003b70:	4b11      	ldr	r3, [pc, #68]	; (8003bb8 <HAL_GPIO_Init+0x420>)
 8003b72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b74:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003b78:	60fb      	str	r3, [r7, #12]
 8003b7a:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003b7c:	4a0f      	ldr	r2, [pc, #60]	; (8003bbc <HAL_GPIO_Init+0x424>)
 8003b7e:	69fb      	ldr	r3, [r7, #28]
 8003b80:	089b      	lsrs	r3, r3, #2
 8003b82:	3302      	adds	r3, #2
 8003b84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b88:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003b8a:	69fb      	ldr	r3, [r7, #28]
 8003b8c:	f003 0303 	and.w	r3, r3, #3
 8003b90:	009b      	lsls	r3, r3, #2
 8003b92:	220f      	movs	r2, #15
 8003b94:	fa02 f303 	lsl.w	r3, r2, r3
 8003b98:	43db      	mvns	r3, r3
 8003b9a:	69ba      	ldr	r2, [r7, #24]
 8003b9c:	4013      	ands	r3, r2
 8003b9e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	4a07      	ldr	r2, [pc, #28]	; (8003bc0 <HAL_GPIO_Init+0x428>)
 8003ba4:	4293      	cmp	r3, r2
 8003ba6:	d025      	beq.n	8003bf4 <HAL_GPIO_Init+0x45c>
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	4a06      	ldr	r2, [pc, #24]	; (8003bc4 <HAL_GPIO_Init+0x42c>)
 8003bac:	4293      	cmp	r3, r2
 8003bae:	d01f      	beq.n	8003bf0 <HAL_GPIO_Init+0x458>
 8003bb0:	e00a      	b.n	8003bc8 <HAL_GPIO_Init+0x430>
 8003bb2:	bf00      	nop
 8003bb4:	0800fda0 	.word	0x0800fda0
 8003bb8:	40023800 	.word	0x40023800
 8003bbc:	40013800 	.word	0x40013800
 8003bc0:	40020000 	.word	0x40020000
 8003bc4:	40020400 	.word	0x40020400
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	4a42      	ldr	r2, [pc, #264]	; (8003cd4 <HAL_GPIO_Init+0x53c>)
 8003bcc:	4293      	cmp	r3, r2
 8003bce:	d00d      	beq.n	8003bec <HAL_GPIO_Init+0x454>
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	4a41      	ldr	r2, [pc, #260]	; (8003cd8 <HAL_GPIO_Init+0x540>)
 8003bd4:	4293      	cmp	r3, r2
 8003bd6:	d007      	beq.n	8003be8 <HAL_GPIO_Init+0x450>
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	4a40      	ldr	r2, [pc, #256]	; (8003cdc <HAL_GPIO_Init+0x544>)
 8003bdc:	4293      	cmp	r3, r2
 8003bde:	d101      	bne.n	8003be4 <HAL_GPIO_Init+0x44c>
 8003be0:	2304      	movs	r3, #4
 8003be2:	e008      	b.n	8003bf6 <HAL_GPIO_Init+0x45e>
 8003be4:	2307      	movs	r3, #7
 8003be6:	e006      	b.n	8003bf6 <HAL_GPIO_Init+0x45e>
 8003be8:	2303      	movs	r3, #3
 8003bea:	e004      	b.n	8003bf6 <HAL_GPIO_Init+0x45e>
 8003bec:	2302      	movs	r3, #2
 8003bee:	e002      	b.n	8003bf6 <HAL_GPIO_Init+0x45e>
 8003bf0:	2301      	movs	r3, #1
 8003bf2:	e000      	b.n	8003bf6 <HAL_GPIO_Init+0x45e>
 8003bf4:	2300      	movs	r3, #0
 8003bf6:	69fa      	ldr	r2, [r7, #28]
 8003bf8:	f002 0203 	and.w	r2, r2, #3
 8003bfc:	0092      	lsls	r2, r2, #2
 8003bfe:	4093      	lsls	r3, r2
 8003c00:	69ba      	ldr	r2, [r7, #24]
 8003c02:	4313      	orrs	r3, r2
 8003c04:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003c06:	4936      	ldr	r1, [pc, #216]	; (8003ce0 <HAL_GPIO_Init+0x548>)
 8003c08:	69fb      	ldr	r3, [r7, #28]
 8003c0a:	089b      	lsrs	r3, r3, #2
 8003c0c:	3302      	adds	r3, #2
 8003c0e:	69ba      	ldr	r2, [r7, #24]
 8003c10:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003c14:	4b33      	ldr	r3, [pc, #204]	; (8003ce4 <HAL_GPIO_Init+0x54c>)
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003c1a:	693b      	ldr	r3, [r7, #16]
 8003c1c:	43db      	mvns	r3, r3
 8003c1e:	69ba      	ldr	r2, [r7, #24]
 8003c20:	4013      	ands	r3, r2
 8003c22:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003c24:	683b      	ldr	r3, [r7, #0]
 8003c26:	685b      	ldr	r3, [r3, #4]
 8003c28:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d003      	beq.n	8003c38 <HAL_GPIO_Init+0x4a0>
        {
          temp |= iocurrent;
 8003c30:	69ba      	ldr	r2, [r7, #24]
 8003c32:	693b      	ldr	r3, [r7, #16]
 8003c34:	4313      	orrs	r3, r2
 8003c36:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003c38:	4a2a      	ldr	r2, [pc, #168]	; (8003ce4 <HAL_GPIO_Init+0x54c>)
 8003c3a:	69bb      	ldr	r3, [r7, #24]
 8003c3c:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003c3e:	4b29      	ldr	r3, [pc, #164]	; (8003ce4 <HAL_GPIO_Init+0x54c>)
 8003c40:	685b      	ldr	r3, [r3, #4]
 8003c42:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003c44:	693b      	ldr	r3, [r7, #16]
 8003c46:	43db      	mvns	r3, r3
 8003c48:	69ba      	ldr	r2, [r7, #24]
 8003c4a:	4013      	ands	r3, r2
 8003c4c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003c4e:	683b      	ldr	r3, [r7, #0]
 8003c50:	685b      	ldr	r3, [r3, #4]
 8003c52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d003      	beq.n	8003c62 <HAL_GPIO_Init+0x4ca>
        {
          temp |= iocurrent;
 8003c5a:	69ba      	ldr	r2, [r7, #24]
 8003c5c:	693b      	ldr	r3, [r7, #16]
 8003c5e:	4313      	orrs	r3, r2
 8003c60:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003c62:	4a20      	ldr	r2, [pc, #128]	; (8003ce4 <HAL_GPIO_Init+0x54c>)
 8003c64:	69bb      	ldr	r3, [r7, #24]
 8003c66:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003c68:	4b1e      	ldr	r3, [pc, #120]	; (8003ce4 <HAL_GPIO_Init+0x54c>)
 8003c6a:	689b      	ldr	r3, [r3, #8]
 8003c6c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003c6e:	693b      	ldr	r3, [r7, #16]
 8003c70:	43db      	mvns	r3, r3
 8003c72:	69ba      	ldr	r2, [r7, #24]
 8003c74:	4013      	ands	r3, r2
 8003c76:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003c78:	683b      	ldr	r3, [r7, #0]
 8003c7a:	685b      	ldr	r3, [r3, #4]
 8003c7c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d003      	beq.n	8003c8c <HAL_GPIO_Init+0x4f4>
        {
          temp |= iocurrent;
 8003c84:	69ba      	ldr	r2, [r7, #24]
 8003c86:	693b      	ldr	r3, [r7, #16]
 8003c88:	4313      	orrs	r3, r2
 8003c8a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003c8c:	4a15      	ldr	r2, [pc, #84]	; (8003ce4 <HAL_GPIO_Init+0x54c>)
 8003c8e:	69bb      	ldr	r3, [r7, #24]
 8003c90:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003c92:	4b14      	ldr	r3, [pc, #80]	; (8003ce4 <HAL_GPIO_Init+0x54c>)
 8003c94:	68db      	ldr	r3, [r3, #12]
 8003c96:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003c98:	693b      	ldr	r3, [r7, #16]
 8003c9a:	43db      	mvns	r3, r3
 8003c9c:	69ba      	ldr	r2, [r7, #24]
 8003c9e:	4013      	ands	r3, r2
 8003ca0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003ca2:	683b      	ldr	r3, [r7, #0]
 8003ca4:	685b      	ldr	r3, [r3, #4]
 8003ca6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d003      	beq.n	8003cb6 <HAL_GPIO_Init+0x51e>
        {
          temp |= iocurrent;
 8003cae:	69ba      	ldr	r2, [r7, #24]
 8003cb0:	693b      	ldr	r3, [r7, #16]
 8003cb2:	4313      	orrs	r3, r2
 8003cb4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003cb6:	4a0b      	ldr	r2, [pc, #44]	; (8003ce4 <HAL_GPIO_Init+0x54c>)
 8003cb8:	69bb      	ldr	r3, [r7, #24]
 8003cba:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003cbc:	69fb      	ldr	r3, [r7, #28]
 8003cbe:	3301      	adds	r3, #1
 8003cc0:	61fb      	str	r3, [r7, #28]
 8003cc2:	69fb      	ldr	r3, [r7, #28]
 8003cc4:	2b0f      	cmp	r3, #15
 8003cc6:	f67f ae05 	bls.w	80038d4 <HAL_GPIO_Init+0x13c>
      }
    }
  }
}
 8003cca:	bf00      	nop
 8003ccc:	3720      	adds	r7, #32
 8003cce:	46bd      	mov	sp, r7
 8003cd0:	bd80      	pop	{r7, pc}
 8003cd2:	bf00      	nop
 8003cd4:	40020800 	.word	0x40020800
 8003cd8:	40020c00 	.word	0x40020c00
 8003cdc:	40021000 	.word	0x40021000
 8003ce0:	40013800 	.word	0x40013800
 8003ce4:	40013c00 	.word	0x40013c00

08003ce8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003ce8:	b580      	push	{r7, lr}
 8003cea:	b082      	sub	sp, #8
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	6078      	str	r0, [r7, #4]
 8003cf0:	460b      	mov	r3, r1
 8003cf2:	807b      	strh	r3, [r7, #2]
 8003cf4:	4613      	mov	r3, r2
 8003cf6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8003cf8:	887b      	ldrh	r3, [r7, #2]
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d004      	beq.n	8003d08 <HAL_GPIO_WritePin+0x20>
 8003cfe:	887b      	ldrh	r3, [r7, #2]
 8003d00:	0c1b      	lsrs	r3, r3, #16
 8003d02:	041b      	lsls	r3, r3, #16
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d004      	beq.n	8003d12 <HAL_GPIO_WritePin+0x2a>
 8003d08:	f240 119f 	movw	r1, #415	; 0x19f
 8003d0c:	480e      	ldr	r0, [pc, #56]	; (8003d48 <HAL_GPIO_WritePin+0x60>)
 8003d0e:	f7fe fbea 	bl	80024e6 <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 8003d12:	787b      	ldrb	r3, [r7, #1]
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d007      	beq.n	8003d28 <HAL_GPIO_WritePin+0x40>
 8003d18:	787b      	ldrb	r3, [r7, #1]
 8003d1a:	2b01      	cmp	r3, #1
 8003d1c:	d004      	beq.n	8003d28 <HAL_GPIO_WritePin+0x40>
 8003d1e:	f44f 71d0 	mov.w	r1, #416	; 0x1a0
 8003d22:	4809      	ldr	r0, [pc, #36]	; (8003d48 <HAL_GPIO_WritePin+0x60>)
 8003d24:	f7fe fbdf 	bl	80024e6 <assert_failed>

  if(PinState != GPIO_PIN_RESET)
 8003d28:	787b      	ldrb	r3, [r7, #1]
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d003      	beq.n	8003d36 <HAL_GPIO_WritePin+0x4e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003d2e:	887a      	ldrh	r2, [r7, #2]
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003d34:	e003      	b.n	8003d3e <HAL_GPIO_WritePin+0x56>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003d36:	887b      	ldrh	r3, [r7, #2]
 8003d38:	041a      	lsls	r2, r3, #16
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	619a      	str	r2, [r3, #24]
}
 8003d3e:	bf00      	nop
 8003d40:	3708      	adds	r7, #8
 8003d42:	46bd      	mov	sp, r7
 8003d44:	bd80      	pop	{r7, pc}
 8003d46:	bf00      	nop
 8003d48:	0800fda0 	.word	0x0800fda0

08003d4c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003d4c:	b580      	push	{r7, lr}
 8003d4e:	b084      	sub	sp, #16
 8003d50:	af00      	add	r7, sp, #0
 8003d52:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d101      	bne.n	8003d5e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003d5a:	2301      	movs	r3, #1
 8003d5c:	e1b1      	b.n	80040c2 <HAL_I2C_Init+0x376>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	4aa2      	ldr	r2, [pc, #648]	; (8003fec <HAL_I2C_Init+0x2a0>)
 8003d64:	4293      	cmp	r3, r2
 8003d66:	d00e      	beq.n	8003d86 <HAL_I2C_Init+0x3a>
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	4aa0      	ldr	r2, [pc, #640]	; (8003ff0 <HAL_I2C_Init+0x2a4>)
 8003d6e:	4293      	cmp	r3, r2
 8003d70:	d009      	beq.n	8003d86 <HAL_I2C_Init+0x3a>
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	4a9f      	ldr	r2, [pc, #636]	; (8003ff4 <HAL_I2C_Init+0x2a8>)
 8003d78:	4293      	cmp	r3, r2
 8003d7a:	d004      	beq.n	8003d86 <HAL_I2C_Init+0x3a>
 8003d7c:	f240 11bf 	movw	r1, #447	; 0x1bf
 8003d80:	489d      	ldr	r0, [pc, #628]	; (8003ff8 <HAL_I2C_Init+0x2ac>)
 8003d82:	f7fe fbb0 	bl	80024e6 <assert_failed>
  assert_param(IS_I2C_CLOCK_SPEED(hi2c->Init.ClockSpeed));
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	685b      	ldr	r3, [r3, #4]
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d004      	beq.n	8003d98 <HAL_I2C_Init+0x4c>
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	685b      	ldr	r3, [r3, #4]
 8003d92:	4a9a      	ldr	r2, [pc, #616]	; (8003ffc <HAL_I2C_Init+0x2b0>)
 8003d94:	4293      	cmp	r3, r2
 8003d96:	d904      	bls.n	8003da2 <HAL_I2C_Init+0x56>
 8003d98:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 8003d9c:	4896      	ldr	r0, [pc, #600]	; (8003ff8 <HAL_I2C_Init+0x2ac>)
 8003d9e:	f7fe fba2 	bl	80024e6 <assert_failed>
  assert_param(IS_I2C_DUTY_CYCLE(hi2c->Init.DutyCycle));
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	689b      	ldr	r3, [r3, #8]
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d009      	beq.n	8003dbe <HAL_I2C_Init+0x72>
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	689b      	ldr	r3, [r3, #8]
 8003dae:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003db2:	d004      	beq.n	8003dbe <HAL_I2C_Init+0x72>
 8003db4:	f240 11c1 	movw	r1, #449	; 0x1c1
 8003db8:	488f      	ldr	r0, [pc, #572]	; (8003ff8 <HAL_I2C_Init+0x2ac>)
 8003dba:	f7fe fb94 	bl	80024e6 <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS1(hi2c->Init.OwnAddress1));
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	68db      	ldr	r3, [r3, #12]
 8003dc2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003dc6:	f023 0303 	bic.w	r3, r3, #3
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d004      	beq.n	8003dd8 <HAL_I2C_Init+0x8c>
 8003dce:	f44f 71e1 	mov.w	r1, #450	; 0x1c2
 8003dd2:	4889      	ldr	r0, [pc, #548]	; (8003ff8 <HAL_I2C_Init+0x2ac>)
 8003dd4:	f7fe fb87 	bl	80024e6 <assert_failed>
  assert_param(IS_I2C_ADDRESSING_MODE(hi2c->Init.AddressingMode));
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	691b      	ldr	r3, [r3, #16]
 8003ddc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003de0:	d009      	beq.n	8003df6 <HAL_I2C_Init+0xaa>
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	691b      	ldr	r3, [r3, #16]
 8003de6:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003dea:	d004      	beq.n	8003df6 <HAL_I2C_Init+0xaa>
 8003dec:	f240 11c3 	movw	r1, #451	; 0x1c3
 8003df0:	4881      	ldr	r0, [pc, #516]	; (8003ff8 <HAL_I2C_Init+0x2ac>)
 8003df2:	f7fe fb78 	bl	80024e6 <assert_failed>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	695b      	ldr	r3, [r3, #20]
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d008      	beq.n	8003e10 <HAL_I2C_Init+0xc4>
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	695b      	ldr	r3, [r3, #20]
 8003e02:	2b01      	cmp	r3, #1
 8003e04:	d004      	beq.n	8003e10 <HAL_I2C_Init+0xc4>
 8003e06:	f44f 71e2 	mov.w	r1, #452	; 0x1c4
 8003e0a:	487b      	ldr	r0, [pc, #492]	; (8003ff8 <HAL_I2C_Init+0x2ac>)
 8003e0c:	f7fe fb6b 	bl	80024e6 <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	699b      	ldr	r3, [r3, #24]
 8003e14:	f023 03fe 	bic.w	r3, r3, #254	; 0xfe
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d004      	beq.n	8003e26 <HAL_I2C_Init+0xda>
 8003e1c:	f240 11c5 	movw	r1, #453	; 0x1c5
 8003e20:	4875      	ldr	r0, [pc, #468]	; (8003ff8 <HAL_I2C_Init+0x2ac>)
 8003e22:	f7fe fb60 	bl	80024e6 <assert_failed>
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	69db      	ldr	r3, [r3, #28]
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d008      	beq.n	8003e40 <HAL_I2C_Init+0xf4>
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	69db      	ldr	r3, [r3, #28]
 8003e32:	2b40      	cmp	r3, #64	; 0x40
 8003e34:	d004      	beq.n	8003e40 <HAL_I2C_Init+0xf4>
 8003e36:	f44f 71e3 	mov.w	r1, #454	; 0x1c6
 8003e3a:	486f      	ldr	r0, [pc, #444]	; (8003ff8 <HAL_I2C_Init+0x2ac>)
 8003e3c:	f7fe fb53 	bl	80024e6 <assert_failed>
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	6a1b      	ldr	r3, [r3, #32]
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d008      	beq.n	8003e5a <HAL_I2C_Init+0x10e>
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	6a1b      	ldr	r3, [r3, #32]
 8003e4c:	2b80      	cmp	r3, #128	; 0x80
 8003e4e:	d004      	beq.n	8003e5a <HAL_I2C_Init+0x10e>
 8003e50:	f240 11c7 	movw	r1, #455	; 0x1c7
 8003e54:	4868      	ldr	r0, [pc, #416]	; (8003ff8 <HAL_I2C_Init+0x2ac>)
 8003e56:	f7fe fb46 	bl	80024e6 <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e60:	b2db      	uxtb	r3, r3
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d106      	bne.n	8003e74 <HAL_I2C_Init+0x128>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	2200      	movs	r2, #0
 8003e6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003e6e:	6878      	ldr	r0, [r7, #4]
 8003e70:	f7fd fba0 	bl	80015b4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	2224      	movs	r2, #36	; 0x24
 8003e78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	681a      	ldr	r2, [r3, #0]
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	f022 0201 	bic.w	r2, r2, #1
 8003e8a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	681a      	ldr	r2, [r3, #0]
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003e9a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	681a      	ldr	r2, [r3, #0]
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003eaa:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003eac:	f003 fdea 	bl	8007a84 <HAL_RCC_GetPCLK1Freq>
 8003eb0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	685b      	ldr	r3, [r3, #4]
 8003eb6:	4a52      	ldr	r2, [pc, #328]	; (8004000 <HAL_I2C_Init+0x2b4>)
 8003eb8:	4293      	cmp	r3, r2
 8003eba:	d807      	bhi.n	8003ecc <HAL_I2C_Init+0x180>
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	4a51      	ldr	r2, [pc, #324]	; (8004004 <HAL_I2C_Init+0x2b8>)
 8003ec0:	4293      	cmp	r3, r2
 8003ec2:	bf94      	ite	ls
 8003ec4:	2301      	movls	r3, #1
 8003ec6:	2300      	movhi	r3, #0
 8003ec8:	b2db      	uxtb	r3, r3
 8003eca:	e006      	b.n	8003eda <HAL_I2C_Init+0x18e>
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	4a4e      	ldr	r2, [pc, #312]	; (8004008 <HAL_I2C_Init+0x2bc>)
 8003ed0:	4293      	cmp	r3, r2
 8003ed2:	bf94      	ite	ls
 8003ed4:	2301      	movls	r3, #1
 8003ed6:	2300      	movhi	r3, #0
 8003ed8:	b2db      	uxtb	r3, r3
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d001      	beq.n	8003ee2 <HAL_I2C_Init+0x196>
  {
    return HAL_ERROR;
 8003ede:	2301      	movs	r3, #1
 8003ee0:	e0ef      	b.n	80040c2 <HAL_I2C_Init+0x376>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	4a49      	ldr	r2, [pc, #292]	; (800400c <HAL_I2C_Init+0x2c0>)
 8003ee6:	fba2 2303 	umull	r2, r3, r2, r3
 8003eea:	0c9b      	lsrs	r3, r3, #18
 8003eec:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	685b      	ldr	r3, [r3, #4]
 8003ef4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	68ba      	ldr	r2, [r7, #8]
 8003efe:	430a      	orrs	r2, r1
 8003f00:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	6a1b      	ldr	r3, [r3, #32]
 8003f08:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	685b      	ldr	r3, [r3, #4]
 8003f10:	4a3b      	ldr	r2, [pc, #236]	; (8004000 <HAL_I2C_Init+0x2b4>)
 8003f12:	4293      	cmp	r3, r2
 8003f14:	d802      	bhi.n	8003f1c <HAL_I2C_Init+0x1d0>
 8003f16:	68bb      	ldr	r3, [r7, #8]
 8003f18:	3301      	adds	r3, #1
 8003f1a:	e009      	b.n	8003f30 <HAL_I2C_Init+0x1e4>
 8003f1c:	68bb      	ldr	r3, [r7, #8]
 8003f1e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003f22:	fb02 f303 	mul.w	r3, r2, r3
 8003f26:	4a3a      	ldr	r2, [pc, #232]	; (8004010 <HAL_I2C_Init+0x2c4>)
 8003f28:	fba2 2303 	umull	r2, r3, r2, r3
 8003f2c:	099b      	lsrs	r3, r3, #6
 8003f2e:	3301      	adds	r3, #1
 8003f30:	687a      	ldr	r2, [r7, #4]
 8003f32:	6812      	ldr	r2, [r2, #0]
 8003f34:	430b      	orrs	r3, r1
 8003f36:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	69db      	ldr	r3, [r3, #28]
 8003f3e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003f42:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	685b      	ldr	r3, [r3, #4]
 8003f4a:	492d      	ldr	r1, [pc, #180]	; (8004000 <HAL_I2C_Init+0x2b4>)
 8003f4c:	428b      	cmp	r3, r1
 8003f4e:	d80d      	bhi.n	8003f6c <HAL_I2C_Init+0x220>
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	1e59      	subs	r1, r3, #1
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	685b      	ldr	r3, [r3, #4]
 8003f58:	005b      	lsls	r3, r3, #1
 8003f5a:	fbb1 f3f3 	udiv	r3, r1, r3
 8003f5e:	3301      	adds	r3, #1
 8003f60:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f64:	2b04      	cmp	r3, #4
 8003f66:	bf38      	it	cc
 8003f68:	2304      	movcc	r3, #4
 8003f6a:	e063      	b.n	8004034 <HAL_I2C_Init+0x2e8>
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	689b      	ldr	r3, [r3, #8]
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d111      	bne.n	8003f98 <HAL_I2C_Init+0x24c>
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	1e58      	subs	r0, r3, #1
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	6859      	ldr	r1, [r3, #4]
 8003f7c:	460b      	mov	r3, r1
 8003f7e:	005b      	lsls	r3, r3, #1
 8003f80:	440b      	add	r3, r1
 8003f82:	fbb0 f3f3 	udiv	r3, r0, r3
 8003f86:	3301      	adds	r3, #1
 8003f88:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	bf0c      	ite	eq
 8003f90:	2301      	moveq	r3, #1
 8003f92:	2300      	movne	r3, #0
 8003f94:	b2db      	uxtb	r3, r3
 8003f96:	e012      	b.n	8003fbe <HAL_I2C_Init+0x272>
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	1e58      	subs	r0, r3, #1
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	6859      	ldr	r1, [r3, #4]
 8003fa0:	460b      	mov	r3, r1
 8003fa2:	009b      	lsls	r3, r3, #2
 8003fa4:	440b      	add	r3, r1
 8003fa6:	0099      	lsls	r1, r3, #2
 8003fa8:	440b      	add	r3, r1
 8003faa:	fbb0 f3f3 	udiv	r3, r0, r3
 8003fae:	3301      	adds	r3, #1
 8003fb0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	bf0c      	ite	eq
 8003fb8:	2301      	moveq	r3, #1
 8003fba:	2300      	movne	r3, #0
 8003fbc:	b2db      	uxtb	r3, r3
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d001      	beq.n	8003fc6 <HAL_I2C_Init+0x27a>
 8003fc2:	2301      	movs	r3, #1
 8003fc4:	e036      	b.n	8004034 <HAL_I2C_Init+0x2e8>
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	689b      	ldr	r3, [r3, #8]
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d122      	bne.n	8004014 <HAL_I2C_Init+0x2c8>
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	1e58      	subs	r0, r3, #1
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	6859      	ldr	r1, [r3, #4]
 8003fd6:	460b      	mov	r3, r1
 8003fd8:	005b      	lsls	r3, r3, #1
 8003fda:	440b      	add	r3, r1
 8003fdc:	fbb0 f3f3 	udiv	r3, r0, r3
 8003fe0:	3301      	adds	r3, #1
 8003fe2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003fe6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003fea:	e023      	b.n	8004034 <HAL_I2C_Init+0x2e8>
 8003fec:	40005400 	.word	0x40005400
 8003ff0:	40005800 	.word	0x40005800
 8003ff4:	40005c00 	.word	0x40005c00
 8003ff8:	0800fddc 	.word	0x0800fddc
 8003ffc:	00061a80 	.word	0x00061a80
 8004000:	000186a0 	.word	0x000186a0
 8004004:	001e847f 	.word	0x001e847f
 8004008:	003d08ff 	.word	0x003d08ff
 800400c:	431bde83 	.word	0x431bde83
 8004010:	10624dd3 	.word	0x10624dd3
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	1e58      	subs	r0, r3, #1
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	6859      	ldr	r1, [r3, #4]
 800401c:	460b      	mov	r3, r1
 800401e:	009b      	lsls	r3, r3, #2
 8004020:	440b      	add	r3, r1
 8004022:	0099      	lsls	r1, r3, #2
 8004024:	440b      	add	r3, r1
 8004026:	fbb0 f3f3 	udiv	r3, r0, r3
 800402a:	3301      	adds	r3, #1
 800402c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004030:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004034:	6879      	ldr	r1, [r7, #4]
 8004036:	6809      	ldr	r1, [r1, #0]
 8004038:	4313      	orrs	r3, r2
 800403a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	69da      	ldr	r2, [r3, #28]
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	6a1b      	ldr	r3, [r3, #32]
 800404e:	431a      	orrs	r2, r3
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	430a      	orrs	r2, r1
 8004056:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	689b      	ldr	r3, [r3, #8]
 800405e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004062:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004066:	687a      	ldr	r2, [r7, #4]
 8004068:	6911      	ldr	r1, [r2, #16]
 800406a:	687a      	ldr	r2, [r7, #4]
 800406c:	68d2      	ldr	r2, [r2, #12]
 800406e:	4311      	orrs	r1, r2
 8004070:	687a      	ldr	r2, [r7, #4]
 8004072:	6812      	ldr	r2, [r2, #0]
 8004074:	430b      	orrs	r3, r1
 8004076:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	68db      	ldr	r3, [r3, #12]
 800407e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	695a      	ldr	r2, [r3, #20]
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	699b      	ldr	r3, [r3, #24]
 800408a:	431a      	orrs	r2, r3
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	430a      	orrs	r2, r1
 8004092:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	681a      	ldr	r2, [r3, #0]
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	f042 0201 	orr.w	r2, r2, #1
 80040a2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	2200      	movs	r2, #0
 80040a8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	2220      	movs	r2, #32
 80040ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	2200      	movs	r2, #0
 80040b6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	2200      	movs	r2, #0
 80040bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80040c0:	2300      	movs	r3, #0
}
 80040c2:	4618      	mov	r0, r3
 80040c4:	3710      	adds	r7, #16
 80040c6:	46bd      	mov	sp, r7
 80040c8:	bd80      	pop	{r7, pc}
 80040ca:	bf00      	nop

080040cc <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80040cc:	b580      	push	{r7, lr}
 80040ce:	b088      	sub	sp, #32
 80040d0:	af02      	add	r7, sp, #8
 80040d2:	60f8      	str	r0, [r7, #12]
 80040d4:	607a      	str	r2, [r7, #4]
 80040d6:	461a      	mov	r2, r3
 80040d8:	460b      	mov	r3, r1
 80040da:	817b      	strh	r3, [r7, #10]
 80040dc:	4613      	mov	r3, r2
 80040de:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80040e0:	f7fe fcd8 	bl	8002a94 <HAL_GetTick>
 80040e4:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80040ec:	b2db      	uxtb	r3, r3
 80040ee:	2b20      	cmp	r3, #32
 80040f0:	f040 80e0 	bne.w	80042b4 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80040f4:	697b      	ldr	r3, [r7, #20]
 80040f6:	9300      	str	r3, [sp, #0]
 80040f8:	2319      	movs	r3, #25
 80040fa:	2201      	movs	r2, #1
 80040fc:	4970      	ldr	r1, [pc, #448]	; (80042c0 <HAL_I2C_Master_Transmit+0x1f4>)
 80040fe:	68f8      	ldr	r0, [r7, #12]
 8004100:	f000 fc58 	bl	80049b4 <I2C_WaitOnFlagUntilTimeout>
 8004104:	4603      	mov	r3, r0
 8004106:	2b00      	cmp	r3, #0
 8004108:	d001      	beq.n	800410e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800410a:	2302      	movs	r3, #2
 800410c:	e0d3      	b.n	80042b6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004114:	2b01      	cmp	r3, #1
 8004116:	d101      	bne.n	800411c <HAL_I2C_Master_Transmit+0x50>
 8004118:	2302      	movs	r3, #2
 800411a:	e0cc      	b.n	80042b6 <HAL_I2C_Master_Transmit+0x1ea>
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	2201      	movs	r2, #1
 8004120:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	f003 0301 	and.w	r3, r3, #1
 800412e:	2b01      	cmp	r3, #1
 8004130:	d007      	beq.n	8004142 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	681a      	ldr	r2, [r3, #0]
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	f042 0201 	orr.w	r2, r2, #1
 8004140:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	681a      	ldr	r2, [r3, #0]
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004150:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	2221      	movs	r2, #33	; 0x21
 8004156:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	2210      	movs	r2, #16
 800415e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	2200      	movs	r2, #0
 8004166:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	687a      	ldr	r2, [r7, #4]
 800416c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	893a      	ldrh	r2, [r7, #8]
 8004172:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004178:	b29a      	uxth	r2, r3
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	4a50      	ldr	r2, [pc, #320]	; (80042c4 <HAL_I2C_Master_Transmit+0x1f8>)
 8004182:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004184:	8979      	ldrh	r1, [r7, #10]
 8004186:	697b      	ldr	r3, [r7, #20]
 8004188:	6a3a      	ldr	r2, [r7, #32]
 800418a:	68f8      	ldr	r0, [r7, #12]
 800418c:	f000 fac2 	bl	8004714 <I2C_MasterRequestWrite>
 8004190:	4603      	mov	r3, r0
 8004192:	2b00      	cmp	r3, #0
 8004194:	d001      	beq.n	800419a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8004196:	2301      	movs	r3, #1
 8004198:	e08d      	b.n	80042b6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800419a:	2300      	movs	r3, #0
 800419c:	613b      	str	r3, [r7, #16]
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	695b      	ldr	r3, [r3, #20]
 80041a4:	613b      	str	r3, [r7, #16]
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	699b      	ldr	r3, [r3, #24]
 80041ac:	613b      	str	r3, [r7, #16]
 80041ae:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80041b0:	e066      	b.n	8004280 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80041b2:	697a      	ldr	r2, [r7, #20]
 80041b4:	6a39      	ldr	r1, [r7, #32]
 80041b6:	68f8      	ldr	r0, [r7, #12]
 80041b8:	f000 fcd2 	bl	8004b60 <I2C_WaitOnTXEFlagUntilTimeout>
 80041bc:	4603      	mov	r3, r0
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d00d      	beq.n	80041de <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041c6:	2b04      	cmp	r3, #4
 80041c8:	d107      	bne.n	80041da <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	681a      	ldr	r2, [r3, #0]
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80041d8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80041da:	2301      	movs	r3, #1
 80041dc:	e06b      	b.n	80042b6 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041e2:	781a      	ldrb	r2, [r3, #0]
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041ee:	1c5a      	adds	r2, r3, #1
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041f8:	b29b      	uxth	r3, r3
 80041fa:	3b01      	subs	r3, #1
 80041fc:	b29a      	uxth	r2, r3
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004206:	3b01      	subs	r3, #1
 8004208:	b29a      	uxth	r2, r3
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	695b      	ldr	r3, [r3, #20]
 8004214:	f003 0304 	and.w	r3, r3, #4
 8004218:	2b04      	cmp	r3, #4
 800421a:	d11b      	bne.n	8004254 <HAL_I2C_Master_Transmit+0x188>
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004220:	2b00      	cmp	r3, #0
 8004222:	d017      	beq.n	8004254 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004228:	781a      	ldrb	r2, [r3, #0]
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004234:	1c5a      	adds	r2, r3, #1
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800423e:	b29b      	uxth	r3, r3
 8004240:	3b01      	subs	r3, #1
 8004242:	b29a      	uxth	r2, r3
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800424c:	3b01      	subs	r3, #1
 800424e:	b29a      	uxth	r2, r3
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004254:	697a      	ldr	r2, [r7, #20]
 8004256:	6a39      	ldr	r1, [r7, #32]
 8004258:	68f8      	ldr	r0, [r7, #12]
 800425a:	f000 fcc2 	bl	8004be2 <I2C_WaitOnBTFFlagUntilTimeout>
 800425e:	4603      	mov	r3, r0
 8004260:	2b00      	cmp	r3, #0
 8004262:	d00d      	beq.n	8004280 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004268:	2b04      	cmp	r3, #4
 800426a:	d107      	bne.n	800427c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	681a      	ldr	r2, [r3, #0]
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800427a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800427c:	2301      	movs	r3, #1
 800427e:	e01a      	b.n	80042b6 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004284:	2b00      	cmp	r3, #0
 8004286:	d194      	bne.n	80041b2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	681a      	ldr	r2, [r3, #0]
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004296:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	2220      	movs	r2, #32
 800429c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	2200      	movs	r2, #0
 80042a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	2200      	movs	r2, #0
 80042ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80042b0:	2300      	movs	r3, #0
 80042b2:	e000      	b.n	80042b6 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80042b4:	2302      	movs	r3, #2
  }
}
 80042b6:	4618      	mov	r0, r3
 80042b8:	3718      	adds	r7, #24
 80042ba:	46bd      	mov	sp, r7
 80042bc:	bd80      	pop	{r7, pc}
 80042be:	bf00      	nop
 80042c0:	00100002 	.word	0x00100002
 80042c4:	ffff0000 	.word	0xffff0000

080042c8 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80042c8:	b580      	push	{r7, lr}
 80042ca:	b08c      	sub	sp, #48	; 0x30
 80042cc:	af02      	add	r7, sp, #8
 80042ce:	60f8      	str	r0, [r7, #12]
 80042d0:	607a      	str	r2, [r7, #4]
 80042d2:	461a      	mov	r2, r3
 80042d4:	460b      	mov	r3, r1
 80042d6:	817b      	strh	r3, [r7, #10]
 80042d8:	4613      	mov	r3, r2
 80042da:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80042dc:	f7fe fbda 	bl	8002a94 <HAL_GetTick>
 80042e0:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80042e8:	b2db      	uxtb	r3, r3
 80042ea:	2b20      	cmp	r3, #32
 80042ec:	f040 820b 	bne.w	8004706 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80042f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042f2:	9300      	str	r3, [sp, #0]
 80042f4:	2319      	movs	r3, #25
 80042f6:	2201      	movs	r2, #1
 80042f8:	497c      	ldr	r1, [pc, #496]	; (80044ec <HAL_I2C_Master_Receive+0x224>)
 80042fa:	68f8      	ldr	r0, [r7, #12]
 80042fc:	f000 fb5a 	bl	80049b4 <I2C_WaitOnFlagUntilTimeout>
 8004300:	4603      	mov	r3, r0
 8004302:	2b00      	cmp	r3, #0
 8004304:	d001      	beq.n	800430a <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8004306:	2302      	movs	r3, #2
 8004308:	e1fe      	b.n	8004708 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004310:	2b01      	cmp	r3, #1
 8004312:	d101      	bne.n	8004318 <HAL_I2C_Master_Receive+0x50>
 8004314:	2302      	movs	r3, #2
 8004316:	e1f7      	b.n	8004708 <HAL_I2C_Master_Receive+0x440>
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	2201      	movs	r2, #1
 800431c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	f003 0301 	and.w	r3, r3, #1
 800432a:	2b01      	cmp	r3, #1
 800432c:	d007      	beq.n	800433e <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	681a      	ldr	r2, [r3, #0]
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	f042 0201 	orr.w	r2, r2, #1
 800433c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	681a      	ldr	r2, [r3, #0]
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800434c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	2222      	movs	r2, #34	; 0x22
 8004352:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	2210      	movs	r2, #16
 800435a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	2200      	movs	r2, #0
 8004362:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	687a      	ldr	r2, [r7, #4]
 8004368:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	893a      	ldrh	r2, [r7, #8]
 800436e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004374:	b29a      	uxth	r2, r3
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	4a5c      	ldr	r2, [pc, #368]	; (80044f0 <HAL_I2C_Master_Receive+0x228>)
 800437e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004380:	8979      	ldrh	r1, [r7, #10]
 8004382:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004384:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004386:	68f8      	ldr	r0, [r7, #12]
 8004388:	f000 fa46 	bl	8004818 <I2C_MasterRequestRead>
 800438c:	4603      	mov	r3, r0
 800438e:	2b00      	cmp	r3, #0
 8004390:	d001      	beq.n	8004396 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8004392:	2301      	movs	r3, #1
 8004394:	e1b8      	b.n	8004708 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800439a:	2b00      	cmp	r3, #0
 800439c:	d113      	bne.n	80043c6 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800439e:	2300      	movs	r3, #0
 80043a0:	623b      	str	r3, [r7, #32]
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	695b      	ldr	r3, [r3, #20]
 80043a8:	623b      	str	r3, [r7, #32]
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	699b      	ldr	r3, [r3, #24]
 80043b0:	623b      	str	r3, [r7, #32]
 80043b2:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	681a      	ldr	r2, [r3, #0]
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80043c2:	601a      	str	r2, [r3, #0]
 80043c4:	e18c      	b.n	80046e0 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043ca:	2b01      	cmp	r3, #1
 80043cc:	d11b      	bne.n	8004406 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	681a      	ldr	r2, [r3, #0]
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80043dc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80043de:	2300      	movs	r3, #0
 80043e0:	61fb      	str	r3, [r7, #28]
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	695b      	ldr	r3, [r3, #20]
 80043e8:	61fb      	str	r3, [r7, #28]
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	699b      	ldr	r3, [r3, #24]
 80043f0:	61fb      	str	r3, [r7, #28]
 80043f2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	681a      	ldr	r2, [r3, #0]
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004402:	601a      	str	r2, [r3, #0]
 8004404:	e16c      	b.n	80046e0 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800440a:	2b02      	cmp	r3, #2
 800440c:	d11b      	bne.n	8004446 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	681a      	ldr	r2, [r3, #0]
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800441c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	681a      	ldr	r2, [r3, #0]
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800442c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800442e:	2300      	movs	r3, #0
 8004430:	61bb      	str	r3, [r7, #24]
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	695b      	ldr	r3, [r3, #20]
 8004438:	61bb      	str	r3, [r7, #24]
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	699b      	ldr	r3, [r3, #24]
 8004440:	61bb      	str	r3, [r7, #24]
 8004442:	69bb      	ldr	r3, [r7, #24]
 8004444:	e14c      	b.n	80046e0 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	681a      	ldr	r2, [r3, #0]
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004454:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004456:	2300      	movs	r3, #0
 8004458:	617b      	str	r3, [r7, #20]
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	695b      	ldr	r3, [r3, #20]
 8004460:	617b      	str	r3, [r7, #20]
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	699b      	ldr	r3, [r3, #24]
 8004468:	617b      	str	r3, [r7, #20]
 800446a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800446c:	e138      	b.n	80046e0 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004472:	2b03      	cmp	r3, #3
 8004474:	f200 80f1 	bhi.w	800465a <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800447c:	2b01      	cmp	r3, #1
 800447e:	d123      	bne.n	80044c8 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004480:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004482:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004484:	68f8      	ldr	r0, [r7, #12]
 8004486:	f000 fbed 	bl	8004c64 <I2C_WaitOnRXNEFlagUntilTimeout>
 800448a:	4603      	mov	r3, r0
 800448c:	2b00      	cmp	r3, #0
 800448e:	d001      	beq.n	8004494 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8004490:	2301      	movs	r3, #1
 8004492:	e139      	b.n	8004708 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	691a      	ldr	r2, [r3, #16]
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800449e:	b2d2      	uxtb	r2, r2
 80044a0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044a6:	1c5a      	adds	r2, r3, #1
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044b0:	3b01      	subs	r3, #1
 80044b2:	b29a      	uxth	r2, r3
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044bc:	b29b      	uxth	r3, r3
 80044be:	3b01      	subs	r3, #1
 80044c0:	b29a      	uxth	r2, r3
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	855a      	strh	r2, [r3, #42]	; 0x2a
 80044c6:	e10b      	b.n	80046e0 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044cc:	2b02      	cmp	r3, #2
 80044ce:	d14e      	bne.n	800456e <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80044d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044d2:	9300      	str	r3, [sp, #0]
 80044d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044d6:	2200      	movs	r2, #0
 80044d8:	4906      	ldr	r1, [pc, #24]	; (80044f4 <HAL_I2C_Master_Receive+0x22c>)
 80044da:	68f8      	ldr	r0, [r7, #12]
 80044dc:	f000 fa6a 	bl	80049b4 <I2C_WaitOnFlagUntilTimeout>
 80044e0:	4603      	mov	r3, r0
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d008      	beq.n	80044f8 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 80044e6:	2301      	movs	r3, #1
 80044e8:	e10e      	b.n	8004708 <HAL_I2C_Master_Receive+0x440>
 80044ea:	bf00      	nop
 80044ec:	00100002 	.word	0x00100002
 80044f0:	ffff0000 	.word	0xffff0000
 80044f4:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	681a      	ldr	r2, [r3, #0]
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004506:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	691a      	ldr	r2, [r3, #16]
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004512:	b2d2      	uxtb	r2, r2
 8004514:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800451a:	1c5a      	adds	r2, r3, #1
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004524:	3b01      	subs	r3, #1
 8004526:	b29a      	uxth	r2, r3
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004530:	b29b      	uxth	r3, r3
 8004532:	3b01      	subs	r3, #1
 8004534:	b29a      	uxth	r2, r3
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	691a      	ldr	r2, [r3, #16]
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004544:	b2d2      	uxtb	r2, r2
 8004546:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800454c:	1c5a      	adds	r2, r3, #1
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004556:	3b01      	subs	r3, #1
 8004558:	b29a      	uxth	r2, r3
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004562:	b29b      	uxth	r3, r3
 8004564:	3b01      	subs	r3, #1
 8004566:	b29a      	uxth	r2, r3
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800456c:	e0b8      	b.n	80046e0 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800456e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004570:	9300      	str	r3, [sp, #0]
 8004572:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004574:	2200      	movs	r2, #0
 8004576:	4966      	ldr	r1, [pc, #408]	; (8004710 <HAL_I2C_Master_Receive+0x448>)
 8004578:	68f8      	ldr	r0, [r7, #12]
 800457a:	f000 fa1b 	bl	80049b4 <I2C_WaitOnFlagUntilTimeout>
 800457e:	4603      	mov	r3, r0
 8004580:	2b00      	cmp	r3, #0
 8004582:	d001      	beq.n	8004588 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8004584:	2301      	movs	r3, #1
 8004586:	e0bf      	b.n	8004708 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	681a      	ldr	r2, [r3, #0]
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004596:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	691a      	ldr	r2, [r3, #16]
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045a2:	b2d2      	uxtb	r2, r2
 80045a4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045aa:	1c5a      	adds	r2, r3, #1
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045b4:	3b01      	subs	r3, #1
 80045b6:	b29a      	uxth	r2, r3
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045c0:	b29b      	uxth	r3, r3
 80045c2:	3b01      	subs	r3, #1
 80045c4:	b29a      	uxth	r2, r3
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80045ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045cc:	9300      	str	r3, [sp, #0]
 80045ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045d0:	2200      	movs	r2, #0
 80045d2:	494f      	ldr	r1, [pc, #316]	; (8004710 <HAL_I2C_Master_Receive+0x448>)
 80045d4:	68f8      	ldr	r0, [r7, #12]
 80045d6:	f000 f9ed 	bl	80049b4 <I2C_WaitOnFlagUntilTimeout>
 80045da:	4603      	mov	r3, r0
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d001      	beq.n	80045e4 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 80045e0:	2301      	movs	r3, #1
 80045e2:	e091      	b.n	8004708 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	681a      	ldr	r2, [r3, #0]
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80045f2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	691a      	ldr	r2, [r3, #16]
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045fe:	b2d2      	uxtb	r2, r2
 8004600:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004606:	1c5a      	adds	r2, r3, #1
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004610:	3b01      	subs	r3, #1
 8004612:	b29a      	uxth	r2, r3
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800461c:	b29b      	uxth	r3, r3
 800461e:	3b01      	subs	r3, #1
 8004620:	b29a      	uxth	r2, r3
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	691a      	ldr	r2, [r3, #16]
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004630:	b2d2      	uxtb	r2, r2
 8004632:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004638:	1c5a      	adds	r2, r3, #1
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004642:	3b01      	subs	r3, #1
 8004644:	b29a      	uxth	r2, r3
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800464e:	b29b      	uxth	r3, r3
 8004650:	3b01      	subs	r3, #1
 8004652:	b29a      	uxth	r2, r3
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004658:	e042      	b.n	80046e0 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800465a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800465c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800465e:	68f8      	ldr	r0, [r7, #12]
 8004660:	f000 fb00 	bl	8004c64 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004664:	4603      	mov	r3, r0
 8004666:	2b00      	cmp	r3, #0
 8004668:	d001      	beq.n	800466e <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 800466a:	2301      	movs	r3, #1
 800466c:	e04c      	b.n	8004708 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	691a      	ldr	r2, [r3, #16]
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004678:	b2d2      	uxtb	r2, r2
 800467a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004680:	1c5a      	adds	r2, r3, #1
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800468a:	3b01      	subs	r3, #1
 800468c:	b29a      	uxth	r2, r3
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004696:	b29b      	uxth	r3, r3
 8004698:	3b01      	subs	r3, #1
 800469a:	b29a      	uxth	r2, r3
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	695b      	ldr	r3, [r3, #20]
 80046a6:	f003 0304 	and.w	r3, r3, #4
 80046aa:	2b04      	cmp	r3, #4
 80046ac:	d118      	bne.n	80046e0 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	691a      	ldr	r2, [r3, #16]
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046b8:	b2d2      	uxtb	r2, r2
 80046ba:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046c0:	1c5a      	adds	r2, r3, #1
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80046ca:	3b01      	subs	r3, #1
 80046cc:	b29a      	uxth	r2, r3
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046d6:	b29b      	uxth	r3, r3
 80046d8:	3b01      	subs	r3, #1
 80046da:	b29a      	uxth	r2, r3
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	f47f aec2 	bne.w	800446e <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	2220      	movs	r2, #32
 80046ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	2200      	movs	r2, #0
 80046f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	2200      	movs	r2, #0
 80046fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004702:	2300      	movs	r3, #0
 8004704:	e000      	b.n	8004708 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8004706:	2302      	movs	r3, #2
  }
}
 8004708:	4618      	mov	r0, r3
 800470a:	3728      	adds	r7, #40	; 0x28
 800470c:	46bd      	mov	sp, r7
 800470e:	bd80      	pop	{r7, pc}
 8004710:	00010004 	.word	0x00010004

08004714 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004714:	b580      	push	{r7, lr}
 8004716:	b088      	sub	sp, #32
 8004718:	af02      	add	r7, sp, #8
 800471a:	60f8      	str	r0, [r7, #12]
 800471c:	607a      	str	r2, [r7, #4]
 800471e:	603b      	str	r3, [r7, #0]
 8004720:	460b      	mov	r3, r1
 8004722:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004728:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800472a:	697b      	ldr	r3, [r7, #20]
 800472c:	2b08      	cmp	r3, #8
 800472e:	d006      	beq.n	800473e <I2C_MasterRequestWrite+0x2a>
 8004730:	697b      	ldr	r3, [r7, #20]
 8004732:	2b01      	cmp	r3, #1
 8004734:	d003      	beq.n	800473e <I2C_MasterRequestWrite+0x2a>
 8004736:	697b      	ldr	r3, [r7, #20]
 8004738:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800473c:	d108      	bne.n	8004750 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	681a      	ldr	r2, [r3, #0]
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800474c:	601a      	str	r2, [r3, #0]
 800474e:	e00b      	b.n	8004768 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004754:	2b12      	cmp	r3, #18
 8004756:	d107      	bne.n	8004768 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	681a      	ldr	r2, [r3, #0]
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004766:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004768:	683b      	ldr	r3, [r7, #0]
 800476a:	9300      	str	r3, [sp, #0]
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	2200      	movs	r2, #0
 8004770:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004774:	68f8      	ldr	r0, [r7, #12]
 8004776:	f000 f91d 	bl	80049b4 <I2C_WaitOnFlagUntilTimeout>
 800477a:	4603      	mov	r3, r0
 800477c:	2b00      	cmp	r3, #0
 800477e:	d00d      	beq.n	800479c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800478a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800478e:	d103      	bne.n	8004798 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004796:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004798:	2303      	movs	r3, #3
 800479a:	e035      	b.n	8004808 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	691b      	ldr	r3, [r3, #16]
 80047a0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80047a4:	d108      	bne.n	80047b8 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80047a6:	897b      	ldrh	r3, [r7, #10]
 80047a8:	b2db      	uxtb	r3, r3
 80047aa:	461a      	mov	r2, r3
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80047b4:	611a      	str	r2, [r3, #16]
 80047b6:	e01b      	b.n	80047f0 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80047b8:	897b      	ldrh	r3, [r7, #10]
 80047ba:	11db      	asrs	r3, r3, #7
 80047bc:	b2db      	uxtb	r3, r3
 80047be:	f003 0306 	and.w	r3, r3, #6
 80047c2:	b2db      	uxtb	r3, r3
 80047c4:	f063 030f 	orn	r3, r3, #15
 80047c8:	b2da      	uxtb	r2, r3
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80047d0:	683b      	ldr	r3, [r7, #0]
 80047d2:	687a      	ldr	r2, [r7, #4]
 80047d4:	490e      	ldr	r1, [pc, #56]	; (8004810 <I2C_MasterRequestWrite+0xfc>)
 80047d6:	68f8      	ldr	r0, [r7, #12]
 80047d8:	f000 f943 	bl	8004a62 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80047dc:	4603      	mov	r3, r0
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d001      	beq.n	80047e6 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80047e2:	2301      	movs	r3, #1
 80047e4:	e010      	b.n	8004808 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80047e6:	897b      	ldrh	r3, [r7, #10]
 80047e8:	b2da      	uxtb	r2, r3
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80047f0:	683b      	ldr	r3, [r7, #0]
 80047f2:	687a      	ldr	r2, [r7, #4]
 80047f4:	4907      	ldr	r1, [pc, #28]	; (8004814 <I2C_MasterRequestWrite+0x100>)
 80047f6:	68f8      	ldr	r0, [r7, #12]
 80047f8:	f000 f933 	bl	8004a62 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80047fc:	4603      	mov	r3, r0
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d001      	beq.n	8004806 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8004802:	2301      	movs	r3, #1
 8004804:	e000      	b.n	8004808 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8004806:	2300      	movs	r3, #0
}
 8004808:	4618      	mov	r0, r3
 800480a:	3718      	adds	r7, #24
 800480c:	46bd      	mov	sp, r7
 800480e:	bd80      	pop	{r7, pc}
 8004810:	00010008 	.word	0x00010008
 8004814:	00010002 	.word	0x00010002

08004818 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004818:	b580      	push	{r7, lr}
 800481a:	b088      	sub	sp, #32
 800481c:	af02      	add	r7, sp, #8
 800481e:	60f8      	str	r0, [r7, #12]
 8004820:	607a      	str	r2, [r7, #4]
 8004822:	603b      	str	r3, [r7, #0]
 8004824:	460b      	mov	r3, r1
 8004826:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800482c:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	681a      	ldr	r2, [r3, #0]
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800483c:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800483e:	697b      	ldr	r3, [r7, #20]
 8004840:	2b08      	cmp	r3, #8
 8004842:	d006      	beq.n	8004852 <I2C_MasterRequestRead+0x3a>
 8004844:	697b      	ldr	r3, [r7, #20]
 8004846:	2b01      	cmp	r3, #1
 8004848:	d003      	beq.n	8004852 <I2C_MasterRequestRead+0x3a>
 800484a:	697b      	ldr	r3, [r7, #20]
 800484c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004850:	d108      	bne.n	8004864 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	681a      	ldr	r2, [r3, #0]
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004860:	601a      	str	r2, [r3, #0]
 8004862:	e00b      	b.n	800487c <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004868:	2b11      	cmp	r3, #17
 800486a:	d107      	bne.n	800487c <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	681a      	ldr	r2, [r3, #0]
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800487a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800487c:	683b      	ldr	r3, [r7, #0]
 800487e:	9300      	str	r3, [sp, #0]
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	2200      	movs	r2, #0
 8004884:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004888:	68f8      	ldr	r0, [r7, #12]
 800488a:	f000 f893 	bl	80049b4 <I2C_WaitOnFlagUntilTimeout>
 800488e:	4603      	mov	r3, r0
 8004890:	2b00      	cmp	r3, #0
 8004892:	d00d      	beq.n	80048b0 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800489e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80048a2:	d103      	bne.n	80048ac <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80048aa:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80048ac:	2303      	movs	r3, #3
 80048ae:	e079      	b.n	80049a4 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	691b      	ldr	r3, [r3, #16]
 80048b4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80048b8:	d108      	bne.n	80048cc <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80048ba:	897b      	ldrh	r3, [r7, #10]
 80048bc:	b2db      	uxtb	r3, r3
 80048be:	f043 0301 	orr.w	r3, r3, #1
 80048c2:	b2da      	uxtb	r2, r3
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	611a      	str	r2, [r3, #16]
 80048ca:	e05f      	b.n	800498c <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80048cc:	897b      	ldrh	r3, [r7, #10]
 80048ce:	11db      	asrs	r3, r3, #7
 80048d0:	b2db      	uxtb	r3, r3
 80048d2:	f003 0306 	and.w	r3, r3, #6
 80048d6:	b2db      	uxtb	r3, r3
 80048d8:	f063 030f 	orn	r3, r3, #15
 80048dc:	b2da      	uxtb	r2, r3
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80048e4:	683b      	ldr	r3, [r7, #0]
 80048e6:	687a      	ldr	r2, [r7, #4]
 80048e8:	4930      	ldr	r1, [pc, #192]	; (80049ac <I2C_MasterRequestRead+0x194>)
 80048ea:	68f8      	ldr	r0, [r7, #12]
 80048ec:	f000 f8b9 	bl	8004a62 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80048f0:	4603      	mov	r3, r0
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d001      	beq.n	80048fa <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 80048f6:	2301      	movs	r3, #1
 80048f8:	e054      	b.n	80049a4 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80048fa:	897b      	ldrh	r3, [r7, #10]
 80048fc:	b2da      	uxtb	r2, r3
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004904:	683b      	ldr	r3, [r7, #0]
 8004906:	687a      	ldr	r2, [r7, #4]
 8004908:	4929      	ldr	r1, [pc, #164]	; (80049b0 <I2C_MasterRequestRead+0x198>)
 800490a:	68f8      	ldr	r0, [r7, #12]
 800490c:	f000 f8a9 	bl	8004a62 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004910:	4603      	mov	r3, r0
 8004912:	2b00      	cmp	r3, #0
 8004914:	d001      	beq.n	800491a <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8004916:	2301      	movs	r3, #1
 8004918:	e044      	b.n	80049a4 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800491a:	2300      	movs	r3, #0
 800491c:	613b      	str	r3, [r7, #16]
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	695b      	ldr	r3, [r3, #20]
 8004924:	613b      	str	r3, [r7, #16]
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	699b      	ldr	r3, [r3, #24]
 800492c:	613b      	str	r3, [r7, #16]
 800492e:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	681a      	ldr	r2, [r3, #0]
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800493e:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004940:	683b      	ldr	r3, [r7, #0]
 8004942:	9300      	str	r3, [sp, #0]
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	2200      	movs	r2, #0
 8004948:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800494c:	68f8      	ldr	r0, [r7, #12]
 800494e:	f000 f831 	bl	80049b4 <I2C_WaitOnFlagUntilTimeout>
 8004952:	4603      	mov	r3, r0
 8004954:	2b00      	cmp	r3, #0
 8004956:	d00d      	beq.n	8004974 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004962:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004966:	d103      	bne.n	8004970 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800496e:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8004970:	2303      	movs	r3, #3
 8004972:	e017      	b.n	80049a4 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8004974:	897b      	ldrh	r3, [r7, #10]
 8004976:	11db      	asrs	r3, r3, #7
 8004978:	b2db      	uxtb	r3, r3
 800497a:	f003 0306 	and.w	r3, r3, #6
 800497e:	b2db      	uxtb	r3, r3
 8004980:	f063 030e 	orn	r3, r3, #14
 8004984:	b2da      	uxtb	r2, r3
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800498c:	683b      	ldr	r3, [r7, #0]
 800498e:	687a      	ldr	r2, [r7, #4]
 8004990:	4907      	ldr	r1, [pc, #28]	; (80049b0 <I2C_MasterRequestRead+0x198>)
 8004992:	68f8      	ldr	r0, [r7, #12]
 8004994:	f000 f865 	bl	8004a62 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004998:	4603      	mov	r3, r0
 800499a:	2b00      	cmp	r3, #0
 800499c:	d001      	beq.n	80049a2 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800499e:	2301      	movs	r3, #1
 80049a0:	e000      	b.n	80049a4 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 80049a2:	2300      	movs	r3, #0
}
 80049a4:	4618      	mov	r0, r3
 80049a6:	3718      	adds	r7, #24
 80049a8:	46bd      	mov	sp, r7
 80049aa:	bd80      	pop	{r7, pc}
 80049ac:	00010008 	.word	0x00010008
 80049b0:	00010002 	.word	0x00010002

080049b4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80049b4:	b580      	push	{r7, lr}
 80049b6:	b084      	sub	sp, #16
 80049b8:	af00      	add	r7, sp, #0
 80049ba:	60f8      	str	r0, [r7, #12]
 80049bc:	60b9      	str	r1, [r7, #8]
 80049be:	603b      	str	r3, [r7, #0]
 80049c0:	4613      	mov	r3, r2
 80049c2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80049c4:	e025      	b.n	8004a12 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80049c6:	683b      	ldr	r3, [r7, #0]
 80049c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049cc:	d021      	beq.n	8004a12 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80049ce:	f7fe f861 	bl	8002a94 <HAL_GetTick>
 80049d2:	4602      	mov	r2, r0
 80049d4:	69bb      	ldr	r3, [r7, #24]
 80049d6:	1ad3      	subs	r3, r2, r3
 80049d8:	683a      	ldr	r2, [r7, #0]
 80049da:	429a      	cmp	r2, r3
 80049dc:	d302      	bcc.n	80049e4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80049de:	683b      	ldr	r3, [r7, #0]
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d116      	bne.n	8004a12 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	2200      	movs	r2, #0
 80049e8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	2220      	movs	r2, #32
 80049ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	2200      	movs	r2, #0
 80049f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049fe:	f043 0220 	orr.w	r2, r3, #32
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	2200      	movs	r2, #0
 8004a0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004a0e:	2301      	movs	r3, #1
 8004a10:	e023      	b.n	8004a5a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004a12:	68bb      	ldr	r3, [r7, #8]
 8004a14:	0c1b      	lsrs	r3, r3, #16
 8004a16:	b2db      	uxtb	r3, r3
 8004a18:	2b01      	cmp	r3, #1
 8004a1a:	d10d      	bne.n	8004a38 <I2C_WaitOnFlagUntilTimeout+0x84>
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	695b      	ldr	r3, [r3, #20]
 8004a22:	43da      	mvns	r2, r3
 8004a24:	68bb      	ldr	r3, [r7, #8]
 8004a26:	4013      	ands	r3, r2
 8004a28:	b29b      	uxth	r3, r3
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	bf0c      	ite	eq
 8004a2e:	2301      	moveq	r3, #1
 8004a30:	2300      	movne	r3, #0
 8004a32:	b2db      	uxtb	r3, r3
 8004a34:	461a      	mov	r2, r3
 8004a36:	e00c      	b.n	8004a52 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	699b      	ldr	r3, [r3, #24]
 8004a3e:	43da      	mvns	r2, r3
 8004a40:	68bb      	ldr	r3, [r7, #8]
 8004a42:	4013      	ands	r3, r2
 8004a44:	b29b      	uxth	r3, r3
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	bf0c      	ite	eq
 8004a4a:	2301      	moveq	r3, #1
 8004a4c:	2300      	movne	r3, #0
 8004a4e:	b2db      	uxtb	r3, r3
 8004a50:	461a      	mov	r2, r3
 8004a52:	79fb      	ldrb	r3, [r7, #7]
 8004a54:	429a      	cmp	r2, r3
 8004a56:	d0b6      	beq.n	80049c6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004a58:	2300      	movs	r3, #0
}
 8004a5a:	4618      	mov	r0, r3
 8004a5c:	3710      	adds	r7, #16
 8004a5e:	46bd      	mov	sp, r7
 8004a60:	bd80      	pop	{r7, pc}

08004a62 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004a62:	b580      	push	{r7, lr}
 8004a64:	b084      	sub	sp, #16
 8004a66:	af00      	add	r7, sp, #0
 8004a68:	60f8      	str	r0, [r7, #12]
 8004a6a:	60b9      	str	r1, [r7, #8]
 8004a6c:	607a      	str	r2, [r7, #4]
 8004a6e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004a70:	e051      	b.n	8004b16 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	695b      	ldr	r3, [r3, #20]
 8004a78:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a7c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a80:	d123      	bne.n	8004aca <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	681a      	ldr	r2, [r3, #0]
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004a90:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004a9a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	2200      	movs	r2, #0
 8004aa0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	2220      	movs	r2, #32
 8004aa6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	2200      	movs	r2, #0
 8004aae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ab6:	f043 0204 	orr.w	r2, r3, #4
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	2200      	movs	r2, #0
 8004ac2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004ac6:	2301      	movs	r3, #1
 8004ac8:	e046      	b.n	8004b58 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ad0:	d021      	beq.n	8004b16 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004ad2:	f7fd ffdf 	bl	8002a94 <HAL_GetTick>
 8004ad6:	4602      	mov	r2, r0
 8004ad8:	683b      	ldr	r3, [r7, #0]
 8004ada:	1ad3      	subs	r3, r2, r3
 8004adc:	687a      	ldr	r2, [r7, #4]
 8004ade:	429a      	cmp	r2, r3
 8004ae0:	d302      	bcc.n	8004ae8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d116      	bne.n	8004b16 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	2200      	movs	r2, #0
 8004aec:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	2220      	movs	r2, #32
 8004af2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	2200      	movs	r2, #0
 8004afa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b02:	f043 0220 	orr.w	r2, r3, #32
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	2200      	movs	r2, #0
 8004b0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004b12:	2301      	movs	r3, #1
 8004b14:	e020      	b.n	8004b58 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004b16:	68bb      	ldr	r3, [r7, #8]
 8004b18:	0c1b      	lsrs	r3, r3, #16
 8004b1a:	b2db      	uxtb	r3, r3
 8004b1c:	2b01      	cmp	r3, #1
 8004b1e:	d10c      	bne.n	8004b3a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	695b      	ldr	r3, [r3, #20]
 8004b26:	43da      	mvns	r2, r3
 8004b28:	68bb      	ldr	r3, [r7, #8]
 8004b2a:	4013      	ands	r3, r2
 8004b2c:	b29b      	uxth	r3, r3
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	bf14      	ite	ne
 8004b32:	2301      	movne	r3, #1
 8004b34:	2300      	moveq	r3, #0
 8004b36:	b2db      	uxtb	r3, r3
 8004b38:	e00b      	b.n	8004b52 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	699b      	ldr	r3, [r3, #24]
 8004b40:	43da      	mvns	r2, r3
 8004b42:	68bb      	ldr	r3, [r7, #8]
 8004b44:	4013      	ands	r3, r2
 8004b46:	b29b      	uxth	r3, r3
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	bf14      	ite	ne
 8004b4c:	2301      	movne	r3, #1
 8004b4e:	2300      	moveq	r3, #0
 8004b50:	b2db      	uxtb	r3, r3
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d18d      	bne.n	8004a72 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8004b56:	2300      	movs	r3, #0
}
 8004b58:	4618      	mov	r0, r3
 8004b5a:	3710      	adds	r7, #16
 8004b5c:	46bd      	mov	sp, r7
 8004b5e:	bd80      	pop	{r7, pc}

08004b60 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004b60:	b580      	push	{r7, lr}
 8004b62:	b084      	sub	sp, #16
 8004b64:	af00      	add	r7, sp, #0
 8004b66:	60f8      	str	r0, [r7, #12]
 8004b68:	60b9      	str	r1, [r7, #8]
 8004b6a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004b6c:	e02d      	b.n	8004bca <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004b6e:	68f8      	ldr	r0, [r7, #12]
 8004b70:	f000 f8ce 	bl	8004d10 <I2C_IsAcknowledgeFailed>
 8004b74:	4603      	mov	r3, r0
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d001      	beq.n	8004b7e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004b7a:	2301      	movs	r3, #1
 8004b7c:	e02d      	b.n	8004bda <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004b7e:	68bb      	ldr	r3, [r7, #8]
 8004b80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b84:	d021      	beq.n	8004bca <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b86:	f7fd ff85 	bl	8002a94 <HAL_GetTick>
 8004b8a:	4602      	mov	r2, r0
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	1ad3      	subs	r3, r2, r3
 8004b90:	68ba      	ldr	r2, [r7, #8]
 8004b92:	429a      	cmp	r2, r3
 8004b94:	d302      	bcc.n	8004b9c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004b96:	68bb      	ldr	r3, [r7, #8]
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d116      	bne.n	8004bca <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	2200      	movs	r2, #0
 8004ba0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	2220      	movs	r2, #32
 8004ba6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	2200      	movs	r2, #0
 8004bae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bb6:	f043 0220 	orr.w	r2, r3, #32
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	2200      	movs	r2, #0
 8004bc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004bc6:	2301      	movs	r3, #1
 8004bc8:	e007      	b.n	8004bda <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	695b      	ldr	r3, [r3, #20]
 8004bd0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004bd4:	2b80      	cmp	r3, #128	; 0x80
 8004bd6:	d1ca      	bne.n	8004b6e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004bd8:	2300      	movs	r3, #0
}
 8004bda:	4618      	mov	r0, r3
 8004bdc:	3710      	adds	r7, #16
 8004bde:	46bd      	mov	sp, r7
 8004be0:	bd80      	pop	{r7, pc}

08004be2 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004be2:	b580      	push	{r7, lr}
 8004be4:	b084      	sub	sp, #16
 8004be6:	af00      	add	r7, sp, #0
 8004be8:	60f8      	str	r0, [r7, #12]
 8004bea:	60b9      	str	r1, [r7, #8]
 8004bec:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004bee:	e02d      	b.n	8004c4c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004bf0:	68f8      	ldr	r0, [r7, #12]
 8004bf2:	f000 f88d 	bl	8004d10 <I2C_IsAcknowledgeFailed>
 8004bf6:	4603      	mov	r3, r0
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d001      	beq.n	8004c00 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004bfc:	2301      	movs	r3, #1
 8004bfe:	e02d      	b.n	8004c5c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c00:	68bb      	ldr	r3, [r7, #8]
 8004c02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c06:	d021      	beq.n	8004c4c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c08:	f7fd ff44 	bl	8002a94 <HAL_GetTick>
 8004c0c:	4602      	mov	r2, r0
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	1ad3      	subs	r3, r2, r3
 8004c12:	68ba      	ldr	r2, [r7, #8]
 8004c14:	429a      	cmp	r2, r3
 8004c16:	d302      	bcc.n	8004c1e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004c18:	68bb      	ldr	r3, [r7, #8]
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d116      	bne.n	8004c4c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	2200      	movs	r2, #0
 8004c22:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	2220      	movs	r2, #32
 8004c28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	2200      	movs	r2, #0
 8004c30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c38:	f043 0220 	orr.w	r2, r3, #32
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	2200      	movs	r2, #0
 8004c44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004c48:	2301      	movs	r3, #1
 8004c4a:	e007      	b.n	8004c5c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	695b      	ldr	r3, [r3, #20]
 8004c52:	f003 0304 	and.w	r3, r3, #4
 8004c56:	2b04      	cmp	r3, #4
 8004c58:	d1ca      	bne.n	8004bf0 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004c5a:	2300      	movs	r3, #0
}
 8004c5c:	4618      	mov	r0, r3
 8004c5e:	3710      	adds	r7, #16
 8004c60:	46bd      	mov	sp, r7
 8004c62:	bd80      	pop	{r7, pc}

08004c64 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004c64:	b580      	push	{r7, lr}
 8004c66:	b084      	sub	sp, #16
 8004c68:	af00      	add	r7, sp, #0
 8004c6a:	60f8      	str	r0, [r7, #12]
 8004c6c:	60b9      	str	r1, [r7, #8]
 8004c6e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004c70:	e042      	b.n	8004cf8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	695b      	ldr	r3, [r3, #20]
 8004c78:	f003 0310 	and.w	r3, r3, #16
 8004c7c:	2b10      	cmp	r3, #16
 8004c7e:	d119      	bne.n	8004cb4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	f06f 0210 	mvn.w	r2, #16
 8004c88:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	2200      	movs	r2, #0
 8004c8e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	2220      	movs	r2, #32
 8004c94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	2200      	movs	r2, #0
 8004c9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	2200      	movs	r2, #0
 8004cac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004cb0:	2301      	movs	r3, #1
 8004cb2:	e029      	b.n	8004d08 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004cb4:	f7fd feee 	bl	8002a94 <HAL_GetTick>
 8004cb8:	4602      	mov	r2, r0
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	1ad3      	subs	r3, r2, r3
 8004cbe:	68ba      	ldr	r2, [r7, #8]
 8004cc0:	429a      	cmp	r2, r3
 8004cc2:	d302      	bcc.n	8004cca <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004cc4:	68bb      	ldr	r3, [r7, #8]
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d116      	bne.n	8004cf8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	2200      	movs	r2, #0
 8004cce:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	2220      	movs	r2, #32
 8004cd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	2200      	movs	r2, #0
 8004cdc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ce4:	f043 0220 	orr.w	r2, r3, #32
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	2200      	movs	r2, #0
 8004cf0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004cf4:	2301      	movs	r3, #1
 8004cf6:	e007      	b.n	8004d08 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	695b      	ldr	r3, [r3, #20]
 8004cfe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d02:	2b40      	cmp	r3, #64	; 0x40
 8004d04:	d1b5      	bne.n	8004c72 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004d06:	2300      	movs	r3, #0
}
 8004d08:	4618      	mov	r0, r3
 8004d0a:	3710      	adds	r7, #16
 8004d0c:	46bd      	mov	sp, r7
 8004d0e:	bd80      	pop	{r7, pc}

08004d10 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004d10:	b480      	push	{r7}
 8004d12:	b083      	sub	sp, #12
 8004d14:	af00      	add	r7, sp, #0
 8004d16:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	695b      	ldr	r3, [r3, #20]
 8004d1e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d22:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d26:	d11b      	bne.n	8004d60 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004d30:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	2200      	movs	r2, #0
 8004d36:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	2220      	movs	r2, #32
 8004d3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	2200      	movs	r2, #0
 8004d44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d4c:	f043 0204 	orr.w	r2, r3, #4
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	2200      	movs	r2, #0
 8004d58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004d5c:	2301      	movs	r3, #1
 8004d5e:	e000      	b.n	8004d62 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004d60:	2300      	movs	r3, #0
}
 8004d62:	4618      	mov	r0, r3
 8004d64:	370c      	adds	r7, #12
 8004d66:	46bd      	mov	sp, r7
 8004d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d6c:	4770      	bx	lr
	...

08004d70 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8004d70:	b580      	push	{r7, lr}
 8004d72:	b088      	sub	sp, #32
 8004d74:	af00      	add	r7, sp, #0
 8004d76:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d101      	bne.n	8004d82 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8004d7e:	2301      	movs	r3, #1
 8004d80:	e1e7      	b.n	8005152 <HAL_I2S_Init+0x3e2>
  }

  /* Check the I2S parameters */
  assert_param(IS_I2S_ALL_INSTANCE(hi2s->Instance));
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	4a9b      	ldr	r2, [pc, #620]	; (8004ff4 <HAL_I2S_Init+0x284>)
 8004d88:	4293      	cmp	r3, r2
 8004d8a:	d018      	beq.n	8004dbe <HAL_I2S_Init+0x4e>
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	4a99      	ldr	r2, [pc, #612]	; (8004ff8 <HAL_I2S_Init+0x288>)
 8004d92:	4293      	cmp	r3, r2
 8004d94:	d013      	beq.n	8004dbe <HAL_I2S_Init+0x4e>
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	4a98      	ldr	r2, [pc, #608]	; (8004ffc <HAL_I2S_Init+0x28c>)
 8004d9c:	4293      	cmp	r3, r2
 8004d9e:	d00e      	beq.n	8004dbe <HAL_I2S_Init+0x4e>
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	4a96      	ldr	r2, [pc, #600]	; (8005000 <HAL_I2S_Init+0x290>)
 8004da6:	4293      	cmp	r3, r2
 8004da8:	d009      	beq.n	8004dbe <HAL_I2S_Init+0x4e>
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	4a95      	ldr	r2, [pc, #596]	; (8005004 <HAL_I2S_Init+0x294>)
 8004db0:	4293      	cmp	r3, r2
 8004db2:	d004      	beq.n	8004dbe <HAL_I2S_Init+0x4e>
 8004db4:	f240 111b 	movw	r1, #283	; 0x11b
 8004db8:	4893      	ldr	r0, [pc, #588]	; (8005008 <HAL_I2S_Init+0x298>)
 8004dba:	f7fd fb94 	bl	80024e6 <assert_failed>
  assert_param(IS_I2S_MODE(hi2s->Init.Mode));
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	685b      	ldr	r3, [r3, #4]
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d013      	beq.n	8004dee <HAL_I2S_Init+0x7e>
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	685b      	ldr	r3, [r3, #4]
 8004dca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004dce:	d00e      	beq.n	8004dee <HAL_I2S_Init+0x7e>
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	685b      	ldr	r3, [r3, #4]
 8004dd4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004dd8:	d009      	beq.n	8004dee <HAL_I2S_Init+0x7e>
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	685b      	ldr	r3, [r3, #4]
 8004dde:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004de2:	d004      	beq.n	8004dee <HAL_I2S_Init+0x7e>
 8004de4:	f44f 718e 	mov.w	r1, #284	; 0x11c
 8004de8:	4887      	ldr	r0, [pc, #540]	; (8005008 <HAL_I2S_Init+0x298>)
 8004dea:	f7fd fb7c 	bl	80024e6 <assert_failed>
  assert_param(IS_I2S_STANDARD(hi2s->Init.Standard));
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	689b      	ldr	r3, [r3, #8]
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d014      	beq.n	8004e20 <HAL_I2S_Init+0xb0>
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	689b      	ldr	r3, [r3, #8]
 8004dfa:	2b10      	cmp	r3, #16
 8004dfc:	d010      	beq.n	8004e20 <HAL_I2S_Init+0xb0>
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	689b      	ldr	r3, [r3, #8]
 8004e02:	2b20      	cmp	r3, #32
 8004e04:	d00c      	beq.n	8004e20 <HAL_I2S_Init+0xb0>
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	689b      	ldr	r3, [r3, #8]
 8004e0a:	2b30      	cmp	r3, #48	; 0x30
 8004e0c:	d008      	beq.n	8004e20 <HAL_I2S_Init+0xb0>
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	689b      	ldr	r3, [r3, #8]
 8004e12:	2bb0      	cmp	r3, #176	; 0xb0
 8004e14:	d004      	beq.n	8004e20 <HAL_I2S_Init+0xb0>
 8004e16:	f240 111d 	movw	r1, #285	; 0x11d
 8004e1a:	487b      	ldr	r0, [pc, #492]	; (8005008 <HAL_I2S_Init+0x298>)
 8004e1c:	f7fd fb63 	bl	80024e6 <assert_failed>
  assert_param(IS_I2S_DATA_FORMAT(hi2s->Init.DataFormat));
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	68db      	ldr	r3, [r3, #12]
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d010      	beq.n	8004e4a <HAL_I2S_Init+0xda>
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	68db      	ldr	r3, [r3, #12]
 8004e2c:	2b01      	cmp	r3, #1
 8004e2e:	d00c      	beq.n	8004e4a <HAL_I2S_Init+0xda>
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	68db      	ldr	r3, [r3, #12]
 8004e34:	2b03      	cmp	r3, #3
 8004e36:	d008      	beq.n	8004e4a <HAL_I2S_Init+0xda>
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	68db      	ldr	r3, [r3, #12]
 8004e3c:	2b05      	cmp	r3, #5
 8004e3e:	d004      	beq.n	8004e4a <HAL_I2S_Init+0xda>
 8004e40:	f44f 718f 	mov.w	r1, #286	; 0x11e
 8004e44:	4870      	ldr	r0, [pc, #448]	; (8005008 <HAL_I2S_Init+0x298>)
 8004e46:	f7fd fb4e 	bl	80024e6 <assert_failed>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	691b      	ldr	r3, [r3, #16]
 8004e4e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004e52:	d008      	beq.n	8004e66 <HAL_I2S_Init+0xf6>
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	691b      	ldr	r3, [r3, #16]
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d004      	beq.n	8004e66 <HAL_I2S_Init+0xf6>
 8004e5c:	f240 111f 	movw	r1, #287	; 0x11f
 8004e60:	4869      	ldr	r0, [pc, #420]	; (8005008 <HAL_I2S_Init+0x298>)
 8004e62:	f7fd fb40 	bl	80024e6 <assert_failed>
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	695b      	ldr	r3, [r3, #20]
 8004e6a:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 8004e6e:	d304      	bcc.n	8004e7a <HAL_I2S_Init+0x10a>
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	695b      	ldr	r3, [r3, #20]
 8004e74:	4a65      	ldr	r2, [pc, #404]	; (800500c <HAL_I2S_Init+0x29c>)
 8004e76:	4293      	cmp	r3, r2
 8004e78:	d908      	bls.n	8004e8c <HAL_I2S_Init+0x11c>
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	695b      	ldr	r3, [r3, #20]
 8004e7e:	2b02      	cmp	r3, #2
 8004e80:	d004      	beq.n	8004e8c <HAL_I2S_Init+0x11c>
 8004e82:	f44f 7190 	mov.w	r1, #288	; 0x120
 8004e86:	4860      	ldr	r0, [pc, #384]	; (8005008 <HAL_I2S_Init+0x298>)
 8004e88:	f7fd fb2d 	bl	80024e6 <assert_failed>
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	699b      	ldr	r3, [r3, #24]
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d008      	beq.n	8004ea6 <HAL_I2S_Init+0x136>
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	699b      	ldr	r3, [r3, #24]
 8004e98:	2b08      	cmp	r3, #8
 8004e9a:	d004      	beq.n	8004ea6 <HAL_I2S_Init+0x136>
 8004e9c:	f240 1121 	movw	r1, #289	; 0x121
 8004ea0:	4859      	ldr	r0, [pc, #356]	; (8005008 <HAL_I2S_Init+0x298>)
 8004ea2:	f7fd fb20 	bl	80024e6 <assert_failed>
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	69db      	ldr	r3, [r3, #28]
 8004eaa:	2b01      	cmp	r3, #1
 8004eac:	d008      	beq.n	8004ec0 <HAL_I2S_Init+0x150>
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	69db      	ldr	r3, [r3, #28]
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d004      	beq.n	8004ec0 <HAL_I2S_Init+0x150>
 8004eb6:	f44f 7191 	mov.w	r1, #290	; 0x122
 8004eba:	4853      	ldr	r0, [pc, #332]	; (8005008 <HAL_I2S_Init+0x298>)
 8004ebc:	f7fd fb13 	bl	80024e6 <assert_failed>

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004ec6:	b2db      	uxtb	r3, r3
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d109      	bne.n	8004ee0 <HAL_I2S_Init+0x170>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	2200      	movs	r2, #0
 8004ed0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	4a4e      	ldr	r2, [pc, #312]	; (8005010 <HAL_I2S_Init+0x2a0>)
 8004ed8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8004eda:	6878      	ldr	r0, [r7, #4]
 8004edc:	f7fc fc0e 	bl	80016fc <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	2202      	movs	r2, #2
 8004ee4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	69db      	ldr	r3, [r3, #28]
 8004eee:	687a      	ldr	r2, [r7, #4]
 8004ef0:	6812      	ldr	r2, [r2, #0]
 8004ef2:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8004ef6:	f023 030f 	bic.w	r3, r3, #15
 8004efa:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	2202      	movs	r2, #2
 8004f02:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	695b      	ldr	r3, [r3, #20]
 8004f08:	2b02      	cmp	r3, #2
 8004f0a:	d060      	beq.n	8004fce <HAL_I2S_Init+0x25e>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	68db      	ldr	r3, [r3, #12]
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d102      	bne.n	8004f1a <HAL_I2S_Init+0x1aa>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8004f14:	2310      	movs	r3, #16
 8004f16:	617b      	str	r3, [r7, #20]
 8004f18:	e001      	b.n	8004f1e <HAL_I2S_Init+0x1ae>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8004f1a:	2320      	movs	r3, #32
 8004f1c:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	689b      	ldr	r3, [r3, #8]
 8004f22:	2b20      	cmp	r3, #32
 8004f24:	d802      	bhi.n	8004f2c <HAL_I2S_Init+0x1bc>
    {
      /* In I2S standard packet lenght is multiplied by 2 */
      packetlength = packetlength * 2U;
 8004f26:	697b      	ldr	r3, [r7, #20]
 8004f28:	005b      	lsls	r3, r3, #1
 8004f2a:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8004f2c:	2001      	movs	r0, #1
 8004f2e:	f002 ffd1 	bl	8007ed4 <HAL_RCCEx_GetPeriphCLKFreq>
 8004f32:	60f8      	str	r0, [r7, #12]
#endif

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	691b      	ldr	r3, [r3, #16]
 8004f38:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004f3c:	d125      	bne.n	8004f8a <HAL_I2S_Init+0x21a>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	68db      	ldr	r3, [r3, #12]
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d010      	beq.n	8004f68 <HAL_I2S_Init+0x1f8>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8004f46:	697b      	ldr	r3, [r7, #20]
 8004f48:	009b      	lsls	r3, r3, #2
 8004f4a:	68fa      	ldr	r2, [r7, #12]
 8004f4c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004f50:	4613      	mov	r3, r2
 8004f52:	009b      	lsls	r3, r3, #2
 8004f54:	4413      	add	r3, r2
 8004f56:	005b      	lsls	r3, r3, #1
 8004f58:	461a      	mov	r2, r3
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	695b      	ldr	r3, [r3, #20]
 8004f5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f62:	3305      	adds	r3, #5
 8004f64:	613b      	str	r3, [r7, #16]
 8004f66:	e01f      	b.n	8004fa8 <HAL_I2S_Init+0x238>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8004f68:	697b      	ldr	r3, [r7, #20]
 8004f6a:	00db      	lsls	r3, r3, #3
 8004f6c:	68fa      	ldr	r2, [r7, #12]
 8004f6e:	fbb2 f2f3 	udiv	r2, r2, r3
 8004f72:	4613      	mov	r3, r2
 8004f74:	009b      	lsls	r3, r3, #2
 8004f76:	4413      	add	r3, r2
 8004f78:	005b      	lsls	r3, r3, #1
 8004f7a:	461a      	mov	r2, r3
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	695b      	ldr	r3, [r3, #20]
 8004f80:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f84:	3305      	adds	r3, #5
 8004f86:	613b      	str	r3, [r7, #16]
 8004f88:	e00e      	b.n	8004fa8 <HAL_I2S_Init+0x238>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8004f8a:	68fa      	ldr	r2, [r7, #12]
 8004f8c:	697b      	ldr	r3, [r7, #20]
 8004f8e:	fbb2 f2f3 	udiv	r2, r2, r3
 8004f92:	4613      	mov	r3, r2
 8004f94:	009b      	lsls	r3, r3, #2
 8004f96:	4413      	add	r3, r2
 8004f98:	005b      	lsls	r3, r3, #1
 8004f9a:	461a      	mov	r2, r3
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	695b      	ldr	r3, [r3, #20]
 8004fa0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004fa4:	3305      	adds	r3, #5
 8004fa6:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8004fa8:	693b      	ldr	r3, [r7, #16]
 8004faa:	4a1a      	ldr	r2, [pc, #104]	; (8005014 <HAL_I2S_Init+0x2a4>)
 8004fac:	fba2 2303 	umull	r2, r3, r2, r3
 8004fb0:	08db      	lsrs	r3, r3, #3
 8004fb2:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8004fb4:	693b      	ldr	r3, [r7, #16]
 8004fb6:	f003 0301 	and.w	r3, r3, #1
 8004fba:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8004fbc:	693a      	ldr	r2, [r7, #16]
 8004fbe:	69bb      	ldr	r3, [r7, #24]
 8004fc0:	1ad3      	subs	r3, r2, r3
 8004fc2:	085b      	lsrs	r3, r3, #1
 8004fc4:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8004fc6:	69bb      	ldr	r3, [r7, #24]
 8004fc8:	021b      	lsls	r3, r3, #8
 8004fca:	61bb      	str	r3, [r7, #24]
 8004fcc:	e003      	b.n	8004fd6 <HAL_I2S_Init+0x266>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8004fce:	2302      	movs	r3, #2
 8004fd0:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8004fd2:	2300      	movs	r3, #0
 8004fd4:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8004fd6:	69fb      	ldr	r3, [r7, #28]
 8004fd8:	2b01      	cmp	r3, #1
 8004fda:	d902      	bls.n	8004fe2 <HAL_I2S_Init+0x272>
 8004fdc:	69fb      	ldr	r3, [r7, #28]
 8004fde:	2bff      	cmp	r3, #255	; 0xff
 8004fe0:	d91a      	bls.n	8005018 <HAL_I2S_Init+0x2a8>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004fe6:	f043 0210 	orr.w	r2, r3, #16
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8004fee:	2301      	movs	r3, #1
 8004ff0:	e0af      	b.n	8005152 <HAL_I2S_Init+0x3e2>
 8004ff2:	bf00      	nop
 8004ff4:	40013000 	.word	0x40013000
 8004ff8:	40003800 	.word	0x40003800
 8004ffc:	40003c00 	.word	0x40003c00
 8005000:	40013400 	.word	0x40013400
 8005004:	40015000 	.word	0x40015000
 8005008:	0800fe14 	.word	0x0800fe14
 800500c:	0002ee00 	.word	0x0002ee00
 8005010:	08005609 	.word	0x08005609
 8005014:	cccccccd 	.word	0xcccccccd
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	691a      	ldr	r2, [r3, #16]
 800501c:	69bb      	ldr	r3, [r7, #24]
 800501e:	ea42 0103 	orr.w	r1, r2, r3
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	69fa      	ldr	r2, [r7, #28]
 8005028:	430a      	orrs	r2, r1
 800502a:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	69db      	ldr	r3, [r3, #28]
 8005032:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8005036:	f023 030f 	bic.w	r3, r3, #15
 800503a:	687a      	ldr	r2, [r7, #4]
 800503c:	6851      	ldr	r1, [r2, #4]
 800503e:	687a      	ldr	r2, [r7, #4]
 8005040:	6892      	ldr	r2, [r2, #8]
 8005042:	4311      	orrs	r1, r2
 8005044:	687a      	ldr	r2, [r7, #4]
 8005046:	68d2      	ldr	r2, [r2, #12]
 8005048:	4311      	orrs	r1, r2
 800504a:	687a      	ldr	r2, [r7, #4]
 800504c:	6992      	ldr	r2, [r2, #24]
 800504e:	430a      	orrs	r2, r1
 8005050:	431a      	orrs	r2, r3
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800505a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_ASTRTEN */

#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	6a1b      	ldr	r3, [r3, #32]
 8005060:	2b00      	cmp	r3, #0
 8005062:	d008      	beq.n	8005076 <HAL_I2S_Init+0x306>
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	6a1b      	ldr	r3, [r3, #32]
 8005068:	2b01      	cmp	r3, #1
 800506a:	d004      	beq.n	8005076 <HAL_I2S_Init+0x306>
 800506c:	f240 11bd 	movw	r1, #445	; 0x1bd
 8005070:	483a      	ldr	r0, [pc, #232]	; (800515c <HAL_I2S_Init+0x3ec>)
 8005072:	f7fd fa38 	bl	80024e6 <assert_failed>

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	6a1b      	ldr	r3, [r3, #32]
 800507a:	2b01      	cmp	r3, #1
 800507c:	d161      	bne.n	8005142 <HAL_I2S_Init+0x3d2>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	4a37      	ldr	r2, [pc, #220]	; (8005160 <HAL_I2S_Init+0x3f0>)
 8005082:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	4a36      	ldr	r2, [pc, #216]	; (8005164 <HAL_I2S_Init+0x3f4>)
 800508a:	4293      	cmp	r3, r2
 800508c:	d101      	bne.n	8005092 <HAL_I2S_Init+0x322>
 800508e:	4b36      	ldr	r3, [pc, #216]	; (8005168 <HAL_I2S_Init+0x3f8>)
 8005090:	e001      	b.n	8005096 <HAL_I2S_Init+0x326>
 8005092:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005096:	69db      	ldr	r3, [r3, #28]
 8005098:	687a      	ldr	r2, [r7, #4]
 800509a:	6812      	ldr	r2, [r2, #0]
 800509c:	4931      	ldr	r1, [pc, #196]	; (8005164 <HAL_I2S_Init+0x3f4>)
 800509e:	428a      	cmp	r2, r1
 80050a0:	d101      	bne.n	80050a6 <HAL_I2S_Init+0x336>
 80050a2:	4a31      	ldr	r2, [pc, #196]	; (8005168 <HAL_I2S_Init+0x3f8>)
 80050a4:	e001      	b.n	80050aa <HAL_I2S_Init+0x33a>
 80050a6:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 80050aa:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80050ae:	f023 030f 	bic.w	r3, r3, #15
 80050b2:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	4a2a      	ldr	r2, [pc, #168]	; (8005164 <HAL_I2S_Init+0x3f4>)
 80050ba:	4293      	cmp	r3, r2
 80050bc:	d101      	bne.n	80050c2 <HAL_I2S_Init+0x352>
 80050be:	4b2a      	ldr	r3, [pc, #168]	; (8005168 <HAL_I2S_Init+0x3f8>)
 80050c0:	e001      	b.n	80050c6 <HAL_I2S_Init+0x356>
 80050c2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80050c6:	2202      	movs	r2, #2
 80050c8:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	4a25      	ldr	r2, [pc, #148]	; (8005164 <HAL_I2S_Init+0x3f4>)
 80050d0:	4293      	cmp	r3, r2
 80050d2:	d101      	bne.n	80050d8 <HAL_I2S_Init+0x368>
 80050d4:	4b24      	ldr	r3, [pc, #144]	; (8005168 <HAL_I2S_Init+0x3f8>)
 80050d6:	e001      	b.n	80050dc <HAL_I2S_Init+0x36c>
 80050d8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80050dc:	69db      	ldr	r3, [r3, #28]
 80050de:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	685b      	ldr	r3, [r3, #4]
 80050e4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80050e8:	d003      	beq.n	80050f2 <HAL_I2S_Init+0x382>
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	685b      	ldr	r3, [r3, #4]
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d103      	bne.n	80050fa <HAL_I2S_Init+0x38a>
    {
      tmp = I2S_MODE_SLAVE_RX;
 80050f2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80050f6:	613b      	str	r3, [r7, #16]
 80050f8:	e001      	b.n	80050fe <HAL_I2S_Init+0x38e>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 80050fa:	2300      	movs	r3, #0
 80050fc:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 80050fe:	693b      	ldr	r3, [r7, #16]
 8005100:	b29a      	uxth	r2, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	689b      	ldr	r3, [r3, #8]
 8005106:	b299      	uxth	r1, r3
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	68db      	ldr	r3, [r3, #12]
 800510c:	b298      	uxth	r0, r3
                                    (uint16_t)hi2s->Init.CPOL))));
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	699b      	ldr	r3, [r3, #24]
 8005112:	b29b      	uxth	r3, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 8005114:	4303      	orrs	r3, r0
 8005116:	b29b      	uxth	r3, r3
 8005118:	430b      	orrs	r3, r1
 800511a:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 800511c:	4313      	orrs	r3, r2
 800511e:	b29a      	uxth	r2, r3
 8005120:	897b      	ldrh	r3, [r7, #10]
 8005122:	4313      	orrs	r3, r2
 8005124:	b29b      	uxth	r3, r3
 8005126:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800512a:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	4a0c      	ldr	r2, [pc, #48]	; (8005164 <HAL_I2S_Init+0x3f4>)
 8005132:	4293      	cmp	r3, r2
 8005134:	d101      	bne.n	800513a <HAL_I2S_Init+0x3ca>
 8005136:	4b0c      	ldr	r3, [pc, #48]	; (8005168 <HAL_I2S_Init+0x3f8>)
 8005138:	e001      	b.n	800513e <HAL_I2S_Init+0x3ce>
 800513a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800513e:	897a      	ldrh	r2, [r7, #10]
 8005140:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	2200      	movs	r2, #0
 8005146:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	2201      	movs	r2, #1
 800514c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8005150:	2300      	movs	r3, #0
}
 8005152:	4618      	mov	r0, r3
 8005154:	3720      	adds	r7, #32
 8005156:	46bd      	mov	sp, r7
 8005158:	bd80      	pop	{r7, pc}
 800515a:	bf00      	nop
 800515c:	0800fe14 	.word	0x0800fe14
 8005160:	08005791 	.word	0x08005791
 8005164:	40003800 	.word	0x40003800
 8005168:	40003400 	.word	0x40003400

0800516c <HAL_I2S_Receive>:
  * @note   In I2S Master Receiver mode, just after enabling the peripheral the clock will be generate
  *         in continuous way and as the I2S is not disabled at the end of the I2S transaction.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Receive(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size, uint32_t Timeout)
{
 800516c:	b580      	push	{r7, lr}
 800516e:	b088      	sub	sp, #32
 8005170:	af00      	add	r7, sp, #0
 8005172:	60f8      	str	r0, [r7, #12]
 8005174:	60b9      	str	r1, [r7, #8]
 8005176:	603b      	str	r3, [r7, #0]
 8005178:	4613      	mov	r3, r2
 800517a:	80fb      	strh	r3, [r7, #6]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 800517c:	68bb      	ldr	r3, [r7, #8]
 800517e:	2b00      	cmp	r3, #0
 8005180:	d002      	beq.n	8005188 <HAL_I2S_Receive+0x1c>
 8005182:	88fb      	ldrh	r3, [r7, #6]
 8005184:	2b00      	cmp	r3, #0
 8005186:	d101      	bne.n	800518c <HAL_I2S_Receive+0x20>
  {
    return  HAL_ERROR;
 8005188:	2301      	movs	r3, #1
 800518a:	e0b4      	b.n	80052f6 <HAL_I2S_Receive+0x18a>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005192:	b2db      	uxtb	r3, r3
 8005194:	2b01      	cmp	r3, #1
 8005196:	d101      	bne.n	800519c <HAL_I2S_Receive+0x30>
 8005198:	2302      	movs	r3, #2
 800519a:	e0ac      	b.n	80052f6 <HAL_I2S_Receive+0x18a>
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	2201      	movs	r2, #1
 80051a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if (hi2s->State != HAL_I2S_STATE_READY)
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80051aa:	b2db      	uxtb	r3, r3
 80051ac:	2b01      	cmp	r3, #1
 80051ae:	d005      	beq.n	80051bc <HAL_I2S_Receive+0x50>
  {
    __HAL_UNLOCK(hi2s);
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	2200      	movs	r2, #0
 80051b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    return HAL_BUSY;
 80051b8:	2302      	movs	r3, #2
 80051ba:	e09c      	b.n	80052f6 <HAL_I2S_Receive+0x18a>
  }

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_RX;
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	2204      	movs	r2, #4
 80051c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	2200      	movs	r2, #0
 80051c8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->pRxBuffPtr = pData;
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	68ba      	ldr	r2, [r7, #8]
 80051ce:	62da      	str	r2, [r3, #44]	; 0x2c

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	69db      	ldr	r3, [r3, #28]
 80051d6:	f003 0307 	and.w	r3, r3, #7
 80051da:	61fb      	str	r3, [r7, #28]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 80051dc:	69fb      	ldr	r3, [r7, #28]
 80051de:	2b03      	cmp	r3, #3
 80051e0:	d002      	beq.n	80051e8 <HAL_I2S_Receive+0x7c>
 80051e2:	69fb      	ldr	r3, [r7, #28]
 80051e4:	2b05      	cmp	r3, #5
 80051e6:	d10a      	bne.n	80051fe <HAL_I2S_Receive+0x92>
  {
    hi2s->RxXferSize = (Size << 1U);
 80051e8:	88fb      	ldrh	r3, [r7, #6]
 80051ea:	005b      	lsls	r3, r3, #1
 80051ec:	b29a      	uxth	r2, r3
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	861a      	strh	r2, [r3, #48]	; 0x30
    hi2s->RxXferCount = (Size << 1U);
 80051f2:	88fb      	ldrh	r3, [r7, #6]
 80051f4:	005b      	lsls	r3, r3, #1
 80051f6:	b29a      	uxth	r2, r3
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	865a      	strh	r2, [r3, #50]	; 0x32
 80051fc:	e005      	b.n	800520a <HAL_I2S_Receive+0x9e>
  }
  else
  {
    hi2s->RxXferSize = Size;
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	88fa      	ldrh	r2, [r7, #6]
 8005202:	861a      	strh	r2, [r3, #48]	; 0x30
    hi2s->RxXferCount = Size;
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	88fa      	ldrh	r2, [r7, #6]
 8005208:	865a      	strh	r2, [r3, #50]	; 0x32
  }

  /* Check if the I2S is already enabled */
  if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SE) != SPI_I2SCFGR_I2SE)
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	69db      	ldr	r3, [r3, #28]
 8005210:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005214:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005218:	d007      	beq.n	800522a <HAL_I2S_Receive+0xbe>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	69da      	ldr	r2, [r3, #28]
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005228:	61da      	str	r2, [r3, #28]
  }

  /* Check if Master Receiver mode is selected */
  if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_RX)
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	69db      	ldr	r3, [r3, #28]
 8005230:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005234:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005238:	d14f      	bne.n	80052da <HAL_I2S_Receive+0x16e>
  {
    /* Clear the Overrun Flag by a read operation on the SPI_DR register followed by a read
    access to the SPI_SR register. */
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 800523a:	2300      	movs	r3, #0
 800523c:	61bb      	str	r3, [r7, #24]
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	68db      	ldr	r3, [r3, #12]
 8005244:	61bb      	str	r3, [r7, #24]
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	689b      	ldr	r3, [r3, #8]
 800524c:	61bb      	str	r3, [r7, #24]
 800524e:	69bb      	ldr	r3, [r7, #24]
  }

  /* Receive data */
  while (hi2s->RxXferCount > 0U)
 8005250:	e043      	b.n	80052da <HAL_I2S_Receive+0x16e>
  {
    /* Wait until RXNE flag is set */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_RXNE, SET, Timeout) != HAL_OK)
 8005252:	683b      	ldr	r3, [r7, #0]
 8005254:	2201      	movs	r2, #1
 8005256:	2101      	movs	r1, #1
 8005258:	68f8      	ldr	r0, [r7, #12]
 800525a:	f000 fa5f 	bl	800571c <I2S_WaitFlagStateUntilTimeout>
 800525e:	4603      	mov	r3, r0
 8005260:	2b00      	cmp	r3, #0
 8005262:	d00f      	beq.n	8005284 <HAL_I2S_Receive+0x118>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005268:	f043 0201 	orr.w	r2, r3, #1
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2s->State = HAL_I2S_STATE_READY;
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	2201      	movs	r2, #1
 8005274:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      __HAL_UNLOCK(hi2s);
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	2200      	movs	r2, #0
 800527c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8005280:	2301      	movs	r3, #1
 8005282:	e038      	b.n	80052f6 <HAL_I2S_Receive+0x18a>
    }

    (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	68da      	ldr	r2, [r3, #12]
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800528e:	b292      	uxth	r2, r2
 8005290:	801a      	strh	r2, [r3, #0]
    hi2s->pRxBuffPtr++;
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005296:	1c9a      	adds	r2, r3, #2
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2s->RxXferCount--;
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80052a0:	b29b      	uxth	r3, r3
 80052a2:	3b01      	subs	r3, #1
 80052a4:	b29a      	uxth	r2, r3
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	865a      	strh	r2, [r3, #50]	; 0x32

    /* Check if an overrun occurs */
    if (__HAL_I2S_GET_FLAG(hi2s, I2S_FLAG_OVR) == SET)
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	689b      	ldr	r3, [r3, #8]
 80052b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052b4:	2b40      	cmp	r3, #64	; 0x40
 80052b6:	d110      	bne.n	80052da <HAL_I2S_Receive+0x16e>
    {
      /* Clear overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80052b8:	2300      	movs	r3, #0
 80052ba:	617b      	str	r3, [r7, #20]
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	68db      	ldr	r3, [r3, #12]
 80052c2:	617b      	str	r3, [r7, #20]
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	689b      	ldr	r3, [r3, #8]
 80052ca:	617b      	str	r3, [r7, #20]
 80052cc:	697b      	ldr	r3, [r7, #20]

      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052d2:	f043 0202 	orr.w	r2, r3, #2
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	645a      	str	r2, [r3, #68]	; 0x44
  while (hi2s->RxXferCount > 0U)
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80052de:	b29b      	uxth	r3, r3
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d1b6      	bne.n	8005252 <HAL_I2S_Receive+0xe6>
    }
  }

  hi2s->State = HAL_I2S_STATE_READY;
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	2201      	movs	r2, #1
 80052e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  __HAL_UNLOCK(hi2s);
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	2200      	movs	r2, #0
 80052f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  return HAL_OK;
 80052f4:	2300      	movs	r3, #0
}
 80052f6:	4618      	mov	r0, r3
 80052f8:	3720      	adds	r7, #32
 80052fa:	46bd      	mov	sp, r7
 80052fc:	bd80      	pop	{r7, pc}
	...

08005300 <HAL_I2S_Receive_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Receive_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 8005300:	b580      	push	{r7, lr}
 8005302:	b086      	sub	sp, #24
 8005304:	af00      	add	r7, sp, #0
 8005306:	60f8      	str	r0, [r7, #12]
 8005308:	60b9      	str	r1, [r7, #8]
 800530a:	4613      	mov	r3, r2
 800530c:	80fb      	strh	r3, [r7, #6]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 800530e:	68bb      	ldr	r3, [r7, #8]
 8005310:	2b00      	cmp	r3, #0
 8005312:	d002      	beq.n	800531a <HAL_I2S_Receive_DMA+0x1a>
 8005314:	88fb      	ldrh	r3, [r7, #6]
 8005316:	2b00      	cmp	r3, #0
 8005318:	d101      	bne.n	800531e <HAL_I2S_Receive_DMA+0x1e>
  {
    return  HAL_ERROR;
 800531a:	2301      	movs	r3, #1
 800531c:	e0a1      	b.n	8005462 <HAL_I2S_Receive_DMA+0x162>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005324:	b2db      	uxtb	r3, r3
 8005326:	2b01      	cmp	r3, #1
 8005328:	d101      	bne.n	800532e <HAL_I2S_Receive_DMA+0x2e>
 800532a:	2302      	movs	r3, #2
 800532c:	e099      	b.n	8005462 <HAL_I2S_Receive_DMA+0x162>
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	2201      	movs	r2, #1
 8005332:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if (hi2s->State != HAL_I2S_STATE_READY)
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800533c:	b2db      	uxtb	r3, r3
 800533e:	2b01      	cmp	r3, #1
 8005340:	d005      	beq.n	800534e <HAL_I2S_Receive_DMA+0x4e>
  {
    __HAL_UNLOCK(hi2s);
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	2200      	movs	r2, #0
 8005346:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    return HAL_BUSY;
 800534a:	2302      	movs	r3, #2
 800534c:	e089      	b.n	8005462 <HAL_I2S_Receive_DMA+0x162>
  }

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_RX;
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	2204      	movs	r2, #4
 8005352:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	2200      	movs	r2, #0
 800535a:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->pRxBuffPtr = pData;
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	68ba      	ldr	r2, [r7, #8]
 8005360:	62da      	str	r2, [r3, #44]	; 0x2c

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	69db      	ldr	r3, [r3, #28]
 8005368:	f003 0307 	and.w	r3, r3, #7
 800536c:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 800536e:	697b      	ldr	r3, [r7, #20]
 8005370:	2b03      	cmp	r3, #3
 8005372:	d002      	beq.n	800537a <HAL_I2S_Receive_DMA+0x7a>
 8005374:	697b      	ldr	r3, [r7, #20]
 8005376:	2b05      	cmp	r3, #5
 8005378:	d10a      	bne.n	8005390 <HAL_I2S_Receive_DMA+0x90>
  {
    hi2s->RxXferSize = (Size << 1U);
 800537a:	88fb      	ldrh	r3, [r7, #6]
 800537c:	005b      	lsls	r3, r3, #1
 800537e:	b29a      	uxth	r2, r3
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	861a      	strh	r2, [r3, #48]	; 0x30
    hi2s->RxXferCount = (Size << 1U);
 8005384:	88fb      	ldrh	r3, [r7, #6]
 8005386:	005b      	lsls	r3, r3, #1
 8005388:	b29a      	uxth	r2, r3
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	865a      	strh	r2, [r3, #50]	; 0x32
 800538e:	e005      	b.n	800539c <HAL_I2S_Receive_DMA+0x9c>
  }
  else
  {
    hi2s->RxXferSize = Size;
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	88fa      	ldrh	r2, [r7, #6]
 8005394:	861a      	strh	r2, [r3, #48]	; 0x30
    hi2s->RxXferCount = Size;
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	88fa      	ldrh	r2, [r7, #6]
 800539a:	865a      	strh	r2, [r3, #50]	; 0x32
  }

  /* Set the I2S Rx DMA Half transfer complete callback */
  hi2s->hdmarx->XferHalfCpltCallback = I2S_DMARxHalfCplt;
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053a0:	4a32      	ldr	r2, [pc, #200]	; (800546c <HAL_I2S_Receive_DMA+0x16c>)
 80053a2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the I2S Rx DMA transfer complete callback */
  hi2s->hdmarx->XferCpltCallback = I2S_DMARxCplt;
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053a8:	4a31      	ldr	r2, [pc, #196]	; (8005470 <HAL_I2S_Receive_DMA+0x170>)
 80053aa:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hi2s->hdmarx->XferErrorCallback = I2S_DMAError;
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053b0:	4a30      	ldr	r2, [pc, #192]	; (8005474 <HAL_I2S_Receive_DMA+0x174>)
 80053b2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Check if Master Receiver mode is selected */
  if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_RX)
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	69db      	ldr	r3, [r3, #28]
 80053ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80053be:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80053c2:	d10a      	bne.n	80053da <HAL_I2S_Receive_DMA+0xda>
  {
    /* Clear the Overrun Flag by a read operation to the SPI_DR register followed by a read
    access to the SPI_SR register. */
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80053c4:	2300      	movs	r3, #0
 80053c6:	613b      	str	r3, [r7, #16]
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	68db      	ldr	r3, [r3, #12]
 80053ce:	613b      	str	r3, [r7, #16]
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	689b      	ldr	r3, [r3, #8]
 80053d6:	613b      	str	r3, [r7, #16]
 80053d8:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the Rx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, (uint32_t)hi2s->pRxBuffPtr,
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	330c      	adds	r3, #12
 80053e4:	4619      	mov	r1, r3
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053ea:	461a      	mov	r2, r3
                                 hi2s->RxXferSize))
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 80053f0:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, (uint32_t)hi2s->pRxBuffPtr,
 80053f2:	f7fd ff03 	bl	80031fc <HAL_DMA_Start_IT>
 80053f6:	4603      	mov	r3, r0
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d00f      	beq.n	800541c <HAL_I2S_Receive_DMA+0x11c>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005400:	f043 0208 	orr.w	r2, r3, #8
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	645a      	str	r2, [r3, #68]	; 0x44
    hi2s->State = HAL_I2S_STATE_READY;
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	2201      	movs	r2, #1
 800540c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    __HAL_UNLOCK(hi2s);
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	2200      	movs	r2, #0
 8005414:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    return HAL_ERROR;
 8005418:	2301      	movs	r3, #1
 800541a:	e022      	b.n	8005462 <HAL_I2S_Receive_DMA+0x162>
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	69db      	ldr	r3, [r3, #28]
 8005422:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005426:	2b00      	cmp	r3, #0
 8005428:	d107      	bne.n	800543a <HAL_I2S_Receive_DMA+0x13a>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	69da      	ldr	r2, [r3, #28]
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005438:	61da      	str	r2, [r3, #28]
  }

  /* Check if the I2S Rx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_RXDMAEN))
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	685b      	ldr	r3, [r3, #4]
 8005440:	f003 0301 	and.w	r3, r3, #1
 8005444:	2b00      	cmp	r3, #0
 8005446:	d107      	bne.n	8005458 <HAL_I2S_Receive_DMA+0x158>
  {
    /* Enable Rx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	685a      	ldr	r2, [r3, #4]
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	f042 0201 	orr.w	r2, r2, #1
 8005456:	605a      	str	r2, [r3, #4]
  }

  __HAL_UNLOCK(hi2s);
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	2200      	movs	r2, #0
 800545c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  return HAL_OK;
 8005460:	2300      	movs	r3, #0
}
 8005462:	4618      	mov	r0, r3
 8005464:	3718      	adds	r7, #24
 8005466:	46bd      	mov	sp, r7
 8005468:	bd80      	pop	{r7, pc}
 800546a:	bf00      	nop
 800546c:	080054e7 	.word	0x080054e7
 8005470:	080054a5 	.word	0x080054a5
 8005474:	08005503 	.word	0x08005503

08005478 <HAL_I2S_IRQHandler>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
void HAL_I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8005478:	b580      	push	{r7, lr}
 800547a:	b082      	sub	sp, #8
 800547c:	af00      	add	r7, sp, #0
 800547e:	6078      	str	r0, [r7, #4]
  /* Call the IrqHandler ISR set during HAL_I2S_INIT */
  hi2s->IrqHandlerISR(hi2s);
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005484:	6878      	ldr	r0, [r7, #4]
 8005486:	4798      	blx	r3
}
 8005488:	bf00      	nop
 800548a:	3708      	adds	r7, #8
 800548c:	46bd      	mov	sp, r7
 800548e:	bd80      	pop	{r7, pc}

08005490 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8005490:	b480      	push	{r7}
 8005492:	b083      	sub	sp, #12
 8005494:	af00      	add	r7, sp, #0
 8005496:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8005498:	bf00      	nop
 800549a:	370c      	adds	r7, #12
 800549c:	46bd      	mov	sp, r7
 800549e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a2:	4770      	bx	lr

080054a4 <I2S_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 80054a4:	b580      	push	{r7, lr}
 80054a6:	b084      	sub	sp, #16
 80054a8:	af00      	add	r7, sp, #0
 80054aa:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054b0:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	69db      	ldr	r3, [r3, #28]
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d10e      	bne.n	80054d8 <I2S_DMARxCplt+0x34>
  {
    /* Disable Rx DMA Request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	685a      	ldr	r2, [r3, #4]
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	f022 0201 	bic.w	r2, r2, #1
 80054c8:	605a      	str	r2, [r3, #4]
    hi2s->RxXferCount = 0U;
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	2200      	movs	r2, #0
 80054ce:	865a      	strh	r2, [r3, #50]	; 0x32
    hi2s->State = HAL_I2S_STATE_READY;
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	2201      	movs	r2, #1
 80054d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }
  /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->RxCpltCallback(hi2s);
#else
  HAL_I2S_RxCpltCallback(hi2s);
 80054d8:	68f8      	ldr	r0, [r7, #12]
 80054da:	f7fc ffed 	bl	80024b8 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 80054de:	bf00      	nop
 80054e0:	3710      	adds	r7, #16
 80054e2:	46bd      	mov	sp, r7
 80054e4:	bd80      	pop	{r7, pc}

080054e6 <I2S_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80054e6:	b580      	push	{r7, lr}
 80054e8:	b084      	sub	sp, #16
 80054ea:	af00      	add	r7, sp, #0
 80054ec:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054f2:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->RxHalfCpltCallback(hi2s);
#else
  HAL_I2S_RxHalfCpltCallback(hi2s);
 80054f4:	68f8      	ldr	r0, [r7, #12]
 80054f6:	f7fc ffcf 	bl	8002498 <HAL_I2S_RxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 80054fa:	bf00      	nop
 80054fc:	3710      	adds	r7, #16
 80054fe:	46bd      	mov	sp, r7
 8005500:	bd80      	pop	{r7, pc}

08005502 <I2S_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
 8005502:	b580      	push	{r7, lr}
 8005504:	b084      	sub	sp, #16
 8005506:	af00      	add	r7, sp, #0
 8005508:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800550e:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	685a      	ldr	r2, [r3, #4]
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	f022 0203 	bic.w	r2, r2, #3
 800551e:	605a      	str	r2, [r3, #4]
  hi2s->TxXferCount = 0U;
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	2200      	movs	r2, #0
 8005524:	855a      	strh	r2, [r3, #42]	; 0x2a
  hi2s->RxXferCount = 0U;
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	2200      	movs	r2, #0
 800552a:	865a      	strh	r2, [r3, #50]	; 0x32

  hi2s->State = HAL_I2S_STATE_READY;
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	2201      	movs	r2, #1
 8005530:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005538:	f043 0208 	orr.w	r2, r3, #8
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	645a      	str	r2, [r3, #68]	; 0x44
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 8005540:	68f8      	ldr	r0, [r7, #12]
 8005542:	f7ff ffa5 	bl	8005490 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8005546:	bf00      	nop
 8005548:	3710      	adds	r7, #16
 800554a:	46bd      	mov	sp, r7
 800554c:	bd80      	pop	{r7, pc}

0800554e <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 800554e:	b580      	push	{r7, lr}
 8005550:	b082      	sub	sp, #8
 8005552:	af00      	add	r7, sp, #0
 8005554:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800555a:	881a      	ldrh	r2, [r3, #0]
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005566:	1c9a      	adds	r2, r3, #2
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005570:	b29b      	uxth	r3, r3
 8005572:	3b01      	subs	r3, #1
 8005574:	b29a      	uxth	r2, r3
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800557e:	b29b      	uxth	r3, r3
 8005580:	2b00      	cmp	r3, #0
 8005582:	d10e      	bne.n	80055a2 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	685a      	ldr	r2, [r3, #4]
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005592:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	2201      	movs	r2, #1
 8005598:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 800559c:	6878      	ldr	r0, [r7, #4]
 800559e:	f7fc ff6b 	bl	8002478 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80055a2:	bf00      	nop
 80055a4:	3708      	adds	r7, #8
 80055a6:	46bd      	mov	sp, r7
 80055a8:	bd80      	pop	{r7, pc}

080055aa <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 80055aa:	b580      	push	{r7, lr}
 80055ac:	b082      	sub	sp, #8
 80055ae:	af00      	add	r7, sp, #0
 80055b0:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	68da      	ldr	r2, [r3, #12]
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055bc:	b292      	uxth	r2, r2
 80055be:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055c4:	1c9a      	adds	r2, r3, #2
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80055ce:	b29b      	uxth	r3, r3
 80055d0:	3b01      	subs	r3, #1
 80055d2:	b29a      	uxth	r2, r3
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80055dc:	b29b      	uxth	r3, r3
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d10e      	bne.n	8005600 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	685a      	ldr	r2, [r3, #4]
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80055f0:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	2201      	movs	r2, #1
 80055f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 80055fa:	6878      	ldr	r0, [r7, #4]
 80055fc:	f7fc ff5c 	bl	80024b8 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8005600:	bf00      	nop
 8005602:	3708      	adds	r7, #8
 8005604:	46bd      	mov	sp, r7
 8005606:	bd80      	pop	{r7, pc}

08005608 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8005608:	b580      	push	{r7, lr}
 800560a:	b086      	sub	sp, #24
 800560c:	af00      	add	r7, sp, #0
 800560e:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	689b      	ldr	r3, [r3, #8]
 8005616:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800561e:	b2db      	uxtb	r3, r3
 8005620:	2b04      	cmp	r3, #4
 8005622:	d13a      	bne.n	800569a <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8005624:	697b      	ldr	r3, [r7, #20]
 8005626:	f003 0301 	and.w	r3, r3, #1
 800562a:	2b01      	cmp	r3, #1
 800562c:	d109      	bne.n	8005642 <I2S_IRQHandler+0x3a>
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	685b      	ldr	r3, [r3, #4]
 8005634:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005638:	2b40      	cmp	r3, #64	; 0x40
 800563a:	d102      	bne.n	8005642 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 800563c:	6878      	ldr	r0, [r7, #4]
 800563e:	f7ff ffb4 	bl	80055aa <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8005642:	697b      	ldr	r3, [r7, #20]
 8005644:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005648:	2b40      	cmp	r3, #64	; 0x40
 800564a:	d126      	bne.n	800569a <I2S_IRQHandler+0x92>
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	685b      	ldr	r3, [r3, #4]
 8005652:	f003 0320 	and.w	r3, r3, #32
 8005656:	2b20      	cmp	r3, #32
 8005658:	d11f      	bne.n	800569a <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	685a      	ldr	r2, [r3, #4]
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005668:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 800566a:	2300      	movs	r3, #0
 800566c:	613b      	str	r3, [r7, #16]
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	68db      	ldr	r3, [r3, #12]
 8005674:	613b      	str	r3, [r7, #16]
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	689b      	ldr	r3, [r3, #8]
 800567c:	613b      	str	r3, [r7, #16]
 800567e:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	2201      	movs	r2, #1
 8005684:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800568c:	f043 0202 	orr.w	r2, r3, #2
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005694:	6878      	ldr	r0, [r7, #4]
 8005696:	f7ff fefb 	bl	8005490 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80056a0:	b2db      	uxtb	r3, r3
 80056a2:	2b03      	cmp	r3, #3
 80056a4:	d136      	bne.n	8005714 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 80056a6:	697b      	ldr	r3, [r7, #20]
 80056a8:	f003 0302 	and.w	r3, r3, #2
 80056ac:	2b02      	cmp	r3, #2
 80056ae:	d109      	bne.n	80056c4 <I2S_IRQHandler+0xbc>
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	685b      	ldr	r3, [r3, #4]
 80056b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80056ba:	2b80      	cmp	r3, #128	; 0x80
 80056bc:	d102      	bne.n	80056c4 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 80056be:	6878      	ldr	r0, [r7, #4]
 80056c0:	f7ff ff45 	bl	800554e <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80056c4:	697b      	ldr	r3, [r7, #20]
 80056c6:	f003 0308 	and.w	r3, r3, #8
 80056ca:	2b08      	cmp	r3, #8
 80056cc:	d122      	bne.n	8005714 <I2S_IRQHandler+0x10c>
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	685b      	ldr	r3, [r3, #4]
 80056d4:	f003 0320 	and.w	r3, r3, #32
 80056d8:	2b20      	cmp	r3, #32
 80056da:	d11b      	bne.n	8005714 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	685a      	ldr	r2, [r3, #4]
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80056ea:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80056ec:	2300      	movs	r3, #0
 80056ee:	60fb      	str	r3, [r7, #12]
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	689b      	ldr	r3, [r3, #8]
 80056f6:	60fb      	str	r3, [r7, #12]
 80056f8:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	2201      	movs	r2, #1
 80056fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005706:	f043 0204 	orr.w	r2, r3, #4
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800570e:	6878      	ldr	r0, [r7, #4]
 8005710:	f7ff febe 	bl	8005490 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005714:	bf00      	nop
 8005716:	3718      	adds	r7, #24
 8005718:	46bd      	mov	sp, r7
 800571a:	bd80      	pop	{r7, pc}

0800571c <I2S_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef I2S_WaitFlagStateUntilTimeout(I2S_HandleTypeDef *hi2s, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout)
{
 800571c:	b580      	push	{r7, lr}
 800571e:	b086      	sub	sp, #24
 8005720:	af00      	add	r7, sp, #0
 8005722:	60f8      	str	r0, [r7, #12]
 8005724:	60b9      	str	r1, [r7, #8]
 8005726:	603b      	str	r3, [r7, #0]
 8005728:	4613      	mov	r3, r2
 800572a:	71fb      	strb	r3, [r7, #7]
  uint32_t tickstart;

  /* Get tick */
  tickstart = HAL_GetTick();
 800572c:	f7fd f9b2 	bl	8002a94 <HAL_GetTick>
 8005730:	6178      	str	r0, [r7, #20]

  /* Wait until flag is set to status*/
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 8005732:	e018      	b.n	8005766 <I2S_WaitFlagStateUntilTimeout+0x4a>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005734:	683b      	ldr	r3, [r7, #0]
 8005736:	f1b3 3fff 	cmp.w	r3, #4294967295
 800573a:	d014      	beq.n	8005766 <I2S_WaitFlagStateUntilTimeout+0x4a>
    {
      if (((HAL_GetTick() - tickstart) >= Timeout) || (Timeout == 0U))
 800573c:	f7fd f9aa 	bl	8002a94 <HAL_GetTick>
 8005740:	4602      	mov	r2, r0
 8005742:	697b      	ldr	r3, [r7, #20]
 8005744:	1ad3      	subs	r3, r2, r3
 8005746:	683a      	ldr	r2, [r7, #0]
 8005748:	429a      	cmp	r2, r3
 800574a:	d902      	bls.n	8005752 <I2S_WaitFlagStateUntilTimeout+0x36>
 800574c:	683b      	ldr	r3, [r7, #0]
 800574e:	2b00      	cmp	r3, #0
 8005750:	d109      	bne.n	8005766 <I2S_WaitFlagStateUntilTimeout+0x4a>
      {
        /* Set the I2S State ready */
        hi2s->State = HAL_I2S_STATE_READY;
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	2201      	movs	r2, #1
 8005756:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2s);
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	2200      	movs	r2, #0
 800575e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8005762:	2303      	movs	r3, #3
 8005764:	e00f      	b.n	8005786 <I2S_WaitFlagStateUntilTimeout+0x6a>
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	689a      	ldr	r2, [r3, #8]
 800576c:	68bb      	ldr	r3, [r7, #8]
 800576e:	4013      	ands	r3, r2
 8005770:	68ba      	ldr	r2, [r7, #8]
 8005772:	429a      	cmp	r2, r3
 8005774:	bf0c      	ite	eq
 8005776:	2301      	moveq	r3, #1
 8005778:	2300      	movne	r3, #0
 800577a:	b2db      	uxtb	r3, r3
 800577c:	461a      	mov	r2, r3
 800577e:	79fb      	ldrb	r3, [r7, #7]
 8005780:	429a      	cmp	r2, r3
 8005782:	d1d7      	bne.n	8005734 <I2S_WaitFlagStateUntilTimeout+0x18>
      }
    }
  }
  return HAL_OK;
 8005784:	2300      	movs	r3, #0
}
 8005786:	4618      	mov	r0, r3
 8005788:	3718      	adds	r7, #24
 800578a:	46bd      	mov	sp, r7
 800578c:	bd80      	pop	{r7, pc}
	...

08005790 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8005790:	b580      	push	{r7, lr}
 8005792:	b088      	sub	sp, #32
 8005794:	af00      	add	r7, sp, #0
 8005796:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	689b      	ldr	r3, [r3, #8]
 800579e:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	4aa2      	ldr	r2, [pc, #648]	; (8005a30 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80057a6:	4293      	cmp	r3, r2
 80057a8:	d101      	bne.n	80057ae <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 80057aa:	4ba2      	ldr	r3, [pc, #648]	; (8005a34 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80057ac:	e001      	b.n	80057b2 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 80057ae:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80057b2:	689b      	ldr	r3, [r3, #8]
 80057b4:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	685b      	ldr	r3, [r3, #4]
 80057bc:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	4a9b      	ldr	r2, [pc, #620]	; (8005a30 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80057c4:	4293      	cmp	r3, r2
 80057c6:	d101      	bne.n	80057cc <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 80057c8:	4b9a      	ldr	r3, [pc, #616]	; (8005a34 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80057ca:	e001      	b.n	80057d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 80057cc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80057d0:	685b      	ldr	r3, [r3, #4]
 80057d2:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	685b      	ldr	r3, [r3, #4]
 80057d8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80057dc:	d004      	beq.n	80057e8 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	685b      	ldr	r3, [r3, #4]
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	f040 8099 	bne.w	800591a <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 80057e8:	69fb      	ldr	r3, [r7, #28]
 80057ea:	f003 0302 	and.w	r3, r3, #2
 80057ee:	2b02      	cmp	r3, #2
 80057f0:	d107      	bne.n	8005802 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 80057f2:	697b      	ldr	r3, [r7, #20]
 80057f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d002      	beq.n	8005802 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 80057fc:	6878      	ldr	r0, [r7, #4]
 80057fe:	f000 f925 	bl	8005a4c <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8005802:	69bb      	ldr	r3, [r7, #24]
 8005804:	f003 0301 	and.w	r3, r3, #1
 8005808:	2b01      	cmp	r3, #1
 800580a:	d107      	bne.n	800581c <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 800580c:	693b      	ldr	r3, [r7, #16]
 800580e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005812:	2b00      	cmp	r3, #0
 8005814:	d002      	beq.n	800581c <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8005816:	6878      	ldr	r0, [r7, #4]
 8005818:	f000 f9c8 	bl	8005bac <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 800581c:	69bb      	ldr	r3, [r7, #24]
 800581e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005822:	2b40      	cmp	r3, #64	; 0x40
 8005824:	d13a      	bne.n	800589c <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8005826:	693b      	ldr	r3, [r7, #16]
 8005828:	f003 0320 	and.w	r3, r3, #32
 800582c:	2b00      	cmp	r3, #0
 800582e:	d035      	beq.n	800589c <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	4a7e      	ldr	r2, [pc, #504]	; (8005a30 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8005836:	4293      	cmp	r3, r2
 8005838:	d101      	bne.n	800583e <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 800583a:	4b7e      	ldr	r3, [pc, #504]	; (8005a34 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800583c:	e001      	b.n	8005842 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 800583e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005842:	685a      	ldr	r2, [r3, #4]
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	4979      	ldr	r1, [pc, #484]	; (8005a30 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800584a:	428b      	cmp	r3, r1
 800584c:	d101      	bne.n	8005852 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 800584e:	4b79      	ldr	r3, [pc, #484]	; (8005a34 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8005850:	e001      	b.n	8005856 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8005852:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005856:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800585a:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	685a      	ldr	r2, [r3, #4]
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800586a:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 800586c:	2300      	movs	r3, #0
 800586e:	60fb      	str	r3, [r7, #12]
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	68db      	ldr	r3, [r3, #12]
 8005876:	60fb      	str	r3, [r7, #12]
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	689b      	ldr	r3, [r3, #8]
 800587e:	60fb      	str	r3, [r7, #12]
 8005880:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	2201      	movs	r2, #1
 8005886:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800588e:	f043 0202 	orr.w	r2, r3, #2
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005896:	6878      	ldr	r0, [r7, #4]
 8005898:	f7ff fdfa 	bl	8005490 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800589c:	69fb      	ldr	r3, [r7, #28]
 800589e:	f003 0308 	and.w	r3, r3, #8
 80058a2:	2b08      	cmp	r3, #8
 80058a4:	f040 80be 	bne.w	8005a24 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 80058a8:	697b      	ldr	r3, [r7, #20]
 80058aa:	f003 0320 	and.w	r3, r3, #32
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	f000 80b8 	beq.w	8005a24 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	685a      	ldr	r2, [r3, #4]
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80058c2:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	4a59      	ldr	r2, [pc, #356]	; (8005a30 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80058ca:	4293      	cmp	r3, r2
 80058cc:	d101      	bne.n	80058d2 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 80058ce:	4b59      	ldr	r3, [pc, #356]	; (8005a34 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80058d0:	e001      	b.n	80058d6 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 80058d2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80058d6:	685a      	ldr	r2, [r3, #4]
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	4954      	ldr	r1, [pc, #336]	; (8005a30 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80058de:	428b      	cmp	r3, r1
 80058e0:	d101      	bne.n	80058e6 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 80058e2:	4b54      	ldr	r3, [pc, #336]	; (8005a34 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80058e4:	e001      	b.n	80058ea <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 80058e6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80058ea:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80058ee:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80058f0:	2300      	movs	r3, #0
 80058f2:	60bb      	str	r3, [r7, #8]
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	689b      	ldr	r3, [r3, #8]
 80058fa:	60bb      	str	r3, [r7, #8]
 80058fc:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	2201      	movs	r2, #1
 8005902:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800590a:	f043 0204 	orr.w	r2, r3, #4
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005912:	6878      	ldr	r0, [r7, #4]
 8005914:	f7ff fdbc 	bl	8005490 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8005918:	e084      	b.n	8005a24 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 800591a:	69bb      	ldr	r3, [r7, #24]
 800591c:	f003 0302 	and.w	r3, r3, #2
 8005920:	2b02      	cmp	r3, #2
 8005922:	d107      	bne.n	8005934 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8005924:	693b      	ldr	r3, [r7, #16]
 8005926:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800592a:	2b00      	cmp	r3, #0
 800592c:	d002      	beq.n	8005934 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 800592e:	6878      	ldr	r0, [r7, #4]
 8005930:	f000 f8be 	bl	8005ab0 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8005934:	69fb      	ldr	r3, [r7, #28]
 8005936:	f003 0301 	and.w	r3, r3, #1
 800593a:	2b01      	cmp	r3, #1
 800593c:	d107      	bne.n	800594e <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 800593e:	697b      	ldr	r3, [r7, #20]
 8005940:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005944:	2b00      	cmp	r3, #0
 8005946:	d002      	beq.n	800594e <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8005948:	6878      	ldr	r0, [r7, #4]
 800594a:	f000 f8fd 	bl	8005b48 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800594e:	69fb      	ldr	r3, [r7, #28]
 8005950:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005954:	2b40      	cmp	r3, #64	; 0x40
 8005956:	d12f      	bne.n	80059b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8005958:	697b      	ldr	r3, [r7, #20]
 800595a:	f003 0320 	and.w	r3, r3, #32
 800595e:	2b00      	cmp	r3, #0
 8005960:	d02a      	beq.n	80059b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	685a      	ldr	r2, [r3, #4]
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005970:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	4a2e      	ldr	r2, [pc, #184]	; (8005a30 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8005978:	4293      	cmp	r3, r2
 800597a:	d101      	bne.n	8005980 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 800597c:	4b2d      	ldr	r3, [pc, #180]	; (8005a34 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800597e:	e001      	b.n	8005984 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8005980:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005984:	685a      	ldr	r2, [r3, #4]
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	4929      	ldr	r1, [pc, #164]	; (8005a30 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800598c:	428b      	cmp	r3, r1
 800598e:	d101      	bne.n	8005994 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8005990:	4b28      	ldr	r3, [pc, #160]	; (8005a34 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8005992:	e001      	b.n	8005998 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8005994:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005998:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800599c:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	2201      	movs	r2, #1
 80059a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80059aa:	f043 0202 	orr.w	r2, r3, #2
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80059b2:	6878      	ldr	r0, [r7, #4]
 80059b4:	f7ff fd6c 	bl	8005490 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80059b8:	69bb      	ldr	r3, [r7, #24]
 80059ba:	f003 0308 	and.w	r3, r3, #8
 80059be:	2b08      	cmp	r3, #8
 80059c0:	d131      	bne.n	8005a26 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 80059c2:	693b      	ldr	r3, [r7, #16]
 80059c4:	f003 0320 	and.w	r3, r3, #32
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d02c      	beq.n	8005a26 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	4a17      	ldr	r2, [pc, #92]	; (8005a30 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80059d2:	4293      	cmp	r3, r2
 80059d4:	d101      	bne.n	80059da <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 80059d6:	4b17      	ldr	r3, [pc, #92]	; (8005a34 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80059d8:	e001      	b.n	80059de <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 80059da:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80059de:	685a      	ldr	r2, [r3, #4]
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	4912      	ldr	r1, [pc, #72]	; (8005a30 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80059e6:	428b      	cmp	r3, r1
 80059e8:	d101      	bne.n	80059ee <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 80059ea:	4b12      	ldr	r3, [pc, #72]	; (8005a34 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80059ec:	e001      	b.n	80059f2 <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 80059ee:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80059f2:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80059f6:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	685a      	ldr	r2, [r3, #4]
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005a06:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	2201      	movs	r2, #1
 8005a0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a14:	f043 0204 	orr.w	r2, r3, #4
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005a1c:	6878      	ldr	r0, [r7, #4]
 8005a1e:	f7ff fd37 	bl	8005490 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005a22:	e000      	b.n	8005a26 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8005a24:	bf00      	nop
}
 8005a26:	bf00      	nop
 8005a28:	3720      	adds	r7, #32
 8005a2a:	46bd      	mov	sp, r7
 8005a2c:	bd80      	pop	{r7, pc}
 8005a2e:	bf00      	nop
 8005a30:	40003800 	.word	0x40003800
 8005a34:	40003400 	.word	0x40003400

08005a38 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8005a38:	b480      	push	{r7}
 8005a3a:	b083      	sub	sp, #12
 8005a3c:	af00      	add	r7, sp, #0
 8005a3e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8005a40:	bf00      	nop
 8005a42:	370c      	adds	r7, #12
 8005a44:	46bd      	mov	sp, r7
 8005a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a4a:	4770      	bx	lr

08005a4c <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8005a4c:	b580      	push	{r7, lr}
 8005a4e:	b082      	sub	sp, #8
 8005a50:	af00      	add	r7, sp, #0
 8005a52:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a58:	1c99      	adds	r1, r3, #2
 8005a5a:	687a      	ldr	r2, [r7, #4]
 8005a5c:	6251      	str	r1, [r2, #36]	; 0x24
 8005a5e:	881a      	ldrh	r2, [r3, #0]
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a6a:	b29b      	uxth	r3, r3
 8005a6c:	3b01      	subs	r3, #1
 8005a6e:	b29a      	uxth	r2, r3
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a78:	b29b      	uxth	r3, r3
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d113      	bne.n	8005aa6 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	685a      	ldr	r2, [r3, #4]
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005a8c:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005a92:	b29b      	uxth	r3, r3
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d106      	bne.n	8005aa6 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	2201      	movs	r2, #1
 8005a9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8005aa0:	6878      	ldr	r0, [r7, #4]
 8005aa2:	f7ff ffc9 	bl	8005a38 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005aa6:	bf00      	nop
 8005aa8:	3708      	adds	r7, #8
 8005aaa:	46bd      	mov	sp, r7
 8005aac:	bd80      	pop	{r7, pc}
	...

08005ab0 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8005ab0:	b580      	push	{r7, lr}
 8005ab2:	b082      	sub	sp, #8
 8005ab4:	af00      	add	r7, sp, #0
 8005ab6:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005abc:	1c99      	adds	r1, r3, #2
 8005abe:	687a      	ldr	r2, [r7, #4]
 8005ac0:	6251      	str	r1, [r2, #36]	; 0x24
 8005ac2:	8819      	ldrh	r1, [r3, #0]
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	4a1d      	ldr	r2, [pc, #116]	; (8005b40 <I2SEx_TxISR_I2SExt+0x90>)
 8005aca:	4293      	cmp	r3, r2
 8005acc:	d101      	bne.n	8005ad2 <I2SEx_TxISR_I2SExt+0x22>
 8005ace:	4b1d      	ldr	r3, [pc, #116]	; (8005b44 <I2SEx_TxISR_I2SExt+0x94>)
 8005ad0:	e001      	b.n	8005ad6 <I2SEx_TxISR_I2SExt+0x26>
 8005ad2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005ad6:	460a      	mov	r2, r1
 8005ad8:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ade:	b29b      	uxth	r3, r3
 8005ae0:	3b01      	subs	r3, #1
 8005ae2:	b29a      	uxth	r2, r3
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005aec:	b29b      	uxth	r3, r3
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d121      	bne.n	8005b36 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	4a12      	ldr	r2, [pc, #72]	; (8005b40 <I2SEx_TxISR_I2SExt+0x90>)
 8005af8:	4293      	cmp	r3, r2
 8005afa:	d101      	bne.n	8005b00 <I2SEx_TxISR_I2SExt+0x50>
 8005afc:	4b11      	ldr	r3, [pc, #68]	; (8005b44 <I2SEx_TxISR_I2SExt+0x94>)
 8005afe:	e001      	b.n	8005b04 <I2SEx_TxISR_I2SExt+0x54>
 8005b00:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005b04:	685a      	ldr	r2, [r3, #4]
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	490d      	ldr	r1, [pc, #52]	; (8005b40 <I2SEx_TxISR_I2SExt+0x90>)
 8005b0c:	428b      	cmp	r3, r1
 8005b0e:	d101      	bne.n	8005b14 <I2SEx_TxISR_I2SExt+0x64>
 8005b10:	4b0c      	ldr	r3, [pc, #48]	; (8005b44 <I2SEx_TxISR_I2SExt+0x94>)
 8005b12:	e001      	b.n	8005b18 <I2SEx_TxISR_I2SExt+0x68>
 8005b14:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005b18:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005b1c:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005b22:	b29b      	uxth	r3, r3
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d106      	bne.n	8005b36 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	2201      	movs	r2, #1
 8005b2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8005b30:	6878      	ldr	r0, [r7, #4]
 8005b32:	f7ff ff81 	bl	8005a38 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005b36:	bf00      	nop
 8005b38:	3708      	adds	r7, #8
 8005b3a:	46bd      	mov	sp, r7
 8005b3c:	bd80      	pop	{r7, pc}
 8005b3e:	bf00      	nop
 8005b40:	40003800 	.word	0x40003800
 8005b44:	40003400 	.word	0x40003400

08005b48 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8005b48:	b580      	push	{r7, lr}
 8005b4a:	b082      	sub	sp, #8
 8005b4c:	af00      	add	r7, sp, #0
 8005b4e:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	68d8      	ldr	r0, [r3, #12]
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b5a:	1c99      	adds	r1, r3, #2
 8005b5c:	687a      	ldr	r2, [r7, #4]
 8005b5e:	62d1      	str	r1, [r2, #44]	; 0x2c
 8005b60:	b282      	uxth	r2, r0
 8005b62:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005b68:	b29b      	uxth	r3, r3
 8005b6a:	3b01      	subs	r3, #1
 8005b6c:	b29a      	uxth	r2, r3
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005b76:	b29b      	uxth	r3, r3
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d113      	bne.n	8005ba4 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	685a      	ldr	r2, [r3, #4]
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005b8a:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b90:	b29b      	uxth	r3, r3
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d106      	bne.n	8005ba4 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	2201      	movs	r2, #1
 8005b9a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8005b9e:	6878      	ldr	r0, [r7, #4]
 8005ba0:	f7ff ff4a 	bl	8005a38 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005ba4:	bf00      	nop
 8005ba6:	3708      	adds	r7, #8
 8005ba8:	46bd      	mov	sp, r7
 8005baa:	bd80      	pop	{r7, pc}

08005bac <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8005bac:	b580      	push	{r7, lr}
 8005bae:	b082      	sub	sp, #8
 8005bb0:	af00      	add	r7, sp, #0
 8005bb2:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	4a20      	ldr	r2, [pc, #128]	; (8005c3c <I2SEx_RxISR_I2SExt+0x90>)
 8005bba:	4293      	cmp	r3, r2
 8005bbc:	d101      	bne.n	8005bc2 <I2SEx_RxISR_I2SExt+0x16>
 8005bbe:	4b20      	ldr	r3, [pc, #128]	; (8005c40 <I2SEx_RxISR_I2SExt+0x94>)
 8005bc0:	e001      	b.n	8005bc6 <I2SEx_RxISR_I2SExt+0x1a>
 8005bc2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005bc6:	68d8      	ldr	r0, [r3, #12]
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bcc:	1c99      	adds	r1, r3, #2
 8005bce:	687a      	ldr	r2, [r7, #4]
 8005bd0:	62d1      	str	r1, [r2, #44]	; 0x2c
 8005bd2:	b282      	uxth	r2, r0
 8005bd4:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005bda:	b29b      	uxth	r3, r3
 8005bdc:	3b01      	subs	r3, #1
 8005bde:	b29a      	uxth	r2, r3
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005be8:	b29b      	uxth	r3, r3
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d121      	bne.n	8005c32 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	4a12      	ldr	r2, [pc, #72]	; (8005c3c <I2SEx_RxISR_I2SExt+0x90>)
 8005bf4:	4293      	cmp	r3, r2
 8005bf6:	d101      	bne.n	8005bfc <I2SEx_RxISR_I2SExt+0x50>
 8005bf8:	4b11      	ldr	r3, [pc, #68]	; (8005c40 <I2SEx_RxISR_I2SExt+0x94>)
 8005bfa:	e001      	b.n	8005c00 <I2SEx_RxISR_I2SExt+0x54>
 8005bfc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005c00:	685a      	ldr	r2, [r3, #4]
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	490d      	ldr	r1, [pc, #52]	; (8005c3c <I2SEx_RxISR_I2SExt+0x90>)
 8005c08:	428b      	cmp	r3, r1
 8005c0a:	d101      	bne.n	8005c10 <I2SEx_RxISR_I2SExt+0x64>
 8005c0c:	4b0c      	ldr	r3, [pc, #48]	; (8005c40 <I2SEx_RxISR_I2SExt+0x94>)
 8005c0e:	e001      	b.n	8005c14 <I2SEx_RxISR_I2SExt+0x68>
 8005c10:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005c14:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005c18:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c1e:	b29b      	uxth	r3, r3
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d106      	bne.n	8005c32 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	2201      	movs	r2, #1
 8005c28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8005c2c:	6878      	ldr	r0, [r7, #4]
 8005c2e:	f7ff ff03 	bl	8005a38 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005c32:	bf00      	nop
 8005c34:	3708      	adds	r7, #8
 8005c36:	46bd      	mov	sp, r7
 8005c38:	bd80      	pop	{r7, pc}
 8005c3a:	bf00      	nop
 8005c3c:	40003800 	.word	0x40003800
 8005c40:	40003400 	.word	0x40003400

08005c44 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8005c44:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005c46:	b08f      	sub	sp, #60	; 0x3c
 8005c48:	af0a      	add	r7, sp, #40	; 0x28
 8005c4a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d101      	bne.n	8005c56 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8005c52:	2301      	movs	r3, #1
 8005c54:	e118      	b.n	8005e88 <HAL_PCD_Init+0x244>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005c5e:	d003      	beq.n	8005c68 <HAL_PCD_Init+0x24>
 8005c60:	2187      	movs	r1, #135	; 0x87
 8005c62:	488b      	ldr	r0, [pc, #556]	; (8005e90 <HAL_PCD_Init+0x24c>)
 8005c64:	f7fc fc3f 	bl	80024e6 <assert_failed>

  USBx = hpcd->Instance;
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8005c74:	b2db      	uxtb	r3, r3
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d106      	bne.n	8005c88 <HAL_PCD_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	2200      	movs	r2, #0
 8005c7e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8005c82:	6878      	ldr	r0, [r7, #4]
 8005c84:	f006 feba 	bl	800c9fc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	2203      	movs	r2, #3
 8005c8c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8005c90:	68bb      	ldr	r3, [r7, #8]
 8005c92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d102      	bne.n	8005ca2 <HAL_PCD_Init+0x5e>
  {
    hpcd->Init.dma_enable = 0U;
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	2200      	movs	r2, #0
 8005ca0:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	4618      	mov	r0, r3
 8005ca8:	f003 feb3 	bl	8009a12 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	603b      	str	r3, [r7, #0]
 8005cb2:	687e      	ldr	r6, [r7, #4]
 8005cb4:	466d      	mov	r5, sp
 8005cb6:	f106 0410 	add.w	r4, r6, #16
 8005cba:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005cbc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005cbe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005cc0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005cc2:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005cc6:	e885 0003 	stmia.w	r5, {r0, r1}
 8005cca:	1d33      	adds	r3, r6, #4
 8005ccc:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005cce:	6838      	ldr	r0, [r7, #0]
 8005cd0:	f003 fd8a 	bl	80097e8 <USB_CoreInit>
 8005cd4:	4603      	mov	r3, r0
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d005      	beq.n	8005ce6 <HAL_PCD_Init+0xa2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	2202      	movs	r2, #2
 8005cde:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8005ce2:	2301      	movs	r3, #1
 8005ce4:	e0d0      	b.n	8005e88 <HAL_PCD_Init+0x244>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	2100      	movs	r1, #0
 8005cec:	4618      	mov	r0, r3
 8005cee:	f003 fea1 	bl	8009a34 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005cf2:	2300      	movs	r3, #0
 8005cf4:	73fb      	strb	r3, [r7, #15]
 8005cf6:	e04a      	b.n	8005d8e <HAL_PCD_Init+0x14a>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8005cf8:	7bfa      	ldrb	r2, [r7, #15]
 8005cfa:	6879      	ldr	r1, [r7, #4]
 8005cfc:	4613      	mov	r3, r2
 8005cfe:	00db      	lsls	r3, r3, #3
 8005d00:	1a9b      	subs	r3, r3, r2
 8005d02:	009b      	lsls	r3, r3, #2
 8005d04:	440b      	add	r3, r1
 8005d06:	333d      	adds	r3, #61	; 0x3d
 8005d08:	2201      	movs	r2, #1
 8005d0a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8005d0c:	7bfa      	ldrb	r2, [r7, #15]
 8005d0e:	6879      	ldr	r1, [r7, #4]
 8005d10:	4613      	mov	r3, r2
 8005d12:	00db      	lsls	r3, r3, #3
 8005d14:	1a9b      	subs	r3, r3, r2
 8005d16:	009b      	lsls	r3, r3, #2
 8005d18:	440b      	add	r3, r1
 8005d1a:	333c      	adds	r3, #60	; 0x3c
 8005d1c:	7bfa      	ldrb	r2, [r7, #15]
 8005d1e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8005d20:	7bfa      	ldrb	r2, [r7, #15]
 8005d22:	7bfb      	ldrb	r3, [r7, #15]
 8005d24:	b298      	uxth	r0, r3
 8005d26:	6879      	ldr	r1, [r7, #4]
 8005d28:	4613      	mov	r3, r2
 8005d2a:	00db      	lsls	r3, r3, #3
 8005d2c:	1a9b      	subs	r3, r3, r2
 8005d2e:	009b      	lsls	r3, r3, #2
 8005d30:	440b      	add	r3, r1
 8005d32:	3342      	adds	r3, #66	; 0x42
 8005d34:	4602      	mov	r2, r0
 8005d36:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8005d38:	7bfa      	ldrb	r2, [r7, #15]
 8005d3a:	6879      	ldr	r1, [r7, #4]
 8005d3c:	4613      	mov	r3, r2
 8005d3e:	00db      	lsls	r3, r3, #3
 8005d40:	1a9b      	subs	r3, r3, r2
 8005d42:	009b      	lsls	r3, r3, #2
 8005d44:	440b      	add	r3, r1
 8005d46:	333f      	adds	r3, #63	; 0x3f
 8005d48:	2200      	movs	r2, #0
 8005d4a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8005d4c:	7bfa      	ldrb	r2, [r7, #15]
 8005d4e:	6879      	ldr	r1, [r7, #4]
 8005d50:	4613      	mov	r3, r2
 8005d52:	00db      	lsls	r3, r3, #3
 8005d54:	1a9b      	subs	r3, r3, r2
 8005d56:	009b      	lsls	r3, r3, #2
 8005d58:	440b      	add	r3, r1
 8005d5a:	3344      	adds	r3, #68	; 0x44
 8005d5c:	2200      	movs	r2, #0
 8005d5e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8005d60:	7bfa      	ldrb	r2, [r7, #15]
 8005d62:	6879      	ldr	r1, [r7, #4]
 8005d64:	4613      	mov	r3, r2
 8005d66:	00db      	lsls	r3, r3, #3
 8005d68:	1a9b      	subs	r3, r3, r2
 8005d6a:	009b      	lsls	r3, r3, #2
 8005d6c:	440b      	add	r3, r1
 8005d6e:	3348      	adds	r3, #72	; 0x48
 8005d70:	2200      	movs	r2, #0
 8005d72:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8005d74:	7bfa      	ldrb	r2, [r7, #15]
 8005d76:	6879      	ldr	r1, [r7, #4]
 8005d78:	4613      	mov	r3, r2
 8005d7a:	00db      	lsls	r3, r3, #3
 8005d7c:	1a9b      	subs	r3, r3, r2
 8005d7e:	009b      	lsls	r3, r3, #2
 8005d80:	440b      	add	r3, r1
 8005d82:	3350      	adds	r3, #80	; 0x50
 8005d84:	2200      	movs	r2, #0
 8005d86:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005d88:	7bfb      	ldrb	r3, [r7, #15]
 8005d8a:	3301      	adds	r3, #1
 8005d8c:	73fb      	strb	r3, [r7, #15]
 8005d8e:	7bfa      	ldrb	r2, [r7, #15]
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	685b      	ldr	r3, [r3, #4]
 8005d94:	429a      	cmp	r2, r3
 8005d96:	d3af      	bcc.n	8005cf8 <HAL_PCD_Init+0xb4>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005d98:	2300      	movs	r3, #0
 8005d9a:	73fb      	strb	r3, [r7, #15]
 8005d9c:	e044      	b.n	8005e28 <HAL_PCD_Init+0x1e4>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8005d9e:	7bfa      	ldrb	r2, [r7, #15]
 8005da0:	6879      	ldr	r1, [r7, #4]
 8005da2:	4613      	mov	r3, r2
 8005da4:	00db      	lsls	r3, r3, #3
 8005da6:	1a9b      	subs	r3, r3, r2
 8005da8:	009b      	lsls	r3, r3, #2
 8005daa:	440b      	add	r3, r1
 8005dac:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8005db0:	2200      	movs	r2, #0
 8005db2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8005db4:	7bfa      	ldrb	r2, [r7, #15]
 8005db6:	6879      	ldr	r1, [r7, #4]
 8005db8:	4613      	mov	r3, r2
 8005dba:	00db      	lsls	r3, r3, #3
 8005dbc:	1a9b      	subs	r3, r3, r2
 8005dbe:	009b      	lsls	r3, r3, #2
 8005dc0:	440b      	add	r3, r1
 8005dc2:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8005dc6:	7bfa      	ldrb	r2, [r7, #15]
 8005dc8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8005dca:	7bfa      	ldrb	r2, [r7, #15]
 8005dcc:	6879      	ldr	r1, [r7, #4]
 8005dce:	4613      	mov	r3, r2
 8005dd0:	00db      	lsls	r3, r3, #3
 8005dd2:	1a9b      	subs	r3, r3, r2
 8005dd4:	009b      	lsls	r3, r3, #2
 8005dd6:	440b      	add	r3, r1
 8005dd8:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8005ddc:	2200      	movs	r2, #0
 8005dde:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8005de0:	7bfa      	ldrb	r2, [r7, #15]
 8005de2:	6879      	ldr	r1, [r7, #4]
 8005de4:	4613      	mov	r3, r2
 8005de6:	00db      	lsls	r3, r3, #3
 8005de8:	1a9b      	subs	r3, r3, r2
 8005dea:	009b      	lsls	r3, r3, #2
 8005dec:	440b      	add	r3, r1
 8005dee:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8005df2:	2200      	movs	r2, #0
 8005df4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8005df6:	7bfa      	ldrb	r2, [r7, #15]
 8005df8:	6879      	ldr	r1, [r7, #4]
 8005dfa:	4613      	mov	r3, r2
 8005dfc:	00db      	lsls	r3, r3, #3
 8005dfe:	1a9b      	subs	r3, r3, r2
 8005e00:	009b      	lsls	r3, r3, #2
 8005e02:	440b      	add	r3, r1
 8005e04:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8005e08:	2200      	movs	r2, #0
 8005e0a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8005e0c:	7bfa      	ldrb	r2, [r7, #15]
 8005e0e:	6879      	ldr	r1, [r7, #4]
 8005e10:	4613      	mov	r3, r2
 8005e12:	00db      	lsls	r3, r3, #3
 8005e14:	1a9b      	subs	r3, r3, r2
 8005e16:	009b      	lsls	r3, r3, #2
 8005e18:	440b      	add	r3, r1
 8005e1a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8005e1e:	2200      	movs	r2, #0
 8005e20:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005e22:	7bfb      	ldrb	r3, [r7, #15]
 8005e24:	3301      	adds	r3, #1
 8005e26:	73fb      	strb	r3, [r7, #15]
 8005e28:	7bfa      	ldrb	r2, [r7, #15]
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	685b      	ldr	r3, [r3, #4]
 8005e2e:	429a      	cmp	r2, r3
 8005e30:	d3b5      	bcc.n	8005d9e <HAL_PCD_Init+0x15a>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	603b      	str	r3, [r7, #0]
 8005e38:	687e      	ldr	r6, [r7, #4]
 8005e3a:	466d      	mov	r5, sp
 8005e3c:	f106 0410 	add.w	r4, r6, #16
 8005e40:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005e42:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005e44:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005e46:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005e48:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005e4c:	e885 0003 	stmia.w	r5, {r0, r1}
 8005e50:	1d33      	adds	r3, r6, #4
 8005e52:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005e54:	6838      	ldr	r0, [r7, #0]
 8005e56:	f003 fe17 	bl	8009a88 <USB_DevInit>
 8005e5a:	4603      	mov	r3, r0
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d005      	beq.n	8005e6c <HAL_PCD_Init+0x228>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	2202      	movs	r2, #2
 8005e64:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8005e68:	2301      	movs	r3, #1
 8005e6a:	e00d      	b.n	8005e88 <HAL_PCD_Init+0x244>
  }

  hpcd->USB_Address = 0U;
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	2200      	movs	r2, #0
 8005e70:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	2201      	movs	r2, #1
 8005e78:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	4618      	mov	r0, r3
 8005e82:	f004 fe5f 	bl	800ab44 <USB_DevDisconnect>

  return HAL_OK;
 8005e86:	2300      	movs	r3, #0
}
 8005e88:	4618      	mov	r0, r3
 8005e8a:	3714      	adds	r7, #20
 8005e8c:	46bd      	mov	sp, r7
 8005e8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005e90:	0800fe4c 	.word	0x0800fe4c

08005e94 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8005e94:	b580      	push	{r7, lr}
 8005e96:	b084      	sub	sp, #16
 8005e98:	af00      	add	r7, sp, #0
 8005e9a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8005ea8:	2b01      	cmp	r3, #1
 8005eaa:	d101      	bne.n	8005eb0 <HAL_PCD_Start+0x1c>
 8005eac:	2302      	movs	r3, #2
 8005eae:	e020      	b.n	8005ef2 <HAL_PCD_Start+0x5e>
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	2201      	movs	r2, #1
 8005eb4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ebc:	2b01      	cmp	r3, #1
 8005ebe:	d109      	bne.n	8005ed4 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8005ec4:	2b01      	cmp	r3, #1
 8005ec6:	d005      	beq.n	8005ed4 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ecc:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	4618      	mov	r0, r3
 8005eda:	f003 fd89 	bl	80099f0 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	4618      	mov	r0, r3
 8005ee4:	f004 fe0d 	bl	800ab02 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	2200      	movs	r2, #0
 8005eec:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8005ef0:	2300      	movs	r3, #0
}
 8005ef2:	4618      	mov	r0, r3
 8005ef4:	3710      	adds	r7, #16
 8005ef6:	46bd      	mov	sp, r7
 8005ef8:	bd80      	pop	{r7, pc}

08005efa <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8005efa:	b590      	push	{r4, r7, lr}
 8005efc:	b08d      	sub	sp, #52	; 0x34
 8005efe:	af00      	add	r7, sp, #0
 8005f00:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f08:	6a3b      	ldr	r3, [r7, #32]
 8005f0a:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	4618      	mov	r0, r3
 8005f12:	f004 fecb 	bl	800acac <USB_GetMode>
 8005f16:	4603      	mov	r3, r0
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	f040 839d 	bne.w	8006658 <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	4618      	mov	r0, r3
 8005f24:	f004 fe2f 	bl	800ab86 <USB_ReadInterrupts>
 8005f28:	4603      	mov	r3, r0
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	f000 8393 	beq.w	8006656 <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	4618      	mov	r0, r3
 8005f36:	f004 fe26 	bl	800ab86 <USB_ReadInterrupts>
 8005f3a:	4603      	mov	r3, r0
 8005f3c:	f003 0302 	and.w	r3, r3, #2
 8005f40:	2b02      	cmp	r3, #2
 8005f42:	d107      	bne.n	8005f54 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	695a      	ldr	r2, [r3, #20]
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	f002 0202 	and.w	r2, r2, #2
 8005f52:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	4618      	mov	r0, r3
 8005f5a:	f004 fe14 	bl	800ab86 <USB_ReadInterrupts>
 8005f5e:	4603      	mov	r3, r0
 8005f60:	f003 0310 	and.w	r3, r3, #16
 8005f64:	2b10      	cmp	r3, #16
 8005f66:	d161      	bne.n	800602c <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	699a      	ldr	r2, [r3, #24]
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	f022 0210 	bic.w	r2, r2, #16
 8005f76:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8005f78:	6a3b      	ldr	r3, [r7, #32]
 8005f7a:	6a1b      	ldr	r3, [r3, #32]
 8005f7c:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8005f7e:	69bb      	ldr	r3, [r7, #24]
 8005f80:	f003 020f 	and.w	r2, r3, #15
 8005f84:	4613      	mov	r3, r2
 8005f86:	00db      	lsls	r3, r3, #3
 8005f88:	1a9b      	subs	r3, r3, r2
 8005f8a:	009b      	lsls	r3, r3, #2
 8005f8c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8005f90:	687a      	ldr	r2, [r7, #4]
 8005f92:	4413      	add	r3, r2
 8005f94:	3304      	adds	r3, #4
 8005f96:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8005f98:	69bb      	ldr	r3, [r7, #24]
 8005f9a:	0c5b      	lsrs	r3, r3, #17
 8005f9c:	f003 030f 	and.w	r3, r3, #15
 8005fa0:	2b02      	cmp	r3, #2
 8005fa2:	d124      	bne.n	8005fee <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8005fa4:	69ba      	ldr	r2, [r7, #24]
 8005fa6:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8005faa:	4013      	ands	r3, r2
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d035      	beq.n	800601c <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8005fb0:	697b      	ldr	r3, [r7, #20]
 8005fb2:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8005fb4:	69bb      	ldr	r3, [r7, #24]
 8005fb6:	091b      	lsrs	r3, r3, #4
 8005fb8:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8005fba:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005fbe:	b29b      	uxth	r3, r3
 8005fc0:	461a      	mov	r2, r3
 8005fc2:	6a38      	ldr	r0, [r7, #32]
 8005fc4:	f004 fc7a 	bl	800a8bc <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005fc8:	697b      	ldr	r3, [r7, #20]
 8005fca:	68da      	ldr	r2, [r3, #12]
 8005fcc:	69bb      	ldr	r3, [r7, #24]
 8005fce:	091b      	lsrs	r3, r3, #4
 8005fd0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005fd4:	441a      	add	r2, r3
 8005fd6:	697b      	ldr	r3, [r7, #20]
 8005fd8:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005fda:	697b      	ldr	r3, [r7, #20]
 8005fdc:	699a      	ldr	r2, [r3, #24]
 8005fde:	69bb      	ldr	r3, [r7, #24]
 8005fe0:	091b      	lsrs	r3, r3, #4
 8005fe2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005fe6:	441a      	add	r2, r3
 8005fe8:	697b      	ldr	r3, [r7, #20]
 8005fea:	619a      	str	r2, [r3, #24]
 8005fec:	e016      	b.n	800601c <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8005fee:	69bb      	ldr	r3, [r7, #24]
 8005ff0:	0c5b      	lsrs	r3, r3, #17
 8005ff2:	f003 030f 	and.w	r3, r3, #15
 8005ff6:	2b06      	cmp	r3, #6
 8005ff8:	d110      	bne.n	800601c <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8006000:	2208      	movs	r2, #8
 8006002:	4619      	mov	r1, r3
 8006004:	6a38      	ldr	r0, [r7, #32]
 8006006:	f004 fc59 	bl	800a8bc <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800600a:	697b      	ldr	r3, [r7, #20]
 800600c:	699a      	ldr	r2, [r3, #24]
 800600e:	69bb      	ldr	r3, [r7, #24]
 8006010:	091b      	lsrs	r3, r3, #4
 8006012:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006016:	441a      	add	r2, r3
 8006018:	697b      	ldr	r3, [r7, #20]
 800601a:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	699a      	ldr	r2, [r3, #24]
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	f042 0210 	orr.w	r2, r2, #16
 800602a:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	4618      	mov	r0, r3
 8006032:	f004 fda8 	bl	800ab86 <USB_ReadInterrupts>
 8006036:	4603      	mov	r3, r0
 8006038:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800603c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8006040:	d16e      	bne.n	8006120 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8006042:	2300      	movs	r3, #0
 8006044:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	4618      	mov	r0, r3
 800604c:	f004 fdae 	bl	800abac <USB_ReadDevAllOutEpInterrupt>
 8006050:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8006052:	e062      	b.n	800611a <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8006054:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006056:	f003 0301 	and.w	r3, r3, #1
 800605a:	2b00      	cmp	r3, #0
 800605c:	d057      	beq.n	800610e <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006064:	b2d2      	uxtb	r2, r2
 8006066:	4611      	mov	r1, r2
 8006068:	4618      	mov	r0, r3
 800606a:	f004 fdd3 	bl	800ac14 <USB_ReadDevOutEPInterrupt>
 800606e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8006070:	693b      	ldr	r3, [r7, #16]
 8006072:	f003 0301 	and.w	r3, r3, #1
 8006076:	2b00      	cmp	r3, #0
 8006078:	d00c      	beq.n	8006094 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800607a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800607c:	015a      	lsls	r2, r3, #5
 800607e:	69fb      	ldr	r3, [r7, #28]
 8006080:	4413      	add	r3, r2
 8006082:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006086:	461a      	mov	r2, r3
 8006088:	2301      	movs	r3, #1
 800608a:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800608c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800608e:	6878      	ldr	r0, [r7, #4]
 8006090:	f000 fdb0 	bl	8006bf4 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8006094:	693b      	ldr	r3, [r7, #16]
 8006096:	f003 0308 	and.w	r3, r3, #8
 800609a:	2b00      	cmp	r3, #0
 800609c:	d00c      	beq.n	80060b8 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800609e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060a0:	015a      	lsls	r2, r3, #5
 80060a2:	69fb      	ldr	r3, [r7, #28]
 80060a4:	4413      	add	r3, r2
 80060a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060aa:	461a      	mov	r2, r3
 80060ac:	2308      	movs	r3, #8
 80060ae:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80060b0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80060b2:	6878      	ldr	r0, [r7, #4]
 80060b4:	f000 feaa 	bl	8006e0c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80060b8:	693b      	ldr	r3, [r7, #16]
 80060ba:	f003 0310 	and.w	r3, r3, #16
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d008      	beq.n	80060d4 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80060c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060c4:	015a      	lsls	r2, r3, #5
 80060c6:	69fb      	ldr	r3, [r7, #28]
 80060c8:	4413      	add	r3, r2
 80060ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060ce:	461a      	mov	r2, r3
 80060d0:	2310      	movs	r3, #16
 80060d2:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80060d4:	693b      	ldr	r3, [r7, #16]
 80060d6:	f003 0320 	and.w	r3, r3, #32
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d008      	beq.n	80060f0 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80060de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060e0:	015a      	lsls	r2, r3, #5
 80060e2:	69fb      	ldr	r3, [r7, #28]
 80060e4:	4413      	add	r3, r2
 80060e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060ea:	461a      	mov	r2, r3
 80060ec:	2320      	movs	r3, #32
 80060ee:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80060f0:	693b      	ldr	r3, [r7, #16]
 80060f2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d009      	beq.n	800610e <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80060fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060fc:	015a      	lsls	r2, r3, #5
 80060fe:	69fb      	ldr	r3, [r7, #28]
 8006100:	4413      	add	r3, r2
 8006102:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006106:	461a      	mov	r2, r3
 8006108:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800610c:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800610e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006110:	3301      	adds	r3, #1
 8006112:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8006114:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006116:	085b      	lsrs	r3, r3, #1
 8006118:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800611a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800611c:	2b00      	cmp	r3, #0
 800611e:	d199      	bne.n	8006054 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	4618      	mov	r0, r3
 8006126:	f004 fd2e 	bl	800ab86 <USB_ReadInterrupts>
 800612a:	4603      	mov	r3, r0
 800612c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006130:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006134:	f040 80c0 	bne.w	80062b8 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	4618      	mov	r0, r3
 800613e:	f004 fd4f 	bl	800abe0 <USB_ReadDevAllInEpInterrupt>
 8006142:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8006144:	2300      	movs	r3, #0
 8006146:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8006148:	e0b2      	b.n	80062b0 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800614a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800614c:	f003 0301 	and.w	r3, r3, #1
 8006150:	2b00      	cmp	r3, #0
 8006152:	f000 80a7 	beq.w	80062a4 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800615c:	b2d2      	uxtb	r2, r2
 800615e:	4611      	mov	r1, r2
 8006160:	4618      	mov	r0, r3
 8006162:	f004 fd75 	bl	800ac50 <USB_ReadDevInEPInterrupt>
 8006166:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8006168:	693b      	ldr	r3, [r7, #16]
 800616a:	f003 0301 	and.w	r3, r3, #1
 800616e:	2b00      	cmp	r3, #0
 8006170:	d057      	beq.n	8006222 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8006172:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006174:	f003 030f 	and.w	r3, r3, #15
 8006178:	2201      	movs	r2, #1
 800617a:	fa02 f303 	lsl.w	r3, r2, r3
 800617e:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8006180:	69fb      	ldr	r3, [r7, #28]
 8006182:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006186:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	43db      	mvns	r3, r3
 800618c:	69f9      	ldr	r1, [r7, #28]
 800618e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006192:	4013      	ands	r3, r2
 8006194:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8006196:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006198:	015a      	lsls	r2, r3, #5
 800619a:	69fb      	ldr	r3, [r7, #28]
 800619c:	4413      	add	r3, r2
 800619e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061a2:	461a      	mov	r2, r3
 80061a4:	2301      	movs	r3, #1
 80061a6:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	691b      	ldr	r3, [r3, #16]
 80061ac:	2b01      	cmp	r3, #1
 80061ae:	d132      	bne.n	8006216 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80061b0:	6879      	ldr	r1, [r7, #4]
 80061b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80061b4:	4613      	mov	r3, r2
 80061b6:	00db      	lsls	r3, r3, #3
 80061b8:	1a9b      	subs	r3, r3, r2
 80061ba:	009b      	lsls	r3, r3, #2
 80061bc:	440b      	add	r3, r1
 80061be:	3348      	adds	r3, #72	; 0x48
 80061c0:	6819      	ldr	r1, [r3, #0]
 80061c2:	6878      	ldr	r0, [r7, #4]
 80061c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80061c6:	4613      	mov	r3, r2
 80061c8:	00db      	lsls	r3, r3, #3
 80061ca:	1a9b      	subs	r3, r3, r2
 80061cc:	009b      	lsls	r3, r3, #2
 80061ce:	4403      	add	r3, r0
 80061d0:	3344      	adds	r3, #68	; 0x44
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	4419      	add	r1, r3
 80061d6:	6878      	ldr	r0, [r7, #4]
 80061d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80061da:	4613      	mov	r3, r2
 80061dc:	00db      	lsls	r3, r3, #3
 80061de:	1a9b      	subs	r3, r3, r2
 80061e0:	009b      	lsls	r3, r3, #2
 80061e2:	4403      	add	r3, r0
 80061e4:	3348      	adds	r3, #72	; 0x48
 80061e6:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80061e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d113      	bne.n	8006216 <HAL_PCD_IRQHandler+0x31c>
 80061ee:	6879      	ldr	r1, [r7, #4]
 80061f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80061f2:	4613      	mov	r3, r2
 80061f4:	00db      	lsls	r3, r3, #3
 80061f6:	1a9b      	subs	r3, r3, r2
 80061f8:	009b      	lsls	r3, r3, #2
 80061fa:	440b      	add	r3, r1
 80061fc:	3350      	adds	r3, #80	; 0x50
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	2b00      	cmp	r3, #0
 8006202:	d108      	bne.n	8006216 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	6818      	ldr	r0, [r3, #0]
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800620e:	461a      	mov	r2, r3
 8006210:	2101      	movs	r1, #1
 8006212:	f004 fd7d 	bl	800ad10 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8006216:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006218:	b2db      	uxtb	r3, r3
 800621a:	4619      	mov	r1, r3
 800621c:	6878      	ldr	r0, [r7, #4]
 800621e:	f006 fc7c 	bl	800cb1a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8006222:	693b      	ldr	r3, [r7, #16]
 8006224:	f003 0308 	and.w	r3, r3, #8
 8006228:	2b00      	cmp	r3, #0
 800622a:	d008      	beq.n	800623e <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800622c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800622e:	015a      	lsls	r2, r3, #5
 8006230:	69fb      	ldr	r3, [r7, #28]
 8006232:	4413      	add	r3, r2
 8006234:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006238:	461a      	mov	r2, r3
 800623a:	2308      	movs	r3, #8
 800623c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800623e:	693b      	ldr	r3, [r7, #16]
 8006240:	f003 0310 	and.w	r3, r3, #16
 8006244:	2b00      	cmp	r3, #0
 8006246:	d008      	beq.n	800625a <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8006248:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800624a:	015a      	lsls	r2, r3, #5
 800624c:	69fb      	ldr	r3, [r7, #28]
 800624e:	4413      	add	r3, r2
 8006250:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006254:	461a      	mov	r2, r3
 8006256:	2310      	movs	r3, #16
 8006258:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800625a:	693b      	ldr	r3, [r7, #16]
 800625c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006260:	2b00      	cmp	r3, #0
 8006262:	d008      	beq.n	8006276 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8006264:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006266:	015a      	lsls	r2, r3, #5
 8006268:	69fb      	ldr	r3, [r7, #28]
 800626a:	4413      	add	r3, r2
 800626c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006270:	461a      	mov	r2, r3
 8006272:	2340      	movs	r3, #64	; 0x40
 8006274:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8006276:	693b      	ldr	r3, [r7, #16]
 8006278:	f003 0302 	and.w	r3, r3, #2
 800627c:	2b00      	cmp	r3, #0
 800627e:	d008      	beq.n	8006292 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8006280:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006282:	015a      	lsls	r2, r3, #5
 8006284:	69fb      	ldr	r3, [r7, #28]
 8006286:	4413      	add	r3, r2
 8006288:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800628c:	461a      	mov	r2, r3
 800628e:	2302      	movs	r3, #2
 8006290:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8006292:	693b      	ldr	r3, [r7, #16]
 8006294:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006298:	2b00      	cmp	r3, #0
 800629a:	d003      	beq.n	80062a4 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800629c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800629e:	6878      	ldr	r0, [r7, #4]
 80062a0:	f000 fc1b 	bl	8006ada <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80062a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062a6:	3301      	adds	r3, #1
 80062a8:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80062aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062ac:	085b      	lsrs	r3, r3, #1
 80062ae:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80062b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	f47f af49 	bne.w	800614a <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	4618      	mov	r0, r3
 80062be:	f004 fc62 	bl	800ab86 <USB_ReadInterrupts>
 80062c2:	4603      	mov	r3, r0
 80062c4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80062c8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80062cc:	d122      	bne.n	8006314 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80062ce:	69fb      	ldr	r3, [r7, #28]
 80062d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80062d4:	685b      	ldr	r3, [r3, #4]
 80062d6:	69fa      	ldr	r2, [r7, #28]
 80062d8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80062dc:	f023 0301 	bic.w	r3, r3, #1
 80062e0:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 80062e8:	2b01      	cmp	r3, #1
 80062ea:	d108      	bne.n	80062fe <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	2200      	movs	r2, #0
 80062f0:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80062f4:	2100      	movs	r1, #0
 80062f6:	6878      	ldr	r0, [r7, #4]
 80062f8:	f000 fe26 	bl	8006f48 <HAL_PCDEx_LPM_Callback>
 80062fc:	e002      	b.n	8006304 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80062fe:	6878      	ldr	r0, [r7, #4]
 8006300:	f006 fc78 	bl	800cbf4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	695a      	ldr	r2, [r3, #20]
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8006312:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	4618      	mov	r0, r3
 800631a:	f004 fc34 	bl	800ab86 <USB_ReadInterrupts>
 800631e:	4603      	mov	r3, r0
 8006320:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006324:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006328:	d112      	bne.n	8006350 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800632a:	69fb      	ldr	r3, [r7, #28]
 800632c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006330:	689b      	ldr	r3, [r3, #8]
 8006332:	f003 0301 	and.w	r3, r3, #1
 8006336:	2b01      	cmp	r3, #1
 8006338:	d102      	bne.n	8006340 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800633a:	6878      	ldr	r0, [r7, #4]
 800633c:	f006 fc34 	bl	800cba8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	695a      	ldr	r2, [r3, #20]
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800634e:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	4618      	mov	r0, r3
 8006356:	f004 fc16 	bl	800ab86 <USB_ReadInterrupts>
 800635a:	4603      	mov	r3, r0
 800635c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006360:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006364:	f040 80c7 	bne.w	80064f6 <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8006368:	69fb      	ldr	r3, [r7, #28]
 800636a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800636e:	685b      	ldr	r3, [r3, #4]
 8006370:	69fa      	ldr	r2, [r7, #28]
 8006372:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006376:	f023 0301 	bic.w	r3, r3, #1
 800637a:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	2110      	movs	r1, #16
 8006382:	4618      	mov	r0, r3
 8006384:	f003 fce4 	bl	8009d50 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006388:	2300      	movs	r3, #0
 800638a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800638c:	e056      	b.n	800643c <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800638e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006390:	015a      	lsls	r2, r3, #5
 8006392:	69fb      	ldr	r3, [r7, #28]
 8006394:	4413      	add	r3, r2
 8006396:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800639a:	461a      	mov	r2, r3
 800639c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80063a0:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80063a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063a4:	015a      	lsls	r2, r3, #5
 80063a6:	69fb      	ldr	r3, [r7, #28]
 80063a8:	4413      	add	r3, r2
 80063aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80063b2:	0151      	lsls	r1, r2, #5
 80063b4:	69fa      	ldr	r2, [r7, #28]
 80063b6:	440a      	add	r2, r1
 80063b8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80063bc:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80063c0:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80063c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063c4:	015a      	lsls	r2, r3, #5
 80063c6:	69fb      	ldr	r3, [r7, #28]
 80063c8:	4413      	add	r3, r2
 80063ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80063d2:	0151      	lsls	r1, r2, #5
 80063d4:	69fa      	ldr	r2, [r7, #28]
 80063d6:	440a      	add	r2, r1
 80063d8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80063dc:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80063e0:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80063e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063e4:	015a      	lsls	r2, r3, #5
 80063e6:	69fb      	ldr	r3, [r7, #28]
 80063e8:	4413      	add	r3, r2
 80063ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80063ee:	461a      	mov	r2, r3
 80063f0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80063f4:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80063f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063f8:	015a      	lsls	r2, r3, #5
 80063fa:	69fb      	ldr	r3, [r7, #28]
 80063fc:	4413      	add	r3, r2
 80063fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006406:	0151      	lsls	r1, r2, #5
 8006408:	69fa      	ldr	r2, [r7, #28]
 800640a:	440a      	add	r2, r1
 800640c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006410:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006414:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8006416:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006418:	015a      	lsls	r2, r3, #5
 800641a:	69fb      	ldr	r3, [r7, #28]
 800641c:	4413      	add	r3, r2
 800641e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006426:	0151      	lsls	r1, r2, #5
 8006428:	69fa      	ldr	r2, [r7, #28]
 800642a:	440a      	add	r2, r1
 800642c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006430:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006434:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006436:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006438:	3301      	adds	r3, #1
 800643a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	685b      	ldr	r3, [r3, #4]
 8006440:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006442:	429a      	cmp	r2, r3
 8006444:	d3a3      	bcc.n	800638e <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8006446:	69fb      	ldr	r3, [r7, #28]
 8006448:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800644c:	69db      	ldr	r3, [r3, #28]
 800644e:	69fa      	ldr	r2, [r7, #28]
 8006450:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006454:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8006458:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800645e:	2b00      	cmp	r3, #0
 8006460:	d016      	beq.n	8006490 <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8006462:	69fb      	ldr	r3, [r7, #28]
 8006464:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006468:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800646c:	69fa      	ldr	r2, [r7, #28]
 800646e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006472:	f043 030b 	orr.w	r3, r3, #11
 8006476:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800647a:	69fb      	ldr	r3, [r7, #28]
 800647c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006480:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006482:	69fa      	ldr	r2, [r7, #28]
 8006484:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006488:	f043 030b 	orr.w	r3, r3, #11
 800648c:	6453      	str	r3, [r2, #68]	; 0x44
 800648e:	e015      	b.n	80064bc <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8006490:	69fb      	ldr	r3, [r7, #28]
 8006492:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006496:	695b      	ldr	r3, [r3, #20]
 8006498:	69fa      	ldr	r2, [r7, #28]
 800649a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800649e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80064a2:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80064a6:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80064a8:	69fb      	ldr	r3, [r7, #28]
 80064aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80064ae:	691b      	ldr	r3, [r3, #16]
 80064b0:	69fa      	ldr	r2, [r7, #28]
 80064b2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80064b6:	f043 030b 	orr.w	r3, r3, #11
 80064ba:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80064bc:	69fb      	ldr	r3, [r7, #28]
 80064be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	69fa      	ldr	r2, [r7, #28]
 80064c6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80064ca:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80064ce:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	6818      	ldr	r0, [r3, #0]
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	691b      	ldr	r3, [r3, #16]
 80064d8:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80064e0:	461a      	mov	r2, r3
 80064e2:	f004 fc15 	bl	800ad10 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	695a      	ldr	r2, [r3, #20]
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80064f4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	4618      	mov	r0, r3
 80064fc:	f004 fb43 	bl	800ab86 <USB_ReadInterrupts>
 8006500:	4603      	mov	r3, r0
 8006502:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006506:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800650a:	d124      	bne.n	8006556 <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	4618      	mov	r0, r3
 8006512:	f004 fbd9 	bl	800acc8 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	4618      	mov	r0, r3
 800651c:	f003 fc79 	bl	8009e12 <USB_GetDevSpeed>
 8006520:	4603      	mov	r3, r0
 8006522:	461a      	mov	r2, r3
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681c      	ldr	r4, [r3, #0]
 800652c:	f001 fa9e 	bl	8007a6c <HAL_RCC_GetHCLKFreq>
 8006530:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8006536:	b2db      	uxtb	r3, r3
 8006538:	461a      	mov	r2, r3
 800653a:	4620      	mov	r0, r4
 800653c:	f003 f9b6 	bl	80098ac <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8006540:	6878      	ldr	r0, [r7, #4]
 8006542:	f006 fb12 	bl	800cb6a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	695a      	ldr	r2, [r3, #20]
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8006554:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	4618      	mov	r0, r3
 800655c:	f004 fb13 	bl	800ab86 <USB_ReadInterrupts>
 8006560:	4603      	mov	r3, r0
 8006562:	f003 0308 	and.w	r3, r3, #8
 8006566:	2b08      	cmp	r3, #8
 8006568:	d10a      	bne.n	8006580 <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800656a:	6878      	ldr	r0, [r7, #4]
 800656c:	f006 faef 	bl	800cb4e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	695a      	ldr	r2, [r3, #20]
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	f002 0208 	and.w	r2, r2, #8
 800657e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	4618      	mov	r0, r3
 8006586:	f004 fafe 	bl	800ab86 <USB_ReadInterrupts>
 800658a:	4603      	mov	r3, r0
 800658c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006590:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006594:	d10f      	bne.n	80065b6 <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8006596:	2300      	movs	r3, #0
 8006598:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800659a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800659c:	b2db      	uxtb	r3, r3
 800659e:	4619      	mov	r1, r3
 80065a0:	6878      	ldr	r0, [r7, #4]
 80065a2:	f006 fb47 	bl	800cc34 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	695a      	ldr	r2, [r3, #20]
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80065b4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	4618      	mov	r0, r3
 80065bc:	f004 fae3 	bl	800ab86 <USB_ReadInterrupts>
 80065c0:	4603      	mov	r3, r0
 80065c2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80065c6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80065ca:	d10f      	bne.n	80065ec <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80065cc:	2300      	movs	r3, #0
 80065ce:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80065d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065d2:	b2db      	uxtb	r3, r3
 80065d4:	4619      	mov	r1, r3
 80065d6:	6878      	ldr	r0, [r7, #4]
 80065d8:	f006 fb1a 	bl	800cc10 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	695a      	ldr	r2, [r3, #20]
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80065ea:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	4618      	mov	r0, r3
 80065f2:	f004 fac8 	bl	800ab86 <USB_ReadInterrupts>
 80065f6:	4603      	mov	r3, r0
 80065f8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80065fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006600:	d10a      	bne.n	8006618 <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8006602:	6878      	ldr	r0, [r7, #4]
 8006604:	f006 fb28 	bl	800cc58 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	695a      	ldr	r2, [r3, #20]
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8006616:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	4618      	mov	r0, r3
 800661e:	f004 fab2 	bl	800ab86 <USB_ReadInterrupts>
 8006622:	4603      	mov	r3, r0
 8006624:	f003 0304 	and.w	r3, r3, #4
 8006628:	2b04      	cmp	r3, #4
 800662a:	d115      	bne.n	8006658 <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	685b      	ldr	r3, [r3, #4]
 8006632:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8006634:	69bb      	ldr	r3, [r7, #24]
 8006636:	f003 0304 	and.w	r3, r3, #4
 800663a:	2b00      	cmp	r3, #0
 800663c:	d002      	beq.n	8006644 <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800663e:	6878      	ldr	r0, [r7, #4]
 8006640:	f006 fb18 	bl	800cc74 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	6859      	ldr	r1, [r3, #4]
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	69ba      	ldr	r2, [r7, #24]
 8006650:	430a      	orrs	r2, r1
 8006652:	605a      	str	r2, [r3, #4]
 8006654:	e000      	b.n	8006658 <HAL_PCD_IRQHandler+0x75e>
      return;
 8006656:	bf00      	nop
    }
  }
}
 8006658:	3734      	adds	r7, #52	; 0x34
 800665a:	46bd      	mov	sp, r7
 800665c:	bd90      	pop	{r4, r7, pc}

0800665e <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800665e:	b580      	push	{r7, lr}
 8006660:	b082      	sub	sp, #8
 8006662:	af00      	add	r7, sp, #0
 8006664:	6078      	str	r0, [r7, #4]
 8006666:	460b      	mov	r3, r1
 8006668:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8006670:	2b01      	cmp	r3, #1
 8006672:	d101      	bne.n	8006678 <HAL_PCD_SetAddress+0x1a>
 8006674:	2302      	movs	r3, #2
 8006676:	e013      	b.n	80066a0 <HAL_PCD_SetAddress+0x42>
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	2201      	movs	r2, #1
 800667c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	78fa      	ldrb	r2, [r7, #3]
 8006684:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	78fa      	ldrb	r2, [r7, #3]
 800668e:	4611      	mov	r1, r2
 8006690:	4618      	mov	r0, r3
 8006692:	f004 fa10 	bl	800aab6 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	2200      	movs	r2, #0
 800669a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800669e:	2300      	movs	r3, #0
}
 80066a0:	4618      	mov	r0, r3
 80066a2:	3708      	adds	r7, #8
 80066a4:	46bd      	mov	sp, r7
 80066a6:	bd80      	pop	{r7, pc}

080066a8 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80066a8:	b580      	push	{r7, lr}
 80066aa:	b084      	sub	sp, #16
 80066ac:	af00      	add	r7, sp, #0
 80066ae:	6078      	str	r0, [r7, #4]
 80066b0:	4608      	mov	r0, r1
 80066b2:	4611      	mov	r1, r2
 80066b4:	461a      	mov	r2, r3
 80066b6:	4603      	mov	r3, r0
 80066b8:	70fb      	strb	r3, [r7, #3]
 80066ba:	460b      	mov	r3, r1
 80066bc:	803b      	strh	r3, [r7, #0]
 80066be:	4613      	mov	r3, r2
 80066c0:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80066c2:	2300      	movs	r3, #0
 80066c4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80066c6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	da0f      	bge.n	80066ee <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80066ce:	78fb      	ldrb	r3, [r7, #3]
 80066d0:	f003 020f 	and.w	r2, r3, #15
 80066d4:	4613      	mov	r3, r2
 80066d6:	00db      	lsls	r3, r3, #3
 80066d8:	1a9b      	subs	r3, r3, r2
 80066da:	009b      	lsls	r3, r3, #2
 80066dc:	3338      	adds	r3, #56	; 0x38
 80066de:	687a      	ldr	r2, [r7, #4]
 80066e0:	4413      	add	r3, r2
 80066e2:	3304      	adds	r3, #4
 80066e4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	2201      	movs	r2, #1
 80066ea:	705a      	strb	r2, [r3, #1]
 80066ec:	e00f      	b.n	800670e <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80066ee:	78fb      	ldrb	r3, [r7, #3]
 80066f0:	f003 020f 	and.w	r2, r3, #15
 80066f4:	4613      	mov	r3, r2
 80066f6:	00db      	lsls	r3, r3, #3
 80066f8:	1a9b      	subs	r3, r3, r2
 80066fa:	009b      	lsls	r3, r3, #2
 80066fc:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8006700:	687a      	ldr	r2, [r7, #4]
 8006702:	4413      	add	r3, r2
 8006704:	3304      	adds	r3, #4
 8006706:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	2200      	movs	r2, #0
 800670c:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800670e:	78fb      	ldrb	r3, [r7, #3]
 8006710:	f003 030f 	and.w	r3, r3, #15
 8006714:	b2da      	uxtb	r2, r3
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800671a:	883a      	ldrh	r2, [r7, #0]
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	78ba      	ldrb	r2, [r7, #2]
 8006724:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	785b      	ldrb	r3, [r3, #1]
 800672a:	2b00      	cmp	r3, #0
 800672c:	d004      	beq.n	8006738 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	781b      	ldrb	r3, [r3, #0]
 8006732:	b29a      	uxth	r2, r3
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8006738:	78bb      	ldrb	r3, [r7, #2]
 800673a:	2b02      	cmp	r3, #2
 800673c:	d102      	bne.n	8006744 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	2200      	movs	r2, #0
 8006742:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800674a:	2b01      	cmp	r3, #1
 800674c:	d101      	bne.n	8006752 <HAL_PCD_EP_Open+0xaa>
 800674e:	2302      	movs	r3, #2
 8006750:	e00e      	b.n	8006770 <HAL_PCD_EP_Open+0xc8>
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	2201      	movs	r2, #1
 8006756:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	68f9      	ldr	r1, [r7, #12]
 8006760:	4618      	mov	r0, r3
 8006762:	f003 fb7b 	bl	8009e5c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	2200      	movs	r2, #0
 800676a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 800676e:	7afb      	ldrb	r3, [r7, #11]
}
 8006770:	4618      	mov	r0, r3
 8006772:	3710      	adds	r7, #16
 8006774:	46bd      	mov	sp, r7
 8006776:	bd80      	pop	{r7, pc}

08006778 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006778:	b580      	push	{r7, lr}
 800677a:	b084      	sub	sp, #16
 800677c:	af00      	add	r7, sp, #0
 800677e:	6078      	str	r0, [r7, #4]
 8006780:	460b      	mov	r3, r1
 8006782:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8006784:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006788:	2b00      	cmp	r3, #0
 800678a:	da0f      	bge.n	80067ac <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800678c:	78fb      	ldrb	r3, [r7, #3]
 800678e:	f003 020f 	and.w	r2, r3, #15
 8006792:	4613      	mov	r3, r2
 8006794:	00db      	lsls	r3, r3, #3
 8006796:	1a9b      	subs	r3, r3, r2
 8006798:	009b      	lsls	r3, r3, #2
 800679a:	3338      	adds	r3, #56	; 0x38
 800679c:	687a      	ldr	r2, [r7, #4]
 800679e:	4413      	add	r3, r2
 80067a0:	3304      	adds	r3, #4
 80067a2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	2201      	movs	r2, #1
 80067a8:	705a      	strb	r2, [r3, #1]
 80067aa:	e00f      	b.n	80067cc <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80067ac:	78fb      	ldrb	r3, [r7, #3]
 80067ae:	f003 020f 	and.w	r2, r3, #15
 80067b2:	4613      	mov	r3, r2
 80067b4:	00db      	lsls	r3, r3, #3
 80067b6:	1a9b      	subs	r3, r3, r2
 80067b8:	009b      	lsls	r3, r3, #2
 80067ba:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80067be:	687a      	ldr	r2, [r7, #4]
 80067c0:	4413      	add	r3, r2
 80067c2:	3304      	adds	r3, #4
 80067c4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	2200      	movs	r2, #0
 80067ca:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80067cc:	78fb      	ldrb	r3, [r7, #3]
 80067ce:	f003 030f 	and.w	r3, r3, #15
 80067d2:	b2da      	uxtb	r2, r3
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80067de:	2b01      	cmp	r3, #1
 80067e0:	d101      	bne.n	80067e6 <HAL_PCD_EP_Close+0x6e>
 80067e2:	2302      	movs	r3, #2
 80067e4:	e00e      	b.n	8006804 <HAL_PCD_EP_Close+0x8c>
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	2201      	movs	r2, #1
 80067ea:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	68f9      	ldr	r1, [r7, #12]
 80067f4:	4618      	mov	r0, r3
 80067f6:	f003 fbb9 	bl	8009f6c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	2200      	movs	r2, #0
 80067fe:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8006802:	2300      	movs	r3, #0
}
 8006804:	4618      	mov	r0, r3
 8006806:	3710      	adds	r7, #16
 8006808:	46bd      	mov	sp, r7
 800680a:	bd80      	pop	{r7, pc}

0800680c <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800680c:	b580      	push	{r7, lr}
 800680e:	b086      	sub	sp, #24
 8006810:	af00      	add	r7, sp, #0
 8006812:	60f8      	str	r0, [r7, #12]
 8006814:	607a      	str	r2, [r7, #4]
 8006816:	603b      	str	r3, [r7, #0]
 8006818:	460b      	mov	r3, r1
 800681a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800681c:	7afb      	ldrb	r3, [r7, #11]
 800681e:	f003 020f 	and.w	r2, r3, #15
 8006822:	4613      	mov	r3, r2
 8006824:	00db      	lsls	r3, r3, #3
 8006826:	1a9b      	subs	r3, r3, r2
 8006828:	009b      	lsls	r3, r3, #2
 800682a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800682e:	68fa      	ldr	r2, [r7, #12]
 8006830:	4413      	add	r3, r2
 8006832:	3304      	adds	r3, #4
 8006834:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8006836:	697b      	ldr	r3, [r7, #20]
 8006838:	687a      	ldr	r2, [r7, #4]
 800683a:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800683c:	697b      	ldr	r3, [r7, #20]
 800683e:	683a      	ldr	r2, [r7, #0]
 8006840:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8006842:	697b      	ldr	r3, [r7, #20]
 8006844:	2200      	movs	r2, #0
 8006846:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8006848:	697b      	ldr	r3, [r7, #20]
 800684a:	2200      	movs	r2, #0
 800684c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800684e:	7afb      	ldrb	r3, [r7, #11]
 8006850:	f003 030f 	and.w	r3, r3, #15
 8006854:	b2da      	uxtb	r2, r3
 8006856:	697b      	ldr	r3, [r7, #20]
 8006858:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	691b      	ldr	r3, [r3, #16]
 800685e:	2b01      	cmp	r3, #1
 8006860:	d102      	bne.n	8006868 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8006862:	687a      	ldr	r2, [r7, #4]
 8006864:	697b      	ldr	r3, [r7, #20]
 8006866:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8006868:	7afb      	ldrb	r3, [r7, #11]
 800686a:	f003 030f 	and.w	r3, r3, #15
 800686e:	2b00      	cmp	r3, #0
 8006870:	d109      	bne.n	8006886 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	6818      	ldr	r0, [r3, #0]
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	691b      	ldr	r3, [r3, #16]
 800687a:	b2db      	uxtb	r3, r3
 800687c:	461a      	mov	r2, r3
 800687e:	6979      	ldr	r1, [r7, #20]
 8006880:	f003 fe94 	bl	800a5ac <USB_EP0StartXfer>
 8006884:	e008      	b.n	8006898 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	6818      	ldr	r0, [r3, #0]
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	691b      	ldr	r3, [r3, #16]
 800688e:	b2db      	uxtb	r3, r3
 8006890:	461a      	mov	r2, r3
 8006892:	6979      	ldr	r1, [r7, #20]
 8006894:	f003 fc46 	bl	800a124 <USB_EPStartXfer>
  }

  return HAL_OK;
 8006898:	2300      	movs	r3, #0
}
 800689a:	4618      	mov	r0, r3
 800689c:	3718      	adds	r7, #24
 800689e:	46bd      	mov	sp, r7
 80068a0:	bd80      	pop	{r7, pc}

080068a2 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80068a2:	b480      	push	{r7}
 80068a4:	b083      	sub	sp, #12
 80068a6:	af00      	add	r7, sp, #0
 80068a8:	6078      	str	r0, [r7, #4]
 80068aa:	460b      	mov	r3, r1
 80068ac:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80068ae:	78fb      	ldrb	r3, [r7, #3]
 80068b0:	f003 020f 	and.w	r2, r3, #15
 80068b4:	6879      	ldr	r1, [r7, #4]
 80068b6:	4613      	mov	r3, r2
 80068b8:	00db      	lsls	r3, r3, #3
 80068ba:	1a9b      	subs	r3, r3, r2
 80068bc:	009b      	lsls	r3, r3, #2
 80068be:	440b      	add	r3, r1
 80068c0:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80068c4:	681b      	ldr	r3, [r3, #0]
}
 80068c6:	4618      	mov	r0, r3
 80068c8:	370c      	adds	r7, #12
 80068ca:	46bd      	mov	sp, r7
 80068cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068d0:	4770      	bx	lr

080068d2 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80068d2:	b580      	push	{r7, lr}
 80068d4:	b086      	sub	sp, #24
 80068d6:	af00      	add	r7, sp, #0
 80068d8:	60f8      	str	r0, [r7, #12]
 80068da:	607a      	str	r2, [r7, #4]
 80068dc:	603b      	str	r3, [r7, #0]
 80068de:	460b      	mov	r3, r1
 80068e0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80068e2:	7afb      	ldrb	r3, [r7, #11]
 80068e4:	f003 020f 	and.w	r2, r3, #15
 80068e8:	4613      	mov	r3, r2
 80068ea:	00db      	lsls	r3, r3, #3
 80068ec:	1a9b      	subs	r3, r3, r2
 80068ee:	009b      	lsls	r3, r3, #2
 80068f0:	3338      	adds	r3, #56	; 0x38
 80068f2:	68fa      	ldr	r2, [r7, #12]
 80068f4:	4413      	add	r3, r2
 80068f6:	3304      	adds	r3, #4
 80068f8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80068fa:	697b      	ldr	r3, [r7, #20]
 80068fc:	687a      	ldr	r2, [r7, #4]
 80068fe:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8006900:	697b      	ldr	r3, [r7, #20]
 8006902:	683a      	ldr	r2, [r7, #0]
 8006904:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8006906:	697b      	ldr	r3, [r7, #20]
 8006908:	2200      	movs	r2, #0
 800690a:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 800690c:	697b      	ldr	r3, [r7, #20]
 800690e:	2201      	movs	r2, #1
 8006910:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006912:	7afb      	ldrb	r3, [r7, #11]
 8006914:	f003 030f 	and.w	r3, r3, #15
 8006918:	b2da      	uxtb	r2, r3
 800691a:	697b      	ldr	r3, [r7, #20]
 800691c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	691b      	ldr	r3, [r3, #16]
 8006922:	2b01      	cmp	r3, #1
 8006924:	d102      	bne.n	800692c <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8006926:	687a      	ldr	r2, [r7, #4]
 8006928:	697b      	ldr	r3, [r7, #20]
 800692a:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800692c:	7afb      	ldrb	r3, [r7, #11]
 800692e:	f003 030f 	and.w	r3, r3, #15
 8006932:	2b00      	cmp	r3, #0
 8006934:	d109      	bne.n	800694a <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	6818      	ldr	r0, [r3, #0]
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	691b      	ldr	r3, [r3, #16]
 800693e:	b2db      	uxtb	r3, r3
 8006940:	461a      	mov	r2, r3
 8006942:	6979      	ldr	r1, [r7, #20]
 8006944:	f003 fe32 	bl	800a5ac <USB_EP0StartXfer>
 8006948:	e008      	b.n	800695c <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	6818      	ldr	r0, [r3, #0]
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	691b      	ldr	r3, [r3, #16]
 8006952:	b2db      	uxtb	r3, r3
 8006954:	461a      	mov	r2, r3
 8006956:	6979      	ldr	r1, [r7, #20]
 8006958:	f003 fbe4 	bl	800a124 <USB_EPStartXfer>
  }

  return HAL_OK;
 800695c:	2300      	movs	r3, #0
}
 800695e:	4618      	mov	r0, r3
 8006960:	3718      	adds	r7, #24
 8006962:	46bd      	mov	sp, r7
 8006964:	bd80      	pop	{r7, pc}

08006966 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006966:	b580      	push	{r7, lr}
 8006968:	b084      	sub	sp, #16
 800696a:	af00      	add	r7, sp, #0
 800696c:	6078      	str	r0, [r7, #4]
 800696e:	460b      	mov	r3, r1
 8006970:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8006972:	78fb      	ldrb	r3, [r7, #3]
 8006974:	f003 020f 	and.w	r2, r3, #15
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	685b      	ldr	r3, [r3, #4]
 800697c:	429a      	cmp	r2, r3
 800697e:	d901      	bls.n	8006984 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8006980:	2301      	movs	r3, #1
 8006982:	e050      	b.n	8006a26 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8006984:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006988:	2b00      	cmp	r3, #0
 800698a:	da0f      	bge.n	80069ac <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800698c:	78fb      	ldrb	r3, [r7, #3]
 800698e:	f003 020f 	and.w	r2, r3, #15
 8006992:	4613      	mov	r3, r2
 8006994:	00db      	lsls	r3, r3, #3
 8006996:	1a9b      	subs	r3, r3, r2
 8006998:	009b      	lsls	r3, r3, #2
 800699a:	3338      	adds	r3, #56	; 0x38
 800699c:	687a      	ldr	r2, [r7, #4]
 800699e:	4413      	add	r3, r2
 80069a0:	3304      	adds	r3, #4
 80069a2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	2201      	movs	r2, #1
 80069a8:	705a      	strb	r2, [r3, #1]
 80069aa:	e00d      	b.n	80069c8 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80069ac:	78fa      	ldrb	r2, [r7, #3]
 80069ae:	4613      	mov	r3, r2
 80069b0:	00db      	lsls	r3, r3, #3
 80069b2:	1a9b      	subs	r3, r3, r2
 80069b4:	009b      	lsls	r3, r3, #2
 80069b6:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80069ba:	687a      	ldr	r2, [r7, #4]
 80069bc:	4413      	add	r3, r2
 80069be:	3304      	adds	r3, #4
 80069c0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	2200      	movs	r2, #0
 80069c6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	2201      	movs	r2, #1
 80069cc:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80069ce:	78fb      	ldrb	r3, [r7, #3]
 80069d0:	f003 030f 	and.w	r3, r3, #15
 80069d4:	b2da      	uxtb	r2, r3
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80069e0:	2b01      	cmp	r3, #1
 80069e2:	d101      	bne.n	80069e8 <HAL_PCD_EP_SetStall+0x82>
 80069e4:	2302      	movs	r3, #2
 80069e6:	e01e      	b.n	8006a26 <HAL_PCD_EP_SetStall+0xc0>
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	2201      	movs	r2, #1
 80069ec:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	68f9      	ldr	r1, [r7, #12]
 80069f6:	4618      	mov	r0, r3
 80069f8:	f003 ff89 	bl	800a90e <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80069fc:	78fb      	ldrb	r3, [r7, #3]
 80069fe:	f003 030f 	and.w	r3, r3, #15
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d10a      	bne.n	8006a1c <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	6818      	ldr	r0, [r3, #0]
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	691b      	ldr	r3, [r3, #16]
 8006a0e:	b2d9      	uxtb	r1, r3
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8006a16:	461a      	mov	r2, r3
 8006a18:	f004 f97a 	bl	800ad10 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	2200      	movs	r2, #0
 8006a20:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8006a24:	2300      	movs	r3, #0
}
 8006a26:	4618      	mov	r0, r3
 8006a28:	3710      	adds	r7, #16
 8006a2a:	46bd      	mov	sp, r7
 8006a2c:	bd80      	pop	{r7, pc}

08006a2e <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006a2e:	b580      	push	{r7, lr}
 8006a30:	b084      	sub	sp, #16
 8006a32:	af00      	add	r7, sp, #0
 8006a34:	6078      	str	r0, [r7, #4]
 8006a36:	460b      	mov	r3, r1
 8006a38:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8006a3a:	78fb      	ldrb	r3, [r7, #3]
 8006a3c:	f003 020f 	and.w	r2, r3, #15
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	685b      	ldr	r3, [r3, #4]
 8006a44:	429a      	cmp	r2, r3
 8006a46:	d901      	bls.n	8006a4c <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8006a48:	2301      	movs	r3, #1
 8006a4a:	e042      	b.n	8006ad2 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8006a4c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	da0f      	bge.n	8006a74 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006a54:	78fb      	ldrb	r3, [r7, #3]
 8006a56:	f003 020f 	and.w	r2, r3, #15
 8006a5a:	4613      	mov	r3, r2
 8006a5c:	00db      	lsls	r3, r3, #3
 8006a5e:	1a9b      	subs	r3, r3, r2
 8006a60:	009b      	lsls	r3, r3, #2
 8006a62:	3338      	adds	r3, #56	; 0x38
 8006a64:	687a      	ldr	r2, [r7, #4]
 8006a66:	4413      	add	r3, r2
 8006a68:	3304      	adds	r3, #4
 8006a6a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	2201      	movs	r2, #1
 8006a70:	705a      	strb	r2, [r3, #1]
 8006a72:	e00f      	b.n	8006a94 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006a74:	78fb      	ldrb	r3, [r7, #3]
 8006a76:	f003 020f 	and.w	r2, r3, #15
 8006a7a:	4613      	mov	r3, r2
 8006a7c:	00db      	lsls	r3, r3, #3
 8006a7e:	1a9b      	subs	r3, r3, r2
 8006a80:	009b      	lsls	r3, r3, #2
 8006a82:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8006a86:	687a      	ldr	r2, [r7, #4]
 8006a88:	4413      	add	r3, r2
 8006a8a:	3304      	adds	r3, #4
 8006a8c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	2200      	movs	r2, #0
 8006a92:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	2200      	movs	r2, #0
 8006a98:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006a9a:	78fb      	ldrb	r3, [r7, #3]
 8006a9c:	f003 030f 	and.w	r3, r3, #15
 8006aa0:	b2da      	uxtb	r2, r3
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8006aac:	2b01      	cmp	r3, #1
 8006aae:	d101      	bne.n	8006ab4 <HAL_PCD_EP_ClrStall+0x86>
 8006ab0:	2302      	movs	r3, #2
 8006ab2:	e00e      	b.n	8006ad2 <HAL_PCD_EP_ClrStall+0xa4>
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	2201      	movs	r2, #1
 8006ab8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	68f9      	ldr	r1, [r7, #12]
 8006ac2:	4618      	mov	r0, r3
 8006ac4:	f003 ff91 	bl	800a9ea <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	2200      	movs	r2, #0
 8006acc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8006ad0:	2300      	movs	r3, #0
}
 8006ad2:	4618      	mov	r0, r3
 8006ad4:	3710      	adds	r7, #16
 8006ad6:	46bd      	mov	sp, r7
 8006ad8:	bd80      	pop	{r7, pc}

08006ada <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006ada:	b580      	push	{r7, lr}
 8006adc:	b08a      	sub	sp, #40	; 0x28
 8006ade:	af02      	add	r7, sp, #8
 8006ae0:	6078      	str	r0, [r7, #4]
 8006ae2:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006aea:	697b      	ldr	r3, [r7, #20]
 8006aec:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8006aee:	683a      	ldr	r2, [r7, #0]
 8006af0:	4613      	mov	r3, r2
 8006af2:	00db      	lsls	r3, r3, #3
 8006af4:	1a9b      	subs	r3, r3, r2
 8006af6:	009b      	lsls	r3, r3, #2
 8006af8:	3338      	adds	r3, #56	; 0x38
 8006afa:	687a      	ldr	r2, [r7, #4]
 8006afc:	4413      	add	r3, r2
 8006afe:	3304      	adds	r3, #4
 8006b00:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	699a      	ldr	r2, [r3, #24]
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	695b      	ldr	r3, [r3, #20]
 8006b0a:	429a      	cmp	r2, r3
 8006b0c:	d901      	bls.n	8006b12 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8006b0e:	2301      	movs	r3, #1
 8006b10:	e06c      	b.n	8006bec <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	695a      	ldr	r2, [r3, #20]
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	699b      	ldr	r3, [r3, #24]
 8006b1a:	1ad3      	subs	r3, r2, r3
 8006b1c:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	689b      	ldr	r3, [r3, #8]
 8006b22:	69fa      	ldr	r2, [r7, #28]
 8006b24:	429a      	cmp	r2, r3
 8006b26:	d902      	bls.n	8006b2e <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	689b      	ldr	r3, [r3, #8]
 8006b2c:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8006b2e:	69fb      	ldr	r3, [r7, #28]
 8006b30:	3303      	adds	r3, #3
 8006b32:	089b      	lsrs	r3, r3, #2
 8006b34:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8006b36:	e02b      	b.n	8006b90 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	695a      	ldr	r2, [r3, #20]
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	699b      	ldr	r3, [r3, #24]
 8006b40:	1ad3      	subs	r3, r2, r3
 8006b42:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	689b      	ldr	r3, [r3, #8]
 8006b48:	69fa      	ldr	r2, [r7, #28]
 8006b4a:	429a      	cmp	r2, r3
 8006b4c:	d902      	bls.n	8006b54 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	689b      	ldr	r3, [r3, #8]
 8006b52:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8006b54:	69fb      	ldr	r3, [r7, #28]
 8006b56:	3303      	adds	r3, #3
 8006b58:	089b      	lsrs	r3, r3, #2
 8006b5a:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	68d9      	ldr	r1, [r3, #12]
 8006b60:	683b      	ldr	r3, [r7, #0]
 8006b62:	b2da      	uxtb	r2, r3
 8006b64:	69fb      	ldr	r3, [r7, #28]
 8006b66:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8006b6c:	b2db      	uxtb	r3, r3
 8006b6e:	9300      	str	r3, [sp, #0]
 8006b70:	4603      	mov	r3, r0
 8006b72:	6978      	ldr	r0, [r7, #20]
 8006b74:	f003 fe6d 	bl	800a852 <USB_WritePacket>

    ep->xfer_buff  += len;
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	68da      	ldr	r2, [r3, #12]
 8006b7c:	69fb      	ldr	r3, [r7, #28]
 8006b7e:	441a      	add	r2, r3
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	699a      	ldr	r2, [r3, #24]
 8006b88:	69fb      	ldr	r3, [r7, #28]
 8006b8a:	441a      	add	r2, r3
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8006b90:	683b      	ldr	r3, [r7, #0]
 8006b92:	015a      	lsls	r2, r3, #5
 8006b94:	693b      	ldr	r3, [r7, #16]
 8006b96:	4413      	add	r3, r2
 8006b98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b9c:	699b      	ldr	r3, [r3, #24]
 8006b9e:	b29b      	uxth	r3, r3
 8006ba0:	69ba      	ldr	r2, [r7, #24]
 8006ba2:	429a      	cmp	r2, r3
 8006ba4:	d809      	bhi.n	8006bba <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	699a      	ldr	r2, [r3, #24]
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8006bae:	429a      	cmp	r2, r3
 8006bb0:	d203      	bcs.n	8006bba <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	695b      	ldr	r3, [r3, #20]
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d1be      	bne.n	8006b38 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	695a      	ldr	r2, [r3, #20]
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	699b      	ldr	r3, [r3, #24]
 8006bc2:	429a      	cmp	r2, r3
 8006bc4:	d811      	bhi.n	8006bea <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8006bc6:	683b      	ldr	r3, [r7, #0]
 8006bc8:	f003 030f 	and.w	r3, r3, #15
 8006bcc:	2201      	movs	r2, #1
 8006bce:	fa02 f303 	lsl.w	r3, r2, r3
 8006bd2:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8006bd4:	693b      	ldr	r3, [r7, #16]
 8006bd6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006bda:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006bdc:	68bb      	ldr	r3, [r7, #8]
 8006bde:	43db      	mvns	r3, r3
 8006be0:	6939      	ldr	r1, [r7, #16]
 8006be2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006be6:	4013      	ands	r3, r2
 8006be8:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8006bea:	2300      	movs	r3, #0
}
 8006bec:	4618      	mov	r0, r3
 8006bee:	3720      	adds	r7, #32
 8006bf0:	46bd      	mov	sp, r7
 8006bf2:	bd80      	pop	{r7, pc}

08006bf4 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006bf4:	b580      	push	{r7, lr}
 8006bf6:	b086      	sub	sp, #24
 8006bf8:	af00      	add	r7, sp, #0
 8006bfa:	6078      	str	r0, [r7, #4]
 8006bfc:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c04:	697b      	ldr	r3, [r7, #20]
 8006c06:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8006c08:	697b      	ldr	r3, [r7, #20]
 8006c0a:	333c      	adds	r3, #60	; 0x3c
 8006c0c:	3304      	adds	r3, #4
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8006c12:	683b      	ldr	r3, [r7, #0]
 8006c14:	015a      	lsls	r2, r3, #5
 8006c16:	693b      	ldr	r3, [r7, #16]
 8006c18:	4413      	add	r3, r2
 8006c1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c1e:	689b      	ldr	r3, [r3, #8]
 8006c20:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	691b      	ldr	r3, [r3, #16]
 8006c26:	2b01      	cmp	r3, #1
 8006c28:	f040 80a0 	bne.w	8006d6c <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8006c2c:	68bb      	ldr	r3, [r7, #8]
 8006c2e:	f003 0308 	and.w	r3, r3, #8
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d015      	beq.n	8006c62 <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	4a72      	ldr	r2, [pc, #456]	; (8006e04 <PCD_EP_OutXfrComplete_int+0x210>)
 8006c3a:	4293      	cmp	r3, r2
 8006c3c:	f240 80dd 	bls.w	8006dfa <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8006c40:	68bb      	ldr	r3, [r7, #8]
 8006c42:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	f000 80d7 	beq.w	8006dfa <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006c4c:	683b      	ldr	r3, [r7, #0]
 8006c4e:	015a      	lsls	r2, r3, #5
 8006c50:	693b      	ldr	r3, [r7, #16]
 8006c52:	4413      	add	r3, r2
 8006c54:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c58:	461a      	mov	r2, r3
 8006c5a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006c5e:	6093      	str	r3, [r2, #8]
 8006c60:	e0cb      	b.n	8006dfa <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8006c62:	68bb      	ldr	r3, [r7, #8]
 8006c64:	f003 0320 	and.w	r3, r3, #32
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d009      	beq.n	8006c80 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8006c6c:	683b      	ldr	r3, [r7, #0]
 8006c6e:	015a      	lsls	r2, r3, #5
 8006c70:	693b      	ldr	r3, [r7, #16]
 8006c72:	4413      	add	r3, r2
 8006c74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c78:	461a      	mov	r2, r3
 8006c7a:	2320      	movs	r3, #32
 8006c7c:	6093      	str	r3, [r2, #8]
 8006c7e:	e0bc      	b.n	8006dfa <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8006c80:	68bb      	ldr	r3, [r7, #8]
 8006c82:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	f040 80b7 	bne.w	8006dfa <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	4a5d      	ldr	r2, [pc, #372]	; (8006e04 <PCD_EP_OutXfrComplete_int+0x210>)
 8006c90:	4293      	cmp	r3, r2
 8006c92:	d90f      	bls.n	8006cb4 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8006c94:	68bb      	ldr	r3, [r7, #8]
 8006c96:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d00a      	beq.n	8006cb4 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006c9e:	683b      	ldr	r3, [r7, #0]
 8006ca0:	015a      	lsls	r2, r3, #5
 8006ca2:	693b      	ldr	r3, [r7, #16]
 8006ca4:	4413      	add	r3, r2
 8006ca6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006caa:	461a      	mov	r2, r3
 8006cac:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006cb0:	6093      	str	r3, [r2, #8]
 8006cb2:	e0a2      	b.n	8006dfa <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8006cb4:	6879      	ldr	r1, [r7, #4]
 8006cb6:	683a      	ldr	r2, [r7, #0]
 8006cb8:	4613      	mov	r3, r2
 8006cba:	00db      	lsls	r3, r3, #3
 8006cbc:	1a9b      	subs	r3, r3, r2
 8006cbe:	009b      	lsls	r3, r3, #2
 8006cc0:	440b      	add	r3, r1
 8006cc2:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8006cc6:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8006cc8:	683b      	ldr	r3, [r7, #0]
 8006cca:	0159      	lsls	r1, r3, #5
 8006ccc:	693b      	ldr	r3, [r7, #16]
 8006cce:	440b      	add	r3, r1
 8006cd0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006cd4:	691b      	ldr	r3, [r3, #16]
 8006cd6:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8006cda:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8006cdc:	6878      	ldr	r0, [r7, #4]
 8006cde:	683a      	ldr	r2, [r7, #0]
 8006ce0:	4613      	mov	r3, r2
 8006ce2:	00db      	lsls	r3, r3, #3
 8006ce4:	1a9b      	subs	r3, r3, r2
 8006ce6:	009b      	lsls	r3, r3, #2
 8006ce8:	4403      	add	r3, r0
 8006cea:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8006cee:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8006cf0:	6879      	ldr	r1, [r7, #4]
 8006cf2:	683a      	ldr	r2, [r7, #0]
 8006cf4:	4613      	mov	r3, r2
 8006cf6:	00db      	lsls	r3, r3, #3
 8006cf8:	1a9b      	subs	r3, r3, r2
 8006cfa:	009b      	lsls	r3, r3, #2
 8006cfc:	440b      	add	r3, r1
 8006cfe:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8006d02:	6819      	ldr	r1, [r3, #0]
 8006d04:	6878      	ldr	r0, [r7, #4]
 8006d06:	683a      	ldr	r2, [r7, #0]
 8006d08:	4613      	mov	r3, r2
 8006d0a:	00db      	lsls	r3, r3, #3
 8006d0c:	1a9b      	subs	r3, r3, r2
 8006d0e:	009b      	lsls	r3, r3, #2
 8006d10:	4403      	add	r3, r0
 8006d12:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	4419      	add	r1, r3
 8006d1a:	6878      	ldr	r0, [r7, #4]
 8006d1c:	683a      	ldr	r2, [r7, #0]
 8006d1e:	4613      	mov	r3, r2
 8006d20:	00db      	lsls	r3, r3, #3
 8006d22:	1a9b      	subs	r3, r3, r2
 8006d24:	009b      	lsls	r3, r3, #2
 8006d26:	4403      	add	r3, r0
 8006d28:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8006d2c:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8006d2e:	683b      	ldr	r3, [r7, #0]
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d114      	bne.n	8006d5e <PCD_EP_OutXfrComplete_int+0x16a>
 8006d34:	6879      	ldr	r1, [r7, #4]
 8006d36:	683a      	ldr	r2, [r7, #0]
 8006d38:	4613      	mov	r3, r2
 8006d3a:	00db      	lsls	r3, r3, #3
 8006d3c:	1a9b      	subs	r3, r3, r2
 8006d3e:	009b      	lsls	r3, r3, #2
 8006d40:	440b      	add	r3, r1
 8006d42:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d108      	bne.n	8006d5e <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	6818      	ldr	r0, [r3, #0]
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8006d56:	461a      	mov	r2, r3
 8006d58:	2101      	movs	r1, #1
 8006d5a:	f003 ffd9 	bl	800ad10 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006d5e:	683b      	ldr	r3, [r7, #0]
 8006d60:	b2db      	uxtb	r3, r3
 8006d62:	4619      	mov	r1, r3
 8006d64:	6878      	ldr	r0, [r7, #4]
 8006d66:	f005 febd 	bl	800cae4 <HAL_PCD_DataOutStageCallback>
 8006d6a:	e046      	b.n	8006dfa <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	4a26      	ldr	r2, [pc, #152]	; (8006e08 <PCD_EP_OutXfrComplete_int+0x214>)
 8006d70:	4293      	cmp	r3, r2
 8006d72:	d124      	bne.n	8006dbe <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8006d74:	68bb      	ldr	r3, [r7, #8]
 8006d76:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d00a      	beq.n	8006d94 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006d7e:	683b      	ldr	r3, [r7, #0]
 8006d80:	015a      	lsls	r2, r3, #5
 8006d82:	693b      	ldr	r3, [r7, #16]
 8006d84:	4413      	add	r3, r2
 8006d86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d8a:	461a      	mov	r2, r3
 8006d8c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006d90:	6093      	str	r3, [r2, #8]
 8006d92:	e032      	b.n	8006dfa <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8006d94:	68bb      	ldr	r3, [r7, #8]
 8006d96:	f003 0320 	and.w	r3, r3, #32
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d008      	beq.n	8006db0 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8006d9e:	683b      	ldr	r3, [r7, #0]
 8006da0:	015a      	lsls	r2, r3, #5
 8006da2:	693b      	ldr	r3, [r7, #16]
 8006da4:	4413      	add	r3, r2
 8006da6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006daa:	461a      	mov	r2, r3
 8006dac:	2320      	movs	r3, #32
 8006dae:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006db0:	683b      	ldr	r3, [r7, #0]
 8006db2:	b2db      	uxtb	r3, r3
 8006db4:	4619      	mov	r1, r3
 8006db6:	6878      	ldr	r0, [r7, #4]
 8006db8:	f005 fe94 	bl	800cae4 <HAL_PCD_DataOutStageCallback>
 8006dbc:	e01d      	b.n	8006dfa <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8006dbe:	683b      	ldr	r3, [r7, #0]
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d114      	bne.n	8006dee <PCD_EP_OutXfrComplete_int+0x1fa>
 8006dc4:	6879      	ldr	r1, [r7, #4]
 8006dc6:	683a      	ldr	r2, [r7, #0]
 8006dc8:	4613      	mov	r3, r2
 8006dca:	00db      	lsls	r3, r3, #3
 8006dcc:	1a9b      	subs	r3, r3, r2
 8006dce:	009b      	lsls	r3, r3, #2
 8006dd0:	440b      	add	r3, r1
 8006dd2:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d108      	bne.n	8006dee <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	6818      	ldr	r0, [r3, #0]
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8006de6:	461a      	mov	r2, r3
 8006de8:	2100      	movs	r1, #0
 8006dea:	f003 ff91 	bl	800ad10 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006dee:	683b      	ldr	r3, [r7, #0]
 8006df0:	b2db      	uxtb	r3, r3
 8006df2:	4619      	mov	r1, r3
 8006df4:	6878      	ldr	r0, [r7, #4]
 8006df6:	f005 fe75 	bl	800cae4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8006dfa:	2300      	movs	r3, #0
}
 8006dfc:	4618      	mov	r0, r3
 8006dfe:	3718      	adds	r7, #24
 8006e00:	46bd      	mov	sp, r7
 8006e02:	bd80      	pop	{r7, pc}
 8006e04:	4f54300a 	.word	0x4f54300a
 8006e08:	4f54310a 	.word	0x4f54310a

08006e0c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006e0c:	b580      	push	{r7, lr}
 8006e0e:	b086      	sub	sp, #24
 8006e10:	af00      	add	r7, sp, #0
 8006e12:	6078      	str	r0, [r7, #4]
 8006e14:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e1c:	697b      	ldr	r3, [r7, #20]
 8006e1e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8006e20:	697b      	ldr	r3, [r7, #20]
 8006e22:	333c      	adds	r3, #60	; 0x3c
 8006e24:	3304      	adds	r3, #4
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8006e2a:	683b      	ldr	r3, [r7, #0]
 8006e2c:	015a      	lsls	r2, r3, #5
 8006e2e:	693b      	ldr	r3, [r7, #16]
 8006e30:	4413      	add	r3, r2
 8006e32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e36:	689b      	ldr	r3, [r3, #8]
 8006e38:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	4a15      	ldr	r2, [pc, #84]	; (8006e94 <PCD_EP_OutSetupPacket_int+0x88>)
 8006e3e:	4293      	cmp	r3, r2
 8006e40:	d90e      	bls.n	8006e60 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8006e42:	68bb      	ldr	r3, [r7, #8]
 8006e44:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d009      	beq.n	8006e60 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006e4c:	683b      	ldr	r3, [r7, #0]
 8006e4e:	015a      	lsls	r2, r3, #5
 8006e50:	693b      	ldr	r3, [r7, #16]
 8006e52:	4413      	add	r3, r2
 8006e54:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e58:	461a      	mov	r2, r3
 8006e5a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006e5e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8006e60:	6878      	ldr	r0, [r7, #4]
 8006e62:	f005 fe2d 	bl	800cac0 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	4a0a      	ldr	r2, [pc, #40]	; (8006e94 <PCD_EP_OutSetupPacket_int+0x88>)
 8006e6a:	4293      	cmp	r3, r2
 8006e6c:	d90c      	bls.n	8006e88 <PCD_EP_OutSetupPacket_int+0x7c>
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	691b      	ldr	r3, [r3, #16]
 8006e72:	2b01      	cmp	r3, #1
 8006e74:	d108      	bne.n	8006e88 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	6818      	ldr	r0, [r3, #0]
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8006e80:	461a      	mov	r2, r3
 8006e82:	2101      	movs	r1, #1
 8006e84:	f003 ff44 	bl	800ad10 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8006e88:	2300      	movs	r3, #0
}
 8006e8a:	4618      	mov	r0, r3
 8006e8c:	3718      	adds	r7, #24
 8006e8e:	46bd      	mov	sp, r7
 8006e90:	bd80      	pop	{r7, pc}
 8006e92:	bf00      	nop
 8006e94:	4f54300a 	.word	0x4f54300a

08006e98 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8006e98:	b480      	push	{r7}
 8006e9a:	b085      	sub	sp, #20
 8006e9c:	af00      	add	r7, sp, #0
 8006e9e:	6078      	str	r0, [r7, #4]
 8006ea0:	460b      	mov	r3, r1
 8006ea2:	70fb      	strb	r3, [r7, #3]
 8006ea4:	4613      	mov	r3, r2
 8006ea6:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006eae:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8006eb0:	78fb      	ldrb	r3, [r7, #3]
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d107      	bne.n	8006ec6 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8006eb6:	883b      	ldrh	r3, [r7, #0]
 8006eb8:	0419      	lsls	r1, r3, #16
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	68ba      	ldr	r2, [r7, #8]
 8006ec0:	430a      	orrs	r2, r1
 8006ec2:	629a      	str	r2, [r3, #40]	; 0x28
 8006ec4:	e028      	b.n	8006f18 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ecc:	0c1b      	lsrs	r3, r3, #16
 8006ece:	68ba      	ldr	r2, [r7, #8]
 8006ed0:	4413      	add	r3, r2
 8006ed2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8006ed4:	2300      	movs	r3, #0
 8006ed6:	73fb      	strb	r3, [r7, #15]
 8006ed8:	e00d      	b.n	8006ef6 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	681a      	ldr	r2, [r3, #0]
 8006ede:	7bfb      	ldrb	r3, [r7, #15]
 8006ee0:	3340      	adds	r3, #64	; 0x40
 8006ee2:	009b      	lsls	r3, r3, #2
 8006ee4:	4413      	add	r3, r2
 8006ee6:	685b      	ldr	r3, [r3, #4]
 8006ee8:	0c1b      	lsrs	r3, r3, #16
 8006eea:	68ba      	ldr	r2, [r7, #8]
 8006eec:	4413      	add	r3, r2
 8006eee:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8006ef0:	7bfb      	ldrb	r3, [r7, #15]
 8006ef2:	3301      	adds	r3, #1
 8006ef4:	73fb      	strb	r3, [r7, #15]
 8006ef6:	7bfa      	ldrb	r2, [r7, #15]
 8006ef8:	78fb      	ldrb	r3, [r7, #3]
 8006efa:	3b01      	subs	r3, #1
 8006efc:	429a      	cmp	r2, r3
 8006efe:	d3ec      	bcc.n	8006eda <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8006f00:	883b      	ldrh	r3, [r7, #0]
 8006f02:	0418      	lsls	r0, r3, #16
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	6819      	ldr	r1, [r3, #0]
 8006f08:	78fb      	ldrb	r3, [r7, #3]
 8006f0a:	3b01      	subs	r3, #1
 8006f0c:	68ba      	ldr	r2, [r7, #8]
 8006f0e:	4302      	orrs	r2, r0
 8006f10:	3340      	adds	r3, #64	; 0x40
 8006f12:	009b      	lsls	r3, r3, #2
 8006f14:	440b      	add	r3, r1
 8006f16:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8006f18:	2300      	movs	r3, #0
}
 8006f1a:	4618      	mov	r0, r3
 8006f1c:	3714      	adds	r7, #20
 8006f1e:	46bd      	mov	sp, r7
 8006f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f24:	4770      	bx	lr

08006f26 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8006f26:	b480      	push	{r7}
 8006f28:	b083      	sub	sp, #12
 8006f2a:	af00      	add	r7, sp, #0
 8006f2c:	6078      	str	r0, [r7, #4]
 8006f2e:	460b      	mov	r3, r1
 8006f30:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	887a      	ldrh	r2, [r7, #2]
 8006f38:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8006f3a:	2300      	movs	r3, #0
}
 8006f3c:	4618      	mov	r0, r3
 8006f3e:	370c      	adds	r7, #12
 8006f40:	46bd      	mov	sp, r7
 8006f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f46:	4770      	bx	lr

08006f48 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8006f48:	b480      	push	{r7}
 8006f4a:	b083      	sub	sp, #12
 8006f4c:	af00      	add	r7, sp, #0
 8006f4e:	6078      	str	r0, [r7, #4]
 8006f50:	460b      	mov	r3, r1
 8006f52:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8006f54:	bf00      	nop
 8006f56:	370c      	adds	r7, #12
 8006f58:	46bd      	mov	sp, r7
 8006f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f5e:	4770      	bx	lr

08006f60 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006f60:	b580      	push	{r7, lr}
 8006f62:	b086      	sub	sp, #24
 8006f64:	af00      	add	r7, sp, #0
 8006f66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d101      	bne.n	8006f72 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006f6e:	2301      	movs	r3, #1
 8006f70:	e30d      	b.n	800758e <HAL_RCC_OscConfig+0x62e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	2b0f      	cmp	r3, #15
 8006f78:	d903      	bls.n	8006f82 <HAL_RCC_OscConfig+0x22>
 8006f7a:	21e8      	movs	r1, #232	; 0xe8
 8006f7c:	48a3      	ldr	r0, [pc, #652]	; (800720c <HAL_RCC_OscConfig+0x2ac>)
 8006f7e:	f7fb fab2 	bl	80024e6 <assert_failed>
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	f003 0301 	and.w	r3, r3, #1
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	f000 8088 	beq.w	80070a0 <HAL_RCC_OscConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	685b      	ldr	r3, [r3, #4]
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d00d      	beq.n	8006fb4 <HAL_RCC_OscConfig+0x54>
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	685b      	ldr	r3, [r3, #4]
 8006f9c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006fa0:	d008      	beq.n	8006fb4 <HAL_RCC_OscConfig+0x54>
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	685b      	ldr	r3, [r3, #4]
 8006fa6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006faa:	d003      	beq.n	8006fb4 <HAL_RCC_OscConfig+0x54>
 8006fac:	21ed      	movs	r1, #237	; 0xed
 8006fae:	4897      	ldr	r0, [pc, #604]	; (800720c <HAL_RCC_OscConfig+0x2ac>)
 8006fb0:	f7fb fa99 	bl	80024e6 <assert_failed>
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006fb4:	4b96      	ldr	r3, [pc, #600]	; (8007210 <HAL_RCC_OscConfig+0x2b0>)
 8006fb6:	689b      	ldr	r3, [r3, #8]
 8006fb8:	f003 030c 	and.w	r3, r3, #12
 8006fbc:	2b04      	cmp	r3, #4
 8006fbe:	d00c      	beq.n	8006fda <HAL_RCC_OscConfig+0x7a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006fc0:	4b93      	ldr	r3, [pc, #588]	; (8007210 <HAL_RCC_OscConfig+0x2b0>)
 8006fc2:	689b      	ldr	r3, [r3, #8]
 8006fc4:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006fc8:	2b08      	cmp	r3, #8
 8006fca:	d112      	bne.n	8006ff2 <HAL_RCC_OscConfig+0x92>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006fcc:	4b90      	ldr	r3, [pc, #576]	; (8007210 <HAL_RCC_OscConfig+0x2b0>)
 8006fce:	685b      	ldr	r3, [r3, #4]
 8006fd0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006fd4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006fd8:	d10b      	bne.n	8006ff2 <HAL_RCC_OscConfig+0x92>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006fda:	4b8d      	ldr	r3, [pc, #564]	; (8007210 <HAL_RCC_OscConfig+0x2b0>)
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d05b      	beq.n	800709e <HAL_RCC_OscConfig+0x13e>
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	685b      	ldr	r3, [r3, #4]
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d157      	bne.n	800709e <HAL_RCC_OscConfig+0x13e>
      {
        return HAL_ERROR;
 8006fee:	2301      	movs	r3, #1
 8006ff0:	e2cd      	b.n	800758e <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	685b      	ldr	r3, [r3, #4]
 8006ff6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006ffa:	d106      	bne.n	800700a <HAL_RCC_OscConfig+0xaa>
 8006ffc:	4b84      	ldr	r3, [pc, #528]	; (8007210 <HAL_RCC_OscConfig+0x2b0>)
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	4a83      	ldr	r2, [pc, #524]	; (8007210 <HAL_RCC_OscConfig+0x2b0>)
 8007002:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007006:	6013      	str	r3, [r2, #0]
 8007008:	e01d      	b.n	8007046 <HAL_RCC_OscConfig+0xe6>
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	685b      	ldr	r3, [r3, #4]
 800700e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007012:	d10c      	bne.n	800702e <HAL_RCC_OscConfig+0xce>
 8007014:	4b7e      	ldr	r3, [pc, #504]	; (8007210 <HAL_RCC_OscConfig+0x2b0>)
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	4a7d      	ldr	r2, [pc, #500]	; (8007210 <HAL_RCC_OscConfig+0x2b0>)
 800701a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800701e:	6013      	str	r3, [r2, #0]
 8007020:	4b7b      	ldr	r3, [pc, #492]	; (8007210 <HAL_RCC_OscConfig+0x2b0>)
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	4a7a      	ldr	r2, [pc, #488]	; (8007210 <HAL_RCC_OscConfig+0x2b0>)
 8007026:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800702a:	6013      	str	r3, [r2, #0]
 800702c:	e00b      	b.n	8007046 <HAL_RCC_OscConfig+0xe6>
 800702e:	4b78      	ldr	r3, [pc, #480]	; (8007210 <HAL_RCC_OscConfig+0x2b0>)
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	4a77      	ldr	r2, [pc, #476]	; (8007210 <HAL_RCC_OscConfig+0x2b0>)
 8007034:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007038:	6013      	str	r3, [r2, #0]
 800703a:	4b75      	ldr	r3, [pc, #468]	; (8007210 <HAL_RCC_OscConfig+0x2b0>)
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	4a74      	ldr	r2, [pc, #464]	; (8007210 <HAL_RCC_OscConfig+0x2b0>)
 8007040:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007044:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	685b      	ldr	r3, [r3, #4]
 800704a:	2b00      	cmp	r3, #0
 800704c:	d013      	beq.n	8007076 <HAL_RCC_OscConfig+0x116>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800704e:	f7fb fd21 	bl	8002a94 <HAL_GetTick>
 8007052:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007054:	e008      	b.n	8007068 <HAL_RCC_OscConfig+0x108>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007056:	f7fb fd1d 	bl	8002a94 <HAL_GetTick>
 800705a:	4602      	mov	r2, r0
 800705c:	693b      	ldr	r3, [r7, #16]
 800705e:	1ad3      	subs	r3, r2, r3
 8007060:	2b64      	cmp	r3, #100	; 0x64
 8007062:	d901      	bls.n	8007068 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8007064:	2303      	movs	r3, #3
 8007066:	e292      	b.n	800758e <HAL_RCC_OscConfig+0x62e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007068:	4b69      	ldr	r3, [pc, #420]	; (8007210 <HAL_RCC_OscConfig+0x2b0>)
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007070:	2b00      	cmp	r3, #0
 8007072:	d0f0      	beq.n	8007056 <HAL_RCC_OscConfig+0xf6>
 8007074:	e014      	b.n	80070a0 <HAL_RCC_OscConfig+0x140>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007076:	f7fb fd0d 	bl	8002a94 <HAL_GetTick>
 800707a:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800707c:	e008      	b.n	8007090 <HAL_RCC_OscConfig+0x130>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800707e:	f7fb fd09 	bl	8002a94 <HAL_GetTick>
 8007082:	4602      	mov	r2, r0
 8007084:	693b      	ldr	r3, [r7, #16]
 8007086:	1ad3      	subs	r3, r2, r3
 8007088:	2b64      	cmp	r3, #100	; 0x64
 800708a:	d901      	bls.n	8007090 <HAL_RCC_OscConfig+0x130>
          {
            return HAL_TIMEOUT;
 800708c:	2303      	movs	r3, #3
 800708e:	e27e      	b.n	800758e <HAL_RCC_OscConfig+0x62e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007090:	4b5f      	ldr	r3, [pc, #380]	; (8007210 <HAL_RCC_OscConfig+0x2b0>)
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007098:	2b00      	cmp	r3, #0
 800709a:	d1f0      	bne.n	800707e <HAL_RCC_OscConfig+0x11e>
 800709c:	e000      	b.n	80070a0 <HAL_RCC_OscConfig+0x140>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800709e:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	f003 0302 	and.w	r3, r3, #2
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d079      	beq.n	80071a0 <HAL_RCC_OscConfig+0x240>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	68db      	ldr	r3, [r3, #12]
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d008      	beq.n	80070c6 <HAL_RCC_OscConfig+0x166>
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	68db      	ldr	r3, [r3, #12]
 80070b8:	2b01      	cmp	r3, #1
 80070ba:	d004      	beq.n	80070c6 <HAL_RCC_OscConfig+0x166>
 80070bc:	f240 111f 	movw	r1, #287	; 0x11f
 80070c0:	4852      	ldr	r0, [pc, #328]	; (800720c <HAL_RCC_OscConfig+0x2ac>)
 80070c2:	f7fb fa10 	bl	80024e6 <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	691b      	ldr	r3, [r3, #16]
 80070ca:	2b1f      	cmp	r3, #31
 80070cc:	d904      	bls.n	80070d8 <HAL_RCC_OscConfig+0x178>
 80070ce:	f44f 7190 	mov.w	r1, #288	; 0x120
 80070d2:	484e      	ldr	r0, [pc, #312]	; (800720c <HAL_RCC_OscConfig+0x2ac>)
 80070d4:	f7fb fa07 	bl	80024e6 <assert_failed>

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80070d8:	4b4d      	ldr	r3, [pc, #308]	; (8007210 <HAL_RCC_OscConfig+0x2b0>)
 80070da:	689b      	ldr	r3, [r3, #8]
 80070dc:	f003 030c 	and.w	r3, r3, #12
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d00b      	beq.n	80070fc <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80070e4:	4b4a      	ldr	r3, [pc, #296]	; (8007210 <HAL_RCC_OscConfig+0x2b0>)
 80070e6:	689b      	ldr	r3, [r3, #8]
 80070e8:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80070ec:	2b08      	cmp	r3, #8
 80070ee:	d11c      	bne.n	800712a <HAL_RCC_OscConfig+0x1ca>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80070f0:	4b47      	ldr	r3, [pc, #284]	; (8007210 <HAL_RCC_OscConfig+0x2b0>)
 80070f2:	685b      	ldr	r3, [r3, #4]
 80070f4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d116      	bne.n	800712a <HAL_RCC_OscConfig+0x1ca>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80070fc:	4b44      	ldr	r3, [pc, #272]	; (8007210 <HAL_RCC_OscConfig+0x2b0>)
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	f003 0302 	and.w	r3, r3, #2
 8007104:	2b00      	cmp	r3, #0
 8007106:	d005      	beq.n	8007114 <HAL_RCC_OscConfig+0x1b4>
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	68db      	ldr	r3, [r3, #12]
 800710c:	2b01      	cmp	r3, #1
 800710e:	d001      	beq.n	8007114 <HAL_RCC_OscConfig+0x1b4>
      {
        return HAL_ERROR;
 8007110:	2301      	movs	r3, #1
 8007112:	e23c      	b.n	800758e <HAL_RCC_OscConfig+0x62e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007114:	4b3e      	ldr	r3, [pc, #248]	; (8007210 <HAL_RCC_OscConfig+0x2b0>)
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	691b      	ldr	r3, [r3, #16]
 8007120:	00db      	lsls	r3, r3, #3
 8007122:	493b      	ldr	r1, [pc, #236]	; (8007210 <HAL_RCC_OscConfig+0x2b0>)
 8007124:	4313      	orrs	r3, r2
 8007126:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007128:	e03a      	b.n	80071a0 <HAL_RCC_OscConfig+0x240>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	68db      	ldr	r3, [r3, #12]
 800712e:	2b00      	cmp	r3, #0
 8007130:	d020      	beq.n	8007174 <HAL_RCC_OscConfig+0x214>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007132:	4b38      	ldr	r3, [pc, #224]	; (8007214 <HAL_RCC_OscConfig+0x2b4>)
 8007134:	2201      	movs	r2, #1
 8007136:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007138:	f7fb fcac 	bl	8002a94 <HAL_GetTick>
 800713c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800713e:	e008      	b.n	8007152 <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007140:	f7fb fca8 	bl	8002a94 <HAL_GetTick>
 8007144:	4602      	mov	r2, r0
 8007146:	693b      	ldr	r3, [r7, #16]
 8007148:	1ad3      	subs	r3, r2, r3
 800714a:	2b02      	cmp	r3, #2
 800714c:	d901      	bls.n	8007152 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800714e:	2303      	movs	r3, #3
 8007150:	e21d      	b.n	800758e <HAL_RCC_OscConfig+0x62e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007152:	4b2f      	ldr	r3, [pc, #188]	; (8007210 <HAL_RCC_OscConfig+0x2b0>)
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	f003 0302 	and.w	r3, r3, #2
 800715a:	2b00      	cmp	r3, #0
 800715c:	d0f0      	beq.n	8007140 <HAL_RCC_OscConfig+0x1e0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800715e:	4b2c      	ldr	r3, [pc, #176]	; (8007210 <HAL_RCC_OscConfig+0x2b0>)
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	691b      	ldr	r3, [r3, #16]
 800716a:	00db      	lsls	r3, r3, #3
 800716c:	4928      	ldr	r1, [pc, #160]	; (8007210 <HAL_RCC_OscConfig+0x2b0>)
 800716e:	4313      	orrs	r3, r2
 8007170:	600b      	str	r3, [r1, #0]
 8007172:	e015      	b.n	80071a0 <HAL_RCC_OscConfig+0x240>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007174:	4b27      	ldr	r3, [pc, #156]	; (8007214 <HAL_RCC_OscConfig+0x2b4>)
 8007176:	2200      	movs	r2, #0
 8007178:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800717a:	f7fb fc8b 	bl	8002a94 <HAL_GetTick>
 800717e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007180:	e008      	b.n	8007194 <HAL_RCC_OscConfig+0x234>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007182:	f7fb fc87 	bl	8002a94 <HAL_GetTick>
 8007186:	4602      	mov	r2, r0
 8007188:	693b      	ldr	r3, [r7, #16]
 800718a:	1ad3      	subs	r3, r2, r3
 800718c:	2b02      	cmp	r3, #2
 800718e:	d901      	bls.n	8007194 <HAL_RCC_OscConfig+0x234>
          {
            return HAL_TIMEOUT;
 8007190:	2303      	movs	r3, #3
 8007192:	e1fc      	b.n	800758e <HAL_RCC_OscConfig+0x62e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007194:	4b1e      	ldr	r3, [pc, #120]	; (8007210 <HAL_RCC_OscConfig+0x2b0>)
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	f003 0302 	and.w	r3, r3, #2
 800719c:	2b00      	cmp	r3, #0
 800719e:	d1f0      	bne.n	8007182 <HAL_RCC_OscConfig+0x222>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	f003 0308 	and.w	r3, r3, #8
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d046      	beq.n	800723a <HAL_RCC_OscConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	695b      	ldr	r3, [r3, #20]
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d008      	beq.n	80071c6 <HAL_RCC_OscConfig+0x266>
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	695b      	ldr	r3, [r3, #20]
 80071b8:	2b01      	cmp	r3, #1
 80071ba:	d004      	beq.n	80071c6 <HAL_RCC_OscConfig+0x266>
 80071bc:	f44f 71b0 	mov.w	r1, #352	; 0x160
 80071c0:	4812      	ldr	r0, [pc, #72]	; (800720c <HAL_RCC_OscConfig+0x2ac>)
 80071c2:	f7fb f990 	bl	80024e6 <assert_failed>

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	695b      	ldr	r3, [r3, #20]
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d016      	beq.n	80071fc <HAL_RCC_OscConfig+0x29c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80071ce:	4b12      	ldr	r3, [pc, #72]	; (8007218 <HAL_RCC_OscConfig+0x2b8>)
 80071d0:	2201      	movs	r2, #1
 80071d2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80071d4:	f7fb fc5e 	bl	8002a94 <HAL_GetTick>
 80071d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80071da:	e008      	b.n	80071ee <HAL_RCC_OscConfig+0x28e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80071dc:	f7fb fc5a 	bl	8002a94 <HAL_GetTick>
 80071e0:	4602      	mov	r2, r0
 80071e2:	693b      	ldr	r3, [r7, #16]
 80071e4:	1ad3      	subs	r3, r2, r3
 80071e6:	2b02      	cmp	r3, #2
 80071e8:	d901      	bls.n	80071ee <HAL_RCC_OscConfig+0x28e>
        {
          return HAL_TIMEOUT;
 80071ea:	2303      	movs	r3, #3
 80071ec:	e1cf      	b.n	800758e <HAL_RCC_OscConfig+0x62e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80071ee:	4b08      	ldr	r3, [pc, #32]	; (8007210 <HAL_RCC_OscConfig+0x2b0>)
 80071f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80071f2:	f003 0302 	and.w	r3, r3, #2
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d0f0      	beq.n	80071dc <HAL_RCC_OscConfig+0x27c>
 80071fa:	e01e      	b.n	800723a <HAL_RCC_OscConfig+0x2da>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80071fc:	4b06      	ldr	r3, [pc, #24]	; (8007218 <HAL_RCC_OscConfig+0x2b8>)
 80071fe:	2200      	movs	r2, #0
 8007200:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007202:	f7fb fc47 	bl	8002a94 <HAL_GetTick>
 8007206:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007208:	e011      	b.n	800722e <HAL_RCC_OscConfig+0x2ce>
 800720a:	bf00      	nop
 800720c:	0800fe84 	.word	0x0800fe84
 8007210:	40023800 	.word	0x40023800
 8007214:	42470000 	.word	0x42470000
 8007218:	42470e80 	.word	0x42470e80
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800721c:	f7fb fc3a 	bl	8002a94 <HAL_GetTick>
 8007220:	4602      	mov	r2, r0
 8007222:	693b      	ldr	r3, [r7, #16]
 8007224:	1ad3      	subs	r3, r2, r3
 8007226:	2b02      	cmp	r3, #2
 8007228:	d901      	bls.n	800722e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800722a:	2303      	movs	r3, #3
 800722c:	e1af      	b.n	800758e <HAL_RCC_OscConfig+0x62e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800722e:	4b97      	ldr	r3, [pc, #604]	; (800748c <HAL_RCC_OscConfig+0x52c>)
 8007230:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007232:	f003 0302 	and.w	r3, r3, #2
 8007236:	2b00      	cmp	r3, #0
 8007238:	d1f0      	bne.n	800721c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	f003 0304 	and.w	r3, r3, #4
 8007242:	2b00      	cmp	r3, #0
 8007244:	f000 80a8 	beq.w	8007398 <HAL_RCC_OscConfig+0x438>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007248:	2300      	movs	r3, #0
 800724a:	75fb      	strb	r3, [r7, #23]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	689b      	ldr	r3, [r3, #8]
 8007250:	2b00      	cmp	r3, #0
 8007252:	d00c      	beq.n	800726e <HAL_RCC_OscConfig+0x30e>
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	689b      	ldr	r3, [r3, #8]
 8007258:	2b01      	cmp	r3, #1
 800725a:	d008      	beq.n	800726e <HAL_RCC_OscConfig+0x30e>
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	689b      	ldr	r3, [r3, #8]
 8007260:	2b05      	cmp	r3, #5
 8007262:	d004      	beq.n	800726e <HAL_RCC_OscConfig+0x30e>
 8007264:	f44f 71c6 	mov.w	r1, #396	; 0x18c
 8007268:	4889      	ldr	r0, [pc, #548]	; (8007490 <HAL_RCC_OscConfig+0x530>)
 800726a:	f7fb f93c 	bl	80024e6 <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800726e:	4b87      	ldr	r3, [pc, #540]	; (800748c <HAL_RCC_OscConfig+0x52c>)
 8007270:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007272:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007276:	2b00      	cmp	r3, #0
 8007278:	d10f      	bne.n	800729a <HAL_RCC_OscConfig+0x33a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800727a:	2300      	movs	r3, #0
 800727c:	60bb      	str	r3, [r7, #8]
 800727e:	4b83      	ldr	r3, [pc, #524]	; (800748c <HAL_RCC_OscConfig+0x52c>)
 8007280:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007282:	4a82      	ldr	r2, [pc, #520]	; (800748c <HAL_RCC_OscConfig+0x52c>)
 8007284:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007288:	6413      	str	r3, [r2, #64]	; 0x40
 800728a:	4b80      	ldr	r3, [pc, #512]	; (800748c <HAL_RCC_OscConfig+0x52c>)
 800728c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800728e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007292:	60bb      	str	r3, [r7, #8]
 8007294:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007296:	2301      	movs	r3, #1
 8007298:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800729a:	4b7e      	ldr	r3, [pc, #504]	; (8007494 <HAL_RCC_OscConfig+0x534>)
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d118      	bne.n	80072d8 <HAL_RCC_OscConfig+0x378>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80072a6:	4b7b      	ldr	r3, [pc, #492]	; (8007494 <HAL_RCC_OscConfig+0x534>)
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	4a7a      	ldr	r2, [pc, #488]	; (8007494 <HAL_RCC_OscConfig+0x534>)
 80072ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80072b0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80072b2:	f7fb fbef 	bl	8002a94 <HAL_GetTick>
 80072b6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80072b8:	e008      	b.n	80072cc <HAL_RCC_OscConfig+0x36c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80072ba:	f7fb fbeb 	bl	8002a94 <HAL_GetTick>
 80072be:	4602      	mov	r2, r0
 80072c0:	693b      	ldr	r3, [r7, #16]
 80072c2:	1ad3      	subs	r3, r2, r3
 80072c4:	2b02      	cmp	r3, #2
 80072c6:	d901      	bls.n	80072cc <HAL_RCC_OscConfig+0x36c>
        {
          return HAL_TIMEOUT;
 80072c8:	2303      	movs	r3, #3
 80072ca:	e160      	b.n	800758e <HAL_RCC_OscConfig+0x62e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80072cc:	4b71      	ldr	r3, [pc, #452]	; (8007494 <HAL_RCC_OscConfig+0x534>)
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	d0f0      	beq.n	80072ba <HAL_RCC_OscConfig+0x35a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	689b      	ldr	r3, [r3, #8]
 80072dc:	2b01      	cmp	r3, #1
 80072de:	d106      	bne.n	80072ee <HAL_RCC_OscConfig+0x38e>
 80072e0:	4b6a      	ldr	r3, [pc, #424]	; (800748c <HAL_RCC_OscConfig+0x52c>)
 80072e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80072e4:	4a69      	ldr	r2, [pc, #420]	; (800748c <HAL_RCC_OscConfig+0x52c>)
 80072e6:	f043 0301 	orr.w	r3, r3, #1
 80072ea:	6713      	str	r3, [r2, #112]	; 0x70
 80072ec:	e01c      	b.n	8007328 <HAL_RCC_OscConfig+0x3c8>
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	689b      	ldr	r3, [r3, #8]
 80072f2:	2b05      	cmp	r3, #5
 80072f4:	d10c      	bne.n	8007310 <HAL_RCC_OscConfig+0x3b0>
 80072f6:	4b65      	ldr	r3, [pc, #404]	; (800748c <HAL_RCC_OscConfig+0x52c>)
 80072f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80072fa:	4a64      	ldr	r2, [pc, #400]	; (800748c <HAL_RCC_OscConfig+0x52c>)
 80072fc:	f043 0304 	orr.w	r3, r3, #4
 8007300:	6713      	str	r3, [r2, #112]	; 0x70
 8007302:	4b62      	ldr	r3, [pc, #392]	; (800748c <HAL_RCC_OscConfig+0x52c>)
 8007304:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007306:	4a61      	ldr	r2, [pc, #388]	; (800748c <HAL_RCC_OscConfig+0x52c>)
 8007308:	f043 0301 	orr.w	r3, r3, #1
 800730c:	6713      	str	r3, [r2, #112]	; 0x70
 800730e:	e00b      	b.n	8007328 <HAL_RCC_OscConfig+0x3c8>
 8007310:	4b5e      	ldr	r3, [pc, #376]	; (800748c <HAL_RCC_OscConfig+0x52c>)
 8007312:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007314:	4a5d      	ldr	r2, [pc, #372]	; (800748c <HAL_RCC_OscConfig+0x52c>)
 8007316:	f023 0301 	bic.w	r3, r3, #1
 800731a:	6713      	str	r3, [r2, #112]	; 0x70
 800731c:	4b5b      	ldr	r3, [pc, #364]	; (800748c <HAL_RCC_OscConfig+0x52c>)
 800731e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007320:	4a5a      	ldr	r2, [pc, #360]	; (800748c <HAL_RCC_OscConfig+0x52c>)
 8007322:	f023 0304 	bic.w	r3, r3, #4
 8007326:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	689b      	ldr	r3, [r3, #8]
 800732c:	2b00      	cmp	r3, #0
 800732e:	d015      	beq.n	800735c <HAL_RCC_OscConfig+0x3fc>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007330:	f7fb fbb0 	bl	8002a94 <HAL_GetTick>
 8007334:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007336:	e00a      	b.n	800734e <HAL_RCC_OscConfig+0x3ee>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007338:	f7fb fbac 	bl	8002a94 <HAL_GetTick>
 800733c:	4602      	mov	r2, r0
 800733e:	693b      	ldr	r3, [r7, #16]
 8007340:	1ad3      	subs	r3, r2, r3
 8007342:	f241 3288 	movw	r2, #5000	; 0x1388
 8007346:	4293      	cmp	r3, r2
 8007348:	d901      	bls.n	800734e <HAL_RCC_OscConfig+0x3ee>
        {
          return HAL_TIMEOUT;
 800734a:	2303      	movs	r3, #3
 800734c:	e11f      	b.n	800758e <HAL_RCC_OscConfig+0x62e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800734e:	4b4f      	ldr	r3, [pc, #316]	; (800748c <HAL_RCC_OscConfig+0x52c>)
 8007350:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007352:	f003 0302 	and.w	r3, r3, #2
 8007356:	2b00      	cmp	r3, #0
 8007358:	d0ee      	beq.n	8007338 <HAL_RCC_OscConfig+0x3d8>
 800735a:	e014      	b.n	8007386 <HAL_RCC_OscConfig+0x426>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800735c:	f7fb fb9a 	bl	8002a94 <HAL_GetTick>
 8007360:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007362:	e00a      	b.n	800737a <HAL_RCC_OscConfig+0x41a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007364:	f7fb fb96 	bl	8002a94 <HAL_GetTick>
 8007368:	4602      	mov	r2, r0
 800736a:	693b      	ldr	r3, [r7, #16]
 800736c:	1ad3      	subs	r3, r2, r3
 800736e:	f241 3288 	movw	r2, #5000	; 0x1388
 8007372:	4293      	cmp	r3, r2
 8007374:	d901      	bls.n	800737a <HAL_RCC_OscConfig+0x41a>
        {
          return HAL_TIMEOUT;
 8007376:	2303      	movs	r3, #3
 8007378:	e109      	b.n	800758e <HAL_RCC_OscConfig+0x62e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800737a:	4b44      	ldr	r3, [pc, #272]	; (800748c <HAL_RCC_OscConfig+0x52c>)
 800737c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800737e:	f003 0302 	and.w	r3, r3, #2
 8007382:	2b00      	cmp	r3, #0
 8007384:	d1ee      	bne.n	8007364 <HAL_RCC_OscConfig+0x404>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007386:	7dfb      	ldrb	r3, [r7, #23]
 8007388:	2b01      	cmp	r3, #1
 800738a:	d105      	bne.n	8007398 <HAL_RCC_OscConfig+0x438>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800738c:	4b3f      	ldr	r3, [pc, #252]	; (800748c <HAL_RCC_OscConfig+0x52c>)
 800738e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007390:	4a3e      	ldr	r2, [pc, #248]	; (800748c <HAL_RCC_OscConfig+0x52c>)
 8007392:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007396:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	699b      	ldr	r3, [r3, #24]
 800739c:	2b00      	cmp	r3, #0
 800739e:	d00c      	beq.n	80073ba <HAL_RCC_OscConfig+0x45a>
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	699b      	ldr	r3, [r3, #24]
 80073a4:	2b01      	cmp	r3, #1
 80073a6:	d008      	beq.n	80073ba <HAL_RCC_OscConfig+0x45a>
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	699b      	ldr	r3, [r3, #24]
 80073ac:	2b02      	cmp	r3, #2
 80073ae:	d004      	beq.n	80073ba <HAL_RCC_OscConfig+0x45a>
 80073b0:	f240 11cf 	movw	r1, #463	; 0x1cf
 80073b4:	4836      	ldr	r0, [pc, #216]	; (8007490 <HAL_RCC_OscConfig+0x530>)
 80073b6:	f7fb f896 	bl	80024e6 <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	699b      	ldr	r3, [r3, #24]
 80073be:	2b00      	cmp	r3, #0
 80073c0:	f000 80e4 	beq.w	800758c <HAL_RCC_OscConfig+0x62c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80073c4:	4b31      	ldr	r3, [pc, #196]	; (800748c <HAL_RCC_OscConfig+0x52c>)
 80073c6:	689b      	ldr	r3, [r3, #8]
 80073c8:	f003 030c 	and.w	r3, r3, #12
 80073cc:	2b08      	cmp	r3, #8
 80073ce:	f000 80ae 	beq.w	800752e <HAL_RCC_OscConfig+0x5ce>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	699b      	ldr	r3, [r3, #24]
 80073d6:	2b02      	cmp	r3, #2
 80073d8:	f040 8092 	bne.w	8007500 <HAL_RCC_OscConfig+0x5a0>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	69db      	ldr	r3, [r3, #28]
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d009      	beq.n	80073f8 <HAL_RCC_OscConfig+0x498>
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	69db      	ldr	r3, [r3, #28]
 80073e8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80073ec:	d004      	beq.n	80073f8 <HAL_RCC_OscConfig+0x498>
 80073ee:	f44f 71ec 	mov.w	r1, #472	; 0x1d8
 80073f2:	4827      	ldr	r0, [pc, #156]	; (8007490 <HAL_RCC_OscConfig+0x530>)
 80073f4:	f7fb f877 	bl	80024e6 <assert_failed>
        assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	6a1b      	ldr	r3, [r3, #32]
 80073fc:	2b3f      	cmp	r3, #63	; 0x3f
 80073fe:	d904      	bls.n	800740a <HAL_RCC_OscConfig+0x4aa>
 8007400:	f240 11d9 	movw	r1, #473	; 0x1d9
 8007404:	4822      	ldr	r0, [pc, #136]	; (8007490 <HAL_RCC_OscConfig+0x530>)
 8007406:	f7fb f86e 	bl	80024e6 <assert_failed>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800740e:	2bbf      	cmp	r3, #191	; 0xbf
 8007410:	d904      	bls.n	800741c <HAL_RCC_OscConfig+0x4bc>
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007416:	f5b3 7fd8 	cmp.w	r3, #432	; 0x1b0
 800741a:	d904      	bls.n	8007426 <HAL_RCC_OscConfig+0x4c6>
 800741c:	f44f 71ed 	mov.w	r1, #474	; 0x1da
 8007420:	481b      	ldr	r0, [pc, #108]	; (8007490 <HAL_RCC_OscConfig+0x530>)
 8007422:	f7fb f860 	bl	80024e6 <assert_failed>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800742a:	2b02      	cmp	r3, #2
 800742c:	d010      	beq.n	8007450 <HAL_RCC_OscConfig+0x4f0>
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007432:	2b04      	cmp	r3, #4
 8007434:	d00c      	beq.n	8007450 <HAL_RCC_OscConfig+0x4f0>
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800743a:	2b06      	cmp	r3, #6
 800743c:	d008      	beq.n	8007450 <HAL_RCC_OscConfig+0x4f0>
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007442:	2b08      	cmp	r3, #8
 8007444:	d004      	beq.n	8007450 <HAL_RCC_OscConfig+0x4f0>
 8007446:	f240 11db 	movw	r1, #475	; 0x1db
 800744a:	4811      	ldr	r0, [pc, #68]	; (8007490 <HAL_RCC_OscConfig+0x530>)
 800744c:	f7fb f84b 	bl	80024e6 <assert_failed>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007454:	2b01      	cmp	r3, #1
 8007456:	d903      	bls.n	8007460 <HAL_RCC_OscConfig+0x500>
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800745c:	2b0f      	cmp	r3, #15
 800745e:	d904      	bls.n	800746a <HAL_RCC_OscConfig+0x50a>
 8007460:	f44f 71ee 	mov.w	r1, #476	; 0x1dc
 8007464:	480a      	ldr	r0, [pc, #40]	; (8007490 <HAL_RCC_OscConfig+0x530>)
 8007466:	f7fb f83e 	bl	80024e6 <assert_failed>

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800746a:	4b0b      	ldr	r3, [pc, #44]	; (8007498 <HAL_RCC_OscConfig+0x538>)
 800746c:	2200      	movs	r2, #0
 800746e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007470:	f7fb fb10 	bl	8002a94 <HAL_GetTick>
 8007474:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007476:	e011      	b.n	800749c <HAL_RCC_OscConfig+0x53c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007478:	f7fb fb0c 	bl	8002a94 <HAL_GetTick>
 800747c:	4602      	mov	r2, r0
 800747e:	693b      	ldr	r3, [r7, #16]
 8007480:	1ad3      	subs	r3, r2, r3
 8007482:	2b02      	cmp	r3, #2
 8007484:	d90a      	bls.n	800749c <HAL_RCC_OscConfig+0x53c>
          {
            return HAL_TIMEOUT;
 8007486:	2303      	movs	r3, #3
 8007488:	e081      	b.n	800758e <HAL_RCC_OscConfig+0x62e>
 800748a:	bf00      	nop
 800748c:	40023800 	.word	0x40023800
 8007490:	0800fe84 	.word	0x0800fe84
 8007494:	40007000 	.word	0x40007000
 8007498:	42470060 	.word	0x42470060
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800749c:	4b3e      	ldr	r3, [pc, #248]	; (8007598 <HAL_RCC_OscConfig+0x638>)
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d1e7      	bne.n	8007478 <HAL_RCC_OscConfig+0x518>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	69da      	ldr	r2, [r3, #28]
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	6a1b      	ldr	r3, [r3, #32]
 80074b0:	431a      	orrs	r2, r3
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074b6:	019b      	lsls	r3, r3, #6
 80074b8:	431a      	orrs	r2, r3
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074be:	085b      	lsrs	r3, r3, #1
 80074c0:	3b01      	subs	r3, #1
 80074c2:	041b      	lsls	r3, r3, #16
 80074c4:	431a      	orrs	r2, r3
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074ca:	061b      	lsls	r3, r3, #24
 80074cc:	4932      	ldr	r1, [pc, #200]	; (8007598 <HAL_RCC_OscConfig+0x638>)
 80074ce:	4313      	orrs	r3, r2
 80074d0:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80074d2:	4b32      	ldr	r3, [pc, #200]	; (800759c <HAL_RCC_OscConfig+0x63c>)
 80074d4:	2201      	movs	r2, #1
 80074d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80074d8:	f7fb fadc 	bl	8002a94 <HAL_GetTick>
 80074dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80074de:	e008      	b.n	80074f2 <HAL_RCC_OscConfig+0x592>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80074e0:	f7fb fad8 	bl	8002a94 <HAL_GetTick>
 80074e4:	4602      	mov	r2, r0
 80074e6:	693b      	ldr	r3, [r7, #16]
 80074e8:	1ad3      	subs	r3, r2, r3
 80074ea:	2b02      	cmp	r3, #2
 80074ec:	d901      	bls.n	80074f2 <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 80074ee:	2303      	movs	r3, #3
 80074f0:	e04d      	b.n	800758e <HAL_RCC_OscConfig+0x62e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80074f2:	4b29      	ldr	r3, [pc, #164]	; (8007598 <HAL_RCC_OscConfig+0x638>)
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d0f0      	beq.n	80074e0 <HAL_RCC_OscConfig+0x580>
 80074fe:	e045      	b.n	800758c <HAL_RCC_OscConfig+0x62c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007500:	4b26      	ldr	r3, [pc, #152]	; (800759c <HAL_RCC_OscConfig+0x63c>)
 8007502:	2200      	movs	r2, #0
 8007504:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007506:	f7fb fac5 	bl	8002a94 <HAL_GetTick>
 800750a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800750c:	e008      	b.n	8007520 <HAL_RCC_OscConfig+0x5c0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800750e:	f7fb fac1 	bl	8002a94 <HAL_GetTick>
 8007512:	4602      	mov	r2, r0
 8007514:	693b      	ldr	r3, [r7, #16]
 8007516:	1ad3      	subs	r3, r2, r3
 8007518:	2b02      	cmp	r3, #2
 800751a:	d901      	bls.n	8007520 <HAL_RCC_OscConfig+0x5c0>
          {
            return HAL_TIMEOUT;
 800751c:	2303      	movs	r3, #3
 800751e:	e036      	b.n	800758e <HAL_RCC_OscConfig+0x62e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007520:	4b1d      	ldr	r3, [pc, #116]	; (8007598 <HAL_RCC_OscConfig+0x638>)
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007528:	2b00      	cmp	r3, #0
 800752a:	d1f0      	bne.n	800750e <HAL_RCC_OscConfig+0x5ae>
 800752c:	e02e      	b.n	800758c <HAL_RCC_OscConfig+0x62c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	699b      	ldr	r3, [r3, #24]
 8007532:	2b01      	cmp	r3, #1
 8007534:	d101      	bne.n	800753a <HAL_RCC_OscConfig+0x5da>
      {
        return HAL_ERROR;
 8007536:	2301      	movs	r3, #1
 8007538:	e029      	b.n	800758e <HAL_RCC_OscConfig+0x62e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800753a:	4b17      	ldr	r3, [pc, #92]	; (8007598 <HAL_RCC_OscConfig+0x638>)
 800753c:	685b      	ldr	r3, [r3, #4]
 800753e:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	69db      	ldr	r3, [r3, #28]
 800754a:	429a      	cmp	r2, r3
 800754c:	d11c      	bne.n	8007588 <HAL_RCC_OscConfig+0x628>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007558:	429a      	cmp	r2, r3
 800755a:	d115      	bne.n	8007588 <HAL_RCC_OscConfig+0x628>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800755c:	68fa      	ldr	r2, [r7, #12]
 800755e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8007562:	4013      	ands	r3, r2
 8007564:	687a      	ldr	r2, [r7, #4]
 8007566:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8007568:	4293      	cmp	r3, r2
 800756a:	d10d      	bne.n	8007588 <HAL_RCC_OscConfig+0x628>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8007576:	429a      	cmp	r2, r3
 8007578:	d106      	bne.n	8007588 <HAL_RCC_OscConfig+0x628>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8007584:	429a      	cmp	r2, r3
 8007586:	d001      	beq.n	800758c <HAL_RCC_OscConfig+0x62c>
        {
          return HAL_ERROR;
 8007588:	2301      	movs	r3, #1
 800758a:	e000      	b.n	800758e <HAL_RCC_OscConfig+0x62e>
        }
      }
    }
  }
  return HAL_OK;
 800758c:	2300      	movs	r3, #0
}
 800758e:	4618      	mov	r0, r3
 8007590:	3718      	adds	r7, #24
 8007592:	46bd      	mov	sp, r7
 8007594:	bd80      	pop	{r7, pc}
 8007596:	bf00      	nop
 8007598:	40023800 	.word	0x40023800
 800759c:	42470060 	.word	0x42470060

080075a0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80075a0:	b580      	push	{r7, lr}
 80075a2:	b084      	sub	sp, #16
 80075a4:	af00      	add	r7, sp, #0
 80075a6:	6078      	str	r0, [r7, #4]
 80075a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	d101      	bne.n	80075b4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80075b0:	2301      	movs	r3, #1
 80075b2:	e174      	b.n	800789e <HAL_RCC_ClockConfig+0x2fe>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	d003      	beq.n	80075c4 <HAL_RCC_ClockConfig+0x24>
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	2b0f      	cmp	r3, #15
 80075c2:	d904      	bls.n	80075ce <HAL_RCC_ClockConfig+0x2e>
 80075c4:	f240 2151 	movw	r1, #593	; 0x251
 80075c8:	487b      	ldr	r0, [pc, #492]	; (80077b8 <HAL_RCC_ClockConfig+0x218>)
 80075ca:	f7fa ff8c 	bl	80024e6 <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 80075ce:	683b      	ldr	r3, [r7, #0]
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d019      	beq.n	8007608 <HAL_RCC_ClockConfig+0x68>
 80075d4:	683b      	ldr	r3, [r7, #0]
 80075d6:	2b01      	cmp	r3, #1
 80075d8:	d016      	beq.n	8007608 <HAL_RCC_ClockConfig+0x68>
 80075da:	683b      	ldr	r3, [r7, #0]
 80075dc:	2b02      	cmp	r3, #2
 80075de:	d013      	beq.n	8007608 <HAL_RCC_ClockConfig+0x68>
 80075e0:	683b      	ldr	r3, [r7, #0]
 80075e2:	2b03      	cmp	r3, #3
 80075e4:	d010      	beq.n	8007608 <HAL_RCC_ClockConfig+0x68>
 80075e6:	683b      	ldr	r3, [r7, #0]
 80075e8:	2b04      	cmp	r3, #4
 80075ea:	d00d      	beq.n	8007608 <HAL_RCC_ClockConfig+0x68>
 80075ec:	683b      	ldr	r3, [r7, #0]
 80075ee:	2b05      	cmp	r3, #5
 80075f0:	d00a      	beq.n	8007608 <HAL_RCC_ClockConfig+0x68>
 80075f2:	683b      	ldr	r3, [r7, #0]
 80075f4:	2b06      	cmp	r3, #6
 80075f6:	d007      	beq.n	8007608 <HAL_RCC_ClockConfig+0x68>
 80075f8:	683b      	ldr	r3, [r7, #0]
 80075fa:	2b07      	cmp	r3, #7
 80075fc:	d004      	beq.n	8007608 <HAL_RCC_ClockConfig+0x68>
 80075fe:	f240 2152 	movw	r1, #594	; 0x252
 8007602:	486d      	ldr	r0, [pc, #436]	; (80077b8 <HAL_RCC_ClockConfig+0x218>)
 8007604:	f7fa ff6f 	bl	80024e6 <assert_failed>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007608:	4b6c      	ldr	r3, [pc, #432]	; (80077bc <HAL_RCC_ClockConfig+0x21c>)
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	f003 030f 	and.w	r3, r3, #15
 8007610:	683a      	ldr	r2, [r7, #0]
 8007612:	429a      	cmp	r2, r3
 8007614:	d90c      	bls.n	8007630 <HAL_RCC_ClockConfig+0x90>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007616:	4b69      	ldr	r3, [pc, #420]	; (80077bc <HAL_RCC_ClockConfig+0x21c>)
 8007618:	683a      	ldr	r2, [r7, #0]
 800761a:	b2d2      	uxtb	r2, r2
 800761c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800761e:	4b67      	ldr	r3, [pc, #412]	; (80077bc <HAL_RCC_ClockConfig+0x21c>)
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	f003 030f 	and.w	r3, r3, #15
 8007626:	683a      	ldr	r2, [r7, #0]
 8007628:	429a      	cmp	r2, r3
 800762a:	d001      	beq.n	8007630 <HAL_RCC_ClockConfig+0x90>
    {
      return HAL_ERROR;
 800762c:	2301      	movs	r3, #1
 800762e:	e136      	b.n	800789e <HAL_RCC_ClockConfig+0x2fe>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	f003 0302 	and.w	r3, r3, #2
 8007638:	2b00      	cmp	r3, #0
 800763a:	d049      	beq.n	80076d0 <HAL_RCC_ClockConfig+0x130>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	f003 0304 	and.w	r3, r3, #4
 8007644:	2b00      	cmp	r3, #0
 8007646:	d005      	beq.n	8007654 <HAL_RCC_ClockConfig+0xb4>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007648:	4b5d      	ldr	r3, [pc, #372]	; (80077c0 <HAL_RCC_ClockConfig+0x220>)
 800764a:	689b      	ldr	r3, [r3, #8]
 800764c:	4a5c      	ldr	r2, [pc, #368]	; (80077c0 <HAL_RCC_ClockConfig+0x220>)
 800764e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8007652:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	f003 0308 	and.w	r3, r3, #8
 800765c:	2b00      	cmp	r3, #0
 800765e:	d005      	beq.n	800766c <HAL_RCC_ClockConfig+0xcc>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007660:	4b57      	ldr	r3, [pc, #348]	; (80077c0 <HAL_RCC_ClockConfig+0x220>)
 8007662:	689b      	ldr	r3, [r3, #8]
 8007664:	4a56      	ldr	r2, [pc, #344]	; (80077c0 <HAL_RCC_ClockConfig+0x220>)
 8007666:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800766a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	689b      	ldr	r3, [r3, #8]
 8007670:	2b00      	cmp	r3, #0
 8007672:	d024      	beq.n	80076be <HAL_RCC_ClockConfig+0x11e>
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	689b      	ldr	r3, [r3, #8]
 8007678:	2b80      	cmp	r3, #128	; 0x80
 800767a:	d020      	beq.n	80076be <HAL_RCC_ClockConfig+0x11e>
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	689b      	ldr	r3, [r3, #8]
 8007680:	2b90      	cmp	r3, #144	; 0x90
 8007682:	d01c      	beq.n	80076be <HAL_RCC_ClockConfig+0x11e>
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	689b      	ldr	r3, [r3, #8]
 8007688:	2ba0      	cmp	r3, #160	; 0xa0
 800768a:	d018      	beq.n	80076be <HAL_RCC_ClockConfig+0x11e>
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	689b      	ldr	r3, [r3, #8]
 8007690:	2bb0      	cmp	r3, #176	; 0xb0
 8007692:	d014      	beq.n	80076be <HAL_RCC_ClockConfig+0x11e>
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	689b      	ldr	r3, [r3, #8]
 8007698:	2bc0      	cmp	r3, #192	; 0xc0
 800769a:	d010      	beq.n	80076be <HAL_RCC_ClockConfig+0x11e>
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	689b      	ldr	r3, [r3, #8]
 80076a0:	2bd0      	cmp	r3, #208	; 0xd0
 80076a2:	d00c      	beq.n	80076be <HAL_RCC_ClockConfig+0x11e>
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	689b      	ldr	r3, [r3, #8]
 80076a8:	2be0      	cmp	r3, #224	; 0xe0
 80076aa:	d008      	beq.n	80076be <HAL_RCC_ClockConfig+0x11e>
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	689b      	ldr	r3, [r3, #8]
 80076b0:	2bf0      	cmp	r3, #240	; 0xf0
 80076b2:	d004      	beq.n	80076be <HAL_RCC_ClockConfig+0x11e>
 80076b4:	f240 2175 	movw	r1, #629	; 0x275
 80076b8:	483f      	ldr	r0, [pc, #252]	; (80077b8 <HAL_RCC_ClockConfig+0x218>)
 80076ba:	f7fa ff14 	bl	80024e6 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80076be:	4b40      	ldr	r3, [pc, #256]	; (80077c0 <HAL_RCC_ClockConfig+0x220>)
 80076c0:	689b      	ldr	r3, [r3, #8]
 80076c2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	689b      	ldr	r3, [r3, #8]
 80076ca:	493d      	ldr	r1, [pc, #244]	; (80077c0 <HAL_RCC_ClockConfig+0x220>)
 80076cc:	4313      	orrs	r3, r2
 80076ce:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	f003 0301 	and.w	r3, r3, #1
 80076d8:	2b00      	cmp	r3, #0
 80076da:	d059      	beq.n	8007790 <HAL_RCC_ClockConfig+0x1f0>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	685b      	ldr	r3, [r3, #4]
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	d010      	beq.n	8007706 <HAL_RCC_ClockConfig+0x166>
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	685b      	ldr	r3, [r3, #4]
 80076e8:	2b01      	cmp	r3, #1
 80076ea:	d00c      	beq.n	8007706 <HAL_RCC_ClockConfig+0x166>
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	685b      	ldr	r3, [r3, #4]
 80076f0:	2b02      	cmp	r3, #2
 80076f2:	d008      	beq.n	8007706 <HAL_RCC_ClockConfig+0x166>
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	685b      	ldr	r3, [r3, #4]
 80076f8:	2b03      	cmp	r3, #3
 80076fa:	d004      	beq.n	8007706 <HAL_RCC_ClockConfig+0x166>
 80076fc:	f44f 711f 	mov.w	r1, #636	; 0x27c
 8007700:	482d      	ldr	r0, [pc, #180]	; (80077b8 <HAL_RCC_ClockConfig+0x218>)
 8007702:	f7fa fef0 	bl	80024e6 <assert_failed>

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	685b      	ldr	r3, [r3, #4]
 800770a:	2b01      	cmp	r3, #1
 800770c:	d107      	bne.n	800771e <HAL_RCC_ClockConfig+0x17e>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800770e:	4b2c      	ldr	r3, [pc, #176]	; (80077c0 <HAL_RCC_ClockConfig+0x220>)
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007716:	2b00      	cmp	r3, #0
 8007718:	d119      	bne.n	800774e <HAL_RCC_ClockConfig+0x1ae>
      {
        return HAL_ERROR;
 800771a:	2301      	movs	r3, #1
 800771c:	e0bf      	b.n	800789e <HAL_RCC_ClockConfig+0x2fe>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	685b      	ldr	r3, [r3, #4]
 8007722:	2b02      	cmp	r3, #2
 8007724:	d003      	beq.n	800772e <HAL_RCC_ClockConfig+0x18e>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800772a:	2b03      	cmp	r3, #3
 800772c:	d107      	bne.n	800773e <HAL_RCC_ClockConfig+0x19e>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800772e:	4b24      	ldr	r3, [pc, #144]	; (80077c0 <HAL_RCC_ClockConfig+0x220>)
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007736:	2b00      	cmp	r3, #0
 8007738:	d109      	bne.n	800774e <HAL_RCC_ClockConfig+0x1ae>
      {
        return HAL_ERROR;
 800773a:	2301      	movs	r3, #1
 800773c:	e0af      	b.n	800789e <HAL_RCC_ClockConfig+0x2fe>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800773e:	4b20      	ldr	r3, [pc, #128]	; (80077c0 <HAL_RCC_ClockConfig+0x220>)
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	f003 0302 	and.w	r3, r3, #2
 8007746:	2b00      	cmp	r3, #0
 8007748:	d101      	bne.n	800774e <HAL_RCC_ClockConfig+0x1ae>
      {
        return HAL_ERROR;
 800774a:	2301      	movs	r3, #1
 800774c:	e0a7      	b.n	800789e <HAL_RCC_ClockConfig+0x2fe>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800774e:	4b1c      	ldr	r3, [pc, #112]	; (80077c0 <HAL_RCC_ClockConfig+0x220>)
 8007750:	689b      	ldr	r3, [r3, #8]
 8007752:	f023 0203 	bic.w	r2, r3, #3
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	685b      	ldr	r3, [r3, #4]
 800775a:	4919      	ldr	r1, [pc, #100]	; (80077c0 <HAL_RCC_ClockConfig+0x220>)
 800775c:	4313      	orrs	r3, r2
 800775e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007760:	f7fb f998 	bl	8002a94 <HAL_GetTick>
 8007764:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007766:	e00a      	b.n	800777e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007768:	f7fb f994 	bl	8002a94 <HAL_GetTick>
 800776c:	4602      	mov	r2, r0
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	1ad3      	subs	r3, r2, r3
 8007772:	f241 3288 	movw	r2, #5000	; 0x1388
 8007776:	4293      	cmp	r3, r2
 8007778:	d901      	bls.n	800777e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800777a:	2303      	movs	r3, #3
 800777c:	e08f      	b.n	800789e <HAL_RCC_ClockConfig+0x2fe>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800777e:	4b10      	ldr	r3, [pc, #64]	; (80077c0 <HAL_RCC_ClockConfig+0x220>)
 8007780:	689b      	ldr	r3, [r3, #8]
 8007782:	f003 020c 	and.w	r2, r3, #12
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	685b      	ldr	r3, [r3, #4]
 800778a:	009b      	lsls	r3, r3, #2
 800778c:	429a      	cmp	r2, r3
 800778e:	d1eb      	bne.n	8007768 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007790:	4b0a      	ldr	r3, [pc, #40]	; (80077bc <HAL_RCC_ClockConfig+0x21c>)
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	f003 030f 	and.w	r3, r3, #15
 8007798:	683a      	ldr	r2, [r7, #0]
 800779a:	429a      	cmp	r2, r3
 800779c:	d212      	bcs.n	80077c4 <HAL_RCC_ClockConfig+0x224>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800779e:	4b07      	ldr	r3, [pc, #28]	; (80077bc <HAL_RCC_ClockConfig+0x21c>)
 80077a0:	683a      	ldr	r2, [r7, #0]
 80077a2:	b2d2      	uxtb	r2, r2
 80077a4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80077a6:	4b05      	ldr	r3, [pc, #20]	; (80077bc <HAL_RCC_ClockConfig+0x21c>)
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	f003 030f 	and.w	r3, r3, #15
 80077ae:	683a      	ldr	r2, [r7, #0]
 80077b0:	429a      	cmp	r2, r3
 80077b2:	d007      	beq.n	80077c4 <HAL_RCC_ClockConfig+0x224>
    {
      return HAL_ERROR;
 80077b4:	2301      	movs	r3, #1
 80077b6:	e072      	b.n	800789e <HAL_RCC_ClockConfig+0x2fe>
 80077b8:	0800fe84 	.word	0x0800fe84
 80077bc:	40023c00 	.word	0x40023c00
 80077c0:	40023800 	.word	0x40023800
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	f003 0304 	and.w	r3, r3, #4
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	d025      	beq.n	800781c <HAL_RCC_ClockConfig+0x27c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	68db      	ldr	r3, [r3, #12]
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	d018      	beq.n	800780a <HAL_RCC_ClockConfig+0x26a>
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	68db      	ldr	r3, [r3, #12]
 80077dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80077e0:	d013      	beq.n	800780a <HAL_RCC_ClockConfig+0x26a>
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	68db      	ldr	r3, [r3, #12]
 80077e6:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80077ea:	d00e      	beq.n	800780a <HAL_RCC_ClockConfig+0x26a>
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	68db      	ldr	r3, [r3, #12]
 80077f0:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 80077f4:	d009      	beq.n	800780a <HAL_RCC_ClockConfig+0x26a>
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	68db      	ldr	r3, [r3, #12]
 80077fa:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 80077fe:	d004      	beq.n	800780a <HAL_RCC_ClockConfig+0x26a>
 8007800:	f240 21ba 	movw	r1, #698	; 0x2ba
 8007804:	4828      	ldr	r0, [pc, #160]	; (80078a8 <HAL_RCC_ClockConfig+0x308>)
 8007806:	f7fa fe6e 	bl	80024e6 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800780a:	4b28      	ldr	r3, [pc, #160]	; (80078ac <HAL_RCC_ClockConfig+0x30c>)
 800780c:	689b      	ldr	r3, [r3, #8]
 800780e:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	68db      	ldr	r3, [r3, #12]
 8007816:	4925      	ldr	r1, [pc, #148]	; (80078ac <HAL_RCC_ClockConfig+0x30c>)
 8007818:	4313      	orrs	r3, r2
 800781a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	f003 0308 	and.w	r3, r3, #8
 8007824:	2b00      	cmp	r3, #0
 8007826:	d026      	beq.n	8007876 <HAL_RCC_ClockConfig+0x2d6>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	691b      	ldr	r3, [r3, #16]
 800782c:	2b00      	cmp	r3, #0
 800782e:	d018      	beq.n	8007862 <HAL_RCC_ClockConfig+0x2c2>
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	691b      	ldr	r3, [r3, #16]
 8007834:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007838:	d013      	beq.n	8007862 <HAL_RCC_ClockConfig+0x2c2>
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	691b      	ldr	r3, [r3, #16]
 800783e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8007842:	d00e      	beq.n	8007862 <HAL_RCC_ClockConfig+0x2c2>
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	691b      	ldr	r3, [r3, #16]
 8007848:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 800784c:	d009      	beq.n	8007862 <HAL_RCC_ClockConfig+0x2c2>
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	691b      	ldr	r3, [r3, #16]
 8007852:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 8007856:	d004      	beq.n	8007862 <HAL_RCC_ClockConfig+0x2c2>
 8007858:	f240 21c1 	movw	r1, #705	; 0x2c1
 800785c:	4812      	ldr	r0, [pc, #72]	; (80078a8 <HAL_RCC_ClockConfig+0x308>)
 800785e:	f7fa fe42 	bl	80024e6 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007862:	4b12      	ldr	r3, [pc, #72]	; (80078ac <HAL_RCC_ClockConfig+0x30c>)
 8007864:	689b      	ldr	r3, [r3, #8]
 8007866:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	691b      	ldr	r3, [r3, #16]
 800786e:	00db      	lsls	r3, r3, #3
 8007870:	490e      	ldr	r1, [pc, #56]	; (80078ac <HAL_RCC_ClockConfig+0x30c>)
 8007872:	4313      	orrs	r3, r2
 8007874:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8007876:	f000 f821 	bl	80078bc <HAL_RCC_GetSysClockFreq>
 800787a:	4601      	mov	r1, r0
 800787c:	4b0b      	ldr	r3, [pc, #44]	; (80078ac <HAL_RCC_ClockConfig+0x30c>)
 800787e:	689b      	ldr	r3, [r3, #8]
 8007880:	091b      	lsrs	r3, r3, #4
 8007882:	f003 030f 	and.w	r3, r3, #15
 8007886:	4a0a      	ldr	r2, [pc, #40]	; (80078b0 <HAL_RCC_ClockConfig+0x310>)
 8007888:	5cd3      	ldrb	r3, [r2, r3]
 800788a:	fa21 f303 	lsr.w	r3, r1, r3
 800788e:	4a09      	ldr	r2, [pc, #36]	; (80078b4 <HAL_RCC_ClockConfig+0x314>)
 8007890:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8007892:	4b09      	ldr	r3, [pc, #36]	; (80078b8 <HAL_RCC_ClockConfig+0x318>)
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	4618      	mov	r0, r3
 8007898:	f7fb f8b8 	bl	8002a0c <HAL_InitTick>

  return HAL_OK;
 800789c:	2300      	movs	r3, #0
}
 800789e:	4618      	mov	r0, r3
 80078a0:	3710      	adds	r7, #16
 80078a2:	46bd      	mov	sp, r7
 80078a4:	bd80      	pop	{r7, pc}
 80078a6:	bf00      	nop
 80078a8:	0800fe84 	.word	0x0800fe84
 80078ac:	40023800 	.word	0x40023800
 80078b0:	08010094 	.word	0x08010094
 80078b4:	20000400 	.word	0x20000400
 80078b8:	20000404 	.word	0x20000404

080078bc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80078bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80078be:	b085      	sub	sp, #20
 80078c0:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80078c2:	2300      	movs	r3, #0
 80078c4:	607b      	str	r3, [r7, #4]
 80078c6:	2300      	movs	r3, #0
 80078c8:	60fb      	str	r3, [r7, #12]
 80078ca:	2300      	movs	r3, #0
 80078cc:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80078ce:	2300      	movs	r3, #0
 80078d0:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80078d2:	4b63      	ldr	r3, [pc, #396]	; (8007a60 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80078d4:	689b      	ldr	r3, [r3, #8]
 80078d6:	f003 030c 	and.w	r3, r3, #12
 80078da:	2b04      	cmp	r3, #4
 80078dc:	d007      	beq.n	80078ee <HAL_RCC_GetSysClockFreq+0x32>
 80078de:	2b08      	cmp	r3, #8
 80078e0:	d008      	beq.n	80078f4 <HAL_RCC_GetSysClockFreq+0x38>
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	f040 80b4 	bne.w	8007a50 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80078e8:	4b5e      	ldr	r3, [pc, #376]	; (8007a64 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80078ea:	60bb      	str	r3, [r7, #8]
       break;
 80078ec:	e0b3      	b.n	8007a56 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80078ee:	4b5e      	ldr	r3, [pc, #376]	; (8007a68 <HAL_RCC_GetSysClockFreq+0x1ac>)
 80078f0:	60bb      	str	r3, [r7, #8]
      break;
 80078f2:	e0b0      	b.n	8007a56 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80078f4:	4b5a      	ldr	r3, [pc, #360]	; (8007a60 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80078f6:	685b      	ldr	r3, [r3, #4]
 80078f8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80078fc:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80078fe:	4b58      	ldr	r3, [pc, #352]	; (8007a60 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8007900:	685b      	ldr	r3, [r3, #4]
 8007902:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007906:	2b00      	cmp	r3, #0
 8007908:	d04a      	beq.n	80079a0 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800790a:	4b55      	ldr	r3, [pc, #340]	; (8007a60 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800790c:	685b      	ldr	r3, [r3, #4]
 800790e:	099b      	lsrs	r3, r3, #6
 8007910:	f04f 0400 	mov.w	r4, #0
 8007914:	f240 11ff 	movw	r1, #511	; 0x1ff
 8007918:	f04f 0200 	mov.w	r2, #0
 800791c:	ea03 0501 	and.w	r5, r3, r1
 8007920:	ea04 0602 	and.w	r6, r4, r2
 8007924:	4629      	mov	r1, r5
 8007926:	4632      	mov	r2, r6
 8007928:	f04f 0300 	mov.w	r3, #0
 800792c:	f04f 0400 	mov.w	r4, #0
 8007930:	0154      	lsls	r4, r2, #5
 8007932:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8007936:	014b      	lsls	r3, r1, #5
 8007938:	4619      	mov	r1, r3
 800793a:	4622      	mov	r2, r4
 800793c:	1b49      	subs	r1, r1, r5
 800793e:	eb62 0206 	sbc.w	r2, r2, r6
 8007942:	f04f 0300 	mov.w	r3, #0
 8007946:	f04f 0400 	mov.w	r4, #0
 800794a:	0194      	lsls	r4, r2, #6
 800794c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8007950:	018b      	lsls	r3, r1, #6
 8007952:	1a5b      	subs	r3, r3, r1
 8007954:	eb64 0402 	sbc.w	r4, r4, r2
 8007958:	f04f 0100 	mov.w	r1, #0
 800795c:	f04f 0200 	mov.w	r2, #0
 8007960:	00e2      	lsls	r2, r4, #3
 8007962:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8007966:	00d9      	lsls	r1, r3, #3
 8007968:	460b      	mov	r3, r1
 800796a:	4614      	mov	r4, r2
 800796c:	195b      	adds	r3, r3, r5
 800796e:	eb44 0406 	adc.w	r4, r4, r6
 8007972:	f04f 0100 	mov.w	r1, #0
 8007976:	f04f 0200 	mov.w	r2, #0
 800797a:	0262      	lsls	r2, r4, #9
 800797c:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8007980:	0259      	lsls	r1, r3, #9
 8007982:	460b      	mov	r3, r1
 8007984:	4614      	mov	r4, r2
 8007986:	4618      	mov	r0, r3
 8007988:	4621      	mov	r1, r4
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	f04f 0400 	mov.w	r4, #0
 8007990:	461a      	mov	r2, r3
 8007992:	4623      	mov	r3, r4
 8007994:	f7f9 f8fc 	bl	8000b90 <__aeabi_uldivmod>
 8007998:	4603      	mov	r3, r0
 800799a:	460c      	mov	r4, r1
 800799c:	60fb      	str	r3, [r7, #12]
 800799e:	e049      	b.n	8007a34 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80079a0:	4b2f      	ldr	r3, [pc, #188]	; (8007a60 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80079a2:	685b      	ldr	r3, [r3, #4]
 80079a4:	099b      	lsrs	r3, r3, #6
 80079a6:	f04f 0400 	mov.w	r4, #0
 80079aa:	f240 11ff 	movw	r1, #511	; 0x1ff
 80079ae:	f04f 0200 	mov.w	r2, #0
 80079b2:	ea03 0501 	and.w	r5, r3, r1
 80079b6:	ea04 0602 	and.w	r6, r4, r2
 80079ba:	4629      	mov	r1, r5
 80079bc:	4632      	mov	r2, r6
 80079be:	f04f 0300 	mov.w	r3, #0
 80079c2:	f04f 0400 	mov.w	r4, #0
 80079c6:	0154      	lsls	r4, r2, #5
 80079c8:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80079cc:	014b      	lsls	r3, r1, #5
 80079ce:	4619      	mov	r1, r3
 80079d0:	4622      	mov	r2, r4
 80079d2:	1b49      	subs	r1, r1, r5
 80079d4:	eb62 0206 	sbc.w	r2, r2, r6
 80079d8:	f04f 0300 	mov.w	r3, #0
 80079dc:	f04f 0400 	mov.w	r4, #0
 80079e0:	0194      	lsls	r4, r2, #6
 80079e2:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80079e6:	018b      	lsls	r3, r1, #6
 80079e8:	1a5b      	subs	r3, r3, r1
 80079ea:	eb64 0402 	sbc.w	r4, r4, r2
 80079ee:	f04f 0100 	mov.w	r1, #0
 80079f2:	f04f 0200 	mov.w	r2, #0
 80079f6:	00e2      	lsls	r2, r4, #3
 80079f8:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80079fc:	00d9      	lsls	r1, r3, #3
 80079fe:	460b      	mov	r3, r1
 8007a00:	4614      	mov	r4, r2
 8007a02:	195b      	adds	r3, r3, r5
 8007a04:	eb44 0406 	adc.w	r4, r4, r6
 8007a08:	f04f 0100 	mov.w	r1, #0
 8007a0c:	f04f 0200 	mov.w	r2, #0
 8007a10:	02a2      	lsls	r2, r4, #10
 8007a12:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8007a16:	0299      	lsls	r1, r3, #10
 8007a18:	460b      	mov	r3, r1
 8007a1a:	4614      	mov	r4, r2
 8007a1c:	4618      	mov	r0, r3
 8007a1e:	4621      	mov	r1, r4
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	f04f 0400 	mov.w	r4, #0
 8007a26:	461a      	mov	r2, r3
 8007a28:	4623      	mov	r3, r4
 8007a2a:	f7f9 f8b1 	bl	8000b90 <__aeabi_uldivmod>
 8007a2e:	4603      	mov	r3, r0
 8007a30:	460c      	mov	r4, r1
 8007a32:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8007a34:	4b0a      	ldr	r3, [pc, #40]	; (8007a60 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8007a36:	685b      	ldr	r3, [r3, #4]
 8007a38:	0c1b      	lsrs	r3, r3, #16
 8007a3a:	f003 0303 	and.w	r3, r3, #3
 8007a3e:	3301      	adds	r3, #1
 8007a40:	005b      	lsls	r3, r3, #1
 8007a42:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8007a44:	68fa      	ldr	r2, [r7, #12]
 8007a46:	683b      	ldr	r3, [r7, #0]
 8007a48:	fbb2 f3f3 	udiv	r3, r2, r3
 8007a4c:	60bb      	str	r3, [r7, #8]
      break;
 8007a4e:	e002      	b.n	8007a56 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007a50:	4b04      	ldr	r3, [pc, #16]	; (8007a64 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8007a52:	60bb      	str	r3, [r7, #8]
      break;
 8007a54:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007a56:	68bb      	ldr	r3, [r7, #8]
}
 8007a58:	4618      	mov	r0, r3
 8007a5a:	3714      	adds	r7, #20
 8007a5c:	46bd      	mov	sp, r7
 8007a5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007a60:	40023800 	.word	0x40023800
 8007a64:	00f42400 	.word	0x00f42400
 8007a68:	007a1200 	.word	0x007a1200

08007a6c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007a6c:	b480      	push	{r7}
 8007a6e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007a70:	4b03      	ldr	r3, [pc, #12]	; (8007a80 <HAL_RCC_GetHCLKFreq+0x14>)
 8007a72:	681b      	ldr	r3, [r3, #0]
}
 8007a74:	4618      	mov	r0, r3
 8007a76:	46bd      	mov	sp, r7
 8007a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a7c:	4770      	bx	lr
 8007a7e:	bf00      	nop
 8007a80:	20000400 	.word	0x20000400

08007a84 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007a84:	b580      	push	{r7, lr}
 8007a86:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8007a88:	f7ff fff0 	bl	8007a6c <HAL_RCC_GetHCLKFreq>
 8007a8c:	4601      	mov	r1, r0
 8007a8e:	4b05      	ldr	r3, [pc, #20]	; (8007aa4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007a90:	689b      	ldr	r3, [r3, #8]
 8007a92:	0a9b      	lsrs	r3, r3, #10
 8007a94:	f003 0307 	and.w	r3, r3, #7
 8007a98:	4a03      	ldr	r2, [pc, #12]	; (8007aa8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007a9a:	5cd3      	ldrb	r3, [r2, r3]
 8007a9c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8007aa0:	4618      	mov	r0, r3
 8007aa2:	bd80      	pop	{r7, pc}
 8007aa4:	40023800 	.word	0x40023800
 8007aa8:	080100a4 	.word	0x080100a4

08007aac <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007aac:	b580      	push	{r7, lr}
 8007aae:	b086      	sub	sp, #24
 8007ab0:	af00      	add	r7, sp, #0
 8007ab2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007ab4:	2300      	movs	r3, #0
 8007ab6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8007ab8:	2300      	movs	r3, #0
 8007aba:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	d003      	beq.n	8007acc <HAL_RCCEx_PeriphCLKConfig+0x20>
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	2b0f      	cmp	r3, #15
 8007aca:	d904      	bls.n	8007ad6 <HAL_RCCEx_PeriphCLKConfig+0x2a>
 8007acc:	f640 11d9 	movw	r1, #2521	; 0x9d9
 8007ad0:	489d      	ldr	r0, [pc, #628]	; (8007d48 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8007ad2:	f7fa fd08 	bl	80024e6 <assert_failed>

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	f003 0301 	and.w	r3, r3, #1
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d105      	bne.n	8007aee <HAL_RCCEx_PeriphCLKConfig+0x42>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d060      	beq.n	8007bb0 <HAL_RCCEx_PeriphCLKConfig+0x104>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	68db      	ldr	r3, [r3, #12]
 8007af2:	2b01      	cmp	r3, #1
 8007af4:	d903      	bls.n	8007afe <HAL_RCCEx_PeriphCLKConfig+0x52>
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	68db      	ldr	r3, [r3, #12]
 8007afa:	2b07      	cmp	r3, #7
 8007afc:	d904      	bls.n	8007b08 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8007afe:	f44f 611e 	mov.w	r1, #2528	; 0x9e0
 8007b02:	4891      	ldr	r0, [pc, #580]	; (8007d48 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8007b04:	f7fa fcef 	bl	80024e6 <assert_failed>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	689b      	ldr	r3, [r3, #8]
 8007b0c:	2bbf      	cmp	r3, #191	; 0xbf
 8007b0e:	d904      	bls.n	8007b1a <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	689b      	ldr	r3, [r3, #8]
 8007b14:	f5b3 7fd8 	cmp.w	r3, #432	; 0x1b0
 8007b18:	d904      	bls.n	8007b24 <HAL_RCCEx_PeriphCLKConfig+0x78>
 8007b1a:	f640 11e1 	movw	r1, #2529	; 0x9e1
 8007b1e:	488a      	ldr	r0, [pc, #552]	; (8007d48 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8007b20:	f7fa fce1 	bl	80024e6 <assert_failed>
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	685b      	ldr	r3, [r3, #4]
 8007b28:	2b01      	cmp	r3, #1
 8007b2a:	d903      	bls.n	8007b34 <HAL_RCCEx_PeriphCLKConfig+0x88>
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	685b      	ldr	r3, [r3, #4]
 8007b30:	2b3f      	cmp	r3, #63	; 0x3f
 8007b32:	d904      	bls.n	8007b3e <HAL_RCCEx_PeriphCLKConfig+0x92>
 8007b34:	f640 11e3 	movw	r1, #2531	; 0x9e3
 8007b38:	4883      	ldr	r0, [pc, #524]	; (8007d48 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8007b3a:	f7fa fcd4 	bl	80024e6 <assert_failed>
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8007b3e:	4b83      	ldr	r3, [pc, #524]	; (8007d4c <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 8007b40:	2200      	movs	r2, #0
 8007b42:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8007b44:	f7fa ffa6 	bl	8002a94 <HAL_GetTick>
 8007b48:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007b4a:	e008      	b.n	8007b5e <HAL_RCCEx_PeriphCLKConfig+0xb2>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8007b4c:	f7fa ffa2 	bl	8002a94 <HAL_GetTick>
 8007b50:	4602      	mov	r2, r0
 8007b52:	697b      	ldr	r3, [r7, #20]
 8007b54:	1ad3      	subs	r3, r2, r3
 8007b56:	2b02      	cmp	r3, #2
 8007b58:	d901      	bls.n	8007b5e <HAL_RCCEx_PeriphCLKConfig+0xb2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007b5a:	2303      	movs	r3, #3
 8007b5c:	e1ae      	b.n	8007ebc <HAL_RCCEx_PeriphCLKConfig+0x410>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007b5e:	4b7c      	ldr	r3, [pc, #496]	; (8007d50 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d1f0      	bne.n	8007b4c <HAL_RCCEx_PeriphCLKConfig+0xa0>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	685a      	ldr	r2, [r3, #4]
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	689b      	ldr	r3, [r3, #8]
 8007b72:	019b      	lsls	r3, r3, #6
 8007b74:	431a      	orrs	r2, r3
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	68db      	ldr	r3, [r3, #12]
 8007b7a:	071b      	lsls	r3, r3, #28
 8007b7c:	4974      	ldr	r1, [pc, #464]	; (8007d50 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 8007b7e:	4313      	orrs	r3, r2
 8007b80:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8007b84:	4b71      	ldr	r3, [pc, #452]	; (8007d4c <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 8007b86:	2201      	movs	r2, #1
 8007b88:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8007b8a:	f7fa ff83 	bl	8002a94 <HAL_GetTick>
 8007b8e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007b90:	e008      	b.n	8007ba4 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8007b92:	f7fa ff7f 	bl	8002a94 <HAL_GetTick>
 8007b96:	4602      	mov	r2, r0
 8007b98:	697b      	ldr	r3, [r7, #20]
 8007b9a:	1ad3      	subs	r3, r2, r3
 8007b9c:	2b02      	cmp	r3, #2
 8007b9e:	d901      	bls.n	8007ba4 <HAL_RCCEx_PeriphCLKConfig+0xf8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007ba0:	2303      	movs	r3, #3
 8007ba2:	e18b      	b.n	8007ebc <HAL_RCCEx_PeriphCLKConfig+0x410>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007ba4:	4b6a      	ldr	r3, [pc, #424]	; (8007d50 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d0f0      	beq.n	8007b92 <HAL_RCCEx_PeriphCLKConfig+0xe6>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	f003 0302 	and.w	r3, r3, #2
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	f000 8174 	beq.w	8007ea6 <HAL_RCCEx_PeriphCLKConfig+0x3fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	691b      	ldr	r3, [r3, #16]
 8007bc2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007bc6:	f000 80a6 	beq.w	8007d16 <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	691b      	ldr	r3, [r3, #16]
 8007bce:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007bd2:	f000 80a0 	beq.w	8007d16 <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	691b      	ldr	r3, [r3, #16]
 8007bda:	4a5e      	ldr	r2, [pc, #376]	; (8007d54 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 8007bdc:	4293      	cmp	r3, r2
 8007bde:	f000 809a 	beq.w	8007d16 <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	691b      	ldr	r3, [r3, #16]
 8007be6:	4a5c      	ldr	r2, [pc, #368]	; (8007d58 <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 8007be8:	4293      	cmp	r3, r2
 8007bea:	f000 8094 	beq.w	8007d16 <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	691b      	ldr	r3, [r3, #16]
 8007bf2:	4a5a      	ldr	r2, [pc, #360]	; (8007d5c <HAL_RCCEx_PeriphCLKConfig+0x2b0>)
 8007bf4:	4293      	cmp	r3, r2
 8007bf6:	f000 808e 	beq.w	8007d16 <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	691b      	ldr	r3, [r3, #16]
 8007bfe:	4a58      	ldr	r2, [pc, #352]	; (8007d60 <HAL_RCCEx_PeriphCLKConfig+0x2b4>)
 8007c00:	4293      	cmp	r3, r2
 8007c02:	f000 8088 	beq.w	8007d16 <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	691b      	ldr	r3, [r3, #16]
 8007c0a:	4a56      	ldr	r2, [pc, #344]	; (8007d64 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8007c0c:	4293      	cmp	r3, r2
 8007c0e:	f000 8082 	beq.w	8007d16 <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	691b      	ldr	r3, [r3, #16]
 8007c16:	4a54      	ldr	r2, [pc, #336]	; (8007d68 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8007c18:	4293      	cmp	r3, r2
 8007c1a:	d07c      	beq.n	8007d16 <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	691b      	ldr	r3, [r3, #16]
 8007c20:	4a52      	ldr	r2, [pc, #328]	; (8007d6c <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8007c22:	4293      	cmp	r3, r2
 8007c24:	d077      	beq.n	8007d16 <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	691b      	ldr	r3, [r3, #16]
 8007c2a:	4a51      	ldr	r2, [pc, #324]	; (8007d70 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8007c2c:	4293      	cmp	r3, r2
 8007c2e:	d072      	beq.n	8007d16 <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	691b      	ldr	r3, [r3, #16]
 8007c34:	4a4f      	ldr	r2, [pc, #316]	; (8007d74 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8007c36:	4293      	cmp	r3, r2
 8007c38:	d06d      	beq.n	8007d16 <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	691b      	ldr	r3, [r3, #16]
 8007c3e:	4a4e      	ldr	r2, [pc, #312]	; (8007d78 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8007c40:	4293      	cmp	r3, r2
 8007c42:	d068      	beq.n	8007d16 <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	691b      	ldr	r3, [r3, #16]
 8007c48:	4a4c      	ldr	r2, [pc, #304]	; (8007d7c <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 8007c4a:	4293      	cmp	r3, r2
 8007c4c:	d063      	beq.n	8007d16 <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	691b      	ldr	r3, [r3, #16]
 8007c52:	4a4b      	ldr	r2, [pc, #300]	; (8007d80 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8007c54:	4293      	cmp	r3, r2
 8007c56:	d05e      	beq.n	8007d16 <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	691b      	ldr	r3, [r3, #16]
 8007c5c:	4a49      	ldr	r2, [pc, #292]	; (8007d84 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8007c5e:	4293      	cmp	r3, r2
 8007c60:	d059      	beq.n	8007d16 <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	691b      	ldr	r3, [r3, #16]
 8007c66:	4a48      	ldr	r2, [pc, #288]	; (8007d88 <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 8007c68:	4293      	cmp	r3, r2
 8007c6a:	d054      	beq.n	8007d16 <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	691b      	ldr	r3, [r3, #16]
 8007c70:	4a46      	ldr	r2, [pc, #280]	; (8007d8c <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8007c72:	4293      	cmp	r3, r2
 8007c74:	d04f      	beq.n	8007d16 <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	691b      	ldr	r3, [r3, #16]
 8007c7a:	4a45      	ldr	r2, [pc, #276]	; (8007d90 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8007c7c:	4293      	cmp	r3, r2
 8007c7e:	d04a      	beq.n	8007d16 <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	691b      	ldr	r3, [r3, #16]
 8007c84:	4a43      	ldr	r2, [pc, #268]	; (8007d94 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8007c86:	4293      	cmp	r3, r2
 8007c88:	d045      	beq.n	8007d16 <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	691b      	ldr	r3, [r3, #16]
 8007c8e:	4a42      	ldr	r2, [pc, #264]	; (8007d98 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8007c90:	4293      	cmp	r3, r2
 8007c92:	d040      	beq.n	8007d16 <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	691b      	ldr	r3, [r3, #16]
 8007c98:	4a40      	ldr	r2, [pc, #256]	; (8007d9c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007c9a:	4293      	cmp	r3, r2
 8007c9c:	d03b      	beq.n	8007d16 <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	691b      	ldr	r3, [r3, #16]
 8007ca2:	4a3f      	ldr	r2, [pc, #252]	; (8007da0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007ca4:	4293      	cmp	r3, r2
 8007ca6:	d036      	beq.n	8007d16 <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	691b      	ldr	r3, [r3, #16]
 8007cac:	4a3d      	ldr	r2, [pc, #244]	; (8007da4 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8007cae:	4293      	cmp	r3, r2
 8007cb0:	d031      	beq.n	8007d16 <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	691b      	ldr	r3, [r3, #16]
 8007cb6:	4a3c      	ldr	r2, [pc, #240]	; (8007da8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8007cb8:	4293      	cmp	r3, r2
 8007cba:	d02c      	beq.n	8007d16 <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	691b      	ldr	r3, [r3, #16]
 8007cc0:	4a3a      	ldr	r2, [pc, #232]	; (8007dac <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8007cc2:	4293      	cmp	r3, r2
 8007cc4:	d027      	beq.n	8007d16 <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	691b      	ldr	r3, [r3, #16]
 8007cca:	4a39      	ldr	r2, [pc, #228]	; (8007db0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8007ccc:	4293      	cmp	r3, r2
 8007cce:	d022      	beq.n	8007d16 <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	691b      	ldr	r3, [r3, #16]
 8007cd4:	4a37      	ldr	r2, [pc, #220]	; (8007db4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8007cd6:	4293      	cmp	r3, r2
 8007cd8:	d01d      	beq.n	8007d16 <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	691b      	ldr	r3, [r3, #16]
 8007cde:	4a36      	ldr	r2, [pc, #216]	; (8007db8 <HAL_RCCEx_PeriphCLKConfig+0x30c>)
 8007ce0:	4293      	cmp	r3, r2
 8007ce2:	d018      	beq.n	8007d16 <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	691b      	ldr	r3, [r3, #16]
 8007ce8:	4a34      	ldr	r2, [pc, #208]	; (8007dbc <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8007cea:	4293      	cmp	r3, r2
 8007cec:	d013      	beq.n	8007d16 <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	691b      	ldr	r3, [r3, #16]
 8007cf2:	4a33      	ldr	r2, [pc, #204]	; (8007dc0 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8007cf4:	4293      	cmp	r3, r2
 8007cf6:	d00e      	beq.n	8007d16 <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	691b      	ldr	r3, [r3, #16]
 8007cfc:	4a31      	ldr	r2, [pc, #196]	; (8007dc4 <HAL_RCCEx_PeriphCLKConfig+0x318>)
 8007cfe:	4293      	cmp	r3, r2
 8007d00:	d009      	beq.n	8007d16 <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	691b      	ldr	r3, [r3, #16]
 8007d06:	4a30      	ldr	r2, [pc, #192]	; (8007dc8 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 8007d08:	4293      	cmp	r3, r2
 8007d0a:	d004      	beq.n	8007d16 <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8007d0c:	f640 2112 	movw	r1, #2578	; 0xa12
 8007d10:	480d      	ldr	r0, [pc, #52]	; (8007d48 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8007d12:	f7fa fbe8 	bl	80024e6 <assert_failed>

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8007d16:	2300      	movs	r3, #0
 8007d18:	60fb      	str	r3, [r7, #12]
 8007d1a:	4b0d      	ldr	r3, [pc, #52]	; (8007d50 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 8007d1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d1e:	4a0c      	ldr	r2, [pc, #48]	; (8007d50 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 8007d20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007d24:	6413      	str	r3, [r2, #64]	; 0x40
 8007d26:	4b0a      	ldr	r3, [pc, #40]	; (8007d50 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 8007d28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007d2e:	60fb      	str	r3, [r7, #12]
 8007d30:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8007d32:	4b26      	ldr	r3, [pc, #152]	; (8007dcc <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	4a25      	ldr	r2, [pc, #148]	; (8007dcc <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8007d38:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007d3c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8007d3e:	f7fa fea9 	bl	8002a94 <HAL_GetTick>
 8007d42:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8007d44:	e04d      	b.n	8007de2 <HAL_RCCEx_PeriphCLKConfig+0x336>
 8007d46:	bf00      	nop
 8007d48:	0800febc 	.word	0x0800febc
 8007d4c:	42470068 	.word	0x42470068
 8007d50:	40023800 	.word	0x40023800
 8007d54:	00020300 	.word	0x00020300
 8007d58:	00030300 	.word	0x00030300
 8007d5c:	00040300 	.word	0x00040300
 8007d60:	00050300 	.word	0x00050300
 8007d64:	00060300 	.word	0x00060300
 8007d68:	00070300 	.word	0x00070300
 8007d6c:	00080300 	.word	0x00080300
 8007d70:	00090300 	.word	0x00090300
 8007d74:	000a0300 	.word	0x000a0300
 8007d78:	000b0300 	.word	0x000b0300
 8007d7c:	000c0300 	.word	0x000c0300
 8007d80:	000d0300 	.word	0x000d0300
 8007d84:	000e0300 	.word	0x000e0300
 8007d88:	000f0300 	.word	0x000f0300
 8007d8c:	00100300 	.word	0x00100300
 8007d90:	00110300 	.word	0x00110300
 8007d94:	00120300 	.word	0x00120300
 8007d98:	00130300 	.word	0x00130300
 8007d9c:	00140300 	.word	0x00140300
 8007da0:	00150300 	.word	0x00150300
 8007da4:	00160300 	.word	0x00160300
 8007da8:	00170300 	.word	0x00170300
 8007dac:	00180300 	.word	0x00180300
 8007db0:	00190300 	.word	0x00190300
 8007db4:	001a0300 	.word	0x001a0300
 8007db8:	001b0300 	.word	0x001b0300
 8007dbc:	001c0300 	.word	0x001c0300
 8007dc0:	001d0300 	.word	0x001d0300
 8007dc4:	001e0300 	.word	0x001e0300
 8007dc8:	001f0300 	.word	0x001f0300
 8007dcc:	40007000 	.word	0x40007000
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8007dd0:	f7fa fe60 	bl	8002a94 <HAL_GetTick>
 8007dd4:	4602      	mov	r2, r0
 8007dd6:	697b      	ldr	r3, [r7, #20]
 8007dd8:	1ad3      	subs	r3, r2, r3
 8007dda:	2b02      	cmp	r3, #2
 8007ddc:	d901      	bls.n	8007de2 <HAL_RCCEx_PeriphCLKConfig+0x336>
      {
        return HAL_TIMEOUT;
 8007dde:	2303      	movs	r3, #3
 8007de0:	e06c      	b.n	8007ebc <HAL_RCCEx_PeriphCLKConfig+0x410>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8007de2:	4b38      	ldr	r3, [pc, #224]	; (8007ec4 <HAL_RCCEx_PeriphCLKConfig+0x418>)
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	d0f0      	beq.n	8007dd0 <HAL_RCCEx_PeriphCLKConfig+0x324>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8007dee:	4b36      	ldr	r3, [pc, #216]	; (8007ec8 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8007df0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007df2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007df6:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8007df8:	693b      	ldr	r3, [r7, #16]
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d02f      	beq.n	8007e5e <HAL_RCCEx_PeriphCLKConfig+0x3b2>
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	691b      	ldr	r3, [r3, #16]
 8007e02:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007e06:	693a      	ldr	r2, [r7, #16]
 8007e08:	429a      	cmp	r2, r3
 8007e0a:	d028      	beq.n	8007e5e <HAL_RCCEx_PeriphCLKConfig+0x3b2>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007e0c:	4b2e      	ldr	r3, [pc, #184]	; (8007ec8 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8007e0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007e10:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007e14:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8007e16:	4b2d      	ldr	r3, [pc, #180]	; (8007ecc <HAL_RCCEx_PeriphCLKConfig+0x420>)
 8007e18:	2201      	movs	r2, #1
 8007e1a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8007e1c:	4b2b      	ldr	r3, [pc, #172]	; (8007ecc <HAL_RCCEx_PeriphCLKConfig+0x420>)
 8007e1e:	2200      	movs	r2, #0
 8007e20:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8007e22:	4a29      	ldr	r2, [pc, #164]	; (8007ec8 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8007e24:	693b      	ldr	r3, [r7, #16]
 8007e26:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8007e28:	4b27      	ldr	r3, [pc, #156]	; (8007ec8 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8007e2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007e2c:	f003 0301 	and.w	r3, r3, #1
 8007e30:	2b01      	cmp	r3, #1
 8007e32:	d114      	bne.n	8007e5e <HAL_RCCEx_PeriphCLKConfig+0x3b2>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8007e34:	f7fa fe2e 	bl	8002a94 <HAL_GetTick>
 8007e38:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007e3a:	e00a      	b.n	8007e52 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007e3c:	f7fa fe2a 	bl	8002a94 <HAL_GetTick>
 8007e40:	4602      	mov	r2, r0
 8007e42:	697b      	ldr	r3, [r7, #20]
 8007e44:	1ad3      	subs	r3, r2, r3
 8007e46:	f241 3288 	movw	r2, #5000	; 0x1388
 8007e4a:	4293      	cmp	r3, r2
 8007e4c:	d901      	bls.n	8007e52 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
          {
            return HAL_TIMEOUT;
 8007e4e:	2303      	movs	r3, #3
 8007e50:	e034      	b.n	8007ebc <HAL_RCCEx_PeriphCLKConfig+0x410>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007e52:	4b1d      	ldr	r3, [pc, #116]	; (8007ec8 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8007e54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007e56:	f003 0302 	and.w	r3, r3, #2
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	d0ee      	beq.n	8007e3c <HAL_RCCEx_PeriphCLKConfig+0x390>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	691b      	ldr	r3, [r3, #16]
 8007e62:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007e66:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007e6a:	d10d      	bne.n	8007e88 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
 8007e6c:	4b16      	ldr	r3, [pc, #88]	; (8007ec8 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8007e6e:	689b      	ldr	r3, [r3, #8]
 8007e70:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	691b      	ldr	r3, [r3, #16]
 8007e78:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8007e7c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007e80:	4911      	ldr	r1, [pc, #68]	; (8007ec8 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8007e82:	4313      	orrs	r3, r2
 8007e84:	608b      	str	r3, [r1, #8]
 8007e86:	e005      	b.n	8007e94 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8007e88:	4b0f      	ldr	r3, [pc, #60]	; (8007ec8 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8007e8a:	689b      	ldr	r3, [r3, #8]
 8007e8c:	4a0e      	ldr	r2, [pc, #56]	; (8007ec8 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8007e8e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8007e92:	6093      	str	r3, [r2, #8]
 8007e94:	4b0c      	ldr	r3, [pc, #48]	; (8007ec8 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8007e96:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	691b      	ldr	r3, [r3, #16]
 8007e9c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007ea0:	4909      	ldr	r1, [pc, #36]	; (8007ec8 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8007ea2:	4313      	orrs	r3, r2
 8007ea4:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	f003 0308 	and.w	r3, r3, #8
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	d003      	beq.n	8007eba <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	7d1a      	ldrb	r2, [r3, #20]
 8007eb6:	4b06      	ldr	r3, [pc, #24]	; (8007ed0 <HAL_RCCEx_PeriphCLKConfig+0x424>)
 8007eb8:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8007eba:	2300      	movs	r3, #0
}
 8007ebc:	4618      	mov	r0, r3
 8007ebe:	3718      	adds	r7, #24
 8007ec0:	46bd      	mov	sp, r7
 8007ec2:	bd80      	pop	{r7, pc}
 8007ec4:	40007000 	.word	0x40007000
 8007ec8:	40023800 	.word	0x40023800
 8007ecc:	42470e40 	.word	0x42470e40
 8007ed0:	424711e0 	.word	0x424711e0

08007ed4 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8007ed4:	b480      	push	{r7}
 8007ed6:	b087      	sub	sp, #28
 8007ed8:	af00      	add	r7, sp, #0
 8007eda:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8007edc:	2300      	movs	r3, #0
 8007ede:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8007ee0:	2300      	movs	r3, #0
 8007ee2:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8007ee4:	2300      	movs	r3, #0
 8007ee6:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8007ee8:	2300      	movs	r3, #0
 8007eea:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	2b01      	cmp	r3, #1
 8007ef0:	d13f      	bne.n	8007f72 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8007ef2:	4b23      	ldr	r3, [pc, #140]	; (8007f80 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8007ef4:	689b      	ldr	r3, [r3, #8]
 8007ef6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007efa:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d004      	beq.n	8007f0c <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8007f02:	2b01      	cmp	r3, #1
 8007f04:	d131      	bne.n	8007f6a <HAL_RCCEx_GetPeriphCLKFreq+0x96>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8007f06:	4b1f      	ldr	r3, [pc, #124]	; (8007f84 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8007f08:	617b      	str	r3, [r7, #20]
          break;
 8007f0a:	e031      	b.n	8007f70 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
      case RCC_I2SCLKSOURCE_PLLI2S:
        {
#if defined(STM32F411xE)
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8007f0c:	4b1c      	ldr	r3, [pc, #112]	; (8007f80 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8007f0e:	685b      	ldr	r3, [r3, #4]
 8007f10:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007f14:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007f18:	d109      	bne.n	8007f2e <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8007f1a:	4b19      	ldr	r3, [pc, #100]	; (8007f80 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8007f1c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007f20:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007f24:	4a18      	ldr	r2, [pc, #96]	; (8007f88 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8007f26:	fbb2 f3f3 	udiv	r3, r2, r3
 8007f2a:	613b      	str	r3, [r7, #16]
 8007f2c:	e008      	b.n	8007f40 <HAL_RCCEx_GetPeriphCLKFreq+0x6c>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8007f2e:	4b14      	ldr	r3, [pc, #80]	; (8007f80 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8007f30:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007f34:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007f38:	4a14      	ldr	r2, [pc, #80]	; (8007f8c <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8007f3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8007f3e:	613b      	str	r3, [r7, #16]
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8007f40:	4b0f      	ldr	r3, [pc, #60]	; (8007f80 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8007f42:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007f46:	099b      	lsrs	r3, r3, #6
 8007f48:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007f4c:	693b      	ldr	r3, [r7, #16]
 8007f4e:	fb02 f303 	mul.w	r3, r2, r3
 8007f52:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8007f54:	4b0a      	ldr	r3, [pc, #40]	; (8007f80 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8007f56:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007f5a:	0f1b      	lsrs	r3, r3, #28
 8007f5c:	f003 0307 	and.w	r3, r3, #7
 8007f60:	68ba      	ldr	r2, [r7, #8]
 8007f62:	fbb2 f3f3 	udiv	r3, r2, r3
 8007f66:	617b      	str	r3, [r7, #20]
          break;
 8007f68:	e002      	b.n	8007f70 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8007f6a:	2300      	movs	r3, #0
 8007f6c:	617b      	str	r3, [r7, #20]
          break;
 8007f6e:	bf00      	nop
        }
      }
      break;
 8007f70:	bf00      	nop
    }
  }
  return frequency;
 8007f72:	697b      	ldr	r3, [r7, #20]
}
 8007f74:	4618      	mov	r0, r3
 8007f76:	371c      	adds	r7, #28
 8007f78:	46bd      	mov	sp, r7
 8007f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f7e:	4770      	bx	lr
 8007f80:	40023800 	.word	0x40023800
 8007f84:	00bb8000 	.word	0x00bb8000
 8007f88:	007a1200 	.word	0x007a1200
 8007f8c:	00f42400 	.word	0x00f42400

08007f90 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007f90:	b580      	push	{r7, lr}
 8007f92:	b082      	sub	sp, #8
 8007f94:	af00      	add	r7, sp, #0
 8007f96:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	d101      	bne.n	8007fa2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007f9e:	2301      	movs	r3, #1
 8007fa0:	e113      	b.n	80081ca <HAL_SPI_Init+0x23a>
  }

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	4a8b      	ldr	r2, [pc, #556]	; (80081d4 <HAL_SPI_Init+0x244>)
 8007fa8:	4293      	cmp	r3, r2
 8007faa:	d018      	beq.n	8007fde <HAL_SPI_Init+0x4e>
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	4a89      	ldr	r2, [pc, #548]	; (80081d8 <HAL_SPI_Init+0x248>)
 8007fb2:	4293      	cmp	r3, r2
 8007fb4:	d013      	beq.n	8007fde <HAL_SPI_Init+0x4e>
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	4a88      	ldr	r2, [pc, #544]	; (80081dc <HAL_SPI_Init+0x24c>)
 8007fbc:	4293      	cmp	r3, r2
 8007fbe:	d00e      	beq.n	8007fde <HAL_SPI_Init+0x4e>
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	4a86      	ldr	r2, [pc, #536]	; (80081e0 <HAL_SPI_Init+0x250>)
 8007fc6:	4293      	cmp	r3, r2
 8007fc8:	d009      	beq.n	8007fde <HAL_SPI_Init+0x4e>
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	4a85      	ldr	r2, [pc, #532]	; (80081e4 <HAL_SPI_Init+0x254>)
 8007fd0:	4293      	cmp	r3, r2
 8007fd2:	d004      	beq.n	8007fde <HAL_SPI_Init+0x4e>
 8007fd4:	f44f 71a1 	mov.w	r1, #322	; 0x142
 8007fd8:	4883      	ldr	r0, [pc, #524]	; (80081e8 <HAL_SPI_Init+0x258>)
 8007fda:	f7fa fa84 	bl	80024e6 <assert_failed>
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	685b      	ldr	r3, [r3, #4]
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	d009      	beq.n	8007ffa <HAL_SPI_Init+0x6a>
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	685b      	ldr	r3, [r3, #4]
 8007fea:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007fee:	d004      	beq.n	8007ffa <HAL_SPI_Init+0x6a>
 8007ff0:	f240 1143 	movw	r1, #323	; 0x143
 8007ff4:	487c      	ldr	r0, [pc, #496]	; (80081e8 <HAL_SPI_Init+0x258>)
 8007ff6:	f7fa fa76 	bl	80024e6 <assert_failed>
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	689b      	ldr	r3, [r3, #8]
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	d00e      	beq.n	8008020 <HAL_SPI_Init+0x90>
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	689b      	ldr	r3, [r3, #8]
 8008006:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800800a:	d009      	beq.n	8008020 <HAL_SPI_Init+0x90>
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	689b      	ldr	r3, [r3, #8]
 8008010:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008014:	d004      	beq.n	8008020 <HAL_SPI_Init+0x90>
 8008016:	f44f 71a2 	mov.w	r1, #324	; 0x144
 800801a:	4873      	ldr	r0, [pc, #460]	; (80081e8 <HAL_SPI_Init+0x258>)
 800801c:	f7fa fa63 	bl	80024e6 <assert_failed>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	68db      	ldr	r3, [r3, #12]
 8008024:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008028:	d008      	beq.n	800803c <HAL_SPI_Init+0xac>
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	68db      	ldr	r3, [r3, #12]
 800802e:	2b00      	cmp	r3, #0
 8008030:	d004      	beq.n	800803c <HAL_SPI_Init+0xac>
 8008032:	f240 1145 	movw	r1, #325	; 0x145
 8008036:	486c      	ldr	r0, [pc, #432]	; (80081e8 <HAL_SPI_Init+0x258>)
 8008038:	f7fa fa55 	bl	80024e6 <assert_failed>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	699b      	ldr	r3, [r3, #24]
 8008040:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008044:	d00d      	beq.n	8008062 <HAL_SPI_Init+0xd2>
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	699b      	ldr	r3, [r3, #24]
 800804a:	2b00      	cmp	r3, #0
 800804c:	d009      	beq.n	8008062 <HAL_SPI_Init+0xd2>
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	699b      	ldr	r3, [r3, #24]
 8008052:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008056:	d004      	beq.n	8008062 <HAL_SPI_Init+0xd2>
 8008058:	f44f 71a3 	mov.w	r1, #326	; 0x146
 800805c:	4862      	ldr	r0, [pc, #392]	; (80081e8 <HAL_SPI_Init+0x258>)
 800805e:	f7fa fa42 	bl	80024e6 <assert_failed>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	69db      	ldr	r3, [r3, #28]
 8008066:	2b00      	cmp	r3, #0
 8008068:	d020      	beq.n	80080ac <HAL_SPI_Init+0x11c>
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	69db      	ldr	r3, [r3, #28]
 800806e:	2b08      	cmp	r3, #8
 8008070:	d01c      	beq.n	80080ac <HAL_SPI_Init+0x11c>
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	69db      	ldr	r3, [r3, #28]
 8008076:	2b10      	cmp	r3, #16
 8008078:	d018      	beq.n	80080ac <HAL_SPI_Init+0x11c>
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	69db      	ldr	r3, [r3, #28]
 800807e:	2b18      	cmp	r3, #24
 8008080:	d014      	beq.n	80080ac <HAL_SPI_Init+0x11c>
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	69db      	ldr	r3, [r3, #28]
 8008086:	2b20      	cmp	r3, #32
 8008088:	d010      	beq.n	80080ac <HAL_SPI_Init+0x11c>
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	69db      	ldr	r3, [r3, #28]
 800808e:	2b28      	cmp	r3, #40	; 0x28
 8008090:	d00c      	beq.n	80080ac <HAL_SPI_Init+0x11c>
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	69db      	ldr	r3, [r3, #28]
 8008096:	2b30      	cmp	r3, #48	; 0x30
 8008098:	d008      	beq.n	80080ac <HAL_SPI_Init+0x11c>
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	69db      	ldr	r3, [r3, #28]
 800809e:	2b38      	cmp	r3, #56	; 0x38
 80080a0:	d004      	beq.n	80080ac <HAL_SPI_Init+0x11c>
 80080a2:	f240 1147 	movw	r1, #327	; 0x147
 80080a6:	4850      	ldr	r0, [pc, #320]	; (80081e8 <HAL_SPI_Init+0x258>)
 80080a8:	f7fa fa1d 	bl	80024e6 <assert_failed>
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	6a1b      	ldr	r3, [r3, #32]
 80080b0:	2b00      	cmp	r3, #0
 80080b2:	d008      	beq.n	80080c6 <HAL_SPI_Init+0x136>
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	6a1b      	ldr	r3, [r3, #32]
 80080b8:	2b80      	cmp	r3, #128	; 0x80
 80080ba:	d004      	beq.n	80080c6 <HAL_SPI_Init+0x136>
 80080bc:	f44f 71a4 	mov.w	r1, #328	; 0x148
 80080c0:	4849      	ldr	r0, [pc, #292]	; (80081e8 <HAL_SPI_Init+0x258>)
 80080c2:	f7fa fa10 	bl	80024e6 <assert_failed>
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	d008      	beq.n	80080e0 <HAL_SPI_Init+0x150>
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080d2:	2b10      	cmp	r3, #16
 80080d4:	d004      	beq.n	80080e0 <HAL_SPI_Init+0x150>
 80080d6:	f240 1149 	movw	r1, #329	; 0x149
 80080da:	4843      	ldr	r0, [pc, #268]	; (80081e8 <HAL_SPI_Init+0x258>)
 80080dc:	f7fa fa03 	bl	80024e6 <assert_failed>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	d119      	bne.n	800811c <HAL_SPI_Init+0x18c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	691b      	ldr	r3, [r3, #16]
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	d008      	beq.n	8008102 <HAL_SPI_Init+0x172>
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	691b      	ldr	r3, [r3, #16]
 80080f4:	2b02      	cmp	r3, #2
 80080f6:	d004      	beq.n	8008102 <HAL_SPI_Init+0x172>
 80080f8:	f44f 71a6 	mov.w	r1, #332	; 0x14c
 80080fc:	483a      	ldr	r0, [pc, #232]	; (80081e8 <HAL_SPI_Init+0x258>)
 80080fe:	f7fa f9f2 	bl	80024e6 <assert_failed>
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	695b      	ldr	r3, [r3, #20]
 8008106:	2b00      	cmp	r3, #0
 8008108:	d008      	beq.n	800811c <HAL_SPI_Init+0x18c>
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	695b      	ldr	r3, [r3, #20]
 800810e:	2b01      	cmp	r3, #1
 8008110:	d004      	beq.n	800811c <HAL_SPI_Init+0x18c>
 8008112:	f240 114d 	movw	r1, #333	; 0x14d
 8008116:	4834      	ldr	r0, [pc, #208]	; (80081e8 <HAL_SPI_Init+0x258>)
 8008118:	f7fa f9e5 	bl	80024e6 <assert_failed>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	2200      	movs	r2, #0
 8008120:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008128:	b2db      	uxtb	r3, r3
 800812a:	2b00      	cmp	r3, #0
 800812c:	d106      	bne.n	800813c <HAL_SPI_Init+0x1ac>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	2200      	movs	r2, #0
 8008132:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008136:	6878      	ldr	r0, [r7, #4]
 8008138:	f7fa fa16 	bl	8002568 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	2202      	movs	r2, #2
 8008140:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	681a      	ldr	r2, [r3, #0]
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008152:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	685a      	ldr	r2, [r3, #4]
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	689b      	ldr	r3, [r3, #8]
 800815c:	431a      	orrs	r2, r3
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	68db      	ldr	r3, [r3, #12]
 8008162:	431a      	orrs	r2, r3
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	691b      	ldr	r3, [r3, #16]
 8008168:	431a      	orrs	r2, r3
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	695b      	ldr	r3, [r3, #20]
 800816e:	431a      	orrs	r2, r3
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	699b      	ldr	r3, [r3, #24]
 8008174:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008178:	431a      	orrs	r2, r3
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	69db      	ldr	r3, [r3, #28]
 800817e:	431a      	orrs	r2, r3
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	6a1b      	ldr	r3, [r3, #32]
 8008184:	ea42 0103 	orr.w	r1, r2, r3
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	430a      	orrs	r2, r1
 8008192:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	699b      	ldr	r3, [r3, #24]
 8008198:	0c1b      	lsrs	r3, r3, #16
 800819a:	f003 0104 	and.w	r1, r3, #4
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	430a      	orrs	r2, r1
 80081a8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	69da      	ldr	r2, [r3, #28]
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80081b8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	2200      	movs	r2, #0
 80081be:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	2201      	movs	r2, #1
 80081c4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80081c8:	2300      	movs	r3, #0
}
 80081ca:	4618      	mov	r0, r3
 80081cc:	3708      	adds	r7, #8
 80081ce:	46bd      	mov	sp, r7
 80081d0:	bd80      	pop	{r7, pc}
 80081d2:	bf00      	nop
 80081d4:	40013000 	.word	0x40013000
 80081d8:	40003800 	.word	0x40003800
 80081dc:	40003c00 	.word	0x40003c00
 80081e0:	40013400 	.word	0x40013400
 80081e4:	40015000 	.word	0x40015000
 80081e8:	0800fef8 	.word	0x0800fef8

080081ec <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80081ec:	b580      	push	{r7, lr}
 80081ee:	b082      	sub	sp, #8
 80081f0:	af00      	add	r7, sp, #0
 80081f2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	d101      	bne.n	80081fe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80081fa:	2301      	movs	r3, #1
 80081fc:	e083      	b.n	8008306 <HAL_TIM_Base_Init+0x11a>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	4a43      	ldr	r2, [pc, #268]	; (8008310 <HAL_TIM_Base_Init+0x124>)
 8008204:	4293      	cmp	r3, r2
 8008206:	d027      	beq.n	8008258 <HAL_TIM_Base_Init+0x6c>
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008210:	d022      	beq.n	8008258 <HAL_TIM_Base_Init+0x6c>
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	4a3f      	ldr	r2, [pc, #252]	; (8008314 <HAL_TIM_Base_Init+0x128>)
 8008218:	4293      	cmp	r3, r2
 800821a:	d01d      	beq.n	8008258 <HAL_TIM_Base_Init+0x6c>
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	4a3d      	ldr	r2, [pc, #244]	; (8008318 <HAL_TIM_Base_Init+0x12c>)
 8008222:	4293      	cmp	r3, r2
 8008224:	d018      	beq.n	8008258 <HAL_TIM_Base_Init+0x6c>
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	4a3c      	ldr	r2, [pc, #240]	; (800831c <HAL_TIM_Base_Init+0x130>)
 800822c:	4293      	cmp	r3, r2
 800822e:	d013      	beq.n	8008258 <HAL_TIM_Base_Init+0x6c>
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	4a3a      	ldr	r2, [pc, #232]	; (8008320 <HAL_TIM_Base_Init+0x134>)
 8008236:	4293      	cmp	r3, r2
 8008238:	d00e      	beq.n	8008258 <HAL_TIM_Base_Init+0x6c>
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	4a39      	ldr	r2, [pc, #228]	; (8008324 <HAL_TIM_Base_Init+0x138>)
 8008240:	4293      	cmp	r3, r2
 8008242:	d009      	beq.n	8008258 <HAL_TIM_Base_Init+0x6c>
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	4a37      	ldr	r2, [pc, #220]	; (8008328 <HAL_TIM_Base_Init+0x13c>)
 800824a:	4293      	cmp	r3, r2
 800824c:	d004      	beq.n	8008258 <HAL_TIM_Base_Init+0x6c>
 800824e:	f44f 7189 	mov.w	r1, #274	; 0x112
 8008252:	4836      	ldr	r0, [pc, #216]	; (800832c <HAL_TIM_Base_Init+0x140>)
 8008254:	f7fa f947 	bl	80024e6 <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	689b      	ldr	r3, [r3, #8]
 800825c:	2b00      	cmp	r3, #0
 800825e:	d014      	beq.n	800828a <HAL_TIM_Base_Init+0x9e>
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	689b      	ldr	r3, [r3, #8]
 8008264:	2b10      	cmp	r3, #16
 8008266:	d010      	beq.n	800828a <HAL_TIM_Base_Init+0x9e>
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	689b      	ldr	r3, [r3, #8]
 800826c:	2b20      	cmp	r3, #32
 800826e:	d00c      	beq.n	800828a <HAL_TIM_Base_Init+0x9e>
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	689b      	ldr	r3, [r3, #8]
 8008274:	2b40      	cmp	r3, #64	; 0x40
 8008276:	d008      	beq.n	800828a <HAL_TIM_Base_Init+0x9e>
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	689b      	ldr	r3, [r3, #8]
 800827c:	2b60      	cmp	r3, #96	; 0x60
 800827e:	d004      	beq.n	800828a <HAL_TIM_Base_Init+0x9e>
 8008280:	f240 1113 	movw	r1, #275	; 0x113
 8008284:	4829      	ldr	r0, [pc, #164]	; (800832c <HAL_TIM_Base_Init+0x140>)
 8008286:	f7fa f92e 	bl	80024e6 <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	691b      	ldr	r3, [r3, #16]
 800828e:	2b00      	cmp	r3, #0
 8008290:	d00e      	beq.n	80082b0 <HAL_TIM_Base_Init+0xc4>
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	691b      	ldr	r3, [r3, #16]
 8008296:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800829a:	d009      	beq.n	80082b0 <HAL_TIM_Base_Init+0xc4>
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	691b      	ldr	r3, [r3, #16]
 80082a0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80082a4:	d004      	beq.n	80082b0 <HAL_TIM_Base_Init+0xc4>
 80082a6:	f44f 718a 	mov.w	r1, #276	; 0x114
 80082aa:	4820      	ldr	r0, [pc, #128]	; (800832c <HAL_TIM_Base_Init+0x140>)
 80082ac:	f7fa f91b 	bl	80024e6 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	699b      	ldr	r3, [r3, #24]
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	d008      	beq.n	80082ca <HAL_TIM_Base_Init+0xde>
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	699b      	ldr	r3, [r3, #24]
 80082bc:	2b80      	cmp	r3, #128	; 0x80
 80082be:	d004      	beq.n	80082ca <HAL_TIM_Base_Init+0xde>
 80082c0:	f240 1115 	movw	r1, #277	; 0x115
 80082c4:	4819      	ldr	r0, [pc, #100]	; (800832c <HAL_TIM_Base_Init+0x140>)
 80082c6:	f7fa f90e 	bl	80024e6 <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80082d0:	b2db      	uxtb	r3, r3
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	d106      	bne.n	80082e4 <HAL_TIM_Base_Init+0xf8>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	2200      	movs	r2, #0
 80082da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80082de:	6878      	ldr	r0, [r7, #4]
 80082e0:	f7fa faec 	bl	80028bc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	2202      	movs	r2, #2
 80082e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	681a      	ldr	r2, [r3, #0]
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	3304      	adds	r3, #4
 80082f4:	4619      	mov	r1, r3
 80082f6:	4610      	mov	r0, r2
 80082f8:	f000 fe1c 	bl	8008f34 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	2201      	movs	r2, #1
 8008300:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008304:	2300      	movs	r3, #0
}
 8008306:	4618      	mov	r0, r3
 8008308:	3708      	adds	r7, #8
 800830a:	46bd      	mov	sp, r7
 800830c:	bd80      	pop	{r7, pc}
 800830e:	bf00      	nop
 8008310:	40010000 	.word	0x40010000
 8008314:	40000400 	.word	0x40000400
 8008318:	40000800 	.word	0x40000800
 800831c:	40000c00 	.word	0x40000c00
 8008320:	40014000 	.word	0x40014000
 8008324:	40014400 	.word	0x40014400
 8008328:	40014800 	.word	0x40014800
 800832c:	0800ff30 	.word	0x0800ff30

08008330 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008330:	b580      	push	{r7, lr}
 8008332:	b082      	sub	sp, #8
 8008334:	af00      	add	r7, sp, #0
 8008336:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	2b00      	cmp	r3, #0
 800833c:	d101      	bne.n	8008342 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800833e:	2301      	movs	r3, #1
 8008340:	e083      	b.n	800844a <HAL_TIM_PWM_Init+0x11a>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	4a43      	ldr	r2, [pc, #268]	; (8008454 <HAL_TIM_PWM_Init+0x124>)
 8008348:	4293      	cmp	r3, r2
 800834a:	d027      	beq.n	800839c <HAL_TIM_PWM_Init+0x6c>
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008354:	d022      	beq.n	800839c <HAL_TIM_PWM_Init+0x6c>
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	4a3f      	ldr	r2, [pc, #252]	; (8008458 <HAL_TIM_PWM_Init+0x128>)
 800835c:	4293      	cmp	r3, r2
 800835e:	d01d      	beq.n	800839c <HAL_TIM_PWM_Init+0x6c>
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	4a3d      	ldr	r2, [pc, #244]	; (800845c <HAL_TIM_PWM_Init+0x12c>)
 8008366:	4293      	cmp	r3, r2
 8008368:	d018      	beq.n	800839c <HAL_TIM_PWM_Init+0x6c>
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	4a3c      	ldr	r2, [pc, #240]	; (8008460 <HAL_TIM_PWM_Init+0x130>)
 8008370:	4293      	cmp	r3, r2
 8008372:	d013      	beq.n	800839c <HAL_TIM_PWM_Init+0x6c>
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	4a3a      	ldr	r2, [pc, #232]	; (8008464 <HAL_TIM_PWM_Init+0x134>)
 800837a:	4293      	cmp	r3, r2
 800837c:	d00e      	beq.n	800839c <HAL_TIM_PWM_Init+0x6c>
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	4a39      	ldr	r2, [pc, #228]	; (8008468 <HAL_TIM_PWM_Init+0x138>)
 8008384:	4293      	cmp	r3, r2
 8008386:	d009      	beq.n	800839c <HAL_TIM_PWM_Init+0x6c>
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	4a37      	ldr	r2, [pc, #220]	; (800846c <HAL_TIM_PWM_Init+0x13c>)
 800838e:	4293      	cmp	r3, r2
 8008390:	d004      	beq.n	800839c <HAL_TIM_PWM_Init+0x6c>
 8008392:	f240 419b 	movw	r1, #1179	; 0x49b
 8008396:	4836      	ldr	r0, [pc, #216]	; (8008470 <HAL_TIM_PWM_Init+0x140>)
 8008398:	f7fa f8a5 	bl	80024e6 <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	689b      	ldr	r3, [r3, #8]
 80083a0:	2b00      	cmp	r3, #0
 80083a2:	d014      	beq.n	80083ce <HAL_TIM_PWM_Init+0x9e>
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	689b      	ldr	r3, [r3, #8]
 80083a8:	2b10      	cmp	r3, #16
 80083aa:	d010      	beq.n	80083ce <HAL_TIM_PWM_Init+0x9e>
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	689b      	ldr	r3, [r3, #8]
 80083b0:	2b20      	cmp	r3, #32
 80083b2:	d00c      	beq.n	80083ce <HAL_TIM_PWM_Init+0x9e>
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	689b      	ldr	r3, [r3, #8]
 80083b8:	2b40      	cmp	r3, #64	; 0x40
 80083ba:	d008      	beq.n	80083ce <HAL_TIM_PWM_Init+0x9e>
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	689b      	ldr	r3, [r3, #8]
 80083c0:	2b60      	cmp	r3, #96	; 0x60
 80083c2:	d004      	beq.n	80083ce <HAL_TIM_PWM_Init+0x9e>
 80083c4:	f240 419c 	movw	r1, #1180	; 0x49c
 80083c8:	4829      	ldr	r0, [pc, #164]	; (8008470 <HAL_TIM_PWM_Init+0x140>)
 80083ca:	f7fa f88c 	bl	80024e6 <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	691b      	ldr	r3, [r3, #16]
 80083d2:	2b00      	cmp	r3, #0
 80083d4:	d00e      	beq.n	80083f4 <HAL_TIM_PWM_Init+0xc4>
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	691b      	ldr	r3, [r3, #16]
 80083da:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80083de:	d009      	beq.n	80083f4 <HAL_TIM_PWM_Init+0xc4>
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	691b      	ldr	r3, [r3, #16]
 80083e4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80083e8:	d004      	beq.n	80083f4 <HAL_TIM_PWM_Init+0xc4>
 80083ea:	f240 419d 	movw	r1, #1181	; 0x49d
 80083ee:	4820      	ldr	r0, [pc, #128]	; (8008470 <HAL_TIM_PWM_Init+0x140>)
 80083f0:	f7fa f879 	bl	80024e6 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	699b      	ldr	r3, [r3, #24]
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	d008      	beq.n	800840e <HAL_TIM_PWM_Init+0xde>
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	699b      	ldr	r3, [r3, #24]
 8008400:	2b80      	cmp	r3, #128	; 0x80
 8008402:	d004      	beq.n	800840e <HAL_TIM_PWM_Init+0xde>
 8008404:	f240 419e 	movw	r1, #1182	; 0x49e
 8008408:	4819      	ldr	r0, [pc, #100]	; (8008470 <HAL_TIM_PWM_Init+0x140>)
 800840a:	f7fa f86c 	bl	80024e6 <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008414:	b2db      	uxtb	r3, r3
 8008416:	2b00      	cmp	r3, #0
 8008418:	d106      	bne.n	8008428 <HAL_TIM_PWM_Init+0xf8>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	2200      	movs	r2, #0
 800841e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8008422:	6878      	ldr	r0, [r7, #4]
 8008424:	f000 f826 	bl	8008474 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	2202      	movs	r2, #2
 800842c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	681a      	ldr	r2, [r3, #0]
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	3304      	adds	r3, #4
 8008438:	4619      	mov	r1, r3
 800843a:	4610      	mov	r0, r2
 800843c:	f000 fd7a 	bl	8008f34 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	2201      	movs	r2, #1
 8008444:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008448:	2300      	movs	r3, #0
}
 800844a:	4618      	mov	r0, r3
 800844c:	3708      	adds	r7, #8
 800844e:	46bd      	mov	sp, r7
 8008450:	bd80      	pop	{r7, pc}
 8008452:	bf00      	nop
 8008454:	40010000 	.word	0x40010000
 8008458:	40000400 	.word	0x40000400
 800845c:	40000800 	.word	0x40000800
 8008460:	40000c00 	.word	0x40000c00
 8008464:	40014000 	.word	0x40014000
 8008468:	40014400 	.word	0x40014400
 800846c:	40014800 	.word	0x40014800
 8008470:	0800ff30 	.word	0x0800ff30

08008474 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8008474:	b480      	push	{r7}
 8008476:	b083      	sub	sp, #12
 8008478:	af00      	add	r7, sp, #0
 800847a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800847c:	bf00      	nop
 800847e:	370c      	adds	r7, #12
 8008480:	46bd      	mov	sp, r7
 8008482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008486:	4770      	bx	lr

08008488 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008488:	b580      	push	{r7, lr}
 800848a:	b084      	sub	sp, #16
 800848c:	af00      	add	r7, sp, #0
 800848e:	6078      	str	r0, [r7, #4]
 8008490:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	4a4e      	ldr	r2, [pc, #312]	; (80085d0 <HAL_TIM_PWM_Start+0x148>)
 8008498:	4293      	cmp	r3, r2
 800849a:	d10b      	bne.n	80084b4 <HAL_TIM_PWM_Start+0x2c>
 800849c:	683b      	ldr	r3, [r7, #0]
 800849e:	2b00      	cmp	r3, #0
 80084a0:	d06c      	beq.n	800857c <HAL_TIM_PWM_Start+0xf4>
 80084a2:	683b      	ldr	r3, [r7, #0]
 80084a4:	2b04      	cmp	r3, #4
 80084a6:	d069      	beq.n	800857c <HAL_TIM_PWM_Start+0xf4>
 80084a8:	683b      	ldr	r3, [r7, #0]
 80084aa:	2b08      	cmp	r3, #8
 80084ac:	d066      	beq.n	800857c <HAL_TIM_PWM_Start+0xf4>
 80084ae:	683b      	ldr	r3, [r7, #0]
 80084b0:	2b0c      	cmp	r3, #12
 80084b2:	d063      	beq.n	800857c <HAL_TIM_PWM_Start+0xf4>
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80084bc:	d10b      	bne.n	80084d6 <HAL_TIM_PWM_Start+0x4e>
 80084be:	683b      	ldr	r3, [r7, #0]
 80084c0:	2b00      	cmp	r3, #0
 80084c2:	d05b      	beq.n	800857c <HAL_TIM_PWM_Start+0xf4>
 80084c4:	683b      	ldr	r3, [r7, #0]
 80084c6:	2b04      	cmp	r3, #4
 80084c8:	d058      	beq.n	800857c <HAL_TIM_PWM_Start+0xf4>
 80084ca:	683b      	ldr	r3, [r7, #0]
 80084cc:	2b08      	cmp	r3, #8
 80084ce:	d055      	beq.n	800857c <HAL_TIM_PWM_Start+0xf4>
 80084d0:	683b      	ldr	r3, [r7, #0]
 80084d2:	2b0c      	cmp	r3, #12
 80084d4:	d052      	beq.n	800857c <HAL_TIM_PWM_Start+0xf4>
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	4a3e      	ldr	r2, [pc, #248]	; (80085d4 <HAL_TIM_PWM_Start+0x14c>)
 80084dc:	4293      	cmp	r3, r2
 80084de:	d10b      	bne.n	80084f8 <HAL_TIM_PWM_Start+0x70>
 80084e0:	683b      	ldr	r3, [r7, #0]
 80084e2:	2b00      	cmp	r3, #0
 80084e4:	d04a      	beq.n	800857c <HAL_TIM_PWM_Start+0xf4>
 80084e6:	683b      	ldr	r3, [r7, #0]
 80084e8:	2b04      	cmp	r3, #4
 80084ea:	d047      	beq.n	800857c <HAL_TIM_PWM_Start+0xf4>
 80084ec:	683b      	ldr	r3, [r7, #0]
 80084ee:	2b08      	cmp	r3, #8
 80084f0:	d044      	beq.n	800857c <HAL_TIM_PWM_Start+0xf4>
 80084f2:	683b      	ldr	r3, [r7, #0]
 80084f4:	2b0c      	cmp	r3, #12
 80084f6:	d041      	beq.n	800857c <HAL_TIM_PWM_Start+0xf4>
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	4a36      	ldr	r2, [pc, #216]	; (80085d8 <HAL_TIM_PWM_Start+0x150>)
 80084fe:	4293      	cmp	r3, r2
 8008500:	d10b      	bne.n	800851a <HAL_TIM_PWM_Start+0x92>
 8008502:	683b      	ldr	r3, [r7, #0]
 8008504:	2b00      	cmp	r3, #0
 8008506:	d039      	beq.n	800857c <HAL_TIM_PWM_Start+0xf4>
 8008508:	683b      	ldr	r3, [r7, #0]
 800850a:	2b04      	cmp	r3, #4
 800850c:	d036      	beq.n	800857c <HAL_TIM_PWM_Start+0xf4>
 800850e:	683b      	ldr	r3, [r7, #0]
 8008510:	2b08      	cmp	r3, #8
 8008512:	d033      	beq.n	800857c <HAL_TIM_PWM_Start+0xf4>
 8008514:	683b      	ldr	r3, [r7, #0]
 8008516:	2b0c      	cmp	r3, #12
 8008518:	d030      	beq.n	800857c <HAL_TIM_PWM_Start+0xf4>
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	4a2f      	ldr	r2, [pc, #188]	; (80085dc <HAL_TIM_PWM_Start+0x154>)
 8008520:	4293      	cmp	r3, r2
 8008522:	d10b      	bne.n	800853c <HAL_TIM_PWM_Start+0xb4>
 8008524:	683b      	ldr	r3, [r7, #0]
 8008526:	2b00      	cmp	r3, #0
 8008528:	d028      	beq.n	800857c <HAL_TIM_PWM_Start+0xf4>
 800852a:	683b      	ldr	r3, [r7, #0]
 800852c:	2b04      	cmp	r3, #4
 800852e:	d025      	beq.n	800857c <HAL_TIM_PWM_Start+0xf4>
 8008530:	683b      	ldr	r3, [r7, #0]
 8008532:	2b08      	cmp	r3, #8
 8008534:	d022      	beq.n	800857c <HAL_TIM_PWM_Start+0xf4>
 8008536:	683b      	ldr	r3, [r7, #0]
 8008538:	2b0c      	cmp	r3, #12
 800853a:	d01f      	beq.n	800857c <HAL_TIM_PWM_Start+0xf4>
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	4a27      	ldr	r2, [pc, #156]	; (80085e0 <HAL_TIM_PWM_Start+0x158>)
 8008542:	4293      	cmp	r3, r2
 8008544:	d105      	bne.n	8008552 <HAL_TIM_PWM_Start+0xca>
 8008546:	683b      	ldr	r3, [r7, #0]
 8008548:	2b00      	cmp	r3, #0
 800854a:	d017      	beq.n	800857c <HAL_TIM_PWM_Start+0xf4>
 800854c:	683b      	ldr	r3, [r7, #0]
 800854e:	2b04      	cmp	r3, #4
 8008550:	d014      	beq.n	800857c <HAL_TIM_PWM_Start+0xf4>
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	4a23      	ldr	r2, [pc, #140]	; (80085e4 <HAL_TIM_PWM_Start+0x15c>)
 8008558:	4293      	cmp	r3, r2
 800855a:	d102      	bne.n	8008562 <HAL_TIM_PWM_Start+0xda>
 800855c:	683b      	ldr	r3, [r7, #0]
 800855e:	2b00      	cmp	r3, #0
 8008560:	d00c      	beq.n	800857c <HAL_TIM_PWM_Start+0xf4>
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	4a20      	ldr	r2, [pc, #128]	; (80085e8 <HAL_TIM_PWM_Start+0x160>)
 8008568:	4293      	cmp	r3, r2
 800856a:	d102      	bne.n	8008572 <HAL_TIM_PWM_Start+0xea>
 800856c:	683b      	ldr	r3, [r7, #0]
 800856e:	2b00      	cmp	r3, #0
 8008570:	d004      	beq.n	800857c <HAL_TIM_PWM_Start+0xf4>
 8008572:	f240 5113 	movw	r1, #1299	; 0x513
 8008576:	481d      	ldr	r0, [pc, #116]	; (80085ec <HAL_TIM_PWM_Start+0x164>)
 8008578:	f7f9 ffb5 	bl	80024e6 <assert_failed>

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	2201      	movs	r2, #1
 8008582:	6839      	ldr	r1, [r7, #0]
 8008584:	4618      	mov	r0, r3
 8008586:	f001 f805 	bl	8009594 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	4a10      	ldr	r2, [pc, #64]	; (80085d0 <HAL_TIM_PWM_Start+0x148>)
 8008590:	4293      	cmp	r3, r2
 8008592:	d107      	bne.n	80085a4 <HAL_TIM_PWM_Start+0x11c>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80085a2:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	689b      	ldr	r3, [r3, #8]
 80085aa:	f003 0307 	and.w	r3, r3, #7
 80085ae:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80085b0:	68fb      	ldr	r3, [r7, #12]
 80085b2:	2b06      	cmp	r3, #6
 80085b4:	d007      	beq.n	80085c6 <HAL_TIM_PWM_Start+0x13e>
  {
    __HAL_TIM_ENABLE(htim);
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	681a      	ldr	r2, [r3, #0]
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	f042 0201 	orr.w	r2, r2, #1
 80085c4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80085c6:	2300      	movs	r3, #0
}
 80085c8:	4618      	mov	r0, r3
 80085ca:	3710      	adds	r7, #16
 80085cc:	46bd      	mov	sp, r7
 80085ce:	bd80      	pop	{r7, pc}
 80085d0:	40010000 	.word	0x40010000
 80085d4:	40000400 	.word	0x40000400
 80085d8:	40000800 	.word	0x40000800
 80085dc:	40000c00 	.word	0x40000c00
 80085e0:	40014000 	.word	0x40014000
 80085e4:	40014400 	.word	0x40014400
 80085e8:	40014800 	.word	0x40014800
 80085ec:	0800ff30 	.word	0x0800ff30

080085f0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80085f0:	b580      	push	{r7, lr}
 80085f2:	b084      	sub	sp, #16
 80085f4:	af00      	add	r7, sp, #0
 80085f6:	60f8      	str	r0, [r7, #12]
 80085f8:	60b9      	str	r1, [r7, #8]
 80085fa:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_CHANNELS(Channel));
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	2b00      	cmp	r3, #0
 8008600:	d010      	beq.n	8008624 <HAL_TIM_PWM_ConfigChannel+0x34>
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	2b04      	cmp	r3, #4
 8008606:	d00d      	beq.n	8008624 <HAL_TIM_PWM_ConfigChannel+0x34>
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	2b08      	cmp	r3, #8
 800860c:	d00a      	beq.n	8008624 <HAL_TIM_PWM_ConfigChannel+0x34>
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	2b0c      	cmp	r3, #12
 8008612:	d007      	beq.n	8008624 <HAL_TIM_PWM_ConfigChannel+0x34>
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	2b3c      	cmp	r3, #60	; 0x3c
 8008618:	d004      	beq.n	8008624 <HAL_TIM_PWM_ConfigChannel+0x34>
 800861a:	f640 51ec 	movw	r1, #3564	; 0xdec
 800861e:	4895      	ldr	r0, [pc, #596]	; (8008874 <HAL_TIM_PWM_ConfigChannel+0x284>)
 8008620:	f7f9 ff61 	bl	80024e6 <assert_failed>
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
 8008624:	68bb      	ldr	r3, [r7, #8]
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	2b60      	cmp	r3, #96	; 0x60
 800862a:	d008      	beq.n	800863e <HAL_TIM_PWM_ConfigChannel+0x4e>
 800862c:	68bb      	ldr	r3, [r7, #8]
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	2b70      	cmp	r3, #112	; 0x70
 8008632:	d004      	beq.n	800863e <HAL_TIM_PWM_ConfigChannel+0x4e>
 8008634:	f640 51ed 	movw	r1, #3565	; 0xded
 8008638:	488e      	ldr	r0, [pc, #568]	; (8008874 <HAL_TIM_PWM_ConfigChannel+0x284>)
 800863a:	f7f9 ff54 	bl	80024e6 <assert_failed>
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
 800863e:	68bb      	ldr	r3, [r7, #8]
 8008640:	689b      	ldr	r3, [r3, #8]
 8008642:	2b00      	cmp	r3, #0
 8008644:	d008      	beq.n	8008658 <HAL_TIM_PWM_ConfigChannel+0x68>
 8008646:	68bb      	ldr	r3, [r7, #8]
 8008648:	689b      	ldr	r3, [r3, #8]
 800864a:	2b02      	cmp	r3, #2
 800864c:	d004      	beq.n	8008658 <HAL_TIM_PWM_ConfigChannel+0x68>
 800864e:	f640 51ee 	movw	r1, #3566	; 0xdee
 8008652:	4888      	ldr	r0, [pc, #544]	; (8008874 <HAL_TIM_PWM_ConfigChannel+0x284>)
 8008654:	f7f9 ff47 	bl	80024e6 <assert_failed>
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));
 8008658:	68bb      	ldr	r3, [r7, #8]
 800865a:	691b      	ldr	r3, [r3, #16]
 800865c:	2b00      	cmp	r3, #0
 800865e:	d008      	beq.n	8008672 <HAL_TIM_PWM_ConfigChannel+0x82>
 8008660:	68bb      	ldr	r3, [r7, #8]
 8008662:	691b      	ldr	r3, [r3, #16]
 8008664:	2b04      	cmp	r3, #4
 8008666:	d004      	beq.n	8008672 <HAL_TIM_PWM_ConfigChannel+0x82>
 8008668:	f640 51ef 	movw	r1, #3567	; 0xdef
 800866c:	4881      	ldr	r0, [pc, #516]	; (8008874 <HAL_TIM_PWM_ConfigChannel+0x284>)
 800866e:	f7f9 ff3a 	bl	80024e6 <assert_failed>

  /* Process Locked */
  __HAL_LOCK(htim);
 8008672:	68fb      	ldr	r3, [r7, #12]
 8008674:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008678:	2b01      	cmp	r3, #1
 800867a:	d101      	bne.n	8008680 <HAL_TIM_PWM_ConfigChannel+0x90>
 800867c:	2302      	movs	r3, #2
 800867e:	e152      	b.n	8008926 <HAL_TIM_PWM_ConfigChannel+0x336>
 8008680:	68fb      	ldr	r3, [r7, #12]
 8008682:	2201      	movs	r2, #1
 8008684:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	2202      	movs	r2, #2
 800868c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	2b0c      	cmp	r3, #12
 8008694:	f200 813d 	bhi.w	8008912 <HAL_TIM_PWM_ConfigChannel+0x322>
 8008698:	a201      	add	r2, pc, #4	; (adr r2, 80086a0 <HAL_TIM_PWM_ConfigChannel+0xb0>)
 800869a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800869e:	bf00      	nop
 80086a0:	080086d5 	.word	0x080086d5
 80086a4:	08008913 	.word	0x08008913
 80086a8:	08008913 	.word	0x08008913
 80086ac:	08008913 	.word	0x08008913
 80086b0:	0800876f 	.word	0x0800876f
 80086b4:	08008913 	.word	0x08008913
 80086b8:	08008913 	.word	0x08008913
 80086bc:	08008913 	.word	0x08008913
 80086c0:	080087f7 	.word	0x080087f7
 80086c4:	08008913 	.word	0x08008913
 80086c8:	08008913 	.word	0x08008913
 80086cc:	08008913 	.word	0x08008913
 80086d0:	08008895 	.word	0x08008895
  {
    case TIM_CHANNEL_1:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 80086d4:	68fb      	ldr	r3, [r7, #12]
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	4a67      	ldr	r2, [pc, #412]	; (8008878 <HAL_TIM_PWM_ConfigChannel+0x288>)
 80086da:	4293      	cmp	r3, r2
 80086dc:	d027      	beq.n	800872e <HAL_TIM_PWM_ConfigChannel+0x13e>
 80086de:	68fb      	ldr	r3, [r7, #12]
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80086e6:	d022      	beq.n	800872e <HAL_TIM_PWM_ConfigChannel+0x13e>
 80086e8:	68fb      	ldr	r3, [r7, #12]
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	4a63      	ldr	r2, [pc, #396]	; (800887c <HAL_TIM_PWM_ConfigChannel+0x28c>)
 80086ee:	4293      	cmp	r3, r2
 80086f0:	d01d      	beq.n	800872e <HAL_TIM_PWM_ConfigChannel+0x13e>
 80086f2:	68fb      	ldr	r3, [r7, #12]
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	4a62      	ldr	r2, [pc, #392]	; (8008880 <HAL_TIM_PWM_ConfigChannel+0x290>)
 80086f8:	4293      	cmp	r3, r2
 80086fa:	d018      	beq.n	800872e <HAL_TIM_PWM_ConfigChannel+0x13e>
 80086fc:	68fb      	ldr	r3, [r7, #12]
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	4a60      	ldr	r2, [pc, #384]	; (8008884 <HAL_TIM_PWM_ConfigChannel+0x294>)
 8008702:	4293      	cmp	r3, r2
 8008704:	d013      	beq.n	800872e <HAL_TIM_PWM_ConfigChannel+0x13e>
 8008706:	68fb      	ldr	r3, [r7, #12]
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	4a5f      	ldr	r2, [pc, #380]	; (8008888 <HAL_TIM_PWM_ConfigChannel+0x298>)
 800870c:	4293      	cmp	r3, r2
 800870e:	d00e      	beq.n	800872e <HAL_TIM_PWM_ConfigChannel+0x13e>
 8008710:	68fb      	ldr	r3, [r7, #12]
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	4a5d      	ldr	r2, [pc, #372]	; (800888c <HAL_TIM_PWM_ConfigChannel+0x29c>)
 8008716:	4293      	cmp	r3, r2
 8008718:	d009      	beq.n	800872e <HAL_TIM_PWM_ConfigChannel+0x13e>
 800871a:	68fb      	ldr	r3, [r7, #12]
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	4a5c      	ldr	r2, [pc, #368]	; (8008890 <HAL_TIM_PWM_ConfigChannel+0x2a0>)
 8008720:	4293      	cmp	r3, r2
 8008722:	d004      	beq.n	800872e <HAL_TIM_PWM_ConfigChannel+0x13e>
 8008724:	f640 51fb 	movw	r1, #3579	; 0xdfb
 8008728:	4852      	ldr	r0, [pc, #328]	; (8008874 <HAL_TIM_PWM_ConfigChannel+0x284>)
 800872a:	f7f9 fedc 	bl	80024e6 <assert_failed>

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800872e:	68fb      	ldr	r3, [r7, #12]
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	68b9      	ldr	r1, [r7, #8]
 8008734:	4618      	mov	r0, r3
 8008736:	f000 fc7d 	bl	8009034 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800873a:	68fb      	ldr	r3, [r7, #12]
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	699a      	ldr	r2, [r3, #24]
 8008740:	68fb      	ldr	r3, [r7, #12]
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	f042 0208 	orr.w	r2, r2, #8
 8008748:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800874a:	68fb      	ldr	r3, [r7, #12]
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	699a      	ldr	r2, [r3, #24]
 8008750:	68fb      	ldr	r3, [r7, #12]
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	f022 0204 	bic.w	r2, r2, #4
 8008758:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800875a:	68fb      	ldr	r3, [r7, #12]
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	6999      	ldr	r1, [r3, #24]
 8008760:	68bb      	ldr	r3, [r7, #8]
 8008762:	691a      	ldr	r2, [r3, #16]
 8008764:	68fb      	ldr	r3, [r7, #12]
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	430a      	orrs	r2, r1
 800876a:	619a      	str	r2, [r3, #24]
      break;
 800876c:	e0d2      	b.n	8008914 <HAL_TIM_PWM_ConfigChannel+0x324>
    }

    case TIM_CHANNEL_2:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 800876e:	68fb      	ldr	r3, [r7, #12]
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	4a41      	ldr	r2, [pc, #260]	; (8008878 <HAL_TIM_PWM_ConfigChannel+0x288>)
 8008774:	4293      	cmp	r3, r2
 8008776:	d01d      	beq.n	80087b4 <HAL_TIM_PWM_ConfigChannel+0x1c4>
 8008778:	68fb      	ldr	r3, [r7, #12]
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008780:	d018      	beq.n	80087b4 <HAL_TIM_PWM_ConfigChannel+0x1c4>
 8008782:	68fb      	ldr	r3, [r7, #12]
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	4a3d      	ldr	r2, [pc, #244]	; (800887c <HAL_TIM_PWM_ConfigChannel+0x28c>)
 8008788:	4293      	cmp	r3, r2
 800878a:	d013      	beq.n	80087b4 <HAL_TIM_PWM_ConfigChannel+0x1c4>
 800878c:	68fb      	ldr	r3, [r7, #12]
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	4a3b      	ldr	r2, [pc, #236]	; (8008880 <HAL_TIM_PWM_ConfigChannel+0x290>)
 8008792:	4293      	cmp	r3, r2
 8008794:	d00e      	beq.n	80087b4 <HAL_TIM_PWM_ConfigChannel+0x1c4>
 8008796:	68fb      	ldr	r3, [r7, #12]
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	4a3a      	ldr	r2, [pc, #232]	; (8008884 <HAL_TIM_PWM_ConfigChannel+0x294>)
 800879c:	4293      	cmp	r3, r2
 800879e:	d009      	beq.n	80087b4 <HAL_TIM_PWM_ConfigChannel+0x1c4>
 80087a0:	68fb      	ldr	r3, [r7, #12]
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	4a38      	ldr	r2, [pc, #224]	; (8008888 <HAL_TIM_PWM_ConfigChannel+0x298>)
 80087a6:	4293      	cmp	r3, r2
 80087a8:	d004      	beq.n	80087b4 <HAL_TIM_PWM_ConfigChannel+0x1c4>
 80087aa:	f640 610c 	movw	r1, #3596	; 0xe0c
 80087ae:	4831      	ldr	r0, [pc, #196]	; (8008874 <HAL_TIM_PWM_ConfigChannel+0x284>)
 80087b0:	f7f9 fe99 	bl	80024e6 <assert_failed>

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80087b4:	68fb      	ldr	r3, [r7, #12]
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	68b9      	ldr	r1, [r7, #8]
 80087ba:	4618      	mov	r0, r3
 80087bc:	f000 fcca 	bl	8009154 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80087c0:	68fb      	ldr	r3, [r7, #12]
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	699a      	ldr	r2, [r3, #24]
 80087c6:	68fb      	ldr	r3, [r7, #12]
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80087ce:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80087d0:	68fb      	ldr	r3, [r7, #12]
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	699a      	ldr	r2, [r3, #24]
 80087d6:	68fb      	ldr	r3, [r7, #12]
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80087de:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80087e0:	68fb      	ldr	r3, [r7, #12]
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	6999      	ldr	r1, [r3, #24]
 80087e6:	68bb      	ldr	r3, [r7, #8]
 80087e8:	691b      	ldr	r3, [r3, #16]
 80087ea:	021a      	lsls	r2, r3, #8
 80087ec:	68fb      	ldr	r3, [r7, #12]
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	430a      	orrs	r2, r1
 80087f2:	619a      	str	r2, [r3, #24]
      break;
 80087f4:	e08e      	b.n	8008914 <HAL_TIM_PWM_ConfigChannel+0x324>
    }

    case TIM_CHANNEL_3:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
 80087f6:	68fb      	ldr	r3, [r7, #12]
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	4a1f      	ldr	r2, [pc, #124]	; (8008878 <HAL_TIM_PWM_ConfigChannel+0x288>)
 80087fc:	4293      	cmp	r3, r2
 80087fe:	d018      	beq.n	8008832 <HAL_TIM_PWM_ConfigChannel+0x242>
 8008800:	68fb      	ldr	r3, [r7, #12]
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008808:	d013      	beq.n	8008832 <HAL_TIM_PWM_ConfigChannel+0x242>
 800880a:	68fb      	ldr	r3, [r7, #12]
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	4a1b      	ldr	r2, [pc, #108]	; (800887c <HAL_TIM_PWM_ConfigChannel+0x28c>)
 8008810:	4293      	cmp	r3, r2
 8008812:	d00e      	beq.n	8008832 <HAL_TIM_PWM_ConfigChannel+0x242>
 8008814:	68fb      	ldr	r3, [r7, #12]
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	4a19      	ldr	r2, [pc, #100]	; (8008880 <HAL_TIM_PWM_ConfigChannel+0x290>)
 800881a:	4293      	cmp	r3, r2
 800881c:	d009      	beq.n	8008832 <HAL_TIM_PWM_ConfigChannel+0x242>
 800881e:	68fb      	ldr	r3, [r7, #12]
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	4a18      	ldr	r2, [pc, #96]	; (8008884 <HAL_TIM_PWM_ConfigChannel+0x294>)
 8008824:	4293      	cmp	r3, r2
 8008826:	d004      	beq.n	8008832 <HAL_TIM_PWM_ConfigChannel+0x242>
 8008828:	f640 611d 	movw	r1, #3613	; 0xe1d
 800882c:	4811      	ldr	r0, [pc, #68]	; (8008874 <HAL_TIM_PWM_ConfigChannel+0x284>)
 800882e:	f7f9 fe5a 	bl	80024e6 <assert_failed>

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008832:	68fb      	ldr	r3, [r7, #12]
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	68b9      	ldr	r1, [r7, #8]
 8008838:	4618      	mov	r0, r3
 800883a:	f000 fd1f 	bl	800927c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800883e:	68fb      	ldr	r3, [r7, #12]
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	69da      	ldr	r2, [r3, #28]
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	f042 0208 	orr.w	r2, r2, #8
 800884c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800884e:	68fb      	ldr	r3, [r7, #12]
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	69da      	ldr	r2, [r3, #28]
 8008854:	68fb      	ldr	r3, [r7, #12]
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	f022 0204 	bic.w	r2, r2, #4
 800885c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800885e:	68fb      	ldr	r3, [r7, #12]
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	69d9      	ldr	r1, [r3, #28]
 8008864:	68bb      	ldr	r3, [r7, #8]
 8008866:	691a      	ldr	r2, [r3, #16]
 8008868:	68fb      	ldr	r3, [r7, #12]
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	430a      	orrs	r2, r1
 800886e:	61da      	str	r2, [r3, #28]
      break;
 8008870:	e050      	b.n	8008914 <HAL_TIM_PWM_ConfigChannel+0x324>
 8008872:	bf00      	nop
 8008874:	0800ff30 	.word	0x0800ff30
 8008878:	40010000 	.word	0x40010000
 800887c:	40000400 	.word	0x40000400
 8008880:	40000800 	.word	0x40000800
 8008884:	40000c00 	.word	0x40000c00
 8008888:	40014000 	.word	0x40014000
 800888c:	40014400 	.word	0x40014400
 8008890:	40014800 	.word	0x40014800
    }

    case TIM_CHANNEL_4:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
 8008894:	68fb      	ldr	r3, [r7, #12]
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	4a25      	ldr	r2, [pc, #148]	; (8008930 <HAL_TIM_PWM_ConfigChannel+0x340>)
 800889a:	4293      	cmp	r3, r2
 800889c:	d018      	beq.n	80088d0 <HAL_TIM_PWM_ConfigChannel+0x2e0>
 800889e:	68fb      	ldr	r3, [r7, #12]
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80088a6:	d013      	beq.n	80088d0 <HAL_TIM_PWM_ConfigChannel+0x2e0>
 80088a8:	68fb      	ldr	r3, [r7, #12]
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	4a21      	ldr	r2, [pc, #132]	; (8008934 <HAL_TIM_PWM_ConfigChannel+0x344>)
 80088ae:	4293      	cmp	r3, r2
 80088b0:	d00e      	beq.n	80088d0 <HAL_TIM_PWM_ConfigChannel+0x2e0>
 80088b2:	68fb      	ldr	r3, [r7, #12]
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	4a20      	ldr	r2, [pc, #128]	; (8008938 <HAL_TIM_PWM_ConfigChannel+0x348>)
 80088b8:	4293      	cmp	r3, r2
 80088ba:	d009      	beq.n	80088d0 <HAL_TIM_PWM_ConfigChannel+0x2e0>
 80088bc:	68fb      	ldr	r3, [r7, #12]
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	4a1e      	ldr	r2, [pc, #120]	; (800893c <HAL_TIM_PWM_ConfigChannel+0x34c>)
 80088c2:	4293      	cmp	r3, r2
 80088c4:	d004      	beq.n	80088d0 <HAL_TIM_PWM_ConfigChannel+0x2e0>
 80088c6:	f640 612e 	movw	r1, #3630	; 0xe2e
 80088ca:	481d      	ldr	r0, [pc, #116]	; (8008940 <HAL_TIM_PWM_ConfigChannel+0x350>)
 80088cc:	f7f9 fe0b 	bl	80024e6 <assert_failed>

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80088d0:	68fb      	ldr	r3, [r7, #12]
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	68b9      	ldr	r1, [r7, #8]
 80088d6:	4618      	mov	r0, r3
 80088d8:	f000 fd64 	bl	80093a4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80088dc:	68fb      	ldr	r3, [r7, #12]
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	69da      	ldr	r2, [r3, #28]
 80088e2:	68fb      	ldr	r3, [r7, #12]
 80088e4:	681b      	ldr	r3, [r3, #0]
 80088e6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80088ea:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80088ec:	68fb      	ldr	r3, [r7, #12]
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	69da      	ldr	r2, [r3, #28]
 80088f2:	68fb      	ldr	r3, [r7, #12]
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80088fa:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80088fc:	68fb      	ldr	r3, [r7, #12]
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	69d9      	ldr	r1, [r3, #28]
 8008902:	68bb      	ldr	r3, [r7, #8]
 8008904:	691b      	ldr	r3, [r3, #16]
 8008906:	021a      	lsls	r2, r3, #8
 8008908:	68fb      	ldr	r3, [r7, #12]
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	430a      	orrs	r2, r1
 800890e:	61da      	str	r2, [r3, #28]
      break;
 8008910:	e000      	b.n	8008914 <HAL_TIM_PWM_ConfigChannel+0x324>
    }

    default:
      break;
 8008912:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8008914:	68fb      	ldr	r3, [r7, #12]
 8008916:	2201      	movs	r2, #1
 8008918:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800891c:	68fb      	ldr	r3, [r7, #12]
 800891e:	2200      	movs	r2, #0
 8008920:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008924:	2300      	movs	r3, #0
}
 8008926:	4618      	mov	r0, r3
 8008928:	3710      	adds	r7, #16
 800892a:	46bd      	mov	sp, r7
 800892c:	bd80      	pop	{r7, pc}
 800892e:	bf00      	nop
 8008930:	40010000 	.word	0x40010000
 8008934:	40000400 	.word	0x40000400
 8008938:	40000800 	.word	0x40000800
 800893c:	40000c00 	.word	0x40000c00
 8008940:	0800ff30 	.word	0x0800ff30

08008944 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008944:	b580      	push	{r7, lr}
 8008946:	b084      	sub	sp, #16
 8008948:	af00      	add	r7, sp, #0
 800894a:	6078      	str	r0, [r7, #4]
 800894c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008954:	2b01      	cmp	r3, #1
 8008956:	d101      	bne.n	800895c <HAL_TIM_ConfigClockSource+0x18>
 8008958:	2302      	movs	r3, #2
 800895a:	e2db      	b.n	8008f14 <HAL_TIM_ConfigClockSource+0x5d0>
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	2201      	movs	r2, #1
 8008960:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	2202      	movs	r2, #2
 8008968:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));
 800896c:	683b      	ldr	r3, [r7, #0]
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008974:	d029      	beq.n	80089ca <HAL_TIM_ConfigClockSource+0x86>
 8008976:	683b      	ldr	r3, [r7, #0]
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800897e:	d024      	beq.n	80089ca <HAL_TIM_ConfigClockSource+0x86>
 8008980:	683b      	ldr	r3, [r7, #0]
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	2b00      	cmp	r3, #0
 8008986:	d020      	beq.n	80089ca <HAL_TIM_ConfigClockSource+0x86>
 8008988:	683b      	ldr	r3, [r7, #0]
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	2b10      	cmp	r3, #16
 800898e:	d01c      	beq.n	80089ca <HAL_TIM_ConfigClockSource+0x86>
 8008990:	683b      	ldr	r3, [r7, #0]
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	2b20      	cmp	r3, #32
 8008996:	d018      	beq.n	80089ca <HAL_TIM_ConfigClockSource+0x86>
 8008998:	683b      	ldr	r3, [r7, #0]
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	2b30      	cmp	r3, #48	; 0x30
 800899e:	d014      	beq.n	80089ca <HAL_TIM_ConfigClockSource+0x86>
 80089a0:	683b      	ldr	r3, [r7, #0]
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	2b40      	cmp	r3, #64	; 0x40
 80089a6:	d010      	beq.n	80089ca <HAL_TIM_ConfigClockSource+0x86>
 80089a8:	683b      	ldr	r3, [r7, #0]
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	2b50      	cmp	r3, #80	; 0x50
 80089ae:	d00c      	beq.n	80089ca <HAL_TIM_ConfigClockSource+0x86>
 80089b0:	683b      	ldr	r3, [r7, #0]
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	2b60      	cmp	r3, #96	; 0x60
 80089b6:	d008      	beq.n	80089ca <HAL_TIM_ConfigClockSource+0x86>
 80089b8:	683b      	ldr	r3, [r7, #0]
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	2b70      	cmp	r3, #112	; 0x70
 80089be:	d004      	beq.n	80089ca <HAL_TIM_ConfigClockSource+0x86>
 80089c0:	f241 118b 	movw	r1, #4491	; 0x118b
 80089c4:	4873      	ldr	r0, [pc, #460]	; (8008b94 <HAL_TIM_ConfigClockSource+0x250>)
 80089c6:	f7f9 fd8e 	bl	80024e6 <assert_failed>

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	681b      	ldr	r3, [r3, #0]
 80089ce:	689b      	ldr	r3, [r3, #8]
 80089d0:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80089d2:	68fb      	ldr	r3, [r7, #12]
 80089d4:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80089d8:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80089da:	68fb      	ldr	r3, [r7, #12]
 80089dc:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80089e0:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	68fa      	ldr	r2, [r7, #12]
 80089e8:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80089ea:	683b      	ldr	r3, [r7, #0]
 80089ec:	681b      	ldr	r3, [r3, #0]
 80089ee:	2b40      	cmp	r3, #64	; 0x40
 80089f0:	f000 8204 	beq.w	8008dfc <HAL_TIM_ConfigClockSource+0x4b8>
 80089f4:	2b40      	cmp	r3, #64	; 0x40
 80089f6:	d80f      	bhi.n	8008a18 <HAL_TIM_ConfigClockSource+0xd4>
 80089f8:	2b10      	cmp	r3, #16
 80089fa:	f000 8255 	beq.w	8008ea8 <HAL_TIM_ConfigClockSource+0x564>
 80089fe:	2b10      	cmp	r3, #16
 8008a00:	d803      	bhi.n	8008a0a <HAL_TIM_ConfigClockSource+0xc6>
 8008a02:	2b00      	cmp	r3, #0
 8008a04:	f000 8250 	beq.w	8008ea8 <HAL_TIM_ConfigClockSource+0x564>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8008a08:	e27b      	b.n	8008f02 <HAL_TIM_ConfigClockSource+0x5be>
  switch (sClockSourceConfig->ClockSource)
 8008a0a:	2b20      	cmp	r3, #32
 8008a0c:	f000 824c 	beq.w	8008ea8 <HAL_TIM_ConfigClockSource+0x564>
 8008a10:	2b30      	cmp	r3, #48	; 0x30
 8008a12:	f000 8249 	beq.w	8008ea8 <HAL_TIM_ConfigClockSource+0x564>
      break;
 8008a16:	e274      	b.n	8008f02 <HAL_TIM_ConfigClockSource+0x5be>
  switch (sClockSourceConfig->ClockSource)
 8008a18:	2b70      	cmp	r3, #112	; 0x70
 8008a1a:	d046      	beq.n	8008aaa <HAL_TIM_ConfigClockSource+0x166>
 8008a1c:	2b70      	cmp	r3, #112	; 0x70
 8008a1e:	d806      	bhi.n	8008a2e <HAL_TIM_ConfigClockSource+0xea>
 8008a20:	2b50      	cmp	r3, #80	; 0x50
 8008a22:	f000 8133 	beq.w	8008c8c <HAL_TIM_ConfigClockSource+0x348>
 8008a26:	2b60      	cmp	r3, #96	; 0x60
 8008a28:	f000 8186 	beq.w	8008d38 <HAL_TIM_ConfigClockSource+0x3f4>
      break;
 8008a2c:	e269      	b.n	8008f02 <HAL_TIM_ConfigClockSource+0x5be>
  switch (sClockSourceConfig->ClockSource)
 8008a2e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008a32:	d004      	beq.n	8008a3e <HAL_TIM_ConfigClockSource+0xfa>
 8008a34:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008a38:	f000 80bc 	beq.w	8008bb4 <HAL_TIM_ConfigClockSource+0x270>
      break;
 8008a3c:	e261      	b.n	8008f02 <HAL_TIM_ConfigClockSource+0x5be>
      assert_param(IS_TIM_INSTANCE(htim->Instance));
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	4a55      	ldr	r2, [pc, #340]	; (8008b98 <HAL_TIM_ConfigClockSource+0x254>)
 8008a44:	4293      	cmp	r3, r2
 8008a46:	f000 825b 	beq.w	8008f00 <HAL_TIM_ConfigClockSource+0x5bc>
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	681b      	ldr	r3, [r3, #0]
 8008a4e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008a52:	f000 8255 	beq.w	8008f00 <HAL_TIM_ConfigClockSource+0x5bc>
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	4a50      	ldr	r2, [pc, #320]	; (8008b9c <HAL_TIM_ConfigClockSource+0x258>)
 8008a5c:	4293      	cmp	r3, r2
 8008a5e:	f000 824f 	beq.w	8008f00 <HAL_TIM_ConfigClockSource+0x5bc>
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	4a4e      	ldr	r2, [pc, #312]	; (8008ba0 <HAL_TIM_ConfigClockSource+0x25c>)
 8008a68:	4293      	cmp	r3, r2
 8008a6a:	f000 8249 	beq.w	8008f00 <HAL_TIM_ConfigClockSource+0x5bc>
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	4a4c      	ldr	r2, [pc, #304]	; (8008ba4 <HAL_TIM_ConfigClockSource+0x260>)
 8008a74:	4293      	cmp	r3, r2
 8008a76:	f000 8243 	beq.w	8008f00 <HAL_TIM_ConfigClockSource+0x5bc>
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	681b      	ldr	r3, [r3, #0]
 8008a7e:	4a4a      	ldr	r2, [pc, #296]	; (8008ba8 <HAL_TIM_ConfigClockSource+0x264>)
 8008a80:	4293      	cmp	r3, r2
 8008a82:	f000 823d 	beq.w	8008f00 <HAL_TIM_ConfigClockSource+0x5bc>
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	4a48      	ldr	r2, [pc, #288]	; (8008bac <HAL_TIM_ConfigClockSource+0x268>)
 8008a8c:	4293      	cmp	r3, r2
 8008a8e:	f000 8237 	beq.w	8008f00 <HAL_TIM_ConfigClockSource+0x5bc>
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	681b      	ldr	r3, [r3, #0]
 8008a96:	4a46      	ldr	r2, [pc, #280]	; (8008bb0 <HAL_TIM_ConfigClockSource+0x26c>)
 8008a98:	4293      	cmp	r3, r2
 8008a9a:	f000 8231 	beq.w	8008f00 <HAL_TIM_ConfigClockSource+0x5bc>
 8008a9e:	f241 1197 	movw	r1, #4503	; 0x1197
 8008aa2:	483c      	ldr	r0, [pc, #240]	; (8008b94 <HAL_TIM_ConfigClockSource+0x250>)
 8008aa4:	f7f9 fd1f 	bl	80024e6 <assert_failed>
      break;
 8008aa8:	e22a      	b.n	8008f00 <HAL_TIM_ConfigClockSource+0x5bc>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	4a3a      	ldr	r2, [pc, #232]	; (8008b98 <HAL_TIM_ConfigClockSource+0x254>)
 8008ab0:	4293      	cmp	r3, r2
 8008ab2:	d01d      	beq.n	8008af0 <HAL_TIM_ConfigClockSource+0x1ac>
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008abc:	d018      	beq.n	8008af0 <HAL_TIM_ConfigClockSource+0x1ac>
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	4a36      	ldr	r2, [pc, #216]	; (8008b9c <HAL_TIM_ConfigClockSource+0x258>)
 8008ac4:	4293      	cmp	r3, r2
 8008ac6:	d013      	beq.n	8008af0 <HAL_TIM_ConfigClockSource+0x1ac>
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	4a34      	ldr	r2, [pc, #208]	; (8008ba0 <HAL_TIM_ConfigClockSource+0x25c>)
 8008ace:	4293      	cmp	r3, r2
 8008ad0:	d00e      	beq.n	8008af0 <HAL_TIM_ConfigClockSource+0x1ac>
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	4a33      	ldr	r2, [pc, #204]	; (8008ba4 <HAL_TIM_ConfigClockSource+0x260>)
 8008ad8:	4293      	cmp	r3, r2
 8008ada:	d009      	beq.n	8008af0 <HAL_TIM_ConfigClockSource+0x1ac>
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	4a31      	ldr	r2, [pc, #196]	; (8008ba8 <HAL_TIM_ConfigClockSource+0x264>)
 8008ae2:	4293      	cmp	r3, r2
 8008ae4:	d004      	beq.n	8008af0 <HAL_TIM_ConfigClockSource+0x1ac>
 8008ae6:	f241 119e 	movw	r1, #4510	; 0x119e
 8008aea:	482a      	ldr	r0, [pc, #168]	; (8008b94 <HAL_TIM_ConfigClockSource+0x250>)
 8008aec:	f7f9 fcfb 	bl	80024e6 <assert_failed>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 8008af0:	683b      	ldr	r3, [r7, #0]
 8008af2:	689b      	ldr	r3, [r3, #8]
 8008af4:	2b00      	cmp	r3, #0
 8008af6:	d013      	beq.n	8008b20 <HAL_TIM_ConfigClockSource+0x1dc>
 8008af8:	683b      	ldr	r3, [r7, #0]
 8008afa:	689b      	ldr	r3, [r3, #8]
 8008afc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008b00:	d00e      	beq.n	8008b20 <HAL_TIM_ConfigClockSource+0x1dc>
 8008b02:	683b      	ldr	r3, [r7, #0]
 8008b04:	689b      	ldr	r3, [r3, #8]
 8008b06:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008b0a:	d009      	beq.n	8008b20 <HAL_TIM_ConfigClockSource+0x1dc>
 8008b0c:	683b      	ldr	r3, [r7, #0]
 8008b0e:	689b      	ldr	r3, [r3, #8]
 8008b10:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008b14:	d004      	beq.n	8008b20 <HAL_TIM_ConfigClockSource+0x1dc>
 8008b16:	f241 11a1 	movw	r1, #4513	; 0x11a1
 8008b1a:	481e      	ldr	r0, [pc, #120]	; (8008b94 <HAL_TIM_ConfigClockSource+0x250>)
 8008b1c:	f7f9 fce3 	bl	80024e6 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8008b20:	683b      	ldr	r3, [r7, #0]
 8008b22:	685b      	ldr	r3, [r3, #4]
 8008b24:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008b28:	d014      	beq.n	8008b54 <HAL_TIM_ConfigClockSource+0x210>
 8008b2a:	683b      	ldr	r3, [r7, #0]
 8008b2c:	685b      	ldr	r3, [r3, #4]
 8008b2e:	2b00      	cmp	r3, #0
 8008b30:	d010      	beq.n	8008b54 <HAL_TIM_ConfigClockSource+0x210>
 8008b32:	683b      	ldr	r3, [r7, #0]
 8008b34:	685b      	ldr	r3, [r3, #4]
 8008b36:	2b00      	cmp	r3, #0
 8008b38:	d00c      	beq.n	8008b54 <HAL_TIM_ConfigClockSource+0x210>
 8008b3a:	683b      	ldr	r3, [r7, #0]
 8008b3c:	685b      	ldr	r3, [r3, #4]
 8008b3e:	2b02      	cmp	r3, #2
 8008b40:	d008      	beq.n	8008b54 <HAL_TIM_ConfigClockSource+0x210>
 8008b42:	683b      	ldr	r3, [r7, #0]
 8008b44:	685b      	ldr	r3, [r3, #4]
 8008b46:	2b0a      	cmp	r3, #10
 8008b48:	d004      	beq.n	8008b54 <HAL_TIM_ConfigClockSource+0x210>
 8008b4a:	f241 11a2 	movw	r1, #4514	; 0x11a2
 8008b4e:	4811      	ldr	r0, [pc, #68]	; (8008b94 <HAL_TIM_ConfigClockSource+0x250>)
 8008b50:	f7f9 fcc9 	bl	80024e6 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8008b54:	683b      	ldr	r3, [r7, #0]
 8008b56:	68db      	ldr	r3, [r3, #12]
 8008b58:	2b0f      	cmp	r3, #15
 8008b5a:	d904      	bls.n	8008b66 <HAL_TIM_ConfigClockSource+0x222>
 8008b5c:	f241 11a3 	movw	r1, #4515	; 0x11a3
 8008b60:	480c      	ldr	r0, [pc, #48]	; (8008b94 <HAL_TIM_ConfigClockSource+0x250>)
 8008b62:	f7f9 fcc0 	bl	80024e6 <assert_failed>
      TIM_ETR_SetConfig(htim->Instance,
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	6818      	ldr	r0, [r3, #0]
 8008b6a:	683b      	ldr	r3, [r7, #0]
 8008b6c:	6899      	ldr	r1, [r3, #8]
 8008b6e:	683b      	ldr	r3, [r7, #0]
 8008b70:	685a      	ldr	r2, [r3, #4]
 8008b72:	683b      	ldr	r3, [r7, #0]
 8008b74:	68db      	ldr	r3, [r3, #12]
 8008b76:	f000 fced 	bl	8009554 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	689b      	ldr	r3, [r3, #8]
 8008b80:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008b82:	68fb      	ldr	r3, [r7, #12]
 8008b84:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8008b88:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	681b      	ldr	r3, [r3, #0]
 8008b8e:	68fa      	ldr	r2, [r7, #12]
 8008b90:	609a      	str	r2, [r3, #8]
      break;
 8008b92:	e1b6      	b.n	8008f02 <HAL_TIM_ConfigClockSource+0x5be>
 8008b94:	0800ff30 	.word	0x0800ff30
 8008b98:	40010000 	.word	0x40010000
 8008b9c:	40000400 	.word	0x40000400
 8008ba0:	40000800 	.word	0x40000800
 8008ba4:	40000c00 	.word	0x40000c00
 8008ba8:	40014000 	.word	0x40014000
 8008bac:	40014400 	.word	0x40014400
 8008bb0:	40014800 	.word	0x40014800
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE2_INSTANCE(htim->Instance));
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	4a8a      	ldr	r2, [pc, #552]	; (8008de4 <HAL_TIM_ConfigClockSource+0x4a0>)
 8008bba:	4293      	cmp	r3, r2
 8008bbc:	d018      	beq.n	8008bf0 <HAL_TIM_ConfigClockSource+0x2ac>
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008bc6:	d013      	beq.n	8008bf0 <HAL_TIM_ConfigClockSource+0x2ac>
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	4a86      	ldr	r2, [pc, #536]	; (8008de8 <HAL_TIM_ConfigClockSource+0x4a4>)
 8008bce:	4293      	cmp	r3, r2
 8008bd0:	d00e      	beq.n	8008bf0 <HAL_TIM_ConfigClockSource+0x2ac>
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	4a85      	ldr	r2, [pc, #532]	; (8008dec <HAL_TIM_ConfigClockSource+0x4a8>)
 8008bd8:	4293      	cmp	r3, r2
 8008bda:	d009      	beq.n	8008bf0 <HAL_TIM_ConfigClockSource+0x2ac>
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	681b      	ldr	r3, [r3, #0]
 8008be0:	4a83      	ldr	r2, [pc, #524]	; (8008df0 <HAL_TIM_ConfigClockSource+0x4ac>)
 8008be2:	4293      	cmp	r3, r2
 8008be4:	d004      	beq.n	8008bf0 <HAL_TIM_ConfigClockSource+0x2ac>
 8008be6:	f241 11b6 	movw	r1, #4534	; 0x11b6
 8008bea:	4882      	ldr	r0, [pc, #520]	; (8008df4 <HAL_TIM_ConfigClockSource+0x4b0>)
 8008bec:	f7f9 fc7b 	bl	80024e6 <assert_failed>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 8008bf0:	683b      	ldr	r3, [r7, #0]
 8008bf2:	689b      	ldr	r3, [r3, #8]
 8008bf4:	2b00      	cmp	r3, #0
 8008bf6:	d013      	beq.n	8008c20 <HAL_TIM_ConfigClockSource+0x2dc>
 8008bf8:	683b      	ldr	r3, [r7, #0]
 8008bfa:	689b      	ldr	r3, [r3, #8]
 8008bfc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008c00:	d00e      	beq.n	8008c20 <HAL_TIM_ConfigClockSource+0x2dc>
 8008c02:	683b      	ldr	r3, [r7, #0]
 8008c04:	689b      	ldr	r3, [r3, #8]
 8008c06:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008c0a:	d009      	beq.n	8008c20 <HAL_TIM_ConfigClockSource+0x2dc>
 8008c0c:	683b      	ldr	r3, [r7, #0]
 8008c0e:	689b      	ldr	r3, [r3, #8]
 8008c10:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008c14:	d004      	beq.n	8008c20 <HAL_TIM_ConfigClockSource+0x2dc>
 8008c16:	f241 11b9 	movw	r1, #4537	; 0x11b9
 8008c1a:	4876      	ldr	r0, [pc, #472]	; (8008df4 <HAL_TIM_ConfigClockSource+0x4b0>)
 8008c1c:	f7f9 fc63 	bl	80024e6 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8008c20:	683b      	ldr	r3, [r7, #0]
 8008c22:	685b      	ldr	r3, [r3, #4]
 8008c24:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008c28:	d014      	beq.n	8008c54 <HAL_TIM_ConfigClockSource+0x310>
 8008c2a:	683b      	ldr	r3, [r7, #0]
 8008c2c:	685b      	ldr	r3, [r3, #4]
 8008c2e:	2b00      	cmp	r3, #0
 8008c30:	d010      	beq.n	8008c54 <HAL_TIM_ConfigClockSource+0x310>
 8008c32:	683b      	ldr	r3, [r7, #0]
 8008c34:	685b      	ldr	r3, [r3, #4]
 8008c36:	2b00      	cmp	r3, #0
 8008c38:	d00c      	beq.n	8008c54 <HAL_TIM_ConfigClockSource+0x310>
 8008c3a:	683b      	ldr	r3, [r7, #0]
 8008c3c:	685b      	ldr	r3, [r3, #4]
 8008c3e:	2b02      	cmp	r3, #2
 8008c40:	d008      	beq.n	8008c54 <HAL_TIM_ConfigClockSource+0x310>
 8008c42:	683b      	ldr	r3, [r7, #0]
 8008c44:	685b      	ldr	r3, [r3, #4]
 8008c46:	2b0a      	cmp	r3, #10
 8008c48:	d004      	beq.n	8008c54 <HAL_TIM_ConfigClockSource+0x310>
 8008c4a:	f241 11ba 	movw	r1, #4538	; 0x11ba
 8008c4e:	4869      	ldr	r0, [pc, #420]	; (8008df4 <HAL_TIM_ConfigClockSource+0x4b0>)
 8008c50:	f7f9 fc49 	bl	80024e6 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8008c54:	683b      	ldr	r3, [r7, #0]
 8008c56:	68db      	ldr	r3, [r3, #12]
 8008c58:	2b0f      	cmp	r3, #15
 8008c5a:	d904      	bls.n	8008c66 <HAL_TIM_ConfigClockSource+0x322>
 8008c5c:	f241 11bb 	movw	r1, #4539	; 0x11bb
 8008c60:	4864      	ldr	r0, [pc, #400]	; (8008df4 <HAL_TIM_ConfigClockSource+0x4b0>)
 8008c62:	f7f9 fc40 	bl	80024e6 <assert_failed>
      TIM_ETR_SetConfig(htim->Instance,
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	6818      	ldr	r0, [r3, #0]
 8008c6a:	683b      	ldr	r3, [r7, #0]
 8008c6c:	6899      	ldr	r1, [r3, #8]
 8008c6e:	683b      	ldr	r3, [r7, #0]
 8008c70:	685a      	ldr	r2, [r3, #4]
 8008c72:	683b      	ldr	r3, [r7, #0]
 8008c74:	68db      	ldr	r3, [r3, #12]
 8008c76:	f000 fc6d 	bl	8009554 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	681b      	ldr	r3, [r3, #0]
 8008c7e:	689a      	ldr	r2, [r3, #8]
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008c88:	609a      	str	r2, [r3, #8]
      break;
 8008c8a:	e13a      	b.n	8008f02 <HAL_TIM_ConfigClockSource+0x5be>
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	4a54      	ldr	r2, [pc, #336]	; (8008de4 <HAL_TIM_ConfigClockSource+0x4a0>)
 8008c92:	4293      	cmp	r3, r2
 8008c94:	d01d      	beq.n	8008cd2 <HAL_TIM_ConfigClockSource+0x38e>
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	681b      	ldr	r3, [r3, #0]
 8008c9a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008c9e:	d018      	beq.n	8008cd2 <HAL_TIM_ConfigClockSource+0x38e>
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	4a50      	ldr	r2, [pc, #320]	; (8008de8 <HAL_TIM_ConfigClockSource+0x4a4>)
 8008ca6:	4293      	cmp	r3, r2
 8008ca8:	d013      	beq.n	8008cd2 <HAL_TIM_ConfigClockSource+0x38e>
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	4a4f      	ldr	r2, [pc, #316]	; (8008dec <HAL_TIM_ConfigClockSource+0x4a8>)
 8008cb0:	4293      	cmp	r3, r2
 8008cb2:	d00e      	beq.n	8008cd2 <HAL_TIM_ConfigClockSource+0x38e>
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	681b      	ldr	r3, [r3, #0]
 8008cb8:	4a4d      	ldr	r2, [pc, #308]	; (8008df0 <HAL_TIM_ConfigClockSource+0x4ac>)
 8008cba:	4293      	cmp	r3, r2
 8008cbc:	d009      	beq.n	8008cd2 <HAL_TIM_ConfigClockSource+0x38e>
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	4a4d      	ldr	r2, [pc, #308]	; (8008df8 <HAL_TIM_ConfigClockSource+0x4b4>)
 8008cc4:	4293      	cmp	r3, r2
 8008cc6:	d004      	beq.n	8008cd2 <HAL_TIM_ConfigClockSource+0x38e>
 8008cc8:	f241 11ca 	movw	r1, #4554	; 0x11ca
 8008ccc:	4849      	ldr	r0, [pc, #292]	; (8008df4 <HAL_TIM_ConfigClockSource+0x4b0>)
 8008cce:	f7f9 fc0a 	bl	80024e6 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8008cd2:	683b      	ldr	r3, [r7, #0]
 8008cd4:	685b      	ldr	r3, [r3, #4]
 8008cd6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008cda:	d014      	beq.n	8008d06 <HAL_TIM_ConfigClockSource+0x3c2>
 8008cdc:	683b      	ldr	r3, [r7, #0]
 8008cde:	685b      	ldr	r3, [r3, #4]
 8008ce0:	2b00      	cmp	r3, #0
 8008ce2:	d010      	beq.n	8008d06 <HAL_TIM_ConfigClockSource+0x3c2>
 8008ce4:	683b      	ldr	r3, [r7, #0]
 8008ce6:	685b      	ldr	r3, [r3, #4]
 8008ce8:	2b00      	cmp	r3, #0
 8008cea:	d00c      	beq.n	8008d06 <HAL_TIM_ConfigClockSource+0x3c2>
 8008cec:	683b      	ldr	r3, [r7, #0]
 8008cee:	685b      	ldr	r3, [r3, #4]
 8008cf0:	2b02      	cmp	r3, #2
 8008cf2:	d008      	beq.n	8008d06 <HAL_TIM_ConfigClockSource+0x3c2>
 8008cf4:	683b      	ldr	r3, [r7, #0]
 8008cf6:	685b      	ldr	r3, [r3, #4]
 8008cf8:	2b0a      	cmp	r3, #10
 8008cfa:	d004      	beq.n	8008d06 <HAL_TIM_ConfigClockSource+0x3c2>
 8008cfc:	f241 11cd 	movw	r1, #4557	; 0x11cd
 8008d00:	483c      	ldr	r0, [pc, #240]	; (8008df4 <HAL_TIM_ConfigClockSource+0x4b0>)
 8008d02:	f7f9 fbf0 	bl	80024e6 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8008d06:	683b      	ldr	r3, [r7, #0]
 8008d08:	68db      	ldr	r3, [r3, #12]
 8008d0a:	2b0f      	cmp	r3, #15
 8008d0c:	d904      	bls.n	8008d18 <HAL_TIM_ConfigClockSource+0x3d4>
 8008d0e:	f241 11ce 	movw	r1, #4558	; 0x11ce
 8008d12:	4838      	ldr	r0, [pc, #224]	; (8008df4 <HAL_TIM_ConfigClockSource+0x4b0>)
 8008d14:	f7f9 fbe7 	bl	80024e6 <assert_failed>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	6818      	ldr	r0, [r3, #0]
 8008d1c:	683b      	ldr	r3, [r7, #0]
 8008d1e:	6859      	ldr	r1, [r3, #4]
 8008d20:	683b      	ldr	r3, [r7, #0]
 8008d22:	68db      	ldr	r3, [r3, #12]
 8008d24:	461a      	mov	r2, r3
 8008d26:	f000 fb9b 	bl	8009460 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	2150      	movs	r1, #80	; 0x50
 8008d30:	4618      	mov	r0, r3
 8008d32:	f000 fbf4 	bl	800951e <TIM_ITRx_SetConfig>
      break;
 8008d36:	e0e4      	b.n	8008f02 <HAL_TIM_ConfigClockSource+0x5be>
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	681b      	ldr	r3, [r3, #0]
 8008d3c:	4a29      	ldr	r2, [pc, #164]	; (8008de4 <HAL_TIM_ConfigClockSource+0x4a0>)
 8008d3e:	4293      	cmp	r3, r2
 8008d40:	d01d      	beq.n	8008d7e <HAL_TIM_ConfigClockSource+0x43a>
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008d4a:	d018      	beq.n	8008d7e <HAL_TIM_ConfigClockSource+0x43a>
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	681b      	ldr	r3, [r3, #0]
 8008d50:	4a25      	ldr	r2, [pc, #148]	; (8008de8 <HAL_TIM_ConfigClockSource+0x4a4>)
 8008d52:	4293      	cmp	r3, r2
 8008d54:	d013      	beq.n	8008d7e <HAL_TIM_ConfigClockSource+0x43a>
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	4a24      	ldr	r2, [pc, #144]	; (8008dec <HAL_TIM_ConfigClockSource+0x4a8>)
 8008d5c:	4293      	cmp	r3, r2
 8008d5e:	d00e      	beq.n	8008d7e <HAL_TIM_ConfigClockSource+0x43a>
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	4a22      	ldr	r2, [pc, #136]	; (8008df0 <HAL_TIM_ConfigClockSource+0x4ac>)
 8008d66:	4293      	cmp	r3, r2
 8008d68:	d009      	beq.n	8008d7e <HAL_TIM_ConfigClockSource+0x43a>
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	681b      	ldr	r3, [r3, #0]
 8008d6e:	4a22      	ldr	r2, [pc, #136]	; (8008df8 <HAL_TIM_ConfigClockSource+0x4b4>)
 8008d70:	4293      	cmp	r3, r2
 8008d72:	d004      	beq.n	8008d7e <HAL_TIM_ConfigClockSource+0x43a>
 8008d74:	f241 11da 	movw	r1, #4570	; 0x11da
 8008d78:	481e      	ldr	r0, [pc, #120]	; (8008df4 <HAL_TIM_ConfigClockSource+0x4b0>)
 8008d7a:	f7f9 fbb4 	bl	80024e6 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8008d7e:	683b      	ldr	r3, [r7, #0]
 8008d80:	685b      	ldr	r3, [r3, #4]
 8008d82:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008d86:	d014      	beq.n	8008db2 <HAL_TIM_ConfigClockSource+0x46e>
 8008d88:	683b      	ldr	r3, [r7, #0]
 8008d8a:	685b      	ldr	r3, [r3, #4]
 8008d8c:	2b00      	cmp	r3, #0
 8008d8e:	d010      	beq.n	8008db2 <HAL_TIM_ConfigClockSource+0x46e>
 8008d90:	683b      	ldr	r3, [r7, #0]
 8008d92:	685b      	ldr	r3, [r3, #4]
 8008d94:	2b00      	cmp	r3, #0
 8008d96:	d00c      	beq.n	8008db2 <HAL_TIM_ConfigClockSource+0x46e>
 8008d98:	683b      	ldr	r3, [r7, #0]
 8008d9a:	685b      	ldr	r3, [r3, #4]
 8008d9c:	2b02      	cmp	r3, #2
 8008d9e:	d008      	beq.n	8008db2 <HAL_TIM_ConfigClockSource+0x46e>
 8008da0:	683b      	ldr	r3, [r7, #0]
 8008da2:	685b      	ldr	r3, [r3, #4]
 8008da4:	2b0a      	cmp	r3, #10
 8008da6:	d004      	beq.n	8008db2 <HAL_TIM_ConfigClockSource+0x46e>
 8008da8:	f241 11dd 	movw	r1, #4573	; 0x11dd
 8008dac:	4811      	ldr	r0, [pc, #68]	; (8008df4 <HAL_TIM_ConfigClockSource+0x4b0>)
 8008dae:	f7f9 fb9a 	bl	80024e6 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8008db2:	683b      	ldr	r3, [r7, #0]
 8008db4:	68db      	ldr	r3, [r3, #12]
 8008db6:	2b0f      	cmp	r3, #15
 8008db8:	d904      	bls.n	8008dc4 <HAL_TIM_ConfigClockSource+0x480>
 8008dba:	f241 11de 	movw	r1, #4574	; 0x11de
 8008dbe:	480d      	ldr	r0, [pc, #52]	; (8008df4 <HAL_TIM_ConfigClockSource+0x4b0>)
 8008dc0:	f7f9 fb91 	bl	80024e6 <assert_failed>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	6818      	ldr	r0, [r3, #0]
 8008dc8:	683b      	ldr	r3, [r7, #0]
 8008dca:	6859      	ldr	r1, [r3, #4]
 8008dcc:	683b      	ldr	r3, [r7, #0]
 8008dce:	68db      	ldr	r3, [r3, #12]
 8008dd0:	461a      	mov	r2, r3
 8008dd2:	f000 fb74 	bl	80094be <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	681b      	ldr	r3, [r3, #0]
 8008dda:	2160      	movs	r1, #96	; 0x60
 8008ddc:	4618      	mov	r0, r3
 8008dde:	f000 fb9e 	bl	800951e <TIM_ITRx_SetConfig>
      break;
 8008de2:	e08e      	b.n	8008f02 <HAL_TIM_ConfigClockSource+0x5be>
 8008de4:	40010000 	.word	0x40010000
 8008de8:	40000400 	.word	0x40000400
 8008dec:	40000800 	.word	0x40000800
 8008df0:	40000c00 	.word	0x40000c00
 8008df4:	0800ff30 	.word	0x0800ff30
 8008df8:	40014000 	.word	0x40014000
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	4a46      	ldr	r2, [pc, #280]	; (8008f1c <HAL_TIM_ConfigClockSource+0x5d8>)
 8008e02:	4293      	cmp	r3, r2
 8008e04:	d01d      	beq.n	8008e42 <HAL_TIM_ConfigClockSource+0x4fe>
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	681b      	ldr	r3, [r3, #0]
 8008e0a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008e0e:	d018      	beq.n	8008e42 <HAL_TIM_ConfigClockSource+0x4fe>
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	4a42      	ldr	r2, [pc, #264]	; (8008f20 <HAL_TIM_ConfigClockSource+0x5dc>)
 8008e16:	4293      	cmp	r3, r2
 8008e18:	d013      	beq.n	8008e42 <HAL_TIM_ConfigClockSource+0x4fe>
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	681b      	ldr	r3, [r3, #0]
 8008e1e:	4a41      	ldr	r2, [pc, #260]	; (8008f24 <HAL_TIM_ConfigClockSource+0x5e0>)
 8008e20:	4293      	cmp	r3, r2
 8008e22:	d00e      	beq.n	8008e42 <HAL_TIM_ConfigClockSource+0x4fe>
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	4a3f      	ldr	r2, [pc, #252]	; (8008f28 <HAL_TIM_ConfigClockSource+0x5e4>)
 8008e2a:	4293      	cmp	r3, r2
 8008e2c:	d009      	beq.n	8008e42 <HAL_TIM_ConfigClockSource+0x4fe>
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	4a3e      	ldr	r2, [pc, #248]	; (8008f2c <HAL_TIM_ConfigClockSource+0x5e8>)
 8008e34:	4293      	cmp	r3, r2
 8008e36:	d004      	beq.n	8008e42 <HAL_TIM_ConfigClockSource+0x4fe>
 8008e38:	f241 11ea 	movw	r1, #4586	; 0x11ea
 8008e3c:	483c      	ldr	r0, [pc, #240]	; (8008f30 <HAL_TIM_ConfigClockSource+0x5ec>)
 8008e3e:	f7f9 fb52 	bl	80024e6 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8008e42:	683b      	ldr	r3, [r7, #0]
 8008e44:	685b      	ldr	r3, [r3, #4]
 8008e46:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008e4a:	d014      	beq.n	8008e76 <HAL_TIM_ConfigClockSource+0x532>
 8008e4c:	683b      	ldr	r3, [r7, #0]
 8008e4e:	685b      	ldr	r3, [r3, #4]
 8008e50:	2b00      	cmp	r3, #0
 8008e52:	d010      	beq.n	8008e76 <HAL_TIM_ConfigClockSource+0x532>
 8008e54:	683b      	ldr	r3, [r7, #0]
 8008e56:	685b      	ldr	r3, [r3, #4]
 8008e58:	2b00      	cmp	r3, #0
 8008e5a:	d00c      	beq.n	8008e76 <HAL_TIM_ConfigClockSource+0x532>
 8008e5c:	683b      	ldr	r3, [r7, #0]
 8008e5e:	685b      	ldr	r3, [r3, #4]
 8008e60:	2b02      	cmp	r3, #2
 8008e62:	d008      	beq.n	8008e76 <HAL_TIM_ConfigClockSource+0x532>
 8008e64:	683b      	ldr	r3, [r7, #0]
 8008e66:	685b      	ldr	r3, [r3, #4]
 8008e68:	2b0a      	cmp	r3, #10
 8008e6a:	d004      	beq.n	8008e76 <HAL_TIM_ConfigClockSource+0x532>
 8008e6c:	f241 11ed 	movw	r1, #4589	; 0x11ed
 8008e70:	482f      	ldr	r0, [pc, #188]	; (8008f30 <HAL_TIM_ConfigClockSource+0x5ec>)
 8008e72:	f7f9 fb38 	bl	80024e6 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8008e76:	683b      	ldr	r3, [r7, #0]
 8008e78:	68db      	ldr	r3, [r3, #12]
 8008e7a:	2b0f      	cmp	r3, #15
 8008e7c:	d904      	bls.n	8008e88 <HAL_TIM_ConfigClockSource+0x544>
 8008e7e:	f241 11ee 	movw	r1, #4590	; 0x11ee
 8008e82:	482b      	ldr	r0, [pc, #172]	; (8008f30 <HAL_TIM_ConfigClockSource+0x5ec>)
 8008e84:	f7f9 fb2f 	bl	80024e6 <assert_failed>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	6818      	ldr	r0, [r3, #0]
 8008e8c:	683b      	ldr	r3, [r7, #0]
 8008e8e:	6859      	ldr	r1, [r3, #4]
 8008e90:	683b      	ldr	r3, [r7, #0]
 8008e92:	68db      	ldr	r3, [r3, #12]
 8008e94:	461a      	mov	r2, r3
 8008e96:	f000 fae3 	bl	8009460 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	681b      	ldr	r3, [r3, #0]
 8008e9e:	2140      	movs	r1, #64	; 0x40
 8008ea0:	4618      	mov	r0, r3
 8008ea2:	f000 fb3c 	bl	800951e <TIM_ITRx_SetConfig>
      break;
 8008ea6:	e02c      	b.n	8008f02 <HAL_TIM_ConfigClockSource+0x5be>
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	681b      	ldr	r3, [r3, #0]
 8008eac:	4a1b      	ldr	r2, [pc, #108]	; (8008f1c <HAL_TIM_ConfigClockSource+0x5d8>)
 8008eae:	4293      	cmp	r3, r2
 8008eb0:	d01d      	beq.n	8008eee <HAL_TIM_ConfigClockSource+0x5aa>
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	681b      	ldr	r3, [r3, #0]
 8008eb6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008eba:	d018      	beq.n	8008eee <HAL_TIM_ConfigClockSource+0x5aa>
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	4a17      	ldr	r2, [pc, #92]	; (8008f20 <HAL_TIM_ConfigClockSource+0x5dc>)
 8008ec2:	4293      	cmp	r3, r2
 8008ec4:	d013      	beq.n	8008eee <HAL_TIM_ConfigClockSource+0x5aa>
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	681b      	ldr	r3, [r3, #0]
 8008eca:	4a16      	ldr	r2, [pc, #88]	; (8008f24 <HAL_TIM_ConfigClockSource+0x5e0>)
 8008ecc:	4293      	cmp	r3, r2
 8008ece:	d00e      	beq.n	8008eee <HAL_TIM_ConfigClockSource+0x5aa>
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	681b      	ldr	r3, [r3, #0]
 8008ed4:	4a14      	ldr	r2, [pc, #80]	; (8008f28 <HAL_TIM_ConfigClockSource+0x5e4>)
 8008ed6:	4293      	cmp	r3, r2
 8008ed8:	d009      	beq.n	8008eee <HAL_TIM_ConfigClockSource+0x5aa>
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	681b      	ldr	r3, [r3, #0]
 8008ede:	4a13      	ldr	r2, [pc, #76]	; (8008f2c <HAL_TIM_ConfigClockSource+0x5e8>)
 8008ee0:	4293      	cmp	r3, r2
 8008ee2:	d004      	beq.n	8008eee <HAL_TIM_ConfigClockSource+0x5aa>
 8008ee4:	f241 11fd 	movw	r1, #4605	; 0x11fd
 8008ee8:	4811      	ldr	r0, [pc, #68]	; (8008f30 <HAL_TIM_ConfigClockSource+0x5ec>)
 8008eea:	f7f9 fafc 	bl	80024e6 <assert_failed>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	681a      	ldr	r2, [r3, #0]
 8008ef2:	683b      	ldr	r3, [r7, #0]
 8008ef4:	681b      	ldr	r3, [r3, #0]
 8008ef6:	4619      	mov	r1, r3
 8008ef8:	4610      	mov	r0, r2
 8008efa:	f000 fb10 	bl	800951e <TIM_ITRx_SetConfig>
      break;
 8008efe:	e000      	b.n	8008f02 <HAL_TIM_ConfigClockSource+0x5be>
      break;
 8008f00:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	2201      	movs	r2, #1
 8008f06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	2200      	movs	r2, #0
 8008f0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008f12:	2300      	movs	r3, #0
}
 8008f14:	4618      	mov	r0, r3
 8008f16:	3710      	adds	r7, #16
 8008f18:	46bd      	mov	sp, r7
 8008f1a:	bd80      	pop	{r7, pc}
 8008f1c:	40010000 	.word	0x40010000
 8008f20:	40000400 	.word	0x40000400
 8008f24:	40000800 	.word	0x40000800
 8008f28:	40000c00 	.word	0x40000c00
 8008f2c:	40014000 	.word	0x40014000
 8008f30:	0800ff30 	.word	0x0800ff30

08008f34 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008f34:	b480      	push	{r7}
 8008f36:	b085      	sub	sp, #20
 8008f38:	af00      	add	r7, sp, #0
 8008f3a:	6078      	str	r0, [r7, #4]
 8008f3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	681b      	ldr	r3, [r3, #0]
 8008f42:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	4a34      	ldr	r2, [pc, #208]	; (8009018 <TIM_Base_SetConfig+0xe4>)
 8008f48:	4293      	cmp	r3, r2
 8008f4a:	d00f      	beq.n	8008f6c <TIM_Base_SetConfig+0x38>
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008f52:	d00b      	beq.n	8008f6c <TIM_Base_SetConfig+0x38>
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	4a31      	ldr	r2, [pc, #196]	; (800901c <TIM_Base_SetConfig+0xe8>)
 8008f58:	4293      	cmp	r3, r2
 8008f5a:	d007      	beq.n	8008f6c <TIM_Base_SetConfig+0x38>
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	4a30      	ldr	r2, [pc, #192]	; (8009020 <TIM_Base_SetConfig+0xec>)
 8008f60:	4293      	cmp	r3, r2
 8008f62:	d003      	beq.n	8008f6c <TIM_Base_SetConfig+0x38>
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	4a2f      	ldr	r2, [pc, #188]	; (8009024 <TIM_Base_SetConfig+0xf0>)
 8008f68:	4293      	cmp	r3, r2
 8008f6a:	d108      	bne.n	8008f7e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008f6c:	68fb      	ldr	r3, [r7, #12]
 8008f6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008f72:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008f74:	683b      	ldr	r3, [r7, #0]
 8008f76:	685b      	ldr	r3, [r3, #4]
 8008f78:	68fa      	ldr	r2, [r7, #12]
 8008f7a:	4313      	orrs	r3, r2
 8008f7c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	4a25      	ldr	r2, [pc, #148]	; (8009018 <TIM_Base_SetConfig+0xe4>)
 8008f82:	4293      	cmp	r3, r2
 8008f84:	d01b      	beq.n	8008fbe <TIM_Base_SetConfig+0x8a>
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008f8c:	d017      	beq.n	8008fbe <TIM_Base_SetConfig+0x8a>
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	4a22      	ldr	r2, [pc, #136]	; (800901c <TIM_Base_SetConfig+0xe8>)
 8008f92:	4293      	cmp	r3, r2
 8008f94:	d013      	beq.n	8008fbe <TIM_Base_SetConfig+0x8a>
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	4a21      	ldr	r2, [pc, #132]	; (8009020 <TIM_Base_SetConfig+0xec>)
 8008f9a:	4293      	cmp	r3, r2
 8008f9c:	d00f      	beq.n	8008fbe <TIM_Base_SetConfig+0x8a>
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	4a20      	ldr	r2, [pc, #128]	; (8009024 <TIM_Base_SetConfig+0xf0>)
 8008fa2:	4293      	cmp	r3, r2
 8008fa4:	d00b      	beq.n	8008fbe <TIM_Base_SetConfig+0x8a>
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	4a1f      	ldr	r2, [pc, #124]	; (8009028 <TIM_Base_SetConfig+0xf4>)
 8008faa:	4293      	cmp	r3, r2
 8008fac:	d007      	beq.n	8008fbe <TIM_Base_SetConfig+0x8a>
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	4a1e      	ldr	r2, [pc, #120]	; (800902c <TIM_Base_SetConfig+0xf8>)
 8008fb2:	4293      	cmp	r3, r2
 8008fb4:	d003      	beq.n	8008fbe <TIM_Base_SetConfig+0x8a>
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	4a1d      	ldr	r2, [pc, #116]	; (8009030 <TIM_Base_SetConfig+0xfc>)
 8008fba:	4293      	cmp	r3, r2
 8008fbc:	d108      	bne.n	8008fd0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008fbe:	68fb      	ldr	r3, [r7, #12]
 8008fc0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008fc4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008fc6:	683b      	ldr	r3, [r7, #0]
 8008fc8:	68db      	ldr	r3, [r3, #12]
 8008fca:	68fa      	ldr	r2, [r7, #12]
 8008fcc:	4313      	orrs	r3, r2
 8008fce:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008fd0:	68fb      	ldr	r3, [r7, #12]
 8008fd2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008fd6:	683b      	ldr	r3, [r7, #0]
 8008fd8:	695b      	ldr	r3, [r3, #20]
 8008fda:	4313      	orrs	r3, r2
 8008fdc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	68fa      	ldr	r2, [r7, #12]
 8008fe2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008fe4:	683b      	ldr	r3, [r7, #0]
 8008fe6:	689a      	ldr	r2, [r3, #8]
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008fec:	683b      	ldr	r3, [r7, #0]
 8008fee:	681a      	ldr	r2, [r3, #0]
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	4a08      	ldr	r2, [pc, #32]	; (8009018 <TIM_Base_SetConfig+0xe4>)
 8008ff8:	4293      	cmp	r3, r2
 8008ffa:	d103      	bne.n	8009004 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008ffc:	683b      	ldr	r3, [r7, #0]
 8008ffe:	691a      	ldr	r2, [r3, #16]
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	2201      	movs	r2, #1
 8009008:	615a      	str	r2, [r3, #20]
}
 800900a:	bf00      	nop
 800900c:	3714      	adds	r7, #20
 800900e:	46bd      	mov	sp, r7
 8009010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009014:	4770      	bx	lr
 8009016:	bf00      	nop
 8009018:	40010000 	.word	0x40010000
 800901c:	40000400 	.word	0x40000400
 8009020:	40000800 	.word	0x40000800
 8009024:	40000c00 	.word	0x40000c00
 8009028:	40014000 	.word	0x40014000
 800902c:	40014400 	.word	0x40014400
 8009030:	40014800 	.word	0x40014800

08009034 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009034:	b580      	push	{r7, lr}
 8009036:	b086      	sub	sp, #24
 8009038:	af00      	add	r7, sp, #0
 800903a:	6078      	str	r0, [r7, #4]
 800903c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	6a1b      	ldr	r3, [r3, #32]
 8009042:	f023 0201 	bic.w	r2, r3, #1
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	6a1b      	ldr	r3, [r3, #32]
 800904e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	685b      	ldr	r3, [r3, #4]
 8009054:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	699b      	ldr	r3, [r3, #24]
 800905a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800905c:	68fb      	ldr	r3, [r7, #12]
 800905e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009062:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009064:	68fb      	ldr	r3, [r7, #12]
 8009066:	f023 0303 	bic.w	r3, r3, #3
 800906a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800906c:	683b      	ldr	r3, [r7, #0]
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	68fa      	ldr	r2, [r7, #12]
 8009072:	4313      	orrs	r3, r2
 8009074:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8009076:	697b      	ldr	r3, [r7, #20]
 8009078:	f023 0302 	bic.w	r3, r3, #2
 800907c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800907e:	683b      	ldr	r3, [r7, #0]
 8009080:	689b      	ldr	r3, [r3, #8]
 8009082:	697a      	ldr	r2, [r7, #20]
 8009084:	4313      	orrs	r3, r2
 8009086:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	4a30      	ldr	r2, [pc, #192]	; (800914c <TIM_OC1_SetConfig+0x118>)
 800908c:	4293      	cmp	r3, r2
 800908e:	d119      	bne.n	80090c4 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 8009090:	683b      	ldr	r3, [r7, #0]
 8009092:	68db      	ldr	r3, [r3, #12]
 8009094:	2b00      	cmp	r3, #0
 8009096:	d008      	beq.n	80090aa <TIM_OC1_SetConfig+0x76>
 8009098:	683b      	ldr	r3, [r7, #0]
 800909a:	68db      	ldr	r3, [r3, #12]
 800909c:	2b08      	cmp	r3, #8
 800909e:	d004      	beq.n	80090aa <TIM_OC1_SetConfig+0x76>
 80090a0:	f241 7102 	movw	r1, #5890	; 0x1702
 80090a4:	482a      	ldr	r0, [pc, #168]	; (8009150 <TIM_OC1_SetConfig+0x11c>)
 80090a6:	f7f9 fa1e 	bl	80024e6 <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80090aa:	697b      	ldr	r3, [r7, #20]
 80090ac:	f023 0308 	bic.w	r3, r3, #8
 80090b0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80090b2:	683b      	ldr	r3, [r7, #0]
 80090b4:	68db      	ldr	r3, [r3, #12]
 80090b6:	697a      	ldr	r2, [r7, #20]
 80090b8:	4313      	orrs	r3, r2
 80090ba:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80090bc:	697b      	ldr	r3, [r7, #20]
 80090be:	f023 0304 	bic.w	r3, r3, #4
 80090c2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	4a21      	ldr	r2, [pc, #132]	; (800914c <TIM_OC1_SetConfig+0x118>)
 80090c8:	4293      	cmp	r3, r2
 80090ca:	d12d      	bne.n	8009128 <TIM_OC1_SetConfig+0xf4>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 80090cc:	683b      	ldr	r3, [r7, #0]
 80090ce:	699b      	ldr	r3, [r3, #24]
 80090d0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80090d4:	d008      	beq.n	80090e8 <TIM_OC1_SetConfig+0xb4>
 80090d6:	683b      	ldr	r3, [r7, #0]
 80090d8:	699b      	ldr	r3, [r3, #24]
 80090da:	2b00      	cmp	r3, #0
 80090dc:	d004      	beq.n	80090e8 <TIM_OC1_SetConfig+0xb4>
 80090de:	f241 710f 	movw	r1, #5903	; 0x170f
 80090e2:	481b      	ldr	r0, [pc, #108]	; (8009150 <TIM_OC1_SetConfig+0x11c>)
 80090e4:	f7f9 f9ff 	bl	80024e6 <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 80090e8:	683b      	ldr	r3, [r7, #0]
 80090ea:	695b      	ldr	r3, [r3, #20]
 80090ec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80090f0:	d008      	beq.n	8009104 <TIM_OC1_SetConfig+0xd0>
 80090f2:	683b      	ldr	r3, [r7, #0]
 80090f4:	695b      	ldr	r3, [r3, #20]
 80090f6:	2b00      	cmp	r3, #0
 80090f8:	d004      	beq.n	8009104 <TIM_OC1_SetConfig+0xd0>
 80090fa:	f241 7110 	movw	r1, #5904	; 0x1710
 80090fe:	4814      	ldr	r0, [pc, #80]	; (8009150 <TIM_OC1_SetConfig+0x11c>)
 8009100:	f7f9 f9f1 	bl	80024e6 <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8009104:	693b      	ldr	r3, [r7, #16]
 8009106:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800910a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800910c:	693b      	ldr	r3, [r7, #16]
 800910e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009112:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8009114:	683b      	ldr	r3, [r7, #0]
 8009116:	695b      	ldr	r3, [r3, #20]
 8009118:	693a      	ldr	r2, [r7, #16]
 800911a:	4313      	orrs	r3, r2
 800911c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800911e:	683b      	ldr	r3, [r7, #0]
 8009120:	699b      	ldr	r3, [r3, #24]
 8009122:	693a      	ldr	r2, [r7, #16]
 8009124:	4313      	orrs	r3, r2
 8009126:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	693a      	ldr	r2, [r7, #16]
 800912c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	68fa      	ldr	r2, [r7, #12]
 8009132:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8009134:	683b      	ldr	r3, [r7, #0]
 8009136:	685a      	ldr	r2, [r3, #4]
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	697a      	ldr	r2, [r7, #20]
 8009140:	621a      	str	r2, [r3, #32]
}
 8009142:	bf00      	nop
 8009144:	3718      	adds	r7, #24
 8009146:	46bd      	mov	sp, r7
 8009148:	bd80      	pop	{r7, pc}
 800914a:	bf00      	nop
 800914c:	40010000 	.word	0x40010000
 8009150:	0800ff30 	.word	0x0800ff30

08009154 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009154:	b580      	push	{r7, lr}
 8009156:	b086      	sub	sp, #24
 8009158:	af00      	add	r7, sp, #0
 800915a:	6078      	str	r0, [r7, #4]
 800915c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	6a1b      	ldr	r3, [r3, #32]
 8009162:	f023 0210 	bic.w	r2, r3, #16
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	6a1b      	ldr	r3, [r3, #32]
 800916e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	685b      	ldr	r3, [r3, #4]
 8009174:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	699b      	ldr	r3, [r3, #24]
 800917a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800917c:	68fb      	ldr	r3, [r7, #12]
 800917e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009182:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009184:	68fb      	ldr	r3, [r7, #12]
 8009186:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800918a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800918c:	683b      	ldr	r3, [r7, #0]
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	021b      	lsls	r3, r3, #8
 8009192:	68fa      	ldr	r2, [r7, #12]
 8009194:	4313      	orrs	r3, r2
 8009196:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009198:	697b      	ldr	r3, [r7, #20]
 800919a:	f023 0320 	bic.w	r3, r3, #32
 800919e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80091a0:	683b      	ldr	r3, [r7, #0]
 80091a2:	689b      	ldr	r3, [r3, #8]
 80091a4:	011b      	lsls	r3, r3, #4
 80091a6:	697a      	ldr	r2, [r7, #20]
 80091a8:	4313      	orrs	r3, r2
 80091aa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	4a31      	ldr	r2, [pc, #196]	; (8009274 <TIM_OC2_SetConfig+0x120>)
 80091b0:	4293      	cmp	r3, r2
 80091b2:	d11a      	bne.n	80091ea <TIM_OC2_SetConfig+0x96>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 80091b4:	683b      	ldr	r3, [r7, #0]
 80091b6:	68db      	ldr	r3, [r3, #12]
 80091b8:	2b00      	cmp	r3, #0
 80091ba:	d008      	beq.n	80091ce <TIM_OC2_SetConfig+0x7a>
 80091bc:	683b      	ldr	r3, [r7, #0]
 80091be:	68db      	ldr	r3, [r3, #12]
 80091c0:	2b08      	cmp	r3, #8
 80091c2:	d004      	beq.n	80091ce <TIM_OC2_SetConfig+0x7a>
 80091c4:	f241 714d 	movw	r1, #5965	; 0x174d
 80091c8:	482b      	ldr	r0, [pc, #172]	; (8009278 <TIM_OC2_SetConfig+0x124>)
 80091ca:	f7f9 f98c 	bl	80024e6 <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80091ce:	697b      	ldr	r3, [r7, #20]
 80091d0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80091d4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80091d6:	683b      	ldr	r3, [r7, #0]
 80091d8:	68db      	ldr	r3, [r3, #12]
 80091da:	011b      	lsls	r3, r3, #4
 80091dc:	697a      	ldr	r2, [r7, #20]
 80091de:	4313      	orrs	r3, r2
 80091e0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80091e2:	697b      	ldr	r3, [r7, #20]
 80091e4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80091e8:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	4a21      	ldr	r2, [pc, #132]	; (8009274 <TIM_OC2_SetConfig+0x120>)
 80091ee:	4293      	cmp	r3, r2
 80091f0:	d12f      	bne.n	8009252 <TIM_OC2_SetConfig+0xfe>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 80091f2:	683b      	ldr	r3, [r7, #0]
 80091f4:	699b      	ldr	r3, [r3, #24]
 80091f6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80091fa:	d008      	beq.n	800920e <TIM_OC2_SetConfig+0xba>
 80091fc:	683b      	ldr	r3, [r7, #0]
 80091fe:	699b      	ldr	r3, [r3, #24]
 8009200:	2b00      	cmp	r3, #0
 8009202:	d004      	beq.n	800920e <TIM_OC2_SetConfig+0xba>
 8009204:	f241 715b 	movw	r1, #5979	; 0x175b
 8009208:	481b      	ldr	r0, [pc, #108]	; (8009278 <TIM_OC2_SetConfig+0x124>)
 800920a:	f7f9 f96c 	bl	80024e6 <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 800920e:	683b      	ldr	r3, [r7, #0]
 8009210:	695b      	ldr	r3, [r3, #20]
 8009212:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009216:	d008      	beq.n	800922a <TIM_OC2_SetConfig+0xd6>
 8009218:	683b      	ldr	r3, [r7, #0]
 800921a:	695b      	ldr	r3, [r3, #20]
 800921c:	2b00      	cmp	r3, #0
 800921e:	d004      	beq.n	800922a <TIM_OC2_SetConfig+0xd6>
 8009220:	f241 715c 	movw	r1, #5980	; 0x175c
 8009224:	4814      	ldr	r0, [pc, #80]	; (8009278 <TIM_OC2_SetConfig+0x124>)
 8009226:	f7f9 f95e 	bl	80024e6 <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800922a:	693b      	ldr	r3, [r7, #16]
 800922c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009230:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009232:	693b      	ldr	r3, [r7, #16]
 8009234:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009238:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800923a:	683b      	ldr	r3, [r7, #0]
 800923c:	695b      	ldr	r3, [r3, #20]
 800923e:	009b      	lsls	r3, r3, #2
 8009240:	693a      	ldr	r2, [r7, #16]
 8009242:	4313      	orrs	r3, r2
 8009244:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009246:	683b      	ldr	r3, [r7, #0]
 8009248:	699b      	ldr	r3, [r3, #24]
 800924a:	009b      	lsls	r3, r3, #2
 800924c:	693a      	ldr	r2, [r7, #16]
 800924e:	4313      	orrs	r3, r2
 8009250:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	693a      	ldr	r2, [r7, #16]
 8009256:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	68fa      	ldr	r2, [r7, #12]
 800925c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800925e:	683b      	ldr	r3, [r7, #0]
 8009260:	685a      	ldr	r2, [r3, #4]
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	697a      	ldr	r2, [r7, #20]
 800926a:	621a      	str	r2, [r3, #32]
}
 800926c:	bf00      	nop
 800926e:	3718      	adds	r7, #24
 8009270:	46bd      	mov	sp, r7
 8009272:	bd80      	pop	{r7, pc}
 8009274:	40010000 	.word	0x40010000
 8009278:	0800ff30 	.word	0x0800ff30

0800927c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800927c:	b580      	push	{r7, lr}
 800927e:	b086      	sub	sp, #24
 8009280:	af00      	add	r7, sp, #0
 8009282:	6078      	str	r0, [r7, #4]
 8009284:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	6a1b      	ldr	r3, [r3, #32]
 800928a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	6a1b      	ldr	r3, [r3, #32]
 8009296:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	685b      	ldr	r3, [r3, #4]
 800929c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	69db      	ldr	r3, [r3, #28]
 80092a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80092a4:	68fb      	ldr	r3, [r7, #12]
 80092a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80092aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80092ac:	68fb      	ldr	r3, [r7, #12]
 80092ae:	f023 0303 	bic.w	r3, r3, #3
 80092b2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80092b4:	683b      	ldr	r3, [r7, #0]
 80092b6:	681b      	ldr	r3, [r3, #0]
 80092b8:	68fa      	ldr	r2, [r7, #12]
 80092ba:	4313      	orrs	r3, r2
 80092bc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80092be:	697b      	ldr	r3, [r7, #20]
 80092c0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80092c4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80092c6:	683b      	ldr	r3, [r7, #0]
 80092c8:	689b      	ldr	r3, [r3, #8]
 80092ca:	021b      	lsls	r3, r3, #8
 80092cc:	697a      	ldr	r2, [r7, #20]
 80092ce:	4313      	orrs	r3, r2
 80092d0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	4a31      	ldr	r2, [pc, #196]	; (800939c <TIM_OC3_SetConfig+0x120>)
 80092d6:	4293      	cmp	r3, r2
 80092d8:	d11a      	bne.n	8009310 <TIM_OC3_SetConfig+0x94>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 80092da:	683b      	ldr	r3, [r7, #0]
 80092dc:	68db      	ldr	r3, [r3, #12]
 80092de:	2b00      	cmp	r3, #0
 80092e0:	d008      	beq.n	80092f4 <TIM_OC3_SetConfig+0x78>
 80092e2:	683b      	ldr	r3, [r7, #0]
 80092e4:	68db      	ldr	r3, [r3, #12]
 80092e6:	2b08      	cmp	r3, #8
 80092e8:	d004      	beq.n	80092f4 <TIM_OC3_SetConfig+0x78>
 80092ea:	f241 7198 	movw	r1, #6040	; 0x1798
 80092ee:	482c      	ldr	r0, [pc, #176]	; (80093a0 <TIM_OC3_SetConfig+0x124>)
 80092f0:	f7f9 f8f9 	bl	80024e6 <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80092f4:	697b      	ldr	r3, [r7, #20]
 80092f6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80092fa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80092fc:	683b      	ldr	r3, [r7, #0]
 80092fe:	68db      	ldr	r3, [r3, #12]
 8009300:	021b      	lsls	r3, r3, #8
 8009302:	697a      	ldr	r2, [r7, #20]
 8009304:	4313      	orrs	r3, r2
 8009306:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8009308:	697b      	ldr	r3, [r7, #20]
 800930a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800930e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	4a22      	ldr	r2, [pc, #136]	; (800939c <TIM_OC3_SetConfig+0x120>)
 8009314:	4293      	cmp	r3, r2
 8009316:	d12f      	bne.n	8009378 <TIM_OC3_SetConfig+0xfc>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 8009318:	683b      	ldr	r3, [r7, #0]
 800931a:	699b      	ldr	r3, [r3, #24]
 800931c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009320:	d008      	beq.n	8009334 <TIM_OC3_SetConfig+0xb8>
 8009322:	683b      	ldr	r3, [r7, #0]
 8009324:	699b      	ldr	r3, [r3, #24]
 8009326:	2b00      	cmp	r3, #0
 8009328:	d004      	beq.n	8009334 <TIM_OC3_SetConfig+0xb8>
 800932a:	f241 71a5 	movw	r1, #6053	; 0x17a5
 800932e:	481c      	ldr	r0, [pc, #112]	; (80093a0 <TIM_OC3_SetConfig+0x124>)
 8009330:	f7f9 f8d9 	bl	80024e6 <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 8009334:	683b      	ldr	r3, [r7, #0]
 8009336:	695b      	ldr	r3, [r3, #20]
 8009338:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800933c:	d008      	beq.n	8009350 <TIM_OC3_SetConfig+0xd4>
 800933e:	683b      	ldr	r3, [r7, #0]
 8009340:	695b      	ldr	r3, [r3, #20]
 8009342:	2b00      	cmp	r3, #0
 8009344:	d004      	beq.n	8009350 <TIM_OC3_SetConfig+0xd4>
 8009346:	f241 71a6 	movw	r1, #6054	; 0x17a6
 800934a:	4815      	ldr	r0, [pc, #84]	; (80093a0 <TIM_OC3_SetConfig+0x124>)
 800934c:	f7f9 f8cb 	bl	80024e6 <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8009350:	693b      	ldr	r3, [r7, #16]
 8009352:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009356:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8009358:	693b      	ldr	r3, [r7, #16]
 800935a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800935e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8009360:	683b      	ldr	r3, [r7, #0]
 8009362:	695b      	ldr	r3, [r3, #20]
 8009364:	011b      	lsls	r3, r3, #4
 8009366:	693a      	ldr	r2, [r7, #16]
 8009368:	4313      	orrs	r3, r2
 800936a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800936c:	683b      	ldr	r3, [r7, #0]
 800936e:	699b      	ldr	r3, [r3, #24]
 8009370:	011b      	lsls	r3, r3, #4
 8009372:	693a      	ldr	r2, [r7, #16]
 8009374:	4313      	orrs	r3, r2
 8009376:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	693a      	ldr	r2, [r7, #16]
 800937c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	68fa      	ldr	r2, [r7, #12]
 8009382:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8009384:	683b      	ldr	r3, [r7, #0]
 8009386:	685a      	ldr	r2, [r3, #4]
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	697a      	ldr	r2, [r7, #20]
 8009390:	621a      	str	r2, [r3, #32]
}
 8009392:	bf00      	nop
 8009394:	3718      	adds	r7, #24
 8009396:	46bd      	mov	sp, r7
 8009398:	bd80      	pop	{r7, pc}
 800939a:	bf00      	nop
 800939c:	40010000 	.word	0x40010000
 80093a0:	0800ff30 	.word	0x0800ff30

080093a4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80093a4:	b580      	push	{r7, lr}
 80093a6:	b086      	sub	sp, #24
 80093a8:	af00      	add	r7, sp, #0
 80093aa:	6078      	str	r0, [r7, #4]
 80093ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	6a1b      	ldr	r3, [r3, #32]
 80093b2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	6a1b      	ldr	r3, [r3, #32]
 80093be:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	685b      	ldr	r3, [r3, #4]
 80093c4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	69db      	ldr	r3, [r3, #28]
 80093ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80093cc:	68fb      	ldr	r3, [r7, #12]
 80093ce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80093d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80093d4:	68fb      	ldr	r3, [r7, #12]
 80093d6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80093da:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80093dc:	683b      	ldr	r3, [r7, #0]
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	021b      	lsls	r3, r3, #8
 80093e2:	68fa      	ldr	r2, [r7, #12]
 80093e4:	4313      	orrs	r3, r2
 80093e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80093e8:	693b      	ldr	r3, [r7, #16]
 80093ea:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80093ee:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80093f0:	683b      	ldr	r3, [r7, #0]
 80093f2:	689b      	ldr	r3, [r3, #8]
 80093f4:	031b      	lsls	r3, r3, #12
 80093f6:	693a      	ldr	r2, [r7, #16]
 80093f8:	4313      	orrs	r3, r2
 80093fa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	4a16      	ldr	r2, [pc, #88]	; (8009458 <TIM_OC4_SetConfig+0xb4>)
 8009400:	4293      	cmp	r3, r2
 8009402:	d117      	bne.n	8009434 <TIM_OC4_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 8009404:	683b      	ldr	r3, [r7, #0]
 8009406:	695b      	ldr	r3, [r3, #20]
 8009408:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800940c:	d008      	beq.n	8009420 <TIM_OC4_SetConfig+0x7c>
 800940e:	683b      	ldr	r3, [r7, #0]
 8009410:	695b      	ldr	r3, [r3, #20]
 8009412:	2b00      	cmp	r3, #0
 8009414:	d004      	beq.n	8009420 <TIM_OC4_SetConfig+0x7c>
 8009416:	f241 71e4 	movw	r1, #6116	; 0x17e4
 800941a:	4810      	ldr	r0, [pc, #64]	; (800945c <TIM_OC4_SetConfig+0xb8>)
 800941c:	f7f9 f863 	bl	80024e6 <assert_failed>

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009420:	697b      	ldr	r3, [r7, #20]
 8009422:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009426:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009428:	683b      	ldr	r3, [r7, #0]
 800942a:	695b      	ldr	r3, [r3, #20]
 800942c:	019b      	lsls	r3, r3, #6
 800942e:	697a      	ldr	r2, [r7, #20]
 8009430:	4313      	orrs	r3, r2
 8009432:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	697a      	ldr	r2, [r7, #20]
 8009438:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	68fa      	ldr	r2, [r7, #12]
 800943e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009440:	683b      	ldr	r3, [r7, #0]
 8009442:	685a      	ldr	r2, [r3, #4]
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	693a      	ldr	r2, [r7, #16]
 800944c:	621a      	str	r2, [r3, #32]
}
 800944e:	bf00      	nop
 8009450:	3718      	adds	r7, #24
 8009452:	46bd      	mov	sp, r7
 8009454:	bd80      	pop	{r7, pc}
 8009456:	bf00      	nop
 8009458:	40010000 	.word	0x40010000
 800945c:	0800ff30 	.word	0x0800ff30

08009460 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009460:	b480      	push	{r7}
 8009462:	b087      	sub	sp, #28
 8009464:	af00      	add	r7, sp, #0
 8009466:	60f8      	str	r0, [r7, #12]
 8009468:	60b9      	str	r1, [r7, #8]
 800946a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800946c:	68fb      	ldr	r3, [r7, #12]
 800946e:	6a1b      	ldr	r3, [r3, #32]
 8009470:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009472:	68fb      	ldr	r3, [r7, #12]
 8009474:	6a1b      	ldr	r3, [r3, #32]
 8009476:	f023 0201 	bic.w	r2, r3, #1
 800947a:	68fb      	ldr	r3, [r7, #12]
 800947c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800947e:	68fb      	ldr	r3, [r7, #12]
 8009480:	699b      	ldr	r3, [r3, #24]
 8009482:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009484:	693b      	ldr	r3, [r7, #16]
 8009486:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800948a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	011b      	lsls	r3, r3, #4
 8009490:	693a      	ldr	r2, [r7, #16]
 8009492:	4313      	orrs	r3, r2
 8009494:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009496:	697b      	ldr	r3, [r7, #20]
 8009498:	f023 030a 	bic.w	r3, r3, #10
 800949c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800949e:	697a      	ldr	r2, [r7, #20]
 80094a0:	68bb      	ldr	r3, [r7, #8]
 80094a2:	4313      	orrs	r3, r2
 80094a4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80094a6:	68fb      	ldr	r3, [r7, #12]
 80094a8:	693a      	ldr	r2, [r7, #16]
 80094aa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80094ac:	68fb      	ldr	r3, [r7, #12]
 80094ae:	697a      	ldr	r2, [r7, #20]
 80094b0:	621a      	str	r2, [r3, #32]
}
 80094b2:	bf00      	nop
 80094b4:	371c      	adds	r7, #28
 80094b6:	46bd      	mov	sp, r7
 80094b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094bc:	4770      	bx	lr

080094be <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80094be:	b480      	push	{r7}
 80094c0:	b087      	sub	sp, #28
 80094c2:	af00      	add	r7, sp, #0
 80094c4:	60f8      	str	r0, [r7, #12]
 80094c6:	60b9      	str	r1, [r7, #8]
 80094c8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80094ca:	68fb      	ldr	r3, [r7, #12]
 80094cc:	6a1b      	ldr	r3, [r3, #32]
 80094ce:	f023 0210 	bic.w	r2, r3, #16
 80094d2:	68fb      	ldr	r3, [r7, #12]
 80094d4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80094d6:	68fb      	ldr	r3, [r7, #12]
 80094d8:	699b      	ldr	r3, [r3, #24]
 80094da:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80094dc:	68fb      	ldr	r3, [r7, #12]
 80094de:	6a1b      	ldr	r3, [r3, #32]
 80094e0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80094e2:	697b      	ldr	r3, [r7, #20]
 80094e4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80094e8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	031b      	lsls	r3, r3, #12
 80094ee:	697a      	ldr	r2, [r7, #20]
 80094f0:	4313      	orrs	r3, r2
 80094f2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80094f4:	693b      	ldr	r3, [r7, #16]
 80094f6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80094fa:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80094fc:	68bb      	ldr	r3, [r7, #8]
 80094fe:	011b      	lsls	r3, r3, #4
 8009500:	693a      	ldr	r2, [r7, #16]
 8009502:	4313      	orrs	r3, r2
 8009504:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009506:	68fb      	ldr	r3, [r7, #12]
 8009508:	697a      	ldr	r2, [r7, #20]
 800950a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800950c:	68fb      	ldr	r3, [r7, #12]
 800950e:	693a      	ldr	r2, [r7, #16]
 8009510:	621a      	str	r2, [r3, #32]
}
 8009512:	bf00      	nop
 8009514:	371c      	adds	r7, #28
 8009516:	46bd      	mov	sp, r7
 8009518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800951c:	4770      	bx	lr

0800951e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800951e:	b480      	push	{r7}
 8009520:	b085      	sub	sp, #20
 8009522:	af00      	add	r7, sp, #0
 8009524:	6078      	str	r0, [r7, #4]
 8009526:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	689b      	ldr	r3, [r3, #8]
 800952c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800952e:	68fb      	ldr	r3, [r7, #12]
 8009530:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009534:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009536:	683a      	ldr	r2, [r7, #0]
 8009538:	68fb      	ldr	r3, [r7, #12]
 800953a:	4313      	orrs	r3, r2
 800953c:	f043 0307 	orr.w	r3, r3, #7
 8009540:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	68fa      	ldr	r2, [r7, #12]
 8009546:	609a      	str	r2, [r3, #8]
}
 8009548:	bf00      	nop
 800954a:	3714      	adds	r7, #20
 800954c:	46bd      	mov	sp, r7
 800954e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009552:	4770      	bx	lr

08009554 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009554:	b480      	push	{r7}
 8009556:	b087      	sub	sp, #28
 8009558:	af00      	add	r7, sp, #0
 800955a:	60f8      	str	r0, [r7, #12]
 800955c:	60b9      	str	r1, [r7, #8]
 800955e:	607a      	str	r2, [r7, #4]
 8009560:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009562:	68fb      	ldr	r3, [r7, #12]
 8009564:	689b      	ldr	r3, [r3, #8]
 8009566:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009568:	697b      	ldr	r3, [r7, #20]
 800956a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800956e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009570:	683b      	ldr	r3, [r7, #0]
 8009572:	021a      	lsls	r2, r3, #8
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	431a      	orrs	r2, r3
 8009578:	68bb      	ldr	r3, [r7, #8]
 800957a:	4313      	orrs	r3, r2
 800957c:	697a      	ldr	r2, [r7, #20]
 800957e:	4313      	orrs	r3, r2
 8009580:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009582:	68fb      	ldr	r3, [r7, #12]
 8009584:	697a      	ldr	r2, [r7, #20]
 8009586:	609a      	str	r2, [r3, #8]
}
 8009588:	bf00      	nop
 800958a:	371c      	adds	r7, #28
 800958c:	46bd      	mov	sp, r7
 800958e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009592:	4770      	bx	lr

08009594 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8009594:	b580      	push	{r7, lr}
 8009596:	b086      	sub	sp, #24
 8009598:	af00      	add	r7, sp, #0
 800959a:	60f8      	str	r0, [r7, #12]
 800959c:	60b9      	str	r1, [r7, #8]
 800959e:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
 80095a0:	68fb      	ldr	r3, [r7, #12]
 80095a2:	4a2a      	ldr	r2, [pc, #168]	; (800964c <TIM_CCxChannelCmd+0xb8>)
 80095a4:	4293      	cmp	r3, r2
 80095a6:	d020      	beq.n	80095ea <TIM_CCxChannelCmd+0x56>
 80095a8:	68fb      	ldr	r3, [r7, #12]
 80095aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80095ae:	d01c      	beq.n	80095ea <TIM_CCxChannelCmd+0x56>
 80095b0:	68fb      	ldr	r3, [r7, #12]
 80095b2:	4a27      	ldr	r2, [pc, #156]	; (8009650 <TIM_CCxChannelCmd+0xbc>)
 80095b4:	4293      	cmp	r3, r2
 80095b6:	d018      	beq.n	80095ea <TIM_CCxChannelCmd+0x56>
 80095b8:	68fb      	ldr	r3, [r7, #12]
 80095ba:	4a26      	ldr	r2, [pc, #152]	; (8009654 <TIM_CCxChannelCmd+0xc0>)
 80095bc:	4293      	cmp	r3, r2
 80095be:	d014      	beq.n	80095ea <TIM_CCxChannelCmd+0x56>
 80095c0:	68fb      	ldr	r3, [r7, #12]
 80095c2:	4a25      	ldr	r2, [pc, #148]	; (8009658 <TIM_CCxChannelCmd+0xc4>)
 80095c4:	4293      	cmp	r3, r2
 80095c6:	d010      	beq.n	80095ea <TIM_CCxChannelCmd+0x56>
 80095c8:	68fb      	ldr	r3, [r7, #12]
 80095ca:	4a24      	ldr	r2, [pc, #144]	; (800965c <TIM_CCxChannelCmd+0xc8>)
 80095cc:	4293      	cmp	r3, r2
 80095ce:	d00c      	beq.n	80095ea <TIM_CCxChannelCmd+0x56>
 80095d0:	68fb      	ldr	r3, [r7, #12]
 80095d2:	4a23      	ldr	r2, [pc, #140]	; (8009660 <TIM_CCxChannelCmd+0xcc>)
 80095d4:	4293      	cmp	r3, r2
 80095d6:	d008      	beq.n	80095ea <TIM_CCxChannelCmd+0x56>
 80095d8:	68fb      	ldr	r3, [r7, #12]
 80095da:	4a22      	ldr	r2, [pc, #136]	; (8009664 <TIM_CCxChannelCmd+0xd0>)
 80095dc:	4293      	cmp	r3, r2
 80095de:	d004      	beq.n	80095ea <TIM_CCxChannelCmd+0x56>
 80095e0:	f641 11cc 	movw	r1, #6604	; 0x19cc
 80095e4:	4820      	ldr	r0, [pc, #128]	; (8009668 <TIM_CCxChannelCmd+0xd4>)
 80095e6:	f7f8 ff7e 	bl	80024e6 <assert_failed>
  assert_param(IS_TIM_CHANNELS(Channel));
 80095ea:	68bb      	ldr	r3, [r7, #8]
 80095ec:	2b00      	cmp	r3, #0
 80095ee:	d010      	beq.n	8009612 <TIM_CCxChannelCmd+0x7e>
 80095f0:	68bb      	ldr	r3, [r7, #8]
 80095f2:	2b04      	cmp	r3, #4
 80095f4:	d00d      	beq.n	8009612 <TIM_CCxChannelCmd+0x7e>
 80095f6:	68bb      	ldr	r3, [r7, #8]
 80095f8:	2b08      	cmp	r3, #8
 80095fa:	d00a      	beq.n	8009612 <TIM_CCxChannelCmd+0x7e>
 80095fc:	68bb      	ldr	r3, [r7, #8]
 80095fe:	2b0c      	cmp	r3, #12
 8009600:	d007      	beq.n	8009612 <TIM_CCxChannelCmd+0x7e>
 8009602:	68bb      	ldr	r3, [r7, #8]
 8009604:	2b3c      	cmp	r3, #60	; 0x3c
 8009606:	d004      	beq.n	8009612 <TIM_CCxChannelCmd+0x7e>
 8009608:	f641 11cd 	movw	r1, #6605	; 0x19cd
 800960c:	4816      	ldr	r0, [pc, #88]	; (8009668 <TIM_CCxChannelCmd+0xd4>)
 800960e:	f7f8 ff6a 	bl	80024e6 <assert_failed>

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8009612:	68bb      	ldr	r3, [r7, #8]
 8009614:	f003 031f 	and.w	r3, r3, #31
 8009618:	2201      	movs	r2, #1
 800961a:	fa02 f303 	lsl.w	r3, r2, r3
 800961e:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8009620:	68fb      	ldr	r3, [r7, #12]
 8009622:	6a1a      	ldr	r2, [r3, #32]
 8009624:	697b      	ldr	r3, [r7, #20]
 8009626:	43db      	mvns	r3, r3
 8009628:	401a      	ands	r2, r3
 800962a:	68fb      	ldr	r3, [r7, #12]
 800962c:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800962e:	68fb      	ldr	r3, [r7, #12]
 8009630:	6a1a      	ldr	r2, [r3, #32]
 8009632:	68bb      	ldr	r3, [r7, #8]
 8009634:	f003 031f 	and.w	r3, r3, #31
 8009638:	6879      	ldr	r1, [r7, #4]
 800963a:	fa01 f303 	lsl.w	r3, r1, r3
 800963e:	431a      	orrs	r2, r3
 8009640:	68fb      	ldr	r3, [r7, #12]
 8009642:	621a      	str	r2, [r3, #32]
}
 8009644:	bf00      	nop
 8009646:	3718      	adds	r7, #24
 8009648:	46bd      	mov	sp, r7
 800964a:	bd80      	pop	{r7, pc}
 800964c:	40010000 	.word	0x40010000
 8009650:	40000400 	.word	0x40000400
 8009654:	40000800 	.word	0x40000800
 8009658:	40000c00 	.word	0x40000c00
 800965c:	40014000 	.word	0x40014000
 8009660:	40014400 	.word	0x40014400
 8009664:	40014800 	.word	0x40014800
 8009668:	0800ff30 	.word	0x0800ff30

0800966c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800966c:	b580      	push	{r7, lr}
 800966e:	b084      	sub	sp, #16
 8009670:	af00      	add	r7, sp, #0
 8009672:	6078      	str	r0, [r7, #4]
 8009674:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr2;
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	681b      	ldr	r3, [r3, #0]
 800967a:	4a55      	ldr	r2, [pc, #340]	; (80097d0 <HAL_TIMEx_MasterConfigSynchronization+0x164>)
 800967c:	4293      	cmp	r3, r2
 800967e:	d018      	beq.n	80096b2 <HAL_TIMEx_MasterConfigSynchronization+0x46>
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	681b      	ldr	r3, [r3, #0]
 8009684:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009688:	d013      	beq.n	80096b2 <HAL_TIMEx_MasterConfigSynchronization+0x46>
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	681b      	ldr	r3, [r3, #0]
 800968e:	4a51      	ldr	r2, [pc, #324]	; (80097d4 <HAL_TIMEx_MasterConfigSynchronization+0x168>)
 8009690:	4293      	cmp	r3, r2
 8009692:	d00e      	beq.n	80096b2 <HAL_TIMEx_MasterConfigSynchronization+0x46>
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	681b      	ldr	r3, [r3, #0]
 8009698:	4a4f      	ldr	r2, [pc, #316]	; (80097d8 <HAL_TIMEx_MasterConfigSynchronization+0x16c>)
 800969a:	4293      	cmp	r3, r2
 800969c:	d009      	beq.n	80096b2 <HAL_TIMEx_MasterConfigSynchronization+0x46>
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	681b      	ldr	r3, [r3, #0]
 80096a2:	4a4e      	ldr	r2, [pc, #312]	; (80097dc <HAL_TIMEx_MasterConfigSynchronization+0x170>)
 80096a4:	4293      	cmp	r3, r2
 80096a6:	d004      	beq.n	80096b2 <HAL_TIMEx_MasterConfigSynchronization+0x46>
 80096a8:	f240 6164 	movw	r1, #1636	; 0x664
 80096ac:	484c      	ldr	r0, [pc, #304]	; (80097e0 <HAL_TIMEx_MasterConfigSynchronization+0x174>)
 80096ae:	f7f8 ff1a 	bl	80024e6 <assert_failed>
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
 80096b2:	683b      	ldr	r3, [r7, #0]
 80096b4:	681b      	ldr	r3, [r3, #0]
 80096b6:	2b00      	cmp	r3, #0
 80096b8:	d020      	beq.n	80096fc <HAL_TIMEx_MasterConfigSynchronization+0x90>
 80096ba:	683b      	ldr	r3, [r7, #0]
 80096bc:	681b      	ldr	r3, [r3, #0]
 80096be:	2b10      	cmp	r3, #16
 80096c0:	d01c      	beq.n	80096fc <HAL_TIMEx_MasterConfigSynchronization+0x90>
 80096c2:	683b      	ldr	r3, [r7, #0]
 80096c4:	681b      	ldr	r3, [r3, #0]
 80096c6:	2b20      	cmp	r3, #32
 80096c8:	d018      	beq.n	80096fc <HAL_TIMEx_MasterConfigSynchronization+0x90>
 80096ca:	683b      	ldr	r3, [r7, #0]
 80096cc:	681b      	ldr	r3, [r3, #0]
 80096ce:	2b30      	cmp	r3, #48	; 0x30
 80096d0:	d014      	beq.n	80096fc <HAL_TIMEx_MasterConfigSynchronization+0x90>
 80096d2:	683b      	ldr	r3, [r7, #0]
 80096d4:	681b      	ldr	r3, [r3, #0]
 80096d6:	2b40      	cmp	r3, #64	; 0x40
 80096d8:	d010      	beq.n	80096fc <HAL_TIMEx_MasterConfigSynchronization+0x90>
 80096da:	683b      	ldr	r3, [r7, #0]
 80096dc:	681b      	ldr	r3, [r3, #0]
 80096de:	2b50      	cmp	r3, #80	; 0x50
 80096e0:	d00c      	beq.n	80096fc <HAL_TIMEx_MasterConfigSynchronization+0x90>
 80096e2:	683b      	ldr	r3, [r7, #0]
 80096e4:	681b      	ldr	r3, [r3, #0]
 80096e6:	2b60      	cmp	r3, #96	; 0x60
 80096e8:	d008      	beq.n	80096fc <HAL_TIMEx_MasterConfigSynchronization+0x90>
 80096ea:	683b      	ldr	r3, [r7, #0]
 80096ec:	681b      	ldr	r3, [r3, #0]
 80096ee:	2b70      	cmp	r3, #112	; 0x70
 80096f0:	d004      	beq.n	80096fc <HAL_TIMEx_MasterConfigSynchronization+0x90>
 80096f2:	f240 6165 	movw	r1, #1637	; 0x665
 80096f6:	483a      	ldr	r0, [pc, #232]	; (80097e0 <HAL_TIMEx_MasterConfigSynchronization+0x174>)
 80096f8:	f7f8 fef5 	bl	80024e6 <assert_failed>
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
 80096fc:	683b      	ldr	r3, [r7, #0]
 80096fe:	685b      	ldr	r3, [r3, #4]
 8009700:	2b80      	cmp	r3, #128	; 0x80
 8009702:	d008      	beq.n	8009716 <HAL_TIMEx_MasterConfigSynchronization+0xaa>
 8009704:	683b      	ldr	r3, [r7, #0]
 8009706:	685b      	ldr	r3, [r3, #4]
 8009708:	2b00      	cmp	r3, #0
 800970a:	d004      	beq.n	8009716 <HAL_TIMEx_MasterConfigSynchronization+0xaa>
 800970c:	f240 6166 	movw	r1, #1638	; 0x666
 8009710:	4833      	ldr	r0, [pc, #204]	; (80097e0 <HAL_TIMEx_MasterConfigSynchronization+0x174>)
 8009712:	f7f8 fee8 	bl	80024e6 <assert_failed>

  /* Check input state */
  __HAL_LOCK(htim);
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800971c:	2b01      	cmp	r3, #1
 800971e:	d101      	bne.n	8009724 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8009720:	2302      	movs	r3, #2
 8009722:	e050      	b.n	80097c6 <HAL_TIMEx_MasterConfigSynchronization+0x15a>
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	2201      	movs	r2, #1
 8009728:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	2202      	movs	r2, #2
 8009730:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	681b      	ldr	r3, [r3, #0]
 8009738:	685b      	ldr	r3, [r3, #4]
 800973a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	681b      	ldr	r3, [r3, #0]
 8009740:	689b      	ldr	r3, [r3, #8]
 8009742:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009744:	68fb      	ldr	r3, [r7, #12]
 8009746:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800974a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800974c:	683b      	ldr	r3, [r7, #0]
 800974e:	681b      	ldr	r3, [r3, #0]
 8009750:	68fa      	ldr	r2, [r7, #12]
 8009752:	4313      	orrs	r3, r2
 8009754:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	681b      	ldr	r3, [r3, #0]
 800975a:	68fa      	ldr	r2, [r7, #12]
 800975c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	681b      	ldr	r3, [r3, #0]
 8009762:	4a1b      	ldr	r2, [pc, #108]	; (80097d0 <HAL_TIMEx_MasterConfigSynchronization+0x164>)
 8009764:	4293      	cmp	r3, r2
 8009766:	d018      	beq.n	800979a <HAL_TIMEx_MasterConfigSynchronization+0x12e>
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	681b      	ldr	r3, [r3, #0]
 800976c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009770:	d013      	beq.n	800979a <HAL_TIMEx_MasterConfigSynchronization+0x12e>
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	681b      	ldr	r3, [r3, #0]
 8009776:	4a17      	ldr	r2, [pc, #92]	; (80097d4 <HAL_TIMEx_MasterConfigSynchronization+0x168>)
 8009778:	4293      	cmp	r3, r2
 800977a:	d00e      	beq.n	800979a <HAL_TIMEx_MasterConfigSynchronization+0x12e>
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	681b      	ldr	r3, [r3, #0]
 8009780:	4a15      	ldr	r2, [pc, #84]	; (80097d8 <HAL_TIMEx_MasterConfigSynchronization+0x16c>)
 8009782:	4293      	cmp	r3, r2
 8009784:	d009      	beq.n	800979a <HAL_TIMEx_MasterConfigSynchronization+0x12e>
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	681b      	ldr	r3, [r3, #0]
 800978a:	4a14      	ldr	r2, [pc, #80]	; (80097dc <HAL_TIMEx_MasterConfigSynchronization+0x170>)
 800978c:	4293      	cmp	r3, r2
 800978e:	d004      	beq.n	800979a <HAL_TIMEx_MasterConfigSynchronization+0x12e>
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	681b      	ldr	r3, [r3, #0]
 8009794:	4a13      	ldr	r2, [pc, #76]	; (80097e4 <HAL_TIMEx_MasterConfigSynchronization+0x178>)
 8009796:	4293      	cmp	r3, r2
 8009798:	d10c      	bne.n	80097b4 <HAL_TIMEx_MasterConfigSynchronization+0x148>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800979a:	68bb      	ldr	r3, [r7, #8]
 800979c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80097a0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80097a2:	683b      	ldr	r3, [r7, #0]
 80097a4:	685b      	ldr	r3, [r3, #4]
 80097a6:	68ba      	ldr	r2, [r7, #8]
 80097a8:	4313      	orrs	r3, r2
 80097aa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	681b      	ldr	r3, [r3, #0]
 80097b0:	68ba      	ldr	r2, [r7, #8]
 80097b2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	2201      	movs	r2, #1
 80097b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	2200      	movs	r2, #0
 80097c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80097c4:	2300      	movs	r3, #0
}
 80097c6:	4618      	mov	r0, r3
 80097c8:	3710      	adds	r7, #16
 80097ca:	46bd      	mov	sp, r7
 80097cc:	bd80      	pop	{r7, pc}
 80097ce:	bf00      	nop
 80097d0:	40010000 	.word	0x40010000
 80097d4:	40000400 	.word	0x40000400
 80097d8:	40000800 	.word	0x40000800
 80097dc:	40000c00 	.word	0x40000c00
 80097e0:	0800ff68 	.word	0x0800ff68
 80097e4:	40014000 	.word	0x40014000

080097e8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80097e8:	b084      	sub	sp, #16
 80097ea:	b580      	push	{r7, lr}
 80097ec:	b084      	sub	sp, #16
 80097ee:	af00      	add	r7, sp, #0
 80097f0:	6078      	str	r0, [r7, #4]
 80097f2:	f107 001c 	add.w	r0, r7, #28
 80097f6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80097fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097fc:	2b01      	cmp	r3, #1
 80097fe:	d122      	bne.n	8009846 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009804:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	68db      	ldr	r3, [r3, #12]
 8009810:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8009814:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009818:	687a      	ldr	r2, [r7, #4]
 800981a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	68db      	ldr	r3, [r3, #12]
 8009820:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8009828:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800982a:	2b01      	cmp	r3, #1
 800982c:	d105      	bne.n	800983a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	68db      	ldr	r3, [r3, #12]
 8009832:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800983a:	6878      	ldr	r0, [r7, #4]
 800983c:	f001 fac6 	bl	800adcc <USB_CoreReset>
 8009840:	4603      	mov	r3, r0
 8009842:	73fb      	strb	r3, [r7, #15]
 8009844:	e01a      	b.n	800987c <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	68db      	ldr	r3, [r3, #12]
 800984a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8009852:	6878      	ldr	r0, [r7, #4]
 8009854:	f001 faba 	bl	800adcc <USB_CoreReset>
 8009858:	4603      	mov	r3, r0
 800985a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800985c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800985e:	2b00      	cmp	r3, #0
 8009860:	d106      	bne.n	8009870 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009866:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	639a      	str	r2, [r3, #56]	; 0x38
 800986e:	e005      	b.n	800987c <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009874:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800987c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800987e:	2b01      	cmp	r3, #1
 8009880:	d10b      	bne.n	800989a <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	689b      	ldr	r3, [r3, #8]
 8009886:	f043 0206 	orr.w	r2, r3, #6
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	689b      	ldr	r3, [r3, #8]
 8009892:	f043 0220 	orr.w	r2, r3, #32
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800989a:	7bfb      	ldrb	r3, [r7, #15]
}
 800989c:	4618      	mov	r0, r3
 800989e:	3710      	adds	r7, #16
 80098a0:	46bd      	mov	sp, r7
 80098a2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80098a6:	b004      	add	sp, #16
 80098a8:	4770      	bx	lr
	...

080098ac <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80098ac:	b480      	push	{r7}
 80098ae:	b087      	sub	sp, #28
 80098b0:	af00      	add	r7, sp, #0
 80098b2:	60f8      	str	r0, [r7, #12]
 80098b4:	60b9      	str	r1, [r7, #8]
 80098b6:	4613      	mov	r3, r2
 80098b8:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80098ba:	79fb      	ldrb	r3, [r7, #7]
 80098bc:	2b02      	cmp	r3, #2
 80098be:	d165      	bne.n	800998c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80098c0:	68bb      	ldr	r3, [r7, #8]
 80098c2:	4a41      	ldr	r2, [pc, #260]	; (80099c8 <USB_SetTurnaroundTime+0x11c>)
 80098c4:	4293      	cmp	r3, r2
 80098c6:	d906      	bls.n	80098d6 <USB_SetTurnaroundTime+0x2a>
 80098c8:	68bb      	ldr	r3, [r7, #8]
 80098ca:	4a40      	ldr	r2, [pc, #256]	; (80099cc <USB_SetTurnaroundTime+0x120>)
 80098cc:	4293      	cmp	r3, r2
 80098ce:	d802      	bhi.n	80098d6 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80098d0:	230f      	movs	r3, #15
 80098d2:	617b      	str	r3, [r7, #20]
 80098d4:	e062      	b.n	800999c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80098d6:	68bb      	ldr	r3, [r7, #8]
 80098d8:	4a3c      	ldr	r2, [pc, #240]	; (80099cc <USB_SetTurnaroundTime+0x120>)
 80098da:	4293      	cmp	r3, r2
 80098dc:	d906      	bls.n	80098ec <USB_SetTurnaroundTime+0x40>
 80098de:	68bb      	ldr	r3, [r7, #8]
 80098e0:	4a3b      	ldr	r2, [pc, #236]	; (80099d0 <USB_SetTurnaroundTime+0x124>)
 80098e2:	4293      	cmp	r3, r2
 80098e4:	d802      	bhi.n	80098ec <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80098e6:	230e      	movs	r3, #14
 80098e8:	617b      	str	r3, [r7, #20]
 80098ea:	e057      	b.n	800999c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80098ec:	68bb      	ldr	r3, [r7, #8]
 80098ee:	4a38      	ldr	r2, [pc, #224]	; (80099d0 <USB_SetTurnaroundTime+0x124>)
 80098f0:	4293      	cmp	r3, r2
 80098f2:	d906      	bls.n	8009902 <USB_SetTurnaroundTime+0x56>
 80098f4:	68bb      	ldr	r3, [r7, #8]
 80098f6:	4a37      	ldr	r2, [pc, #220]	; (80099d4 <USB_SetTurnaroundTime+0x128>)
 80098f8:	4293      	cmp	r3, r2
 80098fa:	d802      	bhi.n	8009902 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80098fc:	230d      	movs	r3, #13
 80098fe:	617b      	str	r3, [r7, #20]
 8009900:	e04c      	b.n	800999c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8009902:	68bb      	ldr	r3, [r7, #8]
 8009904:	4a33      	ldr	r2, [pc, #204]	; (80099d4 <USB_SetTurnaroundTime+0x128>)
 8009906:	4293      	cmp	r3, r2
 8009908:	d906      	bls.n	8009918 <USB_SetTurnaroundTime+0x6c>
 800990a:	68bb      	ldr	r3, [r7, #8]
 800990c:	4a32      	ldr	r2, [pc, #200]	; (80099d8 <USB_SetTurnaroundTime+0x12c>)
 800990e:	4293      	cmp	r3, r2
 8009910:	d802      	bhi.n	8009918 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8009912:	230c      	movs	r3, #12
 8009914:	617b      	str	r3, [r7, #20]
 8009916:	e041      	b.n	800999c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8009918:	68bb      	ldr	r3, [r7, #8]
 800991a:	4a2f      	ldr	r2, [pc, #188]	; (80099d8 <USB_SetTurnaroundTime+0x12c>)
 800991c:	4293      	cmp	r3, r2
 800991e:	d906      	bls.n	800992e <USB_SetTurnaroundTime+0x82>
 8009920:	68bb      	ldr	r3, [r7, #8]
 8009922:	4a2e      	ldr	r2, [pc, #184]	; (80099dc <USB_SetTurnaroundTime+0x130>)
 8009924:	4293      	cmp	r3, r2
 8009926:	d802      	bhi.n	800992e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8009928:	230b      	movs	r3, #11
 800992a:	617b      	str	r3, [r7, #20]
 800992c:	e036      	b.n	800999c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800992e:	68bb      	ldr	r3, [r7, #8]
 8009930:	4a2a      	ldr	r2, [pc, #168]	; (80099dc <USB_SetTurnaroundTime+0x130>)
 8009932:	4293      	cmp	r3, r2
 8009934:	d906      	bls.n	8009944 <USB_SetTurnaroundTime+0x98>
 8009936:	68bb      	ldr	r3, [r7, #8]
 8009938:	4a29      	ldr	r2, [pc, #164]	; (80099e0 <USB_SetTurnaroundTime+0x134>)
 800993a:	4293      	cmp	r3, r2
 800993c:	d802      	bhi.n	8009944 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800993e:	230a      	movs	r3, #10
 8009940:	617b      	str	r3, [r7, #20]
 8009942:	e02b      	b.n	800999c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8009944:	68bb      	ldr	r3, [r7, #8]
 8009946:	4a26      	ldr	r2, [pc, #152]	; (80099e0 <USB_SetTurnaroundTime+0x134>)
 8009948:	4293      	cmp	r3, r2
 800994a:	d906      	bls.n	800995a <USB_SetTurnaroundTime+0xae>
 800994c:	68bb      	ldr	r3, [r7, #8]
 800994e:	4a25      	ldr	r2, [pc, #148]	; (80099e4 <USB_SetTurnaroundTime+0x138>)
 8009950:	4293      	cmp	r3, r2
 8009952:	d802      	bhi.n	800995a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8009954:	2309      	movs	r3, #9
 8009956:	617b      	str	r3, [r7, #20]
 8009958:	e020      	b.n	800999c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800995a:	68bb      	ldr	r3, [r7, #8]
 800995c:	4a21      	ldr	r2, [pc, #132]	; (80099e4 <USB_SetTurnaroundTime+0x138>)
 800995e:	4293      	cmp	r3, r2
 8009960:	d906      	bls.n	8009970 <USB_SetTurnaroundTime+0xc4>
 8009962:	68bb      	ldr	r3, [r7, #8]
 8009964:	4a20      	ldr	r2, [pc, #128]	; (80099e8 <USB_SetTurnaroundTime+0x13c>)
 8009966:	4293      	cmp	r3, r2
 8009968:	d802      	bhi.n	8009970 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800996a:	2308      	movs	r3, #8
 800996c:	617b      	str	r3, [r7, #20]
 800996e:	e015      	b.n	800999c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8009970:	68bb      	ldr	r3, [r7, #8]
 8009972:	4a1d      	ldr	r2, [pc, #116]	; (80099e8 <USB_SetTurnaroundTime+0x13c>)
 8009974:	4293      	cmp	r3, r2
 8009976:	d906      	bls.n	8009986 <USB_SetTurnaroundTime+0xda>
 8009978:	68bb      	ldr	r3, [r7, #8]
 800997a:	4a1c      	ldr	r2, [pc, #112]	; (80099ec <USB_SetTurnaroundTime+0x140>)
 800997c:	4293      	cmp	r3, r2
 800997e:	d802      	bhi.n	8009986 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8009980:	2307      	movs	r3, #7
 8009982:	617b      	str	r3, [r7, #20]
 8009984:	e00a      	b.n	800999c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8009986:	2306      	movs	r3, #6
 8009988:	617b      	str	r3, [r7, #20]
 800998a:	e007      	b.n	800999c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800998c:	79fb      	ldrb	r3, [r7, #7]
 800998e:	2b00      	cmp	r3, #0
 8009990:	d102      	bne.n	8009998 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8009992:	2309      	movs	r3, #9
 8009994:	617b      	str	r3, [r7, #20]
 8009996:	e001      	b.n	800999c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8009998:	2309      	movs	r3, #9
 800999a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800999c:	68fb      	ldr	r3, [r7, #12]
 800999e:	68db      	ldr	r3, [r3, #12]
 80099a0:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 80099a4:	68fb      	ldr	r3, [r7, #12]
 80099a6:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80099a8:	68fb      	ldr	r3, [r7, #12]
 80099aa:	68da      	ldr	r2, [r3, #12]
 80099ac:	697b      	ldr	r3, [r7, #20]
 80099ae:	029b      	lsls	r3, r3, #10
 80099b0:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 80099b4:	431a      	orrs	r2, r3
 80099b6:	68fb      	ldr	r3, [r7, #12]
 80099b8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80099ba:	2300      	movs	r3, #0
}
 80099bc:	4618      	mov	r0, r3
 80099be:	371c      	adds	r7, #28
 80099c0:	46bd      	mov	sp, r7
 80099c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099c6:	4770      	bx	lr
 80099c8:	00d8acbf 	.word	0x00d8acbf
 80099cc:	00e4e1bf 	.word	0x00e4e1bf
 80099d0:	00f423ff 	.word	0x00f423ff
 80099d4:	0106737f 	.word	0x0106737f
 80099d8:	011a499f 	.word	0x011a499f
 80099dc:	01312cff 	.word	0x01312cff
 80099e0:	014ca43f 	.word	0x014ca43f
 80099e4:	016e35ff 	.word	0x016e35ff
 80099e8:	01a6ab1f 	.word	0x01a6ab1f
 80099ec:	01e847ff 	.word	0x01e847ff

080099f0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80099f0:	b480      	push	{r7}
 80099f2:	b083      	sub	sp, #12
 80099f4:	af00      	add	r7, sp, #0
 80099f6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	689b      	ldr	r3, [r3, #8]
 80099fc:	f043 0201 	orr.w	r2, r3, #1
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8009a04:	2300      	movs	r3, #0
}
 8009a06:	4618      	mov	r0, r3
 8009a08:	370c      	adds	r7, #12
 8009a0a:	46bd      	mov	sp, r7
 8009a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a10:	4770      	bx	lr

08009a12 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8009a12:	b480      	push	{r7}
 8009a14:	b083      	sub	sp, #12
 8009a16:	af00      	add	r7, sp, #0
 8009a18:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	689b      	ldr	r3, [r3, #8]
 8009a1e:	f023 0201 	bic.w	r2, r3, #1
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8009a26:	2300      	movs	r3, #0
}
 8009a28:	4618      	mov	r0, r3
 8009a2a:	370c      	adds	r7, #12
 8009a2c:	46bd      	mov	sp, r7
 8009a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a32:	4770      	bx	lr

08009a34 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8009a34:	b580      	push	{r7, lr}
 8009a36:	b082      	sub	sp, #8
 8009a38:	af00      	add	r7, sp, #0
 8009a3a:	6078      	str	r0, [r7, #4]
 8009a3c:	460b      	mov	r3, r1
 8009a3e:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	68db      	ldr	r3, [r3, #12]
 8009a44:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8009a4c:	78fb      	ldrb	r3, [r7, #3]
 8009a4e:	2b01      	cmp	r3, #1
 8009a50:	d106      	bne.n	8009a60 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	68db      	ldr	r3, [r3, #12]
 8009a56:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	60da      	str	r2, [r3, #12]
 8009a5e:	e00b      	b.n	8009a78 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8009a60:	78fb      	ldrb	r3, [r7, #3]
 8009a62:	2b00      	cmp	r3, #0
 8009a64:	d106      	bne.n	8009a74 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	68db      	ldr	r3, [r3, #12]
 8009a6a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	60da      	str	r2, [r3, #12]
 8009a72:	e001      	b.n	8009a78 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8009a74:	2301      	movs	r3, #1
 8009a76:	e003      	b.n	8009a80 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8009a78:	2032      	movs	r0, #50	; 0x32
 8009a7a:	f7f9 f817 	bl	8002aac <HAL_Delay>

  return HAL_OK;
 8009a7e:	2300      	movs	r3, #0
}
 8009a80:	4618      	mov	r0, r3
 8009a82:	3708      	adds	r7, #8
 8009a84:	46bd      	mov	sp, r7
 8009a86:	bd80      	pop	{r7, pc}

08009a88 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009a88:	b084      	sub	sp, #16
 8009a8a:	b580      	push	{r7, lr}
 8009a8c:	b086      	sub	sp, #24
 8009a8e:	af00      	add	r7, sp, #0
 8009a90:	6078      	str	r0, [r7, #4]
 8009a92:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8009a96:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8009a9a:	2300      	movs	r3, #0
 8009a9c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8009aa2:	2300      	movs	r3, #0
 8009aa4:	613b      	str	r3, [r7, #16]
 8009aa6:	e009      	b.n	8009abc <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8009aa8:	687a      	ldr	r2, [r7, #4]
 8009aaa:	693b      	ldr	r3, [r7, #16]
 8009aac:	3340      	adds	r3, #64	; 0x40
 8009aae:	009b      	lsls	r3, r3, #2
 8009ab0:	4413      	add	r3, r2
 8009ab2:	2200      	movs	r2, #0
 8009ab4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8009ab6:	693b      	ldr	r3, [r7, #16]
 8009ab8:	3301      	adds	r3, #1
 8009aba:	613b      	str	r3, [r7, #16]
 8009abc:	693b      	ldr	r3, [r7, #16]
 8009abe:	2b0e      	cmp	r3, #14
 8009ac0:	d9f2      	bls.n	8009aa8 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8009ac2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009ac4:	2b00      	cmp	r3, #0
 8009ac6:	d11c      	bne.n	8009b02 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8009ac8:	68fb      	ldr	r3, [r7, #12]
 8009aca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009ace:	685b      	ldr	r3, [r3, #4]
 8009ad0:	68fa      	ldr	r2, [r7, #12]
 8009ad2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009ad6:	f043 0302 	orr.w	r3, r3, #2
 8009ada:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ae0:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009aec:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009af8:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	639a      	str	r2, [r3, #56]	; 0x38
 8009b00:	e00b      	b.n	8009b1a <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b06:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b12:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8009b1a:	68fb      	ldr	r3, [r7, #12]
 8009b1c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009b20:	461a      	mov	r2, r3
 8009b22:	2300      	movs	r3, #0
 8009b24:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8009b26:	68fb      	ldr	r3, [r7, #12]
 8009b28:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009b2c:	4619      	mov	r1, r3
 8009b2e:	68fb      	ldr	r3, [r7, #12]
 8009b30:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009b34:	461a      	mov	r2, r3
 8009b36:	680b      	ldr	r3, [r1, #0]
 8009b38:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8009b3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b3c:	2b01      	cmp	r3, #1
 8009b3e:	d10c      	bne.n	8009b5a <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8009b40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b42:	2b00      	cmp	r3, #0
 8009b44:	d104      	bne.n	8009b50 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8009b46:	2100      	movs	r1, #0
 8009b48:	6878      	ldr	r0, [r7, #4]
 8009b4a:	f000 f949 	bl	8009de0 <USB_SetDevSpeed>
 8009b4e:	e008      	b.n	8009b62 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8009b50:	2101      	movs	r1, #1
 8009b52:	6878      	ldr	r0, [r7, #4]
 8009b54:	f000 f944 	bl	8009de0 <USB_SetDevSpeed>
 8009b58:	e003      	b.n	8009b62 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8009b5a:	2103      	movs	r1, #3
 8009b5c:	6878      	ldr	r0, [r7, #4]
 8009b5e:	f000 f93f 	bl	8009de0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8009b62:	2110      	movs	r1, #16
 8009b64:	6878      	ldr	r0, [r7, #4]
 8009b66:	f000 f8f3 	bl	8009d50 <USB_FlushTxFifo>
 8009b6a:	4603      	mov	r3, r0
 8009b6c:	2b00      	cmp	r3, #0
 8009b6e:	d001      	beq.n	8009b74 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8009b70:	2301      	movs	r3, #1
 8009b72:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8009b74:	6878      	ldr	r0, [r7, #4]
 8009b76:	f000 f911 	bl	8009d9c <USB_FlushRxFifo>
 8009b7a:	4603      	mov	r3, r0
 8009b7c:	2b00      	cmp	r3, #0
 8009b7e:	d001      	beq.n	8009b84 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8009b80:	2301      	movs	r3, #1
 8009b82:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8009b84:	68fb      	ldr	r3, [r7, #12]
 8009b86:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009b8a:	461a      	mov	r2, r3
 8009b8c:	2300      	movs	r3, #0
 8009b8e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8009b90:	68fb      	ldr	r3, [r7, #12]
 8009b92:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009b96:	461a      	mov	r2, r3
 8009b98:	2300      	movs	r3, #0
 8009b9a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8009b9c:	68fb      	ldr	r3, [r7, #12]
 8009b9e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009ba2:	461a      	mov	r2, r3
 8009ba4:	2300      	movs	r3, #0
 8009ba6:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009ba8:	2300      	movs	r3, #0
 8009baa:	613b      	str	r3, [r7, #16]
 8009bac:	e043      	b.n	8009c36 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009bae:	693b      	ldr	r3, [r7, #16]
 8009bb0:	015a      	lsls	r2, r3, #5
 8009bb2:	68fb      	ldr	r3, [r7, #12]
 8009bb4:	4413      	add	r3, r2
 8009bb6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009bba:	681b      	ldr	r3, [r3, #0]
 8009bbc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009bc0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009bc4:	d118      	bne.n	8009bf8 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8009bc6:	693b      	ldr	r3, [r7, #16]
 8009bc8:	2b00      	cmp	r3, #0
 8009bca:	d10a      	bne.n	8009be2 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8009bcc:	693b      	ldr	r3, [r7, #16]
 8009bce:	015a      	lsls	r2, r3, #5
 8009bd0:	68fb      	ldr	r3, [r7, #12]
 8009bd2:	4413      	add	r3, r2
 8009bd4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009bd8:	461a      	mov	r2, r3
 8009bda:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8009bde:	6013      	str	r3, [r2, #0]
 8009be0:	e013      	b.n	8009c0a <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8009be2:	693b      	ldr	r3, [r7, #16]
 8009be4:	015a      	lsls	r2, r3, #5
 8009be6:	68fb      	ldr	r3, [r7, #12]
 8009be8:	4413      	add	r3, r2
 8009bea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009bee:	461a      	mov	r2, r3
 8009bf0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8009bf4:	6013      	str	r3, [r2, #0]
 8009bf6:	e008      	b.n	8009c0a <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8009bf8:	693b      	ldr	r3, [r7, #16]
 8009bfa:	015a      	lsls	r2, r3, #5
 8009bfc:	68fb      	ldr	r3, [r7, #12]
 8009bfe:	4413      	add	r3, r2
 8009c00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009c04:	461a      	mov	r2, r3
 8009c06:	2300      	movs	r3, #0
 8009c08:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8009c0a:	693b      	ldr	r3, [r7, #16]
 8009c0c:	015a      	lsls	r2, r3, #5
 8009c0e:	68fb      	ldr	r3, [r7, #12]
 8009c10:	4413      	add	r3, r2
 8009c12:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009c16:	461a      	mov	r2, r3
 8009c18:	2300      	movs	r3, #0
 8009c1a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8009c1c:	693b      	ldr	r3, [r7, #16]
 8009c1e:	015a      	lsls	r2, r3, #5
 8009c20:	68fb      	ldr	r3, [r7, #12]
 8009c22:	4413      	add	r3, r2
 8009c24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009c28:	461a      	mov	r2, r3
 8009c2a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8009c2e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009c30:	693b      	ldr	r3, [r7, #16]
 8009c32:	3301      	adds	r3, #1
 8009c34:	613b      	str	r3, [r7, #16]
 8009c36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c38:	693a      	ldr	r2, [r7, #16]
 8009c3a:	429a      	cmp	r2, r3
 8009c3c:	d3b7      	bcc.n	8009bae <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009c3e:	2300      	movs	r3, #0
 8009c40:	613b      	str	r3, [r7, #16]
 8009c42:	e043      	b.n	8009ccc <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009c44:	693b      	ldr	r3, [r7, #16]
 8009c46:	015a      	lsls	r2, r3, #5
 8009c48:	68fb      	ldr	r3, [r7, #12]
 8009c4a:	4413      	add	r3, r2
 8009c4c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009c50:	681b      	ldr	r3, [r3, #0]
 8009c52:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009c56:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009c5a:	d118      	bne.n	8009c8e <USB_DevInit+0x206>
    {
      if (i == 0U)
 8009c5c:	693b      	ldr	r3, [r7, #16]
 8009c5e:	2b00      	cmp	r3, #0
 8009c60:	d10a      	bne.n	8009c78 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8009c62:	693b      	ldr	r3, [r7, #16]
 8009c64:	015a      	lsls	r2, r3, #5
 8009c66:	68fb      	ldr	r3, [r7, #12]
 8009c68:	4413      	add	r3, r2
 8009c6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009c6e:	461a      	mov	r2, r3
 8009c70:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8009c74:	6013      	str	r3, [r2, #0]
 8009c76:	e013      	b.n	8009ca0 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8009c78:	693b      	ldr	r3, [r7, #16]
 8009c7a:	015a      	lsls	r2, r3, #5
 8009c7c:	68fb      	ldr	r3, [r7, #12]
 8009c7e:	4413      	add	r3, r2
 8009c80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009c84:	461a      	mov	r2, r3
 8009c86:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8009c8a:	6013      	str	r3, [r2, #0]
 8009c8c:	e008      	b.n	8009ca0 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8009c8e:	693b      	ldr	r3, [r7, #16]
 8009c90:	015a      	lsls	r2, r3, #5
 8009c92:	68fb      	ldr	r3, [r7, #12]
 8009c94:	4413      	add	r3, r2
 8009c96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009c9a:	461a      	mov	r2, r3
 8009c9c:	2300      	movs	r3, #0
 8009c9e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8009ca0:	693b      	ldr	r3, [r7, #16]
 8009ca2:	015a      	lsls	r2, r3, #5
 8009ca4:	68fb      	ldr	r3, [r7, #12]
 8009ca6:	4413      	add	r3, r2
 8009ca8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009cac:	461a      	mov	r2, r3
 8009cae:	2300      	movs	r3, #0
 8009cb0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8009cb2:	693b      	ldr	r3, [r7, #16]
 8009cb4:	015a      	lsls	r2, r3, #5
 8009cb6:	68fb      	ldr	r3, [r7, #12]
 8009cb8:	4413      	add	r3, r2
 8009cba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009cbe:	461a      	mov	r2, r3
 8009cc0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8009cc4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009cc6:	693b      	ldr	r3, [r7, #16]
 8009cc8:	3301      	adds	r3, #1
 8009cca:	613b      	str	r3, [r7, #16]
 8009ccc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cce:	693a      	ldr	r2, [r7, #16]
 8009cd0:	429a      	cmp	r2, r3
 8009cd2:	d3b7      	bcc.n	8009c44 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8009cd4:	68fb      	ldr	r3, [r7, #12]
 8009cd6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009cda:	691b      	ldr	r3, [r3, #16]
 8009cdc:	68fa      	ldr	r2, [r7, #12]
 8009cde:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009ce2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009ce6:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	2200      	movs	r2, #0
 8009cec:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8009cf4:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8009cf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009cf8:	2b00      	cmp	r3, #0
 8009cfa:	d105      	bne.n	8009d08 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	699b      	ldr	r3, [r3, #24]
 8009d00:	f043 0210 	orr.w	r2, r3, #16
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	699a      	ldr	r2, [r3, #24]
 8009d0c:	4b0f      	ldr	r3, [pc, #60]	; (8009d4c <USB_DevInit+0x2c4>)
 8009d0e:	4313      	orrs	r3, r2
 8009d10:	687a      	ldr	r2, [r7, #4]
 8009d12:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8009d14:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009d16:	2b00      	cmp	r3, #0
 8009d18:	d005      	beq.n	8009d26 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	699b      	ldr	r3, [r3, #24]
 8009d1e:	f043 0208 	orr.w	r2, r3, #8
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8009d26:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009d28:	2b01      	cmp	r3, #1
 8009d2a:	d107      	bne.n	8009d3c <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	699b      	ldr	r3, [r3, #24]
 8009d30:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009d34:	f043 0304 	orr.w	r3, r3, #4
 8009d38:	687a      	ldr	r2, [r7, #4]
 8009d3a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8009d3c:	7dfb      	ldrb	r3, [r7, #23]
}
 8009d3e:	4618      	mov	r0, r3
 8009d40:	3718      	adds	r7, #24
 8009d42:	46bd      	mov	sp, r7
 8009d44:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009d48:	b004      	add	sp, #16
 8009d4a:	4770      	bx	lr
 8009d4c:	803c3800 	.word	0x803c3800

08009d50 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8009d50:	b480      	push	{r7}
 8009d52:	b085      	sub	sp, #20
 8009d54:	af00      	add	r7, sp, #0
 8009d56:	6078      	str	r0, [r7, #4]
 8009d58:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8009d5a:	2300      	movs	r3, #0
 8009d5c:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8009d5e:	683b      	ldr	r3, [r7, #0]
 8009d60:	019b      	lsls	r3, r3, #6
 8009d62:	f043 0220 	orr.w	r2, r3, #32
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8009d6a:	68fb      	ldr	r3, [r7, #12]
 8009d6c:	3301      	adds	r3, #1
 8009d6e:	60fb      	str	r3, [r7, #12]
 8009d70:	68fb      	ldr	r3, [r7, #12]
 8009d72:	4a09      	ldr	r2, [pc, #36]	; (8009d98 <USB_FlushTxFifo+0x48>)
 8009d74:	4293      	cmp	r3, r2
 8009d76:	d901      	bls.n	8009d7c <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8009d78:	2303      	movs	r3, #3
 8009d7a:	e006      	b.n	8009d8a <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	691b      	ldr	r3, [r3, #16]
 8009d80:	f003 0320 	and.w	r3, r3, #32
 8009d84:	2b20      	cmp	r3, #32
 8009d86:	d0f0      	beq.n	8009d6a <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8009d88:	2300      	movs	r3, #0
}
 8009d8a:	4618      	mov	r0, r3
 8009d8c:	3714      	adds	r7, #20
 8009d8e:	46bd      	mov	sp, r7
 8009d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d94:	4770      	bx	lr
 8009d96:	bf00      	nop
 8009d98:	00030d40 	.word	0x00030d40

08009d9c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8009d9c:	b480      	push	{r7}
 8009d9e:	b085      	sub	sp, #20
 8009da0:	af00      	add	r7, sp, #0
 8009da2:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8009da4:	2300      	movs	r3, #0
 8009da6:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	2210      	movs	r2, #16
 8009dac:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8009dae:	68fb      	ldr	r3, [r7, #12]
 8009db0:	3301      	adds	r3, #1
 8009db2:	60fb      	str	r3, [r7, #12]
 8009db4:	68fb      	ldr	r3, [r7, #12]
 8009db6:	4a09      	ldr	r2, [pc, #36]	; (8009ddc <USB_FlushRxFifo+0x40>)
 8009db8:	4293      	cmp	r3, r2
 8009dba:	d901      	bls.n	8009dc0 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8009dbc:	2303      	movs	r3, #3
 8009dbe:	e006      	b.n	8009dce <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	691b      	ldr	r3, [r3, #16]
 8009dc4:	f003 0310 	and.w	r3, r3, #16
 8009dc8:	2b10      	cmp	r3, #16
 8009dca:	d0f0      	beq.n	8009dae <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8009dcc:	2300      	movs	r3, #0
}
 8009dce:	4618      	mov	r0, r3
 8009dd0:	3714      	adds	r7, #20
 8009dd2:	46bd      	mov	sp, r7
 8009dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dd8:	4770      	bx	lr
 8009dda:	bf00      	nop
 8009ddc:	00030d40 	.word	0x00030d40

08009de0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8009de0:	b480      	push	{r7}
 8009de2:	b085      	sub	sp, #20
 8009de4:	af00      	add	r7, sp, #0
 8009de6:	6078      	str	r0, [r7, #4]
 8009de8:	460b      	mov	r3, r1
 8009dea:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8009df0:	68fb      	ldr	r3, [r7, #12]
 8009df2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009df6:	681a      	ldr	r2, [r3, #0]
 8009df8:	78fb      	ldrb	r3, [r7, #3]
 8009dfa:	68f9      	ldr	r1, [r7, #12]
 8009dfc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009e00:	4313      	orrs	r3, r2
 8009e02:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8009e04:	2300      	movs	r3, #0
}
 8009e06:	4618      	mov	r0, r3
 8009e08:	3714      	adds	r7, #20
 8009e0a:	46bd      	mov	sp, r7
 8009e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e10:	4770      	bx	lr

08009e12 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8009e12:	b480      	push	{r7}
 8009e14:	b087      	sub	sp, #28
 8009e16:	af00      	add	r7, sp, #0
 8009e18:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8009e1e:	693b      	ldr	r3, [r7, #16]
 8009e20:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009e24:	689b      	ldr	r3, [r3, #8]
 8009e26:	f003 0306 	and.w	r3, r3, #6
 8009e2a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8009e2c:	68fb      	ldr	r3, [r7, #12]
 8009e2e:	2b00      	cmp	r3, #0
 8009e30:	d102      	bne.n	8009e38 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8009e32:	2300      	movs	r3, #0
 8009e34:	75fb      	strb	r3, [r7, #23]
 8009e36:	e00a      	b.n	8009e4e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8009e38:	68fb      	ldr	r3, [r7, #12]
 8009e3a:	2b02      	cmp	r3, #2
 8009e3c:	d002      	beq.n	8009e44 <USB_GetDevSpeed+0x32>
 8009e3e:	68fb      	ldr	r3, [r7, #12]
 8009e40:	2b06      	cmp	r3, #6
 8009e42:	d102      	bne.n	8009e4a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8009e44:	2302      	movs	r3, #2
 8009e46:	75fb      	strb	r3, [r7, #23]
 8009e48:	e001      	b.n	8009e4e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8009e4a:	230f      	movs	r3, #15
 8009e4c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8009e4e:	7dfb      	ldrb	r3, [r7, #23]
}
 8009e50:	4618      	mov	r0, r3
 8009e52:	371c      	adds	r7, #28
 8009e54:	46bd      	mov	sp, r7
 8009e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e5a:	4770      	bx	lr

08009e5c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009e5c:	b480      	push	{r7}
 8009e5e:	b085      	sub	sp, #20
 8009e60:	af00      	add	r7, sp, #0
 8009e62:	6078      	str	r0, [r7, #4]
 8009e64:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009e6a:	683b      	ldr	r3, [r7, #0]
 8009e6c:	781b      	ldrb	r3, [r3, #0]
 8009e6e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009e70:	683b      	ldr	r3, [r7, #0]
 8009e72:	785b      	ldrb	r3, [r3, #1]
 8009e74:	2b01      	cmp	r3, #1
 8009e76:	d13a      	bne.n	8009eee <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8009e78:	68fb      	ldr	r3, [r7, #12]
 8009e7a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009e7e:	69da      	ldr	r2, [r3, #28]
 8009e80:	683b      	ldr	r3, [r7, #0]
 8009e82:	781b      	ldrb	r3, [r3, #0]
 8009e84:	f003 030f 	and.w	r3, r3, #15
 8009e88:	2101      	movs	r1, #1
 8009e8a:	fa01 f303 	lsl.w	r3, r1, r3
 8009e8e:	b29b      	uxth	r3, r3
 8009e90:	68f9      	ldr	r1, [r7, #12]
 8009e92:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009e96:	4313      	orrs	r3, r2
 8009e98:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8009e9a:	68bb      	ldr	r3, [r7, #8]
 8009e9c:	015a      	lsls	r2, r3, #5
 8009e9e:	68fb      	ldr	r3, [r7, #12]
 8009ea0:	4413      	add	r3, r2
 8009ea2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009ea6:	681b      	ldr	r3, [r3, #0]
 8009ea8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009eac:	2b00      	cmp	r3, #0
 8009eae:	d155      	bne.n	8009f5c <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009eb0:	68bb      	ldr	r3, [r7, #8]
 8009eb2:	015a      	lsls	r2, r3, #5
 8009eb4:	68fb      	ldr	r3, [r7, #12]
 8009eb6:	4413      	add	r3, r2
 8009eb8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009ebc:	681a      	ldr	r2, [r3, #0]
 8009ebe:	683b      	ldr	r3, [r7, #0]
 8009ec0:	689b      	ldr	r3, [r3, #8]
 8009ec2:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8009ec6:	683b      	ldr	r3, [r7, #0]
 8009ec8:	78db      	ldrb	r3, [r3, #3]
 8009eca:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009ecc:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8009ece:	68bb      	ldr	r3, [r7, #8]
 8009ed0:	059b      	lsls	r3, r3, #22
 8009ed2:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009ed4:	4313      	orrs	r3, r2
 8009ed6:	68ba      	ldr	r2, [r7, #8]
 8009ed8:	0151      	lsls	r1, r2, #5
 8009eda:	68fa      	ldr	r2, [r7, #12]
 8009edc:	440a      	add	r2, r1
 8009ede:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009ee2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009ee6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009eea:	6013      	str	r3, [r2, #0]
 8009eec:	e036      	b.n	8009f5c <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8009eee:	68fb      	ldr	r3, [r7, #12]
 8009ef0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009ef4:	69da      	ldr	r2, [r3, #28]
 8009ef6:	683b      	ldr	r3, [r7, #0]
 8009ef8:	781b      	ldrb	r3, [r3, #0]
 8009efa:	f003 030f 	and.w	r3, r3, #15
 8009efe:	2101      	movs	r1, #1
 8009f00:	fa01 f303 	lsl.w	r3, r1, r3
 8009f04:	041b      	lsls	r3, r3, #16
 8009f06:	68f9      	ldr	r1, [r7, #12]
 8009f08:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009f0c:	4313      	orrs	r3, r2
 8009f0e:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8009f10:	68bb      	ldr	r3, [r7, #8]
 8009f12:	015a      	lsls	r2, r3, #5
 8009f14:	68fb      	ldr	r3, [r7, #12]
 8009f16:	4413      	add	r3, r2
 8009f18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009f1c:	681b      	ldr	r3, [r3, #0]
 8009f1e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009f22:	2b00      	cmp	r3, #0
 8009f24:	d11a      	bne.n	8009f5c <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8009f26:	68bb      	ldr	r3, [r7, #8]
 8009f28:	015a      	lsls	r2, r3, #5
 8009f2a:	68fb      	ldr	r3, [r7, #12]
 8009f2c:	4413      	add	r3, r2
 8009f2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009f32:	681a      	ldr	r2, [r3, #0]
 8009f34:	683b      	ldr	r3, [r7, #0]
 8009f36:	689b      	ldr	r3, [r3, #8]
 8009f38:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8009f3c:	683b      	ldr	r3, [r7, #0]
 8009f3e:	78db      	ldrb	r3, [r3, #3]
 8009f40:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8009f42:	430b      	orrs	r3, r1
 8009f44:	4313      	orrs	r3, r2
 8009f46:	68ba      	ldr	r2, [r7, #8]
 8009f48:	0151      	lsls	r1, r2, #5
 8009f4a:	68fa      	ldr	r2, [r7, #12]
 8009f4c:	440a      	add	r2, r1
 8009f4e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009f52:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009f56:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009f5a:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8009f5c:	2300      	movs	r3, #0
}
 8009f5e:	4618      	mov	r0, r3
 8009f60:	3714      	adds	r7, #20
 8009f62:	46bd      	mov	sp, r7
 8009f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f68:	4770      	bx	lr
	...

08009f6c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009f6c:	b480      	push	{r7}
 8009f6e:	b085      	sub	sp, #20
 8009f70:	af00      	add	r7, sp, #0
 8009f72:	6078      	str	r0, [r7, #4]
 8009f74:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009f7a:	683b      	ldr	r3, [r7, #0]
 8009f7c:	781b      	ldrb	r3, [r3, #0]
 8009f7e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8009f80:	683b      	ldr	r3, [r7, #0]
 8009f82:	785b      	ldrb	r3, [r3, #1]
 8009f84:	2b01      	cmp	r3, #1
 8009f86:	d161      	bne.n	800a04c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009f88:	68bb      	ldr	r3, [r7, #8]
 8009f8a:	015a      	lsls	r2, r3, #5
 8009f8c:	68fb      	ldr	r3, [r7, #12]
 8009f8e:	4413      	add	r3, r2
 8009f90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009f94:	681b      	ldr	r3, [r3, #0]
 8009f96:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009f9a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009f9e:	d11f      	bne.n	8009fe0 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8009fa0:	68bb      	ldr	r3, [r7, #8]
 8009fa2:	015a      	lsls	r2, r3, #5
 8009fa4:	68fb      	ldr	r3, [r7, #12]
 8009fa6:	4413      	add	r3, r2
 8009fa8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009fac:	681b      	ldr	r3, [r3, #0]
 8009fae:	68ba      	ldr	r2, [r7, #8]
 8009fb0:	0151      	lsls	r1, r2, #5
 8009fb2:	68fa      	ldr	r2, [r7, #12]
 8009fb4:	440a      	add	r2, r1
 8009fb6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009fba:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8009fbe:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8009fc0:	68bb      	ldr	r3, [r7, #8]
 8009fc2:	015a      	lsls	r2, r3, #5
 8009fc4:	68fb      	ldr	r3, [r7, #12]
 8009fc6:	4413      	add	r3, r2
 8009fc8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009fcc:	681b      	ldr	r3, [r3, #0]
 8009fce:	68ba      	ldr	r2, [r7, #8]
 8009fd0:	0151      	lsls	r1, r2, #5
 8009fd2:	68fa      	ldr	r2, [r7, #12]
 8009fd4:	440a      	add	r2, r1
 8009fd6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009fda:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009fde:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8009fe0:	68fb      	ldr	r3, [r7, #12]
 8009fe2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009fe6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009fe8:	683b      	ldr	r3, [r7, #0]
 8009fea:	781b      	ldrb	r3, [r3, #0]
 8009fec:	f003 030f 	and.w	r3, r3, #15
 8009ff0:	2101      	movs	r1, #1
 8009ff2:	fa01 f303 	lsl.w	r3, r1, r3
 8009ff6:	b29b      	uxth	r3, r3
 8009ff8:	43db      	mvns	r3, r3
 8009ffa:	68f9      	ldr	r1, [r7, #12]
 8009ffc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a000:	4013      	ands	r3, r2
 800a002:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800a004:	68fb      	ldr	r3, [r7, #12]
 800a006:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a00a:	69da      	ldr	r2, [r3, #28]
 800a00c:	683b      	ldr	r3, [r7, #0]
 800a00e:	781b      	ldrb	r3, [r3, #0]
 800a010:	f003 030f 	and.w	r3, r3, #15
 800a014:	2101      	movs	r1, #1
 800a016:	fa01 f303 	lsl.w	r3, r1, r3
 800a01a:	b29b      	uxth	r3, r3
 800a01c:	43db      	mvns	r3, r3
 800a01e:	68f9      	ldr	r1, [r7, #12]
 800a020:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a024:	4013      	ands	r3, r2
 800a026:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800a028:	68bb      	ldr	r3, [r7, #8]
 800a02a:	015a      	lsls	r2, r3, #5
 800a02c:	68fb      	ldr	r3, [r7, #12]
 800a02e:	4413      	add	r3, r2
 800a030:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a034:	681a      	ldr	r2, [r3, #0]
 800a036:	68bb      	ldr	r3, [r7, #8]
 800a038:	0159      	lsls	r1, r3, #5
 800a03a:	68fb      	ldr	r3, [r7, #12]
 800a03c:	440b      	add	r3, r1
 800a03e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a042:	4619      	mov	r1, r3
 800a044:	4b35      	ldr	r3, [pc, #212]	; (800a11c <USB_DeactivateEndpoint+0x1b0>)
 800a046:	4013      	ands	r3, r2
 800a048:	600b      	str	r3, [r1, #0]
 800a04a:	e060      	b.n	800a10e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a04c:	68bb      	ldr	r3, [r7, #8]
 800a04e:	015a      	lsls	r2, r3, #5
 800a050:	68fb      	ldr	r3, [r7, #12]
 800a052:	4413      	add	r3, r2
 800a054:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a058:	681b      	ldr	r3, [r3, #0]
 800a05a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a05e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a062:	d11f      	bne.n	800a0a4 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800a064:	68bb      	ldr	r3, [r7, #8]
 800a066:	015a      	lsls	r2, r3, #5
 800a068:	68fb      	ldr	r3, [r7, #12]
 800a06a:	4413      	add	r3, r2
 800a06c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a070:	681b      	ldr	r3, [r3, #0]
 800a072:	68ba      	ldr	r2, [r7, #8]
 800a074:	0151      	lsls	r1, r2, #5
 800a076:	68fa      	ldr	r2, [r7, #12]
 800a078:	440a      	add	r2, r1
 800a07a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a07e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800a082:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800a084:	68bb      	ldr	r3, [r7, #8]
 800a086:	015a      	lsls	r2, r3, #5
 800a088:	68fb      	ldr	r3, [r7, #12]
 800a08a:	4413      	add	r3, r2
 800a08c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a090:	681b      	ldr	r3, [r3, #0]
 800a092:	68ba      	ldr	r2, [r7, #8]
 800a094:	0151      	lsls	r1, r2, #5
 800a096:	68fa      	ldr	r2, [r7, #12]
 800a098:	440a      	add	r2, r1
 800a09a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a09e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a0a2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800a0a4:	68fb      	ldr	r3, [r7, #12]
 800a0a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a0aa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a0ac:	683b      	ldr	r3, [r7, #0]
 800a0ae:	781b      	ldrb	r3, [r3, #0]
 800a0b0:	f003 030f 	and.w	r3, r3, #15
 800a0b4:	2101      	movs	r1, #1
 800a0b6:	fa01 f303 	lsl.w	r3, r1, r3
 800a0ba:	041b      	lsls	r3, r3, #16
 800a0bc:	43db      	mvns	r3, r3
 800a0be:	68f9      	ldr	r1, [r7, #12]
 800a0c0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a0c4:	4013      	ands	r3, r2
 800a0c6:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800a0c8:	68fb      	ldr	r3, [r7, #12]
 800a0ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a0ce:	69da      	ldr	r2, [r3, #28]
 800a0d0:	683b      	ldr	r3, [r7, #0]
 800a0d2:	781b      	ldrb	r3, [r3, #0]
 800a0d4:	f003 030f 	and.w	r3, r3, #15
 800a0d8:	2101      	movs	r1, #1
 800a0da:	fa01 f303 	lsl.w	r3, r1, r3
 800a0de:	041b      	lsls	r3, r3, #16
 800a0e0:	43db      	mvns	r3, r3
 800a0e2:	68f9      	ldr	r1, [r7, #12]
 800a0e4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a0e8:	4013      	ands	r3, r2
 800a0ea:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800a0ec:	68bb      	ldr	r3, [r7, #8]
 800a0ee:	015a      	lsls	r2, r3, #5
 800a0f0:	68fb      	ldr	r3, [r7, #12]
 800a0f2:	4413      	add	r3, r2
 800a0f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a0f8:	681a      	ldr	r2, [r3, #0]
 800a0fa:	68bb      	ldr	r3, [r7, #8]
 800a0fc:	0159      	lsls	r1, r3, #5
 800a0fe:	68fb      	ldr	r3, [r7, #12]
 800a100:	440b      	add	r3, r1
 800a102:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a106:	4619      	mov	r1, r3
 800a108:	4b05      	ldr	r3, [pc, #20]	; (800a120 <USB_DeactivateEndpoint+0x1b4>)
 800a10a:	4013      	ands	r3, r2
 800a10c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800a10e:	2300      	movs	r3, #0
}
 800a110:	4618      	mov	r0, r3
 800a112:	3714      	adds	r7, #20
 800a114:	46bd      	mov	sp, r7
 800a116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a11a:	4770      	bx	lr
 800a11c:	ec337800 	.word	0xec337800
 800a120:	eff37800 	.word	0xeff37800

0800a124 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800a124:	b580      	push	{r7, lr}
 800a126:	b08a      	sub	sp, #40	; 0x28
 800a128:	af02      	add	r7, sp, #8
 800a12a:	60f8      	str	r0, [r7, #12]
 800a12c:	60b9      	str	r1, [r7, #8]
 800a12e:	4613      	mov	r3, r2
 800a130:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a132:	68fb      	ldr	r3, [r7, #12]
 800a134:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800a136:	68bb      	ldr	r3, [r7, #8]
 800a138:	781b      	ldrb	r3, [r3, #0]
 800a13a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800a13c:	68bb      	ldr	r3, [r7, #8]
 800a13e:	785b      	ldrb	r3, [r3, #1]
 800a140:	2b01      	cmp	r3, #1
 800a142:	f040 815c 	bne.w	800a3fe <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800a146:	68bb      	ldr	r3, [r7, #8]
 800a148:	695b      	ldr	r3, [r3, #20]
 800a14a:	2b00      	cmp	r3, #0
 800a14c:	d132      	bne.n	800a1b4 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800a14e:	69bb      	ldr	r3, [r7, #24]
 800a150:	015a      	lsls	r2, r3, #5
 800a152:	69fb      	ldr	r3, [r7, #28]
 800a154:	4413      	add	r3, r2
 800a156:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a15a:	691b      	ldr	r3, [r3, #16]
 800a15c:	69ba      	ldr	r2, [r7, #24]
 800a15e:	0151      	lsls	r1, r2, #5
 800a160:	69fa      	ldr	r2, [r7, #28]
 800a162:	440a      	add	r2, r1
 800a164:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a168:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800a16c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800a170:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800a172:	69bb      	ldr	r3, [r7, #24]
 800a174:	015a      	lsls	r2, r3, #5
 800a176:	69fb      	ldr	r3, [r7, #28]
 800a178:	4413      	add	r3, r2
 800a17a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a17e:	691b      	ldr	r3, [r3, #16]
 800a180:	69ba      	ldr	r2, [r7, #24]
 800a182:	0151      	lsls	r1, r2, #5
 800a184:	69fa      	ldr	r2, [r7, #28]
 800a186:	440a      	add	r2, r1
 800a188:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a18c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a190:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800a192:	69bb      	ldr	r3, [r7, #24]
 800a194:	015a      	lsls	r2, r3, #5
 800a196:	69fb      	ldr	r3, [r7, #28]
 800a198:	4413      	add	r3, r2
 800a19a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a19e:	691b      	ldr	r3, [r3, #16]
 800a1a0:	69ba      	ldr	r2, [r7, #24]
 800a1a2:	0151      	lsls	r1, r2, #5
 800a1a4:	69fa      	ldr	r2, [r7, #28]
 800a1a6:	440a      	add	r2, r1
 800a1a8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a1ac:	0cdb      	lsrs	r3, r3, #19
 800a1ae:	04db      	lsls	r3, r3, #19
 800a1b0:	6113      	str	r3, [r2, #16]
 800a1b2:	e074      	b.n	800a29e <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800a1b4:	69bb      	ldr	r3, [r7, #24]
 800a1b6:	015a      	lsls	r2, r3, #5
 800a1b8:	69fb      	ldr	r3, [r7, #28]
 800a1ba:	4413      	add	r3, r2
 800a1bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a1c0:	691b      	ldr	r3, [r3, #16]
 800a1c2:	69ba      	ldr	r2, [r7, #24]
 800a1c4:	0151      	lsls	r1, r2, #5
 800a1c6:	69fa      	ldr	r2, [r7, #28]
 800a1c8:	440a      	add	r2, r1
 800a1ca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a1ce:	0cdb      	lsrs	r3, r3, #19
 800a1d0:	04db      	lsls	r3, r3, #19
 800a1d2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800a1d4:	69bb      	ldr	r3, [r7, #24]
 800a1d6:	015a      	lsls	r2, r3, #5
 800a1d8:	69fb      	ldr	r3, [r7, #28]
 800a1da:	4413      	add	r3, r2
 800a1dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a1e0:	691b      	ldr	r3, [r3, #16]
 800a1e2:	69ba      	ldr	r2, [r7, #24]
 800a1e4:	0151      	lsls	r1, r2, #5
 800a1e6:	69fa      	ldr	r2, [r7, #28]
 800a1e8:	440a      	add	r2, r1
 800a1ea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a1ee:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800a1f2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800a1f6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800a1f8:	69bb      	ldr	r3, [r7, #24]
 800a1fa:	015a      	lsls	r2, r3, #5
 800a1fc:	69fb      	ldr	r3, [r7, #28]
 800a1fe:	4413      	add	r3, r2
 800a200:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a204:	691a      	ldr	r2, [r3, #16]
 800a206:	68bb      	ldr	r3, [r7, #8]
 800a208:	6959      	ldr	r1, [r3, #20]
 800a20a:	68bb      	ldr	r3, [r7, #8]
 800a20c:	689b      	ldr	r3, [r3, #8]
 800a20e:	440b      	add	r3, r1
 800a210:	1e59      	subs	r1, r3, #1
 800a212:	68bb      	ldr	r3, [r7, #8]
 800a214:	689b      	ldr	r3, [r3, #8]
 800a216:	fbb1 f3f3 	udiv	r3, r1, r3
 800a21a:	04d9      	lsls	r1, r3, #19
 800a21c:	4b9d      	ldr	r3, [pc, #628]	; (800a494 <USB_EPStartXfer+0x370>)
 800a21e:	400b      	ands	r3, r1
 800a220:	69b9      	ldr	r1, [r7, #24]
 800a222:	0148      	lsls	r0, r1, #5
 800a224:	69f9      	ldr	r1, [r7, #28]
 800a226:	4401      	add	r1, r0
 800a228:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800a22c:	4313      	orrs	r3, r2
 800a22e:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800a230:	69bb      	ldr	r3, [r7, #24]
 800a232:	015a      	lsls	r2, r3, #5
 800a234:	69fb      	ldr	r3, [r7, #28]
 800a236:	4413      	add	r3, r2
 800a238:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a23c:	691a      	ldr	r2, [r3, #16]
 800a23e:	68bb      	ldr	r3, [r7, #8]
 800a240:	695b      	ldr	r3, [r3, #20]
 800a242:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a246:	69b9      	ldr	r1, [r7, #24]
 800a248:	0148      	lsls	r0, r1, #5
 800a24a:	69f9      	ldr	r1, [r7, #28]
 800a24c:	4401      	add	r1, r0
 800a24e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800a252:	4313      	orrs	r3, r2
 800a254:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800a256:	68bb      	ldr	r3, [r7, #8]
 800a258:	78db      	ldrb	r3, [r3, #3]
 800a25a:	2b01      	cmp	r3, #1
 800a25c:	d11f      	bne.n	800a29e <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800a25e:	69bb      	ldr	r3, [r7, #24]
 800a260:	015a      	lsls	r2, r3, #5
 800a262:	69fb      	ldr	r3, [r7, #28]
 800a264:	4413      	add	r3, r2
 800a266:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a26a:	691b      	ldr	r3, [r3, #16]
 800a26c:	69ba      	ldr	r2, [r7, #24]
 800a26e:	0151      	lsls	r1, r2, #5
 800a270:	69fa      	ldr	r2, [r7, #28]
 800a272:	440a      	add	r2, r1
 800a274:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a278:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800a27c:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800a27e:	69bb      	ldr	r3, [r7, #24]
 800a280:	015a      	lsls	r2, r3, #5
 800a282:	69fb      	ldr	r3, [r7, #28]
 800a284:	4413      	add	r3, r2
 800a286:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a28a:	691b      	ldr	r3, [r3, #16]
 800a28c:	69ba      	ldr	r2, [r7, #24]
 800a28e:	0151      	lsls	r1, r2, #5
 800a290:	69fa      	ldr	r2, [r7, #28]
 800a292:	440a      	add	r2, r1
 800a294:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a298:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800a29c:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800a29e:	79fb      	ldrb	r3, [r7, #7]
 800a2a0:	2b01      	cmp	r3, #1
 800a2a2:	d14b      	bne.n	800a33c <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800a2a4:	68bb      	ldr	r3, [r7, #8]
 800a2a6:	691b      	ldr	r3, [r3, #16]
 800a2a8:	2b00      	cmp	r3, #0
 800a2aa:	d009      	beq.n	800a2c0 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800a2ac:	69bb      	ldr	r3, [r7, #24]
 800a2ae:	015a      	lsls	r2, r3, #5
 800a2b0:	69fb      	ldr	r3, [r7, #28]
 800a2b2:	4413      	add	r3, r2
 800a2b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a2b8:	461a      	mov	r2, r3
 800a2ba:	68bb      	ldr	r3, [r7, #8]
 800a2bc:	691b      	ldr	r3, [r3, #16]
 800a2be:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800a2c0:	68bb      	ldr	r3, [r7, #8]
 800a2c2:	78db      	ldrb	r3, [r3, #3]
 800a2c4:	2b01      	cmp	r3, #1
 800a2c6:	d128      	bne.n	800a31a <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800a2c8:	69fb      	ldr	r3, [r7, #28]
 800a2ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a2ce:	689b      	ldr	r3, [r3, #8]
 800a2d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a2d4:	2b00      	cmp	r3, #0
 800a2d6:	d110      	bne.n	800a2fa <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800a2d8:	69bb      	ldr	r3, [r7, #24]
 800a2da:	015a      	lsls	r2, r3, #5
 800a2dc:	69fb      	ldr	r3, [r7, #28]
 800a2de:	4413      	add	r3, r2
 800a2e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a2e4:	681b      	ldr	r3, [r3, #0]
 800a2e6:	69ba      	ldr	r2, [r7, #24]
 800a2e8:	0151      	lsls	r1, r2, #5
 800a2ea:	69fa      	ldr	r2, [r7, #28]
 800a2ec:	440a      	add	r2, r1
 800a2ee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a2f2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800a2f6:	6013      	str	r3, [r2, #0]
 800a2f8:	e00f      	b.n	800a31a <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800a2fa:	69bb      	ldr	r3, [r7, #24]
 800a2fc:	015a      	lsls	r2, r3, #5
 800a2fe:	69fb      	ldr	r3, [r7, #28]
 800a300:	4413      	add	r3, r2
 800a302:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a306:	681b      	ldr	r3, [r3, #0]
 800a308:	69ba      	ldr	r2, [r7, #24]
 800a30a:	0151      	lsls	r1, r2, #5
 800a30c:	69fa      	ldr	r2, [r7, #28]
 800a30e:	440a      	add	r2, r1
 800a310:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a314:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a318:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800a31a:	69bb      	ldr	r3, [r7, #24]
 800a31c:	015a      	lsls	r2, r3, #5
 800a31e:	69fb      	ldr	r3, [r7, #28]
 800a320:	4413      	add	r3, r2
 800a322:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a326:	681b      	ldr	r3, [r3, #0]
 800a328:	69ba      	ldr	r2, [r7, #24]
 800a32a:	0151      	lsls	r1, r2, #5
 800a32c:	69fa      	ldr	r2, [r7, #28]
 800a32e:	440a      	add	r2, r1
 800a330:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a334:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800a338:	6013      	str	r3, [r2, #0]
 800a33a:	e12f      	b.n	800a59c <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800a33c:	69bb      	ldr	r3, [r7, #24]
 800a33e:	015a      	lsls	r2, r3, #5
 800a340:	69fb      	ldr	r3, [r7, #28]
 800a342:	4413      	add	r3, r2
 800a344:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a348:	681b      	ldr	r3, [r3, #0]
 800a34a:	69ba      	ldr	r2, [r7, #24]
 800a34c:	0151      	lsls	r1, r2, #5
 800a34e:	69fa      	ldr	r2, [r7, #28]
 800a350:	440a      	add	r2, r1
 800a352:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a356:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800a35a:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800a35c:	68bb      	ldr	r3, [r7, #8]
 800a35e:	78db      	ldrb	r3, [r3, #3]
 800a360:	2b01      	cmp	r3, #1
 800a362:	d015      	beq.n	800a390 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800a364:	68bb      	ldr	r3, [r7, #8]
 800a366:	695b      	ldr	r3, [r3, #20]
 800a368:	2b00      	cmp	r3, #0
 800a36a:	f000 8117 	beq.w	800a59c <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800a36e:	69fb      	ldr	r3, [r7, #28]
 800a370:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a374:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a376:	68bb      	ldr	r3, [r7, #8]
 800a378:	781b      	ldrb	r3, [r3, #0]
 800a37a:	f003 030f 	and.w	r3, r3, #15
 800a37e:	2101      	movs	r1, #1
 800a380:	fa01 f303 	lsl.w	r3, r1, r3
 800a384:	69f9      	ldr	r1, [r7, #28]
 800a386:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a38a:	4313      	orrs	r3, r2
 800a38c:	634b      	str	r3, [r1, #52]	; 0x34
 800a38e:	e105      	b.n	800a59c <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800a390:	69fb      	ldr	r3, [r7, #28]
 800a392:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a396:	689b      	ldr	r3, [r3, #8]
 800a398:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a39c:	2b00      	cmp	r3, #0
 800a39e:	d110      	bne.n	800a3c2 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800a3a0:	69bb      	ldr	r3, [r7, #24]
 800a3a2:	015a      	lsls	r2, r3, #5
 800a3a4:	69fb      	ldr	r3, [r7, #28]
 800a3a6:	4413      	add	r3, r2
 800a3a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a3ac:	681b      	ldr	r3, [r3, #0]
 800a3ae:	69ba      	ldr	r2, [r7, #24]
 800a3b0:	0151      	lsls	r1, r2, #5
 800a3b2:	69fa      	ldr	r2, [r7, #28]
 800a3b4:	440a      	add	r2, r1
 800a3b6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a3ba:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800a3be:	6013      	str	r3, [r2, #0]
 800a3c0:	e00f      	b.n	800a3e2 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800a3c2:	69bb      	ldr	r3, [r7, #24]
 800a3c4:	015a      	lsls	r2, r3, #5
 800a3c6:	69fb      	ldr	r3, [r7, #28]
 800a3c8:	4413      	add	r3, r2
 800a3ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a3ce:	681b      	ldr	r3, [r3, #0]
 800a3d0:	69ba      	ldr	r2, [r7, #24]
 800a3d2:	0151      	lsls	r1, r2, #5
 800a3d4:	69fa      	ldr	r2, [r7, #28]
 800a3d6:	440a      	add	r2, r1
 800a3d8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a3dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a3e0:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800a3e2:	68bb      	ldr	r3, [r7, #8]
 800a3e4:	68d9      	ldr	r1, [r3, #12]
 800a3e6:	68bb      	ldr	r3, [r7, #8]
 800a3e8:	781a      	ldrb	r2, [r3, #0]
 800a3ea:	68bb      	ldr	r3, [r7, #8]
 800a3ec:	695b      	ldr	r3, [r3, #20]
 800a3ee:	b298      	uxth	r0, r3
 800a3f0:	79fb      	ldrb	r3, [r7, #7]
 800a3f2:	9300      	str	r3, [sp, #0]
 800a3f4:	4603      	mov	r3, r0
 800a3f6:	68f8      	ldr	r0, [r7, #12]
 800a3f8:	f000 fa2b 	bl	800a852 <USB_WritePacket>
 800a3fc:	e0ce      	b.n	800a59c <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800a3fe:	69bb      	ldr	r3, [r7, #24]
 800a400:	015a      	lsls	r2, r3, #5
 800a402:	69fb      	ldr	r3, [r7, #28]
 800a404:	4413      	add	r3, r2
 800a406:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a40a:	691b      	ldr	r3, [r3, #16]
 800a40c:	69ba      	ldr	r2, [r7, #24]
 800a40e:	0151      	lsls	r1, r2, #5
 800a410:	69fa      	ldr	r2, [r7, #28]
 800a412:	440a      	add	r2, r1
 800a414:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a418:	0cdb      	lsrs	r3, r3, #19
 800a41a:	04db      	lsls	r3, r3, #19
 800a41c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800a41e:	69bb      	ldr	r3, [r7, #24]
 800a420:	015a      	lsls	r2, r3, #5
 800a422:	69fb      	ldr	r3, [r7, #28]
 800a424:	4413      	add	r3, r2
 800a426:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a42a:	691b      	ldr	r3, [r3, #16]
 800a42c:	69ba      	ldr	r2, [r7, #24]
 800a42e:	0151      	lsls	r1, r2, #5
 800a430:	69fa      	ldr	r2, [r7, #28]
 800a432:	440a      	add	r2, r1
 800a434:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a438:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800a43c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800a440:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800a442:	68bb      	ldr	r3, [r7, #8]
 800a444:	695b      	ldr	r3, [r3, #20]
 800a446:	2b00      	cmp	r3, #0
 800a448:	d126      	bne.n	800a498 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800a44a:	69bb      	ldr	r3, [r7, #24]
 800a44c:	015a      	lsls	r2, r3, #5
 800a44e:	69fb      	ldr	r3, [r7, #28]
 800a450:	4413      	add	r3, r2
 800a452:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a456:	691a      	ldr	r2, [r3, #16]
 800a458:	68bb      	ldr	r3, [r7, #8]
 800a45a:	689b      	ldr	r3, [r3, #8]
 800a45c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a460:	69b9      	ldr	r1, [r7, #24]
 800a462:	0148      	lsls	r0, r1, #5
 800a464:	69f9      	ldr	r1, [r7, #28]
 800a466:	4401      	add	r1, r0
 800a468:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800a46c:	4313      	orrs	r3, r2
 800a46e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800a470:	69bb      	ldr	r3, [r7, #24]
 800a472:	015a      	lsls	r2, r3, #5
 800a474:	69fb      	ldr	r3, [r7, #28]
 800a476:	4413      	add	r3, r2
 800a478:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a47c:	691b      	ldr	r3, [r3, #16]
 800a47e:	69ba      	ldr	r2, [r7, #24]
 800a480:	0151      	lsls	r1, r2, #5
 800a482:	69fa      	ldr	r2, [r7, #28]
 800a484:	440a      	add	r2, r1
 800a486:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a48a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a48e:	6113      	str	r3, [r2, #16]
 800a490:	e036      	b.n	800a500 <USB_EPStartXfer+0x3dc>
 800a492:	bf00      	nop
 800a494:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800a498:	68bb      	ldr	r3, [r7, #8]
 800a49a:	695a      	ldr	r2, [r3, #20]
 800a49c:	68bb      	ldr	r3, [r7, #8]
 800a49e:	689b      	ldr	r3, [r3, #8]
 800a4a0:	4413      	add	r3, r2
 800a4a2:	1e5a      	subs	r2, r3, #1
 800a4a4:	68bb      	ldr	r3, [r7, #8]
 800a4a6:	689b      	ldr	r3, [r3, #8]
 800a4a8:	fbb2 f3f3 	udiv	r3, r2, r3
 800a4ac:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800a4ae:	69bb      	ldr	r3, [r7, #24]
 800a4b0:	015a      	lsls	r2, r3, #5
 800a4b2:	69fb      	ldr	r3, [r7, #28]
 800a4b4:	4413      	add	r3, r2
 800a4b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a4ba:	691a      	ldr	r2, [r3, #16]
 800a4bc:	8afb      	ldrh	r3, [r7, #22]
 800a4be:	04d9      	lsls	r1, r3, #19
 800a4c0:	4b39      	ldr	r3, [pc, #228]	; (800a5a8 <USB_EPStartXfer+0x484>)
 800a4c2:	400b      	ands	r3, r1
 800a4c4:	69b9      	ldr	r1, [r7, #24]
 800a4c6:	0148      	lsls	r0, r1, #5
 800a4c8:	69f9      	ldr	r1, [r7, #28]
 800a4ca:	4401      	add	r1, r0
 800a4cc:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800a4d0:	4313      	orrs	r3, r2
 800a4d2:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 800a4d4:	69bb      	ldr	r3, [r7, #24]
 800a4d6:	015a      	lsls	r2, r3, #5
 800a4d8:	69fb      	ldr	r3, [r7, #28]
 800a4da:	4413      	add	r3, r2
 800a4dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a4e0:	691a      	ldr	r2, [r3, #16]
 800a4e2:	68bb      	ldr	r3, [r7, #8]
 800a4e4:	689b      	ldr	r3, [r3, #8]
 800a4e6:	8af9      	ldrh	r1, [r7, #22]
 800a4e8:	fb01 f303 	mul.w	r3, r1, r3
 800a4ec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a4f0:	69b9      	ldr	r1, [r7, #24]
 800a4f2:	0148      	lsls	r0, r1, #5
 800a4f4:	69f9      	ldr	r1, [r7, #28]
 800a4f6:	4401      	add	r1, r0
 800a4f8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800a4fc:	4313      	orrs	r3, r2
 800a4fe:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800a500:	79fb      	ldrb	r3, [r7, #7]
 800a502:	2b01      	cmp	r3, #1
 800a504:	d10d      	bne.n	800a522 <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800a506:	68bb      	ldr	r3, [r7, #8]
 800a508:	68db      	ldr	r3, [r3, #12]
 800a50a:	2b00      	cmp	r3, #0
 800a50c:	d009      	beq.n	800a522 <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800a50e:	68bb      	ldr	r3, [r7, #8]
 800a510:	68d9      	ldr	r1, [r3, #12]
 800a512:	69bb      	ldr	r3, [r7, #24]
 800a514:	015a      	lsls	r2, r3, #5
 800a516:	69fb      	ldr	r3, [r7, #28]
 800a518:	4413      	add	r3, r2
 800a51a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a51e:	460a      	mov	r2, r1
 800a520:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800a522:	68bb      	ldr	r3, [r7, #8]
 800a524:	78db      	ldrb	r3, [r3, #3]
 800a526:	2b01      	cmp	r3, #1
 800a528:	d128      	bne.n	800a57c <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800a52a:	69fb      	ldr	r3, [r7, #28]
 800a52c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a530:	689b      	ldr	r3, [r3, #8]
 800a532:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a536:	2b00      	cmp	r3, #0
 800a538:	d110      	bne.n	800a55c <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800a53a:	69bb      	ldr	r3, [r7, #24]
 800a53c:	015a      	lsls	r2, r3, #5
 800a53e:	69fb      	ldr	r3, [r7, #28]
 800a540:	4413      	add	r3, r2
 800a542:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a546:	681b      	ldr	r3, [r3, #0]
 800a548:	69ba      	ldr	r2, [r7, #24]
 800a54a:	0151      	lsls	r1, r2, #5
 800a54c:	69fa      	ldr	r2, [r7, #28]
 800a54e:	440a      	add	r2, r1
 800a550:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a554:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800a558:	6013      	str	r3, [r2, #0]
 800a55a:	e00f      	b.n	800a57c <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800a55c:	69bb      	ldr	r3, [r7, #24]
 800a55e:	015a      	lsls	r2, r3, #5
 800a560:	69fb      	ldr	r3, [r7, #28]
 800a562:	4413      	add	r3, r2
 800a564:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a568:	681b      	ldr	r3, [r3, #0]
 800a56a:	69ba      	ldr	r2, [r7, #24]
 800a56c:	0151      	lsls	r1, r2, #5
 800a56e:	69fa      	ldr	r2, [r7, #28]
 800a570:	440a      	add	r2, r1
 800a572:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a576:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a57a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800a57c:	69bb      	ldr	r3, [r7, #24]
 800a57e:	015a      	lsls	r2, r3, #5
 800a580:	69fb      	ldr	r3, [r7, #28]
 800a582:	4413      	add	r3, r2
 800a584:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a588:	681b      	ldr	r3, [r3, #0]
 800a58a:	69ba      	ldr	r2, [r7, #24]
 800a58c:	0151      	lsls	r1, r2, #5
 800a58e:	69fa      	ldr	r2, [r7, #28]
 800a590:	440a      	add	r2, r1
 800a592:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a596:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800a59a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a59c:	2300      	movs	r3, #0
}
 800a59e:	4618      	mov	r0, r3
 800a5a0:	3720      	adds	r7, #32
 800a5a2:	46bd      	mov	sp, r7
 800a5a4:	bd80      	pop	{r7, pc}
 800a5a6:	bf00      	nop
 800a5a8:	1ff80000 	.word	0x1ff80000

0800a5ac <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800a5ac:	b480      	push	{r7}
 800a5ae:	b087      	sub	sp, #28
 800a5b0:	af00      	add	r7, sp, #0
 800a5b2:	60f8      	str	r0, [r7, #12]
 800a5b4:	60b9      	str	r1, [r7, #8]
 800a5b6:	4613      	mov	r3, r2
 800a5b8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a5ba:	68fb      	ldr	r3, [r7, #12]
 800a5bc:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800a5be:	68bb      	ldr	r3, [r7, #8]
 800a5c0:	781b      	ldrb	r3, [r3, #0]
 800a5c2:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800a5c4:	68bb      	ldr	r3, [r7, #8]
 800a5c6:	785b      	ldrb	r3, [r3, #1]
 800a5c8:	2b01      	cmp	r3, #1
 800a5ca:	f040 80cd 	bne.w	800a768 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800a5ce:	68bb      	ldr	r3, [r7, #8]
 800a5d0:	695b      	ldr	r3, [r3, #20]
 800a5d2:	2b00      	cmp	r3, #0
 800a5d4:	d132      	bne.n	800a63c <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800a5d6:	693b      	ldr	r3, [r7, #16]
 800a5d8:	015a      	lsls	r2, r3, #5
 800a5da:	697b      	ldr	r3, [r7, #20]
 800a5dc:	4413      	add	r3, r2
 800a5de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a5e2:	691b      	ldr	r3, [r3, #16]
 800a5e4:	693a      	ldr	r2, [r7, #16]
 800a5e6:	0151      	lsls	r1, r2, #5
 800a5e8:	697a      	ldr	r2, [r7, #20]
 800a5ea:	440a      	add	r2, r1
 800a5ec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a5f0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800a5f4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800a5f8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800a5fa:	693b      	ldr	r3, [r7, #16]
 800a5fc:	015a      	lsls	r2, r3, #5
 800a5fe:	697b      	ldr	r3, [r7, #20]
 800a600:	4413      	add	r3, r2
 800a602:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a606:	691b      	ldr	r3, [r3, #16]
 800a608:	693a      	ldr	r2, [r7, #16]
 800a60a:	0151      	lsls	r1, r2, #5
 800a60c:	697a      	ldr	r2, [r7, #20]
 800a60e:	440a      	add	r2, r1
 800a610:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a614:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a618:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800a61a:	693b      	ldr	r3, [r7, #16]
 800a61c:	015a      	lsls	r2, r3, #5
 800a61e:	697b      	ldr	r3, [r7, #20]
 800a620:	4413      	add	r3, r2
 800a622:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a626:	691b      	ldr	r3, [r3, #16]
 800a628:	693a      	ldr	r2, [r7, #16]
 800a62a:	0151      	lsls	r1, r2, #5
 800a62c:	697a      	ldr	r2, [r7, #20]
 800a62e:	440a      	add	r2, r1
 800a630:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a634:	0cdb      	lsrs	r3, r3, #19
 800a636:	04db      	lsls	r3, r3, #19
 800a638:	6113      	str	r3, [r2, #16]
 800a63a:	e04e      	b.n	800a6da <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800a63c:	693b      	ldr	r3, [r7, #16]
 800a63e:	015a      	lsls	r2, r3, #5
 800a640:	697b      	ldr	r3, [r7, #20]
 800a642:	4413      	add	r3, r2
 800a644:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a648:	691b      	ldr	r3, [r3, #16]
 800a64a:	693a      	ldr	r2, [r7, #16]
 800a64c:	0151      	lsls	r1, r2, #5
 800a64e:	697a      	ldr	r2, [r7, #20]
 800a650:	440a      	add	r2, r1
 800a652:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a656:	0cdb      	lsrs	r3, r3, #19
 800a658:	04db      	lsls	r3, r3, #19
 800a65a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800a65c:	693b      	ldr	r3, [r7, #16]
 800a65e:	015a      	lsls	r2, r3, #5
 800a660:	697b      	ldr	r3, [r7, #20]
 800a662:	4413      	add	r3, r2
 800a664:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a668:	691b      	ldr	r3, [r3, #16]
 800a66a:	693a      	ldr	r2, [r7, #16]
 800a66c:	0151      	lsls	r1, r2, #5
 800a66e:	697a      	ldr	r2, [r7, #20]
 800a670:	440a      	add	r2, r1
 800a672:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a676:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800a67a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800a67e:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 800a680:	68bb      	ldr	r3, [r7, #8]
 800a682:	695a      	ldr	r2, [r3, #20]
 800a684:	68bb      	ldr	r3, [r7, #8]
 800a686:	689b      	ldr	r3, [r3, #8]
 800a688:	429a      	cmp	r2, r3
 800a68a:	d903      	bls.n	800a694 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800a68c:	68bb      	ldr	r3, [r7, #8]
 800a68e:	689a      	ldr	r2, [r3, #8]
 800a690:	68bb      	ldr	r3, [r7, #8]
 800a692:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800a694:	693b      	ldr	r3, [r7, #16]
 800a696:	015a      	lsls	r2, r3, #5
 800a698:	697b      	ldr	r3, [r7, #20]
 800a69a:	4413      	add	r3, r2
 800a69c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a6a0:	691b      	ldr	r3, [r3, #16]
 800a6a2:	693a      	ldr	r2, [r7, #16]
 800a6a4:	0151      	lsls	r1, r2, #5
 800a6a6:	697a      	ldr	r2, [r7, #20]
 800a6a8:	440a      	add	r2, r1
 800a6aa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a6ae:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a6b2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800a6b4:	693b      	ldr	r3, [r7, #16]
 800a6b6:	015a      	lsls	r2, r3, #5
 800a6b8:	697b      	ldr	r3, [r7, #20]
 800a6ba:	4413      	add	r3, r2
 800a6bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a6c0:	691a      	ldr	r2, [r3, #16]
 800a6c2:	68bb      	ldr	r3, [r7, #8]
 800a6c4:	695b      	ldr	r3, [r3, #20]
 800a6c6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a6ca:	6939      	ldr	r1, [r7, #16]
 800a6cc:	0148      	lsls	r0, r1, #5
 800a6ce:	6979      	ldr	r1, [r7, #20]
 800a6d0:	4401      	add	r1, r0
 800a6d2:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800a6d6:	4313      	orrs	r3, r2
 800a6d8:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800a6da:	79fb      	ldrb	r3, [r7, #7]
 800a6dc:	2b01      	cmp	r3, #1
 800a6de:	d11e      	bne.n	800a71e <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800a6e0:	68bb      	ldr	r3, [r7, #8]
 800a6e2:	691b      	ldr	r3, [r3, #16]
 800a6e4:	2b00      	cmp	r3, #0
 800a6e6:	d009      	beq.n	800a6fc <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800a6e8:	693b      	ldr	r3, [r7, #16]
 800a6ea:	015a      	lsls	r2, r3, #5
 800a6ec:	697b      	ldr	r3, [r7, #20]
 800a6ee:	4413      	add	r3, r2
 800a6f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a6f4:	461a      	mov	r2, r3
 800a6f6:	68bb      	ldr	r3, [r7, #8]
 800a6f8:	691b      	ldr	r3, [r3, #16]
 800a6fa:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800a6fc:	693b      	ldr	r3, [r7, #16]
 800a6fe:	015a      	lsls	r2, r3, #5
 800a700:	697b      	ldr	r3, [r7, #20]
 800a702:	4413      	add	r3, r2
 800a704:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a708:	681b      	ldr	r3, [r3, #0]
 800a70a:	693a      	ldr	r2, [r7, #16]
 800a70c:	0151      	lsls	r1, r2, #5
 800a70e:	697a      	ldr	r2, [r7, #20]
 800a710:	440a      	add	r2, r1
 800a712:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a716:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800a71a:	6013      	str	r3, [r2, #0]
 800a71c:	e092      	b.n	800a844 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800a71e:	693b      	ldr	r3, [r7, #16]
 800a720:	015a      	lsls	r2, r3, #5
 800a722:	697b      	ldr	r3, [r7, #20]
 800a724:	4413      	add	r3, r2
 800a726:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a72a:	681b      	ldr	r3, [r3, #0]
 800a72c:	693a      	ldr	r2, [r7, #16]
 800a72e:	0151      	lsls	r1, r2, #5
 800a730:	697a      	ldr	r2, [r7, #20]
 800a732:	440a      	add	r2, r1
 800a734:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a738:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800a73c:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800a73e:	68bb      	ldr	r3, [r7, #8]
 800a740:	695b      	ldr	r3, [r3, #20]
 800a742:	2b00      	cmp	r3, #0
 800a744:	d07e      	beq.n	800a844 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800a746:	697b      	ldr	r3, [r7, #20]
 800a748:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a74c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a74e:	68bb      	ldr	r3, [r7, #8]
 800a750:	781b      	ldrb	r3, [r3, #0]
 800a752:	f003 030f 	and.w	r3, r3, #15
 800a756:	2101      	movs	r1, #1
 800a758:	fa01 f303 	lsl.w	r3, r1, r3
 800a75c:	6979      	ldr	r1, [r7, #20]
 800a75e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a762:	4313      	orrs	r3, r2
 800a764:	634b      	str	r3, [r1, #52]	; 0x34
 800a766:	e06d      	b.n	800a844 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800a768:	693b      	ldr	r3, [r7, #16]
 800a76a:	015a      	lsls	r2, r3, #5
 800a76c:	697b      	ldr	r3, [r7, #20]
 800a76e:	4413      	add	r3, r2
 800a770:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a774:	691b      	ldr	r3, [r3, #16]
 800a776:	693a      	ldr	r2, [r7, #16]
 800a778:	0151      	lsls	r1, r2, #5
 800a77a:	697a      	ldr	r2, [r7, #20]
 800a77c:	440a      	add	r2, r1
 800a77e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a782:	0cdb      	lsrs	r3, r3, #19
 800a784:	04db      	lsls	r3, r3, #19
 800a786:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800a788:	693b      	ldr	r3, [r7, #16]
 800a78a:	015a      	lsls	r2, r3, #5
 800a78c:	697b      	ldr	r3, [r7, #20]
 800a78e:	4413      	add	r3, r2
 800a790:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a794:	691b      	ldr	r3, [r3, #16]
 800a796:	693a      	ldr	r2, [r7, #16]
 800a798:	0151      	lsls	r1, r2, #5
 800a79a:	697a      	ldr	r2, [r7, #20]
 800a79c:	440a      	add	r2, r1
 800a79e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a7a2:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800a7a6:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800a7aa:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800a7ac:	68bb      	ldr	r3, [r7, #8]
 800a7ae:	695b      	ldr	r3, [r3, #20]
 800a7b0:	2b00      	cmp	r3, #0
 800a7b2:	d003      	beq.n	800a7bc <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 800a7b4:	68bb      	ldr	r3, [r7, #8]
 800a7b6:	689a      	ldr	r2, [r3, #8]
 800a7b8:	68bb      	ldr	r3, [r7, #8]
 800a7ba:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800a7bc:	693b      	ldr	r3, [r7, #16]
 800a7be:	015a      	lsls	r2, r3, #5
 800a7c0:	697b      	ldr	r3, [r7, #20]
 800a7c2:	4413      	add	r3, r2
 800a7c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a7c8:	691b      	ldr	r3, [r3, #16]
 800a7ca:	693a      	ldr	r2, [r7, #16]
 800a7cc:	0151      	lsls	r1, r2, #5
 800a7ce:	697a      	ldr	r2, [r7, #20]
 800a7d0:	440a      	add	r2, r1
 800a7d2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a7d6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a7da:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 800a7dc:	693b      	ldr	r3, [r7, #16]
 800a7de:	015a      	lsls	r2, r3, #5
 800a7e0:	697b      	ldr	r3, [r7, #20]
 800a7e2:	4413      	add	r3, r2
 800a7e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a7e8:	691a      	ldr	r2, [r3, #16]
 800a7ea:	68bb      	ldr	r3, [r7, #8]
 800a7ec:	689b      	ldr	r3, [r3, #8]
 800a7ee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a7f2:	6939      	ldr	r1, [r7, #16]
 800a7f4:	0148      	lsls	r0, r1, #5
 800a7f6:	6979      	ldr	r1, [r7, #20]
 800a7f8:	4401      	add	r1, r0
 800a7fa:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800a7fe:	4313      	orrs	r3, r2
 800a800:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800a802:	79fb      	ldrb	r3, [r7, #7]
 800a804:	2b01      	cmp	r3, #1
 800a806:	d10d      	bne.n	800a824 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800a808:	68bb      	ldr	r3, [r7, #8]
 800a80a:	68db      	ldr	r3, [r3, #12]
 800a80c:	2b00      	cmp	r3, #0
 800a80e:	d009      	beq.n	800a824 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800a810:	68bb      	ldr	r3, [r7, #8]
 800a812:	68d9      	ldr	r1, [r3, #12]
 800a814:	693b      	ldr	r3, [r7, #16]
 800a816:	015a      	lsls	r2, r3, #5
 800a818:	697b      	ldr	r3, [r7, #20]
 800a81a:	4413      	add	r3, r2
 800a81c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a820:	460a      	mov	r2, r1
 800a822:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800a824:	693b      	ldr	r3, [r7, #16]
 800a826:	015a      	lsls	r2, r3, #5
 800a828:	697b      	ldr	r3, [r7, #20]
 800a82a:	4413      	add	r3, r2
 800a82c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a830:	681b      	ldr	r3, [r3, #0]
 800a832:	693a      	ldr	r2, [r7, #16]
 800a834:	0151      	lsls	r1, r2, #5
 800a836:	697a      	ldr	r2, [r7, #20]
 800a838:	440a      	add	r2, r1
 800a83a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a83e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800a842:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a844:	2300      	movs	r3, #0
}
 800a846:	4618      	mov	r0, r3
 800a848:	371c      	adds	r7, #28
 800a84a:	46bd      	mov	sp, r7
 800a84c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a850:	4770      	bx	lr

0800a852 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800a852:	b480      	push	{r7}
 800a854:	b089      	sub	sp, #36	; 0x24
 800a856:	af00      	add	r7, sp, #0
 800a858:	60f8      	str	r0, [r7, #12]
 800a85a:	60b9      	str	r1, [r7, #8]
 800a85c:	4611      	mov	r1, r2
 800a85e:	461a      	mov	r2, r3
 800a860:	460b      	mov	r3, r1
 800a862:	71fb      	strb	r3, [r7, #7]
 800a864:	4613      	mov	r3, r2
 800a866:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a868:	68fb      	ldr	r3, [r7, #12]
 800a86a:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 800a86c:	68bb      	ldr	r3, [r7, #8]
 800a86e:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 800a870:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800a874:	2b00      	cmp	r3, #0
 800a876:	d11a      	bne.n	800a8ae <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800a878:	88bb      	ldrh	r3, [r7, #4]
 800a87a:	3303      	adds	r3, #3
 800a87c:	089b      	lsrs	r3, r3, #2
 800a87e:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800a880:	2300      	movs	r3, #0
 800a882:	61bb      	str	r3, [r7, #24]
 800a884:	e00f      	b.n	800a8a6 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800a886:	79fb      	ldrb	r3, [r7, #7]
 800a888:	031a      	lsls	r2, r3, #12
 800a88a:	697b      	ldr	r3, [r7, #20]
 800a88c:	4413      	add	r3, r2
 800a88e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a892:	461a      	mov	r2, r3
 800a894:	69fb      	ldr	r3, [r7, #28]
 800a896:	681b      	ldr	r3, [r3, #0]
 800a898:	6013      	str	r3, [r2, #0]
      pSrc++;
 800a89a:	69fb      	ldr	r3, [r7, #28]
 800a89c:	3304      	adds	r3, #4
 800a89e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800a8a0:	69bb      	ldr	r3, [r7, #24]
 800a8a2:	3301      	adds	r3, #1
 800a8a4:	61bb      	str	r3, [r7, #24]
 800a8a6:	69ba      	ldr	r2, [r7, #24]
 800a8a8:	693b      	ldr	r3, [r7, #16]
 800a8aa:	429a      	cmp	r2, r3
 800a8ac:	d3eb      	bcc.n	800a886 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800a8ae:	2300      	movs	r3, #0
}
 800a8b0:	4618      	mov	r0, r3
 800a8b2:	3724      	adds	r7, #36	; 0x24
 800a8b4:	46bd      	mov	sp, r7
 800a8b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8ba:	4770      	bx	lr

0800a8bc <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800a8bc:	b480      	push	{r7}
 800a8be:	b089      	sub	sp, #36	; 0x24
 800a8c0:	af00      	add	r7, sp, #0
 800a8c2:	60f8      	str	r0, [r7, #12]
 800a8c4:	60b9      	str	r1, [r7, #8]
 800a8c6:	4613      	mov	r3, r2
 800a8c8:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a8ca:	68fb      	ldr	r3, [r7, #12]
 800a8cc:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 800a8ce:	68bb      	ldr	r3, [r7, #8]
 800a8d0:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 800a8d2:	88fb      	ldrh	r3, [r7, #6]
 800a8d4:	3303      	adds	r3, #3
 800a8d6:	089b      	lsrs	r3, r3, #2
 800a8d8:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 800a8da:	2300      	movs	r3, #0
 800a8dc:	61bb      	str	r3, [r7, #24]
 800a8de:	e00b      	b.n	800a8f8 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800a8e0:	697b      	ldr	r3, [r7, #20]
 800a8e2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a8e6:	681a      	ldr	r2, [r3, #0]
 800a8e8:	69fb      	ldr	r3, [r7, #28]
 800a8ea:	601a      	str	r2, [r3, #0]
    pDest++;
 800a8ec:	69fb      	ldr	r3, [r7, #28]
 800a8ee:	3304      	adds	r3, #4
 800a8f0:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800a8f2:	69bb      	ldr	r3, [r7, #24]
 800a8f4:	3301      	adds	r3, #1
 800a8f6:	61bb      	str	r3, [r7, #24]
 800a8f8:	69ba      	ldr	r2, [r7, #24]
 800a8fa:	693b      	ldr	r3, [r7, #16]
 800a8fc:	429a      	cmp	r2, r3
 800a8fe:	d3ef      	bcc.n	800a8e0 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 800a900:	69fb      	ldr	r3, [r7, #28]
}
 800a902:	4618      	mov	r0, r3
 800a904:	3724      	adds	r7, #36	; 0x24
 800a906:	46bd      	mov	sp, r7
 800a908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a90c:	4770      	bx	lr

0800a90e <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a90e:	b480      	push	{r7}
 800a910:	b085      	sub	sp, #20
 800a912:	af00      	add	r7, sp, #0
 800a914:	6078      	str	r0, [r7, #4]
 800a916:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a91c:	683b      	ldr	r3, [r7, #0]
 800a91e:	781b      	ldrb	r3, [r3, #0]
 800a920:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800a922:	683b      	ldr	r3, [r7, #0]
 800a924:	785b      	ldrb	r3, [r3, #1]
 800a926:	2b01      	cmp	r3, #1
 800a928:	d12c      	bne.n	800a984 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800a92a:	68bb      	ldr	r3, [r7, #8]
 800a92c:	015a      	lsls	r2, r3, #5
 800a92e:	68fb      	ldr	r3, [r7, #12]
 800a930:	4413      	add	r3, r2
 800a932:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a936:	681b      	ldr	r3, [r3, #0]
 800a938:	2b00      	cmp	r3, #0
 800a93a:	db12      	blt.n	800a962 <USB_EPSetStall+0x54>
 800a93c:	68bb      	ldr	r3, [r7, #8]
 800a93e:	2b00      	cmp	r3, #0
 800a940:	d00f      	beq.n	800a962 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800a942:	68bb      	ldr	r3, [r7, #8]
 800a944:	015a      	lsls	r2, r3, #5
 800a946:	68fb      	ldr	r3, [r7, #12]
 800a948:	4413      	add	r3, r2
 800a94a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a94e:	681b      	ldr	r3, [r3, #0]
 800a950:	68ba      	ldr	r2, [r7, #8]
 800a952:	0151      	lsls	r1, r2, #5
 800a954:	68fa      	ldr	r2, [r7, #12]
 800a956:	440a      	add	r2, r1
 800a958:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a95c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800a960:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800a962:	68bb      	ldr	r3, [r7, #8]
 800a964:	015a      	lsls	r2, r3, #5
 800a966:	68fb      	ldr	r3, [r7, #12]
 800a968:	4413      	add	r3, r2
 800a96a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a96e:	681b      	ldr	r3, [r3, #0]
 800a970:	68ba      	ldr	r2, [r7, #8]
 800a972:	0151      	lsls	r1, r2, #5
 800a974:	68fa      	ldr	r2, [r7, #12]
 800a976:	440a      	add	r2, r1
 800a978:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a97c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800a980:	6013      	str	r3, [r2, #0]
 800a982:	e02b      	b.n	800a9dc <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800a984:	68bb      	ldr	r3, [r7, #8]
 800a986:	015a      	lsls	r2, r3, #5
 800a988:	68fb      	ldr	r3, [r7, #12]
 800a98a:	4413      	add	r3, r2
 800a98c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a990:	681b      	ldr	r3, [r3, #0]
 800a992:	2b00      	cmp	r3, #0
 800a994:	db12      	blt.n	800a9bc <USB_EPSetStall+0xae>
 800a996:	68bb      	ldr	r3, [r7, #8]
 800a998:	2b00      	cmp	r3, #0
 800a99a:	d00f      	beq.n	800a9bc <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800a99c:	68bb      	ldr	r3, [r7, #8]
 800a99e:	015a      	lsls	r2, r3, #5
 800a9a0:	68fb      	ldr	r3, [r7, #12]
 800a9a2:	4413      	add	r3, r2
 800a9a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a9a8:	681b      	ldr	r3, [r3, #0]
 800a9aa:	68ba      	ldr	r2, [r7, #8]
 800a9ac:	0151      	lsls	r1, r2, #5
 800a9ae:	68fa      	ldr	r2, [r7, #12]
 800a9b0:	440a      	add	r2, r1
 800a9b2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a9b6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800a9ba:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800a9bc:	68bb      	ldr	r3, [r7, #8]
 800a9be:	015a      	lsls	r2, r3, #5
 800a9c0:	68fb      	ldr	r3, [r7, #12]
 800a9c2:	4413      	add	r3, r2
 800a9c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a9c8:	681b      	ldr	r3, [r3, #0]
 800a9ca:	68ba      	ldr	r2, [r7, #8]
 800a9cc:	0151      	lsls	r1, r2, #5
 800a9ce:	68fa      	ldr	r2, [r7, #12]
 800a9d0:	440a      	add	r2, r1
 800a9d2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a9d6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800a9da:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a9dc:	2300      	movs	r3, #0
}
 800a9de:	4618      	mov	r0, r3
 800a9e0:	3714      	adds	r7, #20
 800a9e2:	46bd      	mov	sp, r7
 800a9e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9e8:	4770      	bx	lr

0800a9ea <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a9ea:	b480      	push	{r7}
 800a9ec:	b085      	sub	sp, #20
 800a9ee:	af00      	add	r7, sp, #0
 800a9f0:	6078      	str	r0, [r7, #4]
 800a9f2:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a9f8:	683b      	ldr	r3, [r7, #0]
 800a9fa:	781b      	ldrb	r3, [r3, #0]
 800a9fc:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800a9fe:	683b      	ldr	r3, [r7, #0]
 800aa00:	785b      	ldrb	r3, [r3, #1]
 800aa02:	2b01      	cmp	r3, #1
 800aa04:	d128      	bne.n	800aa58 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800aa06:	68bb      	ldr	r3, [r7, #8]
 800aa08:	015a      	lsls	r2, r3, #5
 800aa0a:	68fb      	ldr	r3, [r7, #12]
 800aa0c:	4413      	add	r3, r2
 800aa0e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aa12:	681b      	ldr	r3, [r3, #0]
 800aa14:	68ba      	ldr	r2, [r7, #8]
 800aa16:	0151      	lsls	r1, r2, #5
 800aa18:	68fa      	ldr	r2, [r7, #12]
 800aa1a:	440a      	add	r2, r1
 800aa1c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800aa20:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800aa24:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800aa26:	683b      	ldr	r3, [r7, #0]
 800aa28:	78db      	ldrb	r3, [r3, #3]
 800aa2a:	2b03      	cmp	r3, #3
 800aa2c:	d003      	beq.n	800aa36 <USB_EPClearStall+0x4c>
 800aa2e:	683b      	ldr	r3, [r7, #0]
 800aa30:	78db      	ldrb	r3, [r3, #3]
 800aa32:	2b02      	cmp	r3, #2
 800aa34:	d138      	bne.n	800aaa8 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800aa36:	68bb      	ldr	r3, [r7, #8]
 800aa38:	015a      	lsls	r2, r3, #5
 800aa3a:	68fb      	ldr	r3, [r7, #12]
 800aa3c:	4413      	add	r3, r2
 800aa3e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aa42:	681b      	ldr	r3, [r3, #0]
 800aa44:	68ba      	ldr	r2, [r7, #8]
 800aa46:	0151      	lsls	r1, r2, #5
 800aa48:	68fa      	ldr	r2, [r7, #12]
 800aa4a:	440a      	add	r2, r1
 800aa4c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800aa50:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800aa54:	6013      	str	r3, [r2, #0]
 800aa56:	e027      	b.n	800aaa8 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800aa58:	68bb      	ldr	r3, [r7, #8]
 800aa5a:	015a      	lsls	r2, r3, #5
 800aa5c:	68fb      	ldr	r3, [r7, #12]
 800aa5e:	4413      	add	r3, r2
 800aa60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aa64:	681b      	ldr	r3, [r3, #0]
 800aa66:	68ba      	ldr	r2, [r7, #8]
 800aa68:	0151      	lsls	r1, r2, #5
 800aa6a:	68fa      	ldr	r2, [r7, #12]
 800aa6c:	440a      	add	r2, r1
 800aa6e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800aa72:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800aa76:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800aa78:	683b      	ldr	r3, [r7, #0]
 800aa7a:	78db      	ldrb	r3, [r3, #3]
 800aa7c:	2b03      	cmp	r3, #3
 800aa7e:	d003      	beq.n	800aa88 <USB_EPClearStall+0x9e>
 800aa80:	683b      	ldr	r3, [r7, #0]
 800aa82:	78db      	ldrb	r3, [r3, #3]
 800aa84:	2b02      	cmp	r3, #2
 800aa86:	d10f      	bne.n	800aaa8 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800aa88:	68bb      	ldr	r3, [r7, #8]
 800aa8a:	015a      	lsls	r2, r3, #5
 800aa8c:	68fb      	ldr	r3, [r7, #12]
 800aa8e:	4413      	add	r3, r2
 800aa90:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aa94:	681b      	ldr	r3, [r3, #0]
 800aa96:	68ba      	ldr	r2, [r7, #8]
 800aa98:	0151      	lsls	r1, r2, #5
 800aa9a:	68fa      	ldr	r2, [r7, #12]
 800aa9c:	440a      	add	r2, r1
 800aa9e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800aaa2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800aaa6:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800aaa8:	2300      	movs	r3, #0
}
 800aaaa:	4618      	mov	r0, r3
 800aaac:	3714      	adds	r7, #20
 800aaae:	46bd      	mov	sp, r7
 800aab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aab4:	4770      	bx	lr

0800aab6 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800aab6:	b480      	push	{r7}
 800aab8:	b085      	sub	sp, #20
 800aaba:	af00      	add	r7, sp, #0
 800aabc:	6078      	str	r0, [r7, #4]
 800aabe:	460b      	mov	r3, r1
 800aac0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800aac6:	68fb      	ldr	r3, [r7, #12]
 800aac8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800aacc:	681b      	ldr	r3, [r3, #0]
 800aace:	68fa      	ldr	r2, [r7, #12]
 800aad0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800aad4:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800aad8:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800aada:	68fb      	ldr	r3, [r7, #12]
 800aadc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800aae0:	681a      	ldr	r2, [r3, #0]
 800aae2:	78fb      	ldrb	r3, [r7, #3]
 800aae4:	011b      	lsls	r3, r3, #4
 800aae6:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800aaea:	68f9      	ldr	r1, [r7, #12]
 800aaec:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800aaf0:	4313      	orrs	r3, r2
 800aaf2:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800aaf4:	2300      	movs	r3, #0
}
 800aaf6:	4618      	mov	r0, r3
 800aaf8:	3714      	adds	r7, #20
 800aafa:	46bd      	mov	sp, r7
 800aafc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab00:	4770      	bx	lr

0800ab02 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800ab02:	b480      	push	{r7}
 800ab04:	b085      	sub	sp, #20
 800ab06:	af00      	add	r7, sp, #0
 800ab08:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800ab0e:	68fb      	ldr	r3, [r7, #12]
 800ab10:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800ab14:	681b      	ldr	r3, [r3, #0]
 800ab16:	68fa      	ldr	r2, [r7, #12]
 800ab18:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800ab1c:	f023 0303 	bic.w	r3, r3, #3
 800ab20:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800ab22:	68fb      	ldr	r3, [r7, #12]
 800ab24:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ab28:	685b      	ldr	r3, [r3, #4]
 800ab2a:	68fa      	ldr	r2, [r7, #12]
 800ab2c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800ab30:	f023 0302 	bic.w	r3, r3, #2
 800ab34:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800ab36:	2300      	movs	r3, #0
}
 800ab38:	4618      	mov	r0, r3
 800ab3a:	3714      	adds	r7, #20
 800ab3c:	46bd      	mov	sp, r7
 800ab3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab42:	4770      	bx	lr

0800ab44 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800ab44:	b480      	push	{r7}
 800ab46:	b085      	sub	sp, #20
 800ab48:	af00      	add	r7, sp, #0
 800ab4a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800ab50:	68fb      	ldr	r3, [r7, #12]
 800ab52:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800ab56:	681b      	ldr	r3, [r3, #0]
 800ab58:	68fa      	ldr	r2, [r7, #12]
 800ab5a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800ab5e:	f023 0303 	bic.w	r3, r3, #3
 800ab62:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800ab64:	68fb      	ldr	r3, [r7, #12]
 800ab66:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ab6a:	685b      	ldr	r3, [r3, #4]
 800ab6c:	68fa      	ldr	r2, [r7, #12]
 800ab6e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800ab72:	f043 0302 	orr.w	r3, r3, #2
 800ab76:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800ab78:	2300      	movs	r3, #0
}
 800ab7a:	4618      	mov	r0, r3
 800ab7c:	3714      	adds	r7, #20
 800ab7e:	46bd      	mov	sp, r7
 800ab80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab84:	4770      	bx	lr

0800ab86 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800ab86:	b480      	push	{r7}
 800ab88:	b085      	sub	sp, #20
 800ab8a:	af00      	add	r7, sp, #0
 800ab8c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	695b      	ldr	r3, [r3, #20]
 800ab92:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	699b      	ldr	r3, [r3, #24]
 800ab98:	68fa      	ldr	r2, [r7, #12]
 800ab9a:	4013      	ands	r3, r2
 800ab9c:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800ab9e:	68fb      	ldr	r3, [r7, #12]
}
 800aba0:	4618      	mov	r0, r3
 800aba2:	3714      	adds	r7, #20
 800aba4:	46bd      	mov	sp, r7
 800aba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abaa:	4770      	bx	lr

0800abac <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800abac:	b480      	push	{r7}
 800abae:	b085      	sub	sp, #20
 800abb0:	af00      	add	r7, sp, #0
 800abb2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800abb8:	68fb      	ldr	r3, [r7, #12]
 800abba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800abbe:	699b      	ldr	r3, [r3, #24]
 800abc0:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800abc2:	68fb      	ldr	r3, [r7, #12]
 800abc4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800abc8:	69db      	ldr	r3, [r3, #28]
 800abca:	68ba      	ldr	r2, [r7, #8]
 800abcc:	4013      	ands	r3, r2
 800abce:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800abd0:	68bb      	ldr	r3, [r7, #8]
 800abd2:	0c1b      	lsrs	r3, r3, #16
}
 800abd4:	4618      	mov	r0, r3
 800abd6:	3714      	adds	r7, #20
 800abd8:	46bd      	mov	sp, r7
 800abda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abde:	4770      	bx	lr

0800abe0 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800abe0:	b480      	push	{r7}
 800abe2:	b085      	sub	sp, #20
 800abe4:	af00      	add	r7, sp, #0
 800abe6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800abec:	68fb      	ldr	r3, [r7, #12]
 800abee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800abf2:	699b      	ldr	r3, [r3, #24]
 800abf4:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800abf6:	68fb      	ldr	r3, [r7, #12]
 800abf8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800abfc:	69db      	ldr	r3, [r3, #28]
 800abfe:	68ba      	ldr	r2, [r7, #8]
 800ac00:	4013      	ands	r3, r2
 800ac02:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800ac04:	68bb      	ldr	r3, [r7, #8]
 800ac06:	b29b      	uxth	r3, r3
}
 800ac08:	4618      	mov	r0, r3
 800ac0a:	3714      	adds	r7, #20
 800ac0c:	46bd      	mov	sp, r7
 800ac0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac12:	4770      	bx	lr

0800ac14 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800ac14:	b480      	push	{r7}
 800ac16:	b085      	sub	sp, #20
 800ac18:	af00      	add	r7, sp, #0
 800ac1a:	6078      	str	r0, [r7, #4]
 800ac1c:	460b      	mov	r3, r1
 800ac1e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800ac24:	78fb      	ldrb	r3, [r7, #3]
 800ac26:	015a      	lsls	r2, r3, #5
 800ac28:	68fb      	ldr	r3, [r7, #12]
 800ac2a:	4413      	add	r3, r2
 800ac2c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ac30:	689b      	ldr	r3, [r3, #8]
 800ac32:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800ac34:	68fb      	ldr	r3, [r7, #12]
 800ac36:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ac3a:	695b      	ldr	r3, [r3, #20]
 800ac3c:	68ba      	ldr	r2, [r7, #8]
 800ac3e:	4013      	ands	r3, r2
 800ac40:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800ac42:	68bb      	ldr	r3, [r7, #8]
}
 800ac44:	4618      	mov	r0, r3
 800ac46:	3714      	adds	r7, #20
 800ac48:	46bd      	mov	sp, r7
 800ac4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac4e:	4770      	bx	lr

0800ac50 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800ac50:	b480      	push	{r7}
 800ac52:	b087      	sub	sp, #28
 800ac54:	af00      	add	r7, sp, #0
 800ac56:	6078      	str	r0, [r7, #4]
 800ac58:	460b      	mov	r3, r1
 800ac5a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 800ac60:	697b      	ldr	r3, [r7, #20]
 800ac62:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ac66:	691b      	ldr	r3, [r3, #16]
 800ac68:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800ac6a:	697b      	ldr	r3, [r7, #20]
 800ac6c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ac70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ac72:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800ac74:	78fb      	ldrb	r3, [r7, #3]
 800ac76:	f003 030f 	and.w	r3, r3, #15
 800ac7a:	68fa      	ldr	r2, [r7, #12]
 800ac7c:	fa22 f303 	lsr.w	r3, r2, r3
 800ac80:	01db      	lsls	r3, r3, #7
 800ac82:	b2db      	uxtb	r3, r3
 800ac84:	693a      	ldr	r2, [r7, #16]
 800ac86:	4313      	orrs	r3, r2
 800ac88:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800ac8a:	78fb      	ldrb	r3, [r7, #3]
 800ac8c:	015a      	lsls	r2, r3, #5
 800ac8e:	697b      	ldr	r3, [r7, #20]
 800ac90:	4413      	add	r3, r2
 800ac92:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ac96:	689b      	ldr	r3, [r3, #8]
 800ac98:	693a      	ldr	r2, [r7, #16]
 800ac9a:	4013      	ands	r3, r2
 800ac9c:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800ac9e:	68bb      	ldr	r3, [r7, #8]
}
 800aca0:	4618      	mov	r0, r3
 800aca2:	371c      	adds	r7, #28
 800aca4:	46bd      	mov	sp, r7
 800aca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acaa:	4770      	bx	lr

0800acac <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800acac:	b480      	push	{r7}
 800acae:	b083      	sub	sp, #12
 800acb0:	af00      	add	r7, sp, #0
 800acb2:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	695b      	ldr	r3, [r3, #20]
 800acb8:	f003 0301 	and.w	r3, r3, #1
}
 800acbc:	4618      	mov	r0, r3
 800acbe:	370c      	adds	r7, #12
 800acc0:	46bd      	mov	sp, r7
 800acc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acc6:	4770      	bx	lr

0800acc8 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800acc8:	b480      	push	{r7}
 800acca:	b085      	sub	sp, #20
 800accc:	af00      	add	r7, sp, #0
 800acce:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800acd4:	68fb      	ldr	r3, [r7, #12]
 800acd6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800acda:	681b      	ldr	r3, [r3, #0]
 800acdc:	68fa      	ldr	r2, [r7, #12]
 800acde:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ace2:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800ace6:	f023 0307 	bic.w	r3, r3, #7
 800acea:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800acec:	68fb      	ldr	r3, [r7, #12]
 800acee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800acf2:	685b      	ldr	r3, [r3, #4]
 800acf4:	68fa      	ldr	r2, [r7, #12]
 800acf6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800acfa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800acfe:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800ad00:	2300      	movs	r3, #0
}
 800ad02:	4618      	mov	r0, r3
 800ad04:	3714      	adds	r7, #20
 800ad06:	46bd      	mov	sp, r7
 800ad08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad0c:	4770      	bx	lr
	...

0800ad10 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800ad10:	b480      	push	{r7}
 800ad12:	b087      	sub	sp, #28
 800ad14:	af00      	add	r7, sp, #0
 800ad16:	60f8      	str	r0, [r7, #12]
 800ad18:	460b      	mov	r3, r1
 800ad1a:	607a      	str	r2, [r7, #4]
 800ad1c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ad1e:	68fb      	ldr	r3, [r7, #12]
 800ad20:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800ad22:	68fb      	ldr	r3, [r7, #12]
 800ad24:	333c      	adds	r3, #60	; 0x3c
 800ad26:	3304      	adds	r3, #4
 800ad28:	681b      	ldr	r3, [r3, #0]
 800ad2a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800ad2c:	693b      	ldr	r3, [r7, #16]
 800ad2e:	4a26      	ldr	r2, [pc, #152]	; (800adc8 <USB_EP0_OutStart+0xb8>)
 800ad30:	4293      	cmp	r3, r2
 800ad32:	d90a      	bls.n	800ad4a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800ad34:	697b      	ldr	r3, [r7, #20]
 800ad36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ad3a:	681b      	ldr	r3, [r3, #0]
 800ad3c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ad40:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ad44:	d101      	bne.n	800ad4a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800ad46:	2300      	movs	r3, #0
 800ad48:	e037      	b.n	800adba <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800ad4a:	697b      	ldr	r3, [r7, #20]
 800ad4c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ad50:	461a      	mov	r2, r3
 800ad52:	2300      	movs	r3, #0
 800ad54:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800ad56:	697b      	ldr	r3, [r7, #20]
 800ad58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ad5c:	691b      	ldr	r3, [r3, #16]
 800ad5e:	697a      	ldr	r2, [r7, #20]
 800ad60:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ad64:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800ad68:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800ad6a:	697b      	ldr	r3, [r7, #20]
 800ad6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ad70:	691b      	ldr	r3, [r3, #16]
 800ad72:	697a      	ldr	r2, [r7, #20]
 800ad74:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ad78:	f043 0318 	orr.w	r3, r3, #24
 800ad7c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800ad7e:	697b      	ldr	r3, [r7, #20]
 800ad80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ad84:	691b      	ldr	r3, [r3, #16]
 800ad86:	697a      	ldr	r2, [r7, #20]
 800ad88:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ad8c:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800ad90:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800ad92:	7afb      	ldrb	r3, [r7, #11]
 800ad94:	2b01      	cmp	r3, #1
 800ad96:	d10f      	bne.n	800adb8 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800ad98:	697b      	ldr	r3, [r7, #20]
 800ad9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ad9e:	461a      	mov	r2, r3
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800ada4:	697b      	ldr	r3, [r7, #20]
 800ada6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800adaa:	681b      	ldr	r3, [r3, #0]
 800adac:	697a      	ldr	r2, [r7, #20]
 800adae:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800adb2:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800adb6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800adb8:	2300      	movs	r3, #0
}
 800adba:	4618      	mov	r0, r3
 800adbc:	371c      	adds	r7, #28
 800adbe:	46bd      	mov	sp, r7
 800adc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adc4:	4770      	bx	lr
 800adc6:	bf00      	nop
 800adc8:	4f54300a 	.word	0x4f54300a

0800adcc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800adcc:	b480      	push	{r7}
 800adce:	b085      	sub	sp, #20
 800add0:	af00      	add	r7, sp, #0
 800add2:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800add4:	2300      	movs	r3, #0
 800add6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800add8:	68fb      	ldr	r3, [r7, #12]
 800adda:	3301      	adds	r3, #1
 800addc:	60fb      	str	r3, [r7, #12]
 800adde:	68fb      	ldr	r3, [r7, #12]
 800ade0:	4a13      	ldr	r2, [pc, #76]	; (800ae30 <USB_CoreReset+0x64>)
 800ade2:	4293      	cmp	r3, r2
 800ade4:	d901      	bls.n	800adea <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800ade6:	2303      	movs	r3, #3
 800ade8:	e01b      	b.n	800ae22 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	691b      	ldr	r3, [r3, #16]
 800adee:	2b00      	cmp	r3, #0
 800adf0:	daf2      	bge.n	800add8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800adf2:	2300      	movs	r3, #0
 800adf4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800adf6:	687b      	ldr	r3, [r7, #4]
 800adf8:	691b      	ldr	r3, [r3, #16]
 800adfa:	f043 0201 	orr.w	r2, r3, #1
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800ae02:	68fb      	ldr	r3, [r7, #12]
 800ae04:	3301      	adds	r3, #1
 800ae06:	60fb      	str	r3, [r7, #12]
 800ae08:	68fb      	ldr	r3, [r7, #12]
 800ae0a:	4a09      	ldr	r2, [pc, #36]	; (800ae30 <USB_CoreReset+0x64>)
 800ae0c:	4293      	cmp	r3, r2
 800ae0e:	d901      	bls.n	800ae14 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800ae10:	2303      	movs	r3, #3
 800ae12:	e006      	b.n	800ae22 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	691b      	ldr	r3, [r3, #16]
 800ae18:	f003 0301 	and.w	r3, r3, #1
 800ae1c:	2b01      	cmp	r3, #1
 800ae1e:	d0f0      	beq.n	800ae02 <USB_CoreReset+0x36>

  return HAL_OK;
 800ae20:	2300      	movs	r3, #0
}
 800ae22:	4618      	mov	r0, r3
 800ae24:	3714      	adds	r7, #20
 800ae26:	46bd      	mov	sp, r7
 800ae28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae2c:	4770      	bx	lr
 800ae2e:	bf00      	nop
 800ae30:	00030d40 	.word	0x00030d40

0800ae34 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ae34:	b580      	push	{r7, lr}
 800ae36:	b084      	sub	sp, #16
 800ae38:	af00      	add	r7, sp, #0
 800ae3a:	6078      	str	r0, [r7, #4]
 800ae3c:	460b      	mov	r3, r1
 800ae3e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800ae40:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800ae44:	f004 f82a 	bl	800ee9c <malloc>
 800ae48:	4603      	mov	r3, r0
 800ae4a:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800ae4c:	68fb      	ldr	r3, [r7, #12]
 800ae4e:	2b00      	cmp	r3, #0
 800ae50:	d105      	bne.n	800ae5e <USBD_CDC_Init+0x2a>
  {
    pdev->pClassData = NULL;
 800ae52:	687b      	ldr	r3, [r7, #4]
 800ae54:	2200      	movs	r2, #0
 800ae56:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 800ae5a:	2302      	movs	r3, #2
 800ae5c:	e066      	b.n	800af2c <USBD_CDC_Init+0xf8>
  }

  pdev->pClassData = (void *)hcdc;
 800ae5e:	687b      	ldr	r3, [r7, #4]
 800ae60:	68fa      	ldr	r2, [r7, #12]
 800ae62:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	7c1b      	ldrb	r3, [r3, #16]
 800ae6a:	2b00      	cmp	r3, #0
 800ae6c:	d119      	bne.n	800aea2 <USBD_CDC_Init+0x6e>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800ae6e:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ae72:	2202      	movs	r2, #2
 800ae74:	2181      	movs	r1, #129	; 0x81
 800ae76:	6878      	ldr	r0, [r7, #4]
 800ae78:	f001 ff71 	bl	800cd5e <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	2201      	movs	r2, #1
 800ae80:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800ae82:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ae86:	2202      	movs	r2, #2
 800ae88:	2101      	movs	r1, #1
 800ae8a:	6878      	ldr	r0, [r7, #4]
 800ae8c:	f001 ff67 	bl	800cd5e <USBD_LL_OpenEP>
                          CDC_DATA_HS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	2201      	movs	r2, #1
 800ae94:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CDC CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	2210      	movs	r2, #16
 800ae9c:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 800aea0:	e016      	b.n	800aed0 <USBD_CDC_Init+0x9c>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800aea2:	2340      	movs	r3, #64	; 0x40
 800aea4:	2202      	movs	r2, #2
 800aea6:	2181      	movs	r1, #129	; 0x81
 800aea8:	6878      	ldr	r0, [r7, #4]
 800aeaa:	f001 ff58 	bl	800cd5e <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	2201      	movs	r2, #1
 800aeb2:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800aeb4:	2340      	movs	r3, #64	; 0x40
 800aeb6:	2202      	movs	r2, #2
 800aeb8:	2101      	movs	r1, #1
 800aeba:	6878      	ldr	r0, [r7, #4]
 800aebc:	f001 ff4f 	bl	800cd5e <USBD_LL_OpenEP>
                          CDC_DATA_FS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	2201      	movs	r2, #1
 800aec4:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	2210      	movs	r2, #16
 800aecc:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800aed0:	2308      	movs	r3, #8
 800aed2:	2203      	movs	r2, #3
 800aed4:	2182      	movs	r1, #130	; 0x82
 800aed6:	6878      	ldr	r0, [r7, #4]
 800aed8:	f001 ff41 	bl	800cd5e <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	2201      	movs	r2, #1
 800aee0:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800aeea:	681b      	ldr	r3, [r3, #0]
 800aeec:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800aeee:	68fb      	ldr	r3, [r7, #12]
 800aef0:	2200      	movs	r2, #0
 800aef2:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800aef6:	68fb      	ldr	r3, [r7, #12]
 800aef8:	2200      	movs	r2, #0
 800aefa:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800aefe:	687b      	ldr	r3, [r7, #4]
 800af00:	7c1b      	ldrb	r3, [r3, #16]
 800af02:	2b00      	cmp	r3, #0
 800af04:	d109      	bne.n	800af1a <USBD_CDC_Init+0xe6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800af06:	68fb      	ldr	r3, [r7, #12]
 800af08:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800af0c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800af10:	2101      	movs	r1, #1
 800af12:	6878      	ldr	r0, [r7, #4]
 800af14:	f002 f812 	bl	800cf3c <USBD_LL_PrepareReceive>
 800af18:	e007      	b.n	800af2a <USBD_CDC_Init+0xf6>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800af1a:	68fb      	ldr	r3, [r7, #12]
 800af1c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800af20:	2340      	movs	r3, #64	; 0x40
 800af22:	2101      	movs	r1, #1
 800af24:	6878      	ldr	r0, [r7, #4]
 800af26:	f002 f809 	bl	800cf3c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800af2a:	2300      	movs	r3, #0
}
 800af2c:	4618      	mov	r0, r3
 800af2e:	3710      	adds	r7, #16
 800af30:	46bd      	mov	sp, r7
 800af32:	bd80      	pop	{r7, pc}

0800af34 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800af34:	b580      	push	{r7, lr}
 800af36:	b084      	sub	sp, #16
 800af38:	af00      	add	r7, sp, #0
 800af3a:	6078      	str	r0, [r7, #4]
 800af3c:	460b      	mov	r3, r1
 800af3e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  uint8_t ret = 0U;
 800af40:	2300      	movs	r3, #0
 800af42:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800af44:	2181      	movs	r1, #129	; 0x81
 800af46:	6878      	ldr	r0, [r7, #4]
 800af48:	f001 ff2f 	bl	800cdaa <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	2200      	movs	r2, #0
 800af50:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800af52:	2101      	movs	r1, #1
 800af54:	6878      	ldr	r0, [r7, #4]
 800af56:	f001 ff28 	bl	800cdaa <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800af5a:	687b      	ldr	r3, [r7, #4]
 800af5c:	2200      	movs	r2, #0
 800af5e:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800af62:	2182      	movs	r1, #130	; 0x82
 800af64:	6878      	ldr	r0, [r7, #4]
 800af66:	f001 ff20 	bl	800cdaa <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800af6a:	687b      	ldr	r3, [r7, #4]
 800af6c:	2200      	movs	r2, #0
 800af6e:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 800af72:	687b      	ldr	r3, [r7, #4]
 800af74:	2200      	movs	r2, #0
 800af76:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800af7a:	687b      	ldr	r3, [r7, #4]
 800af7c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800af80:	2b00      	cmp	r3, #0
 800af82:	d00e      	beq.n	800afa2 <USBD_CDC_DeInit+0x6e>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800af8a:	685b      	ldr	r3, [r3, #4]
 800af8c:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800af94:	4618      	mov	r0, r3
 800af96:	f003 ff89 	bl	800eeac <free>
    pdev->pClassData = NULL;
 800af9a:	687b      	ldr	r3, [r7, #4]
 800af9c:	2200      	movs	r2, #0
 800af9e:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return ret;
 800afa2:	7bfb      	ldrb	r3, [r7, #15]
}
 800afa4:	4618      	mov	r0, r3
 800afa6:	3710      	adds	r7, #16
 800afa8:	46bd      	mov	sp, r7
 800afaa:	bd80      	pop	{r7, pc}

0800afac <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800afac:	b580      	push	{r7, lr}
 800afae:	b086      	sub	sp, #24
 800afb0:	af00      	add	r7, sp, #0
 800afb2:	6078      	str	r0, [r7, #4]
 800afb4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800afbc:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 800afbe:	2300      	movs	r3, #0
 800afc0:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 800afc2:	2300      	movs	r3, #0
 800afc4:	81bb      	strh	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 800afc6:	2300      	movs	r3, #0
 800afc8:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800afca:	683b      	ldr	r3, [r7, #0]
 800afcc:	781b      	ldrb	r3, [r3, #0]
 800afce:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800afd2:	2b00      	cmp	r3, #0
 800afd4:	d03a      	beq.n	800b04c <USBD_CDC_Setup+0xa0>
 800afd6:	2b20      	cmp	r3, #32
 800afd8:	f040 8097 	bne.w	800b10a <USBD_CDC_Setup+0x15e>
  {
  case USB_REQ_TYPE_CLASS:
    if (req->wLength != 0U)
 800afdc:	683b      	ldr	r3, [r7, #0]
 800afde:	88db      	ldrh	r3, [r3, #6]
 800afe0:	2b00      	cmp	r3, #0
 800afe2:	d029      	beq.n	800b038 <USBD_CDC_Setup+0x8c>
    {
      if ((req->bmRequest & 0x80U) != 0U)
 800afe4:	683b      	ldr	r3, [r7, #0]
 800afe6:	781b      	ldrb	r3, [r3, #0]
 800afe8:	b25b      	sxtb	r3, r3
 800afea:	2b00      	cmp	r3, #0
 800afec:	da11      	bge.n	800b012 <USBD_CDC_Setup+0x66>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800aff4:	689b      	ldr	r3, [r3, #8]
 800aff6:	683a      	ldr	r2, [r7, #0]
 800aff8:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)hcdc->data,
 800affa:	6939      	ldr	r1, [r7, #16]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800affc:	683a      	ldr	r2, [r7, #0]
 800affe:	88d2      	ldrh	r2, [r2, #6]
 800b000:	4798      	blx	r3
                                                          req->wLength);

          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, req->wLength);
 800b002:	6939      	ldr	r1, [r7, #16]
 800b004:	683b      	ldr	r3, [r7, #0]
 800b006:	88db      	ldrh	r3, [r3, #6]
 800b008:	461a      	mov	r2, r3
 800b00a:	6878      	ldr	r0, [r7, #4]
 800b00c:	f001 fa6d 	bl	800c4ea <USBD_CtlSendData>
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t *)req, 0U);
    }
    break;
 800b010:	e082      	b.n	800b118 <USBD_CDC_Setup+0x16c>
        hcdc->CmdOpCode = req->bRequest;
 800b012:	683b      	ldr	r3, [r7, #0]
 800b014:	785a      	ldrb	r2, [r3, #1]
 800b016:	693b      	ldr	r3, [r7, #16]
 800b018:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 800b01c:	683b      	ldr	r3, [r7, #0]
 800b01e:	88db      	ldrh	r3, [r3, #6]
 800b020:	b2da      	uxtb	r2, r3
 800b022:	693b      	ldr	r3, [r7, #16]
 800b024:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
        (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 800b028:	6939      	ldr	r1, [r7, #16]
 800b02a:	683b      	ldr	r3, [r7, #0]
 800b02c:	88db      	ldrh	r3, [r3, #6]
 800b02e:	461a      	mov	r2, r3
 800b030:	6878      	ldr	r0, [r7, #4]
 800b032:	f001 fa86 	bl	800c542 <USBD_CtlPrepareRx>
    break;
 800b036:	e06f      	b.n	800b118 <USBD_CDC_Setup+0x16c>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b03e:	689b      	ldr	r3, [r3, #8]
 800b040:	683a      	ldr	r2, [r7, #0]
 800b042:	7850      	ldrb	r0, [r2, #1]
 800b044:	2200      	movs	r2, #0
 800b046:	6839      	ldr	r1, [r7, #0]
 800b048:	4798      	blx	r3
    break;
 800b04a:	e065      	b.n	800b118 <USBD_CDC_Setup+0x16c>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800b04c:	683b      	ldr	r3, [r7, #0]
 800b04e:	785b      	ldrb	r3, [r3, #1]
 800b050:	2b0b      	cmp	r3, #11
 800b052:	d84f      	bhi.n	800b0f4 <USBD_CDC_Setup+0x148>
 800b054:	a201      	add	r2, pc, #4	; (adr r2, 800b05c <USBD_CDC_Setup+0xb0>)
 800b056:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b05a:	bf00      	nop
 800b05c:	0800b08d 	.word	0x0800b08d
 800b060:	0800b103 	.word	0x0800b103
 800b064:	0800b0f5 	.word	0x0800b0f5
 800b068:	0800b0f5 	.word	0x0800b0f5
 800b06c:	0800b0f5 	.word	0x0800b0f5
 800b070:	0800b0f5 	.word	0x0800b0f5
 800b074:	0800b0f5 	.word	0x0800b0f5
 800b078:	0800b0f5 	.word	0x0800b0f5
 800b07c:	0800b0f5 	.word	0x0800b0f5
 800b080:	0800b0f5 	.word	0x0800b0f5
 800b084:	0800b0b5 	.word	0x0800b0b5
 800b088:	0800b0dd 	.word	0x0800b0dd
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b08c:	687b      	ldr	r3, [r7, #4]
 800b08e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b092:	2b03      	cmp	r3, #3
 800b094:	d107      	bne.n	800b0a6 <USBD_CDC_Setup+0xfa>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800b096:	f107 030c 	add.w	r3, r7, #12
 800b09a:	2202      	movs	r2, #2
 800b09c:	4619      	mov	r1, r3
 800b09e:	6878      	ldr	r0, [r7, #4]
 800b0a0:	f001 fa23 	bl	800c4ea <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 800b0a4:	e030      	b.n	800b108 <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 800b0a6:	6839      	ldr	r1, [r7, #0]
 800b0a8:	6878      	ldr	r0, [r7, #4]
 800b0aa:	f001 f9ad 	bl	800c408 <USBD_CtlError>
        ret = USBD_FAIL;
 800b0ae:	2303      	movs	r3, #3
 800b0b0:	75fb      	strb	r3, [r7, #23]
      break;
 800b0b2:	e029      	b.n	800b108 <USBD_CDC_Setup+0x15c>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b0ba:	2b03      	cmp	r3, #3
 800b0bc:	d107      	bne.n	800b0ce <USBD_CDC_Setup+0x122>
      {
        (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800b0be:	f107 030f 	add.w	r3, r7, #15
 800b0c2:	2201      	movs	r2, #1
 800b0c4:	4619      	mov	r1, r3
 800b0c6:	6878      	ldr	r0, [r7, #4]
 800b0c8:	f001 fa0f 	bl	800c4ea <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 800b0cc:	e01c      	b.n	800b108 <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 800b0ce:	6839      	ldr	r1, [r7, #0]
 800b0d0:	6878      	ldr	r0, [r7, #4]
 800b0d2:	f001 f999 	bl	800c408 <USBD_CtlError>
        ret = USBD_FAIL;
 800b0d6:	2303      	movs	r3, #3
 800b0d8:	75fb      	strb	r3, [r7, #23]
      break;
 800b0da:	e015      	b.n	800b108 <USBD_CDC_Setup+0x15c>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b0e2:	2b03      	cmp	r3, #3
 800b0e4:	d00f      	beq.n	800b106 <USBD_CDC_Setup+0x15a>
      {
        USBD_CtlError(pdev, req);
 800b0e6:	6839      	ldr	r1, [r7, #0]
 800b0e8:	6878      	ldr	r0, [r7, #4]
 800b0ea:	f001 f98d 	bl	800c408 <USBD_CtlError>
        ret = USBD_FAIL;
 800b0ee:	2303      	movs	r3, #3
 800b0f0:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800b0f2:	e008      	b.n	800b106 <USBD_CDC_Setup+0x15a>

    case USB_REQ_CLEAR_FEATURE:
      break;

    default:
      USBD_CtlError(pdev, req);
 800b0f4:	6839      	ldr	r1, [r7, #0]
 800b0f6:	6878      	ldr	r0, [r7, #4]
 800b0f8:	f001 f986 	bl	800c408 <USBD_CtlError>
      ret = USBD_FAIL;
 800b0fc:	2303      	movs	r3, #3
 800b0fe:	75fb      	strb	r3, [r7, #23]
      break;
 800b100:	e002      	b.n	800b108 <USBD_CDC_Setup+0x15c>
      break;
 800b102:	bf00      	nop
 800b104:	e008      	b.n	800b118 <USBD_CDC_Setup+0x16c>
      break;
 800b106:	bf00      	nop
    }
    break;
 800b108:	e006      	b.n	800b118 <USBD_CDC_Setup+0x16c>

  default:
    USBD_CtlError(pdev, req);
 800b10a:	6839      	ldr	r1, [r7, #0]
 800b10c:	6878      	ldr	r0, [r7, #4]
 800b10e:	f001 f97b 	bl	800c408 <USBD_CtlError>
    ret = USBD_FAIL;
 800b112:	2303      	movs	r3, #3
 800b114:	75fb      	strb	r3, [r7, #23]
    break;
 800b116:	bf00      	nop
  }

  return (uint8_t)ret;
 800b118:	7dfb      	ldrb	r3, [r7, #23]
}
 800b11a:	4618      	mov	r0, r3
 800b11c:	3718      	adds	r7, #24
 800b11e:	46bd      	mov	sp, r7
 800b120:	bd80      	pop	{r7, pc}
 800b122:	bf00      	nop

0800b124 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b124:	b580      	push	{r7, lr}
 800b126:	b084      	sub	sp, #16
 800b128:	af00      	add	r7, sp, #0
 800b12a:	6078      	str	r0, [r7, #4]
 800b12c:	460b      	mov	r3, r1
 800b12e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800b136:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b13e:	2b00      	cmp	r3, #0
 800b140:	d101      	bne.n	800b146 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800b142:	2303      	movs	r3, #3
 800b144:	e049      	b.n	800b1da <USBD_CDC_DataIn+0xb6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800b146:	687b      	ldr	r3, [r7, #4]
 800b148:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b14c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800b14e:	78fa      	ldrb	r2, [r7, #3]
 800b150:	6879      	ldr	r1, [r7, #4]
 800b152:	4613      	mov	r3, r2
 800b154:	009b      	lsls	r3, r3, #2
 800b156:	4413      	add	r3, r2
 800b158:	009b      	lsls	r3, r3, #2
 800b15a:	440b      	add	r3, r1
 800b15c:	3318      	adds	r3, #24
 800b15e:	681b      	ldr	r3, [r3, #0]
 800b160:	2b00      	cmp	r3, #0
 800b162:	d029      	beq.n	800b1b8 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800b164:	78fa      	ldrb	r2, [r7, #3]
 800b166:	6879      	ldr	r1, [r7, #4]
 800b168:	4613      	mov	r3, r2
 800b16a:	009b      	lsls	r3, r3, #2
 800b16c:	4413      	add	r3, r2
 800b16e:	009b      	lsls	r3, r3, #2
 800b170:	440b      	add	r3, r1
 800b172:	3318      	adds	r3, #24
 800b174:	681a      	ldr	r2, [r3, #0]
 800b176:	78f9      	ldrb	r1, [r7, #3]
 800b178:	68f8      	ldr	r0, [r7, #12]
 800b17a:	460b      	mov	r3, r1
 800b17c:	00db      	lsls	r3, r3, #3
 800b17e:	1a5b      	subs	r3, r3, r1
 800b180:	009b      	lsls	r3, r3, #2
 800b182:	4403      	add	r3, r0
 800b184:	3344      	adds	r3, #68	; 0x44
 800b186:	681b      	ldr	r3, [r3, #0]
 800b188:	fbb2 f1f3 	udiv	r1, r2, r3
 800b18c:	fb03 f301 	mul.w	r3, r3, r1
 800b190:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800b192:	2b00      	cmp	r3, #0
 800b194:	d110      	bne.n	800b1b8 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800b196:	78fa      	ldrb	r2, [r7, #3]
 800b198:	6879      	ldr	r1, [r7, #4]
 800b19a:	4613      	mov	r3, r2
 800b19c:	009b      	lsls	r3, r3, #2
 800b19e:	4413      	add	r3, r2
 800b1a0:	009b      	lsls	r3, r3, #2
 800b1a2:	440b      	add	r3, r1
 800b1a4:	3318      	adds	r3, #24
 800b1a6:	2200      	movs	r2, #0
 800b1a8:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800b1aa:	78f9      	ldrb	r1, [r7, #3]
 800b1ac:	2300      	movs	r3, #0
 800b1ae:	2200      	movs	r2, #0
 800b1b0:	6878      	ldr	r0, [r7, #4]
 800b1b2:	f001 fea2 	bl	800cefa <USBD_LL_Transmit>
 800b1b6:	e00f      	b.n	800b1d8 <USBD_CDC_DataIn+0xb4>
  }
  else
  {
    hcdc->TxState = 0U;
 800b1b8:	68bb      	ldr	r3, [r7, #8]
 800b1ba:	2200      	movs	r2, #0
 800b1bc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800b1c0:	687b      	ldr	r3, [r7, #4]
 800b1c2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b1c6:	691b      	ldr	r3, [r3, #16]
 800b1c8:	68ba      	ldr	r2, [r7, #8]
 800b1ca:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800b1ce:	68ba      	ldr	r2, [r7, #8]
 800b1d0:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800b1d4:	78fa      	ldrb	r2, [r7, #3]
 800b1d6:	4798      	blx	r3
  }

  return (uint8_t)USBD_OK;
 800b1d8:	2300      	movs	r3, #0
}
 800b1da:	4618      	mov	r0, r3
 800b1dc:	3710      	adds	r7, #16
 800b1de:	46bd      	mov	sp, r7
 800b1e0:	bd80      	pop	{r7, pc}

0800b1e2 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b1e2:	b580      	push	{r7, lr}
 800b1e4:	b084      	sub	sp, #16
 800b1e6:	af00      	add	r7, sp, #0
 800b1e8:	6078      	str	r0, [r7, #4]
 800b1ea:	460b      	mov	r3, r1
 800b1ec:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800b1ee:	687b      	ldr	r3, [r7, #4]
 800b1f0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b1f4:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800b1f6:	687b      	ldr	r3, [r7, #4]
 800b1f8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b1fc:	2b00      	cmp	r3, #0
 800b1fe:	d101      	bne.n	800b204 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800b200:	2303      	movs	r3, #3
 800b202:	e015      	b.n	800b230 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800b204:	78fb      	ldrb	r3, [r7, #3]
 800b206:	4619      	mov	r1, r3
 800b208:	6878      	ldr	r0, [r7, #4]
 800b20a:	f001 feb8 	bl	800cf7e <USBD_LL_GetRxDataSize>
 800b20e:	4602      	mov	r2, r0
 800b210:	68fb      	ldr	r3, [r7, #12]
 800b212:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800b216:	687b      	ldr	r3, [r7, #4]
 800b218:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b21c:	68db      	ldr	r3, [r3, #12]
 800b21e:	68fa      	ldr	r2, [r7, #12]
 800b220:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800b224:	68fa      	ldr	r2, [r7, #12]
 800b226:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800b22a:	4611      	mov	r1, r2
 800b22c:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800b22e:	2300      	movs	r3, #0
}
 800b230:	4618      	mov	r0, r3
 800b232:	3710      	adds	r7, #16
 800b234:	46bd      	mov	sp, r7
 800b236:	bd80      	pop	{r7, pc}

0800b238 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800b238:	b580      	push	{r7, lr}
 800b23a:	b084      	sub	sp, #16
 800b23c:	af00      	add	r7, sp, #0
 800b23e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b246:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800b248:	687b      	ldr	r3, [r7, #4]
 800b24a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b24e:	2b00      	cmp	r3, #0
 800b250:	d015      	beq.n	800b27e <USBD_CDC_EP0_RxReady+0x46>
 800b252:	68fb      	ldr	r3, [r7, #12]
 800b254:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800b258:	2bff      	cmp	r3, #255	; 0xff
 800b25a:	d010      	beq.n	800b27e <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800b25c:	687b      	ldr	r3, [r7, #4]
 800b25e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b262:	689b      	ldr	r3, [r3, #8]
 800b264:	68fa      	ldr	r2, [r7, #12]
 800b266:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 800b26a:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800b26c:	68fa      	ldr	r2, [r7, #12]
 800b26e:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800b272:	b292      	uxth	r2, r2
 800b274:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800b276:	68fb      	ldr	r3, [r7, #12]
 800b278:	22ff      	movs	r2, #255	; 0xff
 800b27a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }

  return (uint8_t)USBD_OK;
 800b27e:	2300      	movs	r3, #0
}
 800b280:	4618      	mov	r0, r3
 800b282:	3710      	adds	r7, #16
 800b284:	46bd      	mov	sp, r7
 800b286:	bd80      	pop	{r7, pc}

0800b288 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800b288:	b480      	push	{r7}
 800b28a:	b083      	sub	sp, #12
 800b28c:	af00      	add	r7, sp, #0
 800b28e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	2243      	movs	r2, #67	; 0x43
 800b294:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800b296:	4b03      	ldr	r3, [pc, #12]	; (800b2a4 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800b298:	4618      	mov	r0, r3
 800b29a:	370c      	adds	r7, #12
 800b29c:	46bd      	mov	sp, r7
 800b29e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2a2:	4770      	bx	lr
 800b2a4:	20000494 	.word	0x20000494

0800b2a8 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800b2a8:	b480      	push	{r7}
 800b2aa:	b083      	sub	sp, #12
 800b2ac:	af00      	add	r7, sp, #0
 800b2ae:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800b2b0:	687b      	ldr	r3, [r7, #4]
 800b2b2:	2243      	movs	r2, #67	; 0x43
 800b2b4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800b2b6:	4b03      	ldr	r3, [pc, #12]	; (800b2c4 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800b2b8:	4618      	mov	r0, r3
 800b2ba:	370c      	adds	r7, #12
 800b2bc:	46bd      	mov	sp, r7
 800b2be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2c2:	4770      	bx	lr
 800b2c4:	20000450 	.word	0x20000450

0800b2c8 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800b2c8:	b480      	push	{r7}
 800b2ca:	b083      	sub	sp, #12
 800b2cc:	af00      	add	r7, sp, #0
 800b2ce:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800b2d0:	687b      	ldr	r3, [r7, #4]
 800b2d2:	2243      	movs	r2, #67	; 0x43
 800b2d4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800b2d6:	4b03      	ldr	r3, [pc, #12]	; (800b2e4 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800b2d8:	4618      	mov	r0, r3
 800b2da:	370c      	adds	r7, #12
 800b2dc:	46bd      	mov	sp, r7
 800b2de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2e2:	4770      	bx	lr
 800b2e4:	200004d8 	.word	0x200004d8

0800b2e8 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800b2e8:	b480      	push	{r7}
 800b2ea:	b083      	sub	sp, #12
 800b2ec:	af00      	add	r7, sp, #0
 800b2ee:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800b2f0:	687b      	ldr	r3, [r7, #4]
 800b2f2:	220a      	movs	r2, #10
 800b2f4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800b2f6:	4b03      	ldr	r3, [pc, #12]	; (800b304 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800b2f8:	4618      	mov	r0, r3
 800b2fa:	370c      	adds	r7, #12
 800b2fc:	46bd      	mov	sp, r7
 800b2fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b302:	4770      	bx	lr
 800b304:	2000040c 	.word	0x2000040c

0800b308 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800b308:	b480      	push	{r7}
 800b30a:	b083      	sub	sp, #12
 800b30c:	af00      	add	r7, sp, #0
 800b30e:	6078      	str	r0, [r7, #4]
 800b310:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800b312:	683b      	ldr	r3, [r7, #0]
 800b314:	2b00      	cmp	r3, #0
 800b316:	d101      	bne.n	800b31c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800b318:	2303      	movs	r3, #3
 800b31a:	e004      	b.n	800b326 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 800b31c:	687b      	ldr	r3, [r7, #4]
 800b31e:	683a      	ldr	r2, [r7, #0]
 800b320:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 800b324:	2300      	movs	r3, #0
}
 800b326:	4618      	mov	r0, r3
 800b328:	370c      	adds	r7, #12
 800b32a:	46bd      	mov	sp, r7
 800b32c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b330:	4770      	bx	lr

0800b332 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800b332:	b480      	push	{r7}
 800b334:	b087      	sub	sp, #28
 800b336:	af00      	add	r7, sp, #0
 800b338:	60f8      	str	r0, [r7, #12]
 800b33a:	60b9      	str	r1, [r7, #8]
 800b33c:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800b33e:	68fb      	ldr	r3, [r7, #12]
 800b340:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b344:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800b346:	697b      	ldr	r3, [r7, #20]
 800b348:	68ba      	ldr	r2, [r7, #8]
 800b34a:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800b34e:	697b      	ldr	r3, [r7, #20]
 800b350:	687a      	ldr	r2, [r7, #4]
 800b352:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800b356:	2300      	movs	r3, #0
}
 800b358:	4618      	mov	r0, r3
 800b35a:	371c      	adds	r7, #28
 800b35c:	46bd      	mov	sp, r7
 800b35e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b362:	4770      	bx	lr

0800b364 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800b364:	b480      	push	{r7}
 800b366:	b085      	sub	sp, #20
 800b368:	af00      	add	r7, sp, #0
 800b36a:	6078      	str	r0, [r7, #4]
 800b36c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800b36e:	687b      	ldr	r3, [r7, #4]
 800b370:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b374:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800b376:	68fb      	ldr	r3, [r7, #12]
 800b378:	683a      	ldr	r2, [r7, #0]
 800b37a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800b37e:	2300      	movs	r3, #0
}
 800b380:	4618      	mov	r0, r3
 800b382:	3714      	adds	r7, #20
 800b384:	46bd      	mov	sp, r7
 800b386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b38a:	4770      	bx	lr

0800b38c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800b38c:	b580      	push	{r7, lr}
 800b38e:	b084      	sub	sp, #16
 800b390:	af00      	add	r7, sp, #0
 800b392:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b39a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b3a2:	2b00      	cmp	r3, #0
 800b3a4:	d101      	bne.n	800b3aa <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800b3a6:	2303      	movs	r3, #3
 800b3a8:	e016      	b.n	800b3d8 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b3aa:	687b      	ldr	r3, [r7, #4]
 800b3ac:	7c1b      	ldrb	r3, [r3, #16]
 800b3ae:	2b00      	cmp	r3, #0
 800b3b0:	d109      	bne.n	800b3c6 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800b3b2:	68fb      	ldr	r3, [r7, #12]
 800b3b4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800b3b8:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b3bc:	2101      	movs	r1, #1
 800b3be:	6878      	ldr	r0, [r7, #4]
 800b3c0:	f001 fdbc 	bl	800cf3c <USBD_LL_PrepareReceive>
 800b3c4:	e007      	b.n	800b3d6 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800b3c6:	68fb      	ldr	r3, [r7, #12]
 800b3c8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800b3cc:	2340      	movs	r3, #64	; 0x40
 800b3ce:	2101      	movs	r1, #1
 800b3d0:	6878      	ldr	r0, [r7, #4]
 800b3d2:	f001 fdb3 	bl	800cf3c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800b3d6:	2300      	movs	r3, #0
}
 800b3d8:	4618      	mov	r0, r3
 800b3da:	3710      	adds	r7, #16
 800b3dc:	46bd      	mov	sp, r7
 800b3de:	bd80      	pop	{r7, pc}

0800b3e0 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800b3e0:	b580      	push	{r7, lr}
 800b3e2:	b086      	sub	sp, #24
 800b3e4:	af00      	add	r7, sp, #0
 800b3e6:	60f8      	str	r0, [r7, #12]
 800b3e8:	60b9      	str	r1, [r7, #8]
 800b3ea:	4613      	mov	r3, r2
 800b3ec:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800b3ee:	68fb      	ldr	r3, [r7, #12]
 800b3f0:	2b00      	cmp	r3, #0
 800b3f2:	d101      	bne.n	800b3f8 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800b3f4:	2303      	movs	r3, #3
 800b3f6:	e025      	b.n	800b444 <USBD_Init+0x64>
  }

  /* Unlink previous class */
  if (pdev->pClass != NULL)
 800b3f8:	68fb      	ldr	r3, [r7, #12]
 800b3fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b3fe:	2b00      	cmp	r3, #0
 800b400:	d003      	beq.n	800b40a <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800b402:	68fb      	ldr	r3, [r7, #12]
 800b404:	2200      	movs	r2, #0
 800b406:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  if (pdev->pConfDesc != NULL)
 800b40a:	68fb      	ldr	r3, [r7, #12]
 800b40c:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 800b410:	2b00      	cmp	r3, #0
 800b412:	d003      	beq.n	800b41c <USBD_Init+0x3c>
  {
    pdev->pConfDesc = NULL;
 800b414:	68fb      	ldr	r3, [r7, #12]
 800b416:	2200      	movs	r2, #0
 800b418:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800b41c:	68bb      	ldr	r3, [r7, #8]
 800b41e:	2b00      	cmp	r3, #0
 800b420:	d003      	beq.n	800b42a <USBD_Init+0x4a>
  {
    pdev->pDesc = pdesc;
 800b422:	68fb      	ldr	r3, [r7, #12]
 800b424:	68ba      	ldr	r2, [r7, #8]
 800b426:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b42a:	68fb      	ldr	r3, [r7, #12]
 800b42c:	2201      	movs	r2, #1
 800b42e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800b432:	68fb      	ldr	r3, [r7, #12]
 800b434:	79fa      	ldrb	r2, [r7, #7]
 800b436:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800b438:	68f8      	ldr	r0, [r7, #12]
 800b43a:	f001 fc29 	bl	800cc90 <USBD_LL_Init>
 800b43e:	4603      	mov	r3, r0
 800b440:	75fb      	strb	r3, [r7, #23]

  return ret;
 800b442:	7dfb      	ldrb	r3, [r7, #23]
}
 800b444:	4618      	mov	r0, r3
 800b446:	3718      	adds	r7, #24
 800b448:	46bd      	mov	sp, r7
 800b44a:	bd80      	pop	{r7, pc}

0800b44c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800b44c:	b580      	push	{r7, lr}
 800b44e:	b084      	sub	sp, #16
 800b450:	af00      	add	r7, sp, #0
 800b452:	6078      	str	r0, [r7, #4]
 800b454:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800b456:	2300      	movs	r3, #0
 800b458:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800b45a:	683b      	ldr	r3, [r7, #0]
 800b45c:	2b00      	cmp	r3, #0
 800b45e:	d101      	bne.n	800b464 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800b460:	2303      	movs	r3, #3
 800b462:	e010      	b.n	800b486 <USBD_RegisterClass+0x3a>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800b464:	687b      	ldr	r3, [r7, #4]
 800b466:	683a      	ldr	r2, [r7, #0]
 800b468:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  /* Get Device Configuration Descriptor */
#ifdef USE_USB_FS
  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
#else /* USE_USB_HS */
  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
 800b46c:	687b      	ldr	r3, [r7, #4]
 800b46e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b472:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b474:	f107 020e 	add.w	r2, r7, #14
 800b478:	4610      	mov	r0, r2
 800b47a:	4798      	blx	r3
 800b47c:	4602      	mov	r2, r0
 800b47e:	687b      	ldr	r3, [r7, #4]
 800b480:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#endif /* USE_USB_FS */


  return USBD_OK;
 800b484:	2300      	movs	r3, #0
}
 800b486:	4618      	mov	r0, r3
 800b488:	3710      	adds	r7, #16
 800b48a:	46bd      	mov	sp, r7
 800b48c:	bd80      	pop	{r7, pc}

0800b48e <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800b48e:	b580      	push	{r7, lr}
 800b490:	b082      	sub	sp, #8
 800b492:	af00      	add	r7, sp, #0
 800b494:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800b496:	6878      	ldr	r0, [r7, #4]
 800b498:	f001 fc46 	bl	800cd28 <USBD_LL_Start>
 800b49c:	4603      	mov	r3, r0
}
 800b49e:	4618      	mov	r0, r3
 800b4a0:	3708      	adds	r7, #8
 800b4a2:	46bd      	mov	sp, r7
 800b4a4:	bd80      	pop	{r7, pc}

0800b4a6 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800b4a6:	b480      	push	{r7}
 800b4a8:	b083      	sub	sp, #12
 800b4aa:	af00      	add	r7, sp, #0
 800b4ac:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800b4ae:	2300      	movs	r3, #0
}
 800b4b0:	4618      	mov	r0, r3
 800b4b2:	370c      	adds	r7, #12
 800b4b4:	46bd      	mov	sp, r7
 800b4b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4ba:	4770      	bx	lr

0800b4bc <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b4bc:	b580      	push	{r7, lr}
 800b4be:	b084      	sub	sp, #16
 800b4c0:	af00      	add	r7, sp, #0
 800b4c2:	6078      	str	r0, [r7, #4]
 800b4c4:	460b      	mov	r3, r1
 800b4c6:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800b4c8:	2303      	movs	r3, #3
 800b4ca:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800b4cc:	687b      	ldr	r3, [r7, #4]
 800b4ce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b4d2:	2b00      	cmp	r3, #0
 800b4d4:	d009      	beq.n	800b4ea <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800b4d6:	687b      	ldr	r3, [r7, #4]
 800b4d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b4dc:	681b      	ldr	r3, [r3, #0]
 800b4de:	78fa      	ldrb	r2, [r7, #3]
 800b4e0:	4611      	mov	r1, r2
 800b4e2:	6878      	ldr	r0, [r7, #4]
 800b4e4:	4798      	blx	r3
 800b4e6:	4603      	mov	r3, r0
 800b4e8:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800b4ea:	7bfb      	ldrb	r3, [r7, #15]
}
 800b4ec:	4618      	mov	r0, r3
 800b4ee:	3710      	adds	r7, #16
 800b4f0:	46bd      	mov	sp, r7
 800b4f2:	bd80      	pop	{r7, pc}

0800b4f4 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b4f4:	b580      	push	{r7, lr}
 800b4f6:	b082      	sub	sp, #8
 800b4f8:	af00      	add	r7, sp, #0
 800b4fa:	6078      	str	r0, [r7, #4]
 800b4fc:	460b      	mov	r3, r1
 800b4fe:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800b500:	687b      	ldr	r3, [r7, #4]
 800b502:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b506:	2b00      	cmp	r3, #0
 800b508:	d007      	beq.n	800b51a <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800b50a:	687b      	ldr	r3, [r7, #4]
 800b50c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b510:	685b      	ldr	r3, [r3, #4]
 800b512:	78fa      	ldrb	r2, [r7, #3]
 800b514:	4611      	mov	r1, r2
 800b516:	6878      	ldr	r0, [r7, #4]
 800b518:	4798      	blx	r3
  }

  return USBD_OK;
 800b51a:	2300      	movs	r3, #0
}
 800b51c:	4618      	mov	r0, r3
 800b51e:	3708      	adds	r7, #8
 800b520:	46bd      	mov	sp, r7
 800b522:	bd80      	pop	{r7, pc}

0800b524 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800b524:	b580      	push	{r7, lr}
 800b526:	b084      	sub	sp, #16
 800b528:	af00      	add	r7, sp, #0
 800b52a:	6078      	str	r0, [r7, #4]
 800b52c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800b52e:	687b      	ldr	r3, [r7, #4]
 800b530:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800b534:	6839      	ldr	r1, [r7, #0]
 800b536:	4618      	mov	r0, r3
 800b538:	f000 ff2c 	bl	800c394 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800b53c:	687b      	ldr	r3, [r7, #4]
 800b53e:	2201      	movs	r2, #1
 800b540:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800b544:	687b      	ldr	r3, [r7, #4]
 800b546:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800b54a:	461a      	mov	r2, r3
 800b54c:	687b      	ldr	r3, [r7, #4]
 800b54e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800b552:	687b      	ldr	r3, [r7, #4]
 800b554:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800b558:	f003 031f 	and.w	r3, r3, #31
 800b55c:	2b01      	cmp	r3, #1
 800b55e:	d00e      	beq.n	800b57e <USBD_LL_SetupStage+0x5a>
 800b560:	2b01      	cmp	r3, #1
 800b562:	d302      	bcc.n	800b56a <USBD_LL_SetupStage+0x46>
 800b564:	2b02      	cmp	r3, #2
 800b566:	d014      	beq.n	800b592 <USBD_LL_SetupStage+0x6e>
 800b568:	e01d      	b.n	800b5a6 <USBD_LL_SetupStage+0x82>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800b56a:	687b      	ldr	r3, [r7, #4]
 800b56c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800b570:	4619      	mov	r1, r3
 800b572:	6878      	ldr	r0, [r7, #4]
 800b574:	f000 fa18 	bl	800b9a8 <USBD_StdDevReq>
 800b578:	4603      	mov	r3, r0
 800b57a:	73fb      	strb	r3, [r7, #15]
      break;
 800b57c:	e020      	b.n	800b5c0 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800b57e:	687b      	ldr	r3, [r7, #4]
 800b580:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800b584:	4619      	mov	r1, r3
 800b586:	6878      	ldr	r0, [r7, #4]
 800b588:	f000 fa7c 	bl	800ba84 <USBD_StdItfReq>
 800b58c:	4603      	mov	r3, r0
 800b58e:	73fb      	strb	r3, [r7, #15]
      break;
 800b590:	e016      	b.n	800b5c0 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800b592:	687b      	ldr	r3, [r7, #4]
 800b594:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800b598:	4619      	mov	r1, r3
 800b59a:	6878      	ldr	r0, [r7, #4]
 800b59c:	f000 fab8 	bl	800bb10 <USBD_StdEPReq>
 800b5a0:	4603      	mov	r3, r0
 800b5a2:	73fb      	strb	r3, [r7, #15]
      break;
 800b5a4:	e00c      	b.n	800b5c0 <USBD_LL_SetupStage+0x9c>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800b5a6:	687b      	ldr	r3, [r7, #4]
 800b5a8:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800b5ac:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800b5b0:	b2db      	uxtb	r3, r3
 800b5b2:	4619      	mov	r1, r3
 800b5b4:	6878      	ldr	r0, [r7, #4]
 800b5b6:	f001 fc17 	bl	800cde8 <USBD_LL_StallEP>
 800b5ba:	4603      	mov	r3, r0
 800b5bc:	73fb      	strb	r3, [r7, #15]
      break;
 800b5be:	bf00      	nop
  }

  return ret;
 800b5c0:	7bfb      	ldrb	r3, [r7, #15]
}
 800b5c2:	4618      	mov	r0, r3
 800b5c4:	3710      	adds	r7, #16
 800b5c6:	46bd      	mov	sp, r7
 800b5c8:	bd80      	pop	{r7, pc}

0800b5ca <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800b5ca:	b580      	push	{r7, lr}
 800b5cc:	b086      	sub	sp, #24
 800b5ce:	af00      	add	r7, sp, #0
 800b5d0:	60f8      	str	r0, [r7, #12]
 800b5d2:	460b      	mov	r3, r1
 800b5d4:	607a      	str	r2, [r7, #4]
 800b5d6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800b5d8:	7afb      	ldrb	r3, [r7, #11]
 800b5da:	2b00      	cmp	r3, #0
 800b5dc:	d137      	bne.n	800b64e <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 800b5de:	68fb      	ldr	r3, [r7, #12]
 800b5e0:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800b5e4:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800b5e6:	68fb      	ldr	r3, [r7, #12]
 800b5e8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800b5ec:	2b03      	cmp	r3, #3
 800b5ee:	d14a      	bne.n	800b686 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800b5f0:	693b      	ldr	r3, [r7, #16]
 800b5f2:	689a      	ldr	r2, [r3, #8]
 800b5f4:	693b      	ldr	r3, [r7, #16]
 800b5f6:	68db      	ldr	r3, [r3, #12]
 800b5f8:	429a      	cmp	r2, r3
 800b5fa:	d913      	bls.n	800b624 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800b5fc:	693b      	ldr	r3, [r7, #16]
 800b5fe:	689a      	ldr	r2, [r3, #8]
 800b600:	693b      	ldr	r3, [r7, #16]
 800b602:	68db      	ldr	r3, [r3, #12]
 800b604:	1ad2      	subs	r2, r2, r3
 800b606:	693b      	ldr	r3, [r7, #16]
 800b608:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800b60a:	693b      	ldr	r3, [r7, #16]
 800b60c:	68da      	ldr	r2, [r3, #12]
 800b60e:	693b      	ldr	r3, [r7, #16]
 800b610:	689b      	ldr	r3, [r3, #8]
 800b612:	4293      	cmp	r3, r2
 800b614:	bf28      	it	cs
 800b616:	4613      	movcs	r3, r2
 800b618:	461a      	mov	r2, r3
 800b61a:	6879      	ldr	r1, [r7, #4]
 800b61c:	68f8      	ldr	r0, [r7, #12]
 800b61e:	f000 ffad 	bl	800c57c <USBD_CtlContinueRx>
 800b622:	e030      	b.n	800b686 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800b624:	68fb      	ldr	r3, [r7, #12]
 800b626:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b62a:	691b      	ldr	r3, [r3, #16]
 800b62c:	2b00      	cmp	r3, #0
 800b62e:	d00a      	beq.n	800b646 <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800b630:	68fb      	ldr	r3, [r7, #12]
 800b632:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800b636:	2b03      	cmp	r3, #3
 800b638:	d105      	bne.n	800b646 <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800b63a:	68fb      	ldr	r3, [r7, #12]
 800b63c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b640:	691b      	ldr	r3, [r3, #16]
 800b642:	68f8      	ldr	r0, [r7, #12]
 800b644:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 800b646:	68f8      	ldr	r0, [r7, #12]
 800b648:	f000 ffa9 	bl	800c59e <USBD_CtlSendStatus>
 800b64c:	e01b      	b.n	800b686 <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800b64e:	68fb      	ldr	r3, [r7, #12]
 800b650:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b654:	699b      	ldr	r3, [r3, #24]
 800b656:	2b00      	cmp	r3, #0
 800b658:	d013      	beq.n	800b682 <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800b65a:	68fb      	ldr	r3, [r7, #12]
 800b65c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800b660:	2b03      	cmp	r3, #3
 800b662:	d10e      	bne.n	800b682 <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800b664:	68fb      	ldr	r3, [r7, #12]
 800b666:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b66a:	699b      	ldr	r3, [r3, #24]
 800b66c:	7afa      	ldrb	r2, [r7, #11]
 800b66e:	4611      	mov	r1, r2
 800b670:	68f8      	ldr	r0, [r7, #12]
 800b672:	4798      	blx	r3
 800b674:	4603      	mov	r3, r0
 800b676:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 800b678:	7dfb      	ldrb	r3, [r7, #23]
 800b67a:	2b00      	cmp	r3, #0
 800b67c:	d003      	beq.n	800b686 <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 800b67e:	7dfb      	ldrb	r3, [r7, #23]
 800b680:	e002      	b.n	800b688 <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800b682:	2303      	movs	r3, #3
 800b684:	e000      	b.n	800b688 <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 800b686:	2300      	movs	r3, #0
}
 800b688:	4618      	mov	r0, r3
 800b68a:	3718      	adds	r7, #24
 800b68c:	46bd      	mov	sp, r7
 800b68e:	bd80      	pop	{r7, pc}

0800b690 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800b690:	b580      	push	{r7, lr}
 800b692:	b086      	sub	sp, #24
 800b694:	af00      	add	r7, sp, #0
 800b696:	60f8      	str	r0, [r7, #12]
 800b698:	460b      	mov	r3, r1
 800b69a:	607a      	str	r2, [r7, #4]
 800b69c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800b69e:	7afb      	ldrb	r3, [r7, #11]
 800b6a0:	2b00      	cmp	r3, #0
 800b6a2:	d16a      	bne.n	800b77a <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 800b6a4:	68fb      	ldr	r3, [r7, #12]
 800b6a6:	3314      	adds	r3, #20
 800b6a8:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800b6aa:	68fb      	ldr	r3, [r7, #12]
 800b6ac:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800b6b0:	2b02      	cmp	r3, #2
 800b6b2:	d155      	bne.n	800b760 <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 800b6b4:	693b      	ldr	r3, [r7, #16]
 800b6b6:	689a      	ldr	r2, [r3, #8]
 800b6b8:	693b      	ldr	r3, [r7, #16]
 800b6ba:	68db      	ldr	r3, [r3, #12]
 800b6bc:	429a      	cmp	r2, r3
 800b6be:	d914      	bls.n	800b6ea <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800b6c0:	693b      	ldr	r3, [r7, #16]
 800b6c2:	689a      	ldr	r2, [r3, #8]
 800b6c4:	693b      	ldr	r3, [r7, #16]
 800b6c6:	68db      	ldr	r3, [r3, #12]
 800b6c8:	1ad2      	subs	r2, r2, r3
 800b6ca:	693b      	ldr	r3, [r7, #16]
 800b6cc:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800b6ce:	693b      	ldr	r3, [r7, #16]
 800b6d0:	689b      	ldr	r3, [r3, #8]
 800b6d2:	461a      	mov	r2, r3
 800b6d4:	6879      	ldr	r1, [r7, #4]
 800b6d6:	68f8      	ldr	r0, [r7, #12]
 800b6d8:	f000 ff22 	bl	800c520 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b6dc:	2300      	movs	r3, #0
 800b6de:	2200      	movs	r2, #0
 800b6e0:	2100      	movs	r1, #0
 800b6e2:	68f8      	ldr	r0, [r7, #12]
 800b6e4:	f001 fc2a 	bl	800cf3c <USBD_LL_PrepareReceive>
 800b6e8:	e03a      	b.n	800b760 <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800b6ea:	693b      	ldr	r3, [r7, #16]
 800b6ec:	68da      	ldr	r2, [r3, #12]
 800b6ee:	693b      	ldr	r3, [r7, #16]
 800b6f0:	689b      	ldr	r3, [r3, #8]
 800b6f2:	429a      	cmp	r2, r3
 800b6f4:	d11c      	bne.n	800b730 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800b6f6:	693b      	ldr	r3, [r7, #16]
 800b6f8:	685a      	ldr	r2, [r3, #4]
 800b6fa:	693b      	ldr	r3, [r7, #16]
 800b6fc:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800b6fe:	429a      	cmp	r2, r3
 800b700:	d316      	bcc.n	800b730 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800b702:	693b      	ldr	r3, [r7, #16]
 800b704:	685a      	ldr	r2, [r3, #4]
 800b706:	68fb      	ldr	r3, [r7, #12]
 800b708:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800b70c:	429a      	cmp	r2, r3
 800b70e:	d20f      	bcs.n	800b730 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800b710:	2200      	movs	r2, #0
 800b712:	2100      	movs	r1, #0
 800b714:	68f8      	ldr	r0, [r7, #12]
 800b716:	f000 ff03 	bl	800c520 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800b71a:	68fb      	ldr	r3, [r7, #12]
 800b71c:	2200      	movs	r2, #0
 800b71e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b722:	2300      	movs	r3, #0
 800b724:	2200      	movs	r2, #0
 800b726:	2100      	movs	r1, #0
 800b728:	68f8      	ldr	r0, [r7, #12]
 800b72a:	f001 fc07 	bl	800cf3c <USBD_LL_PrepareReceive>
 800b72e:	e017      	b.n	800b760 <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800b730:	68fb      	ldr	r3, [r7, #12]
 800b732:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b736:	68db      	ldr	r3, [r3, #12]
 800b738:	2b00      	cmp	r3, #0
 800b73a:	d00a      	beq.n	800b752 <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800b73c:	68fb      	ldr	r3, [r7, #12]
 800b73e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800b742:	2b03      	cmp	r3, #3
 800b744:	d105      	bne.n	800b752 <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800b746:	68fb      	ldr	r3, [r7, #12]
 800b748:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b74c:	68db      	ldr	r3, [r3, #12]
 800b74e:	68f8      	ldr	r0, [r7, #12]
 800b750:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800b752:	2180      	movs	r1, #128	; 0x80
 800b754:	68f8      	ldr	r0, [r7, #12]
 800b756:	f001 fb47 	bl	800cde8 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800b75a:	68f8      	ldr	r0, [r7, #12]
 800b75c:	f000 ff32 	bl	800c5c4 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800b760:	68fb      	ldr	r3, [r7, #12]
 800b762:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800b766:	2b01      	cmp	r3, #1
 800b768:	d123      	bne.n	800b7b2 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800b76a:	68f8      	ldr	r0, [r7, #12]
 800b76c:	f7ff fe9b 	bl	800b4a6 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800b770:	68fb      	ldr	r3, [r7, #12]
 800b772:	2200      	movs	r2, #0
 800b774:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800b778:	e01b      	b.n	800b7b2 <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800b77a:	68fb      	ldr	r3, [r7, #12]
 800b77c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b780:	695b      	ldr	r3, [r3, #20]
 800b782:	2b00      	cmp	r3, #0
 800b784:	d013      	beq.n	800b7ae <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800b786:	68fb      	ldr	r3, [r7, #12]
 800b788:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800b78c:	2b03      	cmp	r3, #3
 800b78e:	d10e      	bne.n	800b7ae <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800b790:	68fb      	ldr	r3, [r7, #12]
 800b792:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b796:	695b      	ldr	r3, [r3, #20]
 800b798:	7afa      	ldrb	r2, [r7, #11]
 800b79a:	4611      	mov	r1, r2
 800b79c:	68f8      	ldr	r0, [r7, #12]
 800b79e:	4798      	blx	r3
 800b7a0:	4603      	mov	r3, r0
 800b7a2:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 800b7a4:	7dfb      	ldrb	r3, [r7, #23]
 800b7a6:	2b00      	cmp	r3, #0
 800b7a8:	d003      	beq.n	800b7b2 <USBD_LL_DataInStage+0x122>
    {
      return ret;
 800b7aa:	7dfb      	ldrb	r3, [r7, #23]
 800b7ac:	e002      	b.n	800b7b4 <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800b7ae:	2303      	movs	r3, #3
 800b7b0:	e000      	b.n	800b7b4 <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 800b7b2:	2300      	movs	r3, #0
}
 800b7b4:	4618      	mov	r0, r3
 800b7b6:	3718      	adds	r7, #24
 800b7b8:	46bd      	mov	sp, r7
 800b7ba:	bd80      	pop	{r7, pc}

0800b7bc <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800b7bc:	b580      	push	{r7, lr}
 800b7be:	b082      	sub	sp, #8
 800b7c0:	af00      	add	r7, sp, #0
 800b7c2:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b7c4:	687b      	ldr	r3, [r7, #4]
 800b7c6:	2201      	movs	r2, #1
 800b7c8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800b7cc:	687b      	ldr	r3, [r7, #4]
 800b7ce:	2200      	movs	r2, #0
 800b7d0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800b7d4:	687b      	ldr	r3, [r7, #4]
 800b7d6:	2200      	movs	r2, #0
 800b7d8:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800b7da:	687b      	ldr	r3, [r7, #4]
 800b7dc:	2200      	movs	r2, #0
 800b7de:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 800b7e2:	687b      	ldr	r3, [r7, #4]
 800b7e4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b7e8:	2b00      	cmp	r3, #0
 800b7ea:	d009      	beq.n	800b800 <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800b7ec:	687b      	ldr	r3, [r7, #4]
 800b7ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b7f2:	685b      	ldr	r3, [r3, #4]
 800b7f4:	687a      	ldr	r2, [r7, #4]
 800b7f6:	6852      	ldr	r2, [r2, #4]
 800b7f8:	b2d2      	uxtb	r2, r2
 800b7fa:	4611      	mov	r1, r2
 800b7fc:	6878      	ldr	r0, [r7, #4]
 800b7fe:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b800:	2340      	movs	r3, #64	; 0x40
 800b802:	2200      	movs	r2, #0
 800b804:	2100      	movs	r1, #0
 800b806:	6878      	ldr	r0, [r7, #4]
 800b808:	f001 faa9 	bl	800cd5e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800b80c:	687b      	ldr	r3, [r7, #4]
 800b80e:	2201      	movs	r2, #1
 800b810:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800b814:	687b      	ldr	r3, [r7, #4]
 800b816:	2240      	movs	r2, #64	; 0x40
 800b818:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b81c:	2340      	movs	r3, #64	; 0x40
 800b81e:	2200      	movs	r2, #0
 800b820:	2180      	movs	r1, #128	; 0x80
 800b822:	6878      	ldr	r0, [r7, #4]
 800b824:	f001 fa9b 	bl	800cd5e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800b828:	687b      	ldr	r3, [r7, #4]
 800b82a:	2201      	movs	r2, #1
 800b82c:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800b82e:	687b      	ldr	r3, [r7, #4]
 800b830:	2240      	movs	r2, #64	; 0x40
 800b832:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800b834:	2300      	movs	r3, #0
}
 800b836:	4618      	mov	r0, r3
 800b838:	3708      	adds	r7, #8
 800b83a:	46bd      	mov	sp, r7
 800b83c:	bd80      	pop	{r7, pc}

0800b83e <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800b83e:	b480      	push	{r7}
 800b840:	b083      	sub	sp, #12
 800b842:	af00      	add	r7, sp, #0
 800b844:	6078      	str	r0, [r7, #4]
 800b846:	460b      	mov	r3, r1
 800b848:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800b84a:	687b      	ldr	r3, [r7, #4]
 800b84c:	78fa      	ldrb	r2, [r7, #3]
 800b84e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800b850:	2300      	movs	r3, #0
}
 800b852:	4618      	mov	r0, r3
 800b854:	370c      	adds	r7, #12
 800b856:	46bd      	mov	sp, r7
 800b858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b85c:	4770      	bx	lr

0800b85e <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800b85e:	b480      	push	{r7}
 800b860:	b083      	sub	sp, #12
 800b862:	af00      	add	r7, sp, #0
 800b864:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800b866:	687b      	ldr	r3, [r7, #4]
 800b868:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800b872:	687b      	ldr	r3, [r7, #4]
 800b874:	2204      	movs	r2, #4
 800b876:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800b87a:	2300      	movs	r3, #0
}
 800b87c:	4618      	mov	r0, r3
 800b87e:	370c      	adds	r7, #12
 800b880:	46bd      	mov	sp, r7
 800b882:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b886:	4770      	bx	lr

0800b888 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800b888:	b480      	push	{r7}
 800b88a:	b083      	sub	sp, #12
 800b88c:	af00      	add	r7, sp, #0
 800b88e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800b890:	687b      	ldr	r3, [r7, #4]
 800b892:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b896:	2b04      	cmp	r3, #4
 800b898:	d105      	bne.n	800b8a6 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800b89a:	687b      	ldr	r3, [r7, #4]
 800b89c:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 800b8a0:	687b      	ldr	r3, [r7, #4]
 800b8a2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800b8a6:	2300      	movs	r3, #0
}
 800b8a8:	4618      	mov	r0, r3
 800b8aa:	370c      	adds	r7, #12
 800b8ac:	46bd      	mov	sp, r7
 800b8ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8b2:	4770      	bx	lr

0800b8b4 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800b8b4:	b580      	push	{r7, lr}
 800b8b6:	b082      	sub	sp, #8
 800b8b8:	af00      	add	r7, sp, #0
 800b8ba:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b8bc:	687b      	ldr	r3, [r7, #4]
 800b8be:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b8c2:	2b03      	cmp	r3, #3
 800b8c4:	d10b      	bne.n	800b8de <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800b8c6:	687b      	ldr	r3, [r7, #4]
 800b8c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b8cc:	69db      	ldr	r3, [r3, #28]
 800b8ce:	2b00      	cmp	r3, #0
 800b8d0:	d005      	beq.n	800b8de <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800b8d2:	687b      	ldr	r3, [r7, #4]
 800b8d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b8d8:	69db      	ldr	r3, [r3, #28]
 800b8da:	6878      	ldr	r0, [r7, #4]
 800b8dc:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800b8de:	2300      	movs	r3, #0
}
 800b8e0:	4618      	mov	r0, r3
 800b8e2:	3708      	adds	r7, #8
 800b8e4:	46bd      	mov	sp, r7
 800b8e6:	bd80      	pop	{r7, pc}

0800b8e8 <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800b8e8:	b480      	push	{r7}
 800b8ea:	b083      	sub	sp, #12
 800b8ec:	af00      	add	r7, sp, #0
 800b8ee:	6078      	str	r0, [r7, #4]
 800b8f0:	460b      	mov	r3, r1
 800b8f2:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800b8f4:	2300      	movs	r3, #0
}
 800b8f6:	4618      	mov	r0, r3
 800b8f8:	370c      	adds	r7, #12
 800b8fa:	46bd      	mov	sp, r7
 800b8fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b900:	4770      	bx	lr

0800b902 <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800b902:	b480      	push	{r7}
 800b904:	b083      	sub	sp, #12
 800b906:	af00      	add	r7, sp, #0
 800b908:	6078      	str	r0, [r7, #4]
 800b90a:	460b      	mov	r3, r1
 800b90c:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800b90e:	2300      	movs	r3, #0
}
 800b910:	4618      	mov	r0, r3
 800b912:	370c      	adds	r7, #12
 800b914:	46bd      	mov	sp, r7
 800b916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b91a:	4770      	bx	lr

0800b91c <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800b91c:	b480      	push	{r7}
 800b91e:	b083      	sub	sp, #12
 800b920:	af00      	add	r7, sp, #0
 800b922:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800b924:	2300      	movs	r3, #0
}
 800b926:	4618      	mov	r0, r3
 800b928:	370c      	adds	r7, #12
 800b92a:	46bd      	mov	sp, r7
 800b92c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b930:	4770      	bx	lr

0800b932 <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800b932:	b580      	push	{r7, lr}
 800b934:	b082      	sub	sp, #8
 800b936:	af00      	add	r7, sp, #0
 800b938:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b93a:	687b      	ldr	r3, [r7, #4]
 800b93c:	2201      	movs	r2, #1
 800b93e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 800b942:	687b      	ldr	r3, [r7, #4]
 800b944:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b948:	2b00      	cmp	r3, #0
 800b94a:	d009      	beq.n	800b960 <USBD_LL_DevDisconnected+0x2e>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800b94c:	687b      	ldr	r3, [r7, #4]
 800b94e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b952:	685b      	ldr	r3, [r3, #4]
 800b954:	687a      	ldr	r2, [r7, #4]
 800b956:	6852      	ldr	r2, [r2, #4]
 800b958:	b2d2      	uxtb	r2, r2
 800b95a:	4611      	mov	r1, r2
 800b95c:	6878      	ldr	r0, [r7, #4]
 800b95e:	4798      	blx	r3
  }

  return USBD_OK;
 800b960:	2300      	movs	r3, #0
}
 800b962:	4618      	mov	r0, r3
 800b964:	3708      	adds	r7, #8
 800b966:	46bd      	mov	sp, r7
 800b968:	bd80      	pop	{r7, pc}

0800b96a <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800b96a:	b480      	push	{r7}
 800b96c:	b087      	sub	sp, #28
 800b96e:	af00      	add	r7, sp, #0
 800b970:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800b972:	687b      	ldr	r3, [r7, #4]
 800b974:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800b976:	697b      	ldr	r3, [r7, #20]
 800b978:	781b      	ldrb	r3, [r3, #0]
 800b97a:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800b97c:	697b      	ldr	r3, [r7, #20]
 800b97e:	3301      	adds	r3, #1
 800b980:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800b982:	697b      	ldr	r3, [r7, #20]
 800b984:	781b      	ldrb	r3, [r3, #0]
 800b986:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800b988:	8a3b      	ldrh	r3, [r7, #16]
 800b98a:	021b      	lsls	r3, r3, #8
 800b98c:	b21a      	sxth	r2, r3
 800b98e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800b992:	4313      	orrs	r3, r2
 800b994:	b21b      	sxth	r3, r3
 800b996:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800b998:	89fb      	ldrh	r3, [r7, #14]
}
 800b99a:	4618      	mov	r0, r3
 800b99c:	371c      	adds	r7, #28
 800b99e:	46bd      	mov	sp, r7
 800b9a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9a4:	4770      	bx	lr
	...

0800b9a8 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b9a8:	b580      	push	{r7, lr}
 800b9aa:	b084      	sub	sp, #16
 800b9ac:	af00      	add	r7, sp, #0
 800b9ae:	6078      	str	r0, [r7, #4]
 800b9b0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b9b2:	2300      	movs	r3, #0
 800b9b4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b9b6:	683b      	ldr	r3, [r7, #0]
 800b9b8:	781b      	ldrb	r3, [r3, #0]
 800b9ba:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b9be:	2b20      	cmp	r3, #32
 800b9c0:	d004      	beq.n	800b9cc <USBD_StdDevReq+0x24>
 800b9c2:	2b40      	cmp	r3, #64	; 0x40
 800b9c4:	d002      	beq.n	800b9cc <USBD_StdDevReq+0x24>
 800b9c6:	2b00      	cmp	r3, #0
 800b9c8:	d00a      	beq.n	800b9e0 <USBD_StdDevReq+0x38>
 800b9ca:	e050      	b.n	800ba6e <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800b9cc:	687b      	ldr	r3, [r7, #4]
 800b9ce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b9d2:	689b      	ldr	r3, [r3, #8]
 800b9d4:	6839      	ldr	r1, [r7, #0]
 800b9d6:	6878      	ldr	r0, [r7, #4]
 800b9d8:	4798      	blx	r3
 800b9da:	4603      	mov	r3, r0
 800b9dc:	73fb      	strb	r3, [r7, #15]
    break;
 800b9de:	e04b      	b.n	800ba78 <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800b9e0:	683b      	ldr	r3, [r7, #0]
 800b9e2:	785b      	ldrb	r3, [r3, #1]
 800b9e4:	2b09      	cmp	r3, #9
 800b9e6:	d83c      	bhi.n	800ba62 <USBD_StdDevReq+0xba>
 800b9e8:	a201      	add	r2, pc, #4	; (adr r2, 800b9f0 <USBD_StdDevReq+0x48>)
 800b9ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b9ee:	bf00      	nop
 800b9f0:	0800ba45 	.word	0x0800ba45
 800b9f4:	0800ba59 	.word	0x0800ba59
 800b9f8:	0800ba63 	.word	0x0800ba63
 800b9fc:	0800ba4f 	.word	0x0800ba4f
 800ba00:	0800ba63 	.word	0x0800ba63
 800ba04:	0800ba23 	.word	0x0800ba23
 800ba08:	0800ba19 	.word	0x0800ba19
 800ba0c:	0800ba63 	.word	0x0800ba63
 800ba10:	0800ba3b 	.word	0x0800ba3b
 800ba14:	0800ba2d 	.word	0x0800ba2d
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 800ba18:	6839      	ldr	r1, [r7, #0]
 800ba1a:	6878      	ldr	r0, [r7, #4]
 800ba1c:	f000 f9ce 	bl	800bdbc <USBD_GetDescriptor>
      break;
 800ba20:	e024      	b.n	800ba6c <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 800ba22:	6839      	ldr	r1, [r7, #0]
 800ba24:	6878      	ldr	r0, [r7, #4]
 800ba26:	f000 fb33 	bl	800c090 <USBD_SetAddress>
      break;
 800ba2a:	e01f      	b.n	800ba6c <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 800ba2c:	6839      	ldr	r1, [r7, #0]
 800ba2e:	6878      	ldr	r0, [r7, #4]
 800ba30:	f000 fb70 	bl	800c114 <USBD_SetConfig>
 800ba34:	4603      	mov	r3, r0
 800ba36:	73fb      	strb	r3, [r7, #15]
      break;
 800ba38:	e018      	b.n	800ba6c <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 800ba3a:	6839      	ldr	r1, [r7, #0]
 800ba3c:	6878      	ldr	r0, [r7, #4]
 800ba3e:	f000 fc0d 	bl	800c25c <USBD_GetConfig>
      break;
 800ba42:	e013      	b.n	800ba6c <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 800ba44:	6839      	ldr	r1, [r7, #0]
 800ba46:	6878      	ldr	r0, [r7, #4]
 800ba48:	f000 fc3c 	bl	800c2c4 <USBD_GetStatus>
      break;
 800ba4c:	e00e      	b.n	800ba6c <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 800ba4e:	6839      	ldr	r1, [r7, #0]
 800ba50:	6878      	ldr	r0, [r7, #4]
 800ba52:	f000 fc6a 	bl	800c32a <USBD_SetFeature>
      break;
 800ba56:	e009      	b.n	800ba6c <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 800ba58:	6839      	ldr	r1, [r7, #0]
 800ba5a:	6878      	ldr	r0, [r7, #4]
 800ba5c:	f000 fc79 	bl	800c352 <USBD_ClrFeature>
      break;
 800ba60:	e004      	b.n	800ba6c <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 800ba62:	6839      	ldr	r1, [r7, #0]
 800ba64:	6878      	ldr	r0, [r7, #4]
 800ba66:	f000 fccf 	bl	800c408 <USBD_CtlError>
      break;
 800ba6a:	bf00      	nop
    }
    break;
 800ba6c:	e004      	b.n	800ba78 <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 800ba6e:	6839      	ldr	r1, [r7, #0]
 800ba70:	6878      	ldr	r0, [r7, #4]
 800ba72:	f000 fcc9 	bl	800c408 <USBD_CtlError>
    break;
 800ba76:	bf00      	nop
  }

  return ret;
 800ba78:	7bfb      	ldrb	r3, [r7, #15]
}
 800ba7a:	4618      	mov	r0, r3
 800ba7c:	3710      	adds	r7, #16
 800ba7e:	46bd      	mov	sp, r7
 800ba80:	bd80      	pop	{r7, pc}
 800ba82:	bf00      	nop

0800ba84 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ba84:	b580      	push	{r7, lr}
 800ba86:	b084      	sub	sp, #16
 800ba88:	af00      	add	r7, sp, #0
 800ba8a:	6078      	str	r0, [r7, #4]
 800ba8c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800ba8e:	2300      	movs	r3, #0
 800ba90:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ba92:	683b      	ldr	r3, [r7, #0]
 800ba94:	781b      	ldrb	r3, [r3, #0]
 800ba96:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800ba9a:	2b20      	cmp	r3, #32
 800ba9c:	d003      	beq.n	800baa6 <USBD_StdItfReq+0x22>
 800ba9e:	2b40      	cmp	r3, #64	; 0x40
 800baa0:	d001      	beq.n	800baa6 <USBD_StdItfReq+0x22>
 800baa2:	2b00      	cmp	r3, #0
 800baa4:	d12a      	bne.n	800bafc <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 800baa6:	687b      	ldr	r3, [r7, #4]
 800baa8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800baac:	3b01      	subs	r3, #1
 800baae:	2b02      	cmp	r3, #2
 800bab0:	d81d      	bhi.n	800baee <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800bab2:	683b      	ldr	r3, [r7, #0]
 800bab4:	889b      	ldrh	r3, [r3, #4]
 800bab6:	b2db      	uxtb	r3, r3
 800bab8:	2b01      	cmp	r3, #1
 800baba:	d813      	bhi.n	800bae4 <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800babc:	687b      	ldr	r3, [r7, #4]
 800babe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bac2:	689b      	ldr	r3, [r3, #8]
 800bac4:	6839      	ldr	r1, [r7, #0]
 800bac6:	6878      	ldr	r0, [r7, #4]
 800bac8:	4798      	blx	r3
 800baca:	4603      	mov	r3, r0
 800bacc:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 800bace:	683b      	ldr	r3, [r7, #0]
 800bad0:	88db      	ldrh	r3, [r3, #6]
 800bad2:	2b00      	cmp	r3, #0
 800bad4:	d110      	bne.n	800baf8 <USBD_StdItfReq+0x74>
 800bad6:	7bfb      	ldrb	r3, [r7, #15]
 800bad8:	2b00      	cmp	r3, #0
 800bada:	d10d      	bne.n	800baf8 <USBD_StdItfReq+0x74>
        {
          (void)USBD_CtlSendStatus(pdev);
 800badc:	6878      	ldr	r0, [r7, #4]
 800bade:	f000 fd5e 	bl	800c59e <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 800bae2:	e009      	b.n	800baf8 <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 800bae4:	6839      	ldr	r1, [r7, #0]
 800bae6:	6878      	ldr	r0, [r7, #4]
 800bae8:	f000 fc8e 	bl	800c408 <USBD_CtlError>
      break;
 800baec:	e004      	b.n	800baf8 <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 800baee:	6839      	ldr	r1, [r7, #0]
 800baf0:	6878      	ldr	r0, [r7, #4]
 800baf2:	f000 fc89 	bl	800c408 <USBD_CtlError>
      break;
 800baf6:	e000      	b.n	800bafa <USBD_StdItfReq+0x76>
      break;
 800baf8:	bf00      	nop
    }
    break;
 800bafa:	e004      	b.n	800bb06 <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 800bafc:	6839      	ldr	r1, [r7, #0]
 800bafe:	6878      	ldr	r0, [r7, #4]
 800bb00:	f000 fc82 	bl	800c408 <USBD_CtlError>
    break;
 800bb04:	bf00      	nop
  }

  return ret;
 800bb06:	7bfb      	ldrb	r3, [r7, #15]
}
 800bb08:	4618      	mov	r0, r3
 800bb0a:	3710      	adds	r7, #16
 800bb0c:	46bd      	mov	sp, r7
 800bb0e:	bd80      	pop	{r7, pc}

0800bb10 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bb10:	b580      	push	{r7, lr}
 800bb12:	b084      	sub	sp, #16
 800bb14:	af00      	add	r7, sp, #0
 800bb16:	6078      	str	r0, [r7, #4]
 800bb18:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800bb1a:	2300      	movs	r3, #0
 800bb1c:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800bb1e:	683b      	ldr	r3, [r7, #0]
 800bb20:	889b      	ldrh	r3, [r3, #4]
 800bb22:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800bb24:	683b      	ldr	r3, [r7, #0]
 800bb26:	781b      	ldrb	r3, [r3, #0]
 800bb28:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800bb2c:	2b20      	cmp	r3, #32
 800bb2e:	d004      	beq.n	800bb3a <USBD_StdEPReq+0x2a>
 800bb30:	2b40      	cmp	r3, #64	; 0x40
 800bb32:	d002      	beq.n	800bb3a <USBD_StdEPReq+0x2a>
 800bb34:	2b00      	cmp	r3, #0
 800bb36:	d00a      	beq.n	800bb4e <USBD_StdEPReq+0x3e>
 800bb38:	e135      	b.n	800bda6 <USBD_StdEPReq+0x296>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800bb3a:	687b      	ldr	r3, [r7, #4]
 800bb3c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bb40:	689b      	ldr	r3, [r3, #8]
 800bb42:	6839      	ldr	r1, [r7, #0]
 800bb44:	6878      	ldr	r0, [r7, #4]
 800bb46:	4798      	blx	r3
 800bb48:	4603      	mov	r3, r0
 800bb4a:	73fb      	strb	r3, [r7, #15]
    break;
 800bb4c:	e130      	b.n	800bdb0 <USBD_StdEPReq+0x2a0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800bb4e:	683b      	ldr	r3, [r7, #0]
 800bb50:	785b      	ldrb	r3, [r3, #1]
 800bb52:	2b01      	cmp	r3, #1
 800bb54:	d03e      	beq.n	800bbd4 <USBD_StdEPReq+0xc4>
 800bb56:	2b03      	cmp	r3, #3
 800bb58:	d002      	beq.n	800bb60 <USBD_StdEPReq+0x50>
 800bb5a:	2b00      	cmp	r3, #0
 800bb5c:	d077      	beq.n	800bc4e <USBD_StdEPReq+0x13e>
 800bb5e:	e11c      	b.n	800bd9a <USBD_StdEPReq+0x28a>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 800bb60:	687b      	ldr	r3, [r7, #4]
 800bb62:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bb66:	2b02      	cmp	r3, #2
 800bb68:	d002      	beq.n	800bb70 <USBD_StdEPReq+0x60>
 800bb6a:	2b03      	cmp	r3, #3
 800bb6c:	d015      	beq.n	800bb9a <USBD_StdEPReq+0x8a>
 800bb6e:	e02b      	b.n	800bbc8 <USBD_StdEPReq+0xb8>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800bb70:	7bbb      	ldrb	r3, [r7, #14]
 800bb72:	2b00      	cmp	r3, #0
 800bb74:	d00c      	beq.n	800bb90 <USBD_StdEPReq+0x80>
 800bb76:	7bbb      	ldrb	r3, [r7, #14]
 800bb78:	2b80      	cmp	r3, #128	; 0x80
 800bb7a:	d009      	beq.n	800bb90 <USBD_StdEPReq+0x80>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 800bb7c:	7bbb      	ldrb	r3, [r7, #14]
 800bb7e:	4619      	mov	r1, r3
 800bb80:	6878      	ldr	r0, [r7, #4]
 800bb82:	f001 f931 	bl	800cde8 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800bb86:	2180      	movs	r1, #128	; 0x80
 800bb88:	6878      	ldr	r0, [r7, #4]
 800bb8a:	f001 f92d 	bl	800cde8 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800bb8e:	e020      	b.n	800bbd2 <USBD_StdEPReq+0xc2>
          USBD_CtlError(pdev, req);
 800bb90:	6839      	ldr	r1, [r7, #0]
 800bb92:	6878      	ldr	r0, [r7, #4]
 800bb94:	f000 fc38 	bl	800c408 <USBD_CtlError>
        break;
 800bb98:	e01b      	b.n	800bbd2 <USBD_StdEPReq+0xc2>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800bb9a:	683b      	ldr	r3, [r7, #0]
 800bb9c:	885b      	ldrh	r3, [r3, #2]
 800bb9e:	2b00      	cmp	r3, #0
 800bba0:	d10e      	bne.n	800bbc0 <USBD_StdEPReq+0xb0>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800bba2:	7bbb      	ldrb	r3, [r7, #14]
 800bba4:	2b00      	cmp	r3, #0
 800bba6:	d00b      	beq.n	800bbc0 <USBD_StdEPReq+0xb0>
 800bba8:	7bbb      	ldrb	r3, [r7, #14]
 800bbaa:	2b80      	cmp	r3, #128	; 0x80
 800bbac:	d008      	beq.n	800bbc0 <USBD_StdEPReq+0xb0>
 800bbae:	683b      	ldr	r3, [r7, #0]
 800bbb0:	88db      	ldrh	r3, [r3, #6]
 800bbb2:	2b00      	cmp	r3, #0
 800bbb4:	d104      	bne.n	800bbc0 <USBD_StdEPReq+0xb0>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 800bbb6:	7bbb      	ldrb	r3, [r7, #14]
 800bbb8:	4619      	mov	r1, r3
 800bbba:	6878      	ldr	r0, [r7, #4]
 800bbbc:	f001 f914 	bl	800cde8 <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 800bbc0:	6878      	ldr	r0, [r7, #4]
 800bbc2:	f000 fcec 	bl	800c59e <USBD_CtlSendStatus>

        break;
 800bbc6:	e004      	b.n	800bbd2 <USBD_StdEPReq+0xc2>

      default:
        USBD_CtlError(pdev, req);
 800bbc8:	6839      	ldr	r1, [r7, #0]
 800bbca:	6878      	ldr	r0, [r7, #4]
 800bbcc:	f000 fc1c 	bl	800c408 <USBD_CtlError>
        break;
 800bbd0:	bf00      	nop
      }
      break;
 800bbd2:	e0e7      	b.n	800bda4 <USBD_StdEPReq+0x294>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 800bbd4:	687b      	ldr	r3, [r7, #4]
 800bbd6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bbda:	2b02      	cmp	r3, #2
 800bbdc:	d002      	beq.n	800bbe4 <USBD_StdEPReq+0xd4>
 800bbde:	2b03      	cmp	r3, #3
 800bbe0:	d015      	beq.n	800bc0e <USBD_StdEPReq+0xfe>
 800bbe2:	e02d      	b.n	800bc40 <USBD_StdEPReq+0x130>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800bbe4:	7bbb      	ldrb	r3, [r7, #14]
 800bbe6:	2b00      	cmp	r3, #0
 800bbe8:	d00c      	beq.n	800bc04 <USBD_StdEPReq+0xf4>
 800bbea:	7bbb      	ldrb	r3, [r7, #14]
 800bbec:	2b80      	cmp	r3, #128	; 0x80
 800bbee:	d009      	beq.n	800bc04 <USBD_StdEPReq+0xf4>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 800bbf0:	7bbb      	ldrb	r3, [r7, #14]
 800bbf2:	4619      	mov	r1, r3
 800bbf4:	6878      	ldr	r0, [r7, #4]
 800bbf6:	f001 f8f7 	bl	800cde8 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800bbfa:	2180      	movs	r1, #128	; 0x80
 800bbfc:	6878      	ldr	r0, [r7, #4]
 800bbfe:	f001 f8f3 	bl	800cde8 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800bc02:	e023      	b.n	800bc4c <USBD_StdEPReq+0x13c>
          USBD_CtlError(pdev, req);
 800bc04:	6839      	ldr	r1, [r7, #0]
 800bc06:	6878      	ldr	r0, [r7, #4]
 800bc08:	f000 fbfe 	bl	800c408 <USBD_CtlError>
        break;
 800bc0c:	e01e      	b.n	800bc4c <USBD_StdEPReq+0x13c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800bc0e:	683b      	ldr	r3, [r7, #0]
 800bc10:	885b      	ldrh	r3, [r3, #2]
 800bc12:	2b00      	cmp	r3, #0
 800bc14:	d119      	bne.n	800bc4a <USBD_StdEPReq+0x13a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 800bc16:	7bbb      	ldrb	r3, [r7, #14]
 800bc18:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bc1c:	2b00      	cmp	r3, #0
 800bc1e:	d004      	beq.n	800bc2a <USBD_StdEPReq+0x11a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800bc20:	7bbb      	ldrb	r3, [r7, #14]
 800bc22:	4619      	mov	r1, r3
 800bc24:	6878      	ldr	r0, [r7, #4]
 800bc26:	f001 f8fe 	bl	800ce26 <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 800bc2a:	6878      	ldr	r0, [r7, #4]
 800bc2c:	f000 fcb7 	bl	800c59e <USBD_CtlSendStatus>
          (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800bc30:	687b      	ldr	r3, [r7, #4]
 800bc32:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bc36:	689b      	ldr	r3, [r3, #8]
 800bc38:	6839      	ldr	r1, [r7, #0]
 800bc3a:	6878      	ldr	r0, [r7, #4]
 800bc3c:	4798      	blx	r3
        }
        break;
 800bc3e:	e004      	b.n	800bc4a <USBD_StdEPReq+0x13a>

      default:
        USBD_CtlError(pdev, req);
 800bc40:	6839      	ldr	r1, [r7, #0]
 800bc42:	6878      	ldr	r0, [r7, #4]
 800bc44:	f000 fbe0 	bl	800c408 <USBD_CtlError>
        break;
 800bc48:	e000      	b.n	800bc4c <USBD_StdEPReq+0x13c>
        break;
 800bc4a:	bf00      	nop
      }
      break;
 800bc4c:	e0aa      	b.n	800bda4 <USBD_StdEPReq+0x294>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 800bc4e:	687b      	ldr	r3, [r7, #4]
 800bc50:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bc54:	2b02      	cmp	r3, #2
 800bc56:	d002      	beq.n	800bc5e <USBD_StdEPReq+0x14e>
 800bc58:	2b03      	cmp	r3, #3
 800bc5a:	d032      	beq.n	800bcc2 <USBD_StdEPReq+0x1b2>
 800bc5c:	e097      	b.n	800bd8e <USBD_StdEPReq+0x27e>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800bc5e:	7bbb      	ldrb	r3, [r7, #14]
 800bc60:	2b00      	cmp	r3, #0
 800bc62:	d007      	beq.n	800bc74 <USBD_StdEPReq+0x164>
 800bc64:	7bbb      	ldrb	r3, [r7, #14]
 800bc66:	2b80      	cmp	r3, #128	; 0x80
 800bc68:	d004      	beq.n	800bc74 <USBD_StdEPReq+0x164>
        {
          USBD_CtlError(pdev, req);
 800bc6a:	6839      	ldr	r1, [r7, #0]
 800bc6c:	6878      	ldr	r0, [r7, #4]
 800bc6e:	f000 fbcb 	bl	800c408 <USBD_CtlError>
          break;
 800bc72:	e091      	b.n	800bd98 <USBD_StdEPReq+0x288>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800bc74:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800bc78:	2b00      	cmp	r3, #0
 800bc7a:	da0b      	bge.n	800bc94 <USBD_StdEPReq+0x184>
 800bc7c:	7bbb      	ldrb	r3, [r7, #14]
 800bc7e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800bc82:	4613      	mov	r3, r2
 800bc84:	009b      	lsls	r3, r3, #2
 800bc86:	4413      	add	r3, r2
 800bc88:	009b      	lsls	r3, r3, #2
 800bc8a:	3310      	adds	r3, #16
 800bc8c:	687a      	ldr	r2, [r7, #4]
 800bc8e:	4413      	add	r3, r2
 800bc90:	3304      	adds	r3, #4
 800bc92:	e00b      	b.n	800bcac <USBD_StdEPReq+0x19c>
              &pdev->ep_out[ep_addr & 0x7FU];
 800bc94:	7bbb      	ldrb	r3, [r7, #14]
 800bc96:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800bc9a:	4613      	mov	r3, r2
 800bc9c:	009b      	lsls	r3, r3, #2
 800bc9e:	4413      	add	r3, r2
 800bca0:	009b      	lsls	r3, r3, #2
 800bca2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800bca6:	687a      	ldr	r2, [r7, #4]
 800bca8:	4413      	add	r3, r2
 800bcaa:	3304      	adds	r3, #4
 800bcac:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 800bcae:	68bb      	ldr	r3, [r7, #8]
 800bcb0:	2200      	movs	r2, #0
 800bcb2:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800bcb4:	68bb      	ldr	r3, [r7, #8]
 800bcb6:	2202      	movs	r2, #2
 800bcb8:	4619      	mov	r1, r3
 800bcba:	6878      	ldr	r0, [r7, #4]
 800bcbc:	f000 fc15 	bl	800c4ea <USBD_CtlSendData>
        break;
 800bcc0:	e06a      	b.n	800bd98 <USBD_StdEPReq+0x288>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 800bcc2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800bcc6:	2b00      	cmp	r3, #0
 800bcc8:	da11      	bge.n	800bcee <USBD_StdEPReq+0x1de>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800bcca:	7bbb      	ldrb	r3, [r7, #14]
 800bccc:	f003 020f 	and.w	r2, r3, #15
 800bcd0:	6879      	ldr	r1, [r7, #4]
 800bcd2:	4613      	mov	r3, r2
 800bcd4:	009b      	lsls	r3, r3, #2
 800bcd6:	4413      	add	r3, r2
 800bcd8:	009b      	lsls	r3, r3, #2
 800bcda:	440b      	add	r3, r1
 800bcdc:	3324      	adds	r3, #36	; 0x24
 800bcde:	881b      	ldrh	r3, [r3, #0]
 800bce0:	2b00      	cmp	r3, #0
 800bce2:	d117      	bne.n	800bd14 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 800bce4:	6839      	ldr	r1, [r7, #0]
 800bce6:	6878      	ldr	r0, [r7, #4]
 800bce8:	f000 fb8e 	bl	800c408 <USBD_CtlError>
            break;
 800bcec:	e054      	b.n	800bd98 <USBD_StdEPReq+0x288>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800bcee:	7bbb      	ldrb	r3, [r7, #14]
 800bcf0:	f003 020f 	and.w	r2, r3, #15
 800bcf4:	6879      	ldr	r1, [r7, #4]
 800bcf6:	4613      	mov	r3, r2
 800bcf8:	009b      	lsls	r3, r3, #2
 800bcfa:	4413      	add	r3, r2
 800bcfc:	009b      	lsls	r3, r3, #2
 800bcfe:	440b      	add	r3, r1
 800bd00:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800bd04:	881b      	ldrh	r3, [r3, #0]
 800bd06:	2b00      	cmp	r3, #0
 800bd08:	d104      	bne.n	800bd14 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 800bd0a:	6839      	ldr	r1, [r7, #0]
 800bd0c:	6878      	ldr	r0, [r7, #4]
 800bd0e:	f000 fb7b 	bl	800c408 <USBD_CtlError>
            break;
 800bd12:	e041      	b.n	800bd98 <USBD_StdEPReq+0x288>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800bd14:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800bd18:	2b00      	cmp	r3, #0
 800bd1a:	da0b      	bge.n	800bd34 <USBD_StdEPReq+0x224>
 800bd1c:	7bbb      	ldrb	r3, [r7, #14]
 800bd1e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800bd22:	4613      	mov	r3, r2
 800bd24:	009b      	lsls	r3, r3, #2
 800bd26:	4413      	add	r3, r2
 800bd28:	009b      	lsls	r3, r3, #2
 800bd2a:	3310      	adds	r3, #16
 800bd2c:	687a      	ldr	r2, [r7, #4]
 800bd2e:	4413      	add	r3, r2
 800bd30:	3304      	adds	r3, #4
 800bd32:	e00b      	b.n	800bd4c <USBD_StdEPReq+0x23c>
              &pdev->ep_out[ep_addr & 0x7FU];
 800bd34:	7bbb      	ldrb	r3, [r7, #14]
 800bd36:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800bd3a:	4613      	mov	r3, r2
 800bd3c:	009b      	lsls	r3, r3, #2
 800bd3e:	4413      	add	r3, r2
 800bd40:	009b      	lsls	r3, r3, #2
 800bd42:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800bd46:	687a      	ldr	r2, [r7, #4]
 800bd48:	4413      	add	r3, r2
 800bd4a:	3304      	adds	r3, #4
 800bd4c:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800bd4e:	7bbb      	ldrb	r3, [r7, #14]
 800bd50:	2b00      	cmp	r3, #0
 800bd52:	d002      	beq.n	800bd5a <USBD_StdEPReq+0x24a>
 800bd54:	7bbb      	ldrb	r3, [r7, #14]
 800bd56:	2b80      	cmp	r3, #128	; 0x80
 800bd58:	d103      	bne.n	800bd62 <USBD_StdEPReq+0x252>
          {
            pep->status = 0x0000U;
 800bd5a:	68bb      	ldr	r3, [r7, #8]
 800bd5c:	2200      	movs	r2, #0
 800bd5e:	601a      	str	r2, [r3, #0]
 800bd60:	e00e      	b.n	800bd80 <USBD_StdEPReq+0x270>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800bd62:	7bbb      	ldrb	r3, [r7, #14]
 800bd64:	4619      	mov	r1, r3
 800bd66:	6878      	ldr	r0, [r7, #4]
 800bd68:	f001 f87c 	bl	800ce64 <USBD_LL_IsStallEP>
 800bd6c:	4603      	mov	r3, r0
 800bd6e:	2b00      	cmp	r3, #0
 800bd70:	d003      	beq.n	800bd7a <USBD_StdEPReq+0x26a>
          {
            pep->status = 0x0001U;
 800bd72:	68bb      	ldr	r3, [r7, #8]
 800bd74:	2201      	movs	r2, #1
 800bd76:	601a      	str	r2, [r3, #0]
 800bd78:	e002      	b.n	800bd80 <USBD_StdEPReq+0x270>
          }
          else
          {
            pep->status = 0x0000U;
 800bd7a:	68bb      	ldr	r3, [r7, #8]
 800bd7c:	2200      	movs	r2, #0
 800bd7e:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800bd80:	68bb      	ldr	r3, [r7, #8]
 800bd82:	2202      	movs	r2, #2
 800bd84:	4619      	mov	r1, r3
 800bd86:	6878      	ldr	r0, [r7, #4]
 800bd88:	f000 fbaf 	bl	800c4ea <USBD_CtlSendData>
          break;
 800bd8c:	e004      	b.n	800bd98 <USBD_StdEPReq+0x288>

      default:
        USBD_CtlError(pdev, req);
 800bd8e:	6839      	ldr	r1, [r7, #0]
 800bd90:	6878      	ldr	r0, [r7, #4]
 800bd92:	f000 fb39 	bl	800c408 <USBD_CtlError>
        break;
 800bd96:	bf00      	nop
      }
      break;
 800bd98:	e004      	b.n	800bda4 <USBD_StdEPReq+0x294>

    default:
      USBD_CtlError(pdev, req);
 800bd9a:	6839      	ldr	r1, [r7, #0]
 800bd9c:	6878      	ldr	r0, [r7, #4]
 800bd9e:	f000 fb33 	bl	800c408 <USBD_CtlError>
      break;
 800bda2:	bf00      	nop
    }
    break;
 800bda4:	e004      	b.n	800bdb0 <USBD_StdEPReq+0x2a0>

  default:
    USBD_CtlError(pdev, req);
 800bda6:	6839      	ldr	r1, [r7, #0]
 800bda8:	6878      	ldr	r0, [r7, #4]
 800bdaa:	f000 fb2d 	bl	800c408 <USBD_CtlError>
    break;
 800bdae:	bf00      	nop
  }

  return ret;
 800bdb0:	7bfb      	ldrb	r3, [r7, #15]
}
 800bdb2:	4618      	mov	r0, r3
 800bdb4:	3710      	adds	r7, #16
 800bdb6:	46bd      	mov	sp, r7
 800bdb8:	bd80      	pop	{r7, pc}
	...

0800bdbc <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bdbc:	b580      	push	{r7, lr}
 800bdbe:	b084      	sub	sp, #16
 800bdc0:	af00      	add	r7, sp, #0
 800bdc2:	6078      	str	r0, [r7, #4]
 800bdc4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800bdc6:	2300      	movs	r3, #0
 800bdc8:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800bdca:	2300      	movs	r3, #0
 800bdcc:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800bdce:	2300      	movs	r3, #0
 800bdd0:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800bdd2:	683b      	ldr	r3, [r7, #0]
 800bdd4:	885b      	ldrh	r3, [r3, #2]
 800bdd6:	0a1b      	lsrs	r3, r3, #8
 800bdd8:	b29b      	uxth	r3, r3
 800bdda:	3b01      	subs	r3, #1
 800bddc:	2b06      	cmp	r3, #6
 800bdde:	f200 8128 	bhi.w	800c032 <USBD_GetDescriptor+0x276>
 800bde2:	a201      	add	r2, pc, #4	; (adr r2, 800bde8 <USBD_GetDescriptor+0x2c>)
 800bde4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bde8:	0800be05 	.word	0x0800be05
 800bdec:	0800be1d 	.word	0x0800be1d
 800bdf0:	0800be5d 	.word	0x0800be5d
 800bdf4:	0800c033 	.word	0x0800c033
 800bdf8:	0800c033 	.word	0x0800c033
 800bdfc:	0800bfd3 	.word	0x0800bfd3
 800be00:	0800bfff 	.word	0x0800bfff
      err++;
    }
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800be04:	687b      	ldr	r3, [r7, #4]
 800be06:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800be0a:	681b      	ldr	r3, [r3, #0]
 800be0c:	687a      	ldr	r2, [r7, #4]
 800be0e:	7c12      	ldrb	r2, [r2, #16]
 800be10:	f107 0108 	add.w	r1, r7, #8
 800be14:	4610      	mov	r0, r2
 800be16:	4798      	blx	r3
 800be18:	60f8      	str	r0, [r7, #12]
    break;
 800be1a:	e112      	b.n	800c042 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800be1c:	687b      	ldr	r3, [r7, #4]
 800be1e:	7c1b      	ldrb	r3, [r3, #16]
 800be20:	2b00      	cmp	r3, #0
 800be22:	d10d      	bne.n	800be40 <USBD_GetDescriptor+0x84>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800be24:	687b      	ldr	r3, [r7, #4]
 800be26:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800be2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800be2c:	f107 0208 	add.w	r2, r7, #8
 800be30:	4610      	mov	r0, r2
 800be32:	4798      	blx	r3
 800be34:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800be36:	68fb      	ldr	r3, [r7, #12]
 800be38:	3301      	adds	r3, #1
 800be3a:	2202      	movs	r2, #2
 800be3c:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 800be3e:	e100      	b.n	800c042 <USBD_GetDescriptor+0x286>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800be40:	687b      	ldr	r3, [r7, #4]
 800be42:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800be46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800be48:	f107 0208 	add.w	r2, r7, #8
 800be4c:	4610      	mov	r0, r2
 800be4e:	4798      	blx	r3
 800be50:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800be52:	68fb      	ldr	r3, [r7, #12]
 800be54:	3301      	adds	r3, #1
 800be56:	2202      	movs	r2, #2
 800be58:	701a      	strb	r2, [r3, #0]
    break;
 800be5a:	e0f2      	b.n	800c042 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 800be5c:	683b      	ldr	r3, [r7, #0]
 800be5e:	885b      	ldrh	r3, [r3, #2]
 800be60:	b2db      	uxtb	r3, r3
 800be62:	2b05      	cmp	r3, #5
 800be64:	f200 80ac 	bhi.w	800bfc0 <USBD_GetDescriptor+0x204>
 800be68:	a201      	add	r2, pc, #4	; (adr r2, 800be70 <USBD_GetDescriptor+0xb4>)
 800be6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800be6e:	bf00      	nop
 800be70:	0800be89 	.word	0x0800be89
 800be74:	0800bebd 	.word	0x0800bebd
 800be78:	0800bef1 	.word	0x0800bef1
 800be7c:	0800bf25 	.word	0x0800bf25
 800be80:	0800bf59 	.word	0x0800bf59
 800be84:	0800bf8d 	.word	0x0800bf8d
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800be88:	687b      	ldr	r3, [r7, #4]
 800be8a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800be8e:	685b      	ldr	r3, [r3, #4]
 800be90:	2b00      	cmp	r3, #0
 800be92:	d00b      	beq.n	800beac <USBD_GetDescriptor+0xf0>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800be94:	687b      	ldr	r3, [r7, #4]
 800be96:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800be9a:	685b      	ldr	r3, [r3, #4]
 800be9c:	687a      	ldr	r2, [r7, #4]
 800be9e:	7c12      	ldrb	r2, [r2, #16]
 800bea0:	f107 0108 	add.w	r1, r7, #8
 800bea4:	4610      	mov	r0, r2
 800bea6:	4798      	blx	r3
 800bea8:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800beaa:	e091      	b.n	800bfd0 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800beac:	6839      	ldr	r1, [r7, #0]
 800beae:	6878      	ldr	r0, [r7, #4]
 800beb0:	f000 faaa 	bl	800c408 <USBD_CtlError>
        err++;
 800beb4:	7afb      	ldrb	r3, [r7, #11]
 800beb6:	3301      	adds	r3, #1
 800beb8:	72fb      	strb	r3, [r7, #11]
      break;
 800beba:	e089      	b.n	800bfd0 <USBD_GetDescriptor+0x214>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800bebc:	687b      	ldr	r3, [r7, #4]
 800bebe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bec2:	689b      	ldr	r3, [r3, #8]
 800bec4:	2b00      	cmp	r3, #0
 800bec6:	d00b      	beq.n	800bee0 <USBD_GetDescriptor+0x124>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800bec8:	687b      	ldr	r3, [r7, #4]
 800beca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bece:	689b      	ldr	r3, [r3, #8]
 800bed0:	687a      	ldr	r2, [r7, #4]
 800bed2:	7c12      	ldrb	r2, [r2, #16]
 800bed4:	f107 0108 	add.w	r1, r7, #8
 800bed8:	4610      	mov	r0, r2
 800beda:	4798      	blx	r3
 800bedc:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800bede:	e077      	b.n	800bfd0 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800bee0:	6839      	ldr	r1, [r7, #0]
 800bee2:	6878      	ldr	r0, [r7, #4]
 800bee4:	f000 fa90 	bl	800c408 <USBD_CtlError>
        err++;
 800bee8:	7afb      	ldrb	r3, [r7, #11]
 800beea:	3301      	adds	r3, #1
 800beec:	72fb      	strb	r3, [r7, #11]
      break;
 800beee:	e06f      	b.n	800bfd0 <USBD_GetDescriptor+0x214>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800bef0:	687b      	ldr	r3, [r7, #4]
 800bef2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bef6:	68db      	ldr	r3, [r3, #12]
 800bef8:	2b00      	cmp	r3, #0
 800befa:	d00b      	beq.n	800bf14 <USBD_GetDescriptor+0x158>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800befc:	687b      	ldr	r3, [r7, #4]
 800befe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bf02:	68db      	ldr	r3, [r3, #12]
 800bf04:	687a      	ldr	r2, [r7, #4]
 800bf06:	7c12      	ldrb	r2, [r2, #16]
 800bf08:	f107 0108 	add.w	r1, r7, #8
 800bf0c:	4610      	mov	r0, r2
 800bf0e:	4798      	blx	r3
 800bf10:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800bf12:	e05d      	b.n	800bfd0 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800bf14:	6839      	ldr	r1, [r7, #0]
 800bf16:	6878      	ldr	r0, [r7, #4]
 800bf18:	f000 fa76 	bl	800c408 <USBD_CtlError>
        err++;
 800bf1c:	7afb      	ldrb	r3, [r7, #11]
 800bf1e:	3301      	adds	r3, #1
 800bf20:	72fb      	strb	r3, [r7, #11]
      break;
 800bf22:	e055      	b.n	800bfd0 <USBD_GetDescriptor+0x214>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800bf24:	687b      	ldr	r3, [r7, #4]
 800bf26:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bf2a:	691b      	ldr	r3, [r3, #16]
 800bf2c:	2b00      	cmp	r3, #0
 800bf2e:	d00b      	beq.n	800bf48 <USBD_GetDescriptor+0x18c>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800bf30:	687b      	ldr	r3, [r7, #4]
 800bf32:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bf36:	691b      	ldr	r3, [r3, #16]
 800bf38:	687a      	ldr	r2, [r7, #4]
 800bf3a:	7c12      	ldrb	r2, [r2, #16]
 800bf3c:	f107 0108 	add.w	r1, r7, #8
 800bf40:	4610      	mov	r0, r2
 800bf42:	4798      	blx	r3
 800bf44:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800bf46:	e043      	b.n	800bfd0 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800bf48:	6839      	ldr	r1, [r7, #0]
 800bf4a:	6878      	ldr	r0, [r7, #4]
 800bf4c:	f000 fa5c 	bl	800c408 <USBD_CtlError>
        err++;
 800bf50:	7afb      	ldrb	r3, [r7, #11]
 800bf52:	3301      	adds	r3, #1
 800bf54:	72fb      	strb	r3, [r7, #11]
      break;
 800bf56:	e03b      	b.n	800bfd0 <USBD_GetDescriptor+0x214>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800bf58:	687b      	ldr	r3, [r7, #4]
 800bf5a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bf5e:	695b      	ldr	r3, [r3, #20]
 800bf60:	2b00      	cmp	r3, #0
 800bf62:	d00b      	beq.n	800bf7c <USBD_GetDescriptor+0x1c0>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800bf64:	687b      	ldr	r3, [r7, #4]
 800bf66:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bf6a:	695b      	ldr	r3, [r3, #20]
 800bf6c:	687a      	ldr	r2, [r7, #4]
 800bf6e:	7c12      	ldrb	r2, [r2, #16]
 800bf70:	f107 0108 	add.w	r1, r7, #8
 800bf74:	4610      	mov	r0, r2
 800bf76:	4798      	blx	r3
 800bf78:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800bf7a:	e029      	b.n	800bfd0 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800bf7c:	6839      	ldr	r1, [r7, #0]
 800bf7e:	6878      	ldr	r0, [r7, #4]
 800bf80:	f000 fa42 	bl	800c408 <USBD_CtlError>
        err++;
 800bf84:	7afb      	ldrb	r3, [r7, #11]
 800bf86:	3301      	adds	r3, #1
 800bf88:	72fb      	strb	r3, [r7, #11]
      break;
 800bf8a:	e021      	b.n	800bfd0 <USBD_GetDescriptor+0x214>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800bf8c:	687b      	ldr	r3, [r7, #4]
 800bf8e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bf92:	699b      	ldr	r3, [r3, #24]
 800bf94:	2b00      	cmp	r3, #0
 800bf96:	d00b      	beq.n	800bfb0 <USBD_GetDescriptor+0x1f4>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800bf98:	687b      	ldr	r3, [r7, #4]
 800bf9a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bf9e:	699b      	ldr	r3, [r3, #24]
 800bfa0:	687a      	ldr	r2, [r7, #4]
 800bfa2:	7c12      	ldrb	r2, [r2, #16]
 800bfa4:	f107 0108 	add.w	r1, r7, #8
 800bfa8:	4610      	mov	r0, r2
 800bfaa:	4798      	blx	r3
 800bfac:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800bfae:	e00f      	b.n	800bfd0 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800bfb0:	6839      	ldr	r1, [r7, #0]
 800bfb2:	6878      	ldr	r0, [r7, #4]
 800bfb4:	f000 fa28 	bl	800c408 <USBD_CtlError>
        err++;
 800bfb8:	7afb      	ldrb	r3, [r7, #11]
 800bfba:	3301      	adds	r3, #1
 800bfbc:	72fb      	strb	r3, [r7, #11]
      break;
 800bfbe:	e007      	b.n	800bfd0 <USBD_GetDescriptor+0x214>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 800bfc0:	6839      	ldr	r1, [r7, #0]
 800bfc2:	6878      	ldr	r0, [r7, #4]
 800bfc4:	f000 fa20 	bl	800c408 <USBD_CtlError>
      err++;
 800bfc8:	7afb      	ldrb	r3, [r7, #11]
 800bfca:	3301      	adds	r3, #1
 800bfcc:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 800bfce:	bf00      	nop
    }
    break;
 800bfd0:	e037      	b.n	800c042 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bfd2:	687b      	ldr	r3, [r7, #4]
 800bfd4:	7c1b      	ldrb	r3, [r3, #16]
 800bfd6:	2b00      	cmp	r3, #0
 800bfd8:	d109      	bne.n	800bfee <USBD_GetDescriptor+0x232>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800bfda:	687b      	ldr	r3, [r7, #4]
 800bfdc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bfe0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bfe2:	f107 0208 	add.w	r2, r7, #8
 800bfe6:	4610      	mov	r0, r2
 800bfe8:	4798      	blx	r3
 800bfea:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 800bfec:	e029      	b.n	800c042 <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 800bfee:	6839      	ldr	r1, [r7, #0]
 800bff0:	6878      	ldr	r0, [r7, #4]
 800bff2:	f000 fa09 	bl	800c408 <USBD_CtlError>
      err++;
 800bff6:	7afb      	ldrb	r3, [r7, #11]
 800bff8:	3301      	adds	r3, #1
 800bffa:	72fb      	strb	r3, [r7, #11]
    break;
 800bffc:	e021      	b.n	800c042 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bffe:	687b      	ldr	r3, [r7, #4]
 800c000:	7c1b      	ldrb	r3, [r3, #16]
 800c002:	2b00      	cmp	r3, #0
 800c004:	d10d      	bne.n	800c022 <USBD_GetDescriptor+0x266>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800c006:	687b      	ldr	r3, [r7, #4]
 800c008:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c00c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c00e:	f107 0208 	add.w	r2, r7, #8
 800c012:	4610      	mov	r0, r2
 800c014:	4798      	blx	r3
 800c016:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800c018:	68fb      	ldr	r3, [r7, #12]
 800c01a:	3301      	adds	r3, #1
 800c01c:	2207      	movs	r2, #7
 800c01e:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 800c020:	e00f      	b.n	800c042 <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 800c022:	6839      	ldr	r1, [r7, #0]
 800c024:	6878      	ldr	r0, [r7, #4]
 800c026:	f000 f9ef 	bl	800c408 <USBD_CtlError>
      err++;
 800c02a:	7afb      	ldrb	r3, [r7, #11]
 800c02c:	3301      	adds	r3, #1
 800c02e:	72fb      	strb	r3, [r7, #11]
    break;
 800c030:	e007      	b.n	800c042 <USBD_GetDescriptor+0x286>

  default:
    USBD_CtlError(pdev, req);
 800c032:	6839      	ldr	r1, [r7, #0]
 800c034:	6878      	ldr	r0, [r7, #4]
 800c036:	f000 f9e7 	bl	800c408 <USBD_CtlError>
    err++;
 800c03a:	7afb      	ldrb	r3, [r7, #11]
 800c03c:	3301      	adds	r3, #1
 800c03e:	72fb      	strb	r3, [r7, #11]
    break;
 800c040:	bf00      	nop
  }

  if (err != 0U)
 800c042:	7afb      	ldrb	r3, [r7, #11]
 800c044:	2b00      	cmp	r3, #0
 800c046:	d11e      	bne.n	800c086 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 800c048:	683b      	ldr	r3, [r7, #0]
 800c04a:	88db      	ldrh	r3, [r3, #6]
 800c04c:	2b00      	cmp	r3, #0
 800c04e:	d016      	beq.n	800c07e <USBD_GetDescriptor+0x2c2>
    {
      if (len != 0U)
 800c050:	893b      	ldrh	r3, [r7, #8]
 800c052:	2b00      	cmp	r3, #0
 800c054:	d00e      	beq.n	800c074 <USBD_GetDescriptor+0x2b8>
      {
        len = MIN(len, req->wLength);
 800c056:	683b      	ldr	r3, [r7, #0]
 800c058:	88da      	ldrh	r2, [r3, #6]
 800c05a:	893b      	ldrh	r3, [r7, #8]
 800c05c:	4293      	cmp	r3, r2
 800c05e:	bf28      	it	cs
 800c060:	4613      	movcs	r3, r2
 800c062:	b29b      	uxth	r3, r3
 800c064:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 800c066:	893b      	ldrh	r3, [r7, #8]
 800c068:	461a      	mov	r2, r3
 800c06a:	68f9      	ldr	r1, [r7, #12]
 800c06c:	6878      	ldr	r0, [r7, #4]
 800c06e:	f000 fa3c 	bl	800c4ea <USBD_CtlSendData>
 800c072:	e009      	b.n	800c088 <USBD_GetDescriptor+0x2cc>
      }
      else
      {
        USBD_CtlError(pdev, req);
 800c074:	6839      	ldr	r1, [r7, #0]
 800c076:	6878      	ldr	r0, [r7, #4]
 800c078:	f000 f9c6 	bl	800c408 <USBD_CtlError>
 800c07c:	e004      	b.n	800c088 <USBD_GetDescriptor+0x2cc>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 800c07e:	6878      	ldr	r0, [r7, #4]
 800c080:	f000 fa8d 	bl	800c59e <USBD_CtlSendStatus>
 800c084:	e000      	b.n	800c088 <USBD_GetDescriptor+0x2cc>
    return;
 800c086:	bf00      	nop
    }
  }
}
 800c088:	3710      	adds	r7, #16
 800c08a:	46bd      	mov	sp, r7
 800c08c:	bd80      	pop	{r7, pc}
 800c08e:	bf00      	nop

0800c090 <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c090:	b580      	push	{r7, lr}
 800c092:	b084      	sub	sp, #16
 800c094:	af00      	add	r7, sp, #0
 800c096:	6078      	str	r0, [r7, #4]
 800c098:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800c09a:	683b      	ldr	r3, [r7, #0]
 800c09c:	889b      	ldrh	r3, [r3, #4]
 800c09e:	2b00      	cmp	r3, #0
 800c0a0:	d130      	bne.n	800c104 <USBD_SetAddress+0x74>
 800c0a2:	683b      	ldr	r3, [r7, #0]
 800c0a4:	88db      	ldrh	r3, [r3, #6]
 800c0a6:	2b00      	cmp	r3, #0
 800c0a8:	d12c      	bne.n	800c104 <USBD_SetAddress+0x74>
 800c0aa:	683b      	ldr	r3, [r7, #0]
 800c0ac:	885b      	ldrh	r3, [r3, #2]
 800c0ae:	2b7f      	cmp	r3, #127	; 0x7f
 800c0b0:	d828      	bhi.n	800c104 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800c0b2:	683b      	ldr	r3, [r7, #0]
 800c0b4:	885b      	ldrh	r3, [r3, #2]
 800c0b6:	b2db      	uxtb	r3, r3
 800c0b8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c0bc:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c0be:	687b      	ldr	r3, [r7, #4]
 800c0c0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c0c4:	2b03      	cmp	r3, #3
 800c0c6:	d104      	bne.n	800c0d2 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800c0c8:	6839      	ldr	r1, [r7, #0]
 800c0ca:	6878      	ldr	r0, [r7, #4]
 800c0cc:	f000 f99c 	bl	800c408 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c0d0:	e01c      	b.n	800c10c <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800c0d2:	687b      	ldr	r3, [r7, #4]
 800c0d4:	7bfa      	ldrb	r2, [r7, #15]
 800c0d6:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800c0da:	7bfb      	ldrb	r3, [r7, #15]
 800c0dc:	4619      	mov	r1, r3
 800c0de:	6878      	ldr	r0, [r7, #4]
 800c0e0:	f000 feec 	bl	800cebc <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800c0e4:	6878      	ldr	r0, [r7, #4]
 800c0e6:	f000 fa5a 	bl	800c59e <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800c0ea:	7bfb      	ldrb	r3, [r7, #15]
 800c0ec:	2b00      	cmp	r3, #0
 800c0ee:	d004      	beq.n	800c0fa <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800c0f0:	687b      	ldr	r3, [r7, #4]
 800c0f2:	2202      	movs	r2, #2
 800c0f4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c0f8:	e008      	b.n	800c10c <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800c0fa:	687b      	ldr	r3, [r7, #4]
 800c0fc:	2201      	movs	r2, #1
 800c0fe:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c102:	e003      	b.n	800c10c <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800c104:	6839      	ldr	r1, [r7, #0]
 800c106:	6878      	ldr	r0, [r7, #4]
 800c108:	f000 f97e 	bl	800c408 <USBD_CtlError>
  }
}
 800c10c:	bf00      	nop
 800c10e:	3710      	adds	r7, #16
 800c110:	46bd      	mov	sp, r7
 800c112:	bd80      	pop	{r7, pc}

0800c114 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c114:	b580      	push	{r7, lr}
 800c116:	b084      	sub	sp, #16
 800c118:	af00      	add	r7, sp, #0
 800c11a:	6078      	str	r0, [r7, #4]
 800c11c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c11e:	2300      	movs	r3, #0
 800c120:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800c122:	683b      	ldr	r3, [r7, #0]
 800c124:	885b      	ldrh	r3, [r3, #2]
 800c126:	b2da      	uxtb	r2, r3
 800c128:	4b4b      	ldr	r3, [pc, #300]	; (800c258 <USBD_SetConfig+0x144>)
 800c12a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800c12c:	4b4a      	ldr	r3, [pc, #296]	; (800c258 <USBD_SetConfig+0x144>)
 800c12e:	781b      	ldrb	r3, [r3, #0]
 800c130:	2b01      	cmp	r3, #1
 800c132:	d905      	bls.n	800c140 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800c134:	6839      	ldr	r1, [r7, #0]
 800c136:	6878      	ldr	r0, [r7, #4]
 800c138:	f000 f966 	bl	800c408 <USBD_CtlError>
    return USBD_FAIL;
 800c13c:	2303      	movs	r3, #3
 800c13e:	e087      	b.n	800c250 <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 800c140:	687b      	ldr	r3, [r7, #4]
 800c142:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c146:	2b02      	cmp	r3, #2
 800c148:	d002      	beq.n	800c150 <USBD_SetConfig+0x3c>
 800c14a:	2b03      	cmp	r3, #3
 800c14c:	d025      	beq.n	800c19a <USBD_SetConfig+0x86>
 800c14e:	e071      	b.n	800c234 <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 800c150:	4b41      	ldr	r3, [pc, #260]	; (800c258 <USBD_SetConfig+0x144>)
 800c152:	781b      	ldrb	r3, [r3, #0]
 800c154:	2b00      	cmp	r3, #0
 800c156:	d01c      	beq.n	800c192 <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 800c158:	4b3f      	ldr	r3, [pc, #252]	; (800c258 <USBD_SetConfig+0x144>)
 800c15a:	781b      	ldrb	r3, [r3, #0]
 800c15c:	461a      	mov	r2, r3
 800c15e:	687b      	ldr	r3, [r7, #4]
 800c160:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 800c162:	4b3d      	ldr	r3, [pc, #244]	; (800c258 <USBD_SetConfig+0x144>)
 800c164:	781b      	ldrb	r3, [r3, #0]
 800c166:	4619      	mov	r1, r3
 800c168:	6878      	ldr	r0, [r7, #4]
 800c16a:	f7ff f9a7 	bl	800b4bc <USBD_SetClassConfig>
 800c16e:	4603      	mov	r3, r0
 800c170:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 800c172:	7bfb      	ldrb	r3, [r7, #15]
 800c174:	2b00      	cmp	r3, #0
 800c176:	d004      	beq.n	800c182 <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 800c178:	6839      	ldr	r1, [r7, #0]
 800c17a:	6878      	ldr	r0, [r7, #4]
 800c17c:	f000 f944 	bl	800c408 <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 800c180:	e065      	b.n	800c24e <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 800c182:	6878      	ldr	r0, [r7, #4]
 800c184:	f000 fa0b 	bl	800c59e <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 800c188:	687b      	ldr	r3, [r7, #4]
 800c18a:	2203      	movs	r2, #3
 800c18c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 800c190:	e05d      	b.n	800c24e <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 800c192:	6878      	ldr	r0, [r7, #4]
 800c194:	f000 fa03 	bl	800c59e <USBD_CtlSendStatus>
    break;
 800c198:	e059      	b.n	800c24e <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 800c19a:	4b2f      	ldr	r3, [pc, #188]	; (800c258 <USBD_SetConfig+0x144>)
 800c19c:	781b      	ldrb	r3, [r3, #0]
 800c19e:	2b00      	cmp	r3, #0
 800c1a0:	d112      	bne.n	800c1c8 <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 800c1a2:	687b      	ldr	r3, [r7, #4]
 800c1a4:	2202      	movs	r2, #2
 800c1a6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 800c1aa:	4b2b      	ldr	r3, [pc, #172]	; (800c258 <USBD_SetConfig+0x144>)
 800c1ac:	781b      	ldrb	r3, [r3, #0]
 800c1ae:	461a      	mov	r2, r3
 800c1b0:	687b      	ldr	r3, [r7, #4]
 800c1b2:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800c1b4:	4b28      	ldr	r3, [pc, #160]	; (800c258 <USBD_SetConfig+0x144>)
 800c1b6:	781b      	ldrb	r3, [r3, #0]
 800c1b8:	4619      	mov	r1, r3
 800c1ba:	6878      	ldr	r0, [r7, #4]
 800c1bc:	f7ff f99a 	bl	800b4f4 <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 800c1c0:	6878      	ldr	r0, [r7, #4]
 800c1c2:	f000 f9ec 	bl	800c59e <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 800c1c6:	e042      	b.n	800c24e <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 800c1c8:	4b23      	ldr	r3, [pc, #140]	; (800c258 <USBD_SetConfig+0x144>)
 800c1ca:	781b      	ldrb	r3, [r3, #0]
 800c1cc:	461a      	mov	r2, r3
 800c1ce:	687b      	ldr	r3, [r7, #4]
 800c1d0:	685b      	ldr	r3, [r3, #4]
 800c1d2:	429a      	cmp	r2, r3
 800c1d4:	d02a      	beq.n	800c22c <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800c1d6:	687b      	ldr	r3, [r7, #4]
 800c1d8:	685b      	ldr	r3, [r3, #4]
 800c1da:	b2db      	uxtb	r3, r3
 800c1dc:	4619      	mov	r1, r3
 800c1de:	6878      	ldr	r0, [r7, #4]
 800c1e0:	f7ff f988 	bl	800b4f4 <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 800c1e4:	4b1c      	ldr	r3, [pc, #112]	; (800c258 <USBD_SetConfig+0x144>)
 800c1e6:	781b      	ldrb	r3, [r3, #0]
 800c1e8:	461a      	mov	r2, r3
 800c1ea:	687b      	ldr	r3, [r7, #4]
 800c1ec:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 800c1ee:	4b1a      	ldr	r3, [pc, #104]	; (800c258 <USBD_SetConfig+0x144>)
 800c1f0:	781b      	ldrb	r3, [r3, #0]
 800c1f2:	4619      	mov	r1, r3
 800c1f4:	6878      	ldr	r0, [r7, #4]
 800c1f6:	f7ff f961 	bl	800b4bc <USBD_SetClassConfig>
 800c1fa:	4603      	mov	r3, r0
 800c1fc:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 800c1fe:	7bfb      	ldrb	r3, [r7, #15]
 800c200:	2b00      	cmp	r3, #0
 800c202:	d00f      	beq.n	800c224 <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 800c204:	6839      	ldr	r1, [r7, #0]
 800c206:	6878      	ldr	r0, [r7, #4]
 800c208:	f000 f8fe 	bl	800c408 <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800c20c:	687b      	ldr	r3, [r7, #4]
 800c20e:	685b      	ldr	r3, [r3, #4]
 800c210:	b2db      	uxtb	r3, r3
 800c212:	4619      	mov	r1, r3
 800c214:	6878      	ldr	r0, [r7, #4]
 800c216:	f7ff f96d 	bl	800b4f4 <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800c21a:	687b      	ldr	r3, [r7, #4]
 800c21c:	2202      	movs	r2, #2
 800c21e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 800c222:	e014      	b.n	800c24e <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 800c224:	6878      	ldr	r0, [r7, #4]
 800c226:	f000 f9ba 	bl	800c59e <USBD_CtlSendStatus>
    break;
 800c22a:	e010      	b.n	800c24e <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 800c22c:	6878      	ldr	r0, [r7, #4]
 800c22e:	f000 f9b6 	bl	800c59e <USBD_CtlSendStatus>
    break;
 800c232:	e00c      	b.n	800c24e <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 800c234:	6839      	ldr	r1, [r7, #0]
 800c236:	6878      	ldr	r0, [r7, #4]
 800c238:	f000 f8e6 	bl	800c408 <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 800c23c:	4b06      	ldr	r3, [pc, #24]	; (800c258 <USBD_SetConfig+0x144>)
 800c23e:	781b      	ldrb	r3, [r3, #0]
 800c240:	4619      	mov	r1, r3
 800c242:	6878      	ldr	r0, [r7, #4]
 800c244:	f7ff f956 	bl	800b4f4 <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 800c248:	2303      	movs	r3, #3
 800c24a:	73fb      	strb	r3, [r7, #15]
    break;
 800c24c:	bf00      	nop
  }

  return ret;
 800c24e:	7bfb      	ldrb	r3, [r7, #15]
}
 800c250:	4618      	mov	r0, r3
 800c252:	3710      	adds	r7, #16
 800c254:	46bd      	mov	sp, r7
 800c256:	bd80      	pop	{r7, pc}
 800c258:	20000668 	.word	0x20000668

0800c25c <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c25c:	b580      	push	{r7, lr}
 800c25e:	b082      	sub	sp, #8
 800c260:	af00      	add	r7, sp, #0
 800c262:	6078      	str	r0, [r7, #4]
 800c264:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800c266:	683b      	ldr	r3, [r7, #0]
 800c268:	88db      	ldrh	r3, [r3, #6]
 800c26a:	2b01      	cmp	r3, #1
 800c26c:	d004      	beq.n	800c278 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800c26e:	6839      	ldr	r1, [r7, #0]
 800c270:	6878      	ldr	r0, [r7, #4]
 800c272:	f000 f8c9 	bl	800c408 <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 800c276:	e021      	b.n	800c2bc <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 800c278:	687b      	ldr	r3, [r7, #4]
 800c27a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c27e:	2b01      	cmp	r3, #1
 800c280:	db17      	blt.n	800c2b2 <USBD_GetConfig+0x56>
 800c282:	2b02      	cmp	r3, #2
 800c284:	dd02      	ble.n	800c28c <USBD_GetConfig+0x30>
 800c286:	2b03      	cmp	r3, #3
 800c288:	d00b      	beq.n	800c2a2 <USBD_GetConfig+0x46>
 800c28a:	e012      	b.n	800c2b2 <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 800c28c:	687b      	ldr	r3, [r7, #4]
 800c28e:	2200      	movs	r2, #0
 800c290:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800c292:	687b      	ldr	r3, [r7, #4]
 800c294:	3308      	adds	r3, #8
 800c296:	2201      	movs	r2, #1
 800c298:	4619      	mov	r1, r3
 800c29a:	6878      	ldr	r0, [r7, #4]
 800c29c:	f000 f925 	bl	800c4ea <USBD_CtlSendData>
      break;
 800c2a0:	e00c      	b.n	800c2bc <USBD_GetConfig+0x60>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800c2a2:	687b      	ldr	r3, [r7, #4]
 800c2a4:	3304      	adds	r3, #4
 800c2a6:	2201      	movs	r2, #1
 800c2a8:	4619      	mov	r1, r3
 800c2aa:	6878      	ldr	r0, [r7, #4]
 800c2ac:	f000 f91d 	bl	800c4ea <USBD_CtlSendData>
      break;
 800c2b0:	e004      	b.n	800c2bc <USBD_GetConfig+0x60>
      USBD_CtlError(pdev, req);
 800c2b2:	6839      	ldr	r1, [r7, #0]
 800c2b4:	6878      	ldr	r0, [r7, #4]
 800c2b6:	f000 f8a7 	bl	800c408 <USBD_CtlError>
      break;
 800c2ba:	bf00      	nop
}
 800c2bc:	bf00      	nop
 800c2be:	3708      	adds	r7, #8
 800c2c0:	46bd      	mov	sp, r7
 800c2c2:	bd80      	pop	{r7, pc}

0800c2c4 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c2c4:	b580      	push	{r7, lr}
 800c2c6:	b082      	sub	sp, #8
 800c2c8:	af00      	add	r7, sp, #0
 800c2ca:	6078      	str	r0, [r7, #4]
 800c2cc:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c2ce:	687b      	ldr	r3, [r7, #4]
 800c2d0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c2d4:	3b01      	subs	r3, #1
 800c2d6:	2b02      	cmp	r3, #2
 800c2d8:	d81e      	bhi.n	800c318 <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 800c2da:	683b      	ldr	r3, [r7, #0]
 800c2dc:	88db      	ldrh	r3, [r3, #6]
 800c2de:	2b02      	cmp	r3, #2
 800c2e0:	d004      	beq.n	800c2ec <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 800c2e2:	6839      	ldr	r1, [r7, #0]
 800c2e4:	6878      	ldr	r0, [r7, #4]
 800c2e6:	f000 f88f 	bl	800c408 <USBD_CtlError>
      break;
 800c2ea:	e01a      	b.n	800c322 <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800c2ec:	687b      	ldr	r3, [r7, #4]
 800c2ee:	2201      	movs	r2, #1
 800c2f0:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup != 0U)
 800c2f2:	687b      	ldr	r3, [r7, #4]
 800c2f4:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800c2f8:	2b00      	cmp	r3, #0
 800c2fa:	d005      	beq.n	800c308 <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800c2fc:	687b      	ldr	r3, [r7, #4]
 800c2fe:	68db      	ldr	r3, [r3, #12]
 800c300:	f043 0202 	orr.w	r2, r3, #2
 800c304:	687b      	ldr	r3, [r7, #4]
 800c306:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800c308:	687b      	ldr	r3, [r7, #4]
 800c30a:	330c      	adds	r3, #12
 800c30c:	2202      	movs	r2, #2
 800c30e:	4619      	mov	r1, r3
 800c310:	6878      	ldr	r0, [r7, #4]
 800c312:	f000 f8ea 	bl	800c4ea <USBD_CtlSendData>
    break;
 800c316:	e004      	b.n	800c322 <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 800c318:	6839      	ldr	r1, [r7, #0]
 800c31a:	6878      	ldr	r0, [r7, #4]
 800c31c:	f000 f874 	bl	800c408 <USBD_CtlError>
    break;
 800c320:	bf00      	nop
  }
}
 800c322:	bf00      	nop
 800c324:	3708      	adds	r7, #8
 800c326:	46bd      	mov	sp, r7
 800c328:	bd80      	pop	{r7, pc}

0800c32a <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c32a:	b580      	push	{r7, lr}
 800c32c:	b082      	sub	sp, #8
 800c32e:	af00      	add	r7, sp, #0
 800c330:	6078      	str	r0, [r7, #4]
 800c332:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c334:	683b      	ldr	r3, [r7, #0]
 800c336:	885b      	ldrh	r3, [r3, #2]
 800c338:	2b01      	cmp	r3, #1
 800c33a:	d106      	bne.n	800c34a <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800c33c:	687b      	ldr	r3, [r7, #4]
 800c33e:	2201      	movs	r2, #1
 800c340:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800c344:	6878      	ldr	r0, [r7, #4]
 800c346:	f000 f92a 	bl	800c59e <USBD_CtlSendStatus>
  }
}
 800c34a:	bf00      	nop
 800c34c:	3708      	adds	r7, #8
 800c34e:	46bd      	mov	sp, r7
 800c350:	bd80      	pop	{r7, pc}

0800c352 <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c352:	b580      	push	{r7, lr}
 800c354:	b082      	sub	sp, #8
 800c356:	af00      	add	r7, sp, #0
 800c358:	6078      	str	r0, [r7, #4]
 800c35a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c35c:	687b      	ldr	r3, [r7, #4]
 800c35e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c362:	3b01      	subs	r3, #1
 800c364:	2b02      	cmp	r3, #2
 800c366:	d80b      	bhi.n	800c380 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c368:	683b      	ldr	r3, [r7, #0]
 800c36a:	885b      	ldrh	r3, [r3, #2]
 800c36c:	2b01      	cmp	r3, #1
 800c36e:	d10c      	bne.n	800c38a <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800c370:	687b      	ldr	r3, [r7, #4]
 800c372:	2200      	movs	r2, #0
 800c374:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800c378:	6878      	ldr	r0, [r7, #4]
 800c37a:	f000 f910 	bl	800c59e <USBD_CtlSendStatus>
      }
      break;
 800c37e:	e004      	b.n	800c38a <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800c380:	6839      	ldr	r1, [r7, #0]
 800c382:	6878      	ldr	r0, [r7, #4]
 800c384:	f000 f840 	bl	800c408 <USBD_CtlError>
      break;
 800c388:	e000      	b.n	800c38c <USBD_ClrFeature+0x3a>
      break;
 800c38a:	bf00      	nop
  }
}
 800c38c:	bf00      	nop
 800c38e:	3708      	adds	r7, #8
 800c390:	46bd      	mov	sp, r7
 800c392:	bd80      	pop	{r7, pc}

0800c394 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800c394:	b580      	push	{r7, lr}
 800c396:	b084      	sub	sp, #16
 800c398:	af00      	add	r7, sp, #0
 800c39a:	6078      	str	r0, [r7, #4]
 800c39c:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800c39e:	683b      	ldr	r3, [r7, #0]
 800c3a0:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800c3a2:	68fb      	ldr	r3, [r7, #12]
 800c3a4:	781a      	ldrb	r2, [r3, #0]
 800c3a6:	687b      	ldr	r3, [r7, #4]
 800c3a8:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800c3aa:	68fb      	ldr	r3, [r7, #12]
 800c3ac:	3301      	adds	r3, #1
 800c3ae:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800c3b0:	68fb      	ldr	r3, [r7, #12]
 800c3b2:	781a      	ldrb	r2, [r3, #0]
 800c3b4:	687b      	ldr	r3, [r7, #4]
 800c3b6:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800c3b8:	68fb      	ldr	r3, [r7, #12]
 800c3ba:	3301      	adds	r3, #1
 800c3bc:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800c3be:	68f8      	ldr	r0, [r7, #12]
 800c3c0:	f7ff fad3 	bl	800b96a <SWAPBYTE>
 800c3c4:	4603      	mov	r3, r0
 800c3c6:	461a      	mov	r2, r3
 800c3c8:	687b      	ldr	r3, [r7, #4]
 800c3ca:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800c3cc:	68fb      	ldr	r3, [r7, #12]
 800c3ce:	3301      	adds	r3, #1
 800c3d0:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800c3d2:	68fb      	ldr	r3, [r7, #12]
 800c3d4:	3301      	adds	r3, #1
 800c3d6:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800c3d8:	68f8      	ldr	r0, [r7, #12]
 800c3da:	f7ff fac6 	bl	800b96a <SWAPBYTE>
 800c3de:	4603      	mov	r3, r0
 800c3e0:	461a      	mov	r2, r3
 800c3e2:	687b      	ldr	r3, [r7, #4]
 800c3e4:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800c3e6:	68fb      	ldr	r3, [r7, #12]
 800c3e8:	3301      	adds	r3, #1
 800c3ea:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800c3ec:	68fb      	ldr	r3, [r7, #12]
 800c3ee:	3301      	adds	r3, #1
 800c3f0:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800c3f2:	68f8      	ldr	r0, [r7, #12]
 800c3f4:	f7ff fab9 	bl	800b96a <SWAPBYTE>
 800c3f8:	4603      	mov	r3, r0
 800c3fa:	461a      	mov	r2, r3
 800c3fc:	687b      	ldr	r3, [r7, #4]
 800c3fe:	80da      	strh	r2, [r3, #6]
}
 800c400:	bf00      	nop
 800c402:	3710      	adds	r7, #16
 800c404:	46bd      	mov	sp, r7
 800c406:	bd80      	pop	{r7, pc}

0800c408 <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c408:	b580      	push	{r7, lr}
 800c40a:	b082      	sub	sp, #8
 800c40c:	af00      	add	r7, sp, #0
 800c40e:	6078      	str	r0, [r7, #4]
 800c410:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800c412:	2180      	movs	r1, #128	; 0x80
 800c414:	6878      	ldr	r0, [r7, #4]
 800c416:	f000 fce7 	bl	800cde8 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800c41a:	2100      	movs	r1, #0
 800c41c:	6878      	ldr	r0, [r7, #4]
 800c41e:	f000 fce3 	bl	800cde8 <USBD_LL_StallEP>
}
 800c422:	bf00      	nop
 800c424:	3708      	adds	r7, #8
 800c426:	46bd      	mov	sp, r7
 800c428:	bd80      	pop	{r7, pc}

0800c42a <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800c42a:	b580      	push	{r7, lr}
 800c42c:	b086      	sub	sp, #24
 800c42e:	af00      	add	r7, sp, #0
 800c430:	60f8      	str	r0, [r7, #12]
 800c432:	60b9      	str	r1, [r7, #8]
 800c434:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800c436:	2300      	movs	r3, #0
 800c438:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800c43a:	68fb      	ldr	r3, [r7, #12]
 800c43c:	2b00      	cmp	r3, #0
 800c43e:	d036      	beq.n	800c4ae <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800c440:	68fb      	ldr	r3, [r7, #12]
 800c442:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800c444:	6938      	ldr	r0, [r7, #16]
 800c446:	f000 f836 	bl	800c4b6 <USBD_GetLen>
 800c44a:	4603      	mov	r3, r0
 800c44c:	3301      	adds	r3, #1
 800c44e:	b29b      	uxth	r3, r3
 800c450:	005b      	lsls	r3, r3, #1
 800c452:	b29a      	uxth	r2, r3
 800c454:	687b      	ldr	r3, [r7, #4]
 800c456:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800c458:	7dfb      	ldrb	r3, [r7, #23]
 800c45a:	68ba      	ldr	r2, [r7, #8]
 800c45c:	4413      	add	r3, r2
 800c45e:	687a      	ldr	r2, [r7, #4]
 800c460:	7812      	ldrb	r2, [r2, #0]
 800c462:	701a      	strb	r2, [r3, #0]
  idx++;
 800c464:	7dfb      	ldrb	r3, [r7, #23]
 800c466:	3301      	adds	r3, #1
 800c468:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800c46a:	7dfb      	ldrb	r3, [r7, #23]
 800c46c:	68ba      	ldr	r2, [r7, #8]
 800c46e:	4413      	add	r3, r2
 800c470:	2203      	movs	r2, #3
 800c472:	701a      	strb	r2, [r3, #0]
  idx++;
 800c474:	7dfb      	ldrb	r3, [r7, #23]
 800c476:	3301      	adds	r3, #1
 800c478:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800c47a:	e013      	b.n	800c4a4 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800c47c:	7dfb      	ldrb	r3, [r7, #23]
 800c47e:	68ba      	ldr	r2, [r7, #8]
 800c480:	4413      	add	r3, r2
 800c482:	693a      	ldr	r2, [r7, #16]
 800c484:	7812      	ldrb	r2, [r2, #0]
 800c486:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800c488:	693b      	ldr	r3, [r7, #16]
 800c48a:	3301      	adds	r3, #1
 800c48c:	613b      	str	r3, [r7, #16]
    idx++;
 800c48e:	7dfb      	ldrb	r3, [r7, #23]
 800c490:	3301      	adds	r3, #1
 800c492:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800c494:	7dfb      	ldrb	r3, [r7, #23]
 800c496:	68ba      	ldr	r2, [r7, #8]
 800c498:	4413      	add	r3, r2
 800c49a:	2200      	movs	r2, #0
 800c49c:	701a      	strb	r2, [r3, #0]
    idx++;
 800c49e:	7dfb      	ldrb	r3, [r7, #23]
 800c4a0:	3301      	adds	r3, #1
 800c4a2:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800c4a4:	693b      	ldr	r3, [r7, #16]
 800c4a6:	781b      	ldrb	r3, [r3, #0]
 800c4a8:	2b00      	cmp	r3, #0
 800c4aa:	d1e7      	bne.n	800c47c <USBD_GetString+0x52>
 800c4ac:	e000      	b.n	800c4b0 <USBD_GetString+0x86>
    return;
 800c4ae:	bf00      	nop
  }
}
 800c4b0:	3718      	adds	r7, #24
 800c4b2:	46bd      	mov	sp, r7
 800c4b4:	bd80      	pop	{r7, pc}

0800c4b6 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800c4b6:	b480      	push	{r7}
 800c4b8:	b085      	sub	sp, #20
 800c4ba:	af00      	add	r7, sp, #0
 800c4bc:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800c4be:	2300      	movs	r3, #0
 800c4c0:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800c4c2:	687b      	ldr	r3, [r7, #4]
 800c4c4:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800c4c6:	e005      	b.n	800c4d4 <USBD_GetLen+0x1e>
  {
    len++;
 800c4c8:	7bfb      	ldrb	r3, [r7, #15]
 800c4ca:	3301      	adds	r3, #1
 800c4cc:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800c4ce:	68bb      	ldr	r3, [r7, #8]
 800c4d0:	3301      	adds	r3, #1
 800c4d2:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800c4d4:	68bb      	ldr	r3, [r7, #8]
 800c4d6:	781b      	ldrb	r3, [r3, #0]
 800c4d8:	2b00      	cmp	r3, #0
 800c4da:	d1f5      	bne.n	800c4c8 <USBD_GetLen+0x12>
  }

  return len;
 800c4dc:	7bfb      	ldrb	r3, [r7, #15]
}
 800c4de:	4618      	mov	r0, r3
 800c4e0:	3714      	adds	r7, #20
 800c4e2:	46bd      	mov	sp, r7
 800c4e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4e8:	4770      	bx	lr

0800c4ea <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800c4ea:	b580      	push	{r7, lr}
 800c4ec:	b084      	sub	sp, #16
 800c4ee:	af00      	add	r7, sp, #0
 800c4f0:	60f8      	str	r0, [r7, #12]
 800c4f2:	60b9      	str	r1, [r7, #8]
 800c4f4:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800c4f6:	68fb      	ldr	r3, [r7, #12]
 800c4f8:	2202      	movs	r2, #2
 800c4fa:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800c4fe:	68fb      	ldr	r3, [r7, #12]
 800c500:	687a      	ldr	r2, [r7, #4]
 800c502:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 800c504:	68fb      	ldr	r3, [r7, #12]
 800c506:	687a      	ldr	r2, [r7, #4]
 800c508:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c50a:	687b      	ldr	r3, [r7, #4]
 800c50c:	68ba      	ldr	r2, [r7, #8]
 800c50e:	2100      	movs	r1, #0
 800c510:	68f8      	ldr	r0, [r7, #12]
 800c512:	f000 fcf2 	bl	800cefa <USBD_LL_Transmit>

  return USBD_OK;
 800c516:	2300      	movs	r3, #0
}
 800c518:	4618      	mov	r0, r3
 800c51a:	3710      	adds	r7, #16
 800c51c:	46bd      	mov	sp, r7
 800c51e:	bd80      	pop	{r7, pc}

0800c520 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800c520:	b580      	push	{r7, lr}
 800c522:	b084      	sub	sp, #16
 800c524:	af00      	add	r7, sp, #0
 800c526:	60f8      	str	r0, [r7, #12]
 800c528:	60b9      	str	r1, [r7, #8]
 800c52a:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c52c:	687b      	ldr	r3, [r7, #4]
 800c52e:	68ba      	ldr	r2, [r7, #8]
 800c530:	2100      	movs	r1, #0
 800c532:	68f8      	ldr	r0, [r7, #12]
 800c534:	f000 fce1 	bl	800cefa <USBD_LL_Transmit>

  return USBD_OK;
 800c538:	2300      	movs	r3, #0
}
 800c53a:	4618      	mov	r0, r3
 800c53c:	3710      	adds	r7, #16
 800c53e:	46bd      	mov	sp, r7
 800c540:	bd80      	pop	{r7, pc}

0800c542 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800c542:	b580      	push	{r7, lr}
 800c544:	b084      	sub	sp, #16
 800c546:	af00      	add	r7, sp, #0
 800c548:	60f8      	str	r0, [r7, #12]
 800c54a:	60b9      	str	r1, [r7, #8]
 800c54c:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800c54e:	68fb      	ldr	r3, [r7, #12]
 800c550:	2203      	movs	r2, #3
 800c552:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800c556:	68fb      	ldr	r3, [r7, #12]
 800c558:	687a      	ldr	r2, [r7, #4]
 800c55a:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  pdev->ep_out[0].rem_length = len;
 800c55e:	68fb      	ldr	r3, [r7, #12]
 800c560:	687a      	ldr	r2, [r7, #4]
 800c562:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800c566:	687b      	ldr	r3, [r7, #4]
 800c568:	68ba      	ldr	r2, [r7, #8]
 800c56a:	2100      	movs	r1, #0
 800c56c:	68f8      	ldr	r0, [r7, #12]
 800c56e:	f000 fce5 	bl	800cf3c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c572:	2300      	movs	r3, #0
}
 800c574:	4618      	mov	r0, r3
 800c576:	3710      	adds	r7, #16
 800c578:	46bd      	mov	sp, r7
 800c57a:	bd80      	pop	{r7, pc}

0800c57c <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800c57c:	b580      	push	{r7, lr}
 800c57e:	b084      	sub	sp, #16
 800c580:	af00      	add	r7, sp, #0
 800c582:	60f8      	str	r0, [r7, #12]
 800c584:	60b9      	str	r1, [r7, #8]
 800c586:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800c588:	687b      	ldr	r3, [r7, #4]
 800c58a:	68ba      	ldr	r2, [r7, #8]
 800c58c:	2100      	movs	r1, #0
 800c58e:	68f8      	ldr	r0, [r7, #12]
 800c590:	f000 fcd4 	bl	800cf3c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c594:	2300      	movs	r3, #0
}
 800c596:	4618      	mov	r0, r3
 800c598:	3710      	adds	r7, #16
 800c59a:	46bd      	mov	sp, r7
 800c59c:	bd80      	pop	{r7, pc}

0800c59e <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800c59e:	b580      	push	{r7, lr}
 800c5a0:	b082      	sub	sp, #8
 800c5a2:	af00      	add	r7, sp, #0
 800c5a4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800c5a6:	687b      	ldr	r3, [r7, #4]
 800c5a8:	2204      	movs	r2, #4
 800c5aa:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800c5ae:	2300      	movs	r3, #0
 800c5b0:	2200      	movs	r2, #0
 800c5b2:	2100      	movs	r1, #0
 800c5b4:	6878      	ldr	r0, [r7, #4]
 800c5b6:	f000 fca0 	bl	800cefa <USBD_LL_Transmit>

  return USBD_OK;
 800c5ba:	2300      	movs	r3, #0
}
 800c5bc:	4618      	mov	r0, r3
 800c5be:	3708      	adds	r7, #8
 800c5c0:	46bd      	mov	sp, r7
 800c5c2:	bd80      	pop	{r7, pc}

0800c5c4 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800c5c4:	b580      	push	{r7, lr}
 800c5c6:	b082      	sub	sp, #8
 800c5c8:	af00      	add	r7, sp, #0
 800c5ca:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800c5cc:	687b      	ldr	r3, [r7, #4]
 800c5ce:	2205      	movs	r2, #5
 800c5d0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c5d4:	2300      	movs	r3, #0
 800c5d6:	2200      	movs	r2, #0
 800c5d8:	2100      	movs	r1, #0
 800c5da:	6878      	ldr	r0, [r7, #4]
 800c5dc:	f000 fcae 	bl	800cf3c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c5e0:	2300      	movs	r3, #0
}
 800c5e2:	4618      	mov	r0, r3
 800c5e4:	3708      	adds	r7, #8
 800c5e6:	46bd      	mov	sp, r7
 800c5e8:	bd80      	pop	{r7, pc}
	...

0800c5ec <MX_PDM2PCM_Init>:
/* USER CODE BEGIN 1 */
/* USER CODE END 1 */

/* PDM2PCM init function */
void MX_PDM2PCM_Init(void)
{
 800c5ec:	b580      	push	{r7, lr}
 800c5ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 2 */
  /* USER CODE END 2 */

   /**
  */
  PDM1_filter_handler.bit_order = PDM_FILTER_BIT_ORDER_LSB;
 800c5f0:	4b10      	ldr	r3, [pc, #64]	; (800c634 <MX_PDM2PCM_Init+0x48>)
 800c5f2:	2200      	movs	r2, #0
 800c5f4:	801a      	strh	r2, [r3, #0]
  PDM1_filter_handler.endianness = PDM_FILTER_ENDIANNESS_BE;
 800c5f6:	4b0f      	ldr	r3, [pc, #60]	; (800c634 <MX_PDM2PCM_Init+0x48>)
 800c5f8:	2201      	movs	r2, #1
 800c5fa:	805a      	strh	r2, [r3, #2]
  PDM1_filter_handler.high_pass_tap = 2104533974;
 800c5fc:	4b0d      	ldr	r3, [pc, #52]	; (800c634 <MX_PDM2PCM_Init+0x48>)
 800c5fe:	4a0e      	ldr	r2, [pc, #56]	; (800c638 <MX_PDM2PCM_Init+0x4c>)
 800c600:	605a      	str	r2, [r3, #4]
  PDM1_filter_handler.in_ptr_channels = 1;
 800c602:	4b0c      	ldr	r3, [pc, #48]	; (800c634 <MX_PDM2PCM_Init+0x48>)
 800c604:	2201      	movs	r2, #1
 800c606:	811a      	strh	r2, [r3, #8]
  PDM1_filter_handler.out_ptr_channels = 1;
 800c608:	4b0a      	ldr	r3, [pc, #40]	; (800c634 <MX_PDM2PCM_Init+0x48>)
 800c60a:	2201      	movs	r2, #1
 800c60c:	815a      	strh	r2, [r3, #10]
  PDM_Filter_Init(&PDM1_filter_handler);
 800c60e:	4809      	ldr	r0, [pc, #36]	; (800c634 <MX_PDM2PCM_Init+0x48>)
 800c610:	f002 fa44 	bl	800ea9c <PDM_Filter_Init>

  PDM1_filter_config.decimation_factor = PDM_FILTER_DEC_FACTOR_64;
 800c614:	4b09      	ldr	r3, [pc, #36]	; (800c63c <MX_PDM2PCM_Init+0x50>)
 800c616:	2202      	movs	r2, #2
 800c618:	801a      	strh	r2, [r3, #0]
  PDM1_filter_config.output_samples_number = 16;
 800c61a:	4b08      	ldr	r3, [pc, #32]	; (800c63c <MX_PDM2PCM_Init+0x50>)
 800c61c:	2210      	movs	r2, #16
 800c61e:	805a      	strh	r2, [r3, #2]
  PDM1_filter_config.mic_gain = 24;
 800c620:	4b06      	ldr	r3, [pc, #24]	; (800c63c <MX_PDM2PCM_Init+0x50>)
 800c622:	2218      	movs	r2, #24
 800c624:	809a      	strh	r2, [r3, #4]
  PDM_Filter_setConfig(&PDM1_filter_handler, &PDM1_filter_config);
 800c626:	4905      	ldr	r1, [pc, #20]	; (800c63c <MX_PDM2PCM_Init+0x50>)
 800c628:	4802      	ldr	r0, [pc, #8]	; (800c634 <MX_PDM2PCM_Init+0x48>)
 800c62a:	f002 fac1 	bl	800ebb0 <PDM_Filter_setConfig>

  /* USER CODE BEGIN 3 */
  /* USER CODE END 3 */

}
 800c62e:	bf00      	nop
 800c630:	bd80      	pop	{r7, pc}
 800c632:	bf00      	nop
 800c634:	20003384 	.word	0x20003384
 800c638:	7d70a3d6 	.word	0x7d70a3d6
 800c63c:	2000337c 	.word	0x2000337c

0800c640 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800c640:	b580      	push	{r7, lr}
 800c642:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800c644:	2200      	movs	r2, #0
 800c646:	4912      	ldr	r1, [pc, #72]	; (800c690 <MX_USB_DEVICE_Init+0x50>)
 800c648:	4812      	ldr	r0, [pc, #72]	; (800c694 <MX_USB_DEVICE_Init+0x54>)
 800c64a:	f7fe fec9 	bl	800b3e0 <USBD_Init>
 800c64e:	4603      	mov	r3, r0
 800c650:	2b00      	cmp	r3, #0
 800c652:	d001      	beq.n	800c658 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800c654:	f7f5 ff40 	bl	80024d8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800c658:	490f      	ldr	r1, [pc, #60]	; (800c698 <MX_USB_DEVICE_Init+0x58>)
 800c65a:	480e      	ldr	r0, [pc, #56]	; (800c694 <MX_USB_DEVICE_Init+0x54>)
 800c65c:	f7fe fef6 	bl	800b44c <USBD_RegisterClass>
 800c660:	4603      	mov	r3, r0
 800c662:	2b00      	cmp	r3, #0
 800c664:	d001      	beq.n	800c66a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800c666:	f7f5 ff37 	bl	80024d8 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800c66a:	490c      	ldr	r1, [pc, #48]	; (800c69c <MX_USB_DEVICE_Init+0x5c>)
 800c66c:	4809      	ldr	r0, [pc, #36]	; (800c694 <MX_USB_DEVICE_Init+0x54>)
 800c66e:	f7fe fe4b 	bl	800b308 <USBD_CDC_RegisterInterface>
 800c672:	4603      	mov	r3, r0
 800c674:	2b00      	cmp	r3, #0
 800c676:	d001      	beq.n	800c67c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800c678:	f7f5 ff2e 	bl	80024d8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800c67c:	4805      	ldr	r0, [pc, #20]	; (800c694 <MX_USB_DEVICE_Init+0x54>)
 800c67e:	f7fe ff06 	bl	800b48e <USBD_Start>
 800c682:	4603      	mov	r3, r0
 800c684:	2b00      	cmp	r3, #0
 800c686:	d001      	beq.n	800c68c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800c688:	f7f5 ff26 	bl	80024d8 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800c68c:	bf00      	nop
 800c68e:	bd80      	pop	{r7, pc}
 800c690:	20000530 	.word	0x20000530
 800c694:	200033d0 	.word	0x200033d0
 800c698:	20000418 	.word	0x20000418
 800c69c:	2000051c 	.word	0x2000051c

0800c6a0 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800c6a0:	b580      	push	{r7, lr}
 800c6a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800c6a4:	2200      	movs	r2, #0
 800c6a6:	4905      	ldr	r1, [pc, #20]	; (800c6bc <CDC_Init_FS+0x1c>)
 800c6a8:	4805      	ldr	r0, [pc, #20]	; (800c6c0 <CDC_Init_FS+0x20>)
 800c6aa:	f7fe fe42 	bl	800b332 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800c6ae:	4905      	ldr	r1, [pc, #20]	; (800c6c4 <CDC_Init_FS+0x24>)
 800c6b0:	4803      	ldr	r0, [pc, #12]	; (800c6c0 <CDC_Init_FS+0x20>)
 800c6b2:	f7fe fe57 	bl	800b364 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800c6b6:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800c6b8:	4618      	mov	r0, r3
 800c6ba:	bd80      	pop	{r7, pc}
 800c6bc:	20003ea0 	.word	0x20003ea0
 800c6c0:	200033d0 	.word	0x200033d0
 800c6c4:	200036a0 	.word	0x200036a0

0800c6c8 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800c6c8:	b480      	push	{r7}
 800c6ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800c6cc:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800c6ce:	4618      	mov	r0, r3
 800c6d0:	46bd      	mov	sp, r7
 800c6d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6d6:	4770      	bx	lr

0800c6d8 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800c6d8:	b480      	push	{r7}
 800c6da:	b083      	sub	sp, #12
 800c6dc:	af00      	add	r7, sp, #0
 800c6de:	4603      	mov	r3, r0
 800c6e0:	6039      	str	r1, [r7, #0]
 800c6e2:	71fb      	strb	r3, [r7, #7]
 800c6e4:	4613      	mov	r3, r2
 800c6e6:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800c6e8:	79fb      	ldrb	r3, [r7, #7]
 800c6ea:	2b23      	cmp	r3, #35	; 0x23
 800c6ec:	d84a      	bhi.n	800c784 <CDC_Control_FS+0xac>
 800c6ee:	a201      	add	r2, pc, #4	; (adr r2, 800c6f4 <CDC_Control_FS+0x1c>)
 800c6f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c6f4:	0800c785 	.word	0x0800c785
 800c6f8:	0800c785 	.word	0x0800c785
 800c6fc:	0800c785 	.word	0x0800c785
 800c700:	0800c785 	.word	0x0800c785
 800c704:	0800c785 	.word	0x0800c785
 800c708:	0800c785 	.word	0x0800c785
 800c70c:	0800c785 	.word	0x0800c785
 800c710:	0800c785 	.word	0x0800c785
 800c714:	0800c785 	.word	0x0800c785
 800c718:	0800c785 	.word	0x0800c785
 800c71c:	0800c785 	.word	0x0800c785
 800c720:	0800c785 	.word	0x0800c785
 800c724:	0800c785 	.word	0x0800c785
 800c728:	0800c785 	.word	0x0800c785
 800c72c:	0800c785 	.word	0x0800c785
 800c730:	0800c785 	.word	0x0800c785
 800c734:	0800c785 	.word	0x0800c785
 800c738:	0800c785 	.word	0x0800c785
 800c73c:	0800c785 	.word	0x0800c785
 800c740:	0800c785 	.word	0x0800c785
 800c744:	0800c785 	.word	0x0800c785
 800c748:	0800c785 	.word	0x0800c785
 800c74c:	0800c785 	.word	0x0800c785
 800c750:	0800c785 	.word	0x0800c785
 800c754:	0800c785 	.word	0x0800c785
 800c758:	0800c785 	.word	0x0800c785
 800c75c:	0800c785 	.word	0x0800c785
 800c760:	0800c785 	.word	0x0800c785
 800c764:	0800c785 	.word	0x0800c785
 800c768:	0800c785 	.word	0x0800c785
 800c76c:	0800c785 	.word	0x0800c785
 800c770:	0800c785 	.word	0x0800c785
 800c774:	0800c785 	.word	0x0800c785
 800c778:	0800c785 	.word	0x0800c785
 800c77c:	0800c785 	.word	0x0800c785
 800c780:	0800c785 	.word	0x0800c785
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800c784:	bf00      	nop
  }

  return (USBD_OK);
 800c786:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800c788:	4618      	mov	r0, r3
 800c78a:	370c      	adds	r7, #12
 800c78c:	46bd      	mov	sp, r7
 800c78e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c792:	4770      	bx	lr

0800c794 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800c794:	b580      	push	{r7, lr}
 800c796:	b082      	sub	sp, #8
 800c798:	af00      	add	r7, sp, #0
 800c79a:	6078      	str	r0, [r7, #4]
 800c79c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800c79e:	6879      	ldr	r1, [r7, #4]
 800c7a0:	4805      	ldr	r0, [pc, #20]	; (800c7b8 <CDC_Receive_FS+0x24>)
 800c7a2:	f7fe fddf 	bl	800b364 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800c7a6:	4804      	ldr	r0, [pc, #16]	; (800c7b8 <CDC_Receive_FS+0x24>)
 800c7a8:	f7fe fdf0 	bl	800b38c <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800c7ac:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800c7ae:	4618      	mov	r0, r3
 800c7b0:	3708      	adds	r7, #8
 800c7b2:	46bd      	mov	sp, r7
 800c7b4:	bd80      	pop	{r7, pc}
 800c7b6:	bf00      	nop
 800c7b8:	200033d0 	.word	0x200033d0

0800c7bc <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800c7bc:	b480      	push	{r7}
 800c7be:	b087      	sub	sp, #28
 800c7c0:	af00      	add	r7, sp, #0
 800c7c2:	60f8      	str	r0, [r7, #12]
 800c7c4:	60b9      	str	r1, [r7, #8]
 800c7c6:	4613      	mov	r3, r2
 800c7c8:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800c7ca:	2300      	movs	r3, #0
 800c7cc:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800c7ce:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800c7d2:	4618      	mov	r0, r3
 800c7d4:	371c      	adds	r7, #28
 800c7d6:	46bd      	mov	sp, r7
 800c7d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7dc:	4770      	bx	lr
	...

0800c7e0 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c7e0:	b480      	push	{r7}
 800c7e2:	b083      	sub	sp, #12
 800c7e4:	af00      	add	r7, sp, #0
 800c7e6:	4603      	mov	r3, r0
 800c7e8:	6039      	str	r1, [r7, #0]
 800c7ea:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800c7ec:	683b      	ldr	r3, [r7, #0]
 800c7ee:	2212      	movs	r2, #18
 800c7f0:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800c7f2:	4b03      	ldr	r3, [pc, #12]	; (800c800 <USBD_FS_DeviceDescriptor+0x20>)
}
 800c7f4:	4618      	mov	r0, r3
 800c7f6:	370c      	adds	r7, #12
 800c7f8:	46bd      	mov	sp, r7
 800c7fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7fe:	4770      	bx	lr
 800c800:	2000054c 	.word	0x2000054c

0800c804 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c804:	b480      	push	{r7}
 800c806:	b083      	sub	sp, #12
 800c808:	af00      	add	r7, sp, #0
 800c80a:	4603      	mov	r3, r0
 800c80c:	6039      	str	r1, [r7, #0]
 800c80e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800c810:	683b      	ldr	r3, [r7, #0]
 800c812:	2204      	movs	r2, #4
 800c814:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800c816:	4b03      	ldr	r3, [pc, #12]	; (800c824 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800c818:	4618      	mov	r0, r3
 800c81a:	370c      	adds	r7, #12
 800c81c:	46bd      	mov	sp, r7
 800c81e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c822:	4770      	bx	lr
 800c824:	20000560 	.word	0x20000560

0800c828 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c828:	b580      	push	{r7, lr}
 800c82a:	b082      	sub	sp, #8
 800c82c:	af00      	add	r7, sp, #0
 800c82e:	4603      	mov	r3, r0
 800c830:	6039      	str	r1, [r7, #0]
 800c832:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800c834:	79fb      	ldrb	r3, [r7, #7]
 800c836:	2b00      	cmp	r3, #0
 800c838:	d105      	bne.n	800c846 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800c83a:	683a      	ldr	r2, [r7, #0]
 800c83c:	4907      	ldr	r1, [pc, #28]	; (800c85c <USBD_FS_ProductStrDescriptor+0x34>)
 800c83e:	4808      	ldr	r0, [pc, #32]	; (800c860 <USBD_FS_ProductStrDescriptor+0x38>)
 800c840:	f7ff fdf3 	bl	800c42a <USBD_GetString>
 800c844:	e004      	b.n	800c850 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800c846:	683a      	ldr	r2, [r7, #0]
 800c848:	4904      	ldr	r1, [pc, #16]	; (800c85c <USBD_FS_ProductStrDescriptor+0x34>)
 800c84a:	4805      	ldr	r0, [pc, #20]	; (800c860 <USBD_FS_ProductStrDescriptor+0x38>)
 800c84c:	f7ff fded 	bl	800c42a <USBD_GetString>
  }
  return USBD_StrDesc;
 800c850:	4b02      	ldr	r3, [pc, #8]	; (800c85c <USBD_FS_ProductStrDescriptor+0x34>)
}
 800c852:	4618      	mov	r0, r3
 800c854:	3708      	adds	r7, #8
 800c856:	46bd      	mov	sp, r7
 800c858:	bd80      	pop	{r7, pc}
 800c85a:	bf00      	nop
 800c85c:	200046a0 	.word	0x200046a0
 800c860:	0800ffa4 	.word	0x0800ffa4

0800c864 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c864:	b580      	push	{r7, lr}
 800c866:	b082      	sub	sp, #8
 800c868:	af00      	add	r7, sp, #0
 800c86a:	4603      	mov	r3, r0
 800c86c:	6039      	str	r1, [r7, #0]
 800c86e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800c870:	683a      	ldr	r2, [r7, #0]
 800c872:	4904      	ldr	r1, [pc, #16]	; (800c884 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800c874:	4804      	ldr	r0, [pc, #16]	; (800c888 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800c876:	f7ff fdd8 	bl	800c42a <USBD_GetString>
  return USBD_StrDesc;
 800c87a:	4b02      	ldr	r3, [pc, #8]	; (800c884 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800c87c:	4618      	mov	r0, r3
 800c87e:	3708      	adds	r7, #8
 800c880:	46bd      	mov	sp, r7
 800c882:	bd80      	pop	{r7, pc}
 800c884:	200046a0 	.word	0x200046a0
 800c888:	0800ffbc 	.word	0x0800ffbc

0800c88c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c88c:	b580      	push	{r7, lr}
 800c88e:	b082      	sub	sp, #8
 800c890:	af00      	add	r7, sp, #0
 800c892:	4603      	mov	r3, r0
 800c894:	6039      	str	r1, [r7, #0]
 800c896:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800c898:	683b      	ldr	r3, [r7, #0]
 800c89a:	221a      	movs	r2, #26
 800c89c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800c89e:	f000 f843 	bl	800c928 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800c8a2:	4b02      	ldr	r3, [pc, #8]	; (800c8ac <USBD_FS_SerialStrDescriptor+0x20>)
}
 800c8a4:	4618      	mov	r0, r3
 800c8a6:	3708      	adds	r7, #8
 800c8a8:	46bd      	mov	sp, r7
 800c8aa:	bd80      	pop	{r7, pc}
 800c8ac:	20000564 	.word	0x20000564

0800c8b0 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c8b0:	b580      	push	{r7, lr}
 800c8b2:	b082      	sub	sp, #8
 800c8b4:	af00      	add	r7, sp, #0
 800c8b6:	4603      	mov	r3, r0
 800c8b8:	6039      	str	r1, [r7, #0]
 800c8ba:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800c8bc:	79fb      	ldrb	r3, [r7, #7]
 800c8be:	2b00      	cmp	r3, #0
 800c8c0:	d105      	bne.n	800c8ce <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800c8c2:	683a      	ldr	r2, [r7, #0]
 800c8c4:	4907      	ldr	r1, [pc, #28]	; (800c8e4 <USBD_FS_ConfigStrDescriptor+0x34>)
 800c8c6:	4808      	ldr	r0, [pc, #32]	; (800c8e8 <USBD_FS_ConfigStrDescriptor+0x38>)
 800c8c8:	f7ff fdaf 	bl	800c42a <USBD_GetString>
 800c8cc:	e004      	b.n	800c8d8 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800c8ce:	683a      	ldr	r2, [r7, #0]
 800c8d0:	4904      	ldr	r1, [pc, #16]	; (800c8e4 <USBD_FS_ConfigStrDescriptor+0x34>)
 800c8d2:	4805      	ldr	r0, [pc, #20]	; (800c8e8 <USBD_FS_ConfigStrDescriptor+0x38>)
 800c8d4:	f7ff fda9 	bl	800c42a <USBD_GetString>
  }
  return USBD_StrDesc;
 800c8d8:	4b02      	ldr	r3, [pc, #8]	; (800c8e4 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800c8da:	4618      	mov	r0, r3
 800c8dc:	3708      	adds	r7, #8
 800c8de:	46bd      	mov	sp, r7
 800c8e0:	bd80      	pop	{r7, pc}
 800c8e2:	bf00      	nop
 800c8e4:	200046a0 	.word	0x200046a0
 800c8e8:	0800ffd0 	.word	0x0800ffd0

0800c8ec <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c8ec:	b580      	push	{r7, lr}
 800c8ee:	b082      	sub	sp, #8
 800c8f0:	af00      	add	r7, sp, #0
 800c8f2:	4603      	mov	r3, r0
 800c8f4:	6039      	str	r1, [r7, #0]
 800c8f6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800c8f8:	79fb      	ldrb	r3, [r7, #7]
 800c8fa:	2b00      	cmp	r3, #0
 800c8fc:	d105      	bne.n	800c90a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800c8fe:	683a      	ldr	r2, [r7, #0]
 800c900:	4907      	ldr	r1, [pc, #28]	; (800c920 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800c902:	4808      	ldr	r0, [pc, #32]	; (800c924 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800c904:	f7ff fd91 	bl	800c42a <USBD_GetString>
 800c908:	e004      	b.n	800c914 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800c90a:	683a      	ldr	r2, [r7, #0]
 800c90c:	4904      	ldr	r1, [pc, #16]	; (800c920 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800c90e:	4805      	ldr	r0, [pc, #20]	; (800c924 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800c910:	f7ff fd8b 	bl	800c42a <USBD_GetString>
  }
  return USBD_StrDesc;
 800c914:	4b02      	ldr	r3, [pc, #8]	; (800c920 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800c916:	4618      	mov	r0, r3
 800c918:	3708      	adds	r7, #8
 800c91a:	46bd      	mov	sp, r7
 800c91c:	bd80      	pop	{r7, pc}
 800c91e:	bf00      	nop
 800c920:	200046a0 	.word	0x200046a0
 800c924:	0800ffdc 	.word	0x0800ffdc

0800c928 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800c928:	b580      	push	{r7, lr}
 800c92a:	b084      	sub	sp, #16
 800c92c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800c92e:	4b0f      	ldr	r3, [pc, #60]	; (800c96c <Get_SerialNum+0x44>)
 800c930:	681b      	ldr	r3, [r3, #0]
 800c932:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800c934:	4b0e      	ldr	r3, [pc, #56]	; (800c970 <Get_SerialNum+0x48>)
 800c936:	681b      	ldr	r3, [r3, #0]
 800c938:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800c93a:	4b0e      	ldr	r3, [pc, #56]	; (800c974 <Get_SerialNum+0x4c>)
 800c93c:	681b      	ldr	r3, [r3, #0]
 800c93e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800c940:	68fa      	ldr	r2, [r7, #12]
 800c942:	687b      	ldr	r3, [r7, #4]
 800c944:	4413      	add	r3, r2
 800c946:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800c948:	68fb      	ldr	r3, [r7, #12]
 800c94a:	2b00      	cmp	r3, #0
 800c94c:	d009      	beq.n	800c962 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800c94e:	2208      	movs	r2, #8
 800c950:	4909      	ldr	r1, [pc, #36]	; (800c978 <Get_SerialNum+0x50>)
 800c952:	68f8      	ldr	r0, [r7, #12]
 800c954:	f000 f814 	bl	800c980 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800c958:	2204      	movs	r2, #4
 800c95a:	4908      	ldr	r1, [pc, #32]	; (800c97c <Get_SerialNum+0x54>)
 800c95c:	68b8      	ldr	r0, [r7, #8]
 800c95e:	f000 f80f 	bl	800c980 <IntToUnicode>
  }
}
 800c962:	bf00      	nop
 800c964:	3710      	adds	r7, #16
 800c966:	46bd      	mov	sp, r7
 800c968:	bd80      	pop	{r7, pc}
 800c96a:	bf00      	nop
 800c96c:	1fff7a10 	.word	0x1fff7a10
 800c970:	1fff7a14 	.word	0x1fff7a14
 800c974:	1fff7a18 	.word	0x1fff7a18
 800c978:	20000566 	.word	0x20000566
 800c97c:	20000576 	.word	0x20000576

0800c980 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800c980:	b480      	push	{r7}
 800c982:	b087      	sub	sp, #28
 800c984:	af00      	add	r7, sp, #0
 800c986:	60f8      	str	r0, [r7, #12]
 800c988:	60b9      	str	r1, [r7, #8]
 800c98a:	4613      	mov	r3, r2
 800c98c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800c98e:	2300      	movs	r3, #0
 800c990:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800c992:	2300      	movs	r3, #0
 800c994:	75fb      	strb	r3, [r7, #23]
 800c996:	e027      	b.n	800c9e8 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800c998:	68fb      	ldr	r3, [r7, #12]
 800c99a:	0f1b      	lsrs	r3, r3, #28
 800c99c:	2b09      	cmp	r3, #9
 800c99e:	d80b      	bhi.n	800c9b8 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800c9a0:	68fb      	ldr	r3, [r7, #12]
 800c9a2:	0f1b      	lsrs	r3, r3, #28
 800c9a4:	b2da      	uxtb	r2, r3
 800c9a6:	7dfb      	ldrb	r3, [r7, #23]
 800c9a8:	005b      	lsls	r3, r3, #1
 800c9aa:	4619      	mov	r1, r3
 800c9ac:	68bb      	ldr	r3, [r7, #8]
 800c9ae:	440b      	add	r3, r1
 800c9b0:	3230      	adds	r2, #48	; 0x30
 800c9b2:	b2d2      	uxtb	r2, r2
 800c9b4:	701a      	strb	r2, [r3, #0]
 800c9b6:	e00a      	b.n	800c9ce <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800c9b8:	68fb      	ldr	r3, [r7, #12]
 800c9ba:	0f1b      	lsrs	r3, r3, #28
 800c9bc:	b2da      	uxtb	r2, r3
 800c9be:	7dfb      	ldrb	r3, [r7, #23]
 800c9c0:	005b      	lsls	r3, r3, #1
 800c9c2:	4619      	mov	r1, r3
 800c9c4:	68bb      	ldr	r3, [r7, #8]
 800c9c6:	440b      	add	r3, r1
 800c9c8:	3237      	adds	r2, #55	; 0x37
 800c9ca:	b2d2      	uxtb	r2, r2
 800c9cc:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800c9ce:	68fb      	ldr	r3, [r7, #12]
 800c9d0:	011b      	lsls	r3, r3, #4
 800c9d2:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800c9d4:	7dfb      	ldrb	r3, [r7, #23]
 800c9d6:	005b      	lsls	r3, r3, #1
 800c9d8:	3301      	adds	r3, #1
 800c9da:	68ba      	ldr	r2, [r7, #8]
 800c9dc:	4413      	add	r3, r2
 800c9de:	2200      	movs	r2, #0
 800c9e0:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800c9e2:	7dfb      	ldrb	r3, [r7, #23]
 800c9e4:	3301      	adds	r3, #1
 800c9e6:	75fb      	strb	r3, [r7, #23]
 800c9e8:	7dfa      	ldrb	r2, [r7, #23]
 800c9ea:	79fb      	ldrb	r3, [r7, #7]
 800c9ec:	429a      	cmp	r2, r3
 800c9ee:	d3d3      	bcc.n	800c998 <IntToUnicode+0x18>
  }
}
 800c9f0:	bf00      	nop
 800c9f2:	371c      	adds	r7, #28
 800c9f4:	46bd      	mov	sp, r7
 800c9f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9fa:	4770      	bx	lr

0800c9fc <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800c9fc:	b580      	push	{r7, lr}
 800c9fe:	b08a      	sub	sp, #40	; 0x28
 800ca00:	af00      	add	r7, sp, #0
 800ca02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ca04:	f107 0314 	add.w	r3, r7, #20
 800ca08:	2200      	movs	r2, #0
 800ca0a:	601a      	str	r2, [r3, #0]
 800ca0c:	605a      	str	r2, [r3, #4]
 800ca0e:	609a      	str	r2, [r3, #8]
 800ca10:	60da      	str	r2, [r3, #12]
 800ca12:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800ca14:	687b      	ldr	r3, [r7, #4]
 800ca16:	681b      	ldr	r3, [r3, #0]
 800ca18:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800ca1c:	d147      	bne.n	800caae <HAL_PCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800ca1e:	2300      	movs	r3, #0
 800ca20:	613b      	str	r3, [r7, #16]
 800ca22:	4b25      	ldr	r3, [pc, #148]	; (800cab8 <HAL_PCD_MspInit+0xbc>)
 800ca24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ca26:	4a24      	ldr	r2, [pc, #144]	; (800cab8 <HAL_PCD_MspInit+0xbc>)
 800ca28:	f043 0301 	orr.w	r3, r3, #1
 800ca2c:	6313      	str	r3, [r2, #48]	; 0x30
 800ca2e:	4b22      	ldr	r3, [pc, #136]	; (800cab8 <HAL_PCD_MspInit+0xbc>)
 800ca30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ca32:	f003 0301 	and.w	r3, r3, #1
 800ca36:	613b      	str	r3, [r7, #16]
 800ca38:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800ca3a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ca3e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800ca40:	2300      	movs	r3, #0
 800ca42:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ca44:	2300      	movs	r3, #0
 800ca46:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800ca48:	f107 0314 	add.w	r3, r7, #20
 800ca4c:	4619      	mov	r1, r3
 800ca4e:	481b      	ldr	r0, [pc, #108]	; (800cabc <HAL_PCD_MspInit+0xc0>)
 800ca50:	f7f6 fea2 	bl	8003798 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800ca54:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800ca58:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ca5a:	2302      	movs	r3, #2
 800ca5c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ca5e:	2300      	movs	r3, #0
 800ca60:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ca62:	2303      	movs	r3, #3
 800ca64:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800ca66:	230a      	movs	r3, #10
 800ca68:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800ca6a:	f107 0314 	add.w	r3, r7, #20
 800ca6e:	4619      	mov	r1, r3
 800ca70:	4812      	ldr	r0, [pc, #72]	; (800cabc <HAL_PCD_MspInit+0xc0>)
 800ca72:	f7f6 fe91 	bl	8003798 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800ca76:	4b10      	ldr	r3, [pc, #64]	; (800cab8 <HAL_PCD_MspInit+0xbc>)
 800ca78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ca7a:	4a0f      	ldr	r2, [pc, #60]	; (800cab8 <HAL_PCD_MspInit+0xbc>)
 800ca7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ca80:	6353      	str	r3, [r2, #52]	; 0x34
 800ca82:	2300      	movs	r3, #0
 800ca84:	60fb      	str	r3, [r7, #12]
 800ca86:	4b0c      	ldr	r3, [pc, #48]	; (800cab8 <HAL_PCD_MspInit+0xbc>)
 800ca88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ca8a:	4a0b      	ldr	r2, [pc, #44]	; (800cab8 <HAL_PCD_MspInit+0xbc>)
 800ca8c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800ca90:	6453      	str	r3, [r2, #68]	; 0x44
 800ca92:	4b09      	ldr	r3, [pc, #36]	; (800cab8 <HAL_PCD_MspInit+0xbc>)
 800ca94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ca96:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ca9a:	60fb      	str	r3, [r7, #12]
 800ca9c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800ca9e:	2200      	movs	r2, #0
 800caa0:	2100      	movs	r1, #0
 800caa2:	2043      	movs	r0, #67	; 0x43
 800caa4:	f7f6 f914 	bl	8002cd0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800caa8:	2043      	movs	r0, #67	; 0x43
 800caaa:	f7f6 f93d 	bl	8002d28 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800caae:	bf00      	nop
 800cab0:	3728      	adds	r7, #40	; 0x28
 800cab2:	46bd      	mov	sp, r7
 800cab4:	bd80      	pop	{r7, pc}
 800cab6:	bf00      	nop
 800cab8:	40023800 	.word	0x40023800
 800cabc:	40020000 	.word	0x40020000

0800cac0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cac0:	b580      	push	{r7, lr}
 800cac2:	b082      	sub	sp, #8
 800cac4:	af00      	add	r7, sp, #0
 800cac6:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800cac8:	687b      	ldr	r3, [r7, #4]
 800caca:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 800cace:	687b      	ldr	r3, [r7, #4]
 800cad0:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800cad4:	4619      	mov	r1, r3
 800cad6:	4610      	mov	r0, r2
 800cad8:	f7fe fd24 	bl	800b524 <USBD_LL_SetupStage>
}
 800cadc:	bf00      	nop
 800cade:	3708      	adds	r7, #8
 800cae0:	46bd      	mov	sp, r7
 800cae2:	bd80      	pop	{r7, pc}

0800cae4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cae4:	b580      	push	{r7, lr}
 800cae6:	b082      	sub	sp, #8
 800cae8:	af00      	add	r7, sp, #0
 800caea:	6078      	str	r0, [r7, #4]
 800caec:	460b      	mov	r3, r1
 800caee:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800caf0:	687b      	ldr	r3, [r7, #4]
 800caf2:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800caf6:	78fa      	ldrb	r2, [r7, #3]
 800caf8:	6879      	ldr	r1, [r7, #4]
 800cafa:	4613      	mov	r3, r2
 800cafc:	00db      	lsls	r3, r3, #3
 800cafe:	1a9b      	subs	r3, r3, r2
 800cb00:	009b      	lsls	r3, r3, #2
 800cb02:	440b      	add	r3, r1
 800cb04:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800cb08:	681a      	ldr	r2, [r3, #0]
 800cb0a:	78fb      	ldrb	r3, [r7, #3]
 800cb0c:	4619      	mov	r1, r3
 800cb0e:	f7fe fd5c 	bl	800b5ca <USBD_LL_DataOutStage>
}
 800cb12:	bf00      	nop
 800cb14:	3708      	adds	r7, #8
 800cb16:	46bd      	mov	sp, r7
 800cb18:	bd80      	pop	{r7, pc}

0800cb1a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cb1a:	b580      	push	{r7, lr}
 800cb1c:	b082      	sub	sp, #8
 800cb1e:	af00      	add	r7, sp, #0
 800cb20:	6078      	str	r0, [r7, #4]
 800cb22:	460b      	mov	r3, r1
 800cb24:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800cb26:	687b      	ldr	r3, [r7, #4]
 800cb28:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800cb2c:	78fa      	ldrb	r2, [r7, #3]
 800cb2e:	6879      	ldr	r1, [r7, #4]
 800cb30:	4613      	mov	r3, r2
 800cb32:	00db      	lsls	r3, r3, #3
 800cb34:	1a9b      	subs	r3, r3, r2
 800cb36:	009b      	lsls	r3, r3, #2
 800cb38:	440b      	add	r3, r1
 800cb3a:	3348      	adds	r3, #72	; 0x48
 800cb3c:	681a      	ldr	r2, [r3, #0]
 800cb3e:	78fb      	ldrb	r3, [r7, #3]
 800cb40:	4619      	mov	r1, r3
 800cb42:	f7fe fda5 	bl	800b690 <USBD_LL_DataInStage>
}
 800cb46:	bf00      	nop
 800cb48:	3708      	adds	r7, #8
 800cb4a:	46bd      	mov	sp, r7
 800cb4c:	bd80      	pop	{r7, pc}

0800cb4e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cb4e:	b580      	push	{r7, lr}
 800cb50:	b082      	sub	sp, #8
 800cb52:	af00      	add	r7, sp, #0
 800cb54:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800cb56:	687b      	ldr	r3, [r7, #4]
 800cb58:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800cb5c:	4618      	mov	r0, r3
 800cb5e:	f7fe fea9 	bl	800b8b4 <USBD_LL_SOF>
}
 800cb62:	bf00      	nop
 800cb64:	3708      	adds	r7, #8
 800cb66:	46bd      	mov	sp, r7
 800cb68:	bd80      	pop	{r7, pc}

0800cb6a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cb6a:	b580      	push	{r7, lr}
 800cb6c:	b084      	sub	sp, #16
 800cb6e:	af00      	add	r7, sp, #0
 800cb70:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800cb72:	2301      	movs	r3, #1
 800cb74:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800cb76:	687b      	ldr	r3, [r7, #4]
 800cb78:	68db      	ldr	r3, [r3, #12]
 800cb7a:	2b02      	cmp	r3, #2
 800cb7c:	d001      	beq.n	800cb82 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800cb7e:	f7f5 fcab 	bl	80024d8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800cb82:	687b      	ldr	r3, [r7, #4]
 800cb84:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800cb88:	7bfa      	ldrb	r2, [r7, #15]
 800cb8a:	4611      	mov	r1, r2
 800cb8c:	4618      	mov	r0, r3
 800cb8e:	f7fe fe56 	bl	800b83e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800cb92:	687b      	ldr	r3, [r7, #4]
 800cb94:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800cb98:	4618      	mov	r0, r3
 800cb9a:	f7fe fe0f 	bl	800b7bc <USBD_LL_Reset>
}
 800cb9e:	bf00      	nop
 800cba0:	3710      	adds	r7, #16
 800cba2:	46bd      	mov	sp, r7
 800cba4:	bd80      	pop	{r7, pc}
	...

0800cba8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cba8:	b580      	push	{r7, lr}
 800cbaa:	b082      	sub	sp, #8
 800cbac:	af00      	add	r7, sp, #0
 800cbae:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800cbb0:	687b      	ldr	r3, [r7, #4]
 800cbb2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800cbb6:	4618      	mov	r0, r3
 800cbb8:	f7fe fe51 	bl	800b85e <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800cbbc:	687b      	ldr	r3, [r7, #4]
 800cbbe:	681b      	ldr	r3, [r3, #0]
 800cbc0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800cbc4:	681b      	ldr	r3, [r3, #0]
 800cbc6:	687a      	ldr	r2, [r7, #4]
 800cbc8:	6812      	ldr	r2, [r2, #0]
 800cbca:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800cbce:	f043 0301 	orr.w	r3, r3, #1
 800cbd2:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800cbd4:	687b      	ldr	r3, [r7, #4]
 800cbd6:	6a1b      	ldr	r3, [r3, #32]
 800cbd8:	2b00      	cmp	r3, #0
 800cbda:	d005      	beq.n	800cbe8 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800cbdc:	4b04      	ldr	r3, [pc, #16]	; (800cbf0 <HAL_PCD_SuspendCallback+0x48>)
 800cbde:	691b      	ldr	r3, [r3, #16]
 800cbe0:	4a03      	ldr	r2, [pc, #12]	; (800cbf0 <HAL_PCD_SuspendCallback+0x48>)
 800cbe2:	f043 0306 	orr.w	r3, r3, #6
 800cbe6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800cbe8:	bf00      	nop
 800cbea:	3708      	adds	r7, #8
 800cbec:	46bd      	mov	sp, r7
 800cbee:	bd80      	pop	{r7, pc}
 800cbf0:	e000ed00 	.word	0xe000ed00

0800cbf4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cbf4:	b580      	push	{r7, lr}
 800cbf6:	b082      	sub	sp, #8
 800cbf8:	af00      	add	r7, sp, #0
 800cbfa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800cbfc:	687b      	ldr	r3, [r7, #4]
 800cbfe:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800cc02:	4618      	mov	r0, r3
 800cc04:	f7fe fe40 	bl	800b888 <USBD_LL_Resume>
}
 800cc08:	bf00      	nop
 800cc0a:	3708      	adds	r7, #8
 800cc0c:	46bd      	mov	sp, r7
 800cc0e:	bd80      	pop	{r7, pc}

0800cc10 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cc10:	b580      	push	{r7, lr}
 800cc12:	b082      	sub	sp, #8
 800cc14:	af00      	add	r7, sp, #0
 800cc16:	6078      	str	r0, [r7, #4]
 800cc18:	460b      	mov	r3, r1
 800cc1a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800cc1c:	687b      	ldr	r3, [r7, #4]
 800cc1e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800cc22:	78fa      	ldrb	r2, [r7, #3]
 800cc24:	4611      	mov	r1, r2
 800cc26:	4618      	mov	r0, r3
 800cc28:	f7fe fe6b 	bl	800b902 <USBD_LL_IsoOUTIncomplete>
}
 800cc2c:	bf00      	nop
 800cc2e:	3708      	adds	r7, #8
 800cc30:	46bd      	mov	sp, r7
 800cc32:	bd80      	pop	{r7, pc}

0800cc34 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cc34:	b580      	push	{r7, lr}
 800cc36:	b082      	sub	sp, #8
 800cc38:	af00      	add	r7, sp, #0
 800cc3a:	6078      	str	r0, [r7, #4]
 800cc3c:	460b      	mov	r3, r1
 800cc3e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800cc40:	687b      	ldr	r3, [r7, #4]
 800cc42:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800cc46:	78fa      	ldrb	r2, [r7, #3]
 800cc48:	4611      	mov	r1, r2
 800cc4a:	4618      	mov	r0, r3
 800cc4c:	f7fe fe4c 	bl	800b8e8 <USBD_LL_IsoINIncomplete>
}
 800cc50:	bf00      	nop
 800cc52:	3708      	adds	r7, #8
 800cc54:	46bd      	mov	sp, r7
 800cc56:	bd80      	pop	{r7, pc}

0800cc58 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cc58:	b580      	push	{r7, lr}
 800cc5a:	b082      	sub	sp, #8
 800cc5c:	af00      	add	r7, sp, #0
 800cc5e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800cc60:	687b      	ldr	r3, [r7, #4]
 800cc62:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800cc66:	4618      	mov	r0, r3
 800cc68:	f7fe fe58 	bl	800b91c <USBD_LL_DevConnected>
}
 800cc6c:	bf00      	nop
 800cc6e:	3708      	adds	r7, #8
 800cc70:	46bd      	mov	sp, r7
 800cc72:	bd80      	pop	{r7, pc}

0800cc74 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cc74:	b580      	push	{r7, lr}
 800cc76:	b082      	sub	sp, #8
 800cc78:	af00      	add	r7, sp, #0
 800cc7a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800cc7c:	687b      	ldr	r3, [r7, #4]
 800cc7e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800cc82:	4618      	mov	r0, r3
 800cc84:	f7fe fe55 	bl	800b932 <USBD_LL_DevDisconnected>
}
 800cc88:	bf00      	nop
 800cc8a:	3708      	adds	r7, #8
 800cc8c:	46bd      	mov	sp, r7
 800cc8e:	bd80      	pop	{r7, pc}

0800cc90 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800cc90:	b580      	push	{r7, lr}
 800cc92:	b082      	sub	sp, #8
 800cc94:	af00      	add	r7, sp, #0
 800cc96:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800cc98:	687b      	ldr	r3, [r7, #4]
 800cc9a:	781b      	ldrb	r3, [r3, #0]
 800cc9c:	2b00      	cmp	r3, #0
 800cc9e:	d13c      	bne.n	800cd1a <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800cca0:	4a20      	ldr	r2, [pc, #128]	; (800cd24 <USBD_LL_Init+0x94>)
 800cca2:	687b      	ldr	r3, [r7, #4]
 800cca4:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 800cca8:	687b      	ldr	r3, [r7, #4]
 800ccaa:	4a1e      	ldr	r2, [pc, #120]	; (800cd24 <USBD_LL_Init+0x94>)
 800ccac:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800ccb0:	4b1c      	ldr	r3, [pc, #112]	; (800cd24 <USBD_LL_Init+0x94>)
 800ccb2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800ccb6:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800ccb8:	4b1a      	ldr	r3, [pc, #104]	; (800cd24 <USBD_LL_Init+0x94>)
 800ccba:	2204      	movs	r2, #4
 800ccbc:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800ccbe:	4b19      	ldr	r3, [pc, #100]	; (800cd24 <USBD_LL_Init+0x94>)
 800ccc0:	2202      	movs	r2, #2
 800ccc2:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800ccc4:	4b17      	ldr	r3, [pc, #92]	; (800cd24 <USBD_LL_Init+0x94>)
 800ccc6:	2200      	movs	r2, #0
 800ccc8:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800ccca:	4b16      	ldr	r3, [pc, #88]	; (800cd24 <USBD_LL_Init+0x94>)
 800cccc:	2202      	movs	r2, #2
 800ccce:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800ccd0:	4b14      	ldr	r3, [pc, #80]	; (800cd24 <USBD_LL_Init+0x94>)
 800ccd2:	2200      	movs	r2, #0
 800ccd4:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800ccd6:	4b13      	ldr	r3, [pc, #76]	; (800cd24 <USBD_LL_Init+0x94>)
 800ccd8:	2200      	movs	r2, #0
 800ccda:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800ccdc:	4b11      	ldr	r3, [pc, #68]	; (800cd24 <USBD_LL_Init+0x94>)
 800ccde:	2200      	movs	r2, #0
 800cce0:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800cce2:	4b10      	ldr	r3, [pc, #64]	; (800cd24 <USBD_LL_Init+0x94>)
 800cce4:	2201      	movs	r2, #1
 800cce6:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800cce8:	4b0e      	ldr	r3, [pc, #56]	; (800cd24 <USBD_LL_Init+0x94>)
 800ccea:	2200      	movs	r2, #0
 800ccec:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800ccee:	480d      	ldr	r0, [pc, #52]	; (800cd24 <USBD_LL_Init+0x94>)
 800ccf0:	f7f8 ffa8 	bl	8005c44 <HAL_PCD_Init>
 800ccf4:	4603      	mov	r3, r0
 800ccf6:	2b00      	cmp	r3, #0
 800ccf8:	d001      	beq.n	800ccfe <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800ccfa:	f7f5 fbed 	bl	80024d8 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800ccfe:	2180      	movs	r1, #128	; 0x80
 800cd00:	4808      	ldr	r0, [pc, #32]	; (800cd24 <USBD_LL_Init+0x94>)
 800cd02:	f7fa f910 	bl	8006f26 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800cd06:	2240      	movs	r2, #64	; 0x40
 800cd08:	2100      	movs	r1, #0
 800cd0a:	4806      	ldr	r0, [pc, #24]	; (800cd24 <USBD_LL_Init+0x94>)
 800cd0c:	f7fa f8c4 	bl	8006e98 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800cd10:	2280      	movs	r2, #128	; 0x80
 800cd12:	2101      	movs	r1, #1
 800cd14:	4803      	ldr	r0, [pc, #12]	; (800cd24 <USBD_LL_Init+0x94>)
 800cd16:	f7fa f8bf 	bl	8006e98 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800cd1a:	2300      	movs	r3, #0
}
 800cd1c:	4618      	mov	r0, r3
 800cd1e:	3708      	adds	r7, #8
 800cd20:	46bd      	mov	sp, r7
 800cd22:	bd80      	pop	{r7, pc}
 800cd24:	200048a0 	.word	0x200048a0

0800cd28 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800cd28:	b580      	push	{r7, lr}
 800cd2a:	b084      	sub	sp, #16
 800cd2c:	af00      	add	r7, sp, #0
 800cd2e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cd30:	2300      	movs	r3, #0
 800cd32:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cd34:	2300      	movs	r3, #0
 800cd36:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800cd38:	687b      	ldr	r3, [r7, #4]
 800cd3a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800cd3e:	4618      	mov	r0, r3
 800cd40:	f7f9 f8a8 	bl	8005e94 <HAL_PCD_Start>
 800cd44:	4603      	mov	r3, r0
 800cd46:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cd48:	7bfb      	ldrb	r3, [r7, #15]
 800cd4a:	4618      	mov	r0, r3
 800cd4c:	f000 f92a 	bl	800cfa4 <USBD_Get_USB_Status>
 800cd50:	4603      	mov	r3, r0
 800cd52:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cd54:	7bbb      	ldrb	r3, [r7, #14]
}
 800cd56:	4618      	mov	r0, r3
 800cd58:	3710      	adds	r7, #16
 800cd5a:	46bd      	mov	sp, r7
 800cd5c:	bd80      	pop	{r7, pc}

0800cd5e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800cd5e:	b580      	push	{r7, lr}
 800cd60:	b084      	sub	sp, #16
 800cd62:	af00      	add	r7, sp, #0
 800cd64:	6078      	str	r0, [r7, #4]
 800cd66:	4608      	mov	r0, r1
 800cd68:	4611      	mov	r1, r2
 800cd6a:	461a      	mov	r2, r3
 800cd6c:	4603      	mov	r3, r0
 800cd6e:	70fb      	strb	r3, [r7, #3]
 800cd70:	460b      	mov	r3, r1
 800cd72:	70bb      	strb	r3, [r7, #2]
 800cd74:	4613      	mov	r3, r2
 800cd76:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cd78:	2300      	movs	r3, #0
 800cd7a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cd7c:	2300      	movs	r3, #0
 800cd7e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800cd80:	687b      	ldr	r3, [r7, #4]
 800cd82:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800cd86:	78bb      	ldrb	r3, [r7, #2]
 800cd88:	883a      	ldrh	r2, [r7, #0]
 800cd8a:	78f9      	ldrb	r1, [r7, #3]
 800cd8c:	f7f9 fc8c 	bl	80066a8 <HAL_PCD_EP_Open>
 800cd90:	4603      	mov	r3, r0
 800cd92:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cd94:	7bfb      	ldrb	r3, [r7, #15]
 800cd96:	4618      	mov	r0, r3
 800cd98:	f000 f904 	bl	800cfa4 <USBD_Get_USB_Status>
 800cd9c:	4603      	mov	r3, r0
 800cd9e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cda0:	7bbb      	ldrb	r3, [r7, #14]
}
 800cda2:	4618      	mov	r0, r3
 800cda4:	3710      	adds	r7, #16
 800cda6:	46bd      	mov	sp, r7
 800cda8:	bd80      	pop	{r7, pc}

0800cdaa <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cdaa:	b580      	push	{r7, lr}
 800cdac:	b084      	sub	sp, #16
 800cdae:	af00      	add	r7, sp, #0
 800cdb0:	6078      	str	r0, [r7, #4]
 800cdb2:	460b      	mov	r3, r1
 800cdb4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cdb6:	2300      	movs	r3, #0
 800cdb8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cdba:	2300      	movs	r3, #0
 800cdbc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800cdbe:	687b      	ldr	r3, [r7, #4]
 800cdc0:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800cdc4:	78fa      	ldrb	r2, [r7, #3]
 800cdc6:	4611      	mov	r1, r2
 800cdc8:	4618      	mov	r0, r3
 800cdca:	f7f9 fcd5 	bl	8006778 <HAL_PCD_EP_Close>
 800cdce:	4603      	mov	r3, r0
 800cdd0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cdd2:	7bfb      	ldrb	r3, [r7, #15]
 800cdd4:	4618      	mov	r0, r3
 800cdd6:	f000 f8e5 	bl	800cfa4 <USBD_Get_USB_Status>
 800cdda:	4603      	mov	r3, r0
 800cddc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cdde:	7bbb      	ldrb	r3, [r7, #14]
}
 800cde0:	4618      	mov	r0, r3
 800cde2:	3710      	adds	r7, #16
 800cde4:	46bd      	mov	sp, r7
 800cde6:	bd80      	pop	{r7, pc}

0800cde8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cde8:	b580      	push	{r7, lr}
 800cdea:	b084      	sub	sp, #16
 800cdec:	af00      	add	r7, sp, #0
 800cdee:	6078      	str	r0, [r7, #4]
 800cdf0:	460b      	mov	r3, r1
 800cdf2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cdf4:	2300      	movs	r3, #0
 800cdf6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cdf8:	2300      	movs	r3, #0
 800cdfa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800cdfc:	687b      	ldr	r3, [r7, #4]
 800cdfe:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800ce02:	78fa      	ldrb	r2, [r7, #3]
 800ce04:	4611      	mov	r1, r2
 800ce06:	4618      	mov	r0, r3
 800ce08:	f7f9 fdad 	bl	8006966 <HAL_PCD_EP_SetStall>
 800ce0c:	4603      	mov	r3, r0
 800ce0e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ce10:	7bfb      	ldrb	r3, [r7, #15]
 800ce12:	4618      	mov	r0, r3
 800ce14:	f000 f8c6 	bl	800cfa4 <USBD_Get_USB_Status>
 800ce18:	4603      	mov	r3, r0
 800ce1a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ce1c:	7bbb      	ldrb	r3, [r7, #14]
}
 800ce1e:	4618      	mov	r0, r3
 800ce20:	3710      	adds	r7, #16
 800ce22:	46bd      	mov	sp, r7
 800ce24:	bd80      	pop	{r7, pc}

0800ce26 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ce26:	b580      	push	{r7, lr}
 800ce28:	b084      	sub	sp, #16
 800ce2a:	af00      	add	r7, sp, #0
 800ce2c:	6078      	str	r0, [r7, #4]
 800ce2e:	460b      	mov	r3, r1
 800ce30:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ce32:	2300      	movs	r3, #0
 800ce34:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ce36:	2300      	movs	r3, #0
 800ce38:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800ce3a:	687b      	ldr	r3, [r7, #4]
 800ce3c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800ce40:	78fa      	ldrb	r2, [r7, #3]
 800ce42:	4611      	mov	r1, r2
 800ce44:	4618      	mov	r0, r3
 800ce46:	f7f9 fdf2 	bl	8006a2e <HAL_PCD_EP_ClrStall>
 800ce4a:	4603      	mov	r3, r0
 800ce4c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ce4e:	7bfb      	ldrb	r3, [r7, #15]
 800ce50:	4618      	mov	r0, r3
 800ce52:	f000 f8a7 	bl	800cfa4 <USBD_Get_USB_Status>
 800ce56:	4603      	mov	r3, r0
 800ce58:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ce5a:	7bbb      	ldrb	r3, [r7, #14]
}
 800ce5c:	4618      	mov	r0, r3
 800ce5e:	3710      	adds	r7, #16
 800ce60:	46bd      	mov	sp, r7
 800ce62:	bd80      	pop	{r7, pc}

0800ce64 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ce64:	b480      	push	{r7}
 800ce66:	b085      	sub	sp, #20
 800ce68:	af00      	add	r7, sp, #0
 800ce6a:	6078      	str	r0, [r7, #4]
 800ce6c:	460b      	mov	r3, r1
 800ce6e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800ce70:	687b      	ldr	r3, [r7, #4]
 800ce72:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800ce76:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800ce78:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800ce7c:	2b00      	cmp	r3, #0
 800ce7e:	da0b      	bge.n	800ce98 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800ce80:	78fb      	ldrb	r3, [r7, #3]
 800ce82:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ce86:	68f9      	ldr	r1, [r7, #12]
 800ce88:	4613      	mov	r3, r2
 800ce8a:	00db      	lsls	r3, r3, #3
 800ce8c:	1a9b      	subs	r3, r3, r2
 800ce8e:	009b      	lsls	r3, r3, #2
 800ce90:	440b      	add	r3, r1
 800ce92:	333e      	adds	r3, #62	; 0x3e
 800ce94:	781b      	ldrb	r3, [r3, #0]
 800ce96:	e00b      	b.n	800ceb0 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800ce98:	78fb      	ldrb	r3, [r7, #3]
 800ce9a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ce9e:	68f9      	ldr	r1, [r7, #12]
 800cea0:	4613      	mov	r3, r2
 800cea2:	00db      	lsls	r3, r3, #3
 800cea4:	1a9b      	subs	r3, r3, r2
 800cea6:	009b      	lsls	r3, r3, #2
 800cea8:	440b      	add	r3, r1
 800ceaa:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800ceae:	781b      	ldrb	r3, [r3, #0]
  }
}
 800ceb0:	4618      	mov	r0, r3
 800ceb2:	3714      	adds	r7, #20
 800ceb4:	46bd      	mov	sp, r7
 800ceb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ceba:	4770      	bx	lr

0800cebc <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800cebc:	b580      	push	{r7, lr}
 800cebe:	b084      	sub	sp, #16
 800cec0:	af00      	add	r7, sp, #0
 800cec2:	6078      	str	r0, [r7, #4]
 800cec4:	460b      	mov	r3, r1
 800cec6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cec8:	2300      	movs	r3, #0
 800ceca:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cecc:	2300      	movs	r3, #0
 800cece:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800ced0:	687b      	ldr	r3, [r7, #4]
 800ced2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800ced6:	78fa      	ldrb	r2, [r7, #3]
 800ced8:	4611      	mov	r1, r2
 800ceda:	4618      	mov	r0, r3
 800cedc:	f7f9 fbbf 	bl	800665e <HAL_PCD_SetAddress>
 800cee0:	4603      	mov	r3, r0
 800cee2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cee4:	7bfb      	ldrb	r3, [r7, #15]
 800cee6:	4618      	mov	r0, r3
 800cee8:	f000 f85c 	bl	800cfa4 <USBD_Get_USB_Status>
 800ceec:	4603      	mov	r3, r0
 800ceee:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cef0:	7bbb      	ldrb	r3, [r7, #14]
}
 800cef2:	4618      	mov	r0, r3
 800cef4:	3710      	adds	r7, #16
 800cef6:	46bd      	mov	sp, r7
 800cef8:	bd80      	pop	{r7, pc}

0800cefa <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800cefa:	b580      	push	{r7, lr}
 800cefc:	b086      	sub	sp, #24
 800cefe:	af00      	add	r7, sp, #0
 800cf00:	60f8      	str	r0, [r7, #12]
 800cf02:	607a      	str	r2, [r7, #4]
 800cf04:	603b      	str	r3, [r7, #0]
 800cf06:	460b      	mov	r3, r1
 800cf08:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cf0a:	2300      	movs	r3, #0
 800cf0c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cf0e:	2300      	movs	r3, #0
 800cf10:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800cf12:	68fb      	ldr	r3, [r7, #12]
 800cf14:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800cf18:	7af9      	ldrb	r1, [r7, #11]
 800cf1a:	683b      	ldr	r3, [r7, #0]
 800cf1c:	687a      	ldr	r2, [r7, #4]
 800cf1e:	f7f9 fcd8 	bl	80068d2 <HAL_PCD_EP_Transmit>
 800cf22:	4603      	mov	r3, r0
 800cf24:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cf26:	7dfb      	ldrb	r3, [r7, #23]
 800cf28:	4618      	mov	r0, r3
 800cf2a:	f000 f83b 	bl	800cfa4 <USBD_Get_USB_Status>
 800cf2e:	4603      	mov	r3, r0
 800cf30:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800cf32:	7dbb      	ldrb	r3, [r7, #22]
}
 800cf34:	4618      	mov	r0, r3
 800cf36:	3718      	adds	r7, #24
 800cf38:	46bd      	mov	sp, r7
 800cf3a:	bd80      	pop	{r7, pc}

0800cf3c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800cf3c:	b580      	push	{r7, lr}
 800cf3e:	b086      	sub	sp, #24
 800cf40:	af00      	add	r7, sp, #0
 800cf42:	60f8      	str	r0, [r7, #12]
 800cf44:	607a      	str	r2, [r7, #4]
 800cf46:	603b      	str	r3, [r7, #0]
 800cf48:	460b      	mov	r3, r1
 800cf4a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cf4c:	2300      	movs	r3, #0
 800cf4e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cf50:	2300      	movs	r3, #0
 800cf52:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800cf54:	68fb      	ldr	r3, [r7, #12]
 800cf56:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800cf5a:	7af9      	ldrb	r1, [r7, #11]
 800cf5c:	683b      	ldr	r3, [r7, #0]
 800cf5e:	687a      	ldr	r2, [r7, #4]
 800cf60:	f7f9 fc54 	bl	800680c <HAL_PCD_EP_Receive>
 800cf64:	4603      	mov	r3, r0
 800cf66:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cf68:	7dfb      	ldrb	r3, [r7, #23]
 800cf6a:	4618      	mov	r0, r3
 800cf6c:	f000 f81a 	bl	800cfa4 <USBD_Get_USB_Status>
 800cf70:	4603      	mov	r3, r0
 800cf72:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800cf74:	7dbb      	ldrb	r3, [r7, #22]
}
 800cf76:	4618      	mov	r0, r3
 800cf78:	3718      	adds	r7, #24
 800cf7a:	46bd      	mov	sp, r7
 800cf7c:	bd80      	pop	{r7, pc}

0800cf7e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cf7e:	b580      	push	{r7, lr}
 800cf80:	b082      	sub	sp, #8
 800cf82:	af00      	add	r7, sp, #0
 800cf84:	6078      	str	r0, [r7, #4]
 800cf86:	460b      	mov	r3, r1
 800cf88:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800cf8a:	687b      	ldr	r3, [r7, #4]
 800cf8c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800cf90:	78fa      	ldrb	r2, [r7, #3]
 800cf92:	4611      	mov	r1, r2
 800cf94:	4618      	mov	r0, r3
 800cf96:	f7f9 fc84 	bl	80068a2 <HAL_PCD_EP_GetRxCount>
 800cf9a:	4603      	mov	r3, r0
}
 800cf9c:	4618      	mov	r0, r3
 800cf9e:	3708      	adds	r7, #8
 800cfa0:	46bd      	mov	sp, r7
 800cfa2:	bd80      	pop	{r7, pc}

0800cfa4 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800cfa4:	b480      	push	{r7}
 800cfa6:	b085      	sub	sp, #20
 800cfa8:	af00      	add	r7, sp, #0
 800cfaa:	4603      	mov	r3, r0
 800cfac:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cfae:	2300      	movs	r3, #0
 800cfb0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800cfb2:	79fb      	ldrb	r3, [r7, #7]
 800cfb4:	2b03      	cmp	r3, #3
 800cfb6:	d817      	bhi.n	800cfe8 <USBD_Get_USB_Status+0x44>
 800cfb8:	a201      	add	r2, pc, #4	; (adr r2, 800cfc0 <USBD_Get_USB_Status+0x1c>)
 800cfba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cfbe:	bf00      	nop
 800cfc0:	0800cfd1 	.word	0x0800cfd1
 800cfc4:	0800cfd7 	.word	0x0800cfd7
 800cfc8:	0800cfdd 	.word	0x0800cfdd
 800cfcc:	0800cfe3 	.word	0x0800cfe3
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800cfd0:	2300      	movs	r3, #0
 800cfd2:	73fb      	strb	r3, [r7, #15]
    break;
 800cfd4:	e00b      	b.n	800cfee <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800cfd6:	2303      	movs	r3, #3
 800cfd8:	73fb      	strb	r3, [r7, #15]
    break;
 800cfda:	e008      	b.n	800cfee <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800cfdc:	2301      	movs	r3, #1
 800cfde:	73fb      	strb	r3, [r7, #15]
    break;
 800cfe0:	e005      	b.n	800cfee <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800cfe2:	2303      	movs	r3, #3
 800cfe4:	73fb      	strb	r3, [r7, #15]
    break;
 800cfe6:	e002      	b.n	800cfee <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800cfe8:	2303      	movs	r3, #3
 800cfea:	73fb      	strb	r3, [r7, #15]
    break;
 800cfec:	bf00      	nop
  }
  return usb_status;
 800cfee:	7bfb      	ldrb	r3, [r7, #15]
}
 800cff0:	4618      	mov	r0, r3
 800cff2:	3714      	adds	r7, #20
 800cff4:	46bd      	mov	sp, r7
 800cff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cffa:	4770      	bx	lr

0800cffc <D16_GENERIC>:
 800cffc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d000:	b089      	sub	sp, #36	; 0x24
 800d002:	68d4      	ldr	r4, [r2, #12]
 800d004:	8cd5      	ldrh	r5, [r2, #38]	; 0x26
 800d006:	6993      	ldr	r3, [r2, #24]
 800d008:	9407      	str	r4, [sp, #28]
 800d00a:	6b14      	ldr	r4, [r2, #48]	; 0x30
 800d00c:	9306      	str	r3, [sp, #24]
 800d00e:	9402      	str	r4, [sp, #8]
 800d010:	f8d2 a010 	ldr.w	sl, [r2, #16]
 800d014:	f8d2 b014 	ldr.w	fp, [r2, #20]
 800d018:	69d3      	ldr	r3, [r2, #28]
 800d01a:	6896      	ldr	r6, [r2, #8]
 800d01c:	6b54      	ldr	r4, [r2, #52]	; 0x34
 800d01e:	9103      	str	r1, [sp, #12]
 800d020:	2d00      	cmp	r5, #0
 800d022:	d066      	beq.n	800d0f2 <D16_GENERIC+0xf6>
 800d024:	f004 0510 	and.w	r5, r4, #16
 800d028:	f004 0420 	and.w	r4, r4, #32
 800d02c:	9504      	str	r5, [sp, #16]
 800d02e:	4938      	ldr	r1, [pc, #224]	; (800d110 <D16_GENERIC+0x114>)
 800d030:	9405      	str	r4, [sp, #20]
 800d032:	f04f 0e00 	mov.w	lr, #0
 800d036:	4635      	mov	r5, r6
 800d038:	e04f      	b.n	800d0da <D16_GENERIC+0xde>
 800d03a:	5d87      	ldrb	r7, [r0, r6]
 800d03c:	7804      	ldrb	r4, [r0, #0]
 800d03e:	eb00 0046 	add.w	r0, r0, r6, lsl #1
 800d042:	eb04 2407 	add.w	r4, r4, r7, lsl #8
 800d046:	b2e6      	uxtb	r6, r4
 800d048:	f3c4 2407 	ubfx	r4, r4, #8, #8
 800d04c:	f851 6026 	ldr.w	r6, [r1, r6, lsl #2]
 800d050:	f851 4024 	ldr.w	r4, [r1, r4, lsl #2]
 800d054:	4433      	add	r3, r6
 800d056:	eb04 2493 	add.w	r4, r4, r3, lsr #10
 800d05a:	f3c4 0609 	ubfx	r6, r4, #0, #10
 800d05e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800d062:	ea46 4603 	orr.w	r6, r6, r3, lsl #16
 800d066:	0aa3      	lsrs	r3, r4, #10
 800d068:	4c2a      	ldr	r4, [pc, #168]	; (800d114 <D16_GENERIC+0x118>)
 800d06a:	fb26 5404 	smlad	r4, r6, r4, r5
 800d06e:	4d2a      	ldr	r5, [pc, #168]	; (800d118 <D16_GENERIC+0x11c>)
 800d070:	fb26 f505 	smuad	r5, r6, r5
 800d074:	f5a4 6400 	sub.w	r4, r4, #2048	; 0x800
 800d078:	eb04 080a 	add.w	r8, r4, sl
 800d07c:	eba8 080b 	sub.w	r8, r8, fp
 800d080:	4646      	mov	r6, r8
 800d082:	17f7      	asrs	r7, r6, #31
 800d084:	e9cd 6700 	strd	r6, r7, [sp]
 800d088:	9e04      	ldr	r6, [sp, #16]
 800d08a:	f10e 0c01 	add.w	ip, lr, #1
 800d08e:	b16e      	cbz	r6, 800d0ac <D16_GENERIC+0xb0>
 800d090:	6a16      	ldr	r6, [r2, #32]
 800d092:	9f01      	ldr	r7, [sp, #4]
 800d094:	fba8 8906 	umull	r8, r9, r8, r6
 800d098:	fb06 9907 	mla	r9, r6, r7, r9
 800d09c:	f118 4800 	adds.w	r8, r8, #2147483648	; 0x80000000
 800d0a0:	f149 0900 	adc.w	r9, r9, #0
 800d0a4:	ea4f 0a49 	mov.w	sl, r9, lsl #1
 800d0a8:	46a3      	mov	fp, r4
 800d0aa:	4654      	mov	r4, sl
 800d0ac:	8d16      	ldrh	r6, [r2, #40]	; 0x28
 800d0ae:	9f02      	ldr	r7, [sp, #8]
 800d0b0:	0424      	lsls	r4, r4, #16
 800d0b2:	f04f 4800 	mov.w	r8, #2147483648	; 0x80000000
 800d0b6:	f04f 0900 	mov.w	r9, #0
 800d0ba:	fb0e fe06 	mul.w	lr, lr, r6
 800d0be:	fbc7 8904 	smlal	r8, r9, r7, r4
 800d0c2:	9e03      	ldr	r6, [sp, #12]
 800d0c4:	464f      	mov	r7, r9
 800d0c6:	10bc      	asrs	r4, r7, #2
 800d0c8:	f304 040f 	ssat	r4, #16, r4
 800d0cc:	f826 401e 	strh.w	r4, [r6, lr, lsl #1]
 800d0d0:	8cd4      	ldrh	r4, [r2, #38]	; 0x26
 800d0d2:	fa1f fe8c 	uxth.w	lr, ip
 800d0d6:	4574      	cmp	r4, lr
 800d0d8:	d90a      	bls.n	800d0f0 <D16_GENERIC+0xf4>
 800d0da:	8d54      	ldrh	r4, [r2, #42]	; 0x2a
 800d0dc:	2c01      	cmp	r4, #1
 800d0de:	b2e6      	uxtb	r6, r4
 800d0e0:	d1ab      	bne.n	800d03a <D16_GENERIC+0x3e>
 800d0e2:	9e05      	ldr	r6, [sp, #20]
 800d0e4:	f850 4b02 	ldr.w	r4, [r0], #2
 800d0e8:	2e00      	cmp	r6, #0
 800d0ea:	d0ac      	beq.n	800d046 <D16_GENERIC+0x4a>
 800d0ec:	ba64      	rev16	r4, r4
 800d0ee:	e7aa      	b.n	800d046 <D16_GENERIC+0x4a>
 800d0f0:	462e      	mov	r6, r5
 800d0f2:	9907      	ldr	r1, [sp, #28]
 800d0f4:	61d3      	str	r3, [r2, #28]
 800d0f6:	9b06      	ldr	r3, [sp, #24]
 800d0f8:	6096      	str	r6, [r2, #8]
 800d0fa:	2000      	movs	r0, #0
 800d0fc:	60d1      	str	r1, [r2, #12]
 800d0fe:	f8c2 a010 	str.w	sl, [r2, #16]
 800d102:	f8c2 b014 	str.w	fp, [r2, #20]
 800d106:	6193      	str	r3, [r2, #24]
 800d108:	b009      	add	sp, #36	; 0x24
 800d10a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d10e:	bf00      	nop
 800d110:	20000000 	.word	0x20000000
 800d114:	00030001 	.word	0x00030001
 800d118:	00010003 	.word	0x00010003

0800d11c <D24_GENERIC>:
 800d11c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d120:	8cd6      	ldrh	r6, [r2, #38]	; 0x26
 800d122:	6993      	ldr	r3, [r2, #24]
 800d124:	6b15      	ldr	r5, [r2, #48]	; 0x30
 800d126:	f8d2 a010 	ldr.w	sl, [r2, #16]
 800d12a:	f8d2 9014 	ldr.w	r9, [r2, #20]
 800d12e:	6894      	ldr	r4, [r2, #8]
 800d130:	f8d2 b00c 	ldr.w	fp, [r2, #12]
 800d134:	b089      	sub	sp, #36	; 0x24
 800d136:	9307      	str	r3, [sp, #28]
 800d138:	9503      	str	r5, [sp, #12]
 800d13a:	69d3      	ldr	r3, [r2, #28]
 800d13c:	6b55      	ldr	r5, [r2, #52]	; 0x34
 800d13e:	9104      	str	r1, [sp, #16]
 800d140:	2e00      	cmp	r6, #0
 800d142:	f000 8096 	beq.w	800d272 <D24_GENERIC+0x156>
 800d146:	f005 0610 	and.w	r6, r5, #16
 800d14a:	f005 0520 	and.w	r5, r5, #32
 800d14e:	4954      	ldr	r1, [pc, #336]	; (800d2a0 <D24_GENERIC+0x184>)
 800d150:	9605      	str	r6, [sp, #20]
 800d152:	9506      	str	r5, [sp, #24]
 800d154:	f04f 0e00 	mov.w	lr, #0
 800d158:	f8cd 9008 	str.w	r9, [sp, #8]
 800d15c:	e06a      	b.n	800d234 <D24_GENERIC+0x118>
 800d15e:	f810 5016 	ldrb.w	r5, [r0, r6, lsl #1]
 800d162:	f810 8007 	ldrb.w	r8, [r0, r7]
 800d166:	f890 c000 	ldrb.w	ip, [r0]
 800d16a:	042d      	lsls	r5, r5, #16
 800d16c:	eb00 0046 	add.w	r0, r0, r6, lsl #1
 800d170:	eb05 2508 	add.w	r5, r5, r8, lsl #8
 800d174:	44ac      	add	ip, r5
 800d176:	4438      	add	r0, r7
 800d178:	fa5f f68c 	uxtb.w	r6, ip
 800d17c:	f3cc 2507 	ubfx	r5, ip, #8, #8
 800d180:	f851 6026 	ldr.w	r6, [r1, r6, lsl #2]
 800d184:	f851 7025 	ldr.w	r7, [r1, r5, lsl #2]
 800d188:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800d18c:	eb06 2693 	add.w	r6, r6, r3, lsr #10
 800d190:	eb07 2796 	add.w	r7, r7, r6, lsr #10
 800d194:	f851 302c 	ldr.w	r3, [r1, ip, lsl #2]
 800d198:	f3c7 0509 	ubfx	r5, r7, #0, #10
 800d19c:	f3c6 0609 	ubfx	r6, r6, #0, #10
 800d1a0:	ea45 4606 	orr.w	r6, r5, r6, lsl #16
 800d1a4:	eb03 2397 	add.w	r3, r3, r7, lsr #10
 800d1a8:	4d3e      	ldr	r5, [pc, #248]	; (800d2a4 <D24_GENERIC+0x188>)
 800d1aa:	fb26 b705 	smlad	r7, r6, r5, fp
 800d1ae:	4d3e      	ldr	r5, [pc, #248]	; (800d2a8 <D24_GENERIC+0x18c>)
 800d1b0:	fb26 4b05 	smlad	fp, r6, r5, r4
 800d1b4:	f3c3 0409 	ubfx	r4, r3, #0, #10
 800d1b8:	eb04 0844 	add.w	r8, r4, r4, lsl #1
 800d1bc:	eb0b 0b48 	add.w	fp, fp, r8, lsl #1
 800d1c0:	2401      	movs	r4, #1
 800d1c2:	fb26 f604 	smuad	r6, r6, r4
 800d1c6:	f5a7 55d8 	sub.w	r5, r7, #6912	; 0x1b00
 800d1ca:	9f02      	ldr	r7, [sp, #8]
 800d1cc:	eb0e 0c04 	add.w	ip, lr, r4
 800d1d0:	eb08 0406 	add.w	r4, r8, r6
 800d1d4:	eb05 060a 	add.w	r6, r5, sl
 800d1d8:	1bf6      	subs	r6, r6, r7
 800d1da:	4637      	mov	r7, r6
 800d1dc:	ea4f 78e6 	mov.w	r8, r6, asr #31
 800d1e0:	e9cd 7800 	strd	r7, r8, [sp]
 800d1e4:	9f05      	ldr	r7, [sp, #20]
 800d1e6:	b177      	cbz	r7, 800d206 <D24_GENERIC+0xea>
 800d1e8:	f8d2 8020 	ldr.w	r8, [r2, #32]
 800d1ec:	9502      	str	r5, [sp, #8]
 800d1ee:	fba6 9a08 	umull	r9, sl, r6, r8
 800d1f2:	9e01      	ldr	r6, [sp, #4]
 800d1f4:	fb08 aa06 	mla	sl, r8, r6, sl
 800d1f8:	f119 4600 	adds.w	r6, r9, #2147483648	; 0x80000000
 800d1fc:	f14a 0700 	adc.w	r7, sl, #0
 800d200:	ea4f 0a47 	mov.w	sl, r7, lsl #1
 800d204:	4655      	mov	r5, sl
 800d206:	8d16      	ldrh	r6, [r2, #40]	; 0x28
 800d208:	9f03      	ldr	r7, [sp, #12]
 800d20a:	03ad      	lsls	r5, r5, #14
 800d20c:	f04f 4800 	mov.w	r8, #2147483648	; 0x80000000
 800d210:	f04f 0900 	mov.w	r9, #0
 800d214:	fb0e fe06 	mul.w	lr, lr, r6
 800d218:	fbc7 8905 	smlal	r8, r9, r7, r5
 800d21c:	9e04      	ldr	r6, [sp, #16]
 800d21e:	464f      	mov	r7, r9
 800d220:	10bd      	asrs	r5, r7, #2
 800d222:	f305 050f 	ssat	r5, #16, r5
 800d226:	f826 501e 	strh.w	r5, [r6, lr, lsl #1]
 800d22a:	8cd5      	ldrh	r5, [r2, #38]	; 0x26
 800d22c:	fa1f fe8c 	uxth.w	lr, ip
 800d230:	4575      	cmp	r5, lr
 800d232:	d91c      	bls.n	800d26e <D24_GENERIC+0x152>
 800d234:	8d55      	ldrh	r5, [r2, #42]	; 0x2a
 800d236:	b2ef      	uxtb	r7, r5
 800d238:	2d01      	cmp	r5, #1
 800d23a:	b23e      	sxth	r6, r7
 800d23c:	d18f      	bne.n	800d15e <D24_GENERIC+0x42>
 800d23e:	9d06      	ldr	r5, [sp, #24]
 800d240:	b15d      	cbz	r5, 800d25a <D24_GENERIC+0x13e>
 800d242:	f01e 0f01 	tst.w	lr, #1
 800d246:	d122      	bne.n	800d28e <D24_GENERIC+0x172>
 800d248:	7805      	ldrb	r5, [r0, #0]
 800d24a:	78c7      	ldrb	r7, [r0, #3]
 800d24c:	7846      	ldrb	r6, [r0, #1]
 800d24e:	022d      	lsls	r5, r5, #8
 800d250:	eb05 4c07 	add.w	ip, r5, r7, lsl #16
 800d254:	44b4      	add	ip, r6
 800d256:	3002      	adds	r0, #2
 800d258:	e78e      	b.n	800d178 <D24_GENERIC+0x5c>
 800d25a:	7846      	ldrb	r6, [r0, #1]
 800d25c:	f890 c002 	ldrb.w	ip, [r0, #2]
 800d260:	f810 5b03 	ldrb.w	r5, [r0], #3
 800d264:	0236      	lsls	r6, r6, #8
 800d266:	eb06 4c0c 	add.w	ip, r6, ip, lsl #16
 800d26a:	44ac      	add	ip, r5
 800d26c:	e784      	b.n	800d178 <D24_GENERIC+0x5c>
 800d26e:	f8dd 9008 	ldr.w	r9, [sp, #8]
 800d272:	61d3      	str	r3, [r2, #28]
 800d274:	9b07      	ldr	r3, [sp, #28]
 800d276:	6094      	str	r4, [r2, #8]
 800d278:	2000      	movs	r0, #0
 800d27a:	f8c2 b00c 	str.w	fp, [r2, #12]
 800d27e:	f8c2 a010 	str.w	sl, [r2, #16]
 800d282:	f8c2 9014 	str.w	r9, [r2, #20]
 800d286:	6193      	str	r3, [r2, #24]
 800d288:	b009      	add	sp, #36	; 0x24
 800d28a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d28e:	78c5      	ldrb	r5, [r0, #3]
 800d290:	7887      	ldrb	r7, [r0, #2]
 800d292:	f810 6b04 	ldrb.w	r6, [r0], #4
 800d296:	022d      	lsls	r5, r5, #8
 800d298:	eb05 4c07 	add.w	ip, r5, r7, lsl #16
 800d29c:	44b4      	add	ip, r6
 800d29e:	e76b      	b.n	800d178 <D24_GENERIC+0x5c>
 800d2a0:	20000000 	.word	0x20000000
 800d2a4:	00030001 	.word	0x00030001
 800d2a8:	00060007 	.word	0x00060007

0800d2ac <D32_GENERIC>:
 800d2ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d2b0:	8cd5      	ldrh	r5, [r2, #38]	; 0x26
 800d2b2:	6993      	ldr	r3, [r2, #24]
 800d2b4:	6b14      	ldr	r4, [r2, #48]	; 0x30
 800d2b6:	f8d2 a010 	ldr.w	sl, [r2, #16]
 800d2ba:	f8d2 9014 	ldr.w	r9, [r2, #20]
 800d2be:	69d6      	ldr	r6, [r2, #28]
 800d2c0:	f8d2 b00c 	ldr.w	fp, [r2, #12]
 800d2c4:	b089      	sub	sp, #36	; 0x24
 800d2c6:	9307      	str	r3, [sp, #28]
 800d2c8:	9403      	str	r4, [sp, #12]
 800d2ca:	6893      	ldr	r3, [r2, #8]
 800d2cc:	6b54      	ldr	r4, [r2, #52]	; 0x34
 800d2ce:	9104      	str	r1, [sp, #16]
 800d2d0:	2d00      	cmp	r5, #0
 800d2d2:	f000 809f 	beq.w	800d414 <D32_GENERIC+0x168>
 800d2d6:	f004 0510 	and.w	r5, r4, #16
 800d2da:	f004 0420 	and.w	r4, r4, #32
 800d2de:	9505      	str	r5, [sp, #20]
 800d2e0:	4953      	ldr	r1, [pc, #332]	; (800d430 <D32_GENERIC+0x184>)
 800d2e2:	9406      	str	r4, [sp, #24]
 800d2e4:	f04f 0c00 	mov.w	ip, #0
 800d2e8:	f8cd 9008 	str.w	r9, [sp, #8]
 800d2ec:	461d      	mov	r5, r3
 800d2ee:	4617      	mov	r7, r2
 800d2f0:	e077      	b.n	800d3e2 <D32_GENERIC+0x136>
 800d2f2:	f818 3003 	ldrb.w	r3, [r8, r3]
 800d2f6:	f810 800e 	ldrb.w	r8, [r0, lr]
 800d2fa:	f810 e002 	ldrb.w	lr, [r0, r2]
 800d2fe:	7800      	ldrb	r0, [r0, #0]
 800d300:	041b      	lsls	r3, r3, #16
 800d302:	eb03 6308 	add.w	r3, r3, r8, lsl #24
 800d306:	eb03 230e 	add.w	r3, r3, lr, lsl #8
 800d30a:	4403      	add	r3, r0
 800d30c:	eb04 0042 	add.w	r0, r4, r2, lsl #1
 800d310:	b2dc      	uxtb	r4, r3
 800d312:	f3c3 2207 	ubfx	r2, r3, #8, #8
 800d316:	f3c3 4807 	ubfx	r8, r3, #16, #8
 800d31a:	f851 4024 	ldr.w	r4, [r1, r4, lsl #2]
 800d31e:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800d322:	0e1b      	lsrs	r3, r3, #24
 800d324:	eb04 2496 	add.w	r4, r4, r6, lsr #10
 800d328:	f851 6028 	ldr.w	r6, [r1, r8, lsl #2]
 800d32c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800d330:	eb02 2294 	add.w	r2, r2, r4, lsr #10
 800d334:	eb06 2e92 	add.w	lr, r6, r2, lsr #10
 800d338:	eb03 269e 	add.w	r6, r3, lr, lsr #10
 800d33c:	f3c6 0309 	ubfx	r3, r6, #0, #10
 800d340:	f3c4 0409 	ubfx	r4, r4, #0, #10
 800d344:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800d348:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 800d34c:	ea43 4e0e 	orr.w	lr, r3, lr, lsl #16
 800d350:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800d354:	4b37      	ldr	r3, [pc, #220]	; (800d434 <D32_GENERIC+0x188>)
 800d356:	fb22 b403 	smlad	r4, r2, r3, fp
 800d35a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800d35e:	fb2e 4803 	smlad	r8, lr, r3, r4
 800d362:	4b35      	ldr	r3, [pc, #212]	; (800d438 <D32_GENERIC+0x18c>)
 800d364:	fb22 5503 	smlad	r5, r2, r3, r5
 800d368:	4b34      	ldr	r3, [pc, #208]	; (800d43c <D32_GENERIC+0x190>)
 800d36a:	fb2e 5b03 	smlad	fp, lr, r3, r5
 800d36e:	2301      	movs	r3, #1
 800d370:	fb22 f203 	smuad	r2, r2, r3
 800d374:	4b32      	ldr	r3, [pc, #200]	; (800d440 <D32_GENERIC+0x194>)
 800d376:	fb2e 2503 	smlad	r5, lr, r3, r2
 800d37a:	9b02      	ldr	r3, [sp, #8]
 800d37c:	f5a8 4480 	sub.w	r4, r8, #16384	; 0x4000
 800d380:	eb04 080a 	add.w	r8, r4, sl
 800d384:	eba8 0803 	sub.w	r8, r8, r3
 800d388:	4642      	mov	r2, r8
 800d38a:	17d3      	asrs	r3, r2, #31
 800d38c:	e9cd 2300 	strd	r2, r3, [sp]
 800d390:	9b05      	ldr	r3, [sp, #20]
 800d392:	f10c 0e01 	add.w	lr, ip, #1
 800d396:	b16b      	cbz	r3, 800d3b4 <D32_GENERIC+0x108>
 800d398:	6a3a      	ldr	r2, [r7, #32]
 800d39a:	9b01      	ldr	r3, [sp, #4]
 800d39c:	9402      	str	r4, [sp, #8]
 800d39e:	fba8 8902 	umull	r8, r9, r8, r2
 800d3a2:	fb02 9903 	mla	r9, r2, r3, r9
 800d3a6:	f118 4800 	adds.w	r8, r8, #2147483648	; 0x80000000
 800d3aa:	f149 0900 	adc.w	r9, r9, #0
 800d3ae:	ea4f 0a49 	mov.w	sl, r9, lsl #1
 800d3b2:	4654      	mov	r4, sl
 800d3b4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800d3b6:	9a04      	ldr	r2, [sp, #16]
 800d3b8:	fb0c fc03 	mul.w	ip, ip, r3
 800d3bc:	9b03      	ldr	r3, [sp, #12]
 800d3be:	0364      	lsls	r4, r4, #13
 800d3c0:	f04f 4800 	mov.w	r8, #2147483648	; 0x80000000
 800d3c4:	f04f 0900 	mov.w	r9, #0
 800d3c8:	fbc3 8904 	smlal	r8, r9, r3, r4
 800d3cc:	464b      	mov	r3, r9
 800d3ce:	109b      	asrs	r3, r3, #2
 800d3d0:	f303 030f 	ssat	r3, #16, r3
 800d3d4:	f822 301c 	strh.w	r3, [r2, ip, lsl #1]
 800d3d8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800d3da:	fa1f fc8e 	uxth.w	ip, lr
 800d3de:	4563      	cmp	r3, ip
 800d3e0:	d914      	bls.n	800d40c <D32_GENERIC+0x160>
 800d3e2:	8d7c      	ldrh	r4, [r7, #42]	; 0x2a
 800d3e4:	b2e2      	uxtb	r2, r4
 800d3e6:	eb02 0e42 	add.w	lr, r2, r2, lsl #1
 800d3ea:	eb00 080e 	add.w	r8, r0, lr
 800d3ee:	4253      	negs	r3, r2
 800d3f0:	2c01      	cmp	r4, #1
 800d3f2:	eb08 0403 	add.w	r4, r8, r3
 800d3f6:	f47f af7c 	bne.w	800d2f2 <D32_GENERIC+0x46>
 800d3fa:	1d02      	adds	r2, r0, #4
 800d3fc:	6803      	ldr	r3, [r0, #0]
 800d3fe:	9806      	ldr	r0, [sp, #24]
 800d400:	b110      	cbz	r0, 800d408 <D32_GENERIC+0x15c>
 800d402:	ba5b      	rev16	r3, r3
 800d404:	4610      	mov	r0, r2
 800d406:	e783      	b.n	800d310 <D32_GENERIC+0x64>
 800d408:	4610      	mov	r0, r2
 800d40a:	e781      	b.n	800d310 <D32_GENERIC+0x64>
 800d40c:	f8dd 9008 	ldr.w	r9, [sp, #8]
 800d410:	462b      	mov	r3, r5
 800d412:	463a      	mov	r2, r7
 800d414:	6093      	str	r3, [r2, #8]
 800d416:	9b07      	ldr	r3, [sp, #28]
 800d418:	f8c2 b00c 	str.w	fp, [r2, #12]
 800d41c:	2000      	movs	r0, #0
 800d41e:	61d6      	str	r6, [r2, #28]
 800d420:	f8c2 a010 	str.w	sl, [r2, #16]
 800d424:	f8c2 9014 	str.w	r9, [r2, #20]
 800d428:	6193      	str	r3, [r2, #24]
 800d42a:	b009      	add	sp, #36	; 0x24
 800d42c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d430:	20000000 	.word	0x20000000
 800d434:	00060003 	.word	0x00060003
 800d438:	000a000c 	.word	0x000a000c
 800d43c:	000c000a 	.word	0x000c000a
 800d440:	00030006 	.word	0x00030006

0800d444 <D48_GENERIC>:
 800d444:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d448:	b089      	sub	sp, #36	; 0x24
 800d44a:	6953      	ldr	r3, [r2, #20]
 800d44c:	68d4      	ldr	r4, [r2, #12]
 800d44e:	8cd5      	ldrh	r5, [r2, #38]	; 0x26
 800d450:	9302      	str	r3, [sp, #8]
 800d452:	9400      	str	r4, [sp, #0]
 800d454:	6993      	ldr	r3, [r2, #24]
 800d456:	6b14      	ldr	r4, [r2, #48]	; 0x30
 800d458:	9307      	str	r3, [sp, #28]
 800d45a:	9403      	str	r4, [sp, #12]
 800d45c:	f8d2 a010 	ldr.w	sl, [r2, #16]
 800d460:	69d6      	ldr	r6, [r2, #28]
 800d462:	6893      	ldr	r3, [r2, #8]
 800d464:	6b54      	ldr	r4, [r2, #52]	; 0x34
 800d466:	9104      	str	r1, [sp, #16]
 800d468:	2d00      	cmp	r5, #0
 800d46a:	f000 80c5 	beq.w	800d5f8 <D48_GENERIC+0x1b4>
 800d46e:	f004 0510 	and.w	r5, r4, #16
 800d472:	f004 0420 	and.w	r4, r4, #32
 800d476:	4967      	ldr	r1, [pc, #412]	; (800d614 <D48_GENERIC+0x1d0>)
 800d478:	9505      	str	r5, [sp, #20]
 800d47a:	9406      	str	r4, [sp, #24]
 800d47c:	f04f 0c00 	mov.w	ip, #0
 800d480:	4657      	mov	r7, sl
 800d482:	9301      	str	r3, [sp, #4]
 800d484:	e09c      	b.n	800d5c0 <D48_GENERIC+0x17c>
 800d486:	f81b 4005 	ldrb.w	r4, [fp, r5]
 800d48a:	f810 b009 	ldrb.w	fp, [r0, r9]
 800d48e:	f81a 9009 	ldrb.w	r9, [sl, r9]
 800d492:	f810 a00e 	ldrb.w	sl, [r0, lr]
 800d496:	7800      	ldrb	r0, [r0, #0]
 800d498:	0424      	lsls	r4, r4, #16
 800d49a:	eb04 6b0b 	add.w	fp, r4, fp, lsl #24
 800d49e:	f818 4005 	ldrb.w	r4, [r8, r5]
 800d4a2:	eb0b 2b0a 	add.w	fp, fp, sl, lsl #8
 800d4a6:	44a8      	add	r8, r5
 800d4a8:	eb04 2409 	add.w	r4, r4, r9, lsl #8
 800d4ac:	eb0b 0500 	add.w	r5, fp, r0
 800d4b0:	eb08 004e 	add.w	r0, r8, lr, lsl #1
 800d4b4:	fa5f f885 	uxtb.w	r8, r5
 800d4b8:	f3c5 2e07 	ubfx	lr, r5, #8, #8
 800d4bc:	f851 a028 	ldr.w	sl, [r1, r8, lsl #2]
 800d4c0:	f851 902e 	ldr.w	r9, [r1, lr, lsl #2]
 800d4c4:	f3c5 4e07 	ubfx	lr, r5, #16, #8
 800d4c8:	0e2d      	lsrs	r5, r5, #24
 800d4ca:	eb0a 2a96 	add.w	sl, sl, r6, lsr #10
 800d4ce:	f851 802e 	ldr.w	r8, [r1, lr, lsl #2]
 800d4d2:	f851 e025 	ldr.w	lr, [r1, r5, lsl #2]
 800d4d6:	b2e6      	uxtb	r6, r4
 800d4d8:	eb09 259a 	add.w	r5, r9, sl, lsr #10
 800d4dc:	f3c4 2407 	ubfx	r4, r4, #8, #8
 800d4e0:	eb08 2895 	add.w	r8, r8, r5, lsr #10
 800d4e4:	f851 6026 	ldr.w	r6, [r1, r6, lsl #2]
 800d4e8:	f851 9024 	ldr.w	r9, [r1, r4, lsl #2]
 800d4ec:	eb0e 2498 	add.w	r4, lr, r8, lsr #10
 800d4f0:	eb06 2e94 	add.w	lr, r6, r4, lsr #10
 800d4f4:	eb09 269e 	add.w	r6, r9, lr, lsr #10
 800d4f8:	f3c5 0509 	ubfx	r5, r5, #0, #10
 800d4fc:	f3c4 0409 	ubfx	r4, r4, #0, #10
 800d500:	f3c6 0909 	ubfx	r9, r6, #0, #10
 800d504:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 800d508:	f3c8 0809 	ubfx	r8, r8, #0, #10
 800d50c:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 800d510:	ea45 4a0a 	orr.w	sl, r5, sl, lsl #16
 800d514:	ea44 4808 	orr.w	r8, r4, r8, lsl #16
 800d518:	ea49 4e0e 	orr.w	lr, r9, lr, lsl #16
 800d51c:	4c3e      	ldr	r4, [pc, #248]	; (800d618 <D48_GENERIC+0x1d4>)
 800d51e:	9d00      	ldr	r5, [sp, #0]
 800d520:	fb2a 5404 	smlad	r4, sl, r4, r5
 800d524:	4d3d      	ldr	r5, [pc, #244]	; (800d61c <D48_GENERIC+0x1d8>)
 800d526:	fb28 4405 	smlad	r4, r8, r5, r4
 800d52a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800d52e:	fb2e 4b03 	smlad	fp, lr, r3, r4
 800d532:	4c3b      	ldr	r4, [pc, #236]	; (800d620 <D48_GENERIC+0x1dc>)
 800d534:	9b01      	ldr	r3, [sp, #4]
 800d536:	fb2a 3304 	smlad	r3, sl, r4, r3
 800d53a:	f04f 141b 	mov.w	r4, #1769499	; 0x1b001b
 800d53e:	fb28 3304 	smlad	r3, r8, r4, r3
 800d542:	4c38      	ldr	r4, [pc, #224]	; (800d624 <D48_GENERIC+0x1e0>)
 800d544:	fb2e 3304 	smlad	r3, lr, r4, r3
 800d548:	2501      	movs	r5, #1
 800d54a:	9300      	str	r3, [sp, #0]
 800d54c:	fb2a fa05 	smuad	sl, sl, r5
 800d550:	4b35      	ldr	r3, [pc, #212]	; (800d628 <D48_GENERIC+0x1e4>)
 800d552:	fb28 a803 	smlad	r8, r8, r3, sl
 800d556:	4b35      	ldr	r3, [pc, #212]	; (800d62c <D48_GENERIC+0x1e8>)
 800d558:	fb2e 8303 	smlad	r3, lr, r3, r8
 800d55c:	f5ab 4458 	sub.w	r4, fp, #55296	; 0xd800
 800d560:	9301      	str	r3, [sp, #4]
 800d562:	9b02      	ldr	r3, [sp, #8]
 800d564:	eb04 0807 	add.w	r8, r4, r7
 800d568:	eba8 0803 	sub.w	r8, r8, r3
 800d56c:	9b05      	ldr	r3, [sp, #20]
 800d56e:	4465      	add	r5, ip
 800d570:	ea4f 7be8 	mov.w	fp, r8, asr #31
 800d574:	b163      	cbz	r3, 800d590 <D48_GENERIC+0x14c>
 800d576:	6a17      	ldr	r7, [r2, #32]
 800d578:	9402      	str	r4, [sp, #8]
 800d57a:	fba8 8907 	umull	r8, r9, r8, r7
 800d57e:	fb07 990b 	mla	r9, r7, fp, r9
 800d582:	f118 4800 	adds.w	r8, r8, #2147483648	; 0x80000000
 800d586:	f149 0900 	adc.w	r9, r9, #0
 800d58a:	ea4f 0749 	mov.w	r7, r9, lsl #1
 800d58e:	463c      	mov	r4, r7
 800d590:	f8b2 e028 	ldrh.w	lr, [r2, #40]	; 0x28
 800d594:	9b03      	ldr	r3, [sp, #12]
 800d596:	02e4      	lsls	r4, r4, #11
 800d598:	f04f 4800 	mov.w	r8, #2147483648	; 0x80000000
 800d59c:	f04f 0900 	mov.w	r9, #0
 800d5a0:	fb0c fc0e 	mul.w	ip, ip, lr
 800d5a4:	fbc3 8904 	smlal	r8, r9, r3, r4
 800d5a8:	9b04      	ldr	r3, [sp, #16]
 800d5aa:	ea4f 04a9 	mov.w	r4, r9, asr #2
 800d5ae:	f304 040f 	ssat	r4, #16, r4
 800d5b2:	f823 401c 	strh.w	r4, [r3, ip, lsl #1]
 800d5b6:	8cd4      	ldrh	r4, [r2, #38]	; 0x26
 800d5b8:	fa1f fc85 	uxth.w	ip, r5
 800d5bc:	4564      	cmp	r4, ip
 800d5be:	d919      	bls.n	800d5f4 <D48_GENERIC+0x1b0>
 800d5c0:	8d54      	ldrh	r4, [r2, #42]	; 0x2a
 800d5c2:	fa5f fe84 	uxtb.w	lr, r4
 800d5c6:	eb0e 094e 	add.w	r9, lr, lr, lsl #1
 800d5ca:	f1ce 0500 	rsb	r5, lr, #0
 800d5ce:	eb00 0b09 	add.w	fp, r0, r9
 800d5d2:	eb0b 0a05 	add.w	sl, fp, r5
 800d5d6:	2c01      	cmp	r4, #1
 800d5d8:	eb0a 0809 	add.w	r8, sl, r9
 800d5dc:	f47f af53 	bne.w	800d486 <D48_GENERIC+0x42>
 800d5e0:	9b06      	ldr	r3, [sp, #24]
 800d5e2:	6805      	ldr	r5, [r0, #0]
 800d5e4:	6844      	ldr	r4, [r0, #4]
 800d5e6:	3006      	adds	r0, #6
 800d5e8:	2b00      	cmp	r3, #0
 800d5ea:	f43f af63 	beq.w	800d4b4 <D48_GENERIC+0x70>
 800d5ee:	ba6d      	rev16	r5, r5
 800d5f0:	ba64      	rev16	r4, r4
 800d5f2:	e75f      	b.n	800d4b4 <D48_GENERIC+0x70>
 800d5f4:	9b01      	ldr	r3, [sp, #4]
 800d5f6:	46ba      	mov	sl, r7
 800d5f8:	6093      	str	r3, [r2, #8]
 800d5fa:	9b00      	ldr	r3, [sp, #0]
 800d5fc:	60d3      	str	r3, [r2, #12]
 800d5fe:	9b02      	ldr	r3, [sp, #8]
 800d600:	6153      	str	r3, [r2, #20]
 800d602:	9b07      	ldr	r3, [sp, #28]
 800d604:	61d6      	str	r6, [r2, #28]
 800d606:	2000      	movs	r0, #0
 800d608:	f8c2 a010 	str.w	sl, [r2, #16]
 800d60c:	6193      	str	r3, [r2, #24]
 800d60e:	b009      	add	sp, #36	; 0x24
 800d610:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d614:	20000000 	.word	0x20000000
 800d618:	000f000a 	.word	0x000f000a
 800d61c:	00060003 	.word	0x00060003
 800d620:	00150019 	.word	0x00150019
 800d624:	00190015 	.word	0x00190015
 800d628:	00030006 	.word	0x00030006
 800d62c:	000a000f 	.word	0x000a000f

0800d630 <D64_GENERIC>:
 800d630:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d634:	b089      	sub	sp, #36	; 0x24
 800d636:	6913      	ldr	r3, [r2, #16]
 800d638:	6895      	ldr	r5, [r2, #8]
 800d63a:	9303      	str	r3, [sp, #12]
 800d63c:	9501      	str	r5, [sp, #4]
 800d63e:	6953      	ldr	r3, [r2, #20]
 800d640:	68d5      	ldr	r5, [r2, #12]
 800d642:	8cd4      	ldrh	r4, [r2, #38]	; 0x26
 800d644:	9304      	str	r3, [sp, #16]
 800d646:	9500      	str	r5, [sp, #0]
 800d648:	6993      	ldr	r3, [r2, #24]
 800d64a:	6b15      	ldr	r5, [r2, #48]	; 0x30
 800d64c:	9307      	str	r3, [sp, #28]
 800d64e:	9505      	str	r5, [sp, #20]
 800d650:	69d3      	ldr	r3, [r2, #28]
 800d652:	9106      	str	r1, [sp, #24]
 800d654:	2c00      	cmp	r4, #0
 800d656:	f000 80d9 	beq.w	800d80c <D64_GENERIC+0x1dc>
 800d65a:	6a11      	ldr	r1, [r2, #32]
 800d65c:	9102      	str	r1, [sp, #8]
 800d65e:	f8df e1ec 	ldr.w	lr, [pc, #492]	; 800d84c <D64_GENERIC+0x21c>
 800d662:	f04f 0c00 	mov.w	ip, #0
 800d666:	4681      	mov	r9, r0
 800d668:	e0c1      	b.n	800d7ee <D64_GENERIC+0x1be>
 800d66a:	eb06 0846 	add.w	r8, r6, r6, lsl #1
 800d66e:	4274      	negs	r4, r6
 800d670:	eb09 0708 	add.w	r7, r9, r8
 800d674:	eb07 0a44 	add.w	sl, r7, r4, lsl #1
 800d678:	eb0a 0548 	add.w	r5, sl, r8, lsl #1
 800d67c:	5d38      	ldrb	r0, [r7, r4]
 800d67e:	5d29      	ldrb	r1, [r5, r4]
 800d680:	f81a b018 	ldrb.w	fp, [sl, r8, lsl #1]
 800d684:	f819 a008 	ldrb.w	sl, [r9, r8]
 800d688:	f817 8014 	ldrb.w	r8, [r7, r4, lsl #1]
 800d68c:	f899 7000 	ldrb.w	r7, [r9]
 800d690:	f815 9014 	ldrb.w	r9, [r5, r4, lsl #1]
 800d694:	4425      	add	r5, r4
 800d696:	0409      	lsls	r1, r1, #16
 800d698:	0400      	lsls	r0, r0, #16
 800d69a:	eb01 610b 	add.w	r1, r1, fp, lsl #24
 800d69e:	eb00 600a 	add.w	r0, r0, sl, lsl #24
 800d6a2:	f815 b014 	ldrb.w	fp, [r5, r4, lsl #1]
 800d6a6:	eb01 2109 	add.w	r1, r1, r9, lsl #8
 800d6aa:	eb05 0444 	add.w	r4, r5, r4, lsl #1
 800d6ae:	eb00 2008 	add.w	r0, r0, r8, lsl #8
 800d6b2:	4459      	add	r1, fp
 800d6b4:	eb04 0986 	add.w	r9, r4, r6, lsl #2
 800d6b8:	4438      	add	r0, r7
 800d6ba:	b2c5      	uxtb	r5, r0
 800d6bc:	f3c0 2407 	ubfx	r4, r0, #8, #8
 800d6c0:	f85e 6025 	ldr.w	r6, [lr, r5, lsl #2]
 800d6c4:	f85e 5024 	ldr.w	r5, [lr, r4, lsl #2]
 800d6c8:	f3c0 4407 	ubfx	r4, r0, #16, #8
 800d6cc:	0e00      	lsrs	r0, r0, #24
 800d6ce:	eb03 0806 	add.w	r8, r3, r6
 800d6d2:	f85e 7024 	ldr.w	r7, [lr, r4, lsl #2]
 800d6d6:	f85e 4020 	ldr.w	r4, [lr, r0, lsl #2]
 800d6da:	f3c1 2307 	ubfx	r3, r1, #8, #8
 800d6de:	b2c8      	uxtb	r0, r1
 800d6e0:	eb05 2598 	add.w	r5, r5, r8, lsr #10
 800d6e4:	eb07 2795 	add.w	r7, r7, r5, lsr #10
 800d6e8:	f85e 6020 	ldr.w	r6, [lr, r0, lsl #2]
 800d6ec:	f85e 0023 	ldr.w	r0, [lr, r3, lsl #2]
 800d6f0:	f3c1 4307 	ubfx	r3, r1, #16, #8
 800d6f4:	eb04 2497 	add.w	r4, r4, r7, lsr #10
 800d6f8:	0e09      	lsrs	r1, r1, #24
 800d6fa:	eb06 2694 	add.w	r6, r6, r4, lsr #10
 800d6fe:	f85e 3023 	ldr.w	r3, [lr, r3, lsl #2]
 800d702:	f85e 1021 	ldr.w	r1, [lr, r1, lsl #2]
 800d706:	eb00 2096 	add.w	r0, r0, r6, lsr #10
 800d70a:	eb03 2a90 	add.w	sl, r3, r0, lsr #10
 800d70e:	eb01 219a 	add.w	r1, r1, sl, lsr #10
 800d712:	f3ca 0309 	ubfx	r3, sl, #0, #10
 800d716:	f3c5 0509 	ubfx	r5, r5, #0, #10
 800d71a:	f3c4 0409 	ubfx	r4, r4, #0, #10
 800d71e:	f3c6 0609 	ubfx	r6, r6, #0, #10
 800d722:	f3c1 0a09 	ubfx	sl, r1, #0, #10
 800d726:	f3c8 0809 	ubfx	r8, r8, #0, #10
 800d72a:	f3c7 0709 	ubfx	r7, r7, #0, #10
 800d72e:	f3c0 0009 	ubfx	r0, r0, #0, #10
 800d732:	ea44 4707 	orr.w	r7, r4, r7, lsl #16
 800d736:	ea4a 4a03 	orr.w	sl, sl, r3, lsl #16
 800d73a:	ea45 4808 	orr.w	r8, r5, r8, lsl #16
 800d73e:	0a8b      	lsrs	r3, r1, #10
 800d740:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800d744:	4939      	ldr	r1, [pc, #228]	; (800d82c <D64_GENERIC+0x1fc>)
 800d746:	9c00      	ldr	r4, [sp, #0]
 800d748:	fb28 4101 	smlad	r1, r8, r1, r4
 800d74c:	4c38      	ldr	r4, [pc, #224]	; (800d830 <D64_GENERIC+0x200>)
 800d74e:	fb27 1104 	smlad	r1, r7, r4, r1
 800d752:	4c38      	ldr	r4, [pc, #224]	; (800d834 <D64_GENERIC+0x204>)
 800d754:	fb20 1104 	smlad	r1, r0, r4, r1
 800d758:	f44f 3680 	mov.w	r6, #65536	; 0x10000
 800d75c:	fb2a 1106 	smlad	r1, sl, r6, r1
 800d760:	4c35      	ldr	r4, [pc, #212]	; (800d838 <D64_GENERIC+0x208>)
 800d762:	9d01      	ldr	r5, [sp, #4]
 800d764:	fb28 5404 	smlad	r4, r8, r4, r5
 800d768:	4d33      	ldr	r5, [pc, #204]	; (800d838 <D64_GENERIC+0x208>)
 800d76a:	fb2a 4415 	smladx	r4, sl, r5, r4
 800d76e:	4d33      	ldr	r5, [pc, #204]	; (800d83c <D64_GENERIC+0x20c>)
 800d770:	fb27 4405 	smlad	r4, r7, r5, r4
 800d774:	fb20 4415 	smladx	r4, r0, r5, r4
 800d778:	2501      	movs	r5, #1
 800d77a:	9400      	str	r4, [sp, #0]
 800d77c:	fb28 f805 	smuad	r8, r8, r5
 800d780:	4c2f      	ldr	r4, [pc, #188]	; (800d840 <D64_GENERIC+0x210>)
 800d782:	fb27 8704 	smlad	r7, r7, r4, r8
 800d786:	4c2f      	ldr	r4, [pc, #188]	; (800d844 <D64_GENERIC+0x214>)
 800d788:	fb20 7004 	smlad	r0, r0, r4, r7
 800d78c:	4c2e      	ldr	r4, [pc, #184]	; (800d848 <D64_GENERIC+0x218>)
 800d78e:	fb2a 0004 	smlad	r0, sl, r4, r0
 800d792:	f5a1 3600 	sub.w	r6, r1, #131072	; 0x20000
 800d796:	9902      	ldr	r1, [sp, #8]
 800d798:	9001      	str	r0, [sp, #4]
 800d79a:	b189      	cbz	r1, 800d7c0 <D64_GENERIC+0x190>
 800d79c:	9803      	ldr	r0, [sp, #12]
 800d79e:	9c04      	ldr	r4, [sp, #16]
 800d7a0:	9604      	str	r6, [sp, #16]
 800d7a2:	4430      	add	r0, r6
 800d7a4:	1b00      	subs	r0, r0, r4
 800d7a6:	17c5      	asrs	r5, r0, #31
 800d7a8:	460f      	mov	r7, r1
 800d7aa:	fba0 0101 	umull	r0, r1, r0, r1
 800d7ae:	fb07 1105 	mla	r1, r7, r5, r1
 800d7b2:	f110 4000 	adds.w	r0, r0, #2147483648	; 0x80000000
 800d7b6:	f141 0100 	adc.w	r1, r1, #0
 800d7ba:	0049      	lsls	r1, r1, #1
 800d7bc:	9103      	str	r1, [sp, #12]
 800d7be:	460e      	mov	r6, r1
 800d7c0:	8d14      	ldrh	r4, [r2, #40]	; 0x28
 800d7c2:	9905      	ldr	r1, [sp, #20]
 800d7c4:	9806      	ldr	r0, [sp, #24]
 800d7c6:	02b6      	lsls	r6, r6, #10
 800d7c8:	f04f 4700 	mov.w	r7, #2147483648	; 0x80000000
 800d7cc:	f04f 0800 	mov.w	r8, #0
 800d7d0:	fb0c f404 	mul.w	r4, ip, r4
 800d7d4:	fbc1 7806 	smlal	r7, r8, r1, r6
 800d7d8:	4641      	mov	r1, r8
 800d7da:	1089      	asrs	r1, r1, #2
 800d7dc:	f301 010f 	ssat	r1, #16, r1
 800d7e0:	f820 1014 	strh.w	r1, [r0, r4, lsl #1]
 800d7e4:	8cd1      	ldrh	r1, [r2, #38]	; 0x26
 800d7e6:	f10c 0c01 	add.w	ip, ip, #1
 800d7ea:	4561      	cmp	r1, ip
 800d7ec:	dd0e      	ble.n	800d80c <D64_GENERIC+0x1dc>
 800d7ee:	8d56      	ldrh	r6, [r2, #42]	; 0x2a
 800d7f0:	2e01      	cmp	r6, #1
 800d7f2:	f47f af3a 	bne.w	800d66a <D64_GENERIC+0x3a>
 800d7f6:	6b56      	ldr	r6, [r2, #52]	; 0x34
 800d7f8:	06b4      	lsls	r4, r6, #26
 800d7fa:	e899 0003 	ldmia.w	r9, {r0, r1}
 800d7fe:	f109 0908 	add.w	r9, r9, #8
 800d802:	f57f af5a 	bpl.w	800d6ba <D64_GENERIC+0x8a>
 800d806:	ba40      	rev16	r0, r0
 800d808:	ba49      	rev16	r1, r1
 800d80a:	e756      	b.n	800d6ba <D64_GENERIC+0x8a>
 800d80c:	61d3      	str	r3, [r2, #28]
 800d80e:	9b03      	ldr	r3, [sp, #12]
 800d810:	9901      	ldr	r1, [sp, #4]
 800d812:	6113      	str	r3, [r2, #16]
 800d814:	9b04      	ldr	r3, [sp, #16]
 800d816:	6091      	str	r1, [r2, #8]
 800d818:	6153      	str	r3, [r2, #20]
 800d81a:	9900      	ldr	r1, [sp, #0]
 800d81c:	9b07      	ldr	r3, [sp, #28]
 800d81e:	60d1      	str	r1, [r2, #12]
 800d820:	2000      	movs	r0, #0
 800d822:	6193      	str	r3, [r2, #24]
 800d824:	b009      	add	sp, #36	; 0x24
 800d826:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d82a:	bf00      	nop
 800d82c:	001c0015 	.word	0x001c0015
 800d830:	000f000a 	.word	0x000f000a
 800d834:	00060003 	.word	0x00060003
 800d838:	0024002a 	.word	0x0024002a
 800d83c:	002e0030 	.word	0x002e0030
 800d840:	00030006 	.word	0x00030006
 800d844:	000a000f 	.word	0x000a000f
 800d848:	0015001c 	.word	0x0015001c
 800d84c:	20000000 	.word	0x20000000

0800d850 <D80_GENERIC>:
 800d850:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d854:	b08b      	sub	sp, #44	; 0x2c
 800d856:	6914      	ldr	r4, [r2, #16]
 800d858:	9404      	str	r4, [sp, #16]
 800d85a:	6954      	ldr	r4, [r2, #20]
 800d85c:	9405      	str	r4, [sp, #20]
 800d85e:	6994      	ldr	r4, [r2, #24]
 800d860:	9409      	str	r4, [sp, #36]	; 0x24
 800d862:	6894      	ldr	r4, [r2, #8]
 800d864:	9402      	str	r4, [sp, #8]
 800d866:	8cd3      	ldrh	r3, [r2, #38]	; 0x26
 800d868:	68d4      	ldr	r4, [r2, #12]
 800d86a:	9401      	str	r4, [sp, #4]
 800d86c:	6b14      	ldr	r4, [r2, #48]	; 0x30
 800d86e:	f8d2 b01c 	ldr.w	fp, [r2, #28]
 800d872:	9406      	str	r4, [sp, #24]
 800d874:	9107      	str	r1, [sp, #28]
 800d876:	2b00      	cmp	r3, #0
 800d878:	f000 810f 	beq.w	800da9a <D80_GENERIC+0x24a>
 800d87c:	6a13      	ldr	r3, [r2, #32]
 800d87e:	9308      	str	r3, [sp, #32]
 800d880:	2300      	movs	r3, #0
 800d882:	9200      	str	r2, [sp, #0]
 800d884:	f8df 9264 	ldr.w	r9, [pc, #612]	; 800daec <D80_GENERIC+0x29c>
 800d888:	f8cd b00c 	str.w	fp, [sp, #12]
 800d88c:	461a      	mov	r2, r3
 800d88e:	e0ed      	b.n	800da6c <D80_GENERIC+0x21c>
 800d890:	fa5f fc8c 	uxtb.w	ip, ip
 800d894:	fa0f f48c 	sxth.w	r4, ip
 800d898:	0066      	lsls	r6, r4, #1
 800d89a:	eb06 0804 	add.w	r8, r6, r4
 800d89e:	f1cc 0500 	rsb	r5, ip, #0
 800d8a2:	eb00 0108 	add.w	r1, r0, r8
 800d8a6:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 800d8aa:	194b      	adds	r3, r1, r5
 800d8ac:	5d49      	ldrb	r1, [r1, r5]
 800d8ae:	f810 a008 	ldrb.w	sl, [r0, r8]
 800d8b2:	f813 b004 	ldrb.w	fp, [r3, r4]
 800d8b6:	f810 c00c 	ldrb.w	ip, [r0, ip]
 800d8ba:	f890 8000 	ldrb.w	r8, [r0]
 800d8be:	eb03 0e04 	add.w	lr, r3, r4
 800d8c2:	eb0e 0705 	add.w	r7, lr, r5
 800d8c6:	0409      	lsls	r1, r1, #16
 800d8c8:	f81e 3005 	ldrb.w	r3, [lr, r5]
 800d8cc:	f81e e015 	ldrb.w	lr, [lr, r5, lsl #1]
 800d8d0:	eb01 610a 	add.w	r1, r1, sl, lsl #24
 800d8d4:	eb07 0a45 	add.w	sl, r7, r5, lsl #1
 800d8d8:	eb0a 0004 	add.w	r0, sl, r4
 800d8dc:	041b      	lsls	r3, r3, #16
 800d8de:	f81a a004 	ldrb.w	sl, [sl, r4]
 800d8e2:	f817 7015 	ldrb.w	r7, [r7, r5, lsl #1]
 800d8e6:	5d44      	ldrb	r4, [r0, r5]
 800d8e8:	eb03 630b 	add.w	r3, r3, fp, lsl #24
 800d8ec:	eb01 210c 	add.w	r1, r1, ip, lsl #8
 800d8f0:	4428      	add	r0, r5
 800d8f2:	eb03 230e 	add.w	r3, r3, lr, lsl #8
 800d8f6:	4441      	add	r1, r8
 800d8f8:	4430      	add	r0, r6
 800d8fa:	eb04 240a 	add.w	r4, r4, sl, lsl #8
 800d8fe:	441f      	add	r7, r3
 800d900:	b2cd      	uxtb	r5, r1
 800d902:	f3c1 2307 	ubfx	r3, r1, #8, #8
 800d906:	f859 6025 	ldr.w	r6, [r9, r5, lsl #2]
 800d90a:	f859 e023 	ldr.w	lr, [r9, r3, lsl #2]
 800d90e:	9b03      	ldr	r3, [sp, #12]
 800d910:	f3c1 4507 	ubfx	r5, r1, #16, #8
 800d914:	0e09      	lsrs	r1, r1, #24
 800d916:	4433      	add	r3, r6
 800d918:	f859 8025 	ldr.w	r8, [r9, r5, lsl #2]
 800d91c:	f859 6021 	ldr.w	r6, [r9, r1, lsl #2]
 800d920:	b2fd      	uxtb	r5, r7
 800d922:	eb0e 2193 	add.w	r1, lr, r3, lsr #10
 800d926:	469b      	mov	fp, r3
 800d928:	f3c7 2307 	ubfx	r3, r7, #8, #8
 800d92c:	eb08 2891 	add.w	r8, r8, r1, lsr #10
 800d930:	f859 c025 	ldr.w	ip, [r9, r5, lsl #2]
 800d934:	f859 5023 	ldr.w	r5, [r9, r3, lsl #2]
 800d938:	f3c7 4e07 	ubfx	lr, r7, #16, #8
 800d93c:	eb06 2698 	add.w	r6, r6, r8, lsr #10
 800d940:	0e3b      	lsrs	r3, r7, #24
 800d942:	eb0c 2c96 	add.w	ip, ip, r6, lsr #10
 800d946:	f859 702e 	ldr.w	r7, [r9, lr, lsl #2]
 800d94a:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800d94e:	fa5f fe84 	uxtb.w	lr, r4
 800d952:	eb05 259c 	add.w	r5, r5, ip, lsr #10
 800d956:	f3c4 2407 	ubfx	r4, r4, #8, #8
 800d95a:	eb07 2795 	add.w	r7, r7, r5, lsr #10
 800d95e:	f859 e02e 	ldr.w	lr, [r9, lr, lsl #2]
 800d962:	f859 4024 	ldr.w	r4, [r9, r4, lsl #2]
 800d966:	eb03 2397 	add.w	r3, r3, r7, lsr #10
 800d96a:	eb0e 2e93 	add.w	lr, lr, r3, lsr #10
 800d96e:	eb04 249e 	add.w	r4, r4, lr, lsr #10
 800d972:	f3c1 0109 	ubfx	r1, r1, #0, #10
 800d976:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800d97a:	f3cb 0b09 	ubfx	fp, fp, #0, #10
 800d97e:	f3c7 0709 	ubfx	r7, r7, #0, #10
 800d982:	f3c6 0609 	ubfx	r6, r6, #0, #10
 800d986:	f3c5 0509 	ubfx	r5, r5, #0, #10
 800d98a:	ea41 4b0b 	orr.w	fp, r1, fp, lsl #16
 800d98e:	ea43 4707 	orr.w	r7, r3, r7, lsl #16
 800d992:	f3c4 0109 	ubfx	r1, r4, #0, #10
 800d996:	0aa3      	lsrs	r3, r4, #10
 800d998:	f3c8 0809 	ubfx	r8, r8, #0, #10
 800d99c:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 800d9a0:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 800d9a4:	ea41 4e0e 	orr.w	lr, r1, lr, lsl #16
 800d9a8:	9303      	str	r3, [sp, #12]
 800d9aa:	ea46 4808 	orr.w	r8, r6, r8, lsl #16
 800d9ae:	ea45 4c0c 	orr.w	ip, r5, ip, lsl #16
 800d9b2:	4b42      	ldr	r3, [pc, #264]	; (800dabc <D80_GENERIC+0x26c>)
 800d9b4:	9901      	ldr	r1, [sp, #4]
 800d9b6:	fb2b 1303 	smlad	r3, fp, r3, r1
 800d9ba:	4941      	ldr	r1, [pc, #260]	; (800dac0 <D80_GENERIC+0x270>)
 800d9bc:	fb28 3301 	smlad	r3, r8, r1, r3
 800d9c0:	4940      	ldr	r1, [pc, #256]	; (800dac4 <D80_GENERIC+0x274>)
 800d9c2:	fb2c 3301 	smlad	r3, ip, r1, r3
 800d9c6:	4940      	ldr	r1, [pc, #256]	; (800dac8 <D80_GENERIC+0x278>)
 800d9c8:	fb27 3301 	smlad	r3, r7, r1, r3
 800d9cc:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 800d9d0:	fb2e 3301 	smlad	r3, lr, r1, r3
 800d9d4:	493d      	ldr	r1, [pc, #244]	; (800dacc <D80_GENERIC+0x27c>)
 800d9d6:	9c02      	ldr	r4, [sp, #8]
 800d9d8:	fb2b 4401 	smlad	r4, fp, r1, r4
 800d9dc:	493c      	ldr	r1, [pc, #240]	; (800dad0 <D80_GENERIC+0x280>)
 800d9de:	fb28 4401 	smlad	r4, r8, r1, r4
 800d9e2:	f04f 114b 	mov.w	r1, #4915275	; 0x4b004b
 800d9e6:	fb2c 4101 	smlad	r1, ip, r1, r4
 800d9ea:	4c3a      	ldr	r4, [pc, #232]	; (800dad4 <D80_GENERIC+0x284>)
 800d9ec:	fb27 1104 	smlad	r1, r7, r4, r1
 800d9f0:	4c39      	ldr	r4, [pc, #228]	; (800dad8 <D80_GENERIC+0x288>)
 800d9f2:	fb2e 1104 	smlad	r1, lr, r4, r1
 800d9f6:	9101      	str	r1, [sp, #4]
 800d9f8:	2101      	movs	r1, #1
 800d9fa:	fb2b fb01 	smuad	fp, fp, r1
 800d9fe:	4937      	ldr	r1, [pc, #220]	; (800dadc <D80_GENERIC+0x28c>)
 800da00:	fb28 b801 	smlad	r8, r8, r1, fp
 800da04:	4d36      	ldr	r5, [pc, #216]	; (800dae0 <D80_GENERIC+0x290>)
 800da06:	fb2c 8c05 	smlad	ip, ip, r5, r8
 800da0a:	4d36      	ldr	r5, [pc, #216]	; (800dae4 <D80_GENERIC+0x294>)
 800da0c:	fb27 c705 	smlad	r7, r7, r5, ip
 800da10:	4d35      	ldr	r5, [pc, #212]	; (800dae8 <D80_GENERIC+0x298>)
 800da12:	fb2e 7105 	smlad	r1, lr, r5, r7
 800da16:	9102      	str	r1, [sp, #8]
 800da18:	9908      	ldr	r1, [sp, #32]
 800da1a:	f5a3 337a 	sub.w	r3, r3, #256000	; 0x3e800
 800da1e:	b181      	cbz	r1, 800da42 <D80_GENERIC+0x1f2>
 800da20:	9c04      	ldr	r4, [sp, #16]
 800da22:	9d05      	ldr	r5, [sp, #20]
 800da24:	9305      	str	r3, [sp, #20]
 800da26:	441c      	add	r4, r3
 800da28:	1b64      	subs	r4, r4, r5
 800da2a:	17e7      	asrs	r7, r4, #31
 800da2c:	fba4 4501 	umull	r4, r5, r4, r1
 800da30:	fb01 5507 	mla	r5, r1, r7, r5
 800da34:	f114 4400 	adds.w	r4, r4, #2147483648	; 0x80000000
 800da38:	f145 0500 	adc.w	r5, r5, #0
 800da3c:	0069      	lsls	r1, r5, #1
 800da3e:	9104      	str	r1, [sp, #16]
 800da40:	460b      	mov	r3, r1
 800da42:	9e00      	ldr	r6, [sp, #0]
 800da44:	9f06      	ldr	r7, [sp, #24]
 800da46:	8d31      	ldrh	r1, [r6, #40]	; 0x28
 800da48:	025b      	lsls	r3, r3, #9
 800da4a:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800da4e:	2500      	movs	r5, #0
 800da50:	fb02 f101 	mul.w	r1, r2, r1
 800da54:	fbc7 4503 	smlal	r4, r5, r7, r3
 800da58:	9c07      	ldr	r4, [sp, #28]
 800da5a:	10ab      	asrs	r3, r5, #2
 800da5c:	f303 030f 	ssat	r3, #16, r3
 800da60:	f824 3011 	strh.w	r3, [r4, r1, lsl #1]
 800da64:	8cf3      	ldrh	r3, [r6, #38]	; 0x26
 800da66:	3201      	adds	r2, #1
 800da68:	4293      	cmp	r3, r2
 800da6a:	dd13      	ble.n	800da94 <D80_GENERIC+0x244>
 800da6c:	9b00      	ldr	r3, [sp, #0]
 800da6e:	f8b3 c02a 	ldrh.w	ip, [r3, #42]	; 0x2a
 800da72:	f1bc 0f01 	cmp.w	ip, #1
 800da76:	f47f af0b 	bne.w	800d890 <D80_GENERIC+0x40>
 800da7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800da7c:	6884      	ldr	r4, [r0, #8]
 800da7e:	069b      	lsls	r3, r3, #26
 800da80:	e890 0082 	ldmia.w	r0, {r1, r7}
 800da84:	f100 000a 	add.w	r0, r0, #10
 800da88:	f57f af3a 	bpl.w	800d900 <D80_GENERIC+0xb0>
 800da8c:	ba49      	rev16	r1, r1
 800da8e:	ba7f      	rev16	r7, r7
 800da90:	ba64      	rev16	r4, r4
 800da92:	e735      	b.n	800d900 <D80_GENERIC+0xb0>
 800da94:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800da98:	4632      	mov	r2, r6
 800da9a:	9b02      	ldr	r3, [sp, #8]
 800da9c:	6093      	str	r3, [r2, #8]
 800da9e:	9b01      	ldr	r3, [sp, #4]
 800daa0:	60d3      	str	r3, [r2, #12]
 800daa2:	9b04      	ldr	r3, [sp, #16]
 800daa4:	6113      	str	r3, [r2, #16]
 800daa6:	9b05      	ldr	r3, [sp, #20]
 800daa8:	6153      	str	r3, [r2, #20]
 800daaa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800daac:	f8c2 b01c 	str.w	fp, [r2, #28]
 800dab0:	2000      	movs	r0, #0
 800dab2:	6193      	str	r3, [r2, #24]
 800dab4:	b00b      	add	sp, #44	; 0x2c
 800dab6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800daba:	bf00      	nop
 800dabc:	002d0024 	.word	0x002d0024
 800dac0:	001c0015 	.word	0x001c0015
 800dac4:	000f000a 	.word	0x000f000a
 800dac8:	00060003 	.word	0x00060003
 800dacc:	0037003f 	.word	0x0037003f
 800dad0:	00450049 	.word	0x00450049
 800dad4:	00490045 	.word	0x00490045
 800dad8:	003f0037 	.word	0x003f0037
 800dadc:	00030006 	.word	0x00030006
 800dae0:	000a000f 	.word	0x000a000f
 800dae4:	0015001c 	.word	0x0015001c
 800dae8:	0024002d 	.word	0x0024002d
 800daec:	20000000 	.word	0x20000000

0800daf0 <D128_GENERIC>:
 800daf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800daf4:	b093      	sub	sp, #76	; 0x4c
 800daf6:	8cd3      	ldrh	r3, [r2, #38]	; 0x26
 800daf8:	9005      	str	r0, [sp, #20]
 800dafa:	4610      	mov	r0, r2
 800dafc:	9201      	str	r2, [sp, #4]
 800dafe:	6912      	ldr	r2, [r2, #16]
 800db00:	920c      	str	r2, [sp, #48]	; 0x30
 800db02:	4602      	mov	r2, r0
 800db04:	6940      	ldr	r0, [r0, #20]
 800db06:	900d      	str	r0, [sp, #52]	; 0x34
 800db08:	4610      	mov	r0, r2
 800db0a:	4614      	mov	r4, r2
 800db0c:	6992      	ldr	r2, [r2, #24]
 800db0e:	9211      	str	r2, [sp, #68]	; 0x44
 800db10:	69c2      	ldr	r2, [r0, #28]
 800db12:	9202      	str	r2, [sp, #8]
 800db14:	68e2      	ldr	r2, [r4, #12]
 800db16:	6880      	ldr	r0, [r0, #8]
 800db18:	9203      	str	r2, [sp, #12]
 800db1a:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800db1c:	9004      	str	r0, [sp, #16]
 800db1e:	920e      	str	r2, [sp, #56]	; 0x38
 800db20:	910f      	str	r1, [sp, #60]	; 0x3c
 800db22:	2b00      	cmp	r3, #0
 800db24:	f000 819b 	beq.w	800de5e <D128_GENERIC+0x36e>
 800db28:	6a23      	ldr	r3, [r4, #32]
 800db2a:	9310      	str	r3, [sp, #64]	; 0x40
 800db2c:	2300      	movs	r3, #0
 800db2e:	f8df 93a8 	ldr.w	r9, [pc, #936]	; 800ded8 <D128_GENERIC+0x3e8>
 800db32:	9306      	str	r3, [sp, #24]
 800db34:	e17a      	b.n	800de2c <D128_GENERIC+0x33c>
 800db36:	b2d2      	uxtb	r2, r2
 800db38:	9d05      	ldr	r5, [sp, #20]
 800db3a:	b214      	sxth	r4, r2
 800db3c:	eb04 0a44 	add.w	sl, r4, r4, lsl #1
 800db40:	4250      	negs	r0, r2
 800db42:	eb05 010a 	add.w	r1, r5, sl
 800db46:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800db4a:	eb01 0800 	add.w	r8, r1, r0
 800db4e:	eb0b 0c04 	add.w	ip, fp, r4
 800db52:	eb08 070c 	add.w	r7, r8, ip
 800db56:	183b      	adds	r3, r7, r0
 800db58:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
 800db5c:	eb03 0e40 	add.w	lr, r3, r0, lsl #1
 800db60:	eb0e 0604 	add.w	r6, lr, r4
 800db64:	9307      	str	r3, [sp, #28]
 800db66:	1833      	adds	r3, r6, r0
 800db68:	9305      	str	r3, [sp, #20]
 800db6a:	462b      	mov	r3, r5
 800db6c:	f815 a00a 	ldrb.w	sl, [r5, sl]
 800db70:	f8cd a020 	str.w	sl, [sp, #32]
 800db74:	f818 a00c 	ldrb.w	sl, [r8, ip]
 800db78:	f813 c002 	ldrb.w	ip, [r3, r2]
 800db7c:	f81e 8004 	ldrb.w	r8, [lr, r4]
 800db80:	5c3a      	ldrb	r2, [r7, r0]
 800db82:	f817 e010 	ldrb.w	lr, [r7, r0, lsl #1]
 800db86:	781f      	ldrb	r7, [r3, #0]
 800db88:	9b07      	ldr	r3, [sp, #28]
 800db8a:	9d05      	ldr	r5, [sp, #20]
 800db8c:	f813 3010 	ldrb.w	r3, [r3, r0, lsl #1]
 800db90:	5c09      	ldrb	r1, [r1, r0]
 800db92:	9709      	str	r7, [sp, #36]	; 0x24
 800db94:	9307      	str	r3, [sp, #28]
 800db96:	f816 7010 	ldrb.w	r7, [r6, r0, lsl #1]
 800db9a:	5c33      	ldrb	r3, [r6, r0]
 800db9c:	0412      	lsls	r2, r2, #16
 800db9e:	eb05 0640 	add.w	r6, r5, r0, lsl #1
 800dba2:	eb02 620a 	add.w	r2, r2, sl, lsl #24
 800dba6:	9d08      	ldr	r5, [sp, #32]
 800dba8:	eb06 0a04 	add.w	sl, r6, r4
 800dbac:	0409      	lsls	r1, r1, #16
 800dbae:	eb01 6105 	add.w	r1, r1, r5, lsl #24
 800dbb2:	f81a 5000 	ldrb.w	r5, [sl, r0]
 800dbb6:	5d36      	ldrb	r6, [r6, r4]
 800dbb8:	9c05      	ldr	r4, [sp, #20]
 800dbba:	042d      	lsls	r5, r5, #16
 800dbbc:	eb05 6606 	add.w	r6, r5, r6, lsl #24
 800dbc0:	eb01 210c 	add.w	r1, r1, ip, lsl #8
 800dbc4:	f81a 5010 	ldrb.w	r5, [sl, r0, lsl #1]
 800dbc8:	f814 4010 	ldrb.w	r4, [r4, r0, lsl #1]
 800dbcc:	eb0a 0c00 	add.w	ip, sl, r0
 800dbd0:	041b      	lsls	r3, r3, #16
 800dbd2:	eb03 6308 	add.w	r3, r3, r8, lsl #24
 800dbd6:	eb06 2605 	add.w	r6, r6, r5, lsl #8
 800dbda:	f81c a010 	ldrb.w	sl, [ip, r0, lsl #1]
 800dbde:	9d07      	ldr	r5, [sp, #28]
 800dbe0:	eb03 2307 	add.w	r3, r3, r7, lsl #8
 800dbe4:	eb0c 0040 	add.w	r0, ip, r0, lsl #1
 800dbe8:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800dbea:	4458      	add	r0, fp
 800dbec:	eb02 220e 	add.w	r2, r2, lr, lsl #8
 800dbf0:	9005      	str	r0, [sp, #20]
 800dbf2:	4439      	add	r1, r7
 800dbf4:	442a      	add	r2, r5
 800dbf6:	44b2      	add	sl, r6
 800dbf8:	1918      	adds	r0, r3, r4
 800dbfa:	b2cb      	uxtb	r3, r1
 800dbfc:	f3c1 2407 	ubfx	r4, r1, #8, #8
 800dc00:	9e02      	ldr	r6, [sp, #8]
 800dc02:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800dc06:	f859 5024 	ldr.w	r5, [r9, r4, lsl #2]
 800dc0a:	f3c1 4407 	ubfx	r4, r1, #16, #8
 800dc0e:	441e      	add	r6, r3
 800dc10:	0e09      	lsrs	r1, r1, #24
 800dc12:	4633      	mov	r3, r6
 800dc14:	f859 6024 	ldr.w	r6, [r9, r4, lsl #2]
 800dc18:	f859 7021 	ldr.w	r7, [r9, r1, lsl #2]
 800dc1c:	b2d4      	uxtb	r4, r2
 800dc1e:	eb05 2593 	add.w	r5, r5, r3, lsr #10
 800dc22:	f3c2 2107 	ubfx	r1, r2, #8, #8
 800dc26:	eb06 2b95 	add.w	fp, r6, r5, lsr #10
 800dc2a:	f859 6024 	ldr.w	r6, [r9, r4, lsl #2]
 800dc2e:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800dc32:	f3c2 4407 	ubfx	r4, r2, #16, #8
 800dc36:	0e12      	lsrs	r2, r2, #24
 800dc38:	eb07 279b 	add.w	r7, r7, fp, lsr #10
 800dc3c:	eb06 2897 	add.w	r8, r6, r7, lsr #10
 800dc40:	f859 6024 	ldr.w	r6, [r9, r4, lsl #2]
 800dc44:	f859 4022 	ldr.w	r4, [r9, r2, lsl #2]
 800dc48:	9702      	str	r7, [sp, #8]
 800dc4a:	b2c2      	uxtb	r2, r0
 800dc4c:	eb01 2198 	add.w	r1, r1, r8, lsr #10
 800dc50:	eb06 2c91 	add.w	ip, r6, r1, lsr #10
 800dc54:	f859 6022 	ldr.w	r6, [r9, r2, lsl #2]
 800dc58:	eb04 249c 	add.w	r4, r4, ip, lsr #10
 800dc5c:	f3c0 2207 	ubfx	r2, r0, #8, #8
 800dc60:	eb06 2e94 	add.w	lr, r6, r4, lsr #10
 800dc64:	f3c0 4607 	ubfx	r6, r0, #16, #8
 800dc68:	f859 2022 	ldr.w	r2, [r9, r2, lsl #2]
 800dc6c:	f859 7026 	ldr.w	r7, [r9, r6, lsl #2]
 800dc70:	0e00      	lsrs	r0, r0, #24
 800dc72:	fa5f f68a 	uxtb.w	r6, sl
 800dc76:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800dc7a:	9309      	str	r3, [sp, #36]	; 0x24
 800dc7c:	f859 0020 	ldr.w	r0, [r9, r0, lsl #2]
 800dc80:	f859 6026 	ldr.w	r6, [r9, r6, lsl #2]
 800dc84:	eb02 229e 	add.w	r2, r2, lr, lsr #10
 800dc88:	f3ca 2307 	ubfx	r3, sl, #8, #8
 800dc8c:	f3c5 0509 	ubfx	r5, r5, #0, #10
 800dc90:	950a      	str	r5, [sp, #40]	; 0x28
 800dc92:	eb07 2792 	add.w	r7, r7, r2, lsr #10
 800dc96:	f3ca 4507 	ubfx	r5, sl, #16, #8
 800dc9a:	eb00 2097 	add.w	r0, r0, r7, lsr #10
 800dc9e:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800dca2:	f859 5025 	ldr.w	r5, [r9, r5, lsl #2]
 800dca6:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800dcaa:	920b      	str	r2, [sp, #44]	; 0x2c
 800dcac:	eb06 2690 	add.w	r6, r6, r0, lsr #10
 800dcb0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800dcb2:	eb03 2396 	add.w	r3, r3, r6, lsr #10
 800dcb6:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 800dcba:	9307      	str	r3, [sp, #28]
 800dcbc:	eb05 2593 	add.w	r5, r5, r3, lsr #10
 800dcc0:	ea4f 6a1a 	mov.w	sl, sl, lsr #24
 800dcc4:	9b02      	ldr	r3, [sp, #8]
 800dcc6:	f8cd c008 	str.w	ip, [sp, #8]
 800dcca:	4694      	mov	ip, r2
 800dccc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800dcce:	f859 a02a 	ldr.w	sl, [r9, sl, lsl #2]
 800dcd2:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 800dcd6:	9a02      	ldr	r2, [sp, #8]
 800dcd8:	f3c4 0409 	ubfx	r4, r4, #0, #10
 800dcdc:	eb0a 2a95 	add.w	sl, sl, r5, lsr #10
 800dce0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800dce4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800dce6:	f8cd a020 	str.w	sl, [sp, #32]
 800dcea:	f3c8 0809 	ubfx	r8, r8, #0, #10
 800dcee:	f3c3 0a09 	ubfx	sl, r3, #0, #10
 800dcf2:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 800dcf6:	9b07      	ldr	r3, [sp, #28]
 800dcf8:	f3c1 0109 	ubfx	r1, r1, #0, #10
 800dcfc:	ea41 4108 	orr.w	r1, r1, r8, lsl #16
 800dd00:	ea42 480e 	orr.w	r8, r2, lr, lsl #16
 800dd04:	9a08      	ldr	r2, [sp, #32]
 800dd06:	f3c6 0609 	ubfx	r6, r6, #0, #10
 800dd0a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800dd0e:	f3cb 0b09 	ubfx	fp, fp, #0, #10
 800dd12:	f3c7 0709 	ubfx	r7, r7, #0, #10
 800dd16:	f3c2 0e09 	ubfx	lr, r2, #0, #10
 800dd1a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800dd1e:	f3c0 0009 	ubfx	r0, r0, #0, #10
 800dd22:	0a96      	lsrs	r6, r2, #10
 800dd24:	f3c5 0509 	ubfx	r5, r5, #0, #10
 800dd28:	9602      	str	r6, [sp, #8]
 800dd2a:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 800dd2e:	ea4a 4a0b 	orr.w	sl, sl, fp, lsl #16
 800dd32:	ea4e 4505 	orr.w	r5, lr, r5, lsl #16
 800dd36:	4e53      	ldr	r6, [pc, #332]	; (800de84 <D128_GENERIC+0x394>)
 800dd38:	9f03      	ldr	r7, [sp, #12]
 800dd3a:	fb2c 7606 	smlad	r6, ip, r6, r7
 800dd3e:	4f52      	ldr	r7, [pc, #328]	; (800de88 <D128_GENERIC+0x398>)
 800dd40:	fb2a 6607 	smlad	r6, sl, r7, r6
 800dd44:	4f51      	ldr	r7, [pc, #324]	; (800de8c <D128_GENERIC+0x39c>)
 800dd46:	fb21 6607 	smlad	r6, r1, r7, r6
 800dd4a:	4f51      	ldr	r7, [pc, #324]	; (800de90 <D128_GENERIC+0x3a0>)
 800dd4c:	fb24 6607 	smlad	r6, r4, r7, r6
 800dd50:	4f50      	ldr	r7, [pc, #320]	; (800de94 <D128_GENERIC+0x3a4>)
 800dd52:	fb28 6607 	smlad	r6, r8, r7, r6
 800dd56:	4f50      	ldr	r7, [pc, #320]	; (800de98 <D128_GENERIC+0x3a8>)
 800dd58:	fb20 6607 	smlad	r6, r0, r7, r6
 800dd5c:	4f4f      	ldr	r7, [pc, #316]	; (800de9c <D128_GENERIC+0x3ac>)
 800dd5e:	fb23 6607 	smlad	r6, r3, r7, r6
 800dd62:	f44f 3780 	mov.w	r7, #65536	; 0x10000
 800dd66:	fb25 6607 	smlad	r6, r5, r7, r6
 800dd6a:	4f4d      	ldr	r7, [pc, #308]	; (800dea0 <D128_GENERIC+0x3b0>)
 800dd6c:	9a04      	ldr	r2, [sp, #16]
 800dd6e:	fb2c 2e07 	smlad	lr, ip, r7, r2
 800dd72:	4a4c      	ldr	r2, [pc, #304]	; (800dea4 <D128_GENERIC+0x3b4>)
 800dd74:	fb2a ee02 	smlad	lr, sl, r2, lr
 800dd78:	4f4b      	ldr	r7, [pc, #300]	; (800dea8 <D128_GENERIC+0x3b8>)
 800dd7a:	fb21 ee07 	smlad	lr, r1, r7, lr
 800dd7e:	4f4b      	ldr	r7, [pc, #300]	; (800deac <D128_GENERIC+0x3bc>)
 800dd80:	fb24 ee07 	smlad	lr, r4, r7, lr
 800dd84:	4f4a      	ldr	r7, [pc, #296]	; (800deb0 <D128_GENERIC+0x3c0>)
 800dd86:	fb28 ee07 	smlad	lr, r8, r7, lr
 800dd8a:	4f4a      	ldr	r7, [pc, #296]	; (800deb4 <D128_GENERIC+0x3c4>)
 800dd8c:	fb20 ee07 	smlad	lr, r0, r7, lr
 800dd90:	4f49      	ldr	r7, [pc, #292]	; (800deb8 <D128_GENERIC+0x3c8>)
 800dd92:	fb23 e707 	smlad	r7, r3, r7, lr
 800dd96:	f8df e144 	ldr.w	lr, [pc, #324]	; 800dedc <D128_GENERIC+0x3ec>
 800dd9a:	fb25 720e 	smlad	r2, r5, lr, r7
 800dd9e:	f04f 0b01 	mov.w	fp, #1
 800dda2:	9203      	str	r2, [sp, #12]
 800dda4:	fb2c fb0b 	smuad	fp, ip, fp
 800dda8:	4f44      	ldr	r7, [pc, #272]	; (800debc <D128_GENERIC+0x3cc>)
 800ddaa:	fb2a ba07 	smlad	sl, sl, r7, fp
 800ddae:	4f44      	ldr	r7, [pc, #272]	; (800dec0 <D128_GENERIC+0x3d0>)
 800ddb0:	fb21 aa07 	smlad	sl, r1, r7, sl
 800ddb4:	4f43      	ldr	r7, [pc, #268]	; (800dec4 <D128_GENERIC+0x3d4>)
 800ddb6:	fb24 aa07 	smlad	sl, r4, r7, sl
 800ddba:	4f43      	ldr	r7, [pc, #268]	; (800dec8 <D128_GENERIC+0x3d8>)
 800ddbc:	fb28 a707 	smlad	r7, r8, r7, sl
 800ddc0:	4a42      	ldr	r2, [pc, #264]	; (800decc <D128_GENERIC+0x3dc>)
 800ddc2:	fb20 7702 	smlad	r7, r0, r2, r7
 800ddc6:	4a42      	ldr	r2, [pc, #264]	; (800ded0 <D128_GENERIC+0x3e0>)
 800ddc8:	fb23 7702 	smlad	r7, r3, r2, r7
 800ddcc:	4b41      	ldr	r3, [pc, #260]	; (800ded4 <D128_GENERIC+0x3e4>)
 800ddce:	fb25 7303 	smlad	r3, r5, r3, r7
 800ddd2:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800ddd4:	9304      	str	r3, [sp, #16]
 800ddd6:	f5a6 1680 	sub.w	r6, r6, #1048576	; 0x100000
 800ddda:	b185      	cbz	r5, 800ddfe <D128_GENERIC+0x30e>
 800dddc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ddde:	990d      	ldr	r1, [sp, #52]	; 0x34
 800dde0:	960d      	str	r6, [sp, #52]	; 0x34
 800dde2:	4432      	add	r2, r6
 800dde4:	1a52      	subs	r2, r2, r1
 800dde6:	17d1      	asrs	r1, r2, #31
 800dde8:	fba2 2305 	umull	r2, r3, r2, r5
 800ddec:	fb05 3301 	mla	r3, r5, r1, r3
 800ddf0:	f112 4200 	adds.w	r2, r2, #2147483648	; 0x80000000
 800ddf4:	f143 0300 	adc.w	r3, r3, #0
 800ddf8:	005b      	lsls	r3, r3, #1
 800ddfa:	930c      	str	r3, [sp, #48]	; 0x30
 800ddfc:	461e      	mov	r6, r3
 800ddfe:	9801      	ldr	r0, [sp, #4]
 800de00:	9c06      	ldr	r4, [sp, #24]
 800de02:	8d01      	ldrh	r1, [r0, #40]	; 0x28
 800de04:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 800de06:	01f6      	lsls	r6, r6, #7
 800de08:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800de0c:	2300      	movs	r3, #0
 800de0e:	fbc5 2306 	smlal	r2, r3, r5, r6
 800de12:	fb04 f101 	mul.w	r1, r4, r1
 800de16:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800de18:	109b      	asrs	r3, r3, #2
 800de1a:	f303 030f 	ssat	r3, #16, r3
 800de1e:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
 800de22:	8cc3      	ldrh	r3, [r0, #38]	; 0x26
 800de24:	1c62      	adds	r2, r4, #1
 800de26:	4293      	cmp	r3, r2
 800de28:	9206      	str	r2, [sp, #24]
 800de2a:	dd18      	ble.n	800de5e <D128_GENERIC+0x36e>
 800de2c:	9b01      	ldr	r3, [sp, #4]
 800de2e:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800de30:	2a01      	cmp	r2, #1
 800de32:	f47f ae80 	bne.w	800db36 <D128_GENERIC+0x46>
 800de36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800de38:	9d05      	ldr	r5, [sp, #20]
 800de3a:	069b      	lsls	r3, r3, #26
 800de3c:	6829      	ldr	r1, [r5, #0]
 800de3e:	686a      	ldr	r2, [r5, #4]
 800de40:	68a8      	ldr	r0, [r5, #8]
 800de42:	f8d5 a00c 	ldr.w	sl, [r5, #12]
 800de46:	f105 0410 	add.w	r4, r5, #16
 800de4a:	d506      	bpl.n	800de5a <D128_GENERIC+0x36a>
 800de4c:	ba49      	rev16	r1, r1
 800de4e:	ba52      	rev16	r2, r2
 800de50:	ba40      	rev16	r0, r0
 800de52:	fa9a fa9a 	rev16.w	sl, sl
 800de56:	9405      	str	r4, [sp, #20]
 800de58:	e6cf      	b.n	800dbfa <D128_GENERIC+0x10a>
 800de5a:	9405      	str	r4, [sp, #20]
 800de5c:	e6cd      	b.n	800dbfa <D128_GENERIC+0x10a>
 800de5e:	9a01      	ldr	r2, [sp, #4]
 800de60:	9904      	ldr	r1, [sp, #16]
 800de62:	6091      	str	r1, [r2, #8]
 800de64:	9903      	ldr	r1, [sp, #12]
 800de66:	60d1      	str	r1, [r2, #12]
 800de68:	9b02      	ldr	r3, [sp, #8]
 800de6a:	61d3      	str	r3, [r2, #28]
 800de6c:	4611      	mov	r1, r2
 800de6e:	4613      	mov	r3, r2
 800de70:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800de72:	610a      	str	r2, [r1, #16]
 800de74:	990d      	ldr	r1, [sp, #52]	; 0x34
 800de76:	6159      	str	r1, [r3, #20]
 800de78:	9911      	ldr	r1, [sp, #68]	; 0x44
 800de7a:	6199      	str	r1, [r3, #24]
 800de7c:	2000      	movs	r0, #0
 800de7e:	b013      	add	sp, #76	; 0x4c
 800de80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800de84:	00780069 	.word	0x00780069
 800de88:	005b004e 	.word	0x005b004e
 800de8c:	00420037 	.word	0x00420037
 800de90:	002d0024 	.word	0x002d0024
 800de94:	001c0015 	.word	0x001c0015
 800de98:	000f000a 	.word	0x000f000a
 800de9c:	00060003 	.word	0x00060003
 800dea0:	00880096 	.word	0x00880096
 800dea4:	00a200ac 	.word	0x00a200ac
 800dea8:	00b400ba 	.word	0x00b400ba
 800deac:	00be00c0 	.word	0x00be00c0
 800deb0:	00c000be 	.word	0x00c000be
 800deb4:	00ba00b4 	.word	0x00ba00b4
 800deb8:	00ac00a2 	.word	0x00ac00a2
 800debc:	00030006 	.word	0x00030006
 800dec0:	000a000f 	.word	0x000a000f
 800dec4:	0015001c 	.word	0x0015001c
 800dec8:	0024002d 	.word	0x0024002d
 800decc:	00370042 	.word	0x00370042
 800ded0:	004e005b 	.word	0x004e005b
 800ded4:	00690078 	.word	0x00690078
 800ded8:	20000000 	.word	0x20000000
 800dedc:	00960088 	.word	0x00960088

0800dee0 <D16_1CH_HTONS_VOL_HP>:
 800dee0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dee4:	4691      	mov	r9, r2
 800dee6:	b083      	sub	sp, #12
 800dee8:	8cd2      	ldrh	r2, [r2, #38]	; 0x26
 800deea:	f8d9 3018 	ldr.w	r3, [r9, #24]
 800deee:	f8d9 400c 	ldr.w	r4, [r9, #12]
 800def2:	9300      	str	r3, [sp, #0]
 800def4:	4680      	mov	r8, r0
 800def6:	f8d9 7014 	ldr.w	r7, [r9, #20]
 800defa:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800defe:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800df02:	f8d9 5008 	ldr.w	r5, [r9, #8]
 800df06:	9401      	str	r4, [sp, #4]
 800df08:	f8d9 a030 	ldr.w	sl, [r9, #48]	; 0x30
 800df0c:	f8d9 e020 	ldr.w	lr, [r9, #32]
 800df10:	2a00      	cmp	r2, #0
 800df12:	d04e      	beq.n	800dfb2 <D16_1CH_HTONS_VOL_HP+0xd2>
 800df14:	f8df c0a8 	ldr.w	ip, [pc, #168]	; 800dfc0 <D16_1CH_HTONS_VOL_HP+0xe0>
 800df18:	1e8c      	subs	r4, r1, #2
 800df1a:	eb08 0b42 	add.w	fp, r8, r2, lsl #1
 800df1e:	f858 2b02 	ldr.w	r2, [r8], #2
 800df22:	ba52      	rev16	r2, r2
 800df24:	b2d6      	uxtb	r6, r2
 800df26:	f3c2 2107 	ubfx	r1, r2, #8, #8
 800df2a:	f85c 2026 	ldr.w	r2, [ip, r6, lsl #2]
 800df2e:	f85c 1021 	ldr.w	r1, [ip, r1, lsl #2]
 800df32:	4413      	add	r3, r2
 800df34:	eb01 2293 	add.w	r2, r1, r3, lsr #10
 800df38:	f3c2 0109 	ubfx	r1, r2, #0, #10
 800df3c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800df40:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800df44:	0a93      	lsrs	r3, r2, #10
 800df46:	4a1c      	ldr	r2, [pc, #112]	; (800dfb8 <D16_1CH_HTONS_VOL_HP+0xd8>)
 800df48:	fb21 5202 	smlad	r2, r1, r2, r5
 800df4c:	4d1b      	ldr	r5, [pc, #108]	; (800dfbc <D16_1CH_HTONS_VOL_HP+0xdc>)
 800df4e:	fb21 f505 	smuad	r5, r1, r5
 800df52:	f5a2 6200 	sub.w	r2, r2, #2048	; 0x800
 800df56:	4410      	add	r0, r2
 800df58:	1bc0      	subs	r0, r0, r7
 800df5a:	17c7      	asrs	r7, r0, #31
 800df5c:	fba0 010e 	umull	r0, r1, r0, lr
 800df60:	f110 4000 	adds.w	r0, r0, #2147483648	; 0x80000000
 800df64:	fb0e 1107 	mla	r1, lr, r7, r1
 800df68:	f141 0100 	adc.w	r1, r1, #0
 800df6c:	0448      	lsls	r0, r1, #17
 800df6e:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800df72:	2700      	movs	r7, #0
 800df74:	fbc0 670a 	smlal	r6, r7, r0, sl
 800df78:	45d8      	cmp	r8, fp
 800df7a:	ea4f 0041 	mov.w	r0, r1, lsl #1
 800df7e:	ea4f 01a7 	mov.w	r1, r7, asr #2
 800df82:	4617      	mov	r7, r2
 800df84:	f301 010f 	ssat	r1, #16, r1
 800df88:	f824 1f02 	strh.w	r1, [r4, #2]!
 800df8c:	d1c7      	bne.n	800df1e <D16_1CH_HTONS_VOL_HP+0x3e>
 800df8e:	9901      	ldr	r1, [sp, #4]
 800df90:	f8c9 301c 	str.w	r3, [r9, #28]
 800df94:	9b00      	ldr	r3, [sp, #0]
 800df96:	f8c9 0010 	str.w	r0, [r9, #16]
 800df9a:	2000      	movs	r0, #0
 800df9c:	f8c9 5008 	str.w	r5, [r9, #8]
 800dfa0:	f8c9 100c 	str.w	r1, [r9, #12]
 800dfa4:	f8c9 2014 	str.w	r2, [r9, #20]
 800dfa8:	f8c9 3018 	str.w	r3, [r9, #24]
 800dfac:	b003      	add	sp, #12
 800dfae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dfb2:	463a      	mov	r2, r7
 800dfb4:	4621      	mov	r1, r4
 800dfb6:	e7eb      	b.n	800df90 <D16_1CH_HTONS_VOL_HP+0xb0>
 800dfb8:	00030001 	.word	0x00030001
 800dfbc:	00010003 	.word	0x00010003
 800dfc0:	20000000 	.word	0x20000000

0800dfc4 <D24_1CH_HTONS_VOL_HP>:
 800dfc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dfc8:	b089      	sub	sp, #36	; 0x24
 800dfca:	8cd3      	ldrh	r3, [r2, #38]	; 0x26
 800dfcc:	6996      	ldr	r6, [r2, #24]
 800dfce:	9304      	str	r3, [sp, #16]
 800dfd0:	6b17      	ldr	r7, [r2, #48]	; 0x30
 800dfd2:	9207      	str	r2, [sp, #28]
 800dfd4:	6915      	ldr	r5, [r2, #16]
 800dfd6:	6954      	ldr	r4, [r2, #20]
 800dfd8:	9606      	str	r6, [sp, #24]
 800dfda:	6893      	ldr	r3, [r2, #8]
 800dfdc:	69d6      	ldr	r6, [r2, #28]
 800dfde:	f8d2 c00c 	ldr.w	ip, [r2, #12]
 800dfe2:	f8d2 a020 	ldr.w	sl, [r2, #32]
 800dfe6:	9a04      	ldr	r2, [sp, #16]
 800dfe8:	9705      	str	r7, [sp, #20]
 800dfea:	2a00      	cmp	r2, #0
 800dfec:	d07e      	beq.n	800e0ec <D24_1CH_HTONS_VOL_HP+0x128>
 800dfee:	f1a1 0b02 	sub.w	fp, r1, #2
 800dff2:	2700      	movs	r7, #0
 800dff4:	46a8      	mov	r8, r5
 800dff6:	f8cd b004 	str.w	fp, [sp, #4]
 800dffa:	4655      	mov	r5, sl
 800dffc:	46e3      	mov	fp, ip
 800dffe:	f8df e0f8 	ldr.w	lr, [pc, #248]	; 800e0f8 <D24_1CH_HTONS_VOL_HP+0x134>
 800e002:	46ba      	mov	sl, r7
 800e004:	469c      	mov	ip, r3
 800e006:	e055      	b.n	800e0b4 <D24_1CH_HTONS_VOL_HP+0xf0>
 800e008:	7802      	ldrb	r2, [r0, #0]
 800e00a:	78c3      	ldrb	r3, [r0, #3]
 800e00c:	7841      	ldrb	r1, [r0, #1]
 800e00e:	0212      	lsls	r2, r2, #8
 800e010:	eb02 4303 	add.w	r3, r2, r3, lsl #16
 800e014:	440b      	add	r3, r1
 800e016:	3002      	adds	r0, #2
 800e018:	b2d9      	uxtb	r1, r3
 800e01a:	f3c3 2207 	ubfx	r2, r3, #8, #8
 800e01e:	f85e 7021 	ldr.w	r7, [lr, r1, lsl #2]
 800e022:	f85e 2022 	ldr.w	r2, [lr, r2, lsl #2]
 800e026:	0c1b      	lsrs	r3, r3, #16
 800e028:	eb07 2796 	add.w	r7, r7, r6, lsr #10
 800e02c:	eb02 2297 	add.w	r2, r2, r7, lsr #10
 800e030:	f85e 6023 	ldr.w	r6, [lr, r3, lsl #2]
 800e034:	f3c7 0309 	ubfx	r3, r7, #0, #10
 800e038:	f3c2 0709 	ubfx	r7, r2, #0, #10
 800e03c:	eb06 2692 	add.w	r6, r6, r2, lsr #10
 800e040:	ea47 4303 	orr.w	r3, r7, r3, lsl #16
 800e044:	4a2a      	ldr	r2, [pc, #168]	; (800e0f0 <D24_1CH_HTONS_VOL_HP+0x12c>)
 800e046:	fb23 b102 	smlad	r1, r3, r2, fp
 800e04a:	4a2a      	ldr	r2, [pc, #168]	; (800e0f4 <D24_1CH_HTONS_VOL_HP+0x130>)
 800e04c:	fb23 cb02 	smlad	fp, r3, r2, ip
 800e050:	f3c6 0c09 	ubfx	ip, r6, #0, #10
 800e054:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 800e058:	eb0b 0b4c 	add.w	fp, fp, ip, lsl #1
 800e05c:	2201      	movs	r2, #1
 800e05e:	fb23 f702 	smuad	r7, r3, r2
 800e062:	f5a1 51d8 	sub.w	r1, r1, #6912	; 0x1b00
 800e066:	eb01 0208 	add.w	r2, r1, r8
 800e06a:	1b12      	subs	r2, r2, r4
 800e06c:	17d4      	asrs	r4, r2, #31
 800e06e:	fba2 2305 	umull	r2, r3, r2, r5
 800e072:	f112 4200 	adds.w	r2, r2, #2147483648	; 0x80000000
 800e076:	fb05 3304 	mla	r3, r5, r4, r3
 800e07a:	f143 0300 	adc.w	r3, r3, #0
 800e07e:	9c05      	ldr	r4, [sp, #20]
 800e080:	03da      	lsls	r2, r3, #15
 800e082:	f04f 4800 	mov.w	r8, #2147483648	; 0x80000000
 800e086:	f04f 0900 	mov.w	r9, #0
 800e08a:	fbc4 8902 	smlal	r8, r9, r4, r2
 800e08e:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800e092:	9a01      	ldr	r2, [sp, #4]
 800e094:	ea4f 0843 	mov.w	r8, r3, lsl #1
 800e098:	9b03      	ldr	r3, [sp, #12]
 800e09a:	109b      	asrs	r3, r3, #2
 800e09c:	f303 030f 	ssat	r3, #16, r3
 800e0a0:	f822 3f02 	strh.w	r3, [r2, #2]!
 800e0a4:	9b04      	ldr	r3, [sp, #16]
 800e0a6:	9201      	str	r2, [sp, #4]
 800e0a8:	f10a 0a01 	add.w	sl, sl, #1
 800e0ac:	459a      	cmp	sl, r3
 800e0ae:	44bc      	add	ip, r7
 800e0b0:	460c      	mov	r4, r1
 800e0b2:	d00b      	beq.n	800e0cc <D24_1CH_HTONS_VOL_HP+0x108>
 800e0b4:	f01a 0f01 	tst.w	sl, #1
 800e0b8:	d0a6      	beq.n	800e008 <D24_1CH_HTONS_VOL_HP+0x44>
 800e0ba:	78c2      	ldrb	r2, [r0, #3]
 800e0bc:	7883      	ldrb	r3, [r0, #2]
 800e0be:	f810 1b04 	ldrb.w	r1, [r0], #4
 800e0c2:	0212      	lsls	r2, r2, #8
 800e0c4:	eb02 4303 	add.w	r3, r2, r3, lsl #16
 800e0c8:	440b      	add	r3, r1
 800e0ca:	e7a5      	b.n	800e018 <D24_1CH_HTONS_VOL_HP+0x54>
 800e0cc:	4663      	mov	r3, ip
 800e0ce:	4645      	mov	r5, r8
 800e0d0:	46dc      	mov	ip, fp
 800e0d2:	9807      	ldr	r0, [sp, #28]
 800e0d4:	6141      	str	r1, [r0, #20]
 800e0d6:	9906      	ldr	r1, [sp, #24]
 800e0d8:	6083      	str	r3, [r0, #8]
 800e0da:	f8c0 c00c 	str.w	ip, [r0, #12]
 800e0de:	61c6      	str	r6, [r0, #28]
 800e0e0:	6105      	str	r5, [r0, #16]
 800e0e2:	6181      	str	r1, [r0, #24]
 800e0e4:	2000      	movs	r0, #0
 800e0e6:	b009      	add	sp, #36	; 0x24
 800e0e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e0ec:	4621      	mov	r1, r4
 800e0ee:	e7f0      	b.n	800e0d2 <D24_1CH_HTONS_VOL_HP+0x10e>
 800e0f0:	00030001 	.word	0x00030001
 800e0f4:	00060007 	.word	0x00060007
 800e0f8:	20000000 	.word	0x20000000

0800e0fc <D32_1CH_HTONS_VOL_HP>:
 800e0fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e100:	4692      	mov	sl, r2
 800e102:	b087      	sub	sp, #28
 800e104:	8cd2      	ldrh	r2, [r2, #38]	; 0x26
 800e106:	f8da 3018 	ldr.w	r3, [sl, #24]
 800e10a:	f8da 5030 	ldr.w	r5, [sl, #48]	; 0x30
 800e10e:	9304      	str	r3, [sp, #16]
 800e110:	f8da 4010 	ldr.w	r4, [sl, #16]
 800e114:	f8da 8014 	ldr.w	r8, [sl, #20]
 800e118:	f8da 601c 	ldr.w	r6, [sl, #28]
 800e11c:	f8da 3008 	ldr.w	r3, [sl, #8]
 800e120:	f8da e00c 	ldr.w	lr, [sl, #12]
 800e124:	9501      	str	r5, [sp, #4]
 800e126:	f8da c020 	ldr.w	ip, [sl, #32]
 800e12a:	2a00      	cmp	r2, #0
 800e12c:	d07b      	beq.n	800e226 <D32_1CH_HTONS_VOL_HP+0x12a>
 800e12e:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 800e132:	4f3e      	ldr	r7, [pc, #248]	; (800e22c <D32_1CH_HTONS_VOL_HP+0x130>)
 800e134:	f8cd c00c 	str.w	ip, [sp, #12]
 800e138:	9202      	str	r2, [sp, #8]
 800e13a:	460d      	mov	r5, r1
 800e13c:	46a1      	mov	r9, r4
 800e13e:	4684      	mov	ip, r0
 800e140:	f8cd a014 	str.w	sl, [sp, #20]
 800e144:	f85c 1b04 	ldr.w	r1, [ip], #4
 800e148:	ba49      	rev16	r1, r1
 800e14a:	b2c8      	uxtb	r0, r1
 800e14c:	f3c1 2207 	ubfx	r2, r1, #8, #8
 800e150:	f3c1 4a07 	ubfx	sl, r1, #16, #8
 800e154:	f857 0020 	ldr.w	r0, [r7, r0, lsl #2]
 800e158:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
 800e15c:	0e09      	lsrs	r1, r1, #24
 800e15e:	eb00 2096 	add.w	r0, r0, r6, lsr #10
 800e162:	f857 602a 	ldr.w	r6, [r7, sl, lsl #2]
 800e166:	f857 1021 	ldr.w	r1, [r7, r1, lsl #2]
 800e16a:	eb02 2290 	add.w	r2, r2, r0, lsr #10
 800e16e:	eb06 2a92 	add.w	sl, r6, r2, lsr #10
 800e172:	eb01 269a 	add.w	r6, r1, sl, lsr #10
 800e176:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800e17a:	f3c6 0109 	ubfx	r1, r6, #0, #10
 800e17e:	f3c0 0009 	ubfx	r0, r0, #0, #10
 800e182:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 800e186:	ea42 4000 	orr.w	r0, r2, r0, lsl #16
 800e18a:	ea41 4a0a 	orr.w	sl, r1, sl, lsl #16
 800e18e:	4a28      	ldr	r2, [pc, #160]	; (800e230 <D32_1CH_HTONS_VOL_HP+0x134>)
 800e190:	fb20 e202 	smlad	r2, r0, r2, lr
 800e194:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 800e198:	fb2a 2101 	smlad	r1, sl, r1, r2
 800e19c:	4a25      	ldr	r2, [pc, #148]	; (800e234 <D32_1CH_HTONS_VOL_HP+0x138>)
 800e19e:	fb20 3302 	smlad	r3, r0, r2, r3
 800e1a2:	4a25      	ldr	r2, [pc, #148]	; (800e238 <D32_1CH_HTONS_VOL_HP+0x13c>)
 800e1a4:	fb2a 3e02 	smlad	lr, sl, r2, r3
 800e1a8:	2301      	movs	r3, #1
 800e1aa:	fb20 f003 	smuad	r0, r0, r3
 800e1ae:	4b23      	ldr	r3, [pc, #140]	; (800e23c <D32_1CH_HTONS_VOL_HP+0x140>)
 800e1b0:	fb2a 0303 	smlad	r3, sl, r3, r0
 800e1b4:	f5a1 4280 	sub.w	r2, r1, #16384	; 0x4000
 800e1b8:	9c03      	ldr	r4, [sp, #12]
 800e1ba:	eb02 0009 	add.w	r0, r2, r9
 800e1be:	eba0 0008 	sub.w	r0, r0, r8
 800e1c2:	ea4f 7be0 	mov.w	fp, r0, asr #31
 800e1c6:	fba0 0104 	umull	r0, r1, r0, r4
 800e1ca:	f110 4000 	adds.w	r0, r0, #2147483648	; 0x80000000
 800e1ce:	fb04 110b 	mla	r1, r4, fp, r1
 800e1d2:	f141 0100 	adc.w	r1, r1, #0
 800e1d6:	9c01      	ldr	r4, [sp, #4]
 800e1d8:	0388      	lsls	r0, r1, #14
 800e1da:	f04f 4800 	mov.w	r8, #2147483648	; 0x80000000
 800e1de:	f04f 0900 	mov.w	r9, #0
 800e1e2:	fbc0 8904 	smlal	r8, r9, r0, r4
 800e1e6:	ea4f 00a9 	mov.w	r0, r9, asr #2
 800e1ea:	ea4f 0941 	mov.w	r9, r1, lsl #1
 800e1ee:	f300 000f 	ssat	r0, #16, r0
 800e1f2:	9902      	ldr	r1, [sp, #8]
 800e1f4:	f825 0b02 	strh.w	r0, [r5], #2
 800e1f8:	428d      	cmp	r5, r1
 800e1fa:	4690      	mov	r8, r2
 800e1fc:	d1a2      	bne.n	800e144 <D32_1CH_HTONS_VOL_HP+0x48>
 800e1fe:	f8dd a014 	ldr.w	sl, [sp, #20]
 800e202:	464c      	mov	r4, r9
 800e204:	f8ca 3008 	str.w	r3, [sl, #8]
 800e208:	9b04      	ldr	r3, [sp, #16]
 800e20a:	f8ca e00c 	str.w	lr, [sl, #12]
 800e20e:	2000      	movs	r0, #0
 800e210:	f8ca 601c 	str.w	r6, [sl, #28]
 800e214:	f8ca 4010 	str.w	r4, [sl, #16]
 800e218:	f8ca 2014 	str.w	r2, [sl, #20]
 800e21c:	f8ca 3018 	str.w	r3, [sl, #24]
 800e220:	b007      	add	sp, #28
 800e222:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e226:	4642      	mov	r2, r8
 800e228:	e7ec      	b.n	800e204 <D32_1CH_HTONS_VOL_HP+0x108>
 800e22a:	bf00      	nop
 800e22c:	20000000 	.word	0x20000000
 800e230:	00060003 	.word	0x00060003
 800e234:	000a000c 	.word	0x000a000c
 800e238:	000c000a 	.word	0x000c000a
 800e23c:	00030006 	.word	0x00030006

0800e240 <D48_1CH_HTONS_VOL_HP>:
 800e240:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e244:	4613      	mov	r3, r2
 800e246:	461c      	mov	r4, r3
 800e248:	b087      	sub	sp, #28
 800e24a:	4625      	mov	r5, r4
 800e24c:	4626      	mov	r6, r4
 800e24e:	6b2d      	ldr	r5, [r5, #48]	; 0x30
 800e250:	9205      	str	r2, [sp, #20]
 800e252:	8cd2      	ldrh	r2, [r2, #38]	; 0x26
 800e254:	f8d3 9014 	ldr.w	r9, [r3, #20]
 800e258:	9501      	str	r5, [sp, #4]
 800e25a:	4680      	mov	r8, r0
 800e25c:	6a35      	ldr	r5, [r6, #32]
 800e25e:	6918      	ldr	r0, [r3, #16]
 800e260:	699b      	ldr	r3, [r3, #24]
 800e262:	9304      	str	r3, [sp, #16]
 800e264:	f8d4 e01c 	ldr.w	lr, [r4, #28]
 800e268:	68a3      	ldr	r3, [r4, #8]
 800e26a:	9502      	str	r5, [sp, #8]
 800e26c:	68e4      	ldr	r4, [r4, #12]
 800e26e:	2a00      	cmp	r2, #0
 800e270:	f000 808c 	beq.w	800e38c <D48_1CH_HTONS_VOL_HP+0x14c>
 800e274:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 800e278:	4d45      	ldr	r5, [pc, #276]	; (800e390 <D48_1CH_HTONS_VOL_HP+0x150>)
 800e27a:	9203      	str	r2, [sp, #12]
 800e27c:	468c      	mov	ip, r1
 800e27e:	e898 0044 	ldmia.w	r8, {r2, r6}
 800e282:	f108 0806 	add.w	r8, r8, #6
 800e286:	ba52      	rev16	r2, r2
 800e288:	ba76      	rev16	r6, r6
 800e28a:	b2d7      	uxtb	r7, r2
 800e28c:	f3c2 2107 	ubfx	r1, r2, #8, #8
 800e290:	f855 a027 	ldr.w	sl, [r5, r7, lsl #2]
 800e294:	f855 1021 	ldr.w	r1, [r5, r1, lsl #2]
 800e298:	f3c2 4707 	ubfx	r7, r2, #16, #8
 800e29c:	0e12      	lsrs	r2, r2, #24
 800e29e:	eb0a 2a9e 	add.w	sl, sl, lr, lsr #10
 800e2a2:	f855 7027 	ldr.w	r7, [r5, r7, lsl #2]
 800e2a6:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 800e2aa:	fa5f fb86 	uxtb.w	fp, r6
 800e2ae:	eb01 219a 	add.w	r1, r1, sl, lsr #10
 800e2b2:	f3c6 2e07 	ubfx	lr, r6, #8, #8
 800e2b6:	eb07 2791 	add.w	r7, r7, r1, lsr #10
 800e2ba:	f855 602b 	ldr.w	r6, [r5, fp, lsl #2]
 800e2be:	f855 e02e 	ldr.w	lr, [r5, lr, lsl #2]
 800e2c2:	eb02 2297 	add.w	r2, r2, r7, lsr #10
 800e2c6:	eb06 2692 	add.w	r6, r6, r2, lsr #10
 800e2ca:	eb0e 2e96 	add.w	lr, lr, r6, lsr #10
 800e2ce:	f3c1 0109 	ubfx	r1, r1, #0, #10
 800e2d2:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800e2d6:	f3ce 0b09 	ubfx	fp, lr, #0, #10
 800e2da:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 800e2de:	f3c7 0709 	ubfx	r7, r7, #0, #10
 800e2e2:	f3c6 0609 	ubfx	r6, r6, #0, #10
 800e2e6:	ea42 4707 	orr.w	r7, r2, r7, lsl #16
 800e2ea:	ea41 4a0a 	orr.w	sl, r1, sl, lsl #16
 800e2ee:	ea4b 4606 	orr.w	r6, fp, r6, lsl #16
 800e2f2:	4a28      	ldr	r2, [pc, #160]	; (800e394 <D48_1CH_HTONS_VOL_HP+0x154>)
 800e2f4:	fb2a 4202 	smlad	r2, sl, r2, r4
 800e2f8:	4927      	ldr	r1, [pc, #156]	; (800e398 <D48_1CH_HTONS_VOL_HP+0x158>)
 800e2fa:	fb27 2201 	smlad	r2, r7, r1, r2
 800e2fe:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 800e302:	fb26 2201 	smlad	r2, r6, r1, r2
 800e306:	4925      	ldr	r1, [pc, #148]	; (800e39c <D48_1CH_HTONS_VOL_HP+0x15c>)
 800e308:	fb2a 3401 	smlad	r4, sl, r1, r3
 800e30c:	f04f 131b 	mov.w	r3, #1769499	; 0x1b001b
 800e310:	fb27 4403 	smlad	r4, r7, r3, r4
 800e314:	4b22      	ldr	r3, [pc, #136]	; (800e3a0 <D48_1CH_HTONS_VOL_HP+0x160>)
 800e316:	fb26 4403 	smlad	r4, r6, r3, r4
 800e31a:	2101      	movs	r1, #1
 800e31c:	fb2a fa01 	smuad	sl, sl, r1
 800e320:	4b20      	ldr	r3, [pc, #128]	; (800e3a4 <D48_1CH_HTONS_VOL_HP+0x164>)
 800e322:	fb27 a703 	smlad	r7, r7, r3, sl
 800e326:	4b20      	ldr	r3, [pc, #128]	; (800e3a8 <D48_1CH_HTONS_VOL_HP+0x168>)
 800e328:	fb26 7303 	smlad	r3, r6, r3, r7
 800e32c:	f5a2 4258 	sub.w	r2, r2, #55296	; 0xd800
 800e330:	9e02      	ldr	r6, [sp, #8]
 800e332:	9f01      	ldr	r7, [sp, #4]
 800e334:	4410      	add	r0, r2
 800e336:	eba0 0009 	sub.w	r0, r0, r9
 800e33a:	ea4f 7ae0 	mov.w	sl, r0, asr #31
 800e33e:	fba0 0106 	umull	r0, r1, r0, r6
 800e342:	f110 4000 	adds.w	r0, r0, #2147483648	; 0x80000000
 800e346:	fb06 110a 	mla	r1, r6, sl, r1
 800e34a:	f141 0100 	adc.w	r1, r1, #0
 800e34e:	0308      	lsls	r0, r1, #12
 800e350:	f04f 4900 	mov.w	r9, #2147483648	; 0x80000000
 800e354:	f04f 0a00 	mov.w	sl, #0
 800e358:	fbc0 9a07 	smlal	r9, sl, r0, r7
 800e35c:	4657      	mov	r7, sl
 800e35e:	10b8      	asrs	r0, r7, #2
 800e360:	f300 000f 	ssat	r0, #16, r0
 800e364:	f82c 0b02 	strh.w	r0, [ip], #2
 800e368:	0048      	lsls	r0, r1, #1
 800e36a:	9903      	ldr	r1, [sp, #12]
 800e36c:	458c      	cmp	ip, r1
 800e36e:	4691      	mov	r9, r2
 800e370:	d185      	bne.n	800e27e <D48_1CH_HTONS_VOL_HP+0x3e>
 800e372:	9d05      	ldr	r5, [sp, #20]
 800e374:	616a      	str	r2, [r5, #20]
 800e376:	9a04      	ldr	r2, [sp, #16]
 800e378:	6128      	str	r0, [r5, #16]
 800e37a:	2000      	movs	r0, #0
 800e37c:	60ab      	str	r3, [r5, #8]
 800e37e:	60ec      	str	r4, [r5, #12]
 800e380:	f8c5 e01c 	str.w	lr, [r5, #28]
 800e384:	61aa      	str	r2, [r5, #24]
 800e386:	b007      	add	sp, #28
 800e388:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e38c:	464a      	mov	r2, r9
 800e38e:	e7f0      	b.n	800e372 <D48_1CH_HTONS_VOL_HP+0x132>
 800e390:	20000000 	.word	0x20000000
 800e394:	000f000a 	.word	0x000f000a
 800e398:	00060003 	.word	0x00060003
 800e39c:	00150019 	.word	0x00150019
 800e3a0:	00190015 	.word	0x00190015
 800e3a4:	00030006 	.word	0x00030006
 800e3a8:	000a000f 	.word	0x000a000f

0800e3ac <D64_1CH_HTONS_VOL_HP>:
 800e3ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e3b0:	b089      	sub	sp, #36	; 0x24
 800e3b2:	4614      	mov	r4, r2
 800e3b4:	9207      	str	r2, [sp, #28]
 800e3b6:	8cd3      	ldrh	r3, [r2, #38]	; 0x26
 800e3b8:	f8d2 c010 	ldr.w	ip, [r2, #16]
 800e3bc:	f8d2 8014 	ldr.w	r8, [r2, #20]
 800e3c0:	6992      	ldr	r2, [r2, #24]
 800e3c2:	9206      	str	r2, [sp, #24]
 800e3c4:	68e2      	ldr	r2, [r4, #12]
 800e3c6:	9201      	str	r2, [sp, #4]
 800e3c8:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800e3ca:	9203      	str	r2, [sp, #12]
 800e3cc:	6a22      	ldr	r2, [r4, #32]
 800e3ce:	69e5      	ldr	r5, [r4, #28]
 800e3d0:	68a6      	ldr	r6, [r4, #8]
 800e3d2:	9204      	str	r2, [sp, #16]
 800e3d4:	2b00      	cmp	r3, #0
 800e3d6:	f000 80b0 	beq.w	800e53a <D64_1CH_HTONS_VOL_HP+0x18e>
 800e3da:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 800e3de:	4f58      	ldr	r7, [pc, #352]	; (800e540 <D64_1CH_HTONS_VOL_HP+0x194>)
 800e3e0:	9305      	str	r3, [sp, #20]
 800e3e2:	9102      	str	r1, [sp, #8]
 800e3e4:	f850 2b08 	ldr.w	r2, [r0], #8
 800e3e8:	f850 3c04 	ldr.w	r3, [r0, #-4]
 800e3ec:	ba52      	rev16	r2, r2
 800e3ee:	fa93 f993 	rev16.w	r9, r3
 800e3f2:	b2d4      	uxtb	r4, r2
 800e3f4:	f3c2 2307 	ubfx	r3, r2, #8, #8
 800e3f8:	f857 b024 	ldr.w	fp, [r7, r4, lsl #2]
 800e3fc:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
 800e400:	9901      	ldr	r1, [sp, #4]
 800e402:	f3c2 4407 	ubfx	r4, r2, #16, #8
 800e406:	0e12      	lsrs	r2, r2, #24
 800e408:	44ab      	add	fp, r5
 800e40a:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800e40e:	f857 4022 	ldr.w	r4, [r7, r2, lsl #2]
 800e412:	fa5f f289 	uxtb.w	r2, r9
 800e416:	eb03 2e9b 	add.w	lr, r3, fp, lsr #10
 800e41a:	f3c9 2307 	ubfx	r3, r9, #8, #8
 800e41e:	eb05 2a9e 	add.w	sl, r5, lr, lsr #10
 800e422:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
 800e426:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
 800e42a:	f3c9 4507 	ubfx	r5, r9, #16, #8
 800e42e:	eb04 249a 	add.w	r4, r4, sl, lsr #10
 800e432:	ea4f 6919 	mov.w	r9, r9, lsr #24
 800e436:	eb02 2294 	add.w	r2, r2, r4, lsr #10
 800e43a:	f857 5025 	ldr.w	r5, [r7, r5, lsl #2]
 800e43e:	f857 9029 	ldr.w	r9, [r7, r9, lsl #2]
 800e442:	eb03 2392 	add.w	r3, r3, r2, lsr #10
 800e446:	eb05 2593 	add.w	r5, r5, r3, lsr #10
 800e44a:	eb09 2995 	add.w	r9, r9, r5, lsr #10
 800e44e:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 800e452:	f3cb 0b09 	ubfx	fp, fp, #0, #10
 800e456:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 800e45a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800e45e:	f3c5 0509 	ubfx	r5, r5, #0, #10
 800e462:	ea4e 4b0b 	orr.w	fp, lr, fp, lsl #16
 800e466:	f3c4 0409 	ubfx	r4, r4, #0, #10
 800e46a:	f3c9 0e09 	ubfx	lr, r9, #0, #10
 800e46e:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800e472:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
 800e476:	ea4e 4e05 	orr.w	lr, lr, r5, lsl #16
 800e47a:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800e47e:	ea4f 2599 	mov.w	r5, r9, lsr #10
 800e482:	4b30      	ldr	r3, [pc, #192]	; (800e544 <D64_1CH_HTONS_VOL_HP+0x198>)
 800e484:	fb2b 1303 	smlad	r3, fp, r3, r1
 800e488:	492f      	ldr	r1, [pc, #188]	; (800e548 <D64_1CH_HTONS_VOL_HP+0x19c>)
 800e48a:	fb24 3301 	smlad	r3, r4, r1, r3
 800e48e:	492f      	ldr	r1, [pc, #188]	; (800e54c <D64_1CH_HTONS_VOL_HP+0x1a0>)
 800e490:	fb22 3301 	smlad	r3, r2, r1, r3
 800e494:	f44f 3a80 	mov.w	sl, #65536	; 0x10000
 800e498:	fb2e 390a 	smlad	r9, lr, sl, r3
 800e49c:	4b2c      	ldr	r3, [pc, #176]	; (800e550 <D64_1CH_HTONS_VOL_HP+0x1a4>)
 800e49e:	fb2b 6603 	smlad	r6, fp, r3, r6
 800e4a2:	fb2e 6613 	smladx	r6, lr, r3, r6
 800e4a6:	4b2b      	ldr	r3, [pc, #172]	; (800e554 <D64_1CH_HTONS_VOL_HP+0x1a8>)
 800e4a8:	fb24 6603 	smlad	r6, r4, r3, r6
 800e4ac:	fb22 6313 	smladx	r3, r2, r3, r6
 800e4b0:	f04f 0a01 	mov.w	sl, #1
 800e4b4:	9301      	str	r3, [sp, #4]
 800e4b6:	fb2b fb0a 	smuad	fp, fp, sl
 800e4ba:	4b27      	ldr	r3, [pc, #156]	; (800e558 <D64_1CH_HTONS_VOL_HP+0x1ac>)
 800e4bc:	fb24 ba03 	smlad	sl, r4, r3, fp
 800e4c0:	4b26      	ldr	r3, [pc, #152]	; (800e55c <D64_1CH_HTONS_VOL_HP+0x1b0>)
 800e4c2:	fb22 a203 	smlad	r2, r2, r3, sl
 800e4c6:	4b26      	ldr	r3, [pc, #152]	; (800e560 <D64_1CH_HTONS_VOL_HP+0x1b4>)
 800e4c8:	fb2e 2603 	smlad	r6, lr, r3, r2
 800e4cc:	f5a9 3a00 	sub.w	sl, r9, #131072	; 0x20000
 800e4d0:	eb0a 020c 	add.w	r2, sl, ip
 800e4d4:	9c04      	ldr	r4, [sp, #16]
 800e4d6:	9903      	ldr	r1, [sp, #12]
 800e4d8:	eba2 0208 	sub.w	r2, r2, r8
 800e4dc:	ea4f 79e2 	mov.w	r9, r2, asr #31
 800e4e0:	fba2 2304 	umull	r2, r3, r2, r4
 800e4e4:	f112 4200 	adds.w	r2, r2, #2147483648	; 0x80000000
 800e4e8:	fb04 3309 	mla	r3, r4, r9, r3
 800e4ec:	f143 0300 	adc.w	r3, r3, #0
 800e4f0:	02da      	lsls	r2, r3, #11
 800e4f2:	f04f 4800 	mov.w	r8, #2147483648	; 0x80000000
 800e4f6:	f04f 0900 	mov.w	r9, #0
 800e4fa:	fbc1 8902 	smlal	r8, r9, r1, r2
 800e4fe:	9902      	ldr	r1, [sp, #8]
 800e500:	ea4f 02a9 	mov.w	r2, r9, asr #2
 800e504:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800e508:	f302 020f 	ssat	r2, #16, r2
 800e50c:	9b05      	ldr	r3, [sp, #20]
 800e50e:	f821 2b02 	strh.w	r2, [r1], #2
 800e512:	4299      	cmp	r1, r3
 800e514:	9102      	str	r1, [sp, #8]
 800e516:	46d0      	mov	r8, sl
 800e518:	f47f af64 	bne.w	800e3e4 <D64_1CH_HTONS_VOL_HP+0x38>
 800e51c:	9a07      	ldr	r2, [sp, #28]
 800e51e:	9901      	ldr	r1, [sp, #4]
 800e520:	60d1      	str	r1, [r2, #12]
 800e522:	9906      	ldr	r1, [sp, #24]
 800e524:	6096      	str	r6, [r2, #8]
 800e526:	2000      	movs	r0, #0
 800e528:	61d5      	str	r5, [r2, #28]
 800e52a:	f8c2 c010 	str.w	ip, [r2, #16]
 800e52e:	f8c2 a014 	str.w	sl, [r2, #20]
 800e532:	6191      	str	r1, [r2, #24]
 800e534:	b009      	add	sp, #36	; 0x24
 800e536:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e53a:	46c2      	mov	sl, r8
 800e53c:	4622      	mov	r2, r4
 800e53e:	e7ee      	b.n	800e51e <D64_1CH_HTONS_VOL_HP+0x172>
 800e540:	20000000 	.word	0x20000000
 800e544:	001c0015 	.word	0x001c0015
 800e548:	000f000a 	.word	0x000f000a
 800e54c:	00060003 	.word	0x00060003
 800e550:	0024002a 	.word	0x0024002a
 800e554:	002e0030 	.word	0x002e0030
 800e558:	00030006 	.word	0x00030006
 800e55c:	000a000f 	.word	0x000a000f
 800e560:	0015001c 	.word	0x0015001c

0800e564 <D80_1CH_HTONS_VOL_HP>:
 800e564:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e568:	4613      	mov	r3, r2
 800e56a:	b089      	sub	sp, #36	; 0x24
 800e56c:	4686      	mov	lr, r0
 800e56e:	6918      	ldr	r0, [r3, #16]
 800e570:	9000      	str	r0, [sp, #0]
 800e572:	4618      	mov	r0, r3
 800e574:	461c      	mov	r4, r3
 800e576:	695b      	ldr	r3, [r3, #20]
 800e578:	9302      	str	r3, [sp, #8]
 800e57a:	6983      	ldr	r3, [r0, #24]
 800e57c:	9306      	str	r3, [sp, #24]
 800e57e:	f8d0 c008 	ldr.w	ip, [r0, #8]
 800e582:	69c3      	ldr	r3, [r0, #28]
 800e584:	68c0      	ldr	r0, [r0, #12]
 800e586:	9207      	str	r2, [sp, #28]
 800e588:	9001      	str	r0, [sp, #4]
 800e58a:	8cd2      	ldrh	r2, [r2, #38]	; 0x26
 800e58c:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800e58e:	9003      	str	r0, [sp, #12]
 800e590:	6a20      	ldr	r0, [r4, #32]
 800e592:	9004      	str	r0, [sp, #16]
 800e594:	2a00      	cmp	r2, #0
 800e596:	f000 80d2 	beq.w	800e73e <D80_1CH_HTONS_VOL_HP+0x1da>
 800e59a:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 800e59e:	4869      	ldr	r0, [pc, #420]	; (800e744 <D80_1CH_HTONS_VOL_HP+0x1e0>)
 800e5a0:	9205      	str	r2, [sp, #20]
 800e5a2:	461c      	mov	r4, r3
 800e5a4:	f8de 5000 	ldr.w	r5, [lr]
 800e5a8:	f8de 2004 	ldr.w	r2, [lr, #4]
 800e5ac:	f8de 3008 	ldr.w	r3, [lr, #8]
 800e5b0:	f10e 0e0a 	add.w	lr, lr, #10
 800e5b4:	ba6d      	rev16	r5, r5
 800e5b6:	ba52      	rev16	r2, r2
 800e5b8:	fa93 fb93 	rev16.w	fp, r3
 800e5bc:	b2ee      	uxtb	r6, r5
 800e5be:	f3c5 2307 	ubfx	r3, r5, #8, #8
 800e5c2:	f850 7026 	ldr.w	r7, [r0, r6, lsl #2]
 800e5c6:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800e5ca:	f3c5 4607 	ubfx	r6, r5, #16, #8
 800e5ce:	eb04 0a07 	add.w	sl, r4, r7
 800e5d2:	0e2d      	lsrs	r5, r5, #24
 800e5d4:	f850 4026 	ldr.w	r4, [r0, r6, lsl #2]
 800e5d8:	f850 6025 	ldr.w	r6, [r0, r5, lsl #2]
 800e5dc:	eb03 239a 	add.w	r3, r3, sl, lsr #10
 800e5e0:	eb04 2993 	add.w	r9, r4, r3, lsr #10
 800e5e4:	b2d5      	uxtb	r5, r2
 800e5e6:	f3c2 2407 	ubfx	r4, r2, #8, #8
 800e5ea:	f850 7025 	ldr.w	r7, [r0, r5, lsl #2]
 800e5ee:	f850 5024 	ldr.w	r5, [r0, r4, lsl #2]
 800e5f2:	f3c2 4407 	ubfx	r4, r2, #16, #8
 800e5f6:	eb06 2699 	add.w	r6, r6, r9, lsr #10
 800e5fa:	0e12      	lsrs	r2, r2, #24
 800e5fc:	eb07 2896 	add.w	r8, r7, r6, lsr #10
 800e600:	f850 7024 	ldr.w	r7, [r0, r4, lsl #2]
 800e604:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
 800e608:	fa5f f48b 	uxtb.w	r4, fp
 800e60c:	eb05 2598 	add.w	r5, r5, r8, lsr #10
 800e610:	f3cb 2b07 	ubfx	fp, fp, #8, #8
 800e614:	eb07 2795 	add.w	r7, r7, r5, lsr #10
 800e618:	f850 4024 	ldr.w	r4, [r0, r4, lsl #2]
 800e61c:	f850 b02b 	ldr.w	fp, [r0, fp, lsl #2]
 800e620:	eb02 2297 	add.w	r2, r2, r7, lsr #10
 800e624:	eb04 2492 	add.w	r4, r4, r2, lsr #10
 800e628:	eb0b 2b94 	add.w	fp, fp, r4, lsr #10
 800e62c:	f3c6 0609 	ubfx	r6, r6, #0, #10
 800e630:	f3c9 0909 	ubfx	r9, r9, #0, #10
 800e634:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 800e638:	f3c5 0509 	ubfx	r5, r5, #0, #10
 800e63c:	f3c7 0709 	ubfx	r7, r7, #0, #10
 800e640:	f3c4 0409 	ubfx	r4, r4, #0, #10
 800e644:	ea46 4909 	orr.w	r9, r6, r9, lsl #16
 800e648:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800e64c:	f3cb 0609 	ubfx	r6, fp, #0, #10
 800e650:	f3c8 0809 	ubfx	r8, r8, #0, #10
 800e654:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800e658:	ea45 4808 	orr.w	r8, r5, r8, lsl #16
 800e65c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800e660:	ea46 4604 	orr.w	r6, r6, r4, lsl #16
 800e664:	ea43 430a 	orr.w	r3, r3, sl, lsl #16
 800e668:	ea4f 249b 	mov.w	r4, fp, lsr #10
 800e66c:	4d36      	ldr	r5, [pc, #216]	; (800e748 <D80_1CH_HTONS_VOL_HP+0x1e4>)
 800e66e:	9f01      	ldr	r7, [sp, #4]
 800e670:	fb23 7505 	smlad	r5, r3, r5, r7
 800e674:	4f35      	ldr	r7, [pc, #212]	; (800e74c <D80_1CH_HTONS_VOL_HP+0x1e8>)
 800e676:	fb29 5507 	smlad	r5, r9, r7, r5
 800e67a:	4f35      	ldr	r7, [pc, #212]	; (800e750 <D80_1CH_HTONS_VOL_HP+0x1ec>)
 800e67c:	fb28 5507 	smlad	r5, r8, r7, r5
 800e680:	4f34      	ldr	r7, [pc, #208]	; (800e754 <D80_1CH_HTONS_VOL_HP+0x1f0>)
 800e682:	fb22 5507 	smlad	r5, r2, r7, r5
 800e686:	f44f 3a80 	mov.w	sl, #65536	; 0x10000
 800e68a:	fb26 5b0a 	smlad	fp, r6, sl, r5
 800e68e:	4d32      	ldr	r5, [pc, #200]	; (800e758 <D80_1CH_HTONS_VOL_HP+0x1f4>)
 800e690:	fb23 cc05 	smlad	ip, r3, r5, ip
 800e694:	4d31      	ldr	r5, [pc, #196]	; (800e75c <D80_1CH_HTONS_VOL_HP+0x1f8>)
 800e696:	fb29 cc05 	smlad	ip, r9, r5, ip
 800e69a:	f04f 154b 	mov.w	r5, #4915275	; 0x4b004b
 800e69e:	fb28 c505 	smlad	r5, r8, r5, ip
 800e6a2:	4f2f      	ldr	r7, [pc, #188]	; (800e760 <D80_1CH_HTONS_VOL_HP+0x1fc>)
 800e6a4:	fb22 5507 	smlad	r5, r2, r7, r5
 800e6a8:	4f2e      	ldr	r7, [pc, #184]	; (800e764 <D80_1CH_HTONS_VOL_HP+0x200>)
 800e6aa:	fb26 5507 	smlad	r5, r6, r7, r5
 800e6ae:	f04f 0a01 	mov.w	sl, #1
 800e6b2:	9501      	str	r5, [sp, #4]
 800e6b4:	fb23 fa0a 	smuad	sl, r3, sl
 800e6b8:	4b2b      	ldr	r3, [pc, #172]	; (800e768 <D80_1CH_HTONS_VOL_HP+0x204>)
 800e6ba:	fb29 a903 	smlad	r9, r9, r3, sl
 800e6be:	4d2b      	ldr	r5, [pc, #172]	; (800e76c <D80_1CH_HTONS_VOL_HP+0x208>)
 800e6c0:	fb28 9805 	smlad	r8, r8, r5, r9
 800e6c4:	4d2a      	ldr	r5, [pc, #168]	; (800e770 <D80_1CH_HTONS_VOL_HP+0x20c>)
 800e6c6:	fb22 8205 	smlad	r2, r2, r5, r8
 800e6ca:	4b2a      	ldr	r3, [pc, #168]	; (800e774 <D80_1CH_HTONS_VOL_HP+0x210>)
 800e6cc:	fb26 2c03 	smlad	ip, r6, r3, r2
 800e6d0:	9b00      	ldr	r3, [sp, #0]
 800e6d2:	9d04      	ldr	r5, [sp, #16]
 800e6d4:	f5ab 3a7a 	sub.w	sl, fp, #256000	; 0x3e800
 800e6d8:	4453      	add	r3, sl
 800e6da:	461a      	mov	r2, r3
 800e6dc:	9b02      	ldr	r3, [sp, #8]
 800e6de:	f8cd a008 	str.w	sl, [sp, #8]
 800e6e2:	1ad2      	subs	r2, r2, r3
 800e6e4:	17d7      	asrs	r7, r2, #31
 800e6e6:	fba2 2305 	umull	r2, r3, r2, r5
 800e6ea:	fb05 3307 	mla	r3, r5, r7, r3
 800e6ee:	f112 4200 	adds.w	r2, r2, #2147483648	; 0x80000000
 800e6f2:	f143 0300 	adc.w	r3, r3, #0
 800e6f6:	9d03      	ldr	r5, [sp, #12]
 800e6f8:	029a      	lsls	r2, r3, #10
 800e6fa:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800e6fe:	2700      	movs	r7, #0
 800e700:	005b      	lsls	r3, r3, #1
 800e702:	fbc5 6702 	smlal	r6, r7, r5, r2
 800e706:	10ba      	asrs	r2, r7, #2
 800e708:	9300      	str	r3, [sp, #0]
 800e70a:	f302 020f 	ssat	r2, #16, r2
 800e70e:	9b05      	ldr	r3, [sp, #20]
 800e710:	f821 2b02 	strh.w	r2, [r1], #2
 800e714:	4299      	cmp	r1, r3
 800e716:	f47f af45 	bne.w	800e5a4 <D80_1CH_HTONS_VOL_HP+0x40>
 800e71a:	4623      	mov	r3, r4
 800e71c:	9907      	ldr	r1, [sp, #28]
 800e71e:	9801      	ldr	r0, [sp, #4]
 800e720:	60c8      	str	r0, [r1, #12]
 800e722:	9a00      	ldr	r2, [sp, #0]
 800e724:	f8c1 c008 	str.w	ip, [r1, #8]
 800e728:	4608      	mov	r0, r1
 800e72a:	61cb      	str	r3, [r1, #28]
 800e72c:	610a      	str	r2, [r1, #16]
 800e72e:	f8c1 a014 	str.w	sl, [r1, #20]
 800e732:	9906      	ldr	r1, [sp, #24]
 800e734:	6181      	str	r1, [r0, #24]
 800e736:	2000      	movs	r0, #0
 800e738:	b009      	add	sp, #36	; 0x24
 800e73a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e73e:	f8dd a008 	ldr.w	sl, [sp, #8]
 800e742:	e7eb      	b.n	800e71c <D80_1CH_HTONS_VOL_HP+0x1b8>
 800e744:	20000000 	.word	0x20000000
 800e748:	002d0024 	.word	0x002d0024
 800e74c:	001c0015 	.word	0x001c0015
 800e750:	000f000a 	.word	0x000f000a
 800e754:	00060003 	.word	0x00060003
 800e758:	0037003f 	.word	0x0037003f
 800e75c:	00450049 	.word	0x00450049
 800e760:	00490045 	.word	0x00490045
 800e764:	003f0037 	.word	0x003f0037
 800e768:	00030006 	.word	0x00030006
 800e76c:	000a000f 	.word	0x000a000f
 800e770:	0015001c 	.word	0x0015001c
 800e774:	0024002d 	.word	0x0024002d

0800e778 <D128_1CH_HTONS_VOL_HP>:
 800e778:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e77c:	b093      	sub	sp, #76	; 0x4c
 800e77e:	4614      	mov	r4, r2
 800e780:	9211      	str	r2, [sp, #68]	; 0x44
 800e782:	8cd3      	ldrh	r3, [r2, #38]	; 0x26
 800e784:	6912      	ldr	r2, [r2, #16]
 800e786:	9203      	str	r2, [sp, #12]
 800e788:	4622      	mov	r2, r4
 800e78a:	4615      	mov	r5, r2
 800e78c:	6964      	ldr	r4, [r4, #20]
 800e78e:	9406      	str	r4, [sp, #24]
 800e790:	4614      	mov	r4, r2
 800e792:	6992      	ldr	r2, [r2, #24]
 800e794:	9210      	str	r2, [sp, #64]	; 0x40
 800e796:	68ea      	ldr	r2, [r5, #12]
 800e798:	9204      	str	r2, [sp, #16]
 800e79a:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 800e79c:	69e6      	ldr	r6, [r4, #28]
 800e79e:	920d      	str	r2, [sp, #52]	; 0x34
 800e7a0:	68a4      	ldr	r4, [r4, #8]
 800e7a2:	6a2a      	ldr	r2, [r5, #32]
 800e7a4:	9405      	str	r4, [sp, #20]
 800e7a6:	920e      	str	r2, [sp, #56]	; 0x38
 800e7a8:	2b00      	cmp	r3, #0
 800e7aa:	f000 8145 	beq.w	800ea38 <D128_1CH_HTONS_VOL_HP+0x2c0>
 800e7ae:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 800e7b2:	930f      	str	r3, [sp, #60]	; 0x3c
 800e7b4:	f8df 82dc 	ldr.w	r8, [pc, #732]	; 800ea94 <D128_1CH_HTONS_VOL_HP+0x31c>
 800e7b8:	9107      	str	r1, [sp, #28]
 800e7ba:	f100 0310 	add.w	r3, r0, #16
 800e7be:	4699      	mov	r9, r3
 800e7c0:	f1a9 0110 	sub.w	r1, r9, #16
 800e7c4:	c90e      	ldmia	r1, {r1, r2, r3}
 800e7c6:	f859 0c04 	ldr.w	r0, [r9, #-4]
 800e7ca:	ba49      	rev16	r1, r1
 800e7cc:	ba52      	rev16	r2, r2
 800e7ce:	ba5b      	rev16	r3, r3
 800e7d0:	fa90 fa90 	rev16.w	sl, r0
 800e7d4:	f3c1 2007 	ubfx	r0, r1, #8, #8
 800e7d8:	b2cc      	uxtb	r4, r1
 800e7da:	f858 5020 	ldr.w	r5, [r8, r0, lsl #2]
 800e7de:	f858 4024 	ldr.w	r4, [r8, r4, lsl #2]
 800e7e2:	f3c1 4007 	ubfx	r0, r1, #16, #8
 800e7e6:	0e09      	lsrs	r1, r1, #24
 800e7e8:	4426      	add	r6, r4
 800e7ea:	f858 4020 	ldr.w	r4, [r8, r0, lsl #2]
 800e7ee:	f858 7021 	ldr.w	r7, [r8, r1, lsl #2]
 800e7f2:	b2d0      	uxtb	r0, r2
 800e7f4:	eb05 2596 	add.w	r5, r5, r6, lsr #10
 800e7f8:	eb04 2b95 	add.w	fp, r4, r5, lsr #10
 800e7fc:	f3c2 2107 	ubfx	r1, r2, #8, #8
 800e800:	f858 4020 	ldr.w	r4, [r8, r0, lsl #2]
 800e804:	f858 1021 	ldr.w	r1, [r8, r1, lsl #2]
 800e808:	eb07 279b 	add.w	r7, r7, fp, lsr #10
 800e80c:	f3c2 4007 	ubfx	r0, r2, #16, #8
 800e810:	0e12      	lsrs	r2, r2, #24
 800e812:	eb04 2497 	add.w	r4, r4, r7, lsr #10
 800e816:	9701      	str	r7, [sp, #4]
 800e818:	f858 0020 	ldr.w	r0, [r8, r0, lsl #2]
 800e81c:	4627      	mov	r7, r4
 800e81e:	f858 4022 	ldr.w	r4, [r8, r2, lsl #2]
 800e822:	9702      	str	r7, [sp, #8]
 800e824:	b2da      	uxtb	r2, r3
 800e826:	eb01 2197 	add.w	r1, r1, r7, lsr #10
 800e82a:	eb00 2c91 	add.w	ip, r0, r1, lsr #10
 800e82e:	f858 0022 	ldr.w	r0, [r8, r2, lsl #2]
 800e832:	eb04 249c 	add.w	r4, r4, ip, lsr #10
 800e836:	eb00 2e94 	add.w	lr, r0, r4, lsr #10
 800e83a:	f3c3 2207 	ubfx	r2, r3, #8, #8
 800e83e:	f3c3 4007 	ubfx	r0, r3, #16, #8
 800e842:	0e1b      	lsrs	r3, r3, #24
 800e844:	f858 7020 	ldr.w	r7, [r8, r0, lsl #2]
 800e848:	f858 2022 	ldr.w	r2, [r8, r2, lsl #2]
 800e84c:	f858 0023 	ldr.w	r0, [r8, r3, lsl #2]
 800e850:	fa5f f38a 	uxtb.w	r3, sl
 800e854:	f3c6 0609 	ubfx	r6, r6, #0, #10
 800e858:	960a      	str	r6, [sp, #40]	; 0x28
 800e85a:	eb02 229e 	add.w	r2, r2, lr, lsr #10
 800e85e:	f858 6023 	ldr.w	r6, [r8, r3, lsl #2]
 800e862:	f3c5 0509 	ubfx	r5, r5, #0, #10
 800e866:	f3ca 2307 	ubfx	r3, sl, #8, #8
 800e86a:	950b      	str	r5, [sp, #44]	; 0x2c
 800e86c:	eb07 2792 	add.w	r7, r7, r2, lsr #10
 800e870:	f3ca 4507 	ubfx	r5, sl, #16, #8
 800e874:	eb00 2097 	add.w	r0, r0, r7, lsr #10
 800e878:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
 800e87c:	f858 5025 	ldr.w	r5, [r8, r5, lsl #2]
 800e880:	ea4f 6a1a 	mov.w	sl, sl, lsr #24
 800e884:	eb06 2690 	add.w	r6, r6, r0, lsr #10
 800e888:	eb03 2396 	add.w	r3, r3, r6, lsr #10
 800e88c:	f858 a02a 	ldr.w	sl, [r8, sl, lsl #2]
 800e890:	9308      	str	r3, [sp, #32]
 800e892:	eb05 2593 	add.w	r5, r5, r3, lsr #10
 800e896:	9b01      	ldr	r3, [sp, #4]
 800e898:	eb0a 2a95 	add.w	sl, sl, r5, lsr #10
 800e89c:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 800e8a0:	f3c3 0a09 	ubfx	sl, r3, #0, #10
 800e8a4:	9b02      	ldr	r3, [sp, #8]
 800e8a6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800e8aa:	9302      	str	r3, [sp, #8]
 800e8ac:	9b08      	ldr	r3, [sp, #32]
 800e8ae:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800e8b2:	9308      	str	r3, [sp, #32]
 800e8b4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e8b6:	f3c5 0509 	ubfx	r5, r5, #0, #10
 800e8ba:	950c      	str	r5, [sp, #48]	; 0x30
 800e8bc:	461d      	mov	r5, r3
 800e8be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e8c0:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 800e8c4:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800e8c8:	ea45 4303 	orr.w	r3, r5, r3, lsl #16
 800e8cc:	ea42 420e 	orr.w	r2, r2, lr, lsl #16
 800e8d0:	9301      	str	r3, [sp, #4]
 800e8d2:	9b02      	ldr	r3, [sp, #8]
 800e8d4:	9202      	str	r2, [sp, #8]
 800e8d6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e8d8:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800e8da:	f3c7 0709 	ubfx	r7, r7, #0, #10
 800e8de:	f3c0 0009 	ubfx	r0, r0, #0, #10
 800e8e2:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 800e8e6:	f3c1 0109 	ubfx	r1, r1, #0, #10
 800e8ea:	f3c2 0709 	ubfx	r7, r2, #0, #10
 800e8ee:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800e8f2:	ea47 4505 	orr.w	r5, r7, r5, lsl #16
 800e8f6:	9b08      	ldr	r3, [sp, #32]
 800e8f8:	9f01      	ldr	r7, [sp, #4]
 800e8fa:	f3cb 0b09 	ubfx	fp, fp, #0, #10
 800e8fe:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 800e902:	f3c6 0609 	ubfx	r6, r6, #0, #10
 800e906:	f3c4 0409 	ubfx	r4, r4, #0, #10
 800e90a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800e90e:	46be      	mov	lr, r7
 800e910:	0a96      	lsrs	r6, r2, #10
 800e912:	ea4a 4a0b 	orr.w	sl, sl, fp, lsl #16
 800e916:	ea44 440c 	orr.w	r4, r4, ip, lsl #16
 800e91a:	4f49      	ldr	r7, [pc, #292]	; (800ea40 <D128_1CH_HTONS_VOL_HP+0x2c8>)
 800e91c:	9a04      	ldr	r2, [sp, #16]
 800e91e:	fb2e 2e07 	smlad	lr, lr, r7, r2
 800e922:	4a48      	ldr	r2, [pc, #288]	; (800ea44 <D128_1CH_HTONS_VOL_HP+0x2cc>)
 800e924:	fb2a ee02 	smlad	lr, sl, r2, lr
 800e928:	4a47      	ldr	r2, [pc, #284]	; (800ea48 <D128_1CH_HTONS_VOL_HP+0x2d0>)
 800e92a:	fb21 ee02 	smlad	lr, r1, r2, lr
 800e92e:	4a47      	ldr	r2, [pc, #284]	; (800ea4c <D128_1CH_HTONS_VOL_HP+0x2d4>)
 800e930:	fb24 ee02 	smlad	lr, r4, r2, lr
 800e934:	4a46      	ldr	r2, [pc, #280]	; (800ea50 <D128_1CH_HTONS_VOL_HP+0x2d8>)
 800e936:	9f02      	ldr	r7, [sp, #8]
 800e938:	fb27 ee02 	smlad	lr, r7, r2, lr
 800e93c:	4a45      	ldr	r2, [pc, #276]	; (800ea54 <D128_1CH_HTONS_VOL_HP+0x2dc>)
 800e93e:	fb20 ee02 	smlad	lr, r0, r2, lr
 800e942:	4a45      	ldr	r2, [pc, #276]	; (800ea58 <D128_1CH_HTONS_VOL_HP+0x2e0>)
 800e944:	fb23 e702 	smlad	r7, r3, r2, lr
 800e948:	f44f 3e80 	mov.w	lr, #65536	; 0x10000
 800e94c:	fb25 7e0e 	smlad	lr, r5, lr, r7
 800e950:	9f01      	ldr	r7, [sp, #4]
 800e952:	4a42      	ldr	r2, [pc, #264]	; (800ea5c <D128_1CH_HTONS_VOL_HP+0x2e4>)
 800e954:	46bc      	mov	ip, r7
 800e956:	9f05      	ldr	r7, [sp, #20]
 800e958:	fb2c 7c02 	smlad	ip, ip, r2, r7
 800e95c:	4a40      	ldr	r2, [pc, #256]	; (800ea60 <D128_1CH_HTONS_VOL_HP+0x2e8>)
 800e95e:	fb2a cc02 	smlad	ip, sl, r2, ip
 800e962:	4f40      	ldr	r7, [pc, #256]	; (800ea64 <D128_1CH_HTONS_VOL_HP+0x2ec>)
 800e964:	fb21 cc07 	smlad	ip, r1, r7, ip
 800e968:	4f3f      	ldr	r7, [pc, #252]	; (800ea68 <D128_1CH_HTONS_VOL_HP+0x2f0>)
 800e96a:	fb24 cc07 	smlad	ip, r4, r7, ip
 800e96e:	4f3f      	ldr	r7, [pc, #252]	; (800ea6c <D128_1CH_HTONS_VOL_HP+0x2f4>)
 800e970:	9a02      	ldr	r2, [sp, #8]
 800e972:	fb22 cc07 	smlad	ip, r2, r7, ip
 800e976:	4f3e      	ldr	r7, [pc, #248]	; (800ea70 <D128_1CH_HTONS_VOL_HP+0x2f8>)
 800e978:	fb20 cc07 	smlad	ip, r0, r7, ip
 800e97c:	4f3d      	ldr	r7, [pc, #244]	; (800ea74 <D128_1CH_HTONS_VOL_HP+0x2fc>)
 800e97e:	fb23 c707 	smlad	r7, r3, r7, ip
 800e982:	f8df c114 	ldr.w	ip, [pc, #276]	; 800ea98 <D128_1CH_HTONS_VOL_HP+0x320>
 800e986:	fb25 720c 	smlad	r2, r5, ip, r7
 800e98a:	f04f 0b01 	mov.w	fp, #1
 800e98e:	9204      	str	r2, [sp, #16]
 800e990:	9f01      	ldr	r7, [sp, #4]
 800e992:	fb27 fb0b 	smuad	fp, r7, fp
 800e996:	4f38      	ldr	r7, [pc, #224]	; (800ea78 <D128_1CH_HTONS_VOL_HP+0x300>)
 800e998:	fb2a ba07 	smlad	sl, sl, r7, fp
 800e99c:	4f37      	ldr	r7, [pc, #220]	; (800ea7c <D128_1CH_HTONS_VOL_HP+0x304>)
 800e99e:	fb21 aa07 	smlad	sl, r1, r7, sl
 800e9a2:	4f37      	ldr	r7, [pc, #220]	; (800ea80 <D128_1CH_HTONS_VOL_HP+0x308>)
 800e9a4:	fb24 aa07 	smlad	sl, r4, r7, sl
 800e9a8:	4f36      	ldr	r7, [pc, #216]	; (800ea84 <D128_1CH_HTONS_VOL_HP+0x30c>)
 800e9aa:	9a02      	ldr	r2, [sp, #8]
 800e9ac:	fb22 a707 	smlad	r7, r2, r7, sl
 800e9b0:	4a35      	ldr	r2, [pc, #212]	; (800ea88 <D128_1CH_HTONS_VOL_HP+0x310>)
 800e9b2:	fb20 7702 	smlad	r7, r0, r2, r7
 800e9b6:	4a35      	ldr	r2, [pc, #212]	; (800ea8c <D128_1CH_HTONS_VOL_HP+0x314>)
 800e9b8:	fb23 7702 	smlad	r7, r3, r2, r7
 800e9bc:	4b34      	ldr	r3, [pc, #208]	; (800ea90 <D128_1CH_HTONS_VOL_HP+0x318>)
 800e9be:	fb25 7303 	smlad	r3, r5, r3, r7
 800e9c2:	9305      	str	r3, [sp, #20]
 800e9c4:	9b03      	ldr	r3, [sp, #12]
 800e9c6:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 800e9c8:	f5ae 1e80 	sub.w	lr, lr, #1048576	; 0x100000
 800e9cc:	4473      	add	r3, lr
 800e9ce:	461a      	mov	r2, r3
 800e9d0:	9b06      	ldr	r3, [sp, #24]
 800e9d2:	f8cd e018 	str.w	lr, [sp, #24]
 800e9d6:	1ad2      	subs	r2, r2, r3
 800e9d8:	17d1      	asrs	r1, r2, #31
 800e9da:	fba2 2304 	umull	r2, r3, r2, r4
 800e9de:	fb04 3301 	mla	r3, r4, r1, r3
 800e9e2:	f112 4200 	adds.w	r2, r2, #2147483648	; 0x80000000
 800e9e6:	f143 0300 	adc.w	r3, r3, #0
 800e9ea:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 800e9ec:	021a      	lsls	r2, r3, #8
 800e9ee:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 800e9f2:	2100      	movs	r1, #0
 800e9f4:	fbc4 0102 	smlal	r0, r1, r4, r2
 800e9f8:	108a      	asrs	r2, r1, #2
 800e9fa:	9907      	ldr	r1, [sp, #28]
 800e9fc:	f302 020f 	ssat	r2, #16, r2
 800ea00:	005b      	lsls	r3, r3, #1
 800ea02:	f821 2b02 	strh.w	r2, [r1], #2
 800ea06:	9303      	str	r3, [sp, #12]
 800ea08:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ea0a:	9107      	str	r1, [sp, #28]
 800ea0c:	4299      	cmp	r1, r3
 800ea0e:	f109 0910 	add.w	r9, r9, #16
 800ea12:	f47f aed5 	bne.w	800e7c0 <D128_1CH_HTONS_VOL_HP+0x48>
 800ea16:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800ea18:	9905      	ldr	r1, [sp, #20]
 800ea1a:	6091      	str	r1, [r2, #8]
 800ea1c:	9904      	ldr	r1, [sp, #16]
 800ea1e:	60d1      	str	r1, [r2, #12]
 800ea20:	4613      	mov	r3, r2
 800ea22:	61d6      	str	r6, [r2, #28]
 800ea24:	9910      	ldr	r1, [sp, #64]	; 0x40
 800ea26:	9a03      	ldr	r2, [sp, #12]
 800ea28:	611a      	str	r2, [r3, #16]
 800ea2a:	2000      	movs	r0, #0
 800ea2c:	f8c3 e014 	str.w	lr, [r3, #20]
 800ea30:	6199      	str	r1, [r3, #24]
 800ea32:	b013      	add	sp, #76	; 0x4c
 800ea34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ea38:	f8dd e018 	ldr.w	lr, [sp, #24]
 800ea3c:	e7eb      	b.n	800ea16 <D128_1CH_HTONS_VOL_HP+0x29e>
 800ea3e:	bf00      	nop
 800ea40:	00780069 	.word	0x00780069
 800ea44:	005b004e 	.word	0x005b004e
 800ea48:	00420037 	.word	0x00420037
 800ea4c:	002d0024 	.word	0x002d0024
 800ea50:	001c0015 	.word	0x001c0015
 800ea54:	000f000a 	.word	0x000f000a
 800ea58:	00060003 	.word	0x00060003
 800ea5c:	00880096 	.word	0x00880096
 800ea60:	00a200ac 	.word	0x00a200ac
 800ea64:	00b400ba 	.word	0x00b400ba
 800ea68:	00be00c0 	.word	0x00be00c0
 800ea6c:	00c000be 	.word	0x00c000be
 800ea70:	00ba00b4 	.word	0x00ba00b4
 800ea74:	00ac00a2 	.word	0x00ac00a2
 800ea78:	00030006 	.word	0x00030006
 800ea7c:	000a000f 	.word	0x000a000f
 800ea80:	0015001c 	.word	0x0015001c
 800ea84:	0024002d 	.word	0x0024002d
 800ea88:	00370042 	.word	0x00370042
 800ea8c:	004e005b 	.word	0x004e005b
 800ea90:	00690078 	.word	0x00690078
 800ea94:	20000000 	.word	0x20000000
 800ea98:	00960088 	.word	0x00960088

0800ea9c <PDM_Filter_Init>:
 800ea9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ea9e:	2240      	movs	r2, #64	; 0x40
 800eaa0:	4604      	mov	r4, r0
 800eaa2:	2100      	movs	r1, #0
 800eaa4:	300c      	adds	r0, #12
 800eaa6:	f000 fa14 	bl	800eed2 <memset>
 800eaaa:	493b      	ldr	r1, [pc, #236]	; (800eb98 <PDM_Filter_Init+0xfc>)
 800eaac:	483b      	ldr	r0, [pc, #236]	; (800eb9c <PDM_Filter_Init+0x100>)
 800eaae:	f000 f98d 	bl	800edcc <CRC_Lock>
 800eab2:	8822      	ldrh	r2, [r4, #0]
 800eab4:	8963      	ldrh	r3, [r4, #10]
 800eab6:	4938      	ldr	r1, [pc, #224]	; (800eb98 <PDM_Filter_Init+0xfc>)
 800eab8:	8925      	ldrh	r5, [r4, #8]
 800eaba:	86a3      	strh	r3, [r4, #52]	; 0x34
 800eabc:	2801      	cmp	r0, #1
 800eabe:	f04f 0300 	mov.w	r3, #0
 800eac2:	bf18      	it	ne
 800eac4:	2100      	movne	r1, #0
 800eac6:	2a01      	cmp	r2, #1
 800eac8:	6461      	str	r1, [r4, #68]	; 0x44
 800eaca:	86e5      	strh	r5, [r4, #54]	; 0x36
 800eacc:	61a3      	str	r3, [r4, #24]
 800eace:	6123      	str	r3, [r4, #16]
 800ead0:	6163      	str	r3, [r4, #20]
 800ead2:	60e3      	str	r3, [r4, #12]
 800ead4:	6263      	str	r3, [r4, #36]	; 0x24
 800ead6:	61e3      	str	r3, [r4, #28]
 800ead8:	6223      	str	r3, [r4, #32]
 800eada:	6423      	str	r3, [r4, #64]	; 0x40
 800eadc:	d918      	bls.n	800eb10 <PDM_Filter_Init+0x74>
 800eade:	2003      	movs	r0, #3
 800eae0:	2302      	movs	r3, #2
 800eae2:	8862      	ldrh	r2, [r4, #2]
 800eae4:	2a01      	cmp	r2, #1
 800eae6:	d91d      	bls.n	800eb24 <PDM_Filter_Init+0x88>
 800eae8:	2140      	movs	r1, #64	; 0x40
 800eaea:	2300      	movs	r3, #0
 800eaec:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800eaee:	f1b2 1f01 	cmp.w	r2, #65537	; 0x10001
 800eaf2:	6862      	ldr	r2, [r4, #4]
 800eaf4:	bf04      	itt	eq
 800eaf6:	6421      	streq	r1, [r4, #64]	; 0x40
 800eaf8:	460b      	moveq	r3, r1
 800eafa:	b11a      	cbz	r2, 800eb04 <PDM_Filter_Init+0x68>
 800eafc:	f043 0310 	orr.w	r3, r3, #16
 800eb00:	6423      	str	r3, [r4, #64]	; 0x40
 800eb02:	62e2      	str	r2, [r4, #44]	; 0x2c
 800eb04:	2200      	movs	r2, #0
 800eb06:	8722      	strh	r2, [r4, #56]	; 0x38
 800eb08:	b908      	cbnz	r0, 800eb0e <PDM_Filter_Init+0x72>
 800eb0a:	3380      	adds	r3, #128	; 0x80
 800eb0c:	6423      	str	r3, [r4, #64]	; 0x40
 800eb0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800eb10:	4d23      	ldr	r5, [pc, #140]	; (800eba0 <PDM_Filter_Init+0x104>)
 800eb12:	d010      	beq.n	800eb36 <PDM_Filter_Init+0x9a>
 800eb14:	782a      	ldrb	r2, [r5, #0]
 800eb16:	2a01      	cmp	r2, #1
 800eb18:	d027      	beq.n	800eb6a <PDM_Filter_Init+0xce>
 800eb1a:	8862      	ldrh	r2, [r4, #2]
 800eb1c:	2a01      	cmp	r2, #1
 800eb1e:	f04f 0001 	mov.w	r0, #1
 800eb22:	d8e1      	bhi.n	800eae8 <PDM_Filter_Init+0x4c>
 800eb24:	d001      	beq.n	800eb2a <PDM_Filter_Init+0x8e>
 800eb26:	4618      	mov	r0, r3
 800eb28:	e7de      	b.n	800eae8 <PDM_Filter_Init+0x4c>
 800eb2a:	2220      	movs	r2, #32
 800eb2c:	4618      	mov	r0, r3
 800eb2e:	6422      	str	r2, [r4, #64]	; 0x40
 800eb30:	4613      	mov	r3, r2
 800eb32:	2160      	movs	r1, #96	; 0x60
 800eb34:	e7da      	b.n	800eaec <PDM_Filter_Init+0x50>
 800eb36:	7829      	ldrb	r1, [r5, #0]
 800eb38:	2900      	cmp	r1, #0
 800eb3a:	d1ee      	bne.n	800eb1a <PDM_Filter_Init+0x7e>
 800eb3c:	4919      	ldr	r1, [pc, #100]	; (800eba4 <PDM_Filter_Init+0x108>)
 800eb3e:	f8df e06c 	ldr.w	lr, [pc, #108]	; 800ebac <PDM_Filter_Init+0x110>
 800eb42:	4f19      	ldr	r7, [pc, #100]	; (800eba8 <PDM_Filter_Init+0x10c>)
 800eb44:	f501 6680 	add.w	r6, r1, #1024	; 0x400
 800eb48:	684a      	ldr	r2, [r1, #4]
 800eb4a:	ea0e 5302 	and.w	r3, lr, r2, lsl #20
 800eb4e:	ea02 0007 	and.w	r0, r2, r7
 800eb52:	4303      	orrs	r3, r0
 800eb54:	f3c2 5209 	ubfx	r2, r2, #20, #10
 800eb58:	4413      	add	r3, r2
 800eb5a:	f841 3f04 	str.w	r3, [r1, #4]!
 800eb5e:	428e      	cmp	r6, r1
 800eb60:	d1f2      	bne.n	800eb48 <PDM_Filter_Init+0xac>
 800eb62:	2001      	movs	r0, #1
 800eb64:	7028      	strb	r0, [r5, #0]
 800eb66:	2300      	movs	r3, #0
 800eb68:	e7bb      	b.n	800eae2 <PDM_Filter_Init+0x46>
 800eb6a:	490e      	ldr	r1, [pc, #56]	; (800eba4 <PDM_Filter_Init+0x108>)
 800eb6c:	f8df e03c 	ldr.w	lr, [pc, #60]	; 800ebac <PDM_Filter_Init+0x110>
 800eb70:	4f0d      	ldr	r7, [pc, #52]	; (800eba8 <PDM_Filter_Init+0x10c>)
 800eb72:	f501 6680 	add.w	r6, r1, #1024	; 0x400
 800eb76:	684a      	ldr	r2, [r1, #4]
 800eb78:	ea0e 5302 	and.w	r3, lr, r2, lsl #20
 800eb7c:	ea02 0007 	and.w	r0, r2, r7
 800eb80:	4303      	orrs	r3, r0
 800eb82:	f3c2 5209 	ubfx	r2, r2, #20, #10
 800eb86:	4413      	add	r3, r2
 800eb88:	f841 3f04 	str.w	r3, [r1, #4]!
 800eb8c:	428e      	cmp	r6, r1
 800eb8e:	d1f2      	bne.n	800eb76 <PDM_Filter_Init+0xda>
 800eb90:	2300      	movs	r3, #0
 800eb92:	702b      	strb	r3, [r5, #0]
 800eb94:	e7c1      	b.n	800eb1a <PDM_Filter_Init+0x7e>
 800eb96:	bf00      	nop
 800eb98:	b5e8b5cd 	.word	0xb5e8b5cd
 800eb9c:	f407a5c2 	.word	0xf407a5c2
 800eba0:	20000604 	.word	0x20000604
 800eba4:	1ffffffc 	.word	0x1ffffffc
 800eba8:	000ffc00 	.word	0x000ffc00
 800ebac:	3ff00000 	.word	0x3ff00000

0800ebb0 <PDM_Filter_setConfig>:
 800ebb0:	4b66      	ldr	r3, [pc, #408]	; (800ed4c <PDM_Filter_setConfig+0x19c>)
 800ebb2:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800ebb4:	429a      	cmp	r2, r3
 800ebb6:	d001      	beq.n	800ebbc <PDM_Filter_setConfig+0xc>
 800ebb8:	2004      	movs	r0, #4
 800ebba:	4770      	bx	lr
 800ebbc:	b530      	push	{r4, r5, lr}
 800ebbe:	880a      	ldrh	r2, [r1, #0]
 800ebc0:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800ebc2:	ed2d 8b04 	vpush	{d8-d9}
 800ebc6:	4604      	mov	r4, r0
 800ebc8:	460d      	mov	r5, r1
 800ebca:	1e51      	subs	r1, r2, #1
 800ebcc:	f423 7080 	bic.w	r0, r3, #256	; 0x100
 800ebd0:	2906      	cmp	r1, #6
 800ebd2:	b083      	sub	sp, #12
 800ebd4:	6420      	str	r0, [r4, #64]	; 0x40
 800ebd6:	d91a      	bls.n	800ec0e <PDM_Filter_setConfig+0x5e>
 800ebd8:	2008      	movs	r0, #8
 800ebda:	f9b4 1038 	ldrsh.w	r1, [r4, #56]	; 0x38
 800ebde:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
 800ebe2:	4299      	cmp	r1, r3
 800ebe4:	d07e      	beq.n	800ece4 <PDM_Filter_setConfig+0x134>
 800ebe6:	f113 0f0c 	cmn.w	r3, #12
 800ebea:	da2a      	bge.n	800ec42 <PDM_Filter_setConfig+0x92>
 800ebec:	f64f 73f4 	movw	r3, #65524	; 0xfff4
 800ebf0:	3040      	adds	r0, #64	; 0x40
 800ebf2:	80ab      	strh	r3, [r5, #4]
 800ebf4:	8622      	strh	r2, [r4, #48]	; 0x30
 800ebf6:	886b      	ldrh	r3, [r5, #2]
 800ebf8:	8663      	strh	r3, [r4, #50]	; 0x32
 800ebfa:	b920      	cbnz	r0, 800ec06 <PDM_Filter_setConfig+0x56>
 800ebfc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ebfe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ec02:	6423      	str	r3, [r4, #64]	; 0x40
 800ec04:	2000      	movs	r0, #0
 800ec06:	b003      	add	sp, #12
 800ec08:	ecbd 8b04 	vpop	{d8-d9}
 800ec0c:	bd30      	pop	{r4, r5, pc}
 800ec0e:	8e21      	ldrh	r1, [r4, #48]	; 0x30
 800ec10:	4291      	cmp	r1, r2
 800ec12:	d06c      	beq.n	800ecee <PDM_Filter_setConfig+0x13e>
 800ec14:	f423 7387 	bic.w	r3, r3, #270	; 0x10e
 800ec18:	f023 0301 	bic.w	r3, r3, #1
 800ec1c:	4313      	orrs	r3, r2
 800ec1e:	f003 0170 	and.w	r1, r3, #112	; 0x70
 800ec22:	6423      	str	r3, [r4, #64]	; 0x40
 800ec24:	2970      	cmp	r1, #112	; 0x70
 800ec26:	f003 030f 	and.w	r3, r3, #15
 800ec2a:	f103 33ff 	add.w	r3, r3, #4294967295
 800ec2e:	d066      	beq.n	800ecfe <PDM_Filter_setConfig+0x14e>
 800ec30:	2b06      	cmp	r3, #6
 800ec32:	f200 8089 	bhi.w	800ed48 <PDM_Filter_setConfig+0x198>
 800ec36:	e8df f003 	tbb	[pc, r3]
 800ec3a:	4f52      	.short	0x4f52
 800ec3c:	3d43494c 	.word	0x3d43494c
 800ec40:	46          	.byte	0x46
 800ec41:	00          	.byte	0x00
 800ec42:	2b33      	cmp	r3, #51	; 0x33
 800ec44:	dc32      	bgt.n	800ecac <PDM_Filter_setConfig+0xfc>
 800ec46:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800ec48:	f002 020f 	and.w	r2, r2, #15
 800ec4c:	3a01      	subs	r2, #1
 800ec4e:	2a06      	cmp	r2, #6
 800ec50:	d872      	bhi.n	800ed38 <PDM_Filter_setConfig+0x188>
 800ec52:	493f      	ldr	r1, [pc, #252]	; (800ed50 <PDM_Filter_setConfig+0x1a0>)
 800ec54:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 800ec58:	ed92 9a00 	vldr	s18, [r2]
 800ec5c:	ed92 8a07 	vldr	s16, [r2, #28]
 800ec60:	9001      	str	r0, [sp, #4]
 800ec62:	ee07 3a90 	vmov	s15, r3
 800ec66:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ec6a:	eef3 0a04 	vmov.f32	s1, #52	; 0x41a00000  20.0
 800ec6e:	eec7 0aa0 	vdiv.f32	s1, s15, s1
 800ec72:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 800ec76:	f000 fa6f 	bl	800f158 <powf>
 800ec7a:	eddf 0a36 	vldr	s1, [pc, #216]	; 800ed54 <PDM_Filter_setConfig+0x1a4>
 800ec7e:	eef0 8a40 	vmov.f32	s17, s0
 800ec82:	ee70 0ac9 	vsub.f32	s1, s1, s18
 800ec86:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 800ec8a:	f000 fa65 	bl	800f158 <powf>
 800ec8e:	ee28 8a28 	vmul.f32	s16, s16, s17
 800ec92:	ee28 0a00 	vmul.f32	s0, s16, s0
 800ec96:	f000 f9df 	bl	800f058 <roundf>
 800ec9a:	eebc 0ac0 	vcvt.u32.f32	s0, s0
 800ec9e:	88ab      	ldrh	r3, [r5, #4]
 800eca0:	882a      	ldrh	r2, [r5, #0]
 800eca2:	9801      	ldr	r0, [sp, #4]
 800eca4:	ed84 0a0f 	vstr	s0, [r4, #60]	; 0x3c
 800eca8:	8723      	strh	r3, [r4, #56]	; 0x38
 800ecaa:	e7a3      	b.n	800ebf4 <PDM_Filter_setConfig+0x44>
 800ecac:	2333      	movs	r3, #51	; 0x33
 800ecae:	3040      	adds	r0, #64	; 0x40
 800ecb0:	80ab      	strh	r3, [r5, #4]
 800ecb2:	e79f      	b.n	800ebf4 <PDM_Filter_setConfig+0x44>
 800ecb4:	4b28      	ldr	r3, [pc, #160]	; (800ed58 <PDM_Filter_setConfig+0x1a8>)
 800ecb6:	64a3      	str	r3, [r4, #72]	; 0x48
 800ecb8:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
 800ecbc:	2000      	movs	r0, #0
 800ecbe:	e792      	b.n	800ebe6 <PDM_Filter_setConfig+0x36>
 800ecc0:	4b26      	ldr	r3, [pc, #152]	; (800ed5c <PDM_Filter_setConfig+0x1ac>)
 800ecc2:	64a3      	str	r3, [r4, #72]	; 0x48
 800ecc4:	e7f8      	b.n	800ecb8 <PDM_Filter_setConfig+0x108>
 800ecc6:	4b26      	ldr	r3, [pc, #152]	; (800ed60 <PDM_Filter_setConfig+0x1b0>)
 800ecc8:	64a3      	str	r3, [r4, #72]	; 0x48
 800ecca:	e7f5      	b.n	800ecb8 <PDM_Filter_setConfig+0x108>
 800eccc:	4b25      	ldr	r3, [pc, #148]	; (800ed64 <PDM_Filter_setConfig+0x1b4>)
 800ecce:	64a3      	str	r3, [r4, #72]	; 0x48
 800ecd0:	e7f2      	b.n	800ecb8 <PDM_Filter_setConfig+0x108>
 800ecd2:	4b25      	ldr	r3, [pc, #148]	; (800ed68 <PDM_Filter_setConfig+0x1b8>)
 800ecd4:	64a3      	str	r3, [r4, #72]	; 0x48
 800ecd6:	e7ef      	b.n	800ecb8 <PDM_Filter_setConfig+0x108>
 800ecd8:	4b24      	ldr	r3, [pc, #144]	; (800ed6c <PDM_Filter_setConfig+0x1bc>)
 800ecda:	64a3      	str	r3, [r4, #72]	; 0x48
 800ecdc:	e7ec      	b.n	800ecb8 <PDM_Filter_setConfig+0x108>
 800ecde:	4b24      	ldr	r3, [pc, #144]	; (800ed70 <PDM_Filter_setConfig+0x1c0>)
 800ece0:	64a3      	str	r3, [r4, #72]	; 0x48
 800ece2:	e7e9      	b.n	800ecb8 <PDM_Filter_setConfig+0x108>
 800ece4:	8e21      	ldrh	r1, [r4, #48]	; 0x30
 800ece6:	4291      	cmp	r1, r2
 800ece8:	f47f af7d 	bne.w	800ebe6 <PDM_Filter_setConfig+0x36>
 800ecec:	e783      	b.n	800ebf6 <PDM_Filter_setConfig+0x46>
 800ecee:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
 800ecf2:	f9b4 1038 	ldrsh.w	r1, [r4, #56]	; 0x38
 800ecf6:	4299      	cmp	r1, r3
 800ecf8:	d023      	beq.n	800ed42 <PDM_Filter_setConfig+0x192>
 800ecfa:	2000      	movs	r0, #0
 800ecfc:	e773      	b.n	800ebe6 <PDM_Filter_setConfig+0x36>
 800ecfe:	2b06      	cmp	r3, #6
 800ed00:	d822      	bhi.n	800ed48 <PDM_Filter_setConfig+0x198>
 800ed02:	e8df f003 	tbb	[pc, r3]
 800ed06:	1316      	.short	0x1316
 800ed08:	070a0d10 	.word	0x070a0d10
 800ed0c:	04          	.byte	0x04
 800ed0d:	00          	.byte	0x00
 800ed0e:	4b19      	ldr	r3, [pc, #100]	; (800ed74 <PDM_Filter_setConfig+0x1c4>)
 800ed10:	64a3      	str	r3, [r4, #72]	; 0x48
 800ed12:	e7d1      	b.n	800ecb8 <PDM_Filter_setConfig+0x108>
 800ed14:	4b18      	ldr	r3, [pc, #96]	; (800ed78 <PDM_Filter_setConfig+0x1c8>)
 800ed16:	64a3      	str	r3, [r4, #72]	; 0x48
 800ed18:	e7ce      	b.n	800ecb8 <PDM_Filter_setConfig+0x108>
 800ed1a:	4b18      	ldr	r3, [pc, #96]	; (800ed7c <PDM_Filter_setConfig+0x1cc>)
 800ed1c:	64a3      	str	r3, [r4, #72]	; 0x48
 800ed1e:	e7cb      	b.n	800ecb8 <PDM_Filter_setConfig+0x108>
 800ed20:	4b17      	ldr	r3, [pc, #92]	; (800ed80 <PDM_Filter_setConfig+0x1d0>)
 800ed22:	64a3      	str	r3, [r4, #72]	; 0x48
 800ed24:	e7c8      	b.n	800ecb8 <PDM_Filter_setConfig+0x108>
 800ed26:	4b17      	ldr	r3, [pc, #92]	; (800ed84 <PDM_Filter_setConfig+0x1d4>)
 800ed28:	64a3      	str	r3, [r4, #72]	; 0x48
 800ed2a:	e7c5      	b.n	800ecb8 <PDM_Filter_setConfig+0x108>
 800ed2c:	4b16      	ldr	r3, [pc, #88]	; (800ed88 <PDM_Filter_setConfig+0x1d8>)
 800ed2e:	64a3      	str	r3, [r4, #72]	; 0x48
 800ed30:	e7c2      	b.n	800ecb8 <PDM_Filter_setConfig+0x108>
 800ed32:	4b16      	ldr	r3, [pc, #88]	; (800ed8c <PDM_Filter_setConfig+0x1dc>)
 800ed34:	64a3      	str	r3, [r4, #72]	; 0x48
 800ed36:	e7bf      	b.n	800ecb8 <PDM_Filter_setConfig+0x108>
 800ed38:	ed9f 8a15 	vldr	s16, [pc, #84]	; 800ed90 <PDM_Filter_setConfig+0x1e0>
 800ed3c:	eeb0 9a48 	vmov.f32	s18, s16
 800ed40:	e78e      	b.n	800ec60 <PDM_Filter_setConfig+0xb0>
 800ed42:	886b      	ldrh	r3, [r5, #2]
 800ed44:	8663      	strh	r3, [r4, #50]	; 0x32
 800ed46:	e759      	b.n	800ebfc <PDM_Filter_setConfig+0x4c>
 800ed48:	2000      	movs	r0, #0
 800ed4a:	e746      	b.n	800ebda <PDM_Filter_setConfig+0x2a>
 800ed4c:	b5e8b5cd 	.word	0xb5e8b5cd
 800ed50:	0800ffec 	.word	0x0800ffec
 800ed54:	42000000 	.word	0x42000000
 800ed58:	0800d11d 	.word	0x0800d11d
 800ed5c:	0800cffd 	.word	0x0800cffd
 800ed60:	0800d2ad 	.word	0x0800d2ad
 800ed64:	0800daf1 	.word	0x0800daf1
 800ed68:	0800d851 	.word	0x0800d851
 800ed6c:	0800d631 	.word	0x0800d631
 800ed70:	0800d445 	.word	0x0800d445
 800ed74:	0800e0fd 	.word	0x0800e0fd
 800ed78:	0800dfc5 	.word	0x0800dfc5
 800ed7c:	0800dee1 	.word	0x0800dee1
 800ed80:	0800e779 	.word	0x0800e779
 800ed84:	0800e565 	.word	0x0800e565
 800ed88:	0800e3ad 	.word	0x0800e3ad
 800ed8c:	0800e241 	.word	0x0800e241
 800ed90:	00000000 	.word	0x00000000

0800ed94 <PDM_Filter>:
 800ed94:	b410      	push	{r4}
 800ed96:	4b0c      	ldr	r3, [pc, #48]	; (800edc8 <PDM_Filter+0x34>)
 800ed98:	6c54      	ldr	r4, [r2, #68]	; 0x44
 800ed9a:	429c      	cmp	r4, r3
 800ed9c:	d003      	beq.n	800eda6 <PDM_Filter+0x12>
 800ed9e:	2004      	movs	r0, #4
 800eda0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800eda4:	4770      	bx	lr
 800eda6:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800eda8:	05dc      	lsls	r4, r3, #23
 800edaa:	d407      	bmi.n	800edbc <PDM_Filter+0x28>
 800edac:	f013 0f80 	tst.w	r3, #128	; 0x80
 800edb0:	bf14      	ite	ne
 800edb2:	2020      	movne	r0, #32
 800edb4:	2030      	moveq	r0, #48	; 0x30
 800edb6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800edba:	4770      	bx	lr
 800edbc:	6c93      	ldr	r3, [r2, #72]	; 0x48
 800edbe:	f85d 4b04 	ldr.w	r4, [sp], #4
 800edc2:	320c      	adds	r2, #12
 800edc4:	4718      	bx	r3
 800edc6:	bf00      	nop
 800edc8:	b5e8b5cd 	.word	0xb5e8b5cd

0800edcc <CRC_Lock>:
 800edcc:	4a17      	ldr	r2, [pc, #92]	; (800ee2c <CRC_Lock+0x60>)
 800edce:	6813      	ldr	r3, [r2, #0]
 800edd0:	b410      	push	{r4}
 800edd2:	f023 0301 	bic.w	r3, r3, #1
 800edd6:	4c16      	ldr	r4, [pc, #88]	; (800ee30 <CRC_Lock+0x64>)
 800edd8:	6013      	str	r3, [r2, #0]
 800edda:	6823      	ldr	r3, [r4, #0]
 800eddc:	b933      	cbnz	r3, 800edec <CRC_Lock+0x20>
 800edde:	4b15      	ldr	r3, [pc, #84]	; (800ee34 <CRC_Lock+0x68>)
 800ede0:	681b      	ldr	r3, [r3, #0]
 800ede2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800ede6:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 800edea:	d00f      	beq.n	800ee0c <CRC_Lock+0x40>
 800edec:	4a12      	ldr	r2, [pc, #72]	; (800ee38 <CRC_Lock+0x6c>)
 800edee:	2301      	movs	r3, #1
 800edf0:	6013      	str	r3, [r2, #0]
 800edf2:	6813      	ldr	r3, [r2, #0]
 800edf4:	2b00      	cmp	r3, #0
 800edf6:	d1fc      	bne.n	800edf2 <CRC_Lock+0x26>
 800edf8:	4b10      	ldr	r3, [pc, #64]	; (800ee3c <CRC_Lock+0x70>)
 800edfa:	f85d 4b04 	ldr.w	r4, [sp], #4
 800edfe:	6018      	str	r0, [r3, #0]
 800ee00:	6818      	ldr	r0, [r3, #0]
 800ee02:	1a08      	subs	r0, r1, r0
 800ee04:	fab0 f080 	clz	r0, r0
 800ee08:	0940      	lsrs	r0, r0, #5
 800ee0a:	4770      	bx	lr
 800ee0c:	4a0c      	ldr	r2, [pc, #48]	; (800ee40 <CRC_Lock+0x74>)
 800ee0e:	2301      	movs	r3, #1
 800ee10:	6013      	str	r3, [r2, #0]
 800ee12:	6813      	ldr	r3, [r2, #0]
 800ee14:	2b00      	cmp	r3, #0
 800ee16:	d1fc      	bne.n	800ee12 <CRC_Lock+0x46>
 800ee18:	4b0a      	ldr	r3, [pc, #40]	; (800ee44 <CRC_Lock+0x78>)
 800ee1a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ee1e:	6018      	str	r0, [r3, #0]
 800ee20:	6818      	ldr	r0, [r3, #0]
 800ee22:	1a40      	subs	r0, r0, r1
 800ee24:	fab0 f080 	clz	r0, r0
 800ee28:	0940      	lsrs	r0, r0, #5
 800ee2a:	4770      	bx	lr
 800ee2c:	e0002000 	.word	0xe0002000
 800ee30:	e0042000 	.word	0xe0042000
 800ee34:	5c001000 	.word	0x5c001000
 800ee38:	40023008 	.word	0x40023008
 800ee3c:	40023000 	.word	0x40023000
 800ee40:	58024c08 	.word	0x58024c08
 800ee44:	58024c00 	.word	0x58024c00

0800ee48 <__errno>:
 800ee48:	4b01      	ldr	r3, [pc, #4]	; (800ee50 <__errno+0x8>)
 800ee4a:	6818      	ldr	r0, [r3, #0]
 800ee4c:	4770      	bx	lr
 800ee4e:	bf00      	nop
 800ee50:	20000580 	.word	0x20000580

0800ee54 <__libc_init_array>:
 800ee54:	b570      	push	{r4, r5, r6, lr}
 800ee56:	4e0d      	ldr	r6, [pc, #52]	; (800ee8c <__libc_init_array+0x38>)
 800ee58:	4c0d      	ldr	r4, [pc, #52]	; (800ee90 <__libc_init_array+0x3c>)
 800ee5a:	1ba4      	subs	r4, r4, r6
 800ee5c:	10a4      	asrs	r4, r4, #2
 800ee5e:	2500      	movs	r5, #0
 800ee60:	42a5      	cmp	r5, r4
 800ee62:	d109      	bne.n	800ee78 <__libc_init_array+0x24>
 800ee64:	4e0b      	ldr	r6, [pc, #44]	; (800ee94 <__libc_init_array+0x40>)
 800ee66:	4c0c      	ldr	r4, [pc, #48]	; (800ee98 <__libc_init_array+0x44>)
 800ee68:	f000 ff2c 	bl	800fcc4 <_init>
 800ee6c:	1ba4      	subs	r4, r4, r6
 800ee6e:	10a4      	asrs	r4, r4, #2
 800ee70:	2500      	movs	r5, #0
 800ee72:	42a5      	cmp	r5, r4
 800ee74:	d105      	bne.n	800ee82 <__libc_init_array+0x2e>
 800ee76:	bd70      	pop	{r4, r5, r6, pc}
 800ee78:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800ee7c:	4798      	blx	r3
 800ee7e:	3501      	adds	r5, #1
 800ee80:	e7ee      	b.n	800ee60 <__libc_init_array+0xc>
 800ee82:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800ee86:	4798      	blx	r3
 800ee88:	3501      	adds	r5, #1
 800ee8a:	e7f2      	b.n	800ee72 <__libc_init_array+0x1e>
 800ee8c:	080100e8 	.word	0x080100e8
 800ee90:	080100e8 	.word	0x080100e8
 800ee94:	080100e8 	.word	0x080100e8
 800ee98:	080100ec 	.word	0x080100ec

0800ee9c <malloc>:
 800ee9c:	4b02      	ldr	r3, [pc, #8]	; (800eea8 <malloc+0xc>)
 800ee9e:	4601      	mov	r1, r0
 800eea0:	6818      	ldr	r0, [r3, #0]
 800eea2:	f000 b86d 	b.w	800ef80 <_malloc_r>
 800eea6:	bf00      	nop
 800eea8:	20000580 	.word	0x20000580

0800eeac <free>:
 800eeac:	4b02      	ldr	r3, [pc, #8]	; (800eeb8 <free+0xc>)
 800eeae:	4601      	mov	r1, r0
 800eeb0:	6818      	ldr	r0, [r3, #0]
 800eeb2:	f000 b817 	b.w	800eee4 <_free_r>
 800eeb6:	bf00      	nop
 800eeb8:	20000580 	.word	0x20000580

0800eebc <memcpy>:
 800eebc:	b510      	push	{r4, lr}
 800eebe:	1e43      	subs	r3, r0, #1
 800eec0:	440a      	add	r2, r1
 800eec2:	4291      	cmp	r1, r2
 800eec4:	d100      	bne.n	800eec8 <memcpy+0xc>
 800eec6:	bd10      	pop	{r4, pc}
 800eec8:	f811 4b01 	ldrb.w	r4, [r1], #1
 800eecc:	f803 4f01 	strb.w	r4, [r3, #1]!
 800eed0:	e7f7      	b.n	800eec2 <memcpy+0x6>

0800eed2 <memset>:
 800eed2:	4402      	add	r2, r0
 800eed4:	4603      	mov	r3, r0
 800eed6:	4293      	cmp	r3, r2
 800eed8:	d100      	bne.n	800eedc <memset+0xa>
 800eeda:	4770      	bx	lr
 800eedc:	f803 1b01 	strb.w	r1, [r3], #1
 800eee0:	e7f9      	b.n	800eed6 <memset+0x4>
	...

0800eee4 <_free_r>:
 800eee4:	b538      	push	{r3, r4, r5, lr}
 800eee6:	4605      	mov	r5, r0
 800eee8:	2900      	cmp	r1, #0
 800eeea:	d045      	beq.n	800ef78 <_free_r+0x94>
 800eeec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800eef0:	1f0c      	subs	r4, r1, #4
 800eef2:	2b00      	cmp	r3, #0
 800eef4:	bfb8      	it	lt
 800eef6:	18e4      	addlt	r4, r4, r3
 800eef8:	f000 f8ac 	bl	800f054 <__malloc_lock>
 800eefc:	4a1f      	ldr	r2, [pc, #124]	; (800ef7c <_free_r+0x98>)
 800eefe:	6813      	ldr	r3, [r2, #0]
 800ef00:	4610      	mov	r0, r2
 800ef02:	b933      	cbnz	r3, 800ef12 <_free_r+0x2e>
 800ef04:	6063      	str	r3, [r4, #4]
 800ef06:	6014      	str	r4, [r2, #0]
 800ef08:	4628      	mov	r0, r5
 800ef0a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ef0e:	f000 b8a2 	b.w	800f056 <__malloc_unlock>
 800ef12:	42a3      	cmp	r3, r4
 800ef14:	d90c      	bls.n	800ef30 <_free_r+0x4c>
 800ef16:	6821      	ldr	r1, [r4, #0]
 800ef18:	1862      	adds	r2, r4, r1
 800ef1a:	4293      	cmp	r3, r2
 800ef1c:	bf04      	itt	eq
 800ef1e:	681a      	ldreq	r2, [r3, #0]
 800ef20:	685b      	ldreq	r3, [r3, #4]
 800ef22:	6063      	str	r3, [r4, #4]
 800ef24:	bf04      	itt	eq
 800ef26:	1852      	addeq	r2, r2, r1
 800ef28:	6022      	streq	r2, [r4, #0]
 800ef2a:	6004      	str	r4, [r0, #0]
 800ef2c:	e7ec      	b.n	800ef08 <_free_r+0x24>
 800ef2e:	4613      	mov	r3, r2
 800ef30:	685a      	ldr	r2, [r3, #4]
 800ef32:	b10a      	cbz	r2, 800ef38 <_free_r+0x54>
 800ef34:	42a2      	cmp	r2, r4
 800ef36:	d9fa      	bls.n	800ef2e <_free_r+0x4a>
 800ef38:	6819      	ldr	r1, [r3, #0]
 800ef3a:	1858      	adds	r0, r3, r1
 800ef3c:	42a0      	cmp	r0, r4
 800ef3e:	d10b      	bne.n	800ef58 <_free_r+0x74>
 800ef40:	6820      	ldr	r0, [r4, #0]
 800ef42:	4401      	add	r1, r0
 800ef44:	1858      	adds	r0, r3, r1
 800ef46:	4282      	cmp	r2, r0
 800ef48:	6019      	str	r1, [r3, #0]
 800ef4a:	d1dd      	bne.n	800ef08 <_free_r+0x24>
 800ef4c:	6810      	ldr	r0, [r2, #0]
 800ef4e:	6852      	ldr	r2, [r2, #4]
 800ef50:	605a      	str	r2, [r3, #4]
 800ef52:	4401      	add	r1, r0
 800ef54:	6019      	str	r1, [r3, #0]
 800ef56:	e7d7      	b.n	800ef08 <_free_r+0x24>
 800ef58:	d902      	bls.n	800ef60 <_free_r+0x7c>
 800ef5a:	230c      	movs	r3, #12
 800ef5c:	602b      	str	r3, [r5, #0]
 800ef5e:	e7d3      	b.n	800ef08 <_free_r+0x24>
 800ef60:	6820      	ldr	r0, [r4, #0]
 800ef62:	1821      	adds	r1, r4, r0
 800ef64:	428a      	cmp	r2, r1
 800ef66:	bf04      	itt	eq
 800ef68:	6811      	ldreq	r1, [r2, #0]
 800ef6a:	6852      	ldreq	r2, [r2, #4]
 800ef6c:	6062      	str	r2, [r4, #4]
 800ef6e:	bf04      	itt	eq
 800ef70:	1809      	addeq	r1, r1, r0
 800ef72:	6021      	streq	r1, [r4, #0]
 800ef74:	605c      	str	r4, [r3, #4]
 800ef76:	e7c7      	b.n	800ef08 <_free_r+0x24>
 800ef78:	bd38      	pop	{r3, r4, r5, pc}
 800ef7a:	bf00      	nop
 800ef7c:	2000066c 	.word	0x2000066c

0800ef80 <_malloc_r>:
 800ef80:	b570      	push	{r4, r5, r6, lr}
 800ef82:	1ccd      	adds	r5, r1, #3
 800ef84:	f025 0503 	bic.w	r5, r5, #3
 800ef88:	3508      	adds	r5, #8
 800ef8a:	2d0c      	cmp	r5, #12
 800ef8c:	bf38      	it	cc
 800ef8e:	250c      	movcc	r5, #12
 800ef90:	2d00      	cmp	r5, #0
 800ef92:	4606      	mov	r6, r0
 800ef94:	db01      	blt.n	800ef9a <_malloc_r+0x1a>
 800ef96:	42a9      	cmp	r1, r5
 800ef98:	d903      	bls.n	800efa2 <_malloc_r+0x22>
 800ef9a:	230c      	movs	r3, #12
 800ef9c:	6033      	str	r3, [r6, #0]
 800ef9e:	2000      	movs	r0, #0
 800efa0:	bd70      	pop	{r4, r5, r6, pc}
 800efa2:	f000 f857 	bl	800f054 <__malloc_lock>
 800efa6:	4a21      	ldr	r2, [pc, #132]	; (800f02c <_malloc_r+0xac>)
 800efa8:	6814      	ldr	r4, [r2, #0]
 800efaa:	4621      	mov	r1, r4
 800efac:	b991      	cbnz	r1, 800efd4 <_malloc_r+0x54>
 800efae:	4c20      	ldr	r4, [pc, #128]	; (800f030 <_malloc_r+0xb0>)
 800efb0:	6823      	ldr	r3, [r4, #0]
 800efb2:	b91b      	cbnz	r3, 800efbc <_malloc_r+0x3c>
 800efb4:	4630      	mov	r0, r6
 800efb6:	f000 f83d 	bl	800f034 <_sbrk_r>
 800efba:	6020      	str	r0, [r4, #0]
 800efbc:	4629      	mov	r1, r5
 800efbe:	4630      	mov	r0, r6
 800efc0:	f000 f838 	bl	800f034 <_sbrk_r>
 800efc4:	1c43      	adds	r3, r0, #1
 800efc6:	d124      	bne.n	800f012 <_malloc_r+0x92>
 800efc8:	230c      	movs	r3, #12
 800efca:	6033      	str	r3, [r6, #0]
 800efcc:	4630      	mov	r0, r6
 800efce:	f000 f842 	bl	800f056 <__malloc_unlock>
 800efd2:	e7e4      	b.n	800ef9e <_malloc_r+0x1e>
 800efd4:	680b      	ldr	r3, [r1, #0]
 800efd6:	1b5b      	subs	r3, r3, r5
 800efd8:	d418      	bmi.n	800f00c <_malloc_r+0x8c>
 800efda:	2b0b      	cmp	r3, #11
 800efdc:	d90f      	bls.n	800effe <_malloc_r+0x7e>
 800efde:	600b      	str	r3, [r1, #0]
 800efe0:	50cd      	str	r5, [r1, r3]
 800efe2:	18cc      	adds	r4, r1, r3
 800efe4:	4630      	mov	r0, r6
 800efe6:	f000 f836 	bl	800f056 <__malloc_unlock>
 800efea:	f104 000b 	add.w	r0, r4, #11
 800efee:	1d23      	adds	r3, r4, #4
 800eff0:	f020 0007 	bic.w	r0, r0, #7
 800eff4:	1ac3      	subs	r3, r0, r3
 800eff6:	d0d3      	beq.n	800efa0 <_malloc_r+0x20>
 800eff8:	425a      	negs	r2, r3
 800effa:	50e2      	str	r2, [r4, r3]
 800effc:	e7d0      	b.n	800efa0 <_malloc_r+0x20>
 800effe:	428c      	cmp	r4, r1
 800f000:	684b      	ldr	r3, [r1, #4]
 800f002:	bf16      	itet	ne
 800f004:	6063      	strne	r3, [r4, #4]
 800f006:	6013      	streq	r3, [r2, #0]
 800f008:	460c      	movne	r4, r1
 800f00a:	e7eb      	b.n	800efe4 <_malloc_r+0x64>
 800f00c:	460c      	mov	r4, r1
 800f00e:	6849      	ldr	r1, [r1, #4]
 800f010:	e7cc      	b.n	800efac <_malloc_r+0x2c>
 800f012:	1cc4      	adds	r4, r0, #3
 800f014:	f024 0403 	bic.w	r4, r4, #3
 800f018:	42a0      	cmp	r0, r4
 800f01a:	d005      	beq.n	800f028 <_malloc_r+0xa8>
 800f01c:	1a21      	subs	r1, r4, r0
 800f01e:	4630      	mov	r0, r6
 800f020:	f000 f808 	bl	800f034 <_sbrk_r>
 800f024:	3001      	adds	r0, #1
 800f026:	d0cf      	beq.n	800efc8 <_malloc_r+0x48>
 800f028:	6025      	str	r5, [r4, #0]
 800f02a:	e7db      	b.n	800efe4 <_malloc_r+0x64>
 800f02c:	2000066c 	.word	0x2000066c
 800f030:	20000670 	.word	0x20000670

0800f034 <_sbrk_r>:
 800f034:	b538      	push	{r3, r4, r5, lr}
 800f036:	4c06      	ldr	r4, [pc, #24]	; (800f050 <_sbrk_r+0x1c>)
 800f038:	2300      	movs	r3, #0
 800f03a:	4605      	mov	r5, r0
 800f03c:	4608      	mov	r0, r1
 800f03e:	6023      	str	r3, [r4, #0]
 800f040:	f7f3 fb58 	bl	80026f4 <_sbrk>
 800f044:	1c43      	adds	r3, r0, #1
 800f046:	d102      	bne.n	800f04e <_sbrk_r+0x1a>
 800f048:	6823      	ldr	r3, [r4, #0]
 800f04a:	b103      	cbz	r3, 800f04e <_sbrk_r+0x1a>
 800f04c:	602b      	str	r3, [r5, #0]
 800f04e:	bd38      	pop	{r3, r4, r5, pc}
 800f050:	20004ca8 	.word	0x20004ca8

0800f054 <__malloc_lock>:
 800f054:	4770      	bx	lr

0800f056 <__malloc_unlock>:
 800f056:	4770      	bx	lr

0800f058 <roundf>:
 800f058:	ee10 0a10 	vmov	r0, s0
 800f05c:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 800f060:	f1a3 027f 	sub.w	r2, r3, #127	; 0x7f
 800f064:	2a16      	cmp	r2, #22
 800f066:	dc15      	bgt.n	800f094 <roundf+0x3c>
 800f068:	2a00      	cmp	r2, #0
 800f06a:	da08      	bge.n	800f07e <roundf+0x26>
 800f06c:	3201      	adds	r2, #1
 800f06e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800f072:	d101      	bne.n	800f078 <roundf+0x20>
 800f074:	f043 537e 	orr.w	r3, r3, #1065353216	; 0x3f800000
 800f078:	ee00 3a10 	vmov	s0, r3
 800f07c:	4770      	bx	lr
 800f07e:	4908      	ldr	r1, [pc, #32]	; (800f0a0 <roundf+0x48>)
 800f080:	4111      	asrs	r1, r2
 800f082:	4208      	tst	r0, r1
 800f084:	d0fa      	beq.n	800f07c <roundf+0x24>
 800f086:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800f08a:	4113      	asrs	r3, r2
 800f08c:	4403      	add	r3, r0
 800f08e:	ea23 0301 	bic.w	r3, r3, r1
 800f092:	e7f1      	b.n	800f078 <roundf+0x20>
 800f094:	2a80      	cmp	r2, #128	; 0x80
 800f096:	d1f1      	bne.n	800f07c <roundf+0x24>
 800f098:	ee30 0a00 	vadd.f32	s0, s0, s0
 800f09c:	4770      	bx	lr
 800f09e:	bf00      	nop
 800f0a0:	007fffff 	.word	0x007fffff

0800f0a4 <sqrt>:
 800f0a4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f0a8:	ed2d 8b02 	vpush	{d8}
 800f0ac:	b08b      	sub	sp, #44	; 0x2c
 800f0ae:	ec55 4b10 	vmov	r4, r5, d0
 800f0b2:	f000 f9b5 	bl	800f420 <__ieee754_sqrt>
 800f0b6:	4b26      	ldr	r3, [pc, #152]	; (800f150 <sqrt+0xac>)
 800f0b8:	eeb0 8a40 	vmov.f32	s16, s0
 800f0bc:	eef0 8a60 	vmov.f32	s17, s1
 800f0c0:	f993 6000 	ldrsb.w	r6, [r3]
 800f0c4:	1c73      	adds	r3, r6, #1
 800f0c6:	d02a      	beq.n	800f11e <sqrt+0x7a>
 800f0c8:	4622      	mov	r2, r4
 800f0ca:	462b      	mov	r3, r5
 800f0cc:	4620      	mov	r0, r4
 800f0ce:	4629      	mov	r1, r5
 800f0d0:	f7f1 fcd8 	bl	8000a84 <__aeabi_dcmpun>
 800f0d4:	4607      	mov	r7, r0
 800f0d6:	bb10      	cbnz	r0, 800f11e <sqrt+0x7a>
 800f0d8:	f04f 0800 	mov.w	r8, #0
 800f0dc:	f04f 0900 	mov.w	r9, #0
 800f0e0:	4642      	mov	r2, r8
 800f0e2:	464b      	mov	r3, r9
 800f0e4:	4620      	mov	r0, r4
 800f0e6:	4629      	mov	r1, r5
 800f0e8:	f7f1 fca4 	bl	8000a34 <__aeabi_dcmplt>
 800f0ec:	b1b8      	cbz	r0, 800f11e <sqrt+0x7a>
 800f0ee:	2301      	movs	r3, #1
 800f0f0:	9300      	str	r3, [sp, #0]
 800f0f2:	4b18      	ldr	r3, [pc, #96]	; (800f154 <sqrt+0xb0>)
 800f0f4:	9301      	str	r3, [sp, #4]
 800f0f6:	9708      	str	r7, [sp, #32]
 800f0f8:	e9cd 4504 	strd	r4, r5, [sp, #16]
 800f0fc:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800f100:	b9b6      	cbnz	r6, 800f130 <sqrt+0x8c>
 800f102:	e9cd 8906 	strd	r8, r9, [sp, #24]
 800f106:	4668      	mov	r0, sp
 800f108:	f000 fcfd 	bl	800fb06 <matherr>
 800f10c:	b1d0      	cbz	r0, 800f144 <sqrt+0xa0>
 800f10e:	9b08      	ldr	r3, [sp, #32]
 800f110:	b11b      	cbz	r3, 800f11a <sqrt+0x76>
 800f112:	f7ff fe99 	bl	800ee48 <__errno>
 800f116:	9b08      	ldr	r3, [sp, #32]
 800f118:	6003      	str	r3, [r0, #0]
 800f11a:	ed9d 8b06 	vldr	d8, [sp, #24]
 800f11e:	eeb0 0a48 	vmov.f32	s0, s16
 800f122:	eef0 0a68 	vmov.f32	s1, s17
 800f126:	b00b      	add	sp, #44	; 0x2c
 800f128:	ecbd 8b02 	vpop	{d8}
 800f12c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f130:	4642      	mov	r2, r8
 800f132:	464b      	mov	r3, r9
 800f134:	4640      	mov	r0, r8
 800f136:	4649      	mov	r1, r9
 800f138:	f7f1 fb34 	bl	80007a4 <__aeabi_ddiv>
 800f13c:	2e02      	cmp	r6, #2
 800f13e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800f142:	d1e0      	bne.n	800f106 <sqrt+0x62>
 800f144:	f7ff fe80 	bl	800ee48 <__errno>
 800f148:	2321      	movs	r3, #33	; 0x21
 800f14a:	6003      	str	r3, [r0, #0]
 800f14c:	e7df      	b.n	800f10e <sqrt+0x6a>
 800f14e:	bf00      	nop
 800f150:	200005e4 	.word	0x200005e4
 800f154:	080100b4 	.word	0x080100b4

0800f158 <powf>:
 800f158:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
 800f15c:	ed2d 8b04 	vpush	{d8-d9}
 800f160:	4ca7      	ldr	r4, [pc, #668]	; (800f400 <powf+0x2a8>)
 800f162:	b08a      	sub	sp, #40	; 0x28
 800f164:	eef0 8a40 	vmov.f32	s17, s0
 800f168:	eeb0 8a60 	vmov.f32	s16, s1
 800f16c:	f000 fa08 	bl	800f580 <__ieee754_powf>
 800f170:	f994 5000 	ldrsb.w	r5, [r4]
 800f174:	1c6b      	adds	r3, r5, #1
 800f176:	eeb0 9a40 	vmov.f32	s18, s0
 800f17a:	4626      	mov	r6, r4
 800f17c:	d05f      	beq.n	800f23e <powf+0xe6>
 800f17e:	eeb4 8a48 	vcmp.f32	s16, s16
 800f182:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f186:	d65a      	bvs.n	800f23e <powf+0xe6>
 800f188:	eef4 8a68 	vcmp.f32	s17, s17
 800f18c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f190:	d721      	bvc.n	800f1d6 <powf+0x7e>
 800f192:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800f196:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f19a:	d150      	bne.n	800f23e <powf+0xe6>
 800f19c:	2301      	movs	r3, #1
 800f19e:	9300      	str	r3, [sp, #0]
 800f1a0:	4b98      	ldr	r3, [pc, #608]	; (800f404 <powf+0x2ac>)
 800f1a2:	9301      	str	r3, [sp, #4]
 800f1a4:	ee18 0a90 	vmov	r0, s17
 800f1a8:	2300      	movs	r3, #0
 800f1aa:	9308      	str	r3, [sp, #32]
 800f1ac:	f7f1 f978 	bl	80004a0 <__aeabi_f2d>
 800f1b0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f1b4:	ee18 0a10 	vmov	r0, s16
 800f1b8:	f7f1 f972 	bl	80004a0 <__aeabi_f2d>
 800f1bc:	4b92      	ldr	r3, [pc, #584]	; (800f408 <powf+0x2b0>)
 800f1be:	2200      	movs	r2, #0
 800f1c0:	2d02      	cmp	r5, #2
 800f1c2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800f1c6:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800f1ca:	d032      	beq.n	800f232 <powf+0xda>
 800f1cc:	4668      	mov	r0, sp
 800f1ce:	f000 fc9a 	bl	800fb06 <matherr>
 800f1d2:	bb40      	cbnz	r0, 800f226 <powf+0xce>
 800f1d4:	e065      	b.n	800f2a2 <powf+0x14a>
 800f1d6:	eddf 9a8d 	vldr	s19, [pc, #564]	; 800f40c <powf+0x2b4>
 800f1da:	eef4 8a69 	vcmp.f32	s17, s19
 800f1de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f1e2:	d163      	bne.n	800f2ac <powf+0x154>
 800f1e4:	eeb4 8a69 	vcmp.f32	s16, s19
 800f1e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f1ec:	d12e      	bne.n	800f24c <powf+0xf4>
 800f1ee:	2301      	movs	r3, #1
 800f1f0:	9300      	str	r3, [sp, #0]
 800f1f2:	4b84      	ldr	r3, [pc, #528]	; (800f404 <powf+0x2ac>)
 800f1f4:	9301      	str	r3, [sp, #4]
 800f1f6:	ee18 0a90 	vmov	r0, s17
 800f1fa:	2300      	movs	r3, #0
 800f1fc:	9308      	str	r3, [sp, #32]
 800f1fe:	f7f1 f94f 	bl	80004a0 <__aeabi_f2d>
 800f202:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f206:	ee18 0a10 	vmov	r0, s16
 800f20a:	f7f1 f949 	bl	80004a0 <__aeabi_f2d>
 800f20e:	2200      	movs	r2, #0
 800f210:	2300      	movs	r3, #0
 800f212:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800f216:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800f21a:	2d00      	cmp	r5, #0
 800f21c:	d0d6      	beq.n	800f1cc <powf+0x74>
 800f21e:	4b7a      	ldr	r3, [pc, #488]	; (800f408 <powf+0x2b0>)
 800f220:	2200      	movs	r2, #0
 800f222:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800f226:	9b08      	ldr	r3, [sp, #32]
 800f228:	b11b      	cbz	r3, 800f232 <powf+0xda>
 800f22a:	f7ff fe0d 	bl	800ee48 <__errno>
 800f22e:	9b08      	ldr	r3, [sp, #32]
 800f230:	6003      	str	r3, [r0, #0]
 800f232:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800f236:	f7f1 fc5b 	bl	8000af0 <__aeabi_d2f>
 800f23a:	ee09 0a10 	vmov	s18, r0
 800f23e:	eeb0 0a49 	vmov.f32	s0, s18
 800f242:	b00a      	add	sp, #40	; 0x28
 800f244:	ecbd 8b04 	vpop	{d8-d9}
 800f248:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 800f24c:	eeb0 0a48 	vmov.f32	s0, s16
 800f250:	f000 fc62 	bl	800fb18 <finitef>
 800f254:	2800      	cmp	r0, #0
 800f256:	d0f2      	beq.n	800f23e <powf+0xe6>
 800f258:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800f25c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f260:	d5ed      	bpl.n	800f23e <powf+0xe6>
 800f262:	2301      	movs	r3, #1
 800f264:	9300      	str	r3, [sp, #0]
 800f266:	4b67      	ldr	r3, [pc, #412]	; (800f404 <powf+0x2ac>)
 800f268:	9301      	str	r3, [sp, #4]
 800f26a:	ee18 0a90 	vmov	r0, s17
 800f26e:	2300      	movs	r3, #0
 800f270:	9308      	str	r3, [sp, #32]
 800f272:	f7f1 f915 	bl	80004a0 <__aeabi_f2d>
 800f276:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f27a:	ee18 0a10 	vmov	r0, s16
 800f27e:	f7f1 f90f 	bl	80004a0 <__aeabi_f2d>
 800f282:	f994 3000 	ldrsb.w	r3, [r4]
 800f286:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800f28a:	b923      	cbnz	r3, 800f296 <powf+0x13e>
 800f28c:	2200      	movs	r2, #0
 800f28e:	2300      	movs	r3, #0
 800f290:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800f294:	e79a      	b.n	800f1cc <powf+0x74>
 800f296:	495e      	ldr	r1, [pc, #376]	; (800f410 <powf+0x2b8>)
 800f298:	2000      	movs	r0, #0
 800f29a:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800f29e:	2b02      	cmp	r3, #2
 800f2a0:	d194      	bne.n	800f1cc <powf+0x74>
 800f2a2:	f7ff fdd1 	bl	800ee48 <__errno>
 800f2a6:	2321      	movs	r3, #33	; 0x21
 800f2a8:	6003      	str	r3, [r0, #0]
 800f2aa:	e7bc      	b.n	800f226 <powf+0xce>
 800f2ac:	f000 fc34 	bl	800fb18 <finitef>
 800f2b0:	4605      	mov	r5, r0
 800f2b2:	2800      	cmp	r0, #0
 800f2b4:	d173      	bne.n	800f39e <powf+0x246>
 800f2b6:	eeb0 0a68 	vmov.f32	s0, s17
 800f2ba:	f000 fc2d 	bl	800fb18 <finitef>
 800f2be:	2800      	cmp	r0, #0
 800f2c0:	d06d      	beq.n	800f39e <powf+0x246>
 800f2c2:	eeb0 0a48 	vmov.f32	s0, s16
 800f2c6:	f000 fc27 	bl	800fb18 <finitef>
 800f2ca:	2800      	cmp	r0, #0
 800f2cc:	d067      	beq.n	800f39e <powf+0x246>
 800f2ce:	ee18 0a90 	vmov	r0, s17
 800f2d2:	f7f1 f8e5 	bl	80004a0 <__aeabi_f2d>
 800f2d6:	4680      	mov	r8, r0
 800f2d8:	ee18 0a10 	vmov	r0, s16
 800f2dc:	4689      	mov	r9, r1
 800f2de:	f7f1 f8df 	bl	80004a0 <__aeabi_f2d>
 800f2e2:	eeb4 9a49 	vcmp.f32	s18, s18
 800f2e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f2ea:	f994 4000 	ldrsb.w	r4, [r4]
 800f2ee:	4b45      	ldr	r3, [pc, #276]	; (800f404 <powf+0x2ac>)
 800f2f0:	d713      	bvc.n	800f31a <powf+0x1c2>
 800f2f2:	2201      	movs	r2, #1
 800f2f4:	e9cd 2300 	strd	r2, r3, [sp]
 800f2f8:	9508      	str	r5, [sp, #32]
 800f2fa:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800f2fe:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800f302:	2c00      	cmp	r4, #0
 800f304:	d0c2      	beq.n	800f28c <powf+0x134>
 800f306:	eec9 7aa9 	vdiv.f32	s15, s19, s19
 800f30a:	ee17 0a90 	vmov	r0, s15
 800f30e:	f7f1 f8c7 	bl	80004a0 <__aeabi_f2d>
 800f312:	2c02      	cmp	r4, #2
 800f314:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800f318:	e7c2      	b.n	800f2a0 <powf+0x148>
 800f31a:	2203      	movs	r2, #3
 800f31c:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800f320:	e9cd 2300 	strd	r2, r3, [sp]
 800f324:	9508      	str	r5, [sp, #32]
 800f326:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800f32a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800f32e:	ee28 8a27 	vmul.f32	s16, s16, s15
 800f332:	b9fc      	cbnz	r4, 800f374 <powf+0x21c>
 800f334:	4b37      	ldr	r3, [pc, #220]	; (800f414 <powf+0x2bc>)
 800f336:	eef5 8ac0 	vcmpe.f32	s17, #0.0
 800f33a:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800f33e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f342:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800f346:	d553      	bpl.n	800f3f0 <powf+0x298>
 800f348:	eeb0 0a48 	vmov.f32	s0, s16
 800f34c:	f000 fbf4 	bl	800fb38 <rintf>
 800f350:	eeb4 0a48 	vcmp.f32	s0, s16
 800f354:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f358:	d004      	beq.n	800f364 <powf+0x20c>
 800f35a:	4b2f      	ldr	r3, [pc, #188]	; (800f418 <powf+0x2c0>)
 800f35c:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800f360:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800f364:	f996 3000 	ldrsb.w	r3, [r6]
 800f368:	2b02      	cmp	r3, #2
 800f36a:	d141      	bne.n	800f3f0 <powf+0x298>
 800f36c:	f7ff fd6c 	bl	800ee48 <__errno>
 800f370:	2322      	movs	r3, #34	; 0x22
 800f372:	e799      	b.n	800f2a8 <powf+0x150>
 800f374:	4b29      	ldr	r3, [pc, #164]	; (800f41c <powf+0x2c4>)
 800f376:	eef5 8ac0 	vcmpe.f32	s17, #0.0
 800f37a:	2200      	movs	r2, #0
 800f37c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f380:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800f384:	d5ee      	bpl.n	800f364 <powf+0x20c>
 800f386:	eeb0 0a48 	vmov.f32	s0, s16
 800f38a:	f000 fbd5 	bl	800fb38 <rintf>
 800f38e:	eeb4 0a48 	vcmp.f32	s0, s16
 800f392:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f396:	d0e5      	beq.n	800f364 <powf+0x20c>
 800f398:	2200      	movs	r2, #0
 800f39a:	4b1d      	ldr	r3, [pc, #116]	; (800f410 <powf+0x2b8>)
 800f39c:	e7e0      	b.n	800f360 <powf+0x208>
 800f39e:	eeb5 9a40 	vcmp.f32	s18, #0.0
 800f3a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f3a6:	f47f af4a 	bne.w	800f23e <powf+0xe6>
 800f3aa:	eeb0 0a68 	vmov.f32	s0, s17
 800f3ae:	f000 fbb3 	bl	800fb18 <finitef>
 800f3b2:	2800      	cmp	r0, #0
 800f3b4:	f43f af43 	beq.w	800f23e <powf+0xe6>
 800f3b8:	eeb0 0a48 	vmov.f32	s0, s16
 800f3bc:	f000 fbac 	bl	800fb18 <finitef>
 800f3c0:	2800      	cmp	r0, #0
 800f3c2:	f43f af3c 	beq.w	800f23e <powf+0xe6>
 800f3c6:	2304      	movs	r3, #4
 800f3c8:	9300      	str	r3, [sp, #0]
 800f3ca:	4b0e      	ldr	r3, [pc, #56]	; (800f404 <powf+0x2ac>)
 800f3cc:	9301      	str	r3, [sp, #4]
 800f3ce:	ee18 0a90 	vmov	r0, s17
 800f3d2:	2300      	movs	r3, #0
 800f3d4:	9308      	str	r3, [sp, #32]
 800f3d6:	f7f1 f863 	bl	80004a0 <__aeabi_f2d>
 800f3da:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f3de:	ee18 0a10 	vmov	r0, s16
 800f3e2:	f7f1 f85d 	bl	80004a0 <__aeabi_f2d>
 800f3e6:	2200      	movs	r2, #0
 800f3e8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800f3ec:	2300      	movs	r3, #0
 800f3ee:	e7b7      	b.n	800f360 <powf+0x208>
 800f3f0:	4668      	mov	r0, sp
 800f3f2:	f000 fb88 	bl	800fb06 <matherr>
 800f3f6:	2800      	cmp	r0, #0
 800f3f8:	f47f af15 	bne.w	800f226 <powf+0xce>
 800f3fc:	e7b6      	b.n	800f36c <powf+0x214>
 800f3fe:	bf00      	nop
 800f400:	200005e4 	.word	0x200005e4
 800f404:	080100b9 	.word	0x080100b9
 800f408:	3ff00000 	.word	0x3ff00000
 800f40c:	00000000 	.word	0x00000000
 800f410:	fff00000 	.word	0xfff00000
 800f414:	47efffff 	.word	0x47efffff
 800f418:	c7efffff 	.word	0xc7efffff
 800f41c:	7ff00000 	.word	0x7ff00000

0800f420 <__ieee754_sqrt>:
 800f420:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f424:	4955      	ldr	r1, [pc, #340]	; (800f57c <__ieee754_sqrt+0x15c>)
 800f426:	ec55 4b10 	vmov	r4, r5, d0
 800f42a:	43a9      	bics	r1, r5
 800f42c:	462b      	mov	r3, r5
 800f42e:	462a      	mov	r2, r5
 800f430:	d112      	bne.n	800f458 <__ieee754_sqrt+0x38>
 800f432:	ee10 2a10 	vmov	r2, s0
 800f436:	ee10 0a10 	vmov	r0, s0
 800f43a:	4629      	mov	r1, r5
 800f43c:	f7f1 f888 	bl	8000550 <__aeabi_dmul>
 800f440:	4602      	mov	r2, r0
 800f442:	460b      	mov	r3, r1
 800f444:	4620      	mov	r0, r4
 800f446:	4629      	mov	r1, r5
 800f448:	f7f0 fecc 	bl	80001e4 <__adddf3>
 800f44c:	4604      	mov	r4, r0
 800f44e:	460d      	mov	r5, r1
 800f450:	ec45 4b10 	vmov	d0, r4, r5
 800f454:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f458:	2d00      	cmp	r5, #0
 800f45a:	ee10 0a10 	vmov	r0, s0
 800f45e:	4621      	mov	r1, r4
 800f460:	dc0f      	bgt.n	800f482 <__ieee754_sqrt+0x62>
 800f462:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800f466:	4330      	orrs	r0, r6
 800f468:	d0f2      	beq.n	800f450 <__ieee754_sqrt+0x30>
 800f46a:	b155      	cbz	r5, 800f482 <__ieee754_sqrt+0x62>
 800f46c:	ee10 2a10 	vmov	r2, s0
 800f470:	4620      	mov	r0, r4
 800f472:	4629      	mov	r1, r5
 800f474:	f7f0 feb4 	bl	80001e0 <__aeabi_dsub>
 800f478:	4602      	mov	r2, r0
 800f47a:	460b      	mov	r3, r1
 800f47c:	f7f1 f992 	bl	80007a4 <__aeabi_ddiv>
 800f480:	e7e4      	b.n	800f44c <__ieee754_sqrt+0x2c>
 800f482:	151b      	asrs	r3, r3, #20
 800f484:	d073      	beq.n	800f56e <__ieee754_sqrt+0x14e>
 800f486:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800f48a:	07dd      	lsls	r5, r3, #31
 800f48c:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800f490:	bf48      	it	mi
 800f492:	0fc8      	lsrmi	r0, r1, #31
 800f494:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800f498:	bf44      	itt	mi
 800f49a:	0049      	lslmi	r1, r1, #1
 800f49c:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 800f4a0:	2500      	movs	r5, #0
 800f4a2:	1058      	asrs	r0, r3, #1
 800f4a4:	0fcb      	lsrs	r3, r1, #31
 800f4a6:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 800f4aa:	0049      	lsls	r1, r1, #1
 800f4ac:	2316      	movs	r3, #22
 800f4ae:	462c      	mov	r4, r5
 800f4b0:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 800f4b4:	19a7      	adds	r7, r4, r6
 800f4b6:	4297      	cmp	r7, r2
 800f4b8:	bfde      	ittt	le
 800f4ba:	19bc      	addle	r4, r7, r6
 800f4bc:	1bd2      	suble	r2, r2, r7
 800f4be:	19ad      	addle	r5, r5, r6
 800f4c0:	0fcf      	lsrs	r7, r1, #31
 800f4c2:	3b01      	subs	r3, #1
 800f4c4:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 800f4c8:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800f4cc:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800f4d0:	d1f0      	bne.n	800f4b4 <__ieee754_sqrt+0x94>
 800f4d2:	f04f 0c20 	mov.w	ip, #32
 800f4d6:	469e      	mov	lr, r3
 800f4d8:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800f4dc:	42a2      	cmp	r2, r4
 800f4de:	eb06 070e 	add.w	r7, r6, lr
 800f4e2:	dc02      	bgt.n	800f4ea <__ieee754_sqrt+0xca>
 800f4e4:	d112      	bne.n	800f50c <__ieee754_sqrt+0xec>
 800f4e6:	428f      	cmp	r7, r1
 800f4e8:	d810      	bhi.n	800f50c <__ieee754_sqrt+0xec>
 800f4ea:	2f00      	cmp	r7, #0
 800f4ec:	eb07 0e06 	add.w	lr, r7, r6
 800f4f0:	da42      	bge.n	800f578 <__ieee754_sqrt+0x158>
 800f4f2:	f1be 0f00 	cmp.w	lr, #0
 800f4f6:	db3f      	blt.n	800f578 <__ieee754_sqrt+0x158>
 800f4f8:	f104 0801 	add.w	r8, r4, #1
 800f4fc:	1b12      	subs	r2, r2, r4
 800f4fe:	428f      	cmp	r7, r1
 800f500:	bf88      	it	hi
 800f502:	f102 32ff 	addhi.w	r2, r2, #4294967295
 800f506:	1bc9      	subs	r1, r1, r7
 800f508:	4433      	add	r3, r6
 800f50a:	4644      	mov	r4, r8
 800f50c:	0052      	lsls	r2, r2, #1
 800f50e:	f1bc 0c01 	subs.w	ip, ip, #1
 800f512:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 800f516:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800f51a:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800f51e:	d1dd      	bne.n	800f4dc <__ieee754_sqrt+0xbc>
 800f520:	430a      	orrs	r2, r1
 800f522:	d006      	beq.n	800f532 <__ieee754_sqrt+0x112>
 800f524:	1c5c      	adds	r4, r3, #1
 800f526:	bf13      	iteet	ne
 800f528:	3301      	addne	r3, #1
 800f52a:	3501      	addeq	r5, #1
 800f52c:	4663      	moveq	r3, ip
 800f52e:	f023 0301 	bicne.w	r3, r3, #1
 800f532:	106a      	asrs	r2, r5, #1
 800f534:	085b      	lsrs	r3, r3, #1
 800f536:	07e9      	lsls	r1, r5, #31
 800f538:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 800f53c:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 800f540:	bf48      	it	mi
 800f542:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 800f546:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 800f54a:	461c      	mov	r4, r3
 800f54c:	e780      	b.n	800f450 <__ieee754_sqrt+0x30>
 800f54e:	0aca      	lsrs	r2, r1, #11
 800f550:	3815      	subs	r0, #21
 800f552:	0549      	lsls	r1, r1, #21
 800f554:	2a00      	cmp	r2, #0
 800f556:	d0fa      	beq.n	800f54e <__ieee754_sqrt+0x12e>
 800f558:	02d6      	lsls	r6, r2, #11
 800f55a:	d50a      	bpl.n	800f572 <__ieee754_sqrt+0x152>
 800f55c:	f1c3 0420 	rsb	r4, r3, #32
 800f560:	fa21 f404 	lsr.w	r4, r1, r4
 800f564:	1e5d      	subs	r5, r3, #1
 800f566:	4099      	lsls	r1, r3
 800f568:	4322      	orrs	r2, r4
 800f56a:	1b43      	subs	r3, r0, r5
 800f56c:	e78b      	b.n	800f486 <__ieee754_sqrt+0x66>
 800f56e:	4618      	mov	r0, r3
 800f570:	e7f0      	b.n	800f554 <__ieee754_sqrt+0x134>
 800f572:	0052      	lsls	r2, r2, #1
 800f574:	3301      	adds	r3, #1
 800f576:	e7ef      	b.n	800f558 <__ieee754_sqrt+0x138>
 800f578:	46a0      	mov	r8, r4
 800f57a:	e7bf      	b.n	800f4fc <__ieee754_sqrt+0xdc>
 800f57c:	7ff00000 	.word	0x7ff00000

0800f580 <__ieee754_powf>:
 800f580:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f584:	ee10 5a90 	vmov	r5, s1
 800f588:	f035 4700 	bics.w	r7, r5, #2147483648	; 0x80000000
 800f58c:	ed2d 8b02 	vpush	{d8}
 800f590:	eeb0 8a40 	vmov.f32	s16, s0
 800f594:	eef0 8a60 	vmov.f32	s17, s1
 800f598:	f000 8293 	beq.w	800fac2 <__ieee754_powf+0x542>
 800f59c:	ee10 8a10 	vmov	r8, s0
 800f5a0:	f028 4400 	bic.w	r4, r8, #2147483648	; 0x80000000
 800f5a4:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 800f5a8:	dc06      	bgt.n	800f5b8 <__ieee754_powf+0x38>
 800f5aa:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
 800f5ae:	dd0a      	ble.n	800f5c6 <__ieee754_powf+0x46>
 800f5b0:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 800f5b4:	f000 8285 	beq.w	800fac2 <__ieee754_powf+0x542>
 800f5b8:	ecbd 8b02 	vpop	{d8}
 800f5bc:	48d9      	ldr	r0, [pc, #868]	; (800f924 <__ieee754_powf+0x3a4>)
 800f5be:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f5c2:	f000 bab3 	b.w	800fb2c <nanf>
 800f5c6:	f1b8 0f00 	cmp.w	r8, #0
 800f5ca:	da1d      	bge.n	800f608 <__ieee754_powf+0x88>
 800f5cc:	f1b7 4f97 	cmp.w	r7, #1266679808	; 0x4b800000
 800f5d0:	da2c      	bge.n	800f62c <__ieee754_powf+0xac>
 800f5d2:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 800f5d6:	db30      	blt.n	800f63a <__ieee754_powf+0xba>
 800f5d8:	15fb      	asrs	r3, r7, #23
 800f5da:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 800f5de:	fa47 f603 	asr.w	r6, r7, r3
 800f5e2:	fa06 f303 	lsl.w	r3, r6, r3
 800f5e6:	42bb      	cmp	r3, r7
 800f5e8:	d127      	bne.n	800f63a <__ieee754_powf+0xba>
 800f5ea:	f006 0601 	and.w	r6, r6, #1
 800f5ee:	f1c6 0602 	rsb	r6, r6, #2
 800f5f2:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 800f5f6:	d122      	bne.n	800f63e <__ieee754_powf+0xbe>
 800f5f8:	2d00      	cmp	r5, #0
 800f5fa:	f280 8268 	bge.w	800face <__ieee754_powf+0x54e>
 800f5fe:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800f602:	ee87 0a88 	vdiv.f32	s0, s15, s16
 800f606:	e00d      	b.n	800f624 <__ieee754_powf+0xa4>
 800f608:	2600      	movs	r6, #0
 800f60a:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
 800f60e:	d1f0      	bne.n	800f5f2 <__ieee754_powf+0x72>
 800f610:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 800f614:	f000 8255 	beq.w	800fac2 <__ieee754_powf+0x542>
 800f618:	dd0a      	ble.n	800f630 <__ieee754_powf+0xb0>
 800f61a:	2d00      	cmp	r5, #0
 800f61c:	f280 8254 	bge.w	800fac8 <__ieee754_powf+0x548>
 800f620:	ed9f 0ac1 	vldr	s0, [pc, #772]	; 800f928 <__ieee754_powf+0x3a8>
 800f624:	ecbd 8b02 	vpop	{d8}
 800f628:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f62c:	2602      	movs	r6, #2
 800f62e:	e7ec      	b.n	800f60a <__ieee754_powf+0x8a>
 800f630:	2d00      	cmp	r5, #0
 800f632:	daf5      	bge.n	800f620 <__ieee754_powf+0xa0>
 800f634:	eeb1 0a68 	vneg.f32	s0, s17
 800f638:	e7f4      	b.n	800f624 <__ieee754_powf+0xa4>
 800f63a:	2600      	movs	r6, #0
 800f63c:	e7d9      	b.n	800f5f2 <__ieee754_powf+0x72>
 800f63e:	f1b5 4f80 	cmp.w	r5, #1073741824	; 0x40000000
 800f642:	d102      	bne.n	800f64a <__ieee754_powf+0xca>
 800f644:	ee28 0a08 	vmul.f32	s0, s16, s16
 800f648:	e7ec      	b.n	800f624 <__ieee754_powf+0xa4>
 800f64a:	f1b5 5f7c 	cmp.w	r5, #1056964608	; 0x3f000000
 800f64e:	eeb0 0a48 	vmov.f32	s0, s16
 800f652:	d108      	bne.n	800f666 <__ieee754_powf+0xe6>
 800f654:	f1b8 0f00 	cmp.w	r8, #0
 800f658:	db05      	blt.n	800f666 <__ieee754_powf+0xe6>
 800f65a:	ecbd 8b02 	vpop	{d8}
 800f65e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f662:	f000 ba4d 	b.w	800fb00 <__ieee754_sqrtf>
 800f666:	f000 fa50 	bl	800fb0a <fabsf>
 800f66a:	b124      	cbz	r4, 800f676 <__ieee754_powf+0xf6>
 800f66c:	f028 4340 	bic.w	r3, r8, #3221225472	; 0xc0000000
 800f670:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 800f674:	d117      	bne.n	800f6a6 <__ieee754_powf+0x126>
 800f676:	2d00      	cmp	r5, #0
 800f678:	bfbc      	itt	lt
 800f67a:	eef7 7a00 	vmovlt.f32	s15, #112	; 0x3f800000  1.0
 800f67e:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 800f682:	f1b8 0f00 	cmp.w	r8, #0
 800f686:	dacd      	bge.n	800f624 <__ieee754_powf+0xa4>
 800f688:	f1a4 547e 	sub.w	r4, r4, #1065353216	; 0x3f800000
 800f68c:	ea54 0306 	orrs.w	r3, r4, r6
 800f690:	d104      	bne.n	800f69c <__ieee754_powf+0x11c>
 800f692:	ee70 7a40 	vsub.f32	s15, s0, s0
 800f696:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 800f69a:	e7c3      	b.n	800f624 <__ieee754_powf+0xa4>
 800f69c:	2e01      	cmp	r6, #1
 800f69e:	d1c1      	bne.n	800f624 <__ieee754_powf+0xa4>
 800f6a0:	eeb1 0a40 	vneg.f32	s0, s0
 800f6a4:	e7be      	b.n	800f624 <__ieee754_powf+0xa4>
 800f6a6:	ea4f 70d8 	mov.w	r0, r8, lsr #31
 800f6aa:	3801      	subs	r0, #1
 800f6ac:	ea56 0300 	orrs.w	r3, r6, r0
 800f6b0:	d104      	bne.n	800f6bc <__ieee754_powf+0x13c>
 800f6b2:	ee38 8a48 	vsub.f32	s16, s16, s16
 800f6b6:	ee88 0a08 	vdiv.f32	s0, s16, s16
 800f6ba:	e7b3      	b.n	800f624 <__ieee754_powf+0xa4>
 800f6bc:	f1b7 4f9a 	cmp.w	r7, #1291845632	; 0x4d000000
 800f6c0:	dd6d      	ble.n	800f79e <__ieee754_powf+0x21e>
 800f6c2:	4b9a      	ldr	r3, [pc, #616]	; (800f92c <__ieee754_powf+0x3ac>)
 800f6c4:	429c      	cmp	r4, r3
 800f6c6:	dc06      	bgt.n	800f6d6 <__ieee754_powf+0x156>
 800f6c8:	2d00      	cmp	r5, #0
 800f6ca:	daa9      	bge.n	800f620 <__ieee754_powf+0xa0>
 800f6cc:	ed9f 0a98 	vldr	s0, [pc, #608]	; 800f930 <__ieee754_powf+0x3b0>
 800f6d0:	ee20 0a00 	vmul.f32	s0, s0, s0
 800f6d4:	e7a6      	b.n	800f624 <__ieee754_powf+0xa4>
 800f6d6:	4b97      	ldr	r3, [pc, #604]	; (800f934 <__ieee754_powf+0x3b4>)
 800f6d8:	429c      	cmp	r4, r3
 800f6da:	dd02      	ble.n	800f6e2 <__ieee754_powf+0x162>
 800f6dc:	2d00      	cmp	r5, #0
 800f6de:	dcf5      	bgt.n	800f6cc <__ieee754_powf+0x14c>
 800f6e0:	e79e      	b.n	800f620 <__ieee754_powf+0xa0>
 800f6e2:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800f6e6:	ee30 0a67 	vsub.f32	s0, s0, s15
 800f6ea:	ed9f 7a93 	vldr	s14, [pc, #588]	; 800f938 <__ieee754_powf+0x3b8>
 800f6ee:	eef1 6a40 	vneg.f32	s13, s0
 800f6f2:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 800f6f6:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800f6fa:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800f6fe:	eee7 7a40 	vfms.f32	s15, s14, s0
 800f702:	ee60 0a00 	vmul.f32	s1, s0, s0
 800f706:	ed9f 7a8d 	vldr	s14, [pc, #564]	; 800f93c <__ieee754_powf+0x3bc>
 800f70a:	ee67 0aa0 	vmul.f32	s1, s15, s1
 800f70e:	eddf 7a8c 	vldr	s15, [pc, #560]	; 800f940 <__ieee754_powf+0x3c0>
 800f712:	ee67 7ae0 	vnmul.f32	s15, s15, s1
 800f716:	eee0 7a07 	vfma.f32	s15, s0, s14
 800f71a:	ed9f 7a8a 	vldr	s14, [pc, #552]	; 800f944 <__ieee754_powf+0x3c4>
 800f71e:	eeb0 6a67 	vmov.f32	s12, s15
 800f722:	eea0 6a07 	vfma.f32	s12, s0, s14
 800f726:	ee16 3a10 	vmov	r3, s12
 800f72a:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800f72e:	f023 030f 	bic.w	r3, r3, #15
 800f732:	ee00 3a90 	vmov	s1, r3
 800f736:	eee6 0a87 	vfma.f32	s1, s13, s14
 800f73a:	ee77 7ae0 	vsub.f32	s15, s15, s1
 800f73e:	f425 657f 	bic.w	r5, r5, #4080	; 0xff0
 800f742:	f025 050f 	bic.w	r5, r5, #15
 800f746:	ee07 5a10 	vmov	s14, r5
 800f74a:	ee67 0aa8 	vmul.f32	s1, s15, s17
 800f74e:	ee38 7ac7 	vsub.f32	s14, s17, s14
 800f752:	ee07 3a90 	vmov	s15, r3
 800f756:	eee7 0a27 	vfma.f32	s1, s14, s15
 800f75a:	3e01      	subs	r6, #1
 800f75c:	ea56 0200 	orrs.w	r2, r6, r0
 800f760:	ee07 5a10 	vmov	s14, r5
 800f764:	ee67 7a87 	vmul.f32	s15, s15, s14
 800f768:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 800f76c:	ee30 7aa7 	vadd.f32	s14, s1, s15
 800f770:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 800f774:	ee17 4a10 	vmov	r4, s14
 800f778:	bf08      	it	eq
 800f77a:	eeb0 8a40 	vmoveq.f32	s16, s0
 800f77e:	2c00      	cmp	r4, #0
 800f780:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800f784:	f340 8184 	ble.w	800fa90 <__ieee754_powf+0x510>
 800f788:	f1b3 4f86 	cmp.w	r3, #1124073472	; 0x43000000
 800f78c:	f340 80fc 	ble.w	800f988 <__ieee754_powf+0x408>
 800f790:	eddf 7a67 	vldr	s15, [pc, #412]	; 800f930 <__ieee754_powf+0x3b0>
 800f794:	ee28 0a27 	vmul.f32	s0, s16, s15
 800f798:	ee20 0a27 	vmul.f32	s0, s0, s15
 800f79c:	e742      	b.n	800f624 <__ieee754_powf+0xa4>
 800f79e:	f5b4 0f00 	cmp.w	r4, #8388608	; 0x800000
 800f7a2:	bfbf      	itttt	lt
 800f7a4:	eddf 7a68 	vldrlt	s15, [pc, #416]	; 800f948 <__ieee754_powf+0x3c8>
 800f7a8:	ee60 7a27 	vmullt.f32	s15, s0, s15
 800f7ac:	f06f 0217 	mvnlt.w	r2, #23
 800f7b0:	ee17 4a90 	vmovlt	r4, s15
 800f7b4:	ea4f 53e4 	mov.w	r3, r4, asr #23
 800f7b8:	bfa8      	it	ge
 800f7ba:	2200      	movge	r2, #0
 800f7bc:	3b7f      	subs	r3, #127	; 0x7f
 800f7be:	4413      	add	r3, r2
 800f7c0:	4a62      	ldr	r2, [pc, #392]	; (800f94c <__ieee754_powf+0x3cc>)
 800f7c2:	f3c4 0416 	ubfx	r4, r4, #0, #23
 800f7c6:	4294      	cmp	r4, r2
 800f7c8:	f044 517e 	orr.w	r1, r4, #1065353216	; 0x3f800000
 800f7cc:	dd06      	ble.n	800f7dc <__ieee754_powf+0x25c>
 800f7ce:	4a60      	ldr	r2, [pc, #384]	; (800f950 <__ieee754_powf+0x3d0>)
 800f7d0:	4294      	cmp	r4, r2
 800f7d2:	f340 80a5 	ble.w	800f920 <__ieee754_powf+0x3a0>
 800f7d6:	3301      	adds	r3, #1
 800f7d8:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 800f7dc:	2400      	movs	r4, #0
 800f7de:	4a5d      	ldr	r2, [pc, #372]	; (800f954 <__ieee754_powf+0x3d4>)
 800f7e0:	00a7      	lsls	r7, r4, #2
 800f7e2:	443a      	add	r2, r7
 800f7e4:	ee07 1a90 	vmov	s15, r1
 800f7e8:	ed92 7a00 	vldr	s14, [r2]
 800f7ec:	4a5a      	ldr	r2, [pc, #360]	; (800f958 <__ieee754_powf+0x3d8>)
 800f7ee:	ee37 6a27 	vadd.f32	s12, s14, s15
 800f7f2:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 800f7f6:	eec5 6a06 	vdiv.f32	s13, s10, s12
 800f7fa:	1049      	asrs	r1, r1, #1
 800f7fc:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
 800f800:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
 800f804:	eb01 5144 	add.w	r1, r1, r4, lsl #21
 800f808:	ee77 5ac7 	vsub.f32	s11, s15, s14
 800f80c:	ee06 1a10 	vmov	s12, r1
 800f810:	ee65 4aa6 	vmul.f32	s9, s11, s13
 800f814:	ee14 ca90 	vmov	ip, s9
 800f818:	ea02 0c0c 	and.w	ip, r2, ip
 800f81c:	ee05 ca10 	vmov	s10, ip
 800f820:	eeb1 4a45 	vneg.f32	s8, s10
 800f824:	eee4 5a06 	vfma.f32	s11, s8, s12
 800f828:	ee36 6a47 	vsub.f32	s12, s12, s14
 800f82c:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 800f95c <__ieee754_powf+0x3dc>
 800f830:	ee37 6ac6 	vsub.f32	s12, s15, s12
 800f834:	ee64 7aa4 	vmul.f32	s15, s9, s9
 800f838:	eee4 5a06 	vfma.f32	s11, s8, s12
 800f83c:	ee67 3aa7 	vmul.f32	s7, s15, s15
 800f840:	ee25 6aa6 	vmul.f32	s12, s11, s13
 800f844:	eddf 5a46 	vldr	s11, [pc, #280]	; 800f960 <__ieee754_powf+0x3e0>
 800f848:	eea7 7aa5 	vfma.f32	s14, s15, s11
 800f84c:	eddf 5a45 	vldr	s11, [pc, #276]	; 800f964 <__ieee754_powf+0x3e4>
 800f850:	eee7 5a27 	vfma.f32	s11, s14, s15
 800f854:	ed9f 7a38 	vldr	s14, [pc, #224]	; 800f938 <__ieee754_powf+0x3b8>
 800f858:	eea5 7aa7 	vfma.f32	s14, s11, s15
 800f85c:	eddf 5a42 	vldr	s11, [pc, #264]	; 800f968 <__ieee754_powf+0x3e8>
 800f860:	eee7 5a27 	vfma.f32	s11, s14, s15
 800f864:	ed9f 7a41 	vldr	s14, [pc, #260]	; 800f96c <__ieee754_powf+0x3ec>
 800f868:	ee75 6a24 	vadd.f32	s13, s10, s9
 800f86c:	eea5 7aa7 	vfma.f32	s14, s11, s15
 800f870:	ee66 6a86 	vmul.f32	s13, s13, s12
 800f874:	eef0 5a08 	vmov.f32	s11, #8	; 0x40400000  3.0
 800f878:	eef0 7a65 	vmov.f32	s15, s11
 800f87c:	eee3 6a87 	vfma.f32	s13, s7, s14
 800f880:	eee5 7a05 	vfma.f32	s15, s10, s10
 800f884:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f888:	ee17 1a90 	vmov	r1, s15
 800f88c:	4011      	ands	r1, r2
 800f88e:	ee07 1a90 	vmov	s15, r1
 800f892:	ee37 7ae5 	vsub.f32	s14, s15, s11
 800f896:	eddf 5a36 	vldr	s11, [pc, #216]	; 800f970 <__ieee754_powf+0x3f0>
 800f89a:	eea4 7a05 	vfma.f32	s14, s8, s10
 800f89e:	ee36 7ac7 	vsub.f32	s14, s13, s14
 800f8a2:	ee27 7a24 	vmul.f32	s14, s14, s9
 800f8a6:	eea7 7a86 	vfma.f32	s14, s15, s12
 800f8aa:	eeb0 6a47 	vmov.f32	s12, s14
 800f8ae:	eea5 6a27 	vfma.f32	s12, s10, s15
 800f8b2:	ee16 1a10 	vmov	r1, s12
 800f8b6:	4011      	ands	r1, r2
 800f8b8:	ee06 1a90 	vmov	s13, r1
 800f8bc:	eee4 6a27 	vfma.f32	s13, s8, s15
 800f8c0:	eddf 7a2c 	vldr	s15, [pc, #176]	; 800f974 <__ieee754_powf+0x3f4>
 800f8c4:	ee37 7a66 	vsub.f32	s14, s14, s13
 800f8c8:	ee06 1a10 	vmov	s12, r1
 800f8cc:	ee27 7a27 	vmul.f32	s14, s14, s15
 800f8d0:	eddf 7a29 	vldr	s15, [pc, #164]	; 800f978 <__ieee754_powf+0x3f8>
 800f8d4:	4929      	ldr	r1, [pc, #164]	; (800f97c <__ieee754_powf+0x3fc>)
 800f8d6:	eea6 7a27 	vfma.f32	s14, s12, s15
 800f8da:	4439      	add	r1, r7
 800f8dc:	edd1 7a00 	vldr	s15, [r1]
 800f8e0:	ee37 7a27 	vadd.f32	s14, s14, s15
 800f8e4:	ee07 3a90 	vmov	s15, r3
 800f8e8:	eef0 0a47 	vmov.f32	s1, s14
 800f8ec:	4b24      	ldr	r3, [pc, #144]	; (800f980 <__ieee754_powf+0x400>)
 800f8ee:	eee6 0a25 	vfma.f32	s1, s12, s11
 800f8f2:	443b      	add	r3, r7
 800f8f4:	ed93 5a00 	vldr	s10, [r3]
 800f8f8:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800f8fc:	ee70 0a85 	vadd.f32	s1, s1, s10
 800f900:	ee70 7aa6 	vadd.f32	s15, s1, s13
 800f904:	ee17 3a90 	vmov	r3, s15
 800f908:	4013      	ands	r3, r2
 800f90a:	ee07 3a90 	vmov	s15, r3
 800f90e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800f912:	ee77 7ac5 	vsub.f32	s15, s15, s10
 800f916:	eee6 7a65 	vfms.f32	s15, s12, s11
 800f91a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f91e:	e70e      	b.n	800f73e <__ieee754_powf+0x1be>
 800f920:	2401      	movs	r4, #1
 800f922:	e75c      	b.n	800f7de <__ieee754_powf+0x25e>
 800f924:	080100bd 	.word	0x080100bd
 800f928:	00000000 	.word	0x00000000
 800f92c:	3f7ffff7 	.word	0x3f7ffff7
 800f930:	7149f2ca 	.word	0x7149f2ca
 800f934:	3f800007 	.word	0x3f800007
 800f938:	3eaaaaab 	.word	0x3eaaaaab
 800f93c:	36eca570 	.word	0x36eca570
 800f940:	3fb8aa3b 	.word	0x3fb8aa3b
 800f944:	3fb8aa00 	.word	0x3fb8aa00
 800f948:	4b800000 	.word	0x4b800000
 800f94c:	001cc471 	.word	0x001cc471
 800f950:	005db3d6 	.word	0x005db3d6
 800f954:	080100c0 	.word	0x080100c0
 800f958:	fffff000 	.word	0xfffff000
 800f95c:	3e6c3255 	.word	0x3e6c3255
 800f960:	3e53f142 	.word	0x3e53f142
 800f964:	3e8ba305 	.word	0x3e8ba305
 800f968:	3edb6db7 	.word	0x3edb6db7
 800f96c:	3f19999a 	.word	0x3f19999a
 800f970:	3f763800 	.word	0x3f763800
 800f974:	3f76384f 	.word	0x3f76384f
 800f978:	369dc3a0 	.word	0x369dc3a0
 800f97c:	080100d0 	.word	0x080100d0
 800f980:	080100c8 	.word	0x080100c8
 800f984:	3338aa3c 	.word	0x3338aa3c
 800f988:	f040 8092 	bne.w	800fab0 <__ieee754_powf+0x530>
 800f98c:	ed5f 6a03 	vldr	s13, [pc, #-12]	; 800f984 <__ieee754_powf+0x404>
 800f990:	ee37 7a67 	vsub.f32	s14, s14, s15
 800f994:	ee70 6aa6 	vadd.f32	s13, s1, s13
 800f998:	eef4 6ac7 	vcmpe.f32	s13, s14
 800f99c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f9a0:	f73f aef6 	bgt.w	800f790 <__ieee754_powf+0x210>
 800f9a4:	15db      	asrs	r3, r3, #23
 800f9a6:	f1a3 007e 	sub.w	r0, r3, #126	; 0x7e
 800f9aa:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800f9ae:	4103      	asrs	r3, r0
 800f9b0:	4423      	add	r3, r4
 800f9b2:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800f9b6:	4947      	ldr	r1, [pc, #284]	; (800fad4 <__ieee754_powf+0x554>)
 800f9b8:	3a7f      	subs	r2, #127	; 0x7f
 800f9ba:	4111      	asrs	r1, r2
 800f9bc:	ea23 0101 	bic.w	r1, r3, r1
 800f9c0:	f3c3 0016 	ubfx	r0, r3, #0, #23
 800f9c4:	ee07 1a10 	vmov	s14, r1
 800f9c8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800f9cc:	f1c2 0217 	rsb	r2, r2, #23
 800f9d0:	4110      	asrs	r0, r2
 800f9d2:	2c00      	cmp	r4, #0
 800f9d4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800f9d8:	bfb8      	it	lt
 800f9da:	4240      	neglt	r0, r0
 800f9dc:	ee37 7aa0 	vadd.f32	s14, s15, s1
 800f9e0:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800fad8 <__ieee754_powf+0x558>
 800f9e4:	ee17 3a10 	vmov	r3, s14
 800f9e8:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800f9ec:	f023 030f 	bic.w	r3, r3, #15
 800f9f0:	ee07 3a10 	vmov	s14, r3
 800f9f4:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f9f8:	ee70 0ae7 	vsub.f32	s1, s1, s15
 800f9fc:	eddf 7a37 	vldr	s15, [pc, #220]	; 800fadc <__ieee754_powf+0x55c>
 800fa00:	ee67 7a27 	vmul.f32	s15, s14, s15
 800fa04:	eee0 7aa6 	vfma.f32	s15, s1, s13
 800fa08:	eddf 6a35 	vldr	s13, [pc, #212]	; 800fae0 <__ieee754_powf+0x560>
 800fa0c:	eeb0 0a67 	vmov.f32	s0, s15
 800fa10:	eea7 0a26 	vfma.f32	s0, s14, s13
 800fa14:	eeb0 6a40 	vmov.f32	s12, s0
 800fa18:	eea7 6a66 	vfms.f32	s12, s14, s13
 800fa1c:	ee20 7a00 	vmul.f32	s14, s0, s0
 800fa20:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800fa24:	eddf 6a2f 	vldr	s13, [pc, #188]	; 800fae4 <__ieee754_powf+0x564>
 800fa28:	ed9f 6a2f 	vldr	s12, [pc, #188]	; 800fae8 <__ieee754_powf+0x568>
 800fa2c:	eea7 6a26 	vfma.f32	s12, s14, s13
 800fa30:	eddf 6a2e 	vldr	s13, [pc, #184]	; 800faec <__ieee754_powf+0x56c>
 800fa34:	eee6 6a07 	vfma.f32	s13, s12, s14
 800fa38:	ed9f 6a2d 	vldr	s12, [pc, #180]	; 800faf0 <__ieee754_powf+0x570>
 800fa3c:	eea6 6a87 	vfma.f32	s12, s13, s14
 800fa40:	eddf 6a2c 	vldr	s13, [pc, #176]	; 800faf4 <__ieee754_powf+0x574>
 800fa44:	eee6 6a07 	vfma.f32	s13, s12, s14
 800fa48:	eeb0 6a40 	vmov.f32	s12, s0
 800fa4c:	eea6 6ac7 	vfms.f32	s12, s13, s14
 800fa50:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800fa54:	eeb0 7a46 	vmov.f32	s14, s12
 800fa58:	ee77 6a66 	vsub.f32	s13, s14, s13
 800fa5c:	ee20 6a06 	vmul.f32	s12, s0, s12
 800fa60:	eee0 7a27 	vfma.f32	s15, s0, s15
 800fa64:	ee86 7a26 	vdiv.f32	s14, s12, s13
 800fa68:	ee77 7a67 	vsub.f32	s15, s14, s15
 800fa6c:	ee37 0ac0 	vsub.f32	s0, s15, s0
 800fa70:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800fa74:	ee37 0ac0 	vsub.f32	s0, s15, s0
 800fa78:	ee10 3a10 	vmov	r3, s0
 800fa7c:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 800fa80:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800fa84:	da1a      	bge.n	800fabc <__ieee754_powf+0x53c>
 800fa86:	f000 f8b1 	bl	800fbec <scalbnf>
 800fa8a:	ee20 0a08 	vmul.f32	s0, s0, s16
 800fa8e:	e5c9      	b.n	800f624 <__ieee754_powf+0xa4>
 800fa90:	4a19      	ldr	r2, [pc, #100]	; (800faf8 <__ieee754_powf+0x578>)
 800fa92:	4293      	cmp	r3, r2
 800fa94:	dd02      	ble.n	800fa9c <__ieee754_powf+0x51c>
 800fa96:	eddf 7a19 	vldr	s15, [pc, #100]	; 800fafc <__ieee754_powf+0x57c>
 800fa9a:	e67b      	b.n	800f794 <__ieee754_powf+0x214>
 800fa9c:	d108      	bne.n	800fab0 <__ieee754_powf+0x530>
 800fa9e:	ee37 7a67 	vsub.f32	s14, s14, s15
 800faa2:	eeb4 7ae0 	vcmpe.f32	s14, s1
 800faa6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800faaa:	f6ff af7b 	blt.w	800f9a4 <__ieee754_powf+0x424>
 800faae:	e7f2      	b.n	800fa96 <__ieee754_powf+0x516>
 800fab0:	f1b3 5f7c 	cmp.w	r3, #1056964608	; 0x3f000000
 800fab4:	f73f af76 	bgt.w	800f9a4 <__ieee754_powf+0x424>
 800fab8:	2000      	movs	r0, #0
 800faba:	e78f      	b.n	800f9dc <__ieee754_powf+0x45c>
 800fabc:	ee00 3a10 	vmov	s0, r3
 800fac0:	e7e3      	b.n	800fa8a <__ieee754_powf+0x50a>
 800fac2:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800fac6:	e5ad      	b.n	800f624 <__ieee754_powf+0xa4>
 800fac8:	eeb0 0a68 	vmov.f32	s0, s17
 800facc:	e5aa      	b.n	800f624 <__ieee754_powf+0xa4>
 800face:	eeb0 0a48 	vmov.f32	s0, s16
 800fad2:	e5a7      	b.n	800f624 <__ieee754_powf+0xa4>
 800fad4:	007fffff 	.word	0x007fffff
 800fad8:	3f317218 	.word	0x3f317218
 800fadc:	35bfbe8c 	.word	0x35bfbe8c
 800fae0:	3f317200 	.word	0x3f317200
 800fae4:	3331bb4c 	.word	0x3331bb4c
 800fae8:	b5ddea0e 	.word	0xb5ddea0e
 800faec:	388ab355 	.word	0x388ab355
 800faf0:	bb360b61 	.word	0xbb360b61
 800faf4:	3e2aaaab 	.word	0x3e2aaaab
 800faf8:	43160000 	.word	0x43160000
 800fafc:	0da24260 	.word	0x0da24260

0800fb00 <__ieee754_sqrtf>:
 800fb00:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800fb04:	4770      	bx	lr

0800fb06 <matherr>:
 800fb06:	2000      	movs	r0, #0
 800fb08:	4770      	bx	lr

0800fb0a <fabsf>:
 800fb0a:	ee10 3a10 	vmov	r3, s0
 800fb0e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800fb12:	ee00 3a10 	vmov	s0, r3
 800fb16:	4770      	bx	lr

0800fb18 <finitef>:
 800fb18:	ee10 3a10 	vmov	r3, s0
 800fb1c:	f023 4000 	bic.w	r0, r3, #2147483648	; 0x80000000
 800fb20:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 800fb24:	bfac      	ite	ge
 800fb26:	2000      	movge	r0, #0
 800fb28:	2001      	movlt	r0, #1
 800fb2a:	4770      	bx	lr

0800fb2c <nanf>:
 800fb2c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800fb34 <nanf+0x8>
 800fb30:	4770      	bx	lr
 800fb32:	bf00      	nop
 800fb34:	7fc00000 	.word	0x7fc00000

0800fb38 <rintf>:
 800fb38:	b513      	push	{r0, r1, r4, lr}
 800fb3a:	ee10 1a10 	vmov	r1, s0
 800fb3e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800fb42:	0ddc      	lsrs	r4, r3, #23
 800fb44:	3c7f      	subs	r4, #127	; 0x7f
 800fb46:	2c16      	cmp	r4, #22
 800fb48:	dc46      	bgt.n	800fbd8 <rintf+0xa0>
 800fb4a:	b32b      	cbz	r3, 800fb98 <rintf+0x60>
 800fb4c:	2c00      	cmp	r4, #0
 800fb4e:	ee10 2a10 	vmov	r2, s0
 800fb52:	ea4f 70d1 	mov.w	r0, r1, lsr #31
 800fb56:	da21      	bge.n	800fb9c <rintf+0x64>
 800fb58:	f3c1 0316 	ubfx	r3, r1, #0, #23
 800fb5c:	425b      	negs	r3, r3
 800fb5e:	4a21      	ldr	r2, [pc, #132]	; (800fbe4 <rintf+0xac>)
 800fb60:	0a5b      	lsrs	r3, r3, #9
 800fb62:	0d09      	lsrs	r1, r1, #20
 800fb64:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800fb68:	0509      	lsls	r1, r1, #20
 800fb6a:	430b      	orrs	r3, r1
 800fb6c:	eb02 0280 	add.w	r2, r2, r0, lsl #2
 800fb70:	ee07 3a90 	vmov	s15, r3
 800fb74:	edd2 6a00 	vldr	s13, [r2]
 800fb78:	ee36 7aa7 	vadd.f32	s14, s13, s15
 800fb7c:	ed8d 7a01 	vstr	s14, [sp, #4]
 800fb80:	eddd 7a01 	vldr	s15, [sp, #4]
 800fb84:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800fb88:	ee17 3a90 	vmov	r3, s15
 800fb8c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800fb90:	ea43 73c0 	orr.w	r3, r3, r0, lsl #31
 800fb94:	ee00 3a10 	vmov	s0, r3
 800fb98:	b002      	add	sp, #8
 800fb9a:	bd10      	pop	{r4, pc}
 800fb9c:	4b12      	ldr	r3, [pc, #72]	; (800fbe8 <rintf+0xb0>)
 800fb9e:	4123      	asrs	r3, r4
 800fba0:	4219      	tst	r1, r3
 800fba2:	d0f9      	beq.n	800fb98 <rintf+0x60>
 800fba4:	085b      	lsrs	r3, r3, #1
 800fba6:	4219      	tst	r1, r3
 800fba8:	d006      	beq.n	800fbb8 <rintf+0x80>
 800fbaa:	ea21 0203 	bic.w	r2, r1, r3
 800fbae:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800fbb2:	fa43 f404 	asr.w	r4, r3, r4
 800fbb6:	4322      	orrs	r2, r4
 800fbb8:	4b0a      	ldr	r3, [pc, #40]	; (800fbe4 <rintf+0xac>)
 800fbba:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800fbbe:	ed90 7a00 	vldr	s14, [r0]
 800fbc2:	ee07 2a90 	vmov	s15, r2
 800fbc6:	ee77 7a27 	vadd.f32	s15, s14, s15
 800fbca:	edcd 7a01 	vstr	s15, [sp, #4]
 800fbce:	ed9d 0a01 	vldr	s0, [sp, #4]
 800fbd2:	ee30 0a47 	vsub.f32	s0, s0, s14
 800fbd6:	e7df      	b.n	800fb98 <rintf+0x60>
 800fbd8:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800fbdc:	d3dc      	bcc.n	800fb98 <rintf+0x60>
 800fbde:	ee30 0a00 	vadd.f32	s0, s0, s0
 800fbe2:	e7d9      	b.n	800fb98 <rintf+0x60>
 800fbe4:	080100d8 	.word	0x080100d8
 800fbe8:	007fffff 	.word	0x007fffff

0800fbec <scalbnf>:
 800fbec:	b508      	push	{r3, lr}
 800fbee:	ee10 2a10 	vmov	r2, s0
 800fbf2:	f032 4300 	bics.w	r3, r2, #2147483648	; 0x80000000
 800fbf6:	ed2d 8b02 	vpush	{d8}
 800fbfa:	eef0 0a40 	vmov.f32	s1, s0
 800fbfe:	d004      	beq.n	800fc0a <scalbnf+0x1e>
 800fc00:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800fc04:	d306      	bcc.n	800fc14 <scalbnf+0x28>
 800fc06:	ee70 0a00 	vadd.f32	s1, s0, s0
 800fc0a:	ecbd 8b02 	vpop	{d8}
 800fc0e:	eeb0 0a60 	vmov.f32	s0, s1
 800fc12:	bd08      	pop	{r3, pc}
 800fc14:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800fc18:	d21c      	bcs.n	800fc54 <scalbnf+0x68>
 800fc1a:	4b1f      	ldr	r3, [pc, #124]	; (800fc98 <scalbnf+0xac>)
 800fc1c:	eddf 7a1f 	vldr	s15, [pc, #124]	; 800fc9c <scalbnf+0xb0>
 800fc20:	4298      	cmp	r0, r3
 800fc22:	ee60 0a27 	vmul.f32	s1, s0, s15
 800fc26:	db10      	blt.n	800fc4a <scalbnf+0x5e>
 800fc28:	ee10 2a90 	vmov	r2, s1
 800fc2c:	f3c2 53c7 	ubfx	r3, r2, #23, #8
 800fc30:	3b19      	subs	r3, #25
 800fc32:	4403      	add	r3, r0
 800fc34:	2bfe      	cmp	r3, #254	; 0xfe
 800fc36:	dd0f      	ble.n	800fc58 <scalbnf+0x6c>
 800fc38:	ed9f 8a19 	vldr	s16, [pc, #100]	; 800fca0 <scalbnf+0xb4>
 800fc3c:	eeb0 0a48 	vmov.f32	s0, s16
 800fc40:	f000 f834 	bl	800fcac <copysignf>
 800fc44:	ee60 0a08 	vmul.f32	s1, s0, s16
 800fc48:	e7df      	b.n	800fc0a <scalbnf+0x1e>
 800fc4a:	eddf 7a16 	vldr	s15, [pc, #88]	; 800fca4 <scalbnf+0xb8>
 800fc4e:	ee60 0aa7 	vmul.f32	s1, s1, s15
 800fc52:	e7da      	b.n	800fc0a <scalbnf+0x1e>
 800fc54:	0ddb      	lsrs	r3, r3, #23
 800fc56:	e7ec      	b.n	800fc32 <scalbnf+0x46>
 800fc58:	2b00      	cmp	r3, #0
 800fc5a:	dd06      	ble.n	800fc6a <scalbnf+0x7e>
 800fc5c:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 800fc60:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 800fc64:	ee00 3a90 	vmov	s1, r3
 800fc68:	e7cf      	b.n	800fc0a <scalbnf+0x1e>
 800fc6a:	f113 0f16 	cmn.w	r3, #22
 800fc6e:	da06      	bge.n	800fc7e <scalbnf+0x92>
 800fc70:	f24c 3350 	movw	r3, #50000	; 0xc350
 800fc74:	4298      	cmp	r0, r3
 800fc76:	dcdf      	bgt.n	800fc38 <scalbnf+0x4c>
 800fc78:	ed9f 8a0a 	vldr	s16, [pc, #40]	; 800fca4 <scalbnf+0xb8>
 800fc7c:	e7de      	b.n	800fc3c <scalbnf+0x50>
 800fc7e:	3319      	adds	r3, #25
 800fc80:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 800fc84:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 800fc88:	eddf 7a07 	vldr	s15, [pc, #28]	; 800fca8 <scalbnf+0xbc>
 800fc8c:	ee07 3a10 	vmov	s14, r3
 800fc90:	ee67 0a27 	vmul.f32	s1, s14, s15
 800fc94:	e7b9      	b.n	800fc0a <scalbnf+0x1e>
 800fc96:	bf00      	nop
 800fc98:	ffff3cb0 	.word	0xffff3cb0
 800fc9c:	4c000000 	.word	0x4c000000
 800fca0:	7149f2ca 	.word	0x7149f2ca
 800fca4:	0da24260 	.word	0x0da24260
 800fca8:	33000000 	.word	0x33000000

0800fcac <copysignf>:
 800fcac:	ee10 3a10 	vmov	r3, s0
 800fcb0:	ee10 2a90 	vmov	r2, s1
 800fcb4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800fcb8:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800fcbc:	4313      	orrs	r3, r2
 800fcbe:	ee00 3a10 	vmov	s0, r3
 800fcc2:	4770      	bx	lr

0800fcc4 <_init>:
 800fcc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fcc6:	bf00      	nop
 800fcc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fcca:	bc08      	pop	{r3}
 800fccc:	469e      	mov	lr, r3
 800fcce:	4770      	bx	lr

0800fcd0 <_fini>:
 800fcd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fcd2:	bf00      	nop
 800fcd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fcd6:	bc08      	pop	{r3}
 800fcd8:	469e      	mov	lr, r3
 800fcda:	4770      	bx	lr

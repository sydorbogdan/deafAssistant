
microApi3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d440  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000036c  0800d5d8  0800d5d8  0001d5d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d944  0800d944  000205e8  2**0
                  CONTENTS
  4 .ARM          00000008  0800d944  0800d944  0001d944  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d94c  0800d94c  000205e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d94c  0800d94c  0001d94c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d950  0800d950  0001d950  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000005e8  20000000  0800d954  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002384  200005e8  0800df3c  000205e8  2**2
                  ALLOC
 10 ._user_heap_stack 00006004  2000296c  0800df3c  0002296c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000205e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001d5df  00000000  00000000  00020618  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000451a  00000000  00000000  0003dbf7  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001410  00000000  00000000  00042118  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001200  00000000  00000000  00043528  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001ad91  00000000  00000000  00044728  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00017ca6  00000000  00000000  0005f4b9  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008e57e  00000000  00000000  0007715f  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      000000fa  00000000  00000000  001056dd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005590  00000000  00000000  001057d8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	200005e8 	.word	0x200005e8
 80001b4:	00000000 	.word	0x00000000
 80001b8:	0800d5c0 	.word	0x0800d5c0

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	200005ec 	.word	0x200005ec
 80001d4:	0800d5c0 	.word	0x0800d5c0

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000316:	f1a4 0401 	sub.w	r4, r4, #1
 800031a:	d1e9      	bne.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_d2f>:
 8000550:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000554:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000558:	bf24      	itt	cs
 800055a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 800055e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000562:	d90d      	bls.n	8000580 <__aeabi_d2f+0x30>
 8000564:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000568:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 800056c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000570:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000574:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000578:	bf08      	it	eq
 800057a:	f020 0001 	biceq.w	r0, r0, #1
 800057e:	4770      	bx	lr
 8000580:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000584:	d121      	bne.n	80005ca <__aeabi_d2f+0x7a>
 8000586:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 800058a:	bfbc      	itt	lt
 800058c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000590:	4770      	bxlt	lr
 8000592:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000596:	ea4f 5252 	mov.w	r2, r2, lsr #21
 800059a:	f1c2 0218 	rsb	r2, r2, #24
 800059e:	f1c2 0c20 	rsb	ip, r2, #32
 80005a2:	fa10 f30c 	lsls.w	r3, r0, ip
 80005a6:	fa20 f002 	lsr.w	r0, r0, r2
 80005aa:	bf18      	it	ne
 80005ac:	f040 0001 	orrne.w	r0, r0, #1
 80005b0:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80005b4:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80005b8:	fa03 fc0c 	lsl.w	ip, r3, ip
 80005bc:	ea40 000c 	orr.w	r0, r0, ip
 80005c0:	fa23 f302 	lsr.w	r3, r3, r2
 80005c4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80005c8:	e7cc      	b.n	8000564 <__aeabi_d2f+0x14>
 80005ca:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80005ce:	d107      	bne.n	80005e0 <__aeabi_d2f+0x90>
 80005d0:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80005d4:	bf1e      	ittt	ne
 80005d6:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80005da:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80005de:	4770      	bxne	lr
 80005e0:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80005e4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80005e8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80005ec:	4770      	bx	lr
 80005ee:	bf00      	nop

080005f0 <__aeabi_uldivmod>:
 80005f0:	b953      	cbnz	r3, 8000608 <__aeabi_uldivmod+0x18>
 80005f2:	b94a      	cbnz	r2, 8000608 <__aeabi_uldivmod+0x18>
 80005f4:	2900      	cmp	r1, #0
 80005f6:	bf08      	it	eq
 80005f8:	2800      	cmpeq	r0, #0
 80005fa:	bf1c      	itt	ne
 80005fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000600:	f04f 30ff 	movne.w	r0, #4294967295
 8000604:	f000 b972 	b.w	80008ec <__aeabi_idiv0>
 8000608:	f1ad 0c08 	sub.w	ip, sp, #8
 800060c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000610:	f000 f806 	bl	8000620 <__udivmoddi4>
 8000614:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000618:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800061c:	b004      	add	sp, #16
 800061e:	4770      	bx	lr

08000620 <__udivmoddi4>:
 8000620:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000624:	9e08      	ldr	r6, [sp, #32]
 8000626:	4604      	mov	r4, r0
 8000628:	4688      	mov	r8, r1
 800062a:	2b00      	cmp	r3, #0
 800062c:	d14b      	bne.n	80006c6 <__udivmoddi4+0xa6>
 800062e:	428a      	cmp	r2, r1
 8000630:	4615      	mov	r5, r2
 8000632:	d967      	bls.n	8000704 <__udivmoddi4+0xe4>
 8000634:	fab2 f282 	clz	r2, r2
 8000638:	b14a      	cbz	r2, 800064e <__udivmoddi4+0x2e>
 800063a:	f1c2 0720 	rsb	r7, r2, #32
 800063e:	fa01 f302 	lsl.w	r3, r1, r2
 8000642:	fa20 f707 	lsr.w	r7, r0, r7
 8000646:	4095      	lsls	r5, r2
 8000648:	ea47 0803 	orr.w	r8, r7, r3
 800064c:	4094      	lsls	r4, r2
 800064e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000652:	0c23      	lsrs	r3, r4, #16
 8000654:	fbb8 f7fe 	udiv	r7, r8, lr
 8000658:	fa1f fc85 	uxth.w	ip, r5
 800065c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000660:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000664:	fb07 f10c 	mul.w	r1, r7, ip
 8000668:	4299      	cmp	r1, r3
 800066a:	d909      	bls.n	8000680 <__udivmoddi4+0x60>
 800066c:	18eb      	adds	r3, r5, r3
 800066e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000672:	f080 811b 	bcs.w	80008ac <__udivmoddi4+0x28c>
 8000676:	4299      	cmp	r1, r3
 8000678:	f240 8118 	bls.w	80008ac <__udivmoddi4+0x28c>
 800067c:	3f02      	subs	r7, #2
 800067e:	442b      	add	r3, r5
 8000680:	1a5b      	subs	r3, r3, r1
 8000682:	b2a4      	uxth	r4, r4
 8000684:	fbb3 f0fe 	udiv	r0, r3, lr
 8000688:	fb0e 3310 	mls	r3, lr, r0, r3
 800068c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000690:	fb00 fc0c 	mul.w	ip, r0, ip
 8000694:	45a4      	cmp	ip, r4
 8000696:	d909      	bls.n	80006ac <__udivmoddi4+0x8c>
 8000698:	192c      	adds	r4, r5, r4
 800069a:	f100 33ff 	add.w	r3, r0, #4294967295
 800069e:	f080 8107 	bcs.w	80008b0 <__udivmoddi4+0x290>
 80006a2:	45a4      	cmp	ip, r4
 80006a4:	f240 8104 	bls.w	80008b0 <__udivmoddi4+0x290>
 80006a8:	3802      	subs	r0, #2
 80006aa:	442c      	add	r4, r5
 80006ac:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80006b0:	eba4 040c 	sub.w	r4, r4, ip
 80006b4:	2700      	movs	r7, #0
 80006b6:	b11e      	cbz	r6, 80006c0 <__udivmoddi4+0xa0>
 80006b8:	40d4      	lsrs	r4, r2
 80006ba:	2300      	movs	r3, #0
 80006bc:	e9c6 4300 	strd	r4, r3, [r6]
 80006c0:	4639      	mov	r1, r7
 80006c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80006c6:	428b      	cmp	r3, r1
 80006c8:	d909      	bls.n	80006de <__udivmoddi4+0xbe>
 80006ca:	2e00      	cmp	r6, #0
 80006cc:	f000 80eb 	beq.w	80008a6 <__udivmoddi4+0x286>
 80006d0:	2700      	movs	r7, #0
 80006d2:	e9c6 0100 	strd	r0, r1, [r6]
 80006d6:	4638      	mov	r0, r7
 80006d8:	4639      	mov	r1, r7
 80006da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80006de:	fab3 f783 	clz	r7, r3
 80006e2:	2f00      	cmp	r7, #0
 80006e4:	d147      	bne.n	8000776 <__udivmoddi4+0x156>
 80006e6:	428b      	cmp	r3, r1
 80006e8:	d302      	bcc.n	80006f0 <__udivmoddi4+0xd0>
 80006ea:	4282      	cmp	r2, r0
 80006ec:	f200 80fa 	bhi.w	80008e4 <__udivmoddi4+0x2c4>
 80006f0:	1a84      	subs	r4, r0, r2
 80006f2:	eb61 0303 	sbc.w	r3, r1, r3
 80006f6:	2001      	movs	r0, #1
 80006f8:	4698      	mov	r8, r3
 80006fa:	2e00      	cmp	r6, #0
 80006fc:	d0e0      	beq.n	80006c0 <__udivmoddi4+0xa0>
 80006fe:	e9c6 4800 	strd	r4, r8, [r6]
 8000702:	e7dd      	b.n	80006c0 <__udivmoddi4+0xa0>
 8000704:	b902      	cbnz	r2, 8000708 <__udivmoddi4+0xe8>
 8000706:	deff      	udf	#255	; 0xff
 8000708:	fab2 f282 	clz	r2, r2
 800070c:	2a00      	cmp	r2, #0
 800070e:	f040 808f 	bne.w	8000830 <__udivmoddi4+0x210>
 8000712:	1b49      	subs	r1, r1, r5
 8000714:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000718:	fa1f f885 	uxth.w	r8, r5
 800071c:	2701      	movs	r7, #1
 800071e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000722:	0c23      	lsrs	r3, r4, #16
 8000724:	fb0e 111c 	mls	r1, lr, ip, r1
 8000728:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800072c:	fb08 f10c 	mul.w	r1, r8, ip
 8000730:	4299      	cmp	r1, r3
 8000732:	d907      	bls.n	8000744 <__udivmoddi4+0x124>
 8000734:	18eb      	adds	r3, r5, r3
 8000736:	f10c 30ff 	add.w	r0, ip, #4294967295
 800073a:	d202      	bcs.n	8000742 <__udivmoddi4+0x122>
 800073c:	4299      	cmp	r1, r3
 800073e:	f200 80cd 	bhi.w	80008dc <__udivmoddi4+0x2bc>
 8000742:	4684      	mov	ip, r0
 8000744:	1a59      	subs	r1, r3, r1
 8000746:	b2a3      	uxth	r3, r4
 8000748:	fbb1 f0fe 	udiv	r0, r1, lr
 800074c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000750:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000754:	fb08 f800 	mul.w	r8, r8, r0
 8000758:	45a0      	cmp	r8, r4
 800075a:	d907      	bls.n	800076c <__udivmoddi4+0x14c>
 800075c:	192c      	adds	r4, r5, r4
 800075e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000762:	d202      	bcs.n	800076a <__udivmoddi4+0x14a>
 8000764:	45a0      	cmp	r8, r4
 8000766:	f200 80b6 	bhi.w	80008d6 <__udivmoddi4+0x2b6>
 800076a:	4618      	mov	r0, r3
 800076c:	eba4 0408 	sub.w	r4, r4, r8
 8000770:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000774:	e79f      	b.n	80006b6 <__udivmoddi4+0x96>
 8000776:	f1c7 0c20 	rsb	ip, r7, #32
 800077a:	40bb      	lsls	r3, r7
 800077c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000780:	ea4e 0e03 	orr.w	lr, lr, r3
 8000784:	fa01 f407 	lsl.w	r4, r1, r7
 8000788:	fa20 f50c 	lsr.w	r5, r0, ip
 800078c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000790:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000794:	4325      	orrs	r5, r4
 8000796:	fbb3 f9f8 	udiv	r9, r3, r8
 800079a:	0c2c      	lsrs	r4, r5, #16
 800079c:	fb08 3319 	mls	r3, r8, r9, r3
 80007a0:	fa1f fa8e 	uxth.w	sl, lr
 80007a4:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80007a8:	fb09 f40a 	mul.w	r4, r9, sl
 80007ac:	429c      	cmp	r4, r3
 80007ae:	fa02 f207 	lsl.w	r2, r2, r7
 80007b2:	fa00 f107 	lsl.w	r1, r0, r7
 80007b6:	d90b      	bls.n	80007d0 <__udivmoddi4+0x1b0>
 80007b8:	eb1e 0303 	adds.w	r3, lr, r3
 80007bc:	f109 30ff 	add.w	r0, r9, #4294967295
 80007c0:	f080 8087 	bcs.w	80008d2 <__udivmoddi4+0x2b2>
 80007c4:	429c      	cmp	r4, r3
 80007c6:	f240 8084 	bls.w	80008d2 <__udivmoddi4+0x2b2>
 80007ca:	f1a9 0902 	sub.w	r9, r9, #2
 80007ce:	4473      	add	r3, lr
 80007d0:	1b1b      	subs	r3, r3, r4
 80007d2:	b2ad      	uxth	r5, r5
 80007d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80007d8:	fb08 3310 	mls	r3, r8, r0, r3
 80007dc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80007e0:	fb00 fa0a 	mul.w	sl, r0, sl
 80007e4:	45a2      	cmp	sl, r4
 80007e6:	d908      	bls.n	80007fa <__udivmoddi4+0x1da>
 80007e8:	eb1e 0404 	adds.w	r4, lr, r4
 80007ec:	f100 33ff 	add.w	r3, r0, #4294967295
 80007f0:	d26b      	bcs.n	80008ca <__udivmoddi4+0x2aa>
 80007f2:	45a2      	cmp	sl, r4
 80007f4:	d969      	bls.n	80008ca <__udivmoddi4+0x2aa>
 80007f6:	3802      	subs	r0, #2
 80007f8:	4474      	add	r4, lr
 80007fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80007fe:	fba0 8902 	umull	r8, r9, r0, r2
 8000802:	eba4 040a 	sub.w	r4, r4, sl
 8000806:	454c      	cmp	r4, r9
 8000808:	46c2      	mov	sl, r8
 800080a:	464b      	mov	r3, r9
 800080c:	d354      	bcc.n	80008b8 <__udivmoddi4+0x298>
 800080e:	d051      	beq.n	80008b4 <__udivmoddi4+0x294>
 8000810:	2e00      	cmp	r6, #0
 8000812:	d069      	beq.n	80008e8 <__udivmoddi4+0x2c8>
 8000814:	ebb1 050a 	subs.w	r5, r1, sl
 8000818:	eb64 0403 	sbc.w	r4, r4, r3
 800081c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000820:	40fd      	lsrs	r5, r7
 8000822:	40fc      	lsrs	r4, r7
 8000824:	ea4c 0505 	orr.w	r5, ip, r5
 8000828:	e9c6 5400 	strd	r5, r4, [r6]
 800082c:	2700      	movs	r7, #0
 800082e:	e747      	b.n	80006c0 <__udivmoddi4+0xa0>
 8000830:	f1c2 0320 	rsb	r3, r2, #32
 8000834:	fa20 f703 	lsr.w	r7, r0, r3
 8000838:	4095      	lsls	r5, r2
 800083a:	fa01 f002 	lsl.w	r0, r1, r2
 800083e:	fa21 f303 	lsr.w	r3, r1, r3
 8000842:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000846:	4338      	orrs	r0, r7
 8000848:	0c01      	lsrs	r1, r0, #16
 800084a:	fbb3 f7fe 	udiv	r7, r3, lr
 800084e:	fa1f f885 	uxth.w	r8, r5
 8000852:	fb0e 3317 	mls	r3, lr, r7, r3
 8000856:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800085a:	fb07 f308 	mul.w	r3, r7, r8
 800085e:	428b      	cmp	r3, r1
 8000860:	fa04 f402 	lsl.w	r4, r4, r2
 8000864:	d907      	bls.n	8000876 <__udivmoddi4+0x256>
 8000866:	1869      	adds	r1, r5, r1
 8000868:	f107 3cff 	add.w	ip, r7, #4294967295
 800086c:	d22f      	bcs.n	80008ce <__udivmoddi4+0x2ae>
 800086e:	428b      	cmp	r3, r1
 8000870:	d92d      	bls.n	80008ce <__udivmoddi4+0x2ae>
 8000872:	3f02      	subs	r7, #2
 8000874:	4429      	add	r1, r5
 8000876:	1acb      	subs	r3, r1, r3
 8000878:	b281      	uxth	r1, r0
 800087a:	fbb3 f0fe 	udiv	r0, r3, lr
 800087e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000882:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000886:	fb00 f308 	mul.w	r3, r0, r8
 800088a:	428b      	cmp	r3, r1
 800088c:	d907      	bls.n	800089e <__udivmoddi4+0x27e>
 800088e:	1869      	adds	r1, r5, r1
 8000890:	f100 3cff 	add.w	ip, r0, #4294967295
 8000894:	d217      	bcs.n	80008c6 <__udivmoddi4+0x2a6>
 8000896:	428b      	cmp	r3, r1
 8000898:	d915      	bls.n	80008c6 <__udivmoddi4+0x2a6>
 800089a:	3802      	subs	r0, #2
 800089c:	4429      	add	r1, r5
 800089e:	1ac9      	subs	r1, r1, r3
 80008a0:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80008a4:	e73b      	b.n	800071e <__udivmoddi4+0xfe>
 80008a6:	4637      	mov	r7, r6
 80008a8:	4630      	mov	r0, r6
 80008aa:	e709      	b.n	80006c0 <__udivmoddi4+0xa0>
 80008ac:	4607      	mov	r7, r0
 80008ae:	e6e7      	b.n	8000680 <__udivmoddi4+0x60>
 80008b0:	4618      	mov	r0, r3
 80008b2:	e6fb      	b.n	80006ac <__udivmoddi4+0x8c>
 80008b4:	4541      	cmp	r1, r8
 80008b6:	d2ab      	bcs.n	8000810 <__udivmoddi4+0x1f0>
 80008b8:	ebb8 0a02 	subs.w	sl, r8, r2
 80008bc:	eb69 020e 	sbc.w	r2, r9, lr
 80008c0:	3801      	subs	r0, #1
 80008c2:	4613      	mov	r3, r2
 80008c4:	e7a4      	b.n	8000810 <__udivmoddi4+0x1f0>
 80008c6:	4660      	mov	r0, ip
 80008c8:	e7e9      	b.n	800089e <__udivmoddi4+0x27e>
 80008ca:	4618      	mov	r0, r3
 80008cc:	e795      	b.n	80007fa <__udivmoddi4+0x1da>
 80008ce:	4667      	mov	r7, ip
 80008d0:	e7d1      	b.n	8000876 <__udivmoddi4+0x256>
 80008d2:	4681      	mov	r9, r0
 80008d4:	e77c      	b.n	80007d0 <__udivmoddi4+0x1b0>
 80008d6:	3802      	subs	r0, #2
 80008d8:	442c      	add	r4, r5
 80008da:	e747      	b.n	800076c <__udivmoddi4+0x14c>
 80008dc:	f1ac 0c02 	sub.w	ip, ip, #2
 80008e0:	442b      	add	r3, r5
 80008e2:	e72f      	b.n	8000744 <__udivmoddi4+0x124>
 80008e4:	4638      	mov	r0, r7
 80008e6:	e708      	b.n	80006fa <__udivmoddi4+0xda>
 80008e8:	4637      	mov	r7, r6
 80008ea:	e6e9      	b.n	80006c0 <__udivmoddi4+0xa0>

080008ec <__aeabi_idiv0>:
 80008ec:	4770      	bx	lr
 80008ee:	bf00      	nop

080008f0 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	af00      	add	r7, sp, #0

  hcrc.Instance = CRC;
 80008f4:	4b06      	ldr	r3, [pc, #24]	; (8000910 <MX_CRC_Init+0x20>)
 80008f6:	4a07      	ldr	r2, [pc, #28]	; (8000914 <MX_CRC_Init+0x24>)
 80008f8:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80008fa:	4805      	ldr	r0, [pc, #20]	; (8000910 <MX_CRC_Init+0x20>)
 80008fc:	f001 fa68 	bl	8001dd0 <HAL_CRC_Init>
 8000900:	4603      	mov	r3, r0
 8000902:	2b00      	cmp	r3, #0
 8000904:	d001      	beq.n	800090a <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 8000906:	f000 ff0b 	bl	8001720 <Error_Handler>
  }

}
 800090a:	bf00      	nop
 800090c:	bd80      	pop	{r7, pc}
 800090e:	bf00      	nop
 8000910:	20000674 	.word	0x20000674
 8000914:	40023000 	.word	0x40023000

08000918 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 8000918:	b480      	push	{r7}
 800091a:	b085      	sub	sp, #20
 800091c:	af00      	add	r7, sp, #0
 800091e:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	681b      	ldr	r3, [r3, #0]
 8000924:	4a0b      	ldr	r2, [pc, #44]	; (8000954 <HAL_CRC_MspInit+0x3c>)
 8000926:	4293      	cmp	r3, r2
 8000928:	d10d      	bne.n	8000946 <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800092a:	2300      	movs	r3, #0
 800092c:	60fb      	str	r3, [r7, #12]
 800092e:	4b0a      	ldr	r3, [pc, #40]	; (8000958 <HAL_CRC_MspInit+0x40>)
 8000930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000932:	4a09      	ldr	r2, [pc, #36]	; (8000958 <HAL_CRC_MspInit+0x40>)
 8000934:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000938:	6313      	str	r3, [r2, #48]	; 0x30
 800093a:	4b07      	ldr	r3, [pc, #28]	; (8000958 <HAL_CRC_MspInit+0x40>)
 800093c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800093e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000942:	60fb      	str	r3, [r7, #12]
 8000944:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 8000946:	bf00      	nop
 8000948:	3714      	adds	r7, #20
 800094a:	46bd      	mov	sp, r7
 800094c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000950:	4770      	bx	lr
 8000952:	bf00      	nop
 8000954:	40023000 	.word	0x40023000
 8000958:	40023800 	.word	0x40023800

0800095c <write_register>:

//(1): Functions definitions
//-------------- Static Functions ---------------//
// Function(1): Write to register
static void write_register(uint8_t reg, uint8_t *data)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	b084      	sub	sp, #16
 8000960:	af02      	add	r7, sp, #8
 8000962:	4603      	mov	r3, r0
 8000964:	6039      	str	r1, [r7, #0]
 8000966:	71fb      	strb	r3, [r7, #7]
	iData[0] = reg;
 8000968:	4a09      	ldr	r2, [pc, #36]	; (8000990 <write_register+0x34>)
 800096a:	79fb      	ldrb	r3, [r7, #7]
 800096c:	7013      	strb	r3, [r2, #0]
	iData[1] = data[0];
 800096e:	683b      	ldr	r3, [r7, #0]
 8000970:	781a      	ldrb	r2, [r3, #0]
 8000972:	4b07      	ldr	r3, [pc, #28]	; (8000990 <write_register+0x34>)
 8000974:	705a      	strb	r2, [r3, #1]
	HAL_I2C_Master_Transmit(&i2cx, DAC_I2C_ADDR, iData, 2, 100);
 8000976:	2364      	movs	r3, #100	; 0x64
 8000978:	9300      	str	r3, [sp, #0]
 800097a:	2302      	movs	r3, #2
 800097c:	4a04      	ldr	r2, [pc, #16]	; (8000990 <write_register+0x34>)
 800097e:	2194      	movs	r1, #148	; 0x94
 8000980:	4804      	ldr	r0, [pc, #16]	; (8000994 <write_register+0x38>)
 8000982:	f002 fbd3 	bl	800312c <HAL_I2C_Master_Transmit>
	//HAL_I2C_Master_Transmit(&i2cx, DAC_I2C_ADDR, data, size, 100);
}
 8000986:	bf00      	nop
 8000988:	3708      	adds	r7, #8
 800098a:	46bd      	mov	sp, r7
 800098c:	bd80      	pop	{r7, pc}
 800098e:	bf00      	nop
 8000990:	20000608 	.word	0x20000608
 8000994:	2000060c 	.word	0x2000060c

08000998 <read_register>:
// Function(2): Read from register
static void read_register(uint8_t reg, uint8_t *data)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	b084      	sub	sp, #16
 800099c:	af02      	add	r7, sp, #8
 800099e:	4603      	mov	r3, r0
 80009a0:	6039      	str	r1, [r7, #0]
 80009a2:	71fb      	strb	r3, [r7, #7]
	iData[0] = reg;
 80009a4:	4a0b      	ldr	r2, [pc, #44]	; (80009d4 <read_register+0x3c>)
 80009a6:	79fb      	ldrb	r3, [r7, #7]
 80009a8:	7013      	strb	r3, [r2, #0]
	HAL_I2C_Master_Transmit(&i2cx, DAC_I2C_ADDR, iData, 1, 100);
 80009aa:	2364      	movs	r3, #100	; 0x64
 80009ac:	9300      	str	r3, [sp, #0]
 80009ae:	2301      	movs	r3, #1
 80009b0:	4a08      	ldr	r2, [pc, #32]	; (80009d4 <read_register+0x3c>)
 80009b2:	2194      	movs	r1, #148	; 0x94
 80009b4:	4808      	ldr	r0, [pc, #32]	; (80009d8 <read_register+0x40>)
 80009b6:	f002 fbb9 	bl	800312c <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&i2cx, DAC_I2C_ADDR, data, 1, 100);
 80009ba:	2364      	movs	r3, #100	; 0x64
 80009bc:	9300      	str	r3, [sp, #0]
 80009be:	2301      	movs	r3, #1
 80009c0:	683a      	ldr	r2, [r7, #0]
 80009c2:	2194      	movs	r1, #148	; 0x94
 80009c4:	4804      	ldr	r0, [pc, #16]	; (80009d8 <read_register+0x40>)
 80009c6:	f002 fcaf 	bl	8003328 <HAL_I2C_Master_Receive>
}
 80009ca:	bf00      	nop
 80009cc:	3708      	adds	r7, #8
 80009ce:	46bd      	mov	sp, r7
 80009d0:	bd80      	pop	{r7, pc}
 80009d2:	bf00      	nop
 80009d4:	20000608 	.word	0x20000608
 80009d8:	2000060c 	.word	0x2000060c

080009dc <CS43_Init>:

//-------------- Public Functions ----------------//
// Function(1): Initialisation
void CS43_Init(I2C_HandleTypeDef i2c_handle, CS43_MODE outputMode)
{
 80009dc:	b084      	sub	sp, #16
 80009de:	b580      	push	{r7, lr}
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	f107 0c08 	add.w	ip, r7, #8
 80009e6:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	__HAL_UNLOCK(&hi2s3);     // THIS IS EXTREMELY IMPORTANT FOR I2S3 TO WORK!!
 80009ea:	4b81      	ldr	r3, [pc, #516]	; (8000bf0 <CS43_Init+0x214>)
 80009ec:	2200      	movs	r2, #0
 80009ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	__HAL_I2S_ENABLE(&hi2s3); // THIS IS EXTREMELY IMPORTANT FOR I2S3 TO WORK!!
 80009f2:	4b7f      	ldr	r3, [pc, #508]	; (8000bf0 <CS43_Init+0x214>)
 80009f4:	681b      	ldr	r3, [r3, #0]
 80009f6:	69da      	ldr	r2, [r3, #28]
 80009f8:	4b7d      	ldr	r3, [pc, #500]	; (8000bf0 <CS43_Init+0x214>)
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000a00:	61da      	str	r2, [r3, #28]
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, GPIO_PIN_SET);
 8000a02:	2201      	movs	r2, #1
 8000a04:	2110      	movs	r1, #16
 8000a06:	487b      	ldr	r0, [pc, #492]	; (8000bf4 <CS43_Init+0x218>)
 8000a08:	f002 f99e 	bl	8002d48 <HAL_GPIO_WritePin>
	//(1): Get the I2C handle
	i2cx = i2c_handle;
 8000a0c:	4b7a      	ldr	r3, [pc, #488]	; (8000bf8 <CS43_Init+0x21c>)
 8000a0e:	4618      	mov	r0, r3
 8000a10:	f107 0108 	add.w	r1, r7, #8
 8000a14:	2354      	movs	r3, #84	; 0x54
 8000a16:	461a      	mov	r2, r3
 8000a18:	f00b ffd8 	bl	800c9cc <memcpy>
	//(2): Power down
	iData[1] = 0x01;
 8000a1c:	4b77      	ldr	r3, [pc, #476]	; (8000bfc <CS43_Init+0x220>)
 8000a1e:	2201      	movs	r2, #1
 8000a20:	705a      	strb	r2, [r3, #1]
	write_register(POWER_CONTROL1,iData);
 8000a22:	4976      	ldr	r1, [pc, #472]	; (8000bfc <CS43_Init+0x220>)
 8000a24:	2002      	movs	r0, #2
 8000a26:	f7ff ff99 	bl	800095c <write_register>
	//(3): Enable Right and Left headphones
	iData[1] =  (2 << 6);  // PDN_HPB[0:1]  = 10 (HP-B always onCon)
 8000a2a:	4b74      	ldr	r3, [pc, #464]	; (8000bfc <CS43_Init+0x220>)
 8000a2c:	2280      	movs	r2, #128	; 0x80
 8000a2e:	705a      	strb	r2, [r3, #1]
	iData[1] |= (2 << 4);  // PDN_HPA[0:1]  = 10 (HP-A always on)
 8000a30:	4b72      	ldr	r3, [pc, #456]	; (8000bfc <CS43_Init+0x220>)
 8000a32:	785b      	ldrb	r3, [r3, #1]
 8000a34:	f043 0320 	orr.w	r3, r3, #32
 8000a38:	b2da      	uxtb	r2, r3
 8000a3a:	4b70      	ldr	r3, [pc, #448]	; (8000bfc <CS43_Init+0x220>)
 8000a3c:	705a      	strb	r2, [r3, #1]
	iData[1] |= (3 << 2);  // PDN_SPKB[0:1] = 11 (Speaker B always off)
 8000a3e:	4b6f      	ldr	r3, [pc, #444]	; (8000bfc <CS43_Init+0x220>)
 8000a40:	785b      	ldrb	r3, [r3, #1]
 8000a42:	f043 030c 	orr.w	r3, r3, #12
 8000a46:	b2da      	uxtb	r2, r3
 8000a48:	4b6c      	ldr	r3, [pc, #432]	; (8000bfc <CS43_Init+0x220>)
 8000a4a:	705a      	strb	r2, [r3, #1]
	iData[1] |= (3 << 0);  // PDN_SPKA[0:1] = 11 (Speaker A always off)
 8000a4c:	4b6b      	ldr	r3, [pc, #428]	; (8000bfc <CS43_Init+0x220>)
 8000a4e:	785b      	ldrb	r3, [r3, #1]
 8000a50:	f043 0303 	orr.w	r3, r3, #3
 8000a54:	b2da      	uxtb	r2, r3
 8000a56:	4b69      	ldr	r3, [pc, #420]	; (8000bfc <CS43_Init+0x220>)
 8000a58:	705a      	strb	r2, [r3, #1]
	write_register(POWER_CONTROL2,&iData[1]);
 8000a5a:	4969      	ldr	r1, [pc, #420]	; (8000c00 <CS43_Init+0x224>)
 8000a5c:	2004      	movs	r0, #4
 8000a5e:	f7ff ff7d 	bl	800095c <write_register>
	//(4): Automatic clock detection
	iData[1] = (1 << 7);
 8000a62:	4b66      	ldr	r3, [pc, #408]	; (8000bfc <CS43_Init+0x220>)
 8000a64:	2280      	movs	r2, #128	; 0x80
 8000a66:	705a      	strb	r2, [r3, #1]
	write_register(CLOCKING_CONTROL,&iData[1]);
 8000a68:	4965      	ldr	r1, [pc, #404]	; (8000c00 <CS43_Init+0x224>)
 8000a6a:	2005      	movs	r0, #5
 8000a6c:	f7ff ff76 	bl	800095c <write_register>
	//(5): Interface control 1
	read_register(INTERFACE_CONTROL1, iData);
 8000a70:	4962      	ldr	r1, [pc, #392]	; (8000bfc <CS43_Init+0x220>)
 8000a72:	2006      	movs	r0, #6
 8000a74:	f7ff ff90 	bl	8000998 <read_register>
	iData[1] &= (1 << 5); // Clear all bits except bit 5 which is reserved
 8000a78:	4b60      	ldr	r3, [pc, #384]	; (8000bfc <CS43_Init+0x220>)
 8000a7a:	785b      	ldrb	r3, [r3, #1]
 8000a7c:	f003 0320 	and.w	r3, r3, #32
 8000a80:	b2da      	uxtb	r2, r3
 8000a82:	4b5e      	ldr	r3, [pc, #376]	; (8000bfc <CS43_Init+0x220>)
 8000a84:	705a      	strb	r2, [r3, #1]
	iData[1] &= ~(1 << 7);  // Slave
 8000a86:	4b5d      	ldr	r3, [pc, #372]	; (8000bfc <CS43_Init+0x220>)
 8000a88:	785b      	ldrb	r3, [r3, #1]
 8000a8a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000a8e:	b2da      	uxtb	r2, r3
 8000a90:	4b5a      	ldr	r3, [pc, #360]	; (8000bfc <CS43_Init+0x220>)
 8000a92:	705a      	strb	r2, [r3, #1]
	iData[1] &= ~(1 << 6);  // Clock polarity: Not inverted
 8000a94:	4b59      	ldr	r3, [pc, #356]	; (8000bfc <CS43_Init+0x220>)
 8000a96:	785b      	ldrb	r3, [r3, #1]
 8000a98:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000a9c:	b2da      	uxtb	r2, r3
 8000a9e:	4b57      	ldr	r3, [pc, #348]	; (8000bfc <CS43_Init+0x220>)
 8000aa0:	705a      	strb	r2, [r3, #1]
	iData[1] &= ~(1 << 4);  // No DSP mode
 8000aa2:	4b56      	ldr	r3, [pc, #344]	; (8000bfc <CS43_Init+0x220>)
 8000aa4:	785b      	ldrb	r3, [r3, #1]
 8000aa6:	f023 0310 	bic.w	r3, r3, #16
 8000aaa:	b2da      	uxtb	r2, r3
 8000aac:	4b53      	ldr	r3, [pc, #332]	; (8000bfc <CS43_Init+0x220>)
 8000aae:	705a      	strb	r2, [r3, #1]
	iData[1] &= ~(1 << 2);  // Left justified, up to 24 bit (default)
 8000ab0:	4b52      	ldr	r3, [pc, #328]	; (8000bfc <CS43_Init+0x220>)
 8000ab2:	785b      	ldrb	r3, [r3, #1]
 8000ab4:	f023 0304 	bic.w	r3, r3, #4
 8000ab8:	b2da      	uxtb	r2, r3
 8000aba:	4b50      	ldr	r3, [pc, #320]	; (8000bfc <CS43_Init+0x220>)
 8000abc:	705a      	strb	r2, [r3, #1]
	iData[1] |= (1 << 2);
 8000abe:	4b4f      	ldr	r3, [pc, #316]	; (8000bfc <CS43_Init+0x220>)
 8000ac0:	785b      	ldrb	r3, [r3, #1]
 8000ac2:	f043 0304 	orr.w	r3, r3, #4
 8000ac6:	b2da      	uxtb	r2, r3
 8000ac8:	4b4c      	ldr	r3, [pc, #304]	; (8000bfc <CS43_Init+0x220>)
 8000aca:	705a      	strb	r2, [r3, #1]
	
	iData[1] |=  (3 << 0);  // 16-bit audio word length for I2S interface
 8000acc:	4b4b      	ldr	r3, [pc, #300]	; (8000bfc <CS43_Init+0x220>)
 8000ace:	785b      	ldrb	r3, [r3, #1]
 8000ad0:	f043 0303 	orr.w	r3, r3, #3
 8000ad4:	b2da      	uxtb	r2, r3
 8000ad6:	4b49      	ldr	r3, [pc, #292]	; (8000bfc <CS43_Init+0x220>)
 8000ad8:	705a      	strb	r2, [r3, #1]
	write_register(INTERFACE_CONTROL1,&iData[1]);
 8000ada:	4949      	ldr	r1, [pc, #292]	; (8000c00 <CS43_Init+0x224>)
 8000adc:	2006      	movs	r0, #6
 8000ade:	f7ff ff3d 	bl	800095c <write_register>
	//(6): Passthrough A settings
	read_register(PASSTHROUGH_A, &iData[1]);
 8000ae2:	4947      	ldr	r1, [pc, #284]	; (8000c00 <CS43_Init+0x224>)
 8000ae4:	2008      	movs	r0, #8
 8000ae6:	f7ff ff57 	bl	8000998 <read_register>
	iData[1] &= 0xF0;      // Bits [4-7] are reserved
 8000aea:	4b44      	ldr	r3, [pc, #272]	; (8000bfc <CS43_Init+0x220>)
 8000aec:	785b      	ldrb	r3, [r3, #1]
 8000aee:	f023 030f 	bic.w	r3, r3, #15
 8000af2:	b2da      	uxtb	r2, r3
 8000af4:	4b41      	ldr	r3, [pc, #260]	; (8000bfc <CS43_Init+0x220>)
 8000af6:	705a      	strb	r2, [r3, #1]
	iData[1] |=  (1 << 0); // Use AIN1A as source for passthrough
 8000af8:	4b40      	ldr	r3, [pc, #256]	; (8000bfc <CS43_Init+0x220>)
 8000afa:	785b      	ldrb	r3, [r3, #1]
 8000afc:	f043 0301 	orr.w	r3, r3, #1
 8000b00:	b2da      	uxtb	r2, r3
 8000b02:	4b3e      	ldr	r3, [pc, #248]	; (8000bfc <CS43_Init+0x220>)
 8000b04:	705a      	strb	r2, [r3, #1]
	write_register(PASSTHROUGH_A,&iData[1]);
 8000b06:	493e      	ldr	r1, [pc, #248]	; (8000c00 <CS43_Init+0x224>)
 8000b08:	2008      	movs	r0, #8
 8000b0a:	f7ff ff27 	bl	800095c <write_register>
	//(7): Passthrough B settings
	read_register(PASSTHROUGH_B, &iData[1]);
 8000b0e:	493c      	ldr	r1, [pc, #240]	; (8000c00 <CS43_Init+0x224>)
 8000b10:	2009      	movs	r0, #9
 8000b12:	f7ff ff41 	bl	8000998 <read_register>
	iData[1] &= 0xF0;      // Bits [4-7] are reserved
 8000b16:	4b39      	ldr	r3, [pc, #228]	; (8000bfc <CS43_Init+0x220>)
 8000b18:	785b      	ldrb	r3, [r3, #1]
 8000b1a:	f023 030f 	bic.w	r3, r3, #15
 8000b1e:	b2da      	uxtb	r2, r3
 8000b20:	4b36      	ldr	r3, [pc, #216]	; (8000bfc <CS43_Init+0x220>)
 8000b22:	705a      	strb	r2, [r3, #1]
	iData[1] |=  (1 << 0); // Use AIN1B as source for passthrough
 8000b24:	4b35      	ldr	r3, [pc, #212]	; (8000bfc <CS43_Init+0x220>)
 8000b26:	785b      	ldrb	r3, [r3, #1]
 8000b28:	f043 0301 	orr.w	r3, r3, #1
 8000b2c:	b2da      	uxtb	r2, r3
 8000b2e:	4b33      	ldr	r3, [pc, #204]	; (8000bfc <CS43_Init+0x220>)
 8000b30:	705a      	strb	r2, [r3, #1]
	write_register(PASSTHROUGH_B,&iData[1]);
 8000b32:	4933      	ldr	r1, [pc, #204]	; (8000c00 <CS43_Init+0x224>)
 8000b34:	2009      	movs	r0, #9
 8000b36:	f7ff ff11 	bl	800095c <write_register>
	//(8): Miscellaneous register settings
	read_register(MISCELLANEOUS_CONTRLS, &iData[1]);
 8000b3a:	4931      	ldr	r1, [pc, #196]	; (8000c00 <CS43_Init+0x224>)
 8000b3c:	200e      	movs	r0, #14
 8000b3e:	f7ff ff2b 	bl	8000998 <read_register>
	if(outputMode == MODE_ANALOG)
 8000b42:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 8000b46:	2b01      	cmp	r3, #1
 8000b48:	d123      	bne.n	8000b92 <CS43_Init+0x1b6>
	{
		iData[1] |=  (1 << 7);   // Enable passthrough for AIN-A
 8000b4a:	4b2c      	ldr	r3, [pc, #176]	; (8000bfc <CS43_Init+0x220>)
 8000b4c:	785b      	ldrb	r3, [r3, #1]
 8000b4e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000b52:	b2da      	uxtb	r2, r3
 8000b54:	4b29      	ldr	r3, [pc, #164]	; (8000bfc <CS43_Init+0x220>)
 8000b56:	705a      	strb	r2, [r3, #1]
		iData[1] |=  (1 << 6);   // Enable passthrough for AIN-B
 8000b58:	4b28      	ldr	r3, [pc, #160]	; (8000bfc <CS43_Init+0x220>)
 8000b5a:	785b      	ldrb	r3, [r3, #1]
 8000b5c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000b60:	b2da      	uxtb	r2, r3
 8000b62:	4b26      	ldr	r3, [pc, #152]	; (8000bfc <CS43_Init+0x220>)
 8000b64:	705a      	strb	r2, [r3, #1]
		iData[1] &= ~(1 << 5);   // Unmute passthrough on AIN-A
 8000b66:	4b25      	ldr	r3, [pc, #148]	; (8000bfc <CS43_Init+0x220>)
 8000b68:	785b      	ldrb	r3, [r3, #1]
 8000b6a:	f023 0320 	bic.w	r3, r3, #32
 8000b6e:	b2da      	uxtb	r2, r3
 8000b70:	4b22      	ldr	r3, [pc, #136]	; (8000bfc <CS43_Init+0x220>)
 8000b72:	705a      	strb	r2, [r3, #1]
		iData[1] &= ~(1 << 4);   // Unmute passthrough on AIN-B
 8000b74:	4b21      	ldr	r3, [pc, #132]	; (8000bfc <CS43_Init+0x220>)
 8000b76:	785b      	ldrb	r3, [r3, #1]
 8000b78:	f023 0310 	bic.w	r3, r3, #16
 8000b7c:	b2da      	uxtb	r2, r3
 8000b7e:	4b1f      	ldr	r3, [pc, #124]	; (8000bfc <CS43_Init+0x220>)
 8000b80:	705a      	strb	r2, [r3, #1]
		iData[1] &= ~(1 << 3);   // Changed settings take affect immediately
 8000b82:	4b1e      	ldr	r3, [pc, #120]	; (8000bfc <CS43_Init+0x220>)
 8000b84:	785b      	ldrb	r3, [r3, #1]
 8000b86:	f023 0308 	bic.w	r3, r3, #8
 8000b8a:	b2da      	uxtb	r2, r3
 8000b8c:	4b1b      	ldr	r3, [pc, #108]	; (8000bfc <CS43_Init+0x220>)
 8000b8e:	705a      	strb	r2, [r3, #1]
 8000b90:	e006      	b.n	8000ba0 <CS43_Init+0x1c4>
	}
	else if(outputMode == MODE_I2S)
 8000b92:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d102      	bne.n	8000ba0 <CS43_Init+0x1c4>
	{
		iData[1] = 0x02;
 8000b9a:	4b18      	ldr	r3, [pc, #96]	; (8000bfc <CS43_Init+0x220>)
 8000b9c:	2202      	movs	r2, #2
 8000b9e:	705a      	strb	r2, [r3, #1]
	}
	write_register(MISCELLANEOUS_CONTRLS,&iData[1]);
 8000ba0:	4917      	ldr	r1, [pc, #92]	; (8000c00 <CS43_Init+0x224>)
 8000ba2:	200e      	movs	r0, #14
 8000ba4:	f7ff feda 	bl	800095c <write_register>
	//(9): Unmute headphone and speaker
	read_register(PLAYBACK_CONTROL, &iData[1]);
 8000ba8:	4915      	ldr	r1, [pc, #84]	; (8000c00 <CS43_Init+0x224>)
 8000baa:	200f      	movs	r0, #15
 8000bac:	f7ff fef4 	bl	8000998 <read_register>
	iData[1] = 0x00;
 8000bb0:	4b12      	ldr	r3, [pc, #72]	; (8000bfc <CS43_Init+0x220>)
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	705a      	strb	r2, [r3, #1]
	write_register(PLAYBACK_CONTROL,&iData[1]);
 8000bb6:	4912      	ldr	r1, [pc, #72]	; (8000c00 <CS43_Init+0x224>)
 8000bb8:	200f      	movs	r0, #15
 8000bba:	f7ff fecf 	bl	800095c <write_register>
	//(10): Set volume to default (0dB)
	iData[1] = 0x00;
 8000bbe:	4b0f      	ldr	r3, [pc, #60]	; (8000bfc <CS43_Init+0x220>)
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	705a      	strb	r2, [r3, #1]
	write_register(PASSTHROUGH_VOLUME_A,&iData[1]);
 8000bc4:	490e      	ldr	r1, [pc, #56]	; (8000c00 <CS43_Init+0x224>)
 8000bc6:	2014      	movs	r0, #20
 8000bc8:	f7ff fec8 	bl	800095c <write_register>
	write_register(PASSTHROUGH_VOLUME_B,&iData[1]);
 8000bcc:	490c      	ldr	r1, [pc, #48]	; (8000c00 <CS43_Init+0x224>)
 8000bce:	2015      	movs	r0, #21
 8000bd0:	f7ff fec4 	bl	800095c <write_register>
	write_register(PCM_VOLUME_A,&iData[1]);
 8000bd4:	490a      	ldr	r1, [pc, #40]	; (8000c00 <CS43_Init+0x224>)
 8000bd6:	201a      	movs	r0, #26
 8000bd8:	f7ff fec0 	bl	800095c <write_register>
	write_register(PCM_VOLUME_B,&iData[1]);
 8000bdc:	4908      	ldr	r1, [pc, #32]	; (8000c00 <CS43_Init+0x224>)
 8000bde:	201b      	movs	r0, #27
 8000be0:	f7ff febc 	bl	800095c <write_register>
}
 8000be4:	bf00      	nop
 8000be6:	46bd      	mov	sp, r7
 8000be8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000bec:	b004      	add	sp, #16
 8000bee:	4770      	bx	lr
 8000bf0:	20000778 	.word	0x20000778
 8000bf4:	40020c00 	.word	0x40020c00
 8000bf8:	2000060c 	.word	0x2000060c
 8000bfc:	20000608 	.word	0x20000608
 8000c00:	20000609 	.word	0x20000609

08000c04 <CS43_Enable_RightLeft>:

// Function(2): Enable Right and Left headphones
void CS43_Enable_RightLeft(uint8_t side)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	b082      	sub	sp, #8
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	4603      	mov	r3, r0
 8000c0c:	71fb      	strb	r3, [r7, #7]
	switch (side)
 8000c0e:	79fb      	ldrb	r3, [r7, #7]
 8000c10:	2b03      	cmp	r3, #3
 8000c12:	d837      	bhi.n	8000c84 <CS43_Enable_RightLeft+0x80>
 8000c14:	a201      	add	r2, pc, #4	; (adr r2, 8000c1c <CS43_Enable_RightLeft+0x18>)
 8000c16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c1a:	bf00      	nop
 8000c1c:	08000c2d 	.word	0x08000c2d
 8000c20:	08000c43 	.word	0x08000c43
 8000c24:	08000c59 	.word	0x08000c59
 8000c28:	08000c6f 	.word	0x08000c6f
	{
		case 0:
			iData[1] =  (3 << 6);  // PDN_HPB[0:1]  = 10 (HP-B always onCon)
 8000c2c:	4b21      	ldr	r3, [pc, #132]	; (8000cb4 <CS43_Enable_RightLeft+0xb0>)
 8000c2e:	22c0      	movs	r2, #192	; 0xc0
 8000c30:	705a      	strb	r2, [r3, #1]
			iData[1] |= (3 << 4);  // PDN_HPA[0:1]  = 10 (HP-A always on)
 8000c32:	4b20      	ldr	r3, [pc, #128]	; (8000cb4 <CS43_Enable_RightLeft+0xb0>)
 8000c34:	785b      	ldrb	r3, [r3, #1]
 8000c36:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8000c3a:	b2da      	uxtb	r2, r3
 8000c3c:	4b1d      	ldr	r3, [pc, #116]	; (8000cb4 <CS43_Enable_RightLeft+0xb0>)
 8000c3e:	705a      	strb	r2, [r3, #1]
			break;
 8000c40:	e021      	b.n	8000c86 <CS43_Enable_RightLeft+0x82>
		case 1:
			iData[1] =  (2 << 6);  // PDN_HPB[0:1]  = 10 (HP-B always onCon)
 8000c42:	4b1c      	ldr	r3, [pc, #112]	; (8000cb4 <CS43_Enable_RightLeft+0xb0>)
 8000c44:	2280      	movs	r2, #128	; 0x80
 8000c46:	705a      	strb	r2, [r3, #1]
			iData[1] |= (3 << 4);  // PDN_HPA[0:1]  = 10 (HP-A always on)
 8000c48:	4b1a      	ldr	r3, [pc, #104]	; (8000cb4 <CS43_Enable_RightLeft+0xb0>)
 8000c4a:	785b      	ldrb	r3, [r3, #1]
 8000c4c:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8000c50:	b2da      	uxtb	r2, r3
 8000c52:	4b18      	ldr	r3, [pc, #96]	; (8000cb4 <CS43_Enable_RightLeft+0xb0>)
 8000c54:	705a      	strb	r2, [r3, #1]
			break;
 8000c56:	e016      	b.n	8000c86 <CS43_Enable_RightLeft+0x82>
		case 2:
			iData[1] =  (3 << 6);  // PDN_HPB[0:1]  = 10 (HP-B always onCon)
 8000c58:	4b16      	ldr	r3, [pc, #88]	; (8000cb4 <CS43_Enable_RightLeft+0xb0>)
 8000c5a:	22c0      	movs	r2, #192	; 0xc0
 8000c5c:	705a      	strb	r2, [r3, #1]
			iData[1] |= (2 << 4);  // PDN_HPA[0:1]  = 10 (HP-A always on)
 8000c5e:	4b15      	ldr	r3, [pc, #84]	; (8000cb4 <CS43_Enable_RightLeft+0xb0>)
 8000c60:	785b      	ldrb	r3, [r3, #1]
 8000c62:	f043 0320 	orr.w	r3, r3, #32
 8000c66:	b2da      	uxtb	r2, r3
 8000c68:	4b12      	ldr	r3, [pc, #72]	; (8000cb4 <CS43_Enable_RightLeft+0xb0>)
 8000c6a:	705a      	strb	r2, [r3, #1]
			break;
 8000c6c:	e00b      	b.n	8000c86 <CS43_Enable_RightLeft+0x82>
		case 3:
			iData[1] =  (2 << 6);  // PDN_HPB[0:1]  = 10 (HP-B always onCon)
 8000c6e:	4b11      	ldr	r3, [pc, #68]	; (8000cb4 <CS43_Enable_RightLeft+0xb0>)
 8000c70:	2280      	movs	r2, #128	; 0x80
 8000c72:	705a      	strb	r2, [r3, #1]
			iData[1] |= (2 << 4);  // PDN_HPA[0:1]  = 10 (HP-A always on)
 8000c74:	4b0f      	ldr	r3, [pc, #60]	; (8000cb4 <CS43_Enable_RightLeft+0xb0>)
 8000c76:	785b      	ldrb	r3, [r3, #1]
 8000c78:	f043 0320 	orr.w	r3, r3, #32
 8000c7c:	b2da      	uxtb	r2, r3
 8000c7e:	4b0d      	ldr	r3, [pc, #52]	; (8000cb4 <CS43_Enable_RightLeft+0xb0>)
 8000c80:	705a      	strb	r2, [r3, #1]
			break;
 8000c82:	e000      	b.n	8000c86 <CS43_Enable_RightLeft+0x82>
		default:
			break;
 8000c84:	bf00      	nop
	}
	iData[1] |= (3 << 2);  // PDN_SPKB[0:1] = 11 (Speaker B always off)
 8000c86:	4b0b      	ldr	r3, [pc, #44]	; (8000cb4 <CS43_Enable_RightLeft+0xb0>)
 8000c88:	785b      	ldrb	r3, [r3, #1]
 8000c8a:	f043 030c 	orr.w	r3, r3, #12
 8000c8e:	b2da      	uxtb	r2, r3
 8000c90:	4b08      	ldr	r3, [pc, #32]	; (8000cb4 <CS43_Enable_RightLeft+0xb0>)
 8000c92:	705a      	strb	r2, [r3, #1]
	iData[1] |= (3 << 0);  // PDN_SPKA[0:1] = 11 (Speaker A always off)
 8000c94:	4b07      	ldr	r3, [pc, #28]	; (8000cb4 <CS43_Enable_RightLeft+0xb0>)
 8000c96:	785b      	ldrb	r3, [r3, #1]
 8000c98:	f043 0303 	orr.w	r3, r3, #3
 8000c9c:	b2da      	uxtb	r2, r3
 8000c9e:	4b05      	ldr	r3, [pc, #20]	; (8000cb4 <CS43_Enable_RightLeft+0xb0>)
 8000ca0:	705a      	strb	r2, [r3, #1]
	write_register(POWER_CONTROL2,&iData[1]);
 8000ca2:	4905      	ldr	r1, [pc, #20]	; (8000cb8 <CS43_Enable_RightLeft+0xb4>)
 8000ca4:	2004      	movs	r0, #4
 8000ca6:	f7ff fe59 	bl	800095c <write_register>
}
 8000caa:	bf00      	nop
 8000cac:	3708      	adds	r7, #8
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	bd80      	pop	{r7, pc}
 8000cb2:	bf00      	nop
 8000cb4:	20000608 	.word	0x20000608
 8000cb8:	20000609 	.word	0x20000609

08000cbc <CS43_SetVolume>:

// Function(3): Set Volume Level
void CS43_SetVolume(uint8_t volume)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b084      	sub	sp, #16
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	4603      	mov	r3, r0
 8000cc4:	71fb      	strb	r3, [r7, #7]
	int8_t tempVol = volume - 50;
 8000cc6:	79fb      	ldrb	r3, [r7, #7]
 8000cc8:	3b32      	subs	r3, #50	; 0x32
 8000cca:	b2db      	uxtb	r3, r3
 8000ccc:	73fb      	strb	r3, [r7, #15]
	tempVol = tempVol*(127/50);
 8000cce:	7bfb      	ldrb	r3, [r7, #15]
 8000cd0:	005b      	lsls	r3, r3, #1
 8000cd2:	b2db      	uxtb	r3, r3
 8000cd4:	73fb      	strb	r3, [r7, #15]
	uint8_t myVolume =  (uint8_t )tempVol;
 8000cd6:	7bfb      	ldrb	r3, [r7, #15]
 8000cd8:	73bb      	strb	r3, [r7, #14]
	iData[1] = myVolume;
 8000cda:	4a16      	ldr	r2, [pc, #88]	; (8000d34 <CS43_SetVolume+0x78>)
 8000cdc:	7bbb      	ldrb	r3, [r7, #14]
 8000cde:	7053      	strb	r3, [r2, #1]
	write_register(PASSTHROUGH_VOLUME_A,&iData[1]);
 8000ce0:	4915      	ldr	r1, [pc, #84]	; (8000d38 <CS43_SetVolume+0x7c>)
 8000ce2:	2014      	movs	r0, #20
 8000ce4:	f7ff fe3a 	bl	800095c <write_register>
	write_register(PASSTHROUGH_VOLUME_B,&iData[1]);
 8000ce8:	4913      	ldr	r1, [pc, #76]	; (8000d38 <CS43_SetVolume+0x7c>)
 8000cea:	2015      	movs	r0, #21
 8000cec:	f7ff fe36 	bl	800095c <write_register>
	
	iData[1] = VOLUME_CONVERT_D(volume);
 8000cf0:	79fb      	ldrb	r3, [r7, #7]
 8000cf2:	2b64      	cmp	r3, #100	; 0x64
 8000cf4:	d80e      	bhi.n	8000d14 <CS43_SetVolume+0x58>
 8000cf6:	79fa      	ldrb	r2, [r7, #7]
 8000cf8:	4613      	mov	r3, r2
 8000cfa:	005b      	lsls	r3, r3, #1
 8000cfc:	4413      	add	r3, r2
 8000cfe:	011b      	lsls	r3, r3, #4
 8000d00:	4a0e      	ldr	r2, [pc, #56]	; (8000d3c <CS43_SetVolume+0x80>)
 8000d02:	fb82 1203 	smull	r1, r2, r2, r3
 8000d06:	1152      	asrs	r2, r2, #5
 8000d08:	17db      	asrs	r3, r3, #31
 8000d0a:	1ad3      	subs	r3, r2, r3
 8000d0c:	b2db      	uxtb	r3, r3
 8000d0e:	3b18      	subs	r3, #24
 8000d10:	b2db      	uxtb	r3, r3
 8000d12:	e000      	b.n	8000d16 <CS43_SetVolume+0x5a>
 8000d14:	2318      	movs	r3, #24
 8000d16:	4a07      	ldr	r2, [pc, #28]	; (8000d34 <CS43_SetVolume+0x78>)
 8000d18:	7053      	strb	r3, [r2, #1]
	
	/* Set the Master volume */ 
	write_register(CS43L22_REG_MASTER_A_VOL,&iData[1]);
 8000d1a:	4907      	ldr	r1, [pc, #28]	; (8000d38 <CS43_SetVolume+0x7c>)
 8000d1c:	2020      	movs	r0, #32
 8000d1e:	f7ff fe1d 	bl	800095c <write_register>
	write_register(CS43L22_REG_MASTER_B_VOL,&iData[1]);
 8000d22:	4905      	ldr	r1, [pc, #20]	; (8000d38 <CS43_SetVolume+0x7c>)
 8000d24:	2021      	movs	r0, #33	; 0x21
 8000d26:	f7ff fe19 	bl	800095c <write_register>
}
 8000d2a:	bf00      	nop
 8000d2c:	3710      	adds	r7, #16
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	bd80      	pop	{r7, pc}
 8000d32:	bf00      	nop
 8000d34:	20000608 	.word	0x20000608
 8000d38:	20000609 	.word	0x20000609
 8000d3c:	51eb851f 	.word	0x51eb851f

08000d40 <CS43_Start>:

// Function(4): Start the Audio DAC
void CS43_Start(void)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	af00      	add	r7, sp, #0
	// Write 0x99 to register 0x00.
	iData[1] = 0x99;
 8000d44:	4b1d      	ldr	r3, [pc, #116]	; (8000dbc <CS43_Start+0x7c>)
 8000d46:	2299      	movs	r2, #153	; 0x99
 8000d48:	705a      	strb	r2, [r3, #1]
	write_register(CONFIG_00,&iData[1]);
 8000d4a:	491d      	ldr	r1, [pc, #116]	; (8000dc0 <CS43_Start+0x80>)
 8000d4c:	2000      	movs	r0, #0
 8000d4e:	f7ff fe05 	bl	800095c <write_register>
	// Write 0x80 to register 0x47.
	iData[1] = 0x80;
 8000d52:	4b1a      	ldr	r3, [pc, #104]	; (8000dbc <CS43_Start+0x7c>)
 8000d54:	2280      	movs	r2, #128	; 0x80
 8000d56:	705a      	strb	r2, [r3, #1]
	write_register(CONFIG_47,&iData[1]);
 8000d58:	4919      	ldr	r1, [pc, #100]	; (8000dc0 <CS43_Start+0x80>)
 8000d5a:	2047      	movs	r0, #71	; 0x47
 8000d5c:	f7ff fdfe 	bl	800095c <write_register>
	// Write '1'b to bit 7 in register 0x32.
	read_register(CONFIG_32, &iData[1]);
 8000d60:	4917      	ldr	r1, [pc, #92]	; (8000dc0 <CS43_Start+0x80>)
 8000d62:	2032      	movs	r0, #50	; 0x32
 8000d64:	f7ff fe18 	bl	8000998 <read_register>
	iData[1] |= 0x80;
 8000d68:	4b14      	ldr	r3, [pc, #80]	; (8000dbc <CS43_Start+0x7c>)
 8000d6a:	785b      	ldrb	r3, [r3, #1]
 8000d6c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000d70:	b2da      	uxtb	r2, r3
 8000d72:	4b12      	ldr	r3, [pc, #72]	; (8000dbc <CS43_Start+0x7c>)
 8000d74:	705a      	strb	r2, [r3, #1]
	write_register(CONFIG_32,&iData[1]);
 8000d76:	4912      	ldr	r1, [pc, #72]	; (8000dc0 <CS43_Start+0x80>)
 8000d78:	2032      	movs	r0, #50	; 0x32
 8000d7a:	f7ff fdef 	bl	800095c <write_register>
	// Write '0'b to bit 7 in register 0x32.
	read_register(CONFIG_32, &iData[1]);
 8000d7e:	4910      	ldr	r1, [pc, #64]	; (8000dc0 <CS43_Start+0x80>)
 8000d80:	2032      	movs	r0, #50	; 0x32
 8000d82:	f7ff fe09 	bl	8000998 <read_register>
	iData[1] &= ~(0x80);
 8000d86:	4b0d      	ldr	r3, [pc, #52]	; (8000dbc <CS43_Start+0x7c>)
 8000d88:	785b      	ldrb	r3, [r3, #1]
 8000d8a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000d8e:	b2da      	uxtb	r2, r3
 8000d90:	4b0a      	ldr	r3, [pc, #40]	; (8000dbc <CS43_Start+0x7c>)
 8000d92:	705a      	strb	r2, [r3, #1]
	write_register(CONFIG_32,&iData[1]);
 8000d94:	490a      	ldr	r1, [pc, #40]	; (8000dc0 <CS43_Start+0x80>)
 8000d96:	2032      	movs	r0, #50	; 0x32
 8000d98:	f7ff fde0 	bl	800095c <write_register>
	// Write 0x00 to register 0x00.
	iData[1] = 0x00;
 8000d9c:	4b07      	ldr	r3, [pc, #28]	; (8000dbc <CS43_Start+0x7c>)
 8000d9e:	2200      	movs	r2, #0
 8000da0:	705a      	strb	r2, [r3, #1]
	write_register(CONFIG_00,&iData[1]);
 8000da2:	4907      	ldr	r1, [pc, #28]	; (8000dc0 <CS43_Start+0x80>)
 8000da4:	2000      	movs	r0, #0
 8000da6:	f7ff fdd9 	bl	800095c <write_register>
	//Set the "Power Ctl 1" register (0x02) to 0x9E
	iData[1] = 0x9E;
 8000daa:	4b04      	ldr	r3, [pc, #16]	; (8000dbc <CS43_Start+0x7c>)
 8000dac:	229e      	movs	r2, #158	; 0x9e
 8000dae:	705a      	strb	r2, [r3, #1]
	write_register(POWER_CONTROL1,&iData[1]);
 8000db0:	4903      	ldr	r1, [pc, #12]	; (8000dc0 <CS43_Start+0x80>)
 8000db2:	2002      	movs	r0, #2
 8000db4:	f7ff fdd2 	bl	800095c <write_register>
}
 8000db8:	bf00      	nop
 8000dba:	bd80      	pop	{r7, pc}
 8000dbc:	20000608 	.word	0x20000608
 8000dc0:	20000609 	.word	0x20000609

08000dc4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b082      	sub	sp, #8
 8000dc8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000dca:	2300      	movs	r3, #0
 8000dcc:	607b      	str	r3, [r7, #4]
 8000dce:	4b0c      	ldr	r3, [pc, #48]	; (8000e00 <MX_DMA_Init+0x3c>)
 8000dd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dd2:	4a0b      	ldr	r2, [pc, #44]	; (8000e00 <MX_DMA_Init+0x3c>)
 8000dd4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000dd8:	6313      	str	r3, [r2, #48]	; 0x30
 8000dda:	4b09      	ldr	r3, [pc, #36]	; (8000e00 <MX_DMA_Init+0x3c>)
 8000ddc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dde:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000de2:	607b      	str	r3, [r7, #4]
 8000de4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8000de6:	2200      	movs	r2, #0
 8000de8:	2100      	movs	r1, #0
 8000dea:	2010      	movs	r0, #16
 8000dec:	f000 ffa0 	bl	8001d30 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000df0:	2010      	movs	r0, #16
 8000df2:	f000 ffc9 	bl	8001d88 <HAL_NVIC_EnableIRQ>

}
 8000df6:	bf00      	nop
 8000df8:	3708      	adds	r7, #8
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	bd80      	pop	{r7, pc}
 8000dfe:	bf00      	nop
 8000e00:	40023800 	.word	0x40023800

08000e04 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b08c      	sub	sp, #48	; 0x30
 8000e08:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e0a:	f107 031c 	add.w	r3, r7, #28
 8000e0e:	2200      	movs	r2, #0
 8000e10:	601a      	str	r2, [r3, #0]
 8000e12:	605a      	str	r2, [r3, #4]
 8000e14:	609a      	str	r2, [r3, #8]
 8000e16:	60da      	str	r2, [r3, #12]
 8000e18:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	61bb      	str	r3, [r7, #24]
 8000e1e:	4b60      	ldr	r3, [pc, #384]	; (8000fa0 <MX_GPIO_Init+0x19c>)
 8000e20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e22:	4a5f      	ldr	r2, [pc, #380]	; (8000fa0 <MX_GPIO_Init+0x19c>)
 8000e24:	f043 0310 	orr.w	r3, r3, #16
 8000e28:	6313      	str	r3, [r2, #48]	; 0x30
 8000e2a:	4b5d      	ldr	r3, [pc, #372]	; (8000fa0 <MX_GPIO_Init+0x19c>)
 8000e2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e2e:	f003 0310 	and.w	r3, r3, #16
 8000e32:	61bb      	str	r3, [r7, #24]
 8000e34:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e36:	2300      	movs	r3, #0
 8000e38:	617b      	str	r3, [r7, #20]
 8000e3a:	4b59      	ldr	r3, [pc, #356]	; (8000fa0 <MX_GPIO_Init+0x19c>)
 8000e3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e3e:	4a58      	ldr	r2, [pc, #352]	; (8000fa0 <MX_GPIO_Init+0x19c>)
 8000e40:	f043 0304 	orr.w	r3, r3, #4
 8000e44:	6313      	str	r3, [r2, #48]	; 0x30
 8000e46:	4b56      	ldr	r3, [pc, #344]	; (8000fa0 <MX_GPIO_Init+0x19c>)
 8000e48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e4a:	f003 0304 	and.w	r3, r3, #4
 8000e4e:	617b      	str	r3, [r7, #20]
 8000e50:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000e52:	2300      	movs	r3, #0
 8000e54:	613b      	str	r3, [r7, #16]
 8000e56:	4b52      	ldr	r3, [pc, #328]	; (8000fa0 <MX_GPIO_Init+0x19c>)
 8000e58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e5a:	4a51      	ldr	r2, [pc, #324]	; (8000fa0 <MX_GPIO_Init+0x19c>)
 8000e5c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e60:	6313      	str	r3, [r2, #48]	; 0x30
 8000e62:	4b4f      	ldr	r3, [pc, #316]	; (8000fa0 <MX_GPIO_Init+0x19c>)
 8000e64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e6a:	613b      	str	r3, [r7, #16]
 8000e6c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e6e:	2300      	movs	r3, #0
 8000e70:	60fb      	str	r3, [r7, #12]
 8000e72:	4b4b      	ldr	r3, [pc, #300]	; (8000fa0 <MX_GPIO_Init+0x19c>)
 8000e74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e76:	4a4a      	ldr	r2, [pc, #296]	; (8000fa0 <MX_GPIO_Init+0x19c>)
 8000e78:	f043 0301 	orr.w	r3, r3, #1
 8000e7c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e7e:	4b48      	ldr	r3, [pc, #288]	; (8000fa0 <MX_GPIO_Init+0x19c>)
 8000e80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e82:	f003 0301 	and.w	r3, r3, #1
 8000e86:	60fb      	str	r3, [r7, #12]
 8000e88:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	60bb      	str	r3, [r7, #8]
 8000e8e:	4b44      	ldr	r3, [pc, #272]	; (8000fa0 <MX_GPIO_Init+0x19c>)
 8000e90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e92:	4a43      	ldr	r2, [pc, #268]	; (8000fa0 <MX_GPIO_Init+0x19c>)
 8000e94:	f043 0302 	orr.w	r3, r3, #2
 8000e98:	6313      	str	r3, [r2, #48]	; 0x30
 8000e9a:	4b41      	ldr	r3, [pc, #260]	; (8000fa0 <MX_GPIO_Init+0x19c>)
 8000e9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e9e:	f003 0302 	and.w	r3, r3, #2
 8000ea2:	60bb      	str	r3, [r7, #8]
 8000ea4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	607b      	str	r3, [r7, #4]
 8000eaa:	4b3d      	ldr	r3, [pc, #244]	; (8000fa0 <MX_GPIO_Init+0x19c>)
 8000eac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eae:	4a3c      	ldr	r2, [pc, #240]	; (8000fa0 <MX_GPIO_Init+0x19c>)
 8000eb0:	f043 0308 	orr.w	r3, r3, #8
 8000eb4:	6313      	str	r3, [r2, #48]	; 0x30
 8000eb6:	4b3a      	ldr	r3, [pc, #232]	; (8000fa0 <MX_GPIO_Init+0x19c>)
 8000eb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eba:	f003 0308 	and.w	r3, r3, #8
 8000ebe:	607b      	str	r3, [r7, #4]
 8000ec0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	2108      	movs	r1, #8
 8000ec6:	4837      	ldr	r0, [pc, #220]	; (8000fa4 <MX_GPIO_Init+0x1a0>)
 8000ec8:	f001 ff3e 	bl	8002d48 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000ecc:	2201      	movs	r2, #1
 8000ece:	2101      	movs	r1, #1
 8000ed0:	4835      	ldr	r0, [pc, #212]	; (8000fa8 <MX_GPIO_Init+0x1a4>)
 8000ed2:	f001 ff39 	bl	8002d48 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	f24f 0110 	movw	r1, #61456	; 0xf010
 8000edc:	4833      	ldr	r0, [pc, #204]	; (8000fac <MX_GPIO_Init+0x1a8>)
 8000ede:	f001 ff33 	bl	8002d48 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DATA_Ready_Pin;
 8000ee2:	2304      	movs	r3, #4
 8000ee4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eea:	2300      	movs	r3, #0
 8000eec:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DATA_Ready_GPIO_Port, &GPIO_InitStruct);
 8000eee:	f107 031c 	add.w	r3, r7, #28
 8000ef2:	4619      	mov	r1, r3
 8000ef4:	482b      	ldr	r0, [pc, #172]	; (8000fa4 <MX_GPIO_Init+0x1a0>)
 8000ef6:	f001 fc7f 	bl	80027f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000efa:	2308      	movs	r3, #8
 8000efc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000efe:	2301      	movs	r3, #1
 8000f00:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f02:	2300      	movs	r3, #0
 8000f04:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f06:	2300      	movs	r3, #0
 8000f08:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000f0a:	f107 031c 	add.w	r3, r7, #28
 8000f0e:	4619      	mov	r1, r3
 8000f10:	4824      	ldr	r0, [pc, #144]	; (8000fa4 <MX_GPIO_Init+0x1a0>)
 8000f12:	f001 fc71 	bl	80027f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = INT1_Pin|INT2_Pin|MEMS_INT2_Pin;
 8000f16:	2332      	movs	r3, #50	; 0x32
 8000f18:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000f1a:	4b25      	ldr	r3, [pc, #148]	; (8000fb0 <MX_GPIO_Init+0x1ac>)
 8000f1c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f1e:	2300      	movs	r3, #0
 8000f20:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000f22:	f107 031c 	add.w	r3, r7, #28
 8000f26:	4619      	mov	r1, r3
 8000f28:	481e      	ldr	r0, [pc, #120]	; (8000fa4 <MX_GPIO_Init+0x1a0>)
 8000f2a:	f001 fc65 	bl	80027f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000f2e:	2301      	movs	r3, #1
 8000f30:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f32:	2301      	movs	r3, #1
 8000f34:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f36:	2300      	movs	r3, #0
 8000f38:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000f3e:	f107 031c 	add.w	r3, r7, #28
 8000f42:	4619      	mov	r1, r3
 8000f44:	4818      	ldr	r0, [pc, #96]	; (8000fa8 <MX_GPIO_Init+0x1a4>)
 8000f46:	f001 fc57 	bl	80027f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000f4a:	2301      	movs	r3, #1
 8000f4c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000f4e:	4b18      	ldr	r3, [pc, #96]	; (8000fb0 <MX_GPIO_Init+0x1ac>)
 8000f50:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f52:	2300      	movs	r3, #0
 8000f54:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f56:	f107 031c 	add.w	r3, r7, #28
 8000f5a:	4619      	mov	r1, r3
 8000f5c:	4815      	ldr	r0, [pc, #84]	; (8000fb4 <MX_GPIO_Init+0x1b0>)
 8000f5e:	f001 fc4b 	bl	80027f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PDPin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000f62:	f24f 0310 	movw	r3, #61456	; 0xf010
 8000f66:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f68:	2301      	movs	r3, #1
 8000f6a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f70:	2300      	movs	r3, #0
 8000f72:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f74:	f107 031c 	add.w	r3, r7, #28
 8000f78:	4619      	mov	r1, r3
 8000f7a:	480c      	ldr	r0, [pc, #48]	; (8000fac <MX_GPIO_Init+0x1a8>)
 8000f7c:	f001 fc3c 	bl	80027f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000f80:	2320      	movs	r3, #32
 8000f82:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f84:	2300      	movs	r3, #0
 8000f86:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f88:	2300      	movs	r3, #0
 8000f8a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000f8c:	f107 031c 	add.w	r3, r7, #28
 8000f90:	4619      	mov	r1, r3
 8000f92:	4806      	ldr	r0, [pc, #24]	; (8000fac <MX_GPIO_Init+0x1a8>)
 8000f94:	f001 fc30 	bl	80027f8 <HAL_GPIO_Init>

}
 8000f98:	bf00      	nop
 8000f9a:	3730      	adds	r7, #48	; 0x30
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	bd80      	pop	{r7, pc}
 8000fa0:	40023800 	.word	0x40023800
 8000fa4:	40021000 	.word	0x40021000
 8000fa8:	40020800 	.word	0x40020800
 8000fac:	40020c00 	.word	0x40020c00
 8000fb0:	10120000 	.word	0x10120000
 8000fb4:	40020000 	.word	0x40020000

08000fb8 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8000fbc:	4b12      	ldr	r3, [pc, #72]	; (8001008 <MX_I2C1_Init+0x50>)
 8000fbe:	4a13      	ldr	r2, [pc, #76]	; (800100c <MX_I2C1_Init+0x54>)
 8000fc0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000fc2:	4b11      	ldr	r3, [pc, #68]	; (8001008 <MX_I2C1_Init+0x50>)
 8000fc4:	4a12      	ldr	r2, [pc, #72]	; (8001010 <MX_I2C1_Init+0x58>)
 8000fc6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000fc8:	4b0f      	ldr	r3, [pc, #60]	; (8001008 <MX_I2C1_Init+0x50>)
 8000fca:	2200      	movs	r2, #0
 8000fcc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000fce:	4b0e      	ldr	r3, [pc, #56]	; (8001008 <MX_I2C1_Init+0x50>)
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000fd4:	4b0c      	ldr	r3, [pc, #48]	; (8001008 <MX_I2C1_Init+0x50>)
 8000fd6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000fda:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000fdc:	4b0a      	ldr	r3, [pc, #40]	; (8001008 <MX_I2C1_Init+0x50>)
 8000fde:	2200      	movs	r2, #0
 8000fe0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000fe2:	4b09      	ldr	r3, [pc, #36]	; (8001008 <MX_I2C1_Init+0x50>)
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000fe8:	4b07      	ldr	r3, [pc, #28]	; (8001008 <MX_I2C1_Init+0x50>)
 8000fea:	2200      	movs	r2, #0
 8000fec:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000fee:	4b06      	ldr	r3, [pc, #24]	; (8001008 <MX_I2C1_Init+0x50>)
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000ff4:	4804      	ldr	r0, [pc, #16]	; (8001008 <MX_I2C1_Init+0x50>)
 8000ff6:	f001 fed9 	bl	8002dac <HAL_I2C_Init>
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d001      	beq.n	8001004 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001000:	f000 fb8e 	bl	8001720 <Error_Handler>
  }

}
 8001004:	bf00      	nop
 8001006:	bd80      	pop	{r7, pc}
 8001008:	2000067c 	.word	0x2000067c
 800100c:	40005400 	.word	0x40005400
 8001010:	000186a0 	.word	0x000186a0

08001014 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	b08a      	sub	sp, #40	; 0x28
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800101c:	f107 0314 	add.w	r3, r7, #20
 8001020:	2200      	movs	r2, #0
 8001022:	601a      	str	r2, [r3, #0]
 8001024:	605a      	str	r2, [r3, #4]
 8001026:	609a      	str	r2, [r3, #8]
 8001028:	60da      	str	r2, [r3, #12]
 800102a:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	4a19      	ldr	r2, [pc, #100]	; (8001098 <HAL_I2C_MspInit+0x84>)
 8001032:	4293      	cmp	r3, r2
 8001034:	d12c      	bne.n	8001090 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001036:	2300      	movs	r3, #0
 8001038:	613b      	str	r3, [r7, #16]
 800103a:	4b18      	ldr	r3, [pc, #96]	; (800109c <HAL_I2C_MspInit+0x88>)
 800103c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800103e:	4a17      	ldr	r2, [pc, #92]	; (800109c <HAL_I2C_MspInit+0x88>)
 8001040:	f043 0302 	orr.w	r3, r3, #2
 8001044:	6313      	str	r3, [r2, #48]	; 0x30
 8001046:	4b15      	ldr	r3, [pc, #84]	; (800109c <HAL_I2C_MspInit+0x88>)
 8001048:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800104a:	f003 0302 	and.w	r3, r3, #2
 800104e:	613b      	str	r3, [r7, #16]
 8001050:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8001052:	f44f 7310 	mov.w	r3, #576	; 0x240
 8001056:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001058:	2312      	movs	r3, #18
 800105a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800105c:	2301      	movs	r3, #1
 800105e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001060:	2300      	movs	r3, #0
 8001062:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001064:	2304      	movs	r3, #4
 8001066:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001068:	f107 0314 	add.w	r3, r7, #20
 800106c:	4619      	mov	r1, r3
 800106e:	480c      	ldr	r0, [pc, #48]	; (80010a0 <HAL_I2C_MspInit+0x8c>)
 8001070:	f001 fbc2 	bl	80027f8 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001074:	2300      	movs	r3, #0
 8001076:	60fb      	str	r3, [r7, #12]
 8001078:	4b08      	ldr	r3, [pc, #32]	; (800109c <HAL_I2C_MspInit+0x88>)
 800107a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800107c:	4a07      	ldr	r2, [pc, #28]	; (800109c <HAL_I2C_MspInit+0x88>)
 800107e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001082:	6413      	str	r3, [r2, #64]	; 0x40
 8001084:	4b05      	ldr	r3, [pc, #20]	; (800109c <HAL_I2C_MspInit+0x88>)
 8001086:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001088:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800108c:	60fb      	str	r3, [r7, #12]
 800108e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001090:	bf00      	nop
 8001092:	3728      	adds	r7, #40	; 0x28
 8001094:	46bd      	mov	sp, r7
 8001096:	bd80      	pop	{r7, pc}
 8001098:	40005400 	.word	0x40005400
 800109c:	40023800 	.word	0x40023800
 80010a0:	40020400 	.word	0x40020400

080010a4 <MX_I2S2_Init>:
I2S_HandleTypeDef hi2s3;
DMA_HandleTypeDef hdma_spi3_tx;

/* I2S2 init function */
void MX_I2S2_Init(void)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	af00      	add	r7, sp, #0

  hi2s2.Instance = SPI2;
 80010a8:	4b12      	ldr	r3, [pc, #72]	; (80010f4 <MX_I2S2_Init+0x50>)
 80010aa:	4a13      	ldr	r2, [pc, #76]	; (80010f8 <MX_I2S2_Init+0x54>)
 80010ac:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_RX;
 80010ae:	4b11      	ldr	r3, [pc, #68]	; (80010f4 <MX_I2S2_Init+0x50>)
 80010b0:	f44f 7240 	mov.w	r2, #768	; 0x300
 80010b4:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 80010b6:	4b0f      	ldr	r3, [pc, #60]	; (80010f4 <MX_I2S2_Init+0x50>)
 80010b8:	2200      	movs	r2, #0
 80010ba:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_24B;
 80010bc:	4b0d      	ldr	r3, [pc, #52]	; (80010f4 <MX_I2S2_Init+0x50>)
 80010be:	2203      	movs	r2, #3
 80010c0:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 80010c2:	4b0c      	ldr	r3, [pc, #48]	; (80010f4 <MX_I2S2_Init+0x50>)
 80010c4:	2200      	movs	r2, #0
 80010c6:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 80010c8:	4b0a      	ldr	r3, [pc, #40]	; (80010f4 <MX_I2S2_Init+0x50>)
 80010ca:	4a0c      	ldr	r2, [pc, #48]	; (80010fc <MX_I2S2_Init+0x58>)
 80010cc:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 80010ce:	4b09      	ldr	r3, [pc, #36]	; (80010f4 <MX_I2S2_Init+0x50>)
 80010d0:	2200      	movs	r2, #0
 80010d2:	619a      	str	r2, [r3, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 80010d4:	4b07      	ldr	r3, [pc, #28]	; (80010f4 <MX_I2S2_Init+0x50>)
 80010d6:	2200      	movs	r2, #0
 80010d8:	61da      	str	r2, [r3, #28]
  hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_ENABLE;
 80010da:	4b06      	ldr	r3, [pc, #24]	; (80010f4 <MX_I2S2_Init+0x50>)
 80010dc:	2201      	movs	r2, #1
 80010de:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 80010e0:	4804      	ldr	r0, [pc, #16]	; (80010f4 <MX_I2S2_Init+0x50>)
 80010e2:	f002 fe75 	bl	8003dd0 <HAL_I2S_Init>
 80010e6:	4603      	mov	r3, r0
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d001      	beq.n	80010f0 <MX_I2S2_Init+0x4c>
  {
    Error_Handler();
 80010ec:	f000 fb18 	bl	8001720 <Error_Handler>
  }

}
 80010f0:	bf00      	nop
 80010f2:	bd80      	pop	{r7, pc}
 80010f4:	20000730 	.word	0x20000730
 80010f8:	40003800 	.word	0x40003800
 80010fc:	00017700 	.word	0x00017700

08001100 <MX_I2S3_Init>:
/* I2S3 init function */
void MX_I2S3_Init(void)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	af00      	add	r7, sp, #0

  hi2s3.Instance = SPI3;
 8001104:	4b13      	ldr	r3, [pc, #76]	; (8001154 <MX_I2S3_Init+0x54>)
 8001106:	4a14      	ldr	r2, [pc, #80]	; (8001158 <MX_I2S3_Init+0x58>)
 8001108:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 800110a:	4b12      	ldr	r3, [pc, #72]	; (8001154 <MX_I2S3_Init+0x54>)
 800110c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001110:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8001112:	4b10      	ldr	r3, [pc, #64]	; (8001154 <MX_I2S3_Init+0x54>)
 8001114:	2200      	movs	r2, #0
 8001116:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_24B;
 8001118:	4b0e      	ldr	r3, [pc, #56]	; (8001154 <MX_I2S3_Init+0x54>)
 800111a:	2203      	movs	r2, #3
 800111c:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 800111e:	4b0d      	ldr	r3, [pc, #52]	; (8001154 <MX_I2S3_Init+0x54>)
 8001120:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001124:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_48K;
 8001126:	4b0b      	ldr	r3, [pc, #44]	; (8001154 <MX_I2S3_Init+0x54>)
 8001128:	f64b 3280 	movw	r2, #48000	; 0xbb80
 800112c:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 800112e:	4b09      	ldr	r3, [pc, #36]	; (8001154 <MX_I2S3_Init+0x54>)
 8001130:	2200      	movs	r2, #0
 8001132:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8001134:	4b07      	ldr	r3, [pc, #28]	; (8001154 <MX_I2S3_Init+0x54>)
 8001136:	2200      	movs	r2, #0
 8001138:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 800113a:	4b06      	ldr	r3, [pc, #24]	; (8001154 <MX_I2S3_Init+0x54>)
 800113c:	2200      	movs	r2, #0
 800113e:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8001140:	4804      	ldr	r0, [pc, #16]	; (8001154 <MX_I2S3_Init+0x54>)
 8001142:	f002 fe45 	bl	8003dd0 <HAL_I2S_Init>
 8001146:	4603      	mov	r3, r0
 8001148:	2b00      	cmp	r3, #0
 800114a:	d001      	beq.n	8001150 <MX_I2S3_Init+0x50>
  {
    Error_Handler();
 800114c:	f000 fae8 	bl	8001720 <Error_Handler>
  }

}
 8001150:	bf00      	nop
 8001152:	bd80      	pop	{r7, pc}
 8001154:	20000778 	.word	0x20000778
 8001158:	40003c00 	.word	0x40003c00

0800115c <HAL_I2S_MspInit>:

void HAL_I2S_MspInit(I2S_HandleTypeDef* i2sHandle)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b08e      	sub	sp, #56	; 0x38
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001164:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001168:	2200      	movs	r2, #0
 800116a:	601a      	str	r2, [r3, #0]
 800116c:	605a      	str	r2, [r3, #4]
 800116e:	609a      	str	r2, [r3, #8]
 8001170:	60da      	str	r2, [r3, #12]
 8001172:	611a      	str	r2, [r3, #16]
  if(i2sHandle->Instance==SPI2)
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	4a79      	ldr	r2, [pc, #484]	; (8001360 <HAL_I2S_MspInit+0x204>)
 800117a:	4293      	cmp	r3, r2
 800117c:	d163      	bne.n	8001246 <HAL_I2S_MspInit+0xea>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* I2S2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800117e:	2300      	movs	r3, #0
 8001180:	623b      	str	r3, [r7, #32]
 8001182:	4b78      	ldr	r3, [pc, #480]	; (8001364 <HAL_I2S_MspInit+0x208>)
 8001184:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001186:	4a77      	ldr	r2, [pc, #476]	; (8001364 <HAL_I2S_MspInit+0x208>)
 8001188:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800118c:	6413      	str	r3, [r2, #64]	; 0x40
 800118e:	4b75      	ldr	r3, [pc, #468]	; (8001364 <HAL_I2S_MspInit+0x208>)
 8001190:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001192:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001196:	623b      	str	r3, [r7, #32]
 8001198:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800119a:	2300      	movs	r3, #0
 800119c:	61fb      	str	r3, [r7, #28]
 800119e:	4b71      	ldr	r3, [pc, #452]	; (8001364 <HAL_I2S_MspInit+0x208>)
 80011a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011a2:	4a70      	ldr	r2, [pc, #448]	; (8001364 <HAL_I2S_MspInit+0x208>)
 80011a4:	f043 0304 	orr.w	r3, r3, #4
 80011a8:	6313      	str	r3, [r2, #48]	; 0x30
 80011aa:	4b6e      	ldr	r3, [pc, #440]	; (8001364 <HAL_I2S_MspInit+0x208>)
 80011ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ae:	f003 0304 	and.w	r3, r3, #4
 80011b2:	61fb      	str	r3, [r7, #28]
 80011b4:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011b6:	2300      	movs	r3, #0
 80011b8:	61bb      	str	r3, [r7, #24]
 80011ba:	4b6a      	ldr	r3, [pc, #424]	; (8001364 <HAL_I2S_MspInit+0x208>)
 80011bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011be:	4a69      	ldr	r2, [pc, #420]	; (8001364 <HAL_I2S_MspInit+0x208>)
 80011c0:	f043 0302 	orr.w	r3, r3, #2
 80011c4:	6313      	str	r3, [r2, #48]	; 0x30
 80011c6:	4b67      	ldr	r3, [pc, #412]	; (8001364 <HAL_I2S_MspInit+0x208>)
 80011c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ca:	f003 0302 	and.w	r3, r3, #2
 80011ce:	61bb      	str	r3, [r7, #24]
 80011d0:	69bb      	ldr	r3, [r7, #24]
    PC2     ------> I2S2_ext_SD
    PC3     ------> I2S2_SD
    PB10     ------> I2S2_CK
    PB12     ------> I2S2_WS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80011d2:	2304      	movs	r3, #4
 80011d4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011d6:	2302      	movs	r3, #2
 80011d8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011da:	2300      	movs	r3, #0
 80011dc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011de:	2300      	movs	r3, #0
 80011e0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_I2S2ext;
 80011e2:	2306      	movs	r3, #6
 80011e4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011ea:	4619      	mov	r1, r3
 80011ec:	485e      	ldr	r0, [pc, #376]	; (8001368 <HAL_I2S_MspInit+0x20c>)
 80011ee:	f001 fb03 	bl	80027f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = PDM_OUT_Pin;
 80011f2:	2308      	movs	r3, #8
 80011f4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011f6:	2302      	movs	r3, #2
 80011f8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011fa:	2300      	movs	r3, #0
 80011fc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011fe:	2300      	movs	r3, #0
 8001200:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001202:	2305      	movs	r3, #5
 8001204:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8001206:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800120a:	4619      	mov	r1, r3
 800120c:	4856      	ldr	r0, [pc, #344]	; (8001368 <HAL_I2S_MspInit+0x20c>)
 800120e:	f001 faf3 	bl	80027f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CLK_IN_Pin|GPIO_PIN_12;
 8001212:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001216:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001218:	2302      	movs	r3, #2
 800121a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800121c:	2300      	movs	r3, #0
 800121e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001220:	2300      	movs	r3, #0
 8001222:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001224:	2305      	movs	r3, #5
 8001226:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001228:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800122c:	4619      	mov	r1, r3
 800122e:	484f      	ldr	r0, [pc, #316]	; (800136c <HAL_I2S_MspInit+0x210>)
 8001230:	f001 fae2 	bl	80027f8 <HAL_GPIO_Init>

    /* I2S2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 8001234:	2200      	movs	r2, #0
 8001236:	2100      	movs	r1, #0
 8001238:	2024      	movs	r0, #36	; 0x24
 800123a:	f000 fd79 	bl	8001d30 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 800123e:	2024      	movs	r0, #36	; 0x24
 8001240:	f000 fda2 	bl	8001d88 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8001244:	e088      	b.n	8001358 <HAL_I2S_MspInit+0x1fc>
  else if(i2sHandle->Instance==SPI3)
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	4a49      	ldr	r2, [pc, #292]	; (8001370 <HAL_I2S_MspInit+0x214>)
 800124c:	4293      	cmp	r3, r2
 800124e:	f040 8083 	bne.w	8001358 <HAL_I2S_MspInit+0x1fc>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001252:	2300      	movs	r3, #0
 8001254:	617b      	str	r3, [r7, #20]
 8001256:	4b43      	ldr	r3, [pc, #268]	; (8001364 <HAL_I2S_MspInit+0x208>)
 8001258:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800125a:	4a42      	ldr	r2, [pc, #264]	; (8001364 <HAL_I2S_MspInit+0x208>)
 800125c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001260:	6413      	str	r3, [r2, #64]	; 0x40
 8001262:	4b40      	ldr	r3, [pc, #256]	; (8001364 <HAL_I2S_MspInit+0x208>)
 8001264:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001266:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800126a:	617b      	str	r3, [r7, #20]
 800126c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800126e:	2300      	movs	r3, #0
 8001270:	613b      	str	r3, [r7, #16]
 8001272:	4b3c      	ldr	r3, [pc, #240]	; (8001364 <HAL_I2S_MspInit+0x208>)
 8001274:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001276:	4a3b      	ldr	r2, [pc, #236]	; (8001364 <HAL_I2S_MspInit+0x208>)
 8001278:	f043 0301 	orr.w	r3, r3, #1
 800127c:	6313      	str	r3, [r2, #48]	; 0x30
 800127e:	4b39      	ldr	r3, [pc, #228]	; (8001364 <HAL_I2S_MspInit+0x208>)
 8001280:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001282:	f003 0301 	and.w	r3, r3, #1
 8001286:	613b      	str	r3, [r7, #16]
 8001288:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800128a:	2300      	movs	r3, #0
 800128c:	60fb      	str	r3, [r7, #12]
 800128e:	4b35      	ldr	r3, [pc, #212]	; (8001364 <HAL_I2S_MspInit+0x208>)
 8001290:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001292:	4a34      	ldr	r2, [pc, #208]	; (8001364 <HAL_I2S_MspInit+0x208>)
 8001294:	f043 0304 	orr.w	r3, r3, #4
 8001298:	6313      	str	r3, [r2, #48]	; 0x30
 800129a:	4b32      	ldr	r3, [pc, #200]	; (8001364 <HAL_I2S_MspInit+0x208>)
 800129c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800129e:	f003 0304 	and.w	r3, r3, #4
 80012a2:	60fb      	str	r3, [r7, #12]
 80012a4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 80012a6:	2310      	movs	r3, #16
 80012a8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012aa:	2302      	movs	r3, #2
 80012ac:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ae:	2300      	movs	r3, #0
 80012b0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012b2:	2300      	movs	r3, #0
 80012b4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80012b6:	2306      	movs	r3, #6
 80012b8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 80012ba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012be:	4619      	mov	r1, r3
 80012c0:	482c      	ldr	r0, [pc, #176]	; (8001374 <HAL_I2S_MspInit+0x218>)
 80012c2:	f001 fa99 	bl	80027f8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 80012c6:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 80012ca:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012cc:	2302      	movs	r3, #2
 80012ce:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012d0:	2300      	movs	r3, #0
 80012d2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012d4:	2300      	movs	r3, #0
 80012d6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80012d8:	2306      	movs	r3, #6
 80012da:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012dc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012e0:	4619      	mov	r1, r3
 80012e2:	4821      	ldr	r0, [pc, #132]	; (8001368 <HAL_I2S_MspInit+0x20c>)
 80012e4:	f001 fa88 	bl	80027f8 <HAL_GPIO_Init>
    hdma_spi3_tx.Instance = DMA1_Stream5;
 80012e8:	4b23      	ldr	r3, [pc, #140]	; (8001378 <HAL_I2S_MspInit+0x21c>)
 80012ea:	4a24      	ldr	r2, [pc, #144]	; (800137c <HAL_I2S_MspInit+0x220>)
 80012ec:	601a      	str	r2, [r3, #0]
    hdma_spi3_tx.Init.Channel = DMA_CHANNEL_0;
 80012ee:	4b22      	ldr	r3, [pc, #136]	; (8001378 <HAL_I2S_MspInit+0x21c>)
 80012f0:	2200      	movs	r2, #0
 80012f2:	605a      	str	r2, [r3, #4]
    hdma_spi3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80012f4:	4b20      	ldr	r3, [pc, #128]	; (8001378 <HAL_I2S_MspInit+0x21c>)
 80012f6:	2240      	movs	r2, #64	; 0x40
 80012f8:	609a      	str	r2, [r3, #8]
    hdma_spi3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80012fa:	4b1f      	ldr	r3, [pc, #124]	; (8001378 <HAL_I2S_MspInit+0x21c>)
 80012fc:	2200      	movs	r2, #0
 80012fe:	60da      	str	r2, [r3, #12]
    hdma_spi3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001300:	4b1d      	ldr	r3, [pc, #116]	; (8001378 <HAL_I2S_MspInit+0x21c>)
 8001302:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001306:	611a      	str	r2, [r3, #16]
    hdma_spi3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001308:	4b1b      	ldr	r3, [pc, #108]	; (8001378 <HAL_I2S_MspInit+0x21c>)
 800130a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800130e:	615a      	str	r2, [r3, #20]
    hdma_spi3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001310:	4b19      	ldr	r3, [pc, #100]	; (8001378 <HAL_I2S_MspInit+0x21c>)
 8001312:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001316:	619a      	str	r2, [r3, #24]
    hdma_spi3_tx.Init.Mode = DMA_CIRCULAR;
 8001318:	4b17      	ldr	r3, [pc, #92]	; (8001378 <HAL_I2S_MspInit+0x21c>)
 800131a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800131e:	61da      	str	r2, [r3, #28]
    hdma_spi3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001320:	4b15      	ldr	r3, [pc, #84]	; (8001378 <HAL_I2S_MspInit+0x21c>)
 8001322:	2200      	movs	r2, #0
 8001324:	621a      	str	r2, [r3, #32]
    hdma_spi3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001326:	4b14      	ldr	r3, [pc, #80]	; (8001378 <HAL_I2S_MspInit+0x21c>)
 8001328:	2200      	movs	r2, #0
 800132a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi3_tx) != HAL_OK)
 800132c:	4812      	ldr	r0, [pc, #72]	; (8001378 <HAL_I2S_MspInit+0x21c>)
 800132e:	f000 fd79 	bl	8001e24 <HAL_DMA_Init>
 8001332:	4603      	mov	r3, r0
 8001334:	2b00      	cmp	r3, #0
 8001336:	d001      	beq.n	800133c <HAL_I2S_MspInit+0x1e0>
      Error_Handler();
 8001338:	f000 f9f2 	bl	8001720 <Error_Handler>
    __HAL_LINKDMA(i2sHandle,hdmatx,hdma_spi3_tx);
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	4a0e      	ldr	r2, [pc, #56]	; (8001378 <HAL_I2S_MspInit+0x21c>)
 8001340:	639a      	str	r2, [r3, #56]	; 0x38
 8001342:	4a0d      	ldr	r2, [pc, #52]	; (8001378 <HAL_I2S_MspInit+0x21c>)
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(SPI3_IRQn, 0, 0);
 8001348:	2200      	movs	r2, #0
 800134a:	2100      	movs	r1, #0
 800134c:	2033      	movs	r0, #51	; 0x33
 800134e:	f000 fcef 	bl	8001d30 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
 8001352:	2033      	movs	r0, #51	; 0x33
 8001354:	f000 fd18 	bl	8001d88 <HAL_NVIC_EnableIRQ>
}
 8001358:	bf00      	nop
 800135a:	3738      	adds	r7, #56	; 0x38
 800135c:	46bd      	mov	sp, r7
 800135e:	bd80      	pop	{r7, pc}
 8001360:	40003800 	.word	0x40003800
 8001364:	40023800 	.word	0x40023800
 8001368:	40020800 	.word	0x40020800
 800136c:	40020400 	.word	0x40020400
 8001370:	40003c00 	.word	0x40003c00
 8001374:	40020000 	.word	0x40020000
 8001378:	200006d0 	.word	0x200006d0
 800137c:	40026088 	.word	0x40026088

08001380 <itoa2>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int itoa2(uint16_t value,char *ptr)
     {
 8001380:	b480      	push	{r7}
 8001382:	b085      	sub	sp, #20
 8001384:	af00      	add	r7, sp, #0
 8001386:	4603      	mov	r3, r0
 8001388:	6039      	str	r1, [r7, #0]
 800138a:	80fb      	strh	r3, [r7, #6]

        int count=0,temp = value;
 800138c:	2300      	movs	r3, #0
 800138e:	60fb      	str	r3, [r7, #12]
 8001390:	88fb      	ldrh	r3, [r7, #6]
 8001392:	60bb      	str	r3, [r7, #8]
        if(value==0)
 8001394:	88fb      	ldrh	r3, [r7, #6]
 8001396:	2b00      	cmp	r3, #0
 8001398:	d104      	bne.n	80013a4 <itoa2+0x24>
        {
            *ptr='0';
 800139a:	683b      	ldr	r3, [r7, #0]
 800139c:	2230      	movs	r2, #48	; 0x30
 800139e:	701a      	strb	r2, [r3, #0]
            return 1;
 80013a0:	2301      	movs	r3, #1
 80013a2:	e043      	b.n	800142c <itoa2+0xac>
        {
            value*=(-1);
            *ptr++='-';
            count++;
        }
        for(temp=value;temp>0;temp/=10,ptr++);
 80013a4:	88fb      	ldrh	r3, [r7, #6]
 80013a6:	60bb      	str	r3, [r7, #8]
 80013a8:	e00a      	b.n	80013c0 <itoa2+0x40>
 80013aa:	68bb      	ldr	r3, [r7, #8]
 80013ac:	4a22      	ldr	r2, [pc, #136]	; (8001438 <itoa2+0xb8>)
 80013ae:	fb82 1203 	smull	r1, r2, r2, r3
 80013b2:	1092      	asrs	r2, r2, #2
 80013b4:	17db      	asrs	r3, r3, #31
 80013b6:	1ad3      	subs	r3, r2, r3
 80013b8:	60bb      	str	r3, [r7, #8]
 80013ba:	683b      	ldr	r3, [r7, #0]
 80013bc:	3301      	adds	r3, #1
 80013be:	603b      	str	r3, [r7, #0]
 80013c0:	68bb      	ldr	r3, [r7, #8]
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	dcf1      	bgt.n	80013aa <itoa2+0x2a>
           *ptr=',';
 80013c6:	683b      	ldr	r3, [r7, #0]
 80013c8:	222c      	movs	r2, #44	; 0x2c
 80013ca:	701a      	strb	r2, [r3, #0]
           *ptr++;
 80013cc:	683b      	ldr	r3, [r7, #0]
 80013ce:	3301      	adds	r3, #1
 80013d0:	603b      	str	r3, [r7, #0]
           *ptr='\0';
 80013d2:	683b      	ldr	r3, [r7, #0]
 80013d4:	2200      	movs	r2, #0
 80013d6:	701a      	strb	r2, [r3, #0]
           *ptr--;
 80013d8:	683b      	ldr	r3, [r7, #0]
 80013da:	3b01      	subs	r3, #1
 80013dc:	603b      	str	r3, [r7, #0]
           for(temp=value;temp>0;temp/=10)
 80013de:	88fb      	ldrh	r3, [r7, #6]
 80013e0:	60bb      	str	r3, [r7, #8]
 80013e2:	e01e      	b.n	8001422 <itoa2+0xa2>
        {
            *--ptr=temp%10+'0';
 80013e4:	68ba      	ldr	r2, [r7, #8]
 80013e6:	4b14      	ldr	r3, [pc, #80]	; (8001438 <itoa2+0xb8>)
 80013e8:	fb83 1302 	smull	r1, r3, r3, r2
 80013ec:	1099      	asrs	r1, r3, #2
 80013ee:	17d3      	asrs	r3, r2, #31
 80013f0:	1ac9      	subs	r1, r1, r3
 80013f2:	460b      	mov	r3, r1
 80013f4:	009b      	lsls	r3, r3, #2
 80013f6:	440b      	add	r3, r1
 80013f8:	005b      	lsls	r3, r3, #1
 80013fa:	1ad1      	subs	r1, r2, r3
 80013fc:	b2cb      	uxtb	r3, r1
 80013fe:	683a      	ldr	r2, [r7, #0]
 8001400:	3a01      	subs	r2, #1
 8001402:	603a      	str	r2, [r7, #0]
 8001404:	3330      	adds	r3, #48	; 0x30
 8001406:	b2da      	uxtb	r2, r3
 8001408:	683b      	ldr	r3, [r7, #0]
 800140a:	701a      	strb	r2, [r3, #0]
            count++;
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	3301      	adds	r3, #1
 8001410:	60fb      	str	r3, [r7, #12]
           for(temp=value;temp>0;temp/=10)
 8001412:	68bb      	ldr	r3, [r7, #8]
 8001414:	4a08      	ldr	r2, [pc, #32]	; (8001438 <itoa2+0xb8>)
 8001416:	fb82 1203 	smull	r1, r2, r2, r3
 800141a:	1092      	asrs	r2, r2, #2
 800141c:	17db      	asrs	r3, r3, #31
 800141e:	1ad3      	subs	r3, r2, r3
 8001420:	60bb      	str	r3, [r7, #8]
 8001422:	68bb      	ldr	r3, [r7, #8]
 8001424:	2b00      	cmp	r3, #0
 8001426:	dcdd      	bgt.n	80013e4 <itoa2+0x64>
        }
        return count+1;
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	3301      	adds	r3, #1
     }
 800142c:	4618      	mov	r0, r3
 800142e:	3714      	adds	r7, #20
 8001430:	46bd      	mov	sp, r7
 8001432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001436:	4770      	bx	lr
 8001438:	66666667 	.word	0x66666667

0800143c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800143c:	b590      	push	{r4, r7, lr}
 800143e:	f5ad 7d3f 	sub.w	sp, sp, #764	; 0x2fc
 8001442:	af12      	add	r7, sp, #72	; 0x48
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001444:	f000 faf0 	bl	8001a28 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001448:	f000 f8b6 	bl	80015b8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800144c:	f7ff fcda 	bl	8000e04 <MX_GPIO_Init>
  MX_DMA_Init();
 8001450:	f7ff fcb8 	bl	8000dc4 <MX_DMA_Init>
  MX_I2C1_Init();
 8001454:	f7ff fdb0 	bl	8000fb8 <MX_I2C1_Init>
  MX_I2S2_Init();
 8001458:	f7ff fe24 	bl	80010a4 <MX_I2S2_Init>
  MX_I2S3_Init();
 800145c:	f7ff fe50 	bl	8001100 <MX_I2S3_Init>
  MX_SPI1_Init();
 8001460:	f000 f970 	bl	8001744 <MX_SPI1_Init>
  MX_CRC_Init();
 8001464:	f7ff fa44 	bl	80008f0 <MX_CRC_Init>
  MX_PDM2PCM_Init();
 8001468:	f008 fe22 	bl	800a0b0 <MX_PDM2PCM_Init>
  MX_USB_DEVICE_Init();
 800146c:	f008 fe4a 	bl	800a104 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
	CS43_Init(hi2c1,MODE_I2S);
 8001470:	4c4b      	ldr	r4, [pc, #300]	; (80015a0 <main+0x164>)
 8001472:	2300      	movs	r3, #0
 8001474:	9311      	str	r3, [sp, #68]	; 0x44
 8001476:	4668      	mov	r0, sp
 8001478:	f104 0310 	add.w	r3, r4, #16
 800147c:	2244      	movs	r2, #68	; 0x44
 800147e:	4619      	mov	r1, r3
 8001480:	f00b faa4 	bl	800c9cc <memcpy>
 8001484:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001488:	f7ff faa8 	bl	80009dc <CS43_Init>
	CS43_SetVolume(60);//70
 800148c:	203c      	movs	r0, #60	; 0x3c
 800148e:	f7ff fc15 	bl	8000cbc <CS43_SetVolume>
	CS43_Enable_RightLeft(CS43_RIGHT_LEFT);
 8001492:	2003      	movs	r0, #3
 8001494:	f7ff fbb6 	bl	8000c04 <CS43_Enable_RightLeft>
	CS43_Start();
 8001498:	f7ff fc52 	bl	8000d40 <CS43_Start>
  //HAL_I2S_Transmit_DMA(&hi2s3, &txBuf[0], 64);// 64-32 bit frames to external i2s DAC
  HAL_I2S_Receive_DMA(&hi2s2, &pdmRxBuf[0],64);//64-32 bit frames from PDM microphone
 800149c:	2240      	movs	r2, #64	; 0x40
 800149e:	4941      	ldr	r1, [pc, #260]	; (80015a4 <main+0x168>)
 80014a0:	4841      	ldr	r0, [pc, #260]	; (80015a8 <main+0x16c>)
 80014a2:	f002 ff5d 	bl	8004360 <HAL_I2S_Receive_DMA>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  const char str[] = "Hello!\n";
 80014a6:	4a41      	ldr	r2, [pc, #260]	; (80015ac <main+0x170>)
 80014a8:	f507 7325 	add.w	r3, r7, #660	; 0x294
 80014ac:	e892 0003 	ldmia.w	r2, {r0, r1}
 80014b0:	e883 0003 	stmia.w	r3, {r0, r1}
  uint16_t data_in[128];
  int rxIter = 0;
 80014b4:	2300      	movs	r3, #0
 80014b6:	f8c7 32ac 	str.w	r3, [r7, #684]	; 0x2ac

	  HAL_Delay(500);
	*/


	  volatile HAL_StatusTypeDef result = HAL_I2S_Receive(&hi2s2, data_in,32,1000);
 80014ba:	f507 71ca 	add.w	r1, r7, #404	; 0x194
 80014be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014c2:	2220      	movs	r2, #32
 80014c4:	4838      	ldr	r0, [pc, #224]	; (80015a8 <main+0x16c>)
 80014c6:	f002 fe81 	bl	80041cc <HAL_I2S_Receive>
 80014ca:	4603      	mov	r3, r0
 80014cc:	461a      	mov	r2, r3
 80014ce:	f207 1393 	addw	r3, r7, #403	; 0x193
 80014d2:	701a      	strb	r2, [r3, #0]
	  if (result == HAL_OK) {
 80014d4:	f207 1393 	addw	r3, r7, #403	; 0x193
 80014d8:	781b      	ldrb	r3, [r3, #0]
 80014da:	b2db      	uxtb	r3, r3
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d11a      	bne.n	8001516 <main+0xda>
		  for(int i=0;i<32;i+=2)
 80014e0:	2300      	movs	r3, #0
 80014e2:	f8c7 32a8 	str.w	r3, [r7, #680]	; 0x2a8
 80014e6:	e012      	b.n	800150e <main+0xd2>
			  pdmRxBuf[rxIter++] = (int16_t) data_in[i];
 80014e8:	f8d7 32ac 	ldr.w	r3, [r7, #684]	; 0x2ac
 80014ec:	1c5a      	adds	r2, r3, #1
 80014ee:	f8c7 22ac 	str.w	r2, [r7, #684]	; 0x2ac
 80014f2:	f507 72ca 	add.w	r2, r7, #404	; 0x194
 80014f6:	f8d7 12a8 	ldr.w	r1, [r7, #680]	; 0x2a8
 80014fa:	f832 1011 	ldrh.w	r1, [r2, r1, lsl #1]
 80014fe:	4a29      	ldr	r2, [pc, #164]	; (80015a4 <main+0x168>)
 8001500:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		  for(int i=0;i<32;i+=2)
 8001504:	f8d7 32a8 	ldr.w	r3, [r7, #680]	; 0x2a8
 8001508:	3302      	adds	r3, #2
 800150a:	f8c7 32a8 	str.w	r3, [r7, #680]	; 0x2a8
 800150e:	f8d7 32a8 	ldr.w	r3, [r7, #680]	; 0x2a8
 8001512:	2b1f      	cmp	r3, #31
 8001514:	dde8      	ble.n	80014e8 <main+0xac>

	  }



		 if (rxIter == 64*5) {//RxHalfCpltCallback
 8001516:	f8d7 32ac 	ldr.w	r3, [r7, #684]	; 0x2ac
 800151a:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 800151e:	d1cc      	bne.n	80014ba <main+0x7e>
			for(int y =0;y<64*5;y+=64){
 8001520:	2300      	movs	r3, #0
 8001522:	f8c7 32a4 	str.w	r3, [r7, #676]	; 0x2a4
 8001526:	e032      	b.n	800158e <main+0x152>
				PDM_Filter(&pdmRxBuf[y],&MidBuffer[0], &PDM1_filter_handler);//filter first 64x16bit received PDM data
 8001528:	f8d7 32a4 	ldr.w	r3, [r7, #676]	; 0x2a4
 800152c:	005b      	lsls	r3, r3, #1
 800152e:	4a1d      	ldr	r2, [pc, #116]	; (80015a4 <main+0x168>)
 8001530:	4413      	add	r3, r2
 8001532:	4a1f      	ldr	r2, [pc, #124]	; (80015b0 <main+0x174>)
 8001534:	491f      	ldr	r1, [pc, #124]	; (80015b4 <main+0x178>)
 8001536:	4618      	mov	r0, r3
 8001538:	f00b f9b4 	bl	800c8a4 <PDM_Filter>
				for (int i=0; i<16;i++) {
 800153c:	2300      	movs	r3, #0
 800153e:	f8c7 32a0 	str.w	r3, [r7, #672]	; 0x2a0
 8001542:	e01b      	b.n	800157c <main+0x140>
					  char *c[100];

					  int x = itoa2(MidBuffer[i],c);
 8001544:	4a1b      	ldr	r2, [pc, #108]	; (80015b4 <main+0x178>)
 8001546:	f8d7 32a0 	ldr.w	r3, [r7, #672]	; 0x2a0
 800154a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800154e:	463a      	mov	r2, r7
 8001550:	4611      	mov	r1, r2
 8001552:	4618      	mov	r0, r3
 8001554:	f7ff ff14 	bl	8001380 <itoa2>
 8001558:	f8c7 029c 	str.w	r0, [r7, #668]	; 0x29c
					  //c[x] = ',';
					  //c[x+1] = '\0';
					  CDC_Transmit_FS(c,x);
 800155c:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 8001560:	b29a      	uxth	r2, r3
 8001562:	463b      	mov	r3, r7
 8001564:	4611      	mov	r1, r2
 8001566:	4618      	mov	r0, r3
 8001568:	f008 fe8a 	bl	800a280 <CDC_Transmit_FS>
					  HAL_Delay(5);
 800156c:	2005      	movs	r0, #5
 800156e:	f000 facd 	bl	8001b0c <HAL_Delay>
				for (int i=0; i<16;i++) {
 8001572:	f8d7 32a0 	ldr.w	r3, [r7, #672]	; 0x2a0
 8001576:	3301      	adds	r3, #1
 8001578:	f8c7 32a0 	str.w	r3, [r7, #672]	; 0x2a0
 800157c:	f8d7 32a0 	ldr.w	r3, [r7, #672]	; 0x2a0
 8001580:	2b0f      	cmp	r3, #15
 8001582:	dddf      	ble.n	8001544 <main+0x108>
			for(int y =0;y<64*5;y+=64){
 8001584:	f8d7 32a4 	ldr.w	r3, [r7, #676]	; 0x2a4
 8001588:	3340      	adds	r3, #64	; 0x40
 800158a:	f8c7 32a4 	str.w	r3, [r7, #676]	; 0x2a4
 800158e:	f8d7 32a4 	ldr.w	r3, [r7, #676]	; 0x2a4
 8001592:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8001596:	dbc7      	blt.n	8001528 <main+0xec>
					  //CDC_Transmit_FS(", ",2);
					  //HAL_Delay(5);
				}//write PCM data to FIFO
			}
	    	rxIter = 0;
 8001598:	2300      	movs	r3, #0
 800159a:	f8c7 32ac 	str.w	r3, [r7, #684]	; 0x2ac
  {
 800159e:	e78c      	b.n	80014ba <main+0x7e>
 80015a0:	2000067c 	.word	0x2000067c
 80015a4:	200008e0 	.word	0x200008e0
 80015a8:	20000730 	.word	0x20000730
 80015ac:	0800d5d8 	.word	0x0800d5d8
 80015b0:	20001044 	.word	0x20001044
 80015b4:	200008c0 	.word	0x200008c0

080015b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b09a      	sub	sp, #104	; 0x68
 80015bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80015be:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80015c2:	2230      	movs	r2, #48	; 0x30
 80015c4:	2100      	movs	r1, #0
 80015c6:	4618      	mov	r0, r3
 80015c8:	f00b fa0b 	bl	800c9e2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80015cc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015d0:	2200      	movs	r2, #0
 80015d2:	601a      	str	r2, [r3, #0]
 80015d4:	605a      	str	r2, [r3, #4]
 80015d6:	609a      	str	r2, [r3, #8]
 80015d8:	60da      	str	r2, [r3, #12]
 80015da:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80015dc:	f107 030c 	add.w	r3, r7, #12
 80015e0:	2200      	movs	r2, #0
 80015e2:	601a      	str	r2, [r3, #0]
 80015e4:	605a      	str	r2, [r3, #4]
 80015e6:	609a      	str	r2, [r3, #8]
 80015e8:	60da      	str	r2, [r3, #12]
 80015ea:	611a      	str	r2, [r3, #16]
 80015ec:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80015ee:	2300      	movs	r3, #0
 80015f0:	60bb      	str	r3, [r7, #8]
 80015f2:	4b31      	ldr	r3, [pc, #196]	; (80016b8 <SystemClock_Config+0x100>)
 80015f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015f6:	4a30      	ldr	r2, [pc, #192]	; (80016b8 <SystemClock_Config+0x100>)
 80015f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015fc:	6413      	str	r3, [r2, #64]	; 0x40
 80015fe:	4b2e      	ldr	r3, [pc, #184]	; (80016b8 <SystemClock_Config+0x100>)
 8001600:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001602:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001606:	60bb      	str	r3, [r7, #8]
 8001608:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800160a:	2300      	movs	r3, #0
 800160c:	607b      	str	r3, [r7, #4]
 800160e:	4b2b      	ldr	r3, [pc, #172]	; (80016bc <SystemClock_Config+0x104>)
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	4a2a      	ldr	r2, [pc, #168]	; (80016bc <SystemClock_Config+0x104>)
 8001614:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001618:	6013      	str	r3, [r2, #0]
 800161a:	4b28      	ldr	r3, [pc, #160]	; (80016bc <SystemClock_Config+0x104>)
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001622:	607b      	str	r3, [r7, #4]
 8001624:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001626:	2301      	movs	r3, #1
 8001628:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800162a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800162e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001630:	2302      	movs	r3, #2
 8001632:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001634:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001638:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLM = 4;
 800163a:	2304      	movs	r3, #4
 800163c:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLN = 192;
 800163e:	23c0      	movs	r3, #192	; 0xc0
 8001640:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001642:	2304      	movs	r3, #4
 8001644:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8001646:	2308      	movs	r3, #8
 8001648:	667b      	str	r3, [r7, #100]	; 0x64
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800164a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800164e:	4618      	mov	r0, r3
 8001650:	f004 fcb6 	bl	8005fc0 <HAL_RCC_OscConfig>
 8001654:	4603      	mov	r3, r0
 8001656:	2b00      	cmp	r3, #0
 8001658:	d001      	beq.n	800165e <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800165a:	f000 f861 	bl	8001720 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800165e:	230f      	movs	r3, #15
 8001660:	627b      	str	r3, [r7, #36]	; 0x24
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001662:	2302      	movs	r3, #2
 8001664:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001666:	2300      	movs	r3, #0
 8001668:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800166a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800166e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001670:	2300      	movs	r3, #0
 8001672:	637b      	str	r3, [r7, #52]	; 0x34

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001674:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001678:	2103      	movs	r1, #3
 800167a:	4618      	mov	r0, r3
 800167c:	f004 ffc0 	bl	8006600 <HAL_RCC_ClockConfig>
 8001680:	4603      	mov	r3, r0
 8001682:	2b00      	cmp	r3, #0
 8001684:	d001      	beq.n	800168a <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8001686:	f000 f84b 	bl	8001720 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 800168a:	2301      	movs	r3, #1
 800168c:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 200;
 800168e:	23c8      	movs	r3, #200	; 0xc8
 8001690:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLLI2S.PLLI2SM = 5;
 8001692:	2305      	movs	r3, #5
 8001694:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8001696:	2302      	movs	r3, #2
 8001698:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800169a:	f107 030c 	add.w	r3, r7, #12
 800169e:	4618      	mov	r0, r3
 80016a0:	f005 fa34 	bl	8006b0c <HAL_RCCEx_PeriphCLKConfig>
 80016a4:	4603      	mov	r3, r0
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d001      	beq.n	80016ae <SystemClock_Config+0xf6>
  {
    Error_Handler();
 80016aa:	f000 f839 	bl	8001720 <Error_Handler>
  }
}
 80016ae:	bf00      	nop
 80016b0:	3768      	adds	r7, #104	; 0x68
 80016b2:	46bd      	mov	sp, r7
 80016b4:	bd80      	pop	{r7, pc}
 80016b6:	bf00      	nop
 80016b8:	40023800 	.word	0x40023800
 80016bc:	40007000 	.word	0x40007000

080016c0 <HAL_I2S_TxCpltCallback>:
/* USER CODE BEGIN 4 */
void HAL_I2S_TxHalfCpltCallback (I2S_HandleTypeDef *hi2s) {
	txstate = 1;
}

void HAL_I2S_TxCpltCallback (I2S_HandleTypeDef *hi2s) {
 80016c0:	b480      	push	{r7}
 80016c2:	b083      	sub	sp, #12
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
	txstate = 2;
 80016c8:	4b04      	ldr	r3, [pc, #16]	; (80016dc <HAL_I2S_TxCpltCallback+0x1c>)
 80016ca:	2202      	movs	r2, #2
 80016cc:	701a      	strb	r2, [r3, #0]
}
 80016ce:	bf00      	nop
 80016d0:	370c      	adds	r7, #12
 80016d2:	46bd      	mov	sp, r7
 80016d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d8:	4770      	bx	lr
 80016da:	bf00      	nop
 80016dc:	20000660 	.word	0x20000660

080016e0 <HAL_I2S_RxHalfCpltCallback>:

void HAL_I2S_RxHalfCpltCallback (I2S_HandleTypeDef *hi2s) {
 80016e0:	b480      	push	{r7}
 80016e2:	b083      	sub	sp, #12
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
	rxstate = 1;
 80016e8:	4b04      	ldr	r3, [pc, #16]	; (80016fc <HAL_I2S_RxHalfCpltCallback+0x1c>)
 80016ea:	2201      	movs	r2, #1
 80016ec:	701a      	strb	r2, [r3, #0]
}
 80016ee:	bf00      	nop
 80016f0:	370c      	adds	r7, #12
 80016f2:	46bd      	mov	sp, r7
 80016f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f8:	4770      	bx	lr
 80016fa:	bf00      	nop
 80016fc:	20000661 	.word	0x20000661

08001700 <HAL_I2S_RxCpltCallback>:

void HAL_I2S_RxCpltCallback (I2S_HandleTypeDef *hi2s) {
 8001700:	b480      	push	{r7}
 8001702:	b083      	sub	sp, #12
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
	rxstate = 2;
 8001708:	4b04      	ldr	r3, [pc, #16]	; (800171c <HAL_I2S_RxCpltCallback+0x1c>)
 800170a:	2202      	movs	r2, #2
 800170c:	701a      	strb	r2, [r3, #0]
}
 800170e:	bf00      	nop
 8001710:	370c      	adds	r7, #12
 8001712:	46bd      	mov	sp, r7
 8001714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001718:	4770      	bx	lr
 800171a:	bf00      	nop
 800171c:	20000661 	.word	0x20000661

08001720 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001720:	b480      	push	{r7}
 8001722:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001724:	bf00      	nop
 8001726:	46bd      	mov	sp, r7
 8001728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172c:	4770      	bx	lr

0800172e <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
 800172e:	b480      	push	{r7}
 8001730:	b083      	sub	sp, #12
 8001732:	af00      	add	r7, sp, #0
 8001734:	6078      	str	r0, [r7, #4]
 8001736:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     tex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
 8001738:	bf00      	nop
 800173a:	370c      	adds	r7, #12
 800173c:	46bd      	mov	sp, r7
 800173e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001742:	4770      	bx	lr

08001744 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	af00      	add	r7, sp, #0

  hspi1.Instance = SPI1;
 8001748:	4b17      	ldr	r3, [pc, #92]	; (80017a8 <MX_SPI1_Init+0x64>)
 800174a:	4a18      	ldr	r2, [pc, #96]	; (80017ac <MX_SPI1_Init+0x68>)
 800174c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800174e:	4b16      	ldr	r3, [pc, #88]	; (80017a8 <MX_SPI1_Init+0x64>)
 8001750:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001754:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001756:	4b14      	ldr	r3, [pc, #80]	; (80017a8 <MX_SPI1_Init+0x64>)
 8001758:	2200      	movs	r2, #0
 800175a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800175c:	4b12      	ldr	r3, [pc, #72]	; (80017a8 <MX_SPI1_Init+0x64>)
 800175e:	2200      	movs	r2, #0
 8001760:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001762:	4b11      	ldr	r3, [pc, #68]	; (80017a8 <MX_SPI1_Init+0x64>)
 8001764:	2200      	movs	r2, #0
 8001766:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001768:	4b0f      	ldr	r3, [pc, #60]	; (80017a8 <MX_SPI1_Init+0x64>)
 800176a:	2200      	movs	r2, #0
 800176c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800176e:	4b0e      	ldr	r3, [pc, #56]	; (80017a8 <MX_SPI1_Init+0x64>)
 8001770:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001774:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001776:	4b0c      	ldr	r3, [pc, #48]	; (80017a8 <MX_SPI1_Init+0x64>)
 8001778:	2200      	movs	r2, #0
 800177a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800177c:	4b0a      	ldr	r3, [pc, #40]	; (80017a8 <MX_SPI1_Init+0x64>)
 800177e:	2200      	movs	r2, #0
 8001780:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001782:	4b09      	ldr	r3, [pc, #36]	; (80017a8 <MX_SPI1_Init+0x64>)
 8001784:	2200      	movs	r2, #0
 8001786:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001788:	4b07      	ldr	r3, [pc, #28]	; (80017a8 <MX_SPI1_Init+0x64>)
 800178a:	2200      	movs	r2, #0
 800178c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800178e:	4b06      	ldr	r3, [pc, #24]	; (80017a8 <MX_SPI1_Init+0x64>)
 8001790:	220a      	movs	r2, #10
 8001792:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001794:	4804      	ldr	r0, [pc, #16]	; (80017a8 <MX_SPI1_Init+0x64>)
 8001796:	f005 fc2b 	bl	8006ff0 <HAL_SPI_Init>
 800179a:	4603      	mov	r3, r0
 800179c:	2b00      	cmp	r3, #0
 800179e:	d001      	beq.n	80017a4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80017a0:	f7ff ffbe 	bl	8001720 <Error_Handler>
  }

}
 80017a4:	bf00      	nop
 80017a6:	bd80      	pop	{r7, pc}
 80017a8:	20000fe0 	.word	0x20000fe0
 80017ac:	40013000 	.word	0x40013000

080017b0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b08a      	sub	sp, #40	; 0x28
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017b8:	f107 0314 	add.w	r3, r7, #20
 80017bc:	2200      	movs	r2, #0
 80017be:	601a      	str	r2, [r3, #0]
 80017c0:	605a      	str	r2, [r3, #4]
 80017c2:	609a      	str	r2, [r3, #8]
 80017c4:	60da      	str	r2, [r3, #12]
 80017c6:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	4a19      	ldr	r2, [pc, #100]	; (8001834 <HAL_SPI_MspInit+0x84>)
 80017ce:	4293      	cmp	r3, r2
 80017d0:	d12b      	bne.n	800182a <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80017d2:	2300      	movs	r3, #0
 80017d4:	613b      	str	r3, [r7, #16]
 80017d6:	4b18      	ldr	r3, [pc, #96]	; (8001838 <HAL_SPI_MspInit+0x88>)
 80017d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017da:	4a17      	ldr	r2, [pc, #92]	; (8001838 <HAL_SPI_MspInit+0x88>)
 80017dc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80017e0:	6453      	str	r3, [r2, #68]	; 0x44
 80017e2:	4b15      	ldr	r3, [pc, #84]	; (8001838 <HAL_SPI_MspInit+0x88>)
 80017e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017e6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80017ea:	613b      	str	r3, [r7, #16]
 80017ec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017ee:	2300      	movs	r3, #0
 80017f0:	60fb      	str	r3, [r7, #12]
 80017f2:	4b11      	ldr	r3, [pc, #68]	; (8001838 <HAL_SPI_MspInit+0x88>)
 80017f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017f6:	4a10      	ldr	r2, [pc, #64]	; (8001838 <HAL_SPI_MspInit+0x88>)
 80017f8:	f043 0301 	orr.w	r3, r3, #1
 80017fc:	6313      	str	r3, [r2, #48]	; 0x30
 80017fe:	4b0e      	ldr	r3, [pc, #56]	; (8001838 <HAL_SPI_MspInit+0x88>)
 8001800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001802:	f003 0301 	and.w	r3, r3, #1
 8001806:	60fb      	str	r3, [r7, #12]
 8001808:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 800180a:	23e0      	movs	r3, #224	; 0xe0
 800180c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800180e:	2302      	movs	r3, #2
 8001810:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001812:	2300      	movs	r3, #0
 8001814:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001816:	2303      	movs	r3, #3
 8001818:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800181a:	2305      	movs	r3, #5
 800181c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800181e:	f107 0314 	add.w	r3, r7, #20
 8001822:	4619      	mov	r1, r3
 8001824:	4805      	ldr	r0, [pc, #20]	; (800183c <HAL_SPI_MspInit+0x8c>)
 8001826:	f000 ffe7 	bl	80027f8 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 800182a:	bf00      	nop
 800182c:	3728      	adds	r7, #40	; 0x28
 800182e:	46bd      	mov	sp, r7
 8001830:	bd80      	pop	{r7, pc}
 8001832:	bf00      	nop
 8001834:	40013000 	.word	0x40013000
 8001838:	40023800 	.word	0x40023800
 800183c:	40020000 	.word	0x40020000

08001840 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	b082      	sub	sp, #8
 8001844:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001846:	2300      	movs	r3, #0
 8001848:	607b      	str	r3, [r7, #4]
 800184a:	4b10      	ldr	r3, [pc, #64]	; (800188c <HAL_MspInit+0x4c>)
 800184c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800184e:	4a0f      	ldr	r2, [pc, #60]	; (800188c <HAL_MspInit+0x4c>)
 8001850:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001854:	6453      	str	r3, [r2, #68]	; 0x44
 8001856:	4b0d      	ldr	r3, [pc, #52]	; (800188c <HAL_MspInit+0x4c>)
 8001858:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800185a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800185e:	607b      	str	r3, [r7, #4]
 8001860:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001862:	2300      	movs	r3, #0
 8001864:	603b      	str	r3, [r7, #0]
 8001866:	4b09      	ldr	r3, [pc, #36]	; (800188c <HAL_MspInit+0x4c>)
 8001868:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800186a:	4a08      	ldr	r2, [pc, #32]	; (800188c <HAL_MspInit+0x4c>)
 800186c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001870:	6413      	str	r3, [r2, #64]	; 0x40
 8001872:	4b06      	ldr	r3, [pc, #24]	; (800188c <HAL_MspInit+0x4c>)
 8001874:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001876:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800187a:	603b      	str	r3, [r7, #0]
 800187c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800187e:	2007      	movs	r0, #7
 8001880:	f000 fa36 	bl	8001cf0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001884:	bf00      	nop
 8001886:	3708      	adds	r7, #8
 8001888:	46bd      	mov	sp, r7
 800188a:	bd80      	pop	{r7, pc}
 800188c:	40023800 	.word	0x40023800

08001890 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001890:	b480      	push	{r7}
 8001892:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001894:	bf00      	nop
 8001896:	46bd      	mov	sp, r7
 8001898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189c:	4770      	bx	lr

0800189e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800189e:	b480      	push	{r7}
 80018a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80018a2:	e7fe      	b.n	80018a2 <HardFault_Handler+0x4>

080018a4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80018a4:	b480      	push	{r7}
 80018a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80018a8:	e7fe      	b.n	80018a8 <MemManage_Handler+0x4>

080018aa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80018aa:	b480      	push	{r7}
 80018ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80018ae:	e7fe      	b.n	80018ae <BusFault_Handler+0x4>

080018b0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80018b0:	b480      	push	{r7}
 80018b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80018b4:	e7fe      	b.n	80018b4 <UsageFault_Handler+0x4>

080018b6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80018b6:	b480      	push	{r7}
 80018b8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80018ba:	bf00      	nop
 80018bc:	46bd      	mov	sp, r7
 80018be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c2:	4770      	bx	lr

080018c4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80018c4:	b480      	push	{r7}
 80018c6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80018c8:	bf00      	nop
 80018ca:	46bd      	mov	sp, r7
 80018cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d0:	4770      	bx	lr

080018d2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80018d2:	b480      	push	{r7}
 80018d4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80018d6:	bf00      	nop
 80018d8:	46bd      	mov	sp, r7
 80018da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018de:	4770      	bx	lr

080018e0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80018e4:	f000 f8f2 	bl	8001acc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80018e8:	bf00      	nop
 80018ea:	bd80      	pop	{r7, pc}

080018ec <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_tx);
 80018f0:	4802      	ldr	r0, [pc, #8]	; (80018fc <DMA1_Stream5_IRQHandler+0x10>)
 80018f2:	f000 fd19 	bl	8002328 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80018f6:	bf00      	nop
 80018f8:	bd80      	pop	{r7, pc}
 80018fa:	bf00      	nop
 80018fc:	200006d0 	.word	0x200006d0

08001900 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_I2S_IRQHandler(&hi2s2);
 8001904:	4802      	ldr	r0, [pc, #8]	; (8001910 <SPI2_IRQHandler+0x10>)
 8001906:	f002 fde7 	bl	80044d8 <HAL_I2S_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 800190a:	bf00      	nop
 800190c:	bd80      	pop	{r7, pc}
 800190e:	bf00      	nop
 8001910:	20000730 	.word	0x20000730

08001914 <SPI3_IRQHandler>:

/**
  * @brief This function handles SPI3 global interrupt.
  */
void SPI3_IRQHandler(void)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI3_IRQn 0 */

  /* USER CODE END SPI3_IRQn 0 */
  HAL_I2S_IRQHandler(&hi2s3);
 8001918:	4802      	ldr	r0, [pc, #8]	; (8001924 <SPI3_IRQHandler+0x10>)
 800191a:	f002 fddd 	bl	80044d8 <HAL_I2S_IRQHandler>
  /* USER CODE BEGIN SPI3_IRQn 1 */

  /* USER CODE END SPI3_IRQn 1 */
}
 800191e:	bf00      	nop
 8001920:	bd80      	pop	{r7, pc}
 8001922:	bf00      	nop
 8001924:	20000778 	.word	0x20000778

08001928 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 800192c:	4802      	ldr	r0, [pc, #8]	; (8001938 <OTG_FS_IRQHandler+0x10>)
 800192e:	f003 fb14 	bl	8004f5a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001932:	bf00      	nop
 8001934:	bd80      	pop	{r7, pc}
 8001936:	bf00      	nop
 8001938:	20002560 	.word	0x20002560

0800193c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	b086      	sub	sp, #24
 8001940:	af00      	add	r7, sp, #0
 8001942:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001944:	4a14      	ldr	r2, [pc, #80]	; (8001998 <_sbrk+0x5c>)
 8001946:	4b15      	ldr	r3, [pc, #84]	; (800199c <_sbrk+0x60>)
 8001948:	1ad3      	subs	r3, r2, r3
 800194a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800194c:	697b      	ldr	r3, [r7, #20]
 800194e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001950:	4b13      	ldr	r3, [pc, #76]	; (80019a0 <_sbrk+0x64>)
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	2b00      	cmp	r3, #0
 8001956:	d102      	bne.n	800195e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001958:	4b11      	ldr	r3, [pc, #68]	; (80019a0 <_sbrk+0x64>)
 800195a:	4a12      	ldr	r2, [pc, #72]	; (80019a4 <_sbrk+0x68>)
 800195c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800195e:	4b10      	ldr	r3, [pc, #64]	; (80019a0 <_sbrk+0x64>)
 8001960:	681a      	ldr	r2, [r3, #0]
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	4413      	add	r3, r2
 8001966:	693a      	ldr	r2, [r7, #16]
 8001968:	429a      	cmp	r2, r3
 800196a:	d207      	bcs.n	800197c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800196c:	f00a fff4 	bl	800c958 <__errno>
 8001970:	4602      	mov	r2, r0
 8001972:	230c      	movs	r3, #12
 8001974:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8001976:	f04f 33ff 	mov.w	r3, #4294967295
 800197a:	e009      	b.n	8001990 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800197c:	4b08      	ldr	r3, [pc, #32]	; (80019a0 <_sbrk+0x64>)
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001982:	4b07      	ldr	r3, [pc, #28]	; (80019a0 <_sbrk+0x64>)
 8001984:	681a      	ldr	r2, [r3, #0]
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	4413      	add	r3, r2
 800198a:	4a05      	ldr	r2, [pc, #20]	; (80019a0 <_sbrk+0x64>)
 800198c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800198e:	68fb      	ldr	r3, [r7, #12]
}
 8001990:	4618      	mov	r0, r3
 8001992:	3718      	adds	r7, #24
 8001994:	46bd      	mov	sp, r7
 8001996:	bd80      	pop	{r7, pc}
 8001998:	20020000 	.word	0x20020000
 800199c:	00004000 	.word	0x00004000
 80019a0:	20000664 	.word	0x20000664
 80019a4:	20002970 	.word	0x20002970

080019a8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80019a8:	b480      	push	{r7}
 80019aa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80019ac:	4b08      	ldr	r3, [pc, #32]	; (80019d0 <SystemInit+0x28>)
 80019ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80019b2:	4a07      	ldr	r2, [pc, #28]	; (80019d0 <SystemInit+0x28>)
 80019b4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80019b8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80019bc:	4b04      	ldr	r3, [pc, #16]	; (80019d0 <SystemInit+0x28>)
 80019be:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80019c2:	609a      	str	r2, [r3, #8]
#endif
}
 80019c4:	bf00      	nop
 80019c6:	46bd      	mov	sp, r7
 80019c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019cc:	4770      	bx	lr
 80019ce:	bf00      	nop
 80019d0:	e000ed00 	.word	0xe000ed00

080019d4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80019d4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001a0c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80019d8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80019da:	e003      	b.n	80019e4 <LoopCopyDataInit>

080019dc <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80019dc:	4b0c      	ldr	r3, [pc, #48]	; (8001a10 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80019de:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80019e0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80019e2:	3104      	adds	r1, #4

080019e4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80019e4:	480b      	ldr	r0, [pc, #44]	; (8001a14 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80019e6:	4b0c      	ldr	r3, [pc, #48]	; (8001a18 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80019e8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80019ea:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80019ec:	d3f6      	bcc.n	80019dc <CopyDataInit>
  ldr  r2, =_sbss
 80019ee:	4a0b      	ldr	r2, [pc, #44]	; (8001a1c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80019f0:	e002      	b.n	80019f8 <LoopFillZerobss>

080019f2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80019f2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80019f4:	f842 3b04 	str.w	r3, [r2], #4

080019f8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80019f8:	4b09      	ldr	r3, [pc, #36]	; (8001a20 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80019fa:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80019fc:	d3f9      	bcc.n	80019f2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80019fe:	f7ff ffd3 	bl	80019a8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001a02:	f00a ffaf 	bl	800c964 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001a06:	f7ff fd19 	bl	800143c <main>
  bx  lr    
 8001a0a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001a0c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001a10:	0800d954 	.word	0x0800d954
  ldr  r0, =_sdata
 8001a14:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001a18:	200005e8 	.word	0x200005e8
  ldr  r2, =_sbss
 8001a1c:	200005e8 	.word	0x200005e8
  ldr  r3, = _ebss
 8001a20:	2000296c 	.word	0x2000296c

08001a24 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001a24:	e7fe      	b.n	8001a24 <ADC_IRQHandler>
	...

08001a28 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001a2c:	4b0e      	ldr	r3, [pc, #56]	; (8001a68 <HAL_Init+0x40>)
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	4a0d      	ldr	r2, [pc, #52]	; (8001a68 <HAL_Init+0x40>)
 8001a32:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001a36:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001a38:	4b0b      	ldr	r3, [pc, #44]	; (8001a68 <HAL_Init+0x40>)
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	4a0a      	ldr	r2, [pc, #40]	; (8001a68 <HAL_Init+0x40>)
 8001a3e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001a42:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a44:	4b08      	ldr	r3, [pc, #32]	; (8001a68 <HAL_Init+0x40>)
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	4a07      	ldr	r2, [pc, #28]	; (8001a68 <HAL_Init+0x40>)
 8001a4a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a4e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a50:	2003      	movs	r0, #3
 8001a52:	f000 f94d 	bl	8001cf0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001a56:	2000      	movs	r0, #0
 8001a58:	f000 f808 	bl	8001a6c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001a5c:	f7ff fef0 	bl	8001840 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a60:	2300      	movs	r3, #0
}
 8001a62:	4618      	mov	r0, r3
 8001a64:	bd80      	pop	{r7, pc}
 8001a66:	bf00      	nop
 8001a68:	40023c00 	.word	0x40023c00

08001a6c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b082      	sub	sp, #8
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001a74:	4b12      	ldr	r3, [pc, #72]	; (8001ac0 <HAL_InitTick+0x54>)
 8001a76:	681a      	ldr	r2, [r3, #0]
 8001a78:	4b12      	ldr	r3, [pc, #72]	; (8001ac4 <HAL_InitTick+0x58>)
 8001a7a:	781b      	ldrb	r3, [r3, #0]
 8001a7c:	4619      	mov	r1, r3
 8001a7e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a82:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a86:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	f000 f994 	bl	8001db8 <HAL_SYSTICK_Config>
 8001a90:	4603      	mov	r3, r0
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d001      	beq.n	8001a9a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001a96:	2301      	movs	r3, #1
 8001a98:	e00e      	b.n	8001ab8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	2b0f      	cmp	r3, #15
 8001a9e:	d80a      	bhi.n	8001ab6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	6879      	ldr	r1, [r7, #4]
 8001aa4:	f04f 30ff 	mov.w	r0, #4294967295
 8001aa8:	f000 f942 	bl	8001d30 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001aac:	4a06      	ldr	r2, [pc, #24]	; (8001ac8 <HAL_InitTick+0x5c>)
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	e000      	b.n	8001ab8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001ab6:	2301      	movs	r3, #1
}
 8001ab8:	4618      	mov	r0, r3
 8001aba:	3708      	adds	r7, #8
 8001abc:	46bd      	mov	sp, r7
 8001abe:	bd80      	pop	{r7, pc}
 8001ac0:	20000400 	.word	0x20000400
 8001ac4:	20000408 	.word	0x20000408
 8001ac8:	20000404 	.word	0x20000404

08001acc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001acc:	b480      	push	{r7}
 8001ace:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ad0:	4b06      	ldr	r3, [pc, #24]	; (8001aec <HAL_IncTick+0x20>)
 8001ad2:	781b      	ldrb	r3, [r3, #0]
 8001ad4:	461a      	mov	r2, r3
 8001ad6:	4b06      	ldr	r3, [pc, #24]	; (8001af0 <HAL_IncTick+0x24>)
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	4413      	add	r3, r2
 8001adc:	4a04      	ldr	r2, [pc, #16]	; (8001af0 <HAL_IncTick+0x24>)
 8001ade:	6013      	str	r3, [r2, #0]
}
 8001ae0:	bf00      	nop
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae8:	4770      	bx	lr
 8001aea:	bf00      	nop
 8001aec:	20000408 	.word	0x20000408
 8001af0:	20001038 	.word	0x20001038

08001af4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001af4:	b480      	push	{r7}
 8001af6:	af00      	add	r7, sp, #0
  return uwTick;
 8001af8:	4b03      	ldr	r3, [pc, #12]	; (8001b08 <HAL_GetTick+0x14>)
 8001afa:	681b      	ldr	r3, [r3, #0]
}
 8001afc:	4618      	mov	r0, r3
 8001afe:	46bd      	mov	sp, r7
 8001b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b04:	4770      	bx	lr
 8001b06:	bf00      	nop
 8001b08:	20001038 	.word	0x20001038

08001b0c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b084      	sub	sp, #16
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001b14:	f7ff ffee 	bl	8001af4 <HAL_GetTick>
 8001b18:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b24:	d005      	beq.n	8001b32 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001b26:	4b09      	ldr	r3, [pc, #36]	; (8001b4c <HAL_Delay+0x40>)
 8001b28:	781b      	ldrb	r3, [r3, #0]
 8001b2a:	461a      	mov	r2, r3
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	4413      	add	r3, r2
 8001b30:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001b32:	bf00      	nop
 8001b34:	f7ff ffde 	bl	8001af4 <HAL_GetTick>
 8001b38:	4602      	mov	r2, r0
 8001b3a:	68bb      	ldr	r3, [r7, #8]
 8001b3c:	1ad3      	subs	r3, r2, r3
 8001b3e:	68fa      	ldr	r2, [r7, #12]
 8001b40:	429a      	cmp	r2, r3
 8001b42:	d8f7      	bhi.n	8001b34 <HAL_Delay+0x28>
  {
  }
}
 8001b44:	bf00      	nop
 8001b46:	3710      	adds	r7, #16
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	bd80      	pop	{r7, pc}
 8001b4c:	20000408 	.word	0x20000408

08001b50 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b50:	b480      	push	{r7}
 8001b52:	b085      	sub	sp, #20
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	f003 0307 	and.w	r3, r3, #7
 8001b5e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b60:	4b0c      	ldr	r3, [pc, #48]	; (8001b94 <__NVIC_SetPriorityGrouping+0x44>)
 8001b62:	68db      	ldr	r3, [r3, #12]
 8001b64:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b66:	68ba      	ldr	r2, [r7, #8]
 8001b68:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001b6c:	4013      	ands	r3, r2
 8001b6e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b74:	68bb      	ldr	r3, [r7, #8]
 8001b76:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b78:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001b7c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b80:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b82:	4a04      	ldr	r2, [pc, #16]	; (8001b94 <__NVIC_SetPriorityGrouping+0x44>)
 8001b84:	68bb      	ldr	r3, [r7, #8]
 8001b86:	60d3      	str	r3, [r2, #12]
}
 8001b88:	bf00      	nop
 8001b8a:	3714      	adds	r7, #20
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b92:	4770      	bx	lr
 8001b94:	e000ed00 	.word	0xe000ed00

08001b98 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b98:	b480      	push	{r7}
 8001b9a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b9c:	4b04      	ldr	r3, [pc, #16]	; (8001bb0 <__NVIC_GetPriorityGrouping+0x18>)
 8001b9e:	68db      	ldr	r3, [r3, #12]
 8001ba0:	0a1b      	lsrs	r3, r3, #8
 8001ba2:	f003 0307 	and.w	r3, r3, #7
}
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bae:	4770      	bx	lr
 8001bb0:	e000ed00 	.word	0xe000ed00

08001bb4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001bb4:	b480      	push	{r7}
 8001bb6:	b083      	sub	sp, #12
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	4603      	mov	r3, r0
 8001bbc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	db0b      	blt.n	8001bde <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001bc6:	79fb      	ldrb	r3, [r7, #7]
 8001bc8:	f003 021f 	and.w	r2, r3, #31
 8001bcc:	4907      	ldr	r1, [pc, #28]	; (8001bec <__NVIC_EnableIRQ+0x38>)
 8001bce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bd2:	095b      	lsrs	r3, r3, #5
 8001bd4:	2001      	movs	r0, #1
 8001bd6:	fa00 f202 	lsl.w	r2, r0, r2
 8001bda:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001bde:	bf00      	nop
 8001be0:	370c      	adds	r7, #12
 8001be2:	46bd      	mov	sp, r7
 8001be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be8:	4770      	bx	lr
 8001bea:	bf00      	nop
 8001bec:	e000e100 	.word	0xe000e100

08001bf0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001bf0:	b480      	push	{r7}
 8001bf2:	b083      	sub	sp, #12
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	4603      	mov	r3, r0
 8001bf8:	6039      	str	r1, [r7, #0]
 8001bfa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bfc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	db0a      	blt.n	8001c1a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c04:	683b      	ldr	r3, [r7, #0]
 8001c06:	b2da      	uxtb	r2, r3
 8001c08:	490c      	ldr	r1, [pc, #48]	; (8001c3c <__NVIC_SetPriority+0x4c>)
 8001c0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c0e:	0112      	lsls	r2, r2, #4
 8001c10:	b2d2      	uxtb	r2, r2
 8001c12:	440b      	add	r3, r1
 8001c14:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c18:	e00a      	b.n	8001c30 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c1a:	683b      	ldr	r3, [r7, #0]
 8001c1c:	b2da      	uxtb	r2, r3
 8001c1e:	4908      	ldr	r1, [pc, #32]	; (8001c40 <__NVIC_SetPriority+0x50>)
 8001c20:	79fb      	ldrb	r3, [r7, #7]
 8001c22:	f003 030f 	and.w	r3, r3, #15
 8001c26:	3b04      	subs	r3, #4
 8001c28:	0112      	lsls	r2, r2, #4
 8001c2a:	b2d2      	uxtb	r2, r2
 8001c2c:	440b      	add	r3, r1
 8001c2e:	761a      	strb	r2, [r3, #24]
}
 8001c30:	bf00      	nop
 8001c32:	370c      	adds	r7, #12
 8001c34:	46bd      	mov	sp, r7
 8001c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3a:	4770      	bx	lr
 8001c3c:	e000e100 	.word	0xe000e100
 8001c40:	e000ed00 	.word	0xe000ed00

08001c44 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c44:	b480      	push	{r7}
 8001c46:	b089      	sub	sp, #36	; 0x24
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	60f8      	str	r0, [r7, #12]
 8001c4c:	60b9      	str	r1, [r7, #8]
 8001c4e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	f003 0307 	and.w	r3, r3, #7
 8001c56:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c58:	69fb      	ldr	r3, [r7, #28]
 8001c5a:	f1c3 0307 	rsb	r3, r3, #7
 8001c5e:	2b04      	cmp	r3, #4
 8001c60:	bf28      	it	cs
 8001c62:	2304      	movcs	r3, #4
 8001c64:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c66:	69fb      	ldr	r3, [r7, #28]
 8001c68:	3304      	adds	r3, #4
 8001c6a:	2b06      	cmp	r3, #6
 8001c6c:	d902      	bls.n	8001c74 <NVIC_EncodePriority+0x30>
 8001c6e:	69fb      	ldr	r3, [r7, #28]
 8001c70:	3b03      	subs	r3, #3
 8001c72:	e000      	b.n	8001c76 <NVIC_EncodePriority+0x32>
 8001c74:	2300      	movs	r3, #0
 8001c76:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c78:	f04f 32ff 	mov.w	r2, #4294967295
 8001c7c:	69bb      	ldr	r3, [r7, #24]
 8001c7e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c82:	43da      	mvns	r2, r3
 8001c84:	68bb      	ldr	r3, [r7, #8]
 8001c86:	401a      	ands	r2, r3
 8001c88:	697b      	ldr	r3, [r7, #20]
 8001c8a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c8c:	f04f 31ff 	mov.w	r1, #4294967295
 8001c90:	697b      	ldr	r3, [r7, #20]
 8001c92:	fa01 f303 	lsl.w	r3, r1, r3
 8001c96:	43d9      	mvns	r1, r3
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c9c:	4313      	orrs	r3, r2
         );
}
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	3724      	adds	r7, #36	; 0x24
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca8:	4770      	bx	lr
	...

08001cac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	b082      	sub	sp, #8
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	3b01      	subs	r3, #1
 8001cb8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001cbc:	d301      	bcc.n	8001cc2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001cbe:	2301      	movs	r3, #1
 8001cc0:	e00f      	b.n	8001ce2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001cc2:	4a0a      	ldr	r2, [pc, #40]	; (8001cec <SysTick_Config+0x40>)
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	3b01      	subs	r3, #1
 8001cc8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001cca:	210f      	movs	r1, #15
 8001ccc:	f04f 30ff 	mov.w	r0, #4294967295
 8001cd0:	f7ff ff8e 	bl	8001bf0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001cd4:	4b05      	ldr	r3, [pc, #20]	; (8001cec <SysTick_Config+0x40>)
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001cda:	4b04      	ldr	r3, [pc, #16]	; (8001cec <SysTick_Config+0x40>)
 8001cdc:	2207      	movs	r2, #7
 8001cde:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ce0:	2300      	movs	r3, #0
}
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	3708      	adds	r7, #8
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	bd80      	pop	{r7, pc}
 8001cea:	bf00      	nop
 8001cec:	e000e010 	.word	0xe000e010

08001cf0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	b082      	sub	sp, #8
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	2b07      	cmp	r3, #7
 8001cfc:	d00f      	beq.n	8001d1e <HAL_NVIC_SetPriorityGrouping+0x2e>
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	2b06      	cmp	r3, #6
 8001d02:	d00c      	beq.n	8001d1e <HAL_NVIC_SetPriorityGrouping+0x2e>
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	2b05      	cmp	r3, #5
 8001d08:	d009      	beq.n	8001d1e <HAL_NVIC_SetPriorityGrouping+0x2e>
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	2b04      	cmp	r3, #4
 8001d0e:	d006      	beq.n	8001d1e <HAL_NVIC_SetPriorityGrouping+0x2e>
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	2b03      	cmp	r3, #3
 8001d14:	d003      	beq.n	8001d1e <HAL_NVIC_SetPriorityGrouping+0x2e>
 8001d16:	2192      	movs	r1, #146	; 0x92
 8001d18:	4804      	ldr	r0, [pc, #16]	; (8001d2c <HAL_NVIC_SetPriorityGrouping+0x3c>)
 8001d1a:	f7ff fd08 	bl	800172e <assert_failed>
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d1e:	6878      	ldr	r0, [r7, #4]
 8001d20:	f7ff ff16 	bl	8001b50 <__NVIC_SetPriorityGrouping>
}
 8001d24:	bf00      	nop
 8001d26:	3708      	adds	r7, #8
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	bd80      	pop	{r7, pc}
 8001d2c:	0800d5e0 	.word	0x0800d5e0

08001d30 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b086      	sub	sp, #24
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	4603      	mov	r3, r0
 8001d38:	60b9      	str	r1, [r7, #8]
 8001d3a:	607a      	str	r2, [r7, #4]
 8001d3c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001d3e:	2300      	movs	r3, #0
 8001d40:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	2b0f      	cmp	r3, #15
 8001d46:	d903      	bls.n	8001d50 <HAL_NVIC_SetPriority+0x20>
 8001d48:	21aa      	movs	r1, #170	; 0xaa
 8001d4a:	480e      	ldr	r0, [pc, #56]	; (8001d84 <HAL_NVIC_SetPriority+0x54>)
 8001d4c:	f7ff fcef 	bl	800172e <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 8001d50:	68bb      	ldr	r3, [r7, #8]
 8001d52:	2b0f      	cmp	r3, #15
 8001d54:	d903      	bls.n	8001d5e <HAL_NVIC_SetPriority+0x2e>
 8001d56:	21ab      	movs	r1, #171	; 0xab
 8001d58:	480a      	ldr	r0, [pc, #40]	; (8001d84 <HAL_NVIC_SetPriority+0x54>)
 8001d5a:	f7ff fce8 	bl	800172e <assert_failed>
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001d5e:	f7ff ff1b 	bl	8001b98 <__NVIC_GetPriorityGrouping>
 8001d62:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d64:	687a      	ldr	r2, [r7, #4]
 8001d66:	68b9      	ldr	r1, [r7, #8]
 8001d68:	6978      	ldr	r0, [r7, #20]
 8001d6a:	f7ff ff6b 	bl	8001c44 <NVIC_EncodePriority>
 8001d6e:	4602      	mov	r2, r0
 8001d70:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d74:	4611      	mov	r1, r2
 8001d76:	4618      	mov	r0, r3
 8001d78:	f7ff ff3a 	bl	8001bf0 <__NVIC_SetPriority>
}
 8001d7c:	bf00      	nop
 8001d7e:	3718      	adds	r7, #24
 8001d80:	46bd      	mov	sp, r7
 8001d82:	bd80      	pop	{r7, pc}
 8001d84:	0800d5e0 	.word	0x0800d5e0

08001d88 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b082      	sub	sp, #8
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	4603      	mov	r3, r0
 8001d90:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 8001d92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	da03      	bge.n	8001da2 <HAL_NVIC_EnableIRQ+0x1a>
 8001d9a:	21be      	movs	r1, #190	; 0xbe
 8001d9c:	4805      	ldr	r0, [pc, #20]	; (8001db4 <HAL_NVIC_EnableIRQ+0x2c>)
 8001d9e:	f7ff fcc6 	bl	800172e <assert_failed>
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001da2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001da6:	4618      	mov	r0, r3
 8001da8:	f7ff ff04 	bl	8001bb4 <__NVIC_EnableIRQ>
}
 8001dac:	bf00      	nop
 8001dae:	3708      	adds	r7, #8
 8001db0:	46bd      	mov	sp, r7
 8001db2:	bd80      	pop	{r7, pc}
 8001db4:	0800d5e0 	.word	0x0800d5e0

08001db8 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b082      	sub	sp, #8
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001dc0:	6878      	ldr	r0, [r7, #4]
 8001dc2:	f7ff ff73 	bl	8001cac <SysTick_Config>
 8001dc6:	4603      	mov	r3, r0
}
 8001dc8:	4618      	mov	r0, r3
 8001dca:	3708      	adds	r7, #8
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	bd80      	pop	{r7, pc}

08001dd0 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b082      	sub	sp, #8
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d101      	bne.n	8001de2 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8001dde:	2301      	movs	r3, #1
 8001de0:	e017      	b.n	8001e12 <HAL_CRC_Init+0x42>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	4a0d      	ldr	r2, [pc, #52]	; (8001e1c <HAL_CRC_Init+0x4c>)
 8001de8:	4293      	cmp	r3, r2
 8001dea:	d003      	beq.n	8001df4 <HAL_CRC_Init+0x24>
 8001dec:	2168      	movs	r1, #104	; 0x68
 8001dee:	480c      	ldr	r0, [pc, #48]	; (8001e20 <HAL_CRC_Init+0x50>)
 8001df0:	f7ff fc9d 	bl	800172e <assert_failed>

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	795b      	ldrb	r3, [r3, #5]
 8001df8:	b2db      	uxtb	r3, r3
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d105      	bne.n	8001e0a <HAL_CRC_Init+0x3a>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	2200      	movs	r2, #0
 8001e02:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8001e04:	6878      	ldr	r0, [r7, #4]
 8001e06:	f7fe fd87 	bl	8000918 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	2201      	movs	r2, #1
 8001e0e:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8001e10:	2300      	movs	r3, #0
}
 8001e12:	4618      	mov	r0, r3
 8001e14:	3708      	adds	r7, #8
 8001e16:	46bd      	mov	sp, r7
 8001e18:	bd80      	pop	{r7, pc}
 8001e1a:	bf00      	nop
 8001e1c:	40023000 	.word	0x40023000
 8001e20:	0800d61c 	.word	0x0800d61c

08001e24 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	b086      	sub	sp, #24
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001e2c:	2300      	movs	r3, #0
 8001e2e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001e30:	f7ff fe60 	bl	8001af4 <HAL_GetTick>
 8001e34:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d101      	bne.n	8001e40 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001e3c:	2301      	movs	r3, #1
 8001e3e:	e204      	b.n	800224a <HAL_DMA_Init+0x426>
  }

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	4a97      	ldr	r2, [pc, #604]	; (80020a4 <HAL_DMA_Init+0x280>)
 8001e46:	4293      	cmp	r3, r2
 8001e48:	d04e      	beq.n	8001ee8 <HAL_DMA_Init+0xc4>
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	4a96      	ldr	r2, [pc, #600]	; (80020a8 <HAL_DMA_Init+0x284>)
 8001e50:	4293      	cmp	r3, r2
 8001e52:	d049      	beq.n	8001ee8 <HAL_DMA_Init+0xc4>
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	4a94      	ldr	r2, [pc, #592]	; (80020ac <HAL_DMA_Init+0x288>)
 8001e5a:	4293      	cmp	r3, r2
 8001e5c:	d044      	beq.n	8001ee8 <HAL_DMA_Init+0xc4>
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	4a93      	ldr	r2, [pc, #588]	; (80020b0 <HAL_DMA_Init+0x28c>)
 8001e64:	4293      	cmp	r3, r2
 8001e66:	d03f      	beq.n	8001ee8 <HAL_DMA_Init+0xc4>
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	4a91      	ldr	r2, [pc, #580]	; (80020b4 <HAL_DMA_Init+0x290>)
 8001e6e:	4293      	cmp	r3, r2
 8001e70:	d03a      	beq.n	8001ee8 <HAL_DMA_Init+0xc4>
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	4a90      	ldr	r2, [pc, #576]	; (80020b8 <HAL_DMA_Init+0x294>)
 8001e78:	4293      	cmp	r3, r2
 8001e7a:	d035      	beq.n	8001ee8 <HAL_DMA_Init+0xc4>
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	4a8e      	ldr	r2, [pc, #568]	; (80020bc <HAL_DMA_Init+0x298>)
 8001e82:	4293      	cmp	r3, r2
 8001e84:	d030      	beq.n	8001ee8 <HAL_DMA_Init+0xc4>
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	4a8d      	ldr	r2, [pc, #564]	; (80020c0 <HAL_DMA_Init+0x29c>)
 8001e8c:	4293      	cmp	r3, r2
 8001e8e:	d02b      	beq.n	8001ee8 <HAL_DMA_Init+0xc4>
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	4a8b      	ldr	r2, [pc, #556]	; (80020c4 <HAL_DMA_Init+0x2a0>)
 8001e96:	4293      	cmp	r3, r2
 8001e98:	d026      	beq.n	8001ee8 <HAL_DMA_Init+0xc4>
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	4a8a      	ldr	r2, [pc, #552]	; (80020c8 <HAL_DMA_Init+0x2a4>)
 8001ea0:	4293      	cmp	r3, r2
 8001ea2:	d021      	beq.n	8001ee8 <HAL_DMA_Init+0xc4>
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	4a88      	ldr	r2, [pc, #544]	; (80020cc <HAL_DMA_Init+0x2a8>)
 8001eaa:	4293      	cmp	r3, r2
 8001eac:	d01c      	beq.n	8001ee8 <HAL_DMA_Init+0xc4>
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	4a87      	ldr	r2, [pc, #540]	; (80020d0 <HAL_DMA_Init+0x2ac>)
 8001eb4:	4293      	cmp	r3, r2
 8001eb6:	d017      	beq.n	8001ee8 <HAL_DMA_Init+0xc4>
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	4a85      	ldr	r2, [pc, #532]	; (80020d4 <HAL_DMA_Init+0x2b0>)
 8001ebe:	4293      	cmp	r3, r2
 8001ec0:	d012      	beq.n	8001ee8 <HAL_DMA_Init+0xc4>
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	4a84      	ldr	r2, [pc, #528]	; (80020d8 <HAL_DMA_Init+0x2b4>)
 8001ec8:	4293      	cmp	r3, r2
 8001eca:	d00d      	beq.n	8001ee8 <HAL_DMA_Init+0xc4>
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	4a82      	ldr	r2, [pc, #520]	; (80020dc <HAL_DMA_Init+0x2b8>)
 8001ed2:	4293      	cmp	r3, r2
 8001ed4:	d008      	beq.n	8001ee8 <HAL_DMA_Init+0xc4>
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	4a81      	ldr	r2, [pc, #516]	; (80020e0 <HAL_DMA_Init+0x2bc>)
 8001edc:	4293      	cmp	r3, r2
 8001ede:	d003      	beq.n	8001ee8 <HAL_DMA_Init+0xc4>
 8001ee0:	21b8      	movs	r1, #184	; 0xb8
 8001ee2:	4880      	ldr	r0, [pc, #512]	; (80020e4 <HAL_DMA_Init+0x2c0>)
 8001ee4:	f7ff fc23 	bl	800172e <assert_failed>
  assert_param(IS_DMA_CHANNEL(hdma->Init.Channel));
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	685b      	ldr	r3, [r3, #4]
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d026      	beq.n	8001f3e <HAL_DMA_Init+0x11a>
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	685b      	ldr	r3, [r3, #4]
 8001ef4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001ef8:	d021      	beq.n	8001f3e <HAL_DMA_Init+0x11a>
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	685b      	ldr	r3, [r3, #4]
 8001efe:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001f02:	d01c      	beq.n	8001f3e <HAL_DMA_Init+0x11a>
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	685b      	ldr	r3, [r3, #4]
 8001f08:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 8001f0c:	d017      	beq.n	8001f3e <HAL_DMA_Init+0x11a>
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	685b      	ldr	r3, [r3, #4]
 8001f12:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001f16:	d012      	beq.n	8001f3e <HAL_DMA_Init+0x11a>
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	685b      	ldr	r3, [r3, #4]
 8001f1c:	f1b3 6f20 	cmp.w	r3, #167772160	; 0xa000000
 8001f20:	d00d      	beq.n	8001f3e <HAL_DMA_Init+0x11a>
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	685b      	ldr	r3, [r3, #4]
 8001f26:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8001f2a:	d008      	beq.n	8001f3e <HAL_DMA_Init+0x11a>
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	685b      	ldr	r3, [r3, #4]
 8001f30:	f1b3 6f60 	cmp.w	r3, #234881024	; 0xe000000
 8001f34:	d003      	beq.n	8001f3e <HAL_DMA_Init+0x11a>
 8001f36:	21b9      	movs	r1, #185	; 0xb9
 8001f38:	486a      	ldr	r0, [pc, #424]	; (80020e4 <HAL_DMA_Init+0x2c0>)
 8001f3a:	f7ff fbf8 	bl	800172e <assert_failed>
  assert_param(IS_DMA_DIRECTION(hdma->Init.Direction));
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	689b      	ldr	r3, [r3, #8]
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d00b      	beq.n	8001f5e <HAL_DMA_Init+0x13a>
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	689b      	ldr	r3, [r3, #8]
 8001f4a:	2b40      	cmp	r3, #64	; 0x40
 8001f4c:	d007      	beq.n	8001f5e <HAL_DMA_Init+0x13a>
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	689b      	ldr	r3, [r3, #8]
 8001f52:	2b80      	cmp	r3, #128	; 0x80
 8001f54:	d003      	beq.n	8001f5e <HAL_DMA_Init+0x13a>
 8001f56:	21ba      	movs	r1, #186	; 0xba
 8001f58:	4862      	ldr	r0, [pc, #392]	; (80020e4 <HAL_DMA_Init+0x2c0>)
 8001f5a:	f7ff fbe8 	bl	800172e <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_INC_STATE(hdma->Init.PeriphInc));
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	68db      	ldr	r3, [r3, #12]
 8001f62:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001f66:	d007      	beq.n	8001f78 <HAL_DMA_Init+0x154>
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	68db      	ldr	r3, [r3, #12]
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d003      	beq.n	8001f78 <HAL_DMA_Init+0x154>
 8001f70:	21bb      	movs	r1, #187	; 0xbb
 8001f72:	485c      	ldr	r0, [pc, #368]	; (80020e4 <HAL_DMA_Init+0x2c0>)
 8001f74:	f7ff fbdb 	bl	800172e <assert_failed>
  assert_param(IS_DMA_MEMORY_INC_STATE(hdma->Init.MemInc));
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	691b      	ldr	r3, [r3, #16]
 8001f7c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001f80:	d007      	beq.n	8001f92 <HAL_DMA_Init+0x16e>
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	691b      	ldr	r3, [r3, #16]
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d003      	beq.n	8001f92 <HAL_DMA_Init+0x16e>
 8001f8a:	21bc      	movs	r1, #188	; 0xbc
 8001f8c:	4855      	ldr	r0, [pc, #340]	; (80020e4 <HAL_DMA_Init+0x2c0>)
 8001f8e:	f7ff fbce 	bl	800172e <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	695b      	ldr	r3, [r3, #20]
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d00d      	beq.n	8001fb6 <HAL_DMA_Init+0x192>
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	695b      	ldr	r3, [r3, #20]
 8001f9e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001fa2:	d008      	beq.n	8001fb6 <HAL_DMA_Init+0x192>
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	695b      	ldr	r3, [r3, #20]
 8001fa8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001fac:	d003      	beq.n	8001fb6 <HAL_DMA_Init+0x192>
 8001fae:	21bd      	movs	r1, #189	; 0xbd
 8001fb0:	484c      	ldr	r0, [pc, #304]	; (80020e4 <HAL_DMA_Init+0x2c0>)
 8001fb2:	f7ff fbbc 	bl	800172e <assert_failed>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	699b      	ldr	r3, [r3, #24]
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d00d      	beq.n	8001fda <HAL_DMA_Init+0x1b6>
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	699b      	ldr	r3, [r3, #24]
 8001fc2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001fc6:	d008      	beq.n	8001fda <HAL_DMA_Init+0x1b6>
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	699b      	ldr	r3, [r3, #24]
 8001fcc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001fd0:	d003      	beq.n	8001fda <HAL_DMA_Init+0x1b6>
 8001fd2:	21be      	movs	r1, #190	; 0xbe
 8001fd4:	4843      	ldr	r0, [pc, #268]	; (80020e4 <HAL_DMA_Init+0x2c0>)
 8001fd6:	f7ff fbaa 	bl	800172e <assert_failed>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	69db      	ldr	r3, [r3, #28]
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d00c      	beq.n	8001ffc <HAL_DMA_Init+0x1d8>
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	69db      	ldr	r3, [r3, #28]
 8001fe6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001fea:	d007      	beq.n	8001ffc <HAL_DMA_Init+0x1d8>
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	69db      	ldr	r3, [r3, #28]
 8001ff0:	2b20      	cmp	r3, #32
 8001ff2:	d003      	beq.n	8001ffc <HAL_DMA_Init+0x1d8>
 8001ff4:	21bf      	movs	r1, #191	; 0xbf
 8001ff6:	483b      	ldr	r0, [pc, #236]	; (80020e4 <HAL_DMA_Init+0x2c0>)
 8001ff8:	f7ff fb99 	bl	800172e <assert_failed>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	6a1b      	ldr	r3, [r3, #32]
 8002000:	2b00      	cmp	r3, #0
 8002002:	d012      	beq.n	800202a <HAL_DMA_Init+0x206>
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	6a1b      	ldr	r3, [r3, #32]
 8002008:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800200c:	d00d      	beq.n	800202a <HAL_DMA_Init+0x206>
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	6a1b      	ldr	r3, [r3, #32]
 8002012:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002016:	d008      	beq.n	800202a <HAL_DMA_Init+0x206>
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	6a1b      	ldr	r3, [r3, #32]
 800201c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002020:	d003      	beq.n	800202a <HAL_DMA_Init+0x206>
 8002022:	21c0      	movs	r1, #192	; 0xc0
 8002024:	482f      	ldr	r0, [pc, #188]	; (80020e4 <HAL_DMA_Init+0x2c0>)
 8002026:	f7ff fb82 	bl	800172e <assert_failed>
  assert_param(IS_DMA_FIFO_MODE_STATE(hdma->Init.FIFOMode));
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800202e:	2b00      	cmp	r3, #0
 8002030:	d007      	beq.n	8002042 <HAL_DMA_Init+0x21e>
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002036:	2b04      	cmp	r3, #4
 8002038:	d003      	beq.n	8002042 <HAL_DMA_Init+0x21e>
 800203a:	21c1      	movs	r1, #193	; 0xc1
 800203c:	4829      	ldr	r0, [pc, #164]	; (80020e4 <HAL_DMA_Init+0x2c0>)
 800203e:	f7ff fb76 	bl	800172e <assert_failed>
  /* Check the memory burst, peripheral burst and FIFO threshold parameters only
     when FIFO mode is enabled */
  if(hdma->Init.FIFOMode != DMA_FIFOMODE_DISABLE)
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002046:	2b00      	cmp	r3, #0
 8002048:	d065      	beq.n	8002116 <HAL_DMA_Init+0x2f2>
  {
    assert_param(IS_DMA_FIFO_THRESHOLD(hdma->Init.FIFOThreshold));
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800204e:	2b00      	cmp	r3, #0
 8002050:	d00f      	beq.n	8002072 <HAL_DMA_Init+0x24e>
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002056:	2b01      	cmp	r3, #1
 8002058:	d00b      	beq.n	8002072 <HAL_DMA_Init+0x24e>
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800205e:	2b02      	cmp	r3, #2
 8002060:	d007      	beq.n	8002072 <HAL_DMA_Init+0x24e>
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002066:	2b03      	cmp	r3, #3
 8002068:	d003      	beq.n	8002072 <HAL_DMA_Init+0x24e>
 800206a:	21c6      	movs	r1, #198	; 0xc6
 800206c:	481d      	ldr	r0, [pc, #116]	; (80020e4 <HAL_DMA_Init+0x2c0>)
 800206e:	f7ff fb5e 	bl	800172e <assert_failed>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002076:	2b00      	cmp	r3, #0
 8002078:	d036      	beq.n	80020e8 <HAL_DMA_Init+0x2c4>
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800207e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002082:	d031      	beq.n	80020e8 <HAL_DMA_Init+0x2c4>
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002088:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800208c:	d02c      	beq.n	80020e8 <HAL_DMA_Init+0x2c4>
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002092:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002096:	d027      	beq.n	80020e8 <HAL_DMA_Init+0x2c4>
 8002098:	21c7      	movs	r1, #199	; 0xc7
 800209a:	4812      	ldr	r0, [pc, #72]	; (80020e4 <HAL_DMA_Init+0x2c0>)
 800209c:	f7ff fb47 	bl	800172e <assert_failed>
 80020a0:	e022      	b.n	80020e8 <HAL_DMA_Init+0x2c4>
 80020a2:	bf00      	nop
 80020a4:	40026010 	.word	0x40026010
 80020a8:	40026028 	.word	0x40026028
 80020ac:	40026040 	.word	0x40026040
 80020b0:	40026058 	.word	0x40026058
 80020b4:	40026070 	.word	0x40026070
 80020b8:	40026088 	.word	0x40026088
 80020bc:	400260a0 	.word	0x400260a0
 80020c0:	400260b8 	.word	0x400260b8
 80020c4:	40026410 	.word	0x40026410
 80020c8:	40026428 	.word	0x40026428
 80020cc:	40026440 	.word	0x40026440
 80020d0:	40026458 	.word	0x40026458
 80020d4:	40026470 	.word	0x40026470
 80020d8:	40026488 	.word	0x40026488
 80020dc:	400264a0 	.word	0x400264a0
 80020e0:	400264b8 	.word	0x400264b8
 80020e4:	0800d654 	.word	0x0800d654
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d012      	beq.n	8002116 <HAL_DMA_Init+0x2f2>
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020f4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80020f8:	d00d      	beq.n	8002116 <HAL_DMA_Init+0x2f2>
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020fe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002102:	d008      	beq.n	8002116 <HAL_DMA_Init+0x2f2>
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002108:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800210c:	d003      	beq.n	8002116 <HAL_DMA_Init+0x2f2>
 800210e:	21c8      	movs	r1, #200	; 0xc8
 8002110:	4850      	ldr	r0, [pc, #320]	; (8002254 <HAL_DMA_Init+0x430>)
 8002112:	f7ff fb0c 	bl	800172e <assert_failed>
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	2200      	movs	r2, #0
 800211a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	2202      	movs	r2, #2
 8002122:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	681a      	ldr	r2, [r3, #0]
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f022 0201 	bic.w	r2, r2, #1
 8002134:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002136:	e00f      	b.n	8002158 <HAL_DMA_Init+0x334>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002138:	f7ff fcdc 	bl	8001af4 <HAL_GetTick>
 800213c:	4602      	mov	r2, r0
 800213e:	693b      	ldr	r3, [r7, #16]
 8002140:	1ad3      	subs	r3, r2, r3
 8002142:	2b05      	cmp	r3, #5
 8002144:	d908      	bls.n	8002158 <HAL_DMA_Init+0x334>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	2220      	movs	r2, #32
 800214a:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	2203      	movs	r2, #3
 8002150:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002154:	2303      	movs	r3, #3
 8002156:	e078      	b.n	800224a <HAL_DMA_Init+0x426>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f003 0301 	and.w	r3, r3, #1
 8002162:	2b00      	cmp	r3, #0
 8002164:	d1e8      	bne.n	8002138 <HAL_DMA_Init+0x314>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800216e:	697a      	ldr	r2, [r7, #20]
 8002170:	4b39      	ldr	r3, [pc, #228]	; (8002258 <HAL_DMA_Init+0x434>)
 8002172:	4013      	ands	r3, r2
 8002174:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	685a      	ldr	r2, [r3, #4]
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	689b      	ldr	r3, [r3, #8]
 800217e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002184:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	691b      	ldr	r3, [r3, #16]
 800218a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002190:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	699b      	ldr	r3, [r3, #24]
 8002196:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800219c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	6a1b      	ldr	r3, [r3, #32]
 80021a2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80021a4:	697a      	ldr	r2, [r7, #20]
 80021a6:	4313      	orrs	r3, r2
 80021a8:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021ae:	2b04      	cmp	r3, #4
 80021b0:	d107      	bne.n	80021c2 <HAL_DMA_Init+0x39e>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ba:	4313      	orrs	r3, r2
 80021bc:	697a      	ldr	r2, [r7, #20]
 80021be:	4313      	orrs	r3, r2
 80021c0:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	697a      	ldr	r2, [r7, #20]
 80021c8:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	695b      	ldr	r3, [r3, #20]
 80021d0:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80021d2:	697b      	ldr	r3, [r7, #20]
 80021d4:	f023 0307 	bic.w	r3, r3, #7
 80021d8:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021de:	697a      	ldr	r2, [r7, #20]
 80021e0:	4313      	orrs	r3, r2
 80021e2:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021e8:	2b04      	cmp	r3, #4
 80021ea:	d117      	bne.n	800221c <HAL_DMA_Init+0x3f8>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021f0:	697a      	ldr	r2, [r7, #20]
 80021f2:	4313      	orrs	r3, r2
 80021f4:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d00e      	beq.n	800221c <HAL_DMA_Init+0x3f8>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80021fe:	6878      	ldr	r0, [r7, #4]
 8002200:	f000 fa80 	bl	8002704 <DMA_CheckFifoParam>
 8002204:	4603      	mov	r3, r0
 8002206:	2b00      	cmp	r3, #0
 8002208:	d008      	beq.n	800221c <HAL_DMA_Init+0x3f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	2240      	movs	r2, #64	; 0x40
 800220e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	2201      	movs	r2, #1
 8002214:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002218:	2301      	movs	r3, #1
 800221a:	e016      	b.n	800224a <HAL_DMA_Init+0x426>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	697a      	ldr	r2, [r7, #20]
 8002222:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002224:	6878      	ldr	r0, [r7, #4]
 8002226:	f000 fa37 	bl	8002698 <DMA_CalcBaseAndBitshift>
 800222a:	4603      	mov	r3, r0
 800222c:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002232:	223f      	movs	r2, #63	; 0x3f
 8002234:	409a      	lsls	r2, r3
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	2200      	movs	r2, #0
 800223e:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	2201      	movs	r2, #1
 8002244:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002248:	2300      	movs	r3, #0
}
 800224a:	4618      	mov	r0, r3
 800224c:	3718      	adds	r7, #24
 800224e:	46bd      	mov	sp, r7
 8002250:	bd80      	pop	{r7, pc}
 8002252:	bf00      	nop
 8002254:	0800d654 	.word	0x0800d654
 8002258:	f010803f 	.word	0xf010803f

0800225c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800225c:	b580      	push	{r7, lr}
 800225e:	b086      	sub	sp, #24
 8002260:	af00      	add	r7, sp, #0
 8002262:	60f8      	str	r0, [r7, #12]
 8002264:	60b9      	str	r1, [r7, #8]
 8002266:	607a      	str	r2, [r7, #4]
 8002268:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800226a:	2300      	movs	r3, #0
 800226c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002272:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 8002274:	683b      	ldr	r3, [r7, #0]
 8002276:	2b00      	cmp	r3, #0
 8002278:	d003      	beq.n	8002282 <HAL_DMA_Start_IT+0x26>
 800227a:	683b      	ldr	r3, [r7, #0]
 800227c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002280:	d304      	bcc.n	800228c <HAL_DMA_Start_IT+0x30>
 8002282:	f44f 71e6 	mov.w	r1, #460	; 0x1cc
 8002286:	4827      	ldr	r0, [pc, #156]	; (8002324 <HAL_DMA_Start_IT+0xc8>)
 8002288:	f7ff fa51 	bl	800172e <assert_failed>
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002292:	2b01      	cmp	r3, #1
 8002294:	d101      	bne.n	800229a <HAL_DMA_Start_IT+0x3e>
 8002296:	2302      	movs	r3, #2
 8002298:	e040      	b.n	800231c <HAL_DMA_Start_IT+0xc0>
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	2201      	movs	r2, #1
 800229e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80022a8:	b2db      	uxtb	r3, r3
 80022aa:	2b01      	cmp	r3, #1
 80022ac:	d12f      	bne.n	800230e <HAL_DMA_Start_IT+0xb2>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	2202      	movs	r2, #2
 80022b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	2200      	movs	r2, #0
 80022ba:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80022bc:	683b      	ldr	r3, [r7, #0]
 80022be:	687a      	ldr	r2, [r7, #4]
 80022c0:	68b9      	ldr	r1, [r7, #8]
 80022c2:	68f8      	ldr	r0, [r7, #12]
 80022c4:	f000 f9ba 	bl	800263c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022cc:	223f      	movs	r2, #63	; 0x3f
 80022ce:	409a      	lsls	r2, r3
 80022d0:	693b      	ldr	r3, [r7, #16]
 80022d2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	681a      	ldr	r2, [r3, #0]
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f042 0216 	orr.w	r2, r2, #22
 80022e2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d007      	beq.n	80022fc <HAL_DMA_Start_IT+0xa0>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	681a      	ldr	r2, [r3, #0]
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f042 0208 	orr.w	r2, r2, #8
 80022fa:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	681a      	ldr	r2, [r3, #0]
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f042 0201 	orr.w	r2, r2, #1
 800230a:	601a      	str	r2, [r3, #0]
 800230c:	e005      	b.n	800231a <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	2200      	movs	r2, #0
 8002312:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002316:	2302      	movs	r3, #2
 8002318:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800231a:	7dfb      	ldrb	r3, [r7, #23]
}
 800231c:	4618      	mov	r0, r3
 800231e:	3718      	adds	r7, #24
 8002320:	46bd      	mov	sp, r7
 8002322:	bd80      	pop	{r7, pc}
 8002324:	0800d654 	.word	0x0800d654

08002328 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002328:	b580      	push	{r7, lr}
 800232a:	b086      	sub	sp, #24
 800232c:	af00      	add	r7, sp, #0
 800232e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002330:	2300      	movs	r3, #0
 8002332:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002334:	4b92      	ldr	r3, [pc, #584]	; (8002580 <HAL_DMA_IRQHandler+0x258>)
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	4a92      	ldr	r2, [pc, #584]	; (8002584 <HAL_DMA_IRQHandler+0x25c>)
 800233a:	fba2 2303 	umull	r2, r3, r2, r3
 800233e:	0a9b      	lsrs	r3, r3, #10
 8002340:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002346:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002348:	693b      	ldr	r3, [r7, #16]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002352:	2208      	movs	r2, #8
 8002354:	409a      	lsls	r2, r3
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	4013      	ands	r3, r2
 800235a:	2b00      	cmp	r3, #0
 800235c:	d01a      	beq.n	8002394 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f003 0304 	and.w	r3, r3, #4
 8002368:	2b00      	cmp	r3, #0
 800236a:	d013      	beq.n	8002394 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	681a      	ldr	r2, [r3, #0]
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f022 0204 	bic.w	r2, r2, #4
 800237a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002380:	2208      	movs	r2, #8
 8002382:	409a      	lsls	r2, r3
 8002384:	693b      	ldr	r3, [r7, #16]
 8002386:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800238c:	f043 0201 	orr.w	r2, r3, #1
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002398:	2201      	movs	r2, #1
 800239a:	409a      	lsls	r2, r3
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	4013      	ands	r3, r2
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d012      	beq.n	80023ca <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	695b      	ldr	r3, [r3, #20]
 80023aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d00b      	beq.n	80023ca <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023b6:	2201      	movs	r2, #1
 80023b8:	409a      	lsls	r2, r3
 80023ba:	693b      	ldr	r3, [r7, #16]
 80023bc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023c2:	f043 0202 	orr.w	r2, r3, #2
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023ce:	2204      	movs	r2, #4
 80023d0:	409a      	lsls	r2, r3
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	4013      	ands	r3, r2
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d012      	beq.n	8002400 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f003 0302 	and.w	r3, r3, #2
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d00b      	beq.n	8002400 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023ec:	2204      	movs	r2, #4
 80023ee:	409a      	lsls	r2, r3
 80023f0:	693b      	ldr	r3, [r7, #16]
 80023f2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023f8:	f043 0204 	orr.w	r2, r3, #4
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002404:	2210      	movs	r2, #16
 8002406:	409a      	lsls	r2, r3
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	4013      	ands	r3, r2
 800240c:	2b00      	cmp	r3, #0
 800240e:	d043      	beq.n	8002498 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f003 0308 	and.w	r3, r3, #8
 800241a:	2b00      	cmp	r3, #0
 800241c:	d03c      	beq.n	8002498 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002422:	2210      	movs	r2, #16
 8002424:	409a      	lsls	r2, r3
 8002426:	693b      	ldr	r3, [r7, #16]
 8002428:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002434:	2b00      	cmp	r3, #0
 8002436:	d018      	beq.n	800246a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002442:	2b00      	cmp	r3, #0
 8002444:	d108      	bne.n	8002458 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800244a:	2b00      	cmp	r3, #0
 800244c:	d024      	beq.n	8002498 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002452:	6878      	ldr	r0, [r7, #4]
 8002454:	4798      	blx	r3
 8002456:	e01f      	b.n	8002498 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800245c:	2b00      	cmp	r3, #0
 800245e:	d01b      	beq.n	8002498 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002464:	6878      	ldr	r0, [r7, #4]
 8002466:	4798      	blx	r3
 8002468:	e016      	b.n	8002498 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002474:	2b00      	cmp	r3, #0
 8002476:	d107      	bne.n	8002488 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	681a      	ldr	r2, [r3, #0]
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f022 0208 	bic.w	r2, r2, #8
 8002486:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800248c:	2b00      	cmp	r3, #0
 800248e:	d003      	beq.n	8002498 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002494:	6878      	ldr	r0, [r7, #4]
 8002496:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800249c:	2220      	movs	r2, #32
 800249e:	409a      	lsls	r2, r3
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	4013      	ands	r3, r2
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	f000 808e 	beq.w	80025c6 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	f003 0310 	and.w	r3, r3, #16
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	f000 8086 	beq.w	80025c6 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024be:	2220      	movs	r2, #32
 80024c0:	409a      	lsls	r2, r3
 80024c2:	693b      	ldr	r3, [r7, #16]
 80024c4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80024cc:	b2db      	uxtb	r3, r3
 80024ce:	2b05      	cmp	r3, #5
 80024d0:	d136      	bne.n	8002540 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	681a      	ldr	r2, [r3, #0]
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f022 0216 	bic.w	r2, r2, #22
 80024e0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	695a      	ldr	r2, [r3, #20]
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80024f0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d103      	bne.n	8002502 <HAL_DMA_IRQHandler+0x1da>
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d007      	beq.n	8002512 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	681a      	ldr	r2, [r3, #0]
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f022 0208 	bic.w	r2, r2, #8
 8002510:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002516:	223f      	movs	r2, #63	; 0x3f
 8002518:	409a      	lsls	r2, r3
 800251a:	693b      	ldr	r3, [r7, #16]
 800251c:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	2200      	movs	r2, #0
 8002522:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	2201      	movs	r2, #1
 800252a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002532:	2b00      	cmp	r3, #0
 8002534:	d07d      	beq.n	8002632 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800253a:	6878      	ldr	r0, [r7, #4]
 800253c:	4798      	blx	r3
        }
        return;
 800253e:	e078      	b.n	8002632 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800254a:	2b00      	cmp	r3, #0
 800254c:	d01c      	beq.n	8002588 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002558:	2b00      	cmp	r3, #0
 800255a:	d108      	bne.n	800256e <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002560:	2b00      	cmp	r3, #0
 8002562:	d030      	beq.n	80025c6 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002568:	6878      	ldr	r0, [r7, #4]
 800256a:	4798      	blx	r3
 800256c:	e02b      	b.n	80025c6 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002572:	2b00      	cmp	r3, #0
 8002574:	d027      	beq.n	80025c6 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800257a:	6878      	ldr	r0, [r7, #4]
 800257c:	4798      	blx	r3
 800257e:	e022      	b.n	80025c6 <HAL_DMA_IRQHandler+0x29e>
 8002580:	20000400 	.word	0x20000400
 8002584:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002592:	2b00      	cmp	r3, #0
 8002594:	d10f      	bne.n	80025b6 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	681a      	ldr	r2, [r3, #0]
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	f022 0210 	bic.w	r2, r2, #16
 80025a4:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	2200      	movs	r2, #0
 80025aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	2201      	movs	r2, #1
 80025b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d003      	beq.n	80025c6 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025c2:	6878      	ldr	r0, [r7, #4]
 80025c4:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d032      	beq.n	8002634 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025d2:	f003 0301 	and.w	r3, r3, #1
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d022      	beq.n	8002620 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	2205      	movs	r2, #5
 80025de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	681a      	ldr	r2, [r3, #0]
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f022 0201 	bic.w	r2, r2, #1
 80025f0:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80025f2:	68bb      	ldr	r3, [r7, #8]
 80025f4:	3301      	adds	r3, #1
 80025f6:	60bb      	str	r3, [r7, #8]
 80025f8:	697a      	ldr	r2, [r7, #20]
 80025fa:	429a      	cmp	r2, r3
 80025fc:	d307      	bcc.n	800260e <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f003 0301 	and.w	r3, r3, #1
 8002608:	2b00      	cmp	r3, #0
 800260a:	d1f2      	bne.n	80025f2 <HAL_DMA_IRQHandler+0x2ca>
 800260c:	e000      	b.n	8002610 <HAL_DMA_IRQHandler+0x2e8>
          break;
 800260e:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	2200      	movs	r2, #0
 8002614:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	2201      	movs	r2, #1
 800261c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002624:	2b00      	cmp	r3, #0
 8002626:	d005      	beq.n	8002634 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800262c:	6878      	ldr	r0, [r7, #4]
 800262e:	4798      	blx	r3
 8002630:	e000      	b.n	8002634 <HAL_DMA_IRQHandler+0x30c>
        return;
 8002632:	bf00      	nop
    }
  }
}
 8002634:	3718      	adds	r7, #24
 8002636:	46bd      	mov	sp, r7
 8002638:	bd80      	pop	{r7, pc}
 800263a:	bf00      	nop

0800263c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800263c:	b480      	push	{r7}
 800263e:	b085      	sub	sp, #20
 8002640:	af00      	add	r7, sp, #0
 8002642:	60f8      	str	r0, [r7, #12]
 8002644:	60b9      	str	r1, [r7, #8]
 8002646:	607a      	str	r2, [r7, #4]
 8002648:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	681a      	ldr	r2, [r3, #0]
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002658:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	683a      	ldr	r2, [r7, #0]
 8002660:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	689b      	ldr	r3, [r3, #8]
 8002666:	2b40      	cmp	r3, #64	; 0x40
 8002668:	d108      	bne.n	800267c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	687a      	ldr	r2, [r7, #4]
 8002670:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	68ba      	ldr	r2, [r7, #8]
 8002678:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800267a:	e007      	b.n	800268c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	68ba      	ldr	r2, [r7, #8]
 8002682:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	687a      	ldr	r2, [r7, #4]
 800268a:	60da      	str	r2, [r3, #12]
}
 800268c:	bf00      	nop
 800268e:	3714      	adds	r7, #20
 8002690:	46bd      	mov	sp, r7
 8002692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002696:	4770      	bx	lr

08002698 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002698:	b480      	push	{r7}
 800269a:	b085      	sub	sp, #20
 800269c:	af00      	add	r7, sp, #0
 800269e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	b2db      	uxtb	r3, r3
 80026a6:	3b10      	subs	r3, #16
 80026a8:	4a14      	ldr	r2, [pc, #80]	; (80026fc <DMA_CalcBaseAndBitshift+0x64>)
 80026aa:	fba2 2303 	umull	r2, r3, r2, r3
 80026ae:	091b      	lsrs	r3, r3, #4
 80026b0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80026b2:	4a13      	ldr	r2, [pc, #76]	; (8002700 <DMA_CalcBaseAndBitshift+0x68>)
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	4413      	add	r3, r2
 80026b8:	781b      	ldrb	r3, [r3, #0]
 80026ba:	461a      	mov	r2, r3
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	2b03      	cmp	r3, #3
 80026c4:	d909      	bls.n	80026da <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80026ce:	f023 0303 	bic.w	r3, r3, #3
 80026d2:	1d1a      	adds	r2, r3, #4
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	659a      	str	r2, [r3, #88]	; 0x58
 80026d8:	e007      	b.n	80026ea <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80026e2:	f023 0303 	bic.w	r3, r3, #3
 80026e6:	687a      	ldr	r2, [r7, #4]
 80026e8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80026ee:	4618      	mov	r0, r3
 80026f0:	3714      	adds	r7, #20
 80026f2:	46bd      	mov	sp, r7
 80026f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f8:	4770      	bx	lr
 80026fa:	bf00      	nop
 80026fc:	aaaaaaab 	.word	0xaaaaaaab
 8002700:	0800d8b4 	.word	0x0800d8b4

08002704 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002704:	b480      	push	{r7}
 8002706:	b085      	sub	sp, #20
 8002708:	af00      	add	r7, sp, #0
 800270a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800270c:	2300      	movs	r3, #0
 800270e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002714:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	699b      	ldr	r3, [r3, #24]
 800271a:	2b00      	cmp	r3, #0
 800271c:	d11f      	bne.n	800275e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800271e:	68bb      	ldr	r3, [r7, #8]
 8002720:	2b03      	cmp	r3, #3
 8002722:	d855      	bhi.n	80027d0 <DMA_CheckFifoParam+0xcc>
 8002724:	a201      	add	r2, pc, #4	; (adr r2, 800272c <DMA_CheckFifoParam+0x28>)
 8002726:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800272a:	bf00      	nop
 800272c:	0800273d 	.word	0x0800273d
 8002730:	0800274f 	.word	0x0800274f
 8002734:	0800273d 	.word	0x0800273d
 8002738:	080027d1 	.word	0x080027d1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002740:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002744:	2b00      	cmp	r3, #0
 8002746:	d045      	beq.n	80027d4 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8002748:	2301      	movs	r3, #1
 800274a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800274c:	e042      	b.n	80027d4 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002752:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002756:	d13f      	bne.n	80027d8 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8002758:	2301      	movs	r3, #1
 800275a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800275c:	e03c      	b.n	80027d8 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	699b      	ldr	r3, [r3, #24]
 8002762:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002766:	d121      	bne.n	80027ac <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002768:	68bb      	ldr	r3, [r7, #8]
 800276a:	2b03      	cmp	r3, #3
 800276c:	d836      	bhi.n	80027dc <DMA_CheckFifoParam+0xd8>
 800276e:	a201      	add	r2, pc, #4	; (adr r2, 8002774 <DMA_CheckFifoParam+0x70>)
 8002770:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002774:	08002785 	.word	0x08002785
 8002778:	0800278b 	.word	0x0800278b
 800277c:	08002785 	.word	0x08002785
 8002780:	0800279d 	.word	0x0800279d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002784:	2301      	movs	r3, #1
 8002786:	73fb      	strb	r3, [r7, #15]
      break;
 8002788:	e02f      	b.n	80027ea <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800278e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002792:	2b00      	cmp	r3, #0
 8002794:	d024      	beq.n	80027e0 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8002796:	2301      	movs	r3, #1
 8002798:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800279a:	e021      	b.n	80027e0 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027a0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80027a4:	d11e      	bne.n	80027e4 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 80027a6:	2301      	movs	r3, #1
 80027a8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80027aa:	e01b      	b.n	80027e4 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80027ac:	68bb      	ldr	r3, [r7, #8]
 80027ae:	2b02      	cmp	r3, #2
 80027b0:	d902      	bls.n	80027b8 <DMA_CheckFifoParam+0xb4>
 80027b2:	2b03      	cmp	r3, #3
 80027b4:	d003      	beq.n	80027be <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80027b6:	e018      	b.n	80027ea <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 80027b8:	2301      	movs	r3, #1
 80027ba:	73fb      	strb	r3, [r7, #15]
      break;
 80027bc:	e015      	b.n	80027ea <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027c2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d00e      	beq.n	80027e8 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 80027ca:	2301      	movs	r3, #1
 80027cc:	73fb      	strb	r3, [r7, #15]
      break;
 80027ce:	e00b      	b.n	80027e8 <DMA_CheckFifoParam+0xe4>
      break;
 80027d0:	bf00      	nop
 80027d2:	e00a      	b.n	80027ea <DMA_CheckFifoParam+0xe6>
      break;
 80027d4:	bf00      	nop
 80027d6:	e008      	b.n	80027ea <DMA_CheckFifoParam+0xe6>
      break;
 80027d8:	bf00      	nop
 80027da:	e006      	b.n	80027ea <DMA_CheckFifoParam+0xe6>
      break;
 80027dc:	bf00      	nop
 80027de:	e004      	b.n	80027ea <DMA_CheckFifoParam+0xe6>
      break;
 80027e0:	bf00      	nop
 80027e2:	e002      	b.n	80027ea <DMA_CheckFifoParam+0xe6>
      break;   
 80027e4:	bf00      	nop
 80027e6:	e000      	b.n	80027ea <DMA_CheckFifoParam+0xe6>
      break;
 80027e8:	bf00      	nop
    }
  } 
  
  return status; 
 80027ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80027ec:	4618      	mov	r0, r3
 80027ee:	3714      	adds	r7, #20
 80027f0:	46bd      	mov	sp, r7
 80027f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f6:	4770      	bx	lr

080027f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80027f8:	b580      	push	{r7, lr}
 80027fa:	b088      	sub	sp, #32
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	6078      	str	r0, [r7, #4]
 8002800:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002802:	2300      	movs	r3, #0
 8002804:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002806:	2300      	movs	r3, #0
 8002808:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800280a:	2300      	movs	r3, #0
 800280c:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	4a3b      	ldr	r2, [pc, #236]	; (8002900 <HAL_GPIO_Init+0x108>)
 8002812:	4293      	cmp	r3, r2
 8002814:	d017      	beq.n	8002846 <HAL_GPIO_Init+0x4e>
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	4a3a      	ldr	r2, [pc, #232]	; (8002904 <HAL_GPIO_Init+0x10c>)
 800281a:	4293      	cmp	r3, r2
 800281c:	d013      	beq.n	8002846 <HAL_GPIO_Init+0x4e>
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	4a39      	ldr	r2, [pc, #228]	; (8002908 <HAL_GPIO_Init+0x110>)
 8002822:	4293      	cmp	r3, r2
 8002824:	d00f      	beq.n	8002846 <HAL_GPIO_Init+0x4e>
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	4a38      	ldr	r2, [pc, #224]	; (800290c <HAL_GPIO_Init+0x114>)
 800282a:	4293      	cmp	r3, r2
 800282c:	d00b      	beq.n	8002846 <HAL_GPIO_Init+0x4e>
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	4a37      	ldr	r2, [pc, #220]	; (8002910 <HAL_GPIO_Init+0x118>)
 8002832:	4293      	cmp	r3, r2
 8002834:	d007      	beq.n	8002846 <HAL_GPIO_Init+0x4e>
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	4a36      	ldr	r2, [pc, #216]	; (8002914 <HAL_GPIO_Init+0x11c>)
 800283a:	4293      	cmp	r3, r2
 800283c:	d003      	beq.n	8002846 <HAL_GPIO_Init+0x4e>
 800283e:	21b3      	movs	r1, #179	; 0xb3
 8002840:	4835      	ldr	r0, [pc, #212]	; (8002918 <HAL_GPIO_Init+0x120>)
 8002842:	f7fe ff74 	bl	800172e <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 8002846:	683b      	ldr	r3, [r7, #0]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	b29b      	uxth	r3, r3
 800284c:	2b00      	cmp	r3, #0
 800284e:	d005      	beq.n	800285c <HAL_GPIO_Init+0x64>
 8002850:	683b      	ldr	r3, [r7, #0]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	0c1b      	lsrs	r3, r3, #16
 8002856:	041b      	lsls	r3, r3, #16
 8002858:	2b00      	cmp	r3, #0
 800285a:	d003      	beq.n	8002864 <HAL_GPIO_Init+0x6c>
 800285c:	21b4      	movs	r1, #180	; 0xb4
 800285e:	482e      	ldr	r0, [pc, #184]	; (8002918 <HAL_GPIO_Init+0x120>)
 8002860:	f7fe ff65 	bl	800172e <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 8002864:	683b      	ldr	r3, [r7, #0]
 8002866:	685b      	ldr	r3, [r3, #4]
 8002868:	2b00      	cmp	r3, #0
 800286a:	d035      	beq.n	80028d8 <HAL_GPIO_Init+0xe0>
 800286c:	683b      	ldr	r3, [r7, #0]
 800286e:	685b      	ldr	r3, [r3, #4]
 8002870:	2b01      	cmp	r3, #1
 8002872:	d031      	beq.n	80028d8 <HAL_GPIO_Init+0xe0>
 8002874:	683b      	ldr	r3, [r7, #0]
 8002876:	685b      	ldr	r3, [r3, #4]
 8002878:	2b11      	cmp	r3, #17
 800287a:	d02d      	beq.n	80028d8 <HAL_GPIO_Init+0xe0>
 800287c:	683b      	ldr	r3, [r7, #0]
 800287e:	685b      	ldr	r3, [r3, #4]
 8002880:	2b02      	cmp	r3, #2
 8002882:	d029      	beq.n	80028d8 <HAL_GPIO_Init+0xe0>
 8002884:	683b      	ldr	r3, [r7, #0]
 8002886:	685b      	ldr	r3, [r3, #4]
 8002888:	2b12      	cmp	r3, #18
 800288a:	d025      	beq.n	80028d8 <HAL_GPIO_Init+0xe0>
 800288c:	683b      	ldr	r3, [r7, #0]
 800288e:	685b      	ldr	r3, [r3, #4]
 8002890:	4a22      	ldr	r2, [pc, #136]	; (800291c <HAL_GPIO_Init+0x124>)
 8002892:	4293      	cmp	r3, r2
 8002894:	d020      	beq.n	80028d8 <HAL_GPIO_Init+0xe0>
 8002896:	683b      	ldr	r3, [r7, #0]
 8002898:	685b      	ldr	r3, [r3, #4]
 800289a:	4a21      	ldr	r2, [pc, #132]	; (8002920 <HAL_GPIO_Init+0x128>)
 800289c:	4293      	cmp	r3, r2
 800289e:	d01b      	beq.n	80028d8 <HAL_GPIO_Init+0xe0>
 80028a0:	683b      	ldr	r3, [r7, #0]
 80028a2:	685b      	ldr	r3, [r3, #4]
 80028a4:	4a1f      	ldr	r2, [pc, #124]	; (8002924 <HAL_GPIO_Init+0x12c>)
 80028a6:	4293      	cmp	r3, r2
 80028a8:	d016      	beq.n	80028d8 <HAL_GPIO_Init+0xe0>
 80028aa:	683b      	ldr	r3, [r7, #0]
 80028ac:	685b      	ldr	r3, [r3, #4]
 80028ae:	4a1e      	ldr	r2, [pc, #120]	; (8002928 <HAL_GPIO_Init+0x130>)
 80028b0:	4293      	cmp	r3, r2
 80028b2:	d011      	beq.n	80028d8 <HAL_GPIO_Init+0xe0>
 80028b4:	683b      	ldr	r3, [r7, #0]
 80028b6:	685b      	ldr	r3, [r3, #4]
 80028b8:	4a1c      	ldr	r2, [pc, #112]	; (800292c <HAL_GPIO_Init+0x134>)
 80028ba:	4293      	cmp	r3, r2
 80028bc:	d00c      	beq.n	80028d8 <HAL_GPIO_Init+0xe0>
 80028be:	683b      	ldr	r3, [r7, #0]
 80028c0:	685b      	ldr	r3, [r3, #4]
 80028c2:	4a1b      	ldr	r2, [pc, #108]	; (8002930 <HAL_GPIO_Init+0x138>)
 80028c4:	4293      	cmp	r3, r2
 80028c6:	d007      	beq.n	80028d8 <HAL_GPIO_Init+0xe0>
 80028c8:	683b      	ldr	r3, [r7, #0]
 80028ca:	685b      	ldr	r3, [r3, #4]
 80028cc:	2b03      	cmp	r3, #3
 80028ce:	d003      	beq.n	80028d8 <HAL_GPIO_Init+0xe0>
 80028d0:	21b5      	movs	r1, #181	; 0xb5
 80028d2:	4811      	ldr	r0, [pc, #68]	; (8002918 <HAL_GPIO_Init+0x120>)
 80028d4:	f7fe ff2b 	bl	800172e <assert_failed>
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 80028d8:	683b      	ldr	r3, [r7, #0]
 80028da:	689b      	ldr	r3, [r3, #8]
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d00b      	beq.n	80028f8 <HAL_GPIO_Init+0x100>
 80028e0:	683b      	ldr	r3, [r7, #0]
 80028e2:	689b      	ldr	r3, [r3, #8]
 80028e4:	2b01      	cmp	r3, #1
 80028e6:	d007      	beq.n	80028f8 <HAL_GPIO_Init+0x100>
 80028e8:	683b      	ldr	r3, [r7, #0]
 80028ea:	689b      	ldr	r3, [r3, #8]
 80028ec:	2b02      	cmp	r3, #2
 80028ee:	d003      	beq.n	80028f8 <HAL_GPIO_Init+0x100>
 80028f0:	21b6      	movs	r1, #182	; 0xb6
 80028f2:	4809      	ldr	r0, [pc, #36]	; (8002918 <HAL_GPIO_Init+0x120>)
 80028f4:	f7fe ff1b 	bl	800172e <assert_failed>

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80028f8:	2300      	movs	r3, #0
 80028fa:	61fb      	str	r3, [r7, #28]
 80028fc:	e211      	b.n	8002d22 <HAL_GPIO_Init+0x52a>
 80028fe:	bf00      	nop
 8002900:	40020000 	.word	0x40020000
 8002904:	40020400 	.word	0x40020400
 8002908:	40020800 	.word	0x40020800
 800290c:	40020c00 	.word	0x40020c00
 8002910:	40021000 	.word	0x40021000
 8002914:	40021c00 	.word	0x40021c00
 8002918:	0800d68c 	.word	0x0800d68c
 800291c:	10110000 	.word	0x10110000
 8002920:	10210000 	.word	0x10210000
 8002924:	10310000 	.word	0x10310000
 8002928:	10120000 	.word	0x10120000
 800292c:	10220000 	.word	0x10220000
 8002930:	10320000 	.word	0x10320000
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002934:	2201      	movs	r2, #1
 8002936:	69fb      	ldr	r3, [r7, #28]
 8002938:	fa02 f303 	lsl.w	r3, r2, r3
 800293c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800293e:	683b      	ldr	r3, [r7, #0]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	697a      	ldr	r2, [r7, #20]
 8002944:	4013      	ands	r3, r2
 8002946:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002948:	693a      	ldr	r2, [r7, #16]
 800294a:	697b      	ldr	r3, [r7, #20]
 800294c:	429a      	cmp	r2, r3
 800294e:	f040 81e5 	bne.w	8002d1c <HAL_GPIO_Init+0x524>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002952:	683b      	ldr	r3, [r7, #0]
 8002954:	685b      	ldr	r3, [r3, #4]
 8002956:	2b01      	cmp	r3, #1
 8002958:	d00b      	beq.n	8002972 <HAL_GPIO_Init+0x17a>
 800295a:	683b      	ldr	r3, [r7, #0]
 800295c:	685b      	ldr	r3, [r3, #4]
 800295e:	2b02      	cmp	r3, #2
 8002960:	d007      	beq.n	8002972 <HAL_GPIO_Init+0x17a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002962:	683b      	ldr	r3, [r7, #0]
 8002964:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002966:	2b11      	cmp	r3, #17
 8002968:	d003      	beq.n	8002972 <HAL_GPIO_Init+0x17a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800296a:	683b      	ldr	r3, [r7, #0]
 800296c:	685b      	ldr	r3, [r3, #4]
 800296e:	2b12      	cmp	r3, #18
 8002970:	d144      	bne.n	80029fc <HAL_GPIO_Init+0x204>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8002972:	683b      	ldr	r3, [r7, #0]
 8002974:	68db      	ldr	r3, [r3, #12]
 8002976:	2b00      	cmp	r3, #0
 8002978:	d00f      	beq.n	800299a <HAL_GPIO_Init+0x1a2>
 800297a:	683b      	ldr	r3, [r7, #0]
 800297c:	68db      	ldr	r3, [r3, #12]
 800297e:	2b01      	cmp	r3, #1
 8002980:	d00b      	beq.n	800299a <HAL_GPIO_Init+0x1a2>
 8002982:	683b      	ldr	r3, [r7, #0]
 8002984:	68db      	ldr	r3, [r3, #12]
 8002986:	2b02      	cmp	r3, #2
 8002988:	d007      	beq.n	800299a <HAL_GPIO_Init+0x1a2>
 800298a:	683b      	ldr	r3, [r7, #0]
 800298c:	68db      	ldr	r3, [r3, #12]
 800298e:	2b03      	cmp	r3, #3
 8002990:	d003      	beq.n	800299a <HAL_GPIO_Init+0x1a2>
 8002992:	21c8      	movs	r1, #200	; 0xc8
 8002994:	489f      	ldr	r0, [pc, #636]	; (8002c14 <HAL_GPIO_Init+0x41c>)
 8002996:	f7fe feca 	bl	800172e <assert_failed>
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	689b      	ldr	r3, [r3, #8]
 800299e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80029a0:	69fb      	ldr	r3, [r7, #28]
 80029a2:	005b      	lsls	r3, r3, #1
 80029a4:	2203      	movs	r2, #3
 80029a6:	fa02 f303 	lsl.w	r3, r2, r3
 80029aa:	43db      	mvns	r3, r3
 80029ac:	69ba      	ldr	r2, [r7, #24]
 80029ae:	4013      	ands	r3, r2
 80029b0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80029b2:	683b      	ldr	r3, [r7, #0]
 80029b4:	68da      	ldr	r2, [r3, #12]
 80029b6:	69fb      	ldr	r3, [r7, #28]
 80029b8:	005b      	lsls	r3, r3, #1
 80029ba:	fa02 f303 	lsl.w	r3, r2, r3
 80029be:	69ba      	ldr	r2, [r7, #24]
 80029c0:	4313      	orrs	r3, r2
 80029c2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	69ba      	ldr	r2, [r7, #24]
 80029c8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	685b      	ldr	r3, [r3, #4]
 80029ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80029d0:	2201      	movs	r2, #1
 80029d2:	69fb      	ldr	r3, [r7, #28]
 80029d4:	fa02 f303 	lsl.w	r3, r2, r3
 80029d8:	43db      	mvns	r3, r3
 80029da:	69ba      	ldr	r2, [r7, #24]
 80029dc:	4013      	ands	r3, r2
 80029de:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80029e0:	683b      	ldr	r3, [r7, #0]
 80029e2:	685b      	ldr	r3, [r3, #4]
 80029e4:	091b      	lsrs	r3, r3, #4
 80029e6:	f003 0201 	and.w	r2, r3, #1
 80029ea:	69fb      	ldr	r3, [r7, #28]
 80029ec:	fa02 f303 	lsl.w	r3, r2, r3
 80029f0:	69ba      	ldr	r2, [r7, #24]
 80029f2:	4313      	orrs	r3, r2
 80029f4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	69ba      	ldr	r2, [r7, #24]
 80029fa:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	68db      	ldr	r3, [r3, #12]
 8002a00:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002a02:	69fb      	ldr	r3, [r7, #28]
 8002a04:	005b      	lsls	r3, r3, #1
 8002a06:	2203      	movs	r2, #3
 8002a08:	fa02 f303 	lsl.w	r3, r2, r3
 8002a0c:	43db      	mvns	r3, r3
 8002a0e:	69ba      	ldr	r2, [r7, #24]
 8002a10:	4013      	ands	r3, r2
 8002a12:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002a14:	683b      	ldr	r3, [r7, #0]
 8002a16:	689a      	ldr	r2, [r3, #8]
 8002a18:	69fb      	ldr	r3, [r7, #28]
 8002a1a:	005b      	lsls	r3, r3, #1
 8002a1c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a20:	69ba      	ldr	r2, [r7, #24]
 8002a22:	4313      	orrs	r3, r2
 8002a24:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	69ba      	ldr	r2, [r7, #24]
 8002a2a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002a2c:	683b      	ldr	r3, [r7, #0]
 8002a2e:	685b      	ldr	r3, [r3, #4]
 8002a30:	2b02      	cmp	r3, #2
 8002a32:	d004      	beq.n	8002a3e <HAL_GPIO_Init+0x246>
 8002a34:	683b      	ldr	r3, [r7, #0]
 8002a36:	685b      	ldr	r3, [r3, #4]
 8002a38:	2b12      	cmp	r3, #18
 8002a3a:	f040 80a0 	bne.w	8002b7e <HAL_GPIO_Init+0x386>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 8002a3e:	683b      	ldr	r3, [r7, #0]
 8002a40:	691b      	ldr	r3, [r3, #16]
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d077      	beq.n	8002b36 <HAL_GPIO_Init+0x33e>
 8002a46:	683b      	ldr	r3, [r7, #0]
 8002a48:	691b      	ldr	r3, [r3, #16]
 8002a4a:	2b09      	cmp	r3, #9
 8002a4c:	d073      	beq.n	8002b36 <HAL_GPIO_Init+0x33e>
 8002a4e:	683b      	ldr	r3, [r7, #0]
 8002a50:	691b      	ldr	r3, [r3, #16]
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d06f      	beq.n	8002b36 <HAL_GPIO_Init+0x33e>
 8002a56:	683b      	ldr	r3, [r7, #0]
 8002a58:	691b      	ldr	r3, [r3, #16]
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d06b      	beq.n	8002b36 <HAL_GPIO_Init+0x33e>
 8002a5e:	683b      	ldr	r3, [r7, #0]
 8002a60:	691b      	ldr	r3, [r3, #16]
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d067      	beq.n	8002b36 <HAL_GPIO_Init+0x33e>
 8002a66:	683b      	ldr	r3, [r7, #0]
 8002a68:	691b      	ldr	r3, [r3, #16]
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d063      	beq.n	8002b36 <HAL_GPIO_Init+0x33e>
 8002a6e:	683b      	ldr	r3, [r7, #0]
 8002a70:	691b      	ldr	r3, [r3, #16]
 8002a72:	2b01      	cmp	r3, #1
 8002a74:	d05f      	beq.n	8002b36 <HAL_GPIO_Init+0x33e>
 8002a76:	683b      	ldr	r3, [r7, #0]
 8002a78:	691b      	ldr	r3, [r3, #16]
 8002a7a:	2b01      	cmp	r3, #1
 8002a7c:	d05b      	beq.n	8002b36 <HAL_GPIO_Init+0x33e>
 8002a7e:	683b      	ldr	r3, [r7, #0]
 8002a80:	691b      	ldr	r3, [r3, #16]
 8002a82:	2b02      	cmp	r3, #2
 8002a84:	d057      	beq.n	8002b36 <HAL_GPIO_Init+0x33e>
 8002a86:	683b      	ldr	r3, [r7, #0]
 8002a88:	691b      	ldr	r3, [r3, #16]
 8002a8a:	2b02      	cmp	r3, #2
 8002a8c:	d053      	beq.n	8002b36 <HAL_GPIO_Init+0x33e>
 8002a8e:	683b      	ldr	r3, [r7, #0]
 8002a90:	691b      	ldr	r3, [r3, #16]
 8002a92:	2b02      	cmp	r3, #2
 8002a94:	d04f      	beq.n	8002b36 <HAL_GPIO_Init+0x33e>
 8002a96:	683b      	ldr	r3, [r7, #0]
 8002a98:	691b      	ldr	r3, [r3, #16]
 8002a9a:	2b04      	cmp	r3, #4
 8002a9c:	d04b      	beq.n	8002b36 <HAL_GPIO_Init+0x33e>
 8002a9e:	683b      	ldr	r3, [r7, #0]
 8002aa0:	691b      	ldr	r3, [r3, #16]
 8002aa2:	2b04      	cmp	r3, #4
 8002aa4:	d047      	beq.n	8002b36 <HAL_GPIO_Init+0x33e>
 8002aa6:	683b      	ldr	r3, [r7, #0]
 8002aa8:	691b      	ldr	r3, [r3, #16]
 8002aaa:	2b04      	cmp	r3, #4
 8002aac:	d043      	beq.n	8002b36 <HAL_GPIO_Init+0x33e>
 8002aae:	683b      	ldr	r3, [r7, #0]
 8002ab0:	691b      	ldr	r3, [r3, #16]
 8002ab2:	2b05      	cmp	r3, #5
 8002ab4:	d03f      	beq.n	8002b36 <HAL_GPIO_Init+0x33e>
 8002ab6:	683b      	ldr	r3, [r7, #0]
 8002ab8:	691b      	ldr	r3, [r3, #16]
 8002aba:	2b05      	cmp	r3, #5
 8002abc:	d03b      	beq.n	8002b36 <HAL_GPIO_Init+0x33e>
 8002abe:	683b      	ldr	r3, [r7, #0]
 8002ac0:	691b      	ldr	r3, [r3, #16]
 8002ac2:	2b05      	cmp	r3, #5
 8002ac4:	d037      	beq.n	8002b36 <HAL_GPIO_Init+0x33e>
 8002ac6:	683b      	ldr	r3, [r7, #0]
 8002ac8:	691b      	ldr	r3, [r3, #16]
 8002aca:	2b06      	cmp	r3, #6
 8002acc:	d033      	beq.n	8002b36 <HAL_GPIO_Init+0x33e>
 8002ace:	683b      	ldr	r3, [r7, #0]
 8002ad0:	691b      	ldr	r3, [r3, #16]
 8002ad2:	2b06      	cmp	r3, #6
 8002ad4:	d02f      	beq.n	8002b36 <HAL_GPIO_Init+0x33e>
 8002ad6:	683b      	ldr	r3, [r7, #0]
 8002ad8:	691b      	ldr	r3, [r3, #16]
 8002ada:	2b05      	cmp	r3, #5
 8002adc:	d02b      	beq.n	8002b36 <HAL_GPIO_Init+0x33e>
 8002ade:	683b      	ldr	r3, [r7, #0]
 8002ae0:	691b      	ldr	r3, [r3, #16]
 8002ae2:	2b06      	cmp	r3, #6
 8002ae4:	d027      	beq.n	8002b36 <HAL_GPIO_Init+0x33e>
 8002ae6:	683b      	ldr	r3, [r7, #0]
 8002ae8:	691b      	ldr	r3, [r3, #16]
 8002aea:	2b07      	cmp	r3, #7
 8002aec:	d023      	beq.n	8002b36 <HAL_GPIO_Init+0x33e>
 8002aee:	683b      	ldr	r3, [r7, #0]
 8002af0:	691b      	ldr	r3, [r3, #16]
 8002af2:	2b07      	cmp	r3, #7
 8002af4:	d01f      	beq.n	8002b36 <HAL_GPIO_Init+0x33e>
 8002af6:	683b      	ldr	r3, [r7, #0]
 8002af8:	691b      	ldr	r3, [r3, #16]
 8002afa:	2b07      	cmp	r3, #7
 8002afc:	d01b      	beq.n	8002b36 <HAL_GPIO_Init+0x33e>
 8002afe:	683b      	ldr	r3, [r7, #0]
 8002b00:	691b      	ldr	r3, [r3, #16]
 8002b02:	2b08      	cmp	r3, #8
 8002b04:	d017      	beq.n	8002b36 <HAL_GPIO_Init+0x33e>
 8002b06:	683b      	ldr	r3, [r7, #0]
 8002b08:	691b      	ldr	r3, [r3, #16]
 8002b0a:	2b0a      	cmp	r3, #10
 8002b0c:	d013      	beq.n	8002b36 <HAL_GPIO_Init+0x33e>
 8002b0e:	683b      	ldr	r3, [r7, #0]
 8002b10:	691b      	ldr	r3, [r3, #16]
 8002b12:	2b09      	cmp	r3, #9
 8002b14:	d00f      	beq.n	8002b36 <HAL_GPIO_Init+0x33e>
 8002b16:	683b      	ldr	r3, [r7, #0]
 8002b18:	691b      	ldr	r3, [r3, #16]
 8002b1a:	2b09      	cmp	r3, #9
 8002b1c:	d00b      	beq.n	8002b36 <HAL_GPIO_Init+0x33e>
 8002b1e:	683b      	ldr	r3, [r7, #0]
 8002b20:	691b      	ldr	r3, [r3, #16]
 8002b22:	2b0c      	cmp	r3, #12
 8002b24:	d007      	beq.n	8002b36 <HAL_GPIO_Init+0x33e>
 8002b26:	683b      	ldr	r3, [r7, #0]
 8002b28:	691b      	ldr	r3, [r3, #16]
 8002b2a:	2b0f      	cmp	r3, #15
 8002b2c:	d003      	beq.n	8002b36 <HAL_GPIO_Init+0x33e>
 8002b2e:	21e0      	movs	r1, #224	; 0xe0
 8002b30:	4838      	ldr	r0, [pc, #224]	; (8002c14 <HAL_GPIO_Init+0x41c>)
 8002b32:	f7fe fdfc 	bl	800172e <assert_failed>
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002b36:	69fb      	ldr	r3, [r7, #28]
 8002b38:	08da      	lsrs	r2, r3, #3
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	3208      	adds	r2, #8
 8002b3e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002b42:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002b44:	69fb      	ldr	r3, [r7, #28]
 8002b46:	f003 0307 	and.w	r3, r3, #7
 8002b4a:	009b      	lsls	r3, r3, #2
 8002b4c:	220f      	movs	r2, #15
 8002b4e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b52:	43db      	mvns	r3, r3
 8002b54:	69ba      	ldr	r2, [r7, #24]
 8002b56:	4013      	ands	r3, r2
 8002b58:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002b5a:	683b      	ldr	r3, [r7, #0]
 8002b5c:	691a      	ldr	r2, [r3, #16]
 8002b5e:	69fb      	ldr	r3, [r7, #28]
 8002b60:	f003 0307 	and.w	r3, r3, #7
 8002b64:	009b      	lsls	r3, r3, #2
 8002b66:	fa02 f303 	lsl.w	r3, r2, r3
 8002b6a:	69ba      	ldr	r2, [r7, #24]
 8002b6c:	4313      	orrs	r3, r2
 8002b6e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002b70:	69fb      	ldr	r3, [r7, #28]
 8002b72:	08da      	lsrs	r2, r3, #3
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	3208      	adds	r2, #8
 8002b78:	69b9      	ldr	r1, [r7, #24]
 8002b7a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002b84:	69fb      	ldr	r3, [r7, #28]
 8002b86:	005b      	lsls	r3, r3, #1
 8002b88:	2203      	movs	r2, #3
 8002b8a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b8e:	43db      	mvns	r3, r3
 8002b90:	69ba      	ldr	r2, [r7, #24]
 8002b92:	4013      	ands	r3, r2
 8002b94:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002b96:	683b      	ldr	r3, [r7, #0]
 8002b98:	685b      	ldr	r3, [r3, #4]
 8002b9a:	f003 0203 	and.w	r2, r3, #3
 8002b9e:	69fb      	ldr	r3, [r7, #28]
 8002ba0:	005b      	lsls	r3, r3, #1
 8002ba2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ba6:	69ba      	ldr	r2, [r7, #24]
 8002ba8:	4313      	orrs	r3, r2
 8002baa:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	69ba      	ldr	r2, [r7, #24]
 8002bb0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002bb2:	683b      	ldr	r3, [r7, #0]
 8002bb4:	685b      	ldr	r3, [r3, #4]
 8002bb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	f000 80ae 	beq.w	8002d1c <HAL_GPIO_Init+0x524>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002bc0:	2300      	movs	r3, #0
 8002bc2:	60fb      	str	r3, [r7, #12]
 8002bc4:	4b14      	ldr	r3, [pc, #80]	; (8002c18 <HAL_GPIO_Init+0x420>)
 8002bc6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bc8:	4a13      	ldr	r2, [pc, #76]	; (8002c18 <HAL_GPIO_Init+0x420>)
 8002bca:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002bce:	6453      	str	r3, [r2, #68]	; 0x44
 8002bd0:	4b11      	ldr	r3, [pc, #68]	; (8002c18 <HAL_GPIO_Init+0x420>)
 8002bd2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bd4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002bd8:	60fb      	str	r3, [r7, #12]
 8002bda:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002bdc:	4a0f      	ldr	r2, [pc, #60]	; (8002c1c <HAL_GPIO_Init+0x424>)
 8002bde:	69fb      	ldr	r3, [r7, #28]
 8002be0:	089b      	lsrs	r3, r3, #2
 8002be2:	3302      	adds	r3, #2
 8002be4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002be8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002bea:	69fb      	ldr	r3, [r7, #28]
 8002bec:	f003 0303 	and.w	r3, r3, #3
 8002bf0:	009b      	lsls	r3, r3, #2
 8002bf2:	220f      	movs	r2, #15
 8002bf4:	fa02 f303 	lsl.w	r3, r2, r3
 8002bf8:	43db      	mvns	r3, r3
 8002bfa:	69ba      	ldr	r2, [r7, #24]
 8002bfc:	4013      	ands	r3, r2
 8002bfe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	4a07      	ldr	r2, [pc, #28]	; (8002c20 <HAL_GPIO_Init+0x428>)
 8002c04:	4293      	cmp	r3, r2
 8002c06:	d025      	beq.n	8002c54 <HAL_GPIO_Init+0x45c>
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	4a06      	ldr	r2, [pc, #24]	; (8002c24 <HAL_GPIO_Init+0x42c>)
 8002c0c:	4293      	cmp	r3, r2
 8002c0e:	d01f      	beq.n	8002c50 <HAL_GPIO_Init+0x458>
 8002c10:	e00a      	b.n	8002c28 <HAL_GPIO_Init+0x430>
 8002c12:	bf00      	nop
 8002c14:	0800d68c 	.word	0x0800d68c
 8002c18:	40023800 	.word	0x40023800
 8002c1c:	40013800 	.word	0x40013800
 8002c20:	40020000 	.word	0x40020000
 8002c24:	40020400 	.word	0x40020400
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	4a42      	ldr	r2, [pc, #264]	; (8002d34 <HAL_GPIO_Init+0x53c>)
 8002c2c:	4293      	cmp	r3, r2
 8002c2e:	d00d      	beq.n	8002c4c <HAL_GPIO_Init+0x454>
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	4a41      	ldr	r2, [pc, #260]	; (8002d38 <HAL_GPIO_Init+0x540>)
 8002c34:	4293      	cmp	r3, r2
 8002c36:	d007      	beq.n	8002c48 <HAL_GPIO_Init+0x450>
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	4a40      	ldr	r2, [pc, #256]	; (8002d3c <HAL_GPIO_Init+0x544>)
 8002c3c:	4293      	cmp	r3, r2
 8002c3e:	d101      	bne.n	8002c44 <HAL_GPIO_Init+0x44c>
 8002c40:	2304      	movs	r3, #4
 8002c42:	e008      	b.n	8002c56 <HAL_GPIO_Init+0x45e>
 8002c44:	2307      	movs	r3, #7
 8002c46:	e006      	b.n	8002c56 <HAL_GPIO_Init+0x45e>
 8002c48:	2303      	movs	r3, #3
 8002c4a:	e004      	b.n	8002c56 <HAL_GPIO_Init+0x45e>
 8002c4c:	2302      	movs	r3, #2
 8002c4e:	e002      	b.n	8002c56 <HAL_GPIO_Init+0x45e>
 8002c50:	2301      	movs	r3, #1
 8002c52:	e000      	b.n	8002c56 <HAL_GPIO_Init+0x45e>
 8002c54:	2300      	movs	r3, #0
 8002c56:	69fa      	ldr	r2, [r7, #28]
 8002c58:	f002 0203 	and.w	r2, r2, #3
 8002c5c:	0092      	lsls	r2, r2, #2
 8002c5e:	4093      	lsls	r3, r2
 8002c60:	69ba      	ldr	r2, [r7, #24]
 8002c62:	4313      	orrs	r3, r2
 8002c64:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002c66:	4936      	ldr	r1, [pc, #216]	; (8002d40 <HAL_GPIO_Init+0x548>)
 8002c68:	69fb      	ldr	r3, [r7, #28]
 8002c6a:	089b      	lsrs	r3, r3, #2
 8002c6c:	3302      	adds	r3, #2
 8002c6e:	69ba      	ldr	r2, [r7, #24]
 8002c70:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002c74:	4b33      	ldr	r3, [pc, #204]	; (8002d44 <HAL_GPIO_Init+0x54c>)
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c7a:	693b      	ldr	r3, [r7, #16]
 8002c7c:	43db      	mvns	r3, r3
 8002c7e:	69ba      	ldr	r2, [r7, #24]
 8002c80:	4013      	ands	r3, r2
 8002c82:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002c84:	683b      	ldr	r3, [r7, #0]
 8002c86:	685b      	ldr	r3, [r3, #4]
 8002c88:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d003      	beq.n	8002c98 <HAL_GPIO_Init+0x4a0>
        {
          temp |= iocurrent;
 8002c90:	69ba      	ldr	r2, [r7, #24]
 8002c92:	693b      	ldr	r3, [r7, #16]
 8002c94:	4313      	orrs	r3, r2
 8002c96:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002c98:	4a2a      	ldr	r2, [pc, #168]	; (8002d44 <HAL_GPIO_Init+0x54c>)
 8002c9a:	69bb      	ldr	r3, [r7, #24]
 8002c9c:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002c9e:	4b29      	ldr	r3, [pc, #164]	; (8002d44 <HAL_GPIO_Init+0x54c>)
 8002ca0:	685b      	ldr	r3, [r3, #4]
 8002ca2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ca4:	693b      	ldr	r3, [r7, #16]
 8002ca6:	43db      	mvns	r3, r3
 8002ca8:	69ba      	ldr	r2, [r7, #24]
 8002caa:	4013      	ands	r3, r2
 8002cac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002cae:	683b      	ldr	r3, [r7, #0]
 8002cb0:	685b      	ldr	r3, [r3, #4]
 8002cb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d003      	beq.n	8002cc2 <HAL_GPIO_Init+0x4ca>
        {
          temp |= iocurrent;
 8002cba:	69ba      	ldr	r2, [r7, #24]
 8002cbc:	693b      	ldr	r3, [r7, #16]
 8002cbe:	4313      	orrs	r3, r2
 8002cc0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002cc2:	4a20      	ldr	r2, [pc, #128]	; (8002d44 <HAL_GPIO_Init+0x54c>)
 8002cc4:	69bb      	ldr	r3, [r7, #24]
 8002cc6:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002cc8:	4b1e      	ldr	r3, [pc, #120]	; (8002d44 <HAL_GPIO_Init+0x54c>)
 8002cca:	689b      	ldr	r3, [r3, #8]
 8002ccc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002cce:	693b      	ldr	r3, [r7, #16]
 8002cd0:	43db      	mvns	r3, r3
 8002cd2:	69ba      	ldr	r2, [r7, #24]
 8002cd4:	4013      	ands	r3, r2
 8002cd6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002cd8:	683b      	ldr	r3, [r7, #0]
 8002cda:	685b      	ldr	r3, [r3, #4]
 8002cdc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d003      	beq.n	8002cec <HAL_GPIO_Init+0x4f4>
        {
          temp |= iocurrent;
 8002ce4:	69ba      	ldr	r2, [r7, #24]
 8002ce6:	693b      	ldr	r3, [r7, #16]
 8002ce8:	4313      	orrs	r3, r2
 8002cea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002cec:	4a15      	ldr	r2, [pc, #84]	; (8002d44 <HAL_GPIO_Init+0x54c>)
 8002cee:	69bb      	ldr	r3, [r7, #24]
 8002cf0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002cf2:	4b14      	ldr	r3, [pc, #80]	; (8002d44 <HAL_GPIO_Init+0x54c>)
 8002cf4:	68db      	ldr	r3, [r3, #12]
 8002cf6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002cf8:	693b      	ldr	r3, [r7, #16]
 8002cfa:	43db      	mvns	r3, r3
 8002cfc:	69ba      	ldr	r2, [r7, #24]
 8002cfe:	4013      	ands	r3, r2
 8002d00:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002d02:	683b      	ldr	r3, [r7, #0]
 8002d04:	685b      	ldr	r3, [r3, #4]
 8002d06:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d003      	beq.n	8002d16 <HAL_GPIO_Init+0x51e>
        {
          temp |= iocurrent;
 8002d0e:	69ba      	ldr	r2, [r7, #24]
 8002d10:	693b      	ldr	r3, [r7, #16]
 8002d12:	4313      	orrs	r3, r2
 8002d14:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002d16:	4a0b      	ldr	r2, [pc, #44]	; (8002d44 <HAL_GPIO_Init+0x54c>)
 8002d18:	69bb      	ldr	r3, [r7, #24]
 8002d1a:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002d1c:	69fb      	ldr	r3, [r7, #28]
 8002d1e:	3301      	adds	r3, #1
 8002d20:	61fb      	str	r3, [r7, #28]
 8002d22:	69fb      	ldr	r3, [r7, #28]
 8002d24:	2b0f      	cmp	r3, #15
 8002d26:	f67f ae05 	bls.w	8002934 <HAL_GPIO_Init+0x13c>
      }
    }
  }
}
 8002d2a:	bf00      	nop
 8002d2c:	3720      	adds	r7, #32
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	bd80      	pop	{r7, pc}
 8002d32:	bf00      	nop
 8002d34:	40020800 	.word	0x40020800
 8002d38:	40020c00 	.word	0x40020c00
 8002d3c:	40021000 	.word	0x40021000
 8002d40:	40013800 	.word	0x40013800
 8002d44:	40013c00 	.word	0x40013c00

08002d48 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002d48:	b580      	push	{r7, lr}
 8002d4a:	b082      	sub	sp, #8
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	6078      	str	r0, [r7, #4]
 8002d50:	460b      	mov	r3, r1
 8002d52:	807b      	strh	r3, [r7, #2]
 8002d54:	4613      	mov	r3, r2
 8002d56:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8002d58:	887b      	ldrh	r3, [r7, #2]
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d004      	beq.n	8002d68 <HAL_GPIO_WritePin+0x20>
 8002d5e:	887b      	ldrh	r3, [r7, #2]
 8002d60:	0c1b      	lsrs	r3, r3, #16
 8002d62:	041b      	lsls	r3, r3, #16
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d004      	beq.n	8002d72 <HAL_GPIO_WritePin+0x2a>
 8002d68:	f240 119f 	movw	r1, #415	; 0x19f
 8002d6c:	480e      	ldr	r0, [pc, #56]	; (8002da8 <HAL_GPIO_WritePin+0x60>)
 8002d6e:	f7fe fcde 	bl	800172e <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 8002d72:	787b      	ldrb	r3, [r7, #1]
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d007      	beq.n	8002d88 <HAL_GPIO_WritePin+0x40>
 8002d78:	787b      	ldrb	r3, [r7, #1]
 8002d7a:	2b01      	cmp	r3, #1
 8002d7c:	d004      	beq.n	8002d88 <HAL_GPIO_WritePin+0x40>
 8002d7e:	f44f 71d0 	mov.w	r1, #416	; 0x1a0
 8002d82:	4809      	ldr	r0, [pc, #36]	; (8002da8 <HAL_GPIO_WritePin+0x60>)
 8002d84:	f7fe fcd3 	bl	800172e <assert_failed>

  if(PinState != GPIO_PIN_RESET)
 8002d88:	787b      	ldrb	r3, [r7, #1]
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d003      	beq.n	8002d96 <HAL_GPIO_WritePin+0x4e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002d8e:	887a      	ldrh	r2, [r7, #2]
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002d94:	e003      	b.n	8002d9e <HAL_GPIO_WritePin+0x56>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002d96:	887b      	ldrh	r3, [r7, #2]
 8002d98:	041a      	lsls	r2, r3, #16
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	619a      	str	r2, [r3, #24]
}
 8002d9e:	bf00      	nop
 8002da0:	3708      	adds	r7, #8
 8002da2:	46bd      	mov	sp, r7
 8002da4:	bd80      	pop	{r7, pc}
 8002da6:	bf00      	nop
 8002da8:	0800d68c 	.word	0x0800d68c

08002dac <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002dac:	b580      	push	{r7, lr}
 8002dae:	b084      	sub	sp, #16
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d101      	bne.n	8002dbe <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002dba:	2301      	movs	r3, #1
 8002dbc:	e1b1      	b.n	8003122 <HAL_I2C_Init+0x376>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	4aa2      	ldr	r2, [pc, #648]	; (800304c <HAL_I2C_Init+0x2a0>)
 8002dc4:	4293      	cmp	r3, r2
 8002dc6:	d00e      	beq.n	8002de6 <HAL_I2C_Init+0x3a>
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	4aa0      	ldr	r2, [pc, #640]	; (8003050 <HAL_I2C_Init+0x2a4>)
 8002dce:	4293      	cmp	r3, r2
 8002dd0:	d009      	beq.n	8002de6 <HAL_I2C_Init+0x3a>
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	4a9f      	ldr	r2, [pc, #636]	; (8003054 <HAL_I2C_Init+0x2a8>)
 8002dd8:	4293      	cmp	r3, r2
 8002dda:	d004      	beq.n	8002de6 <HAL_I2C_Init+0x3a>
 8002ddc:	f240 11bf 	movw	r1, #447	; 0x1bf
 8002de0:	489d      	ldr	r0, [pc, #628]	; (8003058 <HAL_I2C_Init+0x2ac>)
 8002de2:	f7fe fca4 	bl	800172e <assert_failed>
  assert_param(IS_I2C_CLOCK_SPEED(hi2c->Init.ClockSpeed));
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	685b      	ldr	r3, [r3, #4]
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d004      	beq.n	8002df8 <HAL_I2C_Init+0x4c>
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	685b      	ldr	r3, [r3, #4]
 8002df2:	4a9a      	ldr	r2, [pc, #616]	; (800305c <HAL_I2C_Init+0x2b0>)
 8002df4:	4293      	cmp	r3, r2
 8002df6:	d904      	bls.n	8002e02 <HAL_I2C_Init+0x56>
 8002df8:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 8002dfc:	4896      	ldr	r0, [pc, #600]	; (8003058 <HAL_I2C_Init+0x2ac>)
 8002dfe:	f7fe fc96 	bl	800172e <assert_failed>
  assert_param(IS_I2C_DUTY_CYCLE(hi2c->Init.DutyCycle));
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	689b      	ldr	r3, [r3, #8]
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d009      	beq.n	8002e1e <HAL_I2C_Init+0x72>
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	689b      	ldr	r3, [r3, #8]
 8002e0e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002e12:	d004      	beq.n	8002e1e <HAL_I2C_Init+0x72>
 8002e14:	f240 11c1 	movw	r1, #449	; 0x1c1
 8002e18:	488f      	ldr	r0, [pc, #572]	; (8003058 <HAL_I2C_Init+0x2ac>)
 8002e1a:	f7fe fc88 	bl	800172e <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS1(hi2c->Init.OwnAddress1));
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	68db      	ldr	r3, [r3, #12]
 8002e22:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002e26:	f023 0303 	bic.w	r3, r3, #3
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d004      	beq.n	8002e38 <HAL_I2C_Init+0x8c>
 8002e2e:	f44f 71e1 	mov.w	r1, #450	; 0x1c2
 8002e32:	4889      	ldr	r0, [pc, #548]	; (8003058 <HAL_I2C_Init+0x2ac>)
 8002e34:	f7fe fc7b 	bl	800172e <assert_failed>
  assert_param(IS_I2C_ADDRESSING_MODE(hi2c->Init.AddressingMode));
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	691b      	ldr	r3, [r3, #16]
 8002e3c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002e40:	d009      	beq.n	8002e56 <HAL_I2C_Init+0xaa>
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	691b      	ldr	r3, [r3, #16]
 8002e46:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8002e4a:	d004      	beq.n	8002e56 <HAL_I2C_Init+0xaa>
 8002e4c:	f240 11c3 	movw	r1, #451	; 0x1c3
 8002e50:	4881      	ldr	r0, [pc, #516]	; (8003058 <HAL_I2C_Init+0x2ac>)
 8002e52:	f7fe fc6c 	bl	800172e <assert_failed>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	695b      	ldr	r3, [r3, #20]
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d008      	beq.n	8002e70 <HAL_I2C_Init+0xc4>
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	695b      	ldr	r3, [r3, #20]
 8002e62:	2b01      	cmp	r3, #1
 8002e64:	d004      	beq.n	8002e70 <HAL_I2C_Init+0xc4>
 8002e66:	f44f 71e2 	mov.w	r1, #452	; 0x1c4
 8002e6a:	487b      	ldr	r0, [pc, #492]	; (8003058 <HAL_I2C_Init+0x2ac>)
 8002e6c:	f7fe fc5f 	bl	800172e <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	699b      	ldr	r3, [r3, #24]
 8002e74:	f023 03fe 	bic.w	r3, r3, #254	; 0xfe
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d004      	beq.n	8002e86 <HAL_I2C_Init+0xda>
 8002e7c:	f240 11c5 	movw	r1, #453	; 0x1c5
 8002e80:	4875      	ldr	r0, [pc, #468]	; (8003058 <HAL_I2C_Init+0x2ac>)
 8002e82:	f7fe fc54 	bl	800172e <assert_failed>
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	69db      	ldr	r3, [r3, #28]
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d008      	beq.n	8002ea0 <HAL_I2C_Init+0xf4>
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	69db      	ldr	r3, [r3, #28]
 8002e92:	2b40      	cmp	r3, #64	; 0x40
 8002e94:	d004      	beq.n	8002ea0 <HAL_I2C_Init+0xf4>
 8002e96:	f44f 71e3 	mov.w	r1, #454	; 0x1c6
 8002e9a:	486f      	ldr	r0, [pc, #444]	; (8003058 <HAL_I2C_Init+0x2ac>)
 8002e9c:	f7fe fc47 	bl	800172e <assert_failed>
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	6a1b      	ldr	r3, [r3, #32]
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d008      	beq.n	8002eba <HAL_I2C_Init+0x10e>
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	6a1b      	ldr	r3, [r3, #32]
 8002eac:	2b80      	cmp	r3, #128	; 0x80
 8002eae:	d004      	beq.n	8002eba <HAL_I2C_Init+0x10e>
 8002eb0:	f240 11c7 	movw	r1, #455	; 0x1c7
 8002eb4:	4868      	ldr	r0, [pc, #416]	; (8003058 <HAL_I2C_Init+0x2ac>)
 8002eb6:	f7fe fc3a 	bl	800172e <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ec0:	b2db      	uxtb	r3, r3
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d106      	bne.n	8002ed4 <HAL_I2C_Init+0x128>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	2200      	movs	r2, #0
 8002eca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002ece:	6878      	ldr	r0, [r7, #4]
 8002ed0:	f7fe f8a0 	bl	8001014 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	2224      	movs	r2, #36	; 0x24
 8002ed8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	681a      	ldr	r2, [r3, #0]
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f022 0201 	bic.w	r2, r2, #1
 8002eea:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	681a      	ldr	r2, [r3, #0]
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002efa:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	681a      	ldr	r2, [r3, #0]
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002f0a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002f0c:	f003 fdea 	bl	8006ae4 <HAL_RCC_GetPCLK1Freq>
 8002f10:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	685b      	ldr	r3, [r3, #4]
 8002f16:	4a52      	ldr	r2, [pc, #328]	; (8003060 <HAL_I2C_Init+0x2b4>)
 8002f18:	4293      	cmp	r3, r2
 8002f1a:	d807      	bhi.n	8002f2c <HAL_I2C_Init+0x180>
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	4a51      	ldr	r2, [pc, #324]	; (8003064 <HAL_I2C_Init+0x2b8>)
 8002f20:	4293      	cmp	r3, r2
 8002f22:	bf94      	ite	ls
 8002f24:	2301      	movls	r3, #1
 8002f26:	2300      	movhi	r3, #0
 8002f28:	b2db      	uxtb	r3, r3
 8002f2a:	e006      	b.n	8002f3a <HAL_I2C_Init+0x18e>
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	4a4e      	ldr	r2, [pc, #312]	; (8003068 <HAL_I2C_Init+0x2bc>)
 8002f30:	4293      	cmp	r3, r2
 8002f32:	bf94      	ite	ls
 8002f34:	2301      	movls	r3, #1
 8002f36:	2300      	movhi	r3, #0
 8002f38:	b2db      	uxtb	r3, r3
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d001      	beq.n	8002f42 <HAL_I2C_Init+0x196>
  {
    return HAL_ERROR;
 8002f3e:	2301      	movs	r3, #1
 8002f40:	e0ef      	b.n	8003122 <HAL_I2C_Init+0x376>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	4a49      	ldr	r2, [pc, #292]	; (800306c <HAL_I2C_Init+0x2c0>)
 8002f46:	fba2 2303 	umull	r2, r3, r2, r3
 8002f4a:	0c9b      	lsrs	r3, r3, #18
 8002f4c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	685b      	ldr	r3, [r3, #4]
 8002f54:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	68ba      	ldr	r2, [r7, #8]
 8002f5e:	430a      	orrs	r2, r1
 8002f60:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	6a1b      	ldr	r3, [r3, #32]
 8002f68:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	685b      	ldr	r3, [r3, #4]
 8002f70:	4a3b      	ldr	r2, [pc, #236]	; (8003060 <HAL_I2C_Init+0x2b4>)
 8002f72:	4293      	cmp	r3, r2
 8002f74:	d802      	bhi.n	8002f7c <HAL_I2C_Init+0x1d0>
 8002f76:	68bb      	ldr	r3, [r7, #8]
 8002f78:	3301      	adds	r3, #1
 8002f7a:	e009      	b.n	8002f90 <HAL_I2C_Init+0x1e4>
 8002f7c:	68bb      	ldr	r3, [r7, #8]
 8002f7e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002f82:	fb02 f303 	mul.w	r3, r2, r3
 8002f86:	4a3a      	ldr	r2, [pc, #232]	; (8003070 <HAL_I2C_Init+0x2c4>)
 8002f88:	fba2 2303 	umull	r2, r3, r2, r3
 8002f8c:	099b      	lsrs	r3, r3, #6
 8002f8e:	3301      	adds	r3, #1
 8002f90:	687a      	ldr	r2, [r7, #4]
 8002f92:	6812      	ldr	r2, [r2, #0]
 8002f94:	430b      	orrs	r3, r1
 8002f96:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	69db      	ldr	r3, [r3, #28]
 8002f9e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002fa2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	685b      	ldr	r3, [r3, #4]
 8002faa:	492d      	ldr	r1, [pc, #180]	; (8003060 <HAL_I2C_Init+0x2b4>)
 8002fac:	428b      	cmp	r3, r1
 8002fae:	d80d      	bhi.n	8002fcc <HAL_I2C_Init+0x220>
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	1e59      	subs	r1, r3, #1
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	685b      	ldr	r3, [r3, #4]
 8002fb8:	005b      	lsls	r3, r3, #1
 8002fba:	fbb1 f3f3 	udiv	r3, r1, r3
 8002fbe:	3301      	adds	r3, #1
 8002fc0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002fc4:	2b04      	cmp	r3, #4
 8002fc6:	bf38      	it	cc
 8002fc8:	2304      	movcc	r3, #4
 8002fca:	e063      	b.n	8003094 <HAL_I2C_Init+0x2e8>
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	689b      	ldr	r3, [r3, #8]
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d111      	bne.n	8002ff8 <HAL_I2C_Init+0x24c>
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	1e58      	subs	r0, r3, #1
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	6859      	ldr	r1, [r3, #4]
 8002fdc:	460b      	mov	r3, r1
 8002fde:	005b      	lsls	r3, r3, #1
 8002fe0:	440b      	add	r3, r1
 8002fe2:	fbb0 f3f3 	udiv	r3, r0, r3
 8002fe6:	3301      	adds	r3, #1
 8002fe8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	bf0c      	ite	eq
 8002ff0:	2301      	moveq	r3, #1
 8002ff2:	2300      	movne	r3, #0
 8002ff4:	b2db      	uxtb	r3, r3
 8002ff6:	e012      	b.n	800301e <HAL_I2C_Init+0x272>
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	1e58      	subs	r0, r3, #1
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	6859      	ldr	r1, [r3, #4]
 8003000:	460b      	mov	r3, r1
 8003002:	009b      	lsls	r3, r3, #2
 8003004:	440b      	add	r3, r1
 8003006:	0099      	lsls	r1, r3, #2
 8003008:	440b      	add	r3, r1
 800300a:	fbb0 f3f3 	udiv	r3, r0, r3
 800300e:	3301      	adds	r3, #1
 8003010:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003014:	2b00      	cmp	r3, #0
 8003016:	bf0c      	ite	eq
 8003018:	2301      	moveq	r3, #1
 800301a:	2300      	movne	r3, #0
 800301c:	b2db      	uxtb	r3, r3
 800301e:	2b00      	cmp	r3, #0
 8003020:	d001      	beq.n	8003026 <HAL_I2C_Init+0x27a>
 8003022:	2301      	movs	r3, #1
 8003024:	e036      	b.n	8003094 <HAL_I2C_Init+0x2e8>
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	689b      	ldr	r3, [r3, #8]
 800302a:	2b00      	cmp	r3, #0
 800302c:	d122      	bne.n	8003074 <HAL_I2C_Init+0x2c8>
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	1e58      	subs	r0, r3, #1
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	6859      	ldr	r1, [r3, #4]
 8003036:	460b      	mov	r3, r1
 8003038:	005b      	lsls	r3, r3, #1
 800303a:	440b      	add	r3, r1
 800303c:	fbb0 f3f3 	udiv	r3, r0, r3
 8003040:	3301      	adds	r3, #1
 8003042:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003046:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800304a:	e023      	b.n	8003094 <HAL_I2C_Init+0x2e8>
 800304c:	40005400 	.word	0x40005400
 8003050:	40005800 	.word	0x40005800
 8003054:	40005c00 	.word	0x40005c00
 8003058:	0800d6c8 	.word	0x0800d6c8
 800305c:	00061a80 	.word	0x00061a80
 8003060:	000186a0 	.word	0x000186a0
 8003064:	001e847f 	.word	0x001e847f
 8003068:	003d08ff 	.word	0x003d08ff
 800306c:	431bde83 	.word	0x431bde83
 8003070:	10624dd3 	.word	0x10624dd3
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	1e58      	subs	r0, r3, #1
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	6859      	ldr	r1, [r3, #4]
 800307c:	460b      	mov	r3, r1
 800307e:	009b      	lsls	r3, r3, #2
 8003080:	440b      	add	r3, r1
 8003082:	0099      	lsls	r1, r3, #2
 8003084:	440b      	add	r3, r1
 8003086:	fbb0 f3f3 	udiv	r3, r0, r3
 800308a:	3301      	adds	r3, #1
 800308c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003090:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003094:	6879      	ldr	r1, [r7, #4]
 8003096:	6809      	ldr	r1, [r1, #0]
 8003098:	4313      	orrs	r3, r2
 800309a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	69da      	ldr	r2, [r3, #28]
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	6a1b      	ldr	r3, [r3, #32]
 80030ae:	431a      	orrs	r2, r3
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	430a      	orrs	r2, r1
 80030b6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	689b      	ldr	r3, [r3, #8]
 80030be:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80030c2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80030c6:	687a      	ldr	r2, [r7, #4]
 80030c8:	6911      	ldr	r1, [r2, #16]
 80030ca:	687a      	ldr	r2, [r7, #4]
 80030cc:	68d2      	ldr	r2, [r2, #12]
 80030ce:	4311      	orrs	r1, r2
 80030d0:	687a      	ldr	r2, [r7, #4]
 80030d2:	6812      	ldr	r2, [r2, #0]
 80030d4:	430b      	orrs	r3, r1
 80030d6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	68db      	ldr	r3, [r3, #12]
 80030de:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	695a      	ldr	r2, [r3, #20]
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	699b      	ldr	r3, [r3, #24]
 80030ea:	431a      	orrs	r2, r3
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	430a      	orrs	r2, r1
 80030f2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	681a      	ldr	r2, [r3, #0]
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f042 0201 	orr.w	r2, r2, #1
 8003102:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	2200      	movs	r2, #0
 8003108:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	2220      	movs	r2, #32
 800310e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	2200      	movs	r2, #0
 8003116:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	2200      	movs	r2, #0
 800311c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003120:	2300      	movs	r3, #0
}
 8003122:	4618      	mov	r0, r3
 8003124:	3710      	adds	r7, #16
 8003126:	46bd      	mov	sp, r7
 8003128:	bd80      	pop	{r7, pc}
 800312a:	bf00      	nop

0800312c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800312c:	b580      	push	{r7, lr}
 800312e:	b088      	sub	sp, #32
 8003130:	af02      	add	r7, sp, #8
 8003132:	60f8      	str	r0, [r7, #12]
 8003134:	607a      	str	r2, [r7, #4]
 8003136:	461a      	mov	r2, r3
 8003138:	460b      	mov	r3, r1
 800313a:	817b      	strh	r3, [r7, #10]
 800313c:	4613      	mov	r3, r2
 800313e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003140:	f7fe fcd8 	bl	8001af4 <HAL_GetTick>
 8003144:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800314c:	b2db      	uxtb	r3, r3
 800314e:	2b20      	cmp	r3, #32
 8003150:	f040 80e0 	bne.w	8003314 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003154:	697b      	ldr	r3, [r7, #20]
 8003156:	9300      	str	r3, [sp, #0]
 8003158:	2319      	movs	r3, #25
 800315a:	2201      	movs	r2, #1
 800315c:	4970      	ldr	r1, [pc, #448]	; (8003320 <HAL_I2C_Master_Transmit+0x1f4>)
 800315e:	68f8      	ldr	r0, [r7, #12]
 8003160:	f000 fc58 	bl	8003a14 <I2C_WaitOnFlagUntilTimeout>
 8003164:	4603      	mov	r3, r0
 8003166:	2b00      	cmp	r3, #0
 8003168:	d001      	beq.n	800316e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800316a:	2302      	movs	r3, #2
 800316c:	e0d3      	b.n	8003316 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003174:	2b01      	cmp	r3, #1
 8003176:	d101      	bne.n	800317c <HAL_I2C_Master_Transmit+0x50>
 8003178:	2302      	movs	r3, #2
 800317a:	e0cc      	b.n	8003316 <HAL_I2C_Master_Transmit+0x1ea>
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	2201      	movs	r2, #1
 8003180:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f003 0301 	and.w	r3, r3, #1
 800318e:	2b01      	cmp	r3, #1
 8003190:	d007      	beq.n	80031a2 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	681a      	ldr	r2, [r3, #0]
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f042 0201 	orr.w	r2, r2, #1
 80031a0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	681a      	ldr	r2, [r3, #0]
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80031b0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	2221      	movs	r2, #33	; 0x21
 80031b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	2210      	movs	r2, #16
 80031be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	2200      	movs	r2, #0
 80031c6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	687a      	ldr	r2, [r7, #4]
 80031cc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	893a      	ldrh	r2, [r7, #8]
 80031d2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031d8:	b29a      	uxth	r2, r3
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	4a50      	ldr	r2, [pc, #320]	; (8003324 <HAL_I2C_Master_Transmit+0x1f8>)
 80031e2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80031e4:	8979      	ldrh	r1, [r7, #10]
 80031e6:	697b      	ldr	r3, [r7, #20]
 80031e8:	6a3a      	ldr	r2, [r7, #32]
 80031ea:	68f8      	ldr	r0, [r7, #12]
 80031ec:	f000 fac2 	bl	8003774 <I2C_MasterRequestWrite>
 80031f0:	4603      	mov	r3, r0
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d001      	beq.n	80031fa <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80031f6:	2301      	movs	r3, #1
 80031f8:	e08d      	b.n	8003316 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80031fa:	2300      	movs	r3, #0
 80031fc:	613b      	str	r3, [r7, #16]
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	695b      	ldr	r3, [r3, #20]
 8003204:	613b      	str	r3, [r7, #16]
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	699b      	ldr	r3, [r3, #24]
 800320c:	613b      	str	r3, [r7, #16]
 800320e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003210:	e066      	b.n	80032e0 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003212:	697a      	ldr	r2, [r7, #20]
 8003214:	6a39      	ldr	r1, [r7, #32]
 8003216:	68f8      	ldr	r0, [r7, #12]
 8003218:	f000 fcd2 	bl	8003bc0 <I2C_WaitOnTXEFlagUntilTimeout>
 800321c:	4603      	mov	r3, r0
 800321e:	2b00      	cmp	r3, #0
 8003220:	d00d      	beq.n	800323e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003226:	2b04      	cmp	r3, #4
 8003228:	d107      	bne.n	800323a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	681a      	ldr	r2, [r3, #0]
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003238:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800323a:	2301      	movs	r3, #1
 800323c:	e06b      	b.n	8003316 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003242:	781a      	ldrb	r2, [r3, #0]
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800324e:	1c5a      	adds	r2, r3, #1
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003258:	b29b      	uxth	r3, r3
 800325a:	3b01      	subs	r3, #1
 800325c:	b29a      	uxth	r2, r3
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003266:	3b01      	subs	r3, #1
 8003268:	b29a      	uxth	r2, r3
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	695b      	ldr	r3, [r3, #20]
 8003274:	f003 0304 	and.w	r3, r3, #4
 8003278:	2b04      	cmp	r3, #4
 800327a:	d11b      	bne.n	80032b4 <HAL_I2C_Master_Transmit+0x188>
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003280:	2b00      	cmp	r3, #0
 8003282:	d017      	beq.n	80032b4 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003288:	781a      	ldrb	r2, [r3, #0]
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003294:	1c5a      	adds	r2, r3, #1
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800329e:	b29b      	uxth	r3, r3
 80032a0:	3b01      	subs	r3, #1
 80032a2:	b29a      	uxth	r2, r3
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032ac:	3b01      	subs	r3, #1
 80032ae:	b29a      	uxth	r2, r3
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80032b4:	697a      	ldr	r2, [r7, #20]
 80032b6:	6a39      	ldr	r1, [r7, #32]
 80032b8:	68f8      	ldr	r0, [r7, #12]
 80032ba:	f000 fcc2 	bl	8003c42 <I2C_WaitOnBTFFlagUntilTimeout>
 80032be:	4603      	mov	r3, r0
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d00d      	beq.n	80032e0 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032c8:	2b04      	cmp	r3, #4
 80032ca:	d107      	bne.n	80032dc <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	681a      	ldr	r2, [r3, #0]
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80032da:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80032dc:	2301      	movs	r3, #1
 80032de:	e01a      	b.n	8003316 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d194      	bne.n	8003212 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	681a      	ldr	r2, [r3, #0]
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80032f6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	2220      	movs	r2, #32
 80032fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	2200      	movs	r2, #0
 8003304:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	2200      	movs	r2, #0
 800330c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003310:	2300      	movs	r3, #0
 8003312:	e000      	b.n	8003316 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003314:	2302      	movs	r3, #2
  }
}
 8003316:	4618      	mov	r0, r3
 8003318:	3718      	adds	r7, #24
 800331a:	46bd      	mov	sp, r7
 800331c:	bd80      	pop	{r7, pc}
 800331e:	bf00      	nop
 8003320:	00100002 	.word	0x00100002
 8003324:	ffff0000 	.word	0xffff0000

08003328 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003328:	b580      	push	{r7, lr}
 800332a:	b08c      	sub	sp, #48	; 0x30
 800332c:	af02      	add	r7, sp, #8
 800332e:	60f8      	str	r0, [r7, #12]
 8003330:	607a      	str	r2, [r7, #4]
 8003332:	461a      	mov	r2, r3
 8003334:	460b      	mov	r3, r1
 8003336:	817b      	strh	r3, [r7, #10]
 8003338:	4613      	mov	r3, r2
 800333a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800333c:	f7fe fbda 	bl	8001af4 <HAL_GetTick>
 8003340:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003348:	b2db      	uxtb	r3, r3
 800334a:	2b20      	cmp	r3, #32
 800334c:	f040 820b 	bne.w	8003766 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003350:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003352:	9300      	str	r3, [sp, #0]
 8003354:	2319      	movs	r3, #25
 8003356:	2201      	movs	r2, #1
 8003358:	497c      	ldr	r1, [pc, #496]	; (800354c <HAL_I2C_Master_Receive+0x224>)
 800335a:	68f8      	ldr	r0, [r7, #12]
 800335c:	f000 fb5a 	bl	8003a14 <I2C_WaitOnFlagUntilTimeout>
 8003360:	4603      	mov	r3, r0
 8003362:	2b00      	cmp	r3, #0
 8003364:	d001      	beq.n	800336a <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8003366:	2302      	movs	r3, #2
 8003368:	e1fe      	b.n	8003768 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003370:	2b01      	cmp	r3, #1
 8003372:	d101      	bne.n	8003378 <HAL_I2C_Master_Receive+0x50>
 8003374:	2302      	movs	r3, #2
 8003376:	e1f7      	b.n	8003768 <HAL_I2C_Master_Receive+0x440>
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	2201      	movs	r2, #1
 800337c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f003 0301 	and.w	r3, r3, #1
 800338a:	2b01      	cmp	r3, #1
 800338c:	d007      	beq.n	800339e <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	681a      	ldr	r2, [r3, #0]
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f042 0201 	orr.w	r2, r2, #1
 800339c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	681a      	ldr	r2, [r3, #0]
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80033ac:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	2222      	movs	r2, #34	; 0x22
 80033b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	2210      	movs	r2, #16
 80033ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	2200      	movs	r2, #0
 80033c2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	687a      	ldr	r2, [r7, #4]
 80033c8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	893a      	ldrh	r2, [r7, #8]
 80033ce:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033d4:	b29a      	uxth	r2, r3
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	4a5c      	ldr	r2, [pc, #368]	; (8003550 <HAL_I2C_Master_Receive+0x228>)
 80033de:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80033e0:	8979      	ldrh	r1, [r7, #10]
 80033e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80033e6:	68f8      	ldr	r0, [r7, #12]
 80033e8:	f000 fa46 	bl	8003878 <I2C_MasterRequestRead>
 80033ec:	4603      	mov	r3, r0
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d001      	beq.n	80033f6 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 80033f2:	2301      	movs	r3, #1
 80033f4:	e1b8      	b.n	8003768 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d113      	bne.n	8003426 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80033fe:	2300      	movs	r3, #0
 8003400:	623b      	str	r3, [r7, #32]
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	695b      	ldr	r3, [r3, #20]
 8003408:	623b      	str	r3, [r7, #32]
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	699b      	ldr	r3, [r3, #24]
 8003410:	623b      	str	r3, [r7, #32]
 8003412:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	681a      	ldr	r2, [r3, #0]
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003422:	601a      	str	r2, [r3, #0]
 8003424:	e18c      	b.n	8003740 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800342a:	2b01      	cmp	r3, #1
 800342c:	d11b      	bne.n	8003466 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	681a      	ldr	r2, [r3, #0]
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800343c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800343e:	2300      	movs	r3, #0
 8003440:	61fb      	str	r3, [r7, #28]
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	695b      	ldr	r3, [r3, #20]
 8003448:	61fb      	str	r3, [r7, #28]
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	699b      	ldr	r3, [r3, #24]
 8003450:	61fb      	str	r3, [r7, #28]
 8003452:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	681a      	ldr	r2, [r3, #0]
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003462:	601a      	str	r2, [r3, #0]
 8003464:	e16c      	b.n	8003740 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800346a:	2b02      	cmp	r3, #2
 800346c:	d11b      	bne.n	80034a6 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	681a      	ldr	r2, [r3, #0]
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800347c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	681a      	ldr	r2, [r3, #0]
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800348c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800348e:	2300      	movs	r3, #0
 8003490:	61bb      	str	r3, [r7, #24]
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	695b      	ldr	r3, [r3, #20]
 8003498:	61bb      	str	r3, [r7, #24]
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	699b      	ldr	r3, [r3, #24]
 80034a0:	61bb      	str	r3, [r7, #24]
 80034a2:	69bb      	ldr	r3, [r7, #24]
 80034a4:	e14c      	b.n	8003740 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	681a      	ldr	r2, [r3, #0]
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80034b4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80034b6:	2300      	movs	r3, #0
 80034b8:	617b      	str	r3, [r7, #20]
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	695b      	ldr	r3, [r3, #20]
 80034c0:	617b      	str	r3, [r7, #20]
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	699b      	ldr	r3, [r3, #24]
 80034c8:	617b      	str	r3, [r7, #20]
 80034ca:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80034cc:	e138      	b.n	8003740 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034d2:	2b03      	cmp	r3, #3
 80034d4:	f200 80f1 	bhi.w	80036ba <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034dc:	2b01      	cmp	r3, #1
 80034de:	d123      	bne.n	8003528 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80034e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80034e2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80034e4:	68f8      	ldr	r0, [r7, #12]
 80034e6:	f000 fbed 	bl	8003cc4 <I2C_WaitOnRXNEFlagUntilTimeout>
 80034ea:	4603      	mov	r3, r0
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d001      	beq.n	80034f4 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 80034f0:	2301      	movs	r3, #1
 80034f2:	e139      	b.n	8003768 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	691a      	ldr	r2, [r3, #16]
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034fe:	b2d2      	uxtb	r2, r2
 8003500:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003506:	1c5a      	adds	r2, r3, #1
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003510:	3b01      	subs	r3, #1
 8003512:	b29a      	uxth	r2, r3
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800351c:	b29b      	uxth	r3, r3
 800351e:	3b01      	subs	r3, #1
 8003520:	b29a      	uxth	r2, r3
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003526:	e10b      	b.n	8003740 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800352c:	2b02      	cmp	r3, #2
 800352e:	d14e      	bne.n	80035ce <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003530:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003532:	9300      	str	r3, [sp, #0]
 8003534:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003536:	2200      	movs	r2, #0
 8003538:	4906      	ldr	r1, [pc, #24]	; (8003554 <HAL_I2C_Master_Receive+0x22c>)
 800353a:	68f8      	ldr	r0, [r7, #12]
 800353c:	f000 fa6a 	bl	8003a14 <I2C_WaitOnFlagUntilTimeout>
 8003540:	4603      	mov	r3, r0
 8003542:	2b00      	cmp	r3, #0
 8003544:	d008      	beq.n	8003558 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8003546:	2301      	movs	r3, #1
 8003548:	e10e      	b.n	8003768 <HAL_I2C_Master_Receive+0x440>
 800354a:	bf00      	nop
 800354c:	00100002 	.word	0x00100002
 8003550:	ffff0000 	.word	0xffff0000
 8003554:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	681a      	ldr	r2, [r3, #0]
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003566:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	691a      	ldr	r2, [r3, #16]
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003572:	b2d2      	uxtb	r2, r2
 8003574:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800357a:	1c5a      	adds	r2, r3, #1
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003584:	3b01      	subs	r3, #1
 8003586:	b29a      	uxth	r2, r3
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003590:	b29b      	uxth	r3, r3
 8003592:	3b01      	subs	r3, #1
 8003594:	b29a      	uxth	r2, r3
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	691a      	ldr	r2, [r3, #16]
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035a4:	b2d2      	uxtb	r2, r2
 80035a6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035ac:	1c5a      	adds	r2, r3, #1
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035b6:	3b01      	subs	r3, #1
 80035b8:	b29a      	uxth	r2, r3
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035c2:	b29b      	uxth	r3, r3
 80035c4:	3b01      	subs	r3, #1
 80035c6:	b29a      	uxth	r2, r3
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	855a      	strh	r2, [r3, #42]	; 0x2a
 80035cc:	e0b8      	b.n	8003740 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80035ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035d0:	9300      	str	r3, [sp, #0]
 80035d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035d4:	2200      	movs	r2, #0
 80035d6:	4966      	ldr	r1, [pc, #408]	; (8003770 <HAL_I2C_Master_Receive+0x448>)
 80035d8:	68f8      	ldr	r0, [r7, #12]
 80035da:	f000 fa1b 	bl	8003a14 <I2C_WaitOnFlagUntilTimeout>
 80035de:	4603      	mov	r3, r0
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d001      	beq.n	80035e8 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 80035e4:	2301      	movs	r3, #1
 80035e6:	e0bf      	b.n	8003768 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	681a      	ldr	r2, [r3, #0]
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80035f6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	691a      	ldr	r2, [r3, #16]
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003602:	b2d2      	uxtb	r2, r2
 8003604:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800360a:	1c5a      	adds	r2, r3, #1
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003614:	3b01      	subs	r3, #1
 8003616:	b29a      	uxth	r2, r3
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003620:	b29b      	uxth	r3, r3
 8003622:	3b01      	subs	r3, #1
 8003624:	b29a      	uxth	r2, r3
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800362a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800362c:	9300      	str	r3, [sp, #0]
 800362e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003630:	2200      	movs	r2, #0
 8003632:	494f      	ldr	r1, [pc, #316]	; (8003770 <HAL_I2C_Master_Receive+0x448>)
 8003634:	68f8      	ldr	r0, [r7, #12]
 8003636:	f000 f9ed 	bl	8003a14 <I2C_WaitOnFlagUntilTimeout>
 800363a:	4603      	mov	r3, r0
 800363c:	2b00      	cmp	r3, #0
 800363e:	d001      	beq.n	8003644 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8003640:	2301      	movs	r3, #1
 8003642:	e091      	b.n	8003768 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	681a      	ldr	r2, [r3, #0]
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003652:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	691a      	ldr	r2, [r3, #16]
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800365e:	b2d2      	uxtb	r2, r2
 8003660:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003666:	1c5a      	adds	r2, r3, #1
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003670:	3b01      	subs	r3, #1
 8003672:	b29a      	uxth	r2, r3
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800367c:	b29b      	uxth	r3, r3
 800367e:	3b01      	subs	r3, #1
 8003680:	b29a      	uxth	r2, r3
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	691a      	ldr	r2, [r3, #16]
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003690:	b2d2      	uxtb	r2, r2
 8003692:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003698:	1c5a      	adds	r2, r3, #1
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036a2:	3b01      	subs	r3, #1
 80036a4:	b29a      	uxth	r2, r3
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036ae:	b29b      	uxth	r3, r3
 80036b0:	3b01      	subs	r3, #1
 80036b2:	b29a      	uxth	r2, r3
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80036b8:	e042      	b.n	8003740 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80036ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80036bc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80036be:	68f8      	ldr	r0, [r7, #12]
 80036c0:	f000 fb00 	bl	8003cc4 <I2C_WaitOnRXNEFlagUntilTimeout>
 80036c4:	4603      	mov	r3, r0
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d001      	beq.n	80036ce <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 80036ca:	2301      	movs	r3, #1
 80036cc:	e04c      	b.n	8003768 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	691a      	ldr	r2, [r3, #16]
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036d8:	b2d2      	uxtb	r2, r2
 80036da:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036e0:	1c5a      	adds	r2, r3, #1
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036ea:	3b01      	subs	r3, #1
 80036ec:	b29a      	uxth	r2, r3
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036f6:	b29b      	uxth	r3, r3
 80036f8:	3b01      	subs	r3, #1
 80036fa:	b29a      	uxth	r2, r3
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	695b      	ldr	r3, [r3, #20]
 8003706:	f003 0304 	and.w	r3, r3, #4
 800370a:	2b04      	cmp	r3, #4
 800370c:	d118      	bne.n	8003740 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	691a      	ldr	r2, [r3, #16]
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003718:	b2d2      	uxtb	r2, r2
 800371a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003720:	1c5a      	adds	r2, r3, #1
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800372a:	3b01      	subs	r3, #1
 800372c:	b29a      	uxth	r2, r3
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003736:	b29b      	uxth	r3, r3
 8003738:	3b01      	subs	r3, #1
 800373a:	b29a      	uxth	r2, r3
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003744:	2b00      	cmp	r3, #0
 8003746:	f47f aec2 	bne.w	80034ce <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	2220      	movs	r2, #32
 800374e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	2200      	movs	r2, #0
 8003756:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	2200      	movs	r2, #0
 800375e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003762:	2300      	movs	r3, #0
 8003764:	e000      	b.n	8003768 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8003766:	2302      	movs	r3, #2
  }
}
 8003768:	4618      	mov	r0, r3
 800376a:	3728      	adds	r7, #40	; 0x28
 800376c:	46bd      	mov	sp, r7
 800376e:	bd80      	pop	{r7, pc}
 8003770:	00010004 	.word	0x00010004

08003774 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003774:	b580      	push	{r7, lr}
 8003776:	b088      	sub	sp, #32
 8003778:	af02      	add	r7, sp, #8
 800377a:	60f8      	str	r0, [r7, #12]
 800377c:	607a      	str	r2, [r7, #4]
 800377e:	603b      	str	r3, [r7, #0]
 8003780:	460b      	mov	r3, r1
 8003782:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003788:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800378a:	697b      	ldr	r3, [r7, #20]
 800378c:	2b08      	cmp	r3, #8
 800378e:	d006      	beq.n	800379e <I2C_MasterRequestWrite+0x2a>
 8003790:	697b      	ldr	r3, [r7, #20]
 8003792:	2b01      	cmp	r3, #1
 8003794:	d003      	beq.n	800379e <I2C_MasterRequestWrite+0x2a>
 8003796:	697b      	ldr	r3, [r7, #20]
 8003798:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800379c:	d108      	bne.n	80037b0 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	681a      	ldr	r2, [r3, #0]
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80037ac:	601a      	str	r2, [r3, #0]
 80037ae:	e00b      	b.n	80037c8 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037b4:	2b12      	cmp	r3, #18
 80037b6:	d107      	bne.n	80037c8 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	681a      	ldr	r2, [r3, #0]
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80037c6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80037c8:	683b      	ldr	r3, [r7, #0]
 80037ca:	9300      	str	r3, [sp, #0]
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	2200      	movs	r2, #0
 80037d0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80037d4:	68f8      	ldr	r0, [r7, #12]
 80037d6:	f000 f91d 	bl	8003a14 <I2C_WaitOnFlagUntilTimeout>
 80037da:	4603      	mov	r3, r0
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d00d      	beq.n	80037fc <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037ea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80037ee:	d103      	bne.n	80037f8 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80037f6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80037f8:	2303      	movs	r3, #3
 80037fa:	e035      	b.n	8003868 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	691b      	ldr	r3, [r3, #16]
 8003800:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003804:	d108      	bne.n	8003818 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003806:	897b      	ldrh	r3, [r7, #10]
 8003808:	b2db      	uxtb	r3, r3
 800380a:	461a      	mov	r2, r3
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003814:	611a      	str	r2, [r3, #16]
 8003816:	e01b      	b.n	8003850 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003818:	897b      	ldrh	r3, [r7, #10]
 800381a:	11db      	asrs	r3, r3, #7
 800381c:	b2db      	uxtb	r3, r3
 800381e:	f003 0306 	and.w	r3, r3, #6
 8003822:	b2db      	uxtb	r3, r3
 8003824:	f063 030f 	orn	r3, r3, #15
 8003828:	b2da      	uxtb	r2, r3
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003830:	683b      	ldr	r3, [r7, #0]
 8003832:	687a      	ldr	r2, [r7, #4]
 8003834:	490e      	ldr	r1, [pc, #56]	; (8003870 <I2C_MasterRequestWrite+0xfc>)
 8003836:	68f8      	ldr	r0, [r7, #12]
 8003838:	f000 f943 	bl	8003ac2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800383c:	4603      	mov	r3, r0
 800383e:	2b00      	cmp	r3, #0
 8003840:	d001      	beq.n	8003846 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8003842:	2301      	movs	r3, #1
 8003844:	e010      	b.n	8003868 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003846:	897b      	ldrh	r3, [r7, #10]
 8003848:	b2da      	uxtb	r2, r3
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003850:	683b      	ldr	r3, [r7, #0]
 8003852:	687a      	ldr	r2, [r7, #4]
 8003854:	4907      	ldr	r1, [pc, #28]	; (8003874 <I2C_MasterRequestWrite+0x100>)
 8003856:	68f8      	ldr	r0, [r7, #12]
 8003858:	f000 f933 	bl	8003ac2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800385c:	4603      	mov	r3, r0
 800385e:	2b00      	cmp	r3, #0
 8003860:	d001      	beq.n	8003866 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8003862:	2301      	movs	r3, #1
 8003864:	e000      	b.n	8003868 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003866:	2300      	movs	r3, #0
}
 8003868:	4618      	mov	r0, r3
 800386a:	3718      	adds	r7, #24
 800386c:	46bd      	mov	sp, r7
 800386e:	bd80      	pop	{r7, pc}
 8003870:	00010008 	.word	0x00010008
 8003874:	00010002 	.word	0x00010002

08003878 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003878:	b580      	push	{r7, lr}
 800387a:	b088      	sub	sp, #32
 800387c:	af02      	add	r7, sp, #8
 800387e:	60f8      	str	r0, [r7, #12]
 8003880:	607a      	str	r2, [r7, #4]
 8003882:	603b      	str	r3, [r7, #0]
 8003884:	460b      	mov	r3, r1
 8003886:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800388c:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	681a      	ldr	r2, [r3, #0]
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800389c:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800389e:	697b      	ldr	r3, [r7, #20]
 80038a0:	2b08      	cmp	r3, #8
 80038a2:	d006      	beq.n	80038b2 <I2C_MasterRequestRead+0x3a>
 80038a4:	697b      	ldr	r3, [r7, #20]
 80038a6:	2b01      	cmp	r3, #1
 80038a8:	d003      	beq.n	80038b2 <I2C_MasterRequestRead+0x3a>
 80038aa:	697b      	ldr	r3, [r7, #20]
 80038ac:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80038b0:	d108      	bne.n	80038c4 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	681a      	ldr	r2, [r3, #0]
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80038c0:	601a      	str	r2, [r3, #0]
 80038c2:	e00b      	b.n	80038dc <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038c8:	2b11      	cmp	r3, #17
 80038ca:	d107      	bne.n	80038dc <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	681a      	ldr	r2, [r3, #0]
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80038da:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80038dc:	683b      	ldr	r3, [r7, #0]
 80038de:	9300      	str	r3, [sp, #0]
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	2200      	movs	r2, #0
 80038e4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80038e8:	68f8      	ldr	r0, [r7, #12]
 80038ea:	f000 f893 	bl	8003a14 <I2C_WaitOnFlagUntilTimeout>
 80038ee:	4603      	mov	r3, r0
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d00d      	beq.n	8003910 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003902:	d103      	bne.n	800390c <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	f44f 7200 	mov.w	r2, #512	; 0x200
 800390a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800390c:	2303      	movs	r3, #3
 800390e:	e079      	b.n	8003a04 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	691b      	ldr	r3, [r3, #16]
 8003914:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003918:	d108      	bne.n	800392c <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800391a:	897b      	ldrh	r3, [r7, #10]
 800391c:	b2db      	uxtb	r3, r3
 800391e:	f043 0301 	orr.w	r3, r3, #1
 8003922:	b2da      	uxtb	r2, r3
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	611a      	str	r2, [r3, #16]
 800392a:	e05f      	b.n	80039ec <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800392c:	897b      	ldrh	r3, [r7, #10]
 800392e:	11db      	asrs	r3, r3, #7
 8003930:	b2db      	uxtb	r3, r3
 8003932:	f003 0306 	and.w	r3, r3, #6
 8003936:	b2db      	uxtb	r3, r3
 8003938:	f063 030f 	orn	r3, r3, #15
 800393c:	b2da      	uxtb	r2, r3
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003944:	683b      	ldr	r3, [r7, #0]
 8003946:	687a      	ldr	r2, [r7, #4]
 8003948:	4930      	ldr	r1, [pc, #192]	; (8003a0c <I2C_MasterRequestRead+0x194>)
 800394a:	68f8      	ldr	r0, [r7, #12]
 800394c:	f000 f8b9 	bl	8003ac2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003950:	4603      	mov	r3, r0
 8003952:	2b00      	cmp	r3, #0
 8003954:	d001      	beq.n	800395a <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8003956:	2301      	movs	r3, #1
 8003958:	e054      	b.n	8003a04 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800395a:	897b      	ldrh	r3, [r7, #10]
 800395c:	b2da      	uxtb	r2, r3
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003964:	683b      	ldr	r3, [r7, #0]
 8003966:	687a      	ldr	r2, [r7, #4]
 8003968:	4929      	ldr	r1, [pc, #164]	; (8003a10 <I2C_MasterRequestRead+0x198>)
 800396a:	68f8      	ldr	r0, [r7, #12]
 800396c:	f000 f8a9 	bl	8003ac2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003970:	4603      	mov	r3, r0
 8003972:	2b00      	cmp	r3, #0
 8003974:	d001      	beq.n	800397a <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8003976:	2301      	movs	r3, #1
 8003978:	e044      	b.n	8003a04 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800397a:	2300      	movs	r3, #0
 800397c:	613b      	str	r3, [r7, #16]
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	695b      	ldr	r3, [r3, #20]
 8003984:	613b      	str	r3, [r7, #16]
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	699b      	ldr	r3, [r3, #24]
 800398c:	613b      	str	r3, [r7, #16]
 800398e:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	681a      	ldr	r2, [r3, #0]
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800399e:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80039a0:	683b      	ldr	r3, [r7, #0]
 80039a2:	9300      	str	r3, [sp, #0]
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	2200      	movs	r2, #0
 80039a8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80039ac:	68f8      	ldr	r0, [r7, #12]
 80039ae:	f000 f831 	bl	8003a14 <I2C_WaitOnFlagUntilTimeout>
 80039b2:	4603      	mov	r3, r0
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d00d      	beq.n	80039d4 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80039c6:	d103      	bne.n	80039d0 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	f44f 7200 	mov.w	r2, #512	; 0x200
 80039ce:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 80039d0:	2303      	movs	r3, #3
 80039d2:	e017      	b.n	8003a04 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80039d4:	897b      	ldrh	r3, [r7, #10]
 80039d6:	11db      	asrs	r3, r3, #7
 80039d8:	b2db      	uxtb	r3, r3
 80039da:	f003 0306 	and.w	r3, r3, #6
 80039de:	b2db      	uxtb	r3, r3
 80039e0:	f063 030e 	orn	r3, r3, #14
 80039e4:	b2da      	uxtb	r2, r3
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80039ec:	683b      	ldr	r3, [r7, #0]
 80039ee:	687a      	ldr	r2, [r7, #4]
 80039f0:	4907      	ldr	r1, [pc, #28]	; (8003a10 <I2C_MasterRequestRead+0x198>)
 80039f2:	68f8      	ldr	r0, [r7, #12]
 80039f4:	f000 f865 	bl	8003ac2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80039f8:	4603      	mov	r3, r0
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d001      	beq.n	8003a02 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 80039fe:	2301      	movs	r3, #1
 8003a00:	e000      	b.n	8003a04 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8003a02:	2300      	movs	r3, #0
}
 8003a04:	4618      	mov	r0, r3
 8003a06:	3718      	adds	r7, #24
 8003a08:	46bd      	mov	sp, r7
 8003a0a:	bd80      	pop	{r7, pc}
 8003a0c:	00010008 	.word	0x00010008
 8003a10:	00010002 	.word	0x00010002

08003a14 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003a14:	b580      	push	{r7, lr}
 8003a16:	b084      	sub	sp, #16
 8003a18:	af00      	add	r7, sp, #0
 8003a1a:	60f8      	str	r0, [r7, #12]
 8003a1c:	60b9      	str	r1, [r7, #8]
 8003a1e:	603b      	str	r3, [r7, #0]
 8003a20:	4613      	mov	r3, r2
 8003a22:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003a24:	e025      	b.n	8003a72 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a26:	683b      	ldr	r3, [r7, #0]
 8003a28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a2c:	d021      	beq.n	8003a72 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a2e:	f7fe f861 	bl	8001af4 <HAL_GetTick>
 8003a32:	4602      	mov	r2, r0
 8003a34:	69bb      	ldr	r3, [r7, #24]
 8003a36:	1ad3      	subs	r3, r2, r3
 8003a38:	683a      	ldr	r2, [r7, #0]
 8003a3a:	429a      	cmp	r2, r3
 8003a3c:	d302      	bcc.n	8003a44 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003a3e:	683b      	ldr	r3, [r7, #0]
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d116      	bne.n	8003a72 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	2200      	movs	r2, #0
 8003a48:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	2220      	movs	r2, #32
 8003a4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	2200      	movs	r2, #0
 8003a56:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a5e:	f043 0220 	orr.w	r2, r3, #32
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	2200      	movs	r2, #0
 8003a6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003a6e:	2301      	movs	r3, #1
 8003a70:	e023      	b.n	8003aba <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003a72:	68bb      	ldr	r3, [r7, #8]
 8003a74:	0c1b      	lsrs	r3, r3, #16
 8003a76:	b2db      	uxtb	r3, r3
 8003a78:	2b01      	cmp	r3, #1
 8003a7a:	d10d      	bne.n	8003a98 <I2C_WaitOnFlagUntilTimeout+0x84>
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	695b      	ldr	r3, [r3, #20]
 8003a82:	43da      	mvns	r2, r3
 8003a84:	68bb      	ldr	r3, [r7, #8]
 8003a86:	4013      	ands	r3, r2
 8003a88:	b29b      	uxth	r3, r3
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	bf0c      	ite	eq
 8003a8e:	2301      	moveq	r3, #1
 8003a90:	2300      	movne	r3, #0
 8003a92:	b2db      	uxtb	r3, r3
 8003a94:	461a      	mov	r2, r3
 8003a96:	e00c      	b.n	8003ab2 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	699b      	ldr	r3, [r3, #24]
 8003a9e:	43da      	mvns	r2, r3
 8003aa0:	68bb      	ldr	r3, [r7, #8]
 8003aa2:	4013      	ands	r3, r2
 8003aa4:	b29b      	uxth	r3, r3
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	bf0c      	ite	eq
 8003aaa:	2301      	moveq	r3, #1
 8003aac:	2300      	movne	r3, #0
 8003aae:	b2db      	uxtb	r3, r3
 8003ab0:	461a      	mov	r2, r3
 8003ab2:	79fb      	ldrb	r3, [r7, #7]
 8003ab4:	429a      	cmp	r2, r3
 8003ab6:	d0b6      	beq.n	8003a26 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003ab8:	2300      	movs	r3, #0
}
 8003aba:	4618      	mov	r0, r3
 8003abc:	3710      	adds	r7, #16
 8003abe:	46bd      	mov	sp, r7
 8003ac0:	bd80      	pop	{r7, pc}

08003ac2 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003ac2:	b580      	push	{r7, lr}
 8003ac4:	b084      	sub	sp, #16
 8003ac6:	af00      	add	r7, sp, #0
 8003ac8:	60f8      	str	r0, [r7, #12]
 8003aca:	60b9      	str	r1, [r7, #8]
 8003acc:	607a      	str	r2, [r7, #4]
 8003ace:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003ad0:	e051      	b.n	8003b76 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	695b      	ldr	r3, [r3, #20]
 8003ad8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003adc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ae0:	d123      	bne.n	8003b2a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	681a      	ldr	r2, [r3, #0]
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003af0:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003afa:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	2200      	movs	r2, #0
 8003b00:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	2220      	movs	r2, #32
 8003b06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	2200      	movs	r2, #0
 8003b0e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b16:	f043 0204 	orr.w	r2, r3, #4
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	2200      	movs	r2, #0
 8003b22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003b26:	2301      	movs	r3, #1
 8003b28:	e046      	b.n	8003bb8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b30:	d021      	beq.n	8003b76 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b32:	f7fd ffdf 	bl	8001af4 <HAL_GetTick>
 8003b36:	4602      	mov	r2, r0
 8003b38:	683b      	ldr	r3, [r7, #0]
 8003b3a:	1ad3      	subs	r3, r2, r3
 8003b3c:	687a      	ldr	r2, [r7, #4]
 8003b3e:	429a      	cmp	r2, r3
 8003b40:	d302      	bcc.n	8003b48 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d116      	bne.n	8003b76 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	2200      	movs	r2, #0
 8003b4c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	2220      	movs	r2, #32
 8003b52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	2200      	movs	r2, #0
 8003b5a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b62:	f043 0220 	orr.w	r2, r3, #32
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	2200      	movs	r2, #0
 8003b6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003b72:	2301      	movs	r3, #1
 8003b74:	e020      	b.n	8003bb8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003b76:	68bb      	ldr	r3, [r7, #8]
 8003b78:	0c1b      	lsrs	r3, r3, #16
 8003b7a:	b2db      	uxtb	r3, r3
 8003b7c:	2b01      	cmp	r3, #1
 8003b7e:	d10c      	bne.n	8003b9a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	695b      	ldr	r3, [r3, #20]
 8003b86:	43da      	mvns	r2, r3
 8003b88:	68bb      	ldr	r3, [r7, #8]
 8003b8a:	4013      	ands	r3, r2
 8003b8c:	b29b      	uxth	r3, r3
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	bf14      	ite	ne
 8003b92:	2301      	movne	r3, #1
 8003b94:	2300      	moveq	r3, #0
 8003b96:	b2db      	uxtb	r3, r3
 8003b98:	e00b      	b.n	8003bb2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	699b      	ldr	r3, [r3, #24]
 8003ba0:	43da      	mvns	r2, r3
 8003ba2:	68bb      	ldr	r3, [r7, #8]
 8003ba4:	4013      	ands	r3, r2
 8003ba6:	b29b      	uxth	r3, r3
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	bf14      	ite	ne
 8003bac:	2301      	movne	r3, #1
 8003bae:	2300      	moveq	r3, #0
 8003bb0:	b2db      	uxtb	r3, r3
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d18d      	bne.n	8003ad2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003bb6:	2300      	movs	r3, #0
}
 8003bb8:	4618      	mov	r0, r3
 8003bba:	3710      	adds	r7, #16
 8003bbc:	46bd      	mov	sp, r7
 8003bbe:	bd80      	pop	{r7, pc}

08003bc0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003bc0:	b580      	push	{r7, lr}
 8003bc2:	b084      	sub	sp, #16
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	60f8      	str	r0, [r7, #12]
 8003bc8:	60b9      	str	r1, [r7, #8]
 8003bca:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003bcc:	e02d      	b.n	8003c2a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003bce:	68f8      	ldr	r0, [r7, #12]
 8003bd0:	f000 f8ce 	bl	8003d70 <I2C_IsAcknowledgeFailed>
 8003bd4:	4603      	mov	r3, r0
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d001      	beq.n	8003bde <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003bda:	2301      	movs	r3, #1
 8003bdc:	e02d      	b.n	8003c3a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003bde:	68bb      	ldr	r3, [r7, #8]
 8003be0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003be4:	d021      	beq.n	8003c2a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003be6:	f7fd ff85 	bl	8001af4 <HAL_GetTick>
 8003bea:	4602      	mov	r2, r0
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	1ad3      	subs	r3, r2, r3
 8003bf0:	68ba      	ldr	r2, [r7, #8]
 8003bf2:	429a      	cmp	r2, r3
 8003bf4:	d302      	bcc.n	8003bfc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003bf6:	68bb      	ldr	r3, [r7, #8]
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d116      	bne.n	8003c2a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	2200      	movs	r2, #0
 8003c00:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	2220      	movs	r2, #32
 8003c06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	2200      	movs	r2, #0
 8003c0e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c16:	f043 0220 	orr.w	r2, r3, #32
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	2200      	movs	r2, #0
 8003c22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003c26:	2301      	movs	r3, #1
 8003c28:	e007      	b.n	8003c3a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	695b      	ldr	r3, [r3, #20]
 8003c30:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c34:	2b80      	cmp	r3, #128	; 0x80
 8003c36:	d1ca      	bne.n	8003bce <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003c38:	2300      	movs	r3, #0
}
 8003c3a:	4618      	mov	r0, r3
 8003c3c:	3710      	adds	r7, #16
 8003c3e:	46bd      	mov	sp, r7
 8003c40:	bd80      	pop	{r7, pc}

08003c42 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003c42:	b580      	push	{r7, lr}
 8003c44:	b084      	sub	sp, #16
 8003c46:	af00      	add	r7, sp, #0
 8003c48:	60f8      	str	r0, [r7, #12]
 8003c4a:	60b9      	str	r1, [r7, #8]
 8003c4c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003c4e:	e02d      	b.n	8003cac <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003c50:	68f8      	ldr	r0, [r7, #12]
 8003c52:	f000 f88d 	bl	8003d70 <I2C_IsAcknowledgeFailed>
 8003c56:	4603      	mov	r3, r0
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d001      	beq.n	8003c60 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003c5c:	2301      	movs	r3, #1
 8003c5e:	e02d      	b.n	8003cbc <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c60:	68bb      	ldr	r3, [r7, #8]
 8003c62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c66:	d021      	beq.n	8003cac <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c68:	f7fd ff44 	bl	8001af4 <HAL_GetTick>
 8003c6c:	4602      	mov	r2, r0
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	1ad3      	subs	r3, r2, r3
 8003c72:	68ba      	ldr	r2, [r7, #8]
 8003c74:	429a      	cmp	r2, r3
 8003c76:	d302      	bcc.n	8003c7e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003c78:	68bb      	ldr	r3, [r7, #8]
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d116      	bne.n	8003cac <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	2200      	movs	r2, #0
 8003c82:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	2220      	movs	r2, #32
 8003c88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	2200      	movs	r2, #0
 8003c90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c98:	f043 0220 	orr.w	r2, r3, #32
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	2200      	movs	r2, #0
 8003ca4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003ca8:	2301      	movs	r3, #1
 8003caa:	e007      	b.n	8003cbc <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	695b      	ldr	r3, [r3, #20]
 8003cb2:	f003 0304 	and.w	r3, r3, #4
 8003cb6:	2b04      	cmp	r3, #4
 8003cb8:	d1ca      	bne.n	8003c50 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003cba:	2300      	movs	r3, #0
}
 8003cbc:	4618      	mov	r0, r3
 8003cbe:	3710      	adds	r7, #16
 8003cc0:	46bd      	mov	sp, r7
 8003cc2:	bd80      	pop	{r7, pc}

08003cc4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003cc4:	b580      	push	{r7, lr}
 8003cc6:	b084      	sub	sp, #16
 8003cc8:	af00      	add	r7, sp, #0
 8003cca:	60f8      	str	r0, [r7, #12]
 8003ccc:	60b9      	str	r1, [r7, #8]
 8003cce:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003cd0:	e042      	b.n	8003d58 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	695b      	ldr	r3, [r3, #20]
 8003cd8:	f003 0310 	and.w	r3, r3, #16
 8003cdc:	2b10      	cmp	r3, #16
 8003cde:	d119      	bne.n	8003d14 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	f06f 0210 	mvn.w	r2, #16
 8003ce8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	2200      	movs	r2, #0
 8003cee:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	2220      	movs	r2, #32
 8003cf4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	2200      	movs	r2, #0
 8003cfc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	2200      	movs	r2, #0
 8003d0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003d10:	2301      	movs	r3, #1
 8003d12:	e029      	b.n	8003d68 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d14:	f7fd feee 	bl	8001af4 <HAL_GetTick>
 8003d18:	4602      	mov	r2, r0
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	1ad3      	subs	r3, r2, r3
 8003d1e:	68ba      	ldr	r2, [r7, #8]
 8003d20:	429a      	cmp	r2, r3
 8003d22:	d302      	bcc.n	8003d2a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003d24:	68bb      	ldr	r3, [r7, #8]
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d116      	bne.n	8003d58 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	2200      	movs	r2, #0
 8003d2e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	2220      	movs	r2, #32
 8003d34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	2200      	movs	r2, #0
 8003d3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d44:	f043 0220 	orr.w	r2, r3, #32
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	2200      	movs	r2, #0
 8003d50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003d54:	2301      	movs	r3, #1
 8003d56:	e007      	b.n	8003d68 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	695b      	ldr	r3, [r3, #20]
 8003d5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d62:	2b40      	cmp	r3, #64	; 0x40
 8003d64:	d1b5      	bne.n	8003cd2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003d66:	2300      	movs	r3, #0
}
 8003d68:	4618      	mov	r0, r3
 8003d6a:	3710      	adds	r7, #16
 8003d6c:	46bd      	mov	sp, r7
 8003d6e:	bd80      	pop	{r7, pc}

08003d70 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003d70:	b480      	push	{r7}
 8003d72:	b083      	sub	sp, #12
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	695b      	ldr	r3, [r3, #20]
 8003d7e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d82:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d86:	d11b      	bne.n	8003dc0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003d90:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	2200      	movs	r2, #0
 8003d96:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	2220      	movs	r2, #32
 8003d9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	2200      	movs	r2, #0
 8003da4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dac:	f043 0204 	orr.w	r2, r3, #4
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	2200      	movs	r2, #0
 8003db8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003dbc:	2301      	movs	r3, #1
 8003dbe:	e000      	b.n	8003dc2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003dc0:	2300      	movs	r3, #0
}
 8003dc2:	4618      	mov	r0, r3
 8003dc4:	370c      	adds	r7, #12
 8003dc6:	46bd      	mov	sp, r7
 8003dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dcc:	4770      	bx	lr
	...

08003dd0 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8003dd0:	b580      	push	{r7, lr}
 8003dd2:	b088      	sub	sp, #32
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d101      	bne.n	8003de2 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8003dde:	2301      	movs	r3, #1
 8003de0:	e1e7      	b.n	80041b2 <HAL_I2S_Init+0x3e2>
  }

  /* Check the I2S parameters */
  assert_param(IS_I2S_ALL_INSTANCE(hi2s->Instance));
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	4a9b      	ldr	r2, [pc, #620]	; (8004054 <HAL_I2S_Init+0x284>)
 8003de8:	4293      	cmp	r3, r2
 8003dea:	d018      	beq.n	8003e1e <HAL_I2S_Init+0x4e>
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	4a99      	ldr	r2, [pc, #612]	; (8004058 <HAL_I2S_Init+0x288>)
 8003df2:	4293      	cmp	r3, r2
 8003df4:	d013      	beq.n	8003e1e <HAL_I2S_Init+0x4e>
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	4a98      	ldr	r2, [pc, #608]	; (800405c <HAL_I2S_Init+0x28c>)
 8003dfc:	4293      	cmp	r3, r2
 8003dfe:	d00e      	beq.n	8003e1e <HAL_I2S_Init+0x4e>
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	4a96      	ldr	r2, [pc, #600]	; (8004060 <HAL_I2S_Init+0x290>)
 8003e06:	4293      	cmp	r3, r2
 8003e08:	d009      	beq.n	8003e1e <HAL_I2S_Init+0x4e>
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	4a95      	ldr	r2, [pc, #596]	; (8004064 <HAL_I2S_Init+0x294>)
 8003e10:	4293      	cmp	r3, r2
 8003e12:	d004      	beq.n	8003e1e <HAL_I2S_Init+0x4e>
 8003e14:	f240 111b 	movw	r1, #283	; 0x11b
 8003e18:	4893      	ldr	r0, [pc, #588]	; (8004068 <HAL_I2S_Init+0x298>)
 8003e1a:	f7fd fc88 	bl	800172e <assert_failed>
  assert_param(IS_I2S_MODE(hi2s->Init.Mode));
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	685b      	ldr	r3, [r3, #4]
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d013      	beq.n	8003e4e <HAL_I2S_Init+0x7e>
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	685b      	ldr	r3, [r3, #4]
 8003e2a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003e2e:	d00e      	beq.n	8003e4e <HAL_I2S_Init+0x7e>
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	685b      	ldr	r3, [r3, #4]
 8003e34:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003e38:	d009      	beq.n	8003e4e <HAL_I2S_Init+0x7e>
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	685b      	ldr	r3, [r3, #4]
 8003e3e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003e42:	d004      	beq.n	8003e4e <HAL_I2S_Init+0x7e>
 8003e44:	f44f 718e 	mov.w	r1, #284	; 0x11c
 8003e48:	4887      	ldr	r0, [pc, #540]	; (8004068 <HAL_I2S_Init+0x298>)
 8003e4a:	f7fd fc70 	bl	800172e <assert_failed>
  assert_param(IS_I2S_STANDARD(hi2s->Init.Standard));
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	689b      	ldr	r3, [r3, #8]
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d014      	beq.n	8003e80 <HAL_I2S_Init+0xb0>
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	689b      	ldr	r3, [r3, #8]
 8003e5a:	2b10      	cmp	r3, #16
 8003e5c:	d010      	beq.n	8003e80 <HAL_I2S_Init+0xb0>
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	689b      	ldr	r3, [r3, #8]
 8003e62:	2b20      	cmp	r3, #32
 8003e64:	d00c      	beq.n	8003e80 <HAL_I2S_Init+0xb0>
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	689b      	ldr	r3, [r3, #8]
 8003e6a:	2b30      	cmp	r3, #48	; 0x30
 8003e6c:	d008      	beq.n	8003e80 <HAL_I2S_Init+0xb0>
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	689b      	ldr	r3, [r3, #8]
 8003e72:	2bb0      	cmp	r3, #176	; 0xb0
 8003e74:	d004      	beq.n	8003e80 <HAL_I2S_Init+0xb0>
 8003e76:	f240 111d 	movw	r1, #285	; 0x11d
 8003e7a:	487b      	ldr	r0, [pc, #492]	; (8004068 <HAL_I2S_Init+0x298>)
 8003e7c:	f7fd fc57 	bl	800172e <assert_failed>
  assert_param(IS_I2S_DATA_FORMAT(hi2s->Init.DataFormat));
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	68db      	ldr	r3, [r3, #12]
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d010      	beq.n	8003eaa <HAL_I2S_Init+0xda>
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	68db      	ldr	r3, [r3, #12]
 8003e8c:	2b01      	cmp	r3, #1
 8003e8e:	d00c      	beq.n	8003eaa <HAL_I2S_Init+0xda>
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	68db      	ldr	r3, [r3, #12]
 8003e94:	2b03      	cmp	r3, #3
 8003e96:	d008      	beq.n	8003eaa <HAL_I2S_Init+0xda>
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	68db      	ldr	r3, [r3, #12]
 8003e9c:	2b05      	cmp	r3, #5
 8003e9e:	d004      	beq.n	8003eaa <HAL_I2S_Init+0xda>
 8003ea0:	f44f 718f 	mov.w	r1, #286	; 0x11e
 8003ea4:	4870      	ldr	r0, [pc, #448]	; (8004068 <HAL_I2S_Init+0x298>)
 8003ea6:	f7fd fc42 	bl	800172e <assert_failed>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	691b      	ldr	r3, [r3, #16]
 8003eae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003eb2:	d008      	beq.n	8003ec6 <HAL_I2S_Init+0xf6>
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	691b      	ldr	r3, [r3, #16]
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d004      	beq.n	8003ec6 <HAL_I2S_Init+0xf6>
 8003ebc:	f240 111f 	movw	r1, #287	; 0x11f
 8003ec0:	4869      	ldr	r0, [pc, #420]	; (8004068 <HAL_I2S_Init+0x298>)
 8003ec2:	f7fd fc34 	bl	800172e <assert_failed>
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	695b      	ldr	r3, [r3, #20]
 8003eca:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 8003ece:	d304      	bcc.n	8003eda <HAL_I2S_Init+0x10a>
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	695b      	ldr	r3, [r3, #20]
 8003ed4:	4a65      	ldr	r2, [pc, #404]	; (800406c <HAL_I2S_Init+0x29c>)
 8003ed6:	4293      	cmp	r3, r2
 8003ed8:	d908      	bls.n	8003eec <HAL_I2S_Init+0x11c>
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	695b      	ldr	r3, [r3, #20]
 8003ede:	2b02      	cmp	r3, #2
 8003ee0:	d004      	beq.n	8003eec <HAL_I2S_Init+0x11c>
 8003ee2:	f44f 7190 	mov.w	r1, #288	; 0x120
 8003ee6:	4860      	ldr	r0, [pc, #384]	; (8004068 <HAL_I2S_Init+0x298>)
 8003ee8:	f7fd fc21 	bl	800172e <assert_failed>
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	699b      	ldr	r3, [r3, #24]
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d008      	beq.n	8003f06 <HAL_I2S_Init+0x136>
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	699b      	ldr	r3, [r3, #24]
 8003ef8:	2b08      	cmp	r3, #8
 8003efa:	d004      	beq.n	8003f06 <HAL_I2S_Init+0x136>
 8003efc:	f240 1121 	movw	r1, #289	; 0x121
 8003f00:	4859      	ldr	r0, [pc, #356]	; (8004068 <HAL_I2S_Init+0x298>)
 8003f02:	f7fd fc14 	bl	800172e <assert_failed>
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	69db      	ldr	r3, [r3, #28]
 8003f0a:	2b01      	cmp	r3, #1
 8003f0c:	d008      	beq.n	8003f20 <HAL_I2S_Init+0x150>
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	69db      	ldr	r3, [r3, #28]
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d004      	beq.n	8003f20 <HAL_I2S_Init+0x150>
 8003f16:	f44f 7191 	mov.w	r1, #290	; 0x122
 8003f1a:	4853      	ldr	r0, [pc, #332]	; (8004068 <HAL_I2S_Init+0x298>)
 8003f1c:	f7fd fc07 	bl	800172e <assert_failed>

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003f26:	b2db      	uxtb	r3, r3
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d109      	bne.n	8003f40 <HAL_I2S_Init+0x170>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	2200      	movs	r2, #0
 8003f30:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	4a4e      	ldr	r2, [pc, #312]	; (8004070 <HAL_I2S_Init+0x2a0>)
 8003f38:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8003f3a:	6878      	ldr	r0, [r7, #4]
 8003f3c:	f7fd f90e 	bl	800115c <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	2202      	movs	r2, #2
 8003f44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	69db      	ldr	r3, [r3, #28]
 8003f4e:	687a      	ldr	r2, [r7, #4]
 8003f50:	6812      	ldr	r2, [r2, #0]
 8003f52:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003f56:	f023 030f 	bic.w	r3, r3, #15
 8003f5a:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	2202      	movs	r2, #2
 8003f62:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	695b      	ldr	r3, [r3, #20]
 8003f68:	2b02      	cmp	r3, #2
 8003f6a:	d060      	beq.n	800402e <HAL_I2S_Init+0x25e>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	68db      	ldr	r3, [r3, #12]
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d102      	bne.n	8003f7a <HAL_I2S_Init+0x1aa>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8003f74:	2310      	movs	r3, #16
 8003f76:	617b      	str	r3, [r7, #20]
 8003f78:	e001      	b.n	8003f7e <HAL_I2S_Init+0x1ae>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8003f7a:	2320      	movs	r3, #32
 8003f7c:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	689b      	ldr	r3, [r3, #8]
 8003f82:	2b20      	cmp	r3, #32
 8003f84:	d802      	bhi.n	8003f8c <HAL_I2S_Init+0x1bc>
    {
      /* In I2S standard packet lenght is multiplied by 2 */
      packetlength = packetlength * 2U;
 8003f86:	697b      	ldr	r3, [r7, #20]
 8003f88:	005b      	lsls	r3, r3, #1
 8003f8a:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8003f8c:	2001      	movs	r0, #1
 8003f8e:	f002 ffd1 	bl	8006f34 <HAL_RCCEx_GetPeriphCLKFreq>
 8003f92:	60f8      	str	r0, [r7, #12]
#endif

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	691b      	ldr	r3, [r3, #16]
 8003f98:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003f9c:	d125      	bne.n	8003fea <HAL_I2S_Init+0x21a>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	68db      	ldr	r3, [r3, #12]
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d010      	beq.n	8003fc8 <HAL_I2S_Init+0x1f8>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003fa6:	697b      	ldr	r3, [r7, #20]
 8003fa8:	009b      	lsls	r3, r3, #2
 8003faa:	68fa      	ldr	r2, [r7, #12]
 8003fac:	fbb2 f2f3 	udiv	r2, r2, r3
 8003fb0:	4613      	mov	r3, r2
 8003fb2:	009b      	lsls	r3, r3, #2
 8003fb4:	4413      	add	r3, r2
 8003fb6:	005b      	lsls	r3, r3, #1
 8003fb8:	461a      	mov	r2, r3
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	695b      	ldr	r3, [r3, #20]
 8003fbe:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fc2:	3305      	adds	r3, #5
 8003fc4:	613b      	str	r3, [r7, #16]
 8003fc6:	e01f      	b.n	8004008 <HAL_I2S_Init+0x238>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003fc8:	697b      	ldr	r3, [r7, #20]
 8003fca:	00db      	lsls	r3, r3, #3
 8003fcc:	68fa      	ldr	r2, [r7, #12]
 8003fce:	fbb2 f2f3 	udiv	r2, r2, r3
 8003fd2:	4613      	mov	r3, r2
 8003fd4:	009b      	lsls	r3, r3, #2
 8003fd6:	4413      	add	r3, r2
 8003fd8:	005b      	lsls	r3, r3, #1
 8003fda:	461a      	mov	r2, r3
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	695b      	ldr	r3, [r3, #20]
 8003fe0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fe4:	3305      	adds	r3, #5
 8003fe6:	613b      	str	r3, [r7, #16]
 8003fe8:	e00e      	b.n	8004008 <HAL_I2S_Init+0x238>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003fea:	68fa      	ldr	r2, [r7, #12]
 8003fec:	697b      	ldr	r3, [r7, #20]
 8003fee:	fbb2 f2f3 	udiv	r2, r2, r3
 8003ff2:	4613      	mov	r3, r2
 8003ff4:	009b      	lsls	r3, r3, #2
 8003ff6:	4413      	add	r3, r2
 8003ff8:	005b      	lsls	r3, r3, #1
 8003ffa:	461a      	mov	r2, r3
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	695b      	ldr	r3, [r3, #20]
 8004000:	fbb2 f3f3 	udiv	r3, r2, r3
 8004004:	3305      	adds	r3, #5
 8004006:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8004008:	693b      	ldr	r3, [r7, #16]
 800400a:	4a1a      	ldr	r2, [pc, #104]	; (8004074 <HAL_I2S_Init+0x2a4>)
 800400c:	fba2 2303 	umull	r2, r3, r2, r3
 8004010:	08db      	lsrs	r3, r3, #3
 8004012:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8004014:	693b      	ldr	r3, [r7, #16]
 8004016:	f003 0301 	and.w	r3, r3, #1
 800401a:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 800401c:	693a      	ldr	r2, [r7, #16]
 800401e:	69bb      	ldr	r3, [r7, #24]
 8004020:	1ad3      	subs	r3, r2, r3
 8004022:	085b      	lsrs	r3, r3, #1
 8004024:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8004026:	69bb      	ldr	r3, [r7, #24]
 8004028:	021b      	lsls	r3, r3, #8
 800402a:	61bb      	str	r3, [r7, #24]
 800402c:	e003      	b.n	8004036 <HAL_I2S_Init+0x266>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 800402e:	2302      	movs	r3, #2
 8004030:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8004032:	2300      	movs	r3, #0
 8004034:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8004036:	69fb      	ldr	r3, [r7, #28]
 8004038:	2b01      	cmp	r3, #1
 800403a:	d902      	bls.n	8004042 <HAL_I2S_Init+0x272>
 800403c:	69fb      	ldr	r3, [r7, #28]
 800403e:	2bff      	cmp	r3, #255	; 0xff
 8004040:	d91a      	bls.n	8004078 <HAL_I2S_Init+0x2a8>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004046:	f043 0210 	orr.w	r2, r3, #16
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 800404e:	2301      	movs	r3, #1
 8004050:	e0af      	b.n	80041b2 <HAL_I2S_Init+0x3e2>
 8004052:	bf00      	nop
 8004054:	40013000 	.word	0x40013000
 8004058:	40003800 	.word	0x40003800
 800405c:	40003c00 	.word	0x40003c00
 8004060:	40013400 	.word	0x40013400
 8004064:	40015000 	.word	0x40015000
 8004068:	0800d700 	.word	0x0800d700
 800406c:	0002ee00 	.word	0x0002ee00
 8004070:	08004669 	.word	0x08004669
 8004074:	cccccccd 	.word	0xcccccccd
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	691a      	ldr	r2, [r3, #16]
 800407c:	69bb      	ldr	r3, [r7, #24]
 800407e:	ea42 0103 	orr.w	r1, r2, r3
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	69fa      	ldr	r2, [r7, #28]
 8004088:	430a      	orrs	r2, r1
 800408a:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	69db      	ldr	r3, [r3, #28]
 8004092:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8004096:	f023 030f 	bic.w	r3, r3, #15
 800409a:	687a      	ldr	r2, [r7, #4]
 800409c:	6851      	ldr	r1, [r2, #4]
 800409e:	687a      	ldr	r2, [r7, #4]
 80040a0:	6892      	ldr	r2, [r2, #8]
 80040a2:	4311      	orrs	r1, r2
 80040a4:	687a      	ldr	r2, [r7, #4]
 80040a6:	68d2      	ldr	r2, [r2, #12]
 80040a8:	4311      	orrs	r1, r2
 80040aa:	687a      	ldr	r2, [r7, #4]
 80040ac:	6992      	ldr	r2, [r2, #24]
 80040ae:	430a      	orrs	r2, r1
 80040b0:	431a      	orrs	r2, r3
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80040ba:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_ASTRTEN */

#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	6a1b      	ldr	r3, [r3, #32]
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d008      	beq.n	80040d6 <HAL_I2S_Init+0x306>
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	6a1b      	ldr	r3, [r3, #32]
 80040c8:	2b01      	cmp	r3, #1
 80040ca:	d004      	beq.n	80040d6 <HAL_I2S_Init+0x306>
 80040cc:	f240 11bd 	movw	r1, #445	; 0x1bd
 80040d0:	483a      	ldr	r0, [pc, #232]	; (80041bc <HAL_I2S_Init+0x3ec>)
 80040d2:	f7fd fb2c 	bl	800172e <assert_failed>

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	6a1b      	ldr	r3, [r3, #32]
 80040da:	2b01      	cmp	r3, #1
 80040dc:	d161      	bne.n	80041a2 <HAL_I2S_Init+0x3d2>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	4a37      	ldr	r2, [pc, #220]	; (80041c0 <HAL_I2S_Init+0x3f0>)
 80040e2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	4a36      	ldr	r2, [pc, #216]	; (80041c4 <HAL_I2S_Init+0x3f4>)
 80040ea:	4293      	cmp	r3, r2
 80040ec:	d101      	bne.n	80040f2 <HAL_I2S_Init+0x322>
 80040ee:	4b36      	ldr	r3, [pc, #216]	; (80041c8 <HAL_I2S_Init+0x3f8>)
 80040f0:	e001      	b.n	80040f6 <HAL_I2S_Init+0x326>
 80040f2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80040f6:	69db      	ldr	r3, [r3, #28]
 80040f8:	687a      	ldr	r2, [r7, #4]
 80040fa:	6812      	ldr	r2, [r2, #0]
 80040fc:	4931      	ldr	r1, [pc, #196]	; (80041c4 <HAL_I2S_Init+0x3f4>)
 80040fe:	428a      	cmp	r2, r1
 8004100:	d101      	bne.n	8004106 <HAL_I2S_Init+0x336>
 8004102:	4a31      	ldr	r2, [pc, #196]	; (80041c8 <HAL_I2S_Init+0x3f8>)
 8004104:	e001      	b.n	800410a <HAL_I2S_Init+0x33a>
 8004106:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 800410a:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 800410e:	f023 030f 	bic.w	r3, r3, #15
 8004112:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	4a2a      	ldr	r2, [pc, #168]	; (80041c4 <HAL_I2S_Init+0x3f4>)
 800411a:	4293      	cmp	r3, r2
 800411c:	d101      	bne.n	8004122 <HAL_I2S_Init+0x352>
 800411e:	4b2a      	ldr	r3, [pc, #168]	; (80041c8 <HAL_I2S_Init+0x3f8>)
 8004120:	e001      	b.n	8004126 <HAL_I2S_Init+0x356>
 8004122:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004126:	2202      	movs	r2, #2
 8004128:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	4a25      	ldr	r2, [pc, #148]	; (80041c4 <HAL_I2S_Init+0x3f4>)
 8004130:	4293      	cmp	r3, r2
 8004132:	d101      	bne.n	8004138 <HAL_I2S_Init+0x368>
 8004134:	4b24      	ldr	r3, [pc, #144]	; (80041c8 <HAL_I2S_Init+0x3f8>)
 8004136:	e001      	b.n	800413c <HAL_I2S_Init+0x36c>
 8004138:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800413c:	69db      	ldr	r3, [r3, #28]
 800413e:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	685b      	ldr	r3, [r3, #4]
 8004144:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004148:	d003      	beq.n	8004152 <HAL_I2S_Init+0x382>
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	685b      	ldr	r3, [r3, #4]
 800414e:	2b00      	cmp	r3, #0
 8004150:	d103      	bne.n	800415a <HAL_I2S_Init+0x38a>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8004152:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004156:	613b      	str	r3, [r7, #16]
 8004158:	e001      	b.n	800415e <HAL_I2S_Init+0x38e>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 800415a:	2300      	movs	r3, #0
 800415c:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 800415e:	693b      	ldr	r3, [r7, #16]
 8004160:	b29a      	uxth	r2, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	689b      	ldr	r3, [r3, #8]
 8004166:	b299      	uxth	r1, r3
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	68db      	ldr	r3, [r3, #12]
 800416c:	b298      	uxth	r0, r3
                                    (uint16_t)hi2s->Init.CPOL))));
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	699b      	ldr	r3, [r3, #24]
 8004172:	b29b      	uxth	r3, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 8004174:	4303      	orrs	r3, r0
 8004176:	b29b      	uxth	r3, r3
 8004178:	430b      	orrs	r3, r1
 800417a:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 800417c:	4313      	orrs	r3, r2
 800417e:	b29a      	uxth	r2, r3
 8004180:	897b      	ldrh	r3, [r7, #10]
 8004182:	4313      	orrs	r3, r2
 8004184:	b29b      	uxth	r3, r3
 8004186:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800418a:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	4a0c      	ldr	r2, [pc, #48]	; (80041c4 <HAL_I2S_Init+0x3f4>)
 8004192:	4293      	cmp	r3, r2
 8004194:	d101      	bne.n	800419a <HAL_I2S_Init+0x3ca>
 8004196:	4b0c      	ldr	r3, [pc, #48]	; (80041c8 <HAL_I2S_Init+0x3f8>)
 8004198:	e001      	b.n	800419e <HAL_I2S_Init+0x3ce>
 800419a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800419e:	897a      	ldrh	r2, [r7, #10]
 80041a0:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	2200      	movs	r2, #0
 80041a6:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	2201      	movs	r2, #1
 80041ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 80041b0:	2300      	movs	r3, #0
}
 80041b2:	4618      	mov	r0, r3
 80041b4:	3720      	adds	r7, #32
 80041b6:	46bd      	mov	sp, r7
 80041b8:	bd80      	pop	{r7, pc}
 80041ba:	bf00      	nop
 80041bc:	0800d700 	.word	0x0800d700
 80041c0:	080047f1 	.word	0x080047f1
 80041c4:	40003800 	.word	0x40003800
 80041c8:	40003400 	.word	0x40003400

080041cc <HAL_I2S_Receive>:
  * @note   In I2S Master Receiver mode, just after enabling the peripheral the clock will be generate
  *         in continuous way and as the I2S is not disabled at the end of the I2S transaction.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Receive(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size, uint32_t Timeout)
{
 80041cc:	b580      	push	{r7, lr}
 80041ce:	b088      	sub	sp, #32
 80041d0:	af00      	add	r7, sp, #0
 80041d2:	60f8      	str	r0, [r7, #12]
 80041d4:	60b9      	str	r1, [r7, #8]
 80041d6:	603b      	str	r3, [r7, #0]
 80041d8:	4613      	mov	r3, r2
 80041da:	80fb      	strh	r3, [r7, #6]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 80041dc:	68bb      	ldr	r3, [r7, #8]
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d002      	beq.n	80041e8 <HAL_I2S_Receive+0x1c>
 80041e2:	88fb      	ldrh	r3, [r7, #6]
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d101      	bne.n	80041ec <HAL_I2S_Receive+0x20>
  {
    return  HAL_ERROR;
 80041e8:	2301      	movs	r3, #1
 80041ea:	e0b4      	b.n	8004356 <HAL_I2S_Receive+0x18a>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80041f2:	b2db      	uxtb	r3, r3
 80041f4:	2b01      	cmp	r3, #1
 80041f6:	d101      	bne.n	80041fc <HAL_I2S_Receive+0x30>
 80041f8:	2302      	movs	r3, #2
 80041fa:	e0ac      	b.n	8004356 <HAL_I2S_Receive+0x18a>
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	2201      	movs	r2, #1
 8004200:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if (hi2s->State != HAL_I2S_STATE_READY)
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800420a:	b2db      	uxtb	r3, r3
 800420c:	2b01      	cmp	r3, #1
 800420e:	d005      	beq.n	800421c <HAL_I2S_Receive+0x50>
  {
    __HAL_UNLOCK(hi2s);
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	2200      	movs	r2, #0
 8004214:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    return HAL_BUSY;
 8004218:	2302      	movs	r3, #2
 800421a:	e09c      	b.n	8004356 <HAL_I2S_Receive+0x18a>
  }

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_RX;
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	2204      	movs	r2, #4
 8004220:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	2200      	movs	r2, #0
 8004228:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->pRxBuffPtr = pData;
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	68ba      	ldr	r2, [r7, #8]
 800422e:	62da      	str	r2, [r3, #44]	; 0x2c

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	69db      	ldr	r3, [r3, #28]
 8004236:	f003 0307 	and.w	r3, r3, #7
 800423a:	61fb      	str	r3, [r7, #28]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 800423c:	69fb      	ldr	r3, [r7, #28]
 800423e:	2b03      	cmp	r3, #3
 8004240:	d002      	beq.n	8004248 <HAL_I2S_Receive+0x7c>
 8004242:	69fb      	ldr	r3, [r7, #28]
 8004244:	2b05      	cmp	r3, #5
 8004246:	d10a      	bne.n	800425e <HAL_I2S_Receive+0x92>
  {
    hi2s->RxXferSize = (Size << 1U);
 8004248:	88fb      	ldrh	r3, [r7, #6]
 800424a:	005b      	lsls	r3, r3, #1
 800424c:	b29a      	uxth	r2, r3
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	861a      	strh	r2, [r3, #48]	; 0x30
    hi2s->RxXferCount = (Size << 1U);
 8004252:	88fb      	ldrh	r3, [r7, #6]
 8004254:	005b      	lsls	r3, r3, #1
 8004256:	b29a      	uxth	r2, r3
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	865a      	strh	r2, [r3, #50]	; 0x32
 800425c:	e005      	b.n	800426a <HAL_I2S_Receive+0x9e>
  }
  else
  {
    hi2s->RxXferSize = Size;
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	88fa      	ldrh	r2, [r7, #6]
 8004262:	861a      	strh	r2, [r3, #48]	; 0x30
    hi2s->RxXferCount = Size;
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	88fa      	ldrh	r2, [r7, #6]
 8004268:	865a      	strh	r2, [r3, #50]	; 0x32
  }

  /* Check if the I2S is already enabled */
  if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SE) != SPI_I2SCFGR_I2SE)
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	69db      	ldr	r3, [r3, #28]
 8004270:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004274:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004278:	d007      	beq.n	800428a <HAL_I2S_Receive+0xbe>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	69da      	ldr	r2, [r3, #28]
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004288:	61da      	str	r2, [r3, #28]
  }

  /* Check if Master Receiver mode is selected */
  if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_RX)
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	69db      	ldr	r3, [r3, #28]
 8004290:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004294:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004298:	d14f      	bne.n	800433a <HAL_I2S_Receive+0x16e>
  {
    /* Clear the Overrun Flag by a read operation on the SPI_DR register followed by a read
    access to the SPI_SR register. */
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 800429a:	2300      	movs	r3, #0
 800429c:	61bb      	str	r3, [r7, #24]
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	68db      	ldr	r3, [r3, #12]
 80042a4:	61bb      	str	r3, [r7, #24]
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	689b      	ldr	r3, [r3, #8]
 80042ac:	61bb      	str	r3, [r7, #24]
 80042ae:	69bb      	ldr	r3, [r7, #24]
  }

  /* Receive data */
  while (hi2s->RxXferCount > 0U)
 80042b0:	e043      	b.n	800433a <HAL_I2S_Receive+0x16e>
  {
    /* Wait until RXNE flag is set */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_RXNE, SET, Timeout) != HAL_OK)
 80042b2:	683b      	ldr	r3, [r7, #0]
 80042b4:	2201      	movs	r2, #1
 80042b6:	2101      	movs	r1, #1
 80042b8:	68f8      	ldr	r0, [r7, #12]
 80042ba:	f000 fa5f 	bl	800477c <I2S_WaitFlagStateUntilTimeout>
 80042be:	4603      	mov	r3, r0
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d00f      	beq.n	80042e4 <HAL_I2S_Receive+0x118>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042c8:	f043 0201 	orr.w	r2, r3, #1
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	645a      	str	r2, [r3, #68]	; 0x44
      hi2s->State = HAL_I2S_STATE_READY;
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	2201      	movs	r2, #1
 80042d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      __HAL_UNLOCK(hi2s);
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	2200      	movs	r2, #0
 80042dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80042e0:	2301      	movs	r3, #1
 80042e2:	e038      	b.n	8004356 <HAL_I2S_Receive+0x18a>
    }

    (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	68da      	ldr	r2, [r3, #12]
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042ee:	b292      	uxth	r2, r2
 80042f0:	801a      	strh	r2, [r3, #0]
    hi2s->pRxBuffPtr++;
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042f6:	1c9a      	adds	r2, r3, #2
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2s->RxXferCount--;
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004300:	b29b      	uxth	r3, r3
 8004302:	3b01      	subs	r3, #1
 8004304:	b29a      	uxth	r2, r3
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	865a      	strh	r2, [r3, #50]	; 0x32

    /* Check if an overrun occurs */
    if (__HAL_I2S_GET_FLAG(hi2s, I2S_FLAG_OVR) == SET)
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	689b      	ldr	r3, [r3, #8]
 8004310:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004314:	2b40      	cmp	r3, #64	; 0x40
 8004316:	d110      	bne.n	800433a <HAL_I2S_Receive+0x16e>
    {
      /* Clear overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8004318:	2300      	movs	r3, #0
 800431a:	617b      	str	r3, [r7, #20]
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	68db      	ldr	r3, [r3, #12]
 8004322:	617b      	str	r3, [r7, #20]
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	689b      	ldr	r3, [r3, #8]
 800432a:	617b      	str	r3, [r7, #20]
 800432c:	697b      	ldr	r3, [r7, #20]

      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004332:	f043 0202 	orr.w	r2, r3, #2
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	645a      	str	r2, [r3, #68]	; 0x44
  while (hi2s->RxXferCount > 0U)
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800433e:	b29b      	uxth	r3, r3
 8004340:	2b00      	cmp	r3, #0
 8004342:	d1b6      	bne.n	80042b2 <HAL_I2S_Receive+0xe6>
    }
  }

  hi2s->State = HAL_I2S_STATE_READY;
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	2201      	movs	r2, #1
 8004348:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  __HAL_UNLOCK(hi2s);
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	2200      	movs	r2, #0
 8004350:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  return HAL_OK;
 8004354:	2300      	movs	r3, #0
}
 8004356:	4618      	mov	r0, r3
 8004358:	3720      	adds	r7, #32
 800435a:	46bd      	mov	sp, r7
 800435c:	bd80      	pop	{r7, pc}
	...

08004360 <HAL_I2S_Receive_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Receive_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 8004360:	b580      	push	{r7, lr}
 8004362:	b086      	sub	sp, #24
 8004364:	af00      	add	r7, sp, #0
 8004366:	60f8      	str	r0, [r7, #12]
 8004368:	60b9      	str	r1, [r7, #8]
 800436a:	4613      	mov	r3, r2
 800436c:	80fb      	strh	r3, [r7, #6]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 800436e:	68bb      	ldr	r3, [r7, #8]
 8004370:	2b00      	cmp	r3, #0
 8004372:	d002      	beq.n	800437a <HAL_I2S_Receive_DMA+0x1a>
 8004374:	88fb      	ldrh	r3, [r7, #6]
 8004376:	2b00      	cmp	r3, #0
 8004378:	d101      	bne.n	800437e <HAL_I2S_Receive_DMA+0x1e>
  {
    return  HAL_ERROR;
 800437a:	2301      	movs	r3, #1
 800437c:	e0a1      	b.n	80044c2 <HAL_I2S_Receive_DMA+0x162>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004384:	b2db      	uxtb	r3, r3
 8004386:	2b01      	cmp	r3, #1
 8004388:	d101      	bne.n	800438e <HAL_I2S_Receive_DMA+0x2e>
 800438a:	2302      	movs	r3, #2
 800438c:	e099      	b.n	80044c2 <HAL_I2S_Receive_DMA+0x162>
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	2201      	movs	r2, #1
 8004392:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if (hi2s->State != HAL_I2S_STATE_READY)
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800439c:	b2db      	uxtb	r3, r3
 800439e:	2b01      	cmp	r3, #1
 80043a0:	d005      	beq.n	80043ae <HAL_I2S_Receive_DMA+0x4e>
  {
    __HAL_UNLOCK(hi2s);
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	2200      	movs	r2, #0
 80043a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    return HAL_BUSY;
 80043aa:	2302      	movs	r3, #2
 80043ac:	e089      	b.n	80044c2 <HAL_I2S_Receive_DMA+0x162>
  }

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_RX;
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	2204      	movs	r2, #4
 80043b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	2200      	movs	r2, #0
 80043ba:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->pRxBuffPtr = pData;
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	68ba      	ldr	r2, [r7, #8]
 80043c0:	62da      	str	r2, [r3, #44]	; 0x2c

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	69db      	ldr	r3, [r3, #28]
 80043c8:	f003 0307 	and.w	r3, r3, #7
 80043cc:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 80043ce:	697b      	ldr	r3, [r7, #20]
 80043d0:	2b03      	cmp	r3, #3
 80043d2:	d002      	beq.n	80043da <HAL_I2S_Receive_DMA+0x7a>
 80043d4:	697b      	ldr	r3, [r7, #20]
 80043d6:	2b05      	cmp	r3, #5
 80043d8:	d10a      	bne.n	80043f0 <HAL_I2S_Receive_DMA+0x90>
  {
    hi2s->RxXferSize = (Size << 1U);
 80043da:	88fb      	ldrh	r3, [r7, #6]
 80043dc:	005b      	lsls	r3, r3, #1
 80043de:	b29a      	uxth	r2, r3
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	861a      	strh	r2, [r3, #48]	; 0x30
    hi2s->RxXferCount = (Size << 1U);
 80043e4:	88fb      	ldrh	r3, [r7, #6]
 80043e6:	005b      	lsls	r3, r3, #1
 80043e8:	b29a      	uxth	r2, r3
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	865a      	strh	r2, [r3, #50]	; 0x32
 80043ee:	e005      	b.n	80043fc <HAL_I2S_Receive_DMA+0x9c>
  }
  else
  {
    hi2s->RxXferSize = Size;
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	88fa      	ldrh	r2, [r7, #6]
 80043f4:	861a      	strh	r2, [r3, #48]	; 0x30
    hi2s->RxXferCount = Size;
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	88fa      	ldrh	r2, [r7, #6]
 80043fa:	865a      	strh	r2, [r3, #50]	; 0x32
  }

  /* Set the I2S Rx DMA Half transfer complete callback */
  hi2s->hdmarx->XferHalfCpltCallback = I2S_DMARxHalfCplt;
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004400:	4a32      	ldr	r2, [pc, #200]	; (80044cc <HAL_I2S_Receive_DMA+0x16c>)
 8004402:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the I2S Rx DMA transfer complete callback */
  hi2s->hdmarx->XferCpltCallback = I2S_DMARxCplt;
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004408:	4a31      	ldr	r2, [pc, #196]	; (80044d0 <HAL_I2S_Receive_DMA+0x170>)
 800440a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hi2s->hdmarx->XferErrorCallback = I2S_DMAError;
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004410:	4a30      	ldr	r2, [pc, #192]	; (80044d4 <HAL_I2S_Receive_DMA+0x174>)
 8004412:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Check if Master Receiver mode is selected */
  if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_RX)
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	69db      	ldr	r3, [r3, #28]
 800441a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800441e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004422:	d10a      	bne.n	800443a <HAL_I2S_Receive_DMA+0xda>
  {
    /* Clear the Overrun Flag by a read operation to the SPI_DR register followed by a read
    access to the SPI_SR register. */
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8004424:	2300      	movs	r3, #0
 8004426:	613b      	str	r3, [r7, #16]
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	68db      	ldr	r3, [r3, #12]
 800442e:	613b      	str	r3, [r7, #16]
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	689b      	ldr	r3, [r3, #8]
 8004436:	613b      	str	r3, [r7, #16]
 8004438:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the Rx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, (uint32_t)hi2s->pRxBuffPtr,
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	330c      	adds	r3, #12
 8004444:	4619      	mov	r1, r3
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800444a:	461a      	mov	r2, r3
                                 hi2s->RxXferSize))
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8004450:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, (uint32_t)hi2s->pRxBuffPtr,
 8004452:	f7fd ff03 	bl	800225c <HAL_DMA_Start_IT>
 8004456:	4603      	mov	r3, r0
 8004458:	2b00      	cmp	r3, #0
 800445a:	d00f      	beq.n	800447c <HAL_I2S_Receive_DMA+0x11c>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004460:	f043 0208 	orr.w	r2, r3, #8
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	645a      	str	r2, [r3, #68]	; 0x44
    hi2s->State = HAL_I2S_STATE_READY;
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	2201      	movs	r2, #1
 800446c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    __HAL_UNLOCK(hi2s);
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	2200      	movs	r2, #0
 8004474:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    return HAL_ERROR;
 8004478:	2301      	movs	r3, #1
 800447a:	e022      	b.n	80044c2 <HAL_I2S_Receive_DMA+0x162>
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	69db      	ldr	r3, [r3, #28]
 8004482:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004486:	2b00      	cmp	r3, #0
 8004488:	d107      	bne.n	800449a <HAL_I2S_Receive_DMA+0x13a>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	69da      	ldr	r2, [r3, #28]
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004498:	61da      	str	r2, [r3, #28]
  }

  /* Check if the I2S Rx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_RXDMAEN))
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	685b      	ldr	r3, [r3, #4]
 80044a0:	f003 0301 	and.w	r3, r3, #1
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d107      	bne.n	80044b8 <HAL_I2S_Receive_DMA+0x158>
  {
    /* Enable Rx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	685a      	ldr	r2, [r3, #4]
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	f042 0201 	orr.w	r2, r2, #1
 80044b6:	605a      	str	r2, [r3, #4]
  }

  __HAL_UNLOCK(hi2s);
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	2200      	movs	r2, #0
 80044bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  return HAL_OK;
 80044c0:	2300      	movs	r3, #0
}
 80044c2:	4618      	mov	r0, r3
 80044c4:	3718      	adds	r7, #24
 80044c6:	46bd      	mov	sp, r7
 80044c8:	bd80      	pop	{r7, pc}
 80044ca:	bf00      	nop
 80044cc:	08004547 	.word	0x08004547
 80044d0:	08004505 	.word	0x08004505
 80044d4:	08004563 	.word	0x08004563

080044d8 <HAL_I2S_IRQHandler>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
void HAL_I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80044d8:	b580      	push	{r7, lr}
 80044da:	b082      	sub	sp, #8
 80044dc:	af00      	add	r7, sp, #0
 80044de:	6078      	str	r0, [r7, #4]
  /* Call the IrqHandler ISR set during HAL_I2S_INIT */
  hi2s->IrqHandlerISR(hi2s);
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80044e4:	6878      	ldr	r0, [r7, #4]
 80044e6:	4798      	blx	r3
}
 80044e8:	bf00      	nop
 80044ea:	3708      	adds	r7, #8
 80044ec:	46bd      	mov	sp, r7
 80044ee:	bd80      	pop	{r7, pc}

080044f0 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 80044f0:	b480      	push	{r7}
 80044f2:	b083      	sub	sp, #12
 80044f4:	af00      	add	r7, sp, #0
 80044f6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 80044f8:	bf00      	nop
 80044fa:	370c      	adds	r7, #12
 80044fc:	46bd      	mov	sp, r7
 80044fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004502:	4770      	bx	lr

08004504 <I2S_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 8004504:	b580      	push	{r7, lr}
 8004506:	b084      	sub	sp, #16
 8004508:	af00      	add	r7, sp, #0
 800450a:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004510:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	69db      	ldr	r3, [r3, #28]
 8004516:	2b00      	cmp	r3, #0
 8004518:	d10e      	bne.n	8004538 <I2S_DMARxCplt+0x34>
  {
    /* Disable Rx DMA Request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	685a      	ldr	r2, [r3, #4]
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	f022 0201 	bic.w	r2, r2, #1
 8004528:	605a      	str	r2, [r3, #4]
    hi2s->RxXferCount = 0U;
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	2200      	movs	r2, #0
 800452e:	865a      	strh	r2, [r3, #50]	; 0x32
    hi2s->State = HAL_I2S_STATE_READY;
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	2201      	movs	r2, #1
 8004534:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }
  /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->RxCpltCallback(hi2s);
#else
  HAL_I2S_RxCpltCallback(hi2s);
 8004538:	68f8      	ldr	r0, [r7, #12]
 800453a:	f7fd f8e1 	bl	8001700 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 800453e:	bf00      	nop
 8004540:	3710      	adds	r7, #16
 8004542:	46bd      	mov	sp, r7
 8004544:	bd80      	pop	{r7, pc}

08004546 <I2S_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004546:	b580      	push	{r7, lr}
 8004548:	b084      	sub	sp, #16
 800454a:	af00      	add	r7, sp, #0
 800454c:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004552:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->RxHalfCpltCallback(hi2s);
#else
  HAL_I2S_RxHalfCpltCallback(hi2s);
 8004554:	68f8      	ldr	r0, [r7, #12]
 8004556:	f7fd f8c3 	bl	80016e0 <HAL_I2S_RxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 800455a:	bf00      	nop
 800455c:	3710      	adds	r7, #16
 800455e:	46bd      	mov	sp, r7
 8004560:	bd80      	pop	{r7, pc}

08004562 <I2S_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
 8004562:	b580      	push	{r7, lr}
 8004564:	b084      	sub	sp, #16
 8004566:	af00      	add	r7, sp, #0
 8004568:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800456e:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	685a      	ldr	r2, [r3, #4]
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	f022 0203 	bic.w	r2, r2, #3
 800457e:	605a      	str	r2, [r3, #4]
  hi2s->TxXferCount = 0U;
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	2200      	movs	r2, #0
 8004584:	855a      	strh	r2, [r3, #42]	; 0x2a
  hi2s->RxXferCount = 0U;
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	2200      	movs	r2, #0
 800458a:	865a      	strh	r2, [r3, #50]	; 0x32

  hi2s->State = HAL_I2S_STATE_READY;
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	2201      	movs	r2, #1
 8004590:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004598:	f043 0208 	orr.w	r2, r3, #8
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	645a      	str	r2, [r3, #68]	; 0x44
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 80045a0:	68f8      	ldr	r0, [r7, #12]
 80045a2:	f7ff ffa5 	bl	80044f0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 80045a6:	bf00      	nop
 80045a8:	3710      	adds	r7, #16
 80045aa:	46bd      	mov	sp, r7
 80045ac:	bd80      	pop	{r7, pc}

080045ae <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 80045ae:	b580      	push	{r7, lr}
 80045b0:	b082      	sub	sp, #8
 80045b2:	af00      	add	r7, sp, #0
 80045b4:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045ba:	881a      	ldrh	r2, [r3, #0]
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045c6:	1c9a      	adds	r2, r3, #2
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045d0:	b29b      	uxth	r3, r3
 80045d2:	3b01      	subs	r3, #1
 80045d4:	b29a      	uxth	r2, r3
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045de:	b29b      	uxth	r3, r3
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d10e      	bne.n	8004602 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	685a      	ldr	r2, [r3, #4]
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80045f2:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	2201      	movs	r2, #1
 80045f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 80045fc:	6878      	ldr	r0, [r7, #4]
 80045fe:	f7fd f85f 	bl	80016c0 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8004602:	bf00      	nop
 8004604:	3708      	adds	r7, #8
 8004606:	46bd      	mov	sp, r7
 8004608:	bd80      	pop	{r7, pc}

0800460a <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 800460a:	b580      	push	{r7, lr}
 800460c:	b082      	sub	sp, #8
 800460e:	af00      	add	r7, sp, #0
 8004610:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	68da      	ldr	r2, [r3, #12]
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800461c:	b292      	uxth	r2, r2
 800461e:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004624:	1c9a      	adds	r2, r3, #2
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800462e:	b29b      	uxth	r3, r3
 8004630:	3b01      	subs	r3, #1
 8004632:	b29a      	uxth	r2, r3
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800463c:	b29b      	uxth	r3, r3
 800463e:	2b00      	cmp	r3, #0
 8004640:	d10e      	bne.n	8004660 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	685a      	ldr	r2, [r3, #4]
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004650:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	2201      	movs	r2, #1
 8004656:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 800465a:	6878      	ldr	r0, [r7, #4]
 800465c:	f7fd f850 	bl	8001700 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8004660:	bf00      	nop
 8004662:	3708      	adds	r7, #8
 8004664:	46bd      	mov	sp, r7
 8004666:	bd80      	pop	{r7, pc}

08004668 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8004668:	b580      	push	{r7, lr}
 800466a:	b086      	sub	sp, #24
 800466c:	af00      	add	r7, sp, #0
 800466e:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	689b      	ldr	r3, [r3, #8]
 8004676:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800467e:	b2db      	uxtb	r3, r3
 8004680:	2b04      	cmp	r3, #4
 8004682:	d13a      	bne.n	80046fa <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8004684:	697b      	ldr	r3, [r7, #20]
 8004686:	f003 0301 	and.w	r3, r3, #1
 800468a:	2b01      	cmp	r3, #1
 800468c:	d109      	bne.n	80046a2 <I2S_IRQHandler+0x3a>
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	685b      	ldr	r3, [r3, #4]
 8004694:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004698:	2b40      	cmp	r3, #64	; 0x40
 800469a:	d102      	bne.n	80046a2 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 800469c:	6878      	ldr	r0, [r7, #4]
 800469e:	f7ff ffb4 	bl	800460a <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80046a2:	697b      	ldr	r3, [r7, #20]
 80046a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046a8:	2b40      	cmp	r3, #64	; 0x40
 80046aa:	d126      	bne.n	80046fa <I2S_IRQHandler+0x92>
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	685b      	ldr	r3, [r3, #4]
 80046b2:	f003 0320 	and.w	r3, r3, #32
 80046b6:	2b20      	cmp	r3, #32
 80046b8:	d11f      	bne.n	80046fa <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	685a      	ldr	r2, [r3, #4]
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80046c8:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80046ca:	2300      	movs	r3, #0
 80046cc:	613b      	str	r3, [r7, #16]
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	68db      	ldr	r3, [r3, #12]
 80046d4:	613b      	str	r3, [r7, #16]
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	689b      	ldr	r3, [r3, #8]
 80046dc:	613b      	str	r3, [r7, #16]
 80046de:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	2201      	movs	r2, #1
 80046e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046ec:	f043 0202 	orr.w	r2, r3, #2
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80046f4:	6878      	ldr	r0, [r7, #4]
 80046f6:	f7ff fefb 	bl	80044f0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004700:	b2db      	uxtb	r3, r3
 8004702:	2b03      	cmp	r3, #3
 8004704:	d136      	bne.n	8004774 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8004706:	697b      	ldr	r3, [r7, #20]
 8004708:	f003 0302 	and.w	r3, r3, #2
 800470c:	2b02      	cmp	r3, #2
 800470e:	d109      	bne.n	8004724 <I2S_IRQHandler+0xbc>
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	685b      	ldr	r3, [r3, #4]
 8004716:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800471a:	2b80      	cmp	r3, #128	; 0x80
 800471c:	d102      	bne.n	8004724 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 800471e:	6878      	ldr	r0, [r7, #4]
 8004720:	f7ff ff45 	bl	80045ae <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8004724:	697b      	ldr	r3, [r7, #20]
 8004726:	f003 0308 	and.w	r3, r3, #8
 800472a:	2b08      	cmp	r3, #8
 800472c:	d122      	bne.n	8004774 <I2S_IRQHandler+0x10c>
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	685b      	ldr	r3, [r3, #4]
 8004734:	f003 0320 	and.w	r3, r3, #32
 8004738:	2b20      	cmp	r3, #32
 800473a:	d11b      	bne.n	8004774 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	685a      	ldr	r2, [r3, #4]
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800474a:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800474c:	2300      	movs	r3, #0
 800474e:	60fb      	str	r3, [r7, #12]
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	689b      	ldr	r3, [r3, #8]
 8004756:	60fb      	str	r3, [r7, #12]
 8004758:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	2201      	movs	r2, #1
 800475e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004766:	f043 0204 	orr.w	r2, r3, #4
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800476e:	6878      	ldr	r0, [r7, #4]
 8004770:	f7ff febe 	bl	80044f0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004774:	bf00      	nop
 8004776:	3718      	adds	r7, #24
 8004778:	46bd      	mov	sp, r7
 800477a:	bd80      	pop	{r7, pc}

0800477c <I2S_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef I2S_WaitFlagStateUntilTimeout(I2S_HandleTypeDef *hi2s, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout)
{
 800477c:	b580      	push	{r7, lr}
 800477e:	b086      	sub	sp, #24
 8004780:	af00      	add	r7, sp, #0
 8004782:	60f8      	str	r0, [r7, #12]
 8004784:	60b9      	str	r1, [r7, #8]
 8004786:	603b      	str	r3, [r7, #0]
 8004788:	4613      	mov	r3, r2
 800478a:	71fb      	strb	r3, [r7, #7]
  uint32_t tickstart;

  /* Get tick */
  tickstart = HAL_GetTick();
 800478c:	f7fd f9b2 	bl	8001af4 <HAL_GetTick>
 8004790:	6178      	str	r0, [r7, #20]

  /* Wait until flag is set to status*/
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 8004792:	e018      	b.n	80047c6 <I2S_WaitFlagStateUntilTimeout+0x4a>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004794:	683b      	ldr	r3, [r7, #0]
 8004796:	f1b3 3fff 	cmp.w	r3, #4294967295
 800479a:	d014      	beq.n	80047c6 <I2S_WaitFlagStateUntilTimeout+0x4a>
    {
      if (((HAL_GetTick() - tickstart) >= Timeout) || (Timeout == 0U))
 800479c:	f7fd f9aa 	bl	8001af4 <HAL_GetTick>
 80047a0:	4602      	mov	r2, r0
 80047a2:	697b      	ldr	r3, [r7, #20]
 80047a4:	1ad3      	subs	r3, r2, r3
 80047a6:	683a      	ldr	r2, [r7, #0]
 80047a8:	429a      	cmp	r2, r3
 80047aa:	d902      	bls.n	80047b2 <I2S_WaitFlagStateUntilTimeout+0x36>
 80047ac:	683b      	ldr	r3, [r7, #0]
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d109      	bne.n	80047c6 <I2S_WaitFlagStateUntilTimeout+0x4a>
      {
        /* Set the I2S State ready */
        hi2s->State = HAL_I2S_STATE_READY;
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	2201      	movs	r2, #1
 80047b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2s);
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	2200      	movs	r2, #0
 80047be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 80047c2:	2303      	movs	r3, #3
 80047c4:	e00f      	b.n	80047e6 <I2S_WaitFlagStateUntilTimeout+0x6a>
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	689a      	ldr	r2, [r3, #8]
 80047cc:	68bb      	ldr	r3, [r7, #8]
 80047ce:	4013      	ands	r3, r2
 80047d0:	68ba      	ldr	r2, [r7, #8]
 80047d2:	429a      	cmp	r2, r3
 80047d4:	bf0c      	ite	eq
 80047d6:	2301      	moveq	r3, #1
 80047d8:	2300      	movne	r3, #0
 80047da:	b2db      	uxtb	r3, r3
 80047dc:	461a      	mov	r2, r3
 80047de:	79fb      	ldrb	r3, [r7, #7]
 80047e0:	429a      	cmp	r2, r3
 80047e2:	d1d7      	bne.n	8004794 <I2S_WaitFlagStateUntilTimeout+0x18>
      }
    }
  }
  return HAL_OK;
 80047e4:	2300      	movs	r3, #0
}
 80047e6:	4618      	mov	r0, r3
 80047e8:	3718      	adds	r7, #24
 80047ea:	46bd      	mov	sp, r7
 80047ec:	bd80      	pop	{r7, pc}
	...

080047f0 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80047f0:	b580      	push	{r7, lr}
 80047f2:	b088      	sub	sp, #32
 80047f4:	af00      	add	r7, sp, #0
 80047f6:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	689b      	ldr	r3, [r3, #8]
 80047fe:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	4aa2      	ldr	r2, [pc, #648]	; (8004a90 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004806:	4293      	cmp	r3, r2
 8004808:	d101      	bne.n	800480e <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 800480a:	4ba2      	ldr	r3, [pc, #648]	; (8004a94 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800480c:	e001      	b.n	8004812 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 800480e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004812:	689b      	ldr	r3, [r3, #8]
 8004814:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	685b      	ldr	r3, [r3, #4]
 800481c:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	4a9b      	ldr	r2, [pc, #620]	; (8004a90 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004824:	4293      	cmp	r3, r2
 8004826:	d101      	bne.n	800482c <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8004828:	4b9a      	ldr	r3, [pc, #616]	; (8004a94 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800482a:	e001      	b.n	8004830 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 800482c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004830:	685b      	ldr	r3, [r3, #4]
 8004832:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	685b      	ldr	r3, [r3, #4]
 8004838:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800483c:	d004      	beq.n	8004848 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	685b      	ldr	r3, [r3, #4]
 8004842:	2b00      	cmp	r3, #0
 8004844:	f040 8099 	bne.w	800497a <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8004848:	69fb      	ldr	r3, [r7, #28]
 800484a:	f003 0302 	and.w	r3, r3, #2
 800484e:	2b02      	cmp	r3, #2
 8004850:	d107      	bne.n	8004862 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8004852:	697b      	ldr	r3, [r7, #20]
 8004854:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004858:	2b00      	cmp	r3, #0
 800485a:	d002      	beq.n	8004862 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 800485c:	6878      	ldr	r0, [r7, #4]
 800485e:	f000 f925 	bl	8004aac <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8004862:	69bb      	ldr	r3, [r7, #24]
 8004864:	f003 0301 	and.w	r3, r3, #1
 8004868:	2b01      	cmp	r3, #1
 800486a:	d107      	bne.n	800487c <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 800486c:	693b      	ldr	r3, [r7, #16]
 800486e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004872:	2b00      	cmp	r3, #0
 8004874:	d002      	beq.n	800487c <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8004876:	6878      	ldr	r0, [r7, #4]
 8004878:	f000 f9c8 	bl	8004c0c <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 800487c:	69bb      	ldr	r3, [r7, #24]
 800487e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004882:	2b40      	cmp	r3, #64	; 0x40
 8004884:	d13a      	bne.n	80048fc <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8004886:	693b      	ldr	r3, [r7, #16]
 8004888:	f003 0320 	and.w	r3, r3, #32
 800488c:	2b00      	cmp	r3, #0
 800488e:	d035      	beq.n	80048fc <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	4a7e      	ldr	r2, [pc, #504]	; (8004a90 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004896:	4293      	cmp	r3, r2
 8004898:	d101      	bne.n	800489e <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 800489a:	4b7e      	ldr	r3, [pc, #504]	; (8004a94 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800489c:	e001      	b.n	80048a2 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 800489e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80048a2:	685a      	ldr	r2, [r3, #4]
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	4979      	ldr	r1, [pc, #484]	; (8004a90 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80048aa:	428b      	cmp	r3, r1
 80048ac:	d101      	bne.n	80048b2 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 80048ae:	4b79      	ldr	r3, [pc, #484]	; (8004a94 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80048b0:	e001      	b.n	80048b6 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 80048b2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80048b6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80048ba:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	685a      	ldr	r2, [r3, #4]
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80048ca:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80048cc:	2300      	movs	r3, #0
 80048ce:	60fb      	str	r3, [r7, #12]
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	68db      	ldr	r3, [r3, #12]
 80048d6:	60fb      	str	r3, [r7, #12]
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	689b      	ldr	r3, [r3, #8]
 80048de:	60fb      	str	r3, [r7, #12]
 80048e0:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	2201      	movs	r2, #1
 80048e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048ee:	f043 0202 	orr.w	r2, r3, #2
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80048f6:	6878      	ldr	r0, [r7, #4]
 80048f8:	f7ff fdfa 	bl	80044f0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80048fc:	69fb      	ldr	r3, [r7, #28]
 80048fe:	f003 0308 	and.w	r3, r3, #8
 8004902:	2b08      	cmp	r3, #8
 8004904:	f040 80be 	bne.w	8004a84 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 8004908:	697b      	ldr	r3, [r7, #20]
 800490a:	f003 0320 	and.w	r3, r3, #32
 800490e:	2b00      	cmp	r3, #0
 8004910:	f000 80b8 	beq.w	8004a84 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	685a      	ldr	r2, [r3, #4]
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004922:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	4a59      	ldr	r2, [pc, #356]	; (8004a90 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800492a:	4293      	cmp	r3, r2
 800492c:	d101      	bne.n	8004932 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 800492e:	4b59      	ldr	r3, [pc, #356]	; (8004a94 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004930:	e001      	b.n	8004936 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8004932:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004936:	685a      	ldr	r2, [r3, #4]
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	4954      	ldr	r1, [pc, #336]	; (8004a90 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800493e:	428b      	cmp	r3, r1
 8004940:	d101      	bne.n	8004946 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8004942:	4b54      	ldr	r3, [pc, #336]	; (8004a94 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004944:	e001      	b.n	800494a <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8004946:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800494a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800494e:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8004950:	2300      	movs	r3, #0
 8004952:	60bb      	str	r3, [r7, #8]
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	689b      	ldr	r3, [r3, #8]
 800495a:	60bb      	str	r3, [r7, #8]
 800495c:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	2201      	movs	r2, #1
 8004962:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800496a:	f043 0204 	orr.w	r2, r3, #4
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004972:	6878      	ldr	r0, [r7, #4]
 8004974:	f7ff fdbc 	bl	80044f0 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004978:	e084      	b.n	8004a84 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 800497a:	69bb      	ldr	r3, [r7, #24]
 800497c:	f003 0302 	and.w	r3, r3, #2
 8004980:	2b02      	cmp	r3, #2
 8004982:	d107      	bne.n	8004994 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8004984:	693b      	ldr	r3, [r7, #16]
 8004986:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800498a:	2b00      	cmp	r3, #0
 800498c:	d002      	beq.n	8004994 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 800498e:	6878      	ldr	r0, [r7, #4]
 8004990:	f000 f8be 	bl	8004b10 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8004994:	69fb      	ldr	r3, [r7, #28]
 8004996:	f003 0301 	and.w	r3, r3, #1
 800499a:	2b01      	cmp	r3, #1
 800499c:	d107      	bne.n	80049ae <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 800499e:	697b      	ldr	r3, [r7, #20]
 80049a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d002      	beq.n	80049ae <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 80049a8:	6878      	ldr	r0, [r7, #4]
 80049aa:	f000 f8fd 	bl	8004ba8 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80049ae:	69fb      	ldr	r3, [r7, #28]
 80049b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049b4:	2b40      	cmp	r3, #64	; 0x40
 80049b6:	d12f      	bne.n	8004a18 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 80049b8:	697b      	ldr	r3, [r7, #20]
 80049ba:	f003 0320 	and.w	r3, r3, #32
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d02a      	beq.n	8004a18 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	685a      	ldr	r2, [r3, #4]
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80049d0:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	4a2e      	ldr	r2, [pc, #184]	; (8004a90 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80049d8:	4293      	cmp	r3, r2
 80049da:	d101      	bne.n	80049e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 80049dc:	4b2d      	ldr	r3, [pc, #180]	; (8004a94 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80049de:	e001      	b.n	80049e4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 80049e0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80049e4:	685a      	ldr	r2, [r3, #4]
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	4929      	ldr	r1, [pc, #164]	; (8004a90 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80049ec:	428b      	cmp	r3, r1
 80049ee:	d101      	bne.n	80049f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 80049f0:	4b28      	ldr	r3, [pc, #160]	; (8004a94 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80049f2:	e001      	b.n	80049f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 80049f4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80049f8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80049fc:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	2201      	movs	r2, #1
 8004a02:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a0a:	f043 0202 	orr.w	r2, r3, #2
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004a12:	6878      	ldr	r0, [r7, #4]
 8004a14:	f7ff fd6c 	bl	80044f0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8004a18:	69bb      	ldr	r3, [r7, #24]
 8004a1a:	f003 0308 	and.w	r3, r3, #8
 8004a1e:	2b08      	cmp	r3, #8
 8004a20:	d131      	bne.n	8004a86 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 8004a22:	693b      	ldr	r3, [r7, #16]
 8004a24:	f003 0320 	and.w	r3, r3, #32
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d02c      	beq.n	8004a86 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	4a17      	ldr	r2, [pc, #92]	; (8004a90 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004a32:	4293      	cmp	r3, r2
 8004a34:	d101      	bne.n	8004a3a <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8004a36:	4b17      	ldr	r3, [pc, #92]	; (8004a94 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004a38:	e001      	b.n	8004a3e <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8004a3a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004a3e:	685a      	ldr	r2, [r3, #4]
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	4912      	ldr	r1, [pc, #72]	; (8004a90 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004a46:	428b      	cmp	r3, r1
 8004a48:	d101      	bne.n	8004a4e <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 8004a4a:	4b12      	ldr	r3, [pc, #72]	; (8004a94 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004a4c:	e001      	b.n	8004a52 <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 8004a4e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004a52:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004a56:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	685a      	ldr	r2, [r3, #4]
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004a66:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	2201      	movs	r2, #1
 8004a6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a74:	f043 0204 	orr.w	r2, r3, #4
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004a7c:	6878      	ldr	r0, [r7, #4]
 8004a7e:	f7ff fd37 	bl	80044f0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004a82:	e000      	b.n	8004a86 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004a84:	bf00      	nop
}
 8004a86:	bf00      	nop
 8004a88:	3720      	adds	r7, #32
 8004a8a:	46bd      	mov	sp, r7
 8004a8c:	bd80      	pop	{r7, pc}
 8004a8e:	bf00      	nop
 8004a90:	40003800 	.word	0x40003800
 8004a94:	40003400 	.word	0x40003400

08004a98 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004a98:	b480      	push	{r7}
 8004a9a:	b083      	sub	sp, #12
 8004a9c:	af00      	add	r7, sp, #0
 8004a9e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8004aa0:	bf00      	nop
 8004aa2:	370c      	adds	r7, #12
 8004aa4:	46bd      	mov	sp, r7
 8004aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aaa:	4770      	bx	lr

08004aac <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8004aac:	b580      	push	{r7, lr}
 8004aae:	b082      	sub	sp, #8
 8004ab0:	af00      	add	r7, sp, #0
 8004ab2:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ab8:	1c99      	adds	r1, r3, #2
 8004aba:	687a      	ldr	r2, [r7, #4]
 8004abc:	6251      	str	r1, [r2, #36]	; 0x24
 8004abe:	881a      	ldrh	r2, [r3, #0]
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004aca:	b29b      	uxth	r3, r3
 8004acc:	3b01      	subs	r3, #1
 8004ace:	b29a      	uxth	r2, r3
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ad8:	b29b      	uxth	r3, r3
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d113      	bne.n	8004b06 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	685a      	ldr	r2, [r3, #4]
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004aec:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004af2:	b29b      	uxth	r3, r3
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d106      	bne.n	8004b06 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	2201      	movs	r2, #1
 8004afc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004b00:	6878      	ldr	r0, [r7, #4]
 8004b02:	f7ff ffc9 	bl	8004a98 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004b06:	bf00      	nop
 8004b08:	3708      	adds	r7, #8
 8004b0a:	46bd      	mov	sp, r7
 8004b0c:	bd80      	pop	{r7, pc}
	...

08004b10 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8004b10:	b580      	push	{r7, lr}
 8004b12:	b082      	sub	sp, #8
 8004b14:	af00      	add	r7, sp, #0
 8004b16:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b1c:	1c99      	adds	r1, r3, #2
 8004b1e:	687a      	ldr	r2, [r7, #4]
 8004b20:	6251      	str	r1, [r2, #36]	; 0x24
 8004b22:	8819      	ldrh	r1, [r3, #0]
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	4a1d      	ldr	r2, [pc, #116]	; (8004ba0 <I2SEx_TxISR_I2SExt+0x90>)
 8004b2a:	4293      	cmp	r3, r2
 8004b2c:	d101      	bne.n	8004b32 <I2SEx_TxISR_I2SExt+0x22>
 8004b2e:	4b1d      	ldr	r3, [pc, #116]	; (8004ba4 <I2SEx_TxISR_I2SExt+0x94>)
 8004b30:	e001      	b.n	8004b36 <I2SEx_TxISR_I2SExt+0x26>
 8004b32:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004b36:	460a      	mov	r2, r1
 8004b38:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b3e:	b29b      	uxth	r3, r3
 8004b40:	3b01      	subs	r3, #1
 8004b42:	b29a      	uxth	r2, r3
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b4c:	b29b      	uxth	r3, r3
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d121      	bne.n	8004b96 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	4a12      	ldr	r2, [pc, #72]	; (8004ba0 <I2SEx_TxISR_I2SExt+0x90>)
 8004b58:	4293      	cmp	r3, r2
 8004b5a:	d101      	bne.n	8004b60 <I2SEx_TxISR_I2SExt+0x50>
 8004b5c:	4b11      	ldr	r3, [pc, #68]	; (8004ba4 <I2SEx_TxISR_I2SExt+0x94>)
 8004b5e:	e001      	b.n	8004b64 <I2SEx_TxISR_I2SExt+0x54>
 8004b60:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004b64:	685a      	ldr	r2, [r3, #4]
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	490d      	ldr	r1, [pc, #52]	; (8004ba0 <I2SEx_TxISR_I2SExt+0x90>)
 8004b6c:	428b      	cmp	r3, r1
 8004b6e:	d101      	bne.n	8004b74 <I2SEx_TxISR_I2SExt+0x64>
 8004b70:	4b0c      	ldr	r3, [pc, #48]	; (8004ba4 <I2SEx_TxISR_I2SExt+0x94>)
 8004b72:	e001      	b.n	8004b78 <I2SEx_TxISR_I2SExt+0x68>
 8004b74:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004b78:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004b7c:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004b82:	b29b      	uxth	r3, r3
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d106      	bne.n	8004b96 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	2201      	movs	r2, #1
 8004b8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004b90:	6878      	ldr	r0, [r7, #4]
 8004b92:	f7ff ff81 	bl	8004a98 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004b96:	bf00      	nop
 8004b98:	3708      	adds	r7, #8
 8004b9a:	46bd      	mov	sp, r7
 8004b9c:	bd80      	pop	{r7, pc}
 8004b9e:	bf00      	nop
 8004ba0:	40003800 	.word	0x40003800
 8004ba4:	40003400 	.word	0x40003400

08004ba8 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8004ba8:	b580      	push	{r7, lr}
 8004baa:	b082      	sub	sp, #8
 8004bac:	af00      	add	r7, sp, #0
 8004bae:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	68d8      	ldr	r0, [r3, #12]
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bba:	1c99      	adds	r1, r3, #2
 8004bbc:	687a      	ldr	r2, [r7, #4]
 8004bbe:	62d1      	str	r1, [r2, #44]	; 0x2c
 8004bc0:	b282      	uxth	r2, r0
 8004bc2:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004bc8:	b29b      	uxth	r3, r3
 8004bca:	3b01      	subs	r3, #1
 8004bcc:	b29a      	uxth	r2, r3
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004bd6:	b29b      	uxth	r3, r3
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d113      	bne.n	8004c04 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	685a      	ldr	r2, [r3, #4]
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004bea:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004bf0:	b29b      	uxth	r3, r3
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d106      	bne.n	8004c04 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	2201      	movs	r2, #1
 8004bfa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004bfe:	6878      	ldr	r0, [r7, #4]
 8004c00:	f7ff ff4a 	bl	8004a98 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004c04:	bf00      	nop
 8004c06:	3708      	adds	r7, #8
 8004c08:	46bd      	mov	sp, r7
 8004c0a:	bd80      	pop	{r7, pc}

08004c0c <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8004c0c:	b580      	push	{r7, lr}
 8004c0e:	b082      	sub	sp, #8
 8004c10:	af00      	add	r7, sp, #0
 8004c12:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	4a20      	ldr	r2, [pc, #128]	; (8004c9c <I2SEx_RxISR_I2SExt+0x90>)
 8004c1a:	4293      	cmp	r3, r2
 8004c1c:	d101      	bne.n	8004c22 <I2SEx_RxISR_I2SExt+0x16>
 8004c1e:	4b20      	ldr	r3, [pc, #128]	; (8004ca0 <I2SEx_RxISR_I2SExt+0x94>)
 8004c20:	e001      	b.n	8004c26 <I2SEx_RxISR_I2SExt+0x1a>
 8004c22:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004c26:	68d8      	ldr	r0, [r3, #12]
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c2c:	1c99      	adds	r1, r3, #2
 8004c2e:	687a      	ldr	r2, [r7, #4]
 8004c30:	62d1      	str	r1, [r2, #44]	; 0x2c
 8004c32:	b282      	uxth	r2, r0
 8004c34:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004c3a:	b29b      	uxth	r3, r3
 8004c3c:	3b01      	subs	r3, #1
 8004c3e:	b29a      	uxth	r2, r3
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004c48:	b29b      	uxth	r3, r3
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d121      	bne.n	8004c92 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	4a12      	ldr	r2, [pc, #72]	; (8004c9c <I2SEx_RxISR_I2SExt+0x90>)
 8004c54:	4293      	cmp	r3, r2
 8004c56:	d101      	bne.n	8004c5c <I2SEx_RxISR_I2SExt+0x50>
 8004c58:	4b11      	ldr	r3, [pc, #68]	; (8004ca0 <I2SEx_RxISR_I2SExt+0x94>)
 8004c5a:	e001      	b.n	8004c60 <I2SEx_RxISR_I2SExt+0x54>
 8004c5c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004c60:	685a      	ldr	r2, [r3, #4]
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	490d      	ldr	r1, [pc, #52]	; (8004c9c <I2SEx_RxISR_I2SExt+0x90>)
 8004c68:	428b      	cmp	r3, r1
 8004c6a:	d101      	bne.n	8004c70 <I2SEx_RxISR_I2SExt+0x64>
 8004c6c:	4b0c      	ldr	r3, [pc, #48]	; (8004ca0 <I2SEx_RxISR_I2SExt+0x94>)
 8004c6e:	e001      	b.n	8004c74 <I2SEx_RxISR_I2SExt+0x68>
 8004c70:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004c74:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004c78:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c7e:	b29b      	uxth	r3, r3
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d106      	bne.n	8004c92 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	2201      	movs	r2, #1
 8004c88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004c8c:	6878      	ldr	r0, [r7, #4]
 8004c8e:	f7ff ff03 	bl	8004a98 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004c92:	bf00      	nop
 8004c94:	3708      	adds	r7, #8
 8004c96:	46bd      	mov	sp, r7
 8004c98:	bd80      	pop	{r7, pc}
 8004c9a:	bf00      	nop
 8004c9c:	40003800 	.word	0x40003800
 8004ca0:	40003400 	.word	0x40003400

08004ca4 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004ca4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004ca6:	b08f      	sub	sp, #60	; 0x3c
 8004ca8:	af0a      	add	r7, sp, #40	; 0x28
 8004caa:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d101      	bne.n	8004cb6 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004cb2:	2301      	movs	r3, #1
 8004cb4:	e118      	b.n	8004ee8 <HAL_PCD_Init+0x244>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004cbe:	d003      	beq.n	8004cc8 <HAL_PCD_Init+0x24>
 8004cc0:	2187      	movs	r1, #135	; 0x87
 8004cc2:	488b      	ldr	r0, [pc, #556]	; (8004ef0 <HAL_PCD_Init+0x24c>)
 8004cc4:	f7fc fd33 	bl	800172e <assert_failed>

  USBx = hpcd->Instance;
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8004cd4:	b2db      	uxtb	r3, r3
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d106      	bne.n	8004ce8 <HAL_PCD_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	2200      	movs	r2, #0
 8004cde:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004ce2:	6878      	ldr	r0, [r7, #4]
 8004ce4:	f005 fc12 	bl	800a50c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	2203      	movs	r2, #3
 8004cec:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8004cf0:	68bb      	ldr	r3, [r7, #8]
 8004cf2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004cf4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d102      	bne.n	8004d02 <HAL_PCD_Init+0x5e>
  {
    hpcd->Init.dma_enable = 0U;
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	2200      	movs	r2, #0
 8004d00:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	4618      	mov	r0, r3
 8004d08:	f002 fbb5 	bl	8007476 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	603b      	str	r3, [r7, #0]
 8004d12:	687e      	ldr	r6, [r7, #4]
 8004d14:	466d      	mov	r5, sp
 8004d16:	f106 0410 	add.w	r4, r6, #16
 8004d1a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004d1c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004d1e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004d20:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004d22:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004d26:	e885 0003 	stmia.w	r5, {r0, r1}
 8004d2a:	1d33      	adds	r3, r6, #4
 8004d2c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004d2e:	6838      	ldr	r0, [r7, #0]
 8004d30:	f002 fa8c 	bl	800724c <USB_CoreInit>
 8004d34:	4603      	mov	r3, r0
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d005      	beq.n	8004d46 <HAL_PCD_Init+0xa2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	2202      	movs	r2, #2
 8004d3e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8004d42:	2301      	movs	r3, #1
 8004d44:	e0d0      	b.n	8004ee8 <HAL_PCD_Init+0x244>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	2100      	movs	r1, #0
 8004d4c:	4618      	mov	r0, r3
 8004d4e:	f002 fba3 	bl	8007498 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004d52:	2300      	movs	r3, #0
 8004d54:	73fb      	strb	r3, [r7, #15]
 8004d56:	e04a      	b.n	8004dee <HAL_PCD_Init+0x14a>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004d58:	7bfa      	ldrb	r2, [r7, #15]
 8004d5a:	6879      	ldr	r1, [r7, #4]
 8004d5c:	4613      	mov	r3, r2
 8004d5e:	00db      	lsls	r3, r3, #3
 8004d60:	1a9b      	subs	r3, r3, r2
 8004d62:	009b      	lsls	r3, r3, #2
 8004d64:	440b      	add	r3, r1
 8004d66:	333d      	adds	r3, #61	; 0x3d
 8004d68:	2201      	movs	r2, #1
 8004d6a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004d6c:	7bfa      	ldrb	r2, [r7, #15]
 8004d6e:	6879      	ldr	r1, [r7, #4]
 8004d70:	4613      	mov	r3, r2
 8004d72:	00db      	lsls	r3, r3, #3
 8004d74:	1a9b      	subs	r3, r3, r2
 8004d76:	009b      	lsls	r3, r3, #2
 8004d78:	440b      	add	r3, r1
 8004d7a:	333c      	adds	r3, #60	; 0x3c
 8004d7c:	7bfa      	ldrb	r2, [r7, #15]
 8004d7e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8004d80:	7bfa      	ldrb	r2, [r7, #15]
 8004d82:	7bfb      	ldrb	r3, [r7, #15]
 8004d84:	b298      	uxth	r0, r3
 8004d86:	6879      	ldr	r1, [r7, #4]
 8004d88:	4613      	mov	r3, r2
 8004d8a:	00db      	lsls	r3, r3, #3
 8004d8c:	1a9b      	subs	r3, r3, r2
 8004d8e:	009b      	lsls	r3, r3, #2
 8004d90:	440b      	add	r3, r1
 8004d92:	3342      	adds	r3, #66	; 0x42
 8004d94:	4602      	mov	r2, r0
 8004d96:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004d98:	7bfa      	ldrb	r2, [r7, #15]
 8004d9a:	6879      	ldr	r1, [r7, #4]
 8004d9c:	4613      	mov	r3, r2
 8004d9e:	00db      	lsls	r3, r3, #3
 8004da0:	1a9b      	subs	r3, r3, r2
 8004da2:	009b      	lsls	r3, r3, #2
 8004da4:	440b      	add	r3, r1
 8004da6:	333f      	adds	r3, #63	; 0x3f
 8004da8:	2200      	movs	r2, #0
 8004daa:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004dac:	7bfa      	ldrb	r2, [r7, #15]
 8004dae:	6879      	ldr	r1, [r7, #4]
 8004db0:	4613      	mov	r3, r2
 8004db2:	00db      	lsls	r3, r3, #3
 8004db4:	1a9b      	subs	r3, r3, r2
 8004db6:	009b      	lsls	r3, r3, #2
 8004db8:	440b      	add	r3, r1
 8004dba:	3344      	adds	r3, #68	; 0x44
 8004dbc:	2200      	movs	r2, #0
 8004dbe:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004dc0:	7bfa      	ldrb	r2, [r7, #15]
 8004dc2:	6879      	ldr	r1, [r7, #4]
 8004dc4:	4613      	mov	r3, r2
 8004dc6:	00db      	lsls	r3, r3, #3
 8004dc8:	1a9b      	subs	r3, r3, r2
 8004dca:	009b      	lsls	r3, r3, #2
 8004dcc:	440b      	add	r3, r1
 8004dce:	3348      	adds	r3, #72	; 0x48
 8004dd0:	2200      	movs	r2, #0
 8004dd2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004dd4:	7bfa      	ldrb	r2, [r7, #15]
 8004dd6:	6879      	ldr	r1, [r7, #4]
 8004dd8:	4613      	mov	r3, r2
 8004dda:	00db      	lsls	r3, r3, #3
 8004ddc:	1a9b      	subs	r3, r3, r2
 8004dde:	009b      	lsls	r3, r3, #2
 8004de0:	440b      	add	r3, r1
 8004de2:	3350      	adds	r3, #80	; 0x50
 8004de4:	2200      	movs	r2, #0
 8004de6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004de8:	7bfb      	ldrb	r3, [r7, #15]
 8004dea:	3301      	adds	r3, #1
 8004dec:	73fb      	strb	r3, [r7, #15]
 8004dee:	7bfa      	ldrb	r2, [r7, #15]
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	685b      	ldr	r3, [r3, #4]
 8004df4:	429a      	cmp	r2, r3
 8004df6:	d3af      	bcc.n	8004d58 <HAL_PCD_Init+0xb4>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004df8:	2300      	movs	r3, #0
 8004dfa:	73fb      	strb	r3, [r7, #15]
 8004dfc:	e044      	b.n	8004e88 <HAL_PCD_Init+0x1e4>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004dfe:	7bfa      	ldrb	r2, [r7, #15]
 8004e00:	6879      	ldr	r1, [r7, #4]
 8004e02:	4613      	mov	r3, r2
 8004e04:	00db      	lsls	r3, r3, #3
 8004e06:	1a9b      	subs	r3, r3, r2
 8004e08:	009b      	lsls	r3, r3, #2
 8004e0a:	440b      	add	r3, r1
 8004e0c:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8004e10:	2200      	movs	r2, #0
 8004e12:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004e14:	7bfa      	ldrb	r2, [r7, #15]
 8004e16:	6879      	ldr	r1, [r7, #4]
 8004e18:	4613      	mov	r3, r2
 8004e1a:	00db      	lsls	r3, r3, #3
 8004e1c:	1a9b      	subs	r3, r3, r2
 8004e1e:	009b      	lsls	r3, r3, #2
 8004e20:	440b      	add	r3, r1
 8004e22:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8004e26:	7bfa      	ldrb	r2, [r7, #15]
 8004e28:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004e2a:	7bfa      	ldrb	r2, [r7, #15]
 8004e2c:	6879      	ldr	r1, [r7, #4]
 8004e2e:	4613      	mov	r3, r2
 8004e30:	00db      	lsls	r3, r3, #3
 8004e32:	1a9b      	subs	r3, r3, r2
 8004e34:	009b      	lsls	r3, r3, #2
 8004e36:	440b      	add	r3, r1
 8004e38:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8004e3c:	2200      	movs	r2, #0
 8004e3e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004e40:	7bfa      	ldrb	r2, [r7, #15]
 8004e42:	6879      	ldr	r1, [r7, #4]
 8004e44:	4613      	mov	r3, r2
 8004e46:	00db      	lsls	r3, r3, #3
 8004e48:	1a9b      	subs	r3, r3, r2
 8004e4a:	009b      	lsls	r3, r3, #2
 8004e4c:	440b      	add	r3, r1
 8004e4e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8004e52:	2200      	movs	r2, #0
 8004e54:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004e56:	7bfa      	ldrb	r2, [r7, #15]
 8004e58:	6879      	ldr	r1, [r7, #4]
 8004e5a:	4613      	mov	r3, r2
 8004e5c:	00db      	lsls	r3, r3, #3
 8004e5e:	1a9b      	subs	r3, r3, r2
 8004e60:	009b      	lsls	r3, r3, #2
 8004e62:	440b      	add	r3, r1
 8004e64:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8004e68:	2200      	movs	r2, #0
 8004e6a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004e6c:	7bfa      	ldrb	r2, [r7, #15]
 8004e6e:	6879      	ldr	r1, [r7, #4]
 8004e70:	4613      	mov	r3, r2
 8004e72:	00db      	lsls	r3, r3, #3
 8004e74:	1a9b      	subs	r3, r3, r2
 8004e76:	009b      	lsls	r3, r3, #2
 8004e78:	440b      	add	r3, r1
 8004e7a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8004e7e:	2200      	movs	r2, #0
 8004e80:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004e82:	7bfb      	ldrb	r3, [r7, #15]
 8004e84:	3301      	adds	r3, #1
 8004e86:	73fb      	strb	r3, [r7, #15]
 8004e88:	7bfa      	ldrb	r2, [r7, #15]
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	685b      	ldr	r3, [r3, #4]
 8004e8e:	429a      	cmp	r2, r3
 8004e90:	d3b5      	bcc.n	8004dfe <HAL_PCD_Init+0x15a>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	603b      	str	r3, [r7, #0]
 8004e98:	687e      	ldr	r6, [r7, #4]
 8004e9a:	466d      	mov	r5, sp
 8004e9c:	f106 0410 	add.w	r4, r6, #16
 8004ea0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004ea2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004ea4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004ea6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004ea8:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004eac:	e885 0003 	stmia.w	r5, {r0, r1}
 8004eb0:	1d33      	adds	r3, r6, #4
 8004eb2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004eb4:	6838      	ldr	r0, [r7, #0]
 8004eb6:	f002 fb19 	bl	80074ec <USB_DevInit>
 8004eba:	4603      	mov	r3, r0
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d005      	beq.n	8004ecc <HAL_PCD_Init+0x228>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	2202      	movs	r2, #2
 8004ec4:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8004ec8:	2301      	movs	r3, #1
 8004eca:	e00d      	b.n	8004ee8 <HAL_PCD_Init+0x244>
  }

  hpcd->USB_Address = 0U;
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	2200      	movs	r2, #0
 8004ed0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	2201      	movs	r2, #1
 8004ed8:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	4618      	mov	r0, r3
 8004ee2:	f003 fb61 	bl	80085a8 <USB_DevDisconnect>

  return HAL_OK;
 8004ee6:	2300      	movs	r3, #0
}
 8004ee8:	4618      	mov	r0, r3
 8004eea:	3714      	adds	r7, #20
 8004eec:	46bd      	mov	sp, r7
 8004eee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004ef0:	0800d738 	.word	0x0800d738

08004ef4 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8004ef4:	b580      	push	{r7, lr}
 8004ef6:	b084      	sub	sp, #16
 8004ef8:	af00      	add	r7, sp, #0
 8004efa:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8004f08:	2b01      	cmp	r3, #1
 8004f0a:	d101      	bne.n	8004f10 <HAL_PCD_Start+0x1c>
 8004f0c:	2302      	movs	r3, #2
 8004f0e:	e020      	b.n	8004f52 <HAL_PCD_Start+0x5e>
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	2201      	movs	r2, #1
 8004f14:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f1c:	2b01      	cmp	r3, #1
 8004f1e:	d109      	bne.n	8004f34 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8004f24:	2b01      	cmp	r3, #1
 8004f26:	d005      	beq.n	8004f34 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f2c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	4618      	mov	r0, r3
 8004f3a:	f002 fa8b 	bl	8007454 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	4618      	mov	r0, r3
 8004f44:	f003 fb0f 	bl	8008566 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	2200      	movs	r2, #0
 8004f4c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8004f50:	2300      	movs	r3, #0
}
 8004f52:	4618      	mov	r0, r3
 8004f54:	3710      	adds	r7, #16
 8004f56:	46bd      	mov	sp, r7
 8004f58:	bd80      	pop	{r7, pc}

08004f5a <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8004f5a:	b590      	push	{r4, r7, lr}
 8004f5c:	b08d      	sub	sp, #52	; 0x34
 8004f5e:	af00      	add	r7, sp, #0
 8004f60:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f68:	6a3b      	ldr	r3, [r7, #32]
 8004f6a:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	4618      	mov	r0, r3
 8004f72:	f003 fbcd 	bl	8008710 <USB_GetMode>
 8004f76:	4603      	mov	r3, r0
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	f040 839d 	bne.w	80056b8 <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	4618      	mov	r0, r3
 8004f84:	f003 fb31 	bl	80085ea <USB_ReadInterrupts>
 8004f88:	4603      	mov	r3, r0
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	f000 8393 	beq.w	80056b6 <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	4618      	mov	r0, r3
 8004f96:	f003 fb28 	bl	80085ea <USB_ReadInterrupts>
 8004f9a:	4603      	mov	r3, r0
 8004f9c:	f003 0302 	and.w	r3, r3, #2
 8004fa0:	2b02      	cmp	r3, #2
 8004fa2:	d107      	bne.n	8004fb4 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	695a      	ldr	r2, [r3, #20]
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	f002 0202 	and.w	r2, r2, #2
 8004fb2:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	4618      	mov	r0, r3
 8004fba:	f003 fb16 	bl	80085ea <USB_ReadInterrupts>
 8004fbe:	4603      	mov	r3, r0
 8004fc0:	f003 0310 	and.w	r3, r3, #16
 8004fc4:	2b10      	cmp	r3, #16
 8004fc6:	d161      	bne.n	800508c <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	699a      	ldr	r2, [r3, #24]
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	f022 0210 	bic.w	r2, r2, #16
 8004fd6:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8004fd8:	6a3b      	ldr	r3, [r7, #32]
 8004fda:	6a1b      	ldr	r3, [r3, #32]
 8004fdc:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8004fde:	69bb      	ldr	r3, [r7, #24]
 8004fe0:	f003 020f 	and.w	r2, r3, #15
 8004fe4:	4613      	mov	r3, r2
 8004fe6:	00db      	lsls	r3, r3, #3
 8004fe8:	1a9b      	subs	r3, r3, r2
 8004fea:	009b      	lsls	r3, r3, #2
 8004fec:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8004ff0:	687a      	ldr	r2, [r7, #4]
 8004ff2:	4413      	add	r3, r2
 8004ff4:	3304      	adds	r3, #4
 8004ff6:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8004ff8:	69bb      	ldr	r3, [r7, #24]
 8004ffa:	0c5b      	lsrs	r3, r3, #17
 8004ffc:	f003 030f 	and.w	r3, r3, #15
 8005000:	2b02      	cmp	r3, #2
 8005002:	d124      	bne.n	800504e <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8005004:	69ba      	ldr	r2, [r7, #24]
 8005006:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800500a:	4013      	ands	r3, r2
 800500c:	2b00      	cmp	r3, #0
 800500e:	d035      	beq.n	800507c <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8005010:	697b      	ldr	r3, [r7, #20]
 8005012:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8005014:	69bb      	ldr	r3, [r7, #24]
 8005016:	091b      	lsrs	r3, r3, #4
 8005018:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800501a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800501e:	b29b      	uxth	r3, r3
 8005020:	461a      	mov	r2, r3
 8005022:	6a38      	ldr	r0, [r7, #32]
 8005024:	f003 f97c 	bl	8008320 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005028:	697b      	ldr	r3, [r7, #20]
 800502a:	68da      	ldr	r2, [r3, #12]
 800502c:	69bb      	ldr	r3, [r7, #24]
 800502e:	091b      	lsrs	r3, r3, #4
 8005030:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005034:	441a      	add	r2, r3
 8005036:	697b      	ldr	r3, [r7, #20]
 8005038:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800503a:	697b      	ldr	r3, [r7, #20]
 800503c:	699a      	ldr	r2, [r3, #24]
 800503e:	69bb      	ldr	r3, [r7, #24]
 8005040:	091b      	lsrs	r3, r3, #4
 8005042:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005046:	441a      	add	r2, r3
 8005048:	697b      	ldr	r3, [r7, #20]
 800504a:	619a      	str	r2, [r3, #24]
 800504c:	e016      	b.n	800507c <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 800504e:	69bb      	ldr	r3, [r7, #24]
 8005050:	0c5b      	lsrs	r3, r3, #17
 8005052:	f003 030f 	and.w	r3, r3, #15
 8005056:	2b06      	cmp	r3, #6
 8005058:	d110      	bne.n	800507c <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8005060:	2208      	movs	r2, #8
 8005062:	4619      	mov	r1, r3
 8005064:	6a38      	ldr	r0, [r7, #32]
 8005066:	f003 f95b 	bl	8008320 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800506a:	697b      	ldr	r3, [r7, #20]
 800506c:	699a      	ldr	r2, [r3, #24]
 800506e:	69bb      	ldr	r3, [r7, #24]
 8005070:	091b      	lsrs	r3, r3, #4
 8005072:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005076:	441a      	add	r2, r3
 8005078:	697b      	ldr	r3, [r7, #20]
 800507a:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	699a      	ldr	r2, [r3, #24]
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	f042 0210 	orr.w	r2, r2, #16
 800508a:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	4618      	mov	r0, r3
 8005092:	f003 faaa 	bl	80085ea <USB_ReadInterrupts>
 8005096:	4603      	mov	r3, r0
 8005098:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800509c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80050a0:	d16e      	bne.n	8005180 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 80050a2:	2300      	movs	r3, #0
 80050a4:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	4618      	mov	r0, r3
 80050ac:	f003 fab0 	bl	8008610 <USB_ReadDevAllOutEpInterrupt>
 80050b0:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80050b2:	e062      	b.n	800517a <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 80050b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050b6:	f003 0301 	and.w	r3, r3, #1
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d057      	beq.n	800516e <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80050c4:	b2d2      	uxtb	r2, r2
 80050c6:	4611      	mov	r1, r2
 80050c8:	4618      	mov	r0, r3
 80050ca:	f003 fad5 	bl	8008678 <USB_ReadDevOutEPInterrupt>
 80050ce:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80050d0:	693b      	ldr	r3, [r7, #16]
 80050d2:	f003 0301 	and.w	r3, r3, #1
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d00c      	beq.n	80050f4 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80050da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050dc:	015a      	lsls	r2, r3, #5
 80050de:	69fb      	ldr	r3, [r7, #28]
 80050e0:	4413      	add	r3, r2
 80050e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050e6:	461a      	mov	r2, r3
 80050e8:	2301      	movs	r3, #1
 80050ea:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80050ec:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80050ee:	6878      	ldr	r0, [r7, #4]
 80050f0:	f000 fdb0 	bl	8005c54 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80050f4:	693b      	ldr	r3, [r7, #16]
 80050f6:	f003 0308 	and.w	r3, r3, #8
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d00c      	beq.n	8005118 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80050fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005100:	015a      	lsls	r2, r3, #5
 8005102:	69fb      	ldr	r3, [r7, #28]
 8005104:	4413      	add	r3, r2
 8005106:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800510a:	461a      	mov	r2, r3
 800510c:	2308      	movs	r3, #8
 800510e:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8005110:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005112:	6878      	ldr	r0, [r7, #4]
 8005114:	f000 feaa 	bl	8005e6c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8005118:	693b      	ldr	r3, [r7, #16]
 800511a:	f003 0310 	and.w	r3, r3, #16
 800511e:	2b00      	cmp	r3, #0
 8005120:	d008      	beq.n	8005134 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8005122:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005124:	015a      	lsls	r2, r3, #5
 8005126:	69fb      	ldr	r3, [r7, #28]
 8005128:	4413      	add	r3, r2
 800512a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800512e:	461a      	mov	r2, r3
 8005130:	2310      	movs	r3, #16
 8005132:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8005134:	693b      	ldr	r3, [r7, #16]
 8005136:	f003 0320 	and.w	r3, r3, #32
 800513a:	2b00      	cmp	r3, #0
 800513c:	d008      	beq.n	8005150 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800513e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005140:	015a      	lsls	r2, r3, #5
 8005142:	69fb      	ldr	r3, [r7, #28]
 8005144:	4413      	add	r3, r2
 8005146:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800514a:	461a      	mov	r2, r3
 800514c:	2320      	movs	r3, #32
 800514e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8005150:	693b      	ldr	r3, [r7, #16]
 8005152:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005156:	2b00      	cmp	r3, #0
 8005158:	d009      	beq.n	800516e <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800515a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800515c:	015a      	lsls	r2, r3, #5
 800515e:	69fb      	ldr	r3, [r7, #28]
 8005160:	4413      	add	r3, r2
 8005162:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005166:	461a      	mov	r2, r3
 8005168:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800516c:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800516e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005170:	3301      	adds	r3, #1
 8005172:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8005174:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005176:	085b      	lsrs	r3, r3, #1
 8005178:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800517a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800517c:	2b00      	cmp	r3, #0
 800517e:	d199      	bne.n	80050b4 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	4618      	mov	r0, r3
 8005186:	f003 fa30 	bl	80085ea <USB_ReadInterrupts>
 800518a:	4603      	mov	r3, r0
 800518c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005190:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005194:	f040 80c0 	bne.w	8005318 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	4618      	mov	r0, r3
 800519e:	f003 fa51 	bl	8008644 <USB_ReadDevAllInEpInterrupt>
 80051a2:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80051a4:	2300      	movs	r3, #0
 80051a6:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80051a8:	e0b2      	b.n	8005310 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80051aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051ac:	f003 0301 	and.w	r3, r3, #1
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	f000 80a7 	beq.w	8005304 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80051bc:	b2d2      	uxtb	r2, r2
 80051be:	4611      	mov	r1, r2
 80051c0:	4618      	mov	r0, r3
 80051c2:	f003 fa77 	bl	80086b4 <USB_ReadDevInEPInterrupt>
 80051c6:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80051c8:	693b      	ldr	r3, [r7, #16]
 80051ca:	f003 0301 	and.w	r3, r3, #1
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d057      	beq.n	8005282 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80051d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051d4:	f003 030f 	and.w	r3, r3, #15
 80051d8:	2201      	movs	r2, #1
 80051da:	fa02 f303 	lsl.w	r3, r2, r3
 80051de:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80051e0:	69fb      	ldr	r3, [r7, #28]
 80051e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80051e6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	43db      	mvns	r3, r3
 80051ec:	69f9      	ldr	r1, [r7, #28]
 80051ee:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80051f2:	4013      	ands	r3, r2
 80051f4:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80051f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051f8:	015a      	lsls	r2, r3, #5
 80051fa:	69fb      	ldr	r3, [r7, #28]
 80051fc:	4413      	add	r3, r2
 80051fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005202:	461a      	mov	r2, r3
 8005204:	2301      	movs	r3, #1
 8005206:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	691b      	ldr	r3, [r3, #16]
 800520c:	2b01      	cmp	r3, #1
 800520e:	d132      	bne.n	8005276 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8005210:	6879      	ldr	r1, [r7, #4]
 8005212:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005214:	4613      	mov	r3, r2
 8005216:	00db      	lsls	r3, r3, #3
 8005218:	1a9b      	subs	r3, r3, r2
 800521a:	009b      	lsls	r3, r3, #2
 800521c:	440b      	add	r3, r1
 800521e:	3348      	adds	r3, #72	; 0x48
 8005220:	6819      	ldr	r1, [r3, #0]
 8005222:	6878      	ldr	r0, [r7, #4]
 8005224:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005226:	4613      	mov	r3, r2
 8005228:	00db      	lsls	r3, r3, #3
 800522a:	1a9b      	subs	r3, r3, r2
 800522c:	009b      	lsls	r3, r3, #2
 800522e:	4403      	add	r3, r0
 8005230:	3344      	adds	r3, #68	; 0x44
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	4419      	add	r1, r3
 8005236:	6878      	ldr	r0, [r7, #4]
 8005238:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800523a:	4613      	mov	r3, r2
 800523c:	00db      	lsls	r3, r3, #3
 800523e:	1a9b      	subs	r3, r3, r2
 8005240:	009b      	lsls	r3, r3, #2
 8005242:	4403      	add	r3, r0
 8005244:	3348      	adds	r3, #72	; 0x48
 8005246:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8005248:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800524a:	2b00      	cmp	r3, #0
 800524c:	d113      	bne.n	8005276 <HAL_PCD_IRQHandler+0x31c>
 800524e:	6879      	ldr	r1, [r7, #4]
 8005250:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005252:	4613      	mov	r3, r2
 8005254:	00db      	lsls	r3, r3, #3
 8005256:	1a9b      	subs	r3, r3, r2
 8005258:	009b      	lsls	r3, r3, #2
 800525a:	440b      	add	r3, r1
 800525c:	3350      	adds	r3, #80	; 0x50
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	2b00      	cmp	r3, #0
 8005262:	d108      	bne.n	8005276 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	6818      	ldr	r0, [r3, #0]
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800526e:	461a      	mov	r2, r3
 8005270:	2101      	movs	r1, #1
 8005272:	f003 fa7f 	bl	8008774 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8005276:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005278:	b2db      	uxtb	r3, r3
 800527a:	4619      	mov	r1, r3
 800527c:	6878      	ldr	r0, [r7, #4]
 800527e:	f005 f9d4 	bl	800a62a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8005282:	693b      	ldr	r3, [r7, #16]
 8005284:	f003 0308 	and.w	r3, r3, #8
 8005288:	2b00      	cmp	r3, #0
 800528a:	d008      	beq.n	800529e <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800528c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800528e:	015a      	lsls	r2, r3, #5
 8005290:	69fb      	ldr	r3, [r7, #28]
 8005292:	4413      	add	r3, r2
 8005294:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005298:	461a      	mov	r2, r3
 800529a:	2308      	movs	r3, #8
 800529c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800529e:	693b      	ldr	r3, [r7, #16]
 80052a0:	f003 0310 	and.w	r3, r3, #16
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d008      	beq.n	80052ba <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80052a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052aa:	015a      	lsls	r2, r3, #5
 80052ac:	69fb      	ldr	r3, [r7, #28]
 80052ae:	4413      	add	r3, r2
 80052b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052b4:	461a      	mov	r2, r3
 80052b6:	2310      	movs	r3, #16
 80052b8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80052ba:	693b      	ldr	r3, [r7, #16]
 80052bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d008      	beq.n	80052d6 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80052c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052c6:	015a      	lsls	r2, r3, #5
 80052c8:	69fb      	ldr	r3, [r7, #28]
 80052ca:	4413      	add	r3, r2
 80052cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052d0:	461a      	mov	r2, r3
 80052d2:	2340      	movs	r3, #64	; 0x40
 80052d4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80052d6:	693b      	ldr	r3, [r7, #16]
 80052d8:	f003 0302 	and.w	r3, r3, #2
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d008      	beq.n	80052f2 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80052e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052e2:	015a      	lsls	r2, r3, #5
 80052e4:	69fb      	ldr	r3, [r7, #28]
 80052e6:	4413      	add	r3, r2
 80052e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052ec:	461a      	mov	r2, r3
 80052ee:	2302      	movs	r3, #2
 80052f0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80052f2:	693b      	ldr	r3, [r7, #16]
 80052f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d003      	beq.n	8005304 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80052fc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80052fe:	6878      	ldr	r0, [r7, #4]
 8005300:	f000 fc1b 	bl	8005b3a <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8005304:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005306:	3301      	adds	r3, #1
 8005308:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800530a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800530c:	085b      	lsrs	r3, r3, #1
 800530e:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8005310:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005312:	2b00      	cmp	r3, #0
 8005314:	f47f af49 	bne.w	80051aa <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	4618      	mov	r0, r3
 800531e:	f003 f964 	bl	80085ea <USB_ReadInterrupts>
 8005322:	4603      	mov	r3, r0
 8005324:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005328:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800532c:	d122      	bne.n	8005374 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800532e:	69fb      	ldr	r3, [r7, #28]
 8005330:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005334:	685b      	ldr	r3, [r3, #4]
 8005336:	69fa      	ldr	r2, [r7, #28]
 8005338:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800533c:	f023 0301 	bic.w	r3, r3, #1
 8005340:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8005348:	2b01      	cmp	r3, #1
 800534a:	d108      	bne.n	800535e <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	2200      	movs	r2, #0
 8005350:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8005354:	2100      	movs	r1, #0
 8005356:	6878      	ldr	r0, [r7, #4]
 8005358:	f000 fe26 	bl	8005fa8 <HAL_PCDEx_LPM_Callback>
 800535c:	e002      	b.n	8005364 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800535e:	6878      	ldr	r0, [r7, #4]
 8005360:	f005 f9d0 	bl	800a704 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	695a      	ldr	r2, [r3, #20]
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8005372:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	4618      	mov	r0, r3
 800537a:	f003 f936 	bl	80085ea <USB_ReadInterrupts>
 800537e:	4603      	mov	r3, r0
 8005380:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005384:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005388:	d112      	bne.n	80053b0 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800538a:	69fb      	ldr	r3, [r7, #28]
 800538c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005390:	689b      	ldr	r3, [r3, #8]
 8005392:	f003 0301 	and.w	r3, r3, #1
 8005396:	2b01      	cmp	r3, #1
 8005398:	d102      	bne.n	80053a0 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800539a:	6878      	ldr	r0, [r7, #4]
 800539c:	f005 f98c 	bl	800a6b8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	695a      	ldr	r2, [r3, #20]
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80053ae:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	4618      	mov	r0, r3
 80053b6:	f003 f918 	bl	80085ea <USB_ReadInterrupts>
 80053ba:	4603      	mov	r3, r0
 80053bc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80053c0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80053c4:	f040 80c7 	bne.w	8005556 <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80053c8:	69fb      	ldr	r3, [r7, #28]
 80053ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80053ce:	685b      	ldr	r3, [r3, #4]
 80053d0:	69fa      	ldr	r2, [r7, #28]
 80053d2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80053d6:	f023 0301 	bic.w	r3, r3, #1
 80053da:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	2110      	movs	r1, #16
 80053e2:	4618      	mov	r0, r3
 80053e4:	f002 f9e6 	bl	80077b4 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80053e8:	2300      	movs	r3, #0
 80053ea:	62fb      	str	r3, [r7, #44]	; 0x2c
 80053ec:	e056      	b.n	800549c <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80053ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053f0:	015a      	lsls	r2, r3, #5
 80053f2:	69fb      	ldr	r3, [r7, #28]
 80053f4:	4413      	add	r3, r2
 80053f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053fa:	461a      	mov	r2, r3
 80053fc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005400:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005402:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005404:	015a      	lsls	r2, r3, #5
 8005406:	69fb      	ldr	r3, [r7, #28]
 8005408:	4413      	add	r3, r2
 800540a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005412:	0151      	lsls	r1, r2, #5
 8005414:	69fa      	ldr	r2, [r7, #28]
 8005416:	440a      	add	r2, r1
 8005418:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800541c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005420:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8005422:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005424:	015a      	lsls	r2, r3, #5
 8005426:	69fb      	ldr	r3, [r7, #28]
 8005428:	4413      	add	r3, r2
 800542a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005432:	0151      	lsls	r1, r2, #5
 8005434:	69fa      	ldr	r2, [r7, #28]
 8005436:	440a      	add	r2, r1
 8005438:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800543c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005440:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8005442:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005444:	015a      	lsls	r2, r3, #5
 8005446:	69fb      	ldr	r3, [r7, #28]
 8005448:	4413      	add	r3, r2
 800544a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800544e:	461a      	mov	r2, r3
 8005450:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005454:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005456:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005458:	015a      	lsls	r2, r3, #5
 800545a:	69fb      	ldr	r3, [r7, #28]
 800545c:	4413      	add	r3, r2
 800545e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005466:	0151      	lsls	r1, r2, #5
 8005468:	69fa      	ldr	r2, [r7, #28]
 800546a:	440a      	add	r2, r1
 800546c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005470:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005474:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005476:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005478:	015a      	lsls	r2, r3, #5
 800547a:	69fb      	ldr	r3, [r7, #28]
 800547c:	4413      	add	r3, r2
 800547e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005486:	0151      	lsls	r1, r2, #5
 8005488:	69fa      	ldr	r2, [r7, #28]
 800548a:	440a      	add	r2, r1
 800548c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005490:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005494:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005496:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005498:	3301      	adds	r3, #1
 800549a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	685b      	ldr	r3, [r3, #4]
 80054a0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80054a2:	429a      	cmp	r2, r3
 80054a4:	d3a3      	bcc.n	80053ee <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80054a6:	69fb      	ldr	r3, [r7, #28]
 80054a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80054ac:	69db      	ldr	r3, [r3, #28]
 80054ae:	69fa      	ldr	r2, [r7, #28]
 80054b0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80054b4:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80054b8:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d016      	beq.n	80054f0 <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80054c2:	69fb      	ldr	r3, [r7, #28]
 80054c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80054c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80054cc:	69fa      	ldr	r2, [r7, #28]
 80054ce:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80054d2:	f043 030b 	orr.w	r3, r3, #11
 80054d6:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80054da:	69fb      	ldr	r3, [r7, #28]
 80054dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80054e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80054e2:	69fa      	ldr	r2, [r7, #28]
 80054e4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80054e8:	f043 030b 	orr.w	r3, r3, #11
 80054ec:	6453      	str	r3, [r2, #68]	; 0x44
 80054ee:	e015      	b.n	800551c <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80054f0:	69fb      	ldr	r3, [r7, #28]
 80054f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80054f6:	695b      	ldr	r3, [r3, #20]
 80054f8:	69fa      	ldr	r2, [r7, #28]
 80054fa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80054fe:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8005502:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8005506:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8005508:	69fb      	ldr	r3, [r7, #28]
 800550a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800550e:	691b      	ldr	r3, [r3, #16]
 8005510:	69fa      	ldr	r2, [r7, #28]
 8005512:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005516:	f043 030b 	orr.w	r3, r3, #11
 800551a:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800551c:	69fb      	ldr	r3, [r7, #28]
 800551e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	69fa      	ldr	r2, [r7, #28]
 8005526:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800552a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800552e:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	6818      	ldr	r0, [r3, #0]
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	691b      	ldr	r3, [r3, #16]
 8005538:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8005540:	461a      	mov	r2, r3
 8005542:	f003 f917 	bl	8008774 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	695a      	ldr	r2, [r3, #20]
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8005554:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	4618      	mov	r0, r3
 800555c:	f003 f845 	bl	80085ea <USB_ReadInterrupts>
 8005560:	4603      	mov	r3, r0
 8005562:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005566:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800556a:	d124      	bne.n	80055b6 <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	4618      	mov	r0, r3
 8005572:	f003 f8db 	bl	800872c <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	4618      	mov	r0, r3
 800557c:	f002 f97b 	bl	8007876 <USB_GetDevSpeed>
 8005580:	4603      	mov	r3, r0
 8005582:	461a      	mov	r2, r3
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681c      	ldr	r4, [r3, #0]
 800558c:	f001 fa9e 	bl	8006acc <HAL_RCC_GetHCLKFreq>
 8005590:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8005596:	b2db      	uxtb	r3, r3
 8005598:	461a      	mov	r2, r3
 800559a:	4620      	mov	r0, r4
 800559c:	f001 feb8 	bl	8007310 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80055a0:	6878      	ldr	r0, [r7, #4]
 80055a2:	f005 f86a 	bl	800a67a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	695a      	ldr	r2, [r3, #20]
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80055b4:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	4618      	mov	r0, r3
 80055bc:	f003 f815 	bl	80085ea <USB_ReadInterrupts>
 80055c0:	4603      	mov	r3, r0
 80055c2:	f003 0308 	and.w	r3, r3, #8
 80055c6:	2b08      	cmp	r3, #8
 80055c8:	d10a      	bne.n	80055e0 <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80055ca:	6878      	ldr	r0, [r7, #4]
 80055cc:	f005 f847 	bl	800a65e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	695a      	ldr	r2, [r3, #20]
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	f002 0208 	and.w	r2, r2, #8
 80055de:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	4618      	mov	r0, r3
 80055e6:	f003 f800 	bl	80085ea <USB_ReadInterrupts>
 80055ea:	4603      	mov	r3, r0
 80055ec:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80055f0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80055f4:	d10f      	bne.n	8005616 <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80055f6:	2300      	movs	r3, #0
 80055f8:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80055fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055fc:	b2db      	uxtb	r3, r3
 80055fe:	4619      	mov	r1, r3
 8005600:	6878      	ldr	r0, [r7, #4]
 8005602:	f005 f89f 	bl	800a744 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	695a      	ldr	r2, [r3, #20]
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8005614:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	4618      	mov	r0, r3
 800561c:	f002 ffe5 	bl	80085ea <USB_ReadInterrupts>
 8005620:	4603      	mov	r3, r0
 8005622:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005626:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800562a:	d10f      	bne.n	800564c <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 800562c:	2300      	movs	r3, #0
 800562e:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8005630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005632:	b2db      	uxtb	r3, r3
 8005634:	4619      	mov	r1, r3
 8005636:	6878      	ldr	r0, [r7, #4]
 8005638:	f005 f872 	bl	800a720 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	695a      	ldr	r2, [r3, #20]
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800564a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	4618      	mov	r0, r3
 8005652:	f002 ffca 	bl	80085ea <USB_ReadInterrupts>
 8005656:	4603      	mov	r3, r0
 8005658:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800565c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005660:	d10a      	bne.n	8005678 <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8005662:	6878      	ldr	r0, [r7, #4]
 8005664:	f005 f880 	bl	800a768 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	695a      	ldr	r2, [r3, #20]
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8005676:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	4618      	mov	r0, r3
 800567e:	f002 ffb4 	bl	80085ea <USB_ReadInterrupts>
 8005682:	4603      	mov	r3, r0
 8005684:	f003 0304 	and.w	r3, r3, #4
 8005688:	2b04      	cmp	r3, #4
 800568a:	d115      	bne.n	80056b8 <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	685b      	ldr	r3, [r3, #4]
 8005692:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8005694:	69bb      	ldr	r3, [r7, #24]
 8005696:	f003 0304 	and.w	r3, r3, #4
 800569a:	2b00      	cmp	r3, #0
 800569c:	d002      	beq.n	80056a4 <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800569e:	6878      	ldr	r0, [r7, #4]
 80056a0:	f005 f870 	bl	800a784 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	6859      	ldr	r1, [r3, #4]
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	69ba      	ldr	r2, [r7, #24]
 80056b0:	430a      	orrs	r2, r1
 80056b2:	605a      	str	r2, [r3, #4]
 80056b4:	e000      	b.n	80056b8 <HAL_PCD_IRQHandler+0x75e>
      return;
 80056b6:	bf00      	nop
    }
  }
}
 80056b8:	3734      	adds	r7, #52	; 0x34
 80056ba:	46bd      	mov	sp, r7
 80056bc:	bd90      	pop	{r4, r7, pc}

080056be <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80056be:	b580      	push	{r7, lr}
 80056c0:	b082      	sub	sp, #8
 80056c2:	af00      	add	r7, sp, #0
 80056c4:	6078      	str	r0, [r7, #4]
 80056c6:	460b      	mov	r3, r1
 80056c8:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80056d0:	2b01      	cmp	r3, #1
 80056d2:	d101      	bne.n	80056d8 <HAL_PCD_SetAddress+0x1a>
 80056d4:	2302      	movs	r3, #2
 80056d6:	e013      	b.n	8005700 <HAL_PCD_SetAddress+0x42>
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	2201      	movs	r2, #1
 80056dc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	78fa      	ldrb	r2, [r7, #3]
 80056e4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	78fa      	ldrb	r2, [r7, #3]
 80056ee:	4611      	mov	r1, r2
 80056f0:	4618      	mov	r0, r3
 80056f2:	f002 ff12 	bl	800851a <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	2200      	movs	r2, #0
 80056fa:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80056fe:	2300      	movs	r3, #0
}
 8005700:	4618      	mov	r0, r3
 8005702:	3708      	adds	r7, #8
 8005704:	46bd      	mov	sp, r7
 8005706:	bd80      	pop	{r7, pc}

08005708 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8005708:	b580      	push	{r7, lr}
 800570a:	b084      	sub	sp, #16
 800570c:	af00      	add	r7, sp, #0
 800570e:	6078      	str	r0, [r7, #4]
 8005710:	4608      	mov	r0, r1
 8005712:	4611      	mov	r1, r2
 8005714:	461a      	mov	r2, r3
 8005716:	4603      	mov	r3, r0
 8005718:	70fb      	strb	r3, [r7, #3]
 800571a:	460b      	mov	r3, r1
 800571c:	803b      	strh	r3, [r7, #0]
 800571e:	4613      	mov	r3, r2
 8005720:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8005722:	2300      	movs	r3, #0
 8005724:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005726:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800572a:	2b00      	cmp	r3, #0
 800572c:	da0f      	bge.n	800574e <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800572e:	78fb      	ldrb	r3, [r7, #3]
 8005730:	f003 020f 	and.w	r2, r3, #15
 8005734:	4613      	mov	r3, r2
 8005736:	00db      	lsls	r3, r3, #3
 8005738:	1a9b      	subs	r3, r3, r2
 800573a:	009b      	lsls	r3, r3, #2
 800573c:	3338      	adds	r3, #56	; 0x38
 800573e:	687a      	ldr	r2, [r7, #4]
 8005740:	4413      	add	r3, r2
 8005742:	3304      	adds	r3, #4
 8005744:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	2201      	movs	r2, #1
 800574a:	705a      	strb	r2, [r3, #1]
 800574c:	e00f      	b.n	800576e <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800574e:	78fb      	ldrb	r3, [r7, #3]
 8005750:	f003 020f 	and.w	r2, r3, #15
 8005754:	4613      	mov	r3, r2
 8005756:	00db      	lsls	r3, r3, #3
 8005758:	1a9b      	subs	r3, r3, r2
 800575a:	009b      	lsls	r3, r3, #2
 800575c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8005760:	687a      	ldr	r2, [r7, #4]
 8005762:	4413      	add	r3, r2
 8005764:	3304      	adds	r3, #4
 8005766:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	2200      	movs	r2, #0
 800576c:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800576e:	78fb      	ldrb	r3, [r7, #3]
 8005770:	f003 030f 	and.w	r3, r3, #15
 8005774:	b2da      	uxtb	r2, r3
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800577a:	883a      	ldrh	r2, [r7, #0]
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	78ba      	ldrb	r2, [r7, #2]
 8005784:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	785b      	ldrb	r3, [r3, #1]
 800578a:	2b00      	cmp	r3, #0
 800578c:	d004      	beq.n	8005798 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	781b      	ldrb	r3, [r3, #0]
 8005792:	b29a      	uxth	r2, r3
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8005798:	78bb      	ldrb	r3, [r7, #2]
 800579a:	2b02      	cmp	r3, #2
 800579c:	d102      	bne.n	80057a4 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	2200      	movs	r2, #0
 80057a2:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80057aa:	2b01      	cmp	r3, #1
 80057ac:	d101      	bne.n	80057b2 <HAL_PCD_EP_Open+0xaa>
 80057ae:	2302      	movs	r3, #2
 80057b0:	e00e      	b.n	80057d0 <HAL_PCD_EP_Open+0xc8>
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	2201      	movs	r2, #1
 80057b6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	68f9      	ldr	r1, [r7, #12]
 80057c0:	4618      	mov	r0, r3
 80057c2:	f002 f87d 	bl	80078c0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	2200      	movs	r2, #0
 80057ca:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 80057ce:	7afb      	ldrb	r3, [r7, #11]
}
 80057d0:	4618      	mov	r0, r3
 80057d2:	3710      	adds	r7, #16
 80057d4:	46bd      	mov	sp, r7
 80057d6:	bd80      	pop	{r7, pc}

080057d8 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80057d8:	b580      	push	{r7, lr}
 80057da:	b084      	sub	sp, #16
 80057dc:	af00      	add	r7, sp, #0
 80057de:	6078      	str	r0, [r7, #4]
 80057e0:	460b      	mov	r3, r1
 80057e2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80057e4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	da0f      	bge.n	800580c <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80057ec:	78fb      	ldrb	r3, [r7, #3]
 80057ee:	f003 020f 	and.w	r2, r3, #15
 80057f2:	4613      	mov	r3, r2
 80057f4:	00db      	lsls	r3, r3, #3
 80057f6:	1a9b      	subs	r3, r3, r2
 80057f8:	009b      	lsls	r3, r3, #2
 80057fa:	3338      	adds	r3, #56	; 0x38
 80057fc:	687a      	ldr	r2, [r7, #4]
 80057fe:	4413      	add	r3, r2
 8005800:	3304      	adds	r3, #4
 8005802:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	2201      	movs	r2, #1
 8005808:	705a      	strb	r2, [r3, #1]
 800580a:	e00f      	b.n	800582c <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800580c:	78fb      	ldrb	r3, [r7, #3]
 800580e:	f003 020f 	and.w	r2, r3, #15
 8005812:	4613      	mov	r3, r2
 8005814:	00db      	lsls	r3, r3, #3
 8005816:	1a9b      	subs	r3, r3, r2
 8005818:	009b      	lsls	r3, r3, #2
 800581a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800581e:	687a      	ldr	r2, [r7, #4]
 8005820:	4413      	add	r3, r2
 8005822:	3304      	adds	r3, #4
 8005824:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	2200      	movs	r2, #0
 800582a:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800582c:	78fb      	ldrb	r3, [r7, #3]
 800582e:	f003 030f 	and.w	r3, r3, #15
 8005832:	b2da      	uxtb	r2, r3
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800583e:	2b01      	cmp	r3, #1
 8005840:	d101      	bne.n	8005846 <HAL_PCD_EP_Close+0x6e>
 8005842:	2302      	movs	r3, #2
 8005844:	e00e      	b.n	8005864 <HAL_PCD_EP_Close+0x8c>
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	2201      	movs	r2, #1
 800584a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	68f9      	ldr	r1, [r7, #12]
 8005854:	4618      	mov	r0, r3
 8005856:	f002 f8bb 	bl	80079d0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	2200      	movs	r2, #0
 800585e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8005862:	2300      	movs	r3, #0
}
 8005864:	4618      	mov	r0, r3
 8005866:	3710      	adds	r7, #16
 8005868:	46bd      	mov	sp, r7
 800586a:	bd80      	pop	{r7, pc}

0800586c <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800586c:	b580      	push	{r7, lr}
 800586e:	b086      	sub	sp, #24
 8005870:	af00      	add	r7, sp, #0
 8005872:	60f8      	str	r0, [r7, #12]
 8005874:	607a      	str	r2, [r7, #4]
 8005876:	603b      	str	r3, [r7, #0]
 8005878:	460b      	mov	r3, r1
 800587a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800587c:	7afb      	ldrb	r3, [r7, #11]
 800587e:	f003 020f 	and.w	r2, r3, #15
 8005882:	4613      	mov	r3, r2
 8005884:	00db      	lsls	r3, r3, #3
 8005886:	1a9b      	subs	r3, r3, r2
 8005888:	009b      	lsls	r3, r3, #2
 800588a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800588e:	68fa      	ldr	r2, [r7, #12]
 8005890:	4413      	add	r3, r2
 8005892:	3304      	adds	r3, #4
 8005894:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005896:	697b      	ldr	r3, [r7, #20]
 8005898:	687a      	ldr	r2, [r7, #4]
 800589a:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800589c:	697b      	ldr	r3, [r7, #20]
 800589e:	683a      	ldr	r2, [r7, #0]
 80058a0:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80058a2:	697b      	ldr	r3, [r7, #20]
 80058a4:	2200      	movs	r2, #0
 80058a6:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 80058a8:	697b      	ldr	r3, [r7, #20]
 80058aa:	2200      	movs	r2, #0
 80058ac:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80058ae:	7afb      	ldrb	r3, [r7, #11]
 80058b0:	f003 030f 	and.w	r3, r3, #15
 80058b4:	b2da      	uxtb	r2, r3
 80058b6:	697b      	ldr	r3, [r7, #20]
 80058b8:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	691b      	ldr	r3, [r3, #16]
 80058be:	2b01      	cmp	r3, #1
 80058c0:	d102      	bne.n	80058c8 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80058c2:	687a      	ldr	r2, [r7, #4]
 80058c4:	697b      	ldr	r3, [r7, #20]
 80058c6:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80058c8:	7afb      	ldrb	r3, [r7, #11]
 80058ca:	f003 030f 	and.w	r3, r3, #15
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d109      	bne.n	80058e6 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	6818      	ldr	r0, [r3, #0]
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	691b      	ldr	r3, [r3, #16]
 80058da:	b2db      	uxtb	r3, r3
 80058dc:	461a      	mov	r2, r3
 80058de:	6979      	ldr	r1, [r7, #20]
 80058e0:	f002 fb96 	bl	8008010 <USB_EP0StartXfer>
 80058e4:	e008      	b.n	80058f8 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	6818      	ldr	r0, [r3, #0]
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	691b      	ldr	r3, [r3, #16]
 80058ee:	b2db      	uxtb	r3, r3
 80058f0:	461a      	mov	r2, r3
 80058f2:	6979      	ldr	r1, [r7, #20]
 80058f4:	f002 f948 	bl	8007b88 <USB_EPStartXfer>
  }

  return HAL_OK;
 80058f8:	2300      	movs	r3, #0
}
 80058fa:	4618      	mov	r0, r3
 80058fc:	3718      	adds	r7, #24
 80058fe:	46bd      	mov	sp, r7
 8005900:	bd80      	pop	{r7, pc}

08005902 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005902:	b480      	push	{r7}
 8005904:	b083      	sub	sp, #12
 8005906:	af00      	add	r7, sp, #0
 8005908:	6078      	str	r0, [r7, #4]
 800590a:	460b      	mov	r3, r1
 800590c:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800590e:	78fb      	ldrb	r3, [r7, #3]
 8005910:	f003 020f 	and.w	r2, r3, #15
 8005914:	6879      	ldr	r1, [r7, #4]
 8005916:	4613      	mov	r3, r2
 8005918:	00db      	lsls	r3, r3, #3
 800591a:	1a9b      	subs	r3, r3, r2
 800591c:	009b      	lsls	r3, r3, #2
 800591e:	440b      	add	r3, r1
 8005920:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8005924:	681b      	ldr	r3, [r3, #0]
}
 8005926:	4618      	mov	r0, r3
 8005928:	370c      	adds	r7, #12
 800592a:	46bd      	mov	sp, r7
 800592c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005930:	4770      	bx	lr

08005932 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005932:	b580      	push	{r7, lr}
 8005934:	b086      	sub	sp, #24
 8005936:	af00      	add	r7, sp, #0
 8005938:	60f8      	str	r0, [r7, #12]
 800593a:	607a      	str	r2, [r7, #4]
 800593c:	603b      	str	r3, [r7, #0]
 800593e:	460b      	mov	r3, r1
 8005940:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005942:	7afb      	ldrb	r3, [r7, #11]
 8005944:	f003 020f 	and.w	r2, r3, #15
 8005948:	4613      	mov	r3, r2
 800594a:	00db      	lsls	r3, r3, #3
 800594c:	1a9b      	subs	r3, r3, r2
 800594e:	009b      	lsls	r3, r3, #2
 8005950:	3338      	adds	r3, #56	; 0x38
 8005952:	68fa      	ldr	r2, [r7, #12]
 8005954:	4413      	add	r3, r2
 8005956:	3304      	adds	r3, #4
 8005958:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800595a:	697b      	ldr	r3, [r7, #20]
 800595c:	687a      	ldr	r2, [r7, #4]
 800595e:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8005960:	697b      	ldr	r3, [r7, #20]
 8005962:	683a      	ldr	r2, [r7, #0]
 8005964:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8005966:	697b      	ldr	r3, [r7, #20]
 8005968:	2200      	movs	r2, #0
 800596a:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 800596c:	697b      	ldr	r3, [r7, #20]
 800596e:	2201      	movs	r2, #1
 8005970:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005972:	7afb      	ldrb	r3, [r7, #11]
 8005974:	f003 030f 	and.w	r3, r3, #15
 8005978:	b2da      	uxtb	r2, r3
 800597a:	697b      	ldr	r3, [r7, #20]
 800597c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	691b      	ldr	r3, [r3, #16]
 8005982:	2b01      	cmp	r3, #1
 8005984:	d102      	bne.n	800598c <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8005986:	687a      	ldr	r2, [r7, #4]
 8005988:	697b      	ldr	r3, [r7, #20]
 800598a:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800598c:	7afb      	ldrb	r3, [r7, #11]
 800598e:	f003 030f 	and.w	r3, r3, #15
 8005992:	2b00      	cmp	r3, #0
 8005994:	d109      	bne.n	80059aa <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	6818      	ldr	r0, [r3, #0]
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	691b      	ldr	r3, [r3, #16]
 800599e:	b2db      	uxtb	r3, r3
 80059a0:	461a      	mov	r2, r3
 80059a2:	6979      	ldr	r1, [r7, #20]
 80059a4:	f002 fb34 	bl	8008010 <USB_EP0StartXfer>
 80059a8:	e008      	b.n	80059bc <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	6818      	ldr	r0, [r3, #0]
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	691b      	ldr	r3, [r3, #16]
 80059b2:	b2db      	uxtb	r3, r3
 80059b4:	461a      	mov	r2, r3
 80059b6:	6979      	ldr	r1, [r7, #20]
 80059b8:	f002 f8e6 	bl	8007b88 <USB_EPStartXfer>
  }

  return HAL_OK;
 80059bc:	2300      	movs	r3, #0
}
 80059be:	4618      	mov	r0, r3
 80059c0:	3718      	adds	r7, #24
 80059c2:	46bd      	mov	sp, r7
 80059c4:	bd80      	pop	{r7, pc}

080059c6 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80059c6:	b580      	push	{r7, lr}
 80059c8:	b084      	sub	sp, #16
 80059ca:	af00      	add	r7, sp, #0
 80059cc:	6078      	str	r0, [r7, #4]
 80059ce:	460b      	mov	r3, r1
 80059d0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80059d2:	78fb      	ldrb	r3, [r7, #3]
 80059d4:	f003 020f 	and.w	r2, r3, #15
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	685b      	ldr	r3, [r3, #4]
 80059dc:	429a      	cmp	r2, r3
 80059de:	d901      	bls.n	80059e4 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80059e0:	2301      	movs	r3, #1
 80059e2:	e050      	b.n	8005a86 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80059e4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	da0f      	bge.n	8005a0c <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80059ec:	78fb      	ldrb	r3, [r7, #3]
 80059ee:	f003 020f 	and.w	r2, r3, #15
 80059f2:	4613      	mov	r3, r2
 80059f4:	00db      	lsls	r3, r3, #3
 80059f6:	1a9b      	subs	r3, r3, r2
 80059f8:	009b      	lsls	r3, r3, #2
 80059fa:	3338      	adds	r3, #56	; 0x38
 80059fc:	687a      	ldr	r2, [r7, #4]
 80059fe:	4413      	add	r3, r2
 8005a00:	3304      	adds	r3, #4
 8005a02:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	2201      	movs	r2, #1
 8005a08:	705a      	strb	r2, [r3, #1]
 8005a0a:	e00d      	b.n	8005a28 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8005a0c:	78fa      	ldrb	r2, [r7, #3]
 8005a0e:	4613      	mov	r3, r2
 8005a10:	00db      	lsls	r3, r3, #3
 8005a12:	1a9b      	subs	r3, r3, r2
 8005a14:	009b      	lsls	r3, r3, #2
 8005a16:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8005a1a:	687a      	ldr	r2, [r7, #4]
 8005a1c:	4413      	add	r3, r2
 8005a1e:	3304      	adds	r3, #4
 8005a20:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	2200      	movs	r2, #0
 8005a26:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	2201      	movs	r2, #1
 8005a2c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005a2e:	78fb      	ldrb	r3, [r7, #3]
 8005a30:	f003 030f 	and.w	r3, r3, #15
 8005a34:	b2da      	uxtb	r2, r3
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8005a40:	2b01      	cmp	r3, #1
 8005a42:	d101      	bne.n	8005a48 <HAL_PCD_EP_SetStall+0x82>
 8005a44:	2302      	movs	r3, #2
 8005a46:	e01e      	b.n	8005a86 <HAL_PCD_EP_SetStall+0xc0>
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	2201      	movs	r2, #1
 8005a4c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	68f9      	ldr	r1, [r7, #12]
 8005a56:	4618      	mov	r0, r3
 8005a58:	f002 fc8b 	bl	8008372 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005a5c:	78fb      	ldrb	r3, [r7, #3]
 8005a5e:	f003 030f 	and.w	r3, r3, #15
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d10a      	bne.n	8005a7c <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	6818      	ldr	r0, [r3, #0]
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	691b      	ldr	r3, [r3, #16]
 8005a6e:	b2d9      	uxtb	r1, r3
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8005a76:	461a      	mov	r2, r3
 8005a78:	f002 fe7c 	bl	8008774 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	2200      	movs	r2, #0
 8005a80:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8005a84:	2300      	movs	r3, #0
}
 8005a86:	4618      	mov	r0, r3
 8005a88:	3710      	adds	r7, #16
 8005a8a:	46bd      	mov	sp, r7
 8005a8c:	bd80      	pop	{r7, pc}

08005a8e <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005a8e:	b580      	push	{r7, lr}
 8005a90:	b084      	sub	sp, #16
 8005a92:	af00      	add	r7, sp, #0
 8005a94:	6078      	str	r0, [r7, #4]
 8005a96:	460b      	mov	r3, r1
 8005a98:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8005a9a:	78fb      	ldrb	r3, [r7, #3]
 8005a9c:	f003 020f 	and.w	r2, r3, #15
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	685b      	ldr	r3, [r3, #4]
 8005aa4:	429a      	cmp	r2, r3
 8005aa6:	d901      	bls.n	8005aac <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8005aa8:	2301      	movs	r3, #1
 8005aaa:	e042      	b.n	8005b32 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005aac:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	da0f      	bge.n	8005ad4 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005ab4:	78fb      	ldrb	r3, [r7, #3]
 8005ab6:	f003 020f 	and.w	r2, r3, #15
 8005aba:	4613      	mov	r3, r2
 8005abc:	00db      	lsls	r3, r3, #3
 8005abe:	1a9b      	subs	r3, r3, r2
 8005ac0:	009b      	lsls	r3, r3, #2
 8005ac2:	3338      	adds	r3, #56	; 0x38
 8005ac4:	687a      	ldr	r2, [r7, #4]
 8005ac6:	4413      	add	r3, r2
 8005ac8:	3304      	adds	r3, #4
 8005aca:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	2201      	movs	r2, #1
 8005ad0:	705a      	strb	r2, [r3, #1]
 8005ad2:	e00f      	b.n	8005af4 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005ad4:	78fb      	ldrb	r3, [r7, #3]
 8005ad6:	f003 020f 	and.w	r2, r3, #15
 8005ada:	4613      	mov	r3, r2
 8005adc:	00db      	lsls	r3, r3, #3
 8005ade:	1a9b      	subs	r3, r3, r2
 8005ae0:	009b      	lsls	r3, r3, #2
 8005ae2:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8005ae6:	687a      	ldr	r2, [r7, #4]
 8005ae8:	4413      	add	r3, r2
 8005aea:	3304      	adds	r3, #4
 8005aec:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	2200      	movs	r2, #0
 8005af2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	2200      	movs	r2, #0
 8005af8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005afa:	78fb      	ldrb	r3, [r7, #3]
 8005afc:	f003 030f 	and.w	r3, r3, #15
 8005b00:	b2da      	uxtb	r2, r3
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8005b0c:	2b01      	cmp	r3, #1
 8005b0e:	d101      	bne.n	8005b14 <HAL_PCD_EP_ClrStall+0x86>
 8005b10:	2302      	movs	r3, #2
 8005b12:	e00e      	b.n	8005b32 <HAL_PCD_EP_ClrStall+0xa4>
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	2201      	movs	r2, #1
 8005b18:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	68f9      	ldr	r1, [r7, #12]
 8005b22:	4618      	mov	r0, r3
 8005b24:	f002 fc93 	bl	800844e <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	2200      	movs	r2, #0
 8005b2c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8005b30:	2300      	movs	r3, #0
}
 8005b32:	4618      	mov	r0, r3
 8005b34:	3710      	adds	r7, #16
 8005b36:	46bd      	mov	sp, r7
 8005b38:	bd80      	pop	{r7, pc}

08005b3a <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005b3a:	b580      	push	{r7, lr}
 8005b3c:	b08a      	sub	sp, #40	; 0x28
 8005b3e:	af02      	add	r7, sp, #8
 8005b40:	6078      	str	r0, [r7, #4]
 8005b42:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b4a:	697b      	ldr	r3, [r7, #20]
 8005b4c:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8005b4e:	683a      	ldr	r2, [r7, #0]
 8005b50:	4613      	mov	r3, r2
 8005b52:	00db      	lsls	r3, r3, #3
 8005b54:	1a9b      	subs	r3, r3, r2
 8005b56:	009b      	lsls	r3, r3, #2
 8005b58:	3338      	adds	r3, #56	; 0x38
 8005b5a:	687a      	ldr	r2, [r7, #4]
 8005b5c:	4413      	add	r3, r2
 8005b5e:	3304      	adds	r3, #4
 8005b60:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	699a      	ldr	r2, [r3, #24]
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	695b      	ldr	r3, [r3, #20]
 8005b6a:	429a      	cmp	r2, r3
 8005b6c:	d901      	bls.n	8005b72 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8005b6e:	2301      	movs	r3, #1
 8005b70:	e06c      	b.n	8005c4c <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	695a      	ldr	r2, [r3, #20]
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	699b      	ldr	r3, [r3, #24]
 8005b7a:	1ad3      	subs	r3, r2, r3
 8005b7c:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	689b      	ldr	r3, [r3, #8]
 8005b82:	69fa      	ldr	r2, [r7, #28]
 8005b84:	429a      	cmp	r2, r3
 8005b86:	d902      	bls.n	8005b8e <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	689b      	ldr	r3, [r3, #8]
 8005b8c:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8005b8e:	69fb      	ldr	r3, [r7, #28]
 8005b90:	3303      	adds	r3, #3
 8005b92:	089b      	lsrs	r3, r3, #2
 8005b94:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005b96:	e02b      	b.n	8005bf0 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	695a      	ldr	r2, [r3, #20]
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	699b      	ldr	r3, [r3, #24]
 8005ba0:	1ad3      	subs	r3, r2, r3
 8005ba2:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	689b      	ldr	r3, [r3, #8]
 8005ba8:	69fa      	ldr	r2, [r7, #28]
 8005baa:	429a      	cmp	r2, r3
 8005bac:	d902      	bls.n	8005bb4 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	689b      	ldr	r3, [r3, #8]
 8005bb2:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8005bb4:	69fb      	ldr	r3, [r7, #28]
 8005bb6:	3303      	adds	r3, #3
 8005bb8:	089b      	lsrs	r3, r3, #2
 8005bba:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	68d9      	ldr	r1, [r3, #12]
 8005bc0:	683b      	ldr	r3, [r7, #0]
 8005bc2:	b2da      	uxtb	r2, r3
 8005bc4:	69fb      	ldr	r3, [r7, #28]
 8005bc6:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8005bcc:	b2db      	uxtb	r3, r3
 8005bce:	9300      	str	r3, [sp, #0]
 8005bd0:	4603      	mov	r3, r0
 8005bd2:	6978      	ldr	r0, [r7, #20]
 8005bd4:	f002 fb6f 	bl	80082b6 <USB_WritePacket>

    ep->xfer_buff  += len;
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	68da      	ldr	r2, [r3, #12]
 8005bdc:	69fb      	ldr	r3, [r7, #28]
 8005bde:	441a      	add	r2, r3
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	699a      	ldr	r2, [r3, #24]
 8005be8:	69fb      	ldr	r3, [r7, #28]
 8005bea:	441a      	add	r2, r3
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005bf0:	683b      	ldr	r3, [r7, #0]
 8005bf2:	015a      	lsls	r2, r3, #5
 8005bf4:	693b      	ldr	r3, [r7, #16]
 8005bf6:	4413      	add	r3, r2
 8005bf8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005bfc:	699b      	ldr	r3, [r3, #24]
 8005bfe:	b29b      	uxth	r3, r3
 8005c00:	69ba      	ldr	r2, [r7, #24]
 8005c02:	429a      	cmp	r2, r3
 8005c04:	d809      	bhi.n	8005c1a <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	699a      	ldr	r2, [r3, #24]
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005c0e:	429a      	cmp	r2, r3
 8005c10:	d203      	bcs.n	8005c1a <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	695b      	ldr	r3, [r3, #20]
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d1be      	bne.n	8005b98 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	695a      	ldr	r2, [r3, #20]
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	699b      	ldr	r3, [r3, #24]
 8005c22:	429a      	cmp	r2, r3
 8005c24:	d811      	bhi.n	8005c4a <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8005c26:	683b      	ldr	r3, [r7, #0]
 8005c28:	f003 030f 	and.w	r3, r3, #15
 8005c2c:	2201      	movs	r2, #1
 8005c2e:	fa02 f303 	lsl.w	r3, r2, r3
 8005c32:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8005c34:	693b      	ldr	r3, [r7, #16]
 8005c36:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c3a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005c3c:	68bb      	ldr	r3, [r7, #8]
 8005c3e:	43db      	mvns	r3, r3
 8005c40:	6939      	ldr	r1, [r7, #16]
 8005c42:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005c46:	4013      	ands	r3, r2
 8005c48:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8005c4a:	2300      	movs	r3, #0
}
 8005c4c:	4618      	mov	r0, r3
 8005c4e:	3720      	adds	r7, #32
 8005c50:	46bd      	mov	sp, r7
 8005c52:	bd80      	pop	{r7, pc}

08005c54 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005c54:	b580      	push	{r7, lr}
 8005c56:	b086      	sub	sp, #24
 8005c58:	af00      	add	r7, sp, #0
 8005c5a:	6078      	str	r0, [r7, #4]
 8005c5c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c64:	697b      	ldr	r3, [r7, #20]
 8005c66:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005c68:	697b      	ldr	r3, [r7, #20]
 8005c6a:	333c      	adds	r3, #60	; 0x3c
 8005c6c:	3304      	adds	r3, #4
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8005c72:	683b      	ldr	r3, [r7, #0]
 8005c74:	015a      	lsls	r2, r3, #5
 8005c76:	693b      	ldr	r3, [r7, #16]
 8005c78:	4413      	add	r3, r2
 8005c7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c7e:	689b      	ldr	r3, [r3, #8]
 8005c80:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	691b      	ldr	r3, [r3, #16]
 8005c86:	2b01      	cmp	r3, #1
 8005c88:	f040 80a0 	bne.w	8005dcc <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8005c8c:	68bb      	ldr	r3, [r7, #8]
 8005c8e:	f003 0308 	and.w	r3, r3, #8
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d015      	beq.n	8005cc2 <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	4a72      	ldr	r2, [pc, #456]	; (8005e64 <PCD_EP_OutXfrComplete_int+0x210>)
 8005c9a:	4293      	cmp	r3, r2
 8005c9c:	f240 80dd 	bls.w	8005e5a <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005ca0:	68bb      	ldr	r3, [r7, #8]
 8005ca2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	f000 80d7 	beq.w	8005e5a <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005cac:	683b      	ldr	r3, [r7, #0]
 8005cae:	015a      	lsls	r2, r3, #5
 8005cb0:	693b      	ldr	r3, [r7, #16]
 8005cb2:	4413      	add	r3, r2
 8005cb4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005cb8:	461a      	mov	r2, r3
 8005cba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005cbe:	6093      	str	r3, [r2, #8]
 8005cc0:	e0cb      	b.n	8005e5a <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8005cc2:	68bb      	ldr	r3, [r7, #8]
 8005cc4:	f003 0320 	and.w	r3, r3, #32
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d009      	beq.n	8005ce0 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005ccc:	683b      	ldr	r3, [r7, #0]
 8005cce:	015a      	lsls	r2, r3, #5
 8005cd0:	693b      	ldr	r3, [r7, #16]
 8005cd2:	4413      	add	r3, r2
 8005cd4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005cd8:	461a      	mov	r2, r3
 8005cda:	2320      	movs	r3, #32
 8005cdc:	6093      	str	r3, [r2, #8]
 8005cde:	e0bc      	b.n	8005e5a <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8005ce0:	68bb      	ldr	r3, [r7, #8]
 8005ce2:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	f040 80b7 	bne.w	8005e5a <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	4a5d      	ldr	r2, [pc, #372]	; (8005e64 <PCD_EP_OutXfrComplete_int+0x210>)
 8005cf0:	4293      	cmp	r3, r2
 8005cf2:	d90f      	bls.n	8005d14 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005cf4:	68bb      	ldr	r3, [r7, #8]
 8005cf6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d00a      	beq.n	8005d14 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005cfe:	683b      	ldr	r3, [r7, #0]
 8005d00:	015a      	lsls	r2, r3, #5
 8005d02:	693b      	ldr	r3, [r7, #16]
 8005d04:	4413      	add	r3, r2
 8005d06:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d0a:	461a      	mov	r2, r3
 8005d0c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005d10:	6093      	str	r3, [r2, #8]
 8005d12:	e0a2      	b.n	8005e5a <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8005d14:	6879      	ldr	r1, [r7, #4]
 8005d16:	683a      	ldr	r2, [r7, #0]
 8005d18:	4613      	mov	r3, r2
 8005d1a:	00db      	lsls	r3, r3, #3
 8005d1c:	1a9b      	subs	r3, r3, r2
 8005d1e:	009b      	lsls	r3, r3, #2
 8005d20:	440b      	add	r3, r1
 8005d22:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8005d26:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8005d28:	683b      	ldr	r3, [r7, #0]
 8005d2a:	0159      	lsls	r1, r3, #5
 8005d2c:	693b      	ldr	r3, [r7, #16]
 8005d2e:	440b      	add	r3, r1
 8005d30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d34:	691b      	ldr	r3, [r3, #16]
 8005d36:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8005d3a:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8005d3c:	6878      	ldr	r0, [r7, #4]
 8005d3e:	683a      	ldr	r2, [r7, #0]
 8005d40:	4613      	mov	r3, r2
 8005d42:	00db      	lsls	r3, r3, #3
 8005d44:	1a9b      	subs	r3, r3, r2
 8005d46:	009b      	lsls	r3, r3, #2
 8005d48:	4403      	add	r3, r0
 8005d4a:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8005d4e:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8005d50:	6879      	ldr	r1, [r7, #4]
 8005d52:	683a      	ldr	r2, [r7, #0]
 8005d54:	4613      	mov	r3, r2
 8005d56:	00db      	lsls	r3, r3, #3
 8005d58:	1a9b      	subs	r3, r3, r2
 8005d5a:	009b      	lsls	r3, r3, #2
 8005d5c:	440b      	add	r3, r1
 8005d5e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8005d62:	6819      	ldr	r1, [r3, #0]
 8005d64:	6878      	ldr	r0, [r7, #4]
 8005d66:	683a      	ldr	r2, [r7, #0]
 8005d68:	4613      	mov	r3, r2
 8005d6a:	00db      	lsls	r3, r3, #3
 8005d6c:	1a9b      	subs	r3, r3, r2
 8005d6e:	009b      	lsls	r3, r3, #2
 8005d70:	4403      	add	r3, r0
 8005d72:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	4419      	add	r1, r3
 8005d7a:	6878      	ldr	r0, [r7, #4]
 8005d7c:	683a      	ldr	r2, [r7, #0]
 8005d7e:	4613      	mov	r3, r2
 8005d80:	00db      	lsls	r3, r3, #3
 8005d82:	1a9b      	subs	r3, r3, r2
 8005d84:	009b      	lsls	r3, r3, #2
 8005d86:	4403      	add	r3, r0
 8005d88:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8005d8c:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8005d8e:	683b      	ldr	r3, [r7, #0]
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d114      	bne.n	8005dbe <PCD_EP_OutXfrComplete_int+0x16a>
 8005d94:	6879      	ldr	r1, [r7, #4]
 8005d96:	683a      	ldr	r2, [r7, #0]
 8005d98:	4613      	mov	r3, r2
 8005d9a:	00db      	lsls	r3, r3, #3
 8005d9c:	1a9b      	subs	r3, r3, r2
 8005d9e:	009b      	lsls	r3, r3, #2
 8005da0:	440b      	add	r3, r1
 8005da2:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d108      	bne.n	8005dbe <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	6818      	ldr	r0, [r3, #0]
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8005db6:	461a      	mov	r2, r3
 8005db8:	2101      	movs	r1, #1
 8005dba:	f002 fcdb 	bl	8008774 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005dbe:	683b      	ldr	r3, [r7, #0]
 8005dc0:	b2db      	uxtb	r3, r3
 8005dc2:	4619      	mov	r1, r3
 8005dc4:	6878      	ldr	r0, [r7, #4]
 8005dc6:	f004 fc15 	bl	800a5f4 <HAL_PCD_DataOutStageCallback>
 8005dca:	e046      	b.n	8005e5a <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	4a26      	ldr	r2, [pc, #152]	; (8005e68 <PCD_EP_OutXfrComplete_int+0x214>)
 8005dd0:	4293      	cmp	r3, r2
 8005dd2:	d124      	bne.n	8005e1e <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8005dd4:	68bb      	ldr	r3, [r7, #8]
 8005dd6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d00a      	beq.n	8005df4 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005dde:	683b      	ldr	r3, [r7, #0]
 8005de0:	015a      	lsls	r2, r3, #5
 8005de2:	693b      	ldr	r3, [r7, #16]
 8005de4:	4413      	add	r3, r2
 8005de6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005dea:	461a      	mov	r2, r3
 8005dec:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005df0:	6093      	str	r3, [r2, #8]
 8005df2:	e032      	b.n	8005e5a <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8005df4:	68bb      	ldr	r3, [r7, #8]
 8005df6:	f003 0320 	and.w	r3, r3, #32
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d008      	beq.n	8005e10 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005dfe:	683b      	ldr	r3, [r7, #0]
 8005e00:	015a      	lsls	r2, r3, #5
 8005e02:	693b      	ldr	r3, [r7, #16]
 8005e04:	4413      	add	r3, r2
 8005e06:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e0a:	461a      	mov	r2, r3
 8005e0c:	2320      	movs	r3, #32
 8005e0e:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005e10:	683b      	ldr	r3, [r7, #0]
 8005e12:	b2db      	uxtb	r3, r3
 8005e14:	4619      	mov	r1, r3
 8005e16:	6878      	ldr	r0, [r7, #4]
 8005e18:	f004 fbec 	bl	800a5f4 <HAL_PCD_DataOutStageCallback>
 8005e1c:	e01d      	b.n	8005e5a <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8005e1e:	683b      	ldr	r3, [r7, #0]
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d114      	bne.n	8005e4e <PCD_EP_OutXfrComplete_int+0x1fa>
 8005e24:	6879      	ldr	r1, [r7, #4]
 8005e26:	683a      	ldr	r2, [r7, #0]
 8005e28:	4613      	mov	r3, r2
 8005e2a:	00db      	lsls	r3, r3, #3
 8005e2c:	1a9b      	subs	r3, r3, r2
 8005e2e:	009b      	lsls	r3, r3, #2
 8005e30:	440b      	add	r3, r1
 8005e32:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d108      	bne.n	8005e4e <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	6818      	ldr	r0, [r3, #0]
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8005e46:	461a      	mov	r2, r3
 8005e48:	2100      	movs	r1, #0
 8005e4a:	f002 fc93 	bl	8008774 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005e4e:	683b      	ldr	r3, [r7, #0]
 8005e50:	b2db      	uxtb	r3, r3
 8005e52:	4619      	mov	r1, r3
 8005e54:	6878      	ldr	r0, [r7, #4]
 8005e56:	f004 fbcd 	bl	800a5f4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8005e5a:	2300      	movs	r3, #0
}
 8005e5c:	4618      	mov	r0, r3
 8005e5e:	3718      	adds	r7, #24
 8005e60:	46bd      	mov	sp, r7
 8005e62:	bd80      	pop	{r7, pc}
 8005e64:	4f54300a 	.word	0x4f54300a
 8005e68:	4f54310a 	.word	0x4f54310a

08005e6c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005e6c:	b580      	push	{r7, lr}
 8005e6e:	b086      	sub	sp, #24
 8005e70:	af00      	add	r7, sp, #0
 8005e72:	6078      	str	r0, [r7, #4]
 8005e74:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e7c:	697b      	ldr	r3, [r7, #20]
 8005e7e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005e80:	697b      	ldr	r3, [r7, #20]
 8005e82:	333c      	adds	r3, #60	; 0x3c
 8005e84:	3304      	adds	r3, #4
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8005e8a:	683b      	ldr	r3, [r7, #0]
 8005e8c:	015a      	lsls	r2, r3, #5
 8005e8e:	693b      	ldr	r3, [r7, #16]
 8005e90:	4413      	add	r3, r2
 8005e92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e96:	689b      	ldr	r3, [r3, #8]
 8005e98:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	4a15      	ldr	r2, [pc, #84]	; (8005ef4 <PCD_EP_OutSetupPacket_int+0x88>)
 8005e9e:	4293      	cmp	r3, r2
 8005ea0:	d90e      	bls.n	8005ec0 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005ea2:	68bb      	ldr	r3, [r7, #8]
 8005ea4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d009      	beq.n	8005ec0 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005eac:	683b      	ldr	r3, [r7, #0]
 8005eae:	015a      	lsls	r2, r3, #5
 8005eb0:	693b      	ldr	r3, [r7, #16]
 8005eb2:	4413      	add	r3, r2
 8005eb4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005eb8:	461a      	mov	r2, r3
 8005eba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005ebe:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8005ec0:	6878      	ldr	r0, [r7, #4]
 8005ec2:	f004 fb85 	bl	800a5d0 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	4a0a      	ldr	r2, [pc, #40]	; (8005ef4 <PCD_EP_OutSetupPacket_int+0x88>)
 8005eca:	4293      	cmp	r3, r2
 8005ecc:	d90c      	bls.n	8005ee8 <PCD_EP_OutSetupPacket_int+0x7c>
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	691b      	ldr	r3, [r3, #16]
 8005ed2:	2b01      	cmp	r3, #1
 8005ed4:	d108      	bne.n	8005ee8 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	6818      	ldr	r0, [r3, #0]
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8005ee0:	461a      	mov	r2, r3
 8005ee2:	2101      	movs	r1, #1
 8005ee4:	f002 fc46 	bl	8008774 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8005ee8:	2300      	movs	r3, #0
}
 8005eea:	4618      	mov	r0, r3
 8005eec:	3718      	adds	r7, #24
 8005eee:	46bd      	mov	sp, r7
 8005ef0:	bd80      	pop	{r7, pc}
 8005ef2:	bf00      	nop
 8005ef4:	4f54300a 	.word	0x4f54300a

08005ef8 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8005ef8:	b480      	push	{r7}
 8005efa:	b085      	sub	sp, #20
 8005efc:	af00      	add	r7, sp, #0
 8005efe:	6078      	str	r0, [r7, #4]
 8005f00:	460b      	mov	r3, r1
 8005f02:	70fb      	strb	r3, [r7, #3]
 8005f04:	4613      	mov	r3, r2
 8005f06:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f0e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8005f10:	78fb      	ldrb	r3, [r7, #3]
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d107      	bne.n	8005f26 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8005f16:	883b      	ldrh	r3, [r7, #0]
 8005f18:	0419      	lsls	r1, r3, #16
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	68ba      	ldr	r2, [r7, #8]
 8005f20:	430a      	orrs	r2, r1
 8005f22:	629a      	str	r2, [r3, #40]	; 0x28
 8005f24:	e028      	b.n	8005f78 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f2c:	0c1b      	lsrs	r3, r3, #16
 8005f2e:	68ba      	ldr	r2, [r7, #8]
 8005f30:	4413      	add	r3, r2
 8005f32:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8005f34:	2300      	movs	r3, #0
 8005f36:	73fb      	strb	r3, [r7, #15]
 8005f38:	e00d      	b.n	8005f56 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	681a      	ldr	r2, [r3, #0]
 8005f3e:	7bfb      	ldrb	r3, [r7, #15]
 8005f40:	3340      	adds	r3, #64	; 0x40
 8005f42:	009b      	lsls	r3, r3, #2
 8005f44:	4413      	add	r3, r2
 8005f46:	685b      	ldr	r3, [r3, #4]
 8005f48:	0c1b      	lsrs	r3, r3, #16
 8005f4a:	68ba      	ldr	r2, [r7, #8]
 8005f4c:	4413      	add	r3, r2
 8005f4e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8005f50:	7bfb      	ldrb	r3, [r7, #15]
 8005f52:	3301      	adds	r3, #1
 8005f54:	73fb      	strb	r3, [r7, #15]
 8005f56:	7bfa      	ldrb	r2, [r7, #15]
 8005f58:	78fb      	ldrb	r3, [r7, #3]
 8005f5a:	3b01      	subs	r3, #1
 8005f5c:	429a      	cmp	r2, r3
 8005f5e:	d3ec      	bcc.n	8005f3a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8005f60:	883b      	ldrh	r3, [r7, #0]
 8005f62:	0418      	lsls	r0, r3, #16
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	6819      	ldr	r1, [r3, #0]
 8005f68:	78fb      	ldrb	r3, [r7, #3]
 8005f6a:	3b01      	subs	r3, #1
 8005f6c:	68ba      	ldr	r2, [r7, #8]
 8005f6e:	4302      	orrs	r2, r0
 8005f70:	3340      	adds	r3, #64	; 0x40
 8005f72:	009b      	lsls	r3, r3, #2
 8005f74:	440b      	add	r3, r1
 8005f76:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8005f78:	2300      	movs	r3, #0
}
 8005f7a:	4618      	mov	r0, r3
 8005f7c:	3714      	adds	r7, #20
 8005f7e:	46bd      	mov	sp, r7
 8005f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f84:	4770      	bx	lr

08005f86 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8005f86:	b480      	push	{r7}
 8005f88:	b083      	sub	sp, #12
 8005f8a:	af00      	add	r7, sp, #0
 8005f8c:	6078      	str	r0, [r7, #4]
 8005f8e:	460b      	mov	r3, r1
 8005f90:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	887a      	ldrh	r2, [r7, #2]
 8005f98:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8005f9a:	2300      	movs	r3, #0
}
 8005f9c:	4618      	mov	r0, r3
 8005f9e:	370c      	adds	r7, #12
 8005fa0:	46bd      	mov	sp, r7
 8005fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa6:	4770      	bx	lr

08005fa8 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8005fa8:	b480      	push	{r7}
 8005faa:	b083      	sub	sp, #12
 8005fac:	af00      	add	r7, sp, #0
 8005fae:	6078      	str	r0, [r7, #4]
 8005fb0:	460b      	mov	r3, r1
 8005fb2:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8005fb4:	bf00      	nop
 8005fb6:	370c      	adds	r7, #12
 8005fb8:	46bd      	mov	sp, r7
 8005fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fbe:	4770      	bx	lr

08005fc0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005fc0:	b580      	push	{r7, lr}
 8005fc2:	b086      	sub	sp, #24
 8005fc4:	af00      	add	r7, sp, #0
 8005fc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d101      	bne.n	8005fd2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005fce:	2301      	movs	r3, #1
 8005fd0:	e30d      	b.n	80065ee <HAL_RCC_OscConfig+0x62e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	2b0f      	cmp	r3, #15
 8005fd8:	d903      	bls.n	8005fe2 <HAL_RCC_OscConfig+0x22>
 8005fda:	21e8      	movs	r1, #232	; 0xe8
 8005fdc:	48a3      	ldr	r0, [pc, #652]	; (800626c <HAL_RCC_OscConfig+0x2ac>)
 8005fde:	f7fb fba6 	bl	800172e <assert_failed>
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	f003 0301 	and.w	r3, r3, #1
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	f000 8088 	beq.w	8006100 <HAL_RCC_OscConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	685b      	ldr	r3, [r3, #4]
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d00d      	beq.n	8006014 <HAL_RCC_OscConfig+0x54>
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	685b      	ldr	r3, [r3, #4]
 8005ffc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006000:	d008      	beq.n	8006014 <HAL_RCC_OscConfig+0x54>
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	685b      	ldr	r3, [r3, #4]
 8006006:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800600a:	d003      	beq.n	8006014 <HAL_RCC_OscConfig+0x54>
 800600c:	21ed      	movs	r1, #237	; 0xed
 800600e:	4897      	ldr	r0, [pc, #604]	; (800626c <HAL_RCC_OscConfig+0x2ac>)
 8006010:	f7fb fb8d 	bl	800172e <assert_failed>
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006014:	4b96      	ldr	r3, [pc, #600]	; (8006270 <HAL_RCC_OscConfig+0x2b0>)
 8006016:	689b      	ldr	r3, [r3, #8]
 8006018:	f003 030c 	and.w	r3, r3, #12
 800601c:	2b04      	cmp	r3, #4
 800601e:	d00c      	beq.n	800603a <HAL_RCC_OscConfig+0x7a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006020:	4b93      	ldr	r3, [pc, #588]	; (8006270 <HAL_RCC_OscConfig+0x2b0>)
 8006022:	689b      	ldr	r3, [r3, #8]
 8006024:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006028:	2b08      	cmp	r3, #8
 800602a:	d112      	bne.n	8006052 <HAL_RCC_OscConfig+0x92>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800602c:	4b90      	ldr	r3, [pc, #576]	; (8006270 <HAL_RCC_OscConfig+0x2b0>)
 800602e:	685b      	ldr	r3, [r3, #4]
 8006030:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006034:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006038:	d10b      	bne.n	8006052 <HAL_RCC_OscConfig+0x92>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800603a:	4b8d      	ldr	r3, [pc, #564]	; (8006270 <HAL_RCC_OscConfig+0x2b0>)
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006042:	2b00      	cmp	r3, #0
 8006044:	d05b      	beq.n	80060fe <HAL_RCC_OscConfig+0x13e>
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	685b      	ldr	r3, [r3, #4]
 800604a:	2b00      	cmp	r3, #0
 800604c:	d157      	bne.n	80060fe <HAL_RCC_OscConfig+0x13e>
      {
        return HAL_ERROR;
 800604e:	2301      	movs	r3, #1
 8006050:	e2cd      	b.n	80065ee <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	685b      	ldr	r3, [r3, #4]
 8006056:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800605a:	d106      	bne.n	800606a <HAL_RCC_OscConfig+0xaa>
 800605c:	4b84      	ldr	r3, [pc, #528]	; (8006270 <HAL_RCC_OscConfig+0x2b0>)
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	4a83      	ldr	r2, [pc, #524]	; (8006270 <HAL_RCC_OscConfig+0x2b0>)
 8006062:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006066:	6013      	str	r3, [r2, #0]
 8006068:	e01d      	b.n	80060a6 <HAL_RCC_OscConfig+0xe6>
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	685b      	ldr	r3, [r3, #4]
 800606e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006072:	d10c      	bne.n	800608e <HAL_RCC_OscConfig+0xce>
 8006074:	4b7e      	ldr	r3, [pc, #504]	; (8006270 <HAL_RCC_OscConfig+0x2b0>)
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	4a7d      	ldr	r2, [pc, #500]	; (8006270 <HAL_RCC_OscConfig+0x2b0>)
 800607a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800607e:	6013      	str	r3, [r2, #0]
 8006080:	4b7b      	ldr	r3, [pc, #492]	; (8006270 <HAL_RCC_OscConfig+0x2b0>)
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	4a7a      	ldr	r2, [pc, #488]	; (8006270 <HAL_RCC_OscConfig+0x2b0>)
 8006086:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800608a:	6013      	str	r3, [r2, #0]
 800608c:	e00b      	b.n	80060a6 <HAL_RCC_OscConfig+0xe6>
 800608e:	4b78      	ldr	r3, [pc, #480]	; (8006270 <HAL_RCC_OscConfig+0x2b0>)
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	4a77      	ldr	r2, [pc, #476]	; (8006270 <HAL_RCC_OscConfig+0x2b0>)
 8006094:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006098:	6013      	str	r3, [r2, #0]
 800609a:	4b75      	ldr	r3, [pc, #468]	; (8006270 <HAL_RCC_OscConfig+0x2b0>)
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	4a74      	ldr	r2, [pc, #464]	; (8006270 <HAL_RCC_OscConfig+0x2b0>)
 80060a0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80060a4:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	685b      	ldr	r3, [r3, #4]
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d013      	beq.n	80060d6 <HAL_RCC_OscConfig+0x116>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80060ae:	f7fb fd21 	bl	8001af4 <HAL_GetTick>
 80060b2:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80060b4:	e008      	b.n	80060c8 <HAL_RCC_OscConfig+0x108>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80060b6:	f7fb fd1d 	bl	8001af4 <HAL_GetTick>
 80060ba:	4602      	mov	r2, r0
 80060bc:	693b      	ldr	r3, [r7, #16]
 80060be:	1ad3      	subs	r3, r2, r3
 80060c0:	2b64      	cmp	r3, #100	; 0x64
 80060c2:	d901      	bls.n	80060c8 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 80060c4:	2303      	movs	r3, #3
 80060c6:	e292      	b.n	80065ee <HAL_RCC_OscConfig+0x62e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80060c8:	4b69      	ldr	r3, [pc, #420]	; (8006270 <HAL_RCC_OscConfig+0x2b0>)
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d0f0      	beq.n	80060b6 <HAL_RCC_OscConfig+0xf6>
 80060d4:	e014      	b.n	8006100 <HAL_RCC_OscConfig+0x140>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80060d6:	f7fb fd0d 	bl	8001af4 <HAL_GetTick>
 80060da:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80060dc:	e008      	b.n	80060f0 <HAL_RCC_OscConfig+0x130>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80060de:	f7fb fd09 	bl	8001af4 <HAL_GetTick>
 80060e2:	4602      	mov	r2, r0
 80060e4:	693b      	ldr	r3, [r7, #16]
 80060e6:	1ad3      	subs	r3, r2, r3
 80060e8:	2b64      	cmp	r3, #100	; 0x64
 80060ea:	d901      	bls.n	80060f0 <HAL_RCC_OscConfig+0x130>
          {
            return HAL_TIMEOUT;
 80060ec:	2303      	movs	r3, #3
 80060ee:	e27e      	b.n	80065ee <HAL_RCC_OscConfig+0x62e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80060f0:	4b5f      	ldr	r3, [pc, #380]	; (8006270 <HAL_RCC_OscConfig+0x2b0>)
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d1f0      	bne.n	80060de <HAL_RCC_OscConfig+0x11e>
 80060fc:	e000      	b.n	8006100 <HAL_RCC_OscConfig+0x140>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80060fe:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	f003 0302 	and.w	r3, r3, #2
 8006108:	2b00      	cmp	r3, #0
 800610a:	d079      	beq.n	8006200 <HAL_RCC_OscConfig+0x240>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	68db      	ldr	r3, [r3, #12]
 8006110:	2b00      	cmp	r3, #0
 8006112:	d008      	beq.n	8006126 <HAL_RCC_OscConfig+0x166>
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	68db      	ldr	r3, [r3, #12]
 8006118:	2b01      	cmp	r3, #1
 800611a:	d004      	beq.n	8006126 <HAL_RCC_OscConfig+0x166>
 800611c:	f240 111f 	movw	r1, #287	; 0x11f
 8006120:	4852      	ldr	r0, [pc, #328]	; (800626c <HAL_RCC_OscConfig+0x2ac>)
 8006122:	f7fb fb04 	bl	800172e <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	691b      	ldr	r3, [r3, #16]
 800612a:	2b1f      	cmp	r3, #31
 800612c:	d904      	bls.n	8006138 <HAL_RCC_OscConfig+0x178>
 800612e:	f44f 7190 	mov.w	r1, #288	; 0x120
 8006132:	484e      	ldr	r0, [pc, #312]	; (800626c <HAL_RCC_OscConfig+0x2ac>)
 8006134:	f7fb fafb 	bl	800172e <assert_failed>

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006138:	4b4d      	ldr	r3, [pc, #308]	; (8006270 <HAL_RCC_OscConfig+0x2b0>)
 800613a:	689b      	ldr	r3, [r3, #8]
 800613c:	f003 030c 	and.w	r3, r3, #12
 8006140:	2b00      	cmp	r3, #0
 8006142:	d00b      	beq.n	800615c <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006144:	4b4a      	ldr	r3, [pc, #296]	; (8006270 <HAL_RCC_OscConfig+0x2b0>)
 8006146:	689b      	ldr	r3, [r3, #8]
 8006148:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800614c:	2b08      	cmp	r3, #8
 800614e:	d11c      	bne.n	800618a <HAL_RCC_OscConfig+0x1ca>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006150:	4b47      	ldr	r3, [pc, #284]	; (8006270 <HAL_RCC_OscConfig+0x2b0>)
 8006152:	685b      	ldr	r3, [r3, #4]
 8006154:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006158:	2b00      	cmp	r3, #0
 800615a:	d116      	bne.n	800618a <HAL_RCC_OscConfig+0x1ca>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800615c:	4b44      	ldr	r3, [pc, #272]	; (8006270 <HAL_RCC_OscConfig+0x2b0>)
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	f003 0302 	and.w	r3, r3, #2
 8006164:	2b00      	cmp	r3, #0
 8006166:	d005      	beq.n	8006174 <HAL_RCC_OscConfig+0x1b4>
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	68db      	ldr	r3, [r3, #12]
 800616c:	2b01      	cmp	r3, #1
 800616e:	d001      	beq.n	8006174 <HAL_RCC_OscConfig+0x1b4>
      {
        return HAL_ERROR;
 8006170:	2301      	movs	r3, #1
 8006172:	e23c      	b.n	80065ee <HAL_RCC_OscConfig+0x62e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006174:	4b3e      	ldr	r3, [pc, #248]	; (8006270 <HAL_RCC_OscConfig+0x2b0>)
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	691b      	ldr	r3, [r3, #16]
 8006180:	00db      	lsls	r3, r3, #3
 8006182:	493b      	ldr	r1, [pc, #236]	; (8006270 <HAL_RCC_OscConfig+0x2b0>)
 8006184:	4313      	orrs	r3, r2
 8006186:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006188:	e03a      	b.n	8006200 <HAL_RCC_OscConfig+0x240>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	68db      	ldr	r3, [r3, #12]
 800618e:	2b00      	cmp	r3, #0
 8006190:	d020      	beq.n	80061d4 <HAL_RCC_OscConfig+0x214>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006192:	4b38      	ldr	r3, [pc, #224]	; (8006274 <HAL_RCC_OscConfig+0x2b4>)
 8006194:	2201      	movs	r2, #1
 8006196:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006198:	f7fb fcac 	bl	8001af4 <HAL_GetTick>
 800619c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800619e:	e008      	b.n	80061b2 <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80061a0:	f7fb fca8 	bl	8001af4 <HAL_GetTick>
 80061a4:	4602      	mov	r2, r0
 80061a6:	693b      	ldr	r3, [r7, #16]
 80061a8:	1ad3      	subs	r3, r2, r3
 80061aa:	2b02      	cmp	r3, #2
 80061ac:	d901      	bls.n	80061b2 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80061ae:	2303      	movs	r3, #3
 80061b0:	e21d      	b.n	80065ee <HAL_RCC_OscConfig+0x62e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80061b2:	4b2f      	ldr	r3, [pc, #188]	; (8006270 <HAL_RCC_OscConfig+0x2b0>)
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	f003 0302 	and.w	r3, r3, #2
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d0f0      	beq.n	80061a0 <HAL_RCC_OscConfig+0x1e0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80061be:	4b2c      	ldr	r3, [pc, #176]	; (8006270 <HAL_RCC_OscConfig+0x2b0>)
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	691b      	ldr	r3, [r3, #16]
 80061ca:	00db      	lsls	r3, r3, #3
 80061cc:	4928      	ldr	r1, [pc, #160]	; (8006270 <HAL_RCC_OscConfig+0x2b0>)
 80061ce:	4313      	orrs	r3, r2
 80061d0:	600b      	str	r3, [r1, #0]
 80061d2:	e015      	b.n	8006200 <HAL_RCC_OscConfig+0x240>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80061d4:	4b27      	ldr	r3, [pc, #156]	; (8006274 <HAL_RCC_OscConfig+0x2b4>)
 80061d6:	2200      	movs	r2, #0
 80061d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80061da:	f7fb fc8b 	bl	8001af4 <HAL_GetTick>
 80061de:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80061e0:	e008      	b.n	80061f4 <HAL_RCC_OscConfig+0x234>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80061e2:	f7fb fc87 	bl	8001af4 <HAL_GetTick>
 80061e6:	4602      	mov	r2, r0
 80061e8:	693b      	ldr	r3, [r7, #16]
 80061ea:	1ad3      	subs	r3, r2, r3
 80061ec:	2b02      	cmp	r3, #2
 80061ee:	d901      	bls.n	80061f4 <HAL_RCC_OscConfig+0x234>
          {
            return HAL_TIMEOUT;
 80061f0:	2303      	movs	r3, #3
 80061f2:	e1fc      	b.n	80065ee <HAL_RCC_OscConfig+0x62e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80061f4:	4b1e      	ldr	r3, [pc, #120]	; (8006270 <HAL_RCC_OscConfig+0x2b0>)
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	f003 0302 	and.w	r3, r3, #2
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d1f0      	bne.n	80061e2 <HAL_RCC_OscConfig+0x222>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	f003 0308 	and.w	r3, r3, #8
 8006208:	2b00      	cmp	r3, #0
 800620a:	d046      	beq.n	800629a <HAL_RCC_OscConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	695b      	ldr	r3, [r3, #20]
 8006210:	2b00      	cmp	r3, #0
 8006212:	d008      	beq.n	8006226 <HAL_RCC_OscConfig+0x266>
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	695b      	ldr	r3, [r3, #20]
 8006218:	2b01      	cmp	r3, #1
 800621a:	d004      	beq.n	8006226 <HAL_RCC_OscConfig+0x266>
 800621c:	f44f 71b0 	mov.w	r1, #352	; 0x160
 8006220:	4812      	ldr	r0, [pc, #72]	; (800626c <HAL_RCC_OscConfig+0x2ac>)
 8006222:	f7fb fa84 	bl	800172e <assert_failed>

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	695b      	ldr	r3, [r3, #20]
 800622a:	2b00      	cmp	r3, #0
 800622c:	d016      	beq.n	800625c <HAL_RCC_OscConfig+0x29c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800622e:	4b12      	ldr	r3, [pc, #72]	; (8006278 <HAL_RCC_OscConfig+0x2b8>)
 8006230:	2201      	movs	r2, #1
 8006232:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006234:	f7fb fc5e 	bl	8001af4 <HAL_GetTick>
 8006238:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800623a:	e008      	b.n	800624e <HAL_RCC_OscConfig+0x28e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800623c:	f7fb fc5a 	bl	8001af4 <HAL_GetTick>
 8006240:	4602      	mov	r2, r0
 8006242:	693b      	ldr	r3, [r7, #16]
 8006244:	1ad3      	subs	r3, r2, r3
 8006246:	2b02      	cmp	r3, #2
 8006248:	d901      	bls.n	800624e <HAL_RCC_OscConfig+0x28e>
        {
          return HAL_TIMEOUT;
 800624a:	2303      	movs	r3, #3
 800624c:	e1cf      	b.n	80065ee <HAL_RCC_OscConfig+0x62e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800624e:	4b08      	ldr	r3, [pc, #32]	; (8006270 <HAL_RCC_OscConfig+0x2b0>)
 8006250:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006252:	f003 0302 	and.w	r3, r3, #2
 8006256:	2b00      	cmp	r3, #0
 8006258:	d0f0      	beq.n	800623c <HAL_RCC_OscConfig+0x27c>
 800625a:	e01e      	b.n	800629a <HAL_RCC_OscConfig+0x2da>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800625c:	4b06      	ldr	r3, [pc, #24]	; (8006278 <HAL_RCC_OscConfig+0x2b8>)
 800625e:	2200      	movs	r2, #0
 8006260:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006262:	f7fb fc47 	bl	8001af4 <HAL_GetTick>
 8006266:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006268:	e011      	b.n	800628e <HAL_RCC_OscConfig+0x2ce>
 800626a:	bf00      	nop
 800626c:	0800d770 	.word	0x0800d770
 8006270:	40023800 	.word	0x40023800
 8006274:	42470000 	.word	0x42470000
 8006278:	42470e80 	.word	0x42470e80
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800627c:	f7fb fc3a 	bl	8001af4 <HAL_GetTick>
 8006280:	4602      	mov	r2, r0
 8006282:	693b      	ldr	r3, [r7, #16]
 8006284:	1ad3      	subs	r3, r2, r3
 8006286:	2b02      	cmp	r3, #2
 8006288:	d901      	bls.n	800628e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800628a:	2303      	movs	r3, #3
 800628c:	e1af      	b.n	80065ee <HAL_RCC_OscConfig+0x62e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800628e:	4b97      	ldr	r3, [pc, #604]	; (80064ec <HAL_RCC_OscConfig+0x52c>)
 8006290:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006292:	f003 0302 	and.w	r3, r3, #2
 8006296:	2b00      	cmp	r3, #0
 8006298:	d1f0      	bne.n	800627c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	f003 0304 	and.w	r3, r3, #4
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	f000 80a8 	beq.w	80063f8 <HAL_RCC_OscConfig+0x438>
  {
    FlagStatus       pwrclkchanged = RESET;
 80062a8:	2300      	movs	r3, #0
 80062aa:	75fb      	strb	r3, [r7, #23]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	689b      	ldr	r3, [r3, #8]
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d00c      	beq.n	80062ce <HAL_RCC_OscConfig+0x30e>
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	689b      	ldr	r3, [r3, #8]
 80062b8:	2b01      	cmp	r3, #1
 80062ba:	d008      	beq.n	80062ce <HAL_RCC_OscConfig+0x30e>
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	689b      	ldr	r3, [r3, #8]
 80062c0:	2b05      	cmp	r3, #5
 80062c2:	d004      	beq.n	80062ce <HAL_RCC_OscConfig+0x30e>
 80062c4:	f44f 71c6 	mov.w	r1, #396	; 0x18c
 80062c8:	4889      	ldr	r0, [pc, #548]	; (80064f0 <HAL_RCC_OscConfig+0x530>)
 80062ca:	f7fb fa30 	bl	800172e <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80062ce:	4b87      	ldr	r3, [pc, #540]	; (80064ec <HAL_RCC_OscConfig+0x52c>)
 80062d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d10f      	bne.n	80062fa <HAL_RCC_OscConfig+0x33a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80062da:	2300      	movs	r3, #0
 80062dc:	60bb      	str	r3, [r7, #8]
 80062de:	4b83      	ldr	r3, [pc, #524]	; (80064ec <HAL_RCC_OscConfig+0x52c>)
 80062e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062e2:	4a82      	ldr	r2, [pc, #520]	; (80064ec <HAL_RCC_OscConfig+0x52c>)
 80062e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80062e8:	6413      	str	r3, [r2, #64]	; 0x40
 80062ea:	4b80      	ldr	r3, [pc, #512]	; (80064ec <HAL_RCC_OscConfig+0x52c>)
 80062ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80062f2:	60bb      	str	r3, [r7, #8]
 80062f4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80062f6:	2301      	movs	r3, #1
 80062f8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80062fa:	4b7e      	ldr	r3, [pc, #504]	; (80064f4 <HAL_RCC_OscConfig+0x534>)
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006302:	2b00      	cmp	r3, #0
 8006304:	d118      	bne.n	8006338 <HAL_RCC_OscConfig+0x378>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006306:	4b7b      	ldr	r3, [pc, #492]	; (80064f4 <HAL_RCC_OscConfig+0x534>)
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	4a7a      	ldr	r2, [pc, #488]	; (80064f4 <HAL_RCC_OscConfig+0x534>)
 800630c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006310:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006312:	f7fb fbef 	bl	8001af4 <HAL_GetTick>
 8006316:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006318:	e008      	b.n	800632c <HAL_RCC_OscConfig+0x36c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800631a:	f7fb fbeb 	bl	8001af4 <HAL_GetTick>
 800631e:	4602      	mov	r2, r0
 8006320:	693b      	ldr	r3, [r7, #16]
 8006322:	1ad3      	subs	r3, r2, r3
 8006324:	2b02      	cmp	r3, #2
 8006326:	d901      	bls.n	800632c <HAL_RCC_OscConfig+0x36c>
        {
          return HAL_TIMEOUT;
 8006328:	2303      	movs	r3, #3
 800632a:	e160      	b.n	80065ee <HAL_RCC_OscConfig+0x62e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800632c:	4b71      	ldr	r3, [pc, #452]	; (80064f4 <HAL_RCC_OscConfig+0x534>)
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006334:	2b00      	cmp	r3, #0
 8006336:	d0f0      	beq.n	800631a <HAL_RCC_OscConfig+0x35a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	689b      	ldr	r3, [r3, #8]
 800633c:	2b01      	cmp	r3, #1
 800633e:	d106      	bne.n	800634e <HAL_RCC_OscConfig+0x38e>
 8006340:	4b6a      	ldr	r3, [pc, #424]	; (80064ec <HAL_RCC_OscConfig+0x52c>)
 8006342:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006344:	4a69      	ldr	r2, [pc, #420]	; (80064ec <HAL_RCC_OscConfig+0x52c>)
 8006346:	f043 0301 	orr.w	r3, r3, #1
 800634a:	6713      	str	r3, [r2, #112]	; 0x70
 800634c:	e01c      	b.n	8006388 <HAL_RCC_OscConfig+0x3c8>
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	689b      	ldr	r3, [r3, #8]
 8006352:	2b05      	cmp	r3, #5
 8006354:	d10c      	bne.n	8006370 <HAL_RCC_OscConfig+0x3b0>
 8006356:	4b65      	ldr	r3, [pc, #404]	; (80064ec <HAL_RCC_OscConfig+0x52c>)
 8006358:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800635a:	4a64      	ldr	r2, [pc, #400]	; (80064ec <HAL_RCC_OscConfig+0x52c>)
 800635c:	f043 0304 	orr.w	r3, r3, #4
 8006360:	6713      	str	r3, [r2, #112]	; 0x70
 8006362:	4b62      	ldr	r3, [pc, #392]	; (80064ec <HAL_RCC_OscConfig+0x52c>)
 8006364:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006366:	4a61      	ldr	r2, [pc, #388]	; (80064ec <HAL_RCC_OscConfig+0x52c>)
 8006368:	f043 0301 	orr.w	r3, r3, #1
 800636c:	6713      	str	r3, [r2, #112]	; 0x70
 800636e:	e00b      	b.n	8006388 <HAL_RCC_OscConfig+0x3c8>
 8006370:	4b5e      	ldr	r3, [pc, #376]	; (80064ec <HAL_RCC_OscConfig+0x52c>)
 8006372:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006374:	4a5d      	ldr	r2, [pc, #372]	; (80064ec <HAL_RCC_OscConfig+0x52c>)
 8006376:	f023 0301 	bic.w	r3, r3, #1
 800637a:	6713      	str	r3, [r2, #112]	; 0x70
 800637c:	4b5b      	ldr	r3, [pc, #364]	; (80064ec <HAL_RCC_OscConfig+0x52c>)
 800637e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006380:	4a5a      	ldr	r2, [pc, #360]	; (80064ec <HAL_RCC_OscConfig+0x52c>)
 8006382:	f023 0304 	bic.w	r3, r3, #4
 8006386:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	689b      	ldr	r3, [r3, #8]
 800638c:	2b00      	cmp	r3, #0
 800638e:	d015      	beq.n	80063bc <HAL_RCC_OscConfig+0x3fc>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006390:	f7fb fbb0 	bl	8001af4 <HAL_GetTick>
 8006394:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006396:	e00a      	b.n	80063ae <HAL_RCC_OscConfig+0x3ee>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006398:	f7fb fbac 	bl	8001af4 <HAL_GetTick>
 800639c:	4602      	mov	r2, r0
 800639e:	693b      	ldr	r3, [r7, #16]
 80063a0:	1ad3      	subs	r3, r2, r3
 80063a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80063a6:	4293      	cmp	r3, r2
 80063a8:	d901      	bls.n	80063ae <HAL_RCC_OscConfig+0x3ee>
        {
          return HAL_TIMEOUT;
 80063aa:	2303      	movs	r3, #3
 80063ac:	e11f      	b.n	80065ee <HAL_RCC_OscConfig+0x62e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80063ae:	4b4f      	ldr	r3, [pc, #316]	; (80064ec <HAL_RCC_OscConfig+0x52c>)
 80063b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80063b2:	f003 0302 	and.w	r3, r3, #2
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d0ee      	beq.n	8006398 <HAL_RCC_OscConfig+0x3d8>
 80063ba:	e014      	b.n	80063e6 <HAL_RCC_OscConfig+0x426>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80063bc:	f7fb fb9a 	bl	8001af4 <HAL_GetTick>
 80063c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80063c2:	e00a      	b.n	80063da <HAL_RCC_OscConfig+0x41a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80063c4:	f7fb fb96 	bl	8001af4 <HAL_GetTick>
 80063c8:	4602      	mov	r2, r0
 80063ca:	693b      	ldr	r3, [r7, #16]
 80063cc:	1ad3      	subs	r3, r2, r3
 80063ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80063d2:	4293      	cmp	r3, r2
 80063d4:	d901      	bls.n	80063da <HAL_RCC_OscConfig+0x41a>
        {
          return HAL_TIMEOUT;
 80063d6:	2303      	movs	r3, #3
 80063d8:	e109      	b.n	80065ee <HAL_RCC_OscConfig+0x62e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80063da:	4b44      	ldr	r3, [pc, #272]	; (80064ec <HAL_RCC_OscConfig+0x52c>)
 80063dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80063de:	f003 0302 	and.w	r3, r3, #2
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d1ee      	bne.n	80063c4 <HAL_RCC_OscConfig+0x404>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80063e6:	7dfb      	ldrb	r3, [r7, #23]
 80063e8:	2b01      	cmp	r3, #1
 80063ea:	d105      	bne.n	80063f8 <HAL_RCC_OscConfig+0x438>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80063ec:	4b3f      	ldr	r3, [pc, #252]	; (80064ec <HAL_RCC_OscConfig+0x52c>)
 80063ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063f0:	4a3e      	ldr	r2, [pc, #248]	; (80064ec <HAL_RCC_OscConfig+0x52c>)
 80063f2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80063f6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	699b      	ldr	r3, [r3, #24]
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d00c      	beq.n	800641a <HAL_RCC_OscConfig+0x45a>
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	699b      	ldr	r3, [r3, #24]
 8006404:	2b01      	cmp	r3, #1
 8006406:	d008      	beq.n	800641a <HAL_RCC_OscConfig+0x45a>
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	699b      	ldr	r3, [r3, #24]
 800640c:	2b02      	cmp	r3, #2
 800640e:	d004      	beq.n	800641a <HAL_RCC_OscConfig+0x45a>
 8006410:	f240 11cf 	movw	r1, #463	; 0x1cf
 8006414:	4836      	ldr	r0, [pc, #216]	; (80064f0 <HAL_RCC_OscConfig+0x530>)
 8006416:	f7fb f98a 	bl	800172e <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	699b      	ldr	r3, [r3, #24]
 800641e:	2b00      	cmp	r3, #0
 8006420:	f000 80e4 	beq.w	80065ec <HAL_RCC_OscConfig+0x62c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006424:	4b31      	ldr	r3, [pc, #196]	; (80064ec <HAL_RCC_OscConfig+0x52c>)
 8006426:	689b      	ldr	r3, [r3, #8]
 8006428:	f003 030c 	and.w	r3, r3, #12
 800642c:	2b08      	cmp	r3, #8
 800642e:	f000 80ae 	beq.w	800658e <HAL_RCC_OscConfig+0x5ce>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	699b      	ldr	r3, [r3, #24]
 8006436:	2b02      	cmp	r3, #2
 8006438:	f040 8092 	bne.w	8006560 <HAL_RCC_OscConfig+0x5a0>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	69db      	ldr	r3, [r3, #28]
 8006440:	2b00      	cmp	r3, #0
 8006442:	d009      	beq.n	8006458 <HAL_RCC_OscConfig+0x498>
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	69db      	ldr	r3, [r3, #28]
 8006448:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800644c:	d004      	beq.n	8006458 <HAL_RCC_OscConfig+0x498>
 800644e:	f44f 71ec 	mov.w	r1, #472	; 0x1d8
 8006452:	4827      	ldr	r0, [pc, #156]	; (80064f0 <HAL_RCC_OscConfig+0x530>)
 8006454:	f7fb f96b 	bl	800172e <assert_failed>
        assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	6a1b      	ldr	r3, [r3, #32]
 800645c:	2b3f      	cmp	r3, #63	; 0x3f
 800645e:	d904      	bls.n	800646a <HAL_RCC_OscConfig+0x4aa>
 8006460:	f240 11d9 	movw	r1, #473	; 0x1d9
 8006464:	4822      	ldr	r0, [pc, #136]	; (80064f0 <HAL_RCC_OscConfig+0x530>)
 8006466:	f7fb f962 	bl	800172e <assert_failed>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800646e:	2bbf      	cmp	r3, #191	; 0xbf
 8006470:	d904      	bls.n	800647c <HAL_RCC_OscConfig+0x4bc>
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006476:	f5b3 7fd8 	cmp.w	r3, #432	; 0x1b0
 800647a:	d904      	bls.n	8006486 <HAL_RCC_OscConfig+0x4c6>
 800647c:	f44f 71ed 	mov.w	r1, #474	; 0x1da
 8006480:	481b      	ldr	r0, [pc, #108]	; (80064f0 <HAL_RCC_OscConfig+0x530>)
 8006482:	f7fb f954 	bl	800172e <assert_failed>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800648a:	2b02      	cmp	r3, #2
 800648c:	d010      	beq.n	80064b0 <HAL_RCC_OscConfig+0x4f0>
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006492:	2b04      	cmp	r3, #4
 8006494:	d00c      	beq.n	80064b0 <HAL_RCC_OscConfig+0x4f0>
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800649a:	2b06      	cmp	r3, #6
 800649c:	d008      	beq.n	80064b0 <HAL_RCC_OscConfig+0x4f0>
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064a2:	2b08      	cmp	r3, #8
 80064a4:	d004      	beq.n	80064b0 <HAL_RCC_OscConfig+0x4f0>
 80064a6:	f240 11db 	movw	r1, #475	; 0x1db
 80064aa:	4811      	ldr	r0, [pc, #68]	; (80064f0 <HAL_RCC_OscConfig+0x530>)
 80064ac:	f7fb f93f 	bl	800172e <assert_failed>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064b4:	2b01      	cmp	r3, #1
 80064b6:	d903      	bls.n	80064c0 <HAL_RCC_OscConfig+0x500>
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064bc:	2b0f      	cmp	r3, #15
 80064be:	d904      	bls.n	80064ca <HAL_RCC_OscConfig+0x50a>
 80064c0:	f44f 71ee 	mov.w	r1, #476	; 0x1dc
 80064c4:	480a      	ldr	r0, [pc, #40]	; (80064f0 <HAL_RCC_OscConfig+0x530>)
 80064c6:	f7fb f932 	bl	800172e <assert_failed>

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80064ca:	4b0b      	ldr	r3, [pc, #44]	; (80064f8 <HAL_RCC_OscConfig+0x538>)
 80064cc:	2200      	movs	r2, #0
 80064ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80064d0:	f7fb fb10 	bl	8001af4 <HAL_GetTick>
 80064d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80064d6:	e011      	b.n	80064fc <HAL_RCC_OscConfig+0x53c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80064d8:	f7fb fb0c 	bl	8001af4 <HAL_GetTick>
 80064dc:	4602      	mov	r2, r0
 80064de:	693b      	ldr	r3, [r7, #16]
 80064e0:	1ad3      	subs	r3, r2, r3
 80064e2:	2b02      	cmp	r3, #2
 80064e4:	d90a      	bls.n	80064fc <HAL_RCC_OscConfig+0x53c>
          {
            return HAL_TIMEOUT;
 80064e6:	2303      	movs	r3, #3
 80064e8:	e081      	b.n	80065ee <HAL_RCC_OscConfig+0x62e>
 80064ea:	bf00      	nop
 80064ec:	40023800 	.word	0x40023800
 80064f0:	0800d770 	.word	0x0800d770
 80064f4:	40007000 	.word	0x40007000
 80064f8:	42470060 	.word	0x42470060
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80064fc:	4b3e      	ldr	r3, [pc, #248]	; (80065f8 <HAL_RCC_OscConfig+0x638>)
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006504:	2b00      	cmp	r3, #0
 8006506:	d1e7      	bne.n	80064d8 <HAL_RCC_OscConfig+0x518>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	69da      	ldr	r2, [r3, #28]
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	6a1b      	ldr	r3, [r3, #32]
 8006510:	431a      	orrs	r2, r3
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006516:	019b      	lsls	r3, r3, #6
 8006518:	431a      	orrs	r2, r3
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800651e:	085b      	lsrs	r3, r3, #1
 8006520:	3b01      	subs	r3, #1
 8006522:	041b      	lsls	r3, r3, #16
 8006524:	431a      	orrs	r2, r3
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800652a:	061b      	lsls	r3, r3, #24
 800652c:	4932      	ldr	r1, [pc, #200]	; (80065f8 <HAL_RCC_OscConfig+0x638>)
 800652e:	4313      	orrs	r3, r2
 8006530:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006532:	4b32      	ldr	r3, [pc, #200]	; (80065fc <HAL_RCC_OscConfig+0x63c>)
 8006534:	2201      	movs	r2, #1
 8006536:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006538:	f7fb fadc 	bl	8001af4 <HAL_GetTick>
 800653c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800653e:	e008      	b.n	8006552 <HAL_RCC_OscConfig+0x592>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006540:	f7fb fad8 	bl	8001af4 <HAL_GetTick>
 8006544:	4602      	mov	r2, r0
 8006546:	693b      	ldr	r3, [r7, #16]
 8006548:	1ad3      	subs	r3, r2, r3
 800654a:	2b02      	cmp	r3, #2
 800654c:	d901      	bls.n	8006552 <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 800654e:	2303      	movs	r3, #3
 8006550:	e04d      	b.n	80065ee <HAL_RCC_OscConfig+0x62e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006552:	4b29      	ldr	r3, [pc, #164]	; (80065f8 <HAL_RCC_OscConfig+0x638>)
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800655a:	2b00      	cmp	r3, #0
 800655c:	d0f0      	beq.n	8006540 <HAL_RCC_OscConfig+0x580>
 800655e:	e045      	b.n	80065ec <HAL_RCC_OscConfig+0x62c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006560:	4b26      	ldr	r3, [pc, #152]	; (80065fc <HAL_RCC_OscConfig+0x63c>)
 8006562:	2200      	movs	r2, #0
 8006564:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006566:	f7fb fac5 	bl	8001af4 <HAL_GetTick>
 800656a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800656c:	e008      	b.n	8006580 <HAL_RCC_OscConfig+0x5c0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800656e:	f7fb fac1 	bl	8001af4 <HAL_GetTick>
 8006572:	4602      	mov	r2, r0
 8006574:	693b      	ldr	r3, [r7, #16]
 8006576:	1ad3      	subs	r3, r2, r3
 8006578:	2b02      	cmp	r3, #2
 800657a:	d901      	bls.n	8006580 <HAL_RCC_OscConfig+0x5c0>
          {
            return HAL_TIMEOUT;
 800657c:	2303      	movs	r3, #3
 800657e:	e036      	b.n	80065ee <HAL_RCC_OscConfig+0x62e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006580:	4b1d      	ldr	r3, [pc, #116]	; (80065f8 <HAL_RCC_OscConfig+0x638>)
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006588:	2b00      	cmp	r3, #0
 800658a:	d1f0      	bne.n	800656e <HAL_RCC_OscConfig+0x5ae>
 800658c:	e02e      	b.n	80065ec <HAL_RCC_OscConfig+0x62c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	699b      	ldr	r3, [r3, #24]
 8006592:	2b01      	cmp	r3, #1
 8006594:	d101      	bne.n	800659a <HAL_RCC_OscConfig+0x5da>
      {
        return HAL_ERROR;
 8006596:	2301      	movs	r3, #1
 8006598:	e029      	b.n	80065ee <HAL_RCC_OscConfig+0x62e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800659a:	4b17      	ldr	r3, [pc, #92]	; (80065f8 <HAL_RCC_OscConfig+0x638>)
 800659c:	685b      	ldr	r3, [r3, #4]
 800659e:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	69db      	ldr	r3, [r3, #28]
 80065aa:	429a      	cmp	r2, r3
 80065ac:	d11c      	bne.n	80065e8 <HAL_RCC_OscConfig+0x628>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80065b8:	429a      	cmp	r2, r3
 80065ba:	d115      	bne.n	80065e8 <HAL_RCC_OscConfig+0x628>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80065bc:	68fa      	ldr	r2, [r7, #12]
 80065be:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80065c2:	4013      	ands	r3, r2
 80065c4:	687a      	ldr	r2, [r7, #4]
 80065c6:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80065c8:	4293      	cmp	r3, r2
 80065ca:	d10d      	bne.n	80065e8 <HAL_RCC_OscConfig+0x628>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80065d6:	429a      	cmp	r2, r3
 80065d8:	d106      	bne.n	80065e8 <HAL_RCC_OscConfig+0x628>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80065e4:	429a      	cmp	r2, r3
 80065e6:	d001      	beq.n	80065ec <HAL_RCC_OscConfig+0x62c>
        {
          return HAL_ERROR;
 80065e8:	2301      	movs	r3, #1
 80065ea:	e000      	b.n	80065ee <HAL_RCC_OscConfig+0x62e>
        }
      }
    }
  }
  return HAL_OK;
 80065ec:	2300      	movs	r3, #0
}
 80065ee:	4618      	mov	r0, r3
 80065f0:	3718      	adds	r7, #24
 80065f2:	46bd      	mov	sp, r7
 80065f4:	bd80      	pop	{r7, pc}
 80065f6:	bf00      	nop
 80065f8:	40023800 	.word	0x40023800
 80065fc:	42470060 	.word	0x42470060

08006600 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006600:	b580      	push	{r7, lr}
 8006602:	b084      	sub	sp, #16
 8006604:	af00      	add	r7, sp, #0
 8006606:	6078      	str	r0, [r7, #4]
 8006608:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	2b00      	cmp	r3, #0
 800660e:	d101      	bne.n	8006614 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006610:	2301      	movs	r3, #1
 8006612:	e174      	b.n	80068fe <HAL_RCC_ClockConfig+0x2fe>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	2b00      	cmp	r3, #0
 800661a:	d003      	beq.n	8006624 <HAL_RCC_ClockConfig+0x24>
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	2b0f      	cmp	r3, #15
 8006622:	d904      	bls.n	800662e <HAL_RCC_ClockConfig+0x2e>
 8006624:	f240 2151 	movw	r1, #593	; 0x251
 8006628:	487b      	ldr	r0, [pc, #492]	; (8006818 <HAL_RCC_ClockConfig+0x218>)
 800662a:	f7fb f880 	bl	800172e <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 800662e:	683b      	ldr	r3, [r7, #0]
 8006630:	2b00      	cmp	r3, #0
 8006632:	d019      	beq.n	8006668 <HAL_RCC_ClockConfig+0x68>
 8006634:	683b      	ldr	r3, [r7, #0]
 8006636:	2b01      	cmp	r3, #1
 8006638:	d016      	beq.n	8006668 <HAL_RCC_ClockConfig+0x68>
 800663a:	683b      	ldr	r3, [r7, #0]
 800663c:	2b02      	cmp	r3, #2
 800663e:	d013      	beq.n	8006668 <HAL_RCC_ClockConfig+0x68>
 8006640:	683b      	ldr	r3, [r7, #0]
 8006642:	2b03      	cmp	r3, #3
 8006644:	d010      	beq.n	8006668 <HAL_RCC_ClockConfig+0x68>
 8006646:	683b      	ldr	r3, [r7, #0]
 8006648:	2b04      	cmp	r3, #4
 800664a:	d00d      	beq.n	8006668 <HAL_RCC_ClockConfig+0x68>
 800664c:	683b      	ldr	r3, [r7, #0]
 800664e:	2b05      	cmp	r3, #5
 8006650:	d00a      	beq.n	8006668 <HAL_RCC_ClockConfig+0x68>
 8006652:	683b      	ldr	r3, [r7, #0]
 8006654:	2b06      	cmp	r3, #6
 8006656:	d007      	beq.n	8006668 <HAL_RCC_ClockConfig+0x68>
 8006658:	683b      	ldr	r3, [r7, #0]
 800665a:	2b07      	cmp	r3, #7
 800665c:	d004      	beq.n	8006668 <HAL_RCC_ClockConfig+0x68>
 800665e:	f240 2152 	movw	r1, #594	; 0x252
 8006662:	486d      	ldr	r0, [pc, #436]	; (8006818 <HAL_RCC_ClockConfig+0x218>)
 8006664:	f7fb f863 	bl	800172e <assert_failed>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006668:	4b6c      	ldr	r3, [pc, #432]	; (800681c <HAL_RCC_ClockConfig+0x21c>)
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	f003 030f 	and.w	r3, r3, #15
 8006670:	683a      	ldr	r2, [r7, #0]
 8006672:	429a      	cmp	r2, r3
 8006674:	d90c      	bls.n	8006690 <HAL_RCC_ClockConfig+0x90>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006676:	4b69      	ldr	r3, [pc, #420]	; (800681c <HAL_RCC_ClockConfig+0x21c>)
 8006678:	683a      	ldr	r2, [r7, #0]
 800667a:	b2d2      	uxtb	r2, r2
 800667c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800667e:	4b67      	ldr	r3, [pc, #412]	; (800681c <HAL_RCC_ClockConfig+0x21c>)
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	f003 030f 	and.w	r3, r3, #15
 8006686:	683a      	ldr	r2, [r7, #0]
 8006688:	429a      	cmp	r2, r3
 800668a:	d001      	beq.n	8006690 <HAL_RCC_ClockConfig+0x90>
    {
      return HAL_ERROR;
 800668c:	2301      	movs	r3, #1
 800668e:	e136      	b.n	80068fe <HAL_RCC_ClockConfig+0x2fe>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	f003 0302 	and.w	r3, r3, #2
 8006698:	2b00      	cmp	r3, #0
 800669a:	d049      	beq.n	8006730 <HAL_RCC_ClockConfig+0x130>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	f003 0304 	and.w	r3, r3, #4
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d005      	beq.n	80066b4 <HAL_RCC_ClockConfig+0xb4>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80066a8:	4b5d      	ldr	r3, [pc, #372]	; (8006820 <HAL_RCC_ClockConfig+0x220>)
 80066aa:	689b      	ldr	r3, [r3, #8]
 80066ac:	4a5c      	ldr	r2, [pc, #368]	; (8006820 <HAL_RCC_ClockConfig+0x220>)
 80066ae:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80066b2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	f003 0308 	and.w	r3, r3, #8
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d005      	beq.n	80066cc <HAL_RCC_ClockConfig+0xcc>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80066c0:	4b57      	ldr	r3, [pc, #348]	; (8006820 <HAL_RCC_ClockConfig+0x220>)
 80066c2:	689b      	ldr	r3, [r3, #8]
 80066c4:	4a56      	ldr	r2, [pc, #344]	; (8006820 <HAL_RCC_ClockConfig+0x220>)
 80066c6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80066ca:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	689b      	ldr	r3, [r3, #8]
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d024      	beq.n	800671e <HAL_RCC_ClockConfig+0x11e>
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	689b      	ldr	r3, [r3, #8]
 80066d8:	2b80      	cmp	r3, #128	; 0x80
 80066da:	d020      	beq.n	800671e <HAL_RCC_ClockConfig+0x11e>
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	689b      	ldr	r3, [r3, #8]
 80066e0:	2b90      	cmp	r3, #144	; 0x90
 80066e2:	d01c      	beq.n	800671e <HAL_RCC_ClockConfig+0x11e>
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	689b      	ldr	r3, [r3, #8]
 80066e8:	2ba0      	cmp	r3, #160	; 0xa0
 80066ea:	d018      	beq.n	800671e <HAL_RCC_ClockConfig+0x11e>
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	689b      	ldr	r3, [r3, #8]
 80066f0:	2bb0      	cmp	r3, #176	; 0xb0
 80066f2:	d014      	beq.n	800671e <HAL_RCC_ClockConfig+0x11e>
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	689b      	ldr	r3, [r3, #8]
 80066f8:	2bc0      	cmp	r3, #192	; 0xc0
 80066fa:	d010      	beq.n	800671e <HAL_RCC_ClockConfig+0x11e>
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	689b      	ldr	r3, [r3, #8]
 8006700:	2bd0      	cmp	r3, #208	; 0xd0
 8006702:	d00c      	beq.n	800671e <HAL_RCC_ClockConfig+0x11e>
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	689b      	ldr	r3, [r3, #8]
 8006708:	2be0      	cmp	r3, #224	; 0xe0
 800670a:	d008      	beq.n	800671e <HAL_RCC_ClockConfig+0x11e>
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	689b      	ldr	r3, [r3, #8]
 8006710:	2bf0      	cmp	r3, #240	; 0xf0
 8006712:	d004      	beq.n	800671e <HAL_RCC_ClockConfig+0x11e>
 8006714:	f240 2175 	movw	r1, #629	; 0x275
 8006718:	483f      	ldr	r0, [pc, #252]	; (8006818 <HAL_RCC_ClockConfig+0x218>)
 800671a:	f7fb f808 	bl	800172e <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800671e:	4b40      	ldr	r3, [pc, #256]	; (8006820 <HAL_RCC_ClockConfig+0x220>)
 8006720:	689b      	ldr	r3, [r3, #8]
 8006722:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	689b      	ldr	r3, [r3, #8]
 800672a:	493d      	ldr	r1, [pc, #244]	; (8006820 <HAL_RCC_ClockConfig+0x220>)
 800672c:	4313      	orrs	r3, r2
 800672e:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	f003 0301 	and.w	r3, r3, #1
 8006738:	2b00      	cmp	r3, #0
 800673a:	d059      	beq.n	80067f0 <HAL_RCC_ClockConfig+0x1f0>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	685b      	ldr	r3, [r3, #4]
 8006740:	2b00      	cmp	r3, #0
 8006742:	d010      	beq.n	8006766 <HAL_RCC_ClockConfig+0x166>
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	685b      	ldr	r3, [r3, #4]
 8006748:	2b01      	cmp	r3, #1
 800674a:	d00c      	beq.n	8006766 <HAL_RCC_ClockConfig+0x166>
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	685b      	ldr	r3, [r3, #4]
 8006750:	2b02      	cmp	r3, #2
 8006752:	d008      	beq.n	8006766 <HAL_RCC_ClockConfig+0x166>
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	685b      	ldr	r3, [r3, #4]
 8006758:	2b03      	cmp	r3, #3
 800675a:	d004      	beq.n	8006766 <HAL_RCC_ClockConfig+0x166>
 800675c:	f44f 711f 	mov.w	r1, #636	; 0x27c
 8006760:	482d      	ldr	r0, [pc, #180]	; (8006818 <HAL_RCC_ClockConfig+0x218>)
 8006762:	f7fa ffe4 	bl	800172e <assert_failed>

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	685b      	ldr	r3, [r3, #4]
 800676a:	2b01      	cmp	r3, #1
 800676c:	d107      	bne.n	800677e <HAL_RCC_ClockConfig+0x17e>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800676e:	4b2c      	ldr	r3, [pc, #176]	; (8006820 <HAL_RCC_ClockConfig+0x220>)
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006776:	2b00      	cmp	r3, #0
 8006778:	d119      	bne.n	80067ae <HAL_RCC_ClockConfig+0x1ae>
      {
        return HAL_ERROR;
 800677a:	2301      	movs	r3, #1
 800677c:	e0bf      	b.n	80068fe <HAL_RCC_ClockConfig+0x2fe>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	685b      	ldr	r3, [r3, #4]
 8006782:	2b02      	cmp	r3, #2
 8006784:	d003      	beq.n	800678e <HAL_RCC_ClockConfig+0x18e>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800678a:	2b03      	cmp	r3, #3
 800678c:	d107      	bne.n	800679e <HAL_RCC_ClockConfig+0x19e>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800678e:	4b24      	ldr	r3, [pc, #144]	; (8006820 <HAL_RCC_ClockConfig+0x220>)
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006796:	2b00      	cmp	r3, #0
 8006798:	d109      	bne.n	80067ae <HAL_RCC_ClockConfig+0x1ae>
      {
        return HAL_ERROR;
 800679a:	2301      	movs	r3, #1
 800679c:	e0af      	b.n	80068fe <HAL_RCC_ClockConfig+0x2fe>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800679e:	4b20      	ldr	r3, [pc, #128]	; (8006820 <HAL_RCC_ClockConfig+0x220>)
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	f003 0302 	and.w	r3, r3, #2
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d101      	bne.n	80067ae <HAL_RCC_ClockConfig+0x1ae>
      {
        return HAL_ERROR;
 80067aa:	2301      	movs	r3, #1
 80067ac:	e0a7      	b.n	80068fe <HAL_RCC_ClockConfig+0x2fe>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80067ae:	4b1c      	ldr	r3, [pc, #112]	; (8006820 <HAL_RCC_ClockConfig+0x220>)
 80067b0:	689b      	ldr	r3, [r3, #8]
 80067b2:	f023 0203 	bic.w	r2, r3, #3
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	685b      	ldr	r3, [r3, #4]
 80067ba:	4919      	ldr	r1, [pc, #100]	; (8006820 <HAL_RCC_ClockConfig+0x220>)
 80067bc:	4313      	orrs	r3, r2
 80067be:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80067c0:	f7fb f998 	bl	8001af4 <HAL_GetTick>
 80067c4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80067c6:	e00a      	b.n	80067de <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80067c8:	f7fb f994 	bl	8001af4 <HAL_GetTick>
 80067cc:	4602      	mov	r2, r0
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	1ad3      	subs	r3, r2, r3
 80067d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80067d6:	4293      	cmp	r3, r2
 80067d8:	d901      	bls.n	80067de <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80067da:	2303      	movs	r3, #3
 80067dc:	e08f      	b.n	80068fe <HAL_RCC_ClockConfig+0x2fe>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80067de:	4b10      	ldr	r3, [pc, #64]	; (8006820 <HAL_RCC_ClockConfig+0x220>)
 80067e0:	689b      	ldr	r3, [r3, #8]
 80067e2:	f003 020c 	and.w	r2, r3, #12
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	685b      	ldr	r3, [r3, #4]
 80067ea:	009b      	lsls	r3, r3, #2
 80067ec:	429a      	cmp	r2, r3
 80067ee:	d1eb      	bne.n	80067c8 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80067f0:	4b0a      	ldr	r3, [pc, #40]	; (800681c <HAL_RCC_ClockConfig+0x21c>)
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	f003 030f 	and.w	r3, r3, #15
 80067f8:	683a      	ldr	r2, [r7, #0]
 80067fa:	429a      	cmp	r2, r3
 80067fc:	d212      	bcs.n	8006824 <HAL_RCC_ClockConfig+0x224>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80067fe:	4b07      	ldr	r3, [pc, #28]	; (800681c <HAL_RCC_ClockConfig+0x21c>)
 8006800:	683a      	ldr	r2, [r7, #0]
 8006802:	b2d2      	uxtb	r2, r2
 8006804:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006806:	4b05      	ldr	r3, [pc, #20]	; (800681c <HAL_RCC_ClockConfig+0x21c>)
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	f003 030f 	and.w	r3, r3, #15
 800680e:	683a      	ldr	r2, [r7, #0]
 8006810:	429a      	cmp	r2, r3
 8006812:	d007      	beq.n	8006824 <HAL_RCC_ClockConfig+0x224>
    {
      return HAL_ERROR;
 8006814:	2301      	movs	r3, #1
 8006816:	e072      	b.n	80068fe <HAL_RCC_ClockConfig+0x2fe>
 8006818:	0800d770 	.word	0x0800d770
 800681c:	40023c00 	.word	0x40023c00
 8006820:	40023800 	.word	0x40023800
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	f003 0304 	and.w	r3, r3, #4
 800682c:	2b00      	cmp	r3, #0
 800682e:	d025      	beq.n	800687c <HAL_RCC_ClockConfig+0x27c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	68db      	ldr	r3, [r3, #12]
 8006834:	2b00      	cmp	r3, #0
 8006836:	d018      	beq.n	800686a <HAL_RCC_ClockConfig+0x26a>
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	68db      	ldr	r3, [r3, #12]
 800683c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006840:	d013      	beq.n	800686a <HAL_RCC_ClockConfig+0x26a>
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	68db      	ldr	r3, [r3, #12]
 8006846:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800684a:	d00e      	beq.n	800686a <HAL_RCC_ClockConfig+0x26a>
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	68db      	ldr	r3, [r3, #12]
 8006850:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8006854:	d009      	beq.n	800686a <HAL_RCC_ClockConfig+0x26a>
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	68db      	ldr	r3, [r3, #12]
 800685a:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 800685e:	d004      	beq.n	800686a <HAL_RCC_ClockConfig+0x26a>
 8006860:	f240 21ba 	movw	r1, #698	; 0x2ba
 8006864:	4828      	ldr	r0, [pc, #160]	; (8006908 <HAL_RCC_ClockConfig+0x308>)
 8006866:	f7fa ff62 	bl	800172e <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800686a:	4b28      	ldr	r3, [pc, #160]	; (800690c <HAL_RCC_ClockConfig+0x30c>)
 800686c:	689b      	ldr	r3, [r3, #8]
 800686e:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	68db      	ldr	r3, [r3, #12]
 8006876:	4925      	ldr	r1, [pc, #148]	; (800690c <HAL_RCC_ClockConfig+0x30c>)
 8006878:	4313      	orrs	r3, r2
 800687a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	f003 0308 	and.w	r3, r3, #8
 8006884:	2b00      	cmp	r3, #0
 8006886:	d026      	beq.n	80068d6 <HAL_RCC_ClockConfig+0x2d6>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	691b      	ldr	r3, [r3, #16]
 800688c:	2b00      	cmp	r3, #0
 800688e:	d018      	beq.n	80068c2 <HAL_RCC_ClockConfig+0x2c2>
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	691b      	ldr	r3, [r3, #16]
 8006894:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006898:	d013      	beq.n	80068c2 <HAL_RCC_ClockConfig+0x2c2>
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	691b      	ldr	r3, [r3, #16]
 800689e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80068a2:	d00e      	beq.n	80068c2 <HAL_RCC_ClockConfig+0x2c2>
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	691b      	ldr	r3, [r3, #16]
 80068a8:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 80068ac:	d009      	beq.n	80068c2 <HAL_RCC_ClockConfig+0x2c2>
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	691b      	ldr	r3, [r3, #16]
 80068b2:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 80068b6:	d004      	beq.n	80068c2 <HAL_RCC_ClockConfig+0x2c2>
 80068b8:	f240 21c1 	movw	r1, #705	; 0x2c1
 80068bc:	4812      	ldr	r0, [pc, #72]	; (8006908 <HAL_RCC_ClockConfig+0x308>)
 80068be:	f7fa ff36 	bl	800172e <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80068c2:	4b12      	ldr	r3, [pc, #72]	; (800690c <HAL_RCC_ClockConfig+0x30c>)
 80068c4:	689b      	ldr	r3, [r3, #8]
 80068c6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	691b      	ldr	r3, [r3, #16]
 80068ce:	00db      	lsls	r3, r3, #3
 80068d0:	490e      	ldr	r1, [pc, #56]	; (800690c <HAL_RCC_ClockConfig+0x30c>)
 80068d2:	4313      	orrs	r3, r2
 80068d4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80068d6:	f000 f821 	bl	800691c <HAL_RCC_GetSysClockFreq>
 80068da:	4601      	mov	r1, r0
 80068dc:	4b0b      	ldr	r3, [pc, #44]	; (800690c <HAL_RCC_ClockConfig+0x30c>)
 80068de:	689b      	ldr	r3, [r3, #8]
 80068e0:	091b      	lsrs	r3, r3, #4
 80068e2:	f003 030f 	and.w	r3, r3, #15
 80068e6:	4a0a      	ldr	r2, [pc, #40]	; (8006910 <HAL_RCC_ClockConfig+0x310>)
 80068e8:	5cd3      	ldrb	r3, [r2, r3]
 80068ea:	fa21 f303 	lsr.w	r3, r1, r3
 80068ee:	4a09      	ldr	r2, [pc, #36]	; (8006914 <HAL_RCC_ClockConfig+0x314>)
 80068f0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80068f2:	4b09      	ldr	r3, [pc, #36]	; (8006918 <HAL_RCC_ClockConfig+0x318>)
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	4618      	mov	r0, r3
 80068f8:	f7fb f8b8 	bl	8001a6c <HAL_InitTick>

  return HAL_OK;
 80068fc:	2300      	movs	r3, #0
}
 80068fe:	4618      	mov	r0, r3
 8006900:	3710      	adds	r7, #16
 8006902:	46bd      	mov	sp, r7
 8006904:	bd80      	pop	{r7, pc}
 8006906:	bf00      	nop
 8006908:	0800d770 	.word	0x0800d770
 800690c:	40023800 	.word	0x40023800
 8006910:	0800d89c 	.word	0x0800d89c
 8006914:	20000400 	.word	0x20000400
 8006918:	20000404 	.word	0x20000404

0800691c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800691c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800691e:	b085      	sub	sp, #20
 8006920:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006922:	2300      	movs	r3, #0
 8006924:	607b      	str	r3, [r7, #4]
 8006926:	2300      	movs	r3, #0
 8006928:	60fb      	str	r3, [r7, #12]
 800692a:	2300      	movs	r3, #0
 800692c:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800692e:	2300      	movs	r3, #0
 8006930:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006932:	4b63      	ldr	r3, [pc, #396]	; (8006ac0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8006934:	689b      	ldr	r3, [r3, #8]
 8006936:	f003 030c 	and.w	r3, r3, #12
 800693a:	2b04      	cmp	r3, #4
 800693c:	d007      	beq.n	800694e <HAL_RCC_GetSysClockFreq+0x32>
 800693e:	2b08      	cmp	r3, #8
 8006940:	d008      	beq.n	8006954 <HAL_RCC_GetSysClockFreq+0x38>
 8006942:	2b00      	cmp	r3, #0
 8006944:	f040 80b4 	bne.w	8006ab0 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006948:	4b5e      	ldr	r3, [pc, #376]	; (8006ac4 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800694a:	60bb      	str	r3, [r7, #8]
       break;
 800694c:	e0b3      	b.n	8006ab6 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800694e:	4b5e      	ldr	r3, [pc, #376]	; (8006ac8 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8006950:	60bb      	str	r3, [r7, #8]
      break;
 8006952:	e0b0      	b.n	8006ab6 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006954:	4b5a      	ldr	r3, [pc, #360]	; (8006ac0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8006956:	685b      	ldr	r3, [r3, #4]
 8006958:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800695c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800695e:	4b58      	ldr	r3, [pc, #352]	; (8006ac0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8006960:	685b      	ldr	r3, [r3, #4]
 8006962:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006966:	2b00      	cmp	r3, #0
 8006968:	d04a      	beq.n	8006a00 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800696a:	4b55      	ldr	r3, [pc, #340]	; (8006ac0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800696c:	685b      	ldr	r3, [r3, #4]
 800696e:	099b      	lsrs	r3, r3, #6
 8006970:	f04f 0400 	mov.w	r4, #0
 8006974:	f240 11ff 	movw	r1, #511	; 0x1ff
 8006978:	f04f 0200 	mov.w	r2, #0
 800697c:	ea03 0501 	and.w	r5, r3, r1
 8006980:	ea04 0602 	and.w	r6, r4, r2
 8006984:	4629      	mov	r1, r5
 8006986:	4632      	mov	r2, r6
 8006988:	f04f 0300 	mov.w	r3, #0
 800698c:	f04f 0400 	mov.w	r4, #0
 8006990:	0154      	lsls	r4, r2, #5
 8006992:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8006996:	014b      	lsls	r3, r1, #5
 8006998:	4619      	mov	r1, r3
 800699a:	4622      	mov	r2, r4
 800699c:	1b49      	subs	r1, r1, r5
 800699e:	eb62 0206 	sbc.w	r2, r2, r6
 80069a2:	f04f 0300 	mov.w	r3, #0
 80069a6:	f04f 0400 	mov.w	r4, #0
 80069aa:	0194      	lsls	r4, r2, #6
 80069ac:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80069b0:	018b      	lsls	r3, r1, #6
 80069b2:	1a5b      	subs	r3, r3, r1
 80069b4:	eb64 0402 	sbc.w	r4, r4, r2
 80069b8:	f04f 0100 	mov.w	r1, #0
 80069bc:	f04f 0200 	mov.w	r2, #0
 80069c0:	00e2      	lsls	r2, r4, #3
 80069c2:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80069c6:	00d9      	lsls	r1, r3, #3
 80069c8:	460b      	mov	r3, r1
 80069ca:	4614      	mov	r4, r2
 80069cc:	195b      	adds	r3, r3, r5
 80069ce:	eb44 0406 	adc.w	r4, r4, r6
 80069d2:	f04f 0100 	mov.w	r1, #0
 80069d6:	f04f 0200 	mov.w	r2, #0
 80069da:	0262      	lsls	r2, r4, #9
 80069dc:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80069e0:	0259      	lsls	r1, r3, #9
 80069e2:	460b      	mov	r3, r1
 80069e4:	4614      	mov	r4, r2
 80069e6:	4618      	mov	r0, r3
 80069e8:	4621      	mov	r1, r4
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	f04f 0400 	mov.w	r4, #0
 80069f0:	461a      	mov	r2, r3
 80069f2:	4623      	mov	r3, r4
 80069f4:	f7f9 fdfc 	bl	80005f0 <__aeabi_uldivmod>
 80069f8:	4603      	mov	r3, r0
 80069fa:	460c      	mov	r4, r1
 80069fc:	60fb      	str	r3, [r7, #12]
 80069fe:	e049      	b.n	8006a94 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006a00:	4b2f      	ldr	r3, [pc, #188]	; (8006ac0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8006a02:	685b      	ldr	r3, [r3, #4]
 8006a04:	099b      	lsrs	r3, r3, #6
 8006a06:	f04f 0400 	mov.w	r4, #0
 8006a0a:	f240 11ff 	movw	r1, #511	; 0x1ff
 8006a0e:	f04f 0200 	mov.w	r2, #0
 8006a12:	ea03 0501 	and.w	r5, r3, r1
 8006a16:	ea04 0602 	and.w	r6, r4, r2
 8006a1a:	4629      	mov	r1, r5
 8006a1c:	4632      	mov	r2, r6
 8006a1e:	f04f 0300 	mov.w	r3, #0
 8006a22:	f04f 0400 	mov.w	r4, #0
 8006a26:	0154      	lsls	r4, r2, #5
 8006a28:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8006a2c:	014b      	lsls	r3, r1, #5
 8006a2e:	4619      	mov	r1, r3
 8006a30:	4622      	mov	r2, r4
 8006a32:	1b49      	subs	r1, r1, r5
 8006a34:	eb62 0206 	sbc.w	r2, r2, r6
 8006a38:	f04f 0300 	mov.w	r3, #0
 8006a3c:	f04f 0400 	mov.w	r4, #0
 8006a40:	0194      	lsls	r4, r2, #6
 8006a42:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8006a46:	018b      	lsls	r3, r1, #6
 8006a48:	1a5b      	subs	r3, r3, r1
 8006a4a:	eb64 0402 	sbc.w	r4, r4, r2
 8006a4e:	f04f 0100 	mov.w	r1, #0
 8006a52:	f04f 0200 	mov.w	r2, #0
 8006a56:	00e2      	lsls	r2, r4, #3
 8006a58:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8006a5c:	00d9      	lsls	r1, r3, #3
 8006a5e:	460b      	mov	r3, r1
 8006a60:	4614      	mov	r4, r2
 8006a62:	195b      	adds	r3, r3, r5
 8006a64:	eb44 0406 	adc.w	r4, r4, r6
 8006a68:	f04f 0100 	mov.w	r1, #0
 8006a6c:	f04f 0200 	mov.w	r2, #0
 8006a70:	02a2      	lsls	r2, r4, #10
 8006a72:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8006a76:	0299      	lsls	r1, r3, #10
 8006a78:	460b      	mov	r3, r1
 8006a7a:	4614      	mov	r4, r2
 8006a7c:	4618      	mov	r0, r3
 8006a7e:	4621      	mov	r1, r4
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	f04f 0400 	mov.w	r4, #0
 8006a86:	461a      	mov	r2, r3
 8006a88:	4623      	mov	r3, r4
 8006a8a:	f7f9 fdb1 	bl	80005f0 <__aeabi_uldivmod>
 8006a8e:	4603      	mov	r3, r0
 8006a90:	460c      	mov	r4, r1
 8006a92:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006a94:	4b0a      	ldr	r3, [pc, #40]	; (8006ac0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8006a96:	685b      	ldr	r3, [r3, #4]
 8006a98:	0c1b      	lsrs	r3, r3, #16
 8006a9a:	f003 0303 	and.w	r3, r3, #3
 8006a9e:	3301      	adds	r3, #1
 8006aa0:	005b      	lsls	r3, r3, #1
 8006aa2:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8006aa4:	68fa      	ldr	r2, [r7, #12]
 8006aa6:	683b      	ldr	r3, [r7, #0]
 8006aa8:	fbb2 f3f3 	udiv	r3, r2, r3
 8006aac:	60bb      	str	r3, [r7, #8]
      break;
 8006aae:	e002      	b.n	8006ab6 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006ab0:	4b04      	ldr	r3, [pc, #16]	; (8006ac4 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8006ab2:	60bb      	str	r3, [r7, #8]
      break;
 8006ab4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006ab6:	68bb      	ldr	r3, [r7, #8]
}
 8006ab8:	4618      	mov	r0, r3
 8006aba:	3714      	adds	r7, #20
 8006abc:	46bd      	mov	sp, r7
 8006abe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006ac0:	40023800 	.word	0x40023800
 8006ac4:	00f42400 	.word	0x00f42400
 8006ac8:	007a1200 	.word	0x007a1200

08006acc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006acc:	b480      	push	{r7}
 8006ace:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006ad0:	4b03      	ldr	r3, [pc, #12]	; (8006ae0 <HAL_RCC_GetHCLKFreq+0x14>)
 8006ad2:	681b      	ldr	r3, [r3, #0]
}
 8006ad4:	4618      	mov	r0, r3
 8006ad6:	46bd      	mov	sp, r7
 8006ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006adc:	4770      	bx	lr
 8006ade:	bf00      	nop
 8006ae0:	20000400 	.word	0x20000400

08006ae4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006ae4:	b580      	push	{r7, lr}
 8006ae6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006ae8:	f7ff fff0 	bl	8006acc <HAL_RCC_GetHCLKFreq>
 8006aec:	4601      	mov	r1, r0
 8006aee:	4b05      	ldr	r3, [pc, #20]	; (8006b04 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006af0:	689b      	ldr	r3, [r3, #8]
 8006af2:	0a9b      	lsrs	r3, r3, #10
 8006af4:	f003 0307 	and.w	r3, r3, #7
 8006af8:	4a03      	ldr	r2, [pc, #12]	; (8006b08 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006afa:	5cd3      	ldrb	r3, [r2, r3]
 8006afc:	fa21 f303 	lsr.w	r3, r1, r3
}
 8006b00:	4618      	mov	r0, r3
 8006b02:	bd80      	pop	{r7, pc}
 8006b04:	40023800 	.word	0x40023800
 8006b08:	0800d8ac 	.word	0x0800d8ac

08006b0c <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006b0c:	b580      	push	{r7, lr}
 8006b0e:	b086      	sub	sp, #24
 8006b10:	af00      	add	r7, sp, #0
 8006b12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006b14:	2300      	movs	r3, #0
 8006b16:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8006b18:	2300      	movs	r3, #0
 8006b1a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d003      	beq.n	8006b2c <HAL_RCCEx_PeriphCLKConfig+0x20>
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	2b0f      	cmp	r3, #15
 8006b2a:	d904      	bls.n	8006b36 <HAL_RCCEx_PeriphCLKConfig+0x2a>
 8006b2c:	f640 11d9 	movw	r1, #2521	; 0x9d9
 8006b30:	489d      	ldr	r0, [pc, #628]	; (8006da8 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8006b32:	f7fa fdfc 	bl	800172e <assert_failed>

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	f003 0301 	and.w	r3, r3, #1
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d105      	bne.n	8006b4e <HAL_RCCEx_PeriphCLKConfig+0x42>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d060      	beq.n	8006c10 <HAL_RCCEx_PeriphCLKConfig+0x104>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	68db      	ldr	r3, [r3, #12]
 8006b52:	2b01      	cmp	r3, #1
 8006b54:	d903      	bls.n	8006b5e <HAL_RCCEx_PeriphCLKConfig+0x52>
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	68db      	ldr	r3, [r3, #12]
 8006b5a:	2b07      	cmp	r3, #7
 8006b5c:	d904      	bls.n	8006b68 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8006b5e:	f44f 611e 	mov.w	r1, #2528	; 0x9e0
 8006b62:	4891      	ldr	r0, [pc, #580]	; (8006da8 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8006b64:	f7fa fde3 	bl	800172e <assert_failed>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	689b      	ldr	r3, [r3, #8]
 8006b6c:	2bbf      	cmp	r3, #191	; 0xbf
 8006b6e:	d904      	bls.n	8006b7a <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	689b      	ldr	r3, [r3, #8]
 8006b74:	f5b3 7fd8 	cmp.w	r3, #432	; 0x1b0
 8006b78:	d904      	bls.n	8006b84 <HAL_RCCEx_PeriphCLKConfig+0x78>
 8006b7a:	f640 11e1 	movw	r1, #2529	; 0x9e1
 8006b7e:	488a      	ldr	r0, [pc, #552]	; (8006da8 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8006b80:	f7fa fdd5 	bl	800172e <assert_failed>
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	685b      	ldr	r3, [r3, #4]
 8006b88:	2b01      	cmp	r3, #1
 8006b8a:	d903      	bls.n	8006b94 <HAL_RCCEx_PeriphCLKConfig+0x88>
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	685b      	ldr	r3, [r3, #4]
 8006b90:	2b3f      	cmp	r3, #63	; 0x3f
 8006b92:	d904      	bls.n	8006b9e <HAL_RCCEx_PeriphCLKConfig+0x92>
 8006b94:	f640 11e3 	movw	r1, #2531	; 0x9e3
 8006b98:	4883      	ldr	r0, [pc, #524]	; (8006da8 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8006b9a:	f7fa fdc8 	bl	800172e <assert_failed>
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8006b9e:	4b83      	ldr	r3, [pc, #524]	; (8006dac <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 8006ba0:	2200      	movs	r2, #0
 8006ba2:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006ba4:	f7fa ffa6 	bl	8001af4 <HAL_GetTick>
 8006ba8:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006baa:	e008      	b.n	8006bbe <HAL_RCCEx_PeriphCLKConfig+0xb2>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8006bac:	f7fa ffa2 	bl	8001af4 <HAL_GetTick>
 8006bb0:	4602      	mov	r2, r0
 8006bb2:	697b      	ldr	r3, [r7, #20]
 8006bb4:	1ad3      	subs	r3, r2, r3
 8006bb6:	2b02      	cmp	r3, #2
 8006bb8:	d901      	bls.n	8006bbe <HAL_RCCEx_PeriphCLKConfig+0xb2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006bba:	2303      	movs	r3, #3
 8006bbc:	e1ae      	b.n	8006f1c <HAL_RCCEx_PeriphCLKConfig+0x410>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006bbe:	4b7c      	ldr	r3, [pc, #496]	; (8006db0 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d1f0      	bne.n	8006bac <HAL_RCCEx_PeriphCLKConfig+0xa0>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	685a      	ldr	r2, [r3, #4]
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	689b      	ldr	r3, [r3, #8]
 8006bd2:	019b      	lsls	r3, r3, #6
 8006bd4:	431a      	orrs	r2, r3
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	68db      	ldr	r3, [r3, #12]
 8006bda:	071b      	lsls	r3, r3, #28
 8006bdc:	4974      	ldr	r1, [pc, #464]	; (8006db0 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 8006bde:	4313      	orrs	r3, r2
 8006be0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8006be4:	4b71      	ldr	r3, [pc, #452]	; (8006dac <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 8006be6:	2201      	movs	r2, #1
 8006be8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006bea:	f7fa ff83 	bl	8001af4 <HAL_GetTick>
 8006bee:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006bf0:	e008      	b.n	8006c04 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8006bf2:	f7fa ff7f 	bl	8001af4 <HAL_GetTick>
 8006bf6:	4602      	mov	r2, r0
 8006bf8:	697b      	ldr	r3, [r7, #20]
 8006bfa:	1ad3      	subs	r3, r2, r3
 8006bfc:	2b02      	cmp	r3, #2
 8006bfe:	d901      	bls.n	8006c04 <HAL_RCCEx_PeriphCLKConfig+0xf8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006c00:	2303      	movs	r3, #3
 8006c02:	e18b      	b.n	8006f1c <HAL_RCCEx_PeriphCLKConfig+0x410>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006c04:	4b6a      	ldr	r3, [pc, #424]	; (8006db0 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d0f0      	beq.n	8006bf2 <HAL_RCCEx_PeriphCLKConfig+0xe6>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	f003 0302 	and.w	r3, r3, #2
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	f000 8174 	beq.w	8006f06 <HAL_RCCEx_PeriphCLKConfig+0x3fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	691b      	ldr	r3, [r3, #16]
 8006c22:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006c26:	f000 80a6 	beq.w	8006d76 <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	691b      	ldr	r3, [r3, #16]
 8006c2e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006c32:	f000 80a0 	beq.w	8006d76 <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	691b      	ldr	r3, [r3, #16]
 8006c3a:	4a5e      	ldr	r2, [pc, #376]	; (8006db4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 8006c3c:	4293      	cmp	r3, r2
 8006c3e:	f000 809a 	beq.w	8006d76 <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	691b      	ldr	r3, [r3, #16]
 8006c46:	4a5c      	ldr	r2, [pc, #368]	; (8006db8 <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 8006c48:	4293      	cmp	r3, r2
 8006c4a:	f000 8094 	beq.w	8006d76 <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	691b      	ldr	r3, [r3, #16]
 8006c52:	4a5a      	ldr	r2, [pc, #360]	; (8006dbc <HAL_RCCEx_PeriphCLKConfig+0x2b0>)
 8006c54:	4293      	cmp	r3, r2
 8006c56:	f000 808e 	beq.w	8006d76 <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	691b      	ldr	r3, [r3, #16]
 8006c5e:	4a58      	ldr	r2, [pc, #352]	; (8006dc0 <HAL_RCCEx_PeriphCLKConfig+0x2b4>)
 8006c60:	4293      	cmp	r3, r2
 8006c62:	f000 8088 	beq.w	8006d76 <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	691b      	ldr	r3, [r3, #16]
 8006c6a:	4a56      	ldr	r2, [pc, #344]	; (8006dc4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8006c6c:	4293      	cmp	r3, r2
 8006c6e:	f000 8082 	beq.w	8006d76 <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	691b      	ldr	r3, [r3, #16]
 8006c76:	4a54      	ldr	r2, [pc, #336]	; (8006dc8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8006c78:	4293      	cmp	r3, r2
 8006c7a:	d07c      	beq.n	8006d76 <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	691b      	ldr	r3, [r3, #16]
 8006c80:	4a52      	ldr	r2, [pc, #328]	; (8006dcc <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8006c82:	4293      	cmp	r3, r2
 8006c84:	d077      	beq.n	8006d76 <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	691b      	ldr	r3, [r3, #16]
 8006c8a:	4a51      	ldr	r2, [pc, #324]	; (8006dd0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8006c8c:	4293      	cmp	r3, r2
 8006c8e:	d072      	beq.n	8006d76 <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	691b      	ldr	r3, [r3, #16]
 8006c94:	4a4f      	ldr	r2, [pc, #316]	; (8006dd4 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8006c96:	4293      	cmp	r3, r2
 8006c98:	d06d      	beq.n	8006d76 <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	691b      	ldr	r3, [r3, #16]
 8006c9e:	4a4e      	ldr	r2, [pc, #312]	; (8006dd8 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8006ca0:	4293      	cmp	r3, r2
 8006ca2:	d068      	beq.n	8006d76 <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	691b      	ldr	r3, [r3, #16]
 8006ca8:	4a4c      	ldr	r2, [pc, #304]	; (8006ddc <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 8006caa:	4293      	cmp	r3, r2
 8006cac:	d063      	beq.n	8006d76 <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	691b      	ldr	r3, [r3, #16]
 8006cb2:	4a4b      	ldr	r2, [pc, #300]	; (8006de0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8006cb4:	4293      	cmp	r3, r2
 8006cb6:	d05e      	beq.n	8006d76 <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	691b      	ldr	r3, [r3, #16]
 8006cbc:	4a49      	ldr	r2, [pc, #292]	; (8006de4 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8006cbe:	4293      	cmp	r3, r2
 8006cc0:	d059      	beq.n	8006d76 <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	691b      	ldr	r3, [r3, #16]
 8006cc6:	4a48      	ldr	r2, [pc, #288]	; (8006de8 <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 8006cc8:	4293      	cmp	r3, r2
 8006cca:	d054      	beq.n	8006d76 <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	691b      	ldr	r3, [r3, #16]
 8006cd0:	4a46      	ldr	r2, [pc, #280]	; (8006dec <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8006cd2:	4293      	cmp	r3, r2
 8006cd4:	d04f      	beq.n	8006d76 <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	691b      	ldr	r3, [r3, #16]
 8006cda:	4a45      	ldr	r2, [pc, #276]	; (8006df0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8006cdc:	4293      	cmp	r3, r2
 8006cde:	d04a      	beq.n	8006d76 <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	691b      	ldr	r3, [r3, #16]
 8006ce4:	4a43      	ldr	r2, [pc, #268]	; (8006df4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8006ce6:	4293      	cmp	r3, r2
 8006ce8:	d045      	beq.n	8006d76 <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	691b      	ldr	r3, [r3, #16]
 8006cee:	4a42      	ldr	r2, [pc, #264]	; (8006df8 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8006cf0:	4293      	cmp	r3, r2
 8006cf2:	d040      	beq.n	8006d76 <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	691b      	ldr	r3, [r3, #16]
 8006cf8:	4a40      	ldr	r2, [pc, #256]	; (8006dfc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006cfa:	4293      	cmp	r3, r2
 8006cfc:	d03b      	beq.n	8006d76 <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	691b      	ldr	r3, [r3, #16]
 8006d02:	4a3f      	ldr	r2, [pc, #252]	; (8006e00 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006d04:	4293      	cmp	r3, r2
 8006d06:	d036      	beq.n	8006d76 <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	691b      	ldr	r3, [r3, #16]
 8006d0c:	4a3d      	ldr	r2, [pc, #244]	; (8006e04 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8006d0e:	4293      	cmp	r3, r2
 8006d10:	d031      	beq.n	8006d76 <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	691b      	ldr	r3, [r3, #16]
 8006d16:	4a3c      	ldr	r2, [pc, #240]	; (8006e08 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8006d18:	4293      	cmp	r3, r2
 8006d1a:	d02c      	beq.n	8006d76 <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	691b      	ldr	r3, [r3, #16]
 8006d20:	4a3a      	ldr	r2, [pc, #232]	; (8006e0c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006d22:	4293      	cmp	r3, r2
 8006d24:	d027      	beq.n	8006d76 <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	691b      	ldr	r3, [r3, #16]
 8006d2a:	4a39      	ldr	r2, [pc, #228]	; (8006e10 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006d2c:	4293      	cmp	r3, r2
 8006d2e:	d022      	beq.n	8006d76 <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	691b      	ldr	r3, [r3, #16]
 8006d34:	4a37      	ldr	r2, [pc, #220]	; (8006e14 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8006d36:	4293      	cmp	r3, r2
 8006d38:	d01d      	beq.n	8006d76 <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	691b      	ldr	r3, [r3, #16]
 8006d3e:	4a36      	ldr	r2, [pc, #216]	; (8006e18 <HAL_RCCEx_PeriphCLKConfig+0x30c>)
 8006d40:	4293      	cmp	r3, r2
 8006d42:	d018      	beq.n	8006d76 <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	691b      	ldr	r3, [r3, #16]
 8006d48:	4a34      	ldr	r2, [pc, #208]	; (8006e1c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8006d4a:	4293      	cmp	r3, r2
 8006d4c:	d013      	beq.n	8006d76 <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	691b      	ldr	r3, [r3, #16]
 8006d52:	4a33      	ldr	r2, [pc, #204]	; (8006e20 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8006d54:	4293      	cmp	r3, r2
 8006d56:	d00e      	beq.n	8006d76 <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	691b      	ldr	r3, [r3, #16]
 8006d5c:	4a31      	ldr	r2, [pc, #196]	; (8006e24 <HAL_RCCEx_PeriphCLKConfig+0x318>)
 8006d5e:	4293      	cmp	r3, r2
 8006d60:	d009      	beq.n	8006d76 <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	691b      	ldr	r3, [r3, #16]
 8006d66:	4a30      	ldr	r2, [pc, #192]	; (8006e28 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 8006d68:	4293      	cmp	r3, r2
 8006d6a:	d004      	beq.n	8006d76 <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8006d6c:	f640 2112 	movw	r1, #2578	; 0xa12
 8006d70:	480d      	ldr	r0, [pc, #52]	; (8006da8 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8006d72:	f7fa fcdc 	bl	800172e <assert_failed>

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8006d76:	2300      	movs	r3, #0
 8006d78:	60fb      	str	r3, [r7, #12]
 8006d7a:	4b0d      	ldr	r3, [pc, #52]	; (8006db0 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 8006d7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d7e:	4a0c      	ldr	r2, [pc, #48]	; (8006db0 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 8006d80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006d84:	6413      	str	r3, [r2, #64]	; 0x40
 8006d86:	4b0a      	ldr	r3, [pc, #40]	; (8006db0 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 8006d88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006d8e:	60fb      	str	r3, [r7, #12]
 8006d90:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8006d92:	4b26      	ldr	r3, [pc, #152]	; (8006e2c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	4a25      	ldr	r2, [pc, #148]	; (8006e2c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8006d98:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006d9c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006d9e:	f7fa fea9 	bl	8001af4 <HAL_GetTick>
 8006da2:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8006da4:	e04d      	b.n	8006e42 <HAL_RCCEx_PeriphCLKConfig+0x336>
 8006da6:	bf00      	nop
 8006da8:	0800d7a8 	.word	0x0800d7a8
 8006dac:	42470068 	.word	0x42470068
 8006db0:	40023800 	.word	0x40023800
 8006db4:	00020300 	.word	0x00020300
 8006db8:	00030300 	.word	0x00030300
 8006dbc:	00040300 	.word	0x00040300
 8006dc0:	00050300 	.word	0x00050300
 8006dc4:	00060300 	.word	0x00060300
 8006dc8:	00070300 	.word	0x00070300
 8006dcc:	00080300 	.word	0x00080300
 8006dd0:	00090300 	.word	0x00090300
 8006dd4:	000a0300 	.word	0x000a0300
 8006dd8:	000b0300 	.word	0x000b0300
 8006ddc:	000c0300 	.word	0x000c0300
 8006de0:	000d0300 	.word	0x000d0300
 8006de4:	000e0300 	.word	0x000e0300
 8006de8:	000f0300 	.word	0x000f0300
 8006dec:	00100300 	.word	0x00100300
 8006df0:	00110300 	.word	0x00110300
 8006df4:	00120300 	.word	0x00120300
 8006df8:	00130300 	.word	0x00130300
 8006dfc:	00140300 	.word	0x00140300
 8006e00:	00150300 	.word	0x00150300
 8006e04:	00160300 	.word	0x00160300
 8006e08:	00170300 	.word	0x00170300
 8006e0c:	00180300 	.word	0x00180300
 8006e10:	00190300 	.word	0x00190300
 8006e14:	001a0300 	.word	0x001a0300
 8006e18:	001b0300 	.word	0x001b0300
 8006e1c:	001c0300 	.word	0x001c0300
 8006e20:	001d0300 	.word	0x001d0300
 8006e24:	001e0300 	.word	0x001e0300
 8006e28:	001f0300 	.word	0x001f0300
 8006e2c:	40007000 	.word	0x40007000
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8006e30:	f7fa fe60 	bl	8001af4 <HAL_GetTick>
 8006e34:	4602      	mov	r2, r0
 8006e36:	697b      	ldr	r3, [r7, #20]
 8006e38:	1ad3      	subs	r3, r2, r3
 8006e3a:	2b02      	cmp	r3, #2
 8006e3c:	d901      	bls.n	8006e42 <HAL_RCCEx_PeriphCLKConfig+0x336>
      {
        return HAL_TIMEOUT;
 8006e3e:	2303      	movs	r3, #3
 8006e40:	e06c      	b.n	8006f1c <HAL_RCCEx_PeriphCLKConfig+0x410>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8006e42:	4b38      	ldr	r3, [pc, #224]	; (8006f24 <HAL_RCCEx_PeriphCLKConfig+0x418>)
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d0f0      	beq.n	8006e30 <HAL_RCCEx_PeriphCLKConfig+0x324>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006e4e:	4b36      	ldr	r3, [pc, #216]	; (8006f28 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8006e50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e52:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006e56:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006e58:	693b      	ldr	r3, [r7, #16]
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d02f      	beq.n	8006ebe <HAL_RCCEx_PeriphCLKConfig+0x3b2>
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	691b      	ldr	r3, [r3, #16]
 8006e62:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006e66:	693a      	ldr	r2, [r7, #16]
 8006e68:	429a      	cmp	r2, r3
 8006e6a:	d028      	beq.n	8006ebe <HAL_RCCEx_PeriphCLKConfig+0x3b2>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006e6c:	4b2e      	ldr	r3, [pc, #184]	; (8006f28 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8006e6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e70:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006e74:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006e76:	4b2d      	ldr	r3, [pc, #180]	; (8006f2c <HAL_RCCEx_PeriphCLKConfig+0x420>)
 8006e78:	2201      	movs	r2, #1
 8006e7a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006e7c:	4b2b      	ldr	r3, [pc, #172]	; (8006f2c <HAL_RCCEx_PeriphCLKConfig+0x420>)
 8006e7e:	2200      	movs	r2, #0
 8006e80:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8006e82:	4a29      	ldr	r2, [pc, #164]	; (8006f28 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8006e84:	693b      	ldr	r3, [r7, #16]
 8006e86:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8006e88:	4b27      	ldr	r3, [pc, #156]	; (8006f28 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8006e8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e8c:	f003 0301 	and.w	r3, r3, #1
 8006e90:	2b01      	cmp	r3, #1
 8006e92:	d114      	bne.n	8006ebe <HAL_RCCEx_PeriphCLKConfig+0x3b2>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8006e94:	f7fa fe2e 	bl	8001af4 <HAL_GetTick>
 8006e98:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006e9a:	e00a      	b.n	8006eb2 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006e9c:	f7fa fe2a 	bl	8001af4 <HAL_GetTick>
 8006ea0:	4602      	mov	r2, r0
 8006ea2:	697b      	ldr	r3, [r7, #20]
 8006ea4:	1ad3      	subs	r3, r2, r3
 8006ea6:	f241 3288 	movw	r2, #5000	; 0x1388
 8006eaa:	4293      	cmp	r3, r2
 8006eac:	d901      	bls.n	8006eb2 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
          {
            return HAL_TIMEOUT;
 8006eae:	2303      	movs	r3, #3
 8006eb0:	e034      	b.n	8006f1c <HAL_RCCEx_PeriphCLKConfig+0x410>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006eb2:	4b1d      	ldr	r3, [pc, #116]	; (8006f28 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8006eb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006eb6:	f003 0302 	and.w	r3, r3, #2
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d0ee      	beq.n	8006e9c <HAL_RCCEx_PeriphCLKConfig+0x390>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	691b      	ldr	r3, [r3, #16]
 8006ec2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006ec6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006eca:	d10d      	bne.n	8006ee8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
 8006ecc:	4b16      	ldr	r3, [pc, #88]	; (8006f28 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8006ece:	689b      	ldr	r3, [r3, #8]
 8006ed0:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	691b      	ldr	r3, [r3, #16]
 8006ed8:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8006edc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006ee0:	4911      	ldr	r1, [pc, #68]	; (8006f28 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8006ee2:	4313      	orrs	r3, r2
 8006ee4:	608b      	str	r3, [r1, #8]
 8006ee6:	e005      	b.n	8006ef4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8006ee8:	4b0f      	ldr	r3, [pc, #60]	; (8006f28 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8006eea:	689b      	ldr	r3, [r3, #8]
 8006eec:	4a0e      	ldr	r2, [pc, #56]	; (8006f28 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8006eee:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8006ef2:	6093      	str	r3, [r2, #8]
 8006ef4:	4b0c      	ldr	r3, [pc, #48]	; (8006f28 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8006ef6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	691b      	ldr	r3, [r3, #16]
 8006efc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006f00:	4909      	ldr	r1, [pc, #36]	; (8006f28 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8006f02:	4313      	orrs	r3, r2
 8006f04:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	f003 0308 	and.w	r3, r3, #8
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d003      	beq.n	8006f1a <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	7d1a      	ldrb	r2, [r3, #20]
 8006f16:	4b06      	ldr	r3, [pc, #24]	; (8006f30 <HAL_RCCEx_PeriphCLKConfig+0x424>)
 8006f18:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8006f1a:	2300      	movs	r3, #0
}
 8006f1c:	4618      	mov	r0, r3
 8006f1e:	3718      	adds	r7, #24
 8006f20:	46bd      	mov	sp, r7
 8006f22:	bd80      	pop	{r7, pc}
 8006f24:	40007000 	.word	0x40007000
 8006f28:	40023800 	.word	0x40023800
 8006f2c:	42470e40 	.word	0x42470e40
 8006f30:	424711e0 	.word	0x424711e0

08006f34 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8006f34:	b480      	push	{r7}
 8006f36:	b087      	sub	sp, #28
 8006f38:	af00      	add	r7, sp, #0
 8006f3a:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8006f3c:	2300      	movs	r3, #0
 8006f3e:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8006f40:	2300      	movs	r3, #0
 8006f42:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8006f44:	2300      	movs	r3, #0
 8006f46:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8006f48:	2300      	movs	r3, #0
 8006f4a:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	2b01      	cmp	r3, #1
 8006f50:	d13f      	bne.n	8006fd2 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8006f52:	4b23      	ldr	r3, [pc, #140]	; (8006fe0 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8006f54:	689b      	ldr	r3, [r3, #8]
 8006f56:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006f5a:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d004      	beq.n	8006f6c <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8006f62:	2b01      	cmp	r3, #1
 8006f64:	d131      	bne.n	8006fca <HAL_RCCEx_GetPeriphCLKFreq+0x96>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8006f66:	4b1f      	ldr	r3, [pc, #124]	; (8006fe4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8006f68:	617b      	str	r3, [r7, #20]
          break;
 8006f6a:	e031      	b.n	8006fd0 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
      case RCC_I2SCLKSOURCE_PLLI2S:
        {
#if defined(STM32F411xE)
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8006f6c:	4b1c      	ldr	r3, [pc, #112]	; (8006fe0 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8006f6e:	685b      	ldr	r3, [r3, #4]
 8006f70:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006f74:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006f78:	d109      	bne.n	8006f8e <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8006f7a:	4b19      	ldr	r3, [pc, #100]	; (8006fe0 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8006f7c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006f80:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006f84:	4a18      	ldr	r2, [pc, #96]	; (8006fe8 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8006f86:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f8a:	613b      	str	r3, [r7, #16]
 8006f8c:	e008      	b.n	8006fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x6c>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8006f8e:	4b14      	ldr	r3, [pc, #80]	; (8006fe0 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8006f90:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006f94:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006f98:	4a14      	ldr	r2, [pc, #80]	; (8006fec <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8006f9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f9e:	613b      	str	r3, [r7, #16]
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8006fa0:	4b0f      	ldr	r3, [pc, #60]	; (8006fe0 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8006fa2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006fa6:	099b      	lsrs	r3, r3, #6
 8006fa8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006fac:	693b      	ldr	r3, [r7, #16]
 8006fae:	fb02 f303 	mul.w	r3, r2, r3
 8006fb2:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8006fb4:	4b0a      	ldr	r3, [pc, #40]	; (8006fe0 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8006fb6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006fba:	0f1b      	lsrs	r3, r3, #28
 8006fbc:	f003 0307 	and.w	r3, r3, #7
 8006fc0:	68ba      	ldr	r2, [r7, #8]
 8006fc2:	fbb2 f3f3 	udiv	r3, r2, r3
 8006fc6:	617b      	str	r3, [r7, #20]
          break;
 8006fc8:	e002      	b.n	8006fd0 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8006fca:	2300      	movs	r3, #0
 8006fcc:	617b      	str	r3, [r7, #20]
          break;
 8006fce:	bf00      	nop
        }
      }
      break;
 8006fd0:	bf00      	nop
    }
  }
  return frequency;
 8006fd2:	697b      	ldr	r3, [r7, #20]
}
 8006fd4:	4618      	mov	r0, r3
 8006fd6:	371c      	adds	r7, #28
 8006fd8:	46bd      	mov	sp, r7
 8006fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fde:	4770      	bx	lr
 8006fe0:	40023800 	.word	0x40023800
 8006fe4:	00bb8000 	.word	0x00bb8000
 8006fe8:	007a1200 	.word	0x007a1200
 8006fec:	00f42400 	.word	0x00f42400

08006ff0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006ff0:	b580      	push	{r7, lr}
 8006ff2:	b082      	sub	sp, #8
 8006ff4:	af00      	add	r7, sp, #0
 8006ff6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d101      	bne.n	8007002 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006ffe:	2301      	movs	r3, #1
 8007000:	e113      	b.n	800722a <HAL_SPI_Init+0x23a>
  }

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	4a8b      	ldr	r2, [pc, #556]	; (8007234 <HAL_SPI_Init+0x244>)
 8007008:	4293      	cmp	r3, r2
 800700a:	d018      	beq.n	800703e <HAL_SPI_Init+0x4e>
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	4a89      	ldr	r2, [pc, #548]	; (8007238 <HAL_SPI_Init+0x248>)
 8007012:	4293      	cmp	r3, r2
 8007014:	d013      	beq.n	800703e <HAL_SPI_Init+0x4e>
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	4a88      	ldr	r2, [pc, #544]	; (800723c <HAL_SPI_Init+0x24c>)
 800701c:	4293      	cmp	r3, r2
 800701e:	d00e      	beq.n	800703e <HAL_SPI_Init+0x4e>
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	4a86      	ldr	r2, [pc, #536]	; (8007240 <HAL_SPI_Init+0x250>)
 8007026:	4293      	cmp	r3, r2
 8007028:	d009      	beq.n	800703e <HAL_SPI_Init+0x4e>
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	4a85      	ldr	r2, [pc, #532]	; (8007244 <HAL_SPI_Init+0x254>)
 8007030:	4293      	cmp	r3, r2
 8007032:	d004      	beq.n	800703e <HAL_SPI_Init+0x4e>
 8007034:	f44f 71a1 	mov.w	r1, #322	; 0x142
 8007038:	4883      	ldr	r0, [pc, #524]	; (8007248 <HAL_SPI_Init+0x258>)
 800703a:	f7fa fb78 	bl	800172e <assert_failed>
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	685b      	ldr	r3, [r3, #4]
 8007042:	2b00      	cmp	r3, #0
 8007044:	d009      	beq.n	800705a <HAL_SPI_Init+0x6a>
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	685b      	ldr	r3, [r3, #4]
 800704a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800704e:	d004      	beq.n	800705a <HAL_SPI_Init+0x6a>
 8007050:	f240 1143 	movw	r1, #323	; 0x143
 8007054:	487c      	ldr	r0, [pc, #496]	; (8007248 <HAL_SPI_Init+0x258>)
 8007056:	f7fa fb6a 	bl	800172e <assert_failed>
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	689b      	ldr	r3, [r3, #8]
 800705e:	2b00      	cmp	r3, #0
 8007060:	d00e      	beq.n	8007080 <HAL_SPI_Init+0x90>
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	689b      	ldr	r3, [r3, #8]
 8007066:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800706a:	d009      	beq.n	8007080 <HAL_SPI_Init+0x90>
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	689b      	ldr	r3, [r3, #8]
 8007070:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007074:	d004      	beq.n	8007080 <HAL_SPI_Init+0x90>
 8007076:	f44f 71a2 	mov.w	r1, #324	; 0x144
 800707a:	4873      	ldr	r0, [pc, #460]	; (8007248 <HAL_SPI_Init+0x258>)
 800707c:	f7fa fb57 	bl	800172e <assert_failed>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	68db      	ldr	r3, [r3, #12]
 8007084:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007088:	d008      	beq.n	800709c <HAL_SPI_Init+0xac>
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	68db      	ldr	r3, [r3, #12]
 800708e:	2b00      	cmp	r3, #0
 8007090:	d004      	beq.n	800709c <HAL_SPI_Init+0xac>
 8007092:	f240 1145 	movw	r1, #325	; 0x145
 8007096:	486c      	ldr	r0, [pc, #432]	; (8007248 <HAL_SPI_Init+0x258>)
 8007098:	f7fa fb49 	bl	800172e <assert_failed>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	699b      	ldr	r3, [r3, #24]
 80070a0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80070a4:	d00d      	beq.n	80070c2 <HAL_SPI_Init+0xd2>
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	699b      	ldr	r3, [r3, #24]
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d009      	beq.n	80070c2 <HAL_SPI_Init+0xd2>
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	699b      	ldr	r3, [r3, #24]
 80070b2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80070b6:	d004      	beq.n	80070c2 <HAL_SPI_Init+0xd2>
 80070b8:	f44f 71a3 	mov.w	r1, #326	; 0x146
 80070bc:	4862      	ldr	r0, [pc, #392]	; (8007248 <HAL_SPI_Init+0x258>)
 80070be:	f7fa fb36 	bl	800172e <assert_failed>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	69db      	ldr	r3, [r3, #28]
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d020      	beq.n	800710c <HAL_SPI_Init+0x11c>
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	69db      	ldr	r3, [r3, #28]
 80070ce:	2b08      	cmp	r3, #8
 80070d0:	d01c      	beq.n	800710c <HAL_SPI_Init+0x11c>
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	69db      	ldr	r3, [r3, #28]
 80070d6:	2b10      	cmp	r3, #16
 80070d8:	d018      	beq.n	800710c <HAL_SPI_Init+0x11c>
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	69db      	ldr	r3, [r3, #28]
 80070de:	2b18      	cmp	r3, #24
 80070e0:	d014      	beq.n	800710c <HAL_SPI_Init+0x11c>
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	69db      	ldr	r3, [r3, #28]
 80070e6:	2b20      	cmp	r3, #32
 80070e8:	d010      	beq.n	800710c <HAL_SPI_Init+0x11c>
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	69db      	ldr	r3, [r3, #28]
 80070ee:	2b28      	cmp	r3, #40	; 0x28
 80070f0:	d00c      	beq.n	800710c <HAL_SPI_Init+0x11c>
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	69db      	ldr	r3, [r3, #28]
 80070f6:	2b30      	cmp	r3, #48	; 0x30
 80070f8:	d008      	beq.n	800710c <HAL_SPI_Init+0x11c>
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	69db      	ldr	r3, [r3, #28]
 80070fe:	2b38      	cmp	r3, #56	; 0x38
 8007100:	d004      	beq.n	800710c <HAL_SPI_Init+0x11c>
 8007102:	f240 1147 	movw	r1, #327	; 0x147
 8007106:	4850      	ldr	r0, [pc, #320]	; (8007248 <HAL_SPI_Init+0x258>)
 8007108:	f7fa fb11 	bl	800172e <assert_failed>
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	6a1b      	ldr	r3, [r3, #32]
 8007110:	2b00      	cmp	r3, #0
 8007112:	d008      	beq.n	8007126 <HAL_SPI_Init+0x136>
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	6a1b      	ldr	r3, [r3, #32]
 8007118:	2b80      	cmp	r3, #128	; 0x80
 800711a:	d004      	beq.n	8007126 <HAL_SPI_Init+0x136>
 800711c:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8007120:	4849      	ldr	r0, [pc, #292]	; (8007248 <HAL_SPI_Init+0x258>)
 8007122:	f7fa fb04 	bl	800172e <assert_failed>
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800712a:	2b00      	cmp	r3, #0
 800712c:	d008      	beq.n	8007140 <HAL_SPI_Init+0x150>
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007132:	2b10      	cmp	r3, #16
 8007134:	d004      	beq.n	8007140 <HAL_SPI_Init+0x150>
 8007136:	f240 1149 	movw	r1, #329	; 0x149
 800713a:	4843      	ldr	r0, [pc, #268]	; (8007248 <HAL_SPI_Init+0x258>)
 800713c:	f7fa faf7 	bl	800172e <assert_failed>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007144:	2b00      	cmp	r3, #0
 8007146:	d119      	bne.n	800717c <HAL_SPI_Init+0x18c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	691b      	ldr	r3, [r3, #16]
 800714c:	2b00      	cmp	r3, #0
 800714e:	d008      	beq.n	8007162 <HAL_SPI_Init+0x172>
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	691b      	ldr	r3, [r3, #16]
 8007154:	2b02      	cmp	r3, #2
 8007156:	d004      	beq.n	8007162 <HAL_SPI_Init+0x172>
 8007158:	f44f 71a6 	mov.w	r1, #332	; 0x14c
 800715c:	483a      	ldr	r0, [pc, #232]	; (8007248 <HAL_SPI_Init+0x258>)
 800715e:	f7fa fae6 	bl	800172e <assert_failed>
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	695b      	ldr	r3, [r3, #20]
 8007166:	2b00      	cmp	r3, #0
 8007168:	d008      	beq.n	800717c <HAL_SPI_Init+0x18c>
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	695b      	ldr	r3, [r3, #20]
 800716e:	2b01      	cmp	r3, #1
 8007170:	d004      	beq.n	800717c <HAL_SPI_Init+0x18c>
 8007172:	f240 114d 	movw	r1, #333	; 0x14d
 8007176:	4834      	ldr	r0, [pc, #208]	; (8007248 <HAL_SPI_Init+0x258>)
 8007178:	f7fa fad9 	bl	800172e <assert_failed>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	2200      	movs	r2, #0
 8007180:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007188:	b2db      	uxtb	r3, r3
 800718a:	2b00      	cmp	r3, #0
 800718c:	d106      	bne.n	800719c <HAL_SPI_Init+0x1ac>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	2200      	movs	r2, #0
 8007192:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007196:	6878      	ldr	r0, [r7, #4]
 8007198:	f7fa fb0a 	bl	80017b0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	2202      	movs	r2, #2
 80071a0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	681a      	ldr	r2, [r3, #0]
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80071b2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	685a      	ldr	r2, [r3, #4]
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	689b      	ldr	r3, [r3, #8]
 80071bc:	431a      	orrs	r2, r3
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	68db      	ldr	r3, [r3, #12]
 80071c2:	431a      	orrs	r2, r3
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	691b      	ldr	r3, [r3, #16]
 80071c8:	431a      	orrs	r2, r3
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	695b      	ldr	r3, [r3, #20]
 80071ce:	431a      	orrs	r2, r3
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	699b      	ldr	r3, [r3, #24]
 80071d4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80071d8:	431a      	orrs	r2, r3
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	69db      	ldr	r3, [r3, #28]
 80071de:	431a      	orrs	r2, r3
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	6a1b      	ldr	r3, [r3, #32]
 80071e4:	ea42 0103 	orr.w	r1, r2, r3
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	430a      	orrs	r2, r1
 80071f2:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	699b      	ldr	r3, [r3, #24]
 80071f8:	0c1b      	lsrs	r3, r3, #16
 80071fa:	f003 0104 	and.w	r1, r3, #4
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	430a      	orrs	r2, r1
 8007208:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	69da      	ldr	r2, [r3, #28]
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007218:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	2200      	movs	r2, #0
 800721e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	2201      	movs	r2, #1
 8007224:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8007228:	2300      	movs	r3, #0
}
 800722a:	4618      	mov	r0, r3
 800722c:	3708      	adds	r7, #8
 800722e:	46bd      	mov	sp, r7
 8007230:	bd80      	pop	{r7, pc}
 8007232:	bf00      	nop
 8007234:	40013000 	.word	0x40013000
 8007238:	40003800 	.word	0x40003800
 800723c:	40003c00 	.word	0x40003c00
 8007240:	40013400 	.word	0x40013400
 8007244:	40015000 	.word	0x40015000
 8007248:	0800d7e4 	.word	0x0800d7e4

0800724c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800724c:	b084      	sub	sp, #16
 800724e:	b580      	push	{r7, lr}
 8007250:	b084      	sub	sp, #16
 8007252:	af00      	add	r7, sp, #0
 8007254:	6078      	str	r0, [r7, #4]
 8007256:	f107 001c 	add.w	r0, r7, #28
 800725a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800725e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007260:	2b01      	cmp	r3, #1
 8007262:	d122      	bne.n	80072aa <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007268:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	68db      	ldr	r3, [r3, #12]
 8007274:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8007278:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800727c:	687a      	ldr	r2, [r7, #4]
 800727e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	68db      	ldr	r3, [r3, #12]
 8007284:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800728c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800728e:	2b01      	cmp	r3, #1
 8007290:	d105      	bne.n	800729e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	68db      	ldr	r3, [r3, #12]
 8007296:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800729e:	6878      	ldr	r0, [r7, #4]
 80072a0:	f001 fac6 	bl	8008830 <USB_CoreReset>
 80072a4:	4603      	mov	r3, r0
 80072a6:	73fb      	strb	r3, [r7, #15]
 80072a8:	e01a      	b.n	80072e0 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	68db      	ldr	r3, [r3, #12]
 80072ae:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80072b6:	6878      	ldr	r0, [r7, #4]
 80072b8:	f001 faba 	bl	8008830 <USB_CoreReset>
 80072bc:	4603      	mov	r3, r0
 80072be:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80072c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d106      	bne.n	80072d4 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072ca:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	639a      	str	r2, [r3, #56]	; 0x38
 80072d2:	e005      	b.n	80072e0 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072d8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80072e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072e2:	2b01      	cmp	r3, #1
 80072e4:	d10b      	bne.n	80072fe <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	689b      	ldr	r3, [r3, #8]
 80072ea:	f043 0206 	orr.w	r2, r3, #6
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	689b      	ldr	r3, [r3, #8]
 80072f6:	f043 0220 	orr.w	r2, r3, #32
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80072fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8007300:	4618      	mov	r0, r3
 8007302:	3710      	adds	r7, #16
 8007304:	46bd      	mov	sp, r7
 8007306:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800730a:	b004      	add	sp, #16
 800730c:	4770      	bx	lr
	...

08007310 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8007310:	b480      	push	{r7}
 8007312:	b087      	sub	sp, #28
 8007314:	af00      	add	r7, sp, #0
 8007316:	60f8      	str	r0, [r7, #12]
 8007318:	60b9      	str	r1, [r7, #8]
 800731a:	4613      	mov	r3, r2
 800731c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800731e:	79fb      	ldrb	r3, [r7, #7]
 8007320:	2b02      	cmp	r3, #2
 8007322:	d165      	bne.n	80073f0 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8007324:	68bb      	ldr	r3, [r7, #8]
 8007326:	4a41      	ldr	r2, [pc, #260]	; (800742c <USB_SetTurnaroundTime+0x11c>)
 8007328:	4293      	cmp	r3, r2
 800732a:	d906      	bls.n	800733a <USB_SetTurnaroundTime+0x2a>
 800732c:	68bb      	ldr	r3, [r7, #8]
 800732e:	4a40      	ldr	r2, [pc, #256]	; (8007430 <USB_SetTurnaroundTime+0x120>)
 8007330:	4293      	cmp	r3, r2
 8007332:	d802      	bhi.n	800733a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8007334:	230f      	movs	r3, #15
 8007336:	617b      	str	r3, [r7, #20]
 8007338:	e062      	b.n	8007400 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800733a:	68bb      	ldr	r3, [r7, #8]
 800733c:	4a3c      	ldr	r2, [pc, #240]	; (8007430 <USB_SetTurnaroundTime+0x120>)
 800733e:	4293      	cmp	r3, r2
 8007340:	d906      	bls.n	8007350 <USB_SetTurnaroundTime+0x40>
 8007342:	68bb      	ldr	r3, [r7, #8]
 8007344:	4a3b      	ldr	r2, [pc, #236]	; (8007434 <USB_SetTurnaroundTime+0x124>)
 8007346:	4293      	cmp	r3, r2
 8007348:	d802      	bhi.n	8007350 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800734a:	230e      	movs	r3, #14
 800734c:	617b      	str	r3, [r7, #20]
 800734e:	e057      	b.n	8007400 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8007350:	68bb      	ldr	r3, [r7, #8]
 8007352:	4a38      	ldr	r2, [pc, #224]	; (8007434 <USB_SetTurnaroundTime+0x124>)
 8007354:	4293      	cmp	r3, r2
 8007356:	d906      	bls.n	8007366 <USB_SetTurnaroundTime+0x56>
 8007358:	68bb      	ldr	r3, [r7, #8]
 800735a:	4a37      	ldr	r2, [pc, #220]	; (8007438 <USB_SetTurnaroundTime+0x128>)
 800735c:	4293      	cmp	r3, r2
 800735e:	d802      	bhi.n	8007366 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8007360:	230d      	movs	r3, #13
 8007362:	617b      	str	r3, [r7, #20]
 8007364:	e04c      	b.n	8007400 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8007366:	68bb      	ldr	r3, [r7, #8]
 8007368:	4a33      	ldr	r2, [pc, #204]	; (8007438 <USB_SetTurnaroundTime+0x128>)
 800736a:	4293      	cmp	r3, r2
 800736c:	d906      	bls.n	800737c <USB_SetTurnaroundTime+0x6c>
 800736e:	68bb      	ldr	r3, [r7, #8]
 8007370:	4a32      	ldr	r2, [pc, #200]	; (800743c <USB_SetTurnaroundTime+0x12c>)
 8007372:	4293      	cmp	r3, r2
 8007374:	d802      	bhi.n	800737c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8007376:	230c      	movs	r3, #12
 8007378:	617b      	str	r3, [r7, #20]
 800737a:	e041      	b.n	8007400 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800737c:	68bb      	ldr	r3, [r7, #8]
 800737e:	4a2f      	ldr	r2, [pc, #188]	; (800743c <USB_SetTurnaroundTime+0x12c>)
 8007380:	4293      	cmp	r3, r2
 8007382:	d906      	bls.n	8007392 <USB_SetTurnaroundTime+0x82>
 8007384:	68bb      	ldr	r3, [r7, #8]
 8007386:	4a2e      	ldr	r2, [pc, #184]	; (8007440 <USB_SetTurnaroundTime+0x130>)
 8007388:	4293      	cmp	r3, r2
 800738a:	d802      	bhi.n	8007392 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800738c:	230b      	movs	r3, #11
 800738e:	617b      	str	r3, [r7, #20]
 8007390:	e036      	b.n	8007400 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8007392:	68bb      	ldr	r3, [r7, #8]
 8007394:	4a2a      	ldr	r2, [pc, #168]	; (8007440 <USB_SetTurnaroundTime+0x130>)
 8007396:	4293      	cmp	r3, r2
 8007398:	d906      	bls.n	80073a8 <USB_SetTurnaroundTime+0x98>
 800739a:	68bb      	ldr	r3, [r7, #8]
 800739c:	4a29      	ldr	r2, [pc, #164]	; (8007444 <USB_SetTurnaroundTime+0x134>)
 800739e:	4293      	cmp	r3, r2
 80073a0:	d802      	bhi.n	80073a8 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80073a2:	230a      	movs	r3, #10
 80073a4:	617b      	str	r3, [r7, #20]
 80073a6:	e02b      	b.n	8007400 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80073a8:	68bb      	ldr	r3, [r7, #8]
 80073aa:	4a26      	ldr	r2, [pc, #152]	; (8007444 <USB_SetTurnaroundTime+0x134>)
 80073ac:	4293      	cmp	r3, r2
 80073ae:	d906      	bls.n	80073be <USB_SetTurnaroundTime+0xae>
 80073b0:	68bb      	ldr	r3, [r7, #8]
 80073b2:	4a25      	ldr	r2, [pc, #148]	; (8007448 <USB_SetTurnaroundTime+0x138>)
 80073b4:	4293      	cmp	r3, r2
 80073b6:	d802      	bhi.n	80073be <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80073b8:	2309      	movs	r3, #9
 80073ba:	617b      	str	r3, [r7, #20]
 80073bc:	e020      	b.n	8007400 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80073be:	68bb      	ldr	r3, [r7, #8]
 80073c0:	4a21      	ldr	r2, [pc, #132]	; (8007448 <USB_SetTurnaroundTime+0x138>)
 80073c2:	4293      	cmp	r3, r2
 80073c4:	d906      	bls.n	80073d4 <USB_SetTurnaroundTime+0xc4>
 80073c6:	68bb      	ldr	r3, [r7, #8]
 80073c8:	4a20      	ldr	r2, [pc, #128]	; (800744c <USB_SetTurnaroundTime+0x13c>)
 80073ca:	4293      	cmp	r3, r2
 80073cc:	d802      	bhi.n	80073d4 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80073ce:	2308      	movs	r3, #8
 80073d0:	617b      	str	r3, [r7, #20]
 80073d2:	e015      	b.n	8007400 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80073d4:	68bb      	ldr	r3, [r7, #8]
 80073d6:	4a1d      	ldr	r2, [pc, #116]	; (800744c <USB_SetTurnaroundTime+0x13c>)
 80073d8:	4293      	cmp	r3, r2
 80073da:	d906      	bls.n	80073ea <USB_SetTurnaroundTime+0xda>
 80073dc:	68bb      	ldr	r3, [r7, #8]
 80073de:	4a1c      	ldr	r2, [pc, #112]	; (8007450 <USB_SetTurnaroundTime+0x140>)
 80073e0:	4293      	cmp	r3, r2
 80073e2:	d802      	bhi.n	80073ea <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80073e4:	2307      	movs	r3, #7
 80073e6:	617b      	str	r3, [r7, #20]
 80073e8:	e00a      	b.n	8007400 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80073ea:	2306      	movs	r3, #6
 80073ec:	617b      	str	r3, [r7, #20]
 80073ee:	e007      	b.n	8007400 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80073f0:	79fb      	ldrb	r3, [r7, #7]
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d102      	bne.n	80073fc <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80073f6:	2309      	movs	r3, #9
 80073f8:	617b      	str	r3, [r7, #20]
 80073fa:	e001      	b.n	8007400 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80073fc:	2309      	movs	r3, #9
 80073fe:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	68db      	ldr	r3, [r3, #12]
 8007404:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	68da      	ldr	r2, [r3, #12]
 8007410:	697b      	ldr	r3, [r7, #20]
 8007412:	029b      	lsls	r3, r3, #10
 8007414:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8007418:	431a      	orrs	r2, r3
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800741e:	2300      	movs	r3, #0
}
 8007420:	4618      	mov	r0, r3
 8007422:	371c      	adds	r7, #28
 8007424:	46bd      	mov	sp, r7
 8007426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800742a:	4770      	bx	lr
 800742c:	00d8acbf 	.word	0x00d8acbf
 8007430:	00e4e1bf 	.word	0x00e4e1bf
 8007434:	00f423ff 	.word	0x00f423ff
 8007438:	0106737f 	.word	0x0106737f
 800743c:	011a499f 	.word	0x011a499f
 8007440:	01312cff 	.word	0x01312cff
 8007444:	014ca43f 	.word	0x014ca43f
 8007448:	016e35ff 	.word	0x016e35ff
 800744c:	01a6ab1f 	.word	0x01a6ab1f
 8007450:	01e847ff 	.word	0x01e847ff

08007454 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007454:	b480      	push	{r7}
 8007456:	b083      	sub	sp, #12
 8007458:	af00      	add	r7, sp, #0
 800745a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	689b      	ldr	r3, [r3, #8]
 8007460:	f043 0201 	orr.w	r2, r3, #1
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007468:	2300      	movs	r3, #0
}
 800746a:	4618      	mov	r0, r3
 800746c:	370c      	adds	r7, #12
 800746e:	46bd      	mov	sp, r7
 8007470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007474:	4770      	bx	lr

08007476 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007476:	b480      	push	{r7}
 8007478:	b083      	sub	sp, #12
 800747a:	af00      	add	r7, sp, #0
 800747c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	689b      	ldr	r3, [r3, #8]
 8007482:	f023 0201 	bic.w	r2, r3, #1
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800748a:	2300      	movs	r3, #0
}
 800748c:	4618      	mov	r0, r3
 800748e:	370c      	adds	r7, #12
 8007490:	46bd      	mov	sp, r7
 8007492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007496:	4770      	bx	lr

08007498 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8007498:	b580      	push	{r7, lr}
 800749a:	b082      	sub	sp, #8
 800749c:	af00      	add	r7, sp, #0
 800749e:	6078      	str	r0, [r7, #4]
 80074a0:	460b      	mov	r3, r1
 80074a2:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	68db      	ldr	r3, [r3, #12]
 80074a8:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80074b0:	78fb      	ldrb	r3, [r7, #3]
 80074b2:	2b01      	cmp	r3, #1
 80074b4:	d106      	bne.n	80074c4 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	68db      	ldr	r3, [r3, #12]
 80074ba:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	60da      	str	r2, [r3, #12]
 80074c2:	e00b      	b.n	80074dc <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 80074c4:	78fb      	ldrb	r3, [r7, #3]
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d106      	bne.n	80074d8 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	68db      	ldr	r3, [r3, #12]
 80074ce:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	60da      	str	r2, [r3, #12]
 80074d6:	e001      	b.n	80074dc <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 80074d8:	2301      	movs	r3, #1
 80074da:	e003      	b.n	80074e4 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 80074dc:	2032      	movs	r0, #50	; 0x32
 80074de:	f7fa fb15 	bl	8001b0c <HAL_Delay>

  return HAL_OK;
 80074e2:	2300      	movs	r3, #0
}
 80074e4:	4618      	mov	r0, r3
 80074e6:	3708      	adds	r7, #8
 80074e8:	46bd      	mov	sp, r7
 80074ea:	bd80      	pop	{r7, pc}

080074ec <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80074ec:	b084      	sub	sp, #16
 80074ee:	b580      	push	{r7, lr}
 80074f0:	b086      	sub	sp, #24
 80074f2:	af00      	add	r7, sp, #0
 80074f4:	6078      	str	r0, [r7, #4]
 80074f6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80074fa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80074fe:	2300      	movs	r3, #0
 8007500:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8007506:	2300      	movs	r3, #0
 8007508:	613b      	str	r3, [r7, #16]
 800750a:	e009      	b.n	8007520 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800750c:	687a      	ldr	r2, [r7, #4]
 800750e:	693b      	ldr	r3, [r7, #16]
 8007510:	3340      	adds	r3, #64	; 0x40
 8007512:	009b      	lsls	r3, r3, #2
 8007514:	4413      	add	r3, r2
 8007516:	2200      	movs	r2, #0
 8007518:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800751a:	693b      	ldr	r3, [r7, #16]
 800751c:	3301      	adds	r3, #1
 800751e:	613b      	str	r3, [r7, #16]
 8007520:	693b      	ldr	r3, [r7, #16]
 8007522:	2b0e      	cmp	r3, #14
 8007524:	d9f2      	bls.n	800750c <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8007526:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007528:	2b00      	cmp	r3, #0
 800752a:	d11c      	bne.n	8007566 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007532:	685b      	ldr	r3, [r3, #4]
 8007534:	68fa      	ldr	r2, [r7, #12]
 8007536:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800753a:	f043 0302 	orr.w	r3, r3, #2
 800753e:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007544:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007550:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800755c:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	639a      	str	r2, [r3, #56]	; 0x38
 8007564:	e00b      	b.n	800757e <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800756a:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007576:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007584:	461a      	mov	r2, r3
 8007586:	2300      	movs	r3, #0
 8007588:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007590:	4619      	mov	r1, r3
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007598:	461a      	mov	r2, r3
 800759a:	680b      	ldr	r3, [r1, #0]
 800759c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800759e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075a0:	2b01      	cmp	r3, #1
 80075a2:	d10c      	bne.n	80075be <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80075a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d104      	bne.n	80075b4 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80075aa:	2100      	movs	r1, #0
 80075ac:	6878      	ldr	r0, [r7, #4]
 80075ae:	f000 f949 	bl	8007844 <USB_SetDevSpeed>
 80075b2:	e008      	b.n	80075c6 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80075b4:	2101      	movs	r1, #1
 80075b6:	6878      	ldr	r0, [r7, #4]
 80075b8:	f000 f944 	bl	8007844 <USB_SetDevSpeed>
 80075bc:	e003      	b.n	80075c6 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80075be:	2103      	movs	r1, #3
 80075c0:	6878      	ldr	r0, [r7, #4]
 80075c2:	f000 f93f 	bl	8007844 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80075c6:	2110      	movs	r1, #16
 80075c8:	6878      	ldr	r0, [r7, #4]
 80075ca:	f000 f8f3 	bl	80077b4 <USB_FlushTxFifo>
 80075ce:	4603      	mov	r3, r0
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d001      	beq.n	80075d8 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 80075d4:	2301      	movs	r3, #1
 80075d6:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80075d8:	6878      	ldr	r0, [r7, #4]
 80075da:	f000 f911 	bl	8007800 <USB_FlushRxFifo>
 80075de:	4603      	mov	r3, r0
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	d001      	beq.n	80075e8 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 80075e4:	2301      	movs	r3, #1
 80075e6:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80075ee:	461a      	mov	r2, r3
 80075f0:	2300      	movs	r3, #0
 80075f2:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80075fa:	461a      	mov	r2, r3
 80075fc:	2300      	movs	r3, #0
 80075fe:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007606:	461a      	mov	r2, r3
 8007608:	2300      	movs	r3, #0
 800760a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800760c:	2300      	movs	r3, #0
 800760e:	613b      	str	r3, [r7, #16]
 8007610:	e043      	b.n	800769a <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007612:	693b      	ldr	r3, [r7, #16]
 8007614:	015a      	lsls	r2, r3, #5
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	4413      	add	r3, r2
 800761a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007624:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007628:	d118      	bne.n	800765c <USB_DevInit+0x170>
    {
      if (i == 0U)
 800762a:	693b      	ldr	r3, [r7, #16]
 800762c:	2b00      	cmp	r3, #0
 800762e:	d10a      	bne.n	8007646 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8007630:	693b      	ldr	r3, [r7, #16]
 8007632:	015a      	lsls	r2, r3, #5
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	4413      	add	r3, r2
 8007638:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800763c:	461a      	mov	r2, r3
 800763e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007642:	6013      	str	r3, [r2, #0]
 8007644:	e013      	b.n	800766e <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8007646:	693b      	ldr	r3, [r7, #16]
 8007648:	015a      	lsls	r2, r3, #5
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	4413      	add	r3, r2
 800764e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007652:	461a      	mov	r2, r3
 8007654:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007658:	6013      	str	r3, [r2, #0]
 800765a:	e008      	b.n	800766e <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800765c:	693b      	ldr	r3, [r7, #16]
 800765e:	015a      	lsls	r2, r3, #5
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	4413      	add	r3, r2
 8007664:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007668:	461a      	mov	r2, r3
 800766a:	2300      	movs	r3, #0
 800766c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800766e:	693b      	ldr	r3, [r7, #16]
 8007670:	015a      	lsls	r2, r3, #5
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	4413      	add	r3, r2
 8007676:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800767a:	461a      	mov	r2, r3
 800767c:	2300      	movs	r3, #0
 800767e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8007680:	693b      	ldr	r3, [r7, #16]
 8007682:	015a      	lsls	r2, r3, #5
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	4413      	add	r3, r2
 8007688:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800768c:	461a      	mov	r2, r3
 800768e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007692:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007694:	693b      	ldr	r3, [r7, #16]
 8007696:	3301      	adds	r3, #1
 8007698:	613b      	str	r3, [r7, #16]
 800769a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800769c:	693a      	ldr	r2, [r7, #16]
 800769e:	429a      	cmp	r2, r3
 80076a0:	d3b7      	bcc.n	8007612 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80076a2:	2300      	movs	r3, #0
 80076a4:	613b      	str	r3, [r7, #16]
 80076a6:	e043      	b.n	8007730 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80076a8:	693b      	ldr	r3, [r7, #16]
 80076aa:	015a      	lsls	r2, r3, #5
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	4413      	add	r3, r2
 80076b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80076ba:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80076be:	d118      	bne.n	80076f2 <USB_DevInit+0x206>
    {
      if (i == 0U)
 80076c0:	693b      	ldr	r3, [r7, #16]
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d10a      	bne.n	80076dc <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80076c6:	693b      	ldr	r3, [r7, #16]
 80076c8:	015a      	lsls	r2, r3, #5
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	4413      	add	r3, r2
 80076ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80076d2:	461a      	mov	r2, r3
 80076d4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80076d8:	6013      	str	r3, [r2, #0]
 80076da:	e013      	b.n	8007704 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80076dc:	693b      	ldr	r3, [r7, #16]
 80076de:	015a      	lsls	r2, r3, #5
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	4413      	add	r3, r2
 80076e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80076e8:	461a      	mov	r2, r3
 80076ea:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80076ee:	6013      	str	r3, [r2, #0]
 80076f0:	e008      	b.n	8007704 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80076f2:	693b      	ldr	r3, [r7, #16]
 80076f4:	015a      	lsls	r2, r3, #5
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	4413      	add	r3, r2
 80076fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80076fe:	461a      	mov	r2, r3
 8007700:	2300      	movs	r3, #0
 8007702:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8007704:	693b      	ldr	r3, [r7, #16]
 8007706:	015a      	lsls	r2, r3, #5
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	4413      	add	r3, r2
 800770c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007710:	461a      	mov	r2, r3
 8007712:	2300      	movs	r3, #0
 8007714:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8007716:	693b      	ldr	r3, [r7, #16]
 8007718:	015a      	lsls	r2, r3, #5
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	4413      	add	r3, r2
 800771e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007722:	461a      	mov	r2, r3
 8007724:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007728:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800772a:	693b      	ldr	r3, [r7, #16]
 800772c:	3301      	adds	r3, #1
 800772e:	613b      	str	r3, [r7, #16]
 8007730:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007732:	693a      	ldr	r2, [r7, #16]
 8007734:	429a      	cmp	r2, r3
 8007736:	d3b7      	bcc.n	80076a8 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800773e:	691b      	ldr	r3, [r3, #16]
 8007740:	68fa      	ldr	r2, [r7, #12]
 8007742:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007746:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800774a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	2200      	movs	r2, #0
 8007750:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8007758:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800775a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800775c:	2b00      	cmp	r3, #0
 800775e:	d105      	bne.n	800776c <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	699b      	ldr	r3, [r3, #24]
 8007764:	f043 0210 	orr.w	r2, r3, #16
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	699a      	ldr	r2, [r3, #24]
 8007770:	4b0f      	ldr	r3, [pc, #60]	; (80077b0 <USB_DevInit+0x2c4>)
 8007772:	4313      	orrs	r3, r2
 8007774:	687a      	ldr	r2, [r7, #4]
 8007776:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8007778:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800777a:	2b00      	cmp	r3, #0
 800777c:	d005      	beq.n	800778a <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	699b      	ldr	r3, [r3, #24]
 8007782:	f043 0208 	orr.w	r2, r3, #8
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800778a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800778c:	2b01      	cmp	r3, #1
 800778e:	d107      	bne.n	80077a0 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	699b      	ldr	r3, [r3, #24]
 8007794:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007798:	f043 0304 	orr.w	r3, r3, #4
 800779c:	687a      	ldr	r2, [r7, #4]
 800779e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80077a0:	7dfb      	ldrb	r3, [r7, #23]
}
 80077a2:	4618      	mov	r0, r3
 80077a4:	3718      	adds	r7, #24
 80077a6:	46bd      	mov	sp, r7
 80077a8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80077ac:	b004      	add	sp, #16
 80077ae:	4770      	bx	lr
 80077b0:	803c3800 	.word	0x803c3800

080077b4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80077b4:	b480      	push	{r7}
 80077b6:	b085      	sub	sp, #20
 80077b8:	af00      	add	r7, sp, #0
 80077ba:	6078      	str	r0, [r7, #4]
 80077bc:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 80077be:	2300      	movs	r3, #0
 80077c0:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80077c2:	683b      	ldr	r3, [r7, #0]
 80077c4:	019b      	lsls	r3, r3, #6
 80077c6:	f043 0220 	orr.w	r2, r3, #32
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	3301      	adds	r3, #1
 80077d2:	60fb      	str	r3, [r7, #12]
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	4a09      	ldr	r2, [pc, #36]	; (80077fc <USB_FlushTxFifo+0x48>)
 80077d8:	4293      	cmp	r3, r2
 80077da:	d901      	bls.n	80077e0 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 80077dc:	2303      	movs	r3, #3
 80077de:	e006      	b.n	80077ee <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	691b      	ldr	r3, [r3, #16]
 80077e4:	f003 0320 	and.w	r3, r3, #32
 80077e8:	2b20      	cmp	r3, #32
 80077ea:	d0f0      	beq.n	80077ce <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 80077ec:	2300      	movs	r3, #0
}
 80077ee:	4618      	mov	r0, r3
 80077f0:	3714      	adds	r7, #20
 80077f2:	46bd      	mov	sp, r7
 80077f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077f8:	4770      	bx	lr
 80077fa:	bf00      	nop
 80077fc:	00030d40 	.word	0x00030d40

08007800 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007800:	b480      	push	{r7}
 8007802:	b085      	sub	sp, #20
 8007804:	af00      	add	r7, sp, #0
 8007806:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8007808:	2300      	movs	r3, #0
 800780a:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	2210      	movs	r2, #16
 8007810:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	3301      	adds	r3, #1
 8007816:	60fb      	str	r3, [r7, #12]
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	4a09      	ldr	r2, [pc, #36]	; (8007840 <USB_FlushRxFifo+0x40>)
 800781c:	4293      	cmp	r3, r2
 800781e:	d901      	bls.n	8007824 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8007820:	2303      	movs	r3, #3
 8007822:	e006      	b.n	8007832 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	691b      	ldr	r3, [r3, #16]
 8007828:	f003 0310 	and.w	r3, r3, #16
 800782c:	2b10      	cmp	r3, #16
 800782e:	d0f0      	beq.n	8007812 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8007830:	2300      	movs	r3, #0
}
 8007832:	4618      	mov	r0, r3
 8007834:	3714      	adds	r7, #20
 8007836:	46bd      	mov	sp, r7
 8007838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800783c:	4770      	bx	lr
 800783e:	bf00      	nop
 8007840:	00030d40 	.word	0x00030d40

08007844 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8007844:	b480      	push	{r7}
 8007846:	b085      	sub	sp, #20
 8007848:	af00      	add	r7, sp, #0
 800784a:	6078      	str	r0, [r7, #4]
 800784c:	460b      	mov	r3, r1
 800784e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800785a:	681a      	ldr	r2, [r3, #0]
 800785c:	78fb      	ldrb	r3, [r7, #3]
 800785e:	68f9      	ldr	r1, [r7, #12]
 8007860:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007864:	4313      	orrs	r3, r2
 8007866:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8007868:	2300      	movs	r3, #0
}
 800786a:	4618      	mov	r0, r3
 800786c:	3714      	adds	r7, #20
 800786e:	46bd      	mov	sp, r7
 8007870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007874:	4770      	bx	lr

08007876 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8007876:	b480      	push	{r7}
 8007878:	b087      	sub	sp, #28
 800787a:	af00      	add	r7, sp, #0
 800787c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8007882:	693b      	ldr	r3, [r7, #16]
 8007884:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007888:	689b      	ldr	r3, [r3, #8]
 800788a:	f003 0306 	and.w	r3, r3, #6
 800788e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	2b00      	cmp	r3, #0
 8007894:	d102      	bne.n	800789c <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8007896:	2300      	movs	r3, #0
 8007898:	75fb      	strb	r3, [r7, #23]
 800789a:	e00a      	b.n	80078b2 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	2b02      	cmp	r3, #2
 80078a0:	d002      	beq.n	80078a8 <USB_GetDevSpeed+0x32>
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	2b06      	cmp	r3, #6
 80078a6:	d102      	bne.n	80078ae <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80078a8:	2302      	movs	r3, #2
 80078aa:	75fb      	strb	r3, [r7, #23]
 80078ac:	e001      	b.n	80078b2 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80078ae:	230f      	movs	r3, #15
 80078b0:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80078b2:	7dfb      	ldrb	r3, [r7, #23]
}
 80078b4:	4618      	mov	r0, r3
 80078b6:	371c      	adds	r7, #28
 80078b8:	46bd      	mov	sp, r7
 80078ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078be:	4770      	bx	lr

080078c0 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80078c0:	b480      	push	{r7}
 80078c2:	b085      	sub	sp, #20
 80078c4:	af00      	add	r7, sp, #0
 80078c6:	6078      	str	r0, [r7, #4]
 80078c8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80078ce:	683b      	ldr	r3, [r7, #0]
 80078d0:	781b      	ldrb	r3, [r3, #0]
 80078d2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80078d4:	683b      	ldr	r3, [r7, #0]
 80078d6:	785b      	ldrb	r3, [r3, #1]
 80078d8:	2b01      	cmp	r3, #1
 80078da:	d13a      	bne.n	8007952 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80078e2:	69da      	ldr	r2, [r3, #28]
 80078e4:	683b      	ldr	r3, [r7, #0]
 80078e6:	781b      	ldrb	r3, [r3, #0]
 80078e8:	f003 030f 	and.w	r3, r3, #15
 80078ec:	2101      	movs	r1, #1
 80078ee:	fa01 f303 	lsl.w	r3, r1, r3
 80078f2:	b29b      	uxth	r3, r3
 80078f4:	68f9      	ldr	r1, [r7, #12]
 80078f6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80078fa:	4313      	orrs	r3, r2
 80078fc:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80078fe:	68bb      	ldr	r3, [r7, #8]
 8007900:	015a      	lsls	r2, r3, #5
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	4413      	add	r3, r2
 8007906:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007910:	2b00      	cmp	r3, #0
 8007912:	d155      	bne.n	80079c0 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007914:	68bb      	ldr	r3, [r7, #8]
 8007916:	015a      	lsls	r2, r3, #5
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	4413      	add	r3, r2
 800791c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007920:	681a      	ldr	r2, [r3, #0]
 8007922:	683b      	ldr	r3, [r7, #0]
 8007924:	689b      	ldr	r3, [r3, #8]
 8007926:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800792a:	683b      	ldr	r3, [r7, #0]
 800792c:	78db      	ldrb	r3, [r3, #3]
 800792e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007930:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8007932:	68bb      	ldr	r3, [r7, #8]
 8007934:	059b      	lsls	r3, r3, #22
 8007936:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007938:	4313      	orrs	r3, r2
 800793a:	68ba      	ldr	r2, [r7, #8]
 800793c:	0151      	lsls	r1, r2, #5
 800793e:	68fa      	ldr	r2, [r7, #12]
 8007940:	440a      	add	r2, r1
 8007942:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007946:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800794a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800794e:	6013      	str	r3, [r2, #0]
 8007950:	e036      	b.n	80079c0 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007958:	69da      	ldr	r2, [r3, #28]
 800795a:	683b      	ldr	r3, [r7, #0]
 800795c:	781b      	ldrb	r3, [r3, #0]
 800795e:	f003 030f 	and.w	r3, r3, #15
 8007962:	2101      	movs	r1, #1
 8007964:	fa01 f303 	lsl.w	r3, r1, r3
 8007968:	041b      	lsls	r3, r3, #16
 800796a:	68f9      	ldr	r1, [r7, #12]
 800796c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007970:	4313      	orrs	r3, r2
 8007972:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8007974:	68bb      	ldr	r3, [r7, #8]
 8007976:	015a      	lsls	r2, r3, #5
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	4413      	add	r3, r2
 800797c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007986:	2b00      	cmp	r3, #0
 8007988:	d11a      	bne.n	80079c0 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800798a:	68bb      	ldr	r3, [r7, #8]
 800798c:	015a      	lsls	r2, r3, #5
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	4413      	add	r3, r2
 8007992:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007996:	681a      	ldr	r2, [r3, #0]
 8007998:	683b      	ldr	r3, [r7, #0]
 800799a:	689b      	ldr	r3, [r3, #8]
 800799c:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80079a0:	683b      	ldr	r3, [r7, #0]
 80079a2:	78db      	ldrb	r3, [r3, #3]
 80079a4:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80079a6:	430b      	orrs	r3, r1
 80079a8:	4313      	orrs	r3, r2
 80079aa:	68ba      	ldr	r2, [r7, #8]
 80079ac:	0151      	lsls	r1, r2, #5
 80079ae:	68fa      	ldr	r2, [r7, #12]
 80079b0:	440a      	add	r2, r1
 80079b2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80079b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80079ba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80079be:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80079c0:	2300      	movs	r3, #0
}
 80079c2:	4618      	mov	r0, r3
 80079c4:	3714      	adds	r7, #20
 80079c6:	46bd      	mov	sp, r7
 80079c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079cc:	4770      	bx	lr
	...

080079d0 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80079d0:	b480      	push	{r7}
 80079d2:	b085      	sub	sp, #20
 80079d4:	af00      	add	r7, sp, #0
 80079d6:	6078      	str	r0, [r7, #4]
 80079d8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80079de:	683b      	ldr	r3, [r7, #0]
 80079e0:	781b      	ldrb	r3, [r3, #0]
 80079e2:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80079e4:	683b      	ldr	r3, [r7, #0]
 80079e6:	785b      	ldrb	r3, [r3, #1]
 80079e8:	2b01      	cmp	r3, #1
 80079ea:	d161      	bne.n	8007ab0 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80079ec:	68bb      	ldr	r3, [r7, #8]
 80079ee:	015a      	lsls	r2, r3, #5
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	4413      	add	r3, r2
 80079f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80079fe:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007a02:	d11f      	bne.n	8007a44 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8007a04:	68bb      	ldr	r3, [r7, #8]
 8007a06:	015a      	lsls	r2, r3, #5
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	4413      	add	r3, r2
 8007a0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	68ba      	ldr	r2, [r7, #8]
 8007a14:	0151      	lsls	r1, r2, #5
 8007a16:	68fa      	ldr	r2, [r7, #12]
 8007a18:	440a      	add	r2, r1
 8007a1a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007a1e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007a22:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8007a24:	68bb      	ldr	r3, [r7, #8]
 8007a26:	015a      	lsls	r2, r3, #5
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	4413      	add	r3, r2
 8007a2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	68ba      	ldr	r2, [r7, #8]
 8007a34:	0151      	lsls	r1, r2, #5
 8007a36:	68fa      	ldr	r2, [r7, #12]
 8007a38:	440a      	add	r2, r1
 8007a3a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007a3e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007a42:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007a4a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007a4c:	683b      	ldr	r3, [r7, #0]
 8007a4e:	781b      	ldrb	r3, [r3, #0]
 8007a50:	f003 030f 	and.w	r3, r3, #15
 8007a54:	2101      	movs	r1, #1
 8007a56:	fa01 f303 	lsl.w	r3, r1, r3
 8007a5a:	b29b      	uxth	r3, r3
 8007a5c:	43db      	mvns	r3, r3
 8007a5e:	68f9      	ldr	r1, [r7, #12]
 8007a60:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007a64:	4013      	ands	r3, r2
 8007a66:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007a6e:	69da      	ldr	r2, [r3, #28]
 8007a70:	683b      	ldr	r3, [r7, #0]
 8007a72:	781b      	ldrb	r3, [r3, #0]
 8007a74:	f003 030f 	and.w	r3, r3, #15
 8007a78:	2101      	movs	r1, #1
 8007a7a:	fa01 f303 	lsl.w	r3, r1, r3
 8007a7e:	b29b      	uxth	r3, r3
 8007a80:	43db      	mvns	r3, r3
 8007a82:	68f9      	ldr	r1, [r7, #12]
 8007a84:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007a88:	4013      	ands	r3, r2
 8007a8a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8007a8c:	68bb      	ldr	r3, [r7, #8]
 8007a8e:	015a      	lsls	r2, r3, #5
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	4413      	add	r3, r2
 8007a94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a98:	681a      	ldr	r2, [r3, #0]
 8007a9a:	68bb      	ldr	r3, [r7, #8]
 8007a9c:	0159      	lsls	r1, r3, #5
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	440b      	add	r3, r1
 8007aa2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007aa6:	4619      	mov	r1, r3
 8007aa8:	4b35      	ldr	r3, [pc, #212]	; (8007b80 <USB_DeactivateEndpoint+0x1b0>)
 8007aaa:	4013      	ands	r3, r2
 8007aac:	600b      	str	r3, [r1, #0]
 8007aae:	e060      	b.n	8007b72 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007ab0:	68bb      	ldr	r3, [r7, #8]
 8007ab2:	015a      	lsls	r2, r3, #5
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	4413      	add	r3, r2
 8007ab8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007ac2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007ac6:	d11f      	bne.n	8007b08 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8007ac8:	68bb      	ldr	r3, [r7, #8]
 8007aca:	015a      	lsls	r2, r3, #5
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	4413      	add	r3, r2
 8007ad0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	68ba      	ldr	r2, [r7, #8]
 8007ad8:	0151      	lsls	r1, r2, #5
 8007ada:	68fa      	ldr	r2, [r7, #12]
 8007adc:	440a      	add	r2, r1
 8007ade:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007ae2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007ae6:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8007ae8:	68bb      	ldr	r3, [r7, #8]
 8007aea:	015a      	lsls	r2, r3, #5
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	4413      	add	r3, r2
 8007af0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	68ba      	ldr	r2, [r7, #8]
 8007af8:	0151      	lsls	r1, r2, #5
 8007afa:	68fa      	ldr	r2, [r7, #12]
 8007afc:	440a      	add	r2, r1
 8007afe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007b02:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007b06:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007b0e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007b10:	683b      	ldr	r3, [r7, #0]
 8007b12:	781b      	ldrb	r3, [r3, #0]
 8007b14:	f003 030f 	and.w	r3, r3, #15
 8007b18:	2101      	movs	r1, #1
 8007b1a:	fa01 f303 	lsl.w	r3, r1, r3
 8007b1e:	041b      	lsls	r3, r3, #16
 8007b20:	43db      	mvns	r3, r3
 8007b22:	68f9      	ldr	r1, [r7, #12]
 8007b24:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007b28:	4013      	ands	r3, r2
 8007b2a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007b32:	69da      	ldr	r2, [r3, #28]
 8007b34:	683b      	ldr	r3, [r7, #0]
 8007b36:	781b      	ldrb	r3, [r3, #0]
 8007b38:	f003 030f 	and.w	r3, r3, #15
 8007b3c:	2101      	movs	r1, #1
 8007b3e:	fa01 f303 	lsl.w	r3, r1, r3
 8007b42:	041b      	lsls	r3, r3, #16
 8007b44:	43db      	mvns	r3, r3
 8007b46:	68f9      	ldr	r1, [r7, #12]
 8007b48:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007b4c:	4013      	ands	r3, r2
 8007b4e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8007b50:	68bb      	ldr	r3, [r7, #8]
 8007b52:	015a      	lsls	r2, r3, #5
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	4413      	add	r3, r2
 8007b58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007b5c:	681a      	ldr	r2, [r3, #0]
 8007b5e:	68bb      	ldr	r3, [r7, #8]
 8007b60:	0159      	lsls	r1, r3, #5
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	440b      	add	r3, r1
 8007b66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007b6a:	4619      	mov	r1, r3
 8007b6c:	4b05      	ldr	r3, [pc, #20]	; (8007b84 <USB_DeactivateEndpoint+0x1b4>)
 8007b6e:	4013      	ands	r3, r2
 8007b70:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8007b72:	2300      	movs	r3, #0
}
 8007b74:	4618      	mov	r0, r3
 8007b76:	3714      	adds	r7, #20
 8007b78:	46bd      	mov	sp, r7
 8007b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b7e:	4770      	bx	lr
 8007b80:	ec337800 	.word	0xec337800
 8007b84:	eff37800 	.word	0xeff37800

08007b88 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8007b88:	b580      	push	{r7, lr}
 8007b8a:	b08a      	sub	sp, #40	; 0x28
 8007b8c:	af02      	add	r7, sp, #8
 8007b8e:	60f8      	str	r0, [r7, #12]
 8007b90:	60b9      	str	r1, [r7, #8]
 8007b92:	4613      	mov	r3, r2
 8007b94:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8007b9a:	68bb      	ldr	r3, [r7, #8]
 8007b9c:	781b      	ldrb	r3, [r3, #0]
 8007b9e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007ba0:	68bb      	ldr	r3, [r7, #8]
 8007ba2:	785b      	ldrb	r3, [r3, #1]
 8007ba4:	2b01      	cmp	r3, #1
 8007ba6:	f040 815c 	bne.w	8007e62 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8007baa:	68bb      	ldr	r3, [r7, #8]
 8007bac:	695b      	ldr	r3, [r3, #20]
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	d132      	bne.n	8007c18 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007bb2:	69bb      	ldr	r3, [r7, #24]
 8007bb4:	015a      	lsls	r2, r3, #5
 8007bb6:	69fb      	ldr	r3, [r7, #28]
 8007bb8:	4413      	add	r3, r2
 8007bba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007bbe:	691b      	ldr	r3, [r3, #16]
 8007bc0:	69ba      	ldr	r2, [r7, #24]
 8007bc2:	0151      	lsls	r1, r2, #5
 8007bc4:	69fa      	ldr	r2, [r7, #28]
 8007bc6:	440a      	add	r2, r1
 8007bc8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007bcc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007bd0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007bd4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007bd6:	69bb      	ldr	r3, [r7, #24]
 8007bd8:	015a      	lsls	r2, r3, #5
 8007bda:	69fb      	ldr	r3, [r7, #28]
 8007bdc:	4413      	add	r3, r2
 8007bde:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007be2:	691b      	ldr	r3, [r3, #16]
 8007be4:	69ba      	ldr	r2, [r7, #24]
 8007be6:	0151      	lsls	r1, r2, #5
 8007be8:	69fa      	ldr	r2, [r7, #28]
 8007bea:	440a      	add	r2, r1
 8007bec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007bf0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007bf4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007bf6:	69bb      	ldr	r3, [r7, #24]
 8007bf8:	015a      	lsls	r2, r3, #5
 8007bfa:	69fb      	ldr	r3, [r7, #28]
 8007bfc:	4413      	add	r3, r2
 8007bfe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007c02:	691b      	ldr	r3, [r3, #16]
 8007c04:	69ba      	ldr	r2, [r7, #24]
 8007c06:	0151      	lsls	r1, r2, #5
 8007c08:	69fa      	ldr	r2, [r7, #28]
 8007c0a:	440a      	add	r2, r1
 8007c0c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007c10:	0cdb      	lsrs	r3, r3, #19
 8007c12:	04db      	lsls	r3, r3, #19
 8007c14:	6113      	str	r3, [r2, #16]
 8007c16:	e074      	b.n	8007d02 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007c18:	69bb      	ldr	r3, [r7, #24]
 8007c1a:	015a      	lsls	r2, r3, #5
 8007c1c:	69fb      	ldr	r3, [r7, #28]
 8007c1e:	4413      	add	r3, r2
 8007c20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007c24:	691b      	ldr	r3, [r3, #16]
 8007c26:	69ba      	ldr	r2, [r7, #24]
 8007c28:	0151      	lsls	r1, r2, #5
 8007c2a:	69fa      	ldr	r2, [r7, #28]
 8007c2c:	440a      	add	r2, r1
 8007c2e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007c32:	0cdb      	lsrs	r3, r3, #19
 8007c34:	04db      	lsls	r3, r3, #19
 8007c36:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007c38:	69bb      	ldr	r3, [r7, #24]
 8007c3a:	015a      	lsls	r2, r3, #5
 8007c3c:	69fb      	ldr	r3, [r7, #28]
 8007c3e:	4413      	add	r3, r2
 8007c40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007c44:	691b      	ldr	r3, [r3, #16]
 8007c46:	69ba      	ldr	r2, [r7, #24]
 8007c48:	0151      	lsls	r1, r2, #5
 8007c4a:	69fa      	ldr	r2, [r7, #28]
 8007c4c:	440a      	add	r2, r1
 8007c4e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007c52:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007c56:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007c5a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8007c5c:	69bb      	ldr	r3, [r7, #24]
 8007c5e:	015a      	lsls	r2, r3, #5
 8007c60:	69fb      	ldr	r3, [r7, #28]
 8007c62:	4413      	add	r3, r2
 8007c64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007c68:	691a      	ldr	r2, [r3, #16]
 8007c6a:	68bb      	ldr	r3, [r7, #8]
 8007c6c:	6959      	ldr	r1, [r3, #20]
 8007c6e:	68bb      	ldr	r3, [r7, #8]
 8007c70:	689b      	ldr	r3, [r3, #8]
 8007c72:	440b      	add	r3, r1
 8007c74:	1e59      	subs	r1, r3, #1
 8007c76:	68bb      	ldr	r3, [r7, #8]
 8007c78:	689b      	ldr	r3, [r3, #8]
 8007c7a:	fbb1 f3f3 	udiv	r3, r1, r3
 8007c7e:	04d9      	lsls	r1, r3, #19
 8007c80:	4b9d      	ldr	r3, [pc, #628]	; (8007ef8 <USB_EPStartXfer+0x370>)
 8007c82:	400b      	ands	r3, r1
 8007c84:	69b9      	ldr	r1, [r7, #24]
 8007c86:	0148      	lsls	r0, r1, #5
 8007c88:	69f9      	ldr	r1, [r7, #28]
 8007c8a:	4401      	add	r1, r0
 8007c8c:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8007c90:	4313      	orrs	r3, r2
 8007c92:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8007c94:	69bb      	ldr	r3, [r7, #24]
 8007c96:	015a      	lsls	r2, r3, #5
 8007c98:	69fb      	ldr	r3, [r7, #28]
 8007c9a:	4413      	add	r3, r2
 8007c9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007ca0:	691a      	ldr	r2, [r3, #16]
 8007ca2:	68bb      	ldr	r3, [r7, #8]
 8007ca4:	695b      	ldr	r3, [r3, #20]
 8007ca6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007caa:	69b9      	ldr	r1, [r7, #24]
 8007cac:	0148      	lsls	r0, r1, #5
 8007cae:	69f9      	ldr	r1, [r7, #28]
 8007cb0:	4401      	add	r1, r0
 8007cb2:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8007cb6:	4313      	orrs	r3, r2
 8007cb8:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8007cba:	68bb      	ldr	r3, [r7, #8]
 8007cbc:	78db      	ldrb	r3, [r3, #3]
 8007cbe:	2b01      	cmp	r3, #1
 8007cc0:	d11f      	bne.n	8007d02 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8007cc2:	69bb      	ldr	r3, [r7, #24]
 8007cc4:	015a      	lsls	r2, r3, #5
 8007cc6:	69fb      	ldr	r3, [r7, #28]
 8007cc8:	4413      	add	r3, r2
 8007cca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007cce:	691b      	ldr	r3, [r3, #16]
 8007cd0:	69ba      	ldr	r2, [r7, #24]
 8007cd2:	0151      	lsls	r1, r2, #5
 8007cd4:	69fa      	ldr	r2, [r7, #28]
 8007cd6:	440a      	add	r2, r1
 8007cd8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007cdc:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8007ce0:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8007ce2:	69bb      	ldr	r3, [r7, #24]
 8007ce4:	015a      	lsls	r2, r3, #5
 8007ce6:	69fb      	ldr	r3, [r7, #28]
 8007ce8:	4413      	add	r3, r2
 8007cea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007cee:	691b      	ldr	r3, [r3, #16]
 8007cf0:	69ba      	ldr	r2, [r7, #24]
 8007cf2:	0151      	lsls	r1, r2, #5
 8007cf4:	69fa      	ldr	r2, [r7, #28]
 8007cf6:	440a      	add	r2, r1
 8007cf8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007cfc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007d00:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8007d02:	79fb      	ldrb	r3, [r7, #7]
 8007d04:	2b01      	cmp	r3, #1
 8007d06:	d14b      	bne.n	8007da0 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8007d08:	68bb      	ldr	r3, [r7, #8]
 8007d0a:	691b      	ldr	r3, [r3, #16]
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	d009      	beq.n	8007d24 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8007d10:	69bb      	ldr	r3, [r7, #24]
 8007d12:	015a      	lsls	r2, r3, #5
 8007d14:	69fb      	ldr	r3, [r7, #28]
 8007d16:	4413      	add	r3, r2
 8007d18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d1c:	461a      	mov	r2, r3
 8007d1e:	68bb      	ldr	r3, [r7, #8]
 8007d20:	691b      	ldr	r3, [r3, #16]
 8007d22:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8007d24:	68bb      	ldr	r3, [r7, #8]
 8007d26:	78db      	ldrb	r3, [r3, #3]
 8007d28:	2b01      	cmp	r3, #1
 8007d2a:	d128      	bne.n	8007d7e <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007d2c:	69fb      	ldr	r3, [r7, #28]
 8007d2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007d32:	689b      	ldr	r3, [r3, #8]
 8007d34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	d110      	bne.n	8007d5e <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8007d3c:	69bb      	ldr	r3, [r7, #24]
 8007d3e:	015a      	lsls	r2, r3, #5
 8007d40:	69fb      	ldr	r3, [r7, #28]
 8007d42:	4413      	add	r3, r2
 8007d44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	69ba      	ldr	r2, [r7, #24]
 8007d4c:	0151      	lsls	r1, r2, #5
 8007d4e:	69fa      	ldr	r2, [r7, #28]
 8007d50:	440a      	add	r2, r1
 8007d52:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007d56:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007d5a:	6013      	str	r3, [r2, #0]
 8007d5c:	e00f      	b.n	8007d7e <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8007d5e:	69bb      	ldr	r3, [r7, #24]
 8007d60:	015a      	lsls	r2, r3, #5
 8007d62:	69fb      	ldr	r3, [r7, #28]
 8007d64:	4413      	add	r3, r2
 8007d66:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	69ba      	ldr	r2, [r7, #24]
 8007d6e:	0151      	lsls	r1, r2, #5
 8007d70:	69fa      	ldr	r2, [r7, #28]
 8007d72:	440a      	add	r2, r1
 8007d74:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007d78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007d7c:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007d7e:	69bb      	ldr	r3, [r7, #24]
 8007d80:	015a      	lsls	r2, r3, #5
 8007d82:	69fb      	ldr	r3, [r7, #28]
 8007d84:	4413      	add	r3, r2
 8007d86:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	69ba      	ldr	r2, [r7, #24]
 8007d8e:	0151      	lsls	r1, r2, #5
 8007d90:	69fa      	ldr	r2, [r7, #28]
 8007d92:	440a      	add	r2, r1
 8007d94:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007d98:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007d9c:	6013      	str	r3, [r2, #0]
 8007d9e:	e12f      	b.n	8008000 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007da0:	69bb      	ldr	r3, [r7, #24]
 8007da2:	015a      	lsls	r2, r3, #5
 8007da4:	69fb      	ldr	r3, [r7, #28]
 8007da6:	4413      	add	r3, r2
 8007da8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	69ba      	ldr	r2, [r7, #24]
 8007db0:	0151      	lsls	r1, r2, #5
 8007db2:	69fa      	ldr	r2, [r7, #28]
 8007db4:	440a      	add	r2, r1
 8007db6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007dba:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007dbe:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007dc0:	68bb      	ldr	r3, [r7, #8]
 8007dc2:	78db      	ldrb	r3, [r3, #3]
 8007dc4:	2b01      	cmp	r3, #1
 8007dc6:	d015      	beq.n	8007df4 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8007dc8:	68bb      	ldr	r3, [r7, #8]
 8007dca:	695b      	ldr	r3, [r3, #20]
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	f000 8117 	beq.w	8008000 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8007dd2:	69fb      	ldr	r3, [r7, #28]
 8007dd4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007dd8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007dda:	68bb      	ldr	r3, [r7, #8]
 8007ddc:	781b      	ldrb	r3, [r3, #0]
 8007dde:	f003 030f 	and.w	r3, r3, #15
 8007de2:	2101      	movs	r1, #1
 8007de4:	fa01 f303 	lsl.w	r3, r1, r3
 8007de8:	69f9      	ldr	r1, [r7, #28]
 8007dea:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007dee:	4313      	orrs	r3, r2
 8007df0:	634b      	str	r3, [r1, #52]	; 0x34
 8007df2:	e105      	b.n	8008000 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007df4:	69fb      	ldr	r3, [r7, #28]
 8007df6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007dfa:	689b      	ldr	r3, [r3, #8]
 8007dfc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	d110      	bne.n	8007e26 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8007e04:	69bb      	ldr	r3, [r7, #24]
 8007e06:	015a      	lsls	r2, r3, #5
 8007e08:	69fb      	ldr	r3, [r7, #28]
 8007e0a:	4413      	add	r3, r2
 8007e0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	69ba      	ldr	r2, [r7, #24]
 8007e14:	0151      	lsls	r1, r2, #5
 8007e16:	69fa      	ldr	r2, [r7, #28]
 8007e18:	440a      	add	r2, r1
 8007e1a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007e1e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007e22:	6013      	str	r3, [r2, #0]
 8007e24:	e00f      	b.n	8007e46 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8007e26:	69bb      	ldr	r3, [r7, #24]
 8007e28:	015a      	lsls	r2, r3, #5
 8007e2a:	69fb      	ldr	r3, [r7, #28]
 8007e2c:	4413      	add	r3, r2
 8007e2e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	69ba      	ldr	r2, [r7, #24]
 8007e36:	0151      	lsls	r1, r2, #5
 8007e38:	69fa      	ldr	r2, [r7, #28]
 8007e3a:	440a      	add	r2, r1
 8007e3c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007e40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007e44:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8007e46:	68bb      	ldr	r3, [r7, #8]
 8007e48:	68d9      	ldr	r1, [r3, #12]
 8007e4a:	68bb      	ldr	r3, [r7, #8]
 8007e4c:	781a      	ldrb	r2, [r3, #0]
 8007e4e:	68bb      	ldr	r3, [r7, #8]
 8007e50:	695b      	ldr	r3, [r3, #20]
 8007e52:	b298      	uxth	r0, r3
 8007e54:	79fb      	ldrb	r3, [r7, #7]
 8007e56:	9300      	str	r3, [sp, #0]
 8007e58:	4603      	mov	r3, r0
 8007e5a:	68f8      	ldr	r0, [r7, #12]
 8007e5c:	f000 fa2b 	bl	80082b6 <USB_WritePacket>
 8007e60:	e0ce      	b.n	8008000 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8007e62:	69bb      	ldr	r3, [r7, #24]
 8007e64:	015a      	lsls	r2, r3, #5
 8007e66:	69fb      	ldr	r3, [r7, #28]
 8007e68:	4413      	add	r3, r2
 8007e6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007e6e:	691b      	ldr	r3, [r3, #16]
 8007e70:	69ba      	ldr	r2, [r7, #24]
 8007e72:	0151      	lsls	r1, r2, #5
 8007e74:	69fa      	ldr	r2, [r7, #28]
 8007e76:	440a      	add	r2, r1
 8007e78:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007e7c:	0cdb      	lsrs	r3, r3, #19
 8007e7e:	04db      	lsls	r3, r3, #19
 8007e80:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8007e82:	69bb      	ldr	r3, [r7, #24]
 8007e84:	015a      	lsls	r2, r3, #5
 8007e86:	69fb      	ldr	r3, [r7, #28]
 8007e88:	4413      	add	r3, r2
 8007e8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007e8e:	691b      	ldr	r3, [r3, #16]
 8007e90:	69ba      	ldr	r2, [r7, #24]
 8007e92:	0151      	lsls	r1, r2, #5
 8007e94:	69fa      	ldr	r2, [r7, #28]
 8007e96:	440a      	add	r2, r1
 8007e98:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007e9c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007ea0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007ea4:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8007ea6:	68bb      	ldr	r3, [r7, #8]
 8007ea8:	695b      	ldr	r3, [r3, #20]
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	d126      	bne.n	8007efc <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8007eae:	69bb      	ldr	r3, [r7, #24]
 8007eb0:	015a      	lsls	r2, r3, #5
 8007eb2:	69fb      	ldr	r3, [r7, #28]
 8007eb4:	4413      	add	r3, r2
 8007eb6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007eba:	691a      	ldr	r2, [r3, #16]
 8007ebc:	68bb      	ldr	r3, [r7, #8]
 8007ebe:	689b      	ldr	r3, [r3, #8]
 8007ec0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007ec4:	69b9      	ldr	r1, [r7, #24]
 8007ec6:	0148      	lsls	r0, r1, #5
 8007ec8:	69f9      	ldr	r1, [r7, #28]
 8007eca:	4401      	add	r1, r0
 8007ecc:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007ed0:	4313      	orrs	r3, r2
 8007ed2:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007ed4:	69bb      	ldr	r3, [r7, #24]
 8007ed6:	015a      	lsls	r2, r3, #5
 8007ed8:	69fb      	ldr	r3, [r7, #28]
 8007eda:	4413      	add	r3, r2
 8007edc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ee0:	691b      	ldr	r3, [r3, #16]
 8007ee2:	69ba      	ldr	r2, [r7, #24]
 8007ee4:	0151      	lsls	r1, r2, #5
 8007ee6:	69fa      	ldr	r2, [r7, #28]
 8007ee8:	440a      	add	r2, r1
 8007eea:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007eee:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007ef2:	6113      	str	r3, [r2, #16]
 8007ef4:	e036      	b.n	8007f64 <USB_EPStartXfer+0x3dc>
 8007ef6:	bf00      	nop
 8007ef8:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8007efc:	68bb      	ldr	r3, [r7, #8]
 8007efe:	695a      	ldr	r2, [r3, #20]
 8007f00:	68bb      	ldr	r3, [r7, #8]
 8007f02:	689b      	ldr	r3, [r3, #8]
 8007f04:	4413      	add	r3, r2
 8007f06:	1e5a      	subs	r2, r3, #1
 8007f08:	68bb      	ldr	r3, [r7, #8]
 8007f0a:	689b      	ldr	r3, [r3, #8]
 8007f0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007f10:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8007f12:	69bb      	ldr	r3, [r7, #24]
 8007f14:	015a      	lsls	r2, r3, #5
 8007f16:	69fb      	ldr	r3, [r7, #28]
 8007f18:	4413      	add	r3, r2
 8007f1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f1e:	691a      	ldr	r2, [r3, #16]
 8007f20:	8afb      	ldrh	r3, [r7, #22]
 8007f22:	04d9      	lsls	r1, r3, #19
 8007f24:	4b39      	ldr	r3, [pc, #228]	; (800800c <USB_EPStartXfer+0x484>)
 8007f26:	400b      	ands	r3, r1
 8007f28:	69b9      	ldr	r1, [r7, #24]
 8007f2a:	0148      	lsls	r0, r1, #5
 8007f2c:	69f9      	ldr	r1, [r7, #28]
 8007f2e:	4401      	add	r1, r0
 8007f30:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007f34:	4313      	orrs	r3, r2
 8007f36:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8007f38:	69bb      	ldr	r3, [r7, #24]
 8007f3a:	015a      	lsls	r2, r3, #5
 8007f3c:	69fb      	ldr	r3, [r7, #28]
 8007f3e:	4413      	add	r3, r2
 8007f40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f44:	691a      	ldr	r2, [r3, #16]
 8007f46:	68bb      	ldr	r3, [r7, #8]
 8007f48:	689b      	ldr	r3, [r3, #8]
 8007f4a:	8af9      	ldrh	r1, [r7, #22]
 8007f4c:	fb01 f303 	mul.w	r3, r1, r3
 8007f50:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007f54:	69b9      	ldr	r1, [r7, #24]
 8007f56:	0148      	lsls	r0, r1, #5
 8007f58:	69f9      	ldr	r1, [r7, #28]
 8007f5a:	4401      	add	r1, r0
 8007f5c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007f60:	4313      	orrs	r3, r2
 8007f62:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8007f64:	79fb      	ldrb	r3, [r7, #7]
 8007f66:	2b01      	cmp	r3, #1
 8007f68:	d10d      	bne.n	8007f86 <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8007f6a:	68bb      	ldr	r3, [r7, #8]
 8007f6c:	68db      	ldr	r3, [r3, #12]
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	d009      	beq.n	8007f86 <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8007f72:	68bb      	ldr	r3, [r7, #8]
 8007f74:	68d9      	ldr	r1, [r3, #12]
 8007f76:	69bb      	ldr	r3, [r7, #24]
 8007f78:	015a      	lsls	r2, r3, #5
 8007f7a:	69fb      	ldr	r3, [r7, #28]
 8007f7c:	4413      	add	r3, r2
 8007f7e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f82:	460a      	mov	r2, r1
 8007f84:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8007f86:	68bb      	ldr	r3, [r7, #8]
 8007f88:	78db      	ldrb	r3, [r3, #3]
 8007f8a:	2b01      	cmp	r3, #1
 8007f8c:	d128      	bne.n	8007fe0 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007f8e:	69fb      	ldr	r3, [r7, #28]
 8007f90:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007f94:	689b      	ldr	r3, [r3, #8]
 8007f96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	d110      	bne.n	8007fc0 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8007f9e:	69bb      	ldr	r3, [r7, #24]
 8007fa0:	015a      	lsls	r2, r3, #5
 8007fa2:	69fb      	ldr	r3, [r7, #28]
 8007fa4:	4413      	add	r3, r2
 8007fa6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	69ba      	ldr	r2, [r7, #24]
 8007fae:	0151      	lsls	r1, r2, #5
 8007fb0:	69fa      	ldr	r2, [r7, #28]
 8007fb2:	440a      	add	r2, r1
 8007fb4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007fb8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007fbc:	6013      	str	r3, [r2, #0]
 8007fbe:	e00f      	b.n	8007fe0 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8007fc0:	69bb      	ldr	r3, [r7, #24]
 8007fc2:	015a      	lsls	r2, r3, #5
 8007fc4:	69fb      	ldr	r3, [r7, #28]
 8007fc6:	4413      	add	r3, r2
 8007fc8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	69ba      	ldr	r2, [r7, #24]
 8007fd0:	0151      	lsls	r1, r2, #5
 8007fd2:	69fa      	ldr	r2, [r7, #28]
 8007fd4:	440a      	add	r2, r1
 8007fd6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007fda:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007fde:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8007fe0:	69bb      	ldr	r3, [r7, #24]
 8007fe2:	015a      	lsls	r2, r3, #5
 8007fe4:	69fb      	ldr	r3, [r7, #28]
 8007fe6:	4413      	add	r3, r2
 8007fe8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	69ba      	ldr	r2, [r7, #24]
 8007ff0:	0151      	lsls	r1, r2, #5
 8007ff2:	69fa      	ldr	r2, [r7, #28]
 8007ff4:	440a      	add	r2, r1
 8007ff6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007ffa:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007ffe:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008000:	2300      	movs	r3, #0
}
 8008002:	4618      	mov	r0, r3
 8008004:	3720      	adds	r7, #32
 8008006:	46bd      	mov	sp, r7
 8008008:	bd80      	pop	{r7, pc}
 800800a:	bf00      	nop
 800800c:	1ff80000 	.word	0x1ff80000

08008010 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8008010:	b480      	push	{r7}
 8008012:	b087      	sub	sp, #28
 8008014:	af00      	add	r7, sp, #0
 8008016:	60f8      	str	r0, [r7, #12]
 8008018:	60b9      	str	r1, [r7, #8]
 800801a:	4613      	mov	r3, r2
 800801c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800801e:	68fb      	ldr	r3, [r7, #12]
 8008020:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8008022:	68bb      	ldr	r3, [r7, #8]
 8008024:	781b      	ldrb	r3, [r3, #0]
 8008026:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008028:	68bb      	ldr	r3, [r7, #8]
 800802a:	785b      	ldrb	r3, [r3, #1]
 800802c:	2b01      	cmp	r3, #1
 800802e:	f040 80cd 	bne.w	80081cc <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8008032:	68bb      	ldr	r3, [r7, #8]
 8008034:	695b      	ldr	r3, [r3, #20]
 8008036:	2b00      	cmp	r3, #0
 8008038:	d132      	bne.n	80080a0 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800803a:	693b      	ldr	r3, [r7, #16]
 800803c:	015a      	lsls	r2, r3, #5
 800803e:	697b      	ldr	r3, [r7, #20]
 8008040:	4413      	add	r3, r2
 8008042:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008046:	691b      	ldr	r3, [r3, #16]
 8008048:	693a      	ldr	r2, [r7, #16]
 800804a:	0151      	lsls	r1, r2, #5
 800804c:	697a      	ldr	r2, [r7, #20]
 800804e:	440a      	add	r2, r1
 8008050:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008054:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008058:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800805c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800805e:	693b      	ldr	r3, [r7, #16]
 8008060:	015a      	lsls	r2, r3, #5
 8008062:	697b      	ldr	r3, [r7, #20]
 8008064:	4413      	add	r3, r2
 8008066:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800806a:	691b      	ldr	r3, [r3, #16]
 800806c:	693a      	ldr	r2, [r7, #16]
 800806e:	0151      	lsls	r1, r2, #5
 8008070:	697a      	ldr	r2, [r7, #20]
 8008072:	440a      	add	r2, r1
 8008074:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008078:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800807c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800807e:	693b      	ldr	r3, [r7, #16]
 8008080:	015a      	lsls	r2, r3, #5
 8008082:	697b      	ldr	r3, [r7, #20]
 8008084:	4413      	add	r3, r2
 8008086:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800808a:	691b      	ldr	r3, [r3, #16]
 800808c:	693a      	ldr	r2, [r7, #16]
 800808e:	0151      	lsls	r1, r2, #5
 8008090:	697a      	ldr	r2, [r7, #20]
 8008092:	440a      	add	r2, r1
 8008094:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008098:	0cdb      	lsrs	r3, r3, #19
 800809a:	04db      	lsls	r3, r3, #19
 800809c:	6113      	str	r3, [r2, #16]
 800809e:	e04e      	b.n	800813e <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80080a0:	693b      	ldr	r3, [r7, #16]
 80080a2:	015a      	lsls	r2, r3, #5
 80080a4:	697b      	ldr	r3, [r7, #20]
 80080a6:	4413      	add	r3, r2
 80080a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80080ac:	691b      	ldr	r3, [r3, #16]
 80080ae:	693a      	ldr	r2, [r7, #16]
 80080b0:	0151      	lsls	r1, r2, #5
 80080b2:	697a      	ldr	r2, [r7, #20]
 80080b4:	440a      	add	r2, r1
 80080b6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80080ba:	0cdb      	lsrs	r3, r3, #19
 80080bc:	04db      	lsls	r3, r3, #19
 80080be:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80080c0:	693b      	ldr	r3, [r7, #16]
 80080c2:	015a      	lsls	r2, r3, #5
 80080c4:	697b      	ldr	r3, [r7, #20]
 80080c6:	4413      	add	r3, r2
 80080c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80080cc:	691b      	ldr	r3, [r3, #16]
 80080ce:	693a      	ldr	r2, [r7, #16]
 80080d0:	0151      	lsls	r1, r2, #5
 80080d2:	697a      	ldr	r2, [r7, #20]
 80080d4:	440a      	add	r2, r1
 80080d6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80080da:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80080de:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80080e2:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 80080e4:	68bb      	ldr	r3, [r7, #8]
 80080e6:	695a      	ldr	r2, [r3, #20]
 80080e8:	68bb      	ldr	r3, [r7, #8]
 80080ea:	689b      	ldr	r3, [r3, #8]
 80080ec:	429a      	cmp	r2, r3
 80080ee:	d903      	bls.n	80080f8 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 80080f0:	68bb      	ldr	r3, [r7, #8]
 80080f2:	689a      	ldr	r2, [r3, #8]
 80080f4:	68bb      	ldr	r3, [r7, #8]
 80080f6:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80080f8:	693b      	ldr	r3, [r7, #16]
 80080fa:	015a      	lsls	r2, r3, #5
 80080fc:	697b      	ldr	r3, [r7, #20]
 80080fe:	4413      	add	r3, r2
 8008100:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008104:	691b      	ldr	r3, [r3, #16]
 8008106:	693a      	ldr	r2, [r7, #16]
 8008108:	0151      	lsls	r1, r2, #5
 800810a:	697a      	ldr	r2, [r7, #20]
 800810c:	440a      	add	r2, r1
 800810e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008112:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008116:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8008118:	693b      	ldr	r3, [r7, #16]
 800811a:	015a      	lsls	r2, r3, #5
 800811c:	697b      	ldr	r3, [r7, #20]
 800811e:	4413      	add	r3, r2
 8008120:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008124:	691a      	ldr	r2, [r3, #16]
 8008126:	68bb      	ldr	r3, [r7, #8]
 8008128:	695b      	ldr	r3, [r3, #20]
 800812a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800812e:	6939      	ldr	r1, [r7, #16]
 8008130:	0148      	lsls	r0, r1, #5
 8008132:	6979      	ldr	r1, [r7, #20]
 8008134:	4401      	add	r1, r0
 8008136:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800813a:	4313      	orrs	r3, r2
 800813c:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800813e:	79fb      	ldrb	r3, [r7, #7]
 8008140:	2b01      	cmp	r3, #1
 8008142:	d11e      	bne.n	8008182 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8008144:	68bb      	ldr	r3, [r7, #8]
 8008146:	691b      	ldr	r3, [r3, #16]
 8008148:	2b00      	cmp	r3, #0
 800814a:	d009      	beq.n	8008160 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800814c:	693b      	ldr	r3, [r7, #16]
 800814e:	015a      	lsls	r2, r3, #5
 8008150:	697b      	ldr	r3, [r7, #20]
 8008152:	4413      	add	r3, r2
 8008154:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008158:	461a      	mov	r2, r3
 800815a:	68bb      	ldr	r3, [r7, #8]
 800815c:	691b      	ldr	r3, [r3, #16]
 800815e:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008160:	693b      	ldr	r3, [r7, #16]
 8008162:	015a      	lsls	r2, r3, #5
 8008164:	697b      	ldr	r3, [r7, #20]
 8008166:	4413      	add	r3, r2
 8008168:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	693a      	ldr	r2, [r7, #16]
 8008170:	0151      	lsls	r1, r2, #5
 8008172:	697a      	ldr	r2, [r7, #20]
 8008174:	440a      	add	r2, r1
 8008176:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800817a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800817e:	6013      	str	r3, [r2, #0]
 8008180:	e092      	b.n	80082a8 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008182:	693b      	ldr	r3, [r7, #16]
 8008184:	015a      	lsls	r2, r3, #5
 8008186:	697b      	ldr	r3, [r7, #20]
 8008188:	4413      	add	r3, r2
 800818a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	693a      	ldr	r2, [r7, #16]
 8008192:	0151      	lsls	r1, r2, #5
 8008194:	697a      	ldr	r2, [r7, #20]
 8008196:	440a      	add	r2, r1
 8008198:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800819c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80081a0:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 80081a2:	68bb      	ldr	r3, [r7, #8]
 80081a4:	695b      	ldr	r3, [r3, #20]
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	d07e      	beq.n	80082a8 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80081aa:	697b      	ldr	r3, [r7, #20]
 80081ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80081b0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80081b2:	68bb      	ldr	r3, [r7, #8]
 80081b4:	781b      	ldrb	r3, [r3, #0]
 80081b6:	f003 030f 	and.w	r3, r3, #15
 80081ba:	2101      	movs	r1, #1
 80081bc:	fa01 f303 	lsl.w	r3, r1, r3
 80081c0:	6979      	ldr	r1, [r7, #20]
 80081c2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80081c6:	4313      	orrs	r3, r2
 80081c8:	634b      	str	r3, [r1, #52]	; 0x34
 80081ca:	e06d      	b.n	80082a8 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80081cc:	693b      	ldr	r3, [r7, #16]
 80081ce:	015a      	lsls	r2, r3, #5
 80081d0:	697b      	ldr	r3, [r7, #20]
 80081d2:	4413      	add	r3, r2
 80081d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80081d8:	691b      	ldr	r3, [r3, #16]
 80081da:	693a      	ldr	r2, [r7, #16]
 80081dc:	0151      	lsls	r1, r2, #5
 80081de:	697a      	ldr	r2, [r7, #20]
 80081e0:	440a      	add	r2, r1
 80081e2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80081e6:	0cdb      	lsrs	r3, r3, #19
 80081e8:	04db      	lsls	r3, r3, #19
 80081ea:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80081ec:	693b      	ldr	r3, [r7, #16]
 80081ee:	015a      	lsls	r2, r3, #5
 80081f0:	697b      	ldr	r3, [r7, #20]
 80081f2:	4413      	add	r3, r2
 80081f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80081f8:	691b      	ldr	r3, [r3, #16]
 80081fa:	693a      	ldr	r2, [r7, #16]
 80081fc:	0151      	lsls	r1, r2, #5
 80081fe:	697a      	ldr	r2, [r7, #20]
 8008200:	440a      	add	r2, r1
 8008202:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008206:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800820a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800820e:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8008210:	68bb      	ldr	r3, [r7, #8]
 8008212:	695b      	ldr	r3, [r3, #20]
 8008214:	2b00      	cmp	r3, #0
 8008216:	d003      	beq.n	8008220 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8008218:	68bb      	ldr	r3, [r7, #8]
 800821a:	689a      	ldr	r2, [r3, #8]
 800821c:	68bb      	ldr	r3, [r7, #8]
 800821e:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008220:	693b      	ldr	r3, [r7, #16]
 8008222:	015a      	lsls	r2, r3, #5
 8008224:	697b      	ldr	r3, [r7, #20]
 8008226:	4413      	add	r3, r2
 8008228:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800822c:	691b      	ldr	r3, [r3, #16]
 800822e:	693a      	ldr	r2, [r7, #16]
 8008230:	0151      	lsls	r1, r2, #5
 8008232:	697a      	ldr	r2, [r7, #20]
 8008234:	440a      	add	r2, r1
 8008236:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800823a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800823e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8008240:	693b      	ldr	r3, [r7, #16]
 8008242:	015a      	lsls	r2, r3, #5
 8008244:	697b      	ldr	r3, [r7, #20]
 8008246:	4413      	add	r3, r2
 8008248:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800824c:	691a      	ldr	r2, [r3, #16]
 800824e:	68bb      	ldr	r3, [r7, #8]
 8008250:	689b      	ldr	r3, [r3, #8]
 8008252:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008256:	6939      	ldr	r1, [r7, #16]
 8008258:	0148      	lsls	r0, r1, #5
 800825a:	6979      	ldr	r1, [r7, #20]
 800825c:	4401      	add	r1, r0
 800825e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8008262:	4313      	orrs	r3, r2
 8008264:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8008266:	79fb      	ldrb	r3, [r7, #7]
 8008268:	2b01      	cmp	r3, #1
 800826a:	d10d      	bne.n	8008288 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800826c:	68bb      	ldr	r3, [r7, #8]
 800826e:	68db      	ldr	r3, [r3, #12]
 8008270:	2b00      	cmp	r3, #0
 8008272:	d009      	beq.n	8008288 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8008274:	68bb      	ldr	r3, [r7, #8]
 8008276:	68d9      	ldr	r1, [r3, #12]
 8008278:	693b      	ldr	r3, [r7, #16]
 800827a:	015a      	lsls	r2, r3, #5
 800827c:	697b      	ldr	r3, [r7, #20]
 800827e:	4413      	add	r3, r2
 8008280:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008284:	460a      	mov	r2, r1
 8008286:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8008288:	693b      	ldr	r3, [r7, #16]
 800828a:	015a      	lsls	r2, r3, #5
 800828c:	697b      	ldr	r3, [r7, #20]
 800828e:	4413      	add	r3, r2
 8008290:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	693a      	ldr	r2, [r7, #16]
 8008298:	0151      	lsls	r1, r2, #5
 800829a:	697a      	ldr	r2, [r7, #20]
 800829c:	440a      	add	r2, r1
 800829e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80082a2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80082a6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80082a8:	2300      	movs	r3, #0
}
 80082aa:	4618      	mov	r0, r3
 80082ac:	371c      	adds	r7, #28
 80082ae:	46bd      	mov	sp, r7
 80082b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082b4:	4770      	bx	lr

080082b6 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80082b6:	b480      	push	{r7}
 80082b8:	b089      	sub	sp, #36	; 0x24
 80082ba:	af00      	add	r7, sp, #0
 80082bc:	60f8      	str	r0, [r7, #12]
 80082be:	60b9      	str	r1, [r7, #8]
 80082c0:	4611      	mov	r1, r2
 80082c2:	461a      	mov	r2, r3
 80082c4:	460b      	mov	r3, r1
 80082c6:	71fb      	strb	r3, [r7, #7]
 80082c8:	4613      	mov	r3, r2
 80082ca:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80082cc:	68fb      	ldr	r3, [r7, #12]
 80082ce:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 80082d0:	68bb      	ldr	r3, [r7, #8]
 80082d2:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 80082d4:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80082d8:	2b00      	cmp	r3, #0
 80082da:	d11a      	bne.n	8008312 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80082dc:	88bb      	ldrh	r3, [r7, #4]
 80082de:	3303      	adds	r3, #3
 80082e0:	089b      	lsrs	r3, r3, #2
 80082e2:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80082e4:	2300      	movs	r3, #0
 80082e6:	61bb      	str	r3, [r7, #24]
 80082e8:	e00f      	b.n	800830a <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80082ea:	79fb      	ldrb	r3, [r7, #7]
 80082ec:	031a      	lsls	r2, r3, #12
 80082ee:	697b      	ldr	r3, [r7, #20]
 80082f0:	4413      	add	r3, r2
 80082f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80082f6:	461a      	mov	r2, r3
 80082f8:	69fb      	ldr	r3, [r7, #28]
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	6013      	str	r3, [r2, #0]
      pSrc++;
 80082fe:	69fb      	ldr	r3, [r7, #28]
 8008300:	3304      	adds	r3, #4
 8008302:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8008304:	69bb      	ldr	r3, [r7, #24]
 8008306:	3301      	adds	r3, #1
 8008308:	61bb      	str	r3, [r7, #24]
 800830a:	69ba      	ldr	r2, [r7, #24]
 800830c:	693b      	ldr	r3, [r7, #16]
 800830e:	429a      	cmp	r2, r3
 8008310:	d3eb      	bcc.n	80082ea <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8008312:	2300      	movs	r3, #0
}
 8008314:	4618      	mov	r0, r3
 8008316:	3724      	adds	r7, #36	; 0x24
 8008318:	46bd      	mov	sp, r7
 800831a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800831e:	4770      	bx	lr

08008320 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8008320:	b480      	push	{r7}
 8008322:	b089      	sub	sp, #36	; 0x24
 8008324:	af00      	add	r7, sp, #0
 8008326:	60f8      	str	r0, [r7, #12]
 8008328:	60b9      	str	r1, [r7, #8]
 800832a:	4613      	mov	r3, r2
 800832c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800832e:	68fb      	ldr	r3, [r7, #12]
 8008330:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8008332:	68bb      	ldr	r3, [r7, #8]
 8008334:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8008336:	88fb      	ldrh	r3, [r7, #6]
 8008338:	3303      	adds	r3, #3
 800833a:	089b      	lsrs	r3, r3, #2
 800833c:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 800833e:	2300      	movs	r3, #0
 8008340:	61bb      	str	r3, [r7, #24]
 8008342:	e00b      	b.n	800835c <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8008344:	697b      	ldr	r3, [r7, #20]
 8008346:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800834a:	681a      	ldr	r2, [r3, #0]
 800834c:	69fb      	ldr	r3, [r7, #28]
 800834e:	601a      	str	r2, [r3, #0]
    pDest++;
 8008350:	69fb      	ldr	r3, [r7, #28]
 8008352:	3304      	adds	r3, #4
 8008354:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8008356:	69bb      	ldr	r3, [r7, #24]
 8008358:	3301      	adds	r3, #1
 800835a:	61bb      	str	r3, [r7, #24]
 800835c:	69ba      	ldr	r2, [r7, #24]
 800835e:	693b      	ldr	r3, [r7, #16]
 8008360:	429a      	cmp	r2, r3
 8008362:	d3ef      	bcc.n	8008344 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8008364:	69fb      	ldr	r3, [r7, #28]
}
 8008366:	4618      	mov	r0, r3
 8008368:	3724      	adds	r7, #36	; 0x24
 800836a:	46bd      	mov	sp, r7
 800836c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008370:	4770      	bx	lr

08008372 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008372:	b480      	push	{r7}
 8008374:	b085      	sub	sp, #20
 8008376:	af00      	add	r7, sp, #0
 8008378:	6078      	str	r0, [r7, #4]
 800837a:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008380:	683b      	ldr	r3, [r7, #0]
 8008382:	781b      	ldrb	r3, [r3, #0]
 8008384:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008386:	683b      	ldr	r3, [r7, #0]
 8008388:	785b      	ldrb	r3, [r3, #1]
 800838a:	2b01      	cmp	r3, #1
 800838c:	d12c      	bne.n	80083e8 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800838e:	68bb      	ldr	r3, [r7, #8]
 8008390:	015a      	lsls	r2, r3, #5
 8008392:	68fb      	ldr	r3, [r7, #12]
 8008394:	4413      	add	r3, r2
 8008396:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	2b00      	cmp	r3, #0
 800839e:	db12      	blt.n	80083c6 <USB_EPSetStall+0x54>
 80083a0:	68bb      	ldr	r3, [r7, #8]
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	d00f      	beq.n	80083c6 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80083a6:	68bb      	ldr	r3, [r7, #8]
 80083a8:	015a      	lsls	r2, r3, #5
 80083aa:	68fb      	ldr	r3, [r7, #12]
 80083ac:	4413      	add	r3, r2
 80083ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	68ba      	ldr	r2, [r7, #8]
 80083b6:	0151      	lsls	r1, r2, #5
 80083b8:	68fa      	ldr	r2, [r7, #12]
 80083ba:	440a      	add	r2, r1
 80083bc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80083c0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80083c4:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80083c6:	68bb      	ldr	r3, [r7, #8]
 80083c8:	015a      	lsls	r2, r3, #5
 80083ca:	68fb      	ldr	r3, [r7, #12]
 80083cc:	4413      	add	r3, r2
 80083ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	68ba      	ldr	r2, [r7, #8]
 80083d6:	0151      	lsls	r1, r2, #5
 80083d8:	68fa      	ldr	r2, [r7, #12]
 80083da:	440a      	add	r2, r1
 80083dc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80083e0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80083e4:	6013      	str	r3, [r2, #0]
 80083e6:	e02b      	b.n	8008440 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80083e8:	68bb      	ldr	r3, [r7, #8]
 80083ea:	015a      	lsls	r2, r3, #5
 80083ec:	68fb      	ldr	r3, [r7, #12]
 80083ee:	4413      	add	r3, r2
 80083f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	db12      	blt.n	8008420 <USB_EPSetStall+0xae>
 80083fa:	68bb      	ldr	r3, [r7, #8]
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	d00f      	beq.n	8008420 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8008400:	68bb      	ldr	r3, [r7, #8]
 8008402:	015a      	lsls	r2, r3, #5
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	4413      	add	r3, r2
 8008408:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	68ba      	ldr	r2, [r7, #8]
 8008410:	0151      	lsls	r1, r2, #5
 8008412:	68fa      	ldr	r2, [r7, #12]
 8008414:	440a      	add	r2, r1
 8008416:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800841a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800841e:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8008420:	68bb      	ldr	r3, [r7, #8]
 8008422:	015a      	lsls	r2, r3, #5
 8008424:	68fb      	ldr	r3, [r7, #12]
 8008426:	4413      	add	r3, r2
 8008428:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	68ba      	ldr	r2, [r7, #8]
 8008430:	0151      	lsls	r1, r2, #5
 8008432:	68fa      	ldr	r2, [r7, #12]
 8008434:	440a      	add	r2, r1
 8008436:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800843a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800843e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008440:	2300      	movs	r3, #0
}
 8008442:	4618      	mov	r0, r3
 8008444:	3714      	adds	r7, #20
 8008446:	46bd      	mov	sp, r7
 8008448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800844c:	4770      	bx	lr

0800844e <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800844e:	b480      	push	{r7}
 8008450:	b085      	sub	sp, #20
 8008452:	af00      	add	r7, sp, #0
 8008454:	6078      	str	r0, [r7, #4]
 8008456:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800845c:	683b      	ldr	r3, [r7, #0]
 800845e:	781b      	ldrb	r3, [r3, #0]
 8008460:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008462:	683b      	ldr	r3, [r7, #0]
 8008464:	785b      	ldrb	r3, [r3, #1]
 8008466:	2b01      	cmp	r3, #1
 8008468:	d128      	bne.n	80084bc <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800846a:	68bb      	ldr	r3, [r7, #8]
 800846c:	015a      	lsls	r2, r3, #5
 800846e:	68fb      	ldr	r3, [r7, #12]
 8008470:	4413      	add	r3, r2
 8008472:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	68ba      	ldr	r2, [r7, #8]
 800847a:	0151      	lsls	r1, r2, #5
 800847c:	68fa      	ldr	r2, [r7, #12]
 800847e:	440a      	add	r2, r1
 8008480:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008484:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008488:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800848a:	683b      	ldr	r3, [r7, #0]
 800848c:	78db      	ldrb	r3, [r3, #3]
 800848e:	2b03      	cmp	r3, #3
 8008490:	d003      	beq.n	800849a <USB_EPClearStall+0x4c>
 8008492:	683b      	ldr	r3, [r7, #0]
 8008494:	78db      	ldrb	r3, [r3, #3]
 8008496:	2b02      	cmp	r3, #2
 8008498:	d138      	bne.n	800850c <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800849a:	68bb      	ldr	r3, [r7, #8]
 800849c:	015a      	lsls	r2, r3, #5
 800849e:	68fb      	ldr	r3, [r7, #12]
 80084a0:	4413      	add	r3, r2
 80084a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	68ba      	ldr	r2, [r7, #8]
 80084aa:	0151      	lsls	r1, r2, #5
 80084ac:	68fa      	ldr	r2, [r7, #12]
 80084ae:	440a      	add	r2, r1
 80084b0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80084b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80084b8:	6013      	str	r3, [r2, #0]
 80084ba:	e027      	b.n	800850c <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80084bc:	68bb      	ldr	r3, [r7, #8]
 80084be:	015a      	lsls	r2, r3, #5
 80084c0:	68fb      	ldr	r3, [r7, #12]
 80084c2:	4413      	add	r3, r2
 80084c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	68ba      	ldr	r2, [r7, #8]
 80084cc:	0151      	lsls	r1, r2, #5
 80084ce:	68fa      	ldr	r2, [r7, #12]
 80084d0:	440a      	add	r2, r1
 80084d2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80084d6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80084da:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80084dc:	683b      	ldr	r3, [r7, #0]
 80084de:	78db      	ldrb	r3, [r3, #3]
 80084e0:	2b03      	cmp	r3, #3
 80084e2:	d003      	beq.n	80084ec <USB_EPClearStall+0x9e>
 80084e4:	683b      	ldr	r3, [r7, #0]
 80084e6:	78db      	ldrb	r3, [r3, #3]
 80084e8:	2b02      	cmp	r3, #2
 80084ea:	d10f      	bne.n	800850c <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80084ec:	68bb      	ldr	r3, [r7, #8]
 80084ee:	015a      	lsls	r2, r3, #5
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	4413      	add	r3, r2
 80084f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	68ba      	ldr	r2, [r7, #8]
 80084fc:	0151      	lsls	r1, r2, #5
 80084fe:	68fa      	ldr	r2, [r7, #12]
 8008500:	440a      	add	r2, r1
 8008502:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008506:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800850a:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800850c:	2300      	movs	r3, #0
}
 800850e:	4618      	mov	r0, r3
 8008510:	3714      	adds	r7, #20
 8008512:	46bd      	mov	sp, r7
 8008514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008518:	4770      	bx	lr

0800851a <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800851a:	b480      	push	{r7}
 800851c:	b085      	sub	sp, #20
 800851e:	af00      	add	r7, sp, #0
 8008520:	6078      	str	r0, [r7, #4]
 8008522:	460b      	mov	r3, r1
 8008524:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800852a:	68fb      	ldr	r3, [r7, #12]
 800852c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	68fa      	ldr	r2, [r7, #12]
 8008534:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008538:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800853c:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800853e:	68fb      	ldr	r3, [r7, #12]
 8008540:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008544:	681a      	ldr	r2, [r3, #0]
 8008546:	78fb      	ldrb	r3, [r7, #3]
 8008548:	011b      	lsls	r3, r3, #4
 800854a:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800854e:	68f9      	ldr	r1, [r7, #12]
 8008550:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008554:	4313      	orrs	r3, r2
 8008556:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8008558:	2300      	movs	r3, #0
}
 800855a:	4618      	mov	r0, r3
 800855c:	3714      	adds	r7, #20
 800855e:	46bd      	mov	sp, r7
 8008560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008564:	4770      	bx	lr

08008566 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8008566:	b480      	push	{r7}
 8008568:	b085      	sub	sp, #20
 800856a:	af00      	add	r7, sp, #0
 800856c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8008572:	68fb      	ldr	r3, [r7, #12]
 8008574:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	68fa      	ldr	r2, [r7, #12]
 800857c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008580:	f023 0303 	bic.w	r3, r3, #3
 8008584:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800858c:	685b      	ldr	r3, [r3, #4]
 800858e:	68fa      	ldr	r2, [r7, #12]
 8008590:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008594:	f023 0302 	bic.w	r3, r3, #2
 8008598:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800859a:	2300      	movs	r3, #0
}
 800859c:	4618      	mov	r0, r3
 800859e:	3714      	adds	r7, #20
 80085a0:	46bd      	mov	sp, r7
 80085a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085a6:	4770      	bx	lr

080085a8 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80085a8:	b480      	push	{r7}
 80085aa:	b085      	sub	sp, #20
 80085ac:	af00      	add	r7, sp, #0
 80085ae:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80085b4:	68fb      	ldr	r3, [r7, #12]
 80085b6:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	68fa      	ldr	r2, [r7, #12]
 80085be:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80085c2:	f023 0303 	bic.w	r3, r3, #3
 80085c6:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80085c8:	68fb      	ldr	r3, [r7, #12]
 80085ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80085ce:	685b      	ldr	r3, [r3, #4]
 80085d0:	68fa      	ldr	r2, [r7, #12]
 80085d2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80085d6:	f043 0302 	orr.w	r3, r3, #2
 80085da:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80085dc:	2300      	movs	r3, #0
}
 80085de:	4618      	mov	r0, r3
 80085e0:	3714      	adds	r7, #20
 80085e2:	46bd      	mov	sp, r7
 80085e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085e8:	4770      	bx	lr

080085ea <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80085ea:	b480      	push	{r7}
 80085ec:	b085      	sub	sp, #20
 80085ee:	af00      	add	r7, sp, #0
 80085f0:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	695b      	ldr	r3, [r3, #20]
 80085f6:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	699b      	ldr	r3, [r3, #24]
 80085fc:	68fa      	ldr	r2, [r7, #12]
 80085fe:	4013      	ands	r3, r2
 8008600:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8008602:	68fb      	ldr	r3, [r7, #12]
}
 8008604:	4618      	mov	r0, r3
 8008606:	3714      	adds	r7, #20
 8008608:	46bd      	mov	sp, r7
 800860a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800860e:	4770      	bx	lr

08008610 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8008610:	b480      	push	{r7}
 8008612:	b085      	sub	sp, #20
 8008614:	af00      	add	r7, sp, #0
 8008616:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800861c:	68fb      	ldr	r3, [r7, #12]
 800861e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008622:	699b      	ldr	r3, [r3, #24]
 8008624:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8008626:	68fb      	ldr	r3, [r7, #12]
 8008628:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800862c:	69db      	ldr	r3, [r3, #28]
 800862e:	68ba      	ldr	r2, [r7, #8]
 8008630:	4013      	ands	r3, r2
 8008632:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8008634:	68bb      	ldr	r3, [r7, #8]
 8008636:	0c1b      	lsrs	r3, r3, #16
}
 8008638:	4618      	mov	r0, r3
 800863a:	3714      	adds	r7, #20
 800863c:	46bd      	mov	sp, r7
 800863e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008642:	4770      	bx	lr

08008644 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8008644:	b480      	push	{r7}
 8008646:	b085      	sub	sp, #20
 8008648:	af00      	add	r7, sp, #0
 800864a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008656:	699b      	ldr	r3, [r3, #24]
 8008658:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800865a:	68fb      	ldr	r3, [r7, #12]
 800865c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008660:	69db      	ldr	r3, [r3, #28]
 8008662:	68ba      	ldr	r2, [r7, #8]
 8008664:	4013      	ands	r3, r2
 8008666:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8008668:	68bb      	ldr	r3, [r7, #8]
 800866a:	b29b      	uxth	r3, r3
}
 800866c:	4618      	mov	r0, r3
 800866e:	3714      	adds	r7, #20
 8008670:	46bd      	mov	sp, r7
 8008672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008676:	4770      	bx	lr

08008678 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8008678:	b480      	push	{r7}
 800867a:	b085      	sub	sp, #20
 800867c:	af00      	add	r7, sp, #0
 800867e:	6078      	str	r0, [r7, #4]
 8008680:	460b      	mov	r3, r1
 8008682:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8008688:	78fb      	ldrb	r3, [r7, #3]
 800868a:	015a      	lsls	r2, r3, #5
 800868c:	68fb      	ldr	r3, [r7, #12]
 800868e:	4413      	add	r3, r2
 8008690:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008694:	689b      	ldr	r3, [r3, #8]
 8008696:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8008698:	68fb      	ldr	r3, [r7, #12]
 800869a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800869e:	695b      	ldr	r3, [r3, #20]
 80086a0:	68ba      	ldr	r2, [r7, #8]
 80086a2:	4013      	ands	r3, r2
 80086a4:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80086a6:	68bb      	ldr	r3, [r7, #8]
}
 80086a8:	4618      	mov	r0, r3
 80086aa:	3714      	adds	r7, #20
 80086ac:	46bd      	mov	sp, r7
 80086ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086b2:	4770      	bx	lr

080086b4 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80086b4:	b480      	push	{r7}
 80086b6:	b087      	sub	sp, #28
 80086b8:	af00      	add	r7, sp, #0
 80086ba:	6078      	str	r0, [r7, #4]
 80086bc:	460b      	mov	r3, r1
 80086be:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 80086c4:	697b      	ldr	r3, [r7, #20]
 80086c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80086ca:	691b      	ldr	r3, [r3, #16]
 80086cc:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80086ce:	697b      	ldr	r3, [r7, #20]
 80086d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80086d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80086d6:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80086d8:	78fb      	ldrb	r3, [r7, #3]
 80086da:	f003 030f 	and.w	r3, r3, #15
 80086de:	68fa      	ldr	r2, [r7, #12]
 80086e0:	fa22 f303 	lsr.w	r3, r2, r3
 80086e4:	01db      	lsls	r3, r3, #7
 80086e6:	b2db      	uxtb	r3, r3
 80086e8:	693a      	ldr	r2, [r7, #16]
 80086ea:	4313      	orrs	r3, r2
 80086ec:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80086ee:	78fb      	ldrb	r3, [r7, #3]
 80086f0:	015a      	lsls	r2, r3, #5
 80086f2:	697b      	ldr	r3, [r7, #20]
 80086f4:	4413      	add	r3, r2
 80086f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80086fa:	689b      	ldr	r3, [r3, #8]
 80086fc:	693a      	ldr	r2, [r7, #16]
 80086fe:	4013      	ands	r3, r2
 8008700:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8008702:	68bb      	ldr	r3, [r7, #8]
}
 8008704:	4618      	mov	r0, r3
 8008706:	371c      	adds	r7, #28
 8008708:	46bd      	mov	sp, r7
 800870a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800870e:	4770      	bx	lr

08008710 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8008710:	b480      	push	{r7}
 8008712:	b083      	sub	sp, #12
 8008714:	af00      	add	r7, sp, #0
 8008716:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	695b      	ldr	r3, [r3, #20]
 800871c:	f003 0301 	and.w	r3, r3, #1
}
 8008720:	4618      	mov	r0, r3
 8008722:	370c      	adds	r7, #12
 8008724:	46bd      	mov	sp, r7
 8008726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800872a:	4770      	bx	lr

0800872c <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800872c:	b480      	push	{r7}
 800872e:	b085      	sub	sp, #20
 8008730:	af00      	add	r7, sp, #0
 8008732:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8008738:	68fb      	ldr	r3, [r7, #12]
 800873a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	68fa      	ldr	r2, [r7, #12]
 8008742:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008746:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800874a:	f023 0307 	bic.w	r3, r3, #7
 800874e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8008750:	68fb      	ldr	r3, [r7, #12]
 8008752:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008756:	685b      	ldr	r3, [r3, #4]
 8008758:	68fa      	ldr	r2, [r7, #12]
 800875a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800875e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008762:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008764:	2300      	movs	r3, #0
}
 8008766:	4618      	mov	r0, r3
 8008768:	3714      	adds	r7, #20
 800876a:	46bd      	mov	sp, r7
 800876c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008770:	4770      	bx	lr
	...

08008774 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8008774:	b480      	push	{r7}
 8008776:	b087      	sub	sp, #28
 8008778:	af00      	add	r7, sp, #0
 800877a:	60f8      	str	r0, [r7, #12]
 800877c:	460b      	mov	r3, r1
 800877e:	607a      	str	r2, [r7, #4]
 8008780:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008782:	68fb      	ldr	r3, [r7, #12]
 8008784:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8008786:	68fb      	ldr	r3, [r7, #12]
 8008788:	333c      	adds	r3, #60	; 0x3c
 800878a:	3304      	adds	r3, #4
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8008790:	693b      	ldr	r3, [r7, #16]
 8008792:	4a26      	ldr	r2, [pc, #152]	; (800882c <USB_EP0_OutStart+0xb8>)
 8008794:	4293      	cmp	r3, r2
 8008796:	d90a      	bls.n	80087ae <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008798:	697b      	ldr	r3, [r7, #20]
 800879a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80087a4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80087a8:	d101      	bne.n	80087ae <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80087aa:	2300      	movs	r3, #0
 80087ac:	e037      	b.n	800881e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80087ae:	697b      	ldr	r3, [r7, #20]
 80087b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80087b4:	461a      	mov	r2, r3
 80087b6:	2300      	movs	r3, #0
 80087b8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80087ba:	697b      	ldr	r3, [r7, #20]
 80087bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80087c0:	691b      	ldr	r3, [r3, #16]
 80087c2:	697a      	ldr	r2, [r7, #20]
 80087c4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80087c8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80087cc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80087ce:	697b      	ldr	r3, [r7, #20]
 80087d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80087d4:	691b      	ldr	r3, [r3, #16]
 80087d6:	697a      	ldr	r2, [r7, #20]
 80087d8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80087dc:	f043 0318 	orr.w	r3, r3, #24
 80087e0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80087e2:	697b      	ldr	r3, [r7, #20]
 80087e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80087e8:	691b      	ldr	r3, [r3, #16]
 80087ea:	697a      	ldr	r2, [r7, #20]
 80087ec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80087f0:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80087f4:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80087f6:	7afb      	ldrb	r3, [r7, #11]
 80087f8:	2b01      	cmp	r3, #1
 80087fa:	d10f      	bne.n	800881c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80087fc:	697b      	ldr	r3, [r7, #20]
 80087fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008802:	461a      	mov	r2, r3
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8008808:	697b      	ldr	r3, [r7, #20]
 800880a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	697a      	ldr	r2, [r7, #20]
 8008812:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008816:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800881a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800881c:	2300      	movs	r3, #0
}
 800881e:	4618      	mov	r0, r3
 8008820:	371c      	adds	r7, #28
 8008822:	46bd      	mov	sp, r7
 8008824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008828:	4770      	bx	lr
 800882a:	bf00      	nop
 800882c:	4f54300a 	.word	0x4f54300a

08008830 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8008830:	b480      	push	{r7}
 8008832:	b085      	sub	sp, #20
 8008834:	af00      	add	r7, sp, #0
 8008836:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8008838:	2300      	movs	r3, #0
 800883a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800883c:	68fb      	ldr	r3, [r7, #12]
 800883e:	3301      	adds	r3, #1
 8008840:	60fb      	str	r3, [r7, #12]
 8008842:	68fb      	ldr	r3, [r7, #12]
 8008844:	4a13      	ldr	r2, [pc, #76]	; (8008894 <USB_CoreReset+0x64>)
 8008846:	4293      	cmp	r3, r2
 8008848:	d901      	bls.n	800884e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800884a:	2303      	movs	r3, #3
 800884c:	e01b      	b.n	8008886 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	691b      	ldr	r3, [r3, #16]
 8008852:	2b00      	cmp	r3, #0
 8008854:	daf2      	bge.n	800883c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8008856:	2300      	movs	r3, #0
 8008858:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	691b      	ldr	r3, [r3, #16]
 800885e:	f043 0201 	orr.w	r2, r3, #1
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8008866:	68fb      	ldr	r3, [r7, #12]
 8008868:	3301      	adds	r3, #1
 800886a:	60fb      	str	r3, [r7, #12]
 800886c:	68fb      	ldr	r3, [r7, #12]
 800886e:	4a09      	ldr	r2, [pc, #36]	; (8008894 <USB_CoreReset+0x64>)
 8008870:	4293      	cmp	r3, r2
 8008872:	d901      	bls.n	8008878 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8008874:	2303      	movs	r3, #3
 8008876:	e006      	b.n	8008886 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	691b      	ldr	r3, [r3, #16]
 800887c:	f003 0301 	and.w	r3, r3, #1
 8008880:	2b01      	cmp	r3, #1
 8008882:	d0f0      	beq.n	8008866 <USB_CoreReset+0x36>

  return HAL_OK;
 8008884:	2300      	movs	r3, #0
}
 8008886:	4618      	mov	r0, r3
 8008888:	3714      	adds	r7, #20
 800888a:	46bd      	mov	sp, r7
 800888c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008890:	4770      	bx	lr
 8008892:	bf00      	nop
 8008894:	00030d40 	.word	0x00030d40

08008898 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008898:	b580      	push	{r7, lr}
 800889a:	b084      	sub	sp, #16
 800889c:	af00      	add	r7, sp, #0
 800889e:	6078      	str	r0, [r7, #4]
 80088a0:	460b      	mov	r3, r1
 80088a2:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80088a4:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80088a8:	f004 f880 	bl	800c9ac <malloc>
 80088ac:	4603      	mov	r3, r0
 80088ae:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80088b0:	68fb      	ldr	r3, [r7, #12]
 80088b2:	2b00      	cmp	r3, #0
 80088b4:	d105      	bne.n	80088c2 <USBD_CDC_Init+0x2a>
  {
    pdev->pClassData = NULL;
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	2200      	movs	r2, #0
 80088ba:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 80088be:	2302      	movs	r3, #2
 80088c0:	e066      	b.n	8008990 <USBD_CDC_Init+0xf8>
  }

  pdev->pClassData = (void *)hcdc;
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	68fa      	ldr	r2, [r7, #12]
 80088c6:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	7c1b      	ldrb	r3, [r3, #16]
 80088ce:	2b00      	cmp	r3, #0
 80088d0:	d119      	bne.n	8008906 <USBD_CDC_Init+0x6e>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80088d2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80088d6:	2202      	movs	r2, #2
 80088d8:	2181      	movs	r1, #129	; 0x81
 80088da:	6878      	ldr	r0, [r7, #4]
 80088dc:	f001 ffc7 	bl	800a86e <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	2201      	movs	r2, #1
 80088e4:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80088e6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80088ea:	2202      	movs	r2, #2
 80088ec:	2101      	movs	r1, #1
 80088ee:	6878      	ldr	r0, [r7, #4]
 80088f0:	f001 ffbd 	bl	800a86e <USBD_LL_OpenEP>
                          CDC_DATA_HS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	2201      	movs	r2, #1
 80088f8:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CDC CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	2210      	movs	r2, #16
 8008900:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8008904:	e016      	b.n	8008934 <USBD_CDC_Init+0x9c>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8008906:	2340      	movs	r3, #64	; 0x40
 8008908:	2202      	movs	r2, #2
 800890a:	2181      	movs	r1, #129	; 0x81
 800890c:	6878      	ldr	r0, [r7, #4]
 800890e:	f001 ffae 	bl	800a86e <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	2201      	movs	r2, #1
 8008916:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8008918:	2340      	movs	r3, #64	; 0x40
 800891a:	2202      	movs	r2, #2
 800891c:	2101      	movs	r1, #1
 800891e:	6878      	ldr	r0, [r7, #4]
 8008920:	f001 ffa5 	bl	800a86e <USBD_LL_OpenEP>
                          CDC_DATA_FS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	2201      	movs	r2, #1
 8008928:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	2210      	movs	r2, #16
 8008930:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8008934:	2308      	movs	r3, #8
 8008936:	2203      	movs	r2, #3
 8008938:	2182      	movs	r1, #130	; 0x82
 800893a:	6878      	ldr	r0, [r7, #4]
 800893c:	f001 ff97 	bl	800a86e <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	2201      	movs	r2, #1
 8008944:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8008952:	68fb      	ldr	r3, [r7, #12]
 8008954:	2200      	movs	r2, #0
 8008956:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800895a:	68fb      	ldr	r3, [r7, #12]
 800895c:	2200      	movs	r2, #0
 800895e:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	7c1b      	ldrb	r3, [r3, #16]
 8008966:	2b00      	cmp	r3, #0
 8008968:	d109      	bne.n	800897e <USBD_CDC_Init+0xe6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800896a:	68fb      	ldr	r3, [r7, #12]
 800896c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008970:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008974:	2101      	movs	r1, #1
 8008976:	6878      	ldr	r0, [r7, #4]
 8008978:	f002 f868 	bl	800aa4c <USBD_LL_PrepareReceive>
 800897c:	e007      	b.n	800898e <USBD_CDC_Init+0xf6>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800897e:	68fb      	ldr	r3, [r7, #12]
 8008980:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008984:	2340      	movs	r3, #64	; 0x40
 8008986:	2101      	movs	r1, #1
 8008988:	6878      	ldr	r0, [r7, #4]
 800898a:	f002 f85f 	bl	800aa4c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800898e:	2300      	movs	r3, #0
}
 8008990:	4618      	mov	r0, r3
 8008992:	3710      	adds	r7, #16
 8008994:	46bd      	mov	sp, r7
 8008996:	bd80      	pop	{r7, pc}

08008998 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008998:	b580      	push	{r7, lr}
 800899a:	b084      	sub	sp, #16
 800899c:	af00      	add	r7, sp, #0
 800899e:	6078      	str	r0, [r7, #4]
 80089a0:	460b      	mov	r3, r1
 80089a2:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  uint8_t ret = 0U;
 80089a4:	2300      	movs	r3, #0
 80089a6:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 80089a8:	2181      	movs	r1, #129	; 0x81
 80089aa:	6878      	ldr	r0, [r7, #4]
 80089ac:	f001 ff85 	bl	800a8ba <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	2200      	movs	r2, #0
 80089b4:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 80089b6:	2101      	movs	r1, #1
 80089b8:	6878      	ldr	r0, [r7, #4]
 80089ba:	f001 ff7e 	bl	800a8ba <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	2200      	movs	r2, #0
 80089c2:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 80089c6:	2182      	movs	r1, #130	; 0x82
 80089c8:	6878      	ldr	r0, [r7, #4]
 80089ca:	f001 ff76 	bl	800a8ba <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	2200      	movs	r2, #0
 80089d2:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	2200      	movs	r2, #0
 80089da:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80089e4:	2b00      	cmp	r3, #0
 80089e6:	d00e      	beq.n	8008a06 <USBD_CDC_DeInit+0x6e>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80089ee:	685b      	ldr	r3, [r3, #4]
 80089f0:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80089f8:	4618      	mov	r0, r3
 80089fa:	f003 ffdf 	bl	800c9bc <free>
    pdev->pClassData = NULL;
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	2200      	movs	r2, #0
 8008a02:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return ret;
 8008a06:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a08:	4618      	mov	r0, r3
 8008a0a:	3710      	adds	r7, #16
 8008a0c:	46bd      	mov	sp, r7
 8008a0e:	bd80      	pop	{r7, pc}

08008a10 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8008a10:	b580      	push	{r7, lr}
 8008a12:	b086      	sub	sp, #24
 8008a14:	af00      	add	r7, sp, #0
 8008a16:	6078      	str	r0, [r7, #4]
 8008a18:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008a20:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8008a22:	2300      	movs	r3, #0
 8008a24:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8008a26:	2300      	movs	r3, #0
 8008a28:	81bb      	strh	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 8008a2a:	2300      	movs	r3, #0
 8008a2c:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008a2e:	683b      	ldr	r3, [r7, #0]
 8008a30:	781b      	ldrb	r3, [r3, #0]
 8008a32:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008a36:	2b00      	cmp	r3, #0
 8008a38:	d03a      	beq.n	8008ab0 <USBD_CDC_Setup+0xa0>
 8008a3a:	2b20      	cmp	r3, #32
 8008a3c:	f040 8097 	bne.w	8008b6e <USBD_CDC_Setup+0x15e>
  {
  case USB_REQ_TYPE_CLASS:
    if (req->wLength != 0U)
 8008a40:	683b      	ldr	r3, [r7, #0]
 8008a42:	88db      	ldrh	r3, [r3, #6]
 8008a44:	2b00      	cmp	r3, #0
 8008a46:	d029      	beq.n	8008a9c <USBD_CDC_Setup+0x8c>
    {
      if ((req->bmRequest & 0x80U) != 0U)
 8008a48:	683b      	ldr	r3, [r7, #0]
 8008a4a:	781b      	ldrb	r3, [r3, #0]
 8008a4c:	b25b      	sxtb	r3, r3
 8008a4e:	2b00      	cmp	r3, #0
 8008a50:	da11      	bge.n	8008a76 <USBD_CDC_Setup+0x66>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008a58:	689b      	ldr	r3, [r3, #8]
 8008a5a:	683a      	ldr	r2, [r7, #0]
 8008a5c:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)hcdc->data,
 8008a5e:	6939      	ldr	r1, [r7, #16]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008a60:	683a      	ldr	r2, [r7, #0]
 8008a62:	88d2      	ldrh	r2, [r2, #6]
 8008a64:	4798      	blx	r3
                                                          req->wLength);

          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, req->wLength);
 8008a66:	6939      	ldr	r1, [r7, #16]
 8008a68:	683b      	ldr	r3, [r7, #0]
 8008a6a:	88db      	ldrh	r3, [r3, #6]
 8008a6c:	461a      	mov	r2, r3
 8008a6e:	6878      	ldr	r0, [r7, #4]
 8008a70:	f001 fa9d 	bl	8009fae <USBD_CtlSendData>
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t *)req, 0U);
    }
    break;
 8008a74:	e082      	b.n	8008b7c <USBD_CDC_Setup+0x16c>
        hcdc->CmdOpCode = req->bRequest;
 8008a76:	683b      	ldr	r3, [r7, #0]
 8008a78:	785a      	ldrb	r2, [r3, #1]
 8008a7a:	693b      	ldr	r3, [r7, #16]
 8008a7c:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 8008a80:	683b      	ldr	r3, [r7, #0]
 8008a82:	88db      	ldrh	r3, [r3, #6]
 8008a84:	b2da      	uxtb	r2, r3
 8008a86:	693b      	ldr	r3, [r7, #16]
 8008a88:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
        (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8008a8c:	6939      	ldr	r1, [r7, #16]
 8008a8e:	683b      	ldr	r3, [r7, #0]
 8008a90:	88db      	ldrh	r3, [r3, #6]
 8008a92:	461a      	mov	r2, r3
 8008a94:	6878      	ldr	r0, [r7, #4]
 8008a96:	f001 fab6 	bl	800a006 <USBD_CtlPrepareRx>
    break;
 8008a9a:	e06f      	b.n	8008b7c <USBD_CDC_Setup+0x16c>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008aa2:	689b      	ldr	r3, [r3, #8]
 8008aa4:	683a      	ldr	r2, [r7, #0]
 8008aa6:	7850      	ldrb	r0, [r2, #1]
 8008aa8:	2200      	movs	r2, #0
 8008aaa:	6839      	ldr	r1, [r7, #0]
 8008aac:	4798      	blx	r3
    break;
 8008aae:	e065      	b.n	8008b7c <USBD_CDC_Setup+0x16c>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8008ab0:	683b      	ldr	r3, [r7, #0]
 8008ab2:	785b      	ldrb	r3, [r3, #1]
 8008ab4:	2b0b      	cmp	r3, #11
 8008ab6:	d84f      	bhi.n	8008b58 <USBD_CDC_Setup+0x148>
 8008ab8:	a201      	add	r2, pc, #4	; (adr r2, 8008ac0 <USBD_CDC_Setup+0xb0>)
 8008aba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008abe:	bf00      	nop
 8008ac0:	08008af1 	.word	0x08008af1
 8008ac4:	08008b67 	.word	0x08008b67
 8008ac8:	08008b59 	.word	0x08008b59
 8008acc:	08008b59 	.word	0x08008b59
 8008ad0:	08008b59 	.word	0x08008b59
 8008ad4:	08008b59 	.word	0x08008b59
 8008ad8:	08008b59 	.word	0x08008b59
 8008adc:	08008b59 	.word	0x08008b59
 8008ae0:	08008b59 	.word	0x08008b59
 8008ae4:	08008b59 	.word	0x08008b59
 8008ae8:	08008b19 	.word	0x08008b19
 8008aec:	08008b41 	.word	0x08008b41
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008af6:	2b03      	cmp	r3, #3
 8008af8:	d107      	bne.n	8008b0a <USBD_CDC_Setup+0xfa>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8008afa:	f107 030c 	add.w	r3, r7, #12
 8008afe:	2202      	movs	r2, #2
 8008b00:	4619      	mov	r1, r3
 8008b02:	6878      	ldr	r0, [r7, #4]
 8008b04:	f001 fa53 	bl	8009fae <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8008b08:	e030      	b.n	8008b6c <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 8008b0a:	6839      	ldr	r1, [r7, #0]
 8008b0c:	6878      	ldr	r0, [r7, #4]
 8008b0e:	f001 f9dd 	bl	8009ecc <USBD_CtlError>
        ret = USBD_FAIL;
 8008b12:	2303      	movs	r3, #3
 8008b14:	75fb      	strb	r3, [r7, #23]
      break;
 8008b16:	e029      	b.n	8008b6c <USBD_CDC_Setup+0x15c>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008b1e:	2b03      	cmp	r3, #3
 8008b20:	d107      	bne.n	8008b32 <USBD_CDC_Setup+0x122>
      {
        (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8008b22:	f107 030f 	add.w	r3, r7, #15
 8008b26:	2201      	movs	r2, #1
 8008b28:	4619      	mov	r1, r3
 8008b2a:	6878      	ldr	r0, [r7, #4]
 8008b2c:	f001 fa3f 	bl	8009fae <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8008b30:	e01c      	b.n	8008b6c <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 8008b32:	6839      	ldr	r1, [r7, #0]
 8008b34:	6878      	ldr	r0, [r7, #4]
 8008b36:	f001 f9c9 	bl	8009ecc <USBD_CtlError>
        ret = USBD_FAIL;
 8008b3a:	2303      	movs	r3, #3
 8008b3c:	75fb      	strb	r3, [r7, #23]
      break;
 8008b3e:	e015      	b.n	8008b6c <USBD_CDC_Setup+0x15c>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008b46:	2b03      	cmp	r3, #3
 8008b48:	d00f      	beq.n	8008b6a <USBD_CDC_Setup+0x15a>
      {
        USBD_CtlError(pdev, req);
 8008b4a:	6839      	ldr	r1, [r7, #0]
 8008b4c:	6878      	ldr	r0, [r7, #4]
 8008b4e:	f001 f9bd 	bl	8009ecc <USBD_CtlError>
        ret = USBD_FAIL;
 8008b52:	2303      	movs	r3, #3
 8008b54:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8008b56:	e008      	b.n	8008b6a <USBD_CDC_Setup+0x15a>

    case USB_REQ_CLEAR_FEATURE:
      break;

    default:
      USBD_CtlError(pdev, req);
 8008b58:	6839      	ldr	r1, [r7, #0]
 8008b5a:	6878      	ldr	r0, [r7, #4]
 8008b5c:	f001 f9b6 	bl	8009ecc <USBD_CtlError>
      ret = USBD_FAIL;
 8008b60:	2303      	movs	r3, #3
 8008b62:	75fb      	strb	r3, [r7, #23]
      break;
 8008b64:	e002      	b.n	8008b6c <USBD_CDC_Setup+0x15c>
      break;
 8008b66:	bf00      	nop
 8008b68:	e008      	b.n	8008b7c <USBD_CDC_Setup+0x16c>
      break;
 8008b6a:	bf00      	nop
    }
    break;
 8008b6c:	e006      	b.n	8008b7c <USBD_CDC_Setup+0x16c>

  default:
    USBD_CtlError(pdev, req);
 8008b6e:	6839      	ldr	r1, [r7, #0]
 8008b70:	6878      	ldr	r0, [r7, #4]
 8008b72:	f001 f9ab 	bl	8009ecc <USBD_CtlError>
    ret = USBD_FAIL;
 8008b76:	2303      	movs	r3, #3
 8008b78:	75fb      	strb	r3, [r7, #23]
    break;
 8008b7a:	bf00      	nop
  }

  return (uint8_t)ret;
 8008b7c:	7dfb      	ldrb	r3, [r7, #23]
}
 8008b7e:	4618      	mov	r0, r3
 8008b80:	3718      	adds	r7, #24
 8008b82:	46bd      	mov	sp, r7
 8008b84:	bd80      	pop	{r7, pc}
 8008b86:	bf00      	nop

08008b88 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008b88:	b580      	push	{r7, lr}
 8008b8a:	b084      	sub	sp, #16
 8008b8c:	af00      	add	r7, sp, #0
 8008b8e:	6078      	str	r0, [r7, #4]
 8008b90:	460b      	mov	r3, r1
 8008b92:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008b9a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008ba2:	2b00      	cmp	r3, #0
 8008ba4:	d101      	bne.n	8008baa <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8008ba6:	2303      	movs	r3, #3
 8008ba8:	e049      	b.n	8008c3e <USBD_CDC_DataIn+0xb6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008bb0:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8008bb2:	78fa      	ldrb	r2, [r7, #3]
 8008bb4:	6879      	ldr	r1, [r7, #4]
 8008bb6:	4613      	mov	r3, r2
 8008bb8:	009b      	lsls	r3, r3, #2
 8008bba:	4413      	add	r3, r2
 8008bbc:	009b      	lsls	r3, r3, #2
 8008bbe:	440b      	add	r3, r1
 8008bc0:	3318      	adds	r3, #24
 8008bc2:	681b      	ldr	r3, [r3, #0]
 8008bc4:	2b00      	cmp	r3, #0
 8008bc6:	d029      	beq.n	8008c1c <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8008bc8:	78fa      	ldrb	r2, [r7, #3]
 8008bca:	6879      	ldr	r1, [r7, #4]
 8008bcc:	4613      	mov	r3, r2
 8008bce:	009b      	lsls	r3, r3, #2
 8008bd0:	4413      	add	r3, r2
 8008bd2:	009b      	lsls	r3, r3, #2
 8008bd4:	440b      	add	r3, r1
 8008bd6:	3318      	adds	r3, #24
 8008bd8:	681a      	ldr	r2, [r3, #0]
 8008bda:	78f9      	ldrb	r1, [r7, #3]
 8008bdc:	68f8      	ldr	r0, [r7, #12]
 8008bde:	460b      	mov	r3, r1
 8008be0:	00db      	lsls	r3, r3, #3
 8008be2:	1a5b      	subs	r3, r3, r1
 8008be4:	009b      	lsls	r3, r3, #2
 8008be6:	4403      	add	r3, r0
 8008be8:	3344      	adds	r3, #68	; 0x44
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	fbb2 f1f3 	udiv	r1, r2, r3
 8008bf0:	fb03 f301 	mul.w	r3, r3, r1
 8008bf4:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8008bf6:	2b00      	cmp	r3, #0
 8008bf8:	d110      	bne.n	8008c1c <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8008bfa:	78fa      	ldrb	r2, [r7, #3]
 8008bfc:	6879      	ldr	r1, [r7, #4]
 8008bfe:	4613      	mov	r3, r2
 8008c00:	009b      	lsls	r3, r3, #2
 8008c02:	4413      	add	r3, r2
 8008c04:	009b      	lsls	r3, r3, #2
 8008c06:	440b      	add	r3, r1
 8008c08:	3318      	adds	r3, #24
 8008c0a:	2200      	movs	r2, #0
 8008c0c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8008c0e:	78f9      	ldrb	r1, [r7, #3]
 8008c10:	2300      	movs	r3, #0
 8008c12:	2200      	movs	r2, #0
 8008c14:	6878      	ldr	r0, [r7, #4]
 8008c16:	f001 fef8 	bl	800aa0a <USBD_LL_Transmit>
 8008c1a:	e00f      	b.n	8008c3c <USBD_CDC_DataIn+0xb4>
  }
  else
  {
    hcdc->TxState = 0U;
 8008c1c:	68bb      	ldr	r3, [r7, #8]
 8008c1e:	2200      	movs	r2, #0
 8008c20:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008c2a:	691b      	ldr	r3, [r3, #16]
 8008c2c:	68ba      	ldr	r2, [r7, #8]
 8008c2e:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8008c32:	68ba      	ldr	r2, [r7, #8]
 8008c34:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8008c38:	78fa      	ldrb	r2, [r7, #3]
 8008c3a:	4798      	blx	r3
  }

  return (uint8_t)USBD_OK;
 8008c3c:	2300      	movs	r3, #0
}
 8008c3e:	4618      	mov	r0, r3
 8008c40:	3710      	adds	r7, #16
 8008c42:	46bd      	mov	sp, r7
 8008c44:	bd80      	pop	{r7, pc}

08008c46 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008c46:	b580      	push	{r7, lr}
 8008c48:	b084      	sub	sp, #16
 8008c4a:	af00      	add	r7, sp, #0
 8008c4c:	6078      	str	r0, [r7, #4]
 8008c4e:	460b      	mov	r3, r1
 8008c50:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008c58:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008c60:	2b00      	cmp	r3, #0
 8008c62:	d101      	bne.n	8008c68 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8008c64:	2303      	movs	r3, #3
 8008c66:	e015      	b.n	8008c94 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8008c68:	78fb      	ldrb	r3, [r7, #3]
 8008c6a:	4619      	mov	r1, r3
 8008c6c:	6878      	ldr	r0, [r7, #4]
 8008c6e:	f001 ff0e 	bl	800aa8e <USBD_LL_GetRxDataSize>
 8008c72:	4602      	mov	r2, r0
 8008c74:	68fb      	ldr	r3, [r7, #12]
 8008c76:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008c80:	68db      	ldr	r3, [r3, #12]
 8008c82:	68fa      	ldr	r2, [r7, #12]
 8008c84:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8008c88:	68fa      	ldr	r2, [r7, #12]
 8008c8a:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8008c8e:	4611      	mov	r1, r2
 8008c90:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8008c92:	2300      	movs	r3, #0
}
 8008c94:	4618      	mov	r0, r3
 8008c96:	3710      	adds	r7, #16
 8008c98:	46bd      	mov	sp, r7
 8008c9a:	bd80      	pop	{r7, pc}

08008c9c <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8008c9c:	b580      	push	{r7, lr}
 8008c9e:	b084      	sub	sp, #16
 8008ca0:	af00      	add	r7, sp, #0
 8008ca2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008caa:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008cb2:	2b00      	cmp	r3, #0
 8008cb4:	d015      	beq.n	8008ce2 <USBD_CDC_EP0_RxReady+0x46>
 8008cb6:	68fb      	ldr	r3, [r7, #12]
 8008cb8:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8008cbc:	2bff      	cmp	r3, #255	; 0xff
 8008cbe:	d010      	beq.n	8008ce2 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008cc6:	689b      	ldr	r3, [r3, #8]
 8008cc8:	68fa      	ldr	r2, [r7, #12]
 8008cca:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8008cce:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8008cd0:	68fa      	ldr	r2, [r7, #12]
 8008cd2:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8008cd6:	b292      	uxth	r2, r2
 8008cd8:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8008cda:	68fb      	ldr	r3, [r7, #12]
 8008cdc:	22ff      	movs	r2, #255	; 0xff
 8008cde:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }

  return (uint8_t)USBD_OK;
 8008ce2:	2300      	movs	r3, #0
}
 8008ce4:	4618      	mov	r0, r3
 8008ce6:	3710      	adds	r7, #16
 8008ce8:	46bd      	mov	sp, r7
 8008cea:	bd80      	pop	{r7, pc}

08008cec <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8008cec:	b480      	push	{r7}
 8008cee:	b083      	sub	sp, #12
 8008cf0:	af00      	add	r7, sp, #0
 8008cf2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	2243      	movs	r2, #67	; 0x43
 8008cf8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8008cfa:	4b03      	ldr	r3, [pc, #12]	; (8008d08 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8008cfc:	4618      	mov	r0, r3
 8008cfe:	370c      	adds	r7, #12
 8008d00:	46bd      	mov	sp, r7
 8008d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d06:	4770      	bx	lr
 8008d08:	20000494 	.word	0x20000494

08008d0c <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8008d0c:	b480      	push	{r7}
 8008d0e:	b083      	sub	sp, #12
 8008d10:	af00      	add	r7, sp, #0
 8008d12:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	2243      	movs	r2, #67	; 0x43
 8008d18:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 8008d1a:	4b03      	ldr	r3, [pc, #12]	; (8008d28 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8008d1c:	4618      	mov	r0, r3
 8008d1e:	370c      	adds	r7, #12
 8008d20:	46bd      	mov	sp, r7
 8008d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d26:	4770      	bx	lr
 8008d28:	20000450 	.word	0x20000450

08008d2c <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8008d2c:	b480      	push	{r7}
 8008d2e:	b083      	sub	sp, #12
 8008d30:	af00      	add	r7, sp, #0
 8008d32:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	2243      	movs	r2, #67	; 0x43
 8008d38:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 8008d3a:	4b03      	ldr	r3, [pc, #12]	; (8008d48 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8008d3c:	4618      	mov	r0, r3
 8008d3e:	370c      	adds	r7, #12
 8008d40:	46bd      	mov	sp, r7
 8008d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d46:	4770      	bx	lr
 8008d48:	200004d8 	.word	0x200004d8

08008d4c <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8008d4c:	b480      	push	{r7}
 8008d4e:	b083      	sub	sp, #12
 8008d50:	af00      	add	r7, sp, #0
 8008d52:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	220a      	movs	r2, #10
 8008d58:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8008d5a:	4b03      	ldr	r3, [pc, #12]	; (8008d68 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8008d5c:	4618      	mov	r0, r3
 8008d5e:	370c      	adds	r7, #12
 8008d60:	46bd      	mov	sp, r7
 8008d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d66:	4770      	bx	lr
 8008d68:	2000040c 	.word	0x2000040c

08008d6c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8008d6c:	b480      	push	{r7}
 8008d6e:	b083      	sub	sp, #12
 8008d70:	af00      	add	r7, sp, #0
 8008d72:	6078      	str	r0, [r7, #4]
 8008d74:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8008d76:	683b      	ldr	r3, [r7, #0]
 8008d78:	2b00      	cmp	r3, #0
 8008d7a:	d101      	bne.n	8008d80 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8008d7c:	2303      	movs	r3, #3
 8008d7e:	e004      	b.n	8008d8a <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	683a      	ldr	r2, [r7, #0]
 8008d84:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8008d88:	2300      	movs	r3, #0
}
 8008d8a:	4618      	mov	r0, r3
 8008d8c:	370c      	adds	r7, #12
 8008d8e:	46bd      	mov	sp, r7
 8008d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d94:	4770      	bx	lr

08008d96 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8008d96:	b480      	push	{r7}
 8008d98:	b087      	sub	sp, #28
 8008d9a:	af00      	add	r7, sp, #0
 8008d9c:	60f8      	str	r0, [r7, #12]
 8008d9e:	60b9      	str	r1, [r7, #8]
 8008da0:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008da2:	68fb      	ldr	r3, [r7, #12]
 8008da4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008da8:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8008daa:	697b      	ldr	r3, [r7, #20]
 8008dac:	68ba      	ldr	r2, [r7, #8]
 8008dae:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8008db2:	697b      	ldr	r3, [r7, #20]
 8008db4:	687a      	ldr	r2, [r7, #4]
 8008db6:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8008dba:	2300      	movs	r3, #0
}
 8008dbc:	4618      	mov	r0, r3
 8008dbe:	371c      	adds	r7, #28
 8008dc0:	46bd      	mov	sp, r7
 8008dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dc6:	4770      	bx	lr

08008dc8 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8008dc8:	b480      	push	{r7}
 8008dca:	b085      	sub	sp, #20
 8008dcc:	af00      	add	r7, sp, #0
 8008dce:	6078      	str	r0, [r7, #4]
 8008dd0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008dd8:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8008dda:	68fb      	ldr	r3, [r7, #12]
 8008ddc:	683a      	ldr	r2, [r7, #0]
 8008dde:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8008de2:	2300      	movs	r3, #0
}
 8008de4:	4618      	mov	r0, r3
 8008de6:	3714      	adds	r7, #20
 8008de8:	46bd      	mov	sp, r7
 8008dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dee:	4770      	bx	lr

08008df0 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8008df0:	b580      	push	{r7, lr}
 8008df2:	b084      	sub	sp, #16
 8008df4:	af00      	add	r7, sp, #0
 8008df6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008dfe:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8008e00:	2301      	movs	r3, #1
 8008e02:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008e0a:	2b00      	cmp	r3, #0
 8008e0c:	d101      	bne.n	8008e12 <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8008e0e:	2303      	movs	r3, #3
 8008e10:	e01a      	b.n	8008e48 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 8008e12:	68bb      	ldr	r3, [r7, #8]
 8008e14:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8008e18:	2b00      	cmp	r3, #0
 8008e1a:	d114      	bne.n	8008e46 <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8008e1c:	68bb      	ldr	r3, [r7, #8]
 8008e1e:	2201      	movs	r2, #1
 8008e20:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8008e24:	68bb      	ldr	r3, [r7, #8]
 8008e26:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 8008e2e:	68bb      	ldr	r3, [r7, #8]
 8008e30:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8008e34:	68bb      	ldr	r3, [r7, #8]
 8008e36:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8008e3a:	2181      	movs	r1, #129	; 0x81
 8008e3c:	6878      	ldr	r0, [r7, #4]
 8008e3e:	f001 fde4 	bl	800aa0a <USBD_LL_Transmit>

    ret = USBD_OK;
 8008e42:	2300      	movs	r3, #0
 8008e44:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8008e46:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e48:	4618      	mov	r0, r3
 8008e4a:	3710      	adds	r7, #16
 8008e4c:	46bd      	mov	sp, r7
 8008e4e:	bd80      	pop	{r7, pc}

08008e50 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8008e50:	b580      	push	{r7, lr}
 8008e52:	b084      	sub	sp, #16
 8008e54:	af00      	add	r7, sp, #0
 8008e56:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008e5e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008e66:	2b00      	cmp	r3, #0
 8008e68:	d101      	bne.n	8008e6e <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8008e6a:	2303      	movs	r3, #3
 8008e6c:	e016      	b.n	8008e9c <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	7c1b      	ldrb	r3, [r3, #16]
 8008e72:	2b00      	cmp	r3, #0
 8008e74:	d109      	bne.n	8008e8a <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008e76:	68fb      	ldr	r3, [r7, #12]
 8008e78:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008e7c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008e80:	2101      	movs	r1, #1
 8008e82:	6878      	ldr	r0, [r7, #4]
 8008e84:	f001 fde2 	bl	800aa4c <USBD_LL_PrepareReceive>
 8008e88:	e007      	b.n	8008e9a <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008e8a:	68fb      	ldr	r3, [r7, #12]
 8008e8c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008e90:	2340      	movs	r3, #64	; 0x40
 8008e92:	2101      	movs	r1, #1
 8008e94:	6878      	ldr	r0, [r7, #4]
 8008e96:	f001 fdd9 	bl	800aa4c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8008e9a:	2300      	movs	r3, #0
}
 8008e9c:	4618      	mov	r0, r3
 8008e9e:	3710      	adds	r7, #16
 8008ea0:	46bd      	mov	sp, r7
 8008ea2:	bd80      	pop	{r7, pc}

08008ea4 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8008ea4:	b580      	push	{r7, lr}
 8008ea6:	b086      	sub	sp, #24
 8008ea8:	af00      	add	r7, sp, #0
 8008eaa:	60f8      	str	r0, [r7, #12]
 8008eac:	60b9      	str	r1, [r7, #8]
 8008eae:	4613      	mov	r3, r2
 8008eb0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8008eb2:	68fb      	ldr	r3, [r7, #12]
 8008eb4:	2b00      	cmp	r3, #0
 8008eb6:	d101      	bne.n	8008ebc <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8008eb8:	2303      	movs	r3, #3
 8008eba:	e025      	b.n	8008f08 <USBD_Init+0x64>
  }

  /* Unlink previous class */
  if (pdev->pClass != NULL)
 8008ebc:	68fb      	ldr	r3, [r7, #12]
 8008ebe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008ec2:	2b00      	cmp	r3, #0
 8008ec4:	d003      	beq.n	8008ece <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8008ec6:	68fb      	ldr	r3, [r7, #12]
 8008ec8:	2200      	movs	r2, #0
 8008eca:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  if (pdev->pConfDesc != NULL)
 8008ece:	68fb      	ldr	r3, [r7, #12]
 8008ed0:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 8008ed4:	2b00      	cmp	r3, #0
 8008ed6:	d003      	beq.n	8008ee0 <USBD_Init+0x3c>
  {
    pdev->pConfDesc = NULL;
 8008ed8:	68fb      	ldr	r3, [r7, #12]
 8008eda:	2200      	movs	r2, #0
 8008edc:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8008ee0:	68bb      	ldr	r3, [r7, #8]
 8008ee2:	2b00      	cmp	r3, #0
 8008ee4:	d003      	beq.n	8008eee <USBD_Init+0x4a>
  {
    pdev->pDesc = pdesc;
 8008ee6:	68fb      	ldr	r3, [r7, #12]
 8008ee8:	68ba      	ldr	r2, [r7, #8]
 8008eea:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008eee:	68fb      	ldr	r3, [r7, #12]
 8008ef0:	2201      	movs	r2, #1
 8008ef2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8008ef6:	68fb      	ldr	r3, [r7, #12]
 8008ef8:	79fa      	ldrb	r2, [r7, #7]
 8008efa:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8008efc:	68f8      	ldr	r0, [r7, #12]
 8008efe:	f001 fc4f 	bl	800a7a0 <USBD_LL_Init>
 8008f02:	4603      	mov	r3, r0
 8008f04:	75fb      	strb	r3, [r7, #23]

  return ret;
 8008f06:	7dfb      	ldrb	r3, [r7, #23]
}
 8008f08:	4618      	mov	r0, r3
 8008f0a:	3718      	adds	r7, #24
 8008f0c:	46bd      	mov	sp, r7
 8008f0e:	bd80      	pop	{r7, pc}

08008f10 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8008f10:	b580      	push	{r7, lr}
 8008f12:	b084      	sub	sp, #16
 8008f14:	af00      	add	r7, sp, #0
 8008f16:	6078      	str	r0, [r7, #4]
 8008f18:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008f1a:	2300      	movs	r3, #0
 8008f1c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8008f1e:	683b      	ldr	r3, [r7, #0]
 8008f20:	2b00      	cmp	r3, #0
 8008f22:	d101      	bne.n	8008f28 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8008f24:	2303      	movs	r3, #3
 8008f26:	e010      	b.n	8008f4a <USBD_RegisterClass+0x3a>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	683a      	ldr	r2, [r7, #0]
 8008f2c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  /* Get Device Configuration Descriptor */
#ifdef USE_USB_FS
  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
#else /* USE_USB_HS */
  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008f36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f38:	f107 020e 	add.w	r2, r7, #14
 8008f3c:	4610      	mov	r0, r2
 8008f3e:	4798      	blx	r3
 8008f40:	4602      	mov	r2, r0
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#endif /* USE_USB_FS */


  return USBD_OK;
 8008f48:	2300      	movs	r3, #0
}
 8008f4a:	4618      	mov	r0, r3
 8008f4c:	3710      	adds	r7, #16
 8008f4e:	46bd      	mov	sp, r7
 8008f50:	bd80      	pop	{r7, pc}

08008f52 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8008f52:	b580      	push	{r7, lr}
 8008f54:	b082      	sub	sp, #8
 8008f56:	af00      	add	r7, sp, #0
 8008f58:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8008f5a:	6878      	ldr	r0, [r7, #4]
 8008f5c:	f001 fc6c 	bl	800a838 <USBD_LL_Start>
 8008f60:	4603      	mov	r3, r0
}
 8008f62:	4618      	mov	r0, r3
 8008f64:	3708      	adds	r7, #8
 8008f66:	46bd      	mov	sp, r7
 8008f68:	bd80      	pop	{r7, pc}

08008f6a <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8008f6a:	b480      	push	{r7}
 8008f6c:	b083      	sub	sp, #12
 8008f6e:	af00      	add	r7, sp, #0
 8008f70:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008f72:	2300      	movs	r3, #0
}
 8008f74:	4618      	mov	r0, r3
 8008f76:	370c      	adds	r7, #12
 8008f78:	46bd      	mov	sp, r7
 8008f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f7e:	4770      	bx	lr

08008f80 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008f80:	b580      	push	{r7, lr}
 8008f82:	b084      	sub	sp, #16
 8008f84:	af00      	add	r7, sp, #0
 8008f86:	6078      	str	r0, [r7, #4]
 8008f88:	460b      	mov	r3, r1
 8008f8a:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8008f8c:	2303      	movs	r3, #3
 8008f8e:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008f96:	2b00      	cmp	r3, #0
 8008f98:	d009      	beq.n	8008fae <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008fa0:	681b      	ldr	r3, [r3, #0]
 8008fa2:	78fa      	ldrb	r2, [r7, #3]
 8008fa4:	4611      	mov	r1, r2
 8008fa6:	6878      	ldr	r0, [r7, #4]
 8008fa8:	4798      	blx	r3
 8008faa:	4603      	mov	r3, r0
 8008fac:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8008fae:	7bfb      	ldrb	r3, [r7, #15]
}
 8008fb0:	4618      	mov	r0, r3
 8008fb2:	3710      	adds	r7, #16
 8008fb4:	46bd      	mov	sp, r7
 8008fb6:	bd80      	pop	{r7, pc}

08008fb8 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008fb8:	b580      	push	{r7, lr}
 8008fba:	b082      	sub	sp, #8
 8008fbc:	af00      	add	r7, sp, #0
 8008fbe:	6078      	str	r0, [r7, #4]
 8008fc0:	460b      	mov	r3, r1
 8008fc2:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008fca:	2b00      	cmp	r3, #0
 8008fcc:	d007      	beq.n	8008fde <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008fd4:	685b      	ldr	r3, [r3, #4]
 8008fd6:	78fa      	ldrb	r2, [r7, #3]
 8008fd8:	4611      	mov	r1, r2
 8008fda:	6878      	ldr	r0, [r7, #4]
 8008fdc:	4798      	blx	r3
  }

  return USBD_OK;
 8008fde:	2300      	movs	r3, #0
}
 8008fe0:	4618      	mov	r0, r3
 8008fe2:	3708      	adds	r7, #8
 8008fe4:	46bd      	mov	sp, r7
 8008fe6:	bd80      	pop	{r7, pc}

08008fe8 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8008fe8:	b580      	push	{r7, lr}
 8008fea:	b084      	sub	sp, #16
 8008fec:	af00      	add	r7, sp, #0
 8008fee:	6078      	str	r0, [r7, #4]
 8008ff0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008ff8:	6839      	ldr	r1, [r7, #0]
 8008ffa:	4618      	mov	r0, r3
 8008ffc:	f000 ff2c 	bl	8009e58 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	2201      	movs	r2, #1
 8009004:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800900e:	461a      	mov	r2, r3
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800901c:	f003 031f 	and.w	r3, r3, #31
 8009020:	2b01      	cmp	r3, #1
 8009022:	d00e      	beq.n	8009042 <USBD_LL_SetupStage+0x5a>
 8009024:	2b01      	cmp	r3, #1
 8009026:	d302      	bcc.n	800902e <USBD_LL_SetupStage+0x46>
 8009028:	2b02      	cmp	r3, #2
 800902a:	d014      	beq.n	8009056 <USBD_LL_SetupStage+0x6e>
 800902c:	e01d      	b.n	800906a <USBD_LL_SetupStage+0x82>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009034:	4619      	mov	r1, r3
 8009036:	6878      	ldr	r0, [r7, #4]
 8009038:	f000 fa18 	bl	800946c <USBD_StdDevReq>
 800903c:	4603      	mov	r3, r0
 800903e:	73fb      	strb	r3, [r7, #15]
      break;
 8009040:	e020      	b.n	8009084 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009048:	4619      	mov	r1, r3
 800904a:	6878      	ldr	r0, [r7, #4]
 800904c:	f000 fa7c 	bl	8009548 <USBD_StdItfReq>
 8009050:	4603      	mov	r3, r0
 8009052:	73fb      	strb	r3, [r7, #15]
      break;
 8009054:	e016      	b.n	8009084 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800905c:	4619      	mov	r1, r3
 800905e:	6878      	ldr	r0, [r7, #4]
 8009060:	f000 fab8 	bl	80095d4 <USBD_StdEPReq>
 8009064:	4603      	mov	r3, r0
 8009066:	73fb      	strb	r3, [r7, #15]
      break;
 8009068:	e00c      	b.n	8009084 <USBD_LL_SetupStage+0x9c>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8009070:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8009074:	b2db      	uxtb	r3, r3
 8009076:	4619      	mov	r1, r3
 8009078:	6878      	ldr	r0, [r7, #4]
 800907a:	f001 fc3d 	bl	800a8f8 <USBD_LL_StallEP>
 800907e:	4603      	mov	r3, r0
 8009080:	73fb      	strb	r3, [r7, #15]
      break;
 8009082:	bf00      	nop
  }

  return ret;
 8009084:	7bfb      	ldrb	r3, [r7, #15]
}
 8009086:	4618      	mov	r0, r3
 8009088:	3710      	adds	r7, #16
 800908a:	46bd      	mov	sp, r7
 800908c:	bd80      	pop	{r7, pc}

0800908e <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800908e:	b580      	push	{r7, lr}
 8009090:	b086      	sub	sp, #24
 8009092:	af00      	add	r7, sp, #0
 8009094:	60f8      	str	r0, [r7, #12]
 8009096:	460b      	mov	r3, r1
 8009098:	607a      	str	r2, [r7, #4]
 800909a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800909c:	7afb      	ldrb	r3, [r7, #11]
 800909e:	2b00      	cmp	r3, #0
 80090a0:	d137      	bne.n	8009112 <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 80090a2:	68fb      	ldr	r3, [r7, #12]
 80090a4:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80090a8:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80090aa:	68fb      	ldr	r3, [r7, #12]
 80090ac:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80090b0:	2b03      	cmp	r3, #3
 80090b2:	d14a      	bne.n	800914a <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 80090b4:	693b      	ldr	r3, [r7, #16]
 80090b6:	689a      	ldr	r2, [r3, #8]
 80090b8:	693b      	ldr	r3, [r7, #16]
 80090ba:	68db      	ldr	r3, [r3, #12]
 80090bc:	429a      	cmp	r2, r3
 80090be:	d913      	bls.n	80090e8 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80090c0:	693b      	ldr	r3, [r7, #16]
 80090c2:	689a      	ldr	r2, [r3, #8]
 80090c4:	693b      	ldr	r3, [r7, #16]
 80090c6:	68db      	ldr	r3, [r3, #12]
 80090c8:	1ad2      	subs	r2, r2, r3
 80090ca:	693b      	ldr	r3, [r7, #16]
 80090cc:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80090ce:	693b      	ldr	r3, [r7, #16]
 80090d0:	68da      	ldr	r2, [r3, #12]
 80090d2:	693b      	ldr	r3, [r7, #16]
 80090d4:	689b      	ldr	r3, [r3, #8]
 80090d6:	4293      	cmp	r3, r2
 80090d8:	bf28      	it	cs
 80090da:	4613      	movcs	r3, r2
 80090dc:	461a      	mov	r2, r3
 80090de:	6879      	ldr	r1, [r7, #4]
 80090e0:	68f8      	ldr	r0, [r7, #12]
 80090e2:	f000 ffad 	bl	800a040 <USBD_CtlContinueRx>
 80090e6:	e030      	b.n	800914a <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80090e8:	68fb      	ldr	r3, [r7, #12]
 80090ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80090ee:	691b      	ldr	r3, [r3, #16]
 80090f0:	2b00      	cmp	r3, #0
 80090f2:	d00a      	beq.n	800910a <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 80090f4:	68fb      	ldr	r3, [r7, #12]
 80090f6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80090fa:	2b03      	cmp	r3, #3
 80090fc:	d105      	bne.n	800910a <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 80090fe:	68fb      	ldr	r3, [r7, #12]
 8009100:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009104:	691b      	ldr	r3, [r3, #16]
 8009106:	68f8      	ldr	r0, [r7, #12]
 8009108:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 800910a:	68f8      	ldr	r0, [r7, #12]
 800910c:	f000 ffa9 	bl	800a062 <USBD_CtlSendStatus>
 8009110:	e01b      	b.n	800914a <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8009112:	68fb      	ldr	r3, [r7, #12]
 8009114:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009118:	699b      	ldr	r3, [r3, #24]
 800911a:	2b00      	cmp	r3, #0
 800911c:	d013      	beq.n	8009146 <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800911e:	68fb      	ldr	r3, [r7, #12]
 8009120:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8009124:	2b03      	cmp	r3, #3
 8009126:	d10e      	bne.n	8009146 <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8009128:	68fb      	ldr	r3, [r7, #12]
 800912a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800912e:	699b      	ldr	r3, [r3, #24]
 8009130:	7afa      	ldrb	r2, [r7, #11]
 8009132:	4611      	mov	r1, r2
 8009134:	68f8      	ldr	r0, [r7, #12]
 8009136:	4798      	blx	r3
 8009138:	4603      	mov	r3, r0
 800913a:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 800913c:	7dfb      	ldrb	r3, [r7, #23]
 800913e:	2b00      	cmp	r3, #0
 8009140:	d003      	beq.n	800914a <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 8009142:	7dfb      	ldrb	r3, [r7, #23]
 8009144:	e002      	b.n	800914c <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8009146:	2303      	movs	r3, #3
 8009148:	e000      	b.n	800914c <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 800914a:	2300      	movs	r3, #0
}
 800914c:	4618      	mov	r0, r3
 800914e:	3718      	adds	r7, #24
 8009150:	46bd      	mov	sp, r7
 8009152:	bd80      	pop	{r7, pc}

08009154 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8009154:	b580      	push	{r7, lr}
 8009156:	b086      	sub	sp, #24
 8009158:	af00      	add	r7, sp, #0
 800915a:	60f8      	str	r0, [r7, #12]
 800915c:	460b      	mov	r3, r1
 800915e:	607a      	str	r2, [r7, #4]
 8009160:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8009162:	7afb      	ldrb	r3, [r7, #11]
 8009164:	2b00      	cmp	r3, #0
 8009166:	d16a      	bne.n	800923e <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 8009168:	68fb      	ldr	r3, [r7, #12]
 800916a:	3314      	adds	r3, #20
 800916c:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800916e:	68fb      	ldr	r3, [r7, #12]
 8009170:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009174:	2b02      	cmp	r3, #2
 8009176:	d155      	bne.n	8009224 <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 8009178:	693b      	ldr	r3, [r7, #16]
 800917a:	689a      	ldr	r2, [r3, #8]
 800917c:	693b      	ldr	r3, [r7, #16]
 800917e:	68db      	ldr	r3, [r3, #12]
 8009180:	429a      	cmp	r2, r3
 8009182:	d914      	bls.n	80091ae <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8009184:	693b      	ldr	r3, [r7, #16]
 8009186:	689a      	ldr	r2, [r3, #8]
 8009188:	693b      	ldr	r3, [r7, #16]
 800918a:	68db      	ldr	r3, [r3, #12]
 800918c:	1ad2      	subs	r2, r2, r3
 800918e:	693b      	ldr	r3, [r7, #16]
 8009190:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8009192:	693b      	ldr	r3, [r7, #16]
 8009194:	689b      	ldr	r3, [r3, #8]
 8009196:	461a      	mov	r2, r3
 8009198:	6879      	ldr	r1, [r7, #4]
 800919a:	68f8      	ldr	r0, [r7, #12]
 800919c:	f000 ff22 	bl	8009fe4 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80091a0:	2300      	movs	r3, #0
 80091a2:	2200      	movs	r2, #0
 80091a4:	2100      	movs	r1, #0
 80091a6:	68f8      	ldr	r0, [r7, #12]
 80091a8:	f001 fc50 	bl	800aa4c <USBD_LL_PrepareReceive>
 80091ac:	e03a      	b.n	8009224 <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80091ae:	693b      	ldr	r3, [r7, #16]
 80091b0:	68da      	ldr	r2, [r3, #12]
 80091b2:	693b      	ldr	r3, [r7, #16]
 80091b4:	689b      	ldr	r3, [r3, #8]
 80091b6:	429a      	cmp	r2, r3
 80091b8:	d11c      	bne.n	80091f4 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80091ba:	693b      	ldr	r3, [r7, #16]
 80091bc:	685a      	ldr	r2, [r3, #4]
 80091be:	693b      	ldr	r3, [r7, #16]
 80091c0:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80091c2:	429a      	cmp	r2, r3
 80091c4:	d316      	bcc.n	80091f4 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80091c6:	693b      	ldr	r3, [r7, #16]
 80091c8:	685a      	ldr	r2, [r3, #4]
 80091ca:	68fb      	ldr	r3, [r7, #12]
 80091cc:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80091d0:	429a      	cmp	r2, r3
 80091d2:	d20f      	bcs.n	80091f4 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80091d4:	2200      	movs	r2, #0
 80091d6:	2100      	movs	r1, #0
 80091d8:	68f8      	ldr	r0, [r7, #12]
 80091da:	f000 ff03 	bl	8009fe4 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80091de:	68fb      	ldr	r3, [r7, #12]
 80091e0:	2200      	movs	r2, #0
 80091e2:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80091e6:	2300      	movs	r3, #0
 80091e8:	2200      	movs	r2, #0
 80091ea:	2100      	movs	r1, #0
 80091ec:	68f8      	ldr	r0, [r7, #12]
 80091ee:	f001 fc2d 	bl	800aa4c <USBD_LL_PrepareReceive>
 80091f2:	e017      	b.n	8009224 <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80091f4:	68fb      	ldr	r3, [r7, #12]
 80091f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80091fa:	68db      	ldr	r3, [r3, #12]
 80091fc:	2b00      	cmp	r3, #0
 80091fe:	d00a      	beq.n	8009216 <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8009200:	68fb      	ldr	r3, [r7, #12]
 8009202:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8009206:	2b03      	cmp	r3, #3
 8009208:	d105      	bne.n	8009216 <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800920a:	68fb      	ldr	r3, [r7, #12]
 800920c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009210:	68db      	ldr	r3, [r3, #12]
 8009212:	68f8      	ldr	r0, [r7, #12]
 8009214:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8009216:	2180      	movs	r1, #128	; 0x80
 8009218:	68f8      	ldr	r0, [r7, #12]
 800921a:	f001 fb6d 	bl	800a8f8 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800921e:	68f8      	ldr	r0, [r7, #12]
 8009220:	f000 ff32 	bl	800a088 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8009224:	68fb      	ldr	r3, [r7, #12]
 8009226:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800922a:	2b01      	cmp	r3, #1
 800922c:	d123      	bne.n	8009276 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800922e:	68f8      	ldr	r0, [r7, #12]
 8009230:	f7ff fe9b 	bl	8008f6a <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8009234:	68fb      	ldr	r3, [r7, #12]
 8009236:	2200      	movs	r2, #0
 8009238:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800923c:	e01b      	b.n	8009276 <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800923e:	68fb      	ldr	r3, [r7, #12]
 8009240:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009244:	695b      	ldr	r3, [r3, #20]
 8009246:	2b00      	cmp	r3, #0
 8009248:	d013      	beq.n	8009272 <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800924a:	68fb      	ldr	r3, [r7, #12]
 800924c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8009250:	2b03      	cmp	r3, #3
 8009252:	d10e      	bne.n	8009272 <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8009254:	68fb      	ldr	r3, [r7, #12]
 8009256:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800925a:	695b      	ldr	r3, [r3, #20]
 800925c:	7afa      	ldrb	r2, [r7, #11]
 800925e:	4611      	mov	r1, r2
 8009260:	68f8      	ldr	r0, [r7, #12]
 8009262:	4798      	blx	r3
 8009264:	4603      	mov	r3, r0
 8009266:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 8009268:	7dfb      	ldrb	r3, [r7, #23]
 800926a:	2b00      	cmp	r3, #0
 800926c:	d003      	beq.n	8009276 <USBD_LL_DataInStage+0x122>
    {
      return ret;
 800926e:	7dfb      	ldrb	r3, [r7, #23]
 8009270:	e002      	b.n	8009278 <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8009272:	2303      	movs	r3, #3
 8009274:	e000      	b.n	8009278 <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 8009276:	2300      	movs	r3, #0
}
 8009278:	4618      	mov	r0, r3
 800927a:	3718      	adds	r7, #24
 800927c:	46bd      	mov	sp, r7
 800927e:	bd80      	pop	{r7, pc}

08009280 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8009280:	b580      	push	{r7, lr}
 8009282:	b082      	sub	sp, #8
 8009284:	af00      	add	r7, sp, #0
 8009286:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	2201      	movs	r2, #1
 800928c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	2200      	movs	r2, #0
 8009294:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	2200      	movs	r2, #0
 800929c:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	2200      	movs	r2, #0
 80092a2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80092ac:	2b00      	cmp	r3, #0
 80092ae:	d009      	beq.n	80092c4 <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80092b6:	685b      	ldr	r3, [r3, #4]
 80092b8:	687a      	ldr	r2, [r7, #4]
 80092ba:	6852      	ldr	r2, [r2, #4]
 80092bc:	b2d2      	uxtb	r2, r2
 80092be:	4611      	mov	r1, r2
 80092c0:	6878      	ldr	r0, [r7, #4]
 80092c2:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80092c4:	2340      	movs	r3, #64	; 0x40
 80092c6:	2200      	movs	r2, #0
 80092c8:	2100      	movs	r1, #0
 80092ca:	6878      	ldr	r0, [r7, #4]
 80092cc:	f001 facf 	bl	800a86e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	2201      	movs	r2, #1
 80092d4:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	2240      	movs	r2, #64	; 0x40
 80092dc:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80092e0:	2340      	movs	r3, #64	; 0x40
 80092e2:	2200      	movs	r2, #0
 80092e4:	2180      	movs	r1, #128	; 0x80
 80092e6:	6878      	ldr	r0, [r7, #4]
 80092e8:	f001 fac1 	bl	800a86e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	2201      	movs	r2, #1
 80092f0:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	2240      	movs	r2, #64	; 0x40
 80092f6:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 80092f8:	2300      	movs	r3, #0
}
 80092fa:	4618      	mov	r0, r3
 80092fc:	3708      	adds	r7, #8
 80092fe:	46bd      	mov	sp, r7
 8009300:	bd80      	pop	{r7, pc}

08009302 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8009302:	b480      	push	{r7}
 8009304:	b083      	sub	sp, #12
 8009306:	af00      	add	r7, sp, #0
 8009308:	6078      	str	r0, [r7, #4]
 800930a:	460b      	mov	r3, r1
 800930c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	78fa      	ldrb	r2, [r7, #3]
 8009312:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8009314:	2300      	movs	r3, #0
}
 8009316:	4618      	mov	r0, r3
 8009318:	370c      	adds	r7, #12
 800931a:	46bd      	mov	sp, r7
 800931c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009320:	4770      	bx	lr

08009322 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8009322:	b480      	push	{r7}
 8009324:	b083      	sub	sp, #12
 8009326:	af00      	add	r7, sp, #0
 8009328:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	2204      	movs	r2, #4
 800933a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800933e:	2300      	movs	r3, #0
}
 8009340:	4618      	mov	r0, r3
 8009342:	370c      	adds	r7, #12
 8009344:	46bd      	mov	sp, r7
 8009346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800934a:	4770      	bx	lr

0800934c <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800934c:	b480      	push	{r7}
 800934e:	b083      	sub	sp, #12
 8009350:	af00      	add	r7, sp, #0
 8009352:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800935a:	2b04      	cmp	r3, #4
 800935c:	d105      	bne.n	800936a <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800936a:	2300      	movs	r3, #0
}
 800936c:	4618      	mov	r0, r3
 800936e:	370c      	adds	r7, #12
 8009370:	46bd      	mov	sp, r7
 8009372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009376:	4770      	bx	lr

08009378 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8009378:	b580      	push	{r7, lr}
 800937a:	b082      	sub	sp, #8
 800937c:	af00      	add	r7, sp, #0
 800937e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009386:	2b03      	cmp	r3, #3
 8009388:	d10b      	bne.n	80093a2 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009390:	69db      	ldr	r3, [r3, #28]
 8009392:	2b00      	cmp	r3, #0
 8009394:	d005      	beq.n	80093a2 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800939c:	69db      	ldr	r3, [r3, #28]
 800939e:	6878      	ldr	r0, [r7, #4]
 80093a0:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80093a2:	2300      	movs	r3, #0
}
 80093a4:	4618      	mov	r0, r3
 80093a6:	3708      	adds	r7, #8
 80093a8:	46bd      	mov	sp, r7
 80093aa:	bd80      	pop	{r7, pc}

080093ac <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80093ac:	b480      	push	{r7}
 80093ae:	b083      	sub	sp, #12
 80093b0:	af00      	add	r7, sp, #0
 80093b2:	6078      	str	r0, [r7, #4]
 80093b4:	460b      	mov	r3, r1
 80093b6:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 80093b8:	2300      	movs	r3, #0
}
 80093ba:	4618      	mov	r0, r3
 80093bc:	370c      	adds	r7, #12
 80093be:	46bd      	mov	sp, r7
 80093c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093c4:	4770      	bx	lr

080093c6 <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80093c6:	b480      	push	{r7}
 80093c8:	b083      	sub	sp, #12
 80093ca:	af00      	add	r7, sp, #0
 80093cc:	6078      	str	r0, [r7, #4]
 80093ce:	460b      	mov	r3, r1
 80093d0:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 80093d2:	2300      	movs	r3, #0
}
 80093d4:	4618      	mov	r0, r3
 80093d6:	370c      	adds	r7, #12
 80093d8:	46bd      	mov	sp, r7
 80093da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093de:	4770      	bx	lr

080093e0 <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80093e0:	b480      	push	{r7}
 80093e2:	b083      	sub	sp, #12
 80093e4:	af00      	add	r7, sp, #0
 80093e6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80093e8:	2300      	movs	r3, #0
}
 80093ea:	4618      	mov	r0, r3
 80093ec:	370c      	adds	r7, #12
 80093ee:	46bd      	mov	sp, r7
 80093f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093f4:	4770      	bx	lr

080093f6 <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80093f6:	b580      	push	{r7, lr}
 80093f8:	b082      	sub	sp, #8
 80093fa:	af00      	add	r7, sp, #0
 80093fc:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	2201      	movs	r2, #1
 8009402:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800940c:	2b00      	cmp	r3, #0
 800940e:	d009      	beq.n	8009424 <USBD_LL_DevDisconnected+0x2e>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009416:	685b      	ldr	r3, [r3, #4]
 8009418:	687a      	ldr	r2, [r7, #4]
 800941a:	6852      	ldr	r2, [r2, #4]
 800941c:	b2d2      	uxtb	r2, r2
 800941e:	4611      	mov	r1, r2
 8009420:	6878      	ldr	r0, [r7, #4]
 8009422:	4798      	blx	r3
  }

  return USBD_OK;
 8009424:	2300      	movs	r3, #0
}
 8009426:	4618      	mov	r0, r3
 8009428:	3708      	adds	r7, #8
 800942a:	46bd      	mov	sp, r7
 800942c:	bd80      	pop	{r7, pc}

0800942e <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800942e:	b480      	push	{r7}
 8009430:	b087      	sub	sp, #28
 8009432:	af00      	add	r7, sp, #0
 8009434:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800943a:	697b      	ldr	r3, [r7, #20]
 800943c:	781b      	ldrb	r3, [r3, #0]
 800943e:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8009440:	697b      	ldr	r3, [r7, #20]
 8009442:	3301      	adds	r3, #1
 8009444:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8009446:	697b      	ldr	r3, [r7, #20]
 8009448:	781b      	ldrb	r3, [r3, #0]
 800944a:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800944c:	8a3b      	ldrh	r3, [r7, #16]
 800944e:	021b      	lsls	r3, r3, #8
 8009450:	b21a      	sxth	r2, r3
 8009452:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8009456:	4313      	orrs	r3, r2
 8009458:	b21b      	sxth	r3, r3
 800945a:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800945c:	89fb      	ldrh	r3, [r7, #14]
}
 800945e:	4618      	mov	r0, r3
 8009460:	371c      	adds	r7, #28
 8009462:	46bd      	mov	sp, r7
 8009464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009468:	4770      	bx	lr
	...

0800946c <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800946c:	b580      	push	{r7, lr}
 800946e:	b084      	sub	sp, #16
 8009470:	af00      	add	r7, sp, #0
 8009472:	6078      	str	r0, [r7, #4]
 8009474:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009476:	2300      	movs	r3, #0
 8009478:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800947a:	683b      	ldr	r3, [r7, #0]
 800947c:	781b      	ldrb	r3, [r3, #0]
 800947e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009482:	2b20      	cmp	r3, #32
 8009484:	d004      	beq.n	8009490 <USBD_StdDevReq+0x24>
 8009486:	2b40      	cmp	r3, #64	; 0x40
 8009488:	d002      	beq.n	8009490 <USBD_StdDevReq+0x24>
 800948a:	2b00      	cmp	r3, #0
 800948c:	d00a      	beq.n	80094a4 <USBD_StdDevReq+0x38>
 800948e:	e050      	b.n	8009532 <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009496:	689b      	ldr	r3, [r3, #8]
 8009498:	6839      	ldr	r1, [r7, #0]
 800949a:	6878      	ldr	r0, [r7, #4]
 800949c:	4798      	blx	r3
 800949e:	4603      	mov	r3, r0
 80094a0:	73fb      	strb	r3, [r7, #15]
    break;
 80094a2:	e04b      	b.n	800953c <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 80094a4:	683b      	ldr	r3, [r7, #0]
 80094a6:	785b      	ldrb	r3, [r3, #1]
 80094a8:	2b09      	cmp	r3, #9
 80094aa:	d83c      	bhi.n	8009526 <USBD_StdDevReq+0xba>
 80094ac:	a201      	add	r2, pc, #4	; (adr r2, 80094b4 <USBD_StdDevReq+0x48>)
 80094ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80094b2:	bf00      	nop
 80094b4:	08009509 	.word	0x08009509
 80094b8:	0800951d 	.word	0x0800951d
 80094bc:	08009527 	.word	0x08009527
 80094c0:	08009513 	.word	0x08009513
 80094c4:	08009527 	.word	0x08009527
 80094c8:	080094e7 	.word	0x080094e7
 80094cc:	080094dd 	.word	0x080094dd
 80094d0:	08009527 	.word	0x08009527
 80094d4:	080094ff 	.word	0x080094ff
 80094d8:	080094f1 	.word	0x080094f1
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 80094dc:	6839      	ldr	r1, [r7, #0]
 80094de:	6878      	ldr	r0, [r7, #4]
 80094e0:	f000 f9ce 	bl	8009880 <USBD_GetDescriptor>
      break;
 80094e4:	e024      	b.n	8009530 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 80094e6:	6839      	ldr	r1, [r7, #0]
 80094e8:	6878      	ldr	r0, [r7, #4]
 80094ea:	f000 fb33 	bl	8009b54 <USBD_SetAddress>
      break;
 80094ee:	e01f      	b.n	8009530 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 80094f0:	6839      	ldr	r1, [r7, #0]
 80094f2:	6878      	ldr	r0, [r7, #4]
 80094f4:	f000 fb70 	bl	8009bd8 <USBD_SetConfig>
 80094f8:	4603      	mov	r3, r0
 80094fa:	73fb      	strb	r3, [r7, #15]
      break;
 80094fc:	e018      	b.n	8009530 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 80094fe:	6839      	ldr	r1, [r7, #0]
 8009500:	6878      	ldr	r0, [r7, #4]
 8009502:	f000 fc0d 	bl	8009d20 <USBD_GetConfig>
      break;
 8009506:	e013      	b.n	8009530 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 8009508:	6839      	ldr	r1, [r7, #0]
 800950a:	6878      	ldr	r0, [r7, #4]
 800950c:	f000 fc3c 	bl	8009d88 <USBD_GetStatus>
      break;
 8009510:	e00e      	b.n	8009530 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 8009512:	6839      	ldr	r1, [r7, #0]
 8009514:	6878      	ldr	r0, [r7, #4]
 8009516:	f000 fc6a 	bl	8009dee <USBD_SetFeature>
      break;
 800951a:	e009      	b.n	8009530 <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 800951c:	6839      	ldr	r1, [r7, #0]
 800951e:	6878      	ldr	r0, [r7, #4]
 8009520:	f000 fc79 	bl	8009e16 <USBD_ClrFeature>
      break;
 8009524:	e004      	b.n	8009530 <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 8009526:	6839      	ldr	r1, [r7, #0]
 8009528:	6878      	ldr	r0, [r7, #4]
 800952a:	f000 fccf 	bl	8009ecc <USBD_CtlError>
      break;
 800952e:	bf00      	nop
    }
    break;
 8009530:	e004      	b.n	800953c <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 8009532:	6839      	ldr	r1, [r7, #0]
 8009534:	6878      	ldr	r0, [r7, #4]
 8009536:	f000 fcc9 	bl	8009ecc <USBD_CtlError>
    break;
 800953a:	bf00      	nop
  }

  return ret;
 800953c:	7bfb      	ldrb	r3, [r7, #15]
}
 800953e:	4618      	mov	r0, r3
 8009540:	3710      	adds	r7, #16
 8009542:	46bd      	mov	sp, r7
 8009544:	bd80      	pop	{r7, pc}
 8009546:	bf00      	nop

08009548 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009548:	b580      	push	{r7, lr}
 800954a:	b084      	sub	sp, #16
 800954c:	af00      	add	r7, sp, #0
 800954e:	6078      	str	r0, [r7, #4]
 8009550:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009552:	2300      	movs	r3, #0
 8009554:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009556:	683b      	ldr	r3, [r7, #0]
 8009558:	781b      	ldrb	r3, [r3, #0]
 800955a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800955e:	2b20      	cmp	r3, #32
 8009560:	d003      	beq.n	800956a <USBD_StdItfReq+0x22>
 8009562:	2b40      	cmp	r3, #64	; 0x40
 8009564:	d001      	beq.n	800956a <USBD_StdItfReq+0x22>
 8009566:	2b00      	cmp	r3, #0
 8009568:	d12a      	bne.n	80095c0 <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009570:	3b01      	subs	r3, #1
 8009572:	2b02      	cmp	r3, #2
 8009574:	d81d      	bhi.n	80095b2 <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8009576:	683b      	ldr	r3, [r7, #0]
 8009578:	889b      	ldrh	r3, [r3, #4]
 800957a:	b2db      	uxtb	r3, r3
 800957c:	2b01      	cmp	r3, #1
 800957e:	d813      	bhi.n	80095a8 <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009586:	689b      	ldr	r3, [r3, #8]
 8009588:	6839      	ldr	r1, [r7, #0]
 800958a:	6878      	ldr	r0, [r7, #4]
 800958c:	4798      	blx	r3
 800958e:	4603      	mov	r3, r0
 8009590:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 8009592:	683b      	ldr	r3, [r7, #0]
 8009594:	88db      	ldrh	r3, [r3, #6]
 8009596:	2b00      	cmp	r3, #0
 8009598:	d110      	bne.n	80095bc <USBD_StdItfReq+0x74>
 800959a:	7bfb      	ldrb	r3, [r7, #15]
 800959c:	2b00      	cmp	r3, #0
 800959e:	d10d      	bne.n	80095bc <USBD_StdItfReq+0x74>
        {
          (void)USBD_CtlSendStatus(pdev);
 80095a0:	6878      	ldr	r0, [r7, #4]
 80095a2:	f000 fd5e 	bl	800a062 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 80095a6:	e009      	b.n	80095bc <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 80095a8:	6839      	ldr	r1, [r7, #0]
 80095aa:	6878      	ldr	r0, [r7, #4]
 80095ac:	f000 fc8e 	bl	8009ecc <USBD_CtlError>
      break;
 80095b0:	e004      	b.n	80095bc <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 80095b2:	6839      	ldr	r1, [r7, #0]
 80095b4:	6878      	ldr	r0, [r7, #4]
 80095b6:	f000 fc89 	bl	8009ecc <USBD_CtlError>
      break;
 80095ba:	e000      	b.n	80095be <USBD_StdItfReq+0x76>
      break;
 80095bc:	bf00      	nop
    }
    break;
 80095be:	e004      	b.n	80095ca <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 80095c0:	6839      	ldr	r1, [r7, #0]
 80095c2:	6878      	ldr	r0, [r7, #4]
 80095c4:	f000 fc82 	bl	8009ecc <USBD_CtlError>
    break;
 80095c8:	bf00      	nop
  }

  return ret;
 80095ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80095cc:	4618      	mov	r0, r3
 80095ce:	3710      	adds	r7, #16
 80095d0:	46bd      	mov	sp, r7
 80095d2:	bd80      	pop	{r7, pc}

080095d4 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80095d4:	b580      	push	{r7, lr}
 80095d6:	b084      	sub	sp, #16
 80095d8:	af00      	add	r7, sp, #0
 80095da:	6078      	str	r0, [r7, #4]
 80095dc:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80095de:	2300      	movs	r3, #0
 80095e0:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 80095e2:	683b      	ldr	r3, [r7, #0]
 80095e4:	889b      	ldrh	r3, [r3, #4]
 80095e6:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80095e8:	683b      	ldr	r3, [r7, #0]
 80095ea:	781b      	ldrb	r3, [r3, #0]
 80095ec:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80095f0:	2b20      	cmp	r3, #32
 80095f2:	d004      	beq.n	80095fe <USBD_StdEPReq+0x2a>
 80095f4:	2b40      	cmp	r3, #64	; 0x40
 80095f6:	d002      	beq.n	80095fe <USBD_StdEPReq+0x2a>
 80095f8:	2b00      	cmp	r3, #0
 80095fa:	d00a      	beq.n	8009612 <USBD_StdEPReq+0x3e>
 80095fc:	e135      	b.n	800986a <USBD_StdEPReq+0x296>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009604:	689b      	ldr	r3, [r3, #8]
 8009606:	6839      	ldr	r1, [r7, #0]
 8009608:	6878      	ldr	r0, [r7, #4]
 800960a:	4798      	blx	r3
 800960c:	4603      	mov	r3, r0
 800960e:	73fb      	strb	r3, [r7, #15]
    break;
 8009610:	e130      	b.n	8009874 <USBD_StdEPReq+0x2a0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8009612:	683b      	ldr	r3, [r7, #0]
 8009614:	785b      	ldrb	r3, [r3, #1]
 8009616:	2b01      	cmp	r3, #1
 8009618:	d03e      	beq.n	8009698 <USBD_StdEPReq+0xc4>
 800961a:	2b03      	cmp	r3, #3
 800961c:	d002      	beq.n	8009624 <USBD_StdEPReq+0x50>
 800961e:	2b00      	cmp	r3, #0
 8009620:	d077      	beq.n	8009712 <USBD_StdEPReq+0x13e>
 8009622:	e11c      	b.n	800985e <USBD_StdEPReq+0x28a>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800962a:	2b02      	cmp	r3, #2
 800962c:	d002      	beq.n	8009634 <USBD_StdEPReq+0x60>
 800962e:	2b03      	cmp	r3, #3
 8009630:	d015      	beq.n	800965e <USBD_StdEPReq+0x8a>
 8009632:	e02b      	b.n	800968c <USBD_StdEPReq+0xb8>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009634:	7bbb      	ldrb	r3, [r7, #14]
 8009636:	2b00      	cmp	r3, #0
 8009638:	d00c      	beq.n	8009654 <USBD_StdEPReq+0x80>
 800963a:	7bbb      	ldrb	r3, [r7, #14]
 800963c:	2b80      	cmp	r3, #128	; 0x80
 800963e:	d009      	beq.n	8009654 <USBD_StdEPReq+0x80>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8009640:	7bbb      	ldrb	r3, [r7, #14]
 8009642:	4619      	mov	r1, r3
 8009644:	6878      	ldr	r0, [r7, #4]
 8009646:	f001 f957 	bl	800a8f8 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800964a:	2180      	movs	r1, #128	; 0x80
 800964c:	6878      	ldr	r0, [r7, #4]
 800964e:	f001 f953 	bl	800a8f8 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8009652:	e020      	b.n	8009696 <USBD_StdEPReq+0xc2>
          USBD_CtlError(pdev, req);
 8009654:	6839      	ldr	r1, [r7, #0]
 8009656:	6878      	ldr	r0, [r7, #4]
 8009658:	f000 fc38 	bl	8009ecc <USBD_CtlError>
        break;
 800965c:	e01b      	b.n	8009696 <USBD_StdEPReq+0xc2>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800965e:	683b      	ldr	r3, [r7, #0]
 8009660:	885b      	ldrh	r3, [r3, #2]
 8009662:	2b00      	cmp	r3, #0
 8009664:	d10e      	bne.n	8009684 <USBD_StdEPReq+0xb0>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8009666:	7bbb      	ldrb	r3, [r7, #14]
 8009668:	2b00      	cmp	r3, #0
 800966a:	d00b      	beq.n	8009684 <USBD_StdEPReq+0xb0>
 800966c:	7bbb      	ldrb	r3, [r7, #14]
 800966e:	2b80      	cmp	r3, #128	; 0x80
 8009670:	d008      	beq.n	8009684 <USBD_StdEPReq+0xb0>
 8009672:	683b      	ldr	r3, [r7, #0]
 8009674:	88db      	ldrh	r3, [r3, #6]
 8009676:	2b00      	cmp	r3, #0
 8009678:	d104      	bne.n	8009684 <USBD_StdEPReq+0xb0>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 800967a:	7bbb      	ldrb	r3, [r7, #14]
 800967c:	4619      	mov	r1, r3
 800967e:	6878      	ldr	r0, [r7, #4]
 8009680:	f001 f93a 	bl	800a8f8 <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 8009684:	6878      	ldr	r0, [r7, #4]
 8009686:	f000 fcec 	bl	800a062 <USBD_CtlSendStatus>

        break;
 800968a:	e004      	b.n	8009696 <USBD_StdEPReq+0xc2>

      default:
        USBD_CtlError(pdev, req);
 800968c:	6839      	ldr	r1, [r7, #0]
 800968e:	6878      	ldr	r0, [r7, #4]
 8009690:	f000 fc1c 	bl	8009ecc <USBD_CtlError>
        break;
 8009694:	bf00      	nop
      }
      break;
 8009696:	e0e7      	b.n	8009868 <USBD_StdEPReq+0x294>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800969e:	2b02      	cmp	r3, #2
 80096a0:	d002      	beq.n	80096a8 <USBD_StdEPReq+0xd4>
 80096a2:	2b03      	cmp	r3, #3
 80096a4:	d015      	beq.n	80096d2 <USBD_StdEPReq+0xfe>
 80096a6:	e02d      	b.n	8009704 <USBD_StdEPReq+0x130>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80096a8:	7bbb      	ldrb	r3, [r7, #14]
 80096aa:	2b00      	cmp	r3, #0
 80096ac:	d00c      	beq.n	80096c8 <USBD_StdEPReq+0xf4>
 80096ae:	7bbb      	ldrb	r3, [r7, #14]
 80096b0:	2b80      	cmp	r3, #128	; 0x80
 80096b2:	d009      	beq.n	80096c8 <USBD_StdEPReq+0xf4>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 80096b4:	7bbb      	ldrb	r3, [r7, #14]
 80096b6:	4619      	mov	r1, r3
 80096b8:	6878      	ldr	r0, [r7, #4]
 80096ba:	f001 f91d 	bl	800a8f8 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80096be:	2180      	movs	r1, #128	; 0x80
 80096c0:	6878      	ldr	r0, [r7, #4]
 80096c2:	f001 f919 	bl	800a8f8 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 80096c6:	e023      	b.n	8009710 <USBD_StdEPReq+0x13c>
          USBD_CtlError(pdev, req);
 80096c8:	6839      	ldr	r1, [r7, #0]
 80096ca:	6878      	ldr	r0, [r7, #4]
 80096cc:	f000 fbfe 	bl	8009ecc <USBD_CtlError>
        break;
 80096d0:	e01e      	b.n	8009710 <USBD_StdEPReq+0x13c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 80096d2:	683b      	ldr	r3, [r7, #0]
 80096d4:	885b      	ldrh	r3, [r3, #2]
 80096d6:	2b00      	cmp	r3, #0
 80096d8:	d119      	bne.n	800970e <USBD_StdEPReq+0x13a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 80096da:	7bbb      	ldrb	r3, [r7, #14]
 80096dc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80096e0:	2b00      	cmp	r3, #0
 80096e2:	d004      	beq.n	80096ee <USBD_StdEPReq+0x11a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80096e4:	7bbb      	ldrb	r3, [r7, #14]
 80096e6:	4619      	mov	r1, r3
 80096e8:	6878      	ldr	r0, [r7, #4]
 80096ea:	f001 f924 	bl	800a936 <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 80096ee:	6878      	ldr	r0, [r7, #4]
 80096f0:	f000 fcb7 	bl	800a062 <USBD_CtlSendStatus>
          (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80096fa:	689b      	ldr	r3, [r3, #8]
 80096fc:	6839      	ldr	r1, [r7, #0]
 80096fe:	6878      	ldr	r0, [r7, #4]
 8009700:	4798      	blx	r3
        }
        break;
 8009702:	e004      	b.n	800970e <USBD_StdEPReq+0x13a>

      default:
        USBD_CtlError(pdev, req);
 8009704:	6839      	ldr	r1, [r7, #0]
 8009706:	6878      	ldr	r0, [r7, #4]
 8009708:	f000 fbe0 	bl	8009ecc <USBD_CtlError>
        break;
 800970c:	e000      	b.n	8009710 <USBD_StdEPReq+0x13c>
        break;
 800970e:	bf00      	nop
      }
      break;
 8009710:	e0aa      	b.n	8009868 <USBD_StdEPReq+0x294>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009718:	2b02      	cmp	r3, #2
 800971a:	d002      	beq.n	8009722 <USBD_StdEPReq+0x14e>
 800971c:	2b03      	cmp	r3, #3
 800971e:	d032      	beq.n	8009786 <USBD_StdEPReq+0x1b2>
 8009720:	e097      	b.n	8009852 <USBD_StdEPReq+0x27e>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009722:	7bbb      	ldrb	r3, [r7, #14]
 8009724:	2b00      	cmp	r3, #0
 8009726:	d007      	beq.n	8009738 <USBD_StdEPReq+0x164>
 8009728:	7bbb      	ldrb	r3, [r7, #14]
 800972a:	2b80      	cmp	r3, #128	; 0x80
 800972c:	d004      	beq.n	8009738 <USBD_StdEPReq+0x164>
        {
          USBD_CtlError(pdev, req);
 800972e:	6839      	ldr	r1, [r7, #0]
 8009730:	6878      	ldr	r0, [r7, #4]
 8009732:	f000 fbcb 	bl	8009ecc <USBD_CtlError>
          break;
 8009736:	e091      	b.n	800985c <USBD_StdEPReq+0x288>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009738:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800973c:	2b00      	cmp	r3, #0
 800973e:	da0b      	bge.n	8009758 <USBD_StdEPReq+0x184>
 8009740:	7bbb      	ldrb	r3, [r7, #14]
 8009742:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009746:	4613      	mov	r3, r2
 8009748:	009b      	lsls	r3, r3, #2
 800974a:	4413      	add	r3, r2
 800974c:	009b      	lsls	r3, r3, #2
 800974e:	3310      	adds	r3, #16
 8009750:	687a      	ldr	r2, [r7, #4]
 8009752:	4413      	add	r3, r2
 8009754:	3304      	adds	r3, #4
 8009756:	e00b      	b.n	8009770 <USBD_StdEPReq+0x19c>
              &pdev->ep_out[ep_addr & 0x7FU];
 8009758:	7bbb      	ldrb	r3, [r7, #14]
 800975a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800975e:	4613      	mov	r3, r2
 8009760:	009b      	lsls	r3, r3, #2
 8009762:	4413      	add	r3, r2
 8009764:	009b      	lsls	r3, r3, #2
 8009766:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800976a:	687a      	ldr	r2, [r7, #4]
 800976c:	4413      	add	r3, r2
 800976e:	3304      	adds	r3, #4
 8009770:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 8009772:	68bb      	ldr	r3, [r7, #8]
 8009774:	2200      	movs	r2, #0
 8009776:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009778:	68bb      	ldr	r3, [r7, #8]
 800977a:	2202      	movs	r2, #2
 800977c:	4619      	mov	r1, r3
 800977e:	6878      	ldr	r0, [r7, #4]
 8009780:	f000 fc15 	bl	8009fae <USBD_CtlSendData>
        break;
 8009784:	e06a      	b.n	800985c <USBD_StdEPReq+0x288>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 8009786:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800978a:	2b00      	cmp	r3, #0
 800978c:	da11      	bge.n	80097b2 <USBD_StdEPReq+0x1de>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800978e:	7bbb      	ldrb	r3, [r7, #14]
 8009790:	f003 020f 	and.w	r2, r3, #15
 8009794:	6879      	ldr	r1, [r7, #4]
 8009796:	4613      	mov	r3, r2
 8009798:	009b      	lsls	r3, r3, #2
 800979a:	4413      	add	r3, r2
 800979c:	009b      	lsls	r3, r3, #2
 800979e:	440b      	add	r3, r1
 80097a0:	3324      	adds	r3, #36	; 0x24
 80097a2:	881b      	ldrh	r3, [r3, #0]
 80097a4:	2b00      	cmp	r3, #0
 80097a6:	d117      	bne.n	80097d8 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 80097a8:	6839      	ldr	r1, [r7, #0]
 80097aa:	6878      	ldr	r0, [r7, #4]
 80097ac:	f000 fb8e 	bl	8009ecc <USBD_CtlError>
            break;
 80097b0:	e054      	b.n	800985c <USBD_StdEPReq+0x288>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80097b2:	7bbb      	ldrb	r3, [r7, #14]
 80097b4:	f003 020f 	and.w	r2, r3, #15
 80097b8:	6879      	ldr	r1, [r7, #4]
 80097ba:	4613      	mov	r3, r2
 80097bc:	009b      	lsls	r3, r3, #2
 80097be:	4413      	add	r3, r2
 80097c0:	009b      	lsls	r3, r3, #2
 80097c2:	440b      	add	r3, r1
 80097c4:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80097c8:	881b      	ldrh	r3, [r3, #0]
 80097ca:	2b00      	cmp	r3, #0
 80097cc:	d104      	bne.n	80097d8 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 80097ce:	6839      	ldr	r1, [r7, #0]
 80097d0:	6878      	ldr	r0, [r7, #4]
 80097d2:	f000 fb7b 	bl	8009ecc <USBD_CtlError>
            break;
 80097d6:	e041      	b.n	800985c <USBD_StdEPReq+0x288>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80097d8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80097dc:	2b00      	cmp	r3, #0
 80097de:	da0b      	bge.n	80097f8 <USBD_StdEPReq+0x224>
 80097e0:	7bbb      	ldrb	r3, [r7, #14]
 80097e2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80097e6:	4613      	mov	r3, r2
 80097e8:	009b      	lsls	r3, r3, #2
 80097ea:	4413      	add	r3, r2
 80097ec:	009b      	lsls	r3, r3, #2
 80097ee:	3310      	adds	r3, #16
 80097f0:	687a      	ldr	r2, [r7, #4]
 80097f2:	4413      	add	r3, r2
 80097f4:	3304      	adds	r3, #4
 80097f6:	e00b      	b.n	8009810 <USBD_StdEPReq+0x23c>
              &pdev->ep_out[ep_addr & 0x7FU];
 80097f8:	7bbb      	ldrb	r3, [r7, #14]
 80097fa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80097fe:	4613      	mov	r3, r2
 8009800:	009b      	lsls	r3, r3, #2
 8009802:	4413      	add	r3, r2
 8009804:	009b      	lsls	r3, r3, #2
 8009806:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800980a:	687a      	ldr	r2, [r7, #4]
 800980c:	4413      	add	r3, r2
 800980e:	3304      	adds	r3, #4
 8009810:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8009812:	7bbb      	ldrb	r3, [r7, #14]
 8009814:	2b00      	cmp	r3, #0
 8009816:	d002      	beq.n	800981e <USBD_StdEPReq+0x24a>
 8009818:	7bbb      	ldrb	r3, [r7, #14]
 800981a:	2b80      	cmp	r3, #128	; 0x80
 800981c:	d103      	bne.n	8009826 <USBD_StdEPReq+0x252>
          {
            pep->status = 0x0000U;
 800981e:	68bb      	ldr	r3, [r7, #8]
 8009820:	2200      	movs	r2, #0
 8009822:	601a      	str	r2, [r3, #0]
 8009824:	e00e      	b.n	8009844 <USBD_StdEPReq+0x270>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8009826:	7bbb      	ldrb	r3, [r7, #14]
 8009828:	4619      	mov	r1, r3
 800982a:	6878      	ldr	r0, [r7, #4]
 800982c:	f001 f8a2 	bl	800a974 <USBD_LL_IsStallEP>
 8009830:	4603      	mov	r3, r0
 8009832:	2b00      	cmp	r3, #0
 8009834:	d003      	beq.n	800983e <USBD_StdEPReq+0x26a>
          {
            pep->status = 0x0001U;
 8009836:	68bb      	ldr	r3, [r7, #8]
 8009838:	2201      	movs	r2, #1
 800983a:	601a      	str	r2, [r3, #0]
 800983c:	e002      	b.n	8009844 <USBD_StdEPReq+0x270>
          }
          else
          {
            pep->status = 0x0000U;
 800983e:	68bb      	ldr	r3, [r7, #8]
 8009840:	2200      	movs	r2, #0
 8009842:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009844:	68bb      	ldr	r3, [r7, #8]
 8009846:	2202      	movs	r2, #2
 8009848:	4619      	mov	r1, r3
 800984a:	6878      	ldr	r0, [r7, #4]
 800984c:	f000 fbaf 	bl	8009fae <USBD_CtlSendData>
          break;
 8009850:	e004      	b.n	800985c <USBD_StdEPReq+0x288>

      default:
        USBD_CtlError(pdev, req);
 8009852:	6839      	ldr	r1, [r7, #0]
 8009854:	6878      	ldr	r0, [r7, #4]
 8009856:	f000 fb39 	bl	8009ecc <USBD_CtlError>
        break;
 800985a:	bf00      	nop
      }
      break;
 800985c:	e004      	b.n	8009868 <USBD_StdEPReq+0x294>

    default:
      USBD_CtlError(pdev, req);
 800985e:	6839      	ldr	r1, [r7, #0]
 8009860:	6878      	ldr	r0, [r7, #4]
 8009862:	f000 fb33 	bl	8009ecc <USBD_CtlError>
      break;
 8009866:	bf00      	nop
    }
    break;
 8009868:	e004      	b.n	8009874 <USBD_StdEPReq+0x2a0>

  default:
    USBD_CtlError(pdev, req);
 800986a:	6839      	ldr	r1, [r7, #0]
 800986c:	6878      	ldr	r0, [r7, #4]
 800986e:	f000 fb2d 	bl	8009ecc <USBD_CtlError>
    break;
 8009872:	bf00      	nop
  }

  return ret;
 8009874:	7bfb      	ldrb	r3, [r7, #15]
}
 8009876:	4618      	mov	r0, r3
 8009878:	3710      	adds	r7, #16
 800987a:	46bd      	mov	sp, r7
 800987c:	bd80      	pop	{r7, pc}
	...

08009880 <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009880:	b580      	push	{r7, lr}
 8009882:	b084      	sub	sp, #16
 8009884:	af00      	add	r7, sp, #0
 8009886:	6078      	str	r0, [r7, #4]
 8009888:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800988a:	2300      	movs	r3, #0
 800988c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800988e:	2300      	movs	r3, #0
 8009890:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8009892:	2300      	movs	r3, #0
 8009894:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8009896:	683b      	ldr	r3, [r7, #0]
 8009898:	885b      	ldrh	r3, [r3, #2]
 800989a:	0a1b      	lsrs	r3, r3, #8
 800989c:	b29b      	uxth	r3, r3
 800989e:	3b01      	subs	r3, #1
 80098a0:	2b06      	cmp	r3, #6
 80098a2:	f200 8128 	bhi.w	8009af6 <USBD_GetDescriptor+0x276>
 80098a6:	a201      	add	r2, pc, #4	; (adr r2, 80098ac <USBD_GetDescriptor+0x2c>)
 80098a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80098ac:	080098c9 	.word	0x080098c9
 80098b0:	080098e1 	.word	0x080098e1
 80098b4:	08009921 	.word	0x08009921
 80098b8:	08009af7 	.word	0x08009af7
 80098bc:	08009af7 	.word	0x08009af7
 80098c0:	08009a97 	.word	0x08009a97
 80098c4:	08009ac3 	.word	0x08009ac3
      err++;
    }
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80098ce:	681b      	ldr	r3, [r3, #0]
 80098d0:	687a      	ldr	r2, [r7, #4]
 80098d2:	7c12      	ldrb	r2, [r2, #16]
 80098d4:	f107 0108 	add.w	r1, r7, #8
 80098d8:	4610      	mov	r0, r2
 80098da:	4798      	blx	r3
 80098dc:	60f8      	str	r0, [r7, #12]
    break;
 80098de:	e112      	b.n	8009b06 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	7c1b      	ldrb	r3, [r3, #16]
 80098e4:	2b00      	cmp	r3, #0
 80098e6:	d10d      	bne.n	8009904 <USBD_GetDescriptor+0x84>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80098ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80098f0:	f107 0208 	add.w	r2, r7, #8
 80098f4:	4610      	mov	r0, r2
 80098f6:	4798      	blx	r3
 80098f8:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80098fa:	68fb      	ldr	r3, [r7, #12]
 80098fc:	3301      	adds	r3, #1
 80098fe:	2202      	movs	r2, #2
 8009900:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 8009902:	e100      	b.n	8009b06 <USBD_GetDescriptor+0x286>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800990a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800990c:	f107 0208 	add.w	r2, r7, #8
 8009910:	4610      	mov	r0, r2
 8009912:	4798      	blx	r3
 8009914:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009916:	68fb      	ldr	r3, [r7, #12]
 8009918:	3301      	adds	r3, #1
 800991a:	2202      	movs	r2, #2
 800991c:	701a      	strb	r2, [r3, #0]
    break;
 800991e:	e0f2      	b.n	8009b06 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 8009920:	683b      	ldr	r3, [r7, #0]
 8009922:	885b      	ldrh	r3, [r3, #2]
 8009924:	b2db      	uxtb	r3, r3
 8009926:	2b05      	cmp	r3, #5
 8009928:	f200 80ac 	bhi.w	8009a84 <USBD_GetDescriptor+0x204>
 800992c:	a201      	add	r2, pc, #4	; (adr r2, 8009934 <USBD_GetDescriptor+0xb4>)
 800992e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009932:	bf00      	nop
 8009934:	0800994d 	.word	0x0800994d
 8009938:	08009981 	.word	0x08009981
 800993c:	080099b5 	.word	0x080099b5
 8009940:	080099e9 	.word	0x080099e9
 8009944:	08009a1d 	.word	0x08009a1d
 8009948:	08009a51 	.word	0x08009a51
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009952:	685b      	ldr	r3, [r3, #4]
 8009954:	2b00      	cmp	r3, #0
 8009956:	d00b      	beq.n	8009970 <USBD_GetDescriptor+0xf0>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800995e:	685b      	ldr	r3, [r3, #4]
 8009960:	687a      	ldr	r2, [r7, #4]
 8009962:	7c12      	ldrb	r2, [r2, #16]
 8009964:	f107 0108 	add.w	r1, r7, #8
 8009968:	4610      	mov	r0, r2
 800996a:	4798      	blx	r3
 800996c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800996e:	e091      	b.n	8009a94 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8009970:	6839      	ldr	r1, [r7, #0]
 8009972:	6878      	ldr	r0, [r7, #4]
 8009974:	f000 faaa 	bl	8009ecc <USBD_CtlError>
        err++;
 8009978:	7afb      	ldrb	r3, [r7, #11]
 800997a:	3301      	adds	r3, #1
 800997c:	72fb      	strb	r3, [r7, #11]
      break;
 800997e:	e089      	b.n	8009a94 <USBD_GetDescriptor+0x214>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009986:	689b      	ldr	r3, [r3, #8]
 8009988:	2b00      	cmp	r3, #0
 800998a:	d00b      	beq.n	80099a4 <USBD_GetDescriptor+0x124>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009992:	689b      	ldr	r3, [r3, #8]
 8009994:	687a      	ldr	r2, [r7, #4]
 8009996:	7c12      	ldrb	r2, [r2, #16]
 8009998:	f107 0108 	add.w	r1, r7, #8
 800999c:	4610      	mov	r0, r2
 800999e:	4798      	blx	r3
 80099a0:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80099a2:	e077      	b.n	8009a94 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 80099a4:	6839      	ldr	r1, [r7, #0]
 80099a6:	6878      	ldr	r0, [r7, #4]
 80099a8:	f000 fa90 	bl	8009ecc <USBD_CtlError>
        err++;
 80099ac:	7afb      	ldrb	r3, [r7, #11]
 80099ae:	3301      	adds	r3, #1
 80099b0:	72fb      	strb	r3, [r7, #11]
      break;
 80099b2:	e06f      	b.n	8009a94 <USBD_GetDescriptor+0x214>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80099ba:	68db      	ldr	r3, [r3, #12]
 80099bc:	2b00      	cmp	r3, #0
 80099be:	d00b      	beq.n	80099d8 <USBD_GetDescriptor+0x158>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80099c6:	68db      	ldr	r3, [r3, #12]
 80099c8:	687a      	ldr	r2, [r7, #4]
 80099ca:	7c12      	ldrb	r2, [r2, #16]
 80099cc:	f107 0108 	add.w	r1, r7, #8
 80099d0:	4610      	mov	r0, r2
 80099d2:	4798      	blx	r3
 80099d4:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80099d6:	e05d      	b.n	8009a94 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 80099d8:	6839      	ldr	r1, [r7, #0]
 80099da:	6878      	ldr	r0, [r7, #4]
 80099dc:	f000 fa76 	bl	8009ecc <USBD_CtlError>
        err++;
 80099e0:	7afb      	ldrb	r3, [r7, #11]
 80099e2:	3301      	adds	r3, #1
 80099e4:	72fb      	strb	r3, [r7, #11]
      break;
 80099e6:	e055      	b.n	8009a94 <USBD_GetDescriptor+0x214>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80099ee:	691b      	ldr	r3, [r3, #16]
 80099f0:	2b00      	cmp	r3, #0
 80099f2:	d00b      	beq.n	8009a0c <USBD_GetDescriptor+0x18c>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80099fa:	691b      	ldr	r3, [r3, #16]
 80099fc:	687a      	ldr	r2, [r7, #4]
 80099fe:	7c12      	ldrb	r2, [r2, #16]
 8009a00:	f107 0108 	add.w	r1, r7, #8
 8009a04:	4610      	mov	r0, r2
 8009a06:	4798      	blx	r3
 8009a08:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009a0a:	e043      	b.n	8009a94 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8009a0c:	6839      	ldr	r1, [r7, #0]
 8009a0e:	6878      	ldr	r0, [r7, #4]
 8009a10:	f000 fa5c 	bl	8009ecc <USBD_CtlError>
        err++;
 8009a14:	7afb      	ldrb	r3, [r7, #11]
 8009a16:	3301      	adds	r3, #1
 8009a18:	72fb      	strb	r3, [r7, #11]
      break;
 8009a1a:	e03b      	b.n	8009a94 <USBD_GetDescriptor+0x214>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009a22:	695b      	ldr	r3, [r3, #20]
 8009a24:	2b00      	cmp	r3, #0
 8009a26:	d00b      	beq.n	8009a40 <USBD_GetDescriptor+0x1c0>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009a2e:	695b      	ldr	r3, [r3, #20]
 8009a30:	687a      	ldr	r2, [r7, #4]
 8009a32:	7c12      	ldrb	r2, [r2, #16]
 8009a34:	f107 0108 	add.w	r1, r7, #8
 8009a38:	4610      	mov	r0, r2
 8009a3a:	4798      	blx	r3
 8009a3c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009a3e:	e029      	b.n	8009a94 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8009a40:	6839      	ldr	r1, [r7, #0]
 8009a42:	6878      	ldr	r0, [r7, #4]
 8009a44:	f000 fa42 	bl	8009ecc <USBD_CtlError>
        err++;
 8009a48:	7afb      	ldrb	r3, [r7, #11]
 8009a4a:	3301      	adds	r3, #1
 8009a4c:	72fb      	strb	r3, [r7, #11]
      break;
 8009a4e:	e021      	b.n	8009a94 <USBD_GetDescriptor+0x214>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009a56:	699b      	ldr	r3, [r3, #24]
 8009a58:	2b00      	cmp	r3, #0
 8009a5a:	d00b      	beq.n	8009a74 <USBD_GetDescriptor+0x1f4>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009a62:	699b      	ldr	r3, [r3, #24]
 8009a64:	687a      	ldr	r2, [r7, #4]
 8009a66:	7c12      	ldrb	r2, [r2, #16]
 8009a68:	f107 0108 	add.w	r1, r7, #8
 8009a6c:	4610      	mov	r0, r2
 8009a6e:	4798      	blx	r3
 8009a70:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009a72:	e00f      	b.n	8009a94 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8009a74:	6839      	ldr	r1, [r7, #0]
 8009a76:	6878      	ldr	r0, [r7, #4]
 8009a78:	f000 fa28 	bl	8009ecc <USBD_CtlError>
        err++;
 8009a7c:	7afb      	ldrb	r3, [r7, #11]
 8009a7e:	3301      	adds	r3, #1
 8009a80:	72fb      	strb	r3, [r7, #11]
      break;
 8009a82:	e007      	b.n	8009a94 <USBD_GetDescriptor+0x214>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 8009a84:	6839      	ldr	r1, [r7, #0]
 8009a86:	6878      	ldr	r0, [r7, #4]
 8009a88:	f000 fa20 	bl	8009ecc <USBD_CtlError>
      err++;
 8009a8c:	7afb      	ldrb	r3, [r7, #11]
 8009a8e:	3301      	adds	r3, #1
 8009a90:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 8009a92:	bf00      	nop
    }
    break;
 8009a94:	e037      	b.n	8009b06 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	7c1b      	ldrb	r3, [r3, #16]
 8009a9a:	2b00      	cmp	r3, #0
 8009a9c:	d109      	bne.n	8009ab2 <USBD_GetDescriptor+0x232>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009aa4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009aa6:	f107 0208 	add.w	r2, r7, #8
 8009aaa:	4610      	mov	r0, r2
 8009aac:	4798      	blx	r3
 8009aae:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8009ab0:	e029      	b.n	8009b06 <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 8009ab2:	6839      	ldr	r1, [r7, #0]
 8009ab4:	6878      	ldr	r0, [r7, #4]
 8009ab6:	f000 fa09 	bl	8009ecc <USBD_CtlError>
      err++;
 8009aba:	7afb      	ldrb	r3, [r7, #11]
 8009abc:	3301      	adds	r3, #1
 8009abe:	72fb      	strb	r3, [r7, #11]
    break;
 8009ac0:	e021      	b.n	8009b06 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	7c1b      	ldrb	r3, [r3, #16]
 8009ac6:	2b00      	cmp	r3, #0
 8009ac8:	d10d      	bne.n	8009ae6 <USBD_GetDescriptor+0x266>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009ad0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009ad2:	f107 0208 	add.w	r2, r7, #8
 8009ad6:	4610      	mov	r0, r2
 8009ad8:	4798      	blx	r3
 8009ada:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8009adc:	68fb      	ldr	r3, [r7, #12]
 8009ade:	3301      	adds	r3, #1
 8009ae0:	2207      	movs	r2, #7
 8009ae2:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8009ae4:	e00f      	b.n	8009b06 <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 8009ae6:	6839      	ldr	r1, [r7, #0]
 8009ae8:	6878      	ldr	r0, [r7, #4]
 8009aea:	f000 f9ef 	bl	8009ecc <USBD_CtlError>
      err++;
 8009aee:	7afb      	ldrb	r3, [r7, #11]
 8009af0:	3301      	adds	r3, #1
 8009af2:	72fb      	strb	r3, [r7, #11]
    break;
 8009af4:	e007      	b.n	8009b06 <USBD_GetDescriptor+0x286>

  default:
    USBD_CtlError(pdev, req);
 8009af6:	6839      	ldr	r1, [r7, #0]
 8009af8:	6878      	ldr	r0, [r7, #4]
 8009afa:	f000 f9e7 	bl	8009ecc <USBD_CtlError>
    err++;
 8009afe:	7afb      	ldrb	r3, [r7, #11]
 8009b00:	3301      	adds	r3, #1
 8009b02:	72fb      	strb	r3, [r7, #11]
    break;
 8009b04:	bf00      	nop
  }

  if (err != 0U)
 8009b06:	7afb      	ldrb	r3, [r7, #11]
 8009b08:	2b00      	cmp	r3, #0
 8009b0a:	d11e      	bne.n	8009b4a <USBD_GetDescriptor+0x2ca>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 8009b0c:	683b      	ldr	r3, [r7, #0]
 8009b0e:	88db      	ldrh	r3, [r3, #6]
 8009b10:	2b00      	cmp	r3, #0
 8009b12:	d016      	beq.n	8009b42 <USBD_GetDescriptor+0x2c2>
    {
      if (len != 0U)
 8009b14:	893b      	ldrh	r3, [r7, #8]
 8009b16:	2b00      	cmp	r3, #0
 8009b18:	d00e      	beq.n	8009b38 <USBD_GetDescriptor+0x2b8>
      {
        len = MIN(len, req->wLength);
 8009b1a:	683b      	ldr	r3, [r7, #0]
 8009b1c:	88da      	ldrh	r2, [r3, #6]
 8009b1e:	893b      	ldrh	r3, [r7, #8]
 8009b20:	4293      	cmp	r3, r2
 8009b22:	bf28      	it	cs
 8009b24:	4613      	movcs	r3, r2
 8009b26:	b29b      	uxth	r3, r3
 8009b28:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 8009b2a:	893b      	ldrh	r3, [r7, #8]
 8009b2c:	461a      	mov	r2, r3
 8009b2e:	68f9      	ldr	r1, [r7, #12]
 8009b30:	6878      	ldr	r0, [r7, #4]
 8009b32:	f000 fa3c 	bl	8009fae <USBD_CtlSendData>
 8009b36:	e009      	b.n	8009b4c <USBD_GetDescriptor+0x2cc>
      }
      else
      {
        USBD_CtlError(pdev, req);
 8009b38:	6839      	ldr	r1, [r7, #0]
 8009b3a:	6878      	ldr	r0, [r7, #4]
 8009b3c:	f000 f9c6 	bl	8009ecc <USBD_CtlError>
 8009b40:	e004      	b.n	8009b4c <USBD_GetDescriptor+0x2cc>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 8009b42:	6878      	ldr	r0, [r7, #4]
 8009b44:	f000 fa8d 	bl	800a062 <USBD_CtlSendStatus>
 8009b48:	e000      	b.n	8009b4c <USBD_GetDescriptor+0x2cc>
    return;
 8009b4a:	bf00      	nop
    }
  }
}
 8009b4c:	3710      	adds	r7, #16
 8009b4e:	46bd      	mov	sp, r7
 8009b50:	bd80      	pop	{r7, pc}
 8009b52:	bf00      	nop

08009b54 <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009b54:	b580      	push	{r7, lr}
 8009b56:	b084      	sub	sp, #16
 8009b58:	af00      	add	r7, sp, #0
 8009b5a:	6078      	str	r0, [r7, #4]
 8009b5c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8009b5e:	683b      	ldr	r3, [r7, #0]
 8009b60:	889b      	ldrh	r3, [r3, #4]
 8009b62:	2b00      	cmp	r3, #0
 8009b64:	d130      	bne.n	8009bc8 <USBD_SetAddress+0x74>
 8009b66:	683b      	ldr	r3, [r7, #0]
 8009b68:	88db      	ldrh	r3, [r3, #6]
 8009b6a:	2b00      	cmp	r3, #0
 8009b6c:	d12c      	bne.n	8009bc8 <USBD_SetAddress+0x74>
 8009b6e:	683b      	ldr	r3, [r7, #0]
 8009b70:	885b      	ldrh	r3, [r3, #2]
 8009b72:	2b7f      	cmp	r3, #127	; 0x7f
 8009b74:	d828      	bhi.n	8009bc8 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8009b76:	683b      	ldr	r3, [r7, #0]
 8009b78:	885b      	ldrh	r3, [r3, #2]
 8009b7a:	b2db      	uxtb	r3, r3
 8009b7c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009b80:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009b88:	2b03      	cmp	r3, #3
 8009b8a:	d104      	bne.n	8009b96 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8009b8c:	6839      	ldr	r1, [r7, #0]
 8009b8e:	6878      	ldr	r0, [r7, #4]
 8009b90:	f000 f99c 	bl	8009ecc <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009b94:	e01c      	b.n	8009bd0 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	7bfa      	ldrb	r2, [r7, #15]
 8009b9a:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8009b9e:	7bfb      	ldrb	r3, [r7, #15]
 8009ba0:	4619      	mov	r1, r3
 8009ba2:	6878      	ldr	r0, [r7, #4]
 8009ba4:	f000 ff12 	bl	800a9cc <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8009ba8:	6878      	ldr	r0, [r7, #4]
 8009baa:	f000 fa5a 	bl	800a062 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8009bae:	7bfb      	ldrb	r3, [r7, #15]
 8009bb0:	2b00      	cmp	r3, #0
 8009bb2:	d004      	beq.n	8009bbe <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	2202      	movs	r2, #2
 8009bb8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009bbc:	e008      	b.n	8009bd0 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	2201      	movs	r2, #1
 8009bc2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009bc6:	e003      	b.n	8009bd0 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8009bc8:	6839      	ldr	r1, [r7, #0]
 8009bca:	6878      	ldr	r0, [r7, #4]
 8009bcc:	f000 f97e 	bl	8009ecc <USBD_CtlError>
  }
}
 8009bd0:	bf00      	nop
 8009bd2:	3710      	adds	r7, #16
 8009bd4:	46bd      	mov	sp, r7
 8009bd6:	bd80      	pop	{r7, pc}

08009bd8 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009bd8:	b580      	push	{r7, lr}
 8009bda:	b084      	sub	sp, #16
 8009bdc:	af00      	add	r7, sp, #0
 8009bde:	6078      	str	r0, [r7, #4]
 8009be0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009be2:	2300      	movs	r3, #0
 8009be4:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8009be6:	683b      	ldr	r3, [r7, #0]
 8009be8:	885b      	ldrh	r3, [r3, #2]
 8009bea:	b2da      	uxtb	r2, r3
 8009bec:	4b4b      	ldr	r3, [pc, #300]	; (8009d1c <USBD_SetConfig+0x144>)
 8009bee:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8009bf0:	4b4a      	ldr	r3, [pc, #296]	; (8009d1c <USBD_SetConfig+0x144>)
 8009bf2:	781b      	ldrb	r3, [r3, #0]
 8009bf4:	2b01      	cmp	r3, #1
 8009bf6:	d905      	bls.n	8009c04 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8009bf8:	6839      	ldr	r1, [r7, #0]
 8009bfa:	6878      	ldr	r0, [r7, #4]
 8009bfc:	f000 f966 	bl	8009ecc <USBD_CtlError>
    return USBD_FAIL;
 8009c00:	2303      	movs	r3, #3
 8009c02:	e087      	b.n	8009d14 <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009c0a:	2b02      	cmp	r3, #2
 8009c0c:	d002      	beq.n	8009c14 <USBD_SetConfig+0x3c>
 8009c0e:	2b03      	cmp	r3, #3
 8009c10:	d025      	beq.n	8009c5e <USBD_SetConfig+0x86>
 8009c12:	e071      	b.n	8009cf8 <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 8009c14:	4b41      	ldr	r3, [pc, #260]	; (8009d1c <USBD_SetConfig+0x144>)
 8009c16:	781b      	ldrb	r3, [r3, #0]
 8009c18:	2b00      	cmp	r3, #0
 8009c1a:	d01c      	beq.n	8009c56 <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 8009c1c:	4b3f      	ldr	r3, [pc, #252]	; (8009d1c <USBD_SetConfig+0x144>)
 8009c1e:	781b      	ldrb	r3, [r3, #0]
 8009c20:	461a      	mov	r2, r3
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 8009c26:	4b3d      	ldr	r3, [pc, #244]	; (8009d1c <USBD_SetConfig+0x144>)
 8009c28:	781b      	ldrb	r3, [r3, #0]
 8009c2a:	4619      	mov	r1, r3
 8009c2c:	6878      	ldr	r0, [r7, #4]
 8009c2e:	f7ff f9a7 	bl	8008f80 <USBD_SetClassConfig>
 8009c32:	4603      	mov	r3, r0
 8009c34:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 8009c36:	7bfb      	ldrb	r3, [r7, #15]
 8009c38:	2b00      	cmp	r3, #0
 8009c3a:	d004      	beq.n	8009c46 <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 8009c3c:	6839      	ldr	r1, [r7, #0]
 8009c3e:	6878      	ldr	r0, [r7, #4]
 8009c40:	f000 f944 	bl	8009ecc <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8009c44:	e065      	b.n	8009d12 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 8009c46:	6878      	ldr	r0, [r7, #4]
 8009c48:	f000 fa0b 	bl	800a062 <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	2203      	movs	r2, #3
 8009c50:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 8009c54:	e05d      	b.n	8009d12 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 8009c56:	6878      	ldr	r0, [r7, #4]
 8009c58:	f000 fa03 	bl	800a062 <USBD_CtlSendStatus>
    break;
 8009c5c:	e059      	b.n	8009d12 <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 8009c5e:	4b2f      	ldr	r3, [pc, #188]	; (8009d1c <USBD_SetConfig+0x144>)
 8009c60:	781b      	ldrb	r3, [r3, #0]
 8009c62:	2b00      	cmp	r3, #0
 8009c64:	d112      	bne.n	8009c8c <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	2202      	movs	r2, #2
 8009c6a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 8009c6e:	4b2b      	ldr	r3, [pc, #172]	; (8009d1c <USBD_SetConfig+0x144>)
 8009c70:	781b      	ldrb	r3, [r3, #0]
 8009c72:	461a      	mov	r2, r3
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8009c78:	4b28      	ldr	r3, [pc, #160]	; (8009d1c <USBD_SetConfig+0x144>)
 8009c7a:	781b      	ldrb	r3, [r3, #0]
 8009c7c:	4619      	mov	r1, r3
 8009c7e:	6878      	ldr	r0, [r7, #4]
 8009c80:	f7ff f99a 	bl	8008fb8 <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 8009c84:	6878      	ldr	r0, [r7, #4]
 8009c86:	f000 f9ec 	bl	800a062 <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8009c8a:	e042      	b.n	8009d12 <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 8009c8c:	4b23      	ldr	r3, [pc, #140]	; (8009d1c <USBD_SetConfig+0x144>)
 8009c8e:	781b      	ldrb	r3, [r3, #0]
 8009c90:	461a      	mov	r2, r3
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	685b      	ldr	r3, [r3, #4]
 8009c96:	429a      	cmp	r2, r3
 8009c98:	d02a      	beq.n	8009cf0 <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	685b      	ldr	r3, [r3, #4]
 8009c9e:	b2db      	uxtb	r3, r3
 8009ca0:	4619      	mov	r1, r3
 8009ca2:	6878      	ldr	r0, [r7, #4]
 8009ca4:	f7ff f988 	bl	8008fb8 <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 8009ca8:	4b1c      	ldr	r3, [pc, #112]	; (8009d1c <USBD_SetConfig+0x144>)
 8009caa:	781b      	ldrb	r3, [r3, #0]
 8009cac:	461a      	mov	r2, r3
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 8009cb2:	4b1a      	ldr	r3, [pc, #104]	; (8009d1c <USBD_SetConfig+0x144>)
 8009cb4:	781b      	ldrb	r3, [r3, #0]
 8009cb6:	4619      	mov	r1, r3
 8009cb8:	6878      	ldr	r0, [r7, #4]
 8009cba:	f7ff f961 	bl	8008f80 <USBD_SetClassConfig>
 8009cbe:	4603      	mov	r3, r0
 8009cc0:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 8009cc2:	7bfb      	ldrb	r3, [r7, #15]
 8009cc4:	2b00      	cmp	r3, #0
 8009cc6:	d00f      	beq.n	8009ce8 <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 8009cc8:	6839      	ldr	r1, [r7, #0]
 8009cca:	6878      	ldr	r0, [r7, #4]
 8009ccc:	f000 f8fe 	bl	8009ecc <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	685b      	ldr	r3, [r3, #4]
 8009cd4:	b2db      	uxtb	r3, r3
 8009cd6:	4619      	mov	r1, r3
 8009cd8:	6878      	ldr	r0, [r7, #4]
 8009cda:	f7ff f96d 	bl	8008fb8 <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	2202      	movs	r2, #2
 8009ce2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 8009ce6:	e014      	b.n	8009d12 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 8009ce8:	6878      	ldr	r0, [r7, #4]
 8009cea:	f000 f9ba 	bl	800a062 <USBD_CtlSendStatus>
    break;
 8009cee:	e010      	b.n	8009d12 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 8009cf0:	6878      	ldr	r0, [r7, #4]
 8009cf2:	f000 f9b6 	bl	800a062 <USBD_CtlSendStatus>
    break;
 8009cf6:	e00c      	b.n	8009d12 <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 8009cf8:	6839      	ldr	r1, [r7, #0]
 8009cfa:	6878      	ldr	r0, [r7, #4]
 8009cfc:	f000 f8e6 	bl	8009ecc <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 8009d00:	4b06      	ldr	r3, [pc, #24]	; (8009d1c <USBD_SetConfig+0x144>)
 8009d02:	781b      	ldrb	r3, [r3, #0]
 8009d04:	4619      	mov	r1, r3
 8009d06:	6878      	ldr	r0, [r7, #4]
 8009d08:	f7ff f956 	bl	8008fb8 <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 8009d0c:	2303      	movs	r3, #3
 8009d0e:	73fb      	strb	r3, [r7, #15]
    break;
 8009d10:	bf00      	nop
  }

  return ret;
 8009d12:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d14:	4618      	mov	r0, r3
 8009d16:	3710      	adds	r7, #16
 8009d18:	46bd      	mov	sp, r7
 8009d1a:	bd80      	pop	{r7, pc}
 8009d1c:	20000668 	.word	0x20000668

08009d20 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009d20:	b580      	push	{r7, lr}
 8009d22:	b082      	sub	sp, #8
 8009d24:	af00      	add	r7, sp, #0
 8009d26:	6078      	str	r0, [r7, #4]
 8009d28:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8009d2a:	683b      	ldr	r3, [r7, #0]
 8009d2c:	88db      	ldrh	r3, [r3, #6]
 8009d2e:	2b01      	cmp	r3, #1
 8009d30:	d004      	beq.n	8009d3c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8009d32:	6839      	ldr	r1, [r7, #0]
 8009d34:	6878      	ldr	r0, [r7, #4]
 8009d36:	f000 f8c9 	bl	8009ecc <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 8009d3a:	e021      	b.n	8009d80 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009d42:	2b01      	cmp	r3, #1
 8009d44:	db17      	blt.n	8009d76 <USBD_GetConfig+0x56>
 8009d46:	2b02      	cmp	r3, #2
 8009d48:	dd02      	ble.n	8009d50 <USBD_GetConfig+0x30>
 8009d4a:	2b03      	cmp	r3, #3
 8009d4c:	d00b      	beq.n	8009d66 <USBD_GetConfig+0x46>
 8009d4e:	e012      	b.n	8009d76 <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	2200      	movs	r2, #0
 8009d54:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	3308      	adds	r3, #8
 8009d5a:	2201      	movs	r2, #1
 8009d5c:	4619      	mov	r1, r3
 8009d5e:	6878      	ldr	r0, [r7, #4]
 8009d60:	f000 f925 	bl	8009fae <USBD_CtlSendData>
      break;
 8009d64:	e00c      	b.n	8009d80 <USBD_GetConfig+0x60>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	3304      	adds	r3, #4
 8009d6a:	2201      	movs	r2, #1
 8009d6c:	4619      	mov	r1, r3
 8009d6e:	6878      	ldr	r0, [r7, #4]
 8009d70:	f000 f91d 	bl	8009fae <USBD_CtlSendData>
      break;
 8009d74:	e004      	b.n	8009d80 <USBD_GetConfig+0x60>
      USBD_CtlError(pdev, req);
 8009d76:	6839      	ldr	r1, [r7, #0]
 8009d78:	6878      	ldr	r0, [r7, #4]
 8009d7a:	f000 f8a7 	bl	8009ecc <USBD_CtlError>
      break;
 8009d7e:	bf00      	nop
}
 8009d80:	bf00      	nop
 8009d82:	3708      	adds	r7, #8
 8009d84:	46bd      	mov	sp, r7
 8009d86:	bd80      	pop	{r7, pc}

08009d88 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009d88:	b580      	push	{r7, lr}
 8009d8a:	b082      	sub	sp, #8
 8009d8c:	af00      	add	r7, sp, #0
 8009d8e:	6078      	str	r0, [r7, #4]
 8009d90:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009d98:	3b01      	subs	r3, #1
 8009d9a:	2b02      	cmp	r3, #2
 8009d9c:	d81e      	bhi.n	8009ddc <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 8009d9e:	683b      	ldr	r3, [r7, #0]
 8009da0:	88db      	ldrh	r3, [r3, #6]
 8009da2:	2b02      	cmp	r3, #2
 8009da4:	d004      	beq.n	8009db0 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 8009da6:	6839      	ldr	r1, [r7, #0]
 8009da8:	6878      	ldr	r0, [r7, #4]
 8009daa:	f000 f88f 	bl	8009ecc <USBD_CtlError>
      break;
 8009dae:	e01a      	b.n	8009de6 <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	2201      	movs	r2, #1
 8009db4:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup != 0U)
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8009dbc:	2b00      	cmp	r3, #0
 8009dbe:	d005      	beq.n	8009dcc <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	68db      	ldr	r3, [r3, #12]
 8009dc4:	f043 0202 	orr.w	r2, r3, #2
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	330c      	adds	r3, #12
 8009dd0:	2202      	movs	r2, #2
 8009dd2:	4619      	mov	r1, r3
 8009dd4:	6878      	ldr	r0, [r7, #4]
 8009dd6:	f000 f8ea 	bl	8009fae <USBD_CtlSendData>
    break;
 8009dda:	e004      	b.n	8009de6 <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 8009ddc:	6839      	ldr	r1, [r7, #0]
 8009dde:	6878      	ldr	r0, [r7, #4]
 8009de0:	f000 f874 	bl	8009ecc <USBD_CtlError>
    break;
 8009de4:	bf00      	nop
  }
}
 8009de6:	bf00      	nop
 8009de8:	3708      	adds	r7, #8
 8009dea:	46bd      	mov	sp, r7
 8009dec:	bd80      	pop	{r7, pc}

08009dee <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009dee:	b580      	push	{r7, lr}
 8009df0:	b082      	sub	sp, #8
 8009df2:	af00      	add	r7, sp, #0
 8009df4:	6078      	str	r0, [r7, #4]
 8009df6:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009df8:	683b      	ldr	r3, [r7, #0]
 8009dfa:	885b      	ldrh	r3, [r3, #2]
 8009dfc:	2b01      	cmp	r3, #1
 8009dfe:	d106      	bne.n	8009e0e <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	2201      	movs	r2, #1
 8009e04:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8009e08:	6878      	ldr	r0, [r7, #4]
 8009e0a:	f000 f92a 	bl	800a062 <USBD_CtlSendStatus>
  }
}
 8009e0e:	bf00      	nop
 8009e10:	3708      	adds	r7, #8
 8009e12:	46bd      	mov	sp, r7
 8009e14:	bd80      	pop	{r7, pc}

08009e16 <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009e16:	b580      	push	{r7, lr}
 8009e18:	b082      	sub	sp, #8
 8009e1a:	af00      	add	r7, sp, #0
 8009e1c:	6078      	str	r0, [r7, #4]
 8009e1e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009e26:	3b01      	subs	r3, #1
 8009e28:	2b02      	cmp	r3, #2
 8009e2a:	d80b      	bhi.n	8009e44 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009e2c:	683b      	ldr	r3, [r7, #0]
 8009e2e:	885b      	ldrh	r3, [r3, #2]
 8009e30:	2b01      	cmp	r3, #1
 8009e32:	d10c      	bne.n	8009e4e <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	2200      	movs	r2, #0
 8009e38:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8009e3c:	6878      	ldr	r0, [r7, #4]
 8009e3e:	f000 f910 	bl	800a062 <USBD_CtlSendStatus>
      }
      break;
 8009e42:	e004      	b.n	8009e4e <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8009e44:	6839      	ldr	r1, [r7, #0]
 8009e46:	6878      	ldr	r0, [r7, #4]
 8009e48:	f000 f840 	bl	8009ecc <USBD_CtlError>
      break;
 8009e4c:	e000      	b.n	8009e50 <USBD_ClrFeature+0x3a>
      break;
 8009e4e:	bf00      	nop
  }
}
 8009e50:	bf00      	nop
 8009e52:	3708      	adds	r7, #8
 8009e54:	46bd      	mov	sp, r7
 8009e56:	bd80      	pop	{r7, pc}

08009e58 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8009e58:	b580      	push	{r7, lr}
 8009e5a:	b084      	sub	sp, #16
 8009e5c:	af00      	add	r7, sp, #0
 8009e5e:	6078      	str	r0, [r7, #4]
 8009e60:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8009e62:	683b      	ldr	r3, [r7, #0]
 8009e64:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8009e66:	68fb      	ldr	r3, [r7, #12]
 8009e68:	781a      	ldrb	r2, [r3, #0]
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8009e6e:	68fb      	ldr	r3, [r7, #12]
 8009e70:	3301      	adds	r3, #1
 8009e72:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8009e74:	68fb      	ldr	r3, [r7, #12]
 8009e76:	781a      	ldrb	r2, [r3, #0]
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8009e7c:	68fb      	ldr	r3, [r7, #12]
 8009e7e:	3301      	adds	r3, #1
 8009e80:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8009e82:	68f8      	ldr	r0, [r7, #12]
 8009e84:	f7ff fad3 	bl	800942e <SWAPBYTE>
 8009e88:	4603      	mov	r3, r0
 8009e8a:	461a      	mov	r2, r3
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8009e90:	68fb      	ldr	r3, [r7, #12]
 8009e92:	3301      	adds	r3, #1
 8009e94:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009e96:	68fb      	ldr	r3, [r7, #12]
 8009e98:	3301      	adds	r3, #1
 8009e9a:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8009e9c:	68f8      	ldr	r0, [r7, #12]
 8009e9e:	f7ff fac6 	bl	800942e <SWAPBYTE>
 8009ea2:	4603      	mov	r3, r0
 8009ea4:	461a      	mov	r2, r3
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8009eaa:	68fb      	ldr	r3, [r7, #12]
 8009eac:	3301      	adds	r3, #1
 8009eae:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009eb0:	68fb      	ldr	r3, [r7, #12]
 8009eb2:	3301      	adds	r3, #1
 8009eb4:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8009eb6:	68f8      	ldr	r0, [r7, #12]
 8009eb8:	f7ff fab9 	bl	800942e <SWAPBYTE>
 8009ebc:	4603      	mov	r3, r0
 8009ebe:	461a      	mov	r2, r3
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	80da      	strh	r2, [r3, #6]
}
 8009ec4:	bf00      	nop
 8009ec6:	3710      	adds	r7, #16
 8009ec8:	46bd      	mov	sp, r7
 8009eca:	bd80      	pop	{r7, pc}

08009ecc <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009ecc:	b580      	push	{r7, lr}
 8009ece:	b082      	sub	sp, #8
 8009ed0:	af00      	add	r7, sp, #0
 8009ed2:	6078      	str	r0, [r7, #4]
 8009ed4:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8009ed6:	2180      	movs	r1, #128	; 0x80
 8009ed8:	6878      	ldr	r0, [r7, #4]
 8009eda:	f000 fd0d 	bl	800a8f8 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8009ede:	2100      	movs	r1, #0
 8009ee0:	6878      	ldr	r0, [r7, #4]
 8009ee2:	f000 fd09 	bl	800a8f8 <USBD_LL_StallEP>
}
 8009ee6:	bf00      	nop
 8009ee8:	3708      	adds	r7, #8
 8009eea:	46bd      	mov	sp, r7
 8009eec:	bd80      	pop	{r7, pc}

08009eee <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8009eee:	b580      	push	{r7, lr}
 8009ef0:	b086      	sub	sp, #24
 8009ef2:	af00      	add	r7, sp, #0
 8009ef4:	60f8      	str	r0, [r7, #12]
 8009ef6:	60b9      	str	r1, [r7, #8]
 8009ef8:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8009efa:	2300      	movs	r3, #0
 8009efc:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8009efe:	68fb      	ldr	r3, [r7, #12]
 8009f00:	2b00      	cmp	r3, #0
 8009f02:	d036      	beq.n	8009f72 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8009f04:	68fb      	ldr	r3, [r7, #12]
 8009f06:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8009f08:	6938      	ldr	r0, [r7, #16]
 8009f0a:	f000 f836 	bl	8009f7a <USBD_GetLen>
 8009f0e:	4603      	mov	r3, r0
 8009f10:	3301      	adds	r3, #1
 8009f12:	b29b      	uxth	r3, r3
 8009f14:	005b      	lsls	r3, r3, #1
 8009f16:	b29a      	uxth	r2, r3
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8009f1c:	7dfb      	ldrb	r3, [r7, #23]
 8009f1e:	68ba      	ldr	r2, [r7, #8]
 8009f20:	4413      	add	r3, r2
 8009f22:	687a      	ldr	r2, [r7, #4]
 8009f24:	7812      	ldrb	r2, [r2, #0]
 8009f26:	701a      	strb	r2, [r3, #0]
  idx++;
 8009f28:	7dfb      	ldrb	r3, [r7, #23]
 8009f2a:	3301      	adds	r3, #1
 8009f2c:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8009f2e:	7dfb      	ldrb	r3, [r7, #23]
 8009f30:	68ba      	ldr	r2, [r7, #8]
 8009f32:	4413      	add	r3, r2
 8009f34:	2203      	movs	r2, #3
 8009f36:	701a      	strb	r2, [r3, #0]
  idx++;
 8009f38:	7dfb      	ldrb	r3, [r7, #23]
 8009f3a:	3301      	adds	r3, #1
 8009f3c:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8009f3e:	e013      	b.n	8009f68 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8009f40:	7dfb      	ldrb	r3, [r7, #23]
 8009f42:	68ba      	ldr	r2, [r7, #8]
 8009f44:	4413      	add	r3, r2
 8009f46:	693a      	ldr	r2, [r7, #16]
 8009f48:	7812      	ldrb	r2, [r2, #0]
 8009f4a:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8009f4c:	693b      	ldr	r3, [r7, #16]
 8009f4e:	3301      	adds	r3, #1
 8009f50:	613b      	str	r3, [r7, #16]
    idx++;
 8009f52:	7dfb      	ldrb	r3, [r7, #23]
 8009f54:	3301      	adds	r3, #1
 8009f56:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8009f58:	7dfb      	ldrb	r3, [r7, #23]
 8009f5a:	68ba      	ldr	r2, [r7, #8]
 8009f5c:	4413      	add	r3, r2
 8009f5e:	2200      	movs	r2, #0
 8009f60:	701a      	strb	r2, [r3, #0]
    idx++;
 8009f62:	7dfb      	ldrb	r3, [r7, #23]
 8009f64:	3301      	adds	r3, #1
 8009f66:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8009f68:	693b      	ldr	r3, [r7, #16]
 8009f6a:	781b      	ldrb	r3, [r3, #0]
 8009f6c:	2b00      	cmp	r3, #0
 8009f6e:	d1e7      	bne.n	8009f40 <USBD_GetString+0x52>
 8009f70:	e000      	b.n	8009f74 <USBD_GetString+0x86>
    return;
 8009f72:	bf00      	nop
  }
}
 8009f74:	3718      	adds	r7, #24
 8009f76:	46bd      	mov	sp, r7
 8009f78:	bd80      	pop	{r7, pc}

08009f7a <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8009f7a:	b480      	push	{r7}
 8009f7c:	b085      	sub	sp, #20
 8009f7e:	af00      	add	r7, sp, #0
 8009f80:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8009f82:	2300      	movs	r3, #0
 8009f84:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8009f8a:	e005      	b.n	8009f98 <USBD_GetLen+0x1e>
  {
    len++;
 8009f8c:	7bfb      	ldrb	r3, [r7, #15]
 8009f8e:	3301      	adds	r3, #1
 8009f90:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8009f92:	68bb      	ldr	r3, [r7, #8]
 8009f94:	3301      	adds	r3, #1
 8009f96:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8009f98:	68bb      	ldr	r3, [r7, #8]
 8009f9a:	781b      	ldrb	r3, [r3, #0]
 8009f9c:	2b00      	cmp	r3, #0
 8009f9e:	d1f5      	bne.n	8009f8c <USBD_GetLen+0x12>
  }

  return len;
 8009fa0:	7bfb      	ldrb	r3, [r7, #15]
}
 8009fa2:	4618      	mov	r0, r3
 8009fa4:	3714      	adds	r7, #20
 8009fa6:	46bd      	mov	sp, r7
 8009fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fac:	4770      	bx	lr

08009fae <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8009fae:	b580      	push	{r7, lr}
 8009fb0:	b084      	sub	sp, #16
 8009fb2:	af00      	add	r7, sp, #0
 8009fb4:	60f8      	str	r0, [r7, #12]
 8009fb6:	60b9      	str	r1, [r7, #8]
 8009fb8:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8009fba:	68fb      	ldr	r3, [r7, #12]
 8009fbc:	2202      	movs	r2, #2
 8009fbe:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8009fc2:	68fb      	ldr	r3, [r7, #12]
 8009fc4:	687a      	ldr	r2, [r7, #4]
 8009fc6:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 8009fc8:	68fb      	ldr	r3, [r7, #12]
 8009fca:	687a      	ldr	r2, [r7, #4]
 8009fcc:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	68ba      	ldr	r2, [r7, #8]
 8009fd2:	2100      	movs	r1, #0
 8009fd4:	68f8      	ldr	r0, [r7, #12]
 8009fd6:	f000 fd18 	bl	800aa0a <USBD_LL_Transmit>

  return USBD_OK;
 8009fda:	2300      	movs	r3, #0
}
 8009fdc:	4618      	mov	r0, r3
 8009fde:	3710      	adds	r7, #16
 8009fe0:	46bd      	mov	sp, r7
 8009fe2:	bd80      	pop	{r7, pc}

08009fe4 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8009fe4:	b580      	push	{r7, lr}
 8009fe6:	b084      	sub	sp, #16
 8009fe8:	af00      	add	r7, sp, #0
 8009fea:	60f8      	str	r0, [r7, #12]
 8009fec:	60b9      	str	r1, [r7, #8]
 8009fee:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	68ba      	ldr	r2, [r7, #8]
 8009ff4:	2100      	movs	r1, #0
 8009ff6:	68f8      	ldr	r0, [r7, #12]
 8009ff8:	f000 fd07 	bl	800aa0a <USBD_LL_Transmit>

  return USBD_OK;
 8009ffc:	2300      	movs	r3, #0
}
 8009ffe:	4618      	mov	r0, r3
 800a000:	3710      	adds	r7, #16
 800a002:	46bd      	mov	sp, r7
 800a004:	bd80      	pop	{r7, pc}

0800a006 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800a006:	b580      	push	{r7, lr}
 800a008:	b084      	sub	sp, #16
 800a00a:	af00      	add	r7, sp, #0
 800a00c:	60f8      	str	r0, [r7, #12]
 800a00e:	60b9      	str	r1, [r7, #8]
 800a010:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800a012:	68fb      	ldr	r3, [r7, #12]
 800a014:	2203      	movs	r2, #3
 800a016:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800a01a:	68fb      	ldr	r3, [r7, #12]
 800a01c:	687a      	ldr	r2, [r7, #4]
 800a01e:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  pdev->ep_out[0].rem_length = len;
 800a022:	68fb      	ldr	r3, [r7, #12]
 800a024:	687a      	ldr	r2, [r7, #4]
 800a026:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	68ba      	ldr	r2, [r7, #8]
 800a02e:	2100      	movs	r1, #0
 800a030:	68f8      	ldr	r0, [r7, #12]
 800a032:	f000 fd0b 	bl	800aa4c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a036:	2300      	movs	r3, #0
}
 800a038:	4618      	mov	r0, r3
 800a03a:	3710      	adds	r7, #16
 800a03c:	46bd      	mov	sp, r7
 800a03e:	bd80      	pop	{r7, pc}

0800a040 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800a040:	b580      	push	{r7, lr}
 800a042:	b084      	sub	sp, #16
 800a044:	af00      	add	r7, sp, #0
 800a046:	60f8      	str	r0, [r7, #12]
 800a048:	60b9      	str	r1, [r7, #8]
 800a04a:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	68ba      	ldr	r2, [r7, #8]
 800a050:	2100      	movs	r1, #0
 800a052:	68f8      	ldr	r0, [r7, #12]
 800a054:	f000 fcfa 	bl	800aa4c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a058:	2300      	movs	r3, #0
}
 800a05a:	4618      	mov	r0, r3
 800a05c:	3710      	adds	r7, #16
 800a05e:	46bd      	mov	sp, r7
 800a060:	bd80      	pop	{r7, pc}

0800a062 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800a062:	b580      	push	{r7, lr}
 800a064:	b082      	sub	sp, #8
 800a066:	af00      	add	r7, sp, #0
 800a068:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	2204      	movs	r2, #4
 800a06e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800a072:	2300      	movs	r3, #0
 800a074:	2200      	movs	r2, #0
 800a076:	2100      	movs	r1, #0
 800a078:	6878      	ldr	r0, [r7, #4]
 800a07a:	f000 fcc6 	bl	800aa0a <USBD_LL_Transmit>

  return USBD_OK;
 800a07e:	2300      	movs	r3, #0
}
 800a080:	4618      	mov	r0, r3
 800a082:	3708      	adds	r7, #8
 800a084:	46bd      	mov	sp, r7
 800a086:	bd80      	pop	{r7, pc}

0800a088 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800a088:	b580      	push	{r7, lr}
 800a08a:	b082      	sub	sp, #8
 800a08c:	af00      	add	r7, sp, #0
 800a08e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	2205      	movs	r2, #5
 800a094:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a098:	2300      	movs	r3, #0
 800a09a:	2200      	movs	r2, #0
 800a09c:	2100      	movs	r1, #0
 800a09e:	6878      	ldr	r0, [r7, #4]
 800a0a0:	f000 fcd4 	bl	800aa4c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a0a4:	2300      	movs	r3, #0
}
 800a0a6:	4618      	mov	r0, r3
 800a0a8:	3708      	adds	r7, #8
 800a0aa:	46bd      	mov	sp, r7
 800a0ac:	bd80      	pop	{r7, pc}
	...

0800a0b0 <MX_PDM2PCM_Init>:
/* USER CODE BEGIN 1 */
/* USER CODE END 1 */

/* PDM2PCM init function */
void MX_PDM2PCM_Init(void)
{
 800a0b0:	b580      	push	{r7, lr}
 800a0b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 2 */
  /* USER CODE END 2 */

   /**
  */
  PDM1_filter_handler.bit_order = PDM_FILTER_BIT_ORDER_LSB;
 800a0b4:	4b10      	ldr	r3, [pc, #64]	; (800a0f8 <MX_PDM2PCM_Init+0x48>)
 800a0b6:	2200      	movs	r2, #0
 800a0b8:	801a      	strh	r2, [r3, #0]
  PDM1_filter_handler.endianness = PDM_FILTER_ENDIANNESS_BE;
 800a0ba:	4b0f      	ldr	r3, [pc, #60]	; (800a0f8 <MX_PDM2PCM_Init+0x48>)
 800a0bc:	2201      	movs	r2, #1
 800a0be:	805a      	strh	r2, [r3, #2]
  PDM1_filter_handler.high_pass_tap = 2104533974;
 800a0c0:	4b0d      	ldr	r3, [pc, #52]	; (800a0f8 <MX_PDM2PCM_Init+0x48>)
 800a0c2:	4a0e      	ldr	r2, [pc, #56]	; (800a0fc <MX_PDM2PCM_Init+0x4c>)
 800a0c4:	605a      	str	r2, [r3, #4]
  PDM1_filter_handler.in_ptr_channels = 1;
 800a0c6:	4b0c      	ldr	r3, [pc, #48]	; (800a0f8 <MX_PDM2PCM_Init+0x48>)
 800a0c8:	2201      	movs	r2, #1
 800a0ca:	811a      	strh	r2, [r3, #8]
  PDM1_filter_handler.out_ptr_channels = 1;
 800a0cc:	4b0a      	ldr	r3, [pc, #40]	; (800a0f8 <MX_PDM2PCM_Init+0x48>)
 800a0ce:	2201      	movs	r2, #1
 800a0d0:	815a      	strh	r2, [r3, #10]
  PDM_Filter_Init(&PDM1_filter_handler);
 800a0d2:	4809      	ldr	r0, [pc, #36]	; (800a0f8 <MX_PDM2PCM_Init+0x48>)
 800a0d4:	f002 fa6a 	bl	800c5ac <PDM_Filter_Init>

  PDM1_filter_config.decimation_factor = PDM_FILTER_DEC_FACTOR_64;
 800a0d8:	4b09      	ldr	r3, [pc, #36]	; (800a100 <MX_PDM2PCM_Init+0x50>)
 800a0da:	2202      	movs	r2, #2
 800a0dc:	801a      	strh	r2, [r3, #0]
  PDM1_filter_config.output_samples_number = 16;
 800a0de:	4b08      	ldr	r3, [pc, #32]	; (800a100 <MX_PDM2PCM_Init+0x50>)
 800a0e0:	2210      	movs	r2, #16
 800a0e2:	805a      	strh	r2, [r3, #2]
  PDM1_filter_config.mic_gain = 24;
 800a0e4:	4b06      	ldr	r3, [pc, #24]	; (800a100 <MX_PDM2PCM_Init+0x50>)
 800a0e6:	2218      	movs	r2, #24
 800a0e8:	809a      	strh	r2, [r3, #4]
  PDM_Filter_setConfig(&PDM1_filter_handler, &PDM1_filter_config);
 800a0ea:	4905      	ldr	r1, [pc, #20]	; (800a100 <MX_PDM2PCM_Init+0x50>)
 800a0ec:	4802      	ldr	r0, [pc, #8]	; (800a0f8 <MX_PDM2PCM_Init+0x48>)
 800a0ee:	f002 fae7 	bl	800c6c0 <PDM_Filter_setConfig>

  /* USER CODE BEGIN 3 */
  /* USER CODE END 3 */

}
 800a0f2:	bf00      	nop
 800a0f4:	bd80      	pop	{r7, pc}
 800a0f6:	bf00      	nop
 800a0f8:	20001044 	.word	0x20001044
 800a0fc:	7d70a3d6 	.word	0x7d70a3d6
 800a100:	2000103c 	.word	0x2000103c

0800a104 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800a104:	b580      	push	{r7, lr}
 800a106:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800a108:	2200      	movs	r2, #0
 800a10a:	4912      	ldr	r1, [pc, #72]	; (800a154 <MX_USB_DEVICE_Init+0x50>)
 800a10c:	4812      	ldr	r0, [pc, #72]	; (800a158 <MX_USB_DEVICE_Init+0x54>)
 800a10e:	f7fe fec9 	bl	8008ea4 <USBD_Init>
 800a112:	4603      	mov	r3, r0
 800a114:	2b00      	cmp	r3, #0
 800a116:	d001      	beq.n	800a11c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800a118:	f7f7 fb02 	bl	8001720 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800a11c:	490f      	ldr	r1, [pc, #60]	; (800a15c <MX_USB_DEVICE_Init+0x58>)
 800a11e:	480e      	ldr	r0, [pc, #56]	; (800a158 <MX_USB_DEVICE_Init+0x54>)
 800a120:	f7fe fef6 	bl	8008f10 <USBD_RegisterClass>
 800a124:	4603      	mov	r3, r0
 800a126:	2b00      	cmp	r3, #0
 800a128:	d001      	beq.n	800a12e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800a12a:	f7f7 faf9 	bl	8001720 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800a12e:	490c      	ldr	r1, [pc, #48]	; (800a160 <MX_USB_DEVICE_Init+0x5c>)
 800a130:	4809      	ldr	r0, [pc, #36]	; (800a158 <MX_USB_DEVICE_Init+0x54>)
 800a132:	f7fe fe1b 	bl	8008d6c <USBD_CDC_RegisterInterface>
 800a136:	4603      	mov	r3, r0
 800a138:	2b00      	cmp	r3, #0
 800a13a:	d001      	beq.n	800a140 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800a13c:	f7f7 faf0 	bl	8001720 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800a140:	4805      	ldr	r0, [pc, #20]	; (800a158 <MX_USB_DEVICE_Init+0x54>)
 800a142:	f7fe ff06 	bl	8008f52 <USBD_Start>
 800a146:	4603      	mov	r3, r0
 800a148:	2b00      	cmp	r3, #0
 800a14a:	d001      	beq.n	800a150 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800a14c:	f7f7 fae8 	bl	8001720 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800a150:	bf00      	nop
 800a152:	bd80      	pop	{r7, pc}
 800a154:	20000530 	.word	0x20000530
 800a158:	20001090 	.word	0x20001090
 800a15c:	20000418 	.word	0x20000418
 800a160:	2000051c 	.word	0x2000051c

0800a164 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800a164:	b580      	push	{r7, lr}
 800a166:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800a168:	2200      	movs	r2, #0
 800a16a:	4905      	ldr	r1, [pc, #20]	; (800a180 <CDC_Init_FS+0x1c>)
 800a16c:	4805      	ldr	r0, [pc, #20]	; (800a184 <CDC_Init_FS+0x20>)
 800a16e:	f7fe fe12 	bl	8008d96 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800a172:	4905      	ldr	r1, [pc, #20]	; (800a188 <CDC_Init_FS+0x24>)
 800a174:	4803      	ldr	r0, [pc, #12]	; (800a184 <CDC_Init_FS+0x20>)
 800a176:	f7fe fe27 	bl	8008dc8 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800a17a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800a17c:	4618      	mov	r0, r3
 800a17e:	bd80      	pop	{r7, pc}
 800a180:	20001b60 	.word	0x20001b60
 800a184:	20001090 	.word	0x20001090
 800a188:	20001360 	.word	0x20001360

0800a18c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800a18c:	b480      	push	{r7}
 800a18e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800a190:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800a192:	4618      	mov	r0, r3
 800a194:	46bd      	mov	sp, r7
 800a196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a19a:	4770      	bx	lr

0800a19c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800a19c:	b480      	push	{r7}
 800a19e:	b083      	sub	sp, #12
 800a1a0:	af00      	add	r7, sp, #0
 800a1a2:	4603      	mov	r3, r0
 800a1a4:	6039      	str	r1, [r7, #0]
 800a1a6:	71fb      	strb	r3, [r7, #7]
 800a1a8:	4613      	mov	r3, r2
 800a1aa:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800a1ac:	79fb      	ldrb	r3, [r7, #7]
 800a1ae:	2b23      	cmp	r3, #35	; 0x23
 800a1b0:	d84a      	bhi.n	800a248 <CDC_Control_FS+0xac>
 800a1b2:	a201      	add	r2, pc, #4	; (adr r2, 800a1b8 <CDC_Control_FS+0x1c>)
 800a1b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a1b8:	0800a249 	.word	0x0800a249
 800a1bc:	0800a249 	.word	0x0800a249
 800a1c0:	0800a249 	.word	0x0800a249
 800a1c4:	0800a249 	.word	0x0800a249
 800a1c8:	0800a249 	.word	0x0800a249
 800a1cc:	0800a249 	.word	0x0800a249
 800a1d0:	0800a249 	.word	0x0800a249
 800a1d4:	0800a249 	.word	0x0800a249
 800a1d8:	0800a249 	.word	0x0800a249
 800a1dc:	0800a249 	.word	0x0800a249
 800a1e0:	0800a249 	.word	0x0800a249
 800a1e4:	0800a249 	.word	0x0800a249
 800a1e8:	0800a249 	.word	0x0800a249
 800a1ec:	0800a249 	.word	0x0800a249
 800a1f0:	0800a249 	.word	0x0800a249
 800a1f4:	0800a249 	.word	0x0800a249
 800a1f8:	0800a249 	.word	0x0800a249
 800a1fc:	0800a249 	.word	0x0800a249
 800a200:	0800a249 	.word	0x0800a249
 800a204:	0800a249 	.word	0x0800a249
 800a208:	0800a249 	.word	0x0800a249
 800a20c:	0800a249 	.word	0x0800a249
 800a210:	0800a249 	.word	0x0800a249
 800a214:	0800a249 	.word	0x0800a249
 800a218:	0800a249 	.word	0x0800a249
 800a21c:	0800a249 	.word	0x0800a249
 800a220:	0800a249 	.word	0x0800a249
 800a224:	0800a249 	.word	0x0800a249
 800a228:	0800a249 	.word	0x0800a249
 800a22c:	0800a249 	.word	0x0800a249
 800a230:	0800a249 	.word	0x0800a249
 800a234:	0800a249 	.word	0x0800a249
 800a238:	0800a249 	.word	0x0800a249
 800a23c:	0800a249 	.word	0x0800a249
 800a240:	0800a249 	.word	0x0800a249
 800a244:	0800a249 	.word	0x0800a249
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800a248:	bf00      	nop
  }

  return (USBD_OK);
 800a24a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800a24c:	4618      	mov	r0, r3
 800a24e:	370c      	adds	r7, #12
 800a250:	46bd      	mov	sp, r7
 800a252:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a256:	4770      	bx	lr

0800a258 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800a258:	b580      	push	{r7, lr}
 800a25a:	b082      	sub	sp, #8
 800a25c:	af00      	add	r7, sp, #0
 800a25e:	6078      	str	r0, [r7, #4]
 800a260:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800a262:	6879      	ldr	r1, [r7, #4]
 800a264:	4805      	ldr	r0, [pc, #20]	; (800a27c <CDC_Receive_FS+0x24>)
 800a266:	f7fe fdaf 	bl	8008dc8 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800a26a:	4804      	ldr	r0, [pc, #16]	; (800a27c <CDC_Receive_FS+0x24>)
 800a26c:	f7fe fdf0 	bl	8008e50 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800a270:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800a272:	4618      	mov	r0, r3
 800a274:	3708      	adds	r7, #8
 800a276:	46bd      	mov	sp, r7
 800a278:	bd80      	pop	{r7, pc}
 800a27a:	bf00      	nop
 800a27c:	20001090 	.word	0x20001090

0800a280 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800a280:	b580      	push	{r7, lr}
 800a282:	b084      	sub	sp, #16
 800a284:	af00      	add	r7, sp, #0
 800a286:	6078      	str	r0, [r7, #4]
 800a288:	460b      	mov	r3, r1
 800a28a:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800a28c:	2300      	movs	r3, #0
 800a28e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800a290:	4b0d      	ldr	r3, [pc, #52]	; (800a2c8 <CDC_Transmit_FS+0x48>)
 800a292:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a296:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800a298:	68bb      	ldr	r3, [r7, #8]
 800a29a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800a29e:	2b00      	cmp	r3, #0
 800a2a0:	d001      	beq.n	800a2a6 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800a2a2:	2301      	movs	r3, #1
 800a2a4:	e00b      	b.n	800a2be <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800a2a6:	887b      	ldrh	r3, [r7, #2]
 800a2a8:	461a      	mov	r2, r3
 800a2aa:	6879      	ldr	r1, [r7, #4]
 800a2ac:	4806      	ldr	r0, [pc, #24]	; (800a2c8 <CDC_Transmit_FS+0x48>)
 800a2ae:	f7fe fd72 	bl	8008d96 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800a2b2:	4805      	ldr	r0, [pc, #20]	; (800a2c8 <CDC_Transmit_FS+0x48>)
 800a2b4:	f7fe fd9c 	bl	8008df0 <USBD_CDC_TransmitPacket>
 800a2b8:	4603      	mov	r3, r0
 800a2ba:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800a2bc:	7bfb      	ldrb	r3, [r7, #15]
}
 800a2be:	4618      	mov	r0, r3
 800a2c0:	3710      	adds	r7, #16
 800a2c2:	46bd      	mov	sp, r7
 800a2c4:	bd80      	pop	{r7, pc}
 800a2c6:	bf00      	nop
 800a2c8:	20001090 	.word	0x20001090

0800a2cc <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800a2cc:	b480      	push	{r7}
 800a2ce:	b087      	sub	sp, #28
 800a2d0:	af00      	add	r7, sp, #0
 800a2d2:	60f8      	str	r0, [r7, #12]
 800a2d4:	60b9      	str	r1, [r7, #8]
 800a2d6:	4613      	mov	r3, r2
 800a2d8:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800a2da:	2300      	movs	r3, #0
 800a2dc:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800a2de:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a2e2:	4618      	mov	r0, r3
 800a2e4:	371c      	adds	r7, #28
 800a2e6:	46bd      	mov	sp, r7
 800a2e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2ec:	4770      	bx	lr
	...

0800a2f0 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a2f0:	b480      	push	{r7}
 800a2f2:	b083      	sub	sp, #12
 800a2f4:	af00      	add	r7, sp, #0
 800a2f6:	4603      	mov	r3, r0
 800a2f8:	6039      	str	r1, [r7, #0]
 800a2fa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800a2fc:	683b      	ldr	r3, [r7, #0]
 800a2fe:	2212      	movs	r2, #18
 800a300:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800a302:	4b03      	ldr	r3, [pc, #12]	; (800a310 <USBD_FS_DeviceDescriptor+0x20>)
}
 800a304:	4618      	mov	r0, r3
 800a306:	370c      	adds	r7, #12
 800a308:	46bd      	mov	sp, r7
 800a30a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a30e:	4770      	bx	lr
 800a310:	2000054c 	.word	0x2000054c

0800a314 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a314:	b480      	push	{r7}
 800a316:	b083      	sub	sp, #12
 800a318:	af00      	add	r7, sp, #0
 800a31a:	4603      	mov	r3, r0
 800a31c:	6039      	str	r1, [r7, #0]
 800a31e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800a320:	683b      	ldr	r3, [r7, #0]
 800a322:	2204      	movs	r2, #4
 800a324:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800a326:	4b03      	ldr	r3, [pc, #12]	; (800a334 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800a328:	4618      	mov	r0, r3
 800a32a:	370c      	adds	r7, #12
 800a32c:	46bd      	mov	sp, r7
 800a32e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a332:	4770      	bx	lr
 800a334:	20000560 	.word	0x20000560

0800a338 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a338:	b580      	push	{r7, lr}
 800a33a:	b082      	sub	sp, #8
 800a33c:	af00      	add	r7, sp, #0
 800a33e:	4603      	mov	r3, r0
 800a340:	6039      	str	r1, [r7, #0]
 800a342:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a344:	79fb      	ldrb	r3, [r7, #7]
 800a346:	2b00      	cmp	r3, #0
 800a348:	d105      	bne.n	800a356 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a34a:	683a      	ldr	r2, [r7, #0]
 800a34c:	4907      	ldr	r1, [pc, #28]	; (800a36c <USBD_FS_ProductStrDescriptor+0x34>)
 800a34e:	4808      	ldr	r0, [pc, #32]	; (800a370 <USBD_FS_ProductStrDescriptor+0x38>)
 800a350:	f7ff fdcd 	bl	8009eee <USBD_GetString>
 800a354:	e004      	b.n	800a360 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a356:	683a      	ldr	r2, [r7, #0]
 800a358:	4904      	ldr	r1, [pc, #16]	; (800a36c <USBD_FS_ProductStrDescriptor+0x34>)
 800a35a:	4805      	ldr	r0, [pc, #20]	; (800a370 <USBD_FS_ProductStrDescriptor+0x38>)
 800a35c:	f7ff fdc7 	bl	8009eee <USBD_GetString>
  }
  return USBD_StrDesc;
 800a360:	4b02      	ldr	r3, [pc, #8]	; (800a36c <USBD_FS_ProductStrDescriptor+0x34>)
}
 800a362:	4618      	mov	r0, r3
 800a364:	3708      	adds	r7, #8
 800a366:	46bd      	mov	sp, r7
 800a368:	bd80      	pop	{r7, pc}
 800a36a:	bf00      	nop
 800a36c:	20002360 	.word	0x20002360
 800a370:	0800d81c 	.word	0x0800d81c

0800a374 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a374:	b580      	push	{r7, lr}
 800a376:	b082      	sub	sp, #8
 800a378:	af00      	add	r7, sp, #0
 800a37a:	4603      	mov	r3, r0
 800a37c:	6039      	str	r1, [r7, #0]
 800a37e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800a380:	683a      	ldr	r2, [r7, #0]
 800a382:	4904      	ldr	r1, [pc, #16]	; (800a394 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800a384:	4804      	ldr	r0, [pc, #16]	; (800a398 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800a386:	f7ff fdb2 	bl	8009eee <USBD_GetString>
  return USBD_StrDesc;
 800a38a:	4b02      	ldr	r3, [pc, #8]	; (800a394 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800a38c:	4618      	mov	r0, r3
 800a38e:	3708      	adds	r7, #8
 800a390:	46bd      	mov	sp, r7
 800a392:	bd80      	pop	{r7, pc}
 800a394:	20002360 	.word	0x20002360
 800a398:	0800d834 	.word	0x0800d834

0800a39c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a39c:	b580      	push	{r7, lr}
 800a39e:	b082      	sub	sp, #8
 800a3a0:	af00      	add	r7, sp, #0
 800a3a2:	4603      	mov	r3, r0
 800a3a4:	6039      	str	r1, [r7, #0]
 800a3a6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800a3a8:	683b      	ldr	r3, [r7, #0]
 800a3aa:	221a      	movs	r2, #26
 800a3ac:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800a3ae:	f000 f843 	bl	800a438 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800a3b2:	4b02      	ldr	r3, [pc, #8]	; (800a3bc <USBD_FS_SerialStrDescriptor+0x20>)
}
 800a3b4:	4618      	mov	r0, r3
 800a3b6:	3708      	adds	r7, #8
 800a3b8:	46bd      	mov	sp, r7
 800a3ba:	bd80      	pop	{r7, pc}
 800a3bc:	20000564 	.word	0x20000564

0800a3c0 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a3c0:	b580      	push	{r7, lr}
 800a3c2:	b082      	sub	sp, #8
 800a3c4:	af00      	add	r7, sp, #0
 800a3c6:	4603      	mov	r3, r0
 800a3c8:	6039      	str	r1, [r7, #0]
 800a3ca:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800a3cc:	79fb      	ldrb	r3, [r7, #7]
 800a3ce:	2b00      	cmp	r3, #0
 800a3d0:	d105      	bne.n	800a3de <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a3d2:	683a      	ldr	r2, [r7, #0]
 800a3d4:	4907      	ldr	r1, [pc, #28]	; (800a3f4 <USBD_FS_ConfigStrDescriptor+0x34>)
 800a3d6:	4808      	ldr	r0, [pc, #32]	; (800a3f8 <USBD_FS_ConfigStrDescriptor+0x38>)
 800a3d8:	f7ff fd89 	bl	8009eee <USBD_GetString>
 800a3dc:	e004      	b.n	800a3e8 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a3de:	683a      	ldr	r2, [r7, #0]
 800a3e0:	4904      	ldr	r1, [pc, #16]	; (800a3f4 <USBD_FS_ConfigStrDescriptor+0x34>)
 800a3e2:	4805      	ldr	r0, [pc, #20]	; (800a3f8 <USBD_FS_ConfigStrDescriptor+0x38>)
 800a3e4:	f7ff fd83 	bl	8009eee <USBD_GetString>
  }
  return USBD_StrDesc;
 800a3e8:	4b02      	ldr	r3, [pc, #8]	; (800a3f4 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800a3ea:	4618      	mov	r0, r3
 800a3ec:	3708      	adds	r7, #8
 800a3ee:	46bd      	mov	sp, r7
 800a3f0:	bd80      	pop	{r7, pc}
 800a3f2:	bf00      	nop
 800a3f4:	20002360 	.word	0x20002360
 800a3f8:	0800d848 	.word	0x0800d848

0800a3fc <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a3fc:	b580      	push	{r7, lr}
 800a3fe:	b082      	sub	sp, #8
 800a400:	af00      	add	r7, sp, #0
 800a402:	4603      	mov	r3, r0
 800a404:	6039      	str	r1, [r7, #0]
 800a406:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a408:	79fb      	ldrb	r3, [r7, #7]
 800a40a:	2b00      	cmp	r3, #0
 800a40c:	d105      	bne.n	800a41a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a40e:	683a      	ldr	r2, [r7, #0]
 800a410:	4907      	ldr	r1, [pc, #28]	; (800a430 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a412:	4808      	ldr	r0, [pc, #32]	; (800a434 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a414:	f7ff fd6b 	bl	8009eee <USBD_GetString>
 800a418:	e004      	b.n	800a424 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a41a:	683a      	ldr	r2, [r7, #0]
 800a41c:	4904      	ldr	r1, [pc, #16]	; (800a430 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a41e:	4805      	ldr	r0, [pc, #20]	; (800a434 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a420:	f7ff fd65 	bl	8009eee <USBD_GetString>
  }
  return USBD_StrDesc;
 800a424:	4b02      	ldr	r3, [pc, #8]	; (800a430 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800a426:	4618      	mov	r0, r3
 800a428:	3708      	adds	r7, #8
 800a42a:	46bd      	mov	sp, r7
 800a42c:	bd80      	pop	{r7, pc}
 800a42e:	bf00      	nop
 800a430:	20002360 	.word	0x20002360
 800a434:	0800d854 	.word	0x0800d854

0800a438 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800a438:	b580      	push	{r7, lr}
 800a43a:	b084      	sub	sp, #16
 800a43c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800a43e:	4b0f      	ldr	r3, [pc, #60]	; (800a47c <Get_SerialNum+0x44>)
 800a440:	681b      	ldr	r3, [r3, #0]
 800a442:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800a444:	4b0e      	ldr	r3, [pc, #56]	; (800a480 <Get_SerialNum+0x48>)
 800a446:	681b      	ldr	r3, [r3, #0]
 800a448:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800a44a:	4b0e      	ldr	r3, [pc, #56]	; (800a484 <Get_SerialNum+0x4c>)
 800a44c:	681b      	ldr	r3, [r3, #0]
 800a44e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800a450:	68fa      	ldr	r2, [r7, #12]
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	4413      	add	r3, r2
 800a456:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800a458:	68fb      	ldr	r3, [r7, #12]
 800a45a:	2b00      	cmp	r3, #0
 800a45c:	d009      	beq.n	800a472 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800a45e:	2208      	movs	r2, #8
 800a460:	4909      	ldr	r1, [pc, #36]	; (800a488 <Get_SerialNum+0x50>)
 800a462:	68f8      	ldr	r0, [r7, #12]
 800a464:	f000 f814 	bl	800a490 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800a468:	2204      	movs	r2, #4
 800a46a:	4908      	ldr	r1, [pc, #32]	; (800a48c <Get_SerialNum+0x54>)
 800a46c:	68b8      	ldr	r0, [r7, #8]
 800a46e:	f000 f80f 	bl	800a490 <IntToUnicode>
  }
}
 800a472:	bf00      	nop
 800a474:	3710      	adds	r7, #16
 800a476:	46bd      	mov	sp, r7
 800a478:	bd80      	pop	{r7, pc}
 800a47a:	bf00      	nop
 800a47c:	1fff7a10 	.word	0x1fff7a10
 800a480:	1fff7a14 	.word	0x1fff7a14
 800a484:	1fff7a18 	.word	0x1fff7a18
 800a488:	20000566 	.word	0x20000566
 800a48c:	20000576 	.word	0x20000576

0800a490 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800a490:	b480      	push	{r7}
 800a492:	b087      	sub	sp, #28
 800a494:	af00      	add	r7, sp, #0
 800a496:	60f8      	str	r0, [r7, #12]
 800a498:	60b9      	str	r1, [r7, #8]
 800a49a:	4613      	mov	r3, r2
 800a49c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800a49e:	2300      	movs	r3, #0
 800a4a0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800a4a2:	2300      	movs	r3, #0
 800a4a4:	75fb      	strb	r3, [r7, #23]
 800a4a6:	e027      	b.n	800a4f8 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800a4a8:	68fb      	ldr	r3, [r7, #12]
 800a4aa:	0f1b      	lsrs	r3, r3, #28
 800a4ac:	2b09      	cmp	r3, #9
 800a4ae:	d80b      	bhi.n	800a4c8 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800a4b0:	68fb      	ldr	r3, [r7, #12]
 800a4b2:	0f1b      	lsrs	r3, r3, #28
 800a4b4:	b2da      	uxtb	r2, r3
 800a4b6:	7dfb      	ldrb	r3, [r7, #23]
 800a4b8:	005b      	lsls	r3, r3, #1
 800a4ba:	4619      	mov	r1, r3
 800a4bc:	68bb      	ldr	r3, [r7, #8]
 800a4be:	440b      	add	r3, r1
 800a4c0:	3230      	adds	r2, #48	; 0x30
 800a4c2:	b2d2      	uxtb	r2, r2
 800a4c4:	701a      	strb	r2, [r3, #0]
 800a4c6:	e00a      	b.n	800a4de <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800a4c8:	68fb      	ldr	r3, [r7, #12]
 800a4ca:	0f1b      	lsrs	r3, r3, #28
 800a4cc:	b2da      	uxtb	r2, r3
 800a4ce:	7dfb      	ldrb	r3, [r7, #23]
 800a4d0:	005b      	lsls	r3, r3, #1
 800a4d2:	4619      	mov	r1, r3
 800a4d4:	68bb      	ldr	r3, [r7, #8]
 800a4d6:	440b      	add	r3, r1
 800a4d8:	3237      	adds	r2, #55	; 0x37
 800a4da:	b2d2      	uxtb	r2, r2
 800a4dc:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800a4de:	68fb      	ldr	r3, [r7, #12]
 800a4e0:	011b      	lsls	r3, r3, #4
 800a4e2:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800a4e4:	7dfb      	ldrb	r3, [r7, #23]
 800a4e6:	005b      	lsls	r3, r3, #1
 800a4e8:	3301      	adds	r3, #1
 800a4ea:	68ba      	ldr	r2, [r7, #8]
 800a4ec:	4413      	add	r3, r2
 800a4ee:	2200      	movs	r2, #0
 800a4f0:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800a4f2:	7dfb      	ldrb	r3, [r7, #23]
 800a4f4:	3301      	adds	r3, #1
 800a4f6:	75fb      	strb	r3, [r7, #23]
 800a4f8:	7dfa      	ldrb	r2, [r7, #23]
 800a4fa:	79fb      	ldrb	r3, [r7, #7]
 800a4fc:	429a      	cmp	r2, r3
 800a4fe:	d3d3      	bcc.n	800a4a8 <IntToUnicode+0x18>
  }
}
 800a500:	bf00      	nop
 800a502:	371c      	adds	r7, #28
 800a504:	46bd      	mov	sp, r7
 800a506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a50a:	4770      	bx	lr

0800a50c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800a50c:	b580      	push	{r7, lr}
 800a50e:	b08a      	sub	sp, #40	; 0x28
 800a510:	af00      	add	r7, sp, #0
 800a512:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a514:	f107 0314 	add.w	r3, r7, #20
 800a518:	2200      	movs	r2, #0
 800a51a:	601a      	str	r2, [r3, #0]
 800a51c:	605a      	str	r2, [r3, #4]
 800a51e:	609a      	str	r2, [r3, #8]
 800a520:	60da      	str	r2, [r3, #12]
 800a522:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	681b      	ldr	r3, [r3, #0]
 800a528:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a52c:	d147      	bne.n	800a5be <HAL_PCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a52e:	2300      	movs	r3, #0
 800a530:	613b      	str	r3, [r7, #16]
 800a532:	4b25      	ldr	r3, [pc, #148]	; (800a5c8 <HAL_PCD_MspInit+0xbc>)
 800a534:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a536:	4a24      	ldr	r2, [pc, #144]	; (800a5c8 <HAL_PCD_MspInit+0xbc>)
 800a538:	f043 0301 	orr.w	r3, r3, #1
 800a53c:	6313      	str	r3, [r2, #48]	; 0x30
 800a53e:	4b22      	ldr	r3, [pc, #136]	; (800a5c8 <HAL_PCD_MspInit+0xbc>)
 800a540:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a542:	f003 0301 	and.w	r3, r3, #1
 800a546:	613b      	str	r3, [r7, #16]
 800a548:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800a54a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a54e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800a550:	2300      	movs	r3, #0
 800a552:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a554:	2300      	movs	r3, #0
 800a556:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800a558:	f107 0314 	add.w	r3, r7, #20
 800a55c:	4619      	mov	r1, r3
 800a55e:	481b      	ldr	r0, [pc, #108]	; (800a5cc <HAL_PCD_MspInit+0xc0>)
 800a560:	f7f8 f94a 	bl	80027f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800a564:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800a568:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a56a:	2302      	movs	r3, #2
 800a56c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a56e:	2300      	movs	r3, #0
 800a570:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a572:	2303      	movs	r3, #3
 800a574:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800a576:	230a      	movs	r3, #10
 800a578:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a57a:	f107 0314 	add.w	r3, r7, #20
 800a57e:	4619      	mov	r1, r3
 800a580:	4812      	ldr	r0, [pc, #72]	; (800a5cc <HAL_PCD_MspInit+0xc0>)
 800a582:	f7f8 f939 	bl	80027f8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800a586:	4b10      	ldr	r3, [pc, #64]	; (800a5c8 <HAL_PCD_MspInit+0xbc>)
 800a588:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a58a:	4a0f      	ldr	r2, [pc, #60]	; (800a5c8 <HAL_PCD_MspInit+0xbc>)
 800a58c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a590:	6353      	str	r3, [r2, #52]	; 0x34
 800a592:	2300      	movs	r3, #0
 800a594:	60fb      	str	r3, [r7, #12]
 800a596:	4b0c      	ldr	r3, [pc, #48]	; (800a5c8 <HAL_PCD_MspInit+0xbc>)
 800a598:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a59a:	4a0b      	ldr	r2, [pc, #44]	; (800a5c8 <HAL_PCD_MspInit+0xbc>)
 800a59c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800a5a0:	6453      	str	r3, [r2, #68]	; 0x44
 800a5a2:	4b09      	ldr	r3, [pc, #36]	; (800a5c8 <HAL_PCD_MspInit+0xbc>)
 800a5a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a5a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a5aa:	60fb      	str	r3, [r7, #12]
 800a5ac:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800a5ae:	2200      	movs	r2, #0
 800a5b0:	2100      	movs	r1, #0
 800a5b2:	2043      	movs	r0, #67	; 0x43
 800a5b4:	f7f7 fbbc 	bl	8001d30 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800a5b8:	2043      	movs	r0, #67	; 0x43
 800a5ba:	f7f7 fbe5 	bl	8001d88 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800a5be:	bf00      	nop
 800a5c0:	3728      	adds	r7, #40	; 0x28
 800a5c2:	46bd      	mov	sp, r7
 800a5c4:	bd80      	pop	{r7, pc}
 800a5c6:	bf00      	nop
 800a5c8:	40023800 	.word	0x40023800
 800a5cc:	40020000 	.word	0x40020000

0800a5d0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a5d0:	b580      	push	{r7, lr}
 800a5d2:	b082      	sub	sp, #8
 800a5d4:	af00      	add	r7, sp, #0
 800a5d6:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800a5e4:	4619      	mov	r1, r3
 800a5e6:	4610      	mov	r0, r2
 800a5e8:	f7fe fcfe 	bl	8008fe8 <USBD_LL_SetupStage>
}
 800a5ec:	bf00      	nop
 800a5ee:	3708      	adds	r7, #8
 800a5f0:	46bd      	mov	sp, r7
 800a5f2:	bd80      	pop	{r7, pc}

0800a5f4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a5f4:	b580      	push	{r7, lr}
 800a5f6:	b082      	sub	sp, #8
 800a5f8:	af00      	add	r7, sp, #0
 800a5fa:	6078      	str	r0, [r7, #4]
 800a5fc:	460b      	mov	r3, r1
 800a5fe:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800a606:	78fa      	ldrb	r2, [r7, #3]
 800a608:	6879      	ldr	r1, [r7, #4]
 800a60a:	4613      	mov	r3, r2
 800a60c:	00db      	lsls	r3, r3, #3
 800a60e:	1a9b      	subs	r3, r3, r2
 800a610:	009b      	lsls	r3, r3, #2
 800a612:	440b      	add	r3, r1
 800a614:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800a618:	681a      	ldr	r2, [r3, #0]
 800a61a:	78fb      	ldrb	r3, [r7, #3]
 800a61c:	4619      	mov	r1, r3
 800a61e:	f7fe fd36 	bl	800908e <USBD_LL_DataOutStage>
}
 800a622:	bf00      	nop
 800a624:	3708      	adds	r7, #8
 800a626:	46bd      	mov	sp, r7
 800a628:	bd80      	pop	{r7, pc}

0800a62a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a62a:	b580      	push	{r7, lr}
 800a62c:	b082      	sub	sp, #8
 800a62e:	af00      	add	r7, sp, #0
 800a630:	6078      	str	r0, [r7, #4]
 800a632:	460b      	mov	r3, r1
 800a634:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800a63c:	78fa      	ldrb	r2, [r7, #3]
 800a63e:	6879      	ldr	r1, [r7, #4]
 800a640:	4613      	mov	r3, r2
 800a642:	00db      	lsls	r3, r3, #3
 800a644:	1a9b      	subs	r3, r3, r2
 800a646:	009b      	lsls	r3, r3, #2
 800a648:	440b      	add	r3, r1
 800a64a:	3348      	adds	r3, #72	; 0x48
 800a64c:	681a      	ldr	r2, [r3, #0]
 800a64e:	78fb      	ldrb	r3, [r7, #3]
 800a650:	4619      	mov	r1, r3
 800a652:	f7fe fd7f 	bl	8009154 <USBD_LL_DataInStage>
}
 800a656:	bf00      	nop
 800a658:	3708      	adds	r7, #8
 800a65a:	46bd      	mov	sp, r7
 800a65c:	bd80      	pop	{r7, pc}

0800a65e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a65e:	b580      	push	{r7, lr}
 800a660:	b082      	sub	sp, #8
 800a662:	af00      	add	r7, sp, #0
 800a664:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800a66c:	4618      	mov	r0, r3
 800a66e:	f7fe fe83 	bl	8009378 <USBD_LL_SOF>
}
 800a672:	bf00      	nop
 800a674:	3708      	adds	r7, #8
 800a676:	46bd      	mov	sp, r7
 800a678:	bd80      	pop	{r7, pc}

0800a67a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a67a:	b580      	push	{r7, lr}
 800a67c:	b084      	sub	sp, #16
 800a67e:	af00      	add	r7, sp, #0
 800a680:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800a682:	2301      	movs	r3, #1
 800a684:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	68db      	ldr	r3, [r3, #12]
 800a68a:	2b02      	cmp	r3, #2
 800a68c:	d001      	beq.n	800a692 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800a68e:	f7f7 f847 	bl	8001720 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800a698:	7bfa      	ldrb	r2, [r7, #15]
 800a69a:	4611      	mov	r1, r2
 800a69c:	4618      	mov	r0, r3
 800a69e:	f7fe fe30 	bl	8009302 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800a6a8:	4618      	mov	r0, r3
 800a6aa:	f7fe fde9 	bl	8009280 <USBD_LL_Reset>
}
 800a6ae:	bf00      	nop
 800a6b0:	3710      	adds	r7, #16
 800a6b2:	46bd      	mov	sp, r7
 800a6b4:	bd80      	pop	{r7, pc}
	...

0800a6b8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a6b8:	b580      	push	{r7, lr}
 800a6ba:	b082      	sub	sp, #8
 800a6bc:	af00      	add	r7, sp, #0
 800a6be:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800a6c6:	4618      	mov	r0, r3
 800a6c8:	f7fe fe2b 	bl	8009322 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	681b      	ldr	r3, [r3, #0]
 800a6d0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a6d4:	681b      	ldr	r3, [r3, #0]
 800a6d6:	687a      	ldr	r2, [r7, #4]
 800a6d8:	6812      	ldr	r2, [r2, #0]
 800a6da:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800a6de:	f043 0301 	orr.w	r3, r3, #1
 800a6e2:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	6a1b      	ldr	r3, [r3, #32]
 800a6e8:	2b00      	cmp	r3, #0
 800a6ea:	d005      	beq.n	800a6f8 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a6ec:	4b04      	ldr	r3, [pc, #16]	; (800a700 <HAL_PCD_SuspendCallback+0x48>)
 800a6ee:	691b      	ldr	r3, [r3, #16]
 800a6f0:	4a03      	ldr	r2, [pc, #12]	; (800a700 <HAL_PCD_SuspendCallback+0x48>)
 800a6f2:	f043 0306 	orr.w	r3, r3, #6
 800a6f6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800a6f8:	bf00      	nop
 800a6fa:	3708      	adds	r7, #8
 800a6fc:	46bd      	mov	sp, r7
 800a6fe:	bd80      	pop	{r7, pc}
 800a700:	e000ed00 	.word	0xe000ed00

0800a704 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a704:	b580      	push	{r7, lr}
 800a706:	b082      	sub	sp, #8
 800a708:	af00      	add	r7, sp, #0
 800a70a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800a712:	4618      	mov	r0, r3
 800a714:	f7fe fe1a 	bl	800934c <USBD_LL_Resume>
}
 800a718:	bf00      	nop
 800a71a:	3708      	adds	r7, #8
 800a71c:	46bd      	mov	sp, r7
 800a71e:	bd80      	pop	{r7, pc}

0800a720 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a720:	b580      	push	{r7, lr}
 800a722:	b082      	sub	sp, #8
 800a724:	af00      	add	r7, sp, #0
 800a726:	6078      	str	r0, [r7, #4]
 800a728:	460b      	mov	r3, r1
 800a72a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800a732:	78fa      	ldrb	r2, [r7, #3]
 800a734:	4611      	mov	r1, r2
 800a736:	4618      	mov	r0, r3
 800a738:	f7fe fe45 	bl	80093c6 <USBD_LL_IsoOUTIncomplete>
}
 800a73c:	bf00      	nop
 800a73e:	3708      	adds	r7, #8
 800a740:	46bd      	mov	sp, r7
 800a742:	bd80      	pop	{r7, pc}

0800a744 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a744:	b580      	push	{r7, lr}
 800a746:	b082      	sub	sp, #8
 800a748:	af00      	add	r7, sp, #0
 800a74a:	6078      	str	r0, [r7, #4]
 800a74c:	460b      	mov	r3, r1
 800a74e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800a756:	78fa      	ldrb	r2, [r7, #3]
 800a758:	4611      	mov	r1, r2
 800a75a:	4618      	mov	r0, r3
 800a75c:	f7fe fe26 	bl	80093ac <USBD_LL_IsoINIncomplete>
}
 800a760:	bf00      	nop
 800a762:	3708      	adds	r7, #8
 800a764:	46bd      	mov	sp, r7
 800a766:	bd80      	pop	{r7, pc}

0800a768 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a768:	b580      	push	{r7, lr}
 800a76a:	b082      	sub	sp, #8
 800a76c:	af00      	add	r7, sp, #0
 800a76e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800a776:	4618      	mov	r0, r3
 800a778:	f7fe fe32 	bl	80093e0 <USBD_LL_DevConnected>
}
 800a77c:	bf00      	nop
 800a77e:	3708      	adds	r7, #8
 800a780:	46bd      	mov	sp, r7
 800a782:	bd80      	pop	{r7, pc}

0800a784 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a784:	b580      	push	{r7, lr}
 800a786:	b082      	sub	sp, #8
 800a788:	af00      	add	r7, sp, #0
 800a78a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800a792:	4618      	mov	r0, r3
 800a794:	f7fe fe2f 	bl	80093f6 <USBD_LL_DevDisconnected>
}
 800a798:	bf00      	nop
 800a79a:	3708      	adds	r7, #8
 800a79c:	46bd      	mov	sp, r7
 800a79e:	bd80      	pop	{r7, pc}

0800a7a0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800a7a0:	b580      	push	{r7, lr}
 800a7a2:	b082      	sub	sp, #8
 800a7a4:	af00      	add	r7, sp, #0
 800a7a6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	781b      	ldrb	r3, [r3, #0]
 800a7ac:	2b00      	cmp	r3, #0
 800a7ae:	d13c      	bne.n	800a82a <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800a7b0:	4a20      	ldr	r2, [pc, #128]	; (800a834 <USBD_LL_Init+0x94>)
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	4a1e      	ldr	r2, [pc, #120]	; (800a834 <USBD_LL_Init+0x94>)
 800a7bc:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800a7c0:	4b1c      	ldr	r3, [pc, #112]	; (800a834 <USBD_LL_Init+0x94>)
 800a7c2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800a7c6:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800a7c8:	4b1a      	ldr	r3, [pc, #104]	; (800a834 <USBD_LL_Init+0x94>)
 800a7ca:	2204      	movs	r2, #4
 800a7cc:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800a7ce:	4b19      	ldr	r3, [pc, #100]	; (800a834 <USBD_LL_Init+0x94>)
 800a7d0:	2202      	movs	r2, #2
 800a7d2:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800a7d4:	4b17      	ldr	r3, [pc, #92]	; (800a834 <USBD_LL_Init+0x94>)
 800a7d6:	2200      	movs	r2, #0
 800a7d8:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800a7da:	4b16      	ldr	r3, [pc, #88]	; (800a834 <USBD_LL_Init+0x94>)
 800a7dc:	2202      	movs	r2, #2
 800a7de:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800a7e0:	4b14      	ldr	r3, [pc, #80]	; (800a834 <USBD_LL_Init+0x94>)
 800a7e2:	2200      	movs	r2, #0
 800a7e4:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800a7e6:	4b13      	ldr	r3, [pc, #76]	; (800a834 <USBD_LL_Init+0x94>)
 800a7e8:	2200      	movs	r2, #0
 800a7ea:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800a7ec:	4b11      	ldr	r3, [pc, #68]	; (800a834 <USBD_LL_Init+0x94>)
 800a7ee:	2200      	movs	r2, #0
 800a7f0:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800a7f2:	4b10      	ldr	r3, [pc, #64]	; (800a834 <USBD_LL_Init+0x94>)
 800a7f4:	2201      	movs	r2, #1
 800a7f6:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800a7f8:	4b0e      	ldr	r3, [pc, #56]	; (800a834 <USBD_LL_Init+0x94>)
 800a7fa:	2200      	movs	r2, #0
 800a7fc:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800a7fe:	480d      	ldr	r0, [pc, #52]	; (800a834 <USBD_LL_Init+0x94>)
 800a800:	f7fa fa50 	bl	8004ca4 <HAL_PCD_Init>
 800a804:	4603      	mov	r3, r0
 800a806:	2b00      	cmp	r3, #0
 800a808:	d001      	beq.n	800a80e <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800a80a:	f7f6 ff89 	bl	8001720 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800a80e:	2180      	movs	r1, #128	; 0x80
 800a810:	4808      	ldr	r0, [pc, #32]	; (800a834 <USBD_LL_Init+0x94>)
 800a812:	f7fb fbb8 	bl	8005f86 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800a816:	2240      	movs	r2, #64	; 0x40
 800a818:	2100      	movs	r1, #0
 800a81a:	4806      	ldr	r0, [pc, #24]	; (800a834 <USBD_LL_Init+0x94>)
 800a81c:	f7fb fb6c 	bl	8005ef8 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800a820:	2280      	movs	r2, #128	; 0x80
 800a822:	2101      	movs	r1, #1
 800a824:	4803      	ldr	r0, [pc, #12]	; (800a834 <USBD_LL_Init+0x94>)
 800a826:	f7fb fb67 	bl	8005ef8 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800a82a:	2300      	movs	r3, #0
}
 800a82c:	4618      	mov	r0, r3
 800a82e:	3708      	adds	r7, #8
 800a830:	46bd      	mov	sp, r7
 800a832:	bd80      	pop	{r7, pc}
 800a834:	20002560 	.word	0x20002560

0800a838 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800a838:	b580      	push	{r7, lr}
 800a83a:	b084      	sub	sp, #16
 800a83c:	af00      	add	r7, sp, #0
 800a83e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a840:	2300      	movs	r3, #0
 800a842:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a844:	2300      	movs	r3, #0
 800a846:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a84e:	4618      	mov	r0, r3
 800a850:	f7fa fb50 	bl	8004ef4 <HAL_PCD_Start>
 800a854:	4603      	mov	r3, r0
 800a856:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a858:	7bfb      	ldrb	r3, [r7, #15]
 800a85a:	4618      	mov	r0, r3
 800a85c:	f000 f92a 	bl	800aab4 <USBD_Get_USB_Status>
 800a860:	4603      	mov	r3, r0
 800a862:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a864:	7bbb      	ldrb	r3, [r7, #14]
}
 800a866:	4618      	mov	r0, r3
 800a868:	3710      	adds	r7, #16
 800a86a:	46bd      	mov	sp, r7
 800a86c:	bd80      	pop	{r7, pc}

0800a86e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800a86e:	b580      	push	{r7, lr}
 800a870:	b084      	sub	sp, #16
 800a872:	af00      	add	r7, sp, #0
 800a874:	6078      	str	r0, [r7, #4]
 800a876:	4608      	mov	r0, r1
 800a878:	4611      	mov	r1, r2
 800a87a:	461a      	mov	r2, r3
 800a87c:	4603      	mov	r3, r0
 800a87e:	70fb      	strb	r3, [r7, #3]
 800a880:	460b      	mov	r3, r1
 800a882:	70bb      	strb	r3, [r7, #2]
 800a884:	4613      	mov	r3, r2
 800a886:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a888:	2300      	movs	r3, #0
 800a88a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a88c:	2300      	movs	r3, #0
 800a88e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800a896:	78bb      	ldrb	r3, [r7, #2]
 800a898:	883a      	ldrh	r2, [r7, #0]
 800a89a:	78f9      	ldrb	r1, [r7, #3]
 800a89c:	f7fa ff34 	bl	8005708 <HAL_PCD_EP_Open>
 800a8a0:	4603      	mov	r3, r0
 800a8a2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a8a4:	7bfb      	ldrb	r3, [r7, #15]
 800a8a6:	4618      	mov	r0, r3
 800a8a8:	f000 f904 	bl	800aab4 <USBD_Get_USB_Status>
 800a8ac:	4603      	mov	r3, r0
 800a8ae:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a8b0:	7bbb      	ldrb	r3, [r7, #14]
}
 800a8b2:	4618      	mov	r0, r3
 800a8b4:	3710      	adds	r7, #16
 800a8b6:	46bd      	mov	sp, r7
 800a8b8:	bd80      	pop	{r7, pc}

0800a8ba <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a8ba:	b580      	push	{r7, lr}
 800a8bc:	b084      	sub	sp, #16
 800a8be:	af00      	add	r7, sp, #0
 800a8c0:	6078      	str	r0, [r7, #4]
 800a8c2:	460b      	mov	r3, r1
 800a8c4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a8c6:	2300      	movs	r3, #0
 800a8c8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a8ca:	2300      	movs	r3, #0
 800a8cc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a8d4:	78fa      	ldrb	r2, [r7, #3]
 800a8d6:	4611      	mov	r1, r2
 800a8d8:	4618      	mov	r0, r3
 800a8da:	f7fa ff7d 	bl	80057d8 <HAL_PCD_EP_Close>
 800a8de:	4603      	mov	r3, r0
 800a8e0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a8e2:	7bfb      	ldrb	r3, [r7, #15]
 800a8e4:	4618      	mov	r0, r3
 800a8e6:	f000 f8e5 	bl	800aab4 <USBD_Get_USB_Status>
 800a8ea:	4603      	mov	r3, r0
 800a8ec:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a8ee:	7bbb      	ldrb	r3, [r7, #14]
}
 800a8f0:	4618      	mov	r0, r3
 800a8f2:	3710      	adds	r7, #16
 800a8f4:	46bd      	mov	sp, r7
 800a8f6:	bd80      	pop	{r7, pc}

0800a8f8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a8f8:	b580      	push	{r7, lr}
 800a8fa:	b084      	sub	sp, #16
 800a8fc:	af00      	add	r7, sp, #0
 800a8fe:	6078      	str	r0, [r7, #4]
 800a900:	460b      	mov	r3, r1
 800a902:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a904:	2300      	movs	r3, #0
 800a906:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a908:	2300      	movs	r3, #0
 800a90a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a912:	78fa      	ldrb	r2, [r7, #3]
 800a914:	4611      	mov	r1, r2
 800a916:	4618      	mov	r0, r3
 800a918:	f7fb f855 	bl	80059c6 <HAL_PCD_EP_SetStall>
 800a91c:	4603      	mov	r3, r0
 800a91e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a920:	7bfb      	ldrb	r3, [r7, #15]
 800a922:	4618      	mov	r0, r3
 800a924:	f000 f8c6 	bl	800aab4 <USBD_Get_USB_Status>
 800a928:	4603      	mov	r3, r0
 800a92a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a92c:	7bbb      	ldrb	r3, [r7, #14]
}
 800a92e:	4618      	mov	r0, r3
 800a930:	3710      	adds	r7, #16
 800a932:	46bd      	mov	sp, r7
 800a934:	bd80      	pop	{r7, pc}

0800a936 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a936:	b580      	push	{r7, lr}
 800a938:	b084      	sub	sp, #16
 800a93a:	af00      	add	r7, sp, #0
 800a93c:	6078      	str	r0, [r7, #4]
 800a93e:	460b      	mov	r3, r1
 800a940:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a942:	2300      	movs	r3, #0
 800a944:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a946:	2300      	movs	r3, #0
 800a948:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a950:	78fa      	ldrb	r2, [r7, #3]
 800a952:	4611      	mov	r1, r2
 800a954:	4618      	mov	r0, r3
 800a956:	f7fb f89a 	bl	8005a8e <HAL_PCD_EP_ClrStall>
 800a95a:	4603      	mov	r3, r0
 800a95c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a95e:	7bfb      	ldrb	r3, [r7, #15]
 800a960:	4618      	mov	r0, r3
 800a962:	f000 f8a7 	bl	800aab4 <USBD_Get_USB_Status>
 800a966:	4603      	mov	r3, r0
 800a968:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a96a:	7bbb      	ldrb	r3, [r7, #14]
}
 800a96c:	4618      	mov	r0, r3
 800a96e:	3710      	adds	r7, #16
 800a970:	46bd      	mov	sp, r7
 800a972:	bd80      	pop	{r7, pc}

0800a974 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a974:	b480      	push	{r7}
 800a976:	b085      	sub	sp, #20
 800a978:	af00      	add	r7, sp, #0
 800a97a:	6078      	str	r0, [r7, #4]
 800a97c:	460b      	mov	r3, r1
 800a97e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a986:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800a988:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a98c:	2b00      	cmp	r3, #0
 800a98e:	da0b      	bge.n	800a9a8 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800a990:	78fb      	ldrb	r3, [r7, #3]
 800a992:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a996:	68f9      	ldr	r1, [r7, #12]
 800a998:	4613      	mov	r3, r2
 800a99a:	00db      	lsls	r3, r3, #3
 800a99c:	1a9b      	subs	r3, r3, r2
 800a99e:	009b      	lsls	r3, r3, #2
 800a9a0:	440b      	add	r3, r1
 800a9a2:	333e      	adds	r3, #62	; 0x3e
 800a9a4:	781b      	ldrb	r3, [r3, #0]
 800a9a6:	e00b      	b.n	800a9c0 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800a9a8:	78fb      	ldrb	r3, [r7, #3]
 800a9aa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a9ae:	68f9      	ldr	r1, [r7, #12]
 800a9b0:	4613      	mov	r3, r2
 800a9b2:	00db      	lsls	r3, r3, #3
 800a9b4:	1a9b      	subs	r3, r3, r2
 800a9b6:	009b      	lsls	r3, r3, #2
 800a9b8:	440b      	add	r3, r1
 800a9ba:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800a9be:	781b      	ldrb	r3, [r3, #0]
  }
}
 800a9c0:	4618      	mov	r0, r3
 800a9c2:	3714      	adds	r7, #20
 800a9c4:	46bd      	mov	sp, r7
 800a9c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9ca:	4770      	bx	lr

0800a9cc <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800a9cc:	b580      	push	{r7, lr}
 800a9ce:	b084      	sub	sp, #16
 800a9d0:	af00      	add	r7, sp, #0
 800a9d2:	6078      	str	r0, [r7, #4]
 800a9d4:	460b      	mov	r3, r1
 800a9d6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a9d8:	2300      	movs	r3, #0
 800a9da:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a9dc:	2300      	movs	r3, #0
 800a9de:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a9e6:	78fa      	ldrb	r2, [r7, #3]
 800a9e8:	4611      	mov	r1, r2
 800a9ea:	4618      	mov	r0, r3
 800a9ec:	f7fa fe67 	bl	80056be <HAL_PCD_SetAddress>
 800a9f0:	4603      	mov	r3, r0
 800a9f2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a9f4:	7bfb      	ldrb	r3, [r7, #15]
 800a9f6:	4618      	mov	r0, r3
 800a9f8:	f000 f85c 	bl	800aab4 <USBD_Get_USB_Status>
 800a9fc:	4603      	mov	r3, r0
 800a9fe:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800aa00:	7bbb      	ldrb	r3, [r7, #14]
}
 800aa02:	4618      	mov	r0, r3
 800aa04:	3710      	adds	r7, #16
 800aa06:	46bd      	mov	sp, r7
 800aa08:	bd80      	pop	{r7, pc}

0800aa0a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800aa0a:	b580      	push	{r7, lr}
 800aa0c:	b086      	sub	sp, #24
 800aa0e:	af00      	add	r7, sp, #0
 800aa10:	60f8      	str	r0, [r7, #12]
 800aa12:	607a      	str	r2, [r7, #4]
 800aa14:	603b      	str	r3, [r7, #0]
 800aa16:	460b      	mov	r3, r1
 800aa18:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800aa1a:	2300      	movs	r3, #0
 800aa1c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800aa1e:	2300      	movs	r3, #0
 800aa20:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800aa22:	68fb      	ldr	r3, [r7, #12]
 800aa24:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800aa28:	7af9      	ldrb	r1, [r7, #11]
 800aa2a:	683b      	ldr	r3, [r7, #0]
 800aa2c:	687a      	ldr	r2, [r7, #4]
 800aa2e:	f7fa ff80 	bl	8005932 <HAL_PCD_EP_Transmit>
 800aa32:	4603      	mov	r3, r0
 800aa34:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800aa36:	7dfb      	ldrb	r3, [r7, #23]
 800aa38:	4618      	mov	r0, r3
 800aa3a:	f000 f83b 	bl	800aab4 <USBD_Get_USB_Status>
 800aa3e:	4603      	mov	r3, r0
 800aa40:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800aa42:	7dbb      	ldrb	r3, [r7, #22]
}
 800aa44:	4618      	mov	r0, r3
 800aa46:	3718      	adds	r7, #24
 800aa48:	46bd      	mov	sp, r7
 800aa4a:	bd80      	pop	{r7, pc}

0800aa4c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800aa4c:	b580      	push	{r7, lr}
 800aa4e:	b086      	sub	sp, #24
 800aa50:	af00      	add	r7, sp, #0
 800aa52:	60f8      	str	r0, [r7, #12]
 800aa54:	607a      	str	r2, [r7, #4]
 800aa56:	603b      	str	r3, [r7, #0]
 800aa58:	460b      	mov	r3, r1
 800aa5a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800aa5c:	2300      	movs	r3, #0
 800aa5e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800aa60:	2300      	movs	r3, #0
 800aa62:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800aa64:	68fb      	ldr	r3, [r7, #12]
 800aa66:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800aa6a:	7af9      	ldrb	r1, [r7, #11]
 800aa6c:	683b      	ldr	r3, [r7, #0]
 800aa6e:	687a      	ldr	r2, [r7, #4]
 800aa70:	f7fa fefc 	bl	800586c <HAL_PCD_EP_Receive>
 800aa74:	4603      	mov	r3, r0
 800aa76:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800aa78:	7dfb      	ldrb	r3, [r7, #23]
 800aa7a:	4618      	mov	r0, r3
 800aa7c:	f000 f81a 	bl	800aab4 <USBD_Get_USB_Status>
 800aa80:	4603      	mov	r3, r0
 800aa82:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800aa84:	7dbb      	ldrb	r3, [r7, #22]
}
 800aa86:	4618      	mov	r0, r3
 800aa88:	3718      	adds	r7, #24
 800aa8a:	46bd      	mov	sp, r7
 800aa8c:	bd80      	pop	{r7, pc}

0800aa8e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800aa8e:	b580      	push	{r7, lr}
 800aa90:	b082      	sub	sp, #8
 800aa92:	af00      	add	r7, sp, #0
 800aa94:	6078      	str	r0, [r7, #4]
 800aa96:	460b      	mov	r3, r1
 800aa98:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800aaa0:	78fa      	ldrb	r2, [r7, #3]
 800aaa2:	4611      	mov	r1, r2
 800aaa4:	4618      	mov	r0, r3
 800aaa6:	f7fa ff2c 	bl	8005902 <HAL_PCD_EP_GetRxCount>
 800aaaa:	4603      	mov	r3, r0
}
 800aaac:	4618      	mov	r0, r3
 800aaae:	3708      	adds	r7, #8
 800aab0:	46bd      	mov	sp, r7
 800aab2:	bd80      	pop	{r7, pc}

0800aab4 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800aab4:	b480      	push	{r7}
 800aab6:	b085      	sub	sp, #20
 800aab8:	af00      	add	r7, sp, #0
 800aaba:	4603      	mov	r3, r0
 800aabc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800aabe:	2300      	movs	r3, #0
 800aac0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800aac2:	79fb      	ldrb	r3, [r7, #7]
 800aac4:	2b03      	cmp	r3, #3
 800aac6:	d817      	bhi.n	800aaf8 <USBD_Get_USB_Status+0x44>
 800aac8:	a201      	add	r2, pc, #4	; (adr r2, 800aad0 <USBD_Get_USB_Status+0x1c>)
 800aaca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aace:	bf00      	nop
 800aad0:	0800aae1 	.word	0x0800aae1
 800aad4:	0800aae7 	.word	0x0800aae7
 800aad8:	0800aaed 	.word	0x0800aaed
 800aadc:	0800aaf3 	.word	0x0800aaf3
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800aae0:	2300      	movs	r3, #0
 800aae2:	73fb      	strb	r3, [r7, #15]
    break;
 800aae4:	e00b      	b.n	800aafe <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800aae6:	2303      	movs	r3, #3
 800aae8:	73fb      	strb	r3, [r7, #15]
    break;
 800aaea:	e008      	b.n	800aafe <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800aaec:	2301      	movs	r3, #1
 800aaee:	73fb      	strb	r3, [r7, #15]
    break;
 800aaf0:	e005      	b.n	800aafe <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800aaf2:	2303      	movs	r3, #3
 800aaf4:	73fb      	strb	r3, [r7, #15]
    break;
 800aaf6:	e002      	b.n	800aafe <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800aaf8:	2303      	movs	r3, #3
 800aafa:	73fb      	strb	r3, [r7, #15]
    break;
 800aafc:	bf00      	nop
  }
  return usb_status;
 800aafe:	7bfb      	ldrb	r3, [r7, #15]
}
 800ab00:	4618      	mov	r0, r3
 800ab02:	3714      	adds	r7, #20
 800ab04:	46bd      	mov	sp, r7
 800ab06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab0a:	4770      	bx	lr

0800ab0c <D16_GENERIC>:
 800ab0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab10:	b089      	sub	sp, #36	; 0x24
 800ab12:	68d4      	ldr	r4, [r2, #12]
 800ab14:	8cd5      	ldrh	r5, [r2, #38]	; 0x26
 800ab16:	6993      	ldr	r3, [r2, #24]
 800ab18:	9407      	str	r4, [sp, #28]
 800ab1a:	6b14      	ldr	r4, [r2, #48]	; 0x30
 800ab1c:	9306      	str	r3, [sp, #24]
 800ab1e:	9402      	str	r4, [sp, #8]
 800ab20:	f8d2 a010 	ldr.w	sl, [r2, #16]
 800ab24:	f8d2 b014 	ldr.w	fp, [r2, #20]
 800ab28:	69d3      	ldr	r3, [r2, #28]
 800ab2a:	6896      	ldr	r6, [r2, #8]
 800ab2c:	6b54      	ldr	r4, [r2, #52]	; 0x34
 800ab2e:	9103      	str	r1, [sp, #12]
 800ab30:	2d00      	cmp	r5, #0
 800ab32:	d066      	beq.n	800ac02 <D16_GENERIC+0xf6>
 800ab34:	f004 0510 	and.w	r5, r4, #16
 800ab38:	f004 0420 	and.w	r4, r4, #32
 800ab3c:	9504      	str	r5, [sp, #16]
 800ab3e:	4938      	ldr	r1, [pc, #224]	; (800ac20 <D16_GENERIC+0x114>)
 800ab40:	9405      	str	r4, [sp, #20]
 800ab42:	f04f 0e00 	mov.w	lr, #0
 800ab46:	4635      	mov	r5, r6
 800ab48:	e04f      	b.n	800abea <D16_GENERIC+0xde>
 800ab4a:	5d87      	ldrb	r7, [r0, r6]
 800ab4c:	7804      	ldrb	r4, [r0, #0]
 800ab4e:	eb00 0046 	add.w	r0, r0, r6, lsl #1
 800ab52:	eb04 2407 	add.w	r4, r4, r7, lsl #8
 800ab56:	b2e6      	uxtb	r6, r4
 800ab58:	f3c4 2407 	ubfx	r4, r4, #8, #8
 800ab5c:	f851 6026 	ldr.w	r6, [r1, r6, lsl #2]
 800ab60:	f851 4024 	ldr.w	r4, [r1, r4, lsl #2]
 800ab64:	4433      	add	r3, r6
 800ab66:	eb04 2493 	add.w	r4, r4, r3, lsr #10
 800ab6a:	f3c4 0609 	ubfx	r6, r4, #0, #10
 800ab6e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800ab72:	ea46 4603 	orr.w	r6, r6, r3, lsl #16
 800ab76:	0aa3      	lsrs	r3, r4, #10
 800ab78:	4c2a      	ldr	r4, [pc, #168]	; (800ac24 <D16_GENERIC+0x118>)
 800ab7a:	fb26 5404 	smlad	r4, r6, r4, r5
 800ab7e:	4d2a      	ldr	r5, [pc, #168]	; (800ac28 <D16_GENERIC+0x11c>)
 800ab80:	fb26 f505 	smuad	r5, r6, r5
 800ab84:	f5a4 6400 	sub.w	r4, r4, #2048	; 0x800
 800ab88:	eb04 080a 	add.w	r8, r4, sl
 800ab8c:	eba8 080b 	sub.w	r8, r8, fp
 800ab90:	4646      	mov	r6, r8
 800ab92:	17f7      	asrs	r7, r6, #31
 800ab94:	e9cd 6700 	strd	r6, r7, [sp]
 800ab98:	9e04      	ldr	r6, [sp, #16]
 800ab9a:	f10e 0c01 	add.w	ip, lr, #1
 800ab9e:	b16e      	cbz	r6, 800abbc <D16_GENERIC+0xb0>
 800aba0:	6a16      	ldr	r6, [r2, #32]
 800aba2:	9f01      	ldr	r7, [sp, #4]
 800aba4:	fba8 8906 	umull	r8, r9, r8, r6
 800aba8:	fb06 9907 	mla	r9, r6, r7, r9
 800abac:	f118 4800 	adds.w	r8, r8, #2147483648	; 0x80000000
 800abb0:	f149 0900 	adc.w	r9, r9, #0
 800abb4:	ea4f 0a49 	mov.w	sl, r9, lsl #1
 800abb8:	46a3      	mov	fp, r4
 800abba:	4654      	mov	r4, sl
 800abbc:	8d16      	ldrh	r6, [r2, #40]	; 0x28
 800abbe:	9f02      	ldr	r7, [sp, #8]
 800abc0:	0424      	lsls	r4, r4, #16
 800abc2:	f04f 4800 	mov.w	r8, #2147483648	; 0x80000000
 800abc6:	f04f 0900 	mov.w	r9, #0
 800abca:	fb0e fe06 	mul.w	lr, lr, r6
 800abce:	fbc7 8904 	smlal	r8, r9, r7, r4
 800abd2:	9e03      	ldr	r6, [sp, #12]
 800abd4:	464f      	mov	r7, r9
 800abd6:	10bc      	asrs	r4, r7, #2
 800abd8:	f304 040f 	ssat	r4, #16, r4
 800abdc:	f826 401e 	strh.w	r4, [r6, lr, lsl #1]
 800abe0:	8cd4      	ldrh	r4, [r2, #38]	; 0x26
 800abe2:	fa1f fe8c 	uxth.w	lr, ip
 800abe6:	4574      	cmp	r4, lr
 800abe8:	d90a      	bls.n	800ac00 <D16_GENERIC+0xf4>
 800abea:	8d54      	ldrh	r4, [r2, #42]	; 0x2a
 800abec:	2c01      	cmp	r4, #1
 800abee:	b2e6      	uxtb	r6, r4
 800abf0:	d1ab      	bne.n	800ab4a <D16_GENERIC+0x3e>
 800abf2:	9e05      	ldr	r6, [sp, #20]
 800abf4:	f850 4b02 	ldr.w	r4, [r0], #2
 800abf8:	2e00      	cmp	r6, #0
 800abfa:	d0ac      	beq.n	800ab56 <D16_GENERIC+0x4a>
 800abfc:	ba64      	rev16	r4, r4
 800abfe:	e7aa      	b.n	800ab56 <D16_GENERIC+0x4a>
 800ac00:	462e      	mov	r6, r5
 800ac02:	9907      	ldr	r1, [sp, #28]
 800ac04:	61d3      	str	r3, [r2, #28]
 800ac06:	9b06      	ldr	r3, [sp, #24]
 800ac08:	6096      	str	r6, [r2, #8]
 800ac0a:	2000      	movs	r0, #0
 800ac0c:	60d1      	str	r1, [r2, #12]
 800ac0e:	f8c2 a010 	str.w	sl, [r2, #16]
 800ac12:	f8c2 b014 	str.w	fp, [r2, #20]
 800ac16:	6193      	str	r3, [r2, #24]
 800ac18:	b009      	add	sp, #36	; 0x24
 800ac1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ac1e:	bf00      	nop
 800ac20:	20000000 	.word	0x20000000
 800ac24:	00030001 	.word	0x00030001
 800ac28:	00010003 	.word	0x00010003

0800ac2c <D24_GENERIC>:
 800ac2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac30:	8cd6      	ldrh	r6, [r2, #38]	; 0x26
 800ac32:	6993      	ldr	r3, [r2, #24]
 800ac34:	6b15      	ldr	r5, [r2, #48]	; 0x30
 800ac36:	f8d2 a010 	ldr.w	sl, [r2, #16]
 800ac3a:	f8d2 9014 	ldr.w	r9, [r2, #20]
 800ac3e:	6894      	ldr	r4, [r2, #8]
 800ac40:	f8d2 b00c 	ldr.w	fp, [r2, #12]
 800ac44:	b089      	sub	sp, #36	; 0x24
 800ac46:	9307      	str	r3, [sp, #28]
 800ac48:	9503      	str	r5, [sp, #12]
 800ac4a:	69d3      	ldr	r3, [r2, #28]
 800ac4c:	6b55      	ldr	r5, [r2, #52]	; 0x34
 800ac4e:	9104      	str	r1, [sp, #16]
 800ac50:	2e00      	cmp	r6, #0
 800ac52:	f000 8096 	beq.w	800ad82 <D24_GENERIC+0x156>
 800ac56:	f005 0610 	and.w	r6, r5, #16
 800ac5a:	f005 0520 	and.w	r5, r5, #32
 800ac5e:	4954      	ldr	r1, [pc, #336]	; (800adb0 <D24_GENERIC+0x184>)
 800ac60:	9605      	str	r6, [sp, #20]
 800ac62:	9506      	str	r5, [sp, #24]
 800ac64:	f04f 0e00 	mov.w	lr, #0
 800ac68:	f8cd 9008 	str.w	r9, [sp, #8]
 800ac6c:	e06a      	b.n	800ad44 <D24_GENERIC+0x118>
 800ac6e:	f810 5016 	ldrb.w	r5, [r0, r6, lsl #1]
 800ac72:	f810 8007 	ldrb.w	r8, [r0, r7]
 800ac76:	f890 c000 	ldrb.w	ip, [r0]
 800ac7a:	042d      	lsls	r5, r5, #16
 800ac7c:	eb00 0046 	add.w	r0, r0, r6, lsl #1
 800ac80:	eb05 2508 	add.w	r5, r5, r8, lsl #8
 800ac84:	44ac      	add	ip, r5
 800ac86:	4438      	add	r0, r7
 800ac88:	fa5f f68c 	uxtb.w	r6, ip
 800ac8c:	f3cc 2507 	ubfx	r5, ip, #8, #8
 800ac90:	f851 6026 	ldr.w	r6, [r1, r6, lsl #2]
 800ac94:	f851 7025 	ldr.w	r7, [r1, r5, lsl #2]
 800ac98:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800ac9c:	eb06 2693 	add.w	r6, r6, r3, lsr #10
 800aca0:	eb07 2796 	add.w	r7, r7, r6, lsr #10
 800aca4:	f851 302c 	ldr.w	r3, [r1, ip, lsl #2]
 800aca8:	f3c7 0509 	ubfx	r5, r7, #0, #10
 800acac:	f3c6 0609 	ubfx	r6, r6, #0, #10
 800acb0:	ea45 4606 	orr.w	r6, r5, r6, lsl #16
 800acb4:	eb03 2397 	add.w	r3, r3, r7, lsr #10
 800acb8:	4d3e      	ldr	r5, [pc, #248]	; (800adb4 <D24_GENERIC+0x188>)
 800acba:	fb26 b705 	smlad	r7, r6, r5, fp
 800acbe:	4d3e      	ldr	r5, [pc, #248]	; (800adb8 <D24_GENERIC+0x18c>)
 800acc0:	fb26 4b05 	smlad	fp, r6, r5, r4
 800acc4:	f3c3 0409 	ubfx	r4, r3, #0, #10
 800acc8:	eb04 0844 	add.w	r8, r4, r4, lsl #1
 800accc:	eb0b 0b48 	add.w	fp, fp, r8, lsl #1
 800acd0:	2401      	movs	r4, #1
 800acd2:	fb26 f604 	smuad	r6, r6, r4
 800acd6:	f5a7 55d8 	sub.w	r5, r7, #6912	; 0x1b00
 800acda:	9f02      	ldr	r7, [sp, #8]
 800acdc:	eb0e 0c04 	add.w	ip, lr, r4
 800ace0:	eb08 0406 	add.w	r4, r8, r6
 800ace4:	eb05 060a 	add.w	r6, r5, sl
 800ace8:	1bf6      	subs	r6, r6, r7
 800acea:	4637      	mov	r7, r6
 800acec:	ea4f 78e6 	mov.w	r8, r6, asr #31
 800acf0:	e9cd 7800 	strd	r7, r8, [sp]
 800acf4:	9f05      	ldr	r7, [sp, #20]
 800acf6:	b177      	cbz	r7, 800ad16 <D24_GENERIC+0xea>
 800acf8:	f8d2 8020 	ldr.w	r8, [r2, #32]
 800acfc:	9502      	str	r5, [sp, #8]
 800acfe:	fba6 9a08 	umull	r9, sl, r6, r8
 800ad02:	9e01      	ldr	r6, [sp, #4]
 800ad04:	fb08 aa06 	mla	sl, r8, r6, sl
 800ad08:	f119 4600 	adds.w	r6, r9, #2147483648	; 0x80000000
 800ad0c:	f14a 0700 	adc.w	r7, sl, #0
 800ad10:	ea4f 0a47 	mov.w	sl, r7, lsl #1
 800ad14:	4655      	mov	r5, sl
 800ad16:	8d16      	ldrh	r6, [r2, #40]	; 0x28
 800ad18:	9f03      	ldr	r7, [sp, #12]
 800ad1a:	03ad      	lsls	r5, r5, #14
 800ad1c:	f04f 4800 	mov.w	r8, #2147483648	; 0x80000000
 800ad20:	f04f 0900 	mov.w	r9, #0
 800ad24:	fb0e fe06 	mul.w	lr, lr, r6
 800ad28:	fbc7 8905 	smlal	r8, r9, r7, r5
 800ad2c:	9e04      	ldr	r6, [sp, #16]
 800ad2e:	464f      	mov	r7, r9
 800ad30:	10bd      	asrs	r5, r7, #2
 800ad32:	f305 050f 	ssat	r5, #16, r5
 800ad36:	f826 501e 	strh.w	r5, [r6, lr, lsl #1]
 800ad3a:	8cd5      	ldrh	r5, [r2, #38]	; 0x26
 800ad3c:	fa1f fe8c 	uxth.w	lr, ip
 800ad40:	4575      	cmp	r5, lr
 800ad42:	d91c      	bls.n	800ad7e <D24_GENERIC+0x152>
 800ad44:	8d55      	ldrh	r5, [r2, #42]	; 0x2a
 800ad46:	b2ef      	uxtb	r7, r5
 800ad48:	2d01      	cmp	r5, #1
 800ad4a:	b23e      	sxth	r6, r7
 800ad4c:	d18f      	bne.n	800ac6e <D24_GENERIC+0x42>
 800ad4e:	9d06      	ldr	r5, [sp, #24]
 800ad50:	b15d      	cbz	r5, 800ad6a <D24_GENERIC+0x13e>
 800ad52:	f01e 0f01 	tst.w	lr, #1
 800ad56:	d122      	bne.n	800ad9e <D24_GENERIC+0x172>
 800ad58:	7805      	ldrb	r5, [r0, #0]
 800ad5a:	78c7      	ldrb	r7, [r0, #3]
 800ad5c:	7846      	ldrb	r6, [r0, #1]
 800ad5e:	022d      	lsls	r5, r5, #8
 800ad60:	eb05 4c07 	add.w	ip, r5, r7, lsl #16
 800ad64:	44b4      	add	ip, r6
 800ad66:	3002      	adds	r0, #2
 800ad68:	e78e      	b.n	800ac88 <D24_GENERIC+0x5c>
 800ad6a:	7846      	ldrb	r6, [r0, #1]
 800ad6c:	f890 c002 	ldrb.w	ip, [r0, #2]
 800ad70:	f810 5b03 	ldrb.w	r5, [r0], #3
 800ad74:	0236      	lsls	r6, r6, #8
 800ad76:	eb06 4c0c 	add.w	ip, r6, ip, lsl #16
 800ad7a:	44ac      	add	ip, r5
 800ad7c:	e784      	b.n	800ac88 <D24_GENERIC+0x5c>
 800ad7e:	f8dd 9008 	ldr.w	r9, [sp, #8]
 800ad82:	61d3      	str	r3, [r2, #28]
 800ad84:	9b07      	ldr	r3, [sp, #28]
 800ad86:	6094      	str	r4, [r2, #8]
 800ad88:	2000      	movs	r0, #0
 800ad8a:	f8c2 b00c 	str.w	fp, [r2, #12]
 800ad8e:	f8c2 a010 	str.w	sl, [r2, #16]
 800ad92:	f8c2 9014 	str.w	r9, [r2, #20]
 800ad96:	6193      	str	r3, [r2, #24]
 800ad98:	b009      	add	sp, #36	; 0x24
 800ad9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ad9e:	78c5      	ldrb	r5, [r0, #3]
 800ada0:	7887      	ldrb	r7, [r0, #2]
 800ada2:	f810 6b04 	ldrb.w	r6, [r0], #4
 800ada6:	022d      	lsls	r5, r5, #8
 800ada8:	eb05 4c07 	add.w	ip, r5, r7, lsl #16
 800adac:	44b4      	add	ip, r6
 800adae:	e76b      	b.n	800ac88 <D24_GENERIC+0x5c>
 800adb0:	20000000 	.word	0x20000000
 800adb4:	00030001 	.word	0x00030001
 800adb8:	00060007 	.word	0x00060007

0800adbc <D32_GENERIC>:
 800adbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800adc0:	8cd5      	ldrh	r5, [r2, #38]	; 0x26
 800adc2:	6993      	ldr	r3, [r2, #24]
 800adc4:	6b14      	ldr	r4, [r2, #48]	; 0x30
 800adc6:	f8d2 a010 	ldr.w	sl, [r2, #16]
 800adca:	f8d2 9014 	ldr.w	r9, [r2, #20]
 800adce:	69d6      	ldr	r6, [r2, #28]
 800add0:	f8d2 b00c 	ldr.w	fp, [r2, #12]
 800add4:	b089      	sub	sp, #36	; 0x24
 800add6:	9307      	str	r3, [sp, #28]
 800add8:	9403      	str	r4, [sp, #12]
 800adda:	6893      	ldr	r3, [r2, #8]
 800addc:	6b54      	ldr	r4, [r2, #52]	; 0x34
 800adde:	9104      	str	r1, [sp, #16]
 800ade0:	2d00      	cmp	r5, #0
 800ade2:	f000 809f 	beq.w	800af24 <D32_GENERIC+0x168>
 800ade6:	f004 0510 	and.w	r5, r4, #16
 800adea:	f004 0420 	and.w	r4, r4, #32
 800adee:	9505      	str	r5, [sp, #20]
 800adf0:	4953      	ldr	r1, [pc, #332]	; (800af40 <D32_GENERIC+0x184>)
 800adf2:	9406      	str	r4, [sp, #24]
 800adf4:	f04f 0c00 	mov.w	ip, #0
 800adf8:	f8cd 9008 	str.w	r9, [sp, #8]
 800adfc:	461d      	mov	r5, r3
 800adfe:	4617      	mov	r7, r2
 800ae00:	e077      	b.n	800aef2 <D32_GENERIC+0x136>
 800ae02:	f818 3003 	ldrb.w	r3, [r8, r3]
 800ae06:	f810 800e 	ldrb.w	r8, [r0, lr]
 800ae0a:	f810 e002 	ldrb.w	lr, [r0, r2]
 800ae0e:	7800      	ldrb	r0, [r0, #0]
 800ae10:	041b      	lsls	r3, r3, #16
 800ae12:	eb03 6308 	add.w	r3, r3, r8, lsl #24
 800ae16:	eb03 230e 	add.w	r3, r3, lr, lsl #8
 800ae1a:	4403      	add	r3, r0
 800ae1c:	eb04 0042 	add.w	r0, r4, r2, lsl #1
 800ae20:	b2dc      	uxtb	r4, r3
 800ae22:	f3c3 2207 	ubfx	r2, r3, #8, #8
 800ae26:	f3c3 4807 	ubfx	r8, r3, #16, #8
 800ae2a:	f851 4024 	ldr.w	r4, [r1, r4, lsl #2]
 800ae2e:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800ae32:	0e1b      	lsrs	r3, r3, #24
 800ae34:	eb04 2496 	add.w	r4, r4, r6, lsr #10
 800ae38:	f851 6028 	ldr.w	r6, [r1, r8, lsl #2]
 800ae3c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800ae40:	eb02 2294 	add.w	r2, r2, r4, lsr #10
 800ae44:	eb06 2e92 	add.w	lr, r6, r2, lsr #10
 800ae48:	eb03 269e 	add.w	r6, r3, lr, lsr #10
 800ae4c:	f3c6 0309 	ubfx	r3, r6, #0, #10
 800ae50:	f3c4 0409 	ubfx	r4, r4, #0, #10
 800ae54:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800ae58:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 800ae5c:	ea43 4e0e 	orr.w	lr, r3, lr, lsl #16
 800ae60:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800ae64:	4b37      	ldr	r3, [pc, #220]	; (800af44 <D32_GENERIC+0x188>)
 800ae66:	fb22 b403 	smlad	r4, r2, r3, fp
 800ae6a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800ae6e:	fb2e 4803 	smlad	r8, lr, r3, r4
 800ae72:	4b35      	ldr	r3, [pc, #212]	; (800af48 <D32_GENERIC+0x18c>)
 800ae74:	fb22 5503 	smlad	r5, r2, r3, r5
 800ae78:	4b34      	ldr	r3, [pc, #208]	; (800af4c <D32_GENERIC+0x190>)
 800ae7a:	fb2e 5b03 	smlad	fp, lr, r3, r5
 800ae7e:	2301      	movs	r3, #1
 800ae80:	fb22 f203 	smuad	r2, r2, r3
 800ae84:	4b32      	ldr	r3, [pc, #200]	; (800af50 <D32_GENERIC+0x194>)
 800ae86:	fb2e 2503 	smlad	r5, lr, r3, r2
 800ae8a:	9b02      	ldr	r3, [sp, #8]
 800ae8c:	f5a8 4480 	sub.w	r4, r8, #16384	; 0x4000
 800ae90:	eb04 080a 	add.w	r8, r4, sl
 800ae94:	eba8 0803 	sub.w	r8, r8, r3
 800ae98:	4642      	mov	r2, r8
 800ae9a:	17d3      	asrs	r3, r2, #31
 800ae9c:	e9cd 2300 	strd	r2, r3, [sp]
 800aea0:	9b05      	ldr	r3, [sp, #20]
 800aea2:	f10c 0e01 	add.w	lr, ip, #1
 800aea6:	b16b      	cbz	r3, 800aec4 <D32_GENERIC+0x108>
 800aea8:	6a3a      	ldr	r2, [r7, #32]
 800aeaa:	9b01      	ldr	r3, [sp, #4]
 800aeac:	9402      	str	r4, [sp, #8]
 800aeae:	fba8 8902 	umull	r8, r9, r8, r2
 800aeb2:	fb02 9903 	mla	r9, r2, r3, r9
 800aeb6:	f118 4800 	adds.w	r8, r8, #2147483648	; 0x80000000
 800aeba:	f149 0900 	adc.w	r9, r9, #0
 800aebe:	ea4f 0a49 	mov.w	sl, r9, lsl #1
 800aec2:	4654      	mov	r4, sl
 800aec4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800aec6:	9a04      	ldr	r2, [sp, #16]
 800aec8:	fb0c fc03 	mul.w	ip, ip, r3
 800aecc:	9b03      	ldr	r3, [sp, #12]
 800aece:	0364      	lsls	r4, r4, #13
 800aed0:	f04f 4800 	mov.w	r8, #2147483648	; 0x80000000
 800aed4:	f04f 0900 	mov.w	r9, #0
 800aed8:	fbc3 8904 	smlal	r8, r9, r3, r4
 800aedc:	464b      	mov	r3, r9
 800aede:	109b      	asrs	r3, r3, #2
 800aee0:	f303 030f 	ssat	r3, #16, r3
 800aee4:	f822 301c 	strh.w	r3, [r2, ip, lsl #1]
 800aee8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800aeea:	fa1f fc8e 	uxth.w	ip, lr
 800aeee:	4563      	cmp	r3, ip
 800aef0:	d914      	bls.n	800af1c <D32_GENERIC+0x160>
 800aef2:	8d7c      	ldrh	r4, [r7, #42]	; 0x2a
 800aef4:	b2e2      	uxtb	r2, r4
 800aef6:	eb02 0e42 	add.w	lr, r2, r2, lsl #1
 800aefa:	eb00 080e 	add.w	r8, r0, lr
 800aefe:	4253      	negs	r3, r2
 800af00:	2c01      	cmp	r4, #1
 800af02:	eb08 0403 	add.w	r4, r8, r3
 800af06:	f47f af7c 	bne.w	800ae02 <D32_GENERIC+0x46>
 800af0a:	1d02      	adds	r2, r0, #4
 800af0c:	6803      	ldr	r3, [r0, #0]
 800af0e:	9806      	ldr	r0, [sp, #24]
 800af10:	b110      	cbz	r0, 800af18 <D32_GENERIC+0x15c>
 800af12:	ba5b      	rev16	r3, r3
 800af14:	4610      	mov	r0, r2
 800af16:	e783      	b.n	800ae20 <D32_GENERIC+0x64>
 800af18:	4610      	mov	r0, r2
 800af1a:	e781      	b.n	800ae20 <D32_GENERIC+0x64>
 800af1c:	f8dd 9008 	ldr.w	r9, [sp, #8]
 800af20:	462b      	mov	r3, r5
 800af22:	463a      	mov	r2, r7
 800af24:	6093      	str	r3, [r2, #8]
 800af26:	9b07      	ldr	r3, [sp, #28]
 800af28:	f8c2 b00c 	str.w	fp, [r2, #12]
 800af2c:	2000      	movs	r0, #0
 800af2e:	61d6      	str	r6, [r2, #28]
 800af30:	f8c2 a010 	str.w	sl, [r2, #16]
 800af34:	f8c2 9014 	str.w	r9, [r2, #20]
 800af38:	6193      	str	r3, [r2, #24]
 800af3a:	b009      	add	sp, #36	; 0x24
 800af3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800af40:	20000000 	.word	0x20000000
 800af44:	00060003 	.word	0x00060003
 800af48:	000a000c 	.word	0x000a000c
 800af4c:	000c000a 	.word	0x000c000a
 800af50:	00030006 	.word	0x00030006

0800af54 <D48_GENERIC>:
 800af54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af58:	b089      	sub	sp, #36	; 0x24
 800af5a:	6953      	ldr	r3, [r2, #20]
 800af5c:	68d4      	ldr	r4, [r2, #12]
 800af5e:	8cd5      	ldrh	r5, [r2, #38]	; 0x26
 800af60:	9302      	str	r3, [sp, #8]
 800af62:	9400      	str	r4, [sp, #0]
 800af64:	6993      	ldr	r3, [r2, #24]
 800af66:	6b14      	ldr	r4, [r2, #48]	; 0x30
 800af68:	9307      	str	r3, [sp, #28]
 800af6a:	9403      	str	r4, [sp, #12]
 800af6c:	f8d2 a010 	ldr.w	sl, [r2, #16]
 800af70:	69d6      	ldr	r6, [r2, #28]
 800af72:	6893      	ldr	r3, [r2, #8]
 800af74:	6b54      	ldr	r4, [r2, #52]	; 0x34
 800af76:	9104      	str	r1, [sp, #16]
 800af78:	2d00      	cmp	r5, #0
 800af7a:	f000 80c5 	beq.w	800b108 <D48_GENERIC+0x1b4>
 800af7e:	f004 0510 	and.w	r5, r4, #16
 800af82:	f004 0420 	and.w	r4, r4, #32
 800af86:	4967      	ldr	r1, [pc, #412]	; (800b124 <D48_GENERIC+0x1d0>)
 800af88:	9505      	str	r5, [sp, #20]
 800af8a:	9406      	str	r4, [sp, #24]
 800af8c:	f04f 0c00 	mov.w	ip, #0
 800af90:	4657      	mov	r7, sl
 800af92:	9301      	str	r3, [sp, #4]
 800af94:	e09c      	b.n	800b0d0 <D48_GENERIC+0x17c>
 800af96:	f81b 4005 	ldrb.w	r4, [fp, r5]
 800af9a:	f810 b009 	ldrb.w	fp, [r0, r9]
 800af9e:	f81a 9009 	ldrb.w	r9, [sl, r9]
 800afa2:	f810 a00e 	ldrb.w	sl, [r0, lr]
 800afa6:	7800      	ldrb	r0, [r0, #0]
 800afa8:	0424      	lsls	r4, r4, #16
 800afaa:	eb04 6b0b 	add.w	fp, r4, fp, lsl #24
 800afae:	f818 4005 	ldrb.w	r4, [r8, r5]
 800afb2:	eb0b 2b0a 	add.w	fp, fp, sl, lsl #8
 800afb6:	44a8      	add	r8, r5
 800afb8:	eb04 2409 	add.w	r4, r4, r9, lsl #8
 800afbc:	eb0b 0500 	add.w	r5, fp, r0
 800afc0:	eb08 004e 	add.w	r0, r8, lr, lsl #1
 800afc4:	fa5f f885 	uxtb.w	r8, r5
 800afc8:	f3c5 2e07 	ubfx	lr, r5, #8, #8
 800afcc:	f851 a028 	ldr.w	sl, [r1, r8, lsl #2]
 800afd0:	f851 902e 	ldr.w	r9, [r1, lr, lsl #2]
 800afd4:	f3c5 4e07 	ubfx	lr, r5, #16, #8
 800afd8:	0e2d      	lsrs	r5, r5, #24
 800afda:	eb0a 2a96 	add.w	sl, sl, r6, lsr #10
 800afde:	f851 802e 	ldr.w	r8, [r1, lr, lsl #2]
 800afe2:	f851 e025 	ldr.w	lr, [r1, r5, lsl #2]
 800afe6:	b2e6      	uxtb	r6, r4
 800afe8:	eb09 259a 	add.w	r5, r9, sl, lsr #10
 800afec:	f3c4 2407 	ubfx	r4, r4, #8, #8
 800aff0:	eb08 2895 	add.w	r8, r8, r5, lsr #10
 800aff4:	f851 6026 	ldr.w	r6, [r1, r6, lsl #2]
 800aff8:	f851 9024 	ldr.w	r9, [r1, r4, lsl #2]
 800affc:	eb0e 2498 	add.w	r4, lr, r8, lsr #10
 800b000:	eb06 2e94 	add.w	lr, r6, r4, lsr #10
 800b004:	eb09 269e 	add.w	r6, r9, lr, lsr #10
 800b008:	f3c5 0509 	ubfx	r5, r5, #0, #10
 800b00c:	f3c4 0409 	ubfx	r4, r4, #0, #10
 800b010:	f3c6 0909 	ubfx	r9, r6, #0, #10
 800b014:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 800b018:	f3c8 0809 	ubfx	r8, r8, #0, #10
 800b01c:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 800b020:	ea45 4a0a 	orr.w	sl, r5, sl, lsl #16
 800b024:	ea44 4808 	orr.w	r8, r4, r8, lsl #16
 800b028:	ea49 4e0e 	orr.w	lr, r9, lr, lsl #16
 800b02c:	4c3e      	ldr	r4, [pc, #248]	; (800b128 <D48_GENERIC+0x1d4>)
 800b02e:	9d00      	ldr	r5, [sp, #0]
 800b030:	fb2a 5404 	smlad	r4, sl, r4, r5
 800b034:	4d3d      	ldr	r5, [pc, #244]	; (800b12c <D48_GENERIC+0x1d8>)
 800b036:	fb28 4405 	smlad	r4, r8, r5, r4
 800b03a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800b03e:	fb2e 4b03 	smlad	fp, lr, r3, r4
 800b042:	4c3b      	ldr	r4, [pc, #236]	; (800b130 <D48_GENERIC+0x1dc>)
 800b044:	9b01      	ldr	r3, [sp, #4]
 800b046:	fb2a 3304 	smlad	r3, sl, r4, r3
 800b04a:	f04f 141b 	mov.w	r4, #1769499	; 0x1b001b
 800b04e:	fb28 3304 	smlad	r3, r8, r4, r3
 800b052:	4c38      	ldr	r4, [pc, #224]	; (800b134 <D48_GENERIC+0x1e0>)
 800b054:	fb2e 3304 	smlad	r3, lr, r4, r3
 800b058:	2501      	movs	r5, #1
 800b05a:	9300      	str	r3, [sp, #0]
 800b05c:	fb2a fa05 	smuad	sl, sl, r5
 800b060:	4b35      	ldr	r3, [pc, #212]	; (800b138 <D48_GENERIC+0x1e4>)
 800b062:	fb28 a803 	smlad	r8, r8, r3, sl
 800b066:	4b35      	ldr	r3, [pc, #212]	; (800b13c <D48_GENERIC+0x1e8>)
 800b068:	fb2e 8303 	smlad	r3, lr, r3, r8
 800b06c:	f5ab 4458 	sub.w	r4, fp, #55296	; 0xd800
 800b070:	9301      	str	r3, [sp, #4]
 800b072:	9b02      	ldr	r3, [sp, #8]
 800b074:	eb04 0807 	add.w	r8, r4, r7
 800b078:	eba8 0803 	sub.w	r8, r8, r3
 800b07c:	9b05      	ldr	r3, [sp, #20]
 800b07e:	4465      	add	r5, ip
 800b080:	ea4f 7be8 	mov.w	fp, r8, asr #31
 800b084:	b163      	cbz	r3, 800b0a0 <D48_GENERIC+0x14c>
 800b086:	6a17      	ldr	r7, [r2, #32]
 800b088:	9402      	str	r4, [sp, #8]
 800b08a:	fba8 8907 	umull	r8, r9, r8, r7
 800b08e:	fb07 990b 	mla	r9, r7, fp, r9
 800b092:	f118 4800 	adds.w	r8, r8, #2147483648	; 0x80000000
 800b096:	f149 0900 	adc.w	r9, r9, #0
 800b09a:	ea4f 0749 	mov.w	r7, r9, lsl #1
 800b09e:	463c      	mov	r4, r7
 800b0a0:	f8b2 e028 	ldrh.w	lr, [r2, #40]	; 0x28
 800b0a4:	9b03      	ldr	r3, [sp, #12]
 800b0a6:	02e4      	lsls	r4, r4, #11
 800b0a8:	f04f 4800 	mov.w	r8, #2147483648	; 0x80000000
 800b0ac:	f04f 0900 	mov.w	r9, #0
 800b0b0:	fb0c fc0e 	mul.w	ip, ip, lr
 800b0b4:	fbc3 8904 	smlal	r8, r9, r3, r4
 800b0b8:	9b04      	ldr	r3, [sp, #16]
 800b0ba:	ea4f 04a9 	mov.w	r4, r9, asr #2
 800b0be:	f304 040f 	ssat	r4, #16, r4
 800b0c2:	f823 401c 	strh.w	r4, [r3, ip, lsl #1]
 800b0c6:	8cd4      	ldrh	r4, [r2, #38]	; 0x26
 800b0c8:	fa1f fc85 	uxth.w	ip, r5
 800b0cc:	4564      	cmp	r4, ip
 800b0ce:	d919      	bls.n	800b104 <D48_GENERIC+0x1b0>
 800b0d0:	8d54      	ldrh	r4, [r2, #42]	; 0x2a
 800b0d2:	fa5f fe84 	uxtb.w	lr, r4
 800b0d6:	eb0e 094e 	add.w	r9, lr, lr, lsl #1
 800b0da:	f1ce 0500 	rsb	r5, lr, #0
 800b0de:	eb00 0b09 	add.w	fp, r0, r9
 800b0e2:	eb0b 0a05 	add.w	sl, fp, r5
 800b0e6:	2c01      	cmp	r4, #1
 800b0e8:	eb0a 0809 	add.w	r8, sl, r9
 800b0ec:	f47f af53 	bne.w	800af96 <D48_GENERIC+0x42>
 800b0f0:	9b06      	ldr	r3, [sp, #24]
 800b0f2:	6805      	ldr	r5, [r0, #0]
 800b0f4:	6844      	ldr	r4, [r0, #4]
 800b0f6:	3006      	adds	r0, #6
 800b0f8:	2b00      	cmp	r3, #0
 800b0fa:	f43f af63 	beq.w	800afc4 <D48_GENERIC+0x70>
 800b0fe:	ba6d      	rev16	r5, r5
 800b100:	ba64      	rev16	r4, r4
 800b102:	e75f      	b.n	800afc4 <D48_GENERIC+0x70>
 800b104:	9b01      	ldr	r3, [sp, #4]
 800b106:	46ba      	mov	sl, r7
 800b108:	6093      	str	r3, [r2, #8]
 800b10a:	9b00      	ldr	r3, [sp, #0]
 800b10c:	60d3      	str	r3, [r2, #12]
 800b10e:	9b02      	ldr	r3, [sp, #8]
 800b110:	6153      	str	r3, [r2, #20]
 800b112:	9b07      	ldr	r3, [sp, #28]
 800b114:	61d6      	str	r6, [r2, #28]
 800b116:	2000      	movs	r0, #0
 800b118:	f8c2 a010 	str.w	sl, [r2, #16]
 800b11c:	6193      	str	r3, [r2, #24]
 800b11e:	b009      	add	sp, #36	; 0x24
 800b120:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b124:	20000000 	.word	0x20000000
 800b128:	000f000a 	.word	0x000f000a
 800b12c:	00060003 	.word	0x00060003
 800b130:	00150019 	.word	0x00150019
 800b134:	00190015 	.word	0x00190015
 800b138:	00030006 	.word	0x00030006
 800b13c:	000a000f 	.word	0x000a000f

0800b140 <D64_GENERIC>:
 800b140:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b144:	b089      	sub	sp, #36	; 0x24
 800b146:	6913      	ldr	r3, [r2, #16]
 800b148:	6895      	ldr	r5, [r2, #8]
 800b14a:	9303      	str	r3, [sp, #12]
 800b14c:	9501      	str	r5, [sp, #4]
 800b14e:	6953      	ldr	r3, [r2, #20]
 800b150:	68d5      	ldr	r5, [r2, #12]
 800b152:	8cd4      	ldrh	r4, [r2, #38]	; 0x26
 800b154:	9304      	str	r3, [sp, #16]
 800b156:	9500      	str	r5, [sp, #0]
 800b158:	6993      	ldr	r3, [r2, #24]
 800b15a:	6b15      	ldr	r5, [r2, #48]	; 0x30
 800b15c:	9307      	str	r3, [sp, #28]
 800b15e:	9505      	str	r5, [sp, #20]
 800b160:	69d3      	ldr	r3, [r2, #28]
 800b162:	9106      	str	r1, [sp, #24]
 800b164:	2c00      	cmp	r4, #0
 800b166:	f000 80d9 	beq.w	800b31c <D64_GENERIC+0x1dc>
 800b16a:	6a11      	ldr	r1, [r2, #32]
 800b16c:	9102      	str	r1, [sp, #8]
 800b16e:	f8df e1ec 	ldr.w	lr, [pc, #492]	; 800b35c <D64_GENERIC+0x21c>
 800b172:	f04f 0c00 	mov.w	ip, #0
 800b176:	4681      	mov	r9, r0
 800b178:	e0c1      	b.n	800b2fe <D64_GENERIC+0x1be>
 800b17a:	eb06 0846 	add.w	r8, r6, r6, lsl #1
 800b17e:	4274      	negs	r4, r6
 800b180:	eb09 0708 	add.w	r7, r9, r8
 800b184:	eb07 0a44 	add.w	sl, r7, r4, lsl #1
 800b188:	eb0a 0548 	add.w	r5, sl, r8, lsl #1
 800b18c:	5d38      	ldrb	r0, [r7, r4]
 800b18e:	5d29      	ldrb	r1, [r5, r4]
 800b190:	f81a b018 	ldrb.w	fp, [sl, r8, lsl #1]
 800b194:	f819 a008 	ldrb.w	sl, [r9, r8]
 800b198:	f817 8014 	ldrb.w	r8, [r7, r4, lsl #1]
 800b19c:	f899 7000 	ldrb.w	r7, [r9]
 800b1a0:	f815 9014 	ldrb.w	r9, [r5, r4, lsl #1]
 800b1a4:	4425      	add	r5, r4
 800b1a6:	0409      	lsls	r1, r1, #16
 800b1a8:	0400      	lsls	r0, r0, #16
 800b1aa:	eb01 610b 	add.w	r1, r1, fp, lsl #24
 800b1ae:	eb00 600a 	add.w	r0, r0, sl, lsl #24
 800b1b2:	f815 b014 	ldrb.w	fp, [r5, r4, lsl #1]
 800b1b6:	eb01 2109 	add.w	r1, r1, r9, lsl #8
 800b1ba:	eb05 0444 	add.w	r4, r5, r4, lsl #1
 800b1be:	eb00 2008 	add.w	r0, r0, r8, lsl #8
 800b1c2:	4459      	add	r1, fp
 800b1c4:	eb04 0986 	add.w	r9, r4, r6, lsl #2
 800b1c8:	4438      	add	r0, r7
 800b1ca:	b2c5      	uxtb	r5, r0
 800b1cc:	f3c0 2407 	ubfx	r4, r0, #8, #8
 800b1d0:	f85e 6025 	ldr.w	r6, [lr, r5, lsl #2]
 800b1d4:	f85e 5024 	ldr.w	r5, [lr, r4, lsl #2]
 800b1d8:	f3c0 4407 	ubfx	r4, r0, #16, #8
 800b1dc:	0e00      	lsrs	r0, r0, #24
 800b1de:	eb03 0806 	add.w	r8, r3, r6
 800b1e2:	f85e 7024 	ldr.w	r7, [lr, r4, lsl #2]
 800b1e6:	f85e 4020 	ldr.w	r4, [lr, r0, lsl #2]
 800b1ea:	f3c1 2307 	ubfx	r3, r1, #8, #8
 800b1ee:	b2c8      	uxtb	r0, r1
 800b1f0:	eb05 2598 	add.w	r5, r5, r8, lsr #10
 800b1f4:	eb07 2795 	add.w	r7, r7, r5, lsr #10
 800b1f8:	f85e 6020 	ldr.w	r6, [lr, r0, lsl #2]
 800b1fc:	f85e 0023 	ldr.w	r0, [lr, r3, lsl #2]
 800b200:	f3c1 4307 	ubfx	r3, r1, #16, #8
 800b204:	eb04 2497 	add.w	r4, r4, r7, lsr #10
 800b208:	0e09      	lsrs	r1, r1, #24
 800b20a:	eb06 2694 	add.w	r6, r6, r4, lsr #10
 800b20e:	f85e 3023 	ldr.w	r3, [lr, r3, lsl #2]
 800b212:	f85e 1021 	ldr.w	r1, [lr, r1, lsl #2]
 800b216:	eb00 2096 	add.w	r0, r0, r6, lsr #10
 800b21a:	eb03 2a90 	add.w	sl, r3, r0, lsr #10
 800b21e:	eb01 219a 	add.w	r1, r1, sl, lsr #10
 800b222:	f3ca 0309 	ubfx	r3, sl, #0, #10
 800b226:	f3c5 0509 	ubfx	r5, r5, #0, #10
 800b22a:	f3c4 0409 	ubfx	r4, r4, #0, #10
 800b22e:	f3c6 0609 	ubfx	r6, r6, #0, #10
 800b232:	f3c1 0a09 	ubfx	sl, r1, #0, #10
 800b236:	f3c8 0809 	ubfx	r8, r8, #0, #10
 800b23a:	f3c7 0709 	ubfx	r7, r7, #0, #10
 800b23e:	f3c0 0009 	ubfx	r0, r0, #0, #10
 800b242:	ea44 4707 	orr.w	r7, r4, r7, lsl #16
 800b246:	ea4a 4a03 	orr.w	sl, sl, r3, lsl #16
 800b24a:	ea45 4808 	orr.w	r8, r5, r8, lsl #16
 800b24e:	0a8b      	lsrs	r3, r1, #10
 800b250:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800b254:	4939      	ldr	r1, [pc, #228]	; (800b33c <D64_GENERIC+0x1fc>)
 800b256:	9c00      	ldr	r4, [sp, #0]
 800b258:	fb28 4101 	smlad	r1, r8, r1, r4
 800b25c:	4c38      	ldr	r4, [pc, #224]	; (800b340 <D64_GENERIC+0x200>)
 800b25e:	fb27 1104 	smlad	r1, r7, r4, r1
 800b262:	4c38      	ldr	r4, [pc, #224]	; (800b344 <D64_GENERIC+0x204>)
 800b264:	fb20 1104 	smlad	r1, r0, r4, r1
 800b268:	f44f 3680 	mov.w	r6, #65536	; 0x10000
 800b26c:	fb2a 1106 	smlad	r1, sl, r6, r1
 800b270:	4c35      	ldr	r4, [pc, #212]	; (800b348 <D64_GENERIC+0x208>)
 800b272:	9d01      	ldr	r5, [sp, #4]
 800b274:	fb28 5404 	smlad	r4, r8, r4, r5
 800b278:	4d33      	ldr	r5, [pc, #204]	; (800b348 <D64_GENERIC+0x208>)
 800b27a:	fb2a 4415 	smladx	r4, sl, r5, r4
 800b27e:	4d33      	ldr	r5, [pc, #204]	; (800b34c <D64_GENERIC+0x20c>)
 800b280:	fb27 4405 	smlad	r4, r7, r5, r4
 800b284:	fb20 4415 	smladx	r4, r0, r5, r4
 800b288:	2501      	movs	r5, #1
 800b28a:	9400      	str	r4, [sp, #0]
 800b28c:	fb28 f805 	smuad	r8, r8, r5
 800b290:	4c2f      	ldr	r4, [pc, #188]	; (800b350 <D64_GENERIC+0x210>)
 800b292:	fb27 8704 	smlad	r7, r7, r4, r8
 800b296:	4c2f      	ldr	r4, [pc, #188]	; (800b354 <D64_GENERIC+0x214>)
 800b298:	fb20 7004 	smlad	r0, r0, r4, r7
 800b29c:	4c2e      	ldr	r4, [pc, #184]	; (800b358 <D64_GENERIC+0x218>)
 800b29e:	fb2a 0004 	smlad	r0, sl, r4, r0
 800b2a2:	f5a1 3600 	sub.w	r6, r1, #131072	; 0x20000
 800b2a6:	9902      	ldr	r1, [sp, #8]
 800b2a8:	9001      	str	r0, [sp, #4]
 800b2aa:	b189      	cbz	r1, 800b2d0 <D64_GENERIC+0x190>
 800b2ac:	9803      	ldr	r0, [sp, #12]
 800b2ae:	9c04      	ldr	r4, [sp, #16]
 800b2b0:	9604      	str	r6, [sp, #16]
 800b2b2:	4430      	add	r0, r6
 800b2b4:	1b00      	subs	r0, r0, r4
 800b2b6:	17c5      	asrs	r5, r0, #31
 800b2b8:	460f      	mov	r7, r1
 800b2ba:	fba0 0101 	umull	r0, r1, r0, r1
 800b2be:	fb07 1105 	mla	r1, r7, r5, r1
 800b2c2:	f110 4000 	adds.w	r0, r0, #2147483648	; 0x80000000
 800b2c6:	f141 0100 	adc.w	r1, r1, #0
 800b2ca:	0049      	lsls	r1, r1, #1
 800b2cc:	9103      	str	r1, [sp, #12]
 800b2ce:	460e      	mov	r6, r1
 800b2d0:	8d14      	ldrh	r4, [r2, #40]	; 0x28
 800b2d2:	9905      	ldr	r1, [sp, #20]
 800b2d4:	9806      	ldr	r0, [sp, #24]
 800b2d6:	02b6      	lsls	r6, r6, #10
 800b2d8:	f04f 4700 	mov.w	r7, #2147483648	; 0x80000000
 800b2dc:	f04f 0800 	mov.w	r8, #0
 800b2e0:	fb0c f404 	mul.w	r4, ip, r4
 800b2e4:	fbc1 7806 	smlal	r7, r8, r1, r6
 800b2e8:	4641      	mov	r1, r8
 800b2ea:	1089      	asrs	r1, r1, #2
 800b2ec:	f301 010f 	ssat	r1, #16, r1
 800b2f0:	f820 1014 	strh.w	r1, [r0, r4, lsl #1]
 800b2f4:	8cd1      	ldrh	r1, [r2, #38]	; 0x26
 800b2f6:	f10c 0c01 	add.w	ip, ip, #1
 800b2fa:	4561      	cmp	r1, ip
 800b2fc:	dd0e      	ble.n	800b31c <D64_GENERIC+0x1dc>
 800b2fe:	8d56      	ldrh	r6, [r2, #42]	; 0x2a
 800b300:	2e01      	cmp	r6, #1
 800b302:	f47f af3a 	bne.w	800b17a <D64_GENERIC+0x3a>
 800b306:	6b56      	ldr	r6, [r2, #52]	; 0x34
 800b308:	06b4      	lsls	r4, r6, #26
 800b30a:	e899 0003 	ldmia.w	r9, {r0, r1}
 800b30e:	f109 0908 	add.w	r9, r9, #8
 800b312:	f57f af5a 	bpl.w	800b1ca <D64_GENERIC+0x8a>
 800b316:	ba40      	rev16	r0, r0
 800b318:	ba49      	rev16	r1, r1
 800b31a:	e756      	b.n	800b1ca <D64_GENERIC+0x8a>
 800b31c:	61d3      	str	r3, [r2, #28]
 800b31e:	9b03      	ldr	r3, [sp, #12]
 800b320:	9901      	ldr	r1, [sp, #4]
 800b322:	6113      	str	r3, [r2, #16]
 800b324:	9b04      	ldr	r3, [sp, #16]
 800b326:	6091      	str	r1, [r2, #8]
 800b328:	6153      	str	r3, [r2, #20]
 800b32a:	9900      	ldr	r1, [sp, #0]
 800b32c:	9b07      	ldr	r3, [sp, #28]
 800b32e:	60d1      	str	r1, [r2, #12]
 800b330:	2000      	movs	r0, #0
 800b332:	6193      	str	r3, [r2, #24]
 800b334:	b009      	add	sp, #36	; 0x24
 800b336:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b33a:	bf00      	nop
 800b33c:	001c0015 	.word	0x001c0015
 800b340:	000f000a 	.word	0x000f000a
 800b344:	00060003 	.word	0x00060003
 800b348:	0024002a 	.word	0x0024002a
 800b34c:	002e0030 	.word	0x002e0030
 800b350:	00030006 	.word	0x00030006
 800b354:	000a000f 	.word	0x000a000f
 800b358:	0015001c 	.word	0x0015001c
 800b35c:	20000000 	.word	0x20000000

0800b360 <D80_GENERIC>:
 800b360:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b364:	b08b      	sub	sp, #44	; 0x2c
 800b366:	6914      	ldr	r4, [r2, #16]
 800b368:	9404      	str	r4, [sp, #16]
 800b36a:	6954      	ldr	r4, [r2, #20]
 800b36c:	9405      	str	r4, [sp, #20]
 800b36e:	6994      	ldr	r4, [r2, #24]
 800b370:	9409      	str	r4, [sp, #36]	; 0x24
 800b372:	6894      	ldr	r4, [r2, #8]
 800b374:	9402      	str	r4, [sp, #8]
 800b376:	8cd3      	ldrh	r3, [r2, #38]	; 0x26
 800b378:	68d4      	ldr	r4, [r2, #12]
 800b37a:	9401      	str	r4, [sp, #4]
 800b37c:	6b14      	ldr	r4, [r2, #48]	; 0x30
 800b37e:	f8d2 b01c 	ldr.w	fp, [r2, #28]
 800b382:	9406      	str	r4, [sp, #24]
 800b384:	9107      	str	r1, [sp, #28]
 800b386:	2b00      	cmp	r3, #0
 800b388:	f000 810f 	beq.w	800b5aa <D80_GENERIC+0x24a>
 800b38c:	6a13      	ldr	r3, [r2, #32]
 800b38e:	9308      	str	r3, [sp, #32]
 800b390:	2300      	movs	r3, #0
 800b392:	9200      	str	r2, [sp, #0]
 800b394:	f8df 9264 	ldr.w	r9, [pc, #612]	; 800b5fc <D80_GENERIC+0x29c>
 800b398:	f8cd b00c 	str.w	fp, [sp, #12]
 800b39c:	461a      	mov	r2, r3
 800b39e:	e0ed      	b.n	800b57c <D80_GENERIC+0x21c>
 800b3a0:	fa5f fc8c 	uxtb.w	ip, ip
 800b3a4:	fa0f f48c 	sxth.w	r4, ip
 800b3a8:	0066      	lsls	r6, r4, #1
 800b3aa:	eb06 0804 	add.w	r8, r6, r4
 800b3ae:	f1cc 0500 	rsb	r5, ip, #0
 800b3b2:	eb00 0108 	add.w	r1, r0, r8
 800b3b6:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 800b3ba:	194b      	adds	r3, r1, r5
 800b3bc:	5d49      	ldrb	r1, [r1, r5]
 800b3be:	f810 a008 	ldrb.w	sl, [r0, r8]
 800b3c2:	f813 b004 	ldrb.w	fp, [r3, r4]
 800b3c6:	f810 c00c 	ldrb.w	ip, [r0, ip]
 800b3ca:	f890 8000 	ldrb.w	r8, [r0]
 800b3ce:	eb03 0e04 	add.w	lr, r3, r4
 800b3d2:	eb0e 0705 	add.w	r7, lr, r5
 800b3d6:	0409      	lsls	r1, r1, #16
 800b3d8:	f81e 3005 	ldrb.w	r3, [lr, r5]
 800b3dc:	f81e e015 	ldrb.w	lr, [lr, r5, lsl #1]
 800b3e0:	eb01 610a 	add.w	r1, r1, sl, lsl #24
 800b3e4:	eb07 0a45 	add.w	sl, r7, r5, lsl #1
 800b3e8:	eb0a 0004 	add.w	r0, sl, r4
 800b3ec:	041b      	lsls	r3, r3, #16
 800b3ee:	f81a a004 	ldrb.w	sl, [sl, r4]
 800b3f2:	f817 7015 	ldrb.w	r7, [r7, r5, lsl #1]
 800b3f6:	5d44      	ldrb	r4, [r0, r5]
 800b3f8:	eb03 630b 	add.w	r3, r3, fp, lsl #24
 800b3fc:	eb01 210c 	add.w	r1, r1, ip, lsl #8
 800b400:	4428      	add	r0, r5
 800b402:	eb03 230e 	add.w	r3, r3, lr, lsl #8
 800b406:	4441      	add	r1, r8
 800b408:	4430      	add	r0, r6
 800b40a:	eb04 240a 	add.w	r4, r4, sl, lsl #8
 800b40e:	441f      	add	r7, r3
 800b410:	b2cd      	uxtb	r5, r1
 800b412:	f3c1 2307 	ubfx	r3, r1, #8, #8
 800b416:	f859 6025 	ldr.w	r6, [r9, r5, lsl #2]
 800b41a:	f859 e023 	ldr.w	lr, [r9, r3, lsl #2]
 800b41e:	9b03      	ldr	r3, [sp, #12]
 800b420:	f3c1 4507 	ubfx	r5, r1, #16, #8
 800b424:	0e09      	lsrs	r1, r1, #24
 800b426:	4433      	add	r3, r6
 800b428:	f859 8025 	ldr.w	r8, [r9, r5, lsl #2]
 800b42c:	f859 6021 	ldr.w	r6, [r9, r1, lsl #2]
 800b430:	b2fd      	uxtb	r5, r7
 800b432:	eb0e 2193 	add.w	r1, lr, r3, lsr #10
 800b436:	469b      	mov	fp, r3
 800b438:	f3c7 2307 	ubfx	r3, r7, #8, #8
 800b43c:	eb08 2891 	add.w	r8, r8, r1, lsr #10
 800b440:	f859 c025 	ldr.w	ip, [r9, r5, lsl #2]
 800b444:	f859 5023 	ldr.w	r5, [r9, r3, lsl #2]
 800b448:	f3c7 4e07 	ubfx	lr, r7, #16, #8
 800b44c:	eb06 2698 	add.w	r6, r6, r8, lsr #10
 800b450:	0e3b      	lsrs	r3, r7, #24
 800b452:	eb0c 2c96 	add.w	ip, ip, r6, lsr #10
 800b456:	f859 702e 	ldr.w	r7, [r9, lr, lsl #2]
 800b45a:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800b45e:	fa5f fe84 	uxtb.w	lr, r4
 800b462:	eb05 259c 	add.w	r5, r5, ip, lsr #10
 800b466:	f3c4 2407 	ubfx	r4, r4, #8, #8
 800b46a:	eb07 2795 	add.w	r7, r7, r5, lsr #10
 800b46e:	f859 e02e 	ldr.w	lr, [r9, lr, lsl #2]
 800b472:	f859 4024 	ldr.w	r4, [r9, r4, lsl #2]
 800b476:	eb03 2397 	add.w	r3, r3, r7, lsr #10
 800b47a:	eb0e 2e93 	add.w	lr, lr, r3, lsr #10
 800b47e:	eb04 249e 	add.w	r4, r4, lr, lsr #10
 800b482:	f3c1 0109 	ubfx	r1, r1, #0, #10
 800b486:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b48a:	f3cb 0b09 	ubfx	fp, fp, #0, #10
 800b48e:	f3c7 0709 	ubfx	r7, r7, #0, #10
 800b492:	f3c6 0609 	ubfx	r6, r6, #0, #10
 800b496:	f3c5 0509 	ubfx	r5, r5, #0, #10
 800b49a:	ea41 4b0b 	orr.w	fp, r1, fp, lsl #16
 800b49e:	ea43 4707 	orr.w	r7, r3, r7, lsl #16
 800b4a2:	f3c4 0109 	ubfx	r1, r4, #0, #10
 800b4a6:	0aa3      	lsrs	r3, r4, #10
 800b4a8:	f3c8 0809 	ubfx	r8, r8, #0, #10
 800b4ac:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 800b4b0:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 800b4b4:	ea41 4e0e 	orr.w	lr, r1, lr, lsl #16
 800b4b8:	9303      	str	r3, [sp, #12]
 800b4ba:	ea46 4808 	orr.w	r8, r6, r8, lsl #16
 800b4be:	ea45 4c0c 	orr.w	ip, r5, ip, lsl #16
 800b4c2:	4b42      	ldr	r3, [pc, #264]	; (800b5cc <D80_GENERIC+0x26c>)
 800b4c4:	9901      	ldr	r1, [sp, #4]
 800b4c6:	fb2b 1303 	smlad	r3, fp, r3, r1
 800b4ca:	4941      	ldr	r1, [pc, #260]	; (800b5d0 <D80_GENERIC+0x270>)
 800b4cc:	fb28 3301 	smlad	r3, r8, r1, r3
 800b4d0:	4940      	ldr	r1, [pc, #256]	; (800b5d4 <D80_GENERIC+0x274>)
 800b4d2:	fb2c 3301 	smlad	r3, ip, r1, r3
 800b4d6:	4940      	ldr	r1, [pc, #256]	; (800b5d8 <D80_GENERIC+0x278>)
 800b4d8:	fb27 3301 	smlad	r3, r7, r1, r3
 800b4dc:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 800b4e0:	fb2e 3301 	smlad	r3, lr, r1, r3
 800b4e4:	493d      	ldr	r1, [pc, #244]	; (800b5dc <D80_GENERIC+0x27c>)
 800b4e6:	9c02      	ldr	r4, [sp, #8]
 800b4e8:	fb2b 4401 	smlad	r4, fp, r1, r4
 800b4ec:	493c      	ldr	r1, [pc, #240]	; (800b5e0 <D80_GENERIC+0x280>)
 800b4ee:	fb28 4401 	smlad	r4, r8, r1, r4
 800b4f2:	f04f 114b 	mov.w	r1, #4915275	; 0x4b004b
 800b4f6:	fb2c 4101 	smlad	r1, ip, r1, r4
 800b4fa:	4c3a      	ldr	r4, [pc, #232]	; (800b5e4 <D80_GENERIC+0x284>)
 800b4fc:	fb27 1104 	smlad	r1, r7, r4, r1
 800b500:	4c39      	ldr	r4, [pc, #228]	; (800b5e8 <D80_GENERIC+0x288>)
 800b502:	fb2e 1104 	smlad	r1, lr, r4, r1
 800b506:	9101      	str	r1, [sp, #4]
 800b508:	2101      	movs	r1, #1
 800b50a:	fb2b fb01 	smuad	fp, fp, r1
 800b50e:	4937      	ldr	r1, [pc, #220]	; (800b5ec <D80_GENERIC+0x28c>)
 800b510:	fb28 b801 	smlad	r8, r8, r1, fp
 800b514:	4d36      	ldr	r5, [pc, #216]	; (800b5f0 <D80_GENERIC+0x290>)
 800b516:	fb2c 8c05 	smlad	ip, ip, r5, r8
 800b51a:	4d36      	ldr	r5, [pc, #216]	; (800b5f4 <D80_GENERIC+0x294>)
 800b51c:	fb27 c705 	smlad	r7, r7, r5, ip
 800b520:	4d35      	ldr	r5, [pc, #212]	; (800b5f8 <D80_GENERIC+0x298>)
 800b522:	fb2e 7105 	smlad	r1, lr, r5, r7
 800b526:	9102      	str	r1, [sp, #8]
 800b528:	9908      	ldr	r1, [sp, #32]
 800b52a:	f5a3 337a 	sub.w	r3, r3, #256000	; 0x3e800
 800b52e:	b181      	cbz	r1, 800b552 <D80_GENERIC+0x1f2>
 800b530:	9c04      	ldr	r4, [sp, #16]
 800b532:	9d05      	ldr	r5, [sp, #20]
 800b534:	9305      	str	r3, [sp, #20]
 800b536:	441c      	add	r4, r3
 800b538:	1b64      	subs	r4, r4, r5
 800b53a:	17e7      	asrs	r7, r4, #31
 800b53c:	fba4 4501 	umull	r4, r5, r4, r1
 800b540:	fb01 5507 	mla	r5, r1, r7, r5
 800b544:	f114 4400 	adds.w	r4, r4, #2147483648	; 0x80000000
 800b548:	f145 0500 	adc.w	r5, r5, #0
 800b54c:	0069      	lsls	r1, r5, #1
 800b54e:	9104      	str	r1, [sp, #16]
 800b550:	460b      	mov	r3, r1
 800b552:	9e00      	ldr	r6, [sp, #0]
 800b554:	9f06      	ldr	r7, [sp, #24]
 800b556:	8d31      	ldrh	r1, [r6, #40]	; 0x28
 800b558:	025b      	lsls	r3, r3, #9
 800b55a:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800b55e:	2500      	movs	r5, #0
 800b560:	fb02 f101 	mul.w	r1, r2, r1
 800b564:	fbc7 4503 	smlal	r4, r5, r7, r3
 800b568:	9c07      	ldr	r4, [sp, #28]
 800b56a:	10ab      	asrs	r3, r5, #2
 800b56c:	f303 030f 	ssat	r3, #16, r3
 800b570:	f824 3011 	strh.w	r3, [r4, r1, lsl #1]
 800b574:	8cf3      	ldrh	r3, [r6, #38]	; 0x26
 800b576:	3201      	adds	r2, #1
 800b578:	4293      	cmp	r3, r2
 800b57a:	dd13      	ble.n	800b5a4 <D80_GENERIC+0x244>
 800b57c:	9b00      	ldr	r3, [sp, #0]
 800b57e:	f8b3 c02a 	ldrh.w	ip, [r3, #42]	; 0x2a
 800b582:	f1bc 0f01 	cmp.w	ip, #1
 800b586:	f47f af0b 	bne.w	800b3a0 <D80_GENERIC+0x40>
 800b58a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b58c:	6884      	ldr	r4, [r0, #8]
 800b58e:	069b      	lsls	r3, r3, #26
 800b590:	e890 0082 	ldmia.w	r0, {r1, r7}
 800b594:	f100 000a 	add.w	r0, r0, #10
 800b598:	f57f af3a 	bpl.w	800b410 <D80_GENERIC+0xb0>
 800b59c:	ba49      	rev16	r1, r1
 800b59e:	ba7f      	rev16	r7, r7
 800b5a0:	ba64      	rev16	r4, r4
 800b5a2:	e735      	b.n	800b410 <D80_GENERIC+0xb0>
 800b5a4:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800b5a8:	4632      	mov	r2, r6
 800b5aa:	9b02      	ldr	r3, [sp, #8]
 800b5ac:	6093      	str	r3, [r2, #8]
 800b5ae:	9b01      	ldr	r3, [sp, #4]
 800b5b0:	60d3      	str	r3, [r2, #12]
 800b5b2:	9b04      	ldr	r3, [sp, #16]
 800b5b4:	6113      	str	r3, [r2, #16]
 800b5b6:	9b05      	ldr	r3, [sp, #20]
 800b5b8:	6153      	str	r3, [r2, #20]
 800b5ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b5bc:	f8c2 b01c 	str.w	fp, [r2, #28]
 800b5c0:	2000      	movs	r0, #0
 800b5c2:	6193      	str	r3, [r2, #24]
 800b5c4:	b00b      	add	sp, #44	; 0x2c
 800b5c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b5ca:	bf00      	nop
 800b5cc:	002d0024 	.word	0x002d0024
 800b5d0:	001c0015 	.word	0x001c0015
 800b5d4:	000f000a 	.word	0x000f000a
 800b5d8:	00060003 	.word	0x00060003
 800b5dc:	0037003f 	.word	0x0037003f
 800b5e0:	00450049 	.word	0x00450049
 800b5e4:	00490045 	.word	0x00490045
 800b5e8:	003f0037 	.word	0x003f0037
 800b5ec:	00030006 	.word	0x00030006
 800b5f0:	000a000f 	.word	0x000a000f
 800b5f4:	0015001c 	.word	0x0015001c
 800b5f8:	0024002d 	.word	0x0024002d
 800b5fc:	20000000 	.word	0x20000000

0800b600 <D128_GENERIC>:
 800b600:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b604:	b093      	sub	sp, #76	; 0x4c
 800b606:	8cd3      	ldrh	r3, [r2, #38]	; 0x26
 800b608:	9005      	str	r0, [sp, #20]
 800b60a:	4610      	mov	r0, r2
 800b60c:	9201      	str	r2, [sp, #4]
 800b60e:	6912      	ldr	r2, [r2, #16]
 800b610:	920c      	str	r2, [sp, #48]	; 0x30
 800b612:	4602      	mov	r2, r0
 800b614:	6940      	ldr	r0, [r0, #20]
 800b616:	900d      	str	r0, [sp, #52]	; 0x34
 800b618:	4610      	mov	r0, r2
 800b61a:	4614      	mov	r4, r2
 800b61c:	6992      	ldr	r2, [r2, #24]
 800b61e:	9211      	str	r2, [sp, #68]	; 0x44
 800b620:	69c2      	ldr	r2, [r0, #28]
 800b622:	9202      	str	r2, [sp, #8]
 800b624:	68e2      	ldr	r2, [r4, #12]
 800b626:	6880      	ldr	r0, [r0, #8]
 800b628:	9203      	str	r2, [sp, #12]
 800b62a:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800b62c:	9004      	str	r0, [sp, #16]
 800b62e:	920e      	str	r2, [sp, #56]	; 0x38
 800b630:	910f      	str	r1, [sp, #60]	; 0x3c
 800b632:	2b00      	cmp	r3, #0
 800b634:	f000 819b 	beq.w	800b96e <D128_GENERIC+0x36e>
 800b638:	6a23      	ldr	r3, [r4, #32]
 800b63a:	9310      	str	r3, [sp, #64]	; 0x40
 800b63c:	2300      	movs	r3, #0
 800b63e:	f8df 93a8 	ldr.w	r9, [pc, #936]	; 800b9e8 <D128_GENERIC+0x3e8>
 800b642:	9306      	str	r3, [sp, #24]
 800b644:	e17a      	b.n	800b93c <D128_GENERIC+0x33c>
 800b646:	b2d2      	uxtb	r2, r2
 800b648:	9d05      	ldr	r5, [sp, #20]
 800b64a:	b214      	sxth	r4, r2
 800b64c:	eb04 0a44 	add.w	sl, r4, r4, lsl #1
 800b650:	4250      	negs	r0, r2
 800b652:	eb05 010a 	add.w	r1, r5, sl
 800b656:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800b65a:	eb01 0800 	add.w	r8, r1, r0
 800b65e:	eb0b 0c04 	add.w	ip, fp, r4
 800b662:	eb08 070c 	add.w	r7, r8, ip
 800b666:	183b      	adds	r3, r7, r0
 800b668:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
 800b66c:	eb03 0e40 	add.w	lr, r3, r0, lsl #1
 800b670:	eb0e 0604 	add.w	r6, lr, r4
 800b674:	9307      	str	r3, [sp, #28]
 800b676:	1833      	adds	r3, r6, r0
 800b678:	9305      	str	r3, [sp, #20]
 800b67a:	462b      	mov	r3, r5
 800b67c:	f815 a00a 	ldrb.w	sl, [r5, sl]
 800b680:	f8cd a020 	str.w	sl, [sp, #32]
 800b684:	f818 a00c 	ldrb.w	sl, [r8, ip]
 800b688:	f813 c002 	ldrb.w	ip, [r3, r2]
 800b68c:	f81e 8004 	ldrb.w	r8, [lr, r4]
 800b690:	5c3a      	ldrb	r2, [r7, r0]
 800b692:	f817 e010 	ldrb.w	lr, [r7, r0, lsl #1]
 800b696:	781f      	ldrb	r7, [r3, #0]
 800b698:	9b07      	ldr	r3, [sp, #28]
 800b69a:	9d05      	ldr	r5, [sp, #20]
 800b69c:	f813 3010 	ldrb.w	r3, [r3, r0, lsl #1]
 800b6a0:	5c09      	ldrb	r1, [r1, r0]
 800b6a2:	9709      	str	r7, [sp, #36]	; 0x24
 800b6a4:	9307      	str	r3, [sp, #28]
 800b6a6:	f816 7010 	ldrb.w	r7, [r6, r0, lsl #1]
 800b6aa:	5c33      	ldrb	r3, [r6, r0]
 800b6ac:	0412      	lsls	r2, r2, #16
 800b6ae:	eb05 0640 	add.w	r6, r5, r0, lsl #1
 800b6b2:	eb02 620a 	add.w	r2, r2, sl, lsl #24
 800b6b6:	9d08      	ldr	r5, [sp, #32]
 800b6b8:	eb06 0a04 	add.w	sl, r6, r4
 800b6bc:	0409      	lsls	r1, r1, #16
 800b6be:	eb01 6105 	add.w	r1, r1, r5, lsl #24
 800b6c2:	f81a 5000 	ldrb.w	r5, [sl, r0]
 800b6c6:	5d36      	ldrb	r6, [r6, r4]
 800b6c8:	9c05      	ldr	r4, [sp, #20]
 800b6ca:	042d      	lsls	r5, r5, #16
 800b6cc:	eb05 6606 	add.w	r6, r5, r6, lsl #24
 800b6d0:	eb01 210c 	add.w	r1, r1, ip, lsl #8
 800b6d4:	f81a 5010 	ldrb.w	r5, [sl, r0, lsl #1]
 800b6d8:	f814 4010 	ldrb.w	r4, [r4, r0, lsl #1]
 800b6dc:	eb0a 0c00 	add.w	ip, sl, r0
 800b6e0:	041b      	lsls	r3, r3, #16
 800b6e2:	eb03 6308 	add.w	r3, r3, r8, lsl #24
 800b6e6:	eb06 2605 	add.w	r6, r6, r5, lsl #8
 800b6ea:	f81c a010 	ldrb.w	sl, [ip, r0, lsl #1]
 800b6ee:	9d07      	ldr	r5, [sp, #28]
 800b6f0:	eb03 2307 	add.w	r3, r3, r7, lsl #8
 800b6f4:	eb0c 0040 	add.w	r0, ip, r0, lsl #1
 800b6f8:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800b6fa:	4458      	add	r0, fp
 800b6fc:	eb02 220e 	add.w	r2, r2, lr, lsl #8
 800b700:	9005      	str	r0, [sp, #20]
 800b702:	4439      	add	r1, r7
 800b704:	442a      	add	r2, r5
 800b706:	44b2      	add	sl, r6
 800b708:	1918      	adds	r0, r3, r4
 800b70a:	b2cb      	uxtb	r3, r1
 800b70c:	f3c1 2407 	ubfx	r4, r1, #8, #8
 800b710:	9e02      	ldr	r6, [sp, #8]
 800b712:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800b716:	f859 5024 	ldr.w	r5, [r9, r4, lsl #2]
 800b71a:	f3c1 4407 	ubfx	r4, r1, #16, #8
 800b71e:	441e      	add	r6, r3
 800b720:	0e09      	lsrs	r1, r1, #24
 800b722:	4633      	mov	r3, r6
 800b724:	f859 6024 	ldr.w	r6, [r9, r4, lsl #2]
 800b728:	f859 7021 	ldr.w	r7, [r9, r1, lsl #2]
 800b72c:	b2d4      	uxtb	r4, r2
 800b72e:	eb05 2593 	add.w	r5, r5, r3, lsr #10
 800b732:	f3c2 2107 	ubfx	r1, r2, #8, #8
 800b736:	eb06 2b95 	add.w	fp, r6, r5, lsr #10
 800b73a:	f859 6024 	ldr.w	r6, [r9, r4, lsl #2]
 800b73e:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800b742:	f3c2 4407 	ubfx	r4, r2, #16, #8
 800b746:	0e12      	lsrs	r2, r2, #24
 800b748:	eb07 279b 	add.w	r7, r7, fp, lsr #10
 800b74c:	eb06 2897 	add.w	r8, r6, r7, lsr #10
 800b750:	f859 6024 	ldr.w	r6, [r9, r4, lsl #2]
 800b754:	f859 4022 	ldr.w	r4, [r9, r2, lsl #2]
 800b758:	9702      	str	r7, [sp, #8]
 800b75a:	b2c2      	uxtb	r2, r0
 800b75c:	eb01 2198 	add.w	r1, r1, r8, lsr #10
 800b760:	eb06 2c91 	add.w	ip, r6, r1, lsr #10
 800b764:	f859 6022 	ldr.w	r6, [r9, r2, lsl #2]
 800b768:	eb04 249c 	add.w	r4, r4, ip, lsr #10
 800b76c:	f3c0 2207 	ubfx	r2, r0, #8, #8
 800b770:	eb06 2e94 	add.w	lr, r6, r4, lsr #10
 800b774:	f3c0 4607 	ubfx	r6, r0, #16, #8
 800b778:	f859 2022 	ldr.w	r2, [r9, r2, lsl #2]
 800b77c:	f859 7026 	ldr.w	r7, [r9, r6, lsl #2]
 800b780:	0e00      	lsrs	r0, r0, #24
 800b782:	fa5f f68a 	uxtb.w	r6, sl
 800b786:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b78a:	9309      	str	r3, [sp, #36]	; 0x24
 800b78c:	f859 0020 	ldr.w	r0, [r9, r0, lsl #2]
 800b790:	f859 6026 	ldr.w	r6, [r9, r6, lsl #2]
 800b794:	eb02 229e 	add.w	r2, r2, lr, lsr #10
 800b798:	f3ca 2307 	ubfx	r3, sl, #8, #8
 800b79c:	f3c5 0509 	ubfx	r5, r5, #0, #10
 800b7a0:	950a      	str	r5, [sp, #40]	; 0x28
 800b7a2:	eb07 2792 	add.w	r7, r7, r2, lsr #10
 800b7a6:	f3ca 4507 	ubfx	r5, sl, #16, #8
 800b7aa:	eb00 2097 	add.w	r0, r0, r7, lsr #10
 800b7ae:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800b7b2:	f859 5025 	ldr.w	r5, [r9, r5, lsl #2]
 800b7b6:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800b7ba:	920b      	str	r2, [sp, #44]	; 0x2c
 800b7bc:	eb06 2690 	add.w	r6, r6, r0, lsr #10
 800b7c0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b7c2:	eb03 2396 	add.w	r3, r3, r6, lsr #10
 800b7c6:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 800b7ca:	9307      	str	r3, [sp, #28]
 800b7cc:	eb05 2593 	add.w	r5, r5, r3, lsr #10
 800b7d0:	ea4f 6a1a 	mov.w	sl, sl, lsr #24
 800b7d4:	9b02      	ldr	r3, [sp, #8]
 800b7d6:	f8cd c008 	str.w	ip, [sp, #8]
 800b7da:	4694      	mov	ip, r2
 800b7dc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b7de:	f859 a02a 	ldr.w	sl, [r9, sl, lsl #2]
 800b7e2:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 800b7e6:	9a02      	ldr	r2, [sp, #8]
 800b7e8:	f3c4 0409 	ubfx	r4, r4, #0, #10
 800b7ec:	eb0a 2a95 	add.w	sl, sl, r5, lsr #10
 800b7f0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800b7f4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b7f6:	f8cd a020 	str.w	sl, [sp, #32]
 800b7fa:	f3c8 0809 	ubfx	r8, r8, #0, #10
 800b7fe:	f3c3 0a09 	ubfx	sl, r3, #0, #10
 800b802:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 800b806:	9b07      	ldr	r3, [sp, #28]
 800b808:	f3c1 0109 	ubfx	r1, r1, #0, #10
 800b80c:	ea41 4108 	orr.w	r1, r1, r8, lsl #16
 800b810:	ea42 480e 	orr.w	r8, r2, lr, lsl #16
 800b814:	9a08      	ldr	r2, [sp, #32]
 800b816:	f3c6 0609 	ubfx	r6, r6, #0, #10
 800b81a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b81e:	f3cb 0b09 	ubfx	fp, fp, #0, #10
 800b822:	f3c7 0709 	ubfx	r7, r7, #0, #10
 800b826:	f3c2 0e09 	ubfx	lr, r2, #0, #10
 800b82a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800b82e:	f3c0 0009 	ubfx	r0, r0, #0, #10
 800b832:	0a96      	lsrs	r6, r2, #10
 800b834:	f3c5 0509 	ubfx	r5, r5, #0, #10
 800b838:	9602      	str	r6, [sp, #8]
 800b83a:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 800b83e:	ea4a 4a0b 	orr.w	sl, sl, fp, lsl #16
 800b842:	ea4e 4505 	orr.w	r5, lr, r5, lsl #16
 800b846:	4e53      	ldr	r6, [pc, #332]	; (800b994 <D128_GENERIC+0x394>)
 800b848:	9f03      	ldr	r7, [sp, #12]
 800b84a:	fb2c 7606 	smlad	r6, ip, r6, r7
 800b84e:	4f52      	ldr	r7, [pc, #328]	; (800b998 <D128_GENERIC+0x398>)
 800b850:	fb2a 6607 	smlad	r6, sl, r7, r6
 800b854:	4f51      	ldr	r7, [pc, #324]	; (800b99c <D128_GENERIC+0x39c>)
 800b856:	fb21 6607 	smlad	r6, r1, r7, r6
 800b85a:	4f51      	ldr	r7, [pc, #324]	; (800b9a0 <D128_GENERIC+0x3a0>)
 800b85c:	fb24 6607 	smlad	r6, r4, r7, r6
 800b860:	4f50      	ldr	r7, [pc, #320]	; (800b9a4 <D128_GENERIC+0x3a4>)
 800b862:	fb28 6607 	smlad	r6, r8, r7, r6
 800b866:	4f50      	ldr	r7, [pc, #320]	; (800b9a8 <D128_GENERIC+0x3a8>)
 800b868:	fb20 6607 	smlad	r6, r0, r7, r6
 800b86c:	4f4f      	ldr	r7, [pc, #316]	; (800b9ac <D128_GENERIC+0x3ac>)
 800b86e:	fb23 6607 	smlad	r6, r3, r7, r6
 800b872:	f44f 3780 	mov.w	r7, #65536	; 0x10000
 800b876:	fb25 6607 	smlad	r6, r5, r7, r6
 800b87a:	4f4d      	ldr	r7, [pc, #308]	; (800b9b0 <D128_GENERIC+0x3b0>)
 800b87c:	9a04      	ldr	r2, [sp, #16]
 800b87e:	fb2c 2e07 	smlad	lr, ip, r7, r2
 800b882:	4a4c      	ldr	r2, [pc, #304]	; (800b9b4 <D128_GENERIC+0x3b4>)
 800b884:	fb2a ee02 	smlad	lr, sl, r2, lr
 800b888:	4f4b      	ldr	r7, [pc, #300]	; (800b9b8 <D128_GENERIC+0x3b8>)
 800b88a:	fb21 ee07 	smlad	lr, r1, r7, lr
 800b88e:	4f4b      	ldr	r7, [pc, #300]	; (800b9bc <D128_GENERIC+0x3bc>)
 800b890:	fb24 ee07 	smlad	lr, r4, r7, lr
 800b894:	4f4a      	ldr	r7, [pc, #296]	; (800b9c0 <D128_GENERIC+0x3c0>)
 800b896:	fb28 ee07 	smlad	lr, r8, r7, lr
 800b89a:	4f4a      	ldr	r7, [pc, #296]	; (800b9c4 <D128_GENERIC+0x3c4>)
 800b89c:	fb20 ee07 	smlad	lr, r0, r7, lr
 800b8a0:	4f49      	ldr	r7, [pc, #292]	; (800b9c8 <D128_GENERIC+0x3c8>)
 800b8a2:	fb23 e707 	smlad	r7, r3, r7, lr
 800b8a6:	f8df e144 	ldr.w	lr, [pc, #324]	; 800b9ec <D128_GENERIC+0x3ec>
 800b8aa:	fb25 720e 	smlad	r2, r5, lr, r7
 800b8ae:	f04f 0b01 	mov.w	fp, #1
 800b8b2:	9203      	str	r2, [sp, #12]
 800b8b4:	fb2c fb0b 	smuad	fp, ip, fp
 800b8b8:	4f44      	ldr	r7, [pc, #272]	; (800b9cc <D128_GENERIC+0x3cc>)
 800b8ba:	fb2a ba07 	smlad	sl, sl, r7, fp
 800b8be:	4f44      	ldr	r7, [pc, #272]	; (800b9d0 <D128_GENERIC+0x3d0>)
 800b8c0:	fb21 aa07 	smlad	sl, r1, r7, sl
 800b8c4:	4f43      	ldr	r7, [pc, #268]	; (800b9d4 <D128_GENERIC+0x3d4>)
 800b8c6:	fb24 aa07 	smlad	sl, r4, r7, sl
 800b8ca:	4f43      	ldr	r7, [pc, #268]	; (800b9d8 <D128_GENERIC+0x3d8>)
 800b8cc:	fb28 a707 	smlad	r7, r8, r7, sl
 800b8d0:	4a42      	ldr	r2, [pc, #264]	; (800b9dc <D128_GENERIC+0x3dc>)
 800b8d2:	fb20 7702 	smlad	r7, r0, r2, r7
 800b8d6:	4a42      	ldr	r2, [pc, #264]	; (800b9e0 <D128_GENERIC+0x3e0>)
 800b8d8:	fb23 7702 	smlad	r7, r3, r2, r7
 800b8dc:	4b41      	ldr	r3, [pc, #260]	; (800b9e4 <D128_GENERIC+0x3e4>)
 800b8de:	fb25 7303 	smlad	r3, r5, r3, r7
 800b8e2:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800b8e4:	9304      	str	r3, [sp, #16]
 800b8e6:	f5a6 1680 	sub.w	r6, r6, #1048576	; 0x100000
 800b8ea:	b185      	cbz	r5, 800b90e <D128_GENERIC+0x30e>
 800b8ec:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b8ee:	990d      	ldr	r1, [sp, #52]	; 0x34
 800b8f0:	960d      	str	r6, [sp, #52]	; 0x34
 800b8f2:	4432      	add	r2, r6
 800b8f4:	1a52      	subs	r2, r2, r1
 800b8f6:	17d1      	asrs	r1, r2, #31
 800b8f8:	fba2 2305 	umull	r2, r3, r2, r5
 800b8fc:	fb05 3301 	mla	r3, r5, r1, r3
 800b900:	f112 4200 	adds.w	r2, r2, #2147483648	; 0x80000000
 800b904:	f143 0300 	adc.w	r3, r3, #0
 800b908:	005b      	lsls	r3, r3, #1
 800b90a:	930c      	str	r3, [sp, #48]	; 0x30
 800b90c:	461e      	mov	r6, r3
 800b90e:	9801      	ldr	r0, [sp, #4]
 800b910:	9c06      	ldr	r4, [sp, #24]
 800b912:	8d01      	ldrh	r1, [r0, #40]	; 0x28
 800b914:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 800b916:	01f6      	lsls	r6, r6, #7
 800b918:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800b91c:	2300      	movs	r3, #0
 800b91e:	fbc5 2306 	smlal	r2, r3, r5, r6
 800b922:	fb04 f101 	mul.w	r1, r4, r1
 800b926:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800b928:	109b      	asrs	r3, r3, #2
 800b92a:	f303 030f 	ssat	r3, #16, r3
 800b92e:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
 800b932:	8cc3      	ldrh	r3, [r0, #38]	; 0x26
 800b934:	1c62      	adds	r2, r4, #1
 800b936:	4293      	cmp	r3, r2
 800b938:	9206      	str	r2, [sp, #24]
 800b93a:	dd18      	ble.n	800b96e <D128_GENERIC+0x36e>
 800b93c:	9b01      	ldr	r3, [sp, #4]
 800b93e:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800b940:	2a01      	cmp	r2, #1
 800b942:	f47f ae80 	bne.w	800b646 <D128_GENERIC+0x46>
 800b946:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b948:	9d05      	ldr	r5, [sp, #20]
 800b94a:	069b      	lsls	r3, r3, #26
 800b94c:	6829      	ldr	r1, [r5, #0]
 800b94e:	686a      	ldr	r2, [r5, #4]
 800b950:	68a8      	ldr	r0, [r5, #8]
 800b952:	f8d5 a00c 	ldr.w	sl, [r5, #12]
 800b956:	f105 0410 	add.w	r4, r5, #16
 800b95a:	d506      	bpl.n	800b96a <D128_GENERIC+0x36a>
 800b95c:	ba49      	rev16	r1, r1
 800b95e:	ba52      	rev16	r2, r2
 800b960:	ba40      	rev16	r0, r0
 800b962:	fa9a fa9a 	rev16.w	sl, sl
 800b966:	9405      	str	r4, [sp, #20]
 800b968:	e6cf      	b.n	800b70a <D128_GENERIC+0x10a>
 800b96a:	9405      	str	r4, [sp, #20]
 800b96c:	e6cd      	b.n	800b70a <D128_GENERIC+0x10a>
 800b96e:	9a01      	ldr	r2, [sp, #4]
 800b970:	9904      	ldr	r1, [sp, #16]
 800b972:	6091      	str	r1, [r2, #8]
 800b974:	9903      	ldr	r1, [sp, #12]
 800b976:	60d1      	str	r1, [r2, #12]
 800b978:	9b02      	ldr	r3, [sp, #8]
 800b97a:	61d3      	str	r3, [r2, #28]
 800b97c:	4611      	mov	r1, r2
 800b97e:	4613      	mov	r3, r2
 800b980:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b982:	610a      	str	r2, [r1, #16]
 800b984:	990d      	ldr	r1, [sp, #52]	; 0x34
 800b986:	6159      	str	r1, [r3, #20]
 800b988:	9911      	ldr	r1, [sp, #68]	; 0x44
 800b98a:	6199      	str	r1, [r3, #24]
 800b98c:	2000      	movs	r0, #0
 800b98e:	b013      	add	sp, #76	; 0x4c
 800b990:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b994:	00780069 	.word	0x00780069
 800b998:	005b004e 	.word	0x005b004e
 800b99c:	00420037 	.word	0x00420037
 800b9a0:	002d0024 	.word	0x002d0024
 800b9a4:	001c0015 	.word	0x001c0015
 800b9a8:	000f000a 	.word	0x000f000a
 800b9ac:	00060003 	.word	0x00060003
 800b9b0:	00880096 	.word	0x00880096
 800b9b4:	00a200ac 	.word	0x00a200ac
 800b9b8:	00b400ba 	.word	0x00b400ba
 800b9bc:	00be00c0 	.word	0x00be00c0
 800b9c0:	00c000be 	.word	0x00c000be
 800b9c4:	00ba00b4 	.word	0x00ba00b4
 800b9c8:	00ac00a2 	.word	0x00ac00a2
 800b9cc:	00030006 	.word	0x00030006
 800b9d0:	000a000f 	.word	0x000a000f
 800b9d4:	0015001c 	.word	0x0015001c
 800b9d8:	0024002d 	.word	0x0024002d
 800b9dc:	00370042 	.word	0x00370042
 800b9e0:	004e005b 	.word	0x004e005b
 800b9e4:	00690078 	.word	0x00690078
 800b9e8:	20000000 	.word	0x20000000
 800b9ec:	00960088 	.word	0x00960088

0800b9f0 <D16_1CH_HTONS_VOL_HP>:
 800b9f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b9f4:	4691      	mov	r9, r2
 800b9f6:	b083      	sub	sp, #12
 800b9f8:	8cd2      	ldrh	r2, [r2, #38]	; 0x26
 800b9fa:	f8d9 3018 	ldr.w	r3, [r9, #24]
 800b9fe:	f8d9 400c 	ldr.w	r4, [r9, #12]
 800ba02:	9300      	str	r3, [sp, #0]
 800ba04:	4680      	mov	r8, r0
 800ba06:	f8d9 7014 	ldr.w	r7, [r9, #20]
 800ba0a:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800ba0e:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800ba12:	f8d9 5008 	ldr.w	r5, [r9, #8]
 800ba16:	9401      	str	r4, [sp, #4]
 800ba18:	f8d9 a030 	ldr.w	sl, [r9, #48]	; 0x30
 800ba1c:	f8d9 e020 	ldr.w	lr, [r9, #32]
 800ba20:	2a00      	cmp	r2, #0
 800ba22:	d04e      	beq.n	800bac2 <D16_1CH_HTONS_VOL_HP+0xd2>
 800ba24:	f8df c0a8 	ldr.w	ip, [pc, #168]	; 800bad0 <D16_1CH_HTONS_VOL_HP+0xe0>
 800ba28:	1e8c      	subs	r4, r1, #2
 800ba2a:	eb08 0b42 	add.w	fp, r8, r2, lsl #1
 800ba2e:	f858 2b02 	ldr.w	r2, [r8], #2
 800ba32:	ba52      	rev16	r2, r2
 800ba34:	b2d6      	uxtb	r6, r2
 800ba36:	f3c2 2107 	ubfx	r1, r2, #8, #8
 800ba3a:	f85c 2026 	ldr.w	r2, [ip, r6, lsl #2]
 800ba3e:	f85c 1021 	ldr.w	r1, [ip, r1, lsl #2]
 800ba42:	4413      	add	r3, r2
 800ba44:	eb01 2293 	add.w	r2, r1, r3, lsr #10
 800ba48:	f3c2 0109 	ubfx	r1, r2, #0, #10
 800ba4c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800ba50:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800ba54:	0a93      	lsrs	r3, r2, #10
 800ba56:	4a1c      	ldr	r2, [pc, #112]	; (800bac8 <D16_1CH_HTONS_VOL_HP+0xd8>)
 800ba58:	fb21 5202 	smlad	r2, r1, r2, r5
 800ba5c:	4d1b      	ldr	r5, [pc, #108]	; (800bacc <D16_1CH_HTONS_VOL_HP+0xdc>)
 800ba5e:	fb21 f505 	smuad	r5, r1, r5
 800ba62:	f5a2 6200 	sub.w	r2, r2, #2048	; 0x800
 800ba66:	4410      	add	r0, r2
 800ba68:	1bc0      	subs	r0, r0, r7
 800ba6a:	17c7      	asrs	r7, r0, #31
 800ba6c:	fba0 010e 	umull	r0, r1, r0, lr
 800ba70:	f110 4000 	adds.w	r0, r0, #2147483648	; 0x80000000
 800ba74:	fb0e 1107 	mla	r1, lr, r7, r1
 800ba78:	f141 0100 	adc.w	r1, r1, #0
 800ba7c:	0448      	lsls	r0, r1, #17
 800ba7e:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800ba82:	2700      	movs	r7, #0
 800ba84:	fbc0 670a 	smlal	r6, r7, r0, sl
 800ba88:	45d8      	cmp	r8, fp
 800ba8a:	ea4f 0041 	mov.w	r0, r1, lsl #1
 800ba8e:	ea4f 01a7 	mov.w	r1, r7, asr #2
 800ba92:	4617      	mov	r7, r2
 800ba94:	f301 010f 	ssat	r1, #16, r1
 800ba98:	f824 1f02 	strh.w	r1, [r4, #2]!
 800ba9c:	d1c7      	bne.n	800ba2e <D16_1CH_HTONS_VOL_HP+0x3e>
 800ba9e:	9901      	ldr	r1, [sp, #4]
 800baa0:	f8c9 301c 	str.w	r3, [r9, #28]
 800baa4:	9b00      	ldr	r3, [sp, #0]
 800baa6:	f8c9 0010 	str.w	r0, [r9, #16]
 800baaa:	2000      	movs	r0, #0
 800baac:	f8c9 5008 	str.w	r5, [r9, #8]
 800bab0:	f8c9 100c 	str.w	r1, [r9, #12]
 800bab4:	f8c9 2014 	str.w	r2, [r9, #20]
 800bab8:	f8c9 3018 	str.w	r3, [r9, #24]
 800babc:	b003      	add	sp, #12
 800babe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bac2:	463a      	mov	r2, r7
 800bac4:	4621      	mov	r1, r4
 800bac6:	e7eb      	b.n	800baa0 <D16_1CH_HTONS_VOL_HP+0xb0>
 800bac8:	00030001 	.word	0x00030001
 800bacc:	00010003 	.word	0x00010003
 800bad0:	20000000 	.word	0x20000000

0800bad4 <D24_1CH_HTONS_VOL_HP>:
 800bad4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bad8:	b089      	sub	sp, #36	; 0x24
 800bada:	8cd3      	ldrh	r3, [r2, #38]	; 0x26
 800badc:	6996      	ldr	r6, [r2, #24]
 800bade:	9304      	str	r3, [sp, #16]
 800bae0:	6b17      	ldr	r7, [r2, #48]	; 0x30
 800bae2:	9207      	str	r2, [sp, #28]
 800bae4:	6915      	ldr	r5, [r2, #16]
 800bae6:	6954      	ldr	r4, [r2, #20]
 800bae8:	9606      	str	r6, [sp, #24]
 800baea:	6893      	ldr	r3, [r2, #8]
 800baec:	69d6      	ldr	r6, [r2, #28]
 800baee:	f8d2 c00c 	ldr.w	ip, [r2, #12]
 800baf2:	f8d2 a020 	ldr.w	sl, [r2, #32]
 800baf6:	9a04      	ldr	r2, [sp, #16]
 800baf8:	9705      	str	r7, [sp, #20]
 800bafa:	2a00      	cmp	r2, #0
 800bafc:	d07e      	beq.n	800bbfc <D24_1CH_HTONS_VOL_HP+0x128>
 800bafe:	f1a1 0b02 	sub.w	fp, r1, #2
 800bb02:	2700      	movs	r7, #0
 800bb04:	46a8      	mov	r8, r5
 800bb06:	f8cd b004 	str.w	fp, [sp, #4]
 800bb0a:	4655      	mov	r5, sl
 800bb0c:	46e3      	mov	fp, ip
 800bb0e:	f8df e0f8 	ldr.w	lr, [pc, #248]	; 800bc08 <D24_1CH_HTONS_VOL_HP+0x134>
 800bb12:	46ba      	mov	sl, r7
 800bb14:	469c      	mov	ip, r3
 800bb16:	e055      	b.n	800bbc4 <D24_1CH_HTONS_VOL_HP+0xf0>
 800bb18:	7802      	ldrb	r2, [r0, #0]
 800bb1a:	78c3      	ldrb	r3, [r0, #3]
 800bb1c:	7841      	ldrb	r1, [r0, #1]
 800bb1e:	0212      	lsls	r2, r2, #8
 800bb20:	eb02 4303 	add.w	r3, r2, r3, lsl #16
 800bb24:	440b      	add	r3, r1
 800bb26:	3002      	adds	r0, #2
 800bb28:	b2d9      	uxtb	r1, r3
 800bb2a:	f3c3 2207 	ubfx	r2, r3, #8, #8
 800bb2e:	f85e 7021 	ldr.w	r7, [lr, r1, lsl #2]
 800bb32:	f85e 2022 	ldr.w	r2, [lr, r2, lsl #2]
 800bb36:	0c1b      	lsrs	r3, r3, #16
 800bb38:	eb07 2796 	add.w	r7, r7, r6, lsr #10
 800bb3c:	eb02 2297 	add.w	r2, r2, r7, lsr #10
 800bb40:	f85e 6023 	ldr.w	r6, [lr, r3, lsl #2]
 800bb44:	f3c7 0309 	ubfx	r3, r7, #0, #10
 800bb48:	f3c2 0709 	ubfx	r7, r2, #0, #10
 800bb4c:	eb06 2692 	add.w	r6, r6, r2, lsr #10
 800bb50:	ea47 4303 	orr.w	r3, r7, r3, lsl #16
 800bb54:	4a2a      	ldr	r2, [pc, #168]	; (800bc00 <D24_1CH_HTONS_VOL_HP+0x12c>)
 800bb56:	fb23 b102 	smlad	r1, r3, r2, fp
 800bb5a:	4a2a      	ldr	r2, [pc, #168]	; (800bc04 <D24_1CH_HTONS_VOL_HP+0x130>)
 800bb5c:	fb23 cb02 	smlad	fp, r3, r2, ip
 800bb60:	f3c6 0c09 	ubfx	ip, r6, #0, #10
 800bb64:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 800bb68:	eb0b 0b4c 	add.w	fp, fp, ip, lsl #1
 800bb6c:	2201      	movs	r2, #1
 800bb6e:	fb23 f702 	smuad	r7, r3, r2
 800bb72:	f5a1 51d8 	sub.w	r1, r1, #6912	; 0x1b00
 800bb76:	eb01 0208 	add.w	r2, r1, r8
 800bb7a:	1b12      	subs	r2, r2, r4
 800bb7c:	17d4      	asrs	r4, r2, #31
 800bb7e:	fba2 2305 	umull	r2, r3, r2, r5
 800bb82:	f112 4200 	adds.w	r2, r2, #2147483648	; 0x80000000
 800bb86:	fb05 3304 	mla	r3, r5, r4, r3
 800bb8a:	f143 0300 	adc.w	r3, r3, #0
 800bb8e:	9c05      	ldr	r4, [sp, #20]
 800bb90:	03da      	lsls	r2, r3, #15
 800bb92:	f04f 4800 	mov.w	r8, #2147483648	; 0x80000000
 800bb96:	f04f 0900 	mov.w	r9, #0
 800bb9a:	fbc4 8902 	smlal	r8, r9, r4, r2
 800bb9e:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800bba2:	9a01      	ldr	r2, [sp, #4]
 800bba4:	ea4f 0843 	mov.w	r8, r3, lsl #1
 800bba8:	9b03      	ldr	r3, [sp, #12]
 800bbaa:	109b      	asrs	r3, r3, #2
 800bbac:	f303 030f 	ssat	r3, #16, r3
 800bbb0:	f822 3f02 	strh.w	r3, [r2, #2]!
 800bbb4:	9b04      	ldr	r3, [sp, #16]
 800bbb6:	9201      	str	r2, [sp, #4]
 800bbb8:	f10a 0a01 	add.w	sl, sl, #1
 800bbbc:	459a      	cmp	sl, r3
 800bbbe:	44bc      	add	ip, r7
 800bbc0:	460c      	mov	r4, r1
 800bbc2:	d00b      	beq.n	800bbdc <D24_1CH_HTONS_VOL_HP+0x108>
 800bbc4:	f01a 0f01 	tst.w	sl, #1
 800bbc8:	d0a6      	beq.n	800bb18 <D24_1CH_HTONS_VOL_HP+0x44>
 800bbca:	78c2      	ldrb	r2, [r0, #3]
 800bbcc:	7883      	ldrb	r3, [r0, #2]
 800bbce:	f810 1b04 	ldrb.w	r1, [r0], #4
 800bbd2:	0212      	lsls	r2, r2, #8
 800bbd4:	eb02 4303 	add.w	r3, r2, r3, lsl #16
 800bbd8:	440b      	add	r3, r1
 800bbda:	e7a5      	b.n	800bb28 <D24_1CH_HTONS_VOL_HP+0x54>
 800bbdc:	4663      	mov	r3, ip
 800bbde:	4645      	mov	r5, r8
 800bbe0:	46dc      	mov	ip, fp
 800bbe2:	9807      	ldr	r0, [sp, #28]
 800bbe4:	6141      	str	r1, [r0, #20]
 800bbe6:	9906      	ldr	r1, [sp, #24]
 800bbe8:	6083      	str	r3, [r0, #8]
 800bbea:	f8c0 c00c 	str.w	ip, [r0, #12]
 800bbee:	61c6      	str	r6, [r0, #28]
 800bbf0:	6105      	str	r5, [r0, #16]
 800bbf2:	6181      	str	r1, [r0, #24]
 800bbf4:	2000      	movs	r0, #0
 800bbf6:	b009      	add	sp, #36	; 0x24
 800bbf8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bbfc:	4621      	mov	r1, r4
 800bbfe:	e7f0      	b.n	800bbe2 <D24_1CH_HTONS_VOL_HP+0x10e>
 800bc00:	00030001 	.word	0x00030001
 800bc04:	00060007 	.word	0x00060007
 800bc08:	20000000 	.word	0x20000000

0800bc0c <D32_1CH_HTONS_VOL_HP>:
 800bc0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc10:	4692      	mov	sl, r2
 800bc12:	b087      	sub	sp, #28
 800bc14:	8cd2      	ldrh	r2, [r2, #38]	; 0x26
 800bc16:	f8da 3018 	ldr.w	r3, [sl, #24]
 800bc1a:	f8da 5030 	ldr.w	r5, [sl, #48]	; 0x30
 800bc1e:	9304      	str	r3, [sp, #16]
 800bc20:	f8da 4010 	ldr.w	r4, [sl, #16]
 800bc24:	f8da 8014 	ldr.w	r8, [sl, #20]
 800bc28:	f8da 601c 	ldr.w	r6, [sl, #28]
 800bc2c:	f8da 3008 	ldr.w	r3, [sl, #8]
 800bc30:	f8da e00c 	ldr.w	lr, [sl, #12]
 800bc34:	9501      	str	r5, [sp, #4]
 800bc36:	f8da c020 	ldr.w	ip, [sl, #32]
 800bc3a:	2a00      	cmp	r2, #0
 800bc3c:	d07b      	beq.n	800bd36 <D32_1CH_HTONS_VOL_HP+0x12a>
 800bc3e:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 800bc42:	4f3e      	ldr	r7, [pc, #248]	; (800bd3c <D32_1CH_HTONS_VOL_HP+0x130>)
 800bc44:	f8cd c00c 	str.w	ip, [sp, #12]
 800bc48:	9202      	str	r2, [sp, #8]
 800bc4a:	460d      	mov	r5, r1
 800bc4c:	46a1      	mov	r9, r4
 800bc4e:	4684      	mov	ip, r0
 800bc50:	f8cd a014 	str.w	sl, [sp, #20]
 800bc54:	f85c 1b04 	ldr.w	r1, [ip], #4
 800bc58:	ba49      	rev16	r1, r1
 800bc5a:	b2c8      	uxtb	r0, r1
 800bc5c:	f3c1 2207 	ubfx	r2, r1, #8, #8
 800bc60:	f3c1 4a07 	ubfx	sl, r1, #16, #8
 800bc64:	f857 0020 	ldr.w	r0, [r7, r0, lsl #2]
 800bc68:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
 800bc6c:	0e09      	lsrs	r1, r1, #24
 800bc6e:	eb00 2096 	add.w	r0, r0, r6, lsr #10
 800bc72:	f857 602a 	ldr.w	r6, [r7, sl, lsl #2]
 800bc76:	f857 1021 	ldr.w	r1, [r7, r1, lsl #2]
 800bc7a:	eb02 2290 	add.w	r2, r2, r0, lsr #10
 800bc7e:	eb06 2a92 	add.w	sl, r6, r2, lsr #10
 800bc82:	eb01 269a 	add.w	r6, r1, sl, lsr #10
 800bc86:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800bc8a:	f3c6 0109 	ubfx	r1, r6, #0, #10
 800bc8e:	f3c0 0009 	ubfx	r0, r0, #0, #10
 800bc92:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 800bc96:	ea42 4000 	orr.w	r0, r2, r0, lsl #16
 800bc9a:	ea41 4a0a 	orr.w	sl, r1, sl, lsl #16
 800bc9e:	4a28      	ldr	r2, [pc, #160]	; (800bd40 <D32_1CH_HTONS_VOL_HP+0x134>)
 800bca0:	fb20 e202 	smlad	r2, r0, r2, lr
 800bca4:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 800bca8:	fb2a 2101 	smlad	r1, sl, r1, r2
 800bcac:	4a25      	ldr	r2, [pc, #148]	; (800bd44 <D32_1CH_HTONS_VOL_HP+0x138>)
 800bcae:	fb20 3302 	smlad	r3, r0, r2, r3
 800bcb2:	4a25      	ldr	r2, [pc, #148]	; (800bd48 <D32_1CH_HTONS_VOL_HP+0x13c>)
 800bcb4:	fb2a 3e02 	smlad	lr, sl, r2, r3
 800bcb8:	2301      	movs	r3, #1
 800bcba:	fb20 f003 	smuad	r0, r0, r3
 800bcbe:	4b23      	ldr	r3, [pc, #140]	; (800bd4c <D32_1CH_HTONS_VOL_HP+0x140>)
 800bcc0:	fb2a 0303 	smlad	r3, sl, r3, r0
 800bcc4:	f5a1 4280 	sub.w	r2, r1, #16384	; 0x4000
 800bcc8:	9c03      	ldr	r4, [sp, #12]
 800bcca:	eb02 0009 	add.w	r0, r2, r9
 800bcce:	eba0 0008 	sub.w	r0, r0, r8
 800bcd2:	ea4f 7be0 	mov.w	fp, r0, asr #31
 800bcd6:	fba0 0104 	umull	r0, r1, r0, r4
 800bcda:	f110 4000 	adds.w	r0, r0, #2147483648	; 0x80000000
 800bcde:	fb04 110b 	mla	r1, r4, fp, r1
 800bce2:	f141 0100 	adc.w	r1, r1, #0
 800bce6:	9c01      	ldr	r4, [sp, #4]
 800bce8:	0388      	lsls	r0, r1, #14
 800bcea:	f04f 4800 	mov.w	r8, #2147483648	; 0x80000000
 800bcee:	f04f 0900 	mov.w	r9, #0
 800bcf2:	fbc0 8904 	smlal	r8, r9, r0, r4
 800bcf6:	ea4f 00a9 	mov.w	r0, r9, asr #2
 800bcfa:	ea4f 0941 	mov.w	r9, r1, lsl #1
 800bcfe:	f300 000f 	ssat	r0, #16, r0
 800bd02:	9902      	ldr	r1, [sp, #8]
 800bd04:	f825 0b02 	strh.w	r0, [r5], #2
 800bd08:	428d      	cmp	r5, r1
 800bd0a:	4690      	mov	r8, r2
 800bd0c:	d1a2      	bne.n	800bc54 <D32_1CH_HTONS_VOL_HP+0x48>
 800bd0e:	f8dd a014 	ldr.w	sl, [sp, #20]
 800bd12:	464c      	mov	r4, r9
 800bd14:	f8ca 3008 	str.w	r3, [sl, #8]
 800bd18:	9b04      	ldr	r3, [sp, #16]
 800bd1a:	f8ca e00c 	str.w	lr, [sl, #12]
 800bd1e:	2000      	movs	r0, #0
 800bd20:	f8ca 601c 	str.w	r6, [sl, #28]
 800bd24:	f8ca 4010 	str.w	r4, [sl, #16]
 800bd28:	f8ca 2014 	str.w	r2, [sl, #20]
 800bd2c:	f8ca 3018 	str.w	r3, [sl, #24]
 800bd30:	b007      	add	sp, #28
 800bd32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bd36:	4642      	mov	r2, r8
 800bd38:	e7ec      	b.n	800bd14 <D32_1CH_HTONS_VOL_HP+0x108>
 800bd3a:	bf00      	nop
 800bd3c:	20000000 	.word	0x20000000
 800bd40:	00060003 	.word	0x00060003
 800bd44:	000a000c 	.word	0x000a000c
 800bd48:	000c000a 	.word	0x000c000a
 800bd4c:	00030006 	.word	0x00030006

0800bd50 <D48_1CH_HTONS_VOL_HP>:
 800bd50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd54:	4613      	mov	r3, r2
 800bd56:	461c      	mov	r4, r3
 800bd58:	b087      	sub	sp, #28
 800bd5a:	4625      	mov	r5, r4
 800bd5c:	4626      	mov	r6, r4
 800bd5e:	6b2d      	ldr	r5, [r5, #48]	; 0x30
 800bd60:	9205      	str	r2, [sp, #20]
 800bd62:	8cd2      	ldrh	r2, [r2, #38]	; 0x26
 800bd64:	f8d3 9014 	ldr.w	r9, [r3, #20]
 800bd68:	9501      	str	r5, [sp, #4]
 800bd6a:	4680      	mov	r8, r0
 800bd6c:	6a35      	ldr	r5, [r6, #32]
 800bd6e:	6918      	ldr	r0, [r3, #16]
 800bd70:	699b      	ldr	r3, [r3, #24]
 800bd72:	9304      	str	r3, [sp, #16]
 800bd74:	f8d4 e01c 	ldr.w	lr, [r4, #28]
 800bd78:	68a3      	ldr	r3, [r4, #8]
 800bd7a:	9502      	str	r5, [sp, #8]
 800bd7c:	68e4      	ldr	r4, [r4, #12]
 800bd7e:	2a00      	cmp	r2, #0
 800bd80:	f000 808c 	beq.w	800be9c <D48_1CH_HTONS_VOL_HP+0x14c>
 800bd84:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 800bd88:	4d45      	ldr	r5, [pc, #276]	; (800bea0 <D48_1CH_HTONS_VOL_HP+0x150>)
 800bd8a:	9203      	str	r2, [sp, #12]
 800bd8c:	468c      	mov	ip, r1
 800bd8e:	e898 0044 	ldmia.w	r8, {r2, r6}
 800bd92:	f108 0806 	add.w	r8, r8, #6
 800bd96:	ba52      	rev16	r2, r2
 800bd98:	ba76      	rev16	r6, r6
 800bd9a:	b2d7      	uxtb	r7, r2
 800bd9c:	f3c2 2107 	ubfx	r1, r2, #8, #8
 800bda0:	f855 a027 	ldr.w	sl, [r5, r7, lsl #2]
 800bda4:	f855 1021 	ldr.w	r1, [r5, r1, lsl #2]
 800bda8:	f3c2 4707 	ubfx	r7, r2, #16, #8
 800bdac:	0e12      	lsrs	r2, r2, #24
 800bdae:	eb0a 2a9e 	add.w	sl, sl, lr, lsr #10
 800bdb2:	f855 7027 	ldr.w	r7, [r5, r7, lsl #2]
 800bdb6:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 800bdba:	fa5f fb86 	uxtb.w	fp, r6
 800bdbe:	eb01 219a 	add.w	r1, r1, sl, lsr #10
 800bdc2:	f3c6 2e07 	ubfx	lr, r6, #8, #8
 800bdc6:	eb07 2791 	add.w	r7, r7, r1, lsr #10
 800bdca:	f855 602b 	ldr.w	r6, [r5, fp, lsl #2]
 800bdce:	f855 e02e 	ldr.w	lr, [r5, lr, lsl #2]
 800bdd2:	eb02 2297 	add.w	r2, r2, r7, lsr #10
 800bdd6:	eb06 2692 	add.w	r6, r6, r2, lsr #10
 800bdda:	eb0e 2e96 	add.w	lr, lr, r6, lsr #10
 800bdde:	f3c1 0109 	ubfx	r1, r1, #0, #10
 800bde2:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800bde6:	f3ce 0b09 	ubfx	fp, lr, #0, #10
 800bdea:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 800bdee:	f3c7 0709 	ubfx	r7, r7, #0, #10
 800bdf2:	f3c6 0609 	ubfx	r6, r6, #0, #10
 800bdf6:	ea42 4707 	orr.w	r7, r2, r7, lsl #16
 800bdfa:	ea41 4a0a 	orr.w	sl, r1, sl, lsl #16
 800bdfe:	ea4b 4606 	orr.w	r6, fp, r6, lsl #16
 800be02:	4a28      	ldr	r2, [pc, #160]	; (800bea4 <D48_1CH_HTONS_VOL_HP+0x154>)
 800be04:	fb2a 4202 	smlad	r2, sl, r2, r4
 800be08:	4927      	ldr	r1, [pc, #156]	; (800bea8 <D48_1CH_HTONS_VOL_HP+0x158>)
 800be0a:	fb27 2201 	smlad	r2, r7, r1, r2
 800be0e:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 800be12:	fb26 2201 	smlad	r2, r6, r1, r2
 800be16:	4925      	ldr	r1, [pc, #148]	; (800beac <D48_1CH_HTONS_VOL_HP+0x15c>)
 800be18:	fb2a 3401 	smlad	r4, sl, r1, r3
 800be1c:	f04f 131b 	mov.w	r3, #1769499	; 0x1b001b
 800be20:	fb27 4403 	smlad	r4, r7, r3, r4
 800be24:	4b22      	ldr	r3, [pc, #136]	; (800beb0 <D48_1CH_HTONS_VOL_HP+0x160>)
 800be26:	fb26 4403 	smlad	r4, r6, r3, r4
 800be2a:	2101      	movs	r1, #1
 800be2c:	fb2a fa01 	smuad	sl, sl, r1
 800be30:	4b20      	ldr	r3, [pc, #128]	; (800beb4 <D48_1CH_HTONS_VOL_HP+0x164>)
 800be32:	fb27 a703 	smlad	r7, r7, r3, sl
 800be36:	4b20      	ldr	r3, [pc, #128]	; (800beb8 <D48_1CH_HTONS_VOL_HP+0x168>)
 800be38:	fb26 7303 	smlad	r3, r6, r3, r7
 800be3c:	f5a2 4258 	sub.w	r2, r2, #55296	; 0xd800
 800be40:	9e02      	ldr	r6, [sp, #8]
 800be42:	9f01      	ldr	r7, [sp, #4]
 800be44:	4410      	add	r0, r2
 800be46:	eba0 0009 	sub.w	r0, r0, r9
 800be4a:	ea4f 7ae0 	mov.w	sl, r0, asr #31
 800be4e:	fba0 0106 	umull	r0, r1, r0, r6
 800be52:	f110 4000 	adds.w	r0, r0, #2147483648	; 0x80000000
 800be56:	fb06 110a 	mla	r1, r6, sl, r1
 800be5a:	f141 0100 	adc.w	r1, r1, #0
 800be5e:	0308      	lsls	r0, r1, #12
 800be60:	f04f 4900 	mov.w	r9, #2147483648	; 0x80000000
 800be64:	f04f 0a00 	mov.w	sl, #0
 800be68:	fbc0 9a07 	smlal	r9, sl, r0, r7
 800be6c:	4657      	mov	r7, sl
 800be6e:	10b8      	asrs	r0, r7, #2
 800be70:	f300 000f 	ssat	r0, #16, r0
 800be74:	f82c 0b02 	strh.w	r0, [ip], #2
 800be78:	0048      	lsls	r0, r1, #1
 800be7a:	9903      	ldr	r1, [sp, #12]
 800be7c:	458c      	cmp	ip, r1
 800be7e:	4691      	mov	r9, r2
 800be80:	d185      	bne.n	800bd8e <D48_1CH_HTONS_VOL_HP+0x3e>
 800be82:	9d05      	ldr	r5, [sp, #20]
 800be84:	616a      	str	r2, [r5, #20]
 800be86:	9a04      	ldr	r2, [sp, #16]
 800be88:	6128      	str	r0, [r5, #16]
 800be8a:	2000      	movs	r0, #0
 800be8c:	60ab      	str	r3, [r5, #8]
 800be8e:	60ec      	str	r4, [r5, #12]
 800be90:	f8c5 e01c 	str.w	lr, [r5, #28]
 800be94:	61aa      	str	r2, [r5, #24]
 800be96:	b007      	add	sp, #28
 800be98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800be9c:	464a      	mov	r2, r9
 800be9e:	e7f0      	b.n	800be82 <D48_1CH_HTONS_VOL_HP+0x132>
 800bea0:	20000000 	.word	0x20000000
 800bea4:	000f000a 	.word	0x000f000a
 800bea8:	00060003 	.word	0x00060003
 800beac:	00150019 	.word	0x00150019
 800beb0:	00190015 	.word	0x00190015
 800beb4:	00030006 	.word	0x00030006
 800beb8:	000a000f 	.word	0x000a000f

0800bebc <D64_1CH_HTONS_VOL_HP>:
 800bebc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bec0:	b089      	sub	sp, #36	; 0x24
 800bec2:	4614      	mov	r4, r2
 800bec4:	9207      	str	r2, [sp, #28]
 800bec6:	8cd3      	ldrh	r3, [r2, #38]	; 0x26
 800bec8:	f8d2 c010 	ldr.w	ip, [r2, #16]
 800becc:	f8d2 8014 	ldr.w	r8, [r2, #20]
 800bed0:	6992      	ldr	r2, [r2, #24]
 800bed2:	9206      	str	r2, [sp, #24]
 800bed4:	68e2      	ldr	r2, [r4, #12]
 800bed6:	9201      	str	r2, [sp, #4]
 800bed8:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800beda:	9203      	str	r2, [sp, #12]
 800bedc:	6a22      	ldr	r2, [r4, #32]
 800bede:	69e5      	ldr	r5, [r4, #28]
 800bee0:	68a6      	ldr	r6, [r4, #8]
 800bee2:	9204      	str	r2, [sp, #16]
 800bee4:	2b00      	cmp	r3, #0
 800bee6:	f000 80b0 	beq.w	800c04a <D64_1CH_HTONS_VOL_HP+0x18e>
 800beea:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 800beee:	4f58      	ldr	r7, [pc, #352]	; (800c050 <D64_1CH_HTONS_VOL_HP+0x194>)
 800bef0:	9305      	str	r3, [sp, #20]
 800bef2:	9102      	str	r1, [sp, #8]
 800bef4:	f850 2b08 	ldr.w	r2, [r0], #8
 800bef8:	f850 3c04 	ldr.w	r3, [r0, #-4]
 800befc:	ba52      	rev16	r2, r2
 800befe:	fa93 f993 	rev16.w	r9, r3
 800bf02:	b2d4      	uxtb	r4, r2
 800bf04:	f3c2 2307 	ubfx	r3, r2, #8, #8
 800bf08:	f857 b024 	ldr.w	fp, [r7, r4, lsl #2]
 800bf0c:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
 800bf10:	9901      	ldr	r1, [sp, #4]
 800bf12:	f3c2 4407 	ubfx	r4, r2, #16, #8
 800bf16:	0e12      	lsrs	r2, r2, #24
 800bf18:	44ab      	add	fp, r5
 800bf1a:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800bf1e:	f857 4022 	ldr.w	r4, [r7, r2, lsl #2]
 800bf22:	fa5f f289 	uxtb.w	r2, r9
 800bf26:	eb03 2e9b 	add.w	lr, r3, fp, lsr #10
 800bf2a:	f3c9 2307 	ubfx	r3, r9, #8, #8
 800bf2e:	eb05 2a9e 	add.w	sl, r5, lr, lsr #10
 800bf32:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
 800bf36:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
 800bf3a:	f3c9 4507 	ubfx	r5, r9, #16, #8
 800bf3e:	eb04 249a 	add.w	r4, r4, sl, lsr #10
 800bf42:	ea4f 6919 	mov.w	r9, r9, lsr #24
 800bf46:	eb02 2294 	add.w	r2, r2, r4, lsr #10
 800bf4a:	f857 5025 	ldr.w	r5, [r7, r5, lsl #2]
 800bf4e:	f857 9029 	ldr.w	r9, [r7, r9, lsl #2]
 800bf52:	eb03 2392 	add.w	r3, r3, r2, lsr #10
 800bf56:	eb05 2593 	add.w	r5, r5, r3, lsr #10
 800bf5a:	eb09 2995 	add.w	r9, r9, r5, lsr #10
 800bf5e:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 800bf62:	f3cb 0b09 	ubfx	fp, fp, #0, #10
 800bf66:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 800bf6a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800bf6e:	f3c5 0509 	ubfx	r5, r5, #0, #10
 800bf72:	ea4e 4b0b 	orr.w	fp, lr, fp, lsl #16
 800bf76:	f3c4 0409 	ubfx	r4, r4, #0, #10
 800bf7a:	f3c9 0e09 	ubfx	lr, r9, #0, #10
 800bf7e:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800bf82:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
 800bf86:	ea4e 4e05 	orr.w	lr, lr, r5, lsl #16
 800bf8a:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800bf8e:	ea4f 2599 	mov.w	r5, r9, lsr #10
 800bf92:	4b30      	ldr	r3, [pc, #192]	; (800c054 <D64_1CH_HTONS_VOL_HP+0x198>)
 800bf94:	fb2b 1303 	smlad	r3, fp, r3, r1
 800bf98:	492f      	ldr	r1, [pc, #188]	; (800c058 <D64_1CH_HTONS_VOL_HP+0x19c>)
 800bf9a:	fb24 3301 	smlad	r3, r4, r1, r3
 800bf9e:	492f      	ldr	r1, [pc, #188]	; (800c05c <D64_1CH_HTONS_VOL_HP+0x1a0>)
 800bfa0:	fb22 3301 	smlad	r3, r2, r1, r3
 800bfa4:	f44f 3a80 	mov.w	sl, #65536	; 0x10000
 800bfa8:	fb2e 390a 	smlad	r9, lr, sl, r3
 800bfac:	4b2c      	ldr	r3, [pc, #176]	; (800c060 <D64_1CH_HTONS_VOL_HP+0x1a4>)
 800bfae:	fb2b 6603 	smlad	r6, fp, r3, r6
 800bfb2:	fb2e 6613 	smladx	r6, lr, r3, r6
 800bfb6:	4b2b      	ldr	r3, [pc, #172]	; (800c064 <D64_1CH_HTONS_VOL_HP+0x1a8>)
 800bfb8:	fb24 6603 	smlad	r6, r4, r3, r6
 800bfbc:	fb22 6313 	smladx	r3, r2, r3, r6
 800bfc0:	f04f 0a01 	mov.w	sl, #1
 800bfc4:	9301      	str	r3, [sp, #4]
 800bfc6:	fb2b fb0a 	smuad	fp, fp, sl
 800bfca:	4b27      	ldr	r3, [pc, #156]	; (800c068 <D64_1CH_HTONS_VOL_HP+0x1ac>)
 800bfcc:	fb24 ba03 	smlad	sl, r4, r3, fp
 800bfd0:	4b26      	ldr	r3, [pc, #152]	; (800c06c <D64_1CH_HTONS_VOL_HP+0x1b0>)
 800bfd2:	fb22 a203 	smlad	r2, r2, r3, sl
 800bfd6:	4b26      	ldr	r3, [pc, #152]	; (800c070 <D64_1CH_HTONS_VOL_HP+0x1b4>)
 800bfd8:	fb2e 2603 	smlad	r6, lr, r3, r2
 800bfdc:	f5a9 3a00 	sub.w	sl, r9, #131072	; 0x20000
 800bfe0:	eb0a 020c 	add.w	r2, sl, ip
 800bfe4:	9c04      	ldr	r4, [sp, #16]
 800bfe6:	9903      	ldr	r1, [sp, #12]
 800bfe8:	eba2 0208 	sub.w	r2, r2, r8
 800bfec:	ea4f 79e2 	mov.w	r9, r2, asr #31
 800bff0:	fba2 2304 	umull	r2, r3, r2, r4
 800bff4:	f112 4200 	adds.w	r2, r2, #2147483648	; 0x80000000
 800bff8:	fb04 3309 	mla	r3, r4, r9, r3
 800bffc:	f143 0300 	adc.w	r3, r3, #0
 800c000:	02da      	lsls	r2, r3, #11
 800c002:	f04f 4800 	mov.w	r8, #2147483648	; 0x80000000
 800c006:	f04f 0900 	mov.w	r9, #0
 800c00a:	fbc1 8902 	smlal	r8, r9, r1, r2
 800c00e:	9902      	ldr	r1, [sp, #8]
 800c010:	ea4f 02a9 	mov.w	r2, r9, asr #2
 800c014:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800c018:	f302 020f 	ssat	r2, #16, r2
 800c01c:	9b05      	ldr	r3, [sp, #20]
 800c01e:	f821 2b02 	strh.w	r2, [r1], #2
 800c022:	4299      	cmp	r1, r3
 800c024:	9102      	str	r1, [sp, #8]
 800c026:	46d0      	mov	r8, sl
 800c028:	f47f af64 	bne.w	800bef4 <D64_1CH_HTONS_VOL_HP+0x38>
 800c02c:	9a07      	ldr	r2, [sp, #28]
 800c02e:	9901      	ldr	r1, [sp, #4]
 800c030:	60d1      	str	r1, [r2, #12]
 800c032:	9906      	ldr	r1, [sp, #24]
 800c034:	6096      	str	r6, [r2, #8]
 800c036:	2000      	movs	r0, #0
 800c038:	61d5      	str	r5, [r2, #28]
 800c03a:	f8c2 c010 	str.w	ip, [r2, #16]
 800c03e:	f8c2 a014 	str.w	sl, [r2, #20]
 800c042:	6191      	str	r1, [r2, #24]
 800c044:	b009      	add	sp, #36	; 0x24
 800c046:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c04a:	46c2      	mov	sl, r8
 800c04c:	4622      	mov	r2, r4
 800c04e:	e7ee      	b.n	800c02e <D64_1CH_HTONS_VOL_HP+0x172>
 800c050:	20000000 	.word	0x20000000
 800c054:	001c0015 	.word	0x001c0015
 800c058:	000f000a 	.word	0x000f000a
 800c05c:	00060003 	.word	0x00060003
 800c060:	0024002a 	.word	0x0024002a
 800c064:	002e0030 	.word	0x002e0030
 800c068:	00030006 	.word	0x00030006
 800c06c:	000a000f 	.word	0x000a000f
 800c070:	0015001c 	.word	0x0015001c

0800c074 <D80_1CH_HTONS_VOL_HP>:
 800c074:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c078:	4613      	mov	r3, r2
 800c07a:	b089      	sub	sp, #36	; 0x24
 800c07c:	4686      	mov	lr, r0
 800c07e:	6918      	ldr	r0, [r3, #16]
 800c080:	9000      	str	r0, [sp, #0]
 800c082:	4618      	mov	r0, r3
 800c084:	461c      	mov	r4, r3
 800c086:	695b      	ldr	r3, [r3, #20]
 800c088:	9302      	str	r3, [sp, #8]
 800c08a:	6983      	ldr	r3, [r0, #24]
 800c08c:	9306      	str	r3, [sp, #24]
 800c08e:	f8d0 c008 	ldr.w	ip, [r0, #8]
 800c092:	69c3      	ldr	r3, [r0, #28]
 800c094:	68c0      	ldr	r0, [r0, #12]
 800c096:	9207      	str	r2, [sp, #28]
 800c098:	9001      	str	r0, [sp, #4]
 800c09a:	8cd2      	ldrh	r2, [r2, #38]	; 0x26
 800c09c:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800c09e:	9003      	str	r0, [sp, #12]
 800c0a0:	6a20      	ldr	r0, [r4, #32]
 800c0a2:	9004      	str	r0, [sp, #16]
 800c0a4:	2a00      	cmp	r2, #0
 800c0a6:	f000 80d2 	beq.w	800c24e <D80_1CH_HTONS_VOL_HP+0x1da>
 800c0aa:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 800c0ae:	4869      	ldr	r0, [pc, #420]	; (800c254 <D80_1CH_HTONS_VOL_HP+0x1e0>)
 800c0b0:	9205      	str	r2, [sp, #20]
 800c0b2:	461c      	mov	r4, r3
 800c0b4:	f8de 5000 	ldr.w	r5, [lr]
 800c0b8:	f8de 2004 	ldr.w	r2, [lr, #4]
 800c0bc:	f8de 3008 	ldr.w	r3, [lr, #8]
 800c0c0:	f10e 0e0a 	add.w	lr, lr, #10
 800c0c4:	ba6d      	rev16	r5, r5
 800c0c6:	ba52      	rev16	r2, r2
 800c0c8:	fa93 fb93 	rev16.w	fp, r3
 800c0cc:	b2ee      	uxtb	r6, r5
 800c0ce:	f3c5 2307 	ubfx	r3, r5, #8, #8
 800c0d2:	f850 7026 	ldr.w	r7, [r0, r6, lsl #2]
 800c0d6:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800c0da:	f3c5 4607 	ubfx	r6, r5, #16, #8
 800c0de:	eb04 0a07 	add.w	sl, r4, r7
 800c0e2:	0e2d      	lsrs	r5, r5, #24
 800c0e4:	f850 4026 	ldr.w	r4, [r0, r6, lsl #2]
 800c0e8:	f850 6025 	ldr.w	r6, [r0, r5, lsl #2]
 800c0ec:	eb03 239a 	add.w	r3, r3, sl, lsr #10
 800c0f0:	eb04 2993 	add.w	r9, r4, r3, lsr #10
 800c0f4:	b2d5      	uxtb	r5, r2
 800c0f6:	f3c2 2407 	ubfx	r4, r2, #8, #8
 800c0fa:	f850 7025 	ldr.w	r7, [r0, r5, lsl #2]
 800c0fe:	f850 5024 	ldr.w	r5, [r0, r4, lsl #2]
 800c102:	f3c2 4407 	ubfx	r4, r2, #16, #8
 800c106:	eb06 2699 	add.w	r6, r6, r9, lsr #10
 800c10a:	0e12      	lsrs	r2, r2, #24
 800c10c:	eb07 2896 	add.w	r8, r7, r6, lsr #10
 800c110:	f850 7024 	ldr.w	r7, [r0, r4, lsl #2]
 800c114:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
 800c118:	fa5f f48b 	uxtb.w	r4, fp
 800c11c:	eb05 2598 	add.w	r5, r5, r8, lsr #10
 800c120:	f3cb 2b07 	ubfx	fp, fp, #8, #8
 800c124:	eb07 2795 	add.w	r7, r7, r5, lsr #10
 800c128:	f850 4024 	ldr.w	r4, [r0, r4, lsl #2]
 800c12c:	f850 b02b 	ldr.w	fp, [r0, fp, lsl #2]
 800c130:	eb02 2297 	add.w	r2, r2, r7, lsr #10
 800c134:	eb04 2492 	add.w	r4, r4, r2, lsr #10
 800c138:	eb0b 2b94 	add.w	fp, fp, r4, lsr #10
 800c13c:	f3c6 0609 	ubfx	r6, r6, #0, #10
 800c140:	f3c9 0909 	ubfx	r9, r9, #0, #10
 800c144:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 800c148:	f3c5 0509 	ubfx	r5, r5, #0, #10
 800c14c:	f3c7 0709 	ubfx	r7, r7, #0, #10
 800c150:	f3c4 0409 	ubfx	r4, r4, #0, #10
 800c154:	ea46 4909 	orr.w	r9, r6, r9, lsl #16
 800c158:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800c15c:	f3cb 0609 	ubfx	r6, fp, #0, #10
 800c160:	f3c8 0809 	ubfx	r8, r8, #0, #10
 800c164:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800c168:	ea45 4808 	orr.w	r8, r5, r8, lsl #16
 800c16c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800c170:	ea46 4604 	orr.w	r6, r6, r4, lsl #16
 800c174:	ea43 430a 	orr.w	r3, r3, sl, lsl #16
 800c178:	ea4f 249b 	mov.w	r4, fp, lsr #10
 800c17c:	4d36      	ldr	r5, [pc, #216]	; (800c258 <D80_1CH_HTONS_VOL_HP+0x1e4>)
 800c17e:	9f01      	ldr	r7, [sp, #4]
 800c180:	fb23 7505 	smlad	r5, r3, r5, r7
 800c184:	4f35      	ldr	r7, [pc, #212]	; (800c25c <D80_1CH_HTONS_VOL_HP+0x1e8>)
 800c186:	fb29 5507 	smlad	r5, r9, r7, r5
 800c18a:	4f35      	ldr	r7, [pc, #212]	; (800c260 <D80_1CH_HTONS_VOL_HP+0x1ec>)
 800c18c:	fb28 5507 	smlad	r5, r8, r7, r5
 800c190:	4f34      	ldr	r7, [pc, #208]	; (800c264 <D80_1CH_HTONS_VOL_HP+0x1f0>)
 800c192:	fb22 5507 	smlad	r5, r2, r7, r5
 800c196:	f44f 3a80 	mov.w	sl, #65536	; 0x10000
 800c19a:	fb26 5b0a 	smlad	fp, r6, sl, r5
 800c19e:	4d32      	ldr	r5, [pc, #200]	; (800c268 <D80_1CH_HTONS_VOL_HP+0x1f4>)
 800c1a0:	fb23 cc05 	smlad	ip, r3, r5, ip
 800c1a4:	4d31      	ldr	r5, [pc, #196]	; (800c26c <D80_1CH_HTONS_VOL_HP+0x1f8>)
 800c1a6:	fb29 cc05 	smlad	ip, r9, r5, ip
 800c1aa:	f04f 154b 	mov.w	r5, #4915275	; 0x4b004b
 800c1ae:	fb28 c505 	smlad	r5, r8, r5, ip
 800c1b2:	4f2f      	ldr	r7, [pc, #188]	; (800c270 <D80_1CH_HTONS_VOL_HP+0x1fc>)
 800c1b4:	fb22 5507 	smlad	r5, r2, r7, r5
 800c1b8:	4f2e      	ldr	r7, [pc, #184]	; (800c274 <D80_1CH_HTONS_VOL_HP+0x200>)
 800c1ba:	fb26 5507 	smlad	r5, r6, r7, r5
 800c1be:	f04f 0a01 	mov.w	sl, #1
 800c1c2:	9501      	str	r5, [sp, #4]
 800c1c4:	fb23 fa0a 	smuad	sl, r3, sl
 800c1c8:	4b2b      	ldr	r3, [pc, #172]	; (800c278 <D80_1CH_HTONS_VOL_HP+0x204>)
 800c1ca:	fb29 a903 	smlad	r9, r9, r3, sl
 800c1ce:	4d2b      	ldr	r5, [pc, #172]	; (800c27c <D80_1CH_HTONS_VOL_HP+0x208>)
 800c1d0:	fb28 9805 	smlad	r8, r8, r5, r9
 800c1d4:	4d2a      	ldr	r5, [pc, #168]	; (800c280 <D80_1CH_HTONS_VOL_HP+0x20c>)
 800c1d6:	fb22 8205 	smlad	r2, r2, r5, r8
 800c1da:	4b2a      	ldr	r3, [pc, #168]	; (800c284 <D80_1CH_HTONS_VOL_HP+0x210>)
 800c1dc:	fb26 2c03 	smlad	ip, r6, r3, r2
 800c1e0:	9b00      	ldr	r3, [sp, #0]
 800c1e2:	9d04      	ldr	r5, [sp, #16]
 800c1e4:	f5ab 3a7a 	sub.w	sl, fp, #256000	; 0x3e800
 800c1e8:	4453      	add	r3, sl
 800c1ea:	461a      	mov	r2, r3
 800c1ec:	9b02      	ldr	r3, [sp, #8]
 800c1ee:	f8cd a008 	str.w	sl, [sp, #8]
 800c1f2:	1ad2      	subs	r2, r2, r3
 800c1f4:	17d7      	asrs	r7, r2, #31
 800c1f6:	fba2 2305 	umull	r2, r3, r2, r5
 800c1fa:	fb05 3307 	mla	r3, r5, r7, r3
 800c1fe:	f112 4200 	adds.w	r2, r2, #2147483648	; 0x80000000
 800c202:	f143 0300 	adc.w	r3, r3, #0
 800c206:	9d03      	ldr	r5, [sp, #12]
 800c208:	029a      	lsls	r2, r3, #10
 800c20a:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800c20e:	2700      	movs	r7, #0
 800c210:	005b      	lsls	r3, r3, #1
 800c212:	fbc5 6702 	smlal	r6, r7, r5, r2
 800c216:	10ba      	asrs	r2, r7, #2
 800c218:	9300      	str	r3, [sp, #0]
 800c21a:	f302 020f 	ssat	r2, #16, r2
 800c21e:	9b05      	ldr	r3, [sp, #20]
 800c220:	f821 2b02 	strh.w	r2, [r1], #2
 800c224:	4299      	cmp	r1, r3
 800c226:	f47f af45 	bne.w	800c0b4 <D80_1CH_HTONS_VOL_HP+0x40>
 800c22a:	4623      	mov	r3, r4
 800c22c:	9907      	ldr	r1, [sp, #28]
 800c22e:	9801      	ldr	r0, [sp, #4]
 800c230:	60c8      	str	r0, [r1, #12]
 800c232:	9a00      	ldr	r2, [sp, #0]
 800c234:	f8c1 c008 	str.w	ip, [r1, #8]
 800c238:	4608      	mov	r0, r1
 800c23a:	61cb      	str	r3, [r1, #28]
 800c23c:	610a      	str	r2, [r1, #16]
 800c23e:	f8c1 a014 	str.w	sl, [r1, #20]
 800c242:	9906      	ldr	r1, [sp, #24]
 800c244:	6181      	str	r1, [r0, #24]
 800c246:	2000      	movs	r0, #0
 800c248:	b009      	add	sp, #36	; 0x24
 800c24a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c24e:	f8dd a008 	ldr.w	sl, [sp, #8]
 800c252:	e7eb      	b.n	800c22c <D80_1CH_HTONS_VOL_HP+0x1b8>
 800c254:	20000000 	.word	0x20000000
 800c258:	002d0024 	.word	0x002d0024
 800c25c:	001c0015 	.word	0x001c0015
 800c260:	000f000a 	.word	0x000f000a
 800c264:	00060003 	.word	0x00060003
 800c268:	0037003f 	.word	0x0037003f
 800c26c:	00450049 	.word	0x00450049
 800c270:	00490045 	.word	0x00490045
 800c274:	003f0037 	.word	0x003f0037
 800c278:	00030006 	.word	0x00030006
 800c27c:	000a000f 	.word	0x000a000f
 800c280:	0015001c 	.word	0x0015001c
 800c284:	0024002d 	.word	0x0024002d

0800c288 <D128_1CH_HTONS_VOL_HP>:
 800c288:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c28c:	b093      	sub	sp, #76	; 0x4c
 800c28e:	4614      	mov	r4, r2
 800c290:	9211      	str	r2, [sp, #68]	; 0x44
 800c292:	8cd3      	ldrh	r3, [r2, #38]	; 0x26
 800c294:	6912      	ldr	r2, [r2, #16]
 800c296:	9203      	str	r2, [sp, #12]
 800c298:	4622      	mov	r2, r4
 800c29a:	4615      	mov	r5, r2
 800c29c:	6964      	ldr	r4, [r4, #20]
 800c29e:	9406      	str	r4, [sp, #24]
 800c2a0:	4614      	mov	r4, r2
 800c2a2:	6992      	ldr	r2, [r2, #24]
 800c2a4:	9210      	str	r2, [sp, #64]	; 0x40
 800c2a6:	68ea      	ldr	r2, [r5, #12]
 800c2a8:	9204      	str	r2, [sp, #16]
 800c2aa:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 800c2ac:	69e6      	ldr	r6, [r4, #28]
 800c2ae:	920d      	str	r2, [sp, #52]	; 0x34
 800c2b0:	68a4      	ldr	r4, [r4, #8]
 800c2b2:	6a2a      	ldr	r2, [r5, #32]
 800c2b4:	9405      	str	r4, [sp, #20]
 800c2b6:	920e      	str	r2, [sp, #56]	; 0x38
 800c2b8:	2b00      	cmp	r3, #0
 800c2ba:	f000 8145 	beq.w	800c548 <D128_1CH_HTONS_VOL_HP+0x2c0>
 800c2be:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 800c2c2:	930f      	str	r3, [sp, #60]	; 0x3c
 800c2c4:	f8df 82dc 	ldr.w	r8, [pc, #732]	; 800c5a4 <D128_1CH_HTONS_VOL_HP+0x31c>
 800c2c8:	9107      	str	r1, [sp, #28]
 800c2ca:	f100 0310 	add.w	r3, r0, #16
 800c2ce:	4699      	mov	r9, r3
 800c2d0:	f1a9 0110 	sub.w	r1, r9, #16
 800c2d4:	c90e      	ldmia	r1, {r1, r2, r3}
 800c2d6:	f859 0c04 	ldr.w	r0, [r9, #-4]
 800c2da:	ba49      	rev16	r1, r1
 800c2dc:	ba52      	rev16	r2, r2
 800c2de:	ba5b      	rev16	r3, r3
 800c2e0:	fa90 fa90 	rev16.w	sl, r0
 800c2e4:	f3c1 2007 	ubfx	r0, r1, #8, #8
 800c2e8:	b2cc      	uxtb	r4, r1
 800c2ea:	f858 5020 	ldr.w	r5, [r8, r0, lsl #2]
 800c2ee:	f858 4024 	ldr.w	r4, [r8, r4, lsl #2]
 800c2f2:	f3c1 4007 	ubfx	r0, r1, #16, #8
 800c2f6:	0e09      	lsrs	r1, r1, #24
 800c2f8:	4426      	add	r6, r4
 800c2fa:	f858 4020 	ldr.w	r4, [r8, r0, lsl #2]
 800c2fe:	f858 7021 	ldr.w	r7, [r8, r1, lsl #2]
 800c302:	b2d0      	uxtb	r0, r2
 800c304:	eb05 2596 	add.w	r5, r5, r6, lsr #10
 800c308:	eb04 2b95 	add.w	fp, r4, r5, lsr #10
 800c30c:	f3c2 2107 	ubfx	r1, r2, #8, #8
 800c310:	f858 4020 	ldr.w	r4, [r8, r0, lsl #2]
 800c314:	f858 1021 	ldr.w	r1, [r8, r1, lsl #2]
 800c318:	eb07 279b 	add.w	r7, r7, fp, lsr #10
 800c31c:	f3c2 4007 	ubfx	r0, r2, #16, #8
 800c320:	0e12      	lsrs	r2, r2, #24
 800c322:	eb04 2497 	add.w	r4, r4, r7, lsr #10
 800c326:	9701      	str	r7, [sp, #4]
 800c328:	f858 0020 	ldr.w	r0, [r8, r0, lsl #2]
 800c32c:	4627      	mov	r7, r4
 800c32e:	f858 4022 	ldr.w	r4, [r8, r2, lsl #2]
 800c332:	9702      	str	r7, [sp, #8]
 800c334:	b2da      	uxtb	r2, r3
 800c336:	eb01 2197 	add.w	r1, r1, r7, lsr #10
 800c33a:	eb00 2c91 	add.w	ip, r0, r1, lsr #10
 800c33e:	f858 0022 	ldr.w	r0, [r8, r2, lsl #2]
 800c342:	eb04 249c 	add.w	r4, r4, ip, lsr #10
 800c346:	eb00 2e94 	add.w	lr, r0, r4, lsr #10
 800c34a:	f3c3 2207 	ubfx	r2, r3, #8, #8
 800c34e:	f3c3 4007 	ubfx	r0, r3, #16, #8
 800c352:	0e1b      	lsrs	r3, r3, #24
 800c354:	f858 7020 	ldr.w	r7, [r8, r0, lsl #2]
 800c358:	f858 2022 	ldr.w	r2, [r8, r2, lsl #2]
 800c35c:	f858 0023 	ldr.w	r0, [r8, r3, lsl #2]
 800c360:	fa5f f38a 	uxtb.w	r3, sl
 800c364:	f3c6 0609 	ubfx	r6, r6, #0, #10
 800c368:	960a      	str	r6, [sp, #40]	; 0x28
 800c36a:	eb02 229e 	add.w	r2, r2, lr, lsr #10
 800c36e:	f858 6023 	ldr.w	r6, [r8, r3, lsl #2]
 800c372:	f3c5 0509 	ubfx	r5, r5, #0, #10
 800c376:	f3ca 2307 	ubfx	r3, sl, #8, #8
 800c37a:	950b      	str	r5, [sp, #44]	; 0x2c
 800c37c:	eb07 2792 	add.w	r7, r7, r2, lsr #10
 800c380:	f3ca 4507 	ubfx	r5, sl, #16, #8
 800c384:	eb00 2097 	add.w	r0, r0, r7, lsr #10
 800c388:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
 800c38c:	f858 5025 	ldr.w	r5, [r8, r5, lsl #2]
 800c390:	ea4f 6a1a 	mov.w	sl, sl, lsr #24
 800c394:	eb06 2690 	add.w	r6, r6, r0, lsr #10
 800c398:	eb03 2396 	add.w	r3, r3, r6, lsr #10
 800c39c:	f858 a02a 	ldr.w	sl, [r8, sl, lsl #2]
 800c3a0:	9308      	str	r3, [sp, #32]
 800c3a2:	eb05 2593 	add.w	r5, r5, r3, lsr #10
 800c3a6:	9b01      	ldr	r3, [sp, #4]
 800c3a8:	eb0a 2a95 	add.w	sl, sl, r5, lsr #10
 800c3ac:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 800c3b0:	f3c3 0a09 	ubfx	sl, r3, #0, #10
 800c3b4:	9b02      	ldr	r3, [sp, #8]
 800c3b6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800c3ba:	9302      	str	r3, [sp, #8]
 800c3bc:	9b08      	ldr	r3, [sp, #32]
 800c3be:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800c3c2:	9308      	str	r3, [sp, #32]
 800c3c4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c3c6:	f3c5 0509 	ubfx	r5, r5, #0, #10
 800c3ca:	950c      	str	r5, [sp, #48]	; 0x30
 800c3cc:	461d      	mov	r5, r3
 800c3ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c3d0:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 800c3d4:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800c3d8:	ea45 4303 	orr.w	r3, r5, r3, lsl #16
 800c3dc:	ea42 420e 	orr.w	r2, r2, lr, lsl #16
 800c3e0:	9301      	str	r3, [sp, #4]
 800c3e2:	9b02      	ldr	r3, [sp, #8]
 800c3e4:	9202      	str	r2, [sp, #8]
 800c3e6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c3e8:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800c3ea:	f3c7 0709 	ubfx	r7, r7, #0, #10
 800c3ee:	f3c0 0009 	ubfx	r0, r0, #0, #10
 800c3f2:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 800c3f6:	f3c1 0109 	ubfx	r1, r1, #0, #10
 800c3fa:	f3c2 0709 	ubfx	r7, r2, #0, #10
 800c3fe:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800c402:	ea47 4505 	orr.w	r5, r7, r5, lsl #16
 800c406:	9b08      	ldr	r3, [sp, #32]
 800c408:	9f01      	ldr	r7, [sp, #4]
 800c40a:	f3cb 0b09 	ubfx	fp, fp, #0, #10
 800c40e:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 800c412:	f3c6 0609 	ubfx	r6, r6, #0, #10
 800c416:	f3c4 0409 	ubfx	r4, r4, #0, #10
 800c41a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800c41e:	46be      	mov	lr, r7
 800c420:	0a96      	lsrs	r6, r2, #10
 800c422:	ea4a 4a0b 	orr.w	sl, sl, fp, lsl #16
 800c426:	ea44 440c 	orr.w	r4, r4, ip, lsl #16
 800c42a:	4f49      	ldr	r7, [pc, #292]	; (800c550 <D128_1CH_HTONS_VOL_HP+0x2c8>)
 800c42c:	9a04      	ldr	r2, [sp, #16]
 800c42e:	fb2e 2e07 	smlad	lr, lr, r7, r2
 800c432:	4a48      	ldr	r2, [pc, #288]	; (800c554 <D128_1CH_HTONS_VOL_HP+0x2cc>)
 800c434:	fb2a ee02 	smlad	lr, sl, r2, lr
 800c438:	4a47      	ldr	r2, [pc, #284]	; (800c558 <D128_1CH_HTONS_VOL_HP+0x2d0>)
 800c43a:	fb21 ee02 	smlad	lr, r1, r2, lr
 800c43e:	4a47      	ldr	r2, [pc, #284]	; (800c55c <D128_1CH_HTONS_VOL_HP+0x2d4>)
 800c440:	fb24 ee02 	smlad	lr, r4, r2, lr
 800c444:	4a46      	ldr	r2, [pc, #280]	; (800c560 <D128_1CH_HTONS_VOL_HP+0x2d8>)
 800c446:	9f02      	ldr	r7, [sp, #8]
 800c448:	fb27 ee02 	smlad	lr, r7, r2, lr
 800c44c:	4a45      	ldr	r2, [pc, #276]	; (800c564 <D128_1CH_HTONS_VOL_HP+0x2dc>)
 800c44e:	fb20 ee02 	smlad	lr, r0, r2, lr
 800c452:	4a45      	ldr	r2, [pc, #276]	; (800c568 <D128_1CH_HTONS_VOL_HP+0x2e0>)
 800c454:	fb23 e702 	smlad	r7, r3, r2, lr
 800c458:	f44f 3e80 	mov.w	lr, #65536	; 0x10000
 800c45c:	fb25 7e0e 	smlad	lr, r5, lr, r7
 800c460:	9f01      	ldr	r7, [sp, #4]
 800c462:	4a42      	ldr	r2, [pc, #264]	; (800c56c <D128_1CH_HTONS_VOL_HP+0x2e4>)
 800c464:	46bc      	mov	ip, r7
 800c466:	9f05      	ldr	r7, [sp, #20]
 800c468:	fb2c 7c02 	smlad	ip, ip, r2, r7
 800c46c:	4a40      	ldr	r2, [pc, #256]	; (800c570 <D128_1CH_HTONS_VOL_HP+0x2e8>)
 800c46e:	fb2a cc02 	smlad	ip, sl, r2, ip
 800c472:	4f40      	ldr	r7, [pc, #256]	; (800c574 <D128_1CH_HTONS_VOL_HP+0x2ec>)
 800c474:	fb21 cc07 	smlad	ip, r1, r7, ip
 800c478:	4f3f      	ldr	r7, [pc, #252]	; (800c578 <D128_1CH_HTONS_VOL_HP+0x2f0>)
 800c47a:	fb24 cc07 	smlad	ip, r4, r7, ip
 800c47e:	4f3f      	ldr	r7, [pc, #252]	; (800c57c <D128_1CH_HTONS_VOL_HP+0x2f4>)
 800c480:	9a02      	ldr	r2, [sp, #8]
 800c482:	fb22 cc07 	smlad	ip, r2, r7, ip
 800c486:	4f3e      	ldr	r7, [pc, #248]	; (800c580 <D128_1CH_HTONS_VOL_HP+0x2f8>)
 800c488:	fb20 cc07 	smlad	ip, r0, r7, ip
 800c48c:	4f3d      	ldr	r7, [pc, #244]	; (800c584 <D128_1CH_HTONS_VOL_HP+0x2fc>)
 800c48e:	fb23 c707 	smlad	r7, r3, r7, ip
 800c492:	f8df c114 	ldr.w	ip, [pc, #276]	; 800c5a8 <D128_1CH_HTONS_VOL_HP+0x320>
 800c496:	fb25 720c 	smlad	r2, r5, ip, r7
 800c49a:	f04f 0b01 	mov.w	fp, #1
 800c49e:	9204      	str	r2, [sp, #16]
 800c4a0:	9f01      	ldr	r7, [sp, #4]
 800c4a2:	fb27 fb0b 	smuad	fp, r7, fp
 800c4a6:	4f38      	ldr	r7, [pc, #224]	; (800c588 <D128_1CH_HTONS_VOL_HP+0x300>)
 800c4a8:	fb2a ba07 	smlad	sl, sl, r7, fp
 800c4ac:	4f37      	ldr	r7, [pc, #220]	; (800c58c <D128_1CH_HTONS_VOL_HP+0x304>)
 800c4ae:	fb21 aa07 	smlad	sl, r1, r7, sl
 800c4b2:	4f37      	ldr	r7, [pc, #220]	; (800c590 <D128_1CH_HTONS_VOL_HP+0x308>)
 800c4b4:	fb24 aa07 	smlad	sl, r4, r7, sl
 800c4b8:	4f36      	ldr	r7, [pc, #216]	; (800c594 <D128_1CH_HTONS_VOL_HP+0x30c>)
 800c4ba:	9a02      	ldr	r2, [sp, #8]
 800c4bc:	fb22 a707 	smlad	r7, r2, r7, sl
 800c4c0:	4a35      	ldr	r2, [pc, #212]	; (800c598 <D128_1CH_HTONS_VOL_HP+0x310>)
 800c4c2:	fb20 7702 	smlad	r7, r0, r2, r7
 800c4c6:	4a35      	ldr	r2, [pc, #212]	; (800c59c <D128_1CH_HTONS_VOL_HP+0x314>)
 800c4c8:	fb23 7702 	smlad	r7, r3, r2, r7
 800c4cc:	4b34      	ldr	r3, [pc, #208]	; (800c5a0 <D128_1CH_HTONS_VOL_HP+0x318>)
 800c4ce:	fb25 7303 	smlad	r3, r5, r3, r7
 800c4d2:	9305      	str	r3, [sp, #20]
 800c4d4:	9b03      	ldr	r3, [sp, #12]
 800c4d6:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 800c4d8:	f5ae 1e80 	sub.w	lr, lr, #1048576	; 0x100000
 800c4dc:	4473      	add	r3, lr
 800c4de:	461a      	mov	r2, r3
 800c4e0:	9b06      	ldr	r3, [sp, #24]
 800c4e2:	f8cd e018 	str.w	lr, [sp, #24]
 800c4e6:	1ad2      	subs	r2, r2, r3
 800c4e8:	17d1      	asrs	r1, r2, #31
 800c4ea:	fba2 2304 	umull	r2, r3, r2, r4
 800c4ee:	fb04 3301 	mla	r3, r4, r1, r3
 800c4f2:	f112 4200 	adds.w	r2, r2, #2147483648	; 0x80000000
 800c4f6:	f143 0300 	adc.w	r3, r3, #0
 800c4fa:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 800c4fc:	021a      	lsls	r2, r3, #8
 800c4fe:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 800c502:	2100      	movs	r1, #0
 800c504:	fbc4 0102 	smlal	r0, r1, r4, r2
 800c508:	108a      	asrs	r2, r1, #2
 800c50a:	9907      	ldr	r1, [sp, #28]
 800c50c:	f302 020f 	ssat	r2, #16, r2
 800c510:	005b      	lsls	r3, r3, #1
 800c512:	f821 2b02 	strh.w	r2, [r1], #2
 800c516:	9303      	str	r3, [sp, #12]
 800c518:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c51a:	9107      	str	r1, [sp, #28]
 800c51c:	4299      	cmp	r1, r3
 800c51e:	f109 0910 	add.w	r9, r9, #16
 800c522:	f47f aed5 	bne.w	800c2d0 <D128_1CH_HTONS_VOL_HP+0x48>
 800c526:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800c528:	9905      	ldr	r1, [sp, #20]
 800c52a:	6091      	str	r1, [r2, #8]
 800c52c:	9904      	ldr	r1, [sp, #16]
 800c52e:	60d1      	str	r1, [r2, #12]
 800c530:	4613      	mov	r3, r2
 800c532:	61d6      	str	r6, [r2, #28]
 800c534:	9910      	ldr	r1, [sp, #64]	; 0x40
 800c536:	9a03      	ldr	r2, [sp, #12]
 800c538:	611a      	str	r2, [r3, #16]
 800c53a:	2000      	movs	r0, #0
 800c53c:	f8c3 e014 	str.w	lr, [r3, #20]
 800c540:	6199      	str	r1, [r3, #24]
 800c542:	b013      	add	sp, #76	; 0x4c
 800c544:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c548:	f8dd e018 	ldr.w	lr, [sp, #24]
 800c54c:	e7eb      	b.n	800c526 <D128_1CH_HTONS_VOL_HP+0x29e>
 800c54e:	bf00      	nop
 800c550:	00780069 	.word	0x00780069
 800c554:	005b004e 	.word	0x005b004e
 800c558:	00420037 	.word	0x00420037
 800c55c:	002d0024 	.word	0x002d0024
 800c560:	001c0015 	.word	0x001c0015
 800c564:	000f000a 	.word	0x000f000a
 800c568:	00060003 	.word	0x00060003
 800c56c:	00880096 	.word	0x00880096
 800c570:	00a200ac 	.word	0x00a200ac
 800c574:	00b400ba 	.word	0x00b400ba
 800c578:	00be00c0 	.word	0x00be00c0
 800c57c:	00c000be 	.word	0x00c000be
 800c580:	00ba00b4 	.word	0x00ba00b4
 800c584:	00ac00a2 	.word	0x00ac00a2
 800c588:	00030006 	.word	0x00030006
 800c58c:	000a000f 	.word	0x000a000f
 800c590:	0015001c 	.word	0x0015001c
 800c594:	0024002d 	.word	0x0024002d
 800c598:	00370042 	.word	0x00370042
 800c59c:	004e005b 	.word	0x004e005b
 800c5a0:	00690078 	.word	0x00690078
 800c5a4:	20000000 	.word	0x20000000
 800c5a8:	00960088 	.word	0x00960088

0800c5ac <PDM_Filter_Init>:
 800c5ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c5ae:	2240      	movs	r2, #64	; 0x40
 800c5b0:	4604      	mov	r4, r0
 800c5b2:	2100      	movs	r1, #0
 800c5b4:	300c      	adds	r0, #12
 800c5b6:	f000 fa14 	bl	800c9e2 <memset>
 800c5ba:	493b      	ldr	r1, [pc, #236]	; (800c6a8 <PDM_Filter_Init+0xfc>)
 800c5bc:	483b      	ldr	r0, [pc, #236]	; (800c6ac <PDM_Filter_Init+0x100>)
 800c5be:	f000 f98d 	bl	800c8dc <CRC_Lock>
 800c5c2:	8822      	ldrh	r2, [r4, #0]
 800c5c4:	8963      	ldrh	r3, [r4, #10]
 800c5c6:	4938      	ldr	r1, [pc, #224]	; (800c6a8 <PDM_Filter_Init+0xfc>)
 800c5c8:	8925      	ldrh	r5, [r4, #8]
 800c5ca:	86a3      	strh	r3, [r4, #52]	; 0x34
 800c5cc:	2801      	cmp	r0, #1
 800c5ce:	f04f 0300 	mov.w	r3, #0
 800c5d2:	bf18      	it	ne
 800c5d4:	2100      	movne	r1, #0
 800c5d6:	2a01      	cmp	r2, #1
 800c5d8:	6461      	str	r1, [r4, #68]	; 0x44
 800c5da:	86e5      	strh	r5, [r4, #54]	; 0x36
 800c5dc:	61a3      	str	r3, [r4, #24]
 800c5de:	6123      	str	r3, [r4, #16]
 800c5e0:	6163      	str	r3, [r4, #20]
 800c5e2:	60e3      	str	r3, [r4, #12]
 800c5e4:	6263      	str	r3, [r4, #36]	; 0x24
 800c5e6:	61e3      	str	r3, [r4, #28]
 800c5e8:	6223      	str	r3, [r4, #32]
 800c5ea:	6423      	str	r3, [r4, #64]	; 0x40
 800c5ec:	d918      	bls.n	800c620 <PDM_Filter_Init+0x74>
 800c5ee:	2003      	movs	r0, #3
 800c5f0:	2302      	movs	r3, #2
 800c5f2:	8862      	ldrh	r2, [r4, #2]
 800c5f4:	2a01      	cmp	r2, #1
 800c5f6:	d91d      	bls.n	800c634 <PDM_Filter_Init+0x88>
 800c5f8:	2140      	movs	r1, #64	; 0x40
 800c5fa:	2300      	movs	r3, #0
 800c5fc:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800c5fe:	f1b2 1f01 	cmp.w	r2, #65537	; 0x10001
 800c602:	6862      	ldr	r2, [r4, #4]
 800c604:	bf04      	itt	eq
 800c606:	6421      	streq	r1, [r4, #64]	; 0x40
 800c608:	460b      	moveq	r3, r1
 800c60a:	b11a      	cbz	r2, 800c614 <PDM_Filter_Init+0x68>
 800c60c:	f043 0310 	orr.w	r3, r3, #16
 800c610:	6423      	str	r3, [r4, #64]	; 0x40
 800c612:	62e2      	str	r2, [r4, #44]	; 0x2c
 800c614:	2200      	movs	r2, #0
 800c616:	8722      	strh	r2, [r4, #56]	; 0x38
 800c618:	b908      	cbnz	r0, 800c61e <PDM_Filter_Init+0x72>
 800c61a:	3380      	adds	r3, #128	; 0x80
 800c61c:	6423      	str	r3, [r4, #64]	; 0x40
 800c61e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c620:	4d23      	ldr	r5, [pc, #140]	; (800c6b0 <PDM_Filter_Init+0x104>)
 800c622:	d010      	beq.n	800c646 <PDM_Filter_Init+0x9a>
 800c624:	782a      	ldrb	r2, [r5, #0]
 800c626:	2a01      	cmp	r2, #1
 800c628:	d027      	beq.n	800c67a <PDM_Filter_Init+0xce>
 800c62a:	8862      	ldrh	r2, [r4, #2]
 800c62c:	2a01      	cmp	r2, #1
 800c62e:	f04f 0001 	mov.w	r0, #1
 800c632:	d8e1      	bhi.n	800c5f8 <PDM_Filter_Init+0x4c>
 800c634:	d001      	beq.n	800c63a <PDM_Filter_Init+0x8e>
 800c636:	4618      	mov	r0, r3
 800c638:	e7de      	b.n	800c5f8 <PDM_Filter_Init+0x4c>
 800c63a:	2220      	movs	r2, #32
 800c63c:	4618      	mov	r0, r3
 800c63e:	6422      	str	r2, [r4, #64]	; 0x40
 800c640:	4613      	mov	r3, r2
 800c642:	2160      	movs	r1, #96	; 0x60
 800c644:	e7da      	b.n	800c5fc <PDM_Filter_Init+0x50>
 800c646:	7829      	ldrb	r1, [r5, #0]
 800c648:	2900      	cmp	r1, #0
 800c64a:	d1ee      	bne.n	800c62a <PDM_Filter_Init+0x7e>
 800c64c:	4919      	ldr	r1, [pc, #100]	; (800c6b4 <PDM_Filter_Init+0x108>)
 800c64e:	f8df e06c 	ldr.w	lr, [pc, #108]	; 800c6bc <PDM_Filter_Init+0x110>
 800c652:	4f19      	ldr	r7, [pc, #100]	; (800c6b8 <PDM_Filter_Init+0x10c>)
 800c654:	f501 6680 	add.w	r6, r1, #1024	; 0x400
 800c658:	684a      	ldr	r2, [r1, #4]
 800c65a:	ea0e 5302 	and.w	r3, lr, r2, lsl #20
 800c65e:	ea02 0007 	and.w	r0, r2, r7
 800c662:	4303      	orrs	r3, r0
 800c664:	f3c2 5209 	ubfx	r2, r2, #20, #10
 800c668:	4413      	add	r3, r2
 800c66a:	f841 3f04 	str.w	r3, [r1, #4]!
 800c66e:	428e      	cmp	r6, r1
 800c670:	d1f2      	bne.n	800c658 <PDM_Filter_Init+0xac>
 800c672:	2001      	movs	r0, #1
 800c674:	7028      	strb	r0, [r5, #0]
 800c676:	2300      	movs	r3, #0
 800c678:	e7bb      	b.n	800c5f2 <PDM_Filter_Init+0x46>
 800c67a:	490e      	ldr	r1, [pc, #56]	; (800c6b4 <PDM_Filter_Init+0x108>)
 800c67c:	f8df e03c 	ldr.w	lr, [pc, #60]	; 800c6bc <PDM_Filter_Init+0x110>
 800c680:	4f0d      	ldr	r7, [pc, #52]	; (800c6b8 <PDM_Filter_Init+0x10c>)
 800c682:	f501 6680 	add.w	r6, r1, #1024	; 0x400
 800c686:	684a      	ldr	r2, [r1, #4]
 800c688:	ea0e 5302 	and.w	r3, lr, r2, lsl #20
 800c68c:	ea02 0007 	and.w	r0, r2, r7
 800c690:	4303      	orrs	r3, r0
 800c692:	f3c2 5209 	ubfx	r2, r2, #20, #10
 800c696:	4413      	add	r3, r2
 800c698:	f841 3f04 	str.w	r3, [r1, #4]!
 800c69c:	428e      	cmp	r6, r1
 800c69e:	d1f2      	bne.n	800c686 <PDM_Filter_Init+0xda>
 800c6a0:	2300      	movs	r3, #0
 800c6a2:	702b      	strb	r3, [r5, #0]
 800c6a4:	e7c1      	b.n	800c62a <PDM_Filter_Init+0x7e>
 800c6a6:	bf00      	nop
 800c6a8:	b5e8b5cd 	.word	0xb5e8b5cd
 800c6ac:	f407a5c2 	.word	0xf407a5c2
 800c6b0:	20000604 	.word	0x20000604
 800c6b4:	1ffffffc 	.word	0x1ffffffc
 800c6b8:	000ffc00 	.word	0x000ffc00
 800c6bc:	3ff00000 	.word	0x3ff00000

0800c6c0 <PDM_Filter_setConfig>:
 800c6c0:	4b66      	ldr	r3, [pc, #408]	; (800c85c <PDM_Filter_setConfig+0x19c>)
 800c6c2:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800c6c4:	429a      	cmp	r2, r3
 800c6c6:	d001      	beq.n	800c6cc <PDM_Filter_setConfig+0xc>
 800c6c8:	2004      	movs	r0, #4
 800c6ca:	4770      	bx	lr
 800c6cc:	b530      	push	{r4, r5, lr}
 800c6ce:	880a      	ldrh	r2, [r1, #0]
 800c6d0:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800c6d2:	ed2d 8b04 	vpush	{d8-d9}
 800c6d6:	4604      	mov	r4, r0
 800c6d8:	460d      	mov	r5, r1
 800c6da:	1e51      	subs	r1, r2, #1
 800c6dc:	f423 7080 	bic.w	r0, r3, #256	; 0x100
 800c6e0:	2906      	cmp	r1, #6
 800c6e2:	b083      	sub	sp, #12
 800c6e4:	6420      	str	r0, [r4, #64]	; 0x40
 800c6e6:	d91a      	bls.n	800c71e <PDM_Filter_setConfig+0x5e>
 800c6e8:	2008      	movs	r0, #8
 800c6ea:	f9b4 1038 	ldrsh.w	r1, [r4, #56]	; 0x38
 800c6ee:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
 800c6f2:	4299      	cmp	r1, r3
 800c6f4:	d07e      	beq.n	800c7f4 <PDM_Filter_setConfig+0x134>
 800c6f6:	f113 0f0c 	cmn.w	r3, #12
 800c6fa:	da2a      	bge.n	800c752 <PDM_Filter_setConfig+0x92>
 800c6fc:	f64f 73f4 	movw	r3, #65524	; 0xfff4
 800c700:	3040      	adds	r0, #64	; 0x40
 800c702:	80ab      	strh	r3, [r5, #4]
 800c704:	8622      	strh	r2, [r4, #48]	; 0x30
 800c706:	886b      	ldrh	r3, [r5, #2]
 800c708:	8663      	strh	r3, [r4, #50]	; 0x32
 800c70a:	b920      	cbnz	r0, 800c716 <PDM_Filter_setConfig+0x56>
 800c70c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c70e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c712:	6423      	str	r3, [r4, #64]	; 0x40
 800c714:	2000      	movs	r0, #0
 800c716:	b003      	add	sp, #12
 800c718:	ecbd 8b04 	vpop	{d8-d9}
 800c71c:	bd30      	pop	{r4, r5, pc}
 800c71e:	8e21      	ldrh	r1, [r4, #48]	; 0x30
 800c720:	4291      	cmp	r1, r2
 800c722:	d06c      	beq.n	800c7fe <PDM_Filter_setConfig+0x13e>
 800c724:	f423 7387 	bic.w	r3, r3, #270	; 0x10e
 800c728:	f023 0301 	bic.w	r3, r3, #1
 800c72c:	4313      	orrs	r3, r2
 800c72e:	f003 0170 	and.w	r1, r3, #112	; 0x70
 800c732:	6423      	str	r3, [r4, #64]	; 0x40
 800c734:	2970      	cmp	r1, #112	; 0x70
 800c736:	f003 030f 	and.w	r3, r3, #15
 800c73a:	f103 33ff 	add.w	r3, r3, #4294967295
 800c73e:	d066      	beq.n	800c80e <PDM_Filter_setConfig+0x14e>
 800c740:	2b06      	cmp	r3, #6
 800c742:	f200 8089 	bhi.w	800c858 <PDM_Filter_setConfig+0x198>
 800c746:	e8df f003 	tbb	[pc, r3]
 800c74a:	4f52      	.short	0x4f52
 800c74c:	3d43494c 	.word	0x3d43494c
 800c750:	46          	.byte	0x46
 800c751:	00          	.byte	0x00
 800c752:	2b33      	cmp	r3, #51	; 0x33
 800c754:	dc32      	bgt.n	800c7bc <PDM_Filter_setConfig+0xfc>
 800c756:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800c758:	f002 020f 	and.w	r2, r2, #15
 800c75c:	3a01      	subs	r2, #1
 800c75e:	2a06      	cmp	r2, #6
 800c760:	d872      	bhi.n	800c848 <PDM_Filter_setConfig+0x188>
 800c762:	493f      	ldr	r1, [pc, #252]	; (800c860 <PDM_Filter_setConfig+0x1a0>)
 800c764:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 800c768:	ed92 9a00 	vldr	s18, [r2]
 800c76c:	ed92 8a07 	vldr	s16, [r2, #28]
 800c770:	9001      	str	r0, [sp, #4]
 800c772:	ee07 3a90 	vmov	s15, r3
 800c776:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c77a:	eef3 0a04 	vmov.f32	s1, #52	; 0x41a00000  20.0
 800c77e:	eec7 0aa0 	vdiv.f32	s1, s15, s1
 800c782:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 800c786:	f000 fa15 	bl	800cbb4 <powf>
 800c78a:	eddf 0a36 	vldr	s1, [pc, #216]	; 800c864 <PDM_Filter_setConfig+0x1a4>
 800c78e:	eef0 8a40 	vmov.f32	s17, s0
 800c792:	ee70 0ac9 	vsub.f32	s1, s1, s18
 800c796:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 800c79a:	f000 fa0b 	bl	800cbb4 <powf>
 800c79e:	ee28 8a28 	vmul.f32	s16, s16, s17
 800c7a2:	ee28 0a00 	vmul.f32	s0, s16, s0
 800c7a6:	f000 f9df 	bl	800cb68 <roundf>
 800c7aa:	eebc 0ac0 	vcvt.u32.f32	s0, s0
 800c7ae:	88ab      	ldrh	r3, [r5, #4]
 800c7b0:	882a      	ldrh	r2, [r5, #0]
 800c7b2:	9801      	ldr	r0, [sp, #4]
 800c7b4:	ed84 0a0f 	vstr	s0, [r4, #60]	; 0x3c
 800c7b8:	8723      	strh	r3, [r4, #56]	; 0x38
 800c7ba:	e7a3      	b.n	800c704 <PDM_Filter_setConfig+0x44>
 800c7bc:	2333      	movs	r3, #51	; 0x33
 800c7be:	3040      	adds	r0, #64	; 0x40
 800c7c0:	80ab      	strh	r3, [r5, #4]
 800c7c2:	e79f      	b.n	800c704 <PDM_Filter_setConfig+0x44>
 800c7c4:	4b28      	ldr	r3, [pc, #160]	; (800c868 <PDM_Filter_setConfig+0x1a8>)
 800c7c6:	64a3      	str	r3, [r4, #72]	; 0x48
 800c7c8:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
 800c7cc:	2000      	movs	r0, #0
 800c7ce:	e792      	b.n	800c6f6 <PDM_Filter_setConfig+0x36>
 800c7d0:	4b26      	ldr	r3, [pc, #152]	; (800c86c <PDM_Filter_setConfig+0x1ac>)
 800c7d2:	64a3      	str	r3, [r4, #72]	; 0x48
 800c7d4:	e7f8      	b.n	800c7c8 <PDM_Filter_setConfig+0x108>
 800c7d6:	4b26      	ldr	r3, [pc, #152]	; (800c870 <PDM_Filter_setConfig+0x1b0>)
 800c7d8:	64a3      	str	r3, [r4, #72]	; 0x48
 800c7da:	e7f5      	b.n	800c7c8 <PDM_Filter_setConfig+0x108>
 800c7dc:	4b25      	ldr	r3, [pc, #148]	; (800c874 <PDM_Filter_setConfig+0x1b4>)
 800c7de:	64a3      	str	r3, [r4, #72]	; 0x48
 800c7e0:	e7f2      	b.n	800c7c8 <PDM_Filter_setConfig+0x108>
 800c7e2:	4b25      	ldr	r3, [pc, #148]	; (800c878 <PDM_Filter_setConfig+0x1b8>)
 800c7e4:	64a3      	str	r3, [r4, #72]	; 0x48
 800c7e6:	e7ef      	b.n	800c7c8 <PDM_Filter_setConfig+0x108>
 800c7e8:	4b24      	ldr	r3, [pc, #144]	; (800c87c <PDM_Filter_setConfig+0x1bc>)
 800c7ea:	64a3      	str	r3, [r4, #72]	; 0x48
 800c7ec:	e7ec      	b.n	800c7c8 <PDM_Filter_setConfig+0x108>
 800c7ee:	4b24      	ldr	r3, [pc, #144]	; (800c880 <PDM_Filter_setConfig+0x1c0>)
 800c7f0:	64a3      	str	r3, [r4, #72]	; 0x48
 800c7f2:	e7e9      	b.n	800c7c8 <PDM_Filter_setConfig+0x108>
 800c7f4:	8e21      	ldrh	r1, [r4, #48]	; 0x30
 800c7f6:	4291      	cmp	r1, r2
 800c7f8:	f47f af7d 	bne.w	800c6f6 <PDM_Filter_setConfig+0x36>
 800c7fc:	e783      	b.n	800c706 <PDM_Filter_setConfig+0x46>
 800c7fe:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
 800c802:	f9b4 1038 	ldrsh.w	r1, [r4, #56]	; 0x38
 800c806:	4299      	cmp	r1, r3
 800c808:	d023      	beq.n	800c852 <PDM_Filter_setConfig+0x192>
 800c80a:	2000      	movs	r0, #0
 800c80c:	e773      	b.n	800c6f6 <PDM_Filter_setConfig+0x36>
 800c80e:	2b06      	cmp	r3, #6
 800c810:	d822      	bhi.n	800c858 <PDM_Filter_setConfig+0x198>
 800c812:	e8df f003 	tbb	[pc, r3]
 800c816:	1316      	.short	0x1316
 800c818:	070a0d10 	.word	0x070a0d10
 800c81c:	04          	.byte	0x04
 800c81d:	00          	.byte	0x00
 800c81e:	4b19      	ldr	r3, [pc, #100]	; (800c884 <PDM_Filter_setConfig+0x1c4>)
 800c820:	64a3      	str	r3, [r4, #72]	; 0x48
 800c822:	e7d1      	b.n	800c7c8 <PDM_Filter_setConfig+0x108>
 800c824:	4b18      	ldr	r3, [pc, #96]	; (800c888 <PDM_Filter_setConfig+0x1c8>)
 800c826:	64a3      	str	r3, [r4, #72]	; 0x48
 800c828:	e7ce      	b.n	800c7c8 <PDM_Filter_setConfig+0x108>
 800c82a:	4b18      	ldr	r3, [pc, #96]	; (800c88c <PDM_Filter_setConfig+0x1cc>)
 800c82c:	64a3      	str	r3, [r4, #72]	; 0x48
 800c82e:	e7cb      	b.n	800c7c8 <PDM_Filter_setConfig+0x108>
 800c830:	4b17      	ldr	r3, [pc, #92]	; (800c890 <PDM_Filter_setConfig+0x1d0>)
 800c832:	64a3      	str	r3, [r4, #72]	; 0x48
 800c834:	e7c8      	b.n	800c7c8 <PDM_Filter_setConfig+0x108>
 800c836:	4b17      	ldr	r3, [pc, #92]	; (800c894 <PDM_Filter_setConfig+0x1d4>)
 800c838:	64a3      	str	r3, [r4, #72]	; 0x48
 800c83a:	e7c5      	b.n	800c7c8 <PDM_Filter_setConfig+0x108>
 800c83c:	4b16      	ldr	r3, [pc, #88]	; (800c898 <PDM_Filter_setConfig+0x1d8>)
 800c83e:	64a3      	str	r3, [r4, #72]	; 0x48
 800c840:	e7c2      	b.n	800c7c8 <PDM_Filter_setConfig+0x108>
 800c842:	4b16      	ldr	r3, [pc, #88]	; (800c89c <PDM_Filter_setConfig+0x1dc>)
 800c844:	64a3      	str	r3, [r4, #72]	; 0x48
 800c846:	e7bf      	b.n	800c7c8 <PDM_Filter_setConfig+0x108>
 800c848:	ed9f 8a15 	vldr	s16, [pc, #84]	; 800c8a0 <PDM_Filter_setConfig+0x1e0>
 800c84c:	eeb0 9a48 	vmov.f32	s18, s16
 800c850:	e78e      	b.n	800c770 <PDM_Filter_setConfig+0xb0>
 800c852:	886b      	ldrh	r3, [r5, #2]
 800c854:	8663      	strh	r3, [r4, #50]	; 0x32
 800c856:	e759      	b.n	800c70c <PDM_Filter_setConfig+0x4c>
 800c858:	2000      	movs	r0, #0
 800c85a:	e746      	b.n	800c6ea <PDM_Filter_setConfig+0x2a>
 800c85c:	b5e8b5cd 	.word	0xb5e8b5cd
 800c860:	0800d864 	.word	0x0800d864
 800c864:	42000000 	.word	0x42000000
 800c868:	0800ac2d 	.word	0x0800ac2d
 800c86c:	0800ab0d 	.word	0x0800ab0d
 800c870:	0800adbd 	.word	0x0800adbd
 800c874:	0800b601 	.word	0x0800b601
 800c878:	0800b361 	.word	0x0800b361
 800c87c:	0800b141 	.word	0x0800b141
 800c880:	0800af55 	.word	0x0800af55
 800c884:	0800bc0d 	.word	0x0800bc0d
 800c888:	0800bad5 	.word	0x0800bad5
 800c88c:	0800b9f1 	.word	0x0800b9f1
 800c890:	0800c289 	.word	0x0800c289
 800c894:	0800c075 	.word	0x0800c075
 800c898:	0800bebd 	.word	0x0800bebd
 800c89c:	0800bd51 	.word	0x0800bd51
 800c8a0:	00000000 	.word	0x00000000

0800c8a4 <PDM_Filter>:
 800c8a4:	b410      	push	{r4}
 800c8a6:	4b0c      	ldr	r3, [pc, #48]	; (800c8d8 <PDM_Filter+0x34>)
 800c8a8:	6c54      	ldr	r4, [r2, #68]	; 0x44
 800c8aa:	429c      	cmp	r4, r3
 800c8ac:	d003      	beq.n	800c8b6 <PDM_Filter+0x12>
 800c8ae:	2004      	movs	r0, #4
 800c8b0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c8b4:	4770      	bx	lr
 800c8b6:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800c8b8:	05dc      	lsls	r4, r3, #23
 800c8ba:	d407      	bmi.n	800c8cc <PDM_Filter+0x28>
 800c8bc:	f013 0f80 	tst.w	r3, #128	; 0x80
 800c8c0:	bf14      	ite	ne
 800c8c2:	2020      	movne	r0, #32
 800c8c4:	2030      	moveq	r0, #48	; 0x30
 800c8c6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c8ca:	4770      	bx	lr
 800c8cc:	6c93      	ldr	r3, [r2, #72]	; 0x48
 800c8ce:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c8d2:	320c      	adds	r2, #12
 800c8d4:	4718      	bx	r3
 800c8d6:	bf00      	nop
 800c8d8:	b5e8b5cd 	.word	0xb5e8b5cd

0800c8dc <CRC_Lock>:
 800c8dc:	4a17      	ldr	r2, [pc, #92]	; (800c93c <CRC_Lock+0x60>)
 800c8de:	6813      	ldr	r3, [r2, #0]
 800c8e0:	b410      	push	{r4}
 800c8e2:	f023 0301 	bic.w	r3, r3, #1
 800c8e6:	4c16      	ldr	r4, [pc, #88]	; (800c940 <CRC_Lock+0x64>)
 800c8e8:	6013      	str	r3, [r2, #0]
 800c8ea:	6823      	ldr	r3, [r4, #0]
 800c8ec:	b933      	cbnz	r3, 800c8fc <CRC_Lock+0x20>
 800c8ee:	4b15      	ldr	r3, [pc, #84]	; (800c944 <CRC_Lock+0x68>)
 800c8f0:	681b      	ldr	r3, [r3, #0]
 800c8f2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800c8f6:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 800c8fa:	d00f      	beq.n	800c91c <CRC_Lock+0x40>
 800c8fc:	4a12      	ldr	r2, [pc, #72]	; (800c948 <CRC_Lock+0x6c>)
 800c8fe:	2301      	movs	r3, #1
 800c900:	6013      	str	r3, [r2, #0]
 800c902:	6813      	ldr	r3, [r2, #0]
 800c904:	2b00      	cmp	r3, #0
 800c906:	d1fc      	bne.n	800c902 <CRC_Lock+0x26>
 800c908:	4b10      	ldr	r3, [pc, #64]	; (800c94c <CRC_Lock+0x70>)
 800c90a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c90e:	6018      	str	r0, [r3, #0]
 800c910:	6818      	ldr	r0, [r3, #0]
 800c912:	1a08      	subs	r0, r1, r0
 800c914:	fab0 f080 	clz	r0, r0
 800c918:	0940      	lsrs	r0, r0, #5
 800c91a:	4770      	bx	lr
 800c91c:	4a0c      	ldr	r2, [pc, #48]	; (800c950 <CRC_Lock+0x74>)
 800c91e:	2301      	movs	r3, #1
 800c920:	6013      	str	r3, [r2, #0]
 800c922:	6813      	ldr	r3, [r2, #0]
 800c924:	2b00      	cmp	r3, #0
 800c926:	d1fc      	bne.n	800c922 <CRC_Lock+0x46>
 800c928:	4b0a      	ldr	r3, [pc, #40]	; (800c954 <CRC_Lock+0x78>)
 800c92a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c92e:	6018      	str	r0, [r3, #0]
 800c930:	6818      	ldr	r0, [r3, #0]
 800c932:	1a40      	subs	r0, r0, r1
 800c934:	fab0 f080 	clz	r0, r0
 800c938:	0940      	lsrs	r0, r0, #5
 800c93a:	4770      	bx	lr
 800c93c:	e0002000 	.word	0xe0002000
 800c940:	e0042000 	.word	0xe0042000
 800c944:	5c001000 	.word	0x5c001000
 800c948:	40023008 	.word	0x40023008
 800c94c:	40023000 	.word	0x40023000
 800c950:	58024c08 	.word	0x58024c08
 800c954:	58024c00 	.word	0x58024c00

0800c958 <__errno>:
 800c958:	4b01      	ldr	r3, [pc, #4]	; (800c960 <__errno+0x8>)
 800c95a:	6818      	ldr	r0, [r3, #0]
 800c95c:	4770      	bx	lr
 800c95e:	bf00      	nop
 800c960:	20000580 	.word	0x20000580

0800c964 <__libc_init_array>:
 800c964:	b570      	push	{r4, r5, r6, lr}
 800c966:	4e0d      	ldr	r6, [pc, #52]	; (800c99c <__libc_init_array+0x38>)
 800c968:	4c0d      	ldr	r4, [pc, #52]	; (800c9a0 <__libc_init_array+0x3c>)
 800c96a:	1ba4      	subs	r4, r4, r6
 800c96c:	10a4      	asrs	r4, r4, #2
 800c96e:	2500      	movs	r5, #0
 800c970:	42a5      	cmp	r5, r4
 800c972:	d109      	bne.n	800c988 <__libc_init_array+0x24>
 800c974:	4e0b      	ldr	r6, [pc, #44]	; (800c9a4 <__libc_init_array+0x40>)
 800c976:	4c0c      	ldr	r4, [pc, #48]	; (800c9a8 <__libc_init_array+0x44>)
 800c978:	f000 fe22 	bl	800d5c0 <_init>
 800c97c:	1ba4      	subs	r4, r4, r6
 800c97e:	10a4      	asrs	r4, r4, #2
 800c980:	2500      	movs	r5, #0
 800c982:	42a5      	cmp	r5, r4
 800c984:	d105      	bne.n	800c992 <__libc_init_array+0x2e>
 800c986:	bd70      	pop	{r4, r5, r6, pc}
 800c988:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800c98c:	4798      	blx	r3
 800c98e:	3501      	adds	r5, #1
 800c990:	e7ee      	b.n	800c970 <__libc_init_array+0xc>
 800c992:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800c996:	4798      	blx	r3
 800c998:	3501      	adds	r5, #1
 800c99a:	e7f2      	b.n	800c982 <__libc_init_array+0x1e>
 800c99c:	0800d94c 	.word	0x0800d94c
 800c9a0:	0800d94c 	.word	0x0800d94c
 800c9a4:	0800d94c 	.word	0x0800d94c
 800c9a8:	0800d950 	.word	0x0800d950

0800c9ac <malloc>:
 800c9ac:	4b02      	ldr	r3, [pc, #8]	; (800c9b8 <malloc+0xc>)
 800c9ae:	4601      	mov	r1, r0
 800c9b0:	6818      	ldr	r0, [r3, #0]
 800c9b2:	f000 b86d 	b.w	800ca90 <_malloc_r>
 800c9b6:	bf00      	nop
 800c9b8:	20000580 	.word	0x20000580

0800c9bc <free>:
 800c9bc:	4b02      	ldr	r3, [pc, #8]	; (800c9c8 <free+0xc>)
 800c9be:	4601      	mov	r1, r0
 800c9c0:	6818      	ldr	r0, [r3, #0]
 800c9c2:	f000 b817 	b.w	800c9f4 <_free_r>
 800c9c6:	bf00      	nop
 800c9c8:	20000580 	.word	0x20000580

0800c9cc <memcpy>:
 800c9cc:	b510      	push	{r4, lr}
 800c9ce:	1e43      	subs	r3, r0, #1
 800c9d0:	440a      	add	r2, r1
 800c9d2:	4291      	cmp	r1, r2
 800c9d4:	d100      	bne.n	800c9d8 <memcpy+0xc>
 800c9d6:	bd10      	pop	{r4, pc}
 800c9d8:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c9dc:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c9e0:	e7f7      	b.n	800c9d2 <memcpy+0x6>

0800c9e2 <memset>:
 800c9e2:	4402      	add	r2, r0
 800c9e4:	4603      	mov	r3, r0
 800c9e6:	4293      	cmp	r3, r2
 800c9e8:	d100      	bne.n	800c9ec <memset+0xa>
 800c9ea:	4770      	bx	lr
 800c9ec:	f803 1b01 	strb.w	r1, [r3], #1
 800c9f0:	e7f9      	b.n	800c9e6 <memset+0x4>
	...

0800c9f4 <_free_r>:
 800c9f4:	b538      	push	{r3, r4, r5, lr}
 800c9f6:	4605      	mov	r5, r0
 800c9f8:	2900      	cmp	r1, #0
 800c9fa:	d045      	beq.n	800ca88 <_free_r+0x94>
 800c9fc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ca00:	1f0c      	subs	r4, r1, #4
 800ca02:	2b00      	cmp	r3, #0
 800ca04:	bfb8      	it	lt
 800ca06:	18e4      	addlt	r4, r4, r3
 800ca08:	f000 f8ac 	bl	800cb64 <__malloc_lock>
 800ca0c:	4a1f      	ldr	r2, [pc, #124]	; (800ca8c <_free_r+0x98>)
 800ca0e:	6813      	ldr	r3, [r2, #0]
 800ca10:	4610      	mov	r0, r2
 800ca12:	b933      	cbnz	r3, 800ca22 <_free_r+0x2e>
 800ca14:	6063      	str	r3, [r4, #4]
 800ca16:	6014      	str	r4, [r2, #0]
 800ca18:	4628      	mov	r0, r5
 800ca1a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ca1e:	f000 b8a2 	b.w	800cb66 <__malloc_unlock>
 800ca22:	42a3      	cmp	r3, r4
 800ca24:	d90c      	bls.n	800ca40 <_free_r+0x4c>
 800ca26:	6821      	ldr	r1, [r4, #0]
 800ca28:	1862      	adds	r2, r4, r1
 800ca2a:	4293      	cmp	r3, r2
 800ca2c:	bf04      	itt	eq
 800ca2e:	681a      	ldreq	r2, [r3, #0]
 800ca30:	685b      	ldreq	r3, [r3, #4]
 800ca32:	6063      	str	r3, [r4, #4]
 800ca34:	bf04      	itt	eq
 800ca36:	1852      	addeq	r2, r2, r1
 800ca38:	6022      	streq	r2, [r4, #0]
 800ca3a:	6004      	str	r4, [r0, #0]
 800ca3c:	e7ec      	b.n	800ca18 <_free_r+0x24>
 800ca3e:	4613      	mov	r3, r2
 800ca40:	685a      	ldr	r2, [r3, #4]
 800ca42:	b10a      	cbz	r2, 800ca48 <_free_r+0x54>
 800ca44:	42a2      	cmp	r2, r4
 800ca46:	d9fa      	bls.n	800ca3e <_free_r+0x4a>
 800ca48:	6819      	ldr	r1, [r3, #0]
 800ca4a:	1858      	adds	r0, r3, r1
 800ca4c:	42a0      	cmp	r0, r4
 800ca4e:	d10b      	bne.n	800ca68 <_free_r+0x74>
 800ca50:	6820      	ldr	r0, [r4, #0]
 800ca52:	4401      	add	r1, r0
 800ca54:	1858      	adds	r0, r3, r1
 800ca56:	4282      	cmp	r2, r0
 800ca58:	6019      	str	r1, [r3, #0]
 800ca5a:	d1dd      	bne.n	800ca18 <_free_r+0x24>
 800ca5c:	6810      	ldr	r0, [r2, #0]
 800ca5e:	6852      	ldr	r2, [r2, #4]
 800ca60:	605a      	str	r2, [r3, #4]
 800ca62:	4401      	add	r1, r0
 800ca64:	6019      	str	r1, [r3, #0]
 800ca66:	e7d7      	b.n	800ca18 <_free_r+0x24>
 800ca68:	d902      	bls.n	800ca70 <_free_r+0x7c>
 800ca6a:	230c      	movs	r3, #12
 800ca6c:	602b      	str	r3, [r5, #0]
 800ca6e:	e7d3      	b.n	800ca18 <_free_r+0x24>
 800ca70:	6820      	ldr	r0, [r4, #0]
 800ca72:	1821      	adds	r1, r4, r0
 800ca74:	428a      	cmp	r2, r1
 800ca76:	bf04      	itt	eq
 800ca78:	6811      	ldreq	r1, [r2, #0]
 800ca7a:	6852      	ldreq	r2, [r2, #4]
 800ca7c:	6062      	str	r2, [r4, #4]
 800ca7e:	bf04      	itt	eq
 800ca80:	1809      	addeq	r1, r1, r0
 800ca82:	6021      	streq	r1, [r4, #0]
 800ca84:	605c      	str	r4, [r3, #4]
 800ca86:	e7c7      	b.n	800ca18 <_free_r+0x24>
 800ca88:	bd38      	pop	{r3, r4, r5, pc}
 800ca8a:	bf00      	nop
 800ca8c:	2000066c 	.word	0x2000066c

0800ca90 <_malloc_r>:
 800ca90:	b570      	push	{r4, r5, r6, lr}
 800ca92:	1ccd      	adds	r5, r1, #3
 800ca94:	f025 0503 	bic.w	r5, r5, #3
 800ca98:	3508      	adds	r5, #8
 800ca9a:	2d0c      	cmp	r5, #12
 800ca9c:	bf38      	it	cc
 800ca9e:	250c      	movcc	r5, #12
 800caa0:	2d00      	cmp	r5, #0
 800caa2:	4606      	mov	r6, r0
 800caa4:	db01      	blt.n	800caaa <_malloc_r+0x1a>
 800caa6:	42a9      	cmp	r1, r5
 800caa8:	d903      	bls.n	800cab2 <_malloc_r+0x22>
 800caaa:	230c      	movs	r3, #12
 800caac:	6033      	str	r3, [r6, #0]
 800caae:	2000      	movs	r0, #0
 800cab0:	bd70      	pop	{r4, r5, r6, pc}
 800cab2:	f000 f857 	bl	800cb64 <__malloc_lock>
 800cab6:	4a21      	ldr	r2, [pc, #132]	; (800cb3c <_malloc_r+0xac>)
 800cab8:	6814      	ldr	r4, [r2, #0]
 800caba:	4621      	mov	r1, r4
 800cabc:	b991      	cbnz	r1, 800cae4 <_malloc_r+0x54>
 800cabe:	4c20      	ldr	r4, [pc, #128]	; (800cb40 <_malloc_r+0xb0>)
 800cac0:	6823      	ldr	r3, [r4, #0]
 800cac2:	b91b      	cbnz	r3, 800cacc <_malloc_r+0x3c>
 800cac4:	4630      	mov	r0, r6
 800cac6:	f000 f83d 	bl	800cb44 <_sbrk_r>
 800caca:	6020      	str	r0, [r4, #0]
 800cacc:	4629      	mov	r1, r5
 800cace:	4630      	mov	r0, r6
 800cad0:	f000 f838 	bl	800cb44 <_sbrk_r>
 800cad4:	1c43      	adds	r3, r0, #1
 800cad6:	d124      	bne.n	800cb22 <_malloc_r+0x92>
 800cad8:	230c      	movs	r3, #12
 800cada:	6033      	str	r3, [r6, #0]
 800cadc:	4630      	mov	r0, r6
 800cade:	f000 f842 	bl	800cb66 <__malloc_unlock>
 800cae2:	e7e4      	b.n	800caae <_malloc_r+0x1e>
 800cae4:	680b      	ldr	r3, [r1, #0]
 800cae6:	1b5b      	subs	r3, r3, r5
 800cae8:	d418      	bmi.n	800cb1c <_malloc_r+0x8c>
 800caea:	2b0b      	cmp	r3, #11
 800caec:	d90f      	bls.n	800cb0e <_malloc_r+0x7e>
 800caee:	600b      	str	r3, [r1, #0]
 800caf0:	50cd      	str	r5, [r1, r3]
 800caf2:	18cc      	adds	r4, r1, r3
 800caf4:	4630      	mov	r0, r6
 800caf6:	f000 f836 	bl	800cb66 <__malloc_unlock>
 800cafa:	f104 000b 	add.w	r0, r4, #11
 800cafe:	1d23      	adds	r3, r4, #4
 800cb00:	f020 0007 	bic.w	r0, r0, #7
 800cb04:	1ac3      	subs	r3, r0, r3
 800cb06:	d0d3      	beq.n	800cab0 <_malloc_r+0x20>
 800cb08:	425a      	negs	r2, r3
 800cb0a:	50e2      	str	r2, [r4, r3]
 800cb0c:	e7d0      	b.n	800cab0 <_malloc_r+0x20>
 800cb0e:	428c      	cmp	r4, r1
 800cb10:	684b      	ldr	r3, [r1, #4]
 800cb12:	bf16      	itet	ne
 800cb14:	6063      	strne	r3, [r4, #4]
 800cb16:	6013      	streq	r3, [r2, #0]
 800cb18:	460c      	movne	r4, r1
 800cb1a:	e7eb      	b.n	800caf4 <_malloc_r+0x64>
 800cb1c:	460c      	mov	r4, r1
 800cb1e:	6849      	ldr	r1, [r1, #4]
 800cb20:	e7cc      	b.n	800cabc <_malloc_r+0x2c>
 800cb22:	1cc4      	adds	r4, r0, #3
 800cb24:	f024 0403 	bic.w	r4, r4, #3
 800cb28:	42a0      	cmp	r0, r4
 800cb2a:	d005      	beq.n	800cb38 <_malloc_r+0xa8>
 800cb2c:	1a21      	subs	r1, r4, r0
 800cb2e:	4630      	mov	r0, r6
 800cb30:	f000 f808 	bl	800cb44 <_sbrk_r>
 800cb34:	3001      	adds	r0, #1
 800cb36:	d0cf      	beq.n	800cad8 <_malloc_r+0x48>
 800cb38:	6025      	str	r5, [r4, #0]
 800cb3a:	e7db      	b.n	800caf4 <_malloc_r+0x64>
 800cb3c:	2000066c 	.word	0x2000066c
 800cb40:	20000670 	.word	0x20000670

0800cb44 <_sbrk_r>:
 800cb44:	b538      	push	{r3, r4, r5, lr}
 800cb46:	4c06      	ldr	r4, [pc, #24]	; (800cb60 <_sbrk_r+0x1c>)
 800cb48:	2300      	movs	r3, #0
 800cb4a:	4605      	mov	r5, r0
 800cb4c:	4608      	mov	r0, r1
 800cb4e:	6023      	str	r3, [r4, #0]
 800cb50:	f7f4 fef4 	bl	800193c <_sbrk>
 800cb54:	1c43      	adds	r3, r0, #1
 800cb56:	d102      	bne.n	800cb5e <_sbrk_r+0x1a>
 800cb58:	6823      	ldr	r3, [r4, #0]
 800cb5a:	b103      	cbz	r3, 800cb5e <_sbrk_r+0x1a>
 800cb5c:	602b      	str	r3, [r5, #0]
 800cb5e:	bd38      	pop	{r3, r4, r5, pc}
 800cb60:	20002968 	.word	0x20002968

0800cb64 <__malloc_lock>:
 800cb64:	4770      	bx	lr

0800cb66 <__malloc_unlock>:
 800cb66:	4770      	bx	lr

0800cb68 <roundf>:
 800cb68:	ee10 0a10 	vmov	r0, s0
 800cb6c:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 800cb70:	f1a3 027f 	sub.w	r2, r3, #127	; 0x7f
 800cb74:	2a16      	cmp	r2, #22
 800cb76:	dc15      	bgt.n	800cba4 <roundf+0x3c>
 800cb78:	2a00      	cmp	r2, #0
 800cb7a:	da08      	bge.n	800cb8e <roundf+0x26>
 800cb7c:	3201      	adds	r2, #1
 800cb7e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800cb82:	d101      	bne.n	800cb88 <roundf+0x20>
 800cb84:	f043 537e 	orr.w	r3, r3, #1065353216	; 0x3f800000
 800cb88:	ee00 3a10 	vmov	s0, r3
 800cb8c:	4770      	bx	lr
 800cb8e:	4908      	ldr	r1, [pc, #32]	; (800cbb0 <roundf+0x48>)
 800cb90:	4111      	asrs	r1, r2
 800cb92:	4208      	tst	r0, r1
 800cb94:	d0fa      	beq.n	800cb8c <roundf+0x24>
 800cb96:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800cb9a:	4113      	asrs	r3, r2
 800cb9c:	4403      	add	r3, r0
 800cb9e:	ea23 0301 	bic.w	r3, r3, r1
 800cba2:	e7f1      	b.n	800cb88 <roundf+0x20>
 800cba4:	2a80      	cmp	r2, #128	; 0x80
 800cba6:	d1f1      	bne.n	800cb8c <roundf+0x24>
 800cba8:	ee30 0a00 	vadd.f32	s0, s0, s0
 800cbac:	4770      	bx	lr
 800cbae:	bf00      	nop
 800cbb0:	007fffff 	.word	0x007fffff

0800cbb4 <powf>:
 800cbb4:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
 800cbb8:	ed2d 8b04 	vpush	{d8-d9}
 800cbbc:	4ca7      	ldr	r4, [pc, #668]	; (800ce5c <powf+0x2a8>)
 800cbbe:	b08a      	sub	sp, #40	; 0x28
 800cbc0:	eef0 8a40 	vmov.f32	s17, s0
 800cbc4:	eeb0 8a60 	vmov.f32	s16, s1
 800cbc8:	f000 f958 	bl	800ce7c <__ieee754_powf>
 800cbcc:	f994 5000 	ldrsb.w	r5, [r4]
 800cbd0:	1c6b      	adds	r3, r5, #1
 800cbd2:	eeb0 9a40 	vmov.f32	s18, s0
 800cbd6:	4626      	mov	r6, r4
 800cbd8:	d05f      	beq.n	800cc9a <powf+0xe6>
 800cbda:	eeb4 8a48 	vcmp.f32	s16, s16
 800cbde:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cbe2:	d65a      	bvs.n	800cc9a <powf+0xe6>
 800cbe4:	eef4 8a68 	vcmp.f32	s17, s17
 800cbe8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cbec:	d721      	bvc.n	800cc32 <powf+0x7e>
 800cbee:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800cbf2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cbf6:	d150      	bne.n	800cc9a <powf+0xe6>
 800cbf8:	2301      	movs	r3, #1
 800cbfa:	9300      	str	r3, [sp, #0]
 800cbfc:	4b98      	ldr	r3, [pc, #608]	; (800ce60 <powf+0x2ac>)
 800cbfe:	9301      	str	r3, [sp, #4]
 800cc00:	ee18 0a90 	vmov	r0, s17
 800cc04:	2300      	movs	r3, #0
 800cc06:	9308      	str	r3, [sp, #32]
 800cc08:	f7f3 fc4a 	bl	80004a0 <__aeabi_f2d>
 800cc0c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800cc10:	ee18 0a10 	vmov	r0, s16
 800cc14:	f7f3 fc44 	bl	80004a0 <__aeabi_f2d>
 800cc18:	4b92      	ldr	r3, [pc, #584]	; (800ce64 <powf+0x2b0>)
 800cc1a:	2200      	movs	r2, #0
 800cc1c:	2d02      	cmp	r5, #2
 800cc1e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800cc22:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800cc26:	d032      	beq.n	800cc8e <powf+0xda>
 800cc28:	4668      	mov	r0, sp
 800cc2a:	f000 fbea 	bl	800d402 <matherr>
 800cc2e:	bb40      	cbnz	r0, 800cc82 <powf+0xce>
 800cc30:	e065      	b.n	800ccfe <powf+0x14a>
 800cc32:	eddf 9a8d 	vldr	s19, [pc, #564]	; 800ce68 <powf+0x2b4>
 800cc36:	eef4 8a69 	vcmp.f32	s17, s19
 800cc3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cc3e:	d163      	bne.n	800cd08 <powf+0x154>
 800cc40:	eeb4 8a69 	vcmp.f32	s16, s19
 800cc44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cc48:	d12e      	bne.n	800cca8 <powf+0xf4>
 800cc4a:	2301      	movs	r3, #1
 800cc4c:	9300      	str	r3, [sp, #0]
 800cc4e:	4b84      	ldr	r3, [pc, #528]	; (800ce60 <powf+0x2ac>)
 800cc50:	9301      	str	r3, [sp, #4]
 800cc52:	ee18 0a90 	vmov	r0, s17
 800cc56:	2300      	movs	r3, #0
 800cc58:	9308      	str	r3, [sp, #32]
 800cc5a:	f7f3 fc21 	bl	80004a0 <__aeabi_f2d>
 800cc5e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800cc62:	ee18 0a10 	vmov	r0, s16
 800cc66:	f7f3 fc1b 	bl	80004a0 <__aeabi_f2d>
 800cc6a:	2200      	movs	r2, #0
 800cc6c:	2300      	movs	r3, #0
 800cc6e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800cc72:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800cc76:	2d00      	cmp	r5, #0
 800cc78:	d0d6      	beq.n	800cc28 <powf+0x74>
 800cc7a:	4b7a      	ldr	r3, [pc, #488]	; (800ce64 <powf+0x2b0>)
 800cc7c:	2200      	movs	r2, #0
 800cc7e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800cc82:	9b08      	ldr	r3, [sp, #32]
 800cc84:	b11b      	cbz	r3, 800cc8e <powf+0xda>
 800cc86:	f7ff fe67 	bl	800c958 <__errno>
 800cc8a:	9b08      	ldr	r3, [sp, #32]
 800cc8c:	6003      	str	r3, [r0, #0]
 800cc8e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800cc92:	f7f3 fc5d 	bl	8000550 <__aeabi_d2f>
 800cc96:	ee09 0a10 	vmov	s18, r0
 800cc9a:	eeb0 0a49 	vmov.f32	s0, s18
 800cc9e:	b00a      	add	sp, #40	; 0x28
 800cca0:	ecbd 8b04 	vpop	{d8-d9}
 800cca4:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 800cca8:	eeb0 0a48 	vmov.f32	s0, s16
 800ccac:	f000 fbb2 	bl	800d414 <finitef>
 800ccb0:	2800      	cmp	r0, #0
 800ccb2:	d0f2      	beq.n	800cc9a <powf+0xe6>
 800ccb4:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800ccb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ccbc:	d5ed      	bpl.n	800cc9a <powf+0xe6>
 800ccbe:	2301      	movs	r3, #1
 800ccc0:	9300      	str	r3, [sp, #0]
 800ccc2:	4b67      	ldr	r3, [pc, #412]	; (800ce60 <powf+0x2ac>)
 800ccc4:	9301      	str	r3, [sp, #4]
 800ccc6:	ee18 0a90 	vmov	r0, s17
 800ccca:	2300      	movs	r3, #0
 800cccc:	9308      	str	r3, [sp, #32]
 800ccce:	f7f3 fbe7 	bl	80004a0 <__aeabi_f2d>
 800ccd2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ccd6:	ee18 0a10 	vmov	r0, s16
 800ccda:	f7f3 fbe1 	bl	80004a0 <__aeabi_f2d>
 800ccde:	f994 3000 	ldrsb.w	r3, [r4]
 800cce2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800cce6:	b923      	cbnz	r3, 800ccf2 <powf+0x13e>
 800cce8:	2200      	movs	r2, #0
 800ccea:	2300      	movs	r3, #0
 800ccec:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800ccf0:	e79a      	b.n	800cc28 <powf+0x74>
 800ccf2:	495e      	ldr	r1, [pc, #376]	; (800ce6c <powf+0x2b8>)
 800ccf4:	2000      	movs	r0, #0
 800ccf6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800ccfa:	2b02      	cmp	r3, #2
 800ccfc:	d194      	bne.n	800cc28 <powf+0x74>
 800ccfe:	f7ff fe2b 	bl	800c958 <__errno>
 800cd02:	2321      	movs	r3, #33	; 0x21
 800cd04:	6003      	str	r3, [r0, #0]
 800cd06:	e7bc      	b.n	800cc82 <powf+0xce>
 800cd08:	f000 fb84 	bl	800d414 <finitef>
 800cd0c:	4605      	mov	r5, r0
 800cd0e:	2800      	cmp	r0, #0
 800cd10:	d173      	bne.n	800cdfa <powf+0x246>
 800cd12:	eeb0 0a68 	vmov.f32	s0, s17
 800cd16:	f000 fb7d 	bl	800d414 <finitef>
 800cd1a:	2800      	cmp	r0, #0
 800cd1c:	d06d      	beq.n	800cdfa <powf+0x246>
 800cd1e:	eeb0 0a48 	vmov.f32	s0, s16
 800cd22:	f000 fb77 	bl	800d414 <finitef>
 800cd26:	2800      	cmp	r0, #0
 800cd28:	d067      	beq.n	800cdfa <powf+0x246>
 800cd2a:	ee18 0a90 	vmov	r0, s17
 800cd2e:	f7f3 fbb7 	bl	80004a0 <__aeabi_f2d>
 800cd32:	4680      	mov	r8, r0
 800cd34:	ee18 0a10 	vmov	r0, s16
 800cd38:	4689      	mov	r9, r1
 800cd3a:	f7f3 fbb1 	bl	80004a0 <__aeabi_f2d>
 800cd3e:	eeb4 9a49 	vcmp.f32	s18, s18
 800cd42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cd46:	f994 4000 	ldrsb.w	r4, [r4]
 800cd4a:	4b45      	ldr	r3, [pc, #276]	; (800ce60 <powf+0x2ac>)
 800cd4c:	d713      	bvc.n	800cd76 <powf+0x1c2>
 800cd4e:	2201      	movs	r2, #1
 800cd50:	e9cd 2300 	strd	r2, r3, [sp]
 800cd54:	9508      	str	r5, [sp, #32]
 800cd56:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800cd5a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800cd5e:	2c00      	cmp	r4, #0
 800cd60:	d0c2      	beq.n	800cce8 <powf+0x134>
 800cd62:	eec9 7aa9 	vdiv.f32	s15, s19, s19
 800cd66:	ee17 0a90 	vmov	r0, s15
 800cd6a:	f7f3 fb99 	bl	80004a0 <__aeabi_f2d>
 800cd6e:	2c02      	cmp	r4, #2
 800cd70:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800cd74:	e7c2      	b.n	800ccfc <powf+0x148>
 800cd76:	2203      	movs	r2, #3
 800cd78:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800cd7c:	e9cd 2300 	strd	r2, r3, [sp]
 800cd80:	9508      	str	r5, [sp, #32]
 800cd82:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800cd86:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800cd8a:	ee28 8a27 	vmul.f32	s16, s16, s15
 800cd8e:	b9fc      	cbnz	r4, 800cdd0 <powf+0x21c>
 800cd90:	4b37      	ldr	r3, [pc, #220]	; (800ce70 <powf+0x2bc>)
 800cd92:	eef5 8ac0 	vcmpe.f32	s17, #0.0
 800cd96:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800cd9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cd9e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800cda2:	d553      	bpl.n	800ce4c <powf+0x298>
 800cda4:	eeb0 0a48 	vmov.f32	s0, s16
 800cda8:	f000 fb44 	bl	800d434 <rintf>
 800cdac:	eeb4 0a48 	vcmp.f32	s0, s16
 800cdb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cdb4:	d004      	beq.n	800cdc0 <powf+0x20c>
 800cdb6:	4b2f      	ldr	r3, [pc, #188]	; (800ce74 <powf+0x2c0>)
 800cdb8:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800cdbc:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800cdc0:	f996 3000 	ldrsb.w	r3, [r6]
 800cdc4:	2b02      	cmp	r3, #2
 800cdc6:	d141      	bne.n	800ce4c <powf+0x298>
 800cdc8:	f7ff fdc6 	bl	800c958 <__errno>
 800cdcc:	2322      	movs	r3, #34	; 0x22
 800cdce:	e799      	b.n	800cd04 <powf+0x150>
 800cdd0:	4b29      	ldr	r3, [pc, #164]	; (800ce78 <powf+0x2c4>)
 800cdd2:	eef5 8ac0 	vcmpe.f32	s17, #0.0
 800cdd6:	2200      	movs	r2, #0
 800cdd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cddc:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800cde0:	d5ee      	bpl.n	800cdc0 <powf+0x20c>
 800cde2:	eeb0 0a48 	vmov.f32	s0, s16
 800cde6:	f000 fb25 	bl	800d434 <rintf>
 800cdea:	eeb4 0a48 	vcmp.f32	s0, s16
 800cdee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cdf2:	d0e5      	beq.n	800cdc0 <powf+0x20c>
 800cdf4:	2200      	movs	r2, #0
 800cdf6:	4b1d      	ldr	r3, [pc, #116]	; (800ce6c <powf+0x2b8>)
 800cdf8:	e7e0      	b.n	800cdbc <powf+0x208>
 800cdfa:	eeb5 9a40 	vcmp.f32	s18, #0.0
 800cdfe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ce02:	f47f af4a 	bne.w	800cc9a <powf+0xe6>
 800ce06:	eeb0 0a68 	vmov.f32	s0, s17
 800ce0a:	f000 fb03 	bl	800d414 <finitef>
 800ce0e:	2800      	cmp	r0, #0
 800ce10:	f43f af43 	beq.w	800cc9a <powf+0xe6>
 800ce14:	eeb0 0a48 	vmov.f32	s0, s16
 800ce18:	f000 fafc 	bl	800d414 <finitef>
 800ce1c:	2800      	cmp	r0, #0
 800ce1e:	f43f af3c 	beq.w	800cc9a <powf+0xe6>
 800ce22:	2304      	movs	r3, #4
 800ce24:	9300      	str	r3, [sp, #0]
 800ce26:	4b0e      	ldr	r3, [pc, #56]	; (800ce60 <powf+0x2ac>)
 800ce28:	9301      	str	r3, [sp, #4]
 800ce2a:	ee18 0a90 	vmov	r0, s17
 800ce2e:	2300      	movs	r3, #0
 800ce30:	9308      	str	r3, [sp, #32]
 800ce32:	f7f3 fb35 	bl	80004a0 <__aeabi_f2d>
 800ce36:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ce3a:	ee18 0a10 	vmov	r0, s16
 800ce3e:	f7f3 fb2f 	bl	80004a0 <__aeabi_f2d>
 800ce42:	2200      	movs	r2, #0
 800ce44:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ce48:	2300      	movs	r3, #0
 800ce4a:	e7b7      	b.n	800cdbc <powf+0x208>
 800ce4c:	4668      	mov	r0, sp
 800ce4e:	f000 fad8 	bl	800d402 <matherr>
 800ce52:	2800      	cmp	r0, #0
 800ce54:	f47f af15 	bne.w	800cc82 <powf+0xce>
 800ce58:	e7b6      	b.n	800cdc8 <powf+0x214>
 800ce5a:	bf00      	nop
 800ce5c:	200005e4 	.word	0x200005e4
 800ce60:	0800d91c 	.word	0x0800d91c
 800ce64:	3ff00000 	.word	0x3ff00000
 800ce68:	00000000 	.word	0x00000000
 800ce6c:	fff00000 	.word	0xfff00000
 800ce70:	47efffff 	.word	0x47efffff
 800ce74:	c7efffff 	.word	0xc7efffff
 800ce78:	7ff00000 	.word	0x7ff00000

0800ce7c <__ieee754_powf>:
 800ce7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ce80:	ee10 5a90 	vmov	r5, s1
 800ce84:	f035 4700 	bics.w	r7, r5, #2147483648	; 0x80000000
 800ce88:	ed2d 8b02 	vpush	{d8}
 800ce8c:	eeb0 8a40 	vmov.f32	s16, s0
 800ce90:	eef0 8a60 	vmov.f32	s17, s1
 800ce94:	f000 8293 	beq.w	800d3be <__ieee754_powf+0x542>
 800ce98:	ee10 8a10 	vmov	r8, s0
 800ce9c:	f028 4400 	bic.w	r4, r8, #2147483648	; 0x80000000
 800cea0:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 800cea4:	dc06      	bgt.n	800ceb4 <__ieee754_powf+0x38>
 800cea6:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
 800ceaa:	dd0a      	ble.n	800cec2 <__ieee754_powf+0x46>
 800ceac:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 800ceb0:	f000 8285 	beq.w	800d3be <__ieee754_powf+0x542>
 800ceb4:	ecbd 8b02 	vpop	{d8}
 800ceb8:	48d9      	ldr	r0, [pc, #868]	; (800d220 <__ieee754_powf+0x3a4>)
 800ceba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cebe:	f000 bab3 	b.w	800d428 <nanf>
 800cec2:	f1b8 0f00 	cmp.w	r8, #0
 800cec6:	da1d      	bge.n	800cf04 <__ieee754_powf+0x88>
 800cec8:	f1b7 4f97 	cmp.w	r7, #1266679808	; 0x4b800000
 800cecc:	da2c      	bge.n	800cf28 <__ieee754_powf+0xac>
 800cece:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 800ced2:	db30      	blt.n	800cf36 <__ieee754_powf+0xba>
 800ced4:	15fb      	asrs	r3, r7, #23
 800ced6:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 800ceda:	fa47 f603 	asr.w	r6, r7, r3
 800cede:	fa06 f303 	lsl.w	r3, r6, r3
 800cee2:	42bb      	cmp	r3, r7
 800cee4:	d127      	bne.n	800cf36 <__ieee754_powf+0xba>
 800cee6:	f006 0601 	and.w	r6, r6, #1
 800ceea:	f1c6 0602 	rsb	r6, r6, #2
 800ceee:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 800cef2:	d122      	bne.n	800cf3a <__ieee754_powf+0xbe>
 800cef4:	2d00      	cmp	r5, #0
 800cef6:	f280 8268 	bge.w	800d3ca <__ieee754_powf+0x54e>
 800cefa:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800cefe:	ee87 0a88 	vdiv.f32	s0, s15, s16
 800cf02:	e00d      	b.n	800cf20 <__ieee754_powf+0xa4>
 800cf04:	2600      	movs	r6, #0
 800cf06:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
 800cf0a:	d1f0      	bne.n	800ceee <__ieee754_powf+0x72>
 800cf0c:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 800cf10:	f000 8255 	beq.w	800d3be <__ieee754_powf+0x542>
 800cf14:	dd0a      	ble.n	800cf2c <__ieee754_powf+0xb0>
 800cf16:	2d00      	cmp	r5, #0
 800cf18:	f280 8254 	bge.w	800d3c4 <__ieee754_powf+0x548>
 800cf1c:	ed9f 0ac1 	vldr	s0, [pc, #772]	; 800d224 <__ieee754_powf+0x3a8>
 800cf20:	ecbd 8b02 	vpop	{d8}
 800cf24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cf28:	2602      	movs	r6, #2
 800cf2a:	e7ec      	b.n	800cf06 <__ieee754_powf+0x8a>
 800cf2c:	2d00      	cmp	r5, #0
 800cf2e:	daf5      	bge.n	800cf1c <__ieee754_powf+0xa0>
 800cf30:	eeb1 0a68 	vneg.f32	s0, s17
 800cf34:	e7f4      	b.n	800cf20 <__ieee754_powf+0xa4>
 800cf36:	2600      	movs	r6, #0
 800cf38:	e7d9      	b.n	800ceee <__ieee754_powf+0x72>
 800cf3a:	f1b5 4f80 	cmp.w	r5, #1073741824	; 0x40000000
 800cf3e:	d102      	bne.n	800cf46 <__ieee754_powf+0xca>
 800cf40:	ee28 0a08 	vmul.f32	s0, s16, s16
 800cf44:	e7ec      	b.n	800cf20 <__ieee754_powf+0xa4>
 800cf46:	f1b5 5f7c 	cmp.w	r5, #1056964608	; 0x3f000000
 800cf4a:	eeb0 0a48 	vmov.f32	s0, s16
 800cf4e:	d108      	bne.n	800cf62 <__ieee754_powf+0xe6>
 800cf50:	f1b8 0f00 	cmp.w	r8, #0
 800cf54:	db05      	blt.n	800cf62 <__ieee754_powf+0xe6>
 800cf56:	ecbd 8b02 	vpop	{d8}
 800cf5a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cf5e:	f000 ba4d 	b.w	800d3fc <__ieee754_sqrtf>
 800cf62:	f000 fa50 	bl	800d406 <fabsf>
 800cf66:	b124      	cbz	r4, 800cf72 <__ieee754_powf+0xf6>
 800cf68:	f028 4340 	bic.w	r3, r8, #3221225472	; 0xc0000000
 800cf6c:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 800cf70:	d117      	bne.n	800cfa2 <__ieee754_powf+0x126>
 800cf72:	2d00      	cmp	r5, #0
 800cf74:	bfbc      	itt	lt
 800cf76:	eef7 7a00 	vmovlt.f32	s15, #112	; 0x3f800000  1.0
 800cf7a:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 800cf7e:	f1b8 0f00 	cmp.w	r8, #0
 800cf82:	dacd      	bge.n	800cf20 <__ieee754_powf+0xa4>
 800cf84:	f1a4 547e 	sub.w	r4, r4, #1065353216	; 0x3f800000
 800cf88:	ea54 0306 	orrs.w	r3, r4, r6
 800cf8c:	d104      	bne.n	800cf98 <__ieee754_powf+0x11c>
 800cf8e:	ee70 7a40 	vsub.f32	s15, s0, s0
 800cf92:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 800cf96:	e7c3      	b.n	800cf20 <__ieee754_powf+0xa4>
 800cf98:	2e01      	cmp	r6, #1
 800cf9a:	d1c1      	bne.n	800cf20 <__ieee754_powf+0xa4>
 800cf9c:	eeb1 0a40 	vneg.f32	s0, s0
 800cfa0:	e7be      	b.n	800cf20 <__ieee754_powf+0xa4>
 800cfa2:	ea4f 70d8 	mov.w	r0, r8, lsr #31
 800cfa6:	3801      	subs	r0, #1
 800cfa8:	ea56 0300 	orrs.w	r3, r6, r0
 800cfac:	d104      	bne.n	800cfb8 <__ieee754_powf+0x13c>
 800cfae:	ee38 8a48 	vsub.f32	s16, s16, s16
 800cfb2:	ee88 0a08 	vdiv.f32	s0, s16, s16
 800cfb6:	e7b3      	b.n	800cf20 <__ieee754_powf+0xa4>
 800cfb8:	f1b7 4f9a 	cmp.w	r7, #1291845632	; 0x4d000000
 800cfbc:	dd6d      	ble.n	800d09a <__ieee754_powf+0x21e>
 800cfbe:	4b9a      	ldr	r3, [pc, #616]	; (800d228 <__ieee754_powf+0x3ac>)
 800cfc0:	429c      	cmp	r4, r3
 800cfc2:	dc06      	bgt.n	800cfd2 <__ieee754_powf+0x156>
 800cfc4:	2d00      	cmp	r5, #0
 800cfc6:	daa9      	bge.n	800cf1c <__ieee754_powf+0xa0>
 800cfc8:	ed9f 0a98 	vldr	s0, [pc, #608]	; 800d22c <__ieee754_powf+0x3b0>
 800cfcc:	ee20 0a00 	vmul.f32	s0, s0, s0
 800cfd0:	e7a6      	b.n	800cf20 <__ieee754_powf+0xa4>
 800cfd2:	4b97      	ldr	r3, [pc, #604]	; (800d230 <__ieee754_powf+0x3b4>)
 800cfd4:	429c      	cmp	r4, r3
 800cfd6:	dd02      	ble.n	800cfde <__ieee754_powf+0x162>
 800cfd8:	2d00      	cmp	r5, #0
 800cfda:	dcf5      	bgt.n	800cfc8 <__ieee754_powf+0x14c>
 800cfdc:	e79e      	b.n	800cf1c <__ieee754_powf+0xa0>
 800cfde:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800cfe2:	ee30 0a67 	vsub.f32	s0, s0, s15
 800cfe6:	ed9f 7a93 	vldr	s14, [pc, #588]	; 800d234 <__ieee754_powf+0x3b8>
 800cfea:	eef1 6a40 	vneg.f32	s13, s0
 800cfee:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 800cff2:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800cff6:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800cffa:	eee7 7a40 	vfms.f32	s15, s14, s0
 800cffe:	ee60 0a00 	vmul.f32	s1, s0, s0
 800d002:	ed9f 7a8d 	vldr	s14, [pc, #564]	; 800d238 <__ieee754_powf+0x3bc>
 800d006:	ee67 0aa0 	vmul.f32	s1, s15, s1
 800d00a:	eddf 7a8c 	vldr	s15, [pc, #560]	; 800d23c <__ieee754_powf+0x3c0>
 800d00e:	ee67 7ae0 	vnmul.f32	s15, s15, s1
 800d012:	eee0 7a07 	vfma.f32	s15, s0, s14
 800d016:	ed9f 7a8a 	vldr	s14, [pc, #552]	; 800d240 <__ieee754_powf+0x3c4>
 800d01a:	eeb0 6a67 	vmov.f32	s12, s15
 800d01e:	eea0 6a07 	vfma.f32	s12, s0, s14
 800d022:	ee16 3a10 	vmov	r3, s12
 800d026:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800d02a:	f023 030f 	bic.w	r3, r3, #15
 800d02e:	ee00 3a90 	vmov	s1, r3
 800d032:	eee6 0a87 	vfma.f32	s1, s13, s14
 800d036:	ee77 7ae0 	vsub.f32	s15, s15, s1
 800d03a:	f425 657f 	bic.w	r5, r5, #4080	; 0xff0
 800d03e:	f025 050f 	bic.w	r5, r5, #15
 800d042:	ee07 5a10 	vmov	s14, r5
 800d046:	ee67 0aa8 	vmul.f32	s1, s15, s17
 800d04a:	ee38 7ac7 	vsub.f32	s14, s17, s14
 800d04e:	ee07 3a90 	vmov	s15, r3
 800d052:	eee7 0a27 	vfma.f32	s1, s14, s15
 800d056:	3e01      	subs	r6, #1
 800d058:	ea56 0200 	orrs.w	r2, r6, r0
 800d05c:	ee07 5a10 	vmov	s14, r5
 800d060:	ee67 7a87 	vmul.f32	s15, s15, s14
 800d064:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 800d068:	ee30 7aa7 	vadd.f32	s14, s1, s15
 800d06c:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 800d070:	ee17 4a10 	vmov	r4, s14
 800d074:	bf08      	it	eq
 800d076:	eeb0 8a40 	vmoveq.f32	s16, s0
 800d07a:	2c00      	cmp	r4, #0
 800d07c:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800d080:	f340 8184 	ble.w	800d38c <__ieee754_powf+0x510>
 800d084:	f1b3 4f86 	cmp.w	r3, #1124073472	; 0x43000000
 800d088:	f340 80fc 	ble.w	800d284 <__ieee754_powf+0x408>
 800d08c:	eddf 7a67 	vldr	s15, [pc, #412]	; 800d22c <__ieee754_powf+0x3b0>
 800d090:	ee28 0a27 	vmul.f32	s0, s16, s15
 800d094:	ee20 0a27 	vmul.f32	s0, s0, s15
 800d098:	e742      	b.n	800cf20 <__ieee754_powf+0xa4>
 800d09a:	f5b4 0f00 	cmp.w	r4, #8388608	; 0x800000
 800d09e:	bfbf      	itttt	lt
 800d0a0:	eddf 7a68 	vldrlt	s15, [pc, #416]	; 800d244 <__ieee754_powf+0x3c8>
 800d0a4:	ee60 7a27 	vmullt.f32	s15, s0, s15
 800d0a8:	f06f 0217 	mvnlt.w	r2, #23
 800d0ac:	ee17 4a90 	vmovlt	r4, s15
 800d0b0:	ea4f 53e4 	mov.w	r3, r4, asr #23
 800d0b4:	bfa8      	it	ge
 800d0b6:	2200      	movge	r2, #0
 800d0b8:	3b7f      	subs	r3, #127	; 0x7f
 800d0ba:	4413      	add	r3, r2
 800d0bc:	4a62      	ldr	r2, [pc, #392]	; (800d248 <__ieee754_powf+0x3cc>)
 800d0be:	f3c4 0416 	ubfx	r4, r4, #0, #23
 800d0c2:	4294      	cmp	r4, r2
 800d0c4:	f044 517e 	orr.w	r1, r4, #1065353216	; 0x3f800000
 800d0c8:	dd06      	ble.n	800d0d8 <__ieee754_powf+0x25c>
 800d0ca:	4a60      	ldr	r2, [pc, #384]	; (800d24c <__ieee754_powf+0x3d0>)
 800d0cc:	4294      	cmp	r4, r2
 800d0ce:	f340 80a5 	ble.w	800d21c <__ieee754_powf+0x3a0>
 800d0d2:	3301      	adds	r3, #1
 800d0d4:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 800d0d8:	2400      	movs	r4, #0
 800d0da:	4a5d      	ldr	r2, [pc, #372]	; (800d250 <__ieee754_powf+0x3d4>)
 800d0dc:	00a7      	lsls	r7, r4, #2
 800d0de:	443a      	add	r2, r7
 800d0e0:	ee07 1a90 	vmov	s15, r1
 800d0e4:	ed92 7a00 	vldr	s14, [r2]
 800d0e8:	4a5a      	ldr	r2, [pc, #360]	; (800d254 <__ieee754_powf+0x3d8>)
 800d0ea:	ee37 6a27 	vadd.f32	s12, s14, s15
 800d0ee:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 800d0f2:	eec5 6a06 	vdiv.f32	s13, s10, s12
 800d0f6:	1049      	asrs	r1, r1, #1
 800d0f8:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
 800d0fc:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
 800d100:	eb01 5144 	add.w	r1, r1, r4, lsl #21
 800d104:	ee77 5ac7 	vsub.f32	s11, s15, s14
 800d108:	ee06 1a10 	vmov	s12, r1
 800d10c:	ee65 4aa6 	vmul.f32	s9, s11, s13
 800d110:	ee14 ca90 	vmov	ip, s9
 800d114:	ea02 0c0c 	and.w	ip, r2, ip
 800d118:	ee05 ca10 	vmov	s10, ip
 800d11c:	eeb1 4a45 	vneg.f32	s8, s10
 800d120:	eee4 5a06 	vfma.f32	s11, s8, s12
 800d124:	ee36 6a47 	vsub.f32	s12, s12, s14
 800d128:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 800d258 <__ieee754_powf+0x3dc>
 800d12c:	ee37 6ac6 	vsub.f32	s12, s15, s12
 800d130:	ee64 7aa4 	vmul.f32	s15, s9, s9
 800d134:	eee4 5a06 	vfma.f32	s11, s8, s12
 800d138:	ee67 3aa7 	vmul.f32	s7, s15, s15
 800d13c:	ee25 6aa6 	vmul.f32	s12, s11, s13
 800d140:	eddf 5a46 	vldr	s11, [pc, #280]	; 800d25c <__ieee754_powf+0x3e0>
 800d144:	eea7 7aa5 	vfma.f32	s14, s15, s11
 800d148:	eddf 5a45 	vldr	s11, [pc, #276]	; 800d260 <__ieee754_powf+0x3e4>
 800d14c:	eee7 5a27 	vfma.f32	s11, s14, s15
 800d150:	ed9f 7a38 	vldr	s14, [pc, #224]	; 800d234 <__ieee754_powf+0x3b8>
 800d154:	eea5 7aa7 	vfma.f32	s14, s11, s15
 800d158:	eddf 5a42 	vldr	s11, [pc, #264]	; 800d264 <__ieee754_powf+0x3e8>
 800d15c:	eee7 5a27 	vfma.f32	s11, s14, s15
 800d160:	ed9f 7a41 	vldr	s14, [pc, #260]	; 800d268 <__ieee754_powf+0x3ec>
 800d164:	ee75 6a24 	vadd.f32	s13, s10, s9
 800d168:	eea5 7aa7 	vfma.f32	s14, s11, s15
 800d16c:	ee66 6a86 	vmul.f32	s13, s13, s12
 800d170:	eef0 5a08 	vmov.f32	s11, #8	; 0x40400000  3.0
 800d174:	eef0 7a65 	vmov.f32	s15, s11
 800d178:	eee3 6a87 	vfma.f32	s13, s7, s14
 800d17c:	eee5 7a05 	vfma.f32	s15, s10, s10
 800d180:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d184:	ee17 1a90 	vmov	r1, s15
 800d188:	4011      	ands	r1, r2
 800d18a:	ee07 1a90 	vmov	s15, r1
 800d18e:	ee37 7ae5 	vsub.f32	s14, s15, s11
 800d192:	eddf 5a36 	vldr	s11, [pc, #216]	; 800d26c <__ieee754_powf+0x3f0>
 800d196:	eea4 7a05 	vfma.f32	s14, s8, s10
 800d19a:	ee36 7ac7 	vsub.f32	s14, s13, s14
 800d19e:	ee27 7a24 	vmul.f32	s14, s14, s9
 800d1a2:	eea7 7a86 	vfma.f32	s14, s15, s12
 800d1a6:	eeb0 6a47 	vmov.f32	s12, s14
 800d1aa:	eea5 6a27 	vfma.f32	s12, s10, s15
 800d1ae:	ee16 1a10 	vmov	r1, s12
 800d1b2:	4011      	ands	r1, r2
 800d1b4:	ee06 1a90 	vmov	s13, r1
 800d1b8:	eee4 6a27 	vfma.f32	s13, s8, s15
 800d1bc:	eddf 7a2c 	vldr	s15, [pc, #176]	; 800d270 <__ieee754_powf+0x3f4>
 800d1c0:	ee37 7a66 	vsub.f32	s14, s14, s13
 800d1c4:	ee06 1a10 	vmov	s12, r1
 800d1c8:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d1cc:	eddf 7a29 	vldr	s15, [pc, #164]	; 800d274 <__ieee754_powf+0x3f8>
 800d1d0:	4929      	ldr	r1, [pc, #164]	; (800d278 <__ieee754_powf+0x3fc>)
 800d1d2:	eea6 7a27 	vfma.f32	s14, s12, s15
 800d1d6:	4439      	add	r1, r7
 800d1d8:	edd1 7a00 	vldr	s15, [r1]
 800d1dc:	ee37 7a27 	vadd.f32	s14, s14, s15
 800d1e0:	ee07 3a90 	vmov	s15, r3
 800d1e4:	eef0 0a47 	vmov.f32	s1, s14
 800d1e8:	4b24      	ldr	r3, [pc, #144]	; (800d27c <__ieee754_powf+0x400>)
 800d1ea:	eee6 0a25 	vfma.f32	s1, s12, s11
 800d1ee:	443b      	add	r3, r7
 800d1f0:	ed93 5a00 	vldr	s10, [r3]
 800d1f4:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800d1f8:	ee70 0a85 	vadd.f32	s1, s1, s10
 800d1fc:	ee70 7aa6 	vadd.f32	s15, s1, s13
 800d200:	ee17 3a90 	vmov	r3, s15
 800d204:	4013      	ands	r3, r2
 800d206:	ee07 3a90 	vmov	s15, r3
 800d20a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800d20e:	ee77 7ac5 	vsub.f32	s15, s15, s10
 800d212:	eee6 7a65 	vfms.f32	s15, s12, s11
 800d216:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d21a:	e70e      	b.n	800d03a <__ieee754_powf+0x1be>
 800d21c:	2401      	movs	r4, #1
 800d21e:	e75c      	b.n	800d0da <__ieee754_powf+0x25e>
 800d220:	0800d920 	.word	0x0800d920
 800d224:	00000000 	.word	0x00000000
 800d228:	3f7ffff7 	.word	0x3f7ffff7
 800d22c:	7149f2ca 	.word	0x7149f2ca
 800d230:	3f800007 	.word	0x3f800007
 800d234:	3eaaaaab 	.word	0x3eaaaaab
 800d238:	36eca570 	.word	0x36eca570
 800d23c:	3fb8aa3b 	.word	0x3fb8aa3b
 800d240:	3fb8aa00 	.word	0x3fb8aa00
 800d244:	4b800000 	.word	0x4b800000
 800d248:	001cc471 	.word	0x001cc471
 800d24c:	005db3d6 	.word	0x005db3d6
 800d250:	0800d924 	.word	0x0800d924
 800d254:	fffff000 	.word	0xfffff000
 800d258:	3e6c3255 	.word	0x3e6c3255
 800d25c:	3e53f142 	.word	0x3e53f142
 800d260:	3e8ba305 	.word	0x3e8ba305
 800d264:	3edb6db7 	.word	0x3edb6db7
 800d268:	3f19999a 	.word	0x3f19999a
 800d26c:	3f763800 	.word	0x3f763800
 800d270:	3f76384f 	.word	0x3f76384f
 800d274:	369dc3a0 	.word	0x369dc3a0
 800d278:	0800d934 	.word	0x0800d934
 800d27c:	0800d92c 	.word	0x0800d92c
 800d280:	3338aa3c 	.word	0x3338aa3c
 800d284:	f040 8092 	bne.w	800d3ac <__ieee754_powf+0x530>
 800d288:	ed5f 6a03 	vldr	s13, [pc, #-12]	; 800d280 <__ieee754_powf+0x404>
 800d28c:	ee37 7a67 	vsub.f32	s14, s14, s15
 800d290:	ee70 6aa6 	vadd.f32	s13, s1, s13
 800d294:	eef4 6ac7 	vcmpe.f32	s13, s14
 800d298:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d29c:	f73f aef6 	bgt.w	800d08c <__ieee754_powf+0x210>
 800d2a0:	15db      	asrs	r3, r3, #23
 800d2a2:	f1a3 007e 	sub.w	r0, r3, #126	; 0x7e
 800d2a6:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800d2aa:	4103      	asrs	r3, r0
 800d2ac:	4423      	add	r3, r4
 800d2ae:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800d2b2:	4947      	ldr	r1, [pc, #284]	; (800d3d0 <__ieee754_powf+0x554>)
 800d2b4:	3a7f      	subs	r2, #127	; 0x7f
 800d2b6:	4111      	asrs	r1, r2
 800d2b8:	ea23 0101 	bic.w	r1, r3, r1
 800d2bc:	f3c3 0016 	ubfx	r0, r3, #0, #23
 800d2c0:	ee07 1a10 	vmov	s14, r1
 800d2c4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800d2c8:	f1c2 0217 	rsb	r2, r2, #23
 800d2cc:	4110      	asrs	r0, r2
 800d2ce:	2c00      	cmp	r4, #0
 800d2d0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800d2d4:	bfb8      	it	lt
 800d2d6:	4240      	neglt	r0, r0
 800d2d8:	ee37 7aa0 	vadd.f32	s14, s15, s1
 800d2dc:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800d3d4 <__ieee754_powf+0x558>
 800d2e0:	ee17 3a10 	vmov	r3, s14
 800d2e4:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800d2e8:	f023 030f 	bic.w	r3, r3, #15
 800d2ec:	ee07 3a10 	vmov	s14, r3
 800d2f0:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d2f4:	ee70 0ae7 	vsub.f32	s1, s1, s15
 800d2f8:	eddf 7a37 	vldr	s15, [pc, #220]	; 800d3d8 <__ieee754_powf+0x55c>
 800d2fc:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d300:	eee0 7aa6 	vfma.f32	s15, s1, s13
 800d304:	eddf 6a35 	vldr	s13, [pc, #212]	; 800d3dc <__ieee754_powf+0x560>
 800d308:	eeb0 0a67 	vmov.f32	s0, s15
 800d30c:	eea7 0a26 	vfma.f32	s0, s14, s13
 800d310:	eeb0 6a40 	vmov.f32	s12, s0
 800d314:	eea7 6a66 	vfms.f32	s12, s14, s13
 800d318:	ee20 7a00 	vmul.f32	s14, s0, s0
 800d31c:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800d320:	eddf 6a2f 	vldr	s13, [pc, #188]	; 800d3e0 <__ieee754_powf+0x564>
 800d324:	ed9f 6a2f 	vldr	s12, [pc, #188]	; 800d3e4 <__ieee754_powf+0x568>
 800d328:	eea7 6a26 	vfma.f32	s12, s14, s13
 800d32c:	eddf 6a2e 	vldr	s13, [pc, #184]	; 800d3e8 <__ieee754_powf+0x56c>
 800d330:	eee6 6a07 	vfma.f32	s13, s12, s14
 800d334:	ed9f 6a2d 	vldr	s12, [pc, #180]	; 800d3ec <__ieee754_powf+0x570>
 800d338:	eea6 6a87 	vfma.f32	s12, s13, s14
 800d33c:	eddf 6a2c 	vldr	s13, [pc, #176]	; 800d3f0 <__ieee754_powf+0x574>
 800d340:	eee6 6a07 	vfma.f32	s13, s12, s14
 800d344:	eeb0 6a40 	vmov.f32	s12, s0
 800d348:	eea6 6ac7 	vfms.f32	s12, s13, s14
 800d34c:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800d350:	eeb0 7a46 	vmov.f32	s14, s12
 800d354:	ee77 6a66 	vsub.f32	s13, s14, s13
 800d358:	ee20 6a06 	vmul.f32	s12, s0, s12
 800d35c:	eee0 7a27 	vfma.f32	s15, s0, s15
 800d360:	ee86 7a26 	vdiv.f32	s14, s12, s13
 800d364:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d368:	ee37 0ac0 	vsub.f32	s0, s15, s0
 800d36c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800d370:	ee37 0ac0 	vsub.f32	s0, s15, s0
 800d374:	ee10 3a10 	vmov	r3, s0
 800d378:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 800d37c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800d380:	da1a      	bge.n	800d3b8 <__ieee754_powf+0x53c>
 800d382:	f000 f8b1 	bl	800d4e8 <scalbnf>
 800d386:	ee20 0a08 	vmul.f32	s0, s0, s16
 800d38a:	e5c9      	b.n	800cf20 <__ieee754_powf+0xa4>
 800d38c:	4a19      	ldr	r2, [pc, #100]	; (800d3f4 <__ieee754_powf+0x578>)
 800d38e:	4293      	cmp	r3, r2
 800d390:	dd02      	ble.n	800d398 <__ieee754_powf+0x51c>
 800d392:	eddf 7a19 	vldr	s15, [pc, #100]	; 800d3f8 <__ieee754_powf+0x57c>
 800d396:	e67b      	b.n	800d090 <__ieee754_powf+0x214>
 800d398:	d108      	bne.n	800d3ac <__ieee754_powf+0x530>
 800d39a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800d39e:	eeb4 7ae0 	vcmpe.f32	s14, s1
 800d3a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d3a6:	f6ff af7b 	blt.w	800d2a0 <__ieee754_powf+0x424>
 800d3aa:	e7f2      	b.n	800d392 <__ieee754_powf+0x516>
 800d3ac:	f1b3 5f7c 	cmp.w	r3, #1056964608	; 0x3f000000
 800d3b0:	f73f af76 	bgt.w	800d2a0 <__ieee754_powf+0x424>
 800d3b4:	2000      	movs	r0, #0
 800d3b6:	e78f      	b.n	800d2d8 <__ieee754_powf+0x45c>
 800d3b8:	ee00 3a10 	vmov	s0, r3
 800d3bc:	e7e3      	b.n	800d386 <__ieee754_powf+0x50a>
 800d3be:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800d3c2:	e5ad      	b.n	800cf20 <__ieee754_powf+0xa4>
 800d3c4:	eeb0 0a68 	vmov.f32	s0, s17
 800d3c8:	e5aa      	b.n	800cf20 <__ieee754_powf+0xa4>
 800d3ca:	eeb0 0a48 	vmov.f32	s0, s16
 800d3ce:	e5a7      	b.n	800cf20 <__ieee754_powf+0xa4>
 800d3d0:	007fffff 	.word	0x007fffff
 800d3d4:	3f317218 	.word	0x3f317218
 800d3d8:	35bfbe8c 	.word	0x35bfbe8c
 800d3dc:	3f317200 	.word	0x3f317200
 800d3e0:	3331bb4c 	.word	0x3331bb4c
 800d3e4:	b5ddea0e 	.word	0xb5ddea0e
 800d3e8:	388ab355 	.word	0x388ab355
 800d3ec:	bb360b61 	.word	0xbb360b61
 800d3f0:	3e2aaaab 	.word	0x3e2aaaab
 800d3f4:	43160000 	.word	0x43160000
 800d3f8:	0da24260 	.word	0x0da24260

0800d3fc <__ieee754_sqrtf>:
 800d3fc:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800d400:	4770      	bx	lr

0800d402 <matherr>:
 800d402:	2000      	movs	r0, #0
 800d404:	4770      	bx	lr

0800d406 <fabsf>:
 800d406:	ee10 3a10 	vmov	r3, s0
 800d40a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800d40e:	ee00 3a10 	vmov	s0, r3
 800d412:	4770      	bx	lr

0800d414 <finitef>:
 800d414:	ee10 3a10 	vmov	r3, s0
 800d418:	f023 4000 	bic.w	r0, r3, #2147483648	; 0x80000000
 800d41c:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 800d420:	bfac      	ite	ge
 800d422:	2000      	movge	r0, #0
 800d424:	2001      	movlt	r0, #1
 800d426:	4770      	bx	lr

0800d428 <nanf>:
 800d428:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800d430 <nanf+0x8>
 800d42c:	4770      	bx	lr
 800d42e:	bf00      	nop
 800d430:	7fc00000 	.word	0x7fc00000

0800d434 <rintf>:
 800d434:	b513      	push	{r0, r1, r4, lr}
 800d436:	ee10 1a10 	vmov	r1, s0
 800d43a:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800d43e:	0ddc      	lsrs	r4, r3, #23
 800d440:	3c7f      	subs	r4, #127	; 0x7f
 800d442:	2c16      	cmp	r4, #22
 800d444:	dc46      	bgt.n	800d4d4 <rintf+0xa0>
 800d446:	b32b      	cbz	r3, 800d494 <rintf+0x60>
 800d448:	2c00      	cmp	r4, #0
 800d44a:	ee10 2a10 	vmov	r2, s0
 800d44e:	ea4f 70d1 	mov.w	r0, r1, lsr #31
 800d452:	da21      	bge.n	800d498 <rintf+0x64>
 800d454:	f3c1 0316 	ubfx	r3, r1, #0, #23
 800d458:	425b      	negs	r3, r3
 800d45a:	4a21      	ldr	r2, [pc, #132]	; (800d4e0 <rintf+0xac>)
 800d45c:	0a5b      	lsrs	r3, r3, #9
 800d45e:	0d09      	lsrs	r1, r1, #20
 800d460:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800d464:	0509      	lsls	r1, r1, #20
 800d466:	430b      	orrs	r3, r1
 800d468:	eb02 0280 	add.w	r2, r2, r0, lsl #2
 800d46c:	ee07 3a90 	vmov	s15, r3
 800d470:	edd2 6a00 	vldr	s13, [r2]
 800d474:	ee36 7aa7 	vadd.f32	s14, s13, s15
 800d478:	ed8d 7a01 	vstr	s14, [sp, #4]
 800d47c:	eddd 7a01 	vldr	s15, [sp, #4]
 800d480:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800d484:	ee17 3a90 	vmov	r3, s15
 800d488:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800d48c:	ea43 73c0 	orr.w	r3, r3, r0, lsl #31
 800d490:	ee00 3a10 	vmov	s0, r3
 800d494:	b002      	add	sp, #8
 800d496:	bd10      	pop	{r4, pc}
 800d498:	4b12      	ldr	r3, [pc, #72]	; (800d4e4 <rintf+0xb0>)
 800d49a:	4123      	asrs	r3, r4
 800d49c:	4219      	tst	r1, r3
 800d49e:	d0f9      	beq.n	800d494 <rintf+0x60>
 800d4a0:	085b      	lsrs	r3, r3, #1
 800d4a2:	4219      	tst	r1, r3
 800d4a4:	d006      	beq.n	800d4b4 <rintf+0x80>
 800d4a6:	ea21 0203 	bic.w	r2, r1, r3
 800d4aa:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800d4ae:	fa43 f404 	asr.w	r4, r3, r4
 800d4b2:	4322      	orrs	r2, r4
 800d4b4:	4b0a      	ldr	r3, [pc, #40]	; (800d4e0 <rintf+0xac>)
 800d4b6:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800d4ba:	ed90 7a00 	vldr	s14, [r0]
 800d4be:	ee07 2a90 	vmov	s15, r2
 800d4c2:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d4c6:	edcd 7a01 	vstr	s15, [sp, #4]
 800d4ca:	ed9d 0a01 	vldr	s0, [sp, #4]
 800d4ce:	ee30 0a47 	vsub.f32	s0, s0, s14
 800d4d2:	e7df      	b.n	800d494 <rintf+0x60>
 800d4d4:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800d4d8:	d3dc      	bcc.n	800d494 <rintf+0x60>
 800d4da:	ee30 0a00 	vadd.f32	s0, s0, s0
 800d4de:	e7d9      	b.n	800d494 <rintf+0x60>
 800d4e0:	0800d93c 	.word	0x0800d93c
 800d4e4:	007fffff 	.word	0x007fffff

0800d4e8 <scalbnf>:
 800d4e8:	b508      	push	{r3, lr}
 800d4ea:	ee10 2a10 	vmov	r2, s0
 800d4ee:	f032 4300 	bics.w	r3, r2, #2147483648	; 0x80000000
 800d4f2:	ed2d 8b02 	vpush	{d8}
 800d4f6:	eef0 0a40 	vmov.f32	s1, s0
 800d4fa:	d004      	beq.n	800d506 <scalbnf+0x1e>
 800d4fc:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800d500:	d306      	bcc.n	800d510 <scalbnf+0x28>
 800d502:	ee70 0a00 	vadd.f32	s1, s0, s0
 800d506:	ecbd 8b02 	vpop	{d8}
 800d50a:	eeb0 0a60 	vmov.f32	s0, s1
 800d50e:	bd08      	pop	{r3, pc}
 800d510:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800d514:	d21c      	bcs.n	800d550 <scalbnf+0x68>
 800d516:	4b1f      	ldr	r3, [pc, #124]	; (800d594 <scalbnf+0xac>)
 800d518:	eddf 7a1f 	vldr	s15, [pc, #124]	; 800d598 <scalbnf+0xb0>
 800d51c:	4298      	cmp	r0, r3
 800d51e:	ee60 0a27 	vmul.f32	s1, s0, s15
 800d522:	db10      	blt.n	800d546 <scalbnf+0x5e>
 800d524:	ee10 2a90 	vmov	r2, s1
 800d528:	f3c2 53c7 	ubfx	r3, r2, #23, #8
 800d52c:	3b19      	subs	r3, #25
 800d52e:	4403      	add	r3, r0
 800d530:	2bfe      	cmp	r3, #254	; 0xfe
 800d532:	dd0f      	ble.n	800d554 <scalbnf+0x6c>
 800d534:	ed9f 8a19 	vldr	s16, [pc, #100]	; 800d59c <scalbnf+0xb4>
 800d538:	eeb0 0a48 	vmov.f32	s0, s16
 800d53c:	f000 f834 	bl	800d5a8 <copysignf>
 800d540:	ee60 0a08 	vmul.f32	s1, s0, s16
 800d544:	e7df      	b.n	800d506 <scalbnf+0x1e>
 800d546:	eddf 7a16 	vldr	s15, [pc, #88]	; 800d5a0 <scalbnf+0xb8>
 800d54a:	ee60 0aa7 	vmul.f32	s1, s1, s15
 800d54e:	e7da      	b.n	800d506 <scalbnf+0x1e>
 800d550:	0ddb      	lsrs	r3, r3, #23
 800d552:	e7ec      	b.n	800d52e <scalbnf+0x46>
 800d554:	2b00      	cmp	r3, #0
 800d556:	dd06      	ble.n	800d566 <scalbnf+0x7e>
 800d558:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 800d55c:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 800d560:	ee00 3a90 	vmov	s1, r3
 800d564:	e7cf      	b.n	800d506 <scalbnf+0x1e>
 800d566:	f113 0f16 	cmn.w	r3, #22
 800d56a:	da06      	bge.n	800d57a <scalbnf+0x92>
 800d56c:	f24c 3350 	movw	r3, #50000	; 0xc350
 800d570:	4298      	cmp	r0, r3
 800d572:	dcdf      	bgt.n	800d534 <scalbnf+0x4c>
 800d574:	ed9f 8a0a 	vldr	s16, [pc, #40]	; 800d5a0 <scalbnf+0xb8>
 800d578:	e7de      	b.n	800d538 <scalbnf+0x50>
 800d57a:	3319      	adds	r3, #25
 800d57c:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 800d580:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 800d584:	eddf 7a07 	vldr	s15, [pc, #28]	; 800d5a4 <scalbnf+0xbc>
 800d588:	ee07 3a10 	vmov	s14, r3
 800d58c:	ee67 0a27 	vmul.f32	s1, s14, s15
 800d590:	e7b9      	b.n	800d506 <scalbnf+0x1e>
 800d592:	bf00      	nop
 800d594:	ffff3cb0 	.word	0xffff3cb0
 800d598:	4c000000 	.word	0x4c000000
 800d59c:	7149f2ca 	.word	0x7149f2ca
 800d5a0:	0da24260 	.word	0x0da24260
 800d5a4:	33000000 	.word	0x33000000

0800d5a8 <copysignf>:
 800d5a8:	ee10 3a10 	vmov	r3, s0
 800d5ac:	ee10 2a90 	vmov	r2, s1
 800d5b0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800d5b4:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800d5b8:	4313      	orrs	r3, r2
 800d5ba:	ee00 3a10 	vmov	s0, r3
 800d5be:	4770      	bx	lr

0800d5c0 <_init>:
 800d5c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d5c2:	bf00      	nop
 800d5c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d5c6:	bc08      	pop	{r3}
 800d5c8:	469e      	mov	lr, r3
 800d5ca:	4770      	bx	lr

0800d5cc <_fini>:
 800d5cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d5ce:	bf00      	nop
 800d5d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d5d2:	bc08      	pop	{r3}
 800d5d4:	469e      	mov	lr, r3
 800d5d6:	4770      	bx	lr

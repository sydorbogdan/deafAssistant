
microApi3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f818  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000404  0800f9b0  0800f9b0  0001f9b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800fdb4  0800fdb4  000205e8  2**0
                  CONTENTS
  4 .ARM          00000008  0800fdb4  0800fdb4  0001fdb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800fdbc  0800fdbc  000205e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800fdbc  0800fdbc  0001fdbc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800fdc0  0800fdc0  0001fdc0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000005e8  20000000  0800fdc4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000046c4  200005e8  080103ac  000205e8  2**2
                  ALLOC
 10 ._user_heap_stack 00006004  20004cac  080103ac  00024cac  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000205e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002250c  00000000  00000000  00020618  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00004d68  00000000  00000000  00042b24  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001970  00000000  00000000  00047890  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001720  00000000  00000000  00049200  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001cf20  00000000  00000000  0004a920  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001d810  00000000  00000000  00067840  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000967ff  00000000  00000000  00085050  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      000000fa  00000000  00000000  0011b84f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006e08  00000000  00000000  0011b94c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	200005e8 	.word	0x200005e8
 80001b4:	00000000 	.word	0x00000000
 80001b8:	0800f998 	.word	0x0800f998

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	200005ec 	.word	0x200005ec
 80001d4:	0800f998 	.word	0x0800f998

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000316:	f1a4 0401 	sub.w	r4, r4, #1
 800031a:	d1e9      	bne.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__gedf2>:
 8000974:	f04f 3cff 	mov.w	ip, #4294967295
 8000978:	e006      	b.n	8000988 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__ledf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	e002      	b.n	8000988 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__cmpdf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	f84d cd04 	str.w	ip, [sp, #-4]!
 800098c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000990:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000994:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800099e:	d01b      	beq.n	80009d8 <__cmpdf2+0x54>
 80009a0:	b001      	add	sp, #4
 80009a2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009a6:	bf0c      	ite	eq
 80009a8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ac:	ea91 0f03 	teqne	r1, r3
 80009b0:	bf02      	ittt	eq
 80009b2:	ea90 0f02 	teqeq	r0, r2
 80009b6:	2000      	moveq	r0, #0
 80009b8:	4770      	bxeq	lr
 80009ba:	f110 0f00 	cmn.w	r0, #0
 80009be:	ea91 0f03 	teq	r1, r3
 80009c2:	bf58      	it	pl
 80009c4:	4299      	cmppl	r1, r3
 80009c6:	bf08      	it	eq
 80009c8:	4290      	cmpeq	r0, r2
 80009ca:	bf2c      	ite	cs
 80009cc:	17d8      	asrcs	r0, r3, #31
 80009ce:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009d2:	f040 0001 	orr.w	r0, r0, #1
 80009d6:	4770      	bx	lr
 80009d8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d102      	bne.n	80009e8 <__cmpdf2+0x64>
 80009e2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009e6:	d107      	bne.n	80009f8 <__cmpdf2+0x74>
 80009e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d1d6      	bne.n	80009a0 <__cmpdf2+0x1c>
 80009f2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009f6:	d0d3      	beq.n	80009a0 <__cmpdf2+0x1c>
 80009f8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdrcmple>:
 8000a00:	4684      	mov	ip, r0
 8000a02:	4610      	mov	r0, r2
 8000a04:	4662      	mov	r2, ip
 8000a06:	468c      	mov	ip, r1
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4663      	mov	r3, ip
 8000a0c:	e000      	b.n	8000a10 <__aeabi_cdcmpeq>
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdcmpeq>:
 8000a10:	b501      	push	{r0, lr}
 8000a12:	f7ff ffb7 	bl	8000984 <__cmpdf2>
 8000a16:	2800      	cmp	r0, #0
 8000a18:	bf48      	it	mi
 8000a1a:	f110 0f00 	cmnmi.w	r0, #0
 8000a1e:	bd01      	pop	{r0, pc}

08000a20 <__aeabi_dcmpeq>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff fff4 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a28:	bf0c      	ite	eq
 8000a2a:	2001      	moveq	r0, #1
 8000a2c:	2000      	movne	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_dcmplt>:
 8000a34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a38:	f7ff ffea 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a3c:	bf34      	ite	cc
 8000a3e:	2001      	movcc	r0, #1
 8000a40:	2000      	movcs	r0, #0
 8000a42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a46:	bf00      	nop

08000a48 <__aeabi_dcmple>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff ffe0 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a50:	bf94      	ite	ls
 8000a52:	2001      	movls	r0, #1
 8000a54:	2000      	movhi	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmpge>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffce 	bl	8000a00 <__aeabi_cdrcmple>
 8000a64:	bf94      	ite	ls
 8000a66:	2001      	movls	r0, #1
 8000a68:	2000      	movhi	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmpgt>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffc4 	bl	8000a00 <__aeabi_cdrcmple>
 8000a78:	bf34      	ite	cc
 8000a7a:	2001      	movcc	r0, #1
 8000a7c:	2000      	movcs	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_dcmpun>:
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x10>
 8000a8e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a92:	d10a      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000a94:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	d102      	bne.n	8000aa4 <__aeabi_dcmpun+0x20>
 8000a9e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aa2:	d102      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000aa4:	f04f 0000 	mov.w	r0, #0
 8000aa8:	4770      	bx	lr
 8000aaa:	f04f 0001 	mov.w	r0, #1
 8000aae:	4770      	bx	lr

08000ab0 <__aeabi_d2f>:
 8000ab0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ab4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ab8:	bf24      	itt	cs
 8000aba:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000abe:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ac2:	d90d      	bls.n	8000ae0 <__aeabi_d2f+0x30>
 8000ac4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ac8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000acc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ad0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000ad4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ad8:	bf08      	it	eq
 8000ada:	f020 0001 	biceq.w	r0, r0, #1
 8000ade:	4770      	bx	lr
 8000ae0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000ae4:	d121      	bne.n	8000b2a <__aeabi_d2f+0x7a>
 8000ae6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000aea:	bfbc      	itt	lt
 8000aec:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000af0:	4770      	bxlt	lr
 8000af2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000af6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000afa:	f1c2 0218 	rsb	r2, r2, #24
 8000afe:	f1c2 0c20 	rsb	ip, r2, #32
 8000b02:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b06:	fa20 f002 	lsr.w	r0, r0, r2
 8000b0a:	bf18      	it	ne
 8000b0c:	f040 0001 	orrne.w	r0, r0, #1
 8000b10:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b14:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b18:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b1c:	ea40 000c 	orr.w	r0, r0, ip
 8000b20:	fa23 f302 	lsr.w	r3, r3, r2
 8000b24:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b28:	e7cc      	b.n	8000ac4 <__aeabi_d2f+0x14>
 8000b2a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b2e:	d107      	bne.n	8000b40 <__aeabi_d2f+0x90>
 8000b30:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b34:	bf1e      	ittt	ne
 8000b36:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b3a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b3e:	4770      	bxne	lr
 8000b40:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b44:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b48:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b4c:	4770      	bx	lr
 8000b4e:	bf00      	nop

08000b50 <__aeabi_uldivmod>:
 8000b50:	b953      	cbnz	r3, 8000b68 <__aeabi_uldivmod+0x18>
 8000b52:	b94a      	cbnz	r2, 8000b68 <__aeabi_uldivmod+0x18>
 8000b54:	2900      	cmp	r1, #0
 8000b56:	bf08      	it	eq
 8000b58:	2800      	cmpeq	r0, #0
 8000b5a:	bf1c      	itt	ne
 8000b5c:	f04f 31ff 	movne.w	r1, #4294967295
 8000b60:	f04f 30ff 	movne.w	r0, #4294967295
 8000b64:	f000 b972 	b.w	8000e4c <__aeabi_idiv0>
 8000b68:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b6c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b70:	f000 f806 	bl	8000b80 <__udivmoddi4>
 8000b74:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b78:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b7c:	b004      	add	sp, #16
 8000b7e:	4770      	bx	lr

08000b80 <__udivmoddi4>:
 8000b80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b84:	9e08      	ldr	r6, [sp, #32]
 8000b86:	4604      	mov	r4, r0
 8000b88:	4688      	mov	r8, r1
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d14b      	bne.n	8000c26 <__udivmoddi4+0xa6>
 8000b8e:	428a      	cmp	r2, r1
 8000b90:	4615      	mov	r5, r2
 8000b92:	d967      	bls.n	8000c64 <__udivmoddi4+0xe4>
 8000b94:	fab2 f282 	clz	r2, r2
 8000b98:	b14a      	cbz	r2, 8000bae <__udivmoddi4+0x2e>
 8000b9a:	f1c2 0720 	rsb	r7, r2, #32
 8000b9e:	fa01 f302 	lsl.w	r3, r1, r2
 8000ba2:	fa20 f707 	lsr.w	r7, r0, r7
 8000ba6:	4095      	lsls	r5, r2
 8000ba8:	ea47 0803 	orr.w	r8, r7, r3
 8000bac:	4094      	lsls	r4, r2
 8000bae:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000bb2:	0c23      	lsrs	r3, r4, #16
 8000bb4:	fbb8 f7fe 	udiv	r7, r8, lr
 8000bb8:	fa1f fc85 	uxth.w	ip, r5
 8000bbc:	fb0e 8817 	mls	r8, lr, r7, r8
 8000bc0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000bc4:	fb07 f10c 	mul.w	r1, r7, ip
 8000bc8:	4299      	cmp	r1, r3
 8000bca:	d909      	bls.n	8000be0 <__udivmoddi4+0x60>
 8000bcc:	18eb      	adds	r3, r5, r3
 8000bce:	f107 30ff 	add.w	r0, r7, #4294967295
 8000bd2:	f080 811b 	bcs.w	8000e0c <__udivmoddi4+0x28c>
 8000bd6:	4299      	cmp	r1, r3
 8000bd8:	f240 8118 	bls.w	8000e0c <__udivmoddi4+0x28c>
 8000bdc:	3f02      	subs	r7, #2
 8000bde:	442b      	add	r3, r5
 8000be0:	1a5b      	subs	r3, r3, r1
 8000be2:	b2a4      	uxth	r4, r4
 8000be4:	fbb3 f0fe 	udiv	r0, r3, lr
 8000be8:	fb0e 3310 	mls	r3, lr, r0, r3
 8000bec:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000bf0:	fb00 fc0c 	mul.w	ip, r0, ip
 8000bf4:	45a4      	cmp	ip, r4
 8000bf6:	d909      	bls.n	8000c0c <__udivmoddi4+0x8c>
 8000bf8:	192c      	adds	r4, r5, r4
 8000bfa:	f100 33ff 	add.w	r3, r0, #4294967295
 8000bfe:	f080 8107 	bcs.w	8000e10 <__udivmoddi4+0x290>
 8000c02:	45a4      	cmp	ip, r4
 8000c04:	f240 8104 	bls.w	8000e10 <__udivmoddi4+0x290>
 8000c08:	3802      	subs	r0, #2
 8000c0a:	442c      	add	r4, r5
 8000c0c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000c10:	eba4 040c 	sub.w	r4, r4, ip
 8000c14:	2700      	movs	r7, #0
 8000c16:	b11e      	cbz	r6, 8000c20 <__udivmoddi4+0xa0>
 8000c18:	40d4      	lsrs	r4, r2
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	e9c6 4300 	strd	r4, r3, [r6]
 8000c20:	4639      	mov	r1, r7
 8000c22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c26:	428b      	cmp	r3, r1
 8000c28:	d909      	bls.n	8000c3e <__udivmoddi4+0xbe>
 8000c2a:	2e00      	cmp	r6, #0
 8000c2c:	f000 80eb 	beq.w	8000e06 <__udivmoddi4+0x286>
 8000c30:	2700      	movs	r7, #0
 8000c32:	e9c6 0100 	strd	r0, r1, [r6]
 8000c36:	4638      	mov	r0, r7
 8000c38:	4639      	mov	r1, r7
 8000c3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c3e:	fab3 f783 	clz	r7, r3
 8000c42:	2f00      	cmp	r7, #0
 8000c44:	d147      	bne.n	8000cd6 <__udivmoddi4+0x156>
 8000c46:	428b      	cmp	r3, r1
 8000c48:	d302      	bcc.n	8000c50 <__udivmoddi4+0xd0>
 8000c4a:	4282      	cmp	r2, r0
 8000c4c:	f200 80fa 	bhi.w	8000e44 <__udivmoddi4+0x2c4>
 8000c50:	1a84      	subs	r4, r0, r2
 8000c52:	eb61 0303 	sbc.w	r3, r1, r3
 8000c56:	2001      	movs	r0, #1
 8000c58:	4698      	mov	r8, r3
 8000c5a:	2e00      	cmp	r6, #0
 8000c5c:	d0e0      	beq.n	8000c20 <__udivmoddi4+0xa0>
 8000c5e:	e9c6 4800 	strd	r4, r8, [r6]
 8000c62:	e7dd      	b.n	8000c20 <__udivmoddi4+0xa0>
 8000c64:	b902      	cbnz	r2, 8000c68 <__udivmoddi4+0xe8>
 8000c66:	deff      	udf	#255	; 0xff
 8000c68:	fab2 f282 	clz	r2, r2
 8000c6c:	2a00      	cmp	r2, #0
 8000c6e:	f040 808f 	bne.w	8000d90 <__udivmoddi4+0x210>
 8000c72:	1b49      	subs	r1, r1, r5
 8000c74:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c78:	fa1f f885 	uxth.w	r8, r5
 8000c7c:	2701      	movs	r7, #1
 8000c7e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000c82:	0c23      	lsrs	r3, r4, #16
 8000c84:	fb0e 111c 	mls	r1, lr, ip, r1
 8000c88:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c8c:	fb08 f10c 	mul.w	r1, r8, ip
 8000c90:	4299      	cmp	r1, r3
 8000c92:	d907      	bls.n	8000ca4 <__udivmoddi4+0x124>
 8000c94:	18eb      	adds	r3, r5, r3
 8000c96:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000c9a:	d202      	bcs.n	8000ca2 <__udivmoddi4+0x122>
 8000c9c:	4299      	cmp	r1, r3
 8000c9e:	f200 80cd 	bhi.w	8000e3c <__udivmoddi4+0x2bc>
 8000ca2:	4684      	mov	ip, r0
 8000ca4:	1a59      	subs	r1, r3, r1
 8000ca6:	b2a3      	uxth	r3, r4
 8000ca8:	fbb1 f0fe 	udiv	r0, r1, lr
 8000cac:	fb0e 1410 	mls	r4, lr, r0, r1
 8000cb0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000cb4:	fb08 f800 	mul.w	r8, r8, r0
 8000cb8:	45a0      	cmp	r8, r4
 8000cba:	d907      	bls.n	8000ccc <__udivmoddi4+0x14c>
 8000cbc:	192c      	adds	r4, r5, r4
 8000cbe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cc2:	d202      	bcs.n	8000cca <__udivmoddi4+0x14a>
 8000cc4:	45a0      	cmp	r8, r4
 8000cc6:	f200 80b6 	bhi.w	8000e36 <__udivmoddi4+0x2b6>
 8000cca:	4618      	mov	r0, r3
 8000ccc:	eba4 0408 	sub.w	r4, r4, r8
 8000cd0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000cd4:	e79f      	b.n	8000c16 <__udivmoddi4+0x96>
 8000cd6:	f1c7 0c20 	rsb	ip, r7, #32
 8000cda:	40bb      	lsls	r3, r7
 8000cdc:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000ce0:	ea4e 0e03 	orr.w	lr, lr, r3
 8000ce4:	fa01 f407 	lsl.w	r4, r1, r7
 8000ce8:	fa20 f50c 	lsr.w	r5, r0, ip
 8000cec:	fa21 f30c 	lsr.w	r3, r1, ip
 8000cf0:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000cf4:	4325      	orrs	r5, r4
 8000cf6:	fbb3 f9f8 	udiv	r9, r3, r8
 8000cfa:	0c2c      	lsrs	r4, r5, #16
 8000cfc:	fb08 3319 	mls	r3, r8, r9, r3
 8000d00:	fa1f fa8e 	uxth.w	sl, lr
 8000d04:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000d08:	fb09 f40a 	mul.w	r4, r9, sl
 8000d0c:	429c      	cmp	r4, r3
 8000d0e:	fa02 f207 	lsl.w	r2, r2, r7
 8000d12:	fa00 f107 	lsl.w	r1, r0, r7
 8000d16:	d90b      	bls.n	8000d30 <__udivmoddi4+0x1b0>
 8000d18:	eb1e 0303 	adds.w	r3, lr, r3
 8000d1c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000d20:	f080 8087 	bcs.w	8000e32 <__udivmoddi4+0x2b2>
 8000d24:	429c      	cmp	r4, r3
 8000d26:	f240 8084 	bls.w	8000e32 <__udivmoddi4+0x2b2>
 8000d2a:	f1a9 0902 	sub.w	r9, r9, #2
 8000d2e:	4473      	add	r3, lr
 8000d30:	1b1b      	subs	r3, r3, r4
 8000d32:	b2ad      	uxth	r5, r5
 8000d34:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d38:	fb08 3310 	mls	r3, r8, r0, r3
 8000d3c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000d40:	fb00 fa0a 	mul.w	sl, r0, sl
 8000d44:	45a2      	cmp	sl, r4
 8000d46:	d908      	bls.n	8000d5a <__udivmoddi4+0x1da>
 8000d48:	eb1e 0404 	adds.w	r4, lr, r4
 8000d4c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d50:	d26b      	bcs.n	8000e2a <__udivmoddi4+0x2aa>
 8000d52:	45a2      	cmp	sl, r4
 8000d54:	d969      	bls.n	8000e2a <__udivmoddi4+0x2aa>
 8000d56:	3802      	subs	r0, #2
 8000d58:	4474      	add	r4, lr
 8000d5a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000d5e:	fba0 8902 	umull	r8, r9, r0, r2
 8000d62:	eba4 040a 	sub.w	r4, r4, sl
 8000d66:	454c      	cmp	r4, r9
 8000d68:	46c2      	mov	sl, r8
 8000d6a:	464b      	mov	r3, r9
 8000d6c:	d354      	bcc.n	8000e18 <__udivmoddi4+0x298>
 8000d6e:	d051      	beq.n	8000e14 <__udivmoddi4+0x294>
 8000d70:	2e00      	cmp	r6, #0
 8000d72:	d069      	beq.n	8000e48 <__udivmoddi4+0x2c8>
 8000d74:	ebb1 050a 	subs.w	r5, r1, sl
 8000d78:	eb64 0403 	sbc.w	r4, r4, r3
 8000d7c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000d80:	40fd      	lsrs	r5, r7
 8000d82:	40fc      	lsrs	r4, r7
 8000d84:	ea4c 0505 	orr.w	r5, ip, r5
 8000d88:	e9c6 5400 	strd	r5, r4, [r6]
 8000d8c:	2700      	movs	r7, #0
 8000d8e:	e747      	b.n	8000c20 <__udivmoddi4+0xa0>
 8000d90:	f1c2 0320 	rsb	r3, r2, #32
 8000d94:	fa20 f703 	lsr.w	r7, r0, r3
 8000d98:	4095      	lsls	r5, r2
 8000d9a:	fa01 f002 	lsl.w	r0, r1, r2
 8000d9e:	fa21 f303 	lsr.w	r3, r1, r3
 8000da2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000da6:	4338      	orrs	r0, r7
 8000da8:	0c01      	lsrs	r1, r0, #16
 8000daa:	fbb3 f7fe 	udiv	r7, r3, lr
 8000dae:	fa1f f885 	uxth.w	r8, r5
 8000db2:	fb0e 3317 	mls	r3, lr, r7, r3
 8000db6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000dba:	fb07 f308 	mul.w	r3, r7, r8
 8000dbe:	428b      	cmp	r3, r1
 8000dc0:	fa04 f402 	lsl.w	r4, r4, r2
 8000dc4:	d907      	bls.n	8000dd6 <__udivmoddi4+0x256>
 8000dc6:	1869      	adds	r1, r5, r1
 8000dc8:	f107 3cff 	add.w	ip, r7, #4294967295
 8000dcc:	d22f      	bcs.n	8000e2e <__udivmoddi4+0x2ae>
 8000dce:	428b      	cmp	r3, r1
 8000dd0:	d92d      	bls.n	8000e2e <__udivmoddi4+0x2ae>
 8000dd2:	3f02      	subs	r7, #2
 8000dd4:	4429      	add	r1, r5
 8000dd6:	1acb      	subs	r3, r1, r3
 8000dd8:	b281      	uxth	r1, r0
 8000dda:	fbb3 f0fe 	udiv	r0, r3, lr
 8000dde:	fb0e 3310 	mls	r3, lr, r0, r3
 8000de2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000de6:	fb00 f308 	mul.w	r3, r0, r8
 8000dea:	428b      	cmp	r3, r1
 8000dec:	d907      	bls.n	8000dfe <__udivmoddi4+0x27e>
 8000dee:	1869      	adds	r1, r5, r1
 8000df0:	f100 3cff 	add.w	ip, r0, #4294967295
 8000df4:	d217      	bcs.n	8000e26 <__udivmoddi4+0x2a6>
 8000df6:	428b      	cmp	r3, r1
 8000df8:	d915      	bls.n	8000e26 <__udivmoddi4+0x2a6>
 8000dfa:	3802      	subs	r0, #2
 8000dfc:	4429      	add	r1, r5
 8000dfe:	1ac9      	subs	r1, r1, r3
 8000e00:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000e04:	e73b      	b.n	8000c7e <__udivmoddi4+0xfe>
 8000e06:	4637      	mov	r7, r6
 8000e08:	4630      	mov	r0, r6
 8000e0a:	e709      	b.n	8000c20 <__udivmoddi4+0xa0>
 8000e0c:	4607      	mov	r7, r0
 8000e0e:	e6e7      	b.n	8000be0 <__udivmoddi4+0x60>
 8000e10:	4618      	mov	r0, r3
 8000e12:	e6fb      	b.n	8000c0c <__udivmoddi4+0x8c>
 8000e14:	4541      	cmp	r1, r8
 8000e16:	d2ab      	bcs.n	8000d70 <__udivmoddi4+0x1f0>
 8000e18:	ebb8 0a02 	subs.w	sl, r8, r2
 8000e1c:	eb69 020e 	sbc.w	r2, r9, lr
 8000e20:	3801      	subs	r0, #1
 8000e22:	4613      	mov	r3, r2
 8000e24:	e7a4      	b.n	8000d70 <__udivmoddi4+0x1f0>
 8000e26:	4660      	mov	r0, ip
 8000e28:	e7e9      	b.n	8000dfe <__udivmoddi4+0x27e>
 8000e2a:	4618      	mov	r0, r3
 8000e2c:	e795      	b.n	8000d5a <__udivmoddi4+0x1da>
 8000e2e:	4667      	mov	r7, ip
 8000e30:	e7d1      	b.n	8000dd6 <__udivmoddi4+0x256>
 8000e32:	4681      	mov	r9, r0
 8000e34:	e77c      	b.n	8000d30 <__udivmoddi4+0x1b0>
 8000e36:	3802      	subs	r0, #2
 8000e38:	442c      	add	r4, r5
 8000e3a:	e747      	b.n	8000ccc <__udivmoddi4+0x14c>
 8000e3c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e40:	442b      	add	r3, r5
 8000e42:	e72f      	b.n	8000ca4 <__udivmoddi4+0x124>
 8000e44:	4638      	mov	r0, r7
 8000e46:	e708      	b.n	8000c5a <__udivmoddi4+0xda>
 8000e48:	4637      	mov	r7, r6
 8000e4a:	e6e9      	b.n	8000c20 <__udivmoddi4+0xa0>

08000e4c <__aeabi_idiv0>:
 8000e4c:	4770      	bx	lr
 8000e4e:	bf00      	nop

08000e50 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	af00      	add	r7, sp, #0

  hcrc.Instance = CRC;
 8000e54:	4b06      	ldr	r3, [pc, #24]	; (8000e70 <MX_CRC_Init+0x20>)
 8000e56:	4a07      	ldr	r2, [pc, #28]	; (8000e74 <MX_CRC_Init+0x24>)
 8000e58:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000e5a:	4805      	ldr	r0, [pc, #20]	; (8000e70 <MX_CRC_Init+0x20>)
 8000e5c:	f001 fdf2 	bl	8002a44 <HAL_CRC_Init>
 8000e60:	4603      	mov	r3, r0
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d001      	beq.n	8000e6a <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 8000e66:	f001 f9a1 	bl	80021ac <Error_Handler>
  }

}
 8000e6a:	bf00      	nop
 8000e6c:	bd80      	pop	{r7, pc}
 8000e6e:	bf00      	nop
 8000e70:	20000674 	.word	0x20000674
 8000e74:	40023000 	.word	0x40023000

08000e78 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	b085      	sub	sp, #20
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	4a0b      	ldr	r2, [pc, #44]	; (8000eb4 <HAL_CRC_MspInit+0x3c>)
 8000e86:	4293      	cmp	r3, r2
 8000e88:	d10d      	bne.n	8000ea6 <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	60fb      	str	r3, [r7, #12]
 8000e8e:	4b0a      	ldr	r3, [pc, #40]	; (8000eb8 <HAL_CRC_MspInit+0x40>)
 8000e90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e92:	4a09      	ldr	r2, [pc, #36]	; (8000eb8 <HAL_CRC_MspInit+0x40>)
 8000e94:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000e98:	6313      	str	r3, [r2, #48]	; 0x30
 8000e9a:	4b07      	ldr	r3, [pc, #28]	; (8000eb8 <HAL_CRC_MspInit+0x40>)
 8000e9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e9e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000ea2:	60fb      	str	r3, [r7, #12]
 8000ea4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 8000ea6:	bf00      	nop
 8000ea8:	3714      	adds	r7, #20
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb0:	4770      	bx	lr
 8000eb2:	bf00      	nop
 8000eb4:	40023000 	.word	0x40023000
 8000eb8:	40023800 	.word	0x40023800

08000ebc <write_register>:

//(1): Functions definitions
//-------------- Static Functions ---------------//
// Function(1): Write to register
static void write_register(uint8_t reg, uint8_t *data)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b084      	sub	sp, #16
 8000ec0:	af02      	add	r7, sp, #8
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	6039      	str	r1, [r7, #0]
 8000ec6:	71fb      	strb	r3, [r7, #7]
	iData[0] = reg;
 8000ec8:	4a09      	ldr	r2, [pc, #36]	; (8000ef0 <write_register+0x34>)
 8000eca:	79fb      	ldrb	r3, [r7, #7]
 8000ecc:	7013      	strb	r3, [r2, #0]
	iData[1] = data[0];
 8000ece:	683b      	ldr	r3, [r7, #0]
 8000ed0:	781a      	ldrb	r2, [r3, #0]
 8000ed2:	4b07      	ldr	r3, [pc, #28]	; (8000ef0 <write_register+0x34>)
 8000ed4:	705a      	strb	r2, [r3, #1]
	HAL_I2C_Master_Transmit(&i2cx, DAC_I2C_ADDR, iData, 2, 100);
 8000ed6:	2364      	movs	r3, #100	; 0x64
 8000ed8:	9300      	str	r3, [sp, #0]
 8000eda:	2302      	movs	r3, #2
 8000edc:	4a04      	ldr	r2, [pc, #16]	; (8000ef0 <write_register+0x34>)
 8000ede:	2194      	movs	r1, #148	; 0x94
 8000ee0:	4804      	ldr	r0, [pc, #16]	; (8000ef4 <write_register+0x38>)
 8000ee2:	f002 ff5d 	bl	8003da0 <HAL_I2C_Master_Transmit>
	//HAL_I2C_Master_Transmit(&i2cx, DAC_I2C_ADDR, data, size, 100);
}
 8000ee6:	bf00      	nop
 8000ee8:	3708      	adds	r7, #8
 8000eea:	46bd      	mov	sp, r7
 8000eec:	bd80      	pop	{r7, pc}
 8000eee:	bf00      	nop
 8000ef0:	20000608 	.word	0x20000608
 8000ef4:	2000060c 	.word	0x2000060c

08000ef8 <read_register>:
// Function(2): Read from register
static void read_register(uint8_t reg, uint8_t *data)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b084      	sub	sp, #16
 8000efc:	af02      	add	r7, sp, #8
 8000efe:	4603      	mov	r3, r0
 8000f00:	6039      	str	r1, [r7, #0]
 8000f02:	71fb      	strb	r3, [r7, #7]
	iData[0] = reg;
 8000f04:	4a0b      	ldr	r2, [pc, #44]	; (8000f34 <read_register+0x3c>)
 8000f06:	79fb      	ldrb	r3, [r7, #7]
 8000f08:	7013      	strb	r3, [r2, #0]
	HAL_I2C_Master_Transmit(&i2cx, DAC_I2C_ADDR, iData, 1, 100);
 8000f0a:	2364      	movs	r3, #100	; 0x64
 8000f0c:	9300      	str	r3, [sp, #0]
 8000f0e:	2301      	movs	r3, #1
 8000f10:	4a08      	ldr	r2, [pc, #32]	; (8000f34 <read_register+0x3c>)
 8000f12:	2194      	movs	r1, #148	; 0x94
 8000f14:	4808      	ldr	r0, [pc, #32]	; (8000f38 <read_register+0x40>)
 8000f16:	f002 ff43 	bl	8003da0 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&i2cx, DAC_I2C_ADDR, data, 1, 100);
 8000f1a:	2364      	movs	r3, #100	; 0x64
 8000f1c:	9300      	str	r3, [sp, #0]
 8000f1e:	2301      	movs	r3, #1
 8000f20:	683a      	ldr	r2, [r7, #0]
 8000f22:	2194      	movs	r1, #148	; 0x94
 8000f24:	4804      	ldr	r0, [pc, #16]	; (8000f38 <read_register+0x40>)
 8000f26:	f003 f839 	bl	8003f9c <HAL_I2C_Master_Receive>
}
 8000f2a:	bf00      	nop
 8000f2c:	3708      	adds	r7, #8
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	bd80      	pop	{r7, pc}
 8000f32:	bf00      	nop
 8000f34:	20000608 	.word	0x20000608
 8000f38:	2000060c 	.word	0x2000060c

08000f3c <CS43_Init>:

//-------------- Public Functions ----------------//
// Function(1): Initialisation
void CS43_Init(I2C_HandleTypeDef i2c_handle, CS43_MODE outputMode)
{
 8000f3c:	b084      	sub	sp, #16
 8000f3e:	b580      	push	{r7, lr}
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	f107 0c08 	add.w	ip, r7, #8
 8000f46:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	__HAL_UNLOCK(&hi2s3);     // THIS IS EXTREMELY IMPORTANT FOR I2S3 TO WORK!!
 8000f4a:	4b81      	ldr	r3, [pc, #516]	; (8001150 <CS43_Init+0x214>)
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	__HAL_I2S_ENABLE(&hi2s3); // THIS IS EXTREMELY IMPORTANT FOR I2S3 TO WORK!!
 8000f52:	4b7f      	ldr	r3, [pc, #508]	; (8001150 <CS43_Init+0x214>)
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	69da      	ldr	r2, [r3, #28]
 8000f58:	4b7d      	ldr	r3, [pc, #500]	; (8001150 <CS43_Init+0x214>)
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000f60:	61da      	str	r2, [r3, #28]
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, GPIO_PIN_SET);
 8000f62:	2201      	movs	r2, #1
 8000f64:	2110      	movs	r1, #16
 8000f66:	487b      	ldr	r0, [pc, #492]	; (8001154 <CS43_Init+0x218>)
 8000f68:	f002 fd28 	bl	80039bc <HAL_GPIO_WritePin>
	//(1): Get the I2C handle
	i2cx = i2c_handle;
 8000f6c:	4b7a      	ldr	r3, [pc, #488]	; (8001158 <CS43_Init+0x21c>)
 8000f6e:	4618      	mov	r0, r3
 8000f70:	f107 0108 	add.w	r1, r7, #8
 8000f74:	2354      	movs	r3, #84	; 0x54
 8000f76:	461a      	mov	r2, r3
 8000f78:	f00d fe0a 	bl	800eb90 <memcpy>
	//(2): Power down
	iData[1] = 0x01;
 8000f7c:	4b77      	ldr	r3, [pc, #476]	; (800115c <CS43_Init+0x220>)
 8000f7e:	2201      	movs	r2, #1
 8000f80:	705a      	strb	r2, [r3, #1]
	write_register(POWER_CONTROL1,iData);
 8000f82:	4976      	ldr	r1, [pc, #472]	; (800115c <CS43_Init+0x220>)
 8000f84:	2002      	movs	r0, #2
 8000f86:	f7ff ff99 	bl	8000ebc <write_register>
	//(3): Enable Right and Left headphones
	iData[1] =  (2 << 6);  // PDN_HPB[0:1]  = 10 (HP-B always onCon)
 8000f8a:	4b74      	ldr	r3, [pc, #464]	; (800115c <CS43_Init+0x220>)
 8000f8c:	2280      	movs	r2, #128	; 0x80
 8000f8e:	705a      	strb	r2, [r3, #1]
	iData[1] |= (2 << 4);  // PDN_HPA[0:1]  = 10 (HP-A always on)
 8000f90:	4b72      	ldr	r3, [pc, #456]	; (800115c <CS43_Init+0x220>)
 8000f92:	785b      	ldrb	r3, [r3, #1]
 8000f94:	f043 0320 	orr.w	r3, r3, #32
 8000f98:	b2da      	uxtb	r2, r3
 8000f9a:	4b70      	ldr	r3, [pc, #448]	; (800115c <CS43_Init+0x220>)
 8000f9c:	705a      	strb	r2, [r3, #1]
	iData[1] |= (3 << 2);  // PDN_SPKB[0:1] = 11 (Speaker B always off)
 8000f9e:	4b6f      	ldr	r3, [pc, #444]	; (800115c <CS43_Init+0x220>)
 8000fa0:	785b      	ldrb	r3, [r3, #1]
 8000fa2:	f043 030c 	orr.w	r3, r3, #12
 8000fa6:	b2da      	uxtb	r2, r3
 8000fa8:	4b6c      	ldr	r3, [pc, #432]	; (800115c <CS43_Init+0x220>)
 8000faa:	705a      	strb	r2, [r3, #1]
	iData[1] |= (3 << 0);  // PDN_SPKA[0:1] = 11 (Speaker A always off)
 8000fac:	4b6b      	ldr	r3, [pc, #428]	; (800115c <CS43_Init+0x220>)
 8000fae:	785b      	ldrb	r3, [r3, #1]
 8000fb0:	f043 0303 	orr.w	r3, r3, #3
 8000fb4:	b2da      	uxtb	r2, r3
 8000fb6:	4b69      	ldr	r3, [pc, #420]	; (800115c <CS43_Init+0x220>)
 8000fb8:	705a      	strb	r2, [r3, #1]
	write_register(POWER_CONTROL2,&iData[1]);
 8000fba:	4969      	ldr	r1, [pc, #420]	; (8001160 <CS43_Init+0x224>)
 8000fbc:	2004      	movs	r0, #4
 8000fbe:	f7ff ff7d 	bl	8000ebc <write_register>
	//(4): Automatic clock detection
	iData[1] = (1 << 7);
 8000fc2:	4b66      	ldr	r3, [pc, #408]	; (800115c <CS43_Init+0x220>)
 8000fc4:	2280      	movs	r2, #128	; 0x80
 8000fc6:	705a      	strb	r2, [r3, #1]
	write_register(CLOCKING_CONTROL,&iData[1]);
 8000fc8:	4965      	ldr	r1, [pc, #404]	; (8001160 <CS43_Init+0x224>)
 8000fca:	2005      	movs	r0, #5
 8000fcc:	f7ff ff76 	bl	8000ebc <write_register>
	//(5): Interface control 1
	read_register(INTERFACE_CONTROL1, iData);
 8000fd0:	4962      	ldr	r1, [pc, #392]	; (800115c <CS43_Init+0x220>)
 8000fd2:	2006      	movs	r0, #6
 8000fd4:	f7ff ff90 	bl	8000ef8 <read_register>
	iData[1] &= (1 << 5); // Clear all bits except bit 5 which is reserved
 8000fd8:	4b60      	ldr	r3, [pc, #384]	; (800115c <CS43_Init+0x220>)
 8000fda:	785b      	ldrb	r3, [r3, #1]
 8000fdc:	f003 0320 	and.w	r3, r3, #32
 8000fe0:	b2da      	uxtb	r2, r3
 8000fe2:	4b5e      	ldr	r3, [pc, #376]	; (800115c <CS43_Init+0x220>)
 8000fe4:	705a      	strb	r2, [r3, #1]
	iData[1] &= ~(1 << 7);  // Slave
 8000fe6:	4b5d      	ldr	r3, [pc, #372]	; (800115c <CS43_Init+0x220>)
 8000fe8:	785b      	ldrb	r3, [r3, #1]
 8000fea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000fee:	b2da      	uxtb	r2, r3
 8000ff0:	4b5a      	ldr	r3, [pc, #360]	; (800115c <CS43_Init+0x220>)
 8000ff2:	705a      	strb	r2, [r3, #1]
	iData[1] &= ~(1 << 6);  // Clock polarity: Not inverted
 8000ff4:	4b59      	ldr	r3, [pc, #356]	; (800115c <CS43_Init+0x220>)
 8000ff6:	785b      	ldrb	r3, [r3, #1]
 8000ff8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000ffc:	b2da      	uxtb	r2, r3
 8000ffe:	4b57      	ldr	r3, [pc, #348]	; (800115c <CS43_Init+0x220>)
 8001000:	705a      	strb	r2, [r3, #1]
	iData[1] &= ~(1 << 4);  // No DSP mode
 8001002:	4b56      	ldr	r3, [pc, #344]	; (800115c <CS43_Init+0x220>)
 8001004:	785b      	ldrb	r3, [r3, #1]
 8001006:	f023 0310 	bic.w	r3, r3, #16
 800100a:	b2da      	uxtb	r2, r3
 800100c:	4b53      	ldr	r3, [pc, #332]	; (800115c <CS43_Init+0x220>)
 800100e:	705a      	strb	r2, [r3, #1]
	iData[1] &= ~(1 << 2);  // Left justified, up to 24 bit (default)
 8001010:	4b52      	ldr	r3, [pc, #328]	; (800115c <CS43_Init+0x220>)
 8001012:	785b      	ldrb	r3, [r3, #1]
 8001014:	f023 0304 	bic.w	r3, r3, #4
 8001018:	b2da      	uxtb	r2, r3
 800101a:	4b50      	ldr	r3, [pc, #320]	; (800115c <CS43_Init+0x220>)
 800101c:	705a      	strb	r2, [r3, #1]
	iData[1] |= (1 << 2);
 800101e:	4b4f      	ldr	r3, [pc, #316]	; (800115c <CS43_Init+0x220>)
 8001020:	785b      	ldrb	r3, [r3, #1]
 8001022:	f043 0304 	orr.w	r3, r3, #4
 8001026:	b2da      	uxtb	r2, r3
 8001028:	4b4c      	ldr	r3, [pc, #304]	; (800115c <CS43_Init+0x220>)
 800102a:	705a      	strb	r2, [r3, #1]
	
	iData[1] |=  (3 << 0);  // 16-bit audio word length for I2S interface
 800102c:	4b4b      	ldr	r3, [pc, #300]	; (800115c <CS43_Init+0x220>)
 800102e:	785b      	ldrb	r3, [r3, #1]
 8001030:	f043 0303 	orr.w	r3, r3, #3
 8001034:	b2da      	uxtb	r2, r3
 8001036:	4b49      	ldr	r3, [pc, #292]	; (800115c <CS43_Init+0x220>)
 8001038:	705a      	strb	r2, [r3, #1]
	write_register(INTERFACE_CONTROL1,&iData[1]);
 800103a:	4949      	ldr	r1, [pc, #292]	; (8001160 <CS43_Init+0x224>)
 800103c:	2006      	movs	r0, #6
 800103e:	f7ff ff3d 	bl	8000ebc <write_register>
	//(6): Passthrough A settings
	read_register(PASSTHROUGH_A, &iData[1]);
 8001042:	4947      	ldr	r1, [pc, #284]	; (8001160 <CS43_Init+0x224>)
 8001044:	2008      	movs	r0, #8
 8001046:	f7ff ff57 	bl	8000ef8 <read_register>
	iData[1] &= 0xF0;      // Bits [4-7] are reserved
 800104a:	4b44      	ldr	r3, [pc, #272]	; (800115c <CS43_Init+0x220>)
 800104c:	785b      	ldrb	r3, [r3, #1]
 800104e:	f023 030f 	bic.w	r3, r3, #15
 8001052:	b2da      	uxtb	r2, r3
 8001054:	4b41      	ldr	r3, [pc, #260]	; (800115c <CS43_Init+0x220>)
 8001056:	705a      	strb	r2, [r3, #1]
	iData[1] |=  (1 << 0); // Use AIN1A as source for passthrough
 8001058:	4b40      	ldr	r3, [pc, #256]	; (800115c <CS43_Init+0x220>)
 800105a:	785b      	ldrb	r3, [r3, #1]
 800105c:	f043 0301 	orr.w	r3, r3, #1
 8001060:	b2da      	uxtb	r2, r3
 8001062:	4b3e      	ldr	r3, [pc, #248]	; (800115c <CS43_Init+0x220>)
 8001064:	705a      	strb	r2, [r3, #1]
	write_register(PASSTHROUGH_A,&iData[1]);
 8001066:	493e      	ldr	r1, [pc, #248]	; (8001160 <CS43_Init+0x224>)
 8001068:	2008      	movs	r0, #8
 800106a:	f7ff ff27 	bl	8000ebc <write_register>
	//(7): Passthrough B settings
	read_register(PASSTHROUGH_B, &iData[1]);
 800106e:	493c      	ldr	r1, [pc, #240]	; (8001160 <CS43_Init+0x224>)
 8001070:	2009      	movs	r0, #9
 8001072:	f7ff ff41 	bl	8000ef8 <read_register>
	iData[1] &= 0xF0;      // Bits [4-7] are reserved
 8001076:	4b39      	ldr	r3, [pc, #228]	; (800115c <CS43_Init+0x220>)
 8001078:	785b      	ldrb	r3, [r3, #1]
 800107a:	f023 030f 	bic.w	r3, r3, #15
 800107e:	b2da      	uxtb	r2, r3
 8001080:	4b36      	ldr	r3, [pc, #216]	; (800115c <CS43_Init+0x220>)
 8001082:	705a      	strb	r2, [r3, #1]
	iData[1] |=  (1 << 0); // Use AIN1B as source for passthrough
 8001084:	4b35      	ldr	r3, [pc, #212]	; (800115c <CS43_Init+0x220>)
 8001086:	785b      	ldrb	r3, [r3, #1]
 8001088:	f043 0301 	orr.w	r3, r3, #1
 800108c:	b2da      	uxtb	r2, r3
 800108e:	4b33      	ldr	r3, [pc, #204]	; (800115c <CS43_Init+0x220>)
 8001090:	705a      	strb	r2, [r3, #1]
	write_register(PASSTHROUGH_B,&iData[1]);
 8001092:	4933      	ldr	r1, [pc, #204]	; (8001160 <CS43_Init+0x224>)
 8001094:	2009      	movs	r0, #9
 8001096:	f7ff ff11 	bl	8000ebc <write_register>
	//(8): Miscellaneous register settings
	read_register(MISCELLANEOUS_CONTRLS, &iData[1]);
 800109a:	4931      	ldr	r1, [pc, #196]	; (8001160 <CS43_Init+0x224>)
 800109c:	200e      	movs	r0, #14
 800109e:	f7ff ff2b 	bl	8000ef8 <read_register>
	if(outputMode == MODE_ANALOG)
 80010a2:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 80010a6:	2b01      	cmp	r3, #1
 80010a8:	d123      	bne.n	80010f2 <CS43_Init+0x1b6>
	{
		iData[1] |=  (1 << 7);   // Enable passthrough for AIN-A
 80010aa:	4b2c      	ldr	r3, [pc, #176]	; (800115c <CS43_Init+0x220>)
 80010ac:	785b      	ldrb	r3, [r3, #1]
 80010ae:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80010b2:	b2da      	uxtb	r2, r3
 80010b4:	4b29      	ldr	r3, [pc, #164]	; (800115c <CS43_Init+0x220>)
 80010b6:	705a      	strb	r2, [r3, #1]
		iData[1] |=  (1 << 6);   // Enable passthrough for AIN-B
 80010b8:	4b28      	ldr	r3, [pc, #160]	; (800115c <CS43_Init+0x220>)
 80010ba:	785b      	ldrb	r3, [r3, #1]
 80010bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80010c0:	b2da      	uxtb	r2, r3
 80010c2:	4b26      	ldr	r3, [pc, #152]	; (800115c <CS43_Init+0x220>)
 80010c4:	705a      	strb	r2, [r3, #1]
		iData[1] &= ~(1 << 5);   // Unmute passthrough on AIN-A
 80010c6:	4b25      	ldr	r3, [pc, #148]	; (800115c <CS43_Init+0x220>)
 80010c8:	785b      	ldrb	r3, [r3, #1]
 80010ca:	f023 0320 	bic.w	r3, r3, #32
 80010ce:	b2da      	uxtb	r2, r3
 80010d0:	4b22      	ldr	r3, [pc, #136]	; (800115c <CS43_Init+0x220>)
 80010d2:	705a      	strb	r2, [r3, #1]
		iData[1] &= ~(1 << 4);   // Unmute passthrough on AIN-B
 80010d4:	4b21      	ldr	r3, [pc, #132]	; (800115c <CS43_Init+0x220>)
 80010d6:	785b      	ldrb	r3, [r3, #1]
 80010d8:	f023 0310 	bic.w	r3, r3, #16
 80010dc:	b2da      	uxtb	r2, r3
 80010de:	4b1f      	ldr	r3, [pc, #124]	; (800115c <CS43_Init+0x220>)
 80010e0:	705a      	strb	r2, [r3, #1]
		iData[1] &= ~(1 << 3);   // Changed settings take affect immediately
 80010e2:	4b1e      	ldr	r3, [pc, #120]	; (800115c <CS43_Init+0x220>)
 80010e4:	785b      	ldrb	r3, [r3, #1]
 80010e6:	f023 0308 	bic.w	r3, r3, #8
 80010ea:	b2da      	uxtb	r2, r3
 80010ec:	4b1b      	ldr	r3, [pc, #108]	; (800115c <CS43_Init+0x220>)
 80010ee:	705a      	strb	r2, [r3, #1]
 80010f0:	e006      	b.n	8001100 <CS43_Init+0x1c4>
	}
	else if(outputMode == MODE_I2S)
 80010f2:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d102      	bne.n	8001100 <CS43_Init+0x1c4>
	{
		iData[1] = 0x02;
 80010fa:	4b18      	ldr	r3, [pc, #96]	; (800115c <CS43_Init+0x220>)
 80010fc:	2202      	movs	r2, #2
 80010fe:	705a      	strb	r2, [r3, #1]
	}
	write_register(MISCELLANEOUS_CONTRLS,&iData[1]);
 8001100:	4917      	ldr	r1, [pc, #92]	; (8001160 <CS43_Init+0x224>)
 8001102:	200e      	movs	r0, #14
 8001104:	f7ff feda 	bl	8000ebc <write_register>
	//(9): Unmute headphone and speaker
	read_register(PLAYBACK_CONTROL, &iData[1]);
 8001108:	4915      	ldr	r1, [pc, #84]	; (8001160 <CS43_Init+0x224>)
 800110a:	200f      	movs	r0, #15
 800110c:	f7ff fef4 	bl	8000ef8 <read_register>
	iData[1] = 0x00;
 8001110:	4b12      	ldr	r3, [pc, #72]	; (800115c <CS43_Init+0x220>)
 8001112:	2200      	movs	r2, #0
 8001114:	705a      	strb	r2, [r3, #1]
	write_register(PLAYBACK_CONTROL,&iData[1]);
 8001116:	4912      	ldr	r1, [pc, #72]	; (8001160 <CS43_Init+0x224>)
 8001118:	200f      	movs	r0, #15
 800111a:	f7ff fecf 	bl	8000ebc <write_register>
	//(10): Set volume to default (0dB)
	iData[1] = 0x00;
 800111e:	4b0f      	ldr	r3, [pc, #60]	; (800115c <CS43_Init+0x220>)
 8001120:	2200      	movs	r2, #0
 8001122:	705a      	strb	r2, [r3, #1]
	write_register(PASSTHROUGH_VOLUME_A,&iData[1]);
 8001124:	490e      	ldr	r1, [pc, #56]	; (8001160 <CS43_Init+0x224>)
 8001126:	2014      	movs	r0, #20
 8001128:	f7ff fec8 	bl	8000ebc <write_register>
	write_register(PASSTHROUGH_VOLUME_B,&iData[1]);
 800112c:	490c      	ldr	r1, [pc, #48]	; (8001160 <CS43_Init+0x224>)
 800112e:	2015      	movs	r0, #21
 8001130:	f7ff fec4 	bl	8000ebc <write_register>
	write_register(PCM_VOLUME_A,&iData[1]);
 8001134:	490a      	ldr	r1, [pc, #40]	; (8001160 <CS43_Init+0x224>)
 8001136:	201a      	movs	r0, #26
 8001138:	f7ff fec0 	bl	8000ebc <write_register>
	write_register(PCM_VOLUME_B,&iData[1]);
 800113c:	4908      	ldr	r1, [pc, #32]	; (8001160 <CS43_Init+0x224>)
 800113e:	201b      	movs	r0, #27
 8001140:	f7ff febc 	bl	8000ebc <write_register>
}
 8001144:	bf00      	nop
 8001146:	46bd      	mov	sp, r7
 8001148:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800114c:	b004      	add	sp, #16
 800114e:	4770      	bx	lr
 8001150:	20000778 	.word	0x20000778
 8001154:	40020c00 	.word	0x40020c00
 8001158:	2000060c 	.word	0x2000060c
 800115c:	20000608 	.word	0x20000608
 8001160:	20000609 	.word	0x20000609

08001164 <CS43_Enable_RightLeft>:

// Function(2): Enable Right and Left headphones
void CS43_Enable_RightLeft(uint8_t side)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b082      	sub	sp, #8
 8001168:	af00      	add	r7, sp, #0
 800116a:	4603      	mov	r3, r0
 800116c:	71fb      	strb	r3, [r7, #7]
	switch (side)
 800116e:	79fb      	ldrb	r3, [r7, #7]
 8001170:	2b03      	cmp	r3, #3
 8001172:	d837      	bhi.n	80011e4 <CS43_Enable_RightLeft+0x80>
 8001174:	a201      	add	r2, pc, #4	; (adr r2, 800117c <CS43_Enable_RightLeft+0x18>)
 8001176:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800117a:	bf00      	nop
 800117c:	0800118d 	.word	0x0800118d
 8001180:	080011a3 	.word	0x080011a3
 8001184:	080011b9 	.word	0x080011b9
 8001188:	080011cf 	.word	0x080011cf
	{
		case 0:
			iData[1] =  (3 << 6);  // PDN_HPB[0:1]  = 10 (HP-B always onCon)
 800118c:	4b21      	ldr	r3, [pc, #132]	; (8001214 <CS43_Enable_RightLeft+0xb0>)
 800118e:	22c0      	movs	r2, #192	; 0xc0
 8001190:	705a      	strb	r2, [r3, #1]
			iData[1] |= (3 << 4);  // PDN_HPA[0:1]  = 10 (HP-A always on)
 8001192:	4b20      	ldr	r3, [pc, #128]	; (8001214 <CS43_Enable_RightLeft+0xb0>)
 8001194:	785b      	ldrb	r3, [r3, #1]
 8001196:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 800119a:	b2da      	uxtb	r2, r3
 800119c:	4b1d      	ldr	r3, [pc, #116]	; (8001214 <CS43_Enable_RightLeft+0xb0>)
 800119e:	705a      	strb	r2, [r3, #1]
			break;
 80011a0:	e021      	b.n	80011e6 <CS43_Enable_RightLeft+0x82>
		case 1:
			iData[1] =  (2 << 6);  // PDN_HPB[0:1]  = 10 (HP-B always onCon)
 80011a2:	4b1c      	ldr	r3, [pc, #112]	; (8001214 <CS43_Enable_RightLeft+0xb0>)
 80011a4:	2280      	movs	r2, #128	; 0x80
 80011a6:	705a      	strb	r2, [r3, #1]
			iData[1] |= (3 << 4);  // PDN_HPA[0:1]  = 10 (HP-A always on)
 80011a8:	4b1a      	ldr	r3, [pc, #104]	; (8001214 <CS43_Enable_RightLeft+0xb0>)
 80011aa:	785b      	ldrb	r3, [r3, #1]
 80011ac:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 80011b0:	b2da      	uxtb	r2, r3
 80011b2:	4b18      	ldr	r3, [pc, #96]	; (8001214 <CS43_Enable_RightLeft+0xb0>)
 80011b4:	705a      	strb	r2, [r3, #1]
			break;
 80011b6:	e016      	b.n	80011e6 <CS43_Enable_RightLeft+0x82>
		case 2:
			iData[1] =  (3 << 6);  // PDN_HPB[0:1]  = 10 (HP-B always onCon)
 80011b8:	4b16      	ldr	r3, [pc, #88]	; (8001214 <CS43_Enable_RightLeft+0xb0>)
 80011ba:	22c0      	movs	r2, #192	; 0xc0
 80011bc:	705a      	strb	r2, [r3, #1]
			iData[1] |= (2 << 4);  // PDN_HPA[0:1]  = 10 (HP-A always on)
 80011be:	4b15      	ldr	r3, [pc, #84]	; (8001214 <CS43_Enable_RightLeft+0xb0>)
 80011c0:	785b      	ldrb	r3, [r3, #1]
 80011c2:	f043 0320 	orr.w	r3, r3, #32
 80011c6:	b2da      	uxtb	r2, r3
 80011c8:	4b12      	ldr	r3, [pc, #72]	; (8001214 <CS43_Enable_RightLeft+0xb0>)
 80011ca:	705a      	strb	r2, [r3, #1]
			break;
 80011cc:	e00b      	b.n	80011e6 <CS43_Enable_RightLeft+0x82>
		case 3:
			iData[1] =  (2 << 6);  // PDN_HPB[0:1]  = 10 (HP-B always onCon)
 80011ce:	4b11      	ldr	r3, [pc, #68]	; (8001214 <CS43_Enable_RightLeft+0xb0>)
 80011d0:	2280      	movs	r2, #128	; 0x80
 80011d2:	705a      	strb	r2, [r3, #1]
			iData[1] |= (2 << 4);  // PDN_HPA[0:1]  = 10 (HP-A always on)
 80011d4:	4b0f      	ldr	r3, [pc, #60]	; (8001214 <CS43_Enable_RightLeft+0xb0>)
 80011d6:	785b      	ldrb	r3, [r3, #1]
 80011d8:	f043 0320 	orr.w	r3, r3, #32
 80011dc:	b2da      	uxtb	r2, r3
 80011de:	4b0d      	ldr	r3, [pc, #52]	; (8001214 <CS43_Enable_RightLeft+0xb0>)
 80011e0:	705a      	strb	r2, [r3, #1]
			break;
 80011e2:	e000      	b.n	80011e6 <CS43_Enable_RightLeft+0x82>
		default:
			break;
 80011e4:	bf00      	nop
	}
	iData[1] |= (3 << 2);  // PDN_SPKB[0:1] = 11 (Speaker B always off)
 80011e6:	4b0b      	ldr	r3, [pc, #44]	; (8001214 <CS43_Enable_RightLeft+0xb0>)
 80011e8:	785b      	ldrb	r3, [r3, #1]
 80011ea:	f043 030c 	orr.w	r3, r3, #12
 80011ee:	b2da      	uxtb	r2, r3
 80011f0:	4b08      	ldr	r3, [pc, #32]	; (8001214 <CS43_Enable_RightLeft+0xb0>)
 80011f2:	705a      	strb	r2, [r3, #1]
	iData[1] |= (3 << 0);  // PDN_SPKA[0:1] = 11 (Speaker A always off)
 80011f4:	4b07      	ldr	r3, [pc, #28]	; (8001214 <CS43_Enable_RightLeft+0xb0>)
 80011f6:	785b      	ldrb	r3, [r3, #1]
 80011f8:	f043 0303 	orr.w	r3, r3, #3
 80011fc:	b2da      	uxtb	r2, r3
 80011fe:	4b05      	ldr	r3, [pc, #20]	; (8001214 <CS43_Enable_RightLeft+0xb0>)
 8001200:	705a      	strb	r2, [r3, #1]
	write_register(POWER_CONTROL2,&iData[1]);
 8001202:	4905      	ldr	r1, [pc, #20]	; (8001218 <CS43_Enable_RightLeft+0xb4>)
 8001204:	2004      	movs	r0, #4
 8001206:	f7ff fe59 	bl	8000ebc <write_register>
}
 800120a:	bf00      	nop
 800120c:	3708      	adds	r7, #8
 800120e:	46bd      	mov	sp, r7
 8001210:	bd80      	pop	{r7, pc}
 8001212:	bf00      	nop
 8001214:	20000608 	.word	0x20000608
 8001218:	20000609 	.word	0x20000609

0800121c <CS43_SetVolume>:

// Function(3): Set Volume Level
void CS43_SetVolume(uint8_t volume)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b084      	sub	sp, #16
 8001220:	af00      	add	r7, sp, #0
 8001222:	4603      	mov	r3, r0
 8001224:	71fb      	strb	r3, [r7, #7]
	int8_t tempVol = volume - 50;
 8001226:	79fb      	ldrb	r3, [r7, #7]
 8001228:	3b32      	subs	r3, #50	; 0x32
 800122a:	b2db      	uxtb	r3, r3
 800122c:	73fb      	strb	r3, [r7, #15]
	tempVol = tempVol*(127/50);
 800122e:	7bfb      	ldrb	r3, [r7, #15]
 8001230:	005b      	lsls	r3, r3, #1
 8001232:	b2db      	uxtb	r3, r3
 8001234:	73fb      	strb	r3, [r7, #15]
	uint8_t myVolume =  (uint8_t )tempVol;
 8001236:	7bfb      	ldrb	r3, [r7, #15]
 8001238:	73bb      	strb	r3, [r7, #14]
	iData[1] = myVolume;
 800123a:	4a16      	ldr	r2, [pc, #88]	; (8001294 <CS43_SetVolume+0x78>)
 800123c:	7bbb      	ldrb	r3, [r7, #14]
 800123e:	7053      	strb	r3, [r2, #1]
	write_register(PASSTHROUGH_VOLUME_A,&iData[1]);
 8001240:	4915      	ldr	r1, [pc, #84]	; (8001298 <CS43_SetVolume+0x7c>)
 8001242:	2014      	movs	r0, #20
 8001244:	f7ff fe3a 	bl	8000ebc <write_register>
	write_register(PASSTHROUGH_VOLUME_B,&iData[1]);
 8001248:	4913      	ldr	r1, [pc, #76]	; (8001298 <CS43_SetVolume+0x7c>)
 800124a:	2015      	movs	r0, #21
 800124c:	f7ff fe36 	bl	8000ebc <write_register>
	
	iData[1] = VOLUME_CONVERT_D(volume);
 8001250:	79fb      	ldrb	r3, [r7, #7]
 8001252:	2b64      	cmp	r3, #100	; 0x64
 8001254:	d80e      	bhi.n	8001274 <CS43_SetVolume+0x58>
 8001256:	79fa      	ldrb	r2, [r7, #7]
 8001258:	4613      	mov	r3, r2
 800125a:	005b      	lsls	r3, r3, #1
 800125c:	4413      	add	r3, r2
 800125e:	011b      	lsls	r3, r3, #4
 8001260:	4a0e      	ldr	r2, [pc, #56]	; (800129c <CS43_SetVolume+0x80>)
 8001262:	fb82 1203 	smull	r1, r2, r2, r3
 8001266:	1152      	asrs	r2, r2, #5
 8001268:	17db      	asrs	r3, r3, #31
 800126a:	1ad3      	subs	r3, r2, r3
 800126c:	b2db      	uxtb	r3, r3
 800126e:	3b18      	subs	r3, #24
 8001270:	b2db      	uxtb	r3, r3
 8001272:	e000      	b.n	8001276 <CS43_SetVolume+0x5a>
 8001274:	2318      	movs	r3, #24
 8001276:	4a07      	ldr	r2, [pc, #28]	; (8001294 <CS43_SetVolume+0x78>)
 8001278:	7053      	strb	r3, [r2, #1]
	
	/* Set the Master volume */ 
	write_register(CS43L22_REG_MASTER_A_VOL,&iData[1]);
 800127a:	4907      	ldr	r1, [pc, #28]	; (8001298 <CS43_SetVolume+0x7c>)
 800127c:	2020      	movs	r0, #32
 800127e:	f7ff fe1d 	bl	8000ebc <write_register>
	write_register(CS43L22_REG_MASTER_B_VOL,&iData[1]);
 8001282:	4905      	ldr	r1, [pc, #20]	; (8001298 <CS43_SetVolume+0x7c>)
 8001284:	2021      	movs	r0, #33	; 0x21
 8001286:	f7ff fe19 	bl	8000ebc <write_register>
}
 800128a:	bf00      	nop
 800128c:	3710      	adds	r7, #16
 800128e:	46bd      	mov	sp, r7
 8001290:	bd80      	pop	{r7, pc}
 8001292:	bf00      	nop
 8001294:	20000608 	.word	0x20000608
 8001298:	20000609 	.word	0x20000609
 800129c:	51eb851f 	.word	0x51eb851f

080012a0 <CS43_Start>:

// Function(4): Start the Audio DAC
void CS43_Start(void)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	af00      	add	r7, sp, #0
	// Write 0x99 to register 0x00.
	iData[1] = 0x99;
 80012a4:	4b1d      	ldr	r3, [pc, #116]	; (800131c <CS43_Start+0x7c>)
 80012a6:	2299      	movs	r2, #153	; 0x99
 80012a8:	705a      	strb	r2, [r3, #1]
	write_register(CONFIG_00,&iData[1]);
 80012aa:	491d      	ldr	r1, [pc, #116]	; (8001320 <CS43_Start+0x80>)
 80012ac:	2000      	movs	r0, #0
 80012ae:	f7ff fe05 	bl	8000ebc <write_register>
	// Write 0x80 to register 0x47.
	iData[1] = 0x80;
 80012b2:	4b1a      	ldr	r3, [pc, #104]	; (800131c <CS43_Start+0x7c>)
 80012b4:	2280      	movs	r2, #128	; 0x80
 80012b6:	705a      	strb	r2, [r3, #1]
	write_register(CONFIG_47,&iData[1]);
 80012b8:	4919      	ldr	r1, [pc, #100]	; (8001320 <CS43_Start+0x80>)
 80012ba:	2047      	movs	r0, #71	; 0x47
 80012bc:	f7ff fdfe 	bl	8000ebc <write_register>
	// Write '1'b to bit 7 in register 0x32.
	read_register(CONFIG_32, &iData[1]);
 80012c0:	4917      	ldr	r1, [pc, #92]	; (8001320 <CS43_Start+0x80>)
 80012c2:	2032      	movs	r0, #50	; 0x32
 80012c4:	f7ff fe18 	bl	8000ef8 <read_register>
	iData[1] |= 0x80;
 80012c8:	4b14      	ldr	r3, [pc, #80]	; (800131c <CS43_Start+0x7c>)
 80012ca:	785b      	ldrb	r3, [r3, #1]
 80012cc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80012d0:	b2da      	uxtb	r2, r3
 80012d2:	4b12      	ldr	r3, [pc, #72]	; (800131c <CS43_Start+0x7c>)
 80012d4:	705a      	strb	r2, [r3, #1]
	write_register(CONFIG_32,&iData[1]);
 80012d6:	4912      	ldr	r1, [pc, #72]	; (8001320 <CS43_Start+0x80>)
 80012d8:	2032      	movs	r0, #50	; 0x32
 80012da:	f7ff fdef 	bl	8000ebc <write_register>
	// Write '0'b to bit 7 in register 0x32.
	read_register(CONFIG_32, &iData[1]);
 80012de:	4910      	ldr	r1, [pc, #64]	; (8001320 <CS43_Start+0x80>)
 80012e0:	2032      	movs	r0, #50	; 0x32
 80012e2:	f7ff fe09 	bl	8000ef8 <read_register>
	iData[1] &= ~(0x80);
 80012e6:	4b0d      	ldr	r3, [pc, #52]	; (800131c <CS43_Start+0x7c>)
 80012e8:	785b      	ldrb	r3, [r3, #1]
 80012ea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80012ee:	b2da      	uxtb	r2, r3
 80012f0:	4b0a      	ldr	r3, [pc, #40]	; (800131c <CS43_Start+0x7c>)
 80012f2:	705a      	strb	r2, [r3, #1]
	write_register(CONFIG_32,&iData[1]);
 80012f4:	490a      	ldr	r1, [pc, #40]	; (8001320 <CS43_Start+0x80>)
 80012f6:	2032      	movs	r0, #50	; 0x32
 80012f8:	f7ff fde0 	bl	8000ebc <write_register>
	// Write 0x00 to register 0x00.
	iData[1] = 0x00;
 80012fc:	4b07      	ldr	r3, [pc, #28]	; (800131c <CS43_Start+0x7c>)
 80012fe:	2200      	movs	r2, #0
 8001300:	705a      	strb	r2, [r3, #1]
	write_register(CONFIG_00,&iData[1]);
 8001302:	4907      	ldr	r1, [pc, #28]	; (8001320 <CS43_Start+0x80>)
 8001304:	2000      	movs	r0, #0
 8001306:	f7ff fdd9 	bl	8000ebc <write_register>
	//Set the "Power Ctl 1" register (0x02) to 0x9E
	iData[1] = 0x9E;
 800130a:	4b04      	ldr	r3, [pc, #16]	; (800131c <CS43_Start+0x7c>)
 800130c:	229e      	movs	r2, #158	; 0x9e
 800130e:	705a      	strb	r2, [r3, #1]
	write_register(POWER_CONTROL1,&iData[1]);
 8001310:	4903      	ldr	r1, [pc, #12]	; (8001320 <CS43_Start+0x80>)
 8001312:	2002      	movs	r0, #2
 8001314:	f7ff fdd2 	bl	8000ebc <write_register>
}
 8001318:	bf00      	nop
 800131a:	bd80      	pop	{r7, pc}
 800131c:	20000608 	.word	0x20000608
 8001320:	20000609 	.word	0x20000609

08001324 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	b082      	sub	sp, #8
 8001328:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800132a:	2300      	movs	r3, #0
 800132c:	607b      	str	r3, [r7, #4]
 800132e:	4b0c      	ldr	r3, [pc, #48]	; (8001360 <MX_DMA_Init+0x3c>)
 8001330:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001332:	4a0b      	ldr	r2, [pc, #44]	; (8001360 <MX_DMA_Init+0x3c>)
 8001334:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001338:	6313      	str	r3, [r2, #48]	; 0x30
 800133a:	4b09      	ldr	r3, [pc, #36]	; (8001360 <MX_DMA_Init+0x3c>)
 800133c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800133e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001342:	607b      	str	r3, [r7, #4]
 8001344:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8001346:	2200      	movs	r2, #0
 8001348:	2100      	movs	r1, #0
 800134a:	2010      	movs	r0, #16
 800134c:	f001 fb2a 	bl	80029a4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001350:	2010      	movs	r0, #16
 8001352:	f001 fb53 	bl	80029fc <HAL_NVIC_EnableIRQ>

}
 8001356:	bf00      	nop
 8001358:	3708      	adds	r7, #8
 800135a:	46bd      	mov	sp, r7
 800135c:	bd80      	pop	{r7, pc}
 800135e:	bf00      	nop
 8001360:	40023800 	.word	0x40023800

08001364 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b08c      	sub	sp, #48	; 0x30
 8001368:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800136a:	f107 031c 	add.w	r3, r7, #28
 800136e:	2200      	movs	r2, #0
 8001370:	601a      	str	r2, [r3, #0]
 8001372:	605a      	str	r2, [r3, #4]
 8001374:	609a      	str	r2, [r3, #8]
 8001376:	60da      	str	r2, [r3, #12]
 8001378:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800137a:	2300      	movs	r3, #0
 800137c:	61bb      	str	r3, [r7, #24]
 800137e:	4b5f      	ldr	r3, [pc, #380]	; (80014fc <MX_GPIO_Init+0x198>)
 8001380:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001382:	4a5e      	ldr	r2, [pc, #376]	; (80014fc <MX_GPIO_Init+0x198>)
 8001384:	f043 0310 	orr.w	r3, r3, #16
 8001388:	6313      	str	r3, [r2, #48]	; 0x30
 800138a:	4b5c      	ldr	r3, [pc, #368]	; (80014fc <MX_GPIO_Init+0x198>)
 800138c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800138e:	f003 0310 	and.w	r3, r3, #16
 8001392:	61bb      	str	r3, [r7, #24]
 8001394:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001396:	2300      	movs	r3, #0
 8001398:	617b      	str	r3, [r7, #20]
 800139a:	4b58      	ldr	r3, [pc, #352]	; (80014fc <MX_GPIO_Init+0x198>)
 800139c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800139e:	4a57      	ldr	r2, [pc, #348]	; (80014fc <MX_GPIO_Init+0x198>)
 80013a0:	f043 0304 	orr.w	r3, r3, #4
 80013a4:	6313      	str	r3, [r2, #48]	; 0x30
 80013a6:	4b55      	ldr	r3, [pc, #340]	; (80014fc <MX_GPIO_Init+0x198>)
 80013a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013aa:	f003 0304 	and.w	r3, r3, #4
 80013ae:	617b      	str	r3, [r7, #20]
 80013b0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80013b2:	2300      	movs	r3, #0
 80013b4:	613b      	str	r3, [r7, #16]
 80013b6:	4b51      	ldr	r3, [pc, #324]	; (80014fc <MX_GPIO_Init+0x198>)
 80013b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ba:	4a50      	ldr	r2, [pc, #320]	; (80014fc <MX_GPIO_Init+0x198>)
 80013bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80013c0:	6313      	str	r3, [r2, #48]	; 0x30
 80013c2:	4b4e      	ldr	r3, [pc, #312]	; (80014fc <MX_GPIO_Init+0x198>)
 80013c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80013ca:	613b      	str	r3, [r7, #16]
 80013cc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013ce:	2300      	movs	r3, #0
 80013d0:	60fb      	str	r3, [r7, #12]
 80013d2:	4b4a      	ldr	r3, [pc, #296]	; (80014fc <MX_GPIO_Init+0x198>)
 80013d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013d6:	4a49      	ldr	r2, [pc, #292]	; (80014fc <MX_GPIO_Init+0x198>)
 80013d8:	f043 0301 	orr.w	r3, r3, #1
 80013dc:	6313      	str	r3, [r2, #48]	; 0x30
 80013de:	4b47      	ldr	r3, [pc, #284]	; (80014fc <MX_GPIO_Init+0x198>)
 80013e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013e2:	f003 0301 	and.w	r3, r3, #1
 80013e6:	60fb      	str	r3, [r7, #12]
 80013e8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80013ea:	2300      	movs	r3, #0
 80013ec:	60bb      	str	r3, [r7, #8]
 80013ee:	4b43      	ldr	r3, [pc, #268]	; (80014fc <MX_GPIO_Init+0x198>)
 80013f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013f2:	4a42      	ldr	r2, [pc, #264]	; (80014fc <MX_GPIO_Init+0x198>)
 80013f4:	f043 0302 	orr.w	r3, r3, #2
 80013f8:	6313      	str	r3, [r2, #48]	; 0x30
 80013fa:	4b40      	ldr	r3, [pc, #256]	; (80014fc <MX_GPIO_Init+0x198>)
 80013fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013fe:	f003 0302 	and.w	r3, r3, #2
 8001402:	60bb      	str	r3, [r7, #8]
 8001404:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001406:	2300      	movs	r3, #0
 8001408:	607b      	str	r3, [r7, #4]
 800140a:	4b3c      	ldr	r3, [pc, #240]	; (80014fc <MX_GPIO_Init+0x198>)
 800140c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800140e:	4a3b      	ldr	r2, [pc, #236]	; (80014fc <MX_GPIO_Init+0x198>)
 8001410:	f043 0308 	orr.w	r3, r3, #8
 8001414:	6313      	str	r3, [r2, #48]	; 0x30
 8001416:	4b39      	ldr	r3, [pc, #228]	; (80014fc <MX_GPIO_Init+0x198>)
 8001418:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800141a:	f003 0308 	and.w	r3, r3, #8
 800141e:	607b      	str	r3, [r7, #4]
 8001420:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8001422:	2200      	movs	r2, #0
 8001424:	2108      	movs	r1, #8
 8001426:	4836      	ldr	r0, [pc, #216]	; (8001500 <MX_GPIO_Init+0x19c>)
 8001428:	f002 fac8 	bl	80039bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 800142c:	2201      	movs	r2, #1
 800142e:	2101      	movs	r1, #1
 8001430:	4834      	ldr	r0, [pc, #208]	; (8001504 <MX_GPIO_Init+0x1a0>)
 8001432:	f002 fac3 	bl	80039bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Audio_RST_GPIO_Port, Audio_RST_Pin, GPIO_PIN_RESET);
 8001436:	2200      	movs	r2, #0
 8001438:	2110      	movs	r1, #16
 800143a:	4833      	ldr	r0, [pc, #204]	; (8001508 <MX_GPIO_Init+0x1a4>)
 800143c:	f002 fabe 	bl	80039bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DATA_Ready_Pin;
 8001440:	2304      	movs	r3, #4
 8001442:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001444:	2300      	movs	r3, #0
 8001446:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001448:	2300      	movs	r3, #0
 800144a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DATA_Ready_GPIO_Port, &GPIO_InitStruct);
 800144c:	f107 031c 	add.w	r3, r7, #28
 8001450:	4619      	mov	r1, r3
 8001452:	482b      	ldr	r0, [pc, #172]	; (8001500 <MX_GPIO_Init+0x19c>)
 8001454:	f002 f80a 	bl	800346c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8001458:	2308      	movs	r3, #8
 800145a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800145c:	2301      	movs	r3, #1
 800145e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001460:	2300      	movs	r3, #0
 8001462:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001464:	2300      	movs	r3, #0
 8001466:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8001468:	f107 031c 	add.w	r3, r7, #28
 800146c:	4619      	mov	r1, r3
 800146e:	4824      	ldr	r0, [pc, #144]	; (8001500 <MX_GPIO_Init+0x19c>)
 8001470:	f001 fffc 	bl	800346c <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = INT1_Pin|INT2_Pin|MEMS_INT2_Pin;
 8001474:	2332      	movs	r3, #50	; 0x32
 8001476:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001478:	4b24      	ldr	r3, [pc, #144]	; (800150c <MX_GPIO_Init+0x1a8>)
 800147a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800147c:	2300      	movs	r3, #0
 800147e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001480:	f107 031c 	add.w	r3, r7, #28
 8001484:	4619      	mov	r1, r3
 8001486:	481e      	ldr	r0, [pc, #120]	; (8001500 <MX_GPIO_Init+0x19c>)
 8001488:	f001 fff0 	bl	800346c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 800148c:	2301      	movs	r3, #1
 800148e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001490:	2301      	movs	r3, #1
 8001492:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001494:	2300      	movs	r3, #0
 8001496:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001498:	2300      	movs	r3, #0
 800149a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800149c:	f107 031c 	add.w	r3, r7, #28
 80014a0:	4619      	mov	r1, r3
 80014a2:	4818      	ldr	r0, [pc, #96]	; (8001504 <MX_GPIO_Init+0x1a0>)
 80014a4:	f001 ffe2 	bl	800346c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80014a8:	2301      	movs	r3, #1
 80014aa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80014ac:	4b17      	ldr	r3, [pc, #92]	; (800150c <MX_GPIO_Init+0x1a8>)
 80014ae:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014b0:	2300      	movs	r3, #0
 80014b2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014b4:	f107 031c 	add.w	r3, r7, #28
 80014b8:	4619      	mov	r1, r3
 80014ba:	4815      	ldr	r0, [pc, #84]	; (8001510 <MX_GPIO_Init+0x1ac>)
 80014bc:	f001 ffd6 	bl	800346c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Audio_RST_Pin;
 80014c0:	2310      	movs	r3, #16
 80014c2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014c4:	2301      	movs	r3, #1
 80014c6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014c8:	2300      	movs	r3, #0
 80014ca:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014cc:	2300      	movs	r3, #0
 80014ce:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(Audio_RST_GPIO_Port, &GPIO_InitStruct);
 80014d0:	f107 031c 	add.w	r3, r7, #28
 80014d4:	4619      	mov	r1, r3
 80014d6:	480c      	ldr	r0, [pc, #48]	; (8001508 <MX_GPIO_Init+0x1a4>)
 80014d8:	f001 ffc8 	bl	800346c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80014dc:	2320      	movs	r3, #32
 80014de:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014e0:	2300      	movs	r3, #0
 80014e2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014e4:	2300      	movs	r3, #0
 80014e6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80014e8:	f107 031c 	add.w	r3, r7, #28
 80014ec:	4619      	mov	r1, r3
 80014ee:	4806      	ldr	r0, [pc, #24]	; (8001508 <MX_GPIO_Init+0x1a4>)
 80014f0:	f001 ffbc 	bl	800346c <HAL_GPIO_Init>

}
 80014f4:	bf00      	nop
 80014f6:	3730      	adds	r7, #48	; 0x30
 80014f8:	46bd      	mov	sp, r7
 80014fa:	bd80      	pop	{r7, pc}
 80014fc:	40023800 	.word	0x40023800
 8001500:	40021000 	.word	0x40021000
 8001504:	40020800 	.word	0x40020800
 8001508:	40020c00 	.word	0x40020c00
 800150c:	10120000 	.word	0x10120000
 8001510:	40020000 	.word	0x40020000

08001514 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8001518:	4b12      	ldr	r3, [pc, #72]	; (8001564 <MX_I2C1_Init+0x50>)
 800151a:	4a13      	ldr	r2, [pc, #76]	; (8001568 <MX_I2C1_Init+0x54>)
 800151c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800151e:	4b11      	ldr	r3, [pc, #68]	; (8001564 <MX_I2C1_Init+0x50>)
 8001520:	4a12      	ldr	r2, [pc, #72]	; (800156c <MX_I2C1_Init+0x58>)
 8001522:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001524:	4b0f      	ldr	r3, [pc, #60]	; (8001564 <MX_I2C1_Init+0x50>)
 8001526:	2200      	movs	r2, #0
 8001528:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800152a:	4b0e      	ldr	r3, [pc, #56]	; (8001564 <MX_I2C1_Init+0x50>)
 800152c:	2200      	movs	r2, #0
 800152e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001530:	4b0c      	ldr	r3, [pc, #48]	; (8001564 <MX_I2C1_Init+0x50>)
 8001532:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001536:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001538:	4b0a      	ldr	r3, [pc, #40]	; (8001564 <MX_I2C1_Init+0x50>)
 800153a:	2200      	movs	r2, #0
 800153c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800153e:	4b09      	ldr	r3, [pc, #36]	; (8001564 <MX_I2C1_Init+0x50>)
 8001540:	2200      	movs	r2, #0
 8001542:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001544:	4b07      	ldr	r3, [pc, #28]	; (8001564 <MX_I2C1_Init+0x50>)
 8001546:	2200      	movs	r2, #0
 8001548:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800154a:	4b06      	ldr	r3, [pc, #24]	; (8001564 <MX_I2C1_Init+0x50>)
 800154c:	2200      	movs	r2, #0
 800154e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001550:	4804      	ldr	r0, [pc, #16]	; (8001564 <MX_I2C1_Init+0x50>)
 8001552:	f002 fa65 	bl	8003a20 <HAL_I2C_Init>
 8001556:	4603      	mov	r3, r0
 8001558:	2b00      	cmp	r3, #0
 800155a:	d001      	beq.n	8001560 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800155c:	f000 fe26 	bl	80021ac <Error_Handler>
  }

}
 8001560:	bf00      	nop
 8001562:	bd80      	pop	{r7, pc}
 8001564:	2000067c 	.word	0x2000067c
 8001568:	40005400 	.word	0x40005400
 800156c:	000186a0 	.word	0x000186a0

08001570 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	b08a      	sub	sp, #40	; 0x28
 8001574:	af00      	add	r7, sp, #0
 8001576:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001578:	f107 0314 	add.w	r3, r7, #20
 800157c:	2200      	movs	r2, #0
 800157e:	601a      	str	r2, [r3, #0]
 8001580:	605a      	str	r2, [r3, #4]
 8001582:	609a      	str	r2, [r3, #8]
 8001584:	60da      	str	r2, [r3, #12]
 8001586:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	4a19      	ldr	r2, [pc, #100]	; (80015f4 <HAL_I2C_MspInit+0x84>)
 800158e:	4293      	cmp	r3, r2
 8001590:	d12c      	bne.n	80015ec <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001592:	2300      	movs	r3, #0
 8001594:	613b      	str	r3, [r7, #16]
 8001596:	4b18      	ldr	r3, [pc, #96]	; (80015f8 <HAL_I2C_MspInit+0x88>)
 8001598:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800159a:	4a17      	ldr	r2, [pc, #92]	; (80015f8 <HAL_I2C_MspInit+0x88>)
 800159c:	f043 0302 	orr.w	r3, r3, #2
 80015a0:	6313      	str	r3, [r2, #48]	; 0x30
 80015a2:	4b15      	ldr	r3, [pc, #84]	; (80015f8 <HAL_I2C_MspInit+0x88>)
 80015a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015a6:	f003 0302 	and.w	r3, r3, #2
 80015aa:	613b      	str	r3, [r7, #16]
 80015ac:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 80015ae:	f44f 7310 	mov.w	r3, #576	; 0x240
 80015b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80015b4:	2312      	movs	r3, #18
 80015b6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80015b8:	2301      	movs	r3, #1
 80015ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015bc:	2300      	movs	r3, #0
 80015be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80015c0:	2304      	movs	r3, #4
 80015c2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015c4:	f107 0314 	add.w	r3, r7, #20
 80015c8:	4619      	mov	r1, r3
 80015ca:	480c      	ldr	r0, [pc, #48]	; (80015fc <HAL_I2C_MspInit+0x8c>)
 80015cc:	f001 ff4e 	bl	800346c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80015d0:	2300      	movs	r3, #0
 80015d2:	60fb      	str	r3, [r7, #12]
 80015d4:	4b08      	ldr	r3, [pc, #32]	; (80015f8 <HAL_I2C_MspInit+0x88>)
 80015d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015d8:	4a07      	ldr	r2, [pc, #28]	; (80015f8 <HAL_I2C_MspInit+0x88>)
 80015da:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80015de:	6413      	str	r3, [r2, #64]	; 0x40
 80015e0:	4b05      	ldr	r3, [pc, #20]	; (80015f8 <HAL_I2C_MspInit+0x88>)
 80015e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015e4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80015e8:	60fb      	str	r3, [r7, #12]
 80015ea:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80015ec:	bf00      	nop
 80015ee:	3728      	adds	r7, #40	; 0x28
 80015f0:	46bd      	mov	sp, r7
 80015f2:	bd80      	pop	{r7, pc}
 80015f4:	40005400 	.word	0x40005400
 80015f8:	40023800 	.word	0x40023800
 80015fc:	40020400 	.word	0x40020400

08001600 <MX_I2S2_Init>:
I2S_HandleTypeDef hi2s3;
DMA_HandleTypeDef hdma_spi3_tx;

/* I2S2 init function */
void MX_I2S2_Init(void)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	af00      	add	r7, sp, #0

  hi2s2.Instance = SPI2;
 8001604:	4b12      	ldr	r3, [pc, #72]	; (8001650 <MX_I2S2_Init+0x50>)
 8001606:	4a13      	ldr	r2, [pc, #76]	; (8001654 <MX_I2S2_Init+0x54>)
 8001608:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_RX;
 800160a:	4b11      	ldr	r3, [pc, #68]	; (8001650 <MX_I2S2_Init+0x50>)
 800160c:	f44f 7240 	mov.w	r2, #768	; 0x300
 8001610:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 8001612:	4b0f      	ldr	r3, [pc, #60]	; (8001650 <MX_I2S2_Init+0x50>)
 8001614:	2200      	movs	r2, #0
 8001616:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_24B;
 8001618:	4b0d      	ldr	r3, [pc, #52]	; (8001650 <MX_I2S2_Init+0x50>)
 800161a:	2203      	movs	r2, #3
 800161c:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 800161e:	4b0c      	ldr	r3, [pc, #48]	; (8001650 <MX_I2S2_Init+0x50>)
 8001620:	2200      	movs	r2, #0
 8001622:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8001624:	4b0a      	ldr	r3, [pc, #40]	; (8001650 <MX_I2S2_Init+0x50>)
 8001626:	4a0c      	ldr	r2, [pc, #48]	; (8001658 <MX_I2S2_Init+0x58>)
 8001628:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 800162a:	4b09      	ldr	r3, [pc, #36]	; (8001650 <MX_I2S2_Init+0x50>)
 800162c:	2200      	movs	r2, #0
 800162e:	619a      	str	r2, [r3, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 8001630:	4b07      	ldr	r3, [pc, #28]	; (8001650 <MX_I2S2_Init+0x50>)
 8001632:	2200      	movs	r2, #0
 8001634:	61da      	str	r2, [r3, #28]
  hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_ENABLE;
 8001636:	4b06      	ldr	r3, [pc, #24]	; (8001650 <MX_I2S2_Init+0x50>)
 8001638:	2201      	movs	r2, #1
 800163a:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 800163c:	4804      	ldr	r0, [pc, #16]	; (8001650 <MX_I2S2_Init+0x50>)
 800163e:	f003 fa01 	bl	8004a44 <HAL_I2S_Init>
 8001642:	4603      	mov	r3, r0
 8001644:	2b00      	cmp	r3, #0
 8001646:	d001      	beq.n	800164c <MX_I2S2_Init+0x4c>
  {
    Error_Handler();
 8001648:	f000 fdb0 	bl	80021ac <Error_Handler>
  }

}
 800164c:	bf00      	nop
 800164e:	bd80      	pop	{r7, pc}
 8001650:	20000730 	.word	0x20000730
 8001654:	40003800 	.word	0x40003800
 8001658:	00017700 	.word	0x00017700

0800165c <MX_I2S3_Init>:
/* I2S3 init function */
void MX_I2S3_Init(void)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	af00      	add	r7, sp, #0

  hi2s3.Instance = SPI3;
 8001660:	4b13      	ldr	r3, [pc, #76]	; (80016b0 <MX_I2S3_Init+0x54>)
 8001662:	4a14      	ldr	r2, [pc, #80]	; (80016b4 <MX_I2S3_Init+0x58>)
 8001664:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8001666:	4b12      	ldr	r3, [pc, #72]	; (80016b0 <MX_I2S3_Init+0x54>)
 8001668:	f44f 7200 	mov.w	r2, #512	; 0x200
 800166c:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 800166e:	4b10      	ldr	r3, [pc, #64]	; (80016b0 <MX_I2S3_Init+0x54>)
 8001670:	2200      	movs	r2, #0
 8001672:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_24B;
 8001674:	4b0e      	ldr	r3, [pc, #56]	; (80016b0 <MX_I2S3_Init+0x54>)
 8001676:	2203      	movs	r2, #3
 8001678:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 800167a:	4b0d      	ldr	r3, [pc, #52]	; (80016b0 <MX_I2S3_Init+0x54>)
 800167c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001680:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_48K;
 8001682:	4b0b      	ldr	r3, [pc, #44]	; (80016b0 <MX_I2S3_Init+0x54>)
 8001684:	f64b 3280 	movw	r2, #48000	; 0xbb80
 8001688:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 800168a:	4b09      	ldr	r3, [pc, #36]	; (80016b0 <MX_I2S3_Init+0x54>)
 800168c:	2200      	movs	r2, #0
 800168e:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8001690:	4b07      	ldr	r3, [pc, #28]	; (80016b0 <MX_I2S3_Init+0x54>)
 8001692:	2200      	movs	r2, #0
 8001694:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8001696:	4b06      	ldr	r3, [pc, #24]	; (80016b0 <MX_I2S3_Init+0x54>)
 8001698:	2200      	movs	r2, #0
 800169a:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 800169c:	4804      	ldr	r0, [pc, #16]	; (80016b0 <MX_I2S3_Init+0x54>)
 800169e:	f003 f9d1 	bl	8004a44 <HAL_I2S_Init>
 80016a2:	4603      	mov	r3, r0
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d001      	beq.n	80016ac <MX_I2S3_Init+0x50>
  {
    Error_Handler();
 80016a8:	f000 fd80 	bl	80021ac <Error_Handler>
  }

}
 80016ac:	bf00      	nop
 80016ae:	bd80      	pop	{r7, pc}
 80016b0:	20000778 	.word	0x20000778
 80016b4:	40003c00 	.word	0x40003c00

080016b8 <HAL_I2S_MspInit>:

void HAL_I2S_MspInit(I2S_HandleTypeDef* i2sHandle)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b08e      	sub	sp, #56	; 0x38
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016c4:	2200      	movs	r2, #0
 80016c6:	601a      	str	r2, [r3, #0]
 80016c8:	605a      	str	r2, [r3, #4]
 80016ca:	609a      	str	r2, [r3, #8]
 80016cc:	60da      	str	r2, [r3, #12]
 80016ce:	611a      	str	r2, [r3, #16]
  if(i2sHandle->Instance==SPI2)
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	4a79      	ldr	r2, [pc, #484]	; (80018bc <HAL_I2S_MspInit+0x204>)
 80016d6:	4293      	cmp	r3, r2
 80016d8:	d163      	bne.n	80017a2 <HAL_I2S_MspInit+0xea>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* I2S2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80016da:	2300      	movs	r3, #0
 80016dc:	623b      	str	r3, [r7, #32]
 80016de:	4b78      	ldr	r3, [pc, #480]	; (80018c0 <HAL_I2S_MspInit+0x208>)
 80016e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016e2:	4a77      	ldr	r2, [pc, #476]	; (80018c0 <HAL_I2S_MspInit+0x208>)
 80016e4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80016e8:	6413      	str	r3, [r2, #64]	; 0x40
 80016ea:	4b75      	ldr	r3, [pc, #468]	; (80018c0 <HAL_I2S_MspInit+0x208>)
 80016ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80016f2:	623b      	str	r3, [r7, #32]
 80016f4:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80016f6:	2300      	movs	r3, #0
 80016f8:	61fb      	str	r3, [r7, #28]
 80016fa:	4b71      	ldr	r3, [pc, #452]	; (80018c0 <HAL_I2S_MspInit+0x208>)
 80016fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016fe:	4a70      	ldr	r2, [pc, #448]	; (80018c0 <HAL_I2S_MspInit+0x208>)
 8001700:	f043 0304 	orr.w	r3, r3, #4
 8001704:	6313      	str	r3, [r2, #48]	; 0x30
 8001706:	4b6e      	ldr	r3, [pc, #440]	; (80018c0 <HAL_I2S_MspInit+0x208>)
 8001708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800170a:	f003 0304 	and.w	r3, r3, #4
 800170e:	61fb      	str	r3, [r7, #28]
 8001710:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001712:	2300      	movs	r3, #0
 8001714:	61bb      	str	r3, [r7, #24]
 8001716:	4b6a      	ldr	r3, [pc, #424]	; (80018c0 <HAL_I2S_MspInit+0x208>)
 8001718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800171a:	4a69      	ldr	r2, [pc, #420]	; (80018c0 <HAL_I2S_MspInit+0x208>)
 800171c:	f043 0302 	orr.w	r3, r3, #2
 8001720:	6313      	str	r3, [r2, #48]	; 0x30
 8001722:	4b67      	ldr	r3, [pc, #412]	; (80018c0 <HAL_I2S_MspInit+0x208>)
 8001724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001726:	f003 0302 	and.w	r3, r3, #2
 800172a:	61bb      	str	r3, [r7, #24]
 800172c:	69bb      	ldr	r3, [r7, #24]
    PC2     ------> I2S2_ext_SD
    PC3     ------> I2S2_SD
    PB10     ------> I2S2_CK
    PB12     ------> I2S2_WS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800172e:	2304      	movs	r3, #4
 8001730:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001732:	2302      	movs	r3, #2
 8001734:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001736:	2300      	movs	r3, #0
 8001738:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800173a:	2300      	movs	r3, #0
 800173c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_I2S2ext;
 800173e:	2306      	movs	r3, #6
 8001740:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001742:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001746:	4619      	mov	r1, r3
 8001748:	485e      	ldr	r0, [pc, #376]	; (80018c4 <HAL_I2S_MspInit+0x20c>)
 800174a:	f001 fe8f 	bl	800346c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = PDM_OUT_Pin;
 800174e:	2308      	movs	r3, #8
 8001750:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001752:	2302      	movs	r3, #2
 8001754:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001756:	2300      	movs	r3, #0
 8001758:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800175a:	2300      	movs	r3, #0
 800175c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800175e:	2305      	movs	r3, #5
 8001760:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8001762:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001766:	4619      	mov	r1, r3
 8001768:	4856      	ldr	r0, [pc, #344]	; (80018c4 <HAL_I2S_MspInit+0x20c>)
 800176a:	f001 fe7f 	bl	800346c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CLK_IN_Pin|GPIO_PIN_12;
 800176e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001772:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001774:	2302      	movs	r3, #2
 8001776:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001778:	2300      	movs	r3, #0
 800177a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800177c:	2300      	movs	r3, #0
 800177e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001780:	2305      	movs	r3, #5
 8001782:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001784:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001788:	4619      	mov	r1, r3
 800178a:	484f      	ldr	r0, [pc, #316]	; (80018c8 <HAL_I2S_MspInit+0x210>)
 800178c:	f001 fe6e 	bl	800346c <HAL_GPIO_Init>

    /* I2S2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 8001790:	2200      	movs	r2, #0
 8001792:	2100      	movs	r1, #0
 8001794:	2024      	movs	r0, #36	; 0x24
 8001796:	f001 f905 	bl	80029a4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 800179a:	2024      	movs	r0, #36	; 0x24
 800179c:	f001 f92e 	bl	80029fc <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 80017a0:	e088      	b.n	80018b4 <HAL_I2S_MspInit+0x1fc>
  else if(i2sHandle->Instance==SPI3)
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	4a49      	ldr	r2, [pc, #292]	; (80018cc <HAL_I2S_MspInit+0x214>)
 80017a8:	4293      	cmp	r3, r2
 80017aa:	f040 8083 	bne.w	80018b4 <HAL_I2S_MspInit+0x1fc>
    __HAL_RCC_SPI3_CLK_ENABLE();
 80017ae:	2300      	movs	r3, #0
 80017b0:	617b      	str	r3, [r7, #20]
 80017b2:	4b43      	ldr	r3, [pc, #268]	; (80018c0 <HAL_I2S_MspInit+0x208>)
 80017b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017b6:	4a42      	ldr	r2, [pc, #264]	; (80018c0 <HAL_I2S_MspInit+0x208>)
 80017b8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80017bc:	6413      	str	r3, [r2, #64]	; 0x40
 80017be:	4b40      	ldr	r3, [pc, #256]	; (80018c0 <HAL_I2S_MspInit+0x208>)
 80017c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017c2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80017c6:	617b      	str	r3, [r7, #20]
 80017c8:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017ca:	2300      	movs	r3, #0
 80017cc:	613b      	str	r3, [r7, #16]
 80017ce:	4b3c      	ldr	r3, [pc, #240]	; (80018c0 <HAL_I2S_MspInit+0x208>)
 80017d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017d2:	4a3b      	ldr	r2, [pc, #236]	; (80018c0 <HAL_I2S_MspInit+0x208>)
 80017d4:	f043 0301 	orr.w	r3, r3, #1
 80017d8:	6313      	str	r3, [r2, #48]	; 0x30
 80017da:	4b39      	ldr	r3, [pc, #228]	; (80018c0 <HAL_I2S_MspInit+0x208>)
 80017dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017de:	f003 0301 	and.w	r3, r3, #1
 80017e2:	613b      	str	r3, [r7, #16]
 80017e4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80017e6:	2300      	movs	r3, #0
 80017e8:	60fb      	str	r3, [r7, #12]
 80017ea:	4b35      	ldr	r3, [pc, #212]	; (80018c0 <HAL_I2S_MspInit+0x208>)
 80017ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ee:	4a34      	ldr	r2, [pc, #208]	; (80018c0 <HAL_I2S_MspInit+0x208>)
 80017f0:	f043 0304 	orr.w	r3, r3, #4
 80017f4:	6313      	str	r3, [r2, #48]	; 0x30
 80017f6:	4b32      	ldr	r3, [pc, #200]	; (80018c0 <HAL_I2S_MspInit+0x208>)
 80017f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017fa:	f003 0304 	and.w	r3, r3, #4
 80017fe:	60fb      	str	r3, [r7, #12]
 8001800:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8001802:	2310      	movs	r3, #16
 8001804:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001806:	2302      	movs	r3, #2
 8001808:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800180a:	2300      	movs	r3, #0
 800180c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800180e:	2300      	movs	r3, #0
 8001810:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001812:	2306      	movs	r3, #6
 8001814:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8001816:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800181a:	4619      	mov	r1, r3
 800181c:	482c      	ldr	r0, [pc, #176]	; (80018d0 <HAL_I2S_MspInit+0x218>)
 800181e:	f001 fe25 	bl	800346c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8001822:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8001826:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001828:	2302      	movs	r3, #2
 800182a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800182c:	2300      	movs	r3, #0
 800182e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001830:	2300      	movs	r3, #0
 8001832:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001834:	2306      	movs	r3, #6
 8001836:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001838:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800183c:	4619      	mov	r1, r3
 800183e:	4821      	ldr	r0, [pc, #132]	; (80018c4 <HAL_I2S_MspInit+0x20c>)
 8001840:	f001 fe14 	bl	800346c <HAL_GPIO_Init>
    hdma_spi3_tx.Instance = DMA1_Stream5;
 8001844:	4b23      	ldr	r3, [pc, #140]	; (80018d4 <HAL_I2S_MspInit+0x21c>)
 8001846:	4a24      	ldr	r2, [pc, #144]	; (80018d8 <HAL_I2S_MspInit+0x220>)
 8001848:	601a      	str	r2, [r3, #0]
    hdma_spi3_tx.Init.Channel = DMA_CHANNEL_0;
 800184a:	4b22      	ldr	r3, [pc, #136]	; (80018d4 <HAL_I2S_MspInit+0x21c>)
 800184c:	2200      	movs	r2, #0
 800184e:	605a      	str	r2, [r3, #4]
    hdma_spi3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001850:	4b20      	ldr	r3, [pc, #128]	; (80018d4 <HAL_I2S_MspInit+0x21c>)
 8001852:	2240      	movs	r2, #64	; 0x40
 8001854:	609a      	str	r2, [r3, #8]
    hdma_spi3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001856:	4b1f      	ldr	r3, [pc, #124]	; (80018d4 <HAL_I2S_MspInit+0x21c>)
 8001858:	2200      	movs	r2, #0
 800185a:	60da      	str	r2, [r3, #12]
    hdma_spi3_tx.Init.MemInc = DMA_MINC_ENABLE;
 800185c:	4b1d      	ldr	r3, [pc, #116]	; (80018d4 <HAL_I2S_MspInit+0x21c>)
 800185e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001862:	611a      	str	r2, [r3, #16]
    hdma_spi3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001864:	4b1b      	ldr	r3, [pc, #108]	; (80018d4 <HAL_I2S_MspInit+0x21c>)
 8001866:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800186a:	615a      	str	r2, [r3, #20]
    hdma_spi3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800186c:	4b19      	ldr	r3, [pc, #100]	; (80018d4 <HAL_I2S_MspInit+0x21c>)
 800186e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001872:	619a      	str	r2, [r3, #24]
    hdma_spi3_tx.Init.Mode = DMA_CIRCULAR;
 8001874:	4b17      	ldr	r3, [pc, #92]	; (80018d4 <HAL_I2S_MspInit+0x21c>)
 8001876:	f44f 7280 	mov.w	r2, #256	; 0x100
 800187a:	61da      	str	r2, [r3, #28]
    hdma_spi3_tx.Init.Priority = DMA_PRIORITY_LOW;
 800187c:	4b15      	ldr	r3, [pc, #84]	; (80018d4 <HAL_I2S_MspInit+0x21c>)
 800187e:	2200      	movs	r2, #0
 8001880:	621a      	str	r2, [r3, #32]
    hdma_spi3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001882:	4b14      	ldr	r3, [pc, #80]	; (80018d4 <HAL_I2S_MspInit+0x21c>)
 8001884:	2200      	movs	r2, #0
 8001886:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi3_tx) != HAL_OK)
 8001888:	4812      	ldr	r0, [pc, #72]	; (80018d4 <HAL_I2S_MspInit+0x21c>)
 800188a:	f001 f905 	bl	8002a98 <HAL_DMA_Init>
 800188e:	4603      	mov	r3, r0
 8001890:	2b00      	cmp	r3, #0
 8001892:	d001      	beq.n	8001898 <HAL_I2S_MspInit+0x1e0>
      Error_Handler();
 8001894:	f000 fc8a 	bl	80021ac <Error_Handler>
    __HAL_LINKDMA(i2sHandle,hdmatx,hdma_spi3_tx);
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	4a0e      	ldr	r2, [pc, #56]	; (80018d4 <HAL_I2S_MspInit+0x21c>)
 800189c:	639a      	str	r2, [r3, #56]	; 0x38
 800189e:	4a0d      	ldr	r2, [pc, #52]	; (80018d4 <HAL_I2S_MspInit+0x21c>)
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(SPI3_IRQn, 0, 0);
 80018a4:	2200      	movs	r2, #0
 80018a6:	2100      	movs	r1, #0
 80018a8:	2033      	movs	r0, #51	; 0x33
 80018aa:	f001 f87b 	bl	80029a4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
 80018ae:	2033      	movs	r0, #51	; 0x33
 80018b0:	f001 f8a4 	bl	80029fc <HAL_NVIC_EnableIRQ>
}
 80018b4:	bf00      	nop
 80018b6:	3738      	adds	r7, #56	; 0x38
 80018b8:	46bd      	mov	sp, r7
 80018ba:	bd80      	pop	{r7, pc}
 80018bc:	40003800 	.word	0x40003800
 80018c0:	40023800 	.word	0x40023800
 80018c4:	40020800 	.word	0x40020800
 80018c8:	40020400 	.word	0x40020400
 80018cc:	40003c00 	.word	0x40003c00
 80018d0:	40020000 	.word	0x40020000
 80018d4:	200006d0 	.word	0x200006d0
 80018d8:	40026088 	.word	0x40026088

080018dc <FFT>:

#define  NUMBER_IS_2_POW_K(x)   ((!((x)&((x)-1)))&&((x)>1))  // x is pow(2, k), k=1,2, ...
#define  FT_DIRECT        -1    // Direct transform.
#define  FT_INVERSE        1    // Inverse transform.

bool FFT(float *Rdat, float *Idat, int N, int LogN, int Ft_Flag) {
 80018dc:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
 80018e0:	b08f      	sub	sp, #60	; 0x3c
 80018e2:	af00      	add	r7, sp, #0
 80018e4:	60f8      	str	r0, [r7, #12]
 80018e6:	60b9      	str	r1, [r7, #8]
 80018e8:	607a      	str	r2, [r7, #4]
 80018ea:	603b      	str	r3, [r7, #0]
    // parameters error check:
    if ((Rdat == NULL) || (Idat == NULL)) return false;
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d002      	beq.n	80018f8 <FFT+0x1c>
 80018f2:	68bb      	ldr	r3, [r7, #8]
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d101      	bne.n	80018fc <FFT+0x20>
 80018f8:	2300      	movs	r3, #0
 80018fa:	e172      	b.n	8001be2 <FFT+0x306>
    if ((N > 16384) || (N < 1)) return false;
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001902:	dc02      	bgt.n	800190a <FFT+0x2e>
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	2b00      	cmp	r3, #0
 8001908:	dc01      	bgt.n	800190e <FFT+0x32>
 800190a:	2300      	movs	r3, #0
 800190c:	e169      	b.n	8001be2 <FFT+0x306>
    if (!NUMBER_IS_2_POW_K(N)) return false;
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	1e5a      	subs	r2, r3, #1
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	4013      	ands	r3, r2
 8001916:	2b00      	cmp	r3, #0
 8001918:	d102      	bne.n	8001920 <FFT+0x44>
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	2b01      	cmp	r3, #1
 800191e:	dc01      	bgt.n	8001924 <FFT+0x48>
 8001920:	2300      	movs	r3, #0
 8001922:	e15e      	b.n	8001be2 <FFT+0x306>
    if ((LogN < 2) || (LogN > 14)) return false;
 8001924:	683b      	ldr	r3, [r7, #0]
 8001926:	2b01      	cmp	r3, #1
 8001928:	dd02      	ble.n	8001930 <FFT+0x54>
 800192a:	683b      	ldr	r3, [r7, #0]
 800192c:	2b0e      	cmp	r3, #14
 800192e:	dd01      	ble.n	8001934 <FFT+0x58>
 8001930:	2300      	movs	r3, #0
 8001932:	e156      	b.n	8001be2 <FFT+0x306>
    if ((Ft_Flag != FT_DIRECT) && (Ft_Flag != FT_INVERSE)) return false;
 8001934:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001936:	f1b3 3fff 	cmp.w	r3, #4294967295
 800193a:	d004      	beq.n	8001946 <FFT+0x6a>
 800193c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800193e:	2b01      	cmp	r3, #1
 8001940:	d001      	beq.n	8001946 <FFT+0x6a>
 8001942:	2300      	movs	r3, #0
 8001944:	e14d      	b.n	8001be2 <FFT+0x306>
             -0.0490676743274180F, -0.0245412285229122F, -0.0122715382857199F,
             -0.0061358846491544F, -0.0030679567629659F, -0.0015339801862847F,
             -0.0007669903187427F, -0.0003834951875714F
            };

    nn = N >> 1;
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	ea4f 0a63 	mov.w	sl, r3, asr #1
    ie = N;
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	4619      	mov	r1, r3
    for (n = 1; n <= LogN; n++) {
 8001950:	f04f 0801 	mov.w	r8, #1
 8001954:	e0ca      	b.n	8001aec <FFT+0x210>
        rw = Rcoef[LogN - n];
 8001956:	683b      	ldr	r3, [r7, #0]
 8001958:	eba3 0308 	sub.w	r3, r3, r8
 800195c:	4aa4      	ldr	r2, [pc, #656]	; (8001bf0 <FFT+0x314>)
 800195e:	009b      	lsls	r3, r3, #2
 8001960:	4413      	add	r3, r2
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	62bb      	str	r3, [r7, #40]	; 0x28
        iw = Icoef[LogN - n];
 8001966:	683b      	ldr	r3, [r7, #0]
 8001968:	eba3 0308 	sub.w	r3, r3, r8
 800196c:	4aa1      	ldr	r2, [pc, #644]	; (8001bf4 <FFT+0x318>)
 800196e:	009b      	lsls	r3, r3, #2
 8001970:	4413      	add	r3, r2
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (Ft_Flag == FT_INVERSE) iw = -iw;
 8001976:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001978:	2b01      	cmp	r3, #1
 800197a:	d105      	bne.n	8001988 <FFT+0xac>
 800197c:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001980:	eef1 7a67 	vneg.f32	s15, s15
 8001984:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
        in = ie >> 1;
 8001988:	460b      	mov	r3, r1
 800198a:	105e      	asrs	r6, r3, #1
        ru = 1.0F;
 800198c:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001990:	637b      	str	r3, [r7, #52]	; 0x34
        iu = 0.0F;
 8001992:	f04f 0300 	mov.w	r3, #0
 8001996:	633b      	str	r3, [r7, #48]	; 0x30
        for (j = 0; j < in; j++) {
 8001998:	2500      	movs	r5, #0
 800199a:	e09f      	b.n	8001adc <FFT+0x200>
            for (i = j; i < N; i += ie) {
 800199c:	462c      	mov	r4, r5
 800199e:	e077      	b.n	8001a90 <FFT+0x1b4>
                io = i + in;
 80019a0:	eb04 0906 	add.w	r9, r4, r6
                rtp = Rdat[i] + Rdat[io];
 80019a4:	4623      	mov	r3, r4
 80019a6:	009b      	lsls	r3, r3, #2
 80019a8:	68fa      	ldr	r2, [r7, #12]
 80019aa:	4413      	add	r3, r2
 80019ac:	ed93 7a00 	vldr	s14, [r3]
 80019b0:	464b      	mov	r3, r9
 80019b2:	009b      	lsls	r3, r3, #2
 80019b4:	68fa      	ldr	r2, [r7, #12]
 80019b6:	4413      	add	r3, r2
 80019b8:	edd3 7a00 	vldr	s15, [r3]
 80019bc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80019c0:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                itp = Idat[i] + Idat[io];
 80019c4:	4623      	mov	r3, r4
 80019c6:	009b      	lsls	r3, r3, #2
 80019c8:	68ba      	ldr	r2, [r7, #8]
 80019ca:	4413      	add	r3, r2
 80019cc:	ed93 7a00 	vldr	s14, [r3]
 80019d0:	464b      	mov	r3, r9
 80019d2:	009b      	lsls	r3, r3, #2
 80019d4:	68ba      	ldr	r2, [r7, #8]
 80019d6:	4413      	add	r3, r2
 80019d8:	edd3 7a00 	vldr	s15, [r3]
 80019dc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80019e0:	edc7 7a08 	vstr	s15, [r7, #32]
                rtq = Rdat[i] - Rdat[io];
 80019e4:	4623      	mov	r3, r4
 80019e6:	009b      	lsls	r3, r3, #2
 80019e8:	68fa      	ldr	r2, [r7, #12]
 80019ea:	4413      	add	r3, r2
 80019ec:	ed93 7a00 	vldr	s14, [r3]
 80019f0:	464b      	mov	r3, r9
 80019f2:	009b      	lsls	r3, r3, #2
 80019f4:	68fa      	ldr	r2, [r7, #12]
 80019f6:	4413      	add	r3, r2
 80019f8:	edd3 7a00 	vldr	s15, [r3]
 80019fc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001a00:	edc7 7a06 	vstr	s15, [r7, #24]
                itq = Idat[i] - Idat[io];
 8001a04:	4623      	mov	r3, r4
 8001a06:	009b      	lsls	r3, r3, #2
 8001a08:	68ba      	ldr	r2, [r7, #8]
 8001a0a:	4413      	add	r3, r2
 8001a0c:	ed93 7a00 	vldr	s14, [r3]
 8001a10:	464b      	mov	r3, r9
 8001a12:	009b      	lsls	r3, r3, #2
 8001a14:	68ba      	ldr	r2, [r7, #8]
 8001a16:	4413      	add	r3, r2
 8001a18:	edd3 7a00 	vldr	s15, [r3]
 8001a1c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001a20:	edc7 7a05 	vstr	s15, [r7, #20]
                Rdat[io] = rtq * ru - itq * iu;
 8001a24:	ed97 7a06 	vldr	s14, [r7, #24]
 8001a28:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8001a2c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001a30:	edd7 6a05 	vldr	s13, [r7, #20]
 8001a34:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8001a38:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001a3c:	464b      	mov	r3, r9
 8001a3e:	009b      	lsls	r3, r3, #2
 8001a40:	68fa      	ldr	r2, [r7, #12]
 8001a42:	4413      	add	r3, r2
 8001a44:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001a48:	edc3 7a00 	vstr	s15, [r3]
                Idat[io] = itq * ru + rtq * iu;
 8001a4c:	ed97 7a05 	vldr	s14, [r7, #20]
 8001a50:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8001a54:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001a58:	edd7 6a06 	vldr	s13, [r7, #24]
 8001a5c:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8001a60:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001a64:	464b      	mov	r3, r9
 8001a66:	009b      	lsls	r3, r3, #2
 8001a68:	68ba      	ldr	r2, [r7, #8]
 8001a6a:	4413      	add	r3, r2
 8001a6c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a70:	edc3 7a00 	vstr	s15, [r3]
                Rdat[i] = rtp;
 8001a74:	4623      	mov	r3, r4
 8001a76:	009b      	lsls	r3, r3, #2
 8001a78:	68fa      	ldr	r2, [r7, #12]
 8001a7a:	4413      	add	r3, r2
 8001a7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a7e:	601a      	str	r2, [r3, #0]
                Idat[i] = itp;
 8001a80:	4623      	mov	r3, r4
 8001a82:	009b      	lsls	r3, r3, #2
 8001a84:	68ba      	ldr	r2, [r7, #8]
 8001a86:	4413      	add	r3, r2
 8001a88:	6a3a      	ldr	r2, [r7, #32]
 8001a8a:	601a      	str	r2, [r3, #0]
            for (i = j; i < N; i += ie) {
 8001a8c:	460b      	mov	r3, r1
 8001a8e:	441c      	add	r4, r3
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	429c      	cmp	r4, r3
 8001a94:	db84      	blt.n	80019a0 <FFT+0xc4>
            }

            sr = ru;
 8001a96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a98:	61fb      	str	r3, [r7, #28]
            ru = ru * rw - iu * iw;
 8001a9a:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8001a9e:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8001aa2:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001aa6:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 8001aaa:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001aae:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001ab2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001ab6:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
            iu = iu * rw + sr * iw;
 8001aba:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8001abe:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8001ac2:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001ac6:	edd7 6a07 	vldr	s13, [r7, #28]
 8001aca:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001ace:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001ad2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ad6:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
        for (j = 0; j < in; j++) {
 8001ada:	3501      	adds	r5, #1
 8001adc:	42b5      	cmp	r5, r6
 8001ade:	f6ff af5d 	blt.w	800199c <FFT+0xc0>
        }

        ie >>= 1;
 8001ae2:	460b      	mov	r3, r1
 8001ae4:	105b      	asrs	r3, r3, #1
 8001ae6:	4619      	mov	r1, r3
    for (n = 1; n <= LogN; n++) {
 8001ae8:	f108 0801 	add.w	r8, r8, #1
 8001aec:	683b      	ldr	r3, [r7, #0]
 8001aee:	4598      	cmp	r8, r3
 8001af0:	f77f af31 	ble.w	8001956 <FFT+0x7a>
    }

    for (j = i = 1; i < N; i++) {
 8001af4:	2401      	movs	r4, #1
 8001af6:	4625      	mov	r5, r4
 8001af8:	e038      	b.n	8001b6c <FFT+0x290>
        if (i < j) {
 8001afa:	42ac      	cmp	r4, r5
 8001afc:	da2e      	bge.n	8001b5c <FFT+0x280>
            io = i - 1;
 8001afe:	f104 39ff 	add.w	r9, r4, #4294967295
            in = j - 1;
 8001b02:	1e6e      	subs	r6, r5, #1
            rtp = Rdat[in];
 8001b04:	4633      	mov	r3, r6
 8001b06:	009b      	lsls	r3, r3, #2
 8001b08:	68fa      	ldr	r2, [r7, #12]
 8001b0a:	4413      	add	r3, r2
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	627b      	str	r3, [r7, #36]	; 0x24
            itp = Idat[in];
 8001b10:	4633      	mov	r3, r6
 8001b12:	009b      	lsls	r3, r3, #2
 8001b14:	68ba      	ldr	r2, [r7, #8]
 8001b16:	4413      	add	r3, r2
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	623b      	str	r3, [r7, #32]
            Rdat[in] = Rdat[io];
 8001b1c:	464b      	mov	r3, r9
 8001b1e:	009b      	lsls	r3, r3, #2
 8001b20:	68fa      	ldr	r2, [r7, #12]
 8001b22:	441a      	add	r2, r3
 8001b24:	4633      	mov	r3, r6
 8001b26:	009b      	lsls	r3, r3, #2
 8001b28:	68f9      	ldr	r1, [r7, #12]
 8001b2a:	440b      	add	r3, r1
 8001b2c:	6812      	ldr	r2, [r2, #0]
 8001b2e:	601a      	str	r2, [r3, #0]
            Idat[in] = Idat[io];
 8001b30:	464b      	mov	r3, r9
 8001b32:	009b      	lsls	r3, r3, #2
 8001b34:	68ba      	ldr	r2, [r7, #8]
 8001b36:	441a      	add	r2, r3
 8001b38:	4633      	mov	r3, r6
 8001b3a:	009b      	lsls	r3, r3, #2
 8001b3c:	68b9      	ldr	r1, [r7, #8]
 8001b3e:	440b      	add	r3, r1
 8001b40:	6812      	ldr	r2, [r2, #0]
 8001b42:	601a      	str	r2, [r3, #0]
            Rdat[io] = rtp;
 8001b44:	464b      	mov	r3, r9
 8001b46:	009b      	lsls	r3, r3, #2
 8001b48:	68fa      	ldr	r2, [r7, #12]
 8001b4a:	4413      	add	r3, r2
 8001b4c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b4e:	601a      	str	r2, [r3, #0]
            Idat[io] = itp;
 8001b50:	464b      	mov	r3, r9
 8001b52:	009b      	lsls	r3, r3, #2
 8001b54:	68ba      	ldr	r2, [r7, #8]
 8001b56:	4413      	add	r3, r2
 8001b58:	6a3a      	ldr	r2, [r7, #32]
 8001b5a:	601a      	str	r2, [r3, #0]
        }

        k = nn;
 8001b5c:	4656      	mov	r6, sl

        while (k < j) {
 8001b5e:	e001      	b.n	8001b64 <FFT+0x288>
            j = j - k;
 8001b60:	1bad      	subs	r5, r5, r6
            k >>= 1;
 8001b62:	1076      	asrs	r6, r6, #1
        while (k < j) {
 8001b64:	42ae      	cmp	r6, r5
 8001b66:	dbfb      	blt.n	8001b60 <FFT+0x284>
        }

        j = j + k;
 8001b68:	4435      	add	r5, r6
    for (j = i = 1; i < N; i++) {
 8001b6a:	3401      	adds	r4, #1
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	429c      	cmp	r4, r3
 8001b70:	dbc3      	blt.n	8001afa <FFT+0x21e>
    }

    if (Ft_Flag == FT_DIRECT) return true;
 8001b72:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001b74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b78:	d101      	bne.n	8001b7e <FFT+0x2a2>
 8001b7a:	2301      	movs	r3, #1
 8001b7c:	e031      	b.n	8001be2 <FFT+0x306>

    rw = 1.0F / N;
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	ee07 3a90 	vmov	s15, r3
 8001b84:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001b88:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001b8c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001b90:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28

    for (i = 0; i < N; i++) {
 8001b94:	2400      	movs	r4, #0
 8001b96:	e020      	b.n	8001bda <FFT+0x2fe>
        Rdat[i] *= rw;
 8001b98:	4623      	mov	r3, r4
 8001b9a:	009b      	lsls	r3, r3, #2
 8001b9c:	68fa      	ldr	r2, [r7, #12]
 8001b9e:	4413      	add	r3, r2
 8001ba0:	ed93 7a00 	vldr	s14, [r3]
 8001ba4:	4623      	mov	r3, r4
 8001ba6:	009b      	lsls	r3, r3, #2
 8001ba8:	68fa      	ldr	r2, [r7, #12]
 8001baa:	4413      	add	r3, r2
 8001bac:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8001bb0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001bb4:	edc3 7a00 	vstr	s15, [r3]
        Idat[i] *= rw;
 8001bb8:	4623      	mov	r3, r4
 8001bba:	009b      	lsls	r3, r3, #2
 8001bbc:	68ba      	ldr	r2, [r7, #8]
 8001bbe:	4413      	add	r3, r2
 8001bc0:	ed93 7a00 	vldr	s14, [r3]
 8001bc4:	4623      	mov	r3, r4
 8001bc6:	009b      	lsls	r3, r3, #2
 8001bc8:	68ba      	ldr	r2, [r7, #8]
 8001bca:	4413      	add	r3, r2
 8001bcc:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8001bd0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001bd4:	edc3 7a00 	vstr	s15, [r3]
    for (i = 0; i < N; i++) {
 8001bd8:	3401      	adds	r4, #1
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	429c      	cmp	r4, r3
 8001bde:	dbdb      	blt.n	8001b98 <FFT+0x2bc>
    }

    return true;
 8001be0:	2301      	movs	r3, #1
}
 8001be2:	4618      	mov	r0, r3
 8001be4:	373c      	adds	r7, #60	; 0x3c
 8001be6:	46bd      	mov	sp, r7
 8001be8:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
 8001bec:	4770      	bx	lr
 8001bee:	bf00      	nop
 8001bf0:	0800fcf8 	.word	0x0800fcf8
 8001bf4:	0800fd30 	.word	0x0800fd30

08001bf8 <start_vibro>:
int min(int a,int b){
	if(a>b) return b;
	return a;
}
void start_vibro()
{
 8001bf8:	b5b0      	push	{r4, r5, r7, lr}
 8001bfa:	b094      	sub	sp, #80	; 0x50
 8001bfc:	af00      	add	r7, sp, #0
	int vibros[4] = {15,50,100,1000};
 8001bfe:	4b61      	ldr	r3, [pc, #388]	; (8001d84 <start_vibro+0x18c>)
 8001c00:	f107 0430 	add.w	r4, r7, #48	; 0x30
 8001c04:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001c06:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	double sums[4] = {0,0,0,0};
 8001c0a:	f107 0310 	add.w	r3, r7, #16
 8001c0e:	2220      	movs	r2, #32
 8001c10:	2100      	movs	r1, #0
 8001c12:	4618      	mov	r0, r3
 8001c14:	f00c ffc7 	bl	800eba6 <memset>
	int j =0;
 8001c18:	2300      	movs	r3, #0
 8001c1a:	64fb      	str	r3, [r7, #76]	; 0x4c
	for(int i=1;i<256;i+=1){
 8001c1c:	2301      	movs	r3, #1
 8001c1e:	64bb      	str	r3, [r7, #72]	; 0x48
 8001c20:	e044      	b.n	8001cac <start_vibro+0xb4>
		if(i > vibros[j]) j++;
 8001c22:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001c24:	009b      	lsls	r3, r3, #2
 8001c26:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8001c2a:	4413      	add	r3, r2
 8001c2c:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8001c30:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001c32:	429a      	cmp	r2, r3
 8001c34:	dd02      	ble.n	8001c3c <start_vibro+0x44>
 8001c36:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001c38:	3301      	adds	r3, #1
 8001c3a:	64fb      	str	r3, [r7, #76]	; 0x4c
		if(FFTBuffer[i]/100000 > sums[j])
 8001c3c:	4a52      	ldr	r2, [pc, #328]	; (8001d88 <start_vibro+0x190>)
 8001c3e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001c40:	009b      	lsls	r3, r3, #2
 8001c42:	4413      	add	r3, r2
 8001c44:	edd3 7a00 	vldr	s15, [r3]
 8001c48:	ed9f 7a50 	vldr	s14, [pc, #320]	; 8001d8c <start_vibro+0x194>
 8001c4c:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001c50:	ee16 0a90 	vmov	r0, s13
 8001c54:	f7fe fc24 	bl	80004a0 <__aeabi_f2d>
 8001c58:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001c5a:	00db      	lsls	r3, r3, #3
 8001c5c:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8001c60:	4413      	add	r3, r2
 8001c62:	3b40      	subs	r3, #64	; 0x40
 8001c64:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001c68:	461a      	mov	r2, r3
 8001c6a:	4623      	mov	r3, r4
 8001c6c:	f7fe ff00 	bl	8000a70 <__aeabi_dcmpgt>
 8001c70:	4603      	mov	r3, r0
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d017      	beq.n	8001ca6 <start_vibro+0xae>

			sums[j] = FFTBuffer[i]/100000;
 8001c76:	4a44      	ldr	r2, [pc, #272]	; (8001d88 <start_vibro+0x190>)
 8001c78:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001c7a:	009b      	lsls	r3, r3, #2
 8001c7c:	4413      	add	r3, r2
 8001c7e:	edd3 7a00 	vldr	s15, [r3]
 8001c82:	ed9f 7a42 	vldr	s14, [pc, #264]	; 8001d8c <start_vibro+0x194>
 8001c86:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001c8a:	ee16 0a90 	vmov	r0, s13
 8001c8e:	f7fe fc07 	bl	80004a0 <__aeabi_f2d>
 8001c92:	4603      	mov	r3, r0
 8001c94:	460c      	mov	r4, r1
 8001c96:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001c98:	00d2      	lsls	r2, r2, #3
 8001c9a:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8001c9e:	440a      	add	r2, r1
 8001ca0:	3a40      	subs	r2, #64	; 0x40
 8001ca2:	e9c2 3400 	strd	r3, r4, [r2]
	for(int i=1;i<256;i+=1){
 8001ca6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001ca8:	3301      	adds	r3, #1
 8001caa:	64bb      	str	r3, [r7, #72]	; 0x48
 8001cac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001cae:	2bff      	cmp	r3, #255	; 0xff
 8001cb0:	ddb7      	ble.n	8001c22 <start_vibro+0x2a>

	}
	sums[2]/=1.5;
 8001cb2:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001cb6:	f04f 0200 	mov.w	r2, #0
 8001cba:	4b35      	ldr	r3, [pc, #212]	; (8001d90 <start_vibro+0x198>)
 8001cbc:	f7fe fd72 	bl	80007a4 <__aeabi_ddiv>
 8001cc0:	4603      	mov	r3, r0
 8001cc2:	460c      	mov	r4, r1
 8001cc4:	e9c7 3408 	strd	r3, r4, [r7, #32]
	int diff[4] = {0,0,0,0};
 8001cc8:	463b      	mov	r3, r7
 8001cca:	2200      	movs	r2, #0
 8001ccc:	601a      	str	r2, [r3, #0]
 8001cce:	605a      	str	r2, [r3, #4]
 8001cd0:	609a      	str	r2, [r3, #8]
 8001cd2:	60da      	str	r2, [r3, #12]
	for(int i= 0;i<4;i++){
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	647b      	str	r3, [r7, #68]	; 0x44
 8001cd8:	e038      	b.n	8001d4c <start_vibro+0x154>
		for(int j=0;j<4;j++){
 8001cda:	2300      	movs	r3, #0
 8001cdc:	643b      	str	r3, [r7, #64]	; 0x40
 8001cde:	e02f      	b.n	8001d40 <start_vibro+0x148>
			if(sums[i] >= sums[j] - 0.5){
 8001ce0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001ce2:	00db      	lsls	r3, r3, #3
 8001ce4:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8001ce8:	4413      	add	r3, r2
 8001cea:	3b40      	subs	r3, #64	; 0x40
 8001cec:	e9d3 4500 	ldrd	r4, r5, [r3]
 8001cf0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001cf2:	00db      	lsls	r3, r3, #3
 8001cf4:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8001cf8:	4413      	add	r3, r2
 8001cfa:	3b40      	subs	r3, #64	; 0x40
 8001cfc:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001d00:	f04f 0200 	mov.w	r2, #0
 8001d04:	4b23      	ldr	r3, [pc, #140]	; (8001d94 <start_vibro+0x19c>)
 8001d06:	f7fe fa6b 	bl	80001e0 <__aeabi_dsub>
 8001d0a:	4602      	mov	r2, r0
 8001d0c:	460b      	mov	r3, r1
 8001d0e:	4620      	mov	r0, r4
 8001d10:	4629      	mov	r1, r5
 8001d12:	f7fe fea3 	bl	8000a5c <__aeabi_dcmpge>
 8001d16:	4603      	mov	r3, r0
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d00e      	beq.n	8001d3a <start_vibro+0x142>
				diff[i]+=1;
 8001d1c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001d1e:	009b      	lsls	r3, r3, #2
 8001d20:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8001d24:	4413      	add	r3, r2
 8001d26:	f853 3c50 	ldr.w	r3, [r3, #-80]
 8001d2a:	1c5a      	adds	r2, r3, #1
 8001d2c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001d2e:	009b      	lsls	r3, r3, #2
 8001d30:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8001d34:	440b      	add	r3, r1
 8001d36:	f843 2c50 	str.w	r2, [r3, #-80]
		for(int j=0;j<4;j++){
 8001d3a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001d3c:	3301      	adds	r3, #1
 8001d3e:	643b      	str	r3, [r7, #64]	; 0x40
 8001d40:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001d42:	2b03      	cmp	r3, #3
 8001d44:	ddcc      	ble.n	8001ce0 <start_vibro+0xe8>
	for(int i= 0;i<4;i++){
 8001d46:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001d48:	3301      	adds	r3, #1
 8001d4a:	647b      	str	r3, [r7, #68]	; 0x44
 8001d4c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001d4e:	2b03      	cmp	r3, #3
 8001d50:	ddc3      	ble.n	8001cda <start_vibro+0xe2>
			}
			}
		}

	TIM4->CCR1 = diff[0] * 512 - 1;
 8001d52:	683b      	ldr	r3, [r7, #0]
 8001d54:	025b      	lsls	r3, r3, #9
 8001d56:	1e5a      	subs	r2, r3, #1
 8001d58:	4b0f      	ldr	r3, [pc, #60]	; (8001d98 <start_vibro+0x1a0>)
 8001d5a:	635a      	str	r2, [r3, #52]	; 0x34
	TIM4->CCR2 = diff[1] * 512 - 1;
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	025b      	lsls	r3, r3, #9
 8001d60:	1e5a      	subs	r2, r3, #1
 8001d62:	4b0d      	ldr	r3, [pc, #52]	; (8001d98 <start_vibro+0x1a0>)
 8001d64:	639a      	str	r2, [r3, #56]	; 0x38
	TIM4->CCR3 = diff[2] * 512 - 1;
 8001d66:	68bb      	ldr	r3, [r7, #8]
 8001d68:	025b      	lsls	r3, r3, #9
 8001d6a:	1e5a      	subs	r2, r3, #1
 8001d6c:	4b0a      	ldr	r3, [pc, #40]	; (8001d98 <start_vibro+0x1a0>)
 8001d6e:	63da      	str	r2, [r3, #60]	; 0x3c
	TIM4->CCR4 = diff[3] * 512 - 1;
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	025b      	lsls	r3, r3, #9
 8001d74:	1e5a      	subs	r2, r3, #1
 8001d76:	4b08      	ldr	r3, [pc, #32]	; (8001d98 <start_vibro+0x1a0>)
 8001d78:	641a      	str	r2, [r3, #64]	; 0x40

}
 8001d7a:	bf00      	nop
 8001d7c:	3750      	adds	r7, #80	; 0x50
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	bdb0      	pop	{r4, r5, r7, pc}
 8001d82:	bf00      	nop
 8001d84:	0800f9b0 	.word	0x0800f9b0
 8001d88:	200007c0 	.word	0x200007c0
 8001d8c:	47c35000 	.word	0x47c35000
 8001d90:	3ff80000 	.word	0x3ff80000
 8001d94:	3fe00000 	.word	0x3fe00000
 8001d98:	40000800 	.word	0x40000800

08001d9c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001d9c:	b590      	push	{r4, r7, lr}
 8001d9e:	b0dd      	sub	sp, #372	; 0x174
 8001da0:	af12      	add	r7, sp, #72	; 0x48
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001da2:	f000 fc7b 	bl	800269c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001da6:	f000 f94d 	bl	8002044 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001daa:	f7ff fadb 	bl	8001364 <MX_GPIO_Init>
  MX_DMA_Init();
 8001dae:	f7ff fab9 	bl	8001324 <MX_DMA_Init>
  MX_I2C1_Init();
 8001db2:	f7ff fbaf 	bl	8001514 <MX_I2C1_Init>
  MX_I2S2_Init();
 8001db6:	f7ff fc23 	bl	8001600 <MX_I2S2_Init>
  MX_I2S3_Init();
 8001dba:	f7ff fc4f 	bl	800165c <MX_I2S3_Init>
  MX_SPI1_Init();
 8001dbe:	f000 fa07 	bl	80021d0 <MX_SPI1_Init>
  MX_CRC_Init();
 8001dc2:	f7ff f845 	bl	8000e50 <MX_CRC_Init>
  MX_PDM2PCM_Init();
 8001dc6:	f00a fa7b 	bl	800c2c0 <MX_PDM2PCM_Init>
  MX_USB_DEVICE_Init();
 8001dca:	f00a faa3 	bl	800c314 <MX_USB_DEVICE_Init>
  MX_TIM4_Init();
 8001dce:	f000 fb47 	bl	8002460 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
	CS43_Init(hi2c1,MODE_I2S);
 8001dd2:	4c91      	ldr	r4, [pc, #580]	; (8002018 <main+0x27c>)
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	9311      	str	r3, [sp, #68]	; 0x44
 8001dd8:	4668      	mov	r0, sp
 8001dda:	f104 0310 	add.w	r3, r4, #16
 8001dde:	2244      	movs	r2, #68	; 0x44
 8001de0:	4619      	mov	r1, r3
 8001de2:	f00c fed5 	bl	800eb90 <memcpy>
 8001de6:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001dea:	f7ff f8a7 	bl	8000f3c <CS43_Init>
	CS43_SetVolume(60);//70
 8001dee:	203c      	movs	r0, #60	; 0x3c
 8001df0:	f7ff fa14 	bl	800121c <CS43_SetVolume>
	CS43_Enable_RightLeft(CS43_RIGHT_LEFT);
 8001df4:	2003      	movs	r0, #3
 8001df6:	f7ff f9b5 	bl	8001164 <CS43_Enable_RightLeft>
	CS43_Start();
 8001dfa:	f7ff fa51 	bl	80012a0 <CS43_Start>
  //HAL_I2S_Transmit_DMA(&hi2s3, &txBuf[0], 64);// 64-32 bit frames to external i2s DAC
  HAL_I2S_Receive_DMA(&hi2s2, &pdmRxBuf[0],64);//64-32 bit frames from PDM microphone
 8001dfe:	2240      	movs	r2, #64	; 0x40
 8001e00:	4986      	ldr	r1, [pc, #536]	; (800201c <main+0x280>)
 8001e02:	4887      	ldr	r0, [pc, #540]	; (8002020 <main+0x284>)
 8001e04:	f003 f8e6 	bl	8004fd4 <HAL_I2S_Receive_DMA>
  HAL_TIM_PWM_Start(&htim4,TIM_CHANNEL_1);
 8001e08:	2100      	movs	r1, #0
 8001e0a:	4886      	ldr	r0, [pc, #536]	; (8002024 <main+0x288>)
 8001e0c:	f006 f9a6 	bl	800815c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4,TIM_CHANNEL_2);
 8001e10:	2104      	movs	r1, #4
 8001e12:	4884      	ldr	r0, [pc, #528]	; (8002024 <main+0x288>)
 8001e14:	f006 f9a2 	bl	800815c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4,TIM_CHANNEL_3);
 8001e18:	2108      	movs	r1, #8
 8001e1a:	4882      	ldr	r0, [pc, #520]	; (8002024 <main+0x288>)
 8001e1c:	f006 f99e 	bl	800815c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4,TIM_CHANNEL_4);
 8001e20:	210c      	movs	r1, #12
 8001e22:	4880      	ldr	r0, [pc, #512]	; (8002024 <main+0x288>)
 8001e24:	f006 f99a 	bl	800815c <HAL_TIM_PWM_Start>
  TIM4->CCR1 = 0;
 8001e28:	4b7f      	ldr	r3, [pc, #508]	; (8002028 <main+0x28c>)
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	635a      	str	r2, [r3, #52]	; 0x34
  TIM4->CCR2 = 0;
 8001e2e:	4b7e      	ldr	r3, [pc, #504]	; (8002028 <main+0x28c>)
 8001e30:	2200      	movs	r2, #0
 8001e32:	639a      	str	r2, [r3, #56]	; 0x38
  TIM4->CCR3 = 0;
 8001e34:	4b7c      	ldr	r3, [pc, #496]	; (8002028 <main+0x28c>)
 8001e36:	2200      	movs	r2, #0
 8001e38:	63da      	str	r2, [r3, #60]	; 0x3c
  TIM4->CCR4 = 0;
 8001e3a:	4b7b      	ldr	r3, [pc, #492]	; (8002028 <main+0x28c>)
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	641a      	str	r2, [r3, #64]	; 0x40
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  const char str[] = "Hello!\n";
 8001e40:	4a7a      	ldr	r2, [pc, #488]	; (800202c <main+0x290>)
 8001e42:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8001e46:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001e4a:	e883 0003 	stmia.w	r3, {r0, r1}
  uint16_t data_in[128];
  int rxIter = 0;
 8001e4e:	2300      	movs	r3, #0
 8001e50:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  int k =0;
 8001e54:	2300      	movs	r3, #0
 8001e56:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120

	  HAL_Delay(500);
	*/


	  volatile HAL_StatusTypeDef result = HAL_I2S_Receive(&hi2s2, data_in,32,1000);
 8001e5a:	f107 0108 	add.w	r1, r7, #8
 8001e5e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e62:	2220      	movs	r2, #32
 8001e64:	486e      	ldr	r0, [pc, #440]	; (8002020 <main+0x284>)
 8001e66:	f002 ffeb 	bl	8004e40 <HAL_I2S_Receive>
 8001e6a:	4603      	mov	r3, r0
 8001e6c:	461a      	mov	r2, r3
 8001e6e:	1dfb      	adds	r3, r7, #7
 8001e70:	701a      	strb	r2, [r3, #0]
	  if (result == HAL_OK) {
 8001e72:	1dfb      	adds	r3, r7, #7
 8001e74:	781b      	ldrb	r3, [r3, #0]
 8001e76:	b2db      	uxtb	r3, r3
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d11a      	bne.n	8001eb2 <main+0x116>
		  for(int i=0;i<32;i+=2)
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8001e82:	e012      	b.n	8001eaa <main+0x10e>
			  pdmRxBuf[rxIter++] = (int16_t) data_in[i];
 8001e84:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8001e88:	1c5a      	adds	r2, r3, #1
 8001e8a:	f8c7 2124 	str.w	r2, [r7, #292]	; 0x124
 8001e8e:	f107 0208 	add.w	r2, r7, #8
 8001e92:	f8d7 111c 	ldr.w	r1, [r7, #284]	; 0x11c
 8001e96:	f832 1011 	ldrh.w	r1, [r2, r1, lsl #1]
 8001e9a:	4a60      	ldr	r2, [pc, #384]	; (800201c <main+0x280>)
 8001e9c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		  for(int i=0;i<32;i+=2)
 8001ea0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8001ea4:	3302      	adds	r3, #2
 8001ea6:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8001eaa:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8001eae:	2b1f      	cmp	r3, #31
 8001eb0:	dde8      	ble.n	8001e84 <main+0xe8>

	  }



		 if (rxIter == 512 * 4) {//RxHalfCpltCallba
 8001eb2:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8001eb6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001eba:	d1ce      	bne.n	8001e5a <main+0xbe>
			for(int y =0;y<64*32;y+=64){
 8001ebc:	2300      	movs	r3, #0
 8001ebe:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8001ec2:	e033      	b.n	8001f2c <main+0x190>
				PDM_Filter(&pdmRxBuf[y],&MidBuffer[0], &PDM1_filter_handler);//filter first 64x16bit received PDM data
 8001ec4:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8001ec8:	005b      	lsls	r3, r3, #1
 8001eca:	4a54      	ldr	r2, [pc, #336]	; (800201c <main+0x280>)
 8001ecc:	4413      	add	r3, r2
 8001ece:	4a58      	ldr	r2, [pc, #352]	; (8002030 <main+0x294>)
 8001ed0:	4958      	ldr	r1, [pc, #352]	; (8002034 <main+0x298>)
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	f00c fdc8 	bl	800ea68 <PDM_Filter>
				for(int i=0;i<16;i++){
 8001ed8:	2300      	movs	r3, #0
 8001eda:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8001ede:	e01c      	b.n	8001f1a <main+0x17e>
					ReBuffer[i+y/4] = MidBuffer[i];
 8001ee0:	4a54      	ldr	r2, [pc, #336]	; (8002034 <main+0x298>)
 8001ee2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001ee6:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8001eea:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	da00      	bge.n	8001ef4 <main+0x158>
 8001ef2:	3303      	adds	r3, #3
 8001ef4:	109b      	asrs	r3, r3, #2
 8001ef6:	461a      	mov	r2, r3
 8001ef8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001efc:	4413      	add	r3, r2
 8001efe:	ee07 1a90 	vmov	s15, r1
 8001f02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001f06:	4a4c      	ldr	r2, [pc, #304]	; (8002038 <main+0x29c>)
 8001f08:	009b      	lsls	r3, r3, #2
 8001f0a:	4413      	add	r3, r2
 8001f0c:	edc3 7a00 	vstr	s15, [r3]
				for(int i=0;i<16;i++){
 8001f10:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001f14:	3301      	adds	r3, #1
 8001f16:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8001f1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001f1e:	2b0f      	cmp	r3, #15
 8001f20:	ddde      	ble.n	8001ee0 <main+0x144>
			for(int y =0;y<64*32;y+=64){
 8001f22:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8001f26:	3340      	adds	r3, #64	; 0x40
 8001f28:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8001f2c:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8001f30:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001f34:	dbc6      	blt.n	8001ec4 <main+0x128>
				}
			}
			FFT(ReBuffer, ImBuffer, 512, 9, -1);
 8001f36:	f04f 33ff 	mov.w	r3, #4294967295
 8001f3a:	9300      	str	r3, [sp, #0]
 8001f3c:	2309      	movs	r3, #9
 8001f3e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001f42:	493e      	ldr	r1, [pc, #248]	; (800203c <main+0x2a0>)
 8001f44:	483c      	ldr	r0, [pc, #240]	; (8002038 <main+0x29c>)
 8001f46:	f7ff fcc9 	bl	80018dc <FFT>
			for(int i=0;i<512;i++){
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8001f50:	e051      	b.n	8001ff6 <main+0x25a>
				FFTBuffer[i] = ReBuffer[i] * ReBuffer[i] + ImBuffer[i] * ImBuffer[i];
 8001f52:	4a39      	ldr	r2, [pc, #228]	; (8002038 <main+0x29c>)
 8001f54:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001f58:	009b      	lsls	r3, r3, #2
 8001f5a:	4413      	add	r3, r2
 8001f5c:	ed93 7a00 	vldr	s14, [r3]
 8001f60:	4a35      	ldr	r2, [pc, #212]	; (8002038 <main+0x29c>)
 8001f62:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001f66:	009b      	lsls	r3, r3, #2
 8001f68:	4413      	add	r3, r2
 8001f6a:	edd3 7a00 	vldr	s15, [r3]
 8001f6e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001f72:	4a32      	ldr	r2, [pc, #200]	; (800203c <main+0x2a0>)
 8001f74:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001f78:	009b      	lsls	r3, r3, #2
 8001f7a:	4413      	add	r3, r2
 8001f7c:	edd3 6a00 	vldr	s13, [r3]
 8001f80:	4a2e      	ldr	r2, [pc, #184]	; (800203c <main+0x2a0>)
 8001f82:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001f86:	009b      	lsls	r3, r3, #2
 8001f88:	4413      	add	r3, r2
 8001f8a:	edd3 7a00 	vldr	s15, [r3]
 8001f8e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001f92:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f96:	4a2a      	ldr	r2, [pc, #168]	; (8002040 <main+0x2a4>)
 8001f98:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001f9c:	009b      	lsls	r3, r3, #2
 8001f9e:	4413      	add	r3, r2
 8001fa0:	edc3 7a00 	vstr	s15, [r3]
				FFTBuffer[i] = sqrt(FFTBuffer[i]);
 8001fa4:	4a26      	ldr	r2, [pc, #152]	; (8002040 <main+0x2a4>)
 8001fa6:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001faa:	009b      	lsls	r3, r3, #2
 8001fac:	4413      	add	r3, r2
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	f7fe fa75 	bl	80004a0 <__aeabi_f2d>
 8001fb6:	4603      	mov	r3, r0
 8001fb8:	460c      	mov	r4, r1
 8001fba:	ec44 3b10 	vmov	d0, r3, r4
 8001fbe:	f00c fedb 	bl	800ed78 <sqrt>
 8001fc2:	ec54 3b10 	vmov	r3, r4, d0
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	4621      	mov	r1, r4
 8001fca:	f7fe fd71 	bl	8000ab0 <__aeabi_d2f>
 8001fce:	4601      	mov	r1, r0
 8001fd0:	4a1b      	ldr	r2, [pc, #108]	; (8002040 <main+0x2a4>)
 8001fd2:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001fd6:	009b      	lsls	r3, r3, #2
 8001fd8:	4413      	add	r3, r2
 8001fda:	6019      	str	r1, [r3, #0]
				ImBuffer[i] = 0;
 8001fdc:	4a17      	ldr	r2, [pc, #92]	; (800203c <main+0x2a0>)
 8001fde:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001fe2:	009b      	lsls	r3, r3, #2
 8001fe4:	4413      	add	r3, r2
 8001fe6:	f04f 0200 	mov.w	r2, #0
 8001fea:	601a      	str	r2, [r3, #0]
			for(int i=0;i<512;i++){
 8001fec:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001ff0:	3301      	adds	r3, #1
 8001ff2:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8001ff6:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001ffa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001ffe:	dba8      	blt.n	8001f52 <main+0x1b6>
			}
	    	rxIter = 0;
 8002000:	2300      	movs	r3, #0
 8002002:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
	    	k+=1;
 8002006:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800200a:	3301      	adds	r3, #1
 800200c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
	    	start_vibro();
 8002010:	f7ff fdf2 	bl	8001bf8 <start_vibro>
  {
 8002014:	e721      	b.n	8001e5a <main+0xbe>
 8002016:	bf00      	nop
 8002018:	2000067c 	.word	0x2000067c
 800201c:	200018e0 	.word	0x200018e0
 8002020:	20000730 	.word	0x20000730
 8002024:	20003338 	.word	0x20003338
 8002028:	40000800 	.word	0x40000800
 800202c:	0800f9c0 	.word	0x0800f9c0
 8002030:	20003384 	.word	0x20003384
 8002034:	200018c0 	.word	0x200018c0
 8002038:	200010c0 	.word	0x200010c0
 800203c:	200028e0 	.word	0x200028e0
 8002040:	200007c0 	.word	0x200007c0

08002044 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002044:	b580      	push	{r7, lr}
 8002046:	b09a      	sub	sp, #104	; 0x68
 8002048:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800204a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800204e:	2230      	movs	r2, #48	; 0x30
 8002050:	2100      	movs	r1, #0
 8002052:	4618      	mov	r0, r3
 8002054:	f00c fda7 	bl	800eba6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002058:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800205c:	2200      	movs	r2, #0
 800205e:	601a      	str	r2, [r3, #0]
 8002060:	605a      	str	r2, [r3, #4]
 8002062:	609a      	str	r2, [r3, #8]
 8002064:	60da      	str	r2, [r3, #12]
 8002066:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002068:	f107 030c 	add.w	r3, r7, #12
 800206c:	2200      	movs	r2, #0
 800206e:	601a      	str	r2, [r3, #0]
 8002070:	605a      	str	r2, [r3, #4]
 8002072:	609a      	str	r2, [r3, #8]
 8002074:	60da      	str	r2, [r3, #12]
 8002076:	611a      	str	r2, [r3, #16]
 8002078:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800207a:	2300      	movs	r3, #0
 800207c:	60bb      	str	r3, [r7, #8]
 800207e:	4b31      	ldr	r3, [pc, #196]	; (8002144 <SystemClock_Config+0x100>)
 8002080:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002082:	4a30      	ldr	r2, [pc, #192]	; (8002144 <SystemClock_Config+0x100>)
 8002084:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002088:	6413      	str	r3, [r2, #64]	; 0x40
 800208a:	4b2e      	ldr	r3, [pc, #184]	; (8002144 <SystemClock_Config+0x100>)
 800208c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800208e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002092:	60bb      	str	r3, [r7, #8]
 8002094:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002096:	2300      	movs	r3, #0
 8002098:	607b      	str	r3, [r7, #4]
 800209a:	4b2b      	ldr	r3, [pc, #172]	; (8002148 <SystemClock_Config+0x104>)
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	4a2a      	ldr	r2, [pc, #168]	; (8002148 <SystemClock_Config+0x104>)
 80020a0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80020a4:	6013      	str	r3, [r2, #0]
 80020a6:	4b28      	ldr	r3, [pc, #160]	; (8002148 <SystemClock_Config+0x104>)
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80020ae:	607b      	str	r3, [r7, #4]
 80020b0:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80020b2:	2301      	movs	r3, #1
 80020b4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80020b6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80020ba:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80020bc:	2302      	movs	r3, #2
 80020be:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80020c0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80020c4:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLM = 4;
 80020c6:	2304      	movs	r3, #4
 80020c8:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLN = 192;
 80020ca:	23c0      	movs	r3, #192	; 0xc0
 80020cc:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80020ce:	2304      	movs	r3, #4
 80020d0:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLQ = 8;
 80020d2:	2308      	movs	r3, #8
 80020d4:	667b      	str	r3, [r7, #100]	; 0x64
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80020d6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80020da:	4618      	mov	r0, r3
 80020dc:	f004 fdaa 	bl	8006c34 <HAL_RCC_OscConfig>
 80020e0:	4603      	mov	r3, r0
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d001      	beq.n	80020ea <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80020e6:	f000 f861 	bl	80021ac <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80020ea:	230f      	movs	r3, #15
 80020ec:	627b      	str	r3, [r7, #36]	; 0x24
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80020ee:	2302      	movs	r3, #2
 80020f0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80020f2:	2300      	movs	r3, #0
 80020f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80020f6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80020fa:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80020fc:	2300      	movs	r3, #0
 80020fe:	637b      	str	r3, [r7, #52]	; 0x34

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8002100:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002104:	2103      	movs	r1, #3
 8002106:	4618      	mov	r0, r3
 8002108:	f005 f8b4 	bl	8007274 <HAL_RCC_ClockConfig>
 800210c:	4603      	mov	r3, r0
 800210e:	2b00      	cmp	r3, #0
 8002110:	d001      	beq.n	8002116 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8002112:	f000 f84b 	bl	80021ac <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8002116:	2301      	movs	r3, #1
 8002118:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 200;
 800211a:	23c8      	movs	r3, #200	; 0xc8
 800211c:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLLI2S.PLLI2SM = 5;
 800211e:	2305      	movs	r3, #5
 8002120:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8002122:	2302      	movs	r3, #2
 8002124:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002126:	f107 030c 	add.w	r3, r7, #12
 800212a:	4618      	mov	r0, r3
 800212c:	f005 fb28 	bl	8007780 <HAL_RCCEx_PeriphCLKConfig>
 8002130:	4603      	mov	r3, r0
 8002132:	2b00      	cmp	r3, #0
 8002134:	d001      	beq.n	800213a <SystemClock_Config+0xf6>
  {
    Error_Handler();
 8002136:	f000 f839 	bl	80021ac <Error_Handler>
  }
}
 800213a:	bf00      	nop
 800213c:	3768      	adds	r7, #104	; 0x68
 800213e:	46bd      	mov	sp, r7
 8002140:	bd80      	pop	{r7, pc}
 8002142:	bf00      	nop
 8002144:	40023800 	.word	0x40023800
 8002148:	40007000 	.word	0x40007000

0800214c <HAL_I2S_TxCpltCallback>:
/* USER CODE BEGIN 4 */
void HAL_I2S_TxHalfCpltCallback (I2S_HandleTypeDef *hi2s) {
	txstate = 1;
}

void HAL_I2S_TxCpltCallback (I2S_HandleTypeDef *hi2s) {
 800214c:	b480      	push	{r7}
 800214e:	b083      	sub	sp, #12
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]
	txstate = 2;
 8002154:	4b04      	ldr	r3, [pc, #16]	; (8002168 <HAL_I2S_TxCpltCallback+0x1c>)
 8002156:	2202      	movs	r2, #2
 8002158:	701a      	strb	r2, [r3, #0]
}
 800215a:	bf00      	nop
 800215c:	370c      	adds	r7, #12
 800215e:	46bd      	mov	sp, r7
 8002160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002164:	4770      	bx	lr
 8002166:	bf00      	nop
 8002168:	20000660 	.word	0x20000660

0800216c <HAL_I2S_RxHalfCpltCallback>:

void HAL_I2S_RxHalfCpltCallback (I2S_HandleTypeDef *hi2s) {
 800216c:	b480      	push	{r7}
 800216e:	b083      	sub	sp, #12
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]
	rxstate = 1;
 8002174:	4b04      	ldr	r3, [pc, #16]	; (8002188 <HAL_I2S_RxHalfCpltCallback+0x1c>)
 8002176:	2201      	movs	r2, #1
 8002178:	701a      	strb	r2, [r3, #0]
}
 800217a:	bf00      	nop
 800217c:	370c      	adds	r7, #12
 800217e:	46bd      	mov	sp, r7
 8002180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002184:	4770      	bx	lr
 8002186:	bf00      	nop
 8002188:	20000661 	.word	0x20000661

0800218c <HAL_I2S_RxCpltCallback>:

void HAL_I2S_RxCpltCallback (I2S_HandleTypeDef *hi2s) {
 800218c:	b480      	push	{r7}
 800218e:	b083      	sub	sp, #12
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]
	rxstate = 2;
 8002194:	4b04      	ldr	r3, [pc, #16]	; (80021a8 <HAL_I2S_RxCpltCallback+0x1c>)
 8002196:	2202      	movs	r2, #2
 8002198:	701a      	strb	r2, [r3, #0]
}
 800219a:	bf00      	nop
 800219c:	370c      	adds	r7, #12
 800219e:	46bd      	mov	sp, r7
 80021a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a4:	4770      	bx	lr
 80021a6:	bf00      	nop
 80021a8:	20000661 	.word	0x20000661

080021ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80021ac:	b480      	push	{r7}
 80021ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80021b0:	bf00      	nop
 80021b2:	46bd      	mov	sp, r7
 80021b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b8:	4770      	bx	lr

080021ba <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
 80021ba:	b480      	push	{r7}
 80021bc:	b083      	sub	sp, #12
 80021be:	af00      	add	r7, sp, #0
 80021c0:	6078      	str	r0, [r7, #4]
 80021c2:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     tex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
 80021c4:	bf00      	nop
 80021c6:	370c      	adds	r7, #12
 80021c8:	46bd      	mov	sp, r7
 80021ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ce:	4770      	bx	lr

080021d0 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80021d0:	b580      	push	{r7, lr}
 80021d2:	af00      	add	r7, sp, #0

  hspi1.Instance = SPI1;
 80021d4:	4b17      	ldr	r3, [pc, #92]	; (8002234 <MX_SPI1_Init+0x64>)
 80021d6:	4a18      	ldr	r2, [pc, #96]	; (8002238 <MX_SPI1_Init+0x68>)
 80021d8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80021da:	4b16      	ldr	r3, [pc, #88]	; (8002234 <MX_SPI1_Init+0x64>)
 80021dc:	f44f 7282 	mov.w	r2, #260	; 0x104
 80021e0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80021e2:	4b14      	ldr	r3, [pc, #80]	; (8002234 <MX_SPI1_Init+0x64>)
 80021e4:	2200      	movs	r2, #0
 80021e6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80021e8:	4b12      	ldr	r3, [pc, #72]	; (8002234 <MX_SPI1_Init+0x64>)
 80021ea:	2200      	movs	r2, #0
 80021ec:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80021ee:	4b11      	ldr	r3, [pc, #68]	; (8002234 <MX_SPI1_Init+0x64>)
 80021f0:	2200      	movs	r2, #0
 80021f2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80021f4:	4b0f      	ldr	r3, [pc, #60]	; (8002234 <MX_SPI1_Init+0x64>)
 80021f6:	2200      	movs	r2, #0
 80021f8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80021fa:	4b0e      	ldr	r3, [pc, #56]	; (8002234 <MX_SPI1_Init+0x64>)
 80021fc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002200:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002202:	4b0c      	ldr	r3, [pc, #48]	; (8002234 <MX_SPI1_Init+0x64>)
 8002204:	2200      	movs	r2, #0
 8002206:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002208:	4b0a      	ldr	r3, [pc, #40]	; (8002234 <MX_SPI1_Init+0x64>)
 800220a:	2200      	movs	r2, #0
 800220c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800220e:	4b09      	ldr	r3, [pc, #36]	; (8002234 <MX_SPI1_Init+0x64>)
 8002210:	2200      	movs	r2, #0
 8002212:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002214:	4b07      	ldr	r3, [pc, #28]	; (8002234 <MX_SPI1_Init+0x64>)
 8002216:	2200      	movs	r2, #0
 8002218:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800221a:	4b06      	ldr	r3, [pc, #24]	; (8002234 <MX_SPI1_Init+0x64>)
 800221c:	220a      	movs	r2, #10
 800221e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002220:	4804      	ldr	r0, [pc, #16]	; (8002234 <MX_SPI1_Init+0x64>)
 8002222:	f005 fd1f 	bl	8007c64 <HAL_SPI_Init>
 8002226:	4603      	mov	r3, r0
 8002228:	2b00      	cmp	r3, #0
 800222a:	d001      	beq.n	8002230 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800222c:	f7ff ffbe 	bl	80021ac <Error_Handler>
  }

}
 8002230:	bf00      	nop
 8002232:	bd80      	pop	{r7, pc}
 8002234:	200032e0 	.word	0x200032e0
 8002238:	40013000 	.word	0x40013000

0800223c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800223c:	b580      	push	{r7, lr}
 800223e:	b08a      	sub	sp, #40	; 0x28
 8002240:	af00      	add	r7, sp, #0
 8002242:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002244:	f107 0314 	add.w	r3, r7, #20
 8002248:	2200      	movs	r2, #0
 800224a:	601a      	str	r2, [r3, #0]
 800224c:	605a      	str	r2, [r3, #4]
 800224e:	609a      	str	r2, [r3, #8]
 8002250:	60da      	str	r2, [r3, #12]
 8002252:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	4a19      	ldr	r2, [pc, #100]	; (80022c0 <HAL_SPI_MspInit+0x84>)
 800225a:	4293      	cmp	r3, r2
 800225c:	d12b      	bne.n	80022b6 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800225e:	2300      	movs	r3, #0
 8002260:	613b      	str	r3, [r7, #16]
 8002262:	4b18      	ldr	r3, [pc, #96]	; (80022c4 <HAL_SPI_MspInit+0x88>)
 8002264:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002266:	4a17      	ldr	r2, [pc, #92]	; (80022c4 <HAL_SPI_MspInit+0x88>)
 8002268:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800226c:	6453      	str	r3, [r2, #68]	; 0x44
 800226e:	4b15      	ldr	r3, [pc, #84]	; (80022c4 <HAL_SPI_MspInit+0x88>)
 8002270:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002272:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002276:	613b      	str	r3, [r7, #16]
 8002278:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800227a:	2300      	movs	r3, #0
 800227c:	60fb      	str	r3, [r7, #12]
 800227e:	4b11      	ldr	r3, [pc, #68]	; (80022c4 <HAL_SPI_MspInit+0x88>)
 8002280:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002282:	4a10      	ldr	r2, [pc, #64]	; (80022c4 <HAL_SPI_MspInit+0x88>)
 8002284:	f043 0301 	orr.w	r3, r3, #1
 8002288:	6313      	str	r3, [r2, #48]	; 0x30
 800228a:	4b0e      	ldr	r3, [pc, #56]	; (80022c4 <HAL_SPI_MspInit+0x88>)
 800228c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800228e:	f003 0301 	and.w	r3, r3, #1
 8002292:	60fb      	str	r3, [r7, #12]
 8002294:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8002296:	23e0      	movs	r3, #224	; 0xe0
 8002298:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800229a:	2302      	movs	r3, #2
 800229c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800229e:	2300      	movs	r3, #0
 80022a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022a2:	2303      	movs	r3, #3
 80022a4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80022a6:	2305      	movs	r3, #5
 80022a8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022aa:	f107 0314 	add.w	r3, r7, #20
 80022ae:	4619      	mov	r1, r3
 80022b0:	4805      	ldr	r0, [pc, #20]	; (80022c8 <HAL_SPI_MspInit+0x8c>)
 80022b2:	f001 f8db 	bl	800346c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80022b6:	bf00      	nop
 80022b8:	3728      	adds	r7, #40	; 0x28
 80022ba:	46bd      	mov	sp, r7
 80022bc:	bd80      	pop	{r7, pc}
 80022be:	bf00      	nop
 80022c0:	40013000 	.word	0x40013000
 80022c4:	40023800 	.word	0x40023800
 80022c8:	40020000 	.word	0x40020000

080022cc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80022cc:	b580      	push	{r7, lr}
 80022ce:	b082      	sub	sp, #8
 80022d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80022d2:	2300      	movs	r3, #0
 80022d4:	607b      	str	r3, [r7, #4]
 80022d6:	4b10      	ldr	r3, [pc, #64]	; (8002318 <HAL_MspInit+0x4c>)
 80022d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022da:	4a0f      	ldr	r2, [pc, #60]	; (8002318 <HAL_MspInit+0x4c>)
 80022dc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80022e0:	6453      	str	r3, [r2, #68]	; 0x44
 80022e2:	4b0d      	ldr	r3, [pc, #52]	; (8002318 <HAL_MspInit+0x4c>)
 80022e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80022ea:	607b      	str	r3, [r7, #4]
 80022ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80022ee:	2300      	movs	r3, #0
 80022f0:	603b      	str	r3, [r7, #0]
 80022f2:	4b09      	ldr	r3, [pc, #36]	; (8002318 <HAL_MspInit+0x4c>)
 80022f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022f6:	4a08      	ldr	r2, [pc, #32]	; (8002318 <HAL_MspInit+0x4c>)
 80022f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022fc:	6413      	str	r3, [r2, #64]	; 0x40
 80022fe:	4b06      	ldr	r3, [pc, #24]	; (8002318 <HAL_MspInit+0x4c>)
 8002300:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002302:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002306:	603b      	str	r3, [r7, #0]
 8002308:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800230a:	2007      	movs	r0, #7
 800230c:	f000 fb2a 	bl	8002964 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002310:	bf00      	nop
 8002312:	3708      	adds	r7, #8
 8002314:	46bd      	mov	sp, r7
 8002316:	bd80      	pop	{r7, pc}
 8002318:	40023800 	.word	0x40023800

0800231c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800231c:	b480      	push	{r7}
 800231e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002320:	bf00      	nop
 8002322:	46bd      	mov	sp, r7
 8002324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002328:	4770      	bx	lr

0800232a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800232a:	b480      	push	{r7}
 800232c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800232e:	e7fe      	b.n	800232e <HardFault_Handler+0x4>

08002330 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002330:	b480      	push	{r7}
 8002332:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002334:	e7fe      	b.n	8002334 <MemManage_Handler+0x4>

08002336 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002336:	b480      	push	{r7}
 8002338:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800233a:	e7fe      	b.n	800233a <BusFault_Handler+0x4>

0800233c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800233c:	b480      	push	{r7}
 800233e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002340:	e7fe      	b.n	8002340 <UsageFault_Handler+0x4>

08002342 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002342:	b480      	push	{r7}
 8002344:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002346:	bf00      	nop
 8002348:	46bd      	mov	sp, r7
 800234a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234e:	4770      	bx	lr

08002350 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002350:	b480      	push	{r7}
 8002352:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002354:	bf00      	nop
 8002356:	46bd      	mov	sp, r7
 8002358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235c:	4770      	bx	lr

0800235e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800235e:	b480      	push	{r7}
 8002360:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002362:	bf00      	nop
 8002364:	46bd      	mov	sp, r7
 8002366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236a:	4770      	bx	lr

0800236c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800236c:	b580      	push	{r7, lr}
 800236e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002370:	f000 f9e6 	bl	8002740 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002374:	bf00      	nop
 8002376:	bd80      	pop	{r7, pc}

08002378 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8002378:	b580      	push	{r7, lr}
 800237a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_tx);
 800237c:	4802      	ldr	r0, [pc, #8]	; (8002388 <DMA1_Stream5_IRQHandler+0x10>)
 800237e:	f000 fe0d 	bl	8002f9c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8002382:	bf00      	nop
 8002384:	bd80      	pop	{r7, pc}
 8002386:	bf00      	nop
 8002388:	200006d0 	.word	0x200006d0

0800238c <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 800238c:	b580      	push	{r7, lr}
 800238e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_I2S_IRQHandler(&hi2s2);
 8002390:	4802      	ldr	r0, [pc, #8]	; (800239c <SPI2_IRQHandler+0x10>)
 8002392:	f002 fedb 	bl	800514c <HAL_I2S_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8002396:	bf00      	nop
 8002398:	bd80      	pop	{r7, pc}
 800239a:	bf00      	nop
 800239c:	20000730 	.word	0x20000730

080023a0 <SPI3_IRQHandler>:

/**
  * @brief This function handles SPI3 global interrupt.
  */
void SPI3_IRQHandler(void)
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI3_IRQn 0 */

  /* USER CODE END SPI3_IRQn 0 */
  HAL_I2S_IRQHandler(&hi2s3);
 80023a4:	4802      	ldr	r0, [pc, #8]	; (80023b0 <SPI3_IRQHandler+0x10>)
 80023a6:	f002 fed1 	bl	800514c <HAL_I2S_IRQHandler>
  /* USER CODE BEGIN SPI3_IRQn 1 */

  /* USER CODE END SPI3_IRQn 1 */
}
 80023aa:	bf00      	nop
 80023ac:	bd80      	pop	{r7, pc}
 80023ae:	bf00      	nop
 80023b0:	20000778 	.word	0x20000778

080023b4 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80023b4:	b580      	push	{r7, lr}
 80023b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80023b8:	4802      	ldr	r0, [pc, #8]	; (80023c4 <OTG_FS_IRQHandler+0x10>)
 80023ba:	f003 fc08 	bl	8005bce <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80023be:	bf00      	nop
 80023c0:	bd80      	pop	{r7, pc}
 80023c2:	bf00      	nop
 80023c4:	200048a0 	.word	0x200048a0

080023c8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	b086      	sub	sp, #24
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80023d0:	4a14      	ldr	r2, [pc, #80]	; (8002424 <_sbrk+0x5c>)
 80023d2:	4b15      	ldr	r3, [pc, #84]	; (8002428 <_sbrk+0x60>)
 80023d4:	1ad3      	subs	r3, r2, r3
 80023d6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80023d8:	697b      	ldr	r3, [r7, #20]
 80023da:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80023dc:	4b13      	ldr	r3, [pc, #76]	; (800242c <_sbrk+0x64>)
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d102      	bne.n	80023ea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80023e4:	4b11      	ldr	r3, [pc, #68]	; (800242c <_sbrk+0x64>)
 80023e6:	4a12      	ldr	r2, [pc, #72]	; (8002430 <_sbrk+0x68>)
 80023e8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80023ea:	4b10      	ldr	r3, [pc, #64]	; (800242c <_sbrk+0x64>)
 80023ec:	681a      	ldr	r2, [r3, #0]
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	4413      	add	r3, r2
 80023f2:	693a      	ldr	r2, [r7, #16]
 80023f4:	429a      	cmp	r2, r3
 80023f6:	d207      	bcs.n	8002408 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80023f8:	f00c fb90 	bl	800eb1c <__errno>
 80023fc:	4602      	mov	r2, r0
 80023fe:	230c      	movs	r3, #12
 8002400:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8002402:	f04f 33ff 	mov.w	r3, #4294967295
 8002406:	e009      	b.n	800241c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002408:	4b08      	ldr	r3, [pc, #32]	; (800242c <_sbrk+0x64>)
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800240e:	4b07      	ldr	r3, [pc, #28]	; (800242c <_sbrk+0x64>)
 8002410:	681a      	ldr	r2, [r3, #0]
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	4413      	add	r3, r2
 8002416:	4a05      	ldr	r2, [pc, #20]	; (800242c <_sbrk+0x64>)
 8002418:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800241a:	68fb      	ldr	r3, [r7, #12]
}
 800241c:	4618      	mov	r0, r3
 800241e:	3718      	adds	r7, #24
 8002420:	46bd      	mov	sp, r7
 8002422:	bd80      	pop	{r7, pc}
 8002424:	20020000 	.word	0x20020000
 8002428:	00004000 	.word	0x00004000
 800242c:	20000664 	.word	0x20000664
 8002430:	20004cb0 	.word	0x20004cb0

08002434 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002434:	b480      	push	{r7}
 8002436:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002438:	4b08      	ldr	r3, [pc, #32]	; (800245c <SystemInit+0x28>)
 800243a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800243e:	4a07      	ldr	r2, [pc, #28]	; (800245c <SystemInit+0x28>)
 8002440:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002444:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002448:	4b04      	ldr	r3, [pc, #16]	; (800245c <SystemInit+0x28>)
 800244a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800244e:	609a      	str	r2, [r3, #8]
#endif
}
 8002450:	bf00      	nop
 8002452:	46bd      	mov	sp, r7
 8002454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002458:	4770      	bx	lr
 800245a:	bf00      	nop
 800245c:	e000ed00 	.word	0xe000ed00

08002460 <MX_TIM4_Init>:

TIM_HandleTypeDef htim4;

/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8002460:	b580      	push	{r7, lr}
 8002462:	b08e      	sub	sp, #56	; 0x38
 8002464:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002466:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800246a:	2200      	movs	r2, #0
 800246c:	601a      	str	r2, [r3, #0]
 800246e:	605a      	str	r2, [r3, #4]
 8002470:	609a      	str	r2, [r3, #8]
 8002472:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002474:	f107 0320 	add.w	r3, r7, #32
 8002478:	2200      	movs	r2, #0
 800247a:	601a      	str	r2, [r3, #0]
 800247c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800247e:	1d3b      	adds	r3, r7, #4
 8002480:	2200      	movs	r2, #0
 8002482:	601a      	str	r2, [r3, #0]
 8002484:	605a      	str	r2, [r3, #4]
 8002486:	609a      	str	r2, [r3, #8]
 8002488:	60da      	str	r2, [r3, #12]
 800248a:	611a      	str	r2, [r3, #16]
 800248c:	615a      	str	r2, [r3, #20]
 800248e:	619a      	str	r2, [r3, #24]

  htim4.Instance = TIM4;
 8002490:	4b3d      	ldr	r3, [pc, #244]	; (8002588 <MX_TIM4_Init+0x128>)
 8002492:	4a3e      	ldr	r2, [pc, #248]	; (800258c <MX_TIM4_Init+0x12c>)
 8002494:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 8;
 8002496:	4b3c      	ldr	r3, [pc, #240]	; (8002588 <MX_TIM4_Init+0x128>)
 8002498:	2208      	movs	r2, #8
 800249a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800249c:	4b3a      	ldr	r3, [pc, #232]	; (8002588 <MX_TIM4_Init+0x128>)
 800249e:	2200      	movs	r2, #0
 80024a0:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 4096;
 80024a2:	4b39      	ldr	r3, [pc, #228]	; (8002588 <MX_TIM4_Init+0x128>)
 80024a4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80024a8:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80024aa:	4b37      	ldr	r3, [pc, #220]	; (8002588 <MX_TIM4_Init+0x128>)
 80024ac:	2200      	movs	r2, #0
 80024ae:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80024b0:	4b35      	ldr	r3, [pc, #212]	; (8002588 <MX_TIM4_Init+0x128>)
 80024b2:	2200      	movs	r2, #0
 80024b4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80024b6:	4834      	ldr	r0, [pc, #208]	; (8002588 <MX_TIM4_Init+0x128>)
 80024b8:	f005 fd02 	bl	8007ec0 <HAL_TIM_Base_Init>
 80024bc:	4603      	mov	r3, r0
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d001      	beq.n	80024c6 <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 80024c2:	f7ff fe73 	bl	80021ac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80024c6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80024ca:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80024cc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80024d0:	4619      	mov	r1, r3
 80024d2:	482d      	ldr	r0, [pc, #180]	; (8002588 <MX_TIM4_Init+0x128>)
 80024d4:	f006 f8a0 	bl	8008618 <HAL_TIM_ConfigClockSource>
 80024d8:	4603      	mov	r3, r0
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d001      	beq.n	80024e2 <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 80024de:	f7ff fe65 	bl	80021ac <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80024e2:	4829      	ldr	r0, [pc, #164]	; (8002588 <MX_TIM4_Init+0x128>)
 80024e4:	f005 fd8e 	bl	8008004 <HAL_TIM_PWM_Init>
 80024e8:	4603      	mov	r3, r0
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d001      	beq.n	80024f2 <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 80024ee:	f7ff fe5d 	bl	80021ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80024f2:	2300      	movs	r3, #0
 80024f4:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80024f6:	2300      	movs	r3, #0
 80024f8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80024fa:	f107 0320 	add.w	r3, r7, #32
 80024fe:	4619      	mov	r1, r3
 8002500:	4821      	ldr	r0, [pc, #132]	; (8002588 <MX_TIM4_Init+0x128>)
 8002502:	f006 ff1d 	bl	8009340 <HAL_TIMEx_MasterConfigSynchronization>
 8002506:	4603      	mov	r3, r0
 8002508:	2b00      	cmp	r3, #0
 800250a:	d001      	beq.n	8002510 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 800250c:	f7ff fe4e 	bl	80021ac <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002510:	2360      	movs	r3, #96	; 0x60
 8002512:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002514:	2300      	movs	r3, #0
 8002516:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002518:	2300      	movs	r3, #0
 800251a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800251c:	2300      	movs	r3, #0
 800251e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002520:	1d3b      	adds	r3, r7, #4
 8002522:	2200      	movs	r2, #0
 8002524:	4619      	mov	r1, r3
 8002526:	4818      	ldr	r0, [pc, #96]	; (8002588 <MX_TIM4_Init+0x128>)
 8002528:	f005 fecc 	bl	80082c4 <HAL_TIM_PWM_ConfigChannel>
 800252c:	4603      	mov	r3, r0
 800252e:	2b00      	cmp	r3, #0
 8002530:	d001      	beq.n	8002536 <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 8002532:	f7ff fe3b 	bl	80021ac <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002536:	1d3b      	adds	r3, r7, #4
 8002538:	2204      	movs	r2, #4
 800253a:	4619      	mov	r1, r3
 800253c:	4812      	ldr	r0, [pc, #72]	; (8002588 <MX_TIM4_Init+0x128>)
 800253e:	f005 fec1 	bl	80082c4 <HAL_TIM_PWM_ConfigChannel>
 8002542:	4603      	mov	r3, r0
 8002544:	2b00      	cmp	r3, #0
 8002546:	d001      	beq.n	800254c <MX_TIM4_Init+0xec>
  {
    Error_Handler();
 8002548:	f7ff fe30 	bl	80021ac <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800254c:	1d3b      	adds	r3, r7, #4
 800254e:	2208      	movs	r2, #8
 8002550:	4619      	mov	r1, r3
 8002552:	480d      	ldr	r0, [pc, #52]	; (8002588 <MX_TIM4_Init+0x128>)
 8002554:	f005 feb6 	bl	80082c4 <HAL_TIM_PWM_ConfigChannel>
 8002558:	4603      	mov	r3, r0
 800255a:	2b00      	cmp	r3, #0
 800255c:	d001      	beq.n	8002562 <MX_TIM4_Init+0x102>
  {
    Error_Handler();
 800255e:	f7ff fe25 	bl	80021ac <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002562:	1d3b      	adds	r3, r7, #4
 8002564:	220c      	movs	r2, #12
 8002566:	4619      	mov	r1, r3
 8002568:	4807      	ldr	r0, [pc, #28]	; (8002588 <MX_TIM4_Init+0x128>)
 800256a:	f005 feab 	bl	80082c4 <HAL_TIM_PWM_ConfigChannel>
 800256e:	4603      	mov	r3, r0
 8002570:	2b00      	cmp	r3, #0
 8002572:	d001      	beq.n	8002578 <MX_TIM4_Init+0x118>
  {
    Error_Handler();
 8002574:	f7ff fe1a 	bl	80021ac <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim4);
 8002578:	4803      	ldr	r0, [pc, #12]	; (8002588 <MX_TIM4_Init+0x128>)
 800257a:	f000 f82b 	bl	80025d4 <HAL_TIM_MspPostInit>

}
 800257e:	bf00      	nop
 8002580:	3738      	adds	r7, #56	; 0x38
 8002582:	46bd      	mov	sp, r7
 8002584:	bd80      	pop	{r7, pc}
 8002586:	bf00      	nop
 8002588:	20003338 	.word	0x20003338
 800258c:	40000800 	.word	0x40000800

08002590 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002590:	b480      	push	{r7}
 8002592:	b085      	sub	sp, #20
 8002594:	af00      	add	r7, sp, #0
 8002596:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM4)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	4a0b      	ldr	r2, [pc, #44]	; (80025cc <HAL_TIM_Base_MspInit+0x3c>)
 800259e:	4293      	cmp	r3, r2
 80025a0:	d10d      	bne.n	80025be <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 80025a2:	2300      	movs	r3, #0
 80025a4:	60fb      	str	r3, [r7, #12]
 80025a6:	4b0a      	ldr	r3, [pc, #40]	; (80025d0 <HAL_TIM_Base_MspInit+0x40>)
 80025a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025aa:	4a09      	ldr	r2, [pc, #36]	; (80025d0 <HAL_TIM_Base_MspInit+0x40>)
 80025ac:	f043 0304 	orr.w	r3, r3, #4
 80025b0:	6413      	str	r3, [r2, #64]	; 0x40
 80025b2:	4b07      	ldr	r3, [pc, #28]	; (80025d0 <HAL_TIM_Base_MspInit+0x40>)
 80025b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025b6:	f003 0304 	and.w	r3, r3, #4
 80025ba:	60fb      	str	r3, [r7, #12]
 80025bc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 80025be:	bf00      	nop
 80025c0:	3714      	adds	r7, #20
 80025c2:	46bd      	mov	sp, r7
 80025c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c8:	4770      	bx	lr
 80025ca:	bf00      	nop
 80025cc:	40000800 	.word	0x40000800
 80025d0:	40023800 	.word	0x40023800

080025d4 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	b088      	sub	sp, #32
 80025d8:	af00      	add	r7, sp, #0
 80025da:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025dc:	f107 030c 	add.w	r3, r7, #12
 80025e0:	2200      	movs	r2, #0
 80025e2:	601a      	str	r2, [r3, #0]
 80025e4:	605a      	str	r2, [r3, #4]
 80025e6:	609a      	str	r2, [r3, #8]
 80025e8:	60da      	str	r2, [r3, #12]
 80025ea:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM4)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	4a12      	ldr	r2, [pc, #72]	; (800263c <HAL_TIM_MspPostInit+0x68>)
 80025f2:	4293      	cmp	r3, r2
 80025f4:	d11e      	bne.n	8002634 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80025f6:	2300      	movs	r3, #0
 80025f8:	60bb      	str	r3, [r7, #8]
 80025fa:	4b11      	ldr	r3, [pc, #68]	; (8002640 <HAL_TIM_MspPostInit+0x6c>)
 80025fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025fe:	4a10      	ldr	r2, [pc, #64]	; (8002640 <HAL_TIM_MspPostInit+0x6c>)
 8002600:	f043 0308 	orr.w	r3, r3, #8
 8002604:	6313      	str	r3, [r2, #48]	; 0x30
 8002606:	4b0e      	ldr	r3, [pc, #56]	; (8002640 <HAL_TIM_MspPostInit+0x6c>)
 8002608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800260a:	f003 0308 	and.w	r3, r3, #8
 800260e:	60bb      	str	r3, [r7, #8]
 8002610:	68bb      	ldr	r3, [r7, #8]
    PD12     ------> TIM4_CH1
    PD13     ------> TIM4_CH2
    PD14     ------> TIM4_CH3
    PD15     ------> TIM4_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8002612:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8002616:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002618:	2302      	movs	r3, #2
 800261a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800261c:	2300      	movs	r3, #0
 800261e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002620:	2300      	movs	r3, #0
 8002622:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002624:	2302      	movs	r3, #2
 8002626:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002628:	f107 030c 	add.w	r3, r7, #12
 800262c:	4619      	mov	r1, r3
 800262e:	4805      	ldr	r0, [pc, #20]	; (8002644 <HAL_TIM_MspPostInit+0x70>)
 8002630:	f000 ff1c 	bl	800346c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8002634:	bf00      	nop
 8002636:	3720      	adds	r7, #32
 8002638:	46bd      	mov	sp, r7
 800263a:	bd80      	pop	{r7, pc}
 800263c:	40000800 	.word	0x40000800
 8002640:	40023800 	.word	0x40023800
 8002644:	40020c00 	.word	0x40020c00

08002648 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002648:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002680 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800264c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800264e:	e003      	b.n	8002658 <LoopCopyDataInit>

08002650 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002650:	4b0c      	ldr	r3, [pc, #48]	; (8002684 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002652:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002654:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002656:	3104      	adds	r1, #4

08002658 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002658:	480b      	ldr	r0, [pc, #44]	; (8002688 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800265a:	4b0c      	ldr	r3, [pc, #48]	; (800268c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800265c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800265e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002660:	d3f6      	bcc.n	8002650 <CopyDataInit>
  ldr  r2, =_sbss
 8002662:	4a0b      	ldr	r2, [pc, #44]	; (8002690 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002664:	e002      	b.n	800266c <LoopFillZerobss>

08002666 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002666:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002668:	f842 3b04 	str.w	r3, [r2], #4

0800266c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800266c:	4b09      	ldr	r3, [pc, #36]	; (8002694 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800266e:	429a      	cmp	r2, r3

  bcc  FillZerobss
 8002670:	d3f9      	bcc.n	8002666 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002672:	f7ff fedf 	bl	8002434 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002676:	f00c fa57 	bl	800eb28 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800267a:	f7ff fb8f 	bl	8001d9c <main>
  bx  lr    
 800267e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002680:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8002684:	0800fdc4 	.word	0x0800fdc4
  ldr  r0, =_sdata
 8002688:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800268c:	200005e8 	.word	0x200005e8
  ldr  r2, =_sbss
 8002690:	200005e8 	.word	0x200005e8
  ldr  r3, = _ebss
 8002694:	20004cac 	.word	0x20004cac

08002698 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002698:	e7fe      	b.n	8002698 <ADC_IRQHandler>
	...

0800269c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800269c:	b580      	push	{r7, lr}
 800269e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80026a0:	4b0e      	ldr	r3, [pc, #56]	; (80026dc <HAL_Init+0x40>)
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	4a0d      	ldr	r2, [pc, #52]	; (80026dc <HAL_Init+0x40>)
 80026a6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80026aa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80026ac:	4b0b      	ldr	r3, [pc, #44]	; (80026dc <HAL_Init+0x40>)
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	4a0a      	ldr	r2, [pc, #40]	; (80026dc <HAL_Init+0x40>)
 80026b2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80026b6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80026b8:	4b08      	ldr	r3, [pc, #32]	; (80026dc <HAL_Init+0x40>)
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	4a07      	ldr	r2, [pc, #28]	; (80026dc <HAL_Init+0x40>)
 80026be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026c2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80026c4:	2003      	movs	r0, #3
 80026c6:	f000 f94d 	bl	8002964 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80026ca:	2000      	movs	r0, #0
 80026cc:	f000 f808 	bl	80026e0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80026d0:	f7ff fdfc 	bl	80022cc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80026d4:	2300      	movs	r3, #0
}
 80026d6:	4618      	mov	r0, r3
 80026d8:	bd80      	pop	{r7, pc}
 80026da:	bf00      	nop
 80026dc:	40023c00 	.word	0x40023c00

080026e0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80026e0:	b580      	push	{r7, lr}
 80026e2:	b082      	sub	sp, #8
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80026e8:	4b12      	ldr	r3, [pc, #72]	; (8002734 <HAL_InitTick+0x54>)
 80026ea:	681a      	ldr	r2, [r3, #0]
 80026ec:	4b12      	ldr	r3, [pc, #72]	; (8002738 <HAL_InitTick+0x58>)
 80026ee:	781b      	ldrb	r3, [r3, #0]
 80026f0:	4619      	mov	r1, r3
 80026f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80026f6:	fbb3 f3f1 	udiv	r3, r3, r1
 80026fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80026fe:	4618      	mov	r0, r3
 8002700:	f000 f994 	bl	8002a2c <HAL_SYSTICK_Config>
 8002704:	4603      	mov	r3, r0
 8002706:	2b00      	cmp	r3, #0
 8002708:	d001      	beq.n	800270e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800270a:	2301      	movs	r3, #1
 800270c:	e00e      	b.n	800272c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	2b0f      	cmp	r3, #15
 8002712:	d80a      	bhi.n	800272a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002714:	2200      	movs	r2, #0
 8002716:	6879      	ldr	r1, [r7, #4]
 8002718:	f04f 30ff 	mov.w	r0, #4294967295
 800271c:	f000 f942 	bl	80029a4 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002720:	4a06      	ldr	r2, [pc, #24]	; (800273c <HAL_InitTick+0x5c>)
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002726:	2300      	movs	r3, #0
 8002728:	e000      	b.n	800272c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800272a:	2301      	movs	r3, #1
}
 800272c:	4618      	mov	r0, r3
 800272e:	3708      	adds	r7, #8
 8002730:	46bd      	mov	sp, r7
 8002732:	bd80      	pop	{r7, pc}
 8002734:	20000400 	.word	0x20000400
 8002738:	20000408 	.word	0x20000408
 800273c:	20000404 	.word	0x20000404

08002740 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002740:	b480      	push	{r7}
 8002742:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002744:	4b06      	ldr	r3, [pc, #24]	; (8002760 <HAL_IncTick+0x20>)
 8002746:	781b      	ldrb	r3, [r3, #0]
 8002748:	461a      	mov	r2, r3
 800274a:	4b06      	ldr	r3, [pc, #24]	; (8002764 <HAL_IncTick+0x24>)
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	4413      	add	r3, r2
 8002750:	4a04      	ldr	r2, [pc, #16]	; (8002764 <HAL_IncTick+0x24>)
 8002752:	6013      	str	r3, [r2, #0]
}
 8002754:	bf00      	nop
 8002756:	46bd      	mov	sp, r7
 8002758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275c:	4770      	bx	lr
 800275e:	bf00      	nop
 8002760:	20000408 	.word	0x20000408
 8002764:	20003378 	.word	0x20003378

08002768 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002768:	b480      	push	{r7}
 800276a:	af00      	add	r7, sp, #0
  return uwTick;
 800276c:	4b03      	ldr	r3, [pc, #12]	; (800277c <HAL_GetTick+0x14>)
 800276e:	681b      	ldr	r3, [r3, #0]
}
 8002770:	4618      	mov	r0, r3
 8002772:	46bd      	mov	sp, r7
 8002774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002778:	4770      	bx	lr
 800277a:	bf00      	nop
 800277c:	20003378 	.word	0x20003378

08002780 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002780:	b580      	push	{r7, lr}
 8002782:	b084      	sub	sp, #16
 8002784:	af00      	add	r7, sp, #0
 8002786:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002788:	f7ff ffee 	bl	8002768 <HAL_GetTick>
 800278c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002798:	d005      	beq.n	80027a6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800279a:	4b09      	ldr	r3, [pc, #36]	; (80027c0 <HAL_Delay+0x40>)
 800279c:	781b      	ldrb	r3, [r3, #0]
 800279e:	461a      	mov	r2, r3
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	4413      	add	r3, r2
 80027a4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80027a6:	bf00      	nop
 80027a8:	f7ff ffde 	bl	8002768 <HAL_GetTick>
 80027ac:	4602      	mov	r2, r0
 80027ae:	68bb      	ldr	r3, [r7, #8]
 80027b0:	1ad3      	subs	r3, r2, r3
 80027b2:	68fa      	ldr	r2, [r7, #12]
 80027b4:	429a      	cmp	r2, r3
 80027b6:	d8f7      	bhi.n	80027a8 <HAL_Delay+0x28>
  {
  }
}
 80027b8:	bf00      	nop
 80027ba:	3710      	adds	r7, #16
 80027bc:	46bd      	mov	sp, r7
 80027be:	bd80      	pop	{r7, pc}
 80027c0:	20000408 	.word	0x20000408

080027c4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80027c4:	b480      	push	{r7}
 80027c6:	b085      	sub	sp, #20
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	f003 0307 	and.w	r3, r3, #7
 80027d2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80027d4:	4b0c      	ldr	r3, [pc, #48]	; (8002808 <__NVIC_SetPriorityGrouping+0x44>)
 80027d6:	68db      	ldr	r3, [r3, #12]
 80027d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80027da:	68ba      	ldr	r2, [r7, #8]
 80027dc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80027e0:	4013      	ands	r3, r2
 80027e2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80027e8:	68bb      	ldr	r3, [r7, #8]
 80027ea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80027ec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80027f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80027f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80027f6:	4a04      	ldr	r2, [pc, #16]	; (8002808 <__NVIC_SetPriorityGrouping+0x44>)
 80027f8:	68bb      	ldr	r3, [r7, #8]
 80027fa:	60d3      	str	r3, [r2, #12]
}
 80027fc:	bf00      	nop
 80027fe:	3714      	adds	r7, #20
 8002800:	46bd      	mov	sp, r7
 8002802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002806:	4770      	bx	lr
 8002808:	e000ed00 	.word	0xe000ed00

0800280c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800280c:	b480      	push	{r7}
 800280e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002810:	4b04      	ldr	r3, [pc, #16]	; (8002824 <__NVIC_GetPriorityGrouping+0x18>)
 8002812:	68db      	ldr	r3, [r3, #12]
 8002814:	0a1b      	lsrs	r3, r3, #8
 8002816:	f003 0307 	and.w	r3, r3, #7
}
 800281a:	4618      	mov	r0, r3
 800281c:	46bd      	mov	sp, r7
 800281e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002822:	4770      	bx	lr
 8002824:	e000ed00 	.word	0xe000ed00

08002828 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002828:	b480      	push	{r7}
 800282a:	b083      	sub	sp, #12
 800282c:	af00      	add	r7, sp, #0
 800282e:	4603      	mov	r3, r0
 8002830:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002832:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002836:	2b00      	cmp	r3, #0
 8002838:	db0b      	blt.n	8002852 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800283a:	79fb      	ldrb	r3, [r7, #7]
 800283c:	f003 021f 	and.w	r2, r3, #31
 8002840:	4907      	ldr	r1, [pc, #28]	; (8002860 <__NVIC_EnableIRQ+0x38>)
 8002842:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002846:	095b      	lsrs	r3, r3, #5
 8002848:	2001      	movs	r0, #1
 800284a:	fa00 f202 	lsl.w	r2, r0, r2
 800284e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002852:	bf00      	nop
 8002854:	370c      	adds	r7, #12
 8002856:	46bd      	mov	sp, r7
 8002858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800285c:	4770      	bx	lr
 800285e:	bf00      	nop
 8002860:	e000e100 	.word	0xe000e100

08002864 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002864:	b480      	push	{r7}
 8002866:	b083      	sub	sp, #12
 8002868:	af00      	add	r7, sp, #0
 800286a:	4603      	mov	r3, r0
 800286c:	6039      	str	r1, [r7, #0]
 800286e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002870:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002874:	2b00      	cmp	r3, #0
 8002876:	db0a      	blt.n	800288e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002878:	683b      	ldr	r3, [r7, #0]
 800287a:	b2da      	uxtb	r2, r3
 800287c:	490c      	ldr	r1, [pc, #48]	; (80028b0 <__NVIC_SetPriority+0x4c>)
 800287e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002882:	0112      	lsls	r2, r2, #4
 8002884:	b2d2      	uxtb	r2, r2
 8002886:	440b      	add	r3, r1
 8002888:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800288c:	e00a      	b.n	80028a4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800288e:	683b      	ldr	r3, [r7, #0]
 8002890:	b2da      	uxtb	r2, r3
 8002892:	4908      	ldr	r1, [pc, #32]	; (80028b4 <__NVIC_SetPriority+0x50>)
 8002894:	79fb      	ldrb	r3, [r7, #7]
 8002896:	f003 030f 	and.w	r3, r3, #15
 800289a:	3b04      	subs	r3, #4
 800289c:	0112      	lsls	r2, r2, #4
 800289e:	b2d2      	uxtb	r2, r2
 80028a0:	440b      	add	r3, r1
 80028a2:	761a      	strb	r2, [r3, #24]
}
 80028a4:	bf00      	nop
 80028a6:	370c      	adds	r7, #12
 80028a8:	46bd      	mov	sp, r7
 80028aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ae:	4770      	bx	lr
 80028b0:	e000e100 	.word	0xe000e100
 80028b4:	e000ed00 	.word	0xe000ed00

080028b8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80028b8:	b480      	push	{r7}
 80028ba:	b089      	sub	sp, #36	; 0x24
 80028bc:	af00      	add	r7, sp, #0
 80028be:	60f8      	str	r0, [r7, #12]
 80028c0:	60b9      	str	r1, [r7, #8]
 80028c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	f003 0307 	and.w	r3, r3, #7
 80028ca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80028cc:	69fb      	ldr	r3, [r7, #28]
 80028ce:	f1c3 0307 	rsb	r3, r3, #7
 80028d2:	2b04      	cmp	r3, #4
 80028d4:	bf28      	it	cs
 80028d6:	2304      	movcs	r3, #4
 80028d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80028da:	69fb      	ldr	r3, [r7, #28]
 80028dc:	3304      	adds	r3, #4
 80028de:	2b06      	cmp	r3, #6
 80028e0:	d902      	bls.n	80028e8 <NVIC_EncodePriority+0x30>
 80028e2:	69fb      	ldr	r3, [r7, #28]
 80028e4:	3b03      	subs	r3, #3
 80028e6:	e000      	b.n	80028ea <NVIC_EncodePriority+0x32>
 80028e8:	2300      	movs	r3, #0
 80028ea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028ec:	f04f 32ff 	mov.w	r2, #4294967295
 80028f0:	69bb      	ldr	r3, [r7, #24]
 80028f2:	fa02 f303 	lsl.w	r3, r2, r3
 80028f6:	43da      	mvns	r2, r3
 80028f8:	68bb      	ldr	r3, [r7, #8]
 80028fa:	401a      	ands	r2, r3
 80028fc:	697b      	ldr	r3, [r7, #20]
 80028fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002900:	f04f 31ff 	mov.w	r1, #4294967295
 8002904:	697b      	ldr	r3, [r7, #20]
 8002906:	fa01 f303 	lsl.w	r3, r1, r3
 800290a:	43d9      	mvns	r1, r3
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002910:	4313      	orrs	r3, r2
         );
}
 8002912:	4618      	mov	r0, r3
 8002914:	3724      	adds	r7, #36	; 0x24
 8002916:	46bd      	mov	sp, r7
 8002918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291c:	4770      	bx	lr
	...

08002920 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002920:	b580      	push	{r7, lr}
 8002922:	b082      	sub	sp, #8
 8002924:	af00      	add	r7, sp, #0
 8002926:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	3b01      	subs	r3, #1
 800292c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002930:	d301      	bcc.n	8002936 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002932:	2301      	movs	r3, #1
 8002934:	e00f      	b.n	8002956 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002936:	4a0a      	ldr	r2, [pc, #40]	; (8002960 <SysTick_Config+0x40>)
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	3b01      	subs	r3, #1
 800293c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800293e:	210f      	movs	r1, #15
 8002940:	f04f 30ff 	mov.w	r0, #4294967295
 8002944:	f7ff ff8e 	bl	8002864 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002948:	4b05      	ldr	r3, [pc, #20]	; (8002960 <SysTick_Config+0x40>)
 800294a:	2200      	movs	r2, #0
 800294c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800294e:	4b04      	ldr	r3, [pc, #16]	; (8002960 <SysTick_Config+0x40>)
 8002950:	2207      	movs	r2, #7
 8002952:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002954:	2300      	movs	r3, #0
}
 8002956:	4618      	mov	r0, r3
 8002958:	3708      	adds	r7, #8
 800295a:	46bd      	mov	sp, r7
 800295c:	bd80      	pop	{r7, pc}
 800295e:	bf00      	nop
 8002960:	e000e010 	.word	0xe000e010

08002964 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002964:	b580      	push	{r7, lr}
 8002966:	b082      	sub	sp, #8
 8002968:	af00      	add	r7, sp, #0
 800296a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	2b07      	cmp	r3, #7
 8002970:	d00f      	beq.n	8002992 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	2b06      	cmp	r3, #6
 8002976:	d00c      	beq.n	8002992 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	2b05      	cmp	r3, #5
 800297c:	d009      	beq.n	8002992 <HAL_NVIC_SetPriorityGrouping+0x2e>
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	2b04      	cmp	r3, #4
 8002982:	d006      	beq.n	8002992 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	2b03      	cmp	r3, #3
 8002988:	d003      	beq.n	8002992 <HAL_NVIC_SetPriorityGrouping+0x2e>
 800298a:	2192      	movs	r1, #146	; 0x92
 800298c:	4804      	ldr	r0, [pc, #16]	; (80029a0 <HAL_NVIC_SetPriorityGrouping+0x3c>)
 800298e:	f7ff fc14 	bl	80021ba <assert_failed>
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002992:	6878      	ldr	r0, [r7, #4]
 8002994:	f7ff ff16 	bl	80027c4 <__NVIC_SetPriorityGrouping>
}
 8002998:	bf00      	nop
 800299a:	3708      	adds	r7, #8
 800299c:	46bd      	mov	sp, r7
 800299e:	bd80      	pop	{r7, pc}
 80029a0:	0800f9c8 	.word	0x0800f9c8

080029a4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80029a4:	b580      	push	{r7, lr}
 80029a6:	b086      	sub	sp, #24
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	4603      	mov	r3, r0
 80029ac:	60b9      	str	r1, [r7, #8]
 80029ae:	607a      	str	r2, [r7, #4]
 80029b0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80029b2:	2300      	movs	r3, #0
 80029b4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	2b0f      	cmp	r3, #15
 80029ba:	d903      	bls.n	80029c4 <HAL_NVIC_SetPriority+0x20>
 80029bc:	21aa      	movs	r1, #170	; 0xaa
 80029be:	480e      	ldr	r0, [pc, #56]	; (80029f8 <HAL_NVIC_SetPriority+0x54>)
 80029c0:	f7ff fbfb 	bl	80021ba <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 80029c4:	68bb      	ldr	r3, [r7, #8]
 80029c6:	2b0f      	cmp	r3, #15
 80029c8:	d903      	bls.n	80029d2 <HAL_NVIC_SetPriority+0x2e>
 80029ca:	21ab      	movs	r1, #171	; 0xab
 80029cc:	480a      	ldr	r0, [pc, #40]	; (80029f8 <HAL_NVIC_SetPriority+0x54>)
 80029ce:	f7ff fbf4 	bl	80021ba <assert_failed>
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80029d2:	f7ff ff1b 	bl	800280c <__NVIC_GetPriorityGrouping>
 80029d6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80029d8:	687a      	ldr	r2, [r7, #4]
 80029da:	68b9      	ldr	r1, [r7, #8]
 80029dc:	6978      	ldr	r0, [r7, #20]
 80029de:	f7ff ff6b 	bl	80028b8 <NVIC_EncodePriority>
 80029e2:	4602      	mov	r2, r0
 80029e4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80029e8:	4611      	mov	r1, r2
 80029ea:	4618      	mov	r0, r3
 80029ec:	f7ff ff3a 	bl	8002864 <__NVIC_SetPriority>
}
 80029f0:	bf00      	nop
 80029f2:	3718      	adds	r7, #24
 80029f4:	46bd      	mov	sp, r7
 80029f6:	bd80      	pop	{r7, pc}
 80029f8:	0800f9c8 	.word	0x0800f9c8

080029fc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80029fc:	b580      	push	{r7, lr}
 80029fe:	b082      	sub	sp, #8
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	4603      	mov	r3, r0
 8002a04:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 8002a06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	da03      	bge.n	8002a16 <HAL_NVIC_EnableIRQ+0x1a>
 8002a0e:	21be      	movs	r1, #190	; 0xbe
 8002a10:	4805      	ldr	r0, [pc, #20]	; (8002a28 <HAL_NVIC_EnableIRQ+0x2c>)
 8002a12:	f7ff fbd2 	bl	80021ba <assert_failed>
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002a16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	f7ff ff04 	bl	8002828 <__NVIC_EnableIRQ>
}
 8002a20:	bf00      	nop
 8002a22:	3708      	adds	r7, #8
 8002a24:	46bd      	mov	sp, r7
 8002a26:	bd80      	pop	{r7, pc}
 8002a28:	0800f9c8 	.word	0x0800f9c8

08002a2c <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002a2c:	b580      	push	{r7, lr}
 8002a2e:	b082      	sub	sp, #8
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002a34:	6878      	ldr	r0, [r7, #4]
 8002a36:	f7ff ff73 	bl	8002920 <SysTick_Config>
 8002a3a:	4603      	mov	r3, r0
}
 8002a3c:	4618      	mov	r0, r3
 8002a3e:	3708      	adds	r7, #8
 8002a40:	46bd      	mov	sp, r7
 8002a42:	bd80      	pop	{r7, pc}

08002a44 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8002a44:	b580      	push	{r7, lr}
 8002a46:	b082      	sub	sp, #8
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d101      	bne.n	8002a56 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8002a52:	2301      	movs	r3, #1
 8002a54:	e017      	b.n	8002a86 <HAL_CRC_Init+0x42>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	4a0d      	ldr	r2, [pc, #52]	; (8002a90 <HAL_CRC_Init+0x4c>)
 8002a5c:	4293      	cmp	r3, r2
 8002a5e:	d003      	beq.n	8002a68 <HAL_CRC_Init+0x24>
 8002a60:	2168      	movs	r1, #104	; 0x68
 8002a62:	480c      	ldr	r0, [pc, #48]	; (8002a94 <HAL_CRC_Init+0x50>)
 8002a64:	f7ff fba9 	bl	80021ba <assert_failed>

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	795b      	ldrb	r3, [r3, #5]
 8002a6c:	b2db      	uxtb	r3, r3
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d105      	bne.n	8002a7e <HAL_CRC_Init+0x3a>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	2200      	movs	r2, #0
 8002a76:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8002a78:	6878      	ldr	r0, [r7, #4]
 8002a7a:	f7fe f9fd 	bl	8000e78 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	2201      	movs	r2, #1
 8002a82:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8002a84:	2300      	movs	r3, #0
}
 8002a86:	4618      	mov	r0, r3
 8002a88:	3708      	adds	r7, #8
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	bd80      	pop	{r7, pc}
 8002a8e:	bf00      	nop
 8002a90:	40023000 	.word	0x40023000
 8002a94:	0800fa04 	.word	0x0800fa04

08002a98 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	b086      	sub	sp, #24
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002aa0:	2300      	movs	r3, #0
 8002aa2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002aa4:	f7ff fe60 	bl	8002768 <HAL_GetTick>
 8002aa8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d101      	bne.n	8002ab4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002ab0:	2301      	movs	r3, #1
 8002ab2:	e204      	b.n	8002ebe <HAL_DMA_Init+0x426>
  }

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	4a97      	ldr	r2, [pc, #604]	; (8002d18 <HAL_DMA_Init+0x280>)
 8002aba:	4293      	cmp	r3, r2
 8002abc:	d04e      	beq.n	8002b5c <HAL_DMA_Init+0xc4>
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	4a96      	ldr	r2, [pc, #600]	; (8002d1c <HAL_DMA_Init+0x284>)
 8002ac4:	4293      	cmp	r3, r2
 8002ac6:	d049      	beq.n	8002b5c <HAL_DMA_Init+0xc4>
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	4a94      	ldr	r2, [pc, #592]	; (8002d20 <HAL_DMA_Init+0x288>)
 8002ace:	4293      	cmp	r3, r2
 8002ad0:	d044      	beq.n	8002b5c <HAL_DMA_Init+0xc4>
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	4a93      	ldr	r2, [pc, #588]	; (8002d24 <HAL_DMA_Init+0x28c>)
 8002ad8:	4293      	cmp	r3, r2
 8002ada:	d03f      	beq.n	8002b5c <HAL_DMA_Init+0xc4>
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	4a91      	ldr	r2, [pc, #580]	; (8002d28 <HAL_DMA_Init+0x290>)
 8002ae2:	4293      	cmp	r3, r2
 8002ae4:	d03a      	beq.n	8002b5c <HAL_DMA_Init+0xc4>
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	4a90      	ldr	r2, [pc, #576]	; (8002d2c <HAL_DMA_Init+0x294>)
 8002aec:	4293      	cmp	r3, r2
 8002aee:	d035      	beq.n	8002b5c <HAL_DMA_Init+0xc4>
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	4a8e      	ldr	r2, [pc, #568]	; (8002d30 <HAL_DMA_Init+0x298>)
 8002af6:	4293      	cmp	r3, r2
 8002af8:	d030      	beq.n	8002b5c <HAL_DMA_Init+0xc4>
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	4a8d      	ldr	r2, [pc, #564]	; (8002d34 <HAL_DMA_Init+0x29c>)
 8002b00:	4293      	cmp	r3, r2
 8002b02:	d02b      	beq.n	8002b5c <HAL_DMA_Init+0xc4>
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	4a8b      	ldr	r2, [pc, #556]	; (8002d38 <HAL_DMA_Init+0x2a0>)
 8002b0a:	4293      	cmp	r3, r2
 8002b0c:	d026      	beq.n	8002b5c <HAL_DMA_Init+0xc4>
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	4a8a      	ldr	r2, [pc, #552]	; (8002d3c <HAL_DMA_Init+0x2a4>)
 8002b14:	4293      	cmp	r3, r2
 8002b16:	d021      	beq.n	8002b5c <HAL_DMA_Init+0xc4>
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	4a88      	ldr	r2, [pc, #544]	; (8002d40 <HAL_DMA_Init+0x2a8>)
 8002b1e:	4293      	cmp	r3, r2
 8002b20:	d01c      	beq.n	8002b5c <HAL_DMA_Init+0xc4>
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	4a87      	ldr	r2, [pc, #540]	; (8002d44 <HAL_DMA_Init+0x2ac>)
 8002b28:	4293      	cmp	r3, r2
 8002b2a:	d017      	beq.n	8002b5c <HAL_DMA_Init+0xc4>
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	4a85      	ldr	r2, [pc, #532]	; (8002d48 <HAL_DMA_Init+0x2b0>)
 8002b32:	4293      	cmp	r3, r2
 8002b34:	d012      	beq.n	8002b5c <HAL_DMA_Init+0xc4>
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	4a84      	ldr	r2, [pc, #528]	; (8002d4c <HAL_DMA_Init+0x2b4>)
 8002b3c:	4293      	cmp	r3, r2
 8002b3e:	d00d      	beq.n	8002b5c <HAL_DMA_Init+0xc4>
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	4a82      	ldr	r2, [pc, #520]	; (8002d50 <HAL_DMA_Init+0x2b8>)
 8002b46:	4293      	cmp	r3, r2
 8002b48:	d008      	beq.n	8002b5c <HAL_DMA_Init+0xc4>
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	4a81      	ldr	r2, [pc, #516]	; (8002d54 <HAL_DMA_Init+0x2bc>)
 8002b50:	4293      	cmp	r3, r2
 8002b52:	d003      	beq.n	8002b5c <HAL_DMA_Init+0xc4>
 8002b54:	21b8      	movs	r1, #184	; 0xb8
 8002b56:	4880      	ldr	r0, [pc, #512]	; (8002d58 <HAL_DMA_Init+0x2c0>)
 8002b58:	f7ff fb2f 	bl	80021ba <assert_failed>
  assert_param(IS_DMA_CHANNEL(hdma->Init.Channel));
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	685b      	ldr	r3, [r3, #4]
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d026      	beq.n	8002bb2 <HAL_DMA_Init+0x11a>
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	685b      	ldr	r3, [r3, #4]
 8002b68:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002b6c:	d021      	beq.n	8002bb2 <HAL_DMA_Init+0x11a>
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	685b      	ldr	r3, [r3, #4]
 8002b72:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002b76:	d01c      	beq.n	8002bb2 <HAL_DMA_Init+0x11a>
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	685b      	ldr	r3, [r3, #4]
 8002b7c:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 8002b80:	d017      	beq.n	8002bb2 <HAL_DMA_Init+0x11a>
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	685b      	ldr	r3, [r3, #4]
 8002b86:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002b8a:	d012      	beq.n	8002bb2 <HAL_DMA_Init+0x11a>
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	685b      	ldr	r3, [r3, #4]
 8002b90:	f1b3 6f20 	cmp.w	r3, #167772160	; 0xa000000
 8002b94:	d00d      	beq.n	8002bb2 <HAL_DMA_Init+0x11a>
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	685b      	ldr	r3, [r3, #4]
 8002b9a:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8002b9e:	d008      	beq.n	8002bb2 <HAL_DMA_Init+0x11a>
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	685b      	ldr	r3, [r3, #4]
 8002ba4:	f1b3 6f60 	cmp.w	r3, #234881024	; 0xe000000
 8002ba8:	d003      	beq.n	8002bb2 <HAL_DMA_Init+0x11a>
 8002baa:	21b9      	movs	r1, #185	; 0xb9
 8002bac:	486a      	ldr	r0, [pc, #424]	; (8002d58 <HAL_DMA_Init+0x2c0>)
 8002bae:	f7ff fb04 	bl	80021ba <assert_failed>
  assert_param(IS_DMA_DIRECTION(hdma->Init.Direction));
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	689b      	ldr	r3, [r3, #8]
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d00b      	beq.n	8002bd2 <HAL_DMA_Init+0x13a>
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	689b      	ldr	r3, [r3, #8]
 8002bbe:	2b40      	cmp	r3, #64	; 0x40
 8002bc0:	d007      	beq.n	8002bd2 <HAL_DMA_Init+0x13a>
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	689b      	ldr	r3, [r3, #8]
 8002bc6:	2b80      	cmp	r3, #128	; 0x80
 8002bc8:	d003      	beq.n	8002bd2 <HAL_DMA_Init+0x13a>
 8002bca:	21ba      	movs	r1, #186	; 0xba
 8002bcc:	4862      	ldr	r0, [pc, #392]	; (8002d58 <HAL_DMA_Init+0x2c0>)
 8002bce:	f7ff faf4 	bl	80021ba <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_INC_STATE(hdma->Init.PeriphInc));
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	68db      	ldr	r3, [r3, #12]
 8002bd6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002bda:	d007      	beq.n	8002bec <HAL_DMA_Init+0x154>
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	68db      	ldr	r3, [r3, #12]
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d003      	beq.n	8002bec <HAL_DMA_Init+0x154>
 8002be4:	21bb      	movs	r1, #187	; 0xbb
 8002be6:	485c      	ldr	r0, [pc, #368]	; (8002d58 <HAL_DMA_Init+0x2c0>)
 8002be8:	f7ff fae7 	bl	80021ba <assert_failed>
  assert_param(IS_DMA_MEMORY_INC_STATE(hdma->Init.MemInc));
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	691b      	ldr	r3, [r3, #16]
 8002bf0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002bf4:	d007      	beq.n	8002c06 <HAL_DMA_Init+0x16e>
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	691b      	ldr	r3, [r3, #16]
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d003      	beq.n	8002c06 <HAL_DMA_Init+0x16e>
 8002bfe:	21bc      	movs	r1, #188	; 0xbc
 8002c00:	4855      	ldr	r0, [pc, #340]	; (8002d58 <HAL_DMA_Init+0x2c0>)
 8002c02:	f7ff fada 	bl	80021ba <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	695b      	ldr	r3, [r3, #20]
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d00d      	beq.n	8002c2a <HAL_DMA_Init+0x192>
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	695b      	ldr	r3, [r3, #20]
 8002c12:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002c16:	d008      	beq.n	8002c2a <HAL_DMA_Init+0x192>
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	695b      	ldr	r3, [r3, #20]
 8002c1c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c20:	d003      	beq.n	8002c2a <HAL_DMA_Init+0x192>
 8002c22:	21bd      	movs	r1, #189	; 0xbd
 8002c24:	484c      	ldr	r0, [pc, #304]	; (8002d58 <HAL_DMA_Init+0x2c0>)
 8002c26:	f7ff fac8 	bl	80021ba <assert_failed>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	699b      	ldr	r3, [r3, #24]
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d00d      	beq.n	8002c4e <HAL_DMA_Init+0x1b6>
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	699b      	ldr	r3, [r3, #24]
 8002c36:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002c3a:	d008      	beq.n	8002c4e <HAL_DMA_Init+0x1b6>
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	699b      	ldr	r3, [r3, #24]
 8002c40:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002c44:	d003      	beq.n	8002c4e <HAL_DMA_Init+0x1b6>
 8002c46:	21be      	movs	r1, #190	; 0xbe
 8002c48:	4843      	ldr	r0, [pc, #268]	; (8002d58 <HAL_DMA_Init+0x2c0>)
 8002c4a:	f7ff fab6 	bl	80021ba <assert_failed>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	69db      	ldr	r3, [r3, #28]
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d00c      	beq.n	8002c70 <HAL_DMA_Init+0x1d8>
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	69db      	ldr	r3, [r3, #28]
 8002c5a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002c5e:	d007      	beq.n	8002c70 <HAL_DMA_Init+0x1d8>
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	69db      	ldr	r3, [r3, #28]
 8002c64:	2b20      	cmp	r3, #32
 8002c66:	d003      	beq.n	8002c70 <HAL_DMA_Init+0x1d8>
 8002c68:	21bf      	movs	r1, #191	; 0xbf
 8002c6a:	483b      	ldr	r0, [pc, #236]	; (8002d58 <HAL_DMA_Init+0x2c0>)
 8002c6c:	f7ff faa5 	bl	80021ba <assert_failed>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	6a1b      	ldr	r3, [r3, #32]
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d012      	beq.n	8002c9e <HAL_DMA_Init+0x206>
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	6a1b      	ldr	r3, [r3, #32]
 8002c7c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c80:	d00d      	beq.n	8002c9e <HAL_DMA_Init+0x206>
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	6a1b      	ldr	r3, [r3, #32]
 8002c86:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002c8a:	d008      	beq.n	8002c9e <HAL_DMA_Init+0x206>
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	6a1b      	ldr	r3, [r3, #32]
 8002c90:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002c94:	d003      	beq.n	8002c9e <HAL_DMA_Init+0x206>
 8002c96:	21c0      	movs	r1, #192	; 0xc0
 8002c98:	482f      	ldr	r0, [pc, #188]	; (8002d58 <HAL_DMA_Init+0x2c0>)
 8002c9a:	f7ff fa8e 	bl	80021ba <assert_failed>
  assert_param(IS_DMA_FIFO_MODE_STATE(hdma->Init.FIFOMode));
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d007      	beq.n	8002cb6 <HAL_DMA_Init+0x21e>
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002caa:	2b04      	cmp	r3, #4
 8002cac:	d003      	beq.n	8002cb6 <HAL_DMA_Init+0x21e>
 8002cae:	21c1      	movs	r1, #193	; 0xc1
 8002cb0:	4829      	ldr	r0, [pc, #164]	; (8002d58 <HAL_DMA_Init+0x2c0>)
 8002cb2:	f7ff fa82 	bl	80021ba <assert_failed>
  /* Check the memory burst, peripheral burst and FIFO threshold parameters only
     when FIFO mode is enabled */
  if(hdma->Init.FIFOMode != DMA_FIFOMODE_DISABLE)
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d065      	beq.n	8002d8a <HAL_DMA_Init+0x2f2>
  {
    assert_param(IS_DMA_FIFO_THRESHOLD(hdma->Init.FIFOThreshold));
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d00f      	beq.n	8002ce6 <HAL_DMA_Init+0x24e>
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cca:	2b01      	cmp	r3, #1
 8002ccc:	d00b      	beq.n	8002ce6 <HAL_DMA_Init+0x24e>
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cd2:	2b02      	cmp	r3, #2
 8002cd4:	d007      	beq.n	8002ce6 <HAL_DMA_Init+0x24e>
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cda:	2b03      	cmp	r3, #3
 8002cdc:	d003      	beq.n	8002ce6 <HAL_DMA_Init+0x24e>
 8002cde:	21c6      	movs	r1, #198	; 0xc6
 8002ce0:	481d      	ldr	r0, [pc, #116]	; (8002d58 <HAL_DMA_Init+0x2c0>)
 8002ce2:	f7ff fa6a 	bl	80021ba <assert_failed>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d036      	beq.n	8002d5c <HAL_DMA_Init+0x2c4>
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cf2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002cf6:	d031      	beq.n	8002d5c <HAL_DMA_Init+0x2c4>
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cfc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002d00:	d02c      	beq.n	8002d5c <HAL_DMA_Init+0x2c4>
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d06:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002d0a:	d027      	beq.n	8002d5c <HAL_DMA_Init+0x2c4>
 8002d0c:	21c7      	movs	r1, #199	; 0xc7
 8002d0e:	4812      	ldr	r0, [pc, #72]	; (8002d58 <HAL_DMA_Init+0x2c0>)
 8002d10:	f7ff fa53 	bl	80021ba <assert_failed>
 8002d14:	e022      	b.n	8002d5c <HAL_DMA_Init+0x2c4>
 8002d16:	bf00      	nop
 8002d18:	40026010 	.word	0x40026010
 8002d1c:	40026028 	.word	0x40026028
 8002d20:	40026040 	.word	0x40026040
 8002d24:	40026058 	.word	0x40026058
 8002d28:	40026070 	.word	0x40026070
 8002d2c:	40026088 	.word	0x40026088
 8002d30:	400260a0 	.word	0x400260a0
 8002d34:	400260b8 	.word	0x400260b8
 8002d38:	40026410 	.word	0x40026410
 8002d3c:	40026428 	.word	0x40026428
 8002d40:	40026440 	.word	0x40026440
 8002d44:	40026458 	.word	0x40026458
 8002d48:	40026470 	.word	0x40026470
 8002d4c:	40026488 	.word	0x40026488
 8002d50:	400264a0 	.word	0x400264a0
 8002d54:	400264b8 	.word	0x400264b8
 8002d58:	0800fa3c 	.word	0x0800fa3c
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d012      	beq.n	8002d8a <HAL_DMA_Init+0x2f2>
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d68:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002d6c:	d00d      	beq.n	8002d8a <HAL_DMA_Init+0x2f2>
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d72:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002d76:	d008      	beq.n	8002d8a <HAL_DMA_Init+0x2f2>
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d7c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8002d80:	d003      	beq.n	8002d8a <HAL_DMA_Init+0x2f2>
 8002d82:	21c8      	movs	r1, #200	; 0xc8
 8002d84:	4850      	ldr	r0, [pc, #320]	; (8002ec8 <HAL_DMA_Init+0x430>)
 8002d86:	f7ff fa18 	bl	80021ba <assert_failed>
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	2200      	movs	r2, #0
 8002d8e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	2202      	movs	r2, #2
 8002d96:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	681a      	ldr	r2, [r3, #0]
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f022 0201 	bic.w	r2, r2, #1
 8002da8:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002daa:	e00f      	b.n	8002dcc <HAL_DMA_Init+0x334>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002dac:	f7ff fcdc 	bl	8002768 <HAL_GetTick>
 8002db0:	4602      	mov	r2, r0
 8002db2:	693b      	ldr	r3, [r7, #16]
 8002db4:	1ad3      	subs	r3, r2, r3
 8002db6:	2b05      	cmp	r3, #5
 8002db8:	d908      	bls.n	8002dcc <HAL_DMA_Init+0x334>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	2220      	movs	r2, #32
 8002dbe:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	2203      	movs	r2, #3
 8002dc4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002dc8:	2303      	movs	r3, #3
 8002dca:	e078      	b.n	8002ebe <HAL_DMA_Init+0x426>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f003 0301 	and.w	r3, r3, #1
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d1e8      	bne.n	8002dac <HAL_DMA_Init+0x314>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002de2:	697a      	ldr	r2, [r7, #20]
 8002de4:	4b39      	ldr	r3, [pc, #228]	; (8002ecc <HAL_DMA_Init+0x434>)
 8002de6:	4013      	ands	r3, r2
 8002de8:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	685a      	ldr	r2, [r3, #4]
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	689b      	ldr	r3, [r3, #8]
 8002df2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002df8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	691b      	ldr	r3, [r3, #16]
 8002dfe:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002e04:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	699b      	ldr	r3, [r3, #24]
 8002e0a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002e10:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	6a1b      	ldr	r3, [r3, #32]
 8002e16:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002e18:	697a      	ldr	r2, [r7, #20]
 8002e1a:	4313      	orrs	r3, r2
 8002e1c:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e22:	2b04      	cmp	r3, #4
 8002e24:	d107      	bne.n	8002e36 <HAL_DMA_Init+0x39e>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e2e:	4313      	orrs	r3, r2
 8002e30:	697a      	ldr	r2, [r7, #20]
 8002e32:	4313      	orrs	r3, r2
 8002e34:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	697a      	ldr	r2, [r7, #20]
 8002e3c:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	695b      	ldr	r3, [r3, #20]
 8002e44:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002e46:	697b      	ldr	r3, [r7, #20]
 8002e48:	f023 0307 	bic.w	r3, r3, #7
 8002e4c:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e52:	697a      	ldr	r2, [r7, #20]
 8002e54:	4313      	orrs	r3, r2
 8002e56:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e5c:	2b04      	cmp	r3, #4
 8002e5e:	d117      	bne.n	8002e90 <HAL_DMA_Init+0x3f8>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e64:	697a      	ldr	r2, [r7, #20]
 8002e66:	4313      	orrs	r3, r2
 8002e68:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d00e      	beq.n	8002e90 <HAL_DMA_Init+0x3f8>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002e72:	6878      	ldr	r0, [r7, #4]
 8002e74:	f000 fa80 	bl	8003378 <DMA_CheckFifoParam>
 8002e78:	4603      	mov	r3, r0
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d008      	beq.n	8002e90 <HAL_DMA_Init+0x3f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	2240      	movs	r2, #64	; 0x40
 8002e82:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	2201      	movs	r2, #1
 8002e88:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002e8c:	2301      	movs	r3, #1
 8002e8e:	e016      	b.n	8002ebe <HAL_DMA_Init+0x426>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	697a      	ldr	r2, [r7, #20]
 8002e96:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002e98:	6878      	ldr	r0, [r7, #4]
 8002e9a:	f000 fa37 	bl	800330c <DMA_CalcBaseAndBitshift>
 8002e9e:	4603      	mov	r3, r0
 8002ea0:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ea6:	223f      	movs	r2, #63	; 0x3f
 8002ea8:	409a      	lsls	r2, r3
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	2201      	movs	r2, #1
 8002eb8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002ebc:	2300      	movs	r3, #0
}
 8002ebe:	4618      	mov	r0, r3
 8002ec0:	3718      	adds	r7, #24
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	bd80      	pop	{r7, pc}
 8002ec6:	bf00      	nop
 8002ec8:	0800fa3c 	.word	0x0800fa3c
 8002ecc:	f010803f 	.word	0xf010803f

08002ed0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	b086      	sub	sp, #24
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	60f8      	str	r0, [r7, #12]
 8002ed8:	60b9      	str	r1, [r7, #8]
 8002eda:	607a      	str	r2, [r7, #4]
 8002edc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002ede:	2300      	movs	r3, #0
 8002ee0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ee6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 8002ee8:	683b      	ldr	r3, [r7, #0]
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d003      	beq.n	8002ef6 <HAL_DMA_Start_IT+0x26>
 8002eee:	683b      	ldr	r3, [r7, #0]
 8002ef0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ef4:	d304      	bcc.n	8002f00 <HAL_DMA_Start_IT+0x30>
 8002ef6:	f44f 71e6 	mov.w	r1, #460	; 0x1cc
 8002efa:	4827      	ldr	r0, [pc, #156]	; (8002f98 <HAL_DMA_Start_IT+0xc8>)
 8002efc:	f7ff f95d 	bl	80021ba <assert_failed>
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002f06:	2b01      	cmp	r3, #1
 8002f08:	d101      	bne.n	8002f0e <HAL_DMA_Start_IT+0x3e>
 8002f0a:	2302      	movs	r3, #2
 8002f0c:	e040      	b.n	8002f90 <HAL_DMA_Start_IT+0xc0>
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	2201      	movs	r2, #1
 8002f12:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002f1c:	b2db      	uxtb	r3, r3
 8002f1e:	2b01      	cmp	r3, #1
 8002f20:	d12f      	bne.n	8002f82 <HAL_DMA_Start_IT+0xb2>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	2202      	movs	r2, #2
 8002f26:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	2200      	movs	r2, #0
 8002f2e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002f30:	683b      	ldr	r3, [r7, #0]
 8002f32:	687a      	ldr	r2, [r7, #4]
 8002f34:	68b9      	ldr	r1, [r7, #8]
 8002f36:	68f8      	ldr	r0, [r7, #12]
 8002f38:	f000 f9ba 	bl	80032b0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f40:	223f      	movs	r2, #63	; 0x3f
 8002f42:	409a      	lsls	r2, r3
 8002f44:	693b      	ldr	r3, [r7, #16]
 8002f46:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	681a      	ldr	r2, [r3, #0]
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f042 0216 	orr.w	r2, r2, #22
 8002f56:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d007      	beq.n	8002f70 <HAL_DMA_Start_IT+0xa0>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	681a      	ldr	r2, [r3, #0]
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f042 0208 	orr.w	r2, r2, #8
 8002f6e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	681a      	ldr	r2, [r3, #0]
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f042 0201 	orr.w	r2, r2, #1
 8002f7e:	601a      	str	r2, [r3, #0]
 8002f80:	e005      	b.n	8002f8e <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	2200      	movs	r2, #0
 8002f86:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002f8a:	2302      	movs	r3, #2
 8002f8c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002f8e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002f90:	4618      	mov	r0, r3
 8002f92:	3718      	adds	r7, #24
 8002f94:	46bd      	mov	sp, r7
 8002f96:	bd80      	pop	{r7, pc}
 8002f98:	0800fa3c 	.word	0x0800fa3c

08002f9c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002f9c:	b580      	push	{r7, lr}
 8002f9e:	b086      	sub	sp, #24
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002fa4:	2300      	movs	r3, #0
 8002fa6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002fa8:	4b92      	ldr	r3, [pc, #584]	; (80031f4 <HAL_DMA_IRQHandler+0x258>)
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	4a92      	ldr	r2, [pc, #584]	; (80031f8 <HAL_DMA_IRQHandler+0x25c>)
 8002fae:	fba2 2303 	umull	r2, r3, r2, r3
 8002fb2:	0a9b      	lsrs	r3, r3, #10
 8002fb4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fba:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002fbc:	693b      	ldr	r3, [r7, #16]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fc6:	2208      	movs	r2, #8
 8002fc8:	409a      	lsls	r2, r3
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	4013      	ands	r3, r2
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d01a      	beq.n	8003008 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f003 0304 	and.w	r3, r3, #4
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d013      	beq.n	8003008 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	681a      	ldr	r2, [r3, #0]
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f022 0204 	bic.w	r2, r2, #4
 8002fee:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ff4:	2208      	movs	r2, #8
 8002ff6:	409a      	lsls	r2, r3
 8002ff8:	693b      	ldr	r3, [r7, #16]
 8002ffa:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003000:	f043 0201 	orr.w	r2, r3, #1
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800300c:	2201      	movs	r2, #1
 800300e:	409a      	lsls	r2, r3
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	4013      	ands	r3, r2
 8003014:	2b00      	cmp	r3, #0
 8003016:	d012      	beq.n	800303e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	695b      	ldr	r3, [r3, #20]
 800301e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003022:	2b00      	cmp	r3, #0
 8003024:	d00b      	beq.n	800303e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800302a:	2201      	movs	r2, #1
 800302c:	409a      	lsls	r2, r3
 800302e:	693b      	ldr	r3, [r7, #16]
 8003030:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003036:	f043 0202 	orr.w	r2, r3, #2
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003042:	2204      	movs	r2, #4
 8003044:	409a      	lsls	r2, r3
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	4013      	ands	r3, r2
 800304a:	2b00      	cmp	r3, #0
 800304c:	d012      	beq.n	8003074 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f003 0302 	and.w	r3, r3, #2
 8003058:	2b00      	cmp	r3, #0
 800305a:	d00b      	beq.n	8003074 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003060:	2204      	movs	r2, #4
 8003062:	409a      	lsls	r2, r3
 8003064:	693b      	ldr	r3, [r7, #16]
 8003066:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800306c:	f043 0204 	orr.w	r2, r3, #4
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003078:	2210      	movs	r2, #16
 800307a:	409a      	lsls	r2, r3
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	4013      	ands	r3, r2
 8003080:	2b00      	cmp	r3, #0
 8003082:	d043      	beq.n	800310c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f003 0308 	and.w	r3, r3, #8
 800308e:	2b00      	cmp	r3, #0
 8003090:	d03c      	beq.n	800310c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003096:	2210      	movs	r2, #16
 8003098:	409a      	lsls	r2, r3
 800309a:	693b      	ldr	r3, [r7, #16]
 800309c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d018      	beq.n	80030de <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d108      	bne.n	80030cc <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d024      	beq.n	800310c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030c6:	6878      	ldr	r0, [r7, #4]
 80030c8:	4798      	blx	r3
 80030ca:	e01f      	b.n	800310c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d01b      	beq.n	800310c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80030d8:	6878      	ldr	r0, [r7, #4]
 80030da:	4798      	blx	r3
 80030dc:	e016      	b.n	800310c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d107      	bne.n	80030fc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	681a      	ldr	r2, [r3, #0]
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f022 0208 	bic.w	r2, r2, #8
 80030fa:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003100:	2b00      	cmp	r3, #0
 8003102:	d003      	beq.n	800310c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003108:	6878      	ldr	r0, [r7, #4]
 800310a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003110:	2220      	movs	r2, #32
 8003112:	409a      	lsls	r2, r3
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	4013      	ands	r3, r2
 8003118:	2b00      	cmp	r3, #0
 800311a:	f000 808e 	beq.w	800323a <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	f003 0310 	and.w	r3, r3, #16
 8003128:	2b00      	cmp	r3, #0
 800312a:	f000 8086 	beq.w	800323a <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003132:	2220      	movs	r2, #32
 8003134:	409a      	lsls	r2, r3
 8003136:	693b      	ldr	r3, [r7, #16]
 8003138:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003140:	b2db      	uxtb	r3, r3
 8003142:	2b05      	cmp	r3, #5
 8003144:	d136      	bne.n	80031b4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	681a      	ldr	r2, [r3, #0]
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f022 0216 	bic.w	r2, r2, #22
 8003154:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	695a      	ldr	r2, [r3, #20]
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003164:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800316a:	2b00      	cmp	r3, #0
 800316c:	d103      	bne.n	8003176 <HAL_DMA_IRQHandler+0x1da>
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003172:	2b00      	cmp	r3, #0
 8003174:	d007      	beq.n	8003186 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	681a      	ldr	r2, [r3, #0]
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f022 0208 	bic.w	r2, r2, #8
 8003184:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800318a:	223f      	movs	r2, #63	; 0x3f
 800318c:	409a      	lsls	r2, r3
 800318e:	693b      	ldr	r3, [r7, #16]
 8003190:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	2200      	movs	r2, #0
 8003196:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	2201      	movs	r2, #1
 800319e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d07d      	beq.n	80032a6 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80031ae:	6878      	ldr	r0, [r7, #4]
 80031b0:	4798      	blx	r3
        }
        return;
 80031b2:	e078      	b.n	80032a6 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d01c      	beq.n	80031fc <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d108      	bne.n	80031e2 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d030      	beq.n	800323a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031dc:	6878      	ldr	r0, [r7, #4]
 80031de:	4798      	blx	r3
 80031e0:	e02b      	b.n	800323a <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d027      	beq.n	800323a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031ee:	6878      	ldr	r0, [r7, #4]
 80031f0:	4798      	blx	r3
 80031f2:	e022      	b.n	800323a <HAL_DMA_IRQHandler+0x29e>
 80031f4:	20000400 	.word	0x20000400
 80031f8:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003206:	2b00      	cmp	r3, #0
 8003208:	d10f      	bne.n	800322a <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	681a      	ldr	r2, [r3, #0]
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	f022 0210 	bic.w	r2, r2, #16
 8003218:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	2200      	movs	r2, #0
 800321e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	2201      	movs	r2, #1
 8003226:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800322e:	2b00      	cmp	r3, #0
 8003230:	d003      	beq.n	800323a <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003236:	6878      	ldr	r0, [r7, #4]
 8003238:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800323e:	2b00      	cmp	r3, #0
 8003240:	d032      	beq.n	80032a8 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003246:	f003 0301 	and.w	r3, r3, #1
 800324a:	2b00      	cmp	r3, #0
 800324c:	d022      	beq.n	8003294 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	2205      	movs	r2, #5
 8003252:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	681a      	ldr	r2, [r3, #0]
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f022 0201 	bic.w	r2, r2, #1
 8003264:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003266:	68bb      	ldr	r3, [r7, #8]
 8003268:	3301      	adds	r3, #1
 800326a:	60bb      	str	r3, [r7, #8]
 800326c:	697a      	ldr	r2, [r7, #20]
 800326e:	429a      	cmp	r2, r3
 8003270:	d307      	bcc.n	8003282 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	f003 0301 	and.w	r3, r3, #1
 800327c:	2b00      	cmp	r3, #0
 800327e:	d1f2      	bne.n	8003266 <HAL_DMA_IRQHandler+0x2ca>
 8003280:	e000      	b.n	8003284 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8003282:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	2200      	movs	r2, #0
 8003288:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	2201      	movs	r2, #1
 8003290:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003298:	2b00      	cmp	r3, #0
 800329a:	d005      	beq.n	80032a8 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80032a0:	6878      	ldr	r0, [r7, #4]
 80032a2:	4798      	blx	r3
 80032a4:	e000      	b.n	80032a8 <HAL_DMA_IRQHandler+0x30c>
        return;
 80032a6:	bf00      	nop
    }
  }
}
 80032a8:	3718      	adds	r7, #24
 80032aa:	46bd      	mov	sp, r7
 80032ac:	bd80      	pop	{r7, pc}
 80032ae:	bf00      	nop

080032b0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80032b0:	b480      	push	{r7}
 80032b2:	b085      	sub	sp, #20
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	60f8      	str	r0, [r7, #12]
 80032b8:	60b9      	str	r1, [r7, #8]
 80032ba:	607a      	str	r2, [r7, #4]
 80032bc:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	681a      	ldr	r2, [r3, #0]
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80032cc:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	683a      	ldr	r2, [r7, #0]
 80032d4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	689b      	ldr	r3, [r3, #8]
 80032da:	2b40      	cmp	r3, #64	; 0x40
 80032dc:	d108      	bne.n	80032f0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	687a      	ldr	r2, [r7, #4]
 80032e4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	68ba      	ldr	r2, [r7, #8]
 80032ec:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80032ee:	e007      	b.n	8003300 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	68ba      	ldr	r2, [r7, #8]
 80032f6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	687a      	ldr	r2, [r7, #4]
 80032fe:	60da      	str	r2, [r3, #12]
}
 8003300:	bf00      	nop
 8003302:	3714      	adds	r7, #20
 8003304:	46bd      	mov	sp, r7
 8003306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800330a:	4770      	bx	lr

0800330c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800330c:	b480      	push	{r7}
 800330e:	b085      	sub	sp, #20
 8003310:	af00      	add	r7, sp, #0
 8003312:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	b2db      	uxtb	r3, r3
 800331a:	3b10      	subs	r3, #16
 800331c:	4a14      	ldr	r2, [pc, #80]	; (8003370 <DMA_CalcBaseAndBitshift+0x64>)
 800331e:	fba2 2303 	umull	r2, r3, r2, r3
 8003322:	091b      	lsrs	r3, r3, #4
 8003324:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003326:	4a13      	ldr	r2, [pc, #76]	; (8003374 <DMA_CalcBaseAndBitshift+0x68>)
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	4413      	add	r3, r2
 800332c:	781b      	ldrb	r3, [r3, #0]
 800332e:	461a      	mov	r2, r3
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	2b03      	cmp	r3, #3
 8003338:	d909      	bls.n	800334e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003342:	f023 0303 	bic.w	r3, r3, #3
 8003346:	1d1a      	adds	r2, r3, #4
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	659a      	str	r2, [r3, #88]	; 0x58
 800334c:	e007      	b.n	800335e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003356:	f023 0303 	bic.w	r3, r3, #3
 800335a:	687a      	ldr	r2, [r7, #4]
 800335c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003362:	4618      	mov	r0, r3
 8003364:	3714      	adds	r7, #20
 8003366:	46bd      	mov	sp, r7
 8003368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800336c:	4770      	bx	lr
 800336e:	bf00      	nop
 8003370:	aaaaaaab 	.word	0xaaaaaaab
 8003374:	0800fd80 	.word	0x0800fd80

08003378 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003378:	b480      	push	{r7}
 800337a:	b085      	sub	sp, #20
 800337c:	af00      	add	r7, sp, #0
 800337e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003380:	2300      	movs	r3, #0
 8003382:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003388:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	699b      	ldr	r3, [r3, #24]
 800338e:	2b00      	cmp	r3, #0
 8003390:	d11f      	bne.n	80033d2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003392:	68bb      	ldr	r3, [r7, #8]
 8003394:	2b03      	cmp	r3, #3
 8003396:	d855      	bhi.n	8003444 <DMA_CheckFifoParam+0xcc>
 8003398:	a201      	add	r2, pc, #4	; (adr r2, 80033a0 <DMA_CheckFifoParam+0x28>)
 800339a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800339e:	bf00      	nop
 80033a0:	080033b1 	.word	0x080033b1
 80033a4:	080033c3 	.word	0x080033c3
 80033a8:	080033b1 	.word	0x080033b1
 80033ac:	08003445 	.word	0x08003445
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033b4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d045      	beq.n	8003448 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 80033bc:	2301      	movs	r3, #1
 80033be:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80033c0:	e042      	b.n	8003448 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033c6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80033ca:	d13f      	bne.n	800344c <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 80033cc:	2301      	movs	r3, #1
 80033ce:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80033d0:	e03c      	b.n	800344c <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	699b      	ldr	r3, [r3, #24]
 80033d6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80033da:	d121      	bne.n	8003420 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80033dc:	68bb      	ldr	r3, [r7, #8]
 80033de:	2b03      	cmp	r3, #3
 80033e0:	d836      	bhi.n	8003450 <DMA_CheckFifoParam+0xd8>
 80033e2:	a201      	add	r2, pc, #4	; (adr r2, 80033e8 <DMA_CheckFifoParam+0x70>)
 80033e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033e8:	080033f9 	.word	0x080033f9
 80033ec:	080033ff 	.word	0x080033ff
 80033f0:	080033f9 	.word	0x080033f9
 80033f4:	08003411 	.word	0x08003411
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80033f8:	2301      	movs	r3, #1
 80033fa:	73fb      	strb	r3, [r7, #15]
      break;
 80033fc:	e02f      	b.n	800345e <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003402:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003406:	2b00      	cmp	r3, #0
 8003408:	d024      	beq.n	8003454 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 800340a:	2301      	movs	r3, #1
 800340c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800340e:	e021      	b.n	8003454 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003414:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003418:	d11e      	bne.n	8003458 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 800341a:	2301      	movs	r3, #1
 800341c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800341e:	e01b      	b.n	8003458 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003420:	68bb      	ldr	r3, [r7, #8]
 8003422:	2b02      	cmp	r3, #2
 8003424:	d902      	bls.n	800342c <DMA_CheckFifoParam+0xb4>
 8003426:	2b03      	cmp	r3, #3
 8003428:	d003      	beq.n	8003432 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800342a:	e018      	b.n	800345e <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 800342c:	2301      	movs	r3, #1
 800342e:	73fb      	strb	r3, [r7, #15]
      break;
 8003430:	e015      	b.n	800345e <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003436:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800343a:	2b00      	cmp	r3, #0
 800343c:	d00e      	beq.n	800345c <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 800343e:	2301      	movs	r3, #1
 8003440:	73fb      	strb	r3, [r7, #15]
      break;
 8003442:	e00b      	b.n	800345c <DMA_CheckFifoParam+0xe4>
      break;
 8003444:	bf00      	nop
 8003446:	e00a      	b.n	800345e <DMA_CheckFifoParam+0xe6>
      break;
 8003448:	bf00      	nop
 800344a:	e008      	b.n	800345e <DMA_CheckFifoParam+0xe6>
      break;
 800344c:	bf00      	nop
 800344e:	e006      	b.n	800345e <DMA_CheckFifoParam+0xe6>
      break;
 8003450:	bf00      	nop
 8003452:	e004      	b.n	800345e <DMA_CheckFifoParam+0xe6>
      break;
 8003454:	bf00      	nop
 8003456:	e002      	b.n	800345e <DMA_CheckFifoParam+0xe6>
      break;   
 8003458:	bf00      	nop
 800345a:	e000      	b.n	800345e <DMA_CheckFifoParam+0xe6>
      break;
 800345c:	bf00      	nop
    }
  } 
  
  return status; 
 800345e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003460:	4618      	mov	r0, r3
 8003462:	3714      	adds	r7, #20
 8003464:	46bd      	mov	sp, r7
 8003466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800346a:	4770      	bx	lr

0800346c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800346c:	b580      	push	{r7, lr}
 800346e:	b088      	sub	sp, #32
 8003470:	af00      	add	r7, sp, #0
 8003472:	6078      	str	r0, [r7, #4]
 8003474:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003476:	2300      	movs	r3, #0
 8003478:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800347a:	2300      	movs	r3, #0
 800347c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800347e:	2300      	movs	r3, #0
 8003480:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	4a3b      	ldr	r2, [pc, #236]	; (8003574 <HAL_GPIO_Init+0x108>)
 8003486:	4293      	cmp	r3, r2
 8003488:	d017      	beq.n	80034ba <HAL_GPIO_Init+0x4e>
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	4a3a      	ldr	r2, [pc, #232]	; (8003578 <HAL_GPIO_Init+0x10c>)
 800348e:	4293      	cmp	r3, r2
 8003490:	d013      	beq.n	80034ba <HAL_GPIO_Init+0x4e>
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	4a39      	ldr	r2, [pc, #228]	; (800357c <HAL_GPIO_Init+0x110>)
 8003496:	4293      	cmp	r3, r2
 8003498:	d00f      	beq.n	80034ba <HAL_GPIO_Init+0x4e>
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	4a38      	ldr	r2, [pc, #224]	; (8003580 <HAL_GPIO_Init+0x114>)
 800349e:	4293      	cmp	r3, r2
 80034a0:	d00b      	beq.n	80034ba <HAL_GPIO_Init+0x4e>
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	4a37      	ldr	r2, [pc, #220]	; (8003584 <HAL_GPIO_Init+0x118>)
 80034a6:	4293      	cmp	r3, r2
 80034a8:	d007      	beq.n	80034ba <HAL_GPIO_Init+0x4e>
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	4a36      	ldr	r2, [pc, #216]	; (8003588 <HAL_GPIO_Init+0x11c>)
 80034ae:	4293      	cmp	r3, r2
 80034b0:	d003      	beq.n	80034ba <HAL_GPIO_Init+0x4e>
 80034b2:	21b3      	movs	r1, #179	; 0xb3
 80034b4:	4835      	ldr	r0, [pc, #212]	; (800358c <HAL_GPIO_Init+0x120>)
 80034b6:	f7fe fe80 	bl	80021ba <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 80034ba:	683b      	ldr	r3, [r7, #0]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	b29b      	uxth	r3, r3
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d005      	beq.n	80034d0 <HAL_GPIO_Init+0x64>
 80034c4:	683b      	ldr	r3, [r7, #0]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	0c1b      	lsrs	r3, r3, #16
 80034ca:	041b      	lsls	r3, r3, #16
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d003      	beq.n	80034d8 <HAL_GPIO_Init+0x6c>
 80034d0:	21b4      	movs	r1, #180	; 0xb4
 80034d2:	482e      	ldr	r0, [pc, #184]	; (800358c <HAL_GPIO_Init+0x120>)
 80034d4:	f7fe fe71 	bl	80021ba <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 80034d8:	683b      	ldr	r3, [r7, #0]
 80034da:	685b      	ldr	r3, [r3, #4]
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d035      	beq.n	800354c <HAL_GPIO_Init+0xe0>
 80034e0:	683b      	ldr	r3, [r7, #0]
 80034e2:	685b      	ldr	r3, [r3, #4]
 80034e4:	2b01      	cmp	r3, #1
 80034e6:	d031      	beq.n	800354c <HAL_GPIO_Init+0xe0>
 80034e8:	683b      	ldr	r3, [r7, #0]
 80034ea:	685b      	ldr	r3, [r3, #4]
 80034ec:	2b11      	cmp	r3, #17
 80034ee:	d02d      	beq.n	800354c <HAL_GPIO_Init+0xe0>
 80034f0:	683b      	ldr	r3, [r7, #0]
 80034f2:	685b      	ldr	r3, [r3, #4]
 80034f4:	2b02      	cmp	r3, #2
 80034f6:	d029      	beq.n	800354c <HAL_GPIO_Init+0xe0>
 80034f8:	683b      	ldr	r3, [r7, #0]
 80034fa:	685b      	ldr	r3, [r3, #4]
 80034fc:	2b12      	cmp	r3, #18
 80034fe:	d025      	beq.n	800354c <HAL_GPIO_Init+0xe0>
 8003500:	683b      	ldr	r3, [r7, #0]
 8003502:	685b      	ldr	r3, [r3, #4]
 8003504:	4a22      	ldr	r2, [pc, #136]	; (8003590 <HAL_GPIO_Init+0x124>)
 8003506:	4293      	cmp	r3, r2
 8003508:	d020      	beq.n	800354c <HAL_GPIO_Init+0xe0>
 800350a:	683b      	ldr	r3, [r7, #0]
 800350c:	685b      	ldr	r3, [r3, #4]
 800350e:	4a21      	ldr	r2, [pc, #132]	; (8003594 <HAL_GPIO_Init+0x128>)
 8003510:	4293      	cmp	r3, r2
 8003512:	d01b      	beq.n	800354c <HAL_GPIO_Init+0xe0>
 8003514:	683b      	ldr	r3, [r7, #0]
 8003516:	685b      	ldr	r3, [r3, #4]
 8003518:	4a1f      	ldr	r2, [pc, #124]	; (8003598 <HAL_GPIO_Init+0x12c>)
 800351a:	4293      	cmp	r3, r2
 800351c:	d016      	beq.n	800354c <HAL_GPIO_Init+0xe0>
 800351e:	683b      	ldr	r3, [r7, #0]
 8003520:	685b      	ldr	r3, [r3, #4]
 8003522:	4a1e      	ldr	r2, [pc, #120]	; (800359c <HAL_GPIO_Init+0x130>)
 8003524:	4293      	cmp	r3, r2
 8003526:	d011      	beq.n	800354c <HAL_GPIO_Init+0xe0>
 8003528:	683b      	ldr	r3, [r7, #0]
 800352a:	685b      	ldr	r3, [r3, #4]
 800352c:	4a1c      	ldr	r2, [pc, #112]	; (80035a0 <HAL_GPIO_Init+0x134>)
 800352e:	4293      	cmp	r3, r2
 8003530:	d00c      	beq.n	800354c <HAL_GPIO_Init+0xe0>
 8003532:	683b      	ldr	r3, [r7, #0]
 8003534:	685b      	ldr	r3, [r3, #4]
 8003536:	4a1b      	ldr	r2, [pc, #108]	; (80035a4 <HAL_GPIO_Init+0x138>)
 8003538:	4293      	cmp	r3, r2
 800353a:	d007      	beq.n	800354c <HAL_GPIO_Init+0xe0>
 800353c:	683b      	ldr	r3, [r7, #0]
 800353e:	685b      	ldr	r3, [r3, #4]
 8003540:	2b03      	cmp	r3, #3
 8003542:	d003      	beq.n	800354c <HAL_GPIO_Init+0xe0>
 8003544:	21b5      	movs	r1, #181	; 0xb5
 8003546:	4811      	ldr	r0, [pc, #68]	; (800358c <HAL_GPIO_Init+0x120>)
 8003548:	f7fe fe37 	bl	80021ba <assert_failed>
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 800354c:	683b      	ldr	r3, [r7, #0]
 800354e:	689b      	ldr	r3, [r3, #8]
 8003550:	2b00      	cmp	r3, #0
 8003552:	d00b      	beq.n	800356c <HAL_GPIO_Init+0x100>
 8003554:	683b      	ldr	r3, [r7, #0]
 8003556:	689b      	ldr	r3, [r3, #8]
 8003558:	2b01      	cmp	r3, #1
 800355a:	d007      	beq.n	800356c <HAL_GPIO_Init+0x100>
 800355c:	683b      	ldr	r3, [r7, #0]
 800355e:	689b      	ldr	r3, [r3, #8]
 8003560:	2b02      	cmp	r3, #2
 8003562:	d003      	beq.n	800356c <HAL_GPIO_Init+0x100>
 8003564:	21b6      	movs	r1, #182	; 0xb6
 8003566:	4809      	ldr	r0, [pc, #36]	; (800358c <HAL_GPIO_Init+0x120>)
 8003568:	f7fe fe27 	bl	80021ba <assert_failed>

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800356c:	2300      	movs	r3, #0
 800356e:	61fb      	str	r3, [r7, #28]
 8003570:	e211      	b.n	8003996 <HAL_GPIO_Init+0x52a>
 8003572:	bf00      	nop
 8003574:	40020000 	.word	0x40020000
 8003578:	40020400 	.word	0x40020400
 800357c:	40020800 	.word	0x40020800
 8003580:	40020c00 	.word	0x40020c00
 8003584:	40021000 	.word	0x40021000
 8003588:	40021c00 	.word	0x40021c00
 800358c:	0800fa74 	.word	0x0800fa74
 8003590:	10110000 	.word	0x10110000
 8003594:	10210000 	.word	0x10210000
 8003598:	10310000 	.word	0x10310000
 800359c:	10120000 	.word	0x10120000
 80035a0:	10220000 	.word	0x10220000
 80035a4:	10320000 	.word	0x10320000
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80035a8:	2201      	movs	r2, #1
 80035aa:	69fb      	ldr	r3, [r7, #28]
 80035ac:	fa02 f303 	lsl.w	r3, r2, r3
 80035b0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80035b2:	683b      	ldr	r3, [r7, #0]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	697a      	ldr	r2, [r7, #20]
 80035b8:	4013      	ands	r3, r2
 80035ba:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80035bc:	693a      	ldr	r2, [r7, #16]
 80035be:	697b      	ldr	r3, [r7, #20]
 80035c0:	429a      	cmp	r2, r3
 80035c2:	f040 81e5 	bne.w	8003990 <HAL_GPIO_Init+0x524>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80035c6:	683b      	ldr	r3, [r7, #0]
 80035c8:	685b      	ldr	r3, [r3, #4]
 80035ca:	2b01      	cmp	r3, #1
 80035cc:	d00b      	beq.n	80035e6 <HAL_GPIO_Init+0x17a>
 80035ce:	683b      	ldr	r3, [r7, #0]
 80035d0:	685b      	ldr	r3, [r3, #4]
 80035d2:	2b02      	cmp	r3, #2
 80035d4:	d007      	beq.n	80035e6 <HAL_GPIO_Init+0x17a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80035d6:	683b      	ldr	r3, [r7, #0]
 80035d8:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80035da:	2b11      	cmp	r3, #17
 80035dc:	d003      	beq.n	80035e6 <HAL_GPIO_Init+0x17a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80035de:	683b      	ldr	r3, [r7, #0]
 80035e0:	685b      	ldr	r3, [r3, #4]
 80035e2:	2b12      	cmp	r3, #18
 80035e4:	d144      	bne.n	8003670 <HAL_GPIO_Init+0x204>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 80035e6:	683b      	ldr	r3, [r7, #0]
 80035e8:	68db      	ldr	r3, [r3, #12]
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d00f      	beq.n	800360e <HAL_GPIO_Init+0x1a2>
 80035ee:	683b      	ldr	r3, [r7, #0]
 80035f0:	68db      	ldr	r3, [r3, #12]
 80035f2:	2b01      	cmp	r3, #1
 80035f4:	d00b      	beq.n	800360e <HAL_GPIO_Init+0x1a2>
 80035f6:	683b      	ldr	r3, [r7, #0]
 80035f8:	68db      	ldr	r3, [r3, #12]
 80035fa:	2b02      	cmp	r3, #2
 80035fc:	d007      	beq.n	800360e <HAL_GPIO_Init+0x1a2>
 80035fe:	683b      	ldr	r3, [r7, #0]
 8003600:	68db      	ldr	r3, [r3, #12]
 8003602:	2b03      	cmp	r3, #3
 8003604:	d003      	beq.n	800360e <HAL_GPIO_Init+0x1a2>
 8003606:	21c8      	movs	r1, #200	; 0xc8
 8003608:	489f      	ldr	r0, [pc, #636]	; (8003888 <HAL_GPIO_Init+0x41c>)
 800360a:	f7fe fdd6 	bl	80021ba <assert_failed>
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	689b      	ldr	r3, [r3, #8]
 8003612:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003614:	69fb      	ldr	r3, [r7, #28]
 8003616:	005b      	lsls	r3, r3, #1
 8003618:	2203      	movs	r2, #3
 800361a:	fa02 f303 	lsl.w	r3, r2, r3
 800361e:	43db      	mvns	r3, r3
 8003620:	69ba      	ldr	r2, [r7, #24]
 8003622:	4013      	ands	r3, r2
 8003624:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003626:	683b      	ldr	r3, [r7, #0]
 8003628:	68da      	ldr	r2, [r3, #12]
 800362a:	69fb      	ldr	r3, [r7, #28]
 800362c:	005b      	lsls	r3, r3, #1
 800362e:	fa02 f303 	lsl.w	r3, r2, r3
 8003632:	69ba      	ldr	r2, [r7, #24]
 8003634:	4313      	orrs	r3, r2
 8003636:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	69ba      	ldr	r2, [r7, #24]
 800363c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	685b      	ldr	r3, [r3, #4]
 8003642:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003644:	2201      	movs	r2, #1
 8003646:	69fb      	ldr	r3, [r7, #28]
 8003648:	fa02 f303 	lsl.w	r3, r2, r3
 800364c:	43db      	mvns	r3, r3
 800364e:	69ba      	ldr	r2, [r7, #24]
 8003650:	4013      	ands	r3, r2
 8003652:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003654:	683b      	ldr	r3, [r7, #0]
 8003656:	685b      	ldr	r3, [r3, #4]
 8003658:	091b      	lsrs	r3, r3, #4
 800365a:	f003 0201 	and.w	r2, r3, #1
 800365e:	69fb      	ldr	r3, [r7, #28]
 8003660:	fa02 f303 	lsl.w	r3, r2, r3
 8003664:	69ba      	ldr	r2, [r7, #24]
 8003666:	4313      	orrs	r3, r2
 8003668:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	69ba      	ldr	r2, [r7, #24]
 800366e:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	68db      	ldr	r3, [r3, #12]
 8003674:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003676:	69fb      	ldr	r3, [r7, #28]
 8003678:	005b      	lsls	r3, r3, #1
 800367a:	2203      	movs	r2, #3
 800367c:	fa02 f303 	lsl.w	r3, r2, r3
 8003680:	43db      	mvns	r3, r3
 8003682:	69ba      	ldr	r2, [r7, #24]
 8003684:	4013      	ands	r3, r2
 8003686:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003688:	683b      	ldr	r3, [r7, #0]
 800368a:	689a      	ldr	r2, [r3, #8]
 800368c:	69fb      	ldr	r3, [r7, #28]
 800368e:	005b      	lsls	r3, r3, #1
 8003690:	fa02 f303 	lsl.w	r3, r2, r3
 8003694:	69ba      	ldr	r2, [r7, #24]
 8003696:	4313      	orrs	r3, r2
 8003698:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	69ba      	ldr	r2, [r7, #24]
 800369e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80036a0:	683b      	ldr	r3, [r7, #0]
 80036a2:	685b      	ldr	r3, [r3, #4]
 80036a4:	2b02      	cmp	r3, #2
 80036a6:	d004      	beq.n	80036b2 <HAL_GPIO_Init+0x246>
 80036a8:	683b      	ldr	r3, [r7, #0]
 80036aa:	685b      	ldr	r3, [r3, #4]
 80036ac:	2b12      	cmp	r3, #18
 80036ae:	f040 80a0 	bne.w	80037f2 <HAL_GPIO_Init+0x386>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 80036b2:	683b      	ldr	r3, [r7, #0]
 80036b4:	691b      	ldr	r3, [r3, #16]
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d077      	beq.n	80037aa <HAL_GPIO_Init+0x33e>
 80036ba:	683b      	ldr	r3, [r7, #0]
 80036bc:	691b      	ldr	r3, [r3, #16]
 80036be:	2b09      	cmp	r3, #9
 80036c0:	d073      	beq.n	80037aa <HAL_GPIO_Init+0x33e>
 80036c2:	683b      	ldr	r3, [r7, #0]
 80036c4:	691b      	ldr	r3, [r3, #16]
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d06f      	beq.n	80037aa <HAL_GPIO_Init+0x33e>
 80036ca:	683b      	ldr	r3, [r7, #0]
 80036cc:	691b      	ldr	r3, [r3, #16]
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d06b      	beq.n	80037aa <HAL_GPIO_Init+0x33e>
 80036d2:	683b      	ldr	r3, [r7, #0]
 80036d4:	691b      	ldr	r3, [r3, #16]
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d067      	beq.n	80037aa <HAL_GPIO_Init+0x33e>
 80036da:	683b      	ldr	r3, [r7, #0]
 80036dc:	691b      	ldr	r3, [r3, #16]
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d063      	beq.n	80037aa <HAL_GPIO_Init+0x33e>
 80036e2:	683b      	ldr	r3, [r7, #0]
 80036e4:	691b      	ldr	r3, [r3, #16]
 80036e6:	2b01      	cmp	r3, #1
 80036e8:	d05f      	beq.n	80037aa <HAL_GPIO_Init+0x33e>
 80036ea:	683b      	ldr	r3, [r7, #0]
 80036ec:	691b      	ldr	r3, [r3, #16]
 80036ee:	2b01      	cmp	r3, #1
 80036f0:	d05b      	beq.n	80037aa <HAL_GPIO_Init+0x33e>
 80036f2:	683b      	ldr	r3, [r7, #0]
 80036f4:	691b      	ldr	r3, [r3, #16]
 80036f6:	2b02      	cmp	r3, #2
 80036f8:	d057      	beq.n	80037aa <HAL_GPIO_Init+0x33e>
 80036fa:	683b      	ldr	r3, [r7, #0]
 80036fc:	691b      	ldr	r3, [r3, #16]
 80036fe:	2b02      	cmp	r3, #2
 8003700:	d053      	beq.n	80037aa <HAL_GPIO_Init+0x33e>
 8003702:	683b      	ldr	r3, [r7, #0]
 8003704:	691b      	ldr	r3, [r3, #16]
 8003706:	2b02      	cmp	r3, #2
 8003708:	d04f      	beq.n	80037aa <HAL_GPIO_Init+0x33e>
 800370a:	683b      	ldr	r3, [r7, #0]
 800370c:	691b      	ldr	r3, [r3, #16]
 800370e:	2b04      	cmp	r3, #4
 8003710:	d04b      	beq.n	80037aa <HAL_GPIO_Init+0x33e>
 8003712:	683b      	ldr	r3, [r7, #0]
 8003714:	691b      	ldr	r3, [r3, #16]
 8003716:	2b04      	cmp	r3, #4
 8003718:	d047      	beq.n	80037aa <HAL_GPIO_Init+0x33e>
 800371a:	683b      	ldr	r3, [r7, #0]
 800371c:	691b      	ldr	r3, [r3, #16]
 800371e:	2b04      	cmp	r3, #4
 8003720:	d043      	beq.n	80037aa <HAL_GPIO_Init+0x33e>
 8003722:	683b      	ldr	r3, [r7, #0]
 8003724:	691b      	ldr	r3, [r3, #16]
 8003726:	2b05      	cmp	r3, #5
 8003728:	d03f      	beq.n	80037aa <HAL_GPIO_Init+0x33e>
 800372a:	683b      	ldr	r3, [r7, #0]
 800372c:	691b      	ldr	r3, [r3, #16]
 800372e:	2b05      	cmp	r3, #5
 8003730:	d03b      	beq.n	80037aa <HAL_GPIO_Init+0x33e>
 8003732:	683b      	ldr	r3, [r7, #0]
 8003734:	691b      	ldr	r3, [r3, #16]
 8003736:	2b05      	cmp	r3, #5
 8003738:	d037      	beq.n	80037aa <HAL_GPIO_Init+0x33e>
 800373a:	683b      	ldr	r3, [r7, #0]
 800373c:	691b      	ldr	r3, [r3, #16]
 800373e:	2b06      	cmp	r3, #6
 8003740:	d033      	beq.n	80037aa <HAL_GPIO_Init+0x33e>
 8003742:	683b      	ldr	r3, [r7, #0]
 8003744:	691b      	ldr	r3, [r3, #16]
 8003746:	2b06      	cmp	r3, #6
 8003748:	d02f      	beq.n	80037aa <HAL_GPIO_Init+0x33e>
 800374a:	683b      	ldr	r3, [r7, #0]
 800374c:	691b      	ldr	r3, [r3, #16]
 800374e:	2b05      	cmp	r3, #5
 8003750:	d02b      	beq.n	80037aa <HAL_GPIO_Init+0x33e>
 8003752:	683b      	ldr	r3, [r7, #0]
 8003754:	691b      	ldr	r3, [r3, #16]
 8003756:	2b06      	cmp	r3, #6
 8003758:	d027      	beq.n	80037aa <HAL_GPIO_Init+0x33e>
 800375a:	683b      	ldr	r3, [r7, #0]
 800375c:	691b      	ldr	r3, [r3, #16]
 800375e:	2b07      	cmp	r3, #7
 8003760:	d023      	beq.n	80037aa <HAL_GPIO_Init+0x33e>
 8003762:	683b      	ldr	r3, [r7, #0]
 8003764:	691b      	ldr	r3, [r3, #16]
 8003766:	2b07      	cmp	r3, #7
 8003768:	d01f      	beq.n	80037aa <HAL_GPIO_Init+0x33e>
 800376a:	683b      	ldr	r3, [r7, #0]
 800376c:	691b      	ldr	r3, [r3, #16]
 800376e:	2b07      	cmp	r3, #7
 8003770:	d01b      	beq.n	80037aa <HAL_GPIO_Init+0x33e>
 8003772:	683b      	ldr	r3, [r7, #0]
 8003774:	691b      	ldr	r3, [r3, #16]
 8003776:	2b08      	cmp	r3, #8
 8003778:	d017      	beq.n	80037aa <HAL_GPIO_Init+0x33e>
 800377a:	683b      	ldr	r3, [r7, #0]
 800377c:	691b      	ldr	r3, [r3, #16]
 800377e:	2b0a      	cmp	r3, #10
 8003780:	d013      	beq.n	80037aa <HAL_GPIO_Init+0x33e>
 8003782:	683b      	ldr	r3, [r7, #0]
 8003784:	691b      	ldr	r3, [r3, #16]
 8003786:	2b09      	cmp	r3, #9
 8003788:	d00f      	beq.n	80037aa <HAL_GPIO_Init+0x33e>
 800378a:	683b      	ldr	r3, [r7, #0]
 800378c:	691b      	ldr	r3, [r3, #16]
 800378e:	2b09      	cmp	r3, #9
 8003790:	d00b      	beq.n	80037aa <HAL_GPIO_Init+0x33e>
 8003792:	683b      	ldr	r3, [r7, #0]
 8003794:	691b      	ldr	r3, [r3, #16]
 8003796:	2b0c      	cmp	r3, #12
 8003798:	d007      	beq.n	80037aa <HAL_GPIO_Init+0x33e>
 800379a:	683b      	ldr	r3, [r7, #0]
 800379c:	691b      	ldr	r3, [r3, #16]
 800379e:	2b0f      	cmp	r3, #15
 80037a0:	d003      	beq.n	80037aa <HAL_GPIO_Init+0x33e>
 80037a2:	21e0      	movs	r1, #224	; 0xe0
 80037a4:	4838      	ldr	r0, [pc, #224]	; (8003888 <HAL_GPIO_Init+0x41c>)
 80037a6:	f7fe fd08 	bl	80021ba <assert_failed>
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80037aa:	69fb      	ldr	r3, [r7, #28]
 80037ac:	08da      	lsrs	r2, r3, #3
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	3208      	adds	r2, #8
 80037b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80037b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80037b8:	69fb      	ldr	r3, [r7, #28]
 80037ba:	f003 0307 	and.w	r3, r3, #7
 80037be:	009b      	lsls	r3, r3, #2
 80037c0:	220f      	movs	r2, #15
 80037c2:	fa02 f303 	lsl.w	r3, r2, r3
 80037c6:	43db      	mvns	r3, r3
 80037c8:	69ba      	ldr	r2, [r7, #24]
 80037ca:	4013      	ands	r3, r2
 80037cc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80037ce:	683b      	ldr	r3, [r7, #0]
 80037d0:	691a      	ldr	r2, [r3, #16]
 80037d2:	69fb      	ldr	r3, [r7, #28]
 80037d4:	f003 0307 	and.w	r3, r3, #7
 80037d8:	009b      	lsls	r3, r3, #2
 80037da:	fa02 f303 	lsl.w	r3, r2, r3
 80037de:	69ba      	ldr	r2, [r7, #24]
 80037e0:	4313      	orrs	r3, r2
 80037e2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80037e4:	69fb      	ldr	r3, [r7, #28]
 80037e6:	08da      	lsrs	r2, r3, #3
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	3208      	adds	r2, #8
 80037ec:	69b9      	ldr	r1, [r7, #24]
 80037ee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80037f8:	69fb      	ldr	r3, [r7, #28]
 80037fa:	005b      	lsls	r3, r3, #1
 80037fc:	2203      	movs	r2, #3
 80037fe:	fa02 f303 	lsl.w	r3, r2, r3
 8003802:	43db      	mvns	r3, r3
 8003804:	69ba      	ldr	r2, [r7, #24]
 8003806:	4013      	ands	r3, r2
 8003808:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800380a:	683b      	ldr	r3, [r7, #0]
 800380c:	685b      	ldr	r3, [r3, #4]
 800380e:	f003 0203 	and.w	r2, r3, #3
 8003812:	69fb      	ldr	r3, [r7, #28]
 8003814:	005b      	lsls	r3, r3, #1
 8003816:	fa02 f303 	lsl.w	r3, r2, r3
 800381a:	69ba      	ldr	r2, [r7, #24]
 800381c:	4313      	orrs	r3, r2
 800381e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	69ba      	ldr	r2, [r7, #24]
 8003824:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003826:	683b      	ldr	r3, [r7, #0]
 8003828:	685b      	ldr	r3, [r3, #4]
 800382a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800382e:	2b00      	cmp	r3, #0
 8003830:	f000 80ae 	beq.w	8003990 <HAL_GPIO_Init+0x524>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003834:	2300      	movs	r3, #0
 8003836:	60fb      	str	r3, [r7, #12]
 8003838:	4b14      	ldr	r3, [pc, #80]	; (800388c <HAL_GPIO_Init+0x420>)
 800383a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800383c:	4a13      	ldr	r2, [pc, #76]	; (800388c <HAL_GPIO_Init+0x420>)
 800383e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003842:	6453      	str	r3, [r2, #68]	; 0x44
 8003844:	4b11      	ldr	r3, [pc, #68]	; (800388c <HAL_GPIO_Init+0x420>)
 8003846:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003848:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800384c:	60fb      	str	r3, [r7, #12]
 800384e:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003850:	4a0f      	ldr	r2, [pc, #60]	; (8003890 <HAL_GPIO_Init+0x424>)
 8003852:	69fb      	ldr	r3, [r7, #28]
 8003854:	089b      	lsrs	r3, r3, #2
 8003856:	3302      	adds	r3, #2
 8003858:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800385c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800385e:	69fb      	ldr	r3, [r7, #28]
 8003860:	f003 0303 	and.w	r3, r3, #3
 8003864:	009b      	lsls	r3, r3, #2
 8003866:	220f      	movs	r2, #15
 8003868:	fa02 f303 	lsl.w	r3, r2, r3
 800386c:	43db      	mvns	r3, r3
 800386e:	69ba      	ldr	r2, [r7, #24]
 8003870:	4013      	ands	r3, r2
 8003872:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	4a07      	ldr	r2, [pc, #28]	; (8003894 <HAL_GPIO_Init+0x428>)
 8003878:	4293      	cmp	r3, r2
 800387a:	d025      	beq.n	80038c8 <HAL_GPIO_Init+0x45c>
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	4a06      	ldr	r2, [pc, #24]	; (8003898 <HAL_GPIO_Init+0x42c>)
 8003880:	4293      	cmp	r3, r2
 8003882:	d01f      	beq.n	80038c4 <HAL_GPIO_Init+0x458>
 8003884:	e00a      	b.n	800389c <HAL_GPIO_Init+0x430>
 8003886:	bf00      	nop
 8003888:	0800fa74 	.word	0x0800fa74
 800388c:	40023800 	.word	0x40023800
 8003890:	40013800 	.word	0x40013800
 8003894:	40020000 	.word	0x40020000
 8003898:	40020400 	.word	0x40020400
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	4a42      	ldr	r2, [pc, #264]	; (80039a8 <HAL_GPIO_Init+0x53c>)
 80038a0:	4293      	cmp	r3, r2
 80038a2:	d00d      	beq.n	80038c0 <HAL_GPIO_Init+0x454>
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	4a41      	ldr	r2, [pc, #260]	; (80039ac <HAL_GPIO_Init+0x540>)
 80038a8:	4293      	cmp	r3, r2
 80038aa:	d007      	beq.n	80038bc <HAL_GPIO_Init+0x450>
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	4a40      	ldr	r2, [pc, #256]	; (80039b0 <HAL_GPIO_Init+0x544>)
 80038b0:	4293      	cmp	r3, r2
 80038b2:	d101      	bne.n	80038b8 <HAL_GPIO_Init+0x44c>
 80038b4:	2304      	movs	r3, #4
 80038b6:	e008      	b.n	80038ca <HAL_GPIO_Init+0x45e>
 80038b8:	2307      	movs	r3, #7
 80038ba:	e006      	b.n	80038ca <HAL_GPIO_Init+0x45e>
 80038bc:	2303      	movs	r3, #3
 80038be:	e004      	b.n	80038ca <HAL_GPIO_Init+0x45e>
 80038c0:	2302      	movs	r3, #2
 80038c2:	e002      	b.n	80038ca <HAL_GPIO_Init+0x45e>
 80038c4:	2301      	movs	r3, #1
 80038c6:	e000      	b.n	80038ca <HAL_GPIO_Init+0x45e>
 80038c8:	2300      	movs	r3, #0
 80038ca:	69fa      	ldr	r2, [r7, #28]
 80038cc:	f002 0203 	and.w	r2, r2, #3
 80038d0:	0092      	lsls	r2, r2, #2
 80038d2:	4093      	lsls	r3, r2
 80038d4:	69ba      	ldr	r2, [r7, #24]
 80038d6:	4313      	orrs	r3, r2
 80038d8:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80038da:	4936      	ldr	r1, [pc, #216]	; (80039b4 <HAL_GPIO_Init+0x548>)
 80038dc:	69fb      	ldr	r3, [r7, #28]
 80038de:	089b      	lsrs	r3, r3, #2
 80038e0:	3302      	adds	r3, #2
 80038e2:	69ba      	ldr	r2, [r7, #24]
 80038e4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80038e8:	4b33      	ldr	r3, [pc, #204]	; (80039b8 <HAL_GPIO_Init+0x54c>)
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80038ee:	693b      	ldr	r3, [r7, #16]
 80038f0:	43db      	mvns	r3, r3
 80038f2:	69ba      	ldr	r2, [r7, #24]
 80038f4:	4013      	ands	r3, r2
 80038f6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80038f8:	683b      	ldr	r3, [r7, #0]
 80038fa:	685b      	ldr	r3, [r3, #4]
 80038fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003900:	2b00      	cmp	r3, #0
 8003902:	d003      	beq.n	800390c <HAL_GPIO_Init+0x4a0>
        {
          temp |= iocurrent;
 8003904:	69ba      	ldr	r2, [r7, #24]
 8003906:	693b      	ldr	r3, [r7, #16]
 8003908:	4313      	orrs	r3, r2
 800390a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800390c:	4a2a      	ldr	r2, [pc, #168]	; (80039b8 <HAL_GPIO_Init+0x54c>)
 800390e:	69bb      	ldr	r3, [r7, #24]
 8003910:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003912:	4b29      	ldr	r3, [pc, #164]	; (80039b8 <HAL_GPIO_Init+0x54c>)
 8003914:	685b      	ldr	r3, [r3, #4]
 8003916:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003918:	693b      	ldr	r3, [r7, #16]
 800391a:	43db      	mvns	r3, r3
 800391c:	69ba      	ldr	r2, [r7, #24]
 800391e:	4013      	ands	r3, r2
 8003920:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003922:	683b      	ldr	r3, [r7, #0]
 8003924:	685b      	ldr	r3, [r3, #4]
 8003926:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800392a:	2b00      	cmp	r3, #0
 800392c:	d003      	beq.n	8003936 <HAL_GPIO_Init+0x4ca>
        {
          temp |= iocurrent;
 800392e:	69ba      	ldr	r2, [r7, #24]
 8003930:	693b      	ldr	r3, [r7, #16]
 8003932:	4313      	orrs	r3, r2
 8003934:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003936:	4a20      	ldr	r2, [pc, #128]	; (80039b8 <HAL_GPIO_Init+0x54c>)
 8003938:	69bb      	ldr	r3, [r7, #24]
 800393a:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800393c:	4b1e      	ldr	r3, [pc, #120]	; (80039b8 <HAL_GPIO_Init+0x54c>)
 800393e:	689b      	ldr	r3, [r3, #8]
 8003940:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003942:	693b      	ldr	r3, [r7, #16]
 8003944:	43db      	mvns	r3, r3
 8003946:	69ba      	ldr	r2, [r7, #24]
 8003948:	4013      	ands	r3, r2
 800394a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800394c:	683b      	ldr	r3, [r7, #0]
 800394e:	685b      	ldr	r3, [r3, #4]
 8003950:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003954:	2b00      	cmp	r3, #0
 8003956:	d003      	beq.n	8003960 <HAL_GPIO_Init+0x4f4>
        {
          temp |= iocurrent;
 8003958:	69ba      	ldr	r2, [r7, #24]
 800395a:	693b      	ldr	r3, [r7, #16]
 800395c:	4313      	orrs	r3, r2
 800395e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003960:	4a15      	ldr	r2, [pc, #84]	; (80039b8 <HAL_GPIO_Init+0x54c>)
 8003962:	69bb      	ldr	r3, [r7, #24]
 8003964:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003966:	4b14      	ldr	r3, [pc, #80]	; (80039b8 <HAL_GPIO_Init+0x54c>)
 8003968:	68db      	ldr	r3, [r3, #12]
 800396a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800396c:	693b      	ldr	r3, [r7, #16]
 800396e:	43db      	mvns	r3, r3
 8003970:	69ba      	ldr	r2, [r7, #24]
 8003972:	4013      	ands	r3, r2
 8003974:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003976:	683b      	ldr	r3, [r7, #0]
 8003978:	685b      	ldr	r3, [r3, #4]
 800397a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800397e:	2b00      	cmp	r3, #0
 8003980:	d003      	beq.n	800398a <HAL_GPIO_Init+0x51e>
        {
          temp |= iocurrent;
 8003982:	69ba      	ldr	r2, [r7, #24]
 8003984:	693b      	ldr	r3, [r7, #16]
 8003986:	4313      	orrs	r3, r2
 8003988:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800398a:	4a0b      	ldr	r2, [pc, #44]	; (80039b8 <HAL_GPIO_Init+0x54c>)
 800398c:	69bb      	ldr	r3, [r7, #24]
 800398e:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003990:	69fb      	ldr	r3, [r7, #28]
 8003992:	3301      	adds	r3, #1
 8003994:	61fb      	str	r3, [r7, #28]
 8003996:	69fb      	ldr	r3, [r7, #28]
 8003998:	2b0f      	cmp	r3, #15
 800399a:	f67f ae05 	bls.w	80035a8 <HAL_GPIO_Init+0x13c>
      }
    }
  }
}
 800399e:	bf00      	nop
 80039a0:	3720      	adds	r7, #32
 80039a2:	46bd      	mov	sp, r7
 80039a4:	bd80      	pop	{r7, pc}
 80039a6:	bf00      	nop
 80039a8:	40020800 	.word	0x40020800
 80039ac:	40020c00 	.word	0x40020c00
 80039b0:	40021000 	.word	0x40021000
 80039b4:	40013800 	.word	0x40013800
 80039b8:	40013c00 	.word	0x40013c00

080039bc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80039bc:	b580      	push	{r7, lr}
 80039be:	b082      	sub	sp, #8
 80039c0:	af00      	add	r7, sp, #0
 80039c2:	6078      	str	r0, [r7, #4]
 80039c4:	460b      	mov	r3, r1
 80039c6:	807b      	strh	r3, [r7, #2]
 80039c8:	4613      	mov	r3, r2
 80039ca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 80039cc:	887b      	ldrh	r3, [r7, #2]
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d004      	beq.n	80039dc <HAL_GPIO_WritePin+0x20>
 80039d2:	887b      	ldrh	r3, [r7, #2]
 80039d4:	0c1b      	lsrs	r3, r3, #16
 80039d6:	041b      	lsls	r3, r3, #16
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d004      	beq.n	80039e6 <HAL_GPIO_WritePin+0x2a>
 80039dc:	f240 119f 	movw	r1, #415	; 0x19f
 80039e0:	480e      	ldr	r0, [pc, #56]	; (8003a1c <HAL_GPIO_WritePin+0x60>)
 80039e2:	f7fe fbea 	bl	80021ba <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 80039e6:	787b      	ldrb	r3, [r7, #1]
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d007      	beq.n	80039fc <HAL_GPIO_WritePin+0x40>
 80039ec:	787b      	ldrb	r3, [r7, #1]
 80039ee:	2b01      	cmp	r3, #1
 80039f0:	d004      	beq.n	80039fc <HAL_GPIO_WritePin+0x40>
 80039f2:	f44f 71d0 	mov.w	r1, #416	; 0x1a0
 80039f6:	4809      	ldr	r0, [pc, #36]	; (8003a1c <HAL_GPIO_WritePin+0x60>)
 80039f8:	f7fe fbdf 	bl	80021ba <assert_failed>

  if(PinState != GPIO_PIN_RESET)
 80039fc:	787b      	ldrb	r3, [r7, #1]
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d003      	beq.n	8003a0a <HAL_GPIO_WritePin+0x4e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003a02:	887a      	ldrh	r2, [r7, #2]
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003a08:	e003      	b.n	8003a12 <HAL_GPIO_WritePin+0x56>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003a0a:	887b      	ldrh	r3, [r7, #2]
 8003a0c:	041a      	lsls	r2, r3, #16
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	619a      	str	r2, [r3, #24]
}
 8003a12:	bf00      	nop
 8003a14:	3708      	adds	r7, #8
 8003a16:	46bd      	mov	sp, r7
 8003a18:	bd80      	pop	{r7, pc}
 8003a1a:	bf00      	nop
 8003a1c:	0800fa74 	.word	0x0800fa74

08003a20 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003a20:	b580      	push	{r7, lr}
 8003a22:	b084      	sub	sp, #16
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d101      	bne.n	8003a32 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003a2e:	2301      	movs	r3, #1
 8003a30:	e1b1      	b.n	8003d96 <HAL_I2C_Init+0x376>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	4aa2      	ldr	r2, [pc, #648]	; (8003cc0 <HAL_I2C_Init+0x2a0>)
 8003a38:	4293      	cmp	r3, r2
 8003a3a:	d00e      	beq.n	8003a5a <HAL_I2C_Init+0x3a>
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	4aa0      	ldr	r2, [pc, #640]	; (8003cc4 <HAL_I2C_Init+0x2a4>)
 8003a42:	4293      	cmp	r3, r2
 8003a44:	d009      	beq.n	8003a5a <HAL_I2C_Init+0x3a>
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	4a9f      	ldr	r2, [pc, #636]	; (8003cc8 <HAL_I2C_Init+0x2a8>)
 8003a4c:	4293      	cmp	r3, r2
 8003a4e:	d004      	beq.n	8003a5a <HAL_I2C_Init+0x3a>
 8003a50:	f240 11bf 	movw	r1, #447	; 0x1bf
 8003a54:	489d      	ldr	r0, [pc, #628]	; (8003ccc <HAL_I2C_Init+0x2ac>)
 8003a56:	f7fe fbb0 	bl	80021ba <assert_failed>
  assert_param(IS_I2C_CLOCK_SPEED(hi2c->Init.ClockSpeed));
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	685b      	ldr	r3, [r3, #4]
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d004      	beq.n	8003a6c <HAL_I2C_Init+0x4c>
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	685b      	ldr	r3, [r3, #4]
 8003a66:	4a9a      	ldr	r2, [pc, #616]	; (8003cd0 <HAL_I2C_Init+0x2b0>)
 8003a68:	4293      	cmp	r3, r2
 8003a6a:	d904      	bls.n	8003a76 <HAL_I2C_Init+0x56>
 8003a6c:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 8003a70:	4896      	ldr	r0, [pc, #600]	; (8003ccc <HAL_I2C_Init+0x2ac>)
 8003a72:	f7fe fba2 	bl	80021ba <assert_failed>
  assert_param(IS_I2C_DUTY_CYCLE(hi2c->Init.DutyCycle));
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	689b      	ldr	r3, [r3, #8]
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d009      	beq.n	8003a92 <HAL_I2C_Init+0x72>
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	689b      	ldr	r3, [r3, #8]
 8003a82:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003a86:	d004      	beq.n	8003a92 <HAL_I2C_Init+0x72>
 8003a88:	f240 11c1 	movw	r1, #449	; 0x1c1
 8003a8c:	488f      	ldr	r0, [pc, #572]	; (8003ccc <HAL_I2C_Init+0x2ac>)
 8003a8e:	f7fe fb94 	bl	80021ba <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS1(hi2c->Init.OwnAddress1));
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	68db      	ldr	r3, [r3, #12]
 8003a96:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003a9a:	f023 0303 	bic.w	r3, r3, #3
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d004      	beq.n	8003aac <HAL_I2C_Init+0x8c>
 8003aa2:	f44f 71e1 	mov.w	r1, #450	; 0x1c2
 8003aa6:	4889      	ldr	r0, [pc, #548]	; (8003ccc <HAL_I2C_Init+0x2ac>)
 8003aa8:	f7fe fb87 	bl	80021ba <assert_failed>
  assert_param(IS_I2C_ADDRESSING_MODE(hi2c->Init.AddressingMode));
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	691b      	ldr	r3, [r3, #16]
 8003ab0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003ab4:	d009      	beq.n	8003aca <HAL_I2C_Init+0xaa>
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	691b      	ldr	r3, [r3, #16]
 8003aba:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003abe:	d004      	beq.n	8003aca <HAL_I2C_Init+0xaa>
 8003ac0:	f240 11c3 	movw	r1, #451	; 0x1c3
 8003ac4:	4881      	ldr	r0, [pc, #516]	; (8003ccc <HAL_I2C_Init+0x2ac>)
 8003ac6:	f7fe fb78 	bl	80021ba <assert_failed>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	695b      	ldr	r3, [r3, #20]
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d008      	beq.n	8003ae4 <HAL_I2C_Init+0xc4>
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	695b      	ldr	r3, [r3, #20]
 8003ad6:	2b01      	cmp	r3, #1
 8003ad8:	d004      	beq.n	8003ae4 <HAL_I2C_Init+0xc4>
 8003ada:	f44f 71e2 	mov.w	r1, #452	; 0x1c4
 8003ade:	487b      	ldr	r0, [pc, #492]	; (8003ccc <HAL_I2C_Init+0x2ac>)
 8003ae0:	f7fe fb6b 	bl	80021ba <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	699b      	ldr	r3, [r3, #24]
 8003ae8:	f023 03fe 	bic.w	r3, r3, #254	; 0xfe
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d004      	beq.n	8003afa <HAL_I2C_Init+0xda>
 8003af0:	f240 11c5 	movw	r1, #453	; 0x1c5
 8003af4:	4875      	ldr	r0, [pc, #468]	; (8003ccc <HAL_I2C_Init+0x2ac>)
 8003af6:	f7fe fb60 	bl	80021ba <assert_failed>
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	69db      	ldr	r3, [r3, #28]
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d008      	beq.n	8003b14 <HAL_I2C_Init+0xf4>
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	69db      	ldr	r3, [r3, #28]
 8003b06:	2b40      	cmp	r3, #64	; 0x40
 8003b08:	d004      	beq.n	8003b14 <HAL_I2C_Init+0xf4>
 8003b0a:	f44f 71e3 	mov.w	r1, #454	; 0x1c6
 8003b0e:	486f      	ldr	r0, [pc, #444]	; (8003ccc <HAL_I2C_Init+0x2ac>)
 8003b10:	f7fe fb53 	bl	80021ba <assert_failed>
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	6a1b      	ldr	r3, [r3, #32]
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d008      	beq.n	8003b2e <HAL_I2C_Init+0x10e>
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	6a1b      	ldr	r3, [r3, #32]
 8003b20:	2b80      	cmp	r3, #128	; 0x80
 8003b22:	d004      	beq.n	8003b2e <HAL_I2C_Init+0x10e>
 8003b24:	f240 11c7 	movw	r1, #455	; 0x1c7
 8003b28:	4868      	ldr	r0, [pc, #416]	; (8003ccc <HAL_I2C_Init+0x2ac>)
 8003b2a:	f7fe fb46 	bl	80021ba <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b34:	b2db      	uxtb	r3, r3
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d106      	bne.n	8003b48 <HAL_I2C_Init+0x128>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	2200      	movs	r2, #0
 8003b3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003b42:	6878      	ldr	r0, [r7, #4]
 8003b44:	f7fd fd14 	bl	8001570 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	2224      	movs	r2, #36	; 0x24
 8003b4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	681a      	ldr	r2, [r3, #0]
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f022 0201 	bic.w	r2, r2, #1
 8003b5e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	681a      	ldr	r2, [r3, #0]
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003b6e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	681a      	ldr	r2, [r3, #0]
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003b7e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003b80:	f003 fdea 	bl	8007758 <HAL_RCC_GetPCLK1Freq>
 8003b84:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	685b      	ldr	r3, [r3, #4]
 8003b8a:	4a52      	ldr	r2, [pc, #328]	; (8003cd4 <HAL_I2C_Init+0x2b4>)
 8003b8c:	4293      	cmp	r3, r2
 8003b8e:	d807      	bhi.n	8003ba0 <HAL_I2C_Init+0x180>
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	4a51      	ldr	r2, [pc, #324]	; (8003cd8 <HAL_I2C_Init+0x2b8>)
 8003b94:	4293      	cmp	r3, r2
 8003b96:	bf94      	ite	ls
 8003b98:	2301      	movls	r3, #1
 8003b9a:	2300      	movhi	r3, #0
 8003b9c:	b2db      	uxtb	r3, r3
 8003b9e:	e006      	b.n	8003bae <HAL_I2C_Init+0x18e>
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	4a4e      	ldr	r2, [pc, #312]	; (8003cdc <HAL_I2C_Init+0x2bc>)
 8003ba4:	4293      	cmp	r3, r2
 8003ba6:	bf94      	ite	ls
 8003ba8:	2301      	movls	r3, #1
 8003baa:	2300      	movhi	r3, #0
 8003bac:	b2db      	uxtb	r3, r3
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d001      	beq.n	8003bb6 <HAL_I2C_Init+0x196>
  {
    return HAL_ERROR;
 8003bb2:	2301      	movs	r3, #1
 8003bb4:	e0ef      	b.n	8003d96 <HAL_I2C_Init+0x376>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	4a49      	ldr	r2, [pc, #292]	; (8003ce0 <HAL_I2C_Init+0x2c0>)
 8003bba:	fba2 2303 	umull	r2, r3, r2, r3
 8003bbe:	0c9b      	lsrs	r3, r3, #18
 8003bc0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	685b      	ldr	r3, [r3, #4]
 8003bc8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	68ba      	ldr	r2, [r7, #8]
 8003bd2:	430a      	orrs	r2, r1
 8003bd4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	6a1b      	ldr	r3, [r3, #32]
 8003bdc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	685b      	ldr	r3, [r3, #4]
 8003be4:	4a3b      	ldr	r2, [pc, #236]	; (8003cd4 <HAL_I2C_Init+0x2b4>)
 8003be6:	4293      	cmp	r3, r2
 8003be8:	d802      	bhi.n	8003bf0 <HAL_I2C_Init+0x1d0>
 8003bea:	68bb      	ldr	r3, [r7, #8]
 8003bec:	3301      	adds	r3, #1
 8003bee:	e009      	b.n	8003c04 <HAL_I2C_Init+0x1e4>
 8003bf0:	68bb      	ldr	r3, [r7, #8]
 8003bf2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003bf6:	fb02 f303 	mul.w	r3, r2, r3
 8003bfa:	4a3a      	ldr	r2, [pc, #232]	; (8003ce4 <HAL_I2C_Init+0x2c4>)
 8003bfc:	fba2 2303 	umull	r2, r3, r2, r3
 8003c00:	099b      	lsrs	r3, r3, #6
 8003c02:	3301      	adds	r3, #1
 8003c04:	687a      	ldr	r2, [r7, #4]
 8003c06:	6812      	ldr	r2, [r2, #0]
 8003c08:	430b      	orrs	r3, r1
 8003c0a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	69db      	ldr	r3, [r3, #28]
 8003c12:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003c16:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	685b      	ldr	r3, [r3, #4]
 8003c1e:	492d      	ldr	r1, [pc, #180]	; (8003cd4 <HAL_I2C_Init+0x2b4>)
 8003c20:	428b      	cmp	r3, r1
 8003c22:	d80d      	bhi.n	8003c40 <HAL_I2C_Init+0x220>
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	1e59      	subs	r1, r3, #1
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	685b      	ldr	r3, [r3, #4]
 8003c2c:	005b      	lsls	r3, r3, #1
 8003c2e:	fbb1 f3f3 	udiv	r3, r1, r3
 8003c32:	3301      	adds	r3, #1
 8003c34:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c38:	2b04      	cmp	r3, #4
 8003c3a:	bf38      	it	cc
 8003c3c:	2304      	movcc	r3, #4
 8003c3e:	e063      	b.n	8003d08 <HAL_I2C_Init+0x2e8>
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	689b      	ldr	r3, [r3, #8]
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d111      	bne.n	8003c6c <HAL_I2C_Init+0x24c>
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	1e58      	subs	r0, r3, #1
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	6859      	ldr	r1, [r3, #4]
 8003c50:	460b      	mov	r3, r1
 8003c52:	005b      	lsls	r3, r3, #1
 8003c54:	440b      	add	r3, r1
 8003c56:	fbb0 f3f3 	udiv	r3, r0, r3
 8003c5a:	3301      	adds	r3, #1
 8003c5c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	bf0c      	ite	eq
 8003c64:	2301      	moveq	r3, #1
 8003c66:	2300      	movne	r3, #0
 8003c68:	b2db      	uxtb	r3, r3
 8003c6a:	e012      	b.n	8003c92 <HAL_I2C_Init+0x272>
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	1e58      	subs	r0, r3, #1
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	6859      	ldr	r1, [r3, #4]
 8003c74:	460b      	mov	r3, r1
 8003c76:	009b      	lsls	r3, r3, #2
 8003c78:	440b      	add	r3, r1
 8003c7a:	0099      	lsls	r1, r3, #2
 8003c7c:	440b      	add	r3, r1
 8003c7e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003c82:	3301      	adds	r3, #1
 8003c84:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	bf0c      	ite	eq
 8003c8c:	2301      	moveq	r3, #1
 8003c8e:	2300      	movne	r3, #0
 8003c90:	b2db      	uxtb	r3, r3
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d001      	beq.n	8003c9a <HAL_I2C_Init+0x27a>
 8003c96:	2301      	movs	r3, #1
 8003c98:	e036      	b.n	8003d08 <HAL_I2C_Init+0x2e8>
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	689b      	ldr	r3, [r3, #8]
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d122      	bne.n	8003ce8 <HAL_I2C_Init+0x2c8>
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	1e58      	subs	r0, r3, #1
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	6859      	ldr	r1, [r3, #4]
 8003caa:	460b      	mov	r3, r1
 8003cac:	005b      	lsls	r3, r3, #1
 8003cae:	440b      	add	r3, r1
 8003cb0:	fbb0 f3f3 	udiv	r3, r0, r3
 8003cb4:	3301      	adds	r3, #1
 8003cb6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003cba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003cbe:	e023      	b.n	8003d08 <HAL_I2C_Init+0x2e8>
 8003cc0:	40005400 	.word	0x40005400
 8003cc4:	40005800 	.word	0x40005800
 8003cc8:	40005c00 	.word	0x40005c00
 8003ccc:	0800fab0 	.word	0x0800fab0
 8003cd0:	00061a80 	.word	0x00061a80
 8003cd4:	000186a0 	.word	0x000186a0
 8003cd8:	001e847f 	.word	0x001e847f
 8003cdc:	003d08ff 	.word	0x003d08ff
 8003ce0:	431bde83 	.word	0x431bde83
 8003ce4:	10624dd3 	.word	0x10624dd3
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	1e58      	subs	r0, r3, #1
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	6859      	ldr	r1, [r3, #4]
 8003cf0:	460b      	mov	r3, r1
 8003cf2:	009b      	lsls	r3, r3, #2
 8003cf4:	440b      	add	r3, r1
 8003cf6:	0099      	lsls	r1, r3, #2
 8003cf8:	440b      	add	r3, r1
 8003cfa:	fbb0 f3f3 	udiv	r3, r0, r3
 8003cfe:	3301      	adds	r3, #1
 8003d00:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d04:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003d08:	6879      	ldr	r1, [r7, #4]
 8003d0a:	6809      	ldr	r1, [r1, #0]
 8003d0c:	4313      	orrs	r3, r2
 8003d0e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	69da      	ldr	r2, [r3, #28]
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	6a1b      	ldr	r3, [r3, #32]
 8003d22:	431a      	orrs	r2, r3
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	430a      	orrs	r2, r1
 8003d2a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	689b      	ldr	r3, [r3, #8]
 8003d32:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003d36:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003d3a:	687a      	ldr	r2, [r7, #4]
 8003d3c:	6911      	ldr	r1, [r2, #16]
 8003d3e:	687a      	ldr	r2, [r7, #4]
 8003d40:	68d2      	ldr	r2, [r2, #12]
 8003d42:	4311      	orrs	r1, r2
 8003d44:	687a      	ldr	r2, [r7, #4]
 8003d46:	6812      	ldr	r2, [r2, #0]
 8003d48:	430b      	orrs	r3, r1
 8003d4a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	68db      	ldr	r3, [r3, #12]
 8003d52:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	695a      	ldr	r2, [r3, #20]
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	699b      	ldr	r3, [r3, #24]
 8003d5e:	431a      	orrs	r2, r3
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	430a      	orrs	r2, r1
 8003d66:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	681a      	ldr	r2, [r3, #0]
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	f042 0201 	orr.w	r2, r2, #1
 8003d76:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	2200      	movs	r2, #0
 8003d7c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	2220      	movs	r2, #32
 8003d82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	2200      	movs	r2, #0
 8003d8a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	2200      	movs	r2, #0
 8003d90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003d94:	2300      	movs	r3, #0
}
 8003d96:	4618      	mov	r0, r3
 8003d98:	3710      	adds	r7, #16
 8003d9a:	46bd      	mov	sp, r7
 8003d9c:	bd80      	pop	{r7, pc}
 8003d9e:	bf00      	nop

08003da0 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003da0:	b580      	push	{r7, lr}
 8003da2:	b088      	sub	sp, #32
 8003da4:	af02      	add	r7, sp, #8
 8003da6:	60f8      	str	r0, [r7, #12]
 8003da8:	607a      	str	r2, [r7, #4]
 8003daa:	461a      	mov	r2, r3
 8003dac:	460b      	mov	r3, r1
 8003dae:	817b      	strh	r3, [r7, #10]
 8003db0:	4613      	mov	r3, r2
 8003db2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003db4:	f7fe fcd8 	bl	8002768 <HAL_GetTick>
 8003db8:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003dc0:	b2db      	uxtb	r3, r3
 8003dc2:	2b20      	cmp	r3, #32
 8003dc4:	f040 80e0 	bne.w	8003f88 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003dc8:	697b      	ldr	r3, [r7, #20]
 8003dca:	9300      	str	r3, [sp, #0]
 8003dcc:	2319      	movs	r3, #25
 8003dce:	2201      	movs	r2, #1
 8003dd0:	4970      	ldr	r1, [pc, #448]	; (8003f94 <HAL_I2C_Master_Transmit+0x1f4>)
 8003dd2:	68f8      	ldr	r0, [r7, #12]
 8003dd4:	f000 fc58 	bl	8004688 <I2C_WaitOnFlagUntilTimeout>
 8003dd8:	4603      	mov	r3, r0
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d001      	beq.n	8003de2 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003dde:	2302      	movs	r3, #2
 8003de0:	e0d3      	b.n	8003f8a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003de8:	2b01      	cmp	r3, #1
 8003dea:	d101      	bne.n	8003df0 <HAL_I2C_Master_Transmit+0x50>
 8003dec:	2302      	movs	r3, #2
 8003dee:	e0cc      	b.n	8003f8a <HAL_I2C_Master_Transmit+0x1ea>
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	2201      	movs	r2, #1
 8003df4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	f003 0301 	and.w	r3, r3, #1
 8003e02:	2b01      	cmp	r3, #1
 8003e04:	d007      	beq.n	8003e16 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	681a      	ldr	r2, [r3, #0]
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	f042 0201 	orr.w	r2, r2, #1
 8003e14:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	681a      	ldr	r2, [r3, #0]
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003e24:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	2221      	movs	r2, #33	; 0x21
 8003e2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	2210      	movs	r2, #16
 8003e32:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	2200      	movs	r2, #0
 8003e3a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	687a      	ldr	r2, [r7, #4]
 8003e40:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	893a      	ldrh	r2, [r7, #8]
 8003e46:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e4c:	b29a      	uxth	r2, r3
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	4a50      	ldr	r2, [pc, #320]	; (8003f98 <HAL_I2C_Master_Transmit+0x1f8>)
 8003e56:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003e58:	8979      	ldrh	r1, [r7, #10]
 8003e5a:	697b      	ldr	r3, [r7, #20]
 8003e5c:	6a3a      	ldr	r2, [r7, #32]
 8003e5e:	68f8      	ldr	r0, [r7, #12]
 8003e60:	f000 fac2 	bl	80043e8 <I2C_MasterRequestWrite>
 8003e64:	4603      	mov	r3, r0
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d001      	beq.n	8003e6e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003e6a:	2301      	movs	r3, #1
 8003e6c:	e08d      	b.n	8003f8a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e6e:	2300      	movs	r3, #0
 8003e70:	613b      	str	r3, [r7, #16]
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	695b      	ldr	r3, [r3, #20]
 8003e78:	613b      	str	r3, [r7, #16]
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	699b      	ldr	r3, [r3, #24]
 8003e80:	613b      	str	r3, [r7, #16]
 8003e82:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003e84:	e066      	b.n	8003f54 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003e86:	697a      	ldr	r2, [r7, #20]
 8003e88:	6a39      	ldr	r1, [r7, #32]
 8003e8a:	68f8      	ldr	r0, [r7, #12]
 8003e8c:	f000 fcd2 	bl	8004834 <I2C_WaitOnTXEFlagUntilTimeout>
 8003e90:	4603      	mov	r3, r0
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d00d      	beq.n	8003eb2 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e9a:	2b04      	cmp	r3, #4
 8003e9c:	d107      	bne.n	8003eae <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	681a      	ldr	r2, [r3, #0]
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003eac:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003eae:	2301      	movs	r3, #1
 8003eb0:	e06b      	b.n	8003f8a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eb6:	781a      	ldrb	r2, [r3, #0]
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ec2:	1c5a      	adds	r2, r3, #1
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ecc:	b29b      	uxth	r3, r3
 8003ece:	3b01      	subs	r3, #1
 8003ed0:	b29a      	uxth	r2, r3
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003eda:	3b01      	subs	r3, #1
 8003edc:	b29a      	uxth	r2, r3
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	695b      	ldr	r3, [r3, #20]
 8003ee8:	f003 0304 	and.w	r3, r3, #4
 8003eec:	2b04      	cmp	r3, #4
 8003eee:	d11b      	bne.n	8003f28 <HAL_I2C_Master_Transmit+0x188>
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d017      	beq.n	8003f28 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003efc:	781a      	ldrb	r2, [r3, #0]
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f08:	1c5a      	adds	r2, r3, #1
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f12:	b29b      	uxth	r3, r3
 8003f14:	3b01      	subs	r3, #1
 8003f16:	b29a      	uxth	r2, r3
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f20:	3b01      	subs	r3, #1
 8003f22:	b29a      	uxth	r2, r3
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003f28:	697a      	ldr	r2, [r7, #20]
 8003f2a:	6a39      	ldr	r1, [r7, #32]
 8003f2c:	68f8      	ldr	r0, [r7, #12]
 8003f2e:	f000 fcc2 	bl	80048b6 <I2C_WaitOnBTFFlagUntilTimeout>
 8003f32:	4603      	mov	r3, r0
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d00d      	beq.n	8003f54 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f3c:	2b04      	cmp	r3, #4
 8003f3e:	d107      	bne.n	8003f50 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	681a      	ldr	r2, [r3, #0]
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f4e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003f50:	2301      	movs	r3, #1
 8003f52:	e01a      	b.n	8003f8a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d194      	bne.n	8003e86 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	681a      	ldr	r2, [r3, #0]
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f6a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	2220      	movs	r2, #32
 8003f70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	2200      	movs	r2, #0
 8003f78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	2200      	movs	r2, #0
 8003f80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003f84:	2300      	movs	r3, #0
 8003f86:	e000      	b.n	8003f8a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003f88:	2302      	movs	r3, #2
  }
}
 8003f8a:	4618      	mov	r0, r3
 8003f8c:	3718      	adds	r7, #24
 8003f8e:	46bd      	mov	sp, r7
 8003f90:	bd80      	pop	{r7, pc}
 8003f92:	bf00      	nop
 8003f94:	00100002 	.word	0x00100002
 8003f98:	ffff0000 	.word	0xffff0000

08003f9c <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003f9c:	b580      	push	{r7, lr}
 8003f9e:	b08c      	sub	sp, #48	; 0x30
 8003fa0:	af02      	add	r7, sp, #8
 8003fa2:	60f8      	str	r0, [r7, #12]
 8003fa4:	607a      	str	r2, [r7, #4]
 8003fa6:	461a      	mov	r2, r3
 8003fa8:	460b      	mov	r3, r1
 8003faa:	817b      	strh	r3, [r7, #10]
 8003fac:	4613      	mov	r3, r2
 8003fae:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003fb0:	f7fe fbda 	bl	8002768 <HAL_GetTick>
 8003fb4:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003fbc:	b2db      	uxtb	r3, r3
 8003fbe:	2b20      	cmp	r3, #32
 8003fc0:	f040 820b 	bne.w	80043da <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003fc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fc6:	9300      	str	r3, [sp, #0]
 8003fc8:	2319      	movs	r3, #25
 8003fca:	2201      	movs	r2, #1
 8003fcc:	497c      	ldr	r1, [pc, #496]	; (80041c0 <HAL_I2C_Master_Receive+0x224>)
 8003fce:	68f8      	ldr	r0, [r7, #12]
 8003fd0:	f000 fb5a 	bl	8004688 <I2C_WaitOnFlagUntilTimeout>
 8003fd4:	4603      	mov	r3, r0
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d001      	beq.n	8003fde <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8003fda:	2302      	movs	r3, #2
 8003fdc:	e1fe      	b.n	80043dc <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003fe4:	2b01      	cmp	r3, #1
 8003fe6:	d101      	bne.n	8003fec <HAL_I2C_Master_Receive+0x50>
 8003fe8:	2302      	movs	r3, #2
 8003fea:	e1f7      	b.n	80043dc <HAL_I2C_Master_Receive+0x440>
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	2201      	movs	r2, #1
 8003ff0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	f003 0301 	and.w	r3, r3, #1
 8003ffe:	2b01      	cmp	r3, #1
 8004000:	d007      	beq.n	8004012 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	681a      	ldr	r2, [r3, #0]
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	f042 0201 	orr.w	r2, r2, #1
 8004010:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	681a      	ldr	r2, [r3, #0]
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004020:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	2222      	movs	r2, #34	; 0x22
 8004026:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	2210      	movs	r2, #16
 800402e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	2200      	movs	r2, #0
 8004036:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	687a      	ldr	r2, [r7, #4]
 800403c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	893a      	ldrh	r2, [r7, #8]
 8004042:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004048:	b29a      	uxth	r2, r3
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	4a5c      	ldr	r2, [pc, #368]	; (80041c4 <HAL_I2C_Master_Receive+0x228>)
 8004052:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004054:	8979      	ldrh	r1, [r7, #10]
 8004056:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004058:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800405a:	68f8      	ldr	r0, [r7, #12]
 800405c:	f000 fa46 	bl	80044ec <I2C_MasterRequestRead>
 8004060:	4603      	mov	r3, r0
 8004062:	2b00      	cmp	r3, #0
 8004064:	d001      	beq.n	800406a <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8004066:	2301      	movs	r3, #1
 8004068:	e1b8      	b.n	80043dc <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800406e:	2b00      	cmp	r3, #0
 8004070:	d113      	bne.n	800409a <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004072:	2300      	movs	r3, #0
 8004074:	623b      	str	r3, [r7, #32]
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	695b      	ldr	r3, [r3, #20]
 800407c:	623b      	str	r3, [r7, #32]
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	699b      	ldr	r3, [r3, #24]
 8004084:	623b      	str	r3, [r7, #32]
 8004086:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	681a      	ldr	r2, [r3, #0]
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004096:	601a      	str	r2, [r3, #0]
 8004098:	e18c      	b.n	80043b4 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800409e:	2b01      	cmp	r3, #1
 80040a0:	d11b      	bne.n	80040da <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	681a      	ldr	r2, [r3, #0]
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80040b0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80040b2:	2300      	movs	r3, #0
 80040b4:	61fb      	str	r3, [r7, #28]
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	695b      	ldr	r3, [r3, #20]
 80040bc:	61fb      	str	r3, [r7, #28]
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	699b      	ldr	r3, [r3, #24]
 80040c4:	61fb      	str	r3, [r7, #28]
 80040c6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	681a      	ldr	r2, [r3, #0]
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80040d6:	601a      	str	r2, [r3, #0]
 80040d8:	e16c      	b.n	80043b4 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040de:	2b02      	cmp	r3, #2
 80040e0:	d11b      	bne.n	800411a <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	681a      	ldr	r2, [r3, #0]
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80040f0:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	681a      	ldr	r2, [r3, #0]
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004100:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004102:	2300      	movs	r3, #0
 8004104:	61bb      	str	r3, [r7, #24]
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	695b      	ldr	r3, [r3, #20]
 800410c:	61bb      	str	r3, [r7, #24]
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	699b      	ldr	r3, [r3, #24]
 8004114:	61bb      	str	r3, [r7, #24]
 8004116:	69bb      	ldr	r3, [r7, #24]
 8004118:	e14c      	b.n	80043b4 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	681a      	ldr	r2, [r3, #0]
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004128:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800412a:	2300      	movs	r3, #0
 800412c:	617b      	str	r3, [r7, #20]
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	695b      	ldr	r3, [r3, #20]
 8004134:	617b      	str	r3, [r7, #20]
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	699b      	ldr	r3, [r3, #24]
 800413c:	617b      	str	r3, [r7, #20]
 800413e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004140:	e138      	b.n	80043b4 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004146:	2b03      	cmp	r3, #3
 8004148:	f200 80f1 	bhi.w	800432e <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004150:	2b01      	cmp	r3, #1
 8004152:	d123      	bne.n	800419c <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004154:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004156:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004158:	68f8      	ldr	r0, [r7, #12]
 800415a:	f000 fbed 	bl	8004938 <I2C_WaitOnRXNEFlagUntilTimeout>
 800415e:	4603      	mov	r3, r0
 8004160:	2b00      	cmp	r3, #0
 8004162:	d001      	beq.n	8004168 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8004164:	2301      	movs	r3, #1
 8004166:	e139      	b.n	80043dc <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	691a      	ldr	r2, [r3, #16]
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004172:	b2d2      	uxtb	r2, r2
 8004174:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800417a:	1c5a      	adds	r2, r3, #1
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004184:	3b01      	subs	r3, #1
 8004186:	b29a      	uxth	r2, r3
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004190:	b29b      	uxth	r3, r3
 8004192:	3b01      	subs	r3, #1
 8004194:	b29a      	uxth	r2, r3
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	855a      	strh	r2, [r3, #42]	; 0x2a
 800419a:	e10b      	b.n	80043b4 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041a0:	2b02      	cmp	r3, #2
 80041a2:	d14e      	bne.n	8004242 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80041a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041a6:	9300      	str	r3, [sp, #0]
 80041a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041aa:	2200      	movs	r2, #0
 80041ac:	4906      	ldr	r1, [pc, #24]	; (80041c8 <HAL_I2C_Master_Receive+0x22c>)
 80041ae:	68f8      	ldr	r0, [r7, #12]
 80041b0:	f000 fa6a 	bl	8004688 <I2C_WaitOnFlagUntilTimeout>
 80041b4:	4603      	mov	r3, r0
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d008      	beq.n	80041cc <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 80041ba:	2301      	movs	r3, #1
 80041bc:	e10e      	b.n	80043dc <HAL_I2C_Master_Receive+0x440>
 80041be:	bf00      	nop
 80041c0:	00100002 	.word	0x00100002
 80041c4:	ffff0000 	.word	0xffff0000
 80041c8:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	681a      	ldr	r2, [r3, #0]
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80041da:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	691a      	ldr	r2, [r3, #16]
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041e6:	b2d2      	uxtb	r2, r2
 80041e8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041ee:	1c5a      	adds	r2, r3, #1
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041f8:	3b01      	subs	r3, #1
 80041fa:	b29a      	uxth	r2, r3
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004204:	b29b      	uxth	r3, r3
 8004206:	3b01      	subs	r3, #1
 8004208:	b29a      	uxth	r2, r3
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	691a      	ldr	r2, [r3, #16]
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004218:	b2d2      	uxtb	r2, r2
 800421a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004220:	1c5a      	adds	r2, r3, #1
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800422a:	3b01      	subs	r3, #1
 800422c:	b29a      	uxth	r2, r3
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004236:	b29b      	uxth	r3, r3
 8004238:	3b01      	subs	r3, #1
 800423a:	b29a      	uxth	r2, r3
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004240:	e0b8      	b.n	80043b4 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004242:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004244:	9300      	str	r3, [sp, #0]
 8004246:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004248:	2200      	movs	r2, #0
 800424a:	4966      	ldr	r1, [pc, #408]	; (80043e4 <HAL_I2C_Master_Receive+0x448>)
 800424c:	68f8      	ldr	r0, [r7, #12]
 800424e:	f000 fa1b 	bl	8004688 <I2C_WaitOnFlagUntilTimeout>
 8004252:	4603      	mov	r3, r0
 8004254:	2b00      	cmp	r3, #0
 8004256:	d001      	beq.n	800425c <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8004258:	2301      	movs	r3, #1
 800425a:	e0bf      	b.n	80043dc <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	681a      	ldr	r2, [r3, #0]
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800426a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	691a      	ldr	r2, [r3, #16]
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004276:	b2d2      	uxtb	r2, r2
 8004278:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800427e:	1c5a      	adds	r2, r3, #1
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004288:	3b01      	subs	r3, #1
 800428a:	b29a      	uxth	r2, r3
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004294:	b29b      	uxth	r3, r3
 8004296:	3b01      	subs	r3, #1
 8004298:	b29a      	uxth	r2, r3
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800429e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042a0:	9300      	str	r3, [sp, #0]
 80042a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042a4:	2200      	movs	r2, #0
 80042a6:	494f      	ldr	r1, [pc, #316]	; (80043e4 <HAL_I2C_Master_Receive+0x448>)
 80042a8:	68f8      	ldr	r0, [r7, #12]
 80042aa:	f000 f9ed 	bl	8004688 <I2C_WaitOnFlagUntilTimeout>
 80042ae:	4603      	mov	r3, r0
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d001      	beq.n	80042b8 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 80042b4:	2301      	movs	r3, #1
 80042b6:	e091      	b.n	80043dc <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	681a      	ldr	r2, [r3, #0]
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80042c6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	691a      	ldr	r2, [r3, #16]
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042d2:	b2d2      	uxtb	r2, r2
 80042d4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042da:	1c5a      	adds	r2, r3, #1
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042e4:	3b01      	subs	r3, #1
 80042e6:	b29a      	uxth	r2, r3
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042f0:	b29b      	uxth	r3, r3
 80042f2:	3b01      	subs	r3, #1
 80042f4:	b29a      	uxth	r2, r3
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	691a      	ldr	r2, [r3, #16]
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004304:	b2d2      	uxtb	r2, r2
 8004306:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800430c:	1c5a      	adds	r2, r3, #1
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004316:	3b01      	subs	r3, #1
 8004318:	b29a      	uxth	r2, r3
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004322:	b29b      	uxth	r3, r3
 8004324:	3b01      	subs	r3, #1
 8004326:	b29a      	uxth	r2, r3
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800432c:	e042      	b.n	80043b4 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800432e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004330:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004332:	68f8      	ldr	r0, [r7, #12]
 8004334:	f000 fb00 	bl	8004938 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004338:	4603      	mov	r3, r0
 800433a:	2b00      	cmp	r3, #0
 800433c:	d001      	beq.n	8004342 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 800433e:	2301      	movs	r3, #1
 8004340:	e04c      	b.n	80043dc <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	691a      	ldr	r2, [r3, #16]
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800434c:	b2d2      	uxtb	r2, r2
 800434e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004354:	1c5a      	adds	r2, r3, #1
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800435e:	3b01      	subs	r3, #1
 8004360:	b29a      	uxth	r2, r3
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800436a:	b29b      	uxth	r3, r3
 800436c:	3b01      	subs	r3, #1
 800436e:	b29a      	uxth	r2, r3
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	695b      	ldr	r3, [r3, #20]
 800437a:	f003 0304 	and.w	r3, r3, #4
 800437e:	2b04      	cmp	r3, #4
 8004380:	d118      	bne.n	80043b4 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	691a      	ldr	r2, [r3, #16]
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800438c:	b2d2      	uxtb	r2, r2
 800438e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004394:	1c5a      	adds	r2, r3, #1
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800439e:	3b01      	subs	r3, #1
 80043a0:	b29a      	uxth	r2, r3
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043aa:	b29b      	uxth	r3, r3
 80043ac:	3b01      	subs	r3, #1
 80043ae:	b29a      	uxth	r2, r3
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	f47f aec2 	bne.w	8004142 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	2220      	movs	r2, #32
 80043c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	2200      	movs	r2, #0
 80043ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	2200      	movs	r2, #0
 80043d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80043d6:	2300      	movs	r3, #0
 80043d8:	e000      	b.n	80043dc <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 80043da:	2302      	movs	r3, #2
  }
}
 80043dc:	4618      	mov	r0, r3
 80043de:	3728      	adds	r7, #40	; 0x28
 80043e0:	46bd      	mov	sp, r7
 80043e2:	bd80      	pop	{r7, pc}
 80043e4:	00010004 	.word	0x00010004

080043e8 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80043e8:	b580      	push	{r7, lr}
 80043ea:	b088      	sub	sp, #32
 80043ec:	af02      	add	r7, sp, #8
 80043ee:	60f8      	str	r0, [r7, #12]
 80043f0:	607a      	str	r2, [r7, #4]
 80043f2:	603b      	str	r3, [r7, #0]
 80043f4:	460b      	mov	r3, r1
 80043f6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043fc:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80043fe:	697b      	ldr	r3, [r7, #20]
 8004400:	2b08      	cmp	r3, #8
 8004402:	d006      	beq.n	8004412 <I2C_MasterRequestWrite+0x2a>
 8004404:	697b      	ldr	r3, [r7, #20]
 8004406:	2b01      	cmp	r3, #1
 8004408:	d003      	beq.n	8004412 <I2C_MasterRequestWrite+0x2a>
 800440a:	697b      	ldr	r3, [r7, #20]
 800440c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004410:	d108      	bne.n	8004424 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	681a      	ldr	r2, [r3, #0]
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004420:	601a      	str	r2, [r3, #0]
 8004422:	e00b      	b.n	800443c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004428:	2b12      	cmp	r3, #18
 800442a:	d107      	bne.n	800443c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	681a      	ldr	r2, [r3, #0]
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800443a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800443c:	683b      	ldr	r3, [r7, #0]
 800443e:	9300      	str	r3, [sp, #0]
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	2200      	movs	r2, #0
 8004444:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004448:	68f8      	ldr	r0, [r7, #12]
 800444a:	f000 f91d 	bl	8004688 <I2C_WaitOnFlagUntilTimeout>
 800444e:	4603      	mov	r3, r0
 8004450:	2b00      	cmp	r3, #0
 8004452:	d00d      	beq.n	8004470 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800445e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004462:	d103      	bne.n	800446c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	f44f 7200 	mov.w	r2, #512	; 0x200
 800446a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800446c:	2303      	movs	r3, #3
 800446e:	e035      	b.n	80044dc <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	691b      	ldr	r3, [r3, #16]
 8004474:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004478:	d108      	bne.n	800448c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800447a:	897b      	ldrh	r3, [r7, #10]
 800447c:	b2db      	uxtb	r3, r3
 800447e:	461a      	mov	r2, r3
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004488:	611a      	str	r2, [r3, #16]
 800448a:	e01b      	b.n	80044c4 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800448c:	897b      	ldrh	r3, [r7, #10]
 800448e:	11db      	asrs	r3, r3, #7
 8004490:	b2db      	uxtb	r3, r3
 8004492:	f003 0306 	and.w	r3, r3, #6
 8004496:	b2db      	uxtb	r3, r3
 8004498:	f063 030f 	orn	r3, r3, #15
 800449c:	b2da      	uxtb	r2, r3
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80044a4:	683b      	ldr	r3, [r7, #0]
 80044a6:	687a      	ldr	r2, [r7, #4]
 80044a8:	490e      	ldr	r1, [pc, #56]	; (80044e4 <I2C_MasterRequestWrite+0xfc>)
 80044aa:	68f8      	ldr	r0, [r7, #12]
 80044ac:	f000 f943 	bl	8004736 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80044b0:	4603      	mov	r3, r0
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d001      	beq.n	80044ba <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80044b6:	2301      	movs	r3, #1
 80044b8:	e010      	b.n	80044dc <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80044ba:	897b      	ldrh	r3, [r7, #10]
 80044bc:	b2da      	uxtb	r2, r3
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80044c4:	683b      	ldr	r3, [r7, #0]
 80044c6:	687a      	ldr	r2, [r7, #4]
 80044c8:	4907      	ldr	r1, [pc, #28]	; (80044e8 <I2C_MasterRequestWrite+0x100>)
 80044ca:	68f8      	ldr	r0, [r7, #12]
 80044cc:	f000 f933 	bl	8004736 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80044d0:	4603      	mov	r3, r0
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d001      	beq.n	80044da <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80044d6:	2301      	movs	r3, #1
 80044d8:	e000      	b.n	80044dc <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80044da:	2300      	movs	r3, #0
}
 80044dc:	4618      	mov	r0, r3
 80044de:	3718      	adds	r7, #24
 80044e0:	46bd      	mov	sp, r7
 80044e2:	bd80      	pop	{r7, pc}
 80044e4:	00010008 	.word	0x00010008
 80044e8:	00010002 	.word	0x00010002

080044ec <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80044ec:	b580      	push	{r7, lr}
 80044ee:	b088      	sub	sp, #32
 80044f0:	af02      	add	r7, sp, #8
 80044f2:	60f8      	str	r0, [r7, #12]
 80044f4:	607a      	str	r2, [r7, #4]
 80044f6:	603b      	str	r3, [r7, #0]
 80044f8:	460b      	mov	r3, r1
 80044fa:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004500:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	681a      	ldr	r2, [r3, #0]
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004510:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004512:	697b      	ldr	r3, [r7, #20]
 8004514:	2b08      	cmp	r3, #8
 8004516:	d006      	beq.n	8004526 <I2C_MasterRequestRead+0x3a>
 8004518:	697b      	ldr	r3, [r7, #20]
 800451a:	2b01      	cmp	r3, #1
 800451c:	d003      	beq.n	8004526 <I2C_MasterRequestRead+0x3a>
 800451e:	697b      	ldr	r3, [r7, #20]
 8004520:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004524:	d108      	bne.n	8004538 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	681a      	ldr	r2, [r3, #0]
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004534:	601a      	str	r2, [r3, #0]
 8004536:	e00b      	b.n	8004550 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800453c:	2b11      	cmp	r3, #17
 800453e:	d107      	bne.n	8004550 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	681a      	ldr	r2, [r3, #0]
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800454e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004550:	683b      	ldr	r3, [r7, #0]
 8004552:	9300      	str	r3, [sp, #0]
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	2200      	movs	r2, #0
 8004558:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800455c:	68f8      	ldr	r0, [r7, #12]
 800455e:	f000 f893 	bl	8004688 <I2C_WaitOnFlagUntilTimeout>
 8004562:	4603      	mov	r3, r0
 8004564:	2b00      	cmp	r3, #0
 8004566:	d00d      	beq.n	8004584 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004572:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004576:	d103      	bne.n	8004580 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800457e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004580:	2303      	movs	r3, #3
 8004582:	e079      	b.n	8004678 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	691b      	ldr	r3, [r3, #16]
 8004588:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800458c:	d108      	bne.n	80045a0 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800458e:	897b      	ldrh	r3, [r7, #10]
 8004590:	b2db      	uxtb	r3, r3
 8004592:	f043 0301 	orr.w	r3, r3, #1
 8004596:	b2da      	uxtb	r2, r3
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	611a      	str	r2, [r3, #16]
 800459e:	e05f      	b.n	8004660 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80045a0:	897b      	ldrh	r3, [r7, #10]
 80045a2:	11db      	asrs	r3, r3, #7
 80045a4:	b2db      	uxtb	r3, r3
 80045a6:	f003 0306 	and.w	r3, r3, #6
 80045aa:	b2db      	uxtb	r3, r3
 80045ac:	f063 030f 	orn	r3, r3, #15
 80045b0:	b2da      	uxtb	r2, r3
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80045b8:	683b      	ldr	r3, [r7, #0]
 80045ba:	687a      	ldr	r2, [r7, #4]
 80045bc:	4930      	ldr	r1, [pc, #192]	; (8004680 <I2C_MasterRequestRead+0x194>)
 80045be:	68f8      	ldr	r0, [r7, #12]
 80045c0:	f000 f8b9 	bl	8004736 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80045c4:	4603      	mov	r3, r0
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d001      	beq.n	80045ce <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 80045ca:	2301      	movs	r3, #1
 80045cc:	e054      	b.n	8004678 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80045ce:	897b      	ldrh	r3, [r7, #10]
 80045d0:	b2da      	uxtb	r2, r3
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80045d8:	683b      	ldr	r3, [r7, #0]
 80045da:	687a      	ldr	r2, [r7, #4]
 80045dc:	4929      	ldr	r1, [pc, #164]	; (8004684 <I2C_MasterRequestRead+0x198>)
 80045de:	68f8      	ldr	r0, [r7, #12]
 80045e0:	f000 f8a9 	bl	8004736 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80045e4:	4603      	mov	r3, r0
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d001      	beq.n	80045ee <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 80045ea:	2301      	movs	r3, #1
 80045ec:	e044      	b.n	8004678 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80045ee:	2300      	movs	r3, #0
 80045f0:	613b      	str	r3, [r7, #16]
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	695b      	ldr	r3, [r3, #20]
 80045f8:	613b      	str	r3, [r7, #16]
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	699b      	ldr	r3, [r3, #24]
 8004600:	613b      	str	r3, [r7, #16]
 8004602:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	681a      	ldr	r2, [r3, #0]
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004612:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004614:	683b      	ldr	r3, [r7, #0]
 8004616:	9300      	str	r3, [sp, #0]
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	2200      	movs	r2, #0
 800461c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004620:	68f8      	ldr	r0, [r7, #12]
 8004622:	f000 f831 	bl	8004688 <I2C_WaitOnFlagUntilTimeout>
 8004626:	4603      	mov	r3, r0
 8004628:	2b00      	cmp	r3, #0
 800462a:	d00d      	beq.n	8004648 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004636:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800463a:	d103      	bne.n	8004644 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004642:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8004644:	2303      	movs	r3, #3
 8004646:	e017      	b.n	8004678 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8004648:	897b      	ldrh	r3, [r7, #10]
 800464a:	11db      	asrs	r3, r3, #7
 800464c:	b2db      	uxtb	r3, r3
 800464e:	f003 0306 	and.w	r3, r3, #6
 8004652:	b2db      	uxtb	r3, r3
 8004654:	f063 030e 	orn	r3, r3, #14
 8004658:	b2da      	uxtb	r2, r3
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004660:	683b      	ldr	r3, [r7, #0]
 8004662:	687a      	ldr	r2, [r7, #4]
 8004664:	4907      	ldr	r1, [pc, #28]	; (8004684 <I2C_MasterRequestRead+0x198>)
 8004666:	68f8      	ldr	r0, [r7, #12]
 8004668:	f000 f865 	bl	8004736 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800466c:	4603      	mov	r3, r0
 800466e:	2b00      	cmp	r3, #0
 8004670:	d001      	beq.n	8004676 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8004672:	2301      	movs	r3, #1
 8004674:	e000      	b.n	8004678 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8004676:	2300      	movs	r3, #0
}
 8004678:	4618      	mov	r0, r3
 800467a:	3718      	adds	r7, #24
 800467c:	46bd      	mov	sp, r7
 800467e:	bd80      	pop	{r7, pc}
 8004680:	00010008 	.word	0x00010008
 8004684:	00010002 	.word	0x00010002

08004688 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004688:	b580      	push	{r7, lr}
 800468a:	b084      	sub	sp, #16
 800468c:	af00      	add	r7, sp, #0
 800468e:	60f8      	str	r0, [r7, #12]
 8004690:	60b9      	str	r1, [r7, #8]
 8004692:	603b      	str	r3, [r7, #0]
 8004694:	4613      	mov	r3, r2
 8004696:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004698:	e025      	b.n	80046e6 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800469a:	683b      	ldr	r3, [r7, #0]
 800469c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046a0:	d021      	beq.n	80046e6 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80046a2:	f7fe f861 	bl	8002768 <HAL_GetTick>
 80046a6:	4602      	mov	r2, r0
 80046a8:	69bb      	ldr	r3, [r7, #24]
 80046aa:	1ad3      	subs	r3, r2, r3
 80046ac:	683a      	ldr	r2, [r7, #0]
 80046ae:	429a      	cmp	r2, r3
 80046b0:	d302      	bcc.n	80046b8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80046b2:	683b      	ldr	r3, [r7, #0]
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d116      	bne.n	80046e6 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	2200      	movs	r2, #0
 80046bc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	2220      	movs	r2, #32
 80046c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	2200      	movs	r2, #0
 80046ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046d2:	f043 0220 	orr.w	r2, r3, #32
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	2200      	movs	r2, #0
 80046de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80046e2:	2301      	movs	r3, #1
 80046e4:	e023      	b.n	800472e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80046e6:	68bb      	ldr	r3, [r7, #8]
 80046e8:	0c1b      	lsrs	r3, r3, #16
 80046ea:	b2db      	uxtb	r3, r3
 80046ec:	2b01      	cmp	r3, #1
 80046ee:	d10d      	bne.n	800470c <I2C_WaitOnFlagUntilTimeout+0x84>
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	695b      	ldr	r3, [r3, #20]
 80046f6:	43da      	mvns	r2, r3
 80046f8:	68bb      	ldr	r3, [r7, #8]
 80046fa:	4013      	ands	r3, r2
 80046fc:	b29b      	uxth	r3, r3
 80046fe:	2b00      	cmp	r3, #0
 8004700:	bf0c      	ite	eq
 8004702:	2301      	moveq	r3, #1
 8004704:	2300      	movne	r3, #0
 8004706:	b2db      	uxtb	r3, r3
 8004708:	461a      	mov	r2, r3
 800470a:	e00c      	b.n	8004726 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	699b      	ldr	r3, [r3, #24]
 8004712:	43da      	mvns	r2, r3
 8004714:	68bb      	ldr	r3, [r7, #8]
 8004716:	4013      	ands	r3, r2
 8004718:	b29b      	uxth	r3, r3
 800471a:	2b00      	cmp	r3, #0
 800471c:	bf0c      	ite	eq
 800471e:	2301      	moveq	r3, #1
 8004720:	2300      	movne	r3, #0
 8004722:	b2db      	uxtb	r3, r3
 8004724:	461a      	mov	r2, r3
 8004726:	79fb      	ldrb	r3, [r7, #7]
 8004728:	429a      	cmp	r2, r3
 800472a:	d0b6      	beq.n	800469a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800472c:	2300      	movs	r3, #0
}
 800472e:	4618      	mov	r0, r3
 8004730:	3710      	adds	r7, #16
 8004732:	46bd      	mov	sp, r7
 8004734:	bd80      	pop	{r7, pc}

08004736 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004736:	b580      	push	{r7, lr}
 8004738:	b084      	sub	sp, #16
 800473a:	af00      	add	r7, sp, #0
 800473c:	60f8      	str	r0, [r7, #12]
 800473e:	60b9      	str	r1, [r7, #8]
 8004740:	607a      	str	r2, [r7, #4]
 8004742:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004744:	e051      	b.n	80047ea <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	695b      	ldr	r3, [r3, #20]
 800474c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004750:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004754:	d123      	bne.n	800479e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	681a      	ldr	r2, [r3, #0]
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004764:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800476e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	2200      	movs	r2, #0
 8004774:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	2220      	movs	r2, #32
 800477a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	2200      	movs	r2, #0
 8004782:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800478a:	f043 0204 	orr.w	r2, r3, #4
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	2200      	movs	r2, #0
 8004796:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800479a:	2301      	movs	r3, #1
 800479c:	e046      	b.n	800482c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047a4:	d021      	beq.n	80047ea <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80047a6:	f7fd ffdf 	bl	8002768 <HAL_GetTick>
 80047aa:	4602      	mov	r2, r0
 80047ac:	683b      	ldr	r3, [r7, #0]
 80047ae:	1ad3      	subs	r3, r2, r3
 80047b0:	687a      	ldr	r2, [r7, #4]
 80047b2:	429a      	cmp	r2, r3
 80047b4:	d302      	bcc.n	80047bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d116      	bne.n	80047ea <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	2200      	movs	r2, #0
 80047c0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	2220      	movs	r2, #32
 80047c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	2200      	movs	r2, #0
 80047ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047d6:	f043 0220 	orr.w	r2, r3, #32
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	2200      	movs	r2, #0
 80047e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80047e6:	2301      	movs	r3, #1
 80047e8:	e020      	b.n	800482c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80047ea:	68bb      	ldr	r3, [r7, #8]
 80047ec:	0c1b      	lsrs	r3, r3, #16
 80047ee:	b2db      	uxtb	r3, r3
 80047f0:	2b01      	cmp	r3, #1
 80047f2:	d10c      	bne.n	800480e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	695b      	ldr	r3, [r3, #20]
 80047fa:	43da      	mvns	r2, r3
 80047fc:	68bb      	ldr	r3, [r7, #8]
 80047fe:	4013      	ands	r3, r2
 8004800:	b29b      	uxth	r3, r3
 8004802:	2b00      	cmp	r3, #0
 8004804:	bf14      	ite	ne
 8004806:	2301      	movne	r3, #1
 8004808:	2300      	moveq	r3, #0
 800480a:	b2db      	uxtb	r3, r3
 800480c:	e00b      	b.n	8004826 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	699b      	ldr	r3, [r3, #24]
 8004814:	43da      	mvns	r2, r3
 8004816:	68bb      	ldr	r3, [r7, #8]
 8004818:	4013      	ands	r3, r2
 800481a:	b29b      	uxth	r3, r3
 800481c:	2b00      	cmp	r3, #0
 800481e:	bf14      	ite	ne
 8004820:	2301      	movne	r3, #1
 8004822:	2300      	moveq	r3, #0
 8004824:	b2db      	uxtb	r3, r3
 8004826:	2b00      	cmp	r3, #0
 8004828:	d18d      	bne.n	8004746 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800482a:	2300      	movs	r3, #0
}
 800482c:	4618      	mov	r0, r3
 800482e:	3710      	adds	r7, #16
 8004830:	46bd      	mov	sp, r7
 8004832:	bd80      	pop	{r7, pc}

08004834 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004834:	b580      	push	{r7, lr}
 8004836:	b084      	sub	sp, #16
 8004838:	af00      	add	r7, sp, #0
 800483a:	60f8      	str	r0, [r7, #12]
 800483c:	60b9      	str	r1, [r7, #8]
 800483e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004840:	e02d      	b.n	800489e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004842:	68f8      	ldr	r0, [r7, #12]
 8004844:	f000 f8ce 	bl	80049e4 <I2C_IsAcknowledgeFailed>
 8004848:	4603      	mov	r3, r0
 800484a:	2b00      	cmp	r3, #0
 800484c:	d001      	beq.n	8004852 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800484e:	2301      	movs	r3, #1
 8004850:	e02d      	b.n	80048ae <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004852:	68bb      	ldr	r3, [r7, #8]
 8004854:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004858:	d021      	beq.n	800489e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800485a:	f7fd ff85 	bl	8002768 <HAL_GetTick>
 800485e:	4602      	mov	r2, r0
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	1ad3      	subs	r3, r2, r3
 8004864:	68ba      	ldr	r2, [r7, #8]
 8004866:	429a      	cmp	r2, r3
 8004868:	d302      	bcc.n	8004870 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800486a:	68bb      	ldr	r3, [r7, #8]
 800486c:	2b00      	cmp	r3, #0
 800486e:	d116      	bne.n	800489e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	2200      	movs	r2, #0
 8004874:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	2220      	movs	r2, #32
 800487a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	2200      	movs	r2, #0
 8004882:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800488a:	f043 0220 	orr.w	r2, r3, #32
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	2200      	movs	r2, #0
 8004896:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800489a:	2301      	movs	r3, #1
 800489c:	e007      	b.n	80048ae <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	695b      	ldr	r3, [r3, #20]
 80048a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80048a8:	2b80      	cmp	r3, #128	; 0x80
 80048aa:	d1ca      	bne.n	8004842 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80048ac:	2300      	movs	r3, #0
}
 80048ae:	4618      	mov	r0, r3
 80048b0:	3710      	adds	r7, #16
 80048b2:	46bd      	mov	sp, r7
 80048b4:	bd80      	pop	{r7, pc}

080048b6 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80048b6:	b580      	push	{r7, lr}
 80048b8:	b084      	sub	sp, #16
 80048ba:	af00      	add	r7, sp, #0
 80048bc:	60f8      	str	r0, [r7, #12]
 80048be:	60b9      	str	r1, [r7, #8]
 80048c0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80048c2:	e02d      	b.n	8004920 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80048c4:	68f8      	ldr	r0, [r7, #12]
 80048c6:	f000 f88d 	bl	80049e4 <I2C_IsAcknowledgeFailed>
 80048ca:	4603      	mov	r3, r0
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d001      	beq.n	80048d4 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80048d0:	2301      	movs	r3, #1
 80048d2:	e02d      	b.n	8004930 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80048d4:	68bb      	ldr	r3, [r7, #8]
 80048d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048da:	d021      	beq.n	8004920 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80048dc:	f7fd ff44 	bl	8002768 <HAL_GetTick>
 80048e0:	4602      	mov	r2, r0
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	1ad3      	subs	r3, r2, r3
 80048e6:	68ba      	ldr	r2, [r7, #8]
 80048e8:	429a      	cmp	r2, r3
 80048ea:	d302      	bcc.n	80048f2 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80048ec:	68bb      	ldr	r3, [r7, #8]
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d116      	bne.n	8004920 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	2200      	movs	r2, #0
 80048f6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	2220      	movs	r2, #32
 80048fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	2200      	movs	r2, #0
 8004904:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800490c:	f043 0220 	orr.w	r2, r3, #32
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	2200      	movs	r2, #0
 8004918:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800491c:	2301      	movs	r3, #1
 800491e:	e007      	b.n	8004930 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	695b      	ldr	r3, [r3, #20]
 8004926:	f003 0304 	and.w	r3, r3, #4
 800492a:	2b04      	cmp	r3, #4
 800492c:	d1ca      	bne.n	80048c4 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800492e:	2300      	movs	r3, #0
}
 8004930:	4618      	mov	r0, r3
 8004932:	3710      	adds	r7, #16
 8004934:	46bd      	mov	sp, r7
 8004936:	bd80      	pop	{r7, pc}

08004938 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004938:	b580      	push	{r7, lr}
 800493a:	b084      	sub	sp, #16
 800493c:	af00      	add	r7, sp, #0
 800493e:	60f8      	str	r0, [r7, #12]
 8004940:	60b9      	str	r1, [r7, #8]
 8004942:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004944:	e042      	b.n	80049cc <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	695b      	ldr	r3, [r3, #20]
 800494c:	f003 0310 	and.w	r3, r3, #16
 8004950:	2b10      	cmp	r3, #16
 8004952:	d119      	bne.n	8004988 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	f06f 0210 	mvn.w	r2, #16
 800495c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	2200      	movs	r2, #0
 8004962:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	2220      	movs	r2, #32
 8004968:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	2200      	movs	r2, #0
 8004970:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	2200      	movs	r2, #0
 8004980:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004984:	2301      	movs	r3, #1
 8004986:	e029      	b.n	80049dc <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004988:	f7fd feee 	bl	8002768 <HAL_GetTick>
 800498c:	4602      	mov	r2, r0
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	1ad3      	subs	r3, r2, r3
 8004992:	68ba      	ldr	r2, [r7, #8]
 8004994:	429a      	cmp	r2, r3
 8004996:	d302      	bcc.n	800499e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004998:	68bb      	ldr	r3, [r7, #8]
 800499a:	2b00      	cmp	r3, #0
 800499c:	d116      	bne.n	80049cc <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	2200      	movs	r2, #0
 80049a2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	2220      	movs	r2, #32
 80049a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	2200      	movs	r2, #0
 80049b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049b8:	f043 0220 	orr.w	r2, r3, #32
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	2200      	movs	r2, #0
 80049c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80049c8:	2301      	movs	r3, #1
 80049ca:	e007      	b.n	80049dc <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	695b      	ldr	r3, [r3, #20]
 80049d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049d6:	2b40      	cmp	r3, #64	; 0x40
 80049d8:	d1b5      	bne.n	8004946 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80049da:	2300      	movs	r3, #0
}
 80049dc:	4618      	mov	r0, r3
 80049de:	3710      	adds	r7, #16
 80049e0:	46bd      	mov	sp, r7
 80049e2:	bd80      	pop	{r7, pc}

080049e4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80049e4:	b480      	push	{r7}
 80049e6:	b083      	sub	sp, #12
 80049e8:	af00      	add	r7, sp, #0
 80049ea:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	695b      	ldr	r3, [r3, #20]
 80049f2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80049f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80049fa:	d11b      	bne.n	8004a34 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004a04:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	2200      	movs	r2, #0
 8004a0a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	2220      	movs	r2, #32
 8004a10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	2200      	movs	r2, #0
 8004a18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a20:	f043 0204 	orr.w	r2, r3, #4
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	2200      	movs	r2, #0
 8004a2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004a30:	2301      	movs	r3, #1
 8004a32:	e000      	b.n	8004a36 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004a34:	2300      	movs	r3, #0
}
 8004a36:	4618      	mov	r0, r3
 8004a38:	370c      	adds	r7, #12
 8004a3a:	46bd      	mov	sp, r7
 8004a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a40:	4770      	bx	lr
	...

08004a44 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8004a44:	b580      	push	{r7, lr}
 8004a46:	b088      	sub	sp, #32
 8004a48:	af00      	add	r7, sp, #0
 8004a4a:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d101      	bne.n	8004a56 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8004a52:	2301      	movs	r3, #1
 8004a54:	e1e7      	b.n	8004e26 <HAL_I2S_Init+0x3e2>
  }

  /* Check the I2S parameters */
  assert_param(IS_I2S_ALL_INSTANCE(hi2s->Instance));
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	4a9b      	ldr	r2, [pc, #620]	; (8004cc8 <HAL_I2S_Init+0x284>)
 8004a5c:	4293      	cmp	r3, r2
 8004a5e:	d018      	beq.n	8004a92 <HAL_I2S_Init+0x4e>
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	4a99      	ldr	r2, [pc, #612]	; (8004ccc <HAL_I2S_Init+0x288>)
 8004a66:	4293      	cmp	r3, r2
 8004a68:	d013      	beq.n	8004a92 <HAL_I2S_Init+0x4e>
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	4a98      	ldr	r2, [pc, #608]	; (8004cd0 <HAL_I2S_Init+0x28c>)
 8004a70:	4293      	cmp	r3, r2
 8004a72:	d00e      	beq.n	8004a92 <HAL_I2S_Init+0x4e>
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	4a96      	ldr	r2, [pc, #600]	; (8004cd4 <HAL_I2S_Init+0x290>)
 8004a7a:	4293      	cmp	r3, r2
 8004a7c:	d009      	beq.n	8004a92 <HAL_I2S_Init+0x4e>
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	4a95      	ldr	r2, [pc, #596]	; (8004cd8 <HAL_I2S_Init+0x294>)
 8004a84:	4293      	cmp	r3, r2
 8004a86:	d004      	beq.n	8004a92 <HAL_I2S_Init+0x4e>
 8004a88:	f240 111b 	movw	r1, #283	; 0x11b
 8004a8c:	4893      	ldr	r0, [pc, #588]	; (8004cdc <HAL_I2S_Init+0x298>)
 8004a8e:	f7fd fb94 	bl	80021ba <assert_failed>
  assert_param(IS_I2S_MODE(hi2s->Init.Mode));
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	685b      	ldr	r3, [r3, #4]
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d013      	beq.n	8004ac2 <HAL_I2S_Init+0x7e>
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	685b      	ldr	r3, [r3, #4]
 8004a9e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004aa2:	d00e      	beq.n	8004ac2 <HAL_I2S_Init+0x7e>
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	685b      	ldr	r3, [r3, #4]
 8004aa8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004aac:	d009      	beq.n	8004ac2 <HAL_I2S_Init+0x7e>
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	685b      	ldr	r3, [r3, #4]
 8004ab2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004ab6:	d004      	beq.n	8004ac2 <HAL_I2S_Init+0x7e>
 8004ab8:	f44f 718e 	mov.w	r1, #284	; 0x11c
 8004abc:	4887      	ldr	r0, [pc, #540]	; (8004cdc <HAL_I2S_Init+0x298>)
 8004abe:	f7fd fb7c 	bl	80021ba <assert_failed>
  assert_param(IS_I2S_STANDARD(hi2s->Init.Standard));
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	689b      	ldr	r3, [r3, #8]
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d014      	beq.n	8004af4 <HAL_I2S_Init+0xb0>
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	689b      	ldr	r3, [r3, #8]
 8004ace:	2b10      	cmp	r3, #16
 8004ad0:	d010      	beq.n	8004af4 <HAL_I2S_Init+0xb0>
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	689b      	ldr	r3, [r3, #8]
 8004ad6:	2b20      	cmp	r3, #32
 8004ad8:	d00c      	beq.n	8004af4 <HAL_I2S_Init+0xb0>
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	689b      	ldr	r3, [r3, #8]
 8004ade:	2b30      	cmp	r3, #48	; 0x30
 8004ae0:	d008      	beq.n	8004af4 <HAL_I2S_Init+0xb0>
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	689b      	ldr	r3, [r3, #8]
 8004ae6:	2bb0      	cmp	r3, #176	; 0xb0
 8004ae8:	d004      	beq.n	8004af4 <HAL_I2S_Init+0xb0>
 8004aea:	f240 111d 	movw	r1, #285	; 0x11d
 8004aee:	487b      	ldr	r0, [pc, #492]	; (8004cdc <HAL_I2S_Init+0x298>)
 8004af0:	f7fd fb63 	bl	80021ba <assert_failed>
  assert_param(IS_I2S_DATA_FORMAT(hi2s->Init.DataFormat));
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	68db      	ldr	r3, [r3, #12]
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d010      	beq.n	8004b1e <HAL_I2S_Init+0xda>
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	68db      	ldr	r3, [r3, #12]
 8004b00:	2b01      	cmp	r3, #1
 8004b02:	d00c      	beq.n	8004b1e <HAL_I2S_Init+0xda>
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	68db      	ldr	r3, [r3, #12]
 8004b08:	2b03      	cmp	r3, #3
 8004b0a:	d008      	beq.n	8004b1e <HAL_I2S_Init+0xda>
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	68db      	ldr	r3, [r3, #12]
 8004b10:	2b05      	cmp	r3, #5
 8004b12:	d004      	beq.n	8004b1e <HAL_I2S_Init+0xda>
 8004b14:	f44f 718f 	mov.w	r1, #286	; 0x11e
 8004b18:	4870      	ldr	r0, [pc, #448]	; (8004cdc <HAL_I2S_Init+0x298>)
 8004b1a:	f7fd fb4e 	bl	80021ba <assert_failed>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	691b      	ldr	r3, [r3, #16]
 8004b22:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004b26:	d008      	beq.n	8004b3a <HAL_I2S_Init+0xf6>
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	691b      	ldr	r3, [r3, #16]
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d004      	beq.n	8004b3a <HAL_I2S_Init+0xf6>
 8004b30:	f240 111f 	movw	r1, #287	; 0x11f
 8004b34:	4869      	ldr	r0, [pc, #420]	; (8004cdc <HAL_I2S_Init+0x298>)
 8004b36:	f7fd fb40 	bl	80021ba <assert_failed>
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	695b      	ldr	r3, [r3, #20]
 8004b3e:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 8004b42:	d304      	bcc.n	8004b4e <HAL_I2S_Init+0x10a>
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	695b      	ldr	r3, [r3, #20]
 8004b48:	4a65      	ldr	r2, [pc, #404]	; (8004ce0 <HAL_I2S_Init+0x29c>)
 8004b4a:	4293      	cmp	r3, r2
 8004b4c:	d908      	bls.n	8004b60 <HAL_I2S_Init+0x11c>
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	695b      	ldr	r3, [r3, #20]
 8004b52:	2b02      	cmp	r3, #2
 8004b54:	d004      	beq.n	8004b60 <HAL_I2S_Init+0x11c>
 8004b56:	f44f 7190 	mov.w	r1, #288	; 0x120
 8004b5a:	4860      	ldr	r0, [pc, #384]	; (8004cdc <HAL_I2S_Init+0x298>)
 8004b5c:	f7fd fb2d 	bl	80021ba <assert_failed>
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	699b      	ldr	r3, [r3, #24]
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d008      	beq.n	8004b7a <HAL_I2S_Init+0x136>
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	699b      	ldr	r3, [r3, #24]
 8004b6c:	2b08      	cmp	r3, #8
 8004b6e:	d004      	beq.n	8004b7a <HAL_I2S_Init+0x136>
 8004b70:	f240 1121 	movw	r1, #289	; 0x121
 8004b74:	4859      	ldr	r0, [pc, #356]	; (8004cdc <HAL_I2S_Init+0x298>)
 8004b76:	f7fd fb20 	bl	80021ba <assert_failed>
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	69db      	ldr	r3, [r3, #28]
 8004b7e:	2b01      	cmp	r3, #1
 8004b80:	d008      	beq.n	8004b94 <HAL_I2S_Init+0x150>
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	69db      	ldr	r3, [r3, #28]
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d004      	beq.n	8004b94 <HAL_I2S_Init+0x150>
 8004b8a:	f44f 7191 	mov.w	r1, #290	; 0x122
 8004b8e:	4853      	ldr	r0, [pc, #332]	; (8004cdc <HAL_I2S_Init+0x298>)
 8004b90:	f7fd fb13 	bl	80021ba <assert_failed>

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004b9a:	b2db      	uxtb	r3, r3
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d109      	bne.n	8004bb4 <HAL_I2S_Init+0x170>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	2200      	movs	r2, #0
 8004ba4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	4a4e      	ldr	r2, [pc, #312]	; (8004ce4 <HAL_I2S_Init+0x2a0>)
 8004bac:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8004bae:	6878      	ldr	r0, [r7, #4]
 8004bb0:	f7fc fd82 	bl	80016b8 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	2202      	movs	r2, #2
 8004bb8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	69db      	ldr	r3, [r3, #28]
 8004bc2:	687a      	ldr	r2, [r7, #4]
 8004bc4:	6812      	ldr	r2, [r2, #0]
 8004bc6:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8004bca:	f023 030f 	bic.w	r3, r3, #15
 8004bce:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	2202      	movs	r2, #2
 8004bd6:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	695b      	ldr	r3, [r3, #20]
 8004bdc:	2b02      	cmp	r3, #2
 8004bde:	d060      	beq.n	8004ca2 <HAL_I2S_Init+0x25e>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	68db      	ldr	r3, [r3, #12]
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d102      	bne.n	8004bee <HAL_I2S_Init+0x1aa>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8004be8:	2310      	movs	r3, #16
 8004bea:	617b      	str	r3, [r7, #20]
 8004bec:	e001      	b.n	8004bf2 <HAL_I2S_Init+0x1ae>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8004bee:	2320      	movs	r3, #32
 8004bf0:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	689b      	ldr	r3, [r3, #8]
 8004bf6:	2b20      	cmp	r3, #32
 8004bf8:	d802      	bhi.n	8004c00 <HAL_I2S_Init+0x1bc>
    {
      /* In I2S standard packet lenght is multiplied by 2 */
      packetlength = packetlength * 2U;
 8004bfa:	697b      	ldr	r3, [r7, #20]
 8004bfc:	005b      	lsls	r3, r3, #1
 8004bfe:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8004c00:	2001      	movs	r0, #1
 8004c02:	f002 ffd1 	bl	8007ba8 <HAL_RCCEx_GetPeriphCLKFreq>
 8004c06:	60f8      	str	r0, [r7, #12]
#endif

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	691b      	ldr	r3, [r3, #16]
 8004c0c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004c10:	d125      	bne.n	8004c5e <HAL_I2S_Init+0x21a>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	68db      	ldr	r3, [r3, #12]
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d010      	beq.n	8004c3c <HAL_I2S_Init+0x1f8>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8004c1a:	697b      	ldr	r3, [r7, #20]
 8004c1c:	009b      	lsls	r3, r3, #2
 8004c1e:	68fa      	ldr	r2, [r7, #12]
 8004c20:	fbb2 f2f3 	udiv	r2, r2, r3
 8004c24:	4613      	mov	r3, r2
 8004c26:	009b      	lsls	r3, r3, #2
 8004c28:	4413      	add	r3, r2
 8004c2a:	005b      	lsls	r3, r3, #1
 8004c2c:	461a      	mov	r2, r3
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	695b      	ldr	r3, [r3, #20]
 8004c32:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c36:	3305      	adds	r3, #5
 8004c38:	613b      	str	r3, [r7, #16]
 8004c3a:	e01f      	b.n	8004c7c <HAL_I2S_Init+0x238>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8004c3c:	697b      	ldr	r3, [r7, #20]
 8004c3e:	00db      	lsls	r3, r3, #3
 8004c40:	68fa      	ldr	r2, [r7, #12]
 8004c42:	fbb2 f2f3 	udiv	r2, r2, r3
 8004c46:	4613      	mov	r3, r2
 8004c48:	009b      	lsls	r3, r3, #2
 8004c4a:	4413      	add	r3, r2
 8004c4c:	005b      	lsls	r3, r3, #1
 8004c4e:	461a      	mov	r2, r3
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	695b      	ldr	r3, [r3, #20]
 8004c54:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c58:	3305      	adds	r3, #5
 8004c5a:	613b      	str	r3, [r7, #16]
 8004c5c:	e00e      	b.n	8004c7c <HAL_I2S_Init+0x238>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8004c5e:	68fa      	ldr	r2, [r7, #12]
 8004c60:	697b      	ldr	r3, [r7, #20]
 8004c62:	fbb2 f2f3 	udiv	r2, r2, r3
 8004c66:	4613      	mov	r3, r2
 8004c68:	009b      	lsls	r3, r3, #2
 8004c6a:	4413      	add	r3, r2
 8004c6c:	005b      	lsls	r3, r3, #1
 8004c6e:	461a      	mov	r2, r3
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	695b      	ldr	r3, [r3, #20]
 8004c74:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c78:	3305      	adds	r3, #5
 8004c7a:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8004c7c:	693b      	ldr	r3, [r7, #16]
 8004c7e:	4a1a      	ldr	r2, [pc, #104]	; (8004ce8 <HAL_I2S_Init+0x2a4>)
 8004c80:	fba2 2303 	umull	r2, r3, r2, r3
 8004c84:	08db      	lsrs	r3, r3, #3
 8004c86:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8004c88:	693b      	ldr	r3, [r7, #16]
 8004c8a:	f003 0301 	and.w	r3, r3, #1
 8004c8e:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8004c90:	693a      	ldr	r2, [r7, #16]
 8004c92:	69bb      	ldr	r3, [r7, #24]
 8004c94:	1ad3      	subs	r3, r2, r3
 8004c96:	085b      	lsrs	r3, r3, #1
 8004c98:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8004c9a:	69bb      	ldr	r3, [r7, #24]
 8004c9c:	021b      	lsls	r3, r3, #8
 8004c9e:	61bb      	str	r3, [r7, #24]
 8004ca0:	e003      	b.n	8004caa <HAL_I2S_Init+0x266>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8004ca2:	2302      	movs	r3, #2
 8004ca4:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8004ca6:	2300      	movs	r3, #0
 8004ca8:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8004caa:	69fb      	ldr	r3, [r7, #28]
 8004cac:	2b01      	cmp	r3, #1
 8004cae:	d902      	bls.n	8004cb6 <HAL_I2S_Init+0x272>
 8004cb0:	69fb      	ldr	r3, [r7, #28]
 8004cb2:	2bff      	cmp	r3, #255	; 0xff
 8004cb4:	d91a      	bls.n	8004cec <HAL_I2S_Init+0x2a8>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004cba:	f043 0210 	orr.w	r2, r3, #16
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8004cc2:	2301      	movs	r3, #1
 8004cc4:	e0af      	b.n	8004e26 <HAL_I2S_Init+0x3e2>
 8004cc6:	bf00      	nop
 8004cc8:	40013000 	.word	0x40013000
 8004ccc:	40003800 	.word	0x40003800
 8004cd0:	40003c00 	.word	0x40003c00
 8004cd4:	40013400 	.word	0x40013400
 8004cd8:	40015000 	.word	0x40015000
 8004cdc:	0800fae8 	.word	0x0800fae8
 8004ce0:	0002ee00 	.word	0x0002ee00
 8004ce4:	080052dd 	.word	0x080052dd
 8004ce8:	cccccccd 	.word	0xcccccccd
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	691a      	ldr	r2, [r3, #16]
 8004cf0:	69bb      	ldr	r3, [r7, #24]
 8004cf2:	ea42 0103 	orr.w	r1, r2, r3
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	69fa      	ldr	r2, [r7, #28]
 8004cfc:	430a      	orrs	r2, r1
 8004cfe:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	69db      	ldr	r3, [r3, #28]
 8004d06:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8004d0a:	f023 030f 	bic.w	r3, r3, #15
 8004d0e:	687a      	ldr	r2, [r7, #4]
 8004d10:	6851      	ldr	r1, [r2, #4]
 8004d12:	687a      	ldr	r2, [r7, #4]
 8004d14:	6892      	ldr	r2, [r2, #8]
 8004d16:	4311      	orrs	r1, r2
 8004d18:	687a      	ldr	r2, [r7, #4]
 8004d1a:	68d2      	ldr	r2, [r2, #12]
 8004d1c:	4311      	orrs	r1, r2
 8004d1e:	687a      	ldr	r2, [r7, #4]
 8004d20:	6992      	ldr	r2, [r2, #24]
 8004d22:	430a      	orrs	r2, r1
 8004d24:	431a      	orrs	r2, r3
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004d2e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_ASTRTEN */

#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	6a1b      	ldr	r3, [r3, #32]
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d008      	beq.n	8004d4a <HAL_I2S_Init+0x306>
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	6a1b      	ldr	r3, [r3, #32]
 8004d3c:	2b01      	cmp	r3, #1
 8004d3e:	d004      	beq.n	8004d4a <HAL_I2S_Init+0x306>
 8004d40:	f240 11bd 	movw	r1, #445	; 0x1bd
 8004d44:	483a      	ldr	r0, [pc, #232]	; (8004e30 <HAL_I2S_Init+0x3ec>)
 8004d46:	f7fd fa38 	bl	80021ba <assert_failed>

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	6a1b      	ldr	r3, [r3, #32]
 8004d4e:	2b01      	cmp	r3, #1
 8004d50:	d161      	bne.n	8004e16 <HAL_I2S_Init+0x3d2>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	4a37      	ldr	r2, [pc, #220]	; (8004e34 <HAL_I2S_Init+0x3f0>)
 8004d56:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	4a36      	ldr	r2, [pc, #216]	; (8004e38 <HAL_I2S_Init+0x3f4>)
 8004d5e:	4293      	cmp	r3, r2
 8004d60:	d101      	bne.n	8004d66 <HAL_I2S_Init+0x322>
 8004d62:	4b36      	ldr	r3, [pc, #216]	; (8004e3c <HAL_I2S_Init+0x3f8>)
 8004d64:	e001      	b.n	8004d6a <HAL_I2S_Init+0x326>
 8004d66:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004d6a:	69db      	ldr	r3, [r3, #28]
 8004d6c:	687a      	ldr	r2, [r7, #4]
 8004d6e:	6812      	ldr	r2, [r2, #0]
 8004d70:	4931      	ldr	r1, [pc, #196]	; (8004e38 <HAL_I2S_Init+0x3f4>)
 8004d72:	428a      	cmp	r2, r1
 8004d74:	d101      	bne.n	8004d7a <HAL_I2S_Init+0x336>
 8004d76:	4a31      	ldr	r2, [pc, #196]	; (8004e3c <HAL_I2S_Init+0x3f8>)
 8004d78:	e001      	b.n	8004d7e <HAL_I2S_Init+0x33a>
 8004d7a:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8004d7e:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8004d82:	f023 030f 	bic.w	r3, r3, #15
 8004d86:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	4a2a      	ldr	r2, [pc, #168]	; (8004e38 <HAL_I2S_Init+0x3f4>)
 8004d8e:	4293      	cmp	r3, r2
 8004d90:	d101      	bne.n	8004d96 <HAL_I2S_Init+0x352>
 8004d92:	4b2a      	ldr	r3, [pc, #168]	; (8004e3c <HAL_I2S_Init+0x3f8>)
 8004d94:	e001      	b.n	8004d9a <HAL_I2S_Init+0x356>
 8004d96:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004d9a:	2202      	movs	r2, #2
 8004d9c:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	4a25      	ldr	r2, [pc, #148]	; (8004e38 <HAL_I2S_Init+0x3f4>)
 8004da4:	4293      	cmp	r3, r2
 8004da6:	d101      	bne.n	8004dac <HAL_I2S_Init+0x368>
 8004da8:	4b24      	ldr	r3, [pc, #144]	; (8004e3c <HAL_I2S_Init+0x3f8>)
 8004daa:	e001      	b.n	8004db0 <HAL_I2S_Init+0x36c>
 8004dac:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004db0:	69db      	ldr	r3, [r3, #28]
 8004db2:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	685b      	ldr	r3, [r3, #4]
 8004db8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004dbc:	d003      	beq.n	8004dc6 <HAL_I2S_Init+0x382>
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	685b      	ldr	r3, [r3, #4]
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d103      	bne.n	8004dce <HAL_I2S_Init+0x38a>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8004dc6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004dca:	613b      	str	r3, [r7, #16]
 8004dcc:	e001      	b.n	8004dd2 <HAL_I2S_Init+0x38e>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8004dce:	2300      	movs	r3, #0
 8004dd0:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 8004dd2:	693b      	ldr	r3, [r7, #16]
 8004dd4:	b29a      	uxth	r2, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	689b      	ldr	r3, [r3, #8]
 8004dda:	b299      	uxth	r1, r3
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	68db      	ldr	r3, [r3, #12]
 8004de0:	b298      	uxth	r0, r3
                                    (uint16_t)hi2s->Init.CPOL))));
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	699b      	ldr	r3, [r3, #24]
 8004de6:	b29b      	uxth	r3, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 8004de8:	4303      	orrs	r3, r0
 8004dea:	b29b      	uxth	r3, r3
 8004dec:	430b      	orrs	r3, r1
 8004dee:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 8004df0:	4313      	orrs	r3, r2
 8004df2:	b29a      	uxth	r2, r3
 8004df4:	897b      	ldrh	r3, [r7, #10]
 8004df6:	4313      	orrs	r3, r2
 8004df8:	b29b      	uxth	r3, r3
 8004dfa:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004dfe:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	4a0c      	ldr	r2, [pc, #48]	; (8004e38 <HAL_I2S_Init+0x3f4>)
 8004e06:	4293      	cmp	r3, r2
 8004e08:	d101      	bne.n	8004e0e <HAL_I2S_Init+0x3ca>
 8004e0a:	4b0c      	ldr	r3, [pc, #48]	; (8004e3c <HAL_I2S_Init+0x3f8>)
 8004e0c:	e001      	b.n	8004e12 <HAL_I2S_Init+0x3ce>
 8004e0e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004e12:	897a      	ldrh	r2, [r7, #10]
 8004e14:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	2200      	movs	r2, #0
 8004e1a:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	2201      	movs	r2, #1
 8004e20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8004e24:	2300      	movs	r3, #0
}
 8004e26:	4618      	mov	r0, r3
 8004e28:	3720      	adds	r7, #32
 8004e2a:	46bd      	mov	sp, r7
 8004e2c:	bd80      	pop	{r7, pc}
 8004e2e:	bf00      	nop
 8004e30:	0800fae8 	.word	0x0800fae8
 8004e34:	08005465 	.word	0x08005465
 8004e38:	40003800 	.word	0x40003800
 8004e3c:	40003400 	.word	0x40003400

08004e40 <HAL_I2S_Receive>:
  * @note   In I2S Master Receiver mode, just after enabling the peripheral the clock will be generate
  *         in continuous way and as the I2S is not disabled at the end of the I2S transaction.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Receive(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004e40:	b580      	push	{r7, lr}
 8004e42:	b088      	sub	sp, #32
 8004e44:	af00      	add	r7, sp, #0
 8004e46:	60f8      	str	r0, [r7, #12]
 8004e48:	60b9      	str	r1, [r7, #8]
 8004e4a:	603b      	str	r3, [r7, #0]
 8004e4c:	4613      	mov	r3, r2
 8004e4e:	80fb      	strh	r3, [r7, #6]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 8004e50:	68bb      	ldr	r3, [r7, #8]
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d002      	beq.n	8004e5c <HAL_I2S_Receive+0x1c>
 8004e56:	88fb      	ldrh	r3, [r7, #6]
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d101      	bne.n	8004e60 <HAL_I2S_Receive+0x20>
  {
    return  HAL_ERROR;
 8004e5c:	2301      	movs	r3, #1
 8004e5e:	e0b4      	b.n	8004fca <HAL_I2S_Receive+0x18a>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004e66:	b2db      	uxtb	r3, r3
 8004e68:	2b01      	cmp	r3, #1
 8004e6a:	d101      	bne.n	8004e70 <HAL_I2S_Receive+0x30>
 8004e6c:	2302      	movs	r3, #2
 8004e6e:	e0ac      	b.n	8004fca <HAL_I2S_Receive+0x18a>
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	2201      	movs	r2, #1
 8004e74:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if (hi2s->State != HAL_I2S_STATE_READY)
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004e7e:	b2db      	uxtb	r3, r3
 8004e80:	2b01      	cmp	r3, #1
 8004e82:	d005      	beq.n	8004e90 <HAL_I2S_Receive+0x50>
  {
    __HAL_UNLOCK(hi2s);
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	2200      	movs	r2, #0
 8004e88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    return HAL_BUSY;
 8004e8c:	2302      	movs	r3, #2
 8004e8e:	e09c      	b.n	8004fca <HAL_I2S_Receive+0x18a>
  }

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_RX;
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	2204      	movs	r2, #4
 8004e94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	2200      	movs	r2, #0
 8004e9c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->pRxBuffPtr = pData;
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	68ba      	ldr	r2, [r7, #8]
 8004ea2:	62da      	str	r2, [r3, #44]	; 0x2c

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	69db      	ldr	r3, [r3, #28]
 8004eaa:	f003 0307 	and.w	r3, r3, #7
 8004eae:	61fb      	str	r3, [r7, #28]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 8004eb0:	69fb      	ldr	r3, [r7, #28]
 8004eb2:	2b03      	cmp	r3, #3
 8004eb4:	d002      	beq.n	8004ebc <HAL_I2S_Receive+0x7c>
 8004eb6:	69fb      	ldr	r3, [r7, #28]
 8004eb8:	2b05      	cmp	r3, #5
 8004eba:	d10a      	bne.n	8004ed2 <HAL_I2S_Receive+0x92>
  {
    hi2s->RxXferSize = (Size << 1U);
 8004ebc:	88fb      	ldrh	r3, [r7, #6]
 8004ebe:	005b      	lsls	r3, r3, #1
 8004ec0:	b29a      	uxth	r2, r3
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	861a      	strh	r2, [r3, #48]	; 0x30
    hi2s->RxXferCount = (Size << 1U);
 8004ec6:	88fb      	ldrh	r3, [r7, #6]
 8004ec8:	005b      	lsls	r3, r3, #1
 8004eca:	b29a      	uxth	r2, r3
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	865a      	strh	r2, [r3, #50]	; 0x32
 8004ed0:	e005      	b.n	8004ede <HAL_I2S_Receive+0x9e>
  }
  else
  {
    hi2s->RxXferSize = Size;
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	88fa      	ldrh	r2, [r7, #6]
 8004ed6:	861a      	strh	r2, [r3, #48]	; 0x30
    hi2s->RxXferCount = Size;
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	88fa      	ldrh	r2, [r7, #6]
 8004edc:	865a      	strh	r2, [r3, #50]	; 0x32
  }

  /* Check if the I2S is already enabled */
  if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SE) != SPI_I2SCFGR_I2SE)
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	69db      	ldr	r3, [r3, #28]
 8004ee4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ee8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004eec:	d007      	beq.n	8004efe <HAL_I2S_Receive+0xbe>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	69da      	ldr	r2, [r3, #28]
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004efc:	61da      	str	r2, [r3, #28]
  }

  /* Check if Master Receiver mode is selected */
  if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_RX)
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	69db      	ldr	r3, [r3, #28]
 8004f04:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004f08:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004f0c:	d14f      	bne.n	8004fae <HAL_I2S_Receive+0x16e>
  {
    /* Clear the Overrun Flag by a read operation on the SPI_DR register followed by a read
    access to the SPI_SR register. */
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8004f0e:	2300      	movs	r3, #0
 8004f10:	61bb      	str	r3, [r7, #24]
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	68db      	ldr	r3, [r3, #12]
 8004f18:	61bb      	str	r3, [r7, #24]
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	689b      	ldr	r3, [r3, #8]
 8004f20:	61bb      	str	r3, [r7, #24]
 8004f22:	69bb      	ldr	r3, [r7, #24]
  }

  /* Receive data */
  while (hi2s->RxXferCount > 0U)
 8004f24:	e043      	b.n	8004fae <HAL_I2S_Receive+0x16e>
  {
    /* Wait until RXNE flag is set */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_RXNE, SET, Timeout) != HAL_OK)
 8004f26:	683b      	ldr	r3, [r7, #0]
 8004f28:	2201      	movs	r2, #1
 8004f2a:	2101      	movs	r1, #1
 8004f2c:	68f8      	ldr	r0, [r7, #12]
 8004f2e:	f000 fa5f 	bl	80053f0 <I2S_WaitFlagStateUntilTimeout>
 8004f32:	4603      	mov	r3, r0
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d00f      	beq.n	8004f58 <HAL_I2S_Receive+0x118>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f3c:	f043 0201 	orr.w	r2, r3, #1
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	645a      	str	r2, [r3, #68]	; 0x44
      hi2s->State = HAL_I2S_STATE_READY;
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	2201      	movs	r2, #1
 8004f48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      __HAL_UNLOCK(hi2s);
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	2200      	movs	r2, #0
 8004f50:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8004f54:	2301      	movs	r3, #1
 8004f56:	e038      	b.n	8004fca <HAL_I2S_Receive+0x18a>
    }

    (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	68da      	ldr	r2, [r3, #12]
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f62:	b292      	uxth	r2, r2
 8004f64:	801a      	strh	r2, [r3, #0]
    hi2s->pRxBuffPtr++;
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f6a:	1c9a      	adds	r2, r3, #2
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2s->RxXferCount--;
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004f74:	b29b      	uxth	r3, r3
 8004f76:	3b01      	subs	r3, #1
 8004f78:	b29a      	uxth	r2, r3
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	865a      	strh	r2, [r3, #50]	; 0x32

    /* Check if an overrun occurs */
    if (__HAL_I2S_GET_FLAG(hi2s, I2S_FLAG_OVR) == SET)
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	689b      	ldr	r3, [r3, #8]
 8004f84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f88:	2b40      	cmp	r3, #64	; 0x40
 8004f8a:	d110      	bne.n	8004fae <HAL_I2S_Receive+0x16e>
    {
      /* Clear overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8004f8c:	2300      	movs	r3, #0
 8004f8e:	617b      	str	r3, [r7, #20]
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	68db      	ldr	r3, [r3, #12]
 8004f96:	617b      	str	r3, [r7, #20]
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	689b      	ldr	r3, [r3, #8]
 8004f9e:	617b      	str	r3, [r7, #20]
 8004fa0:	697b      	ldr	r3, [r7, #20]

      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004fa6:	f043 0202 	orr.w	r2, r3, #2
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	645a      	str	r2, [r3, #68]	; 0x44
  while (hi2s->RxXferCount > 0U)
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004fb2:	b29b      	uxth	r3, r3
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d1b6      	bne.n	8004f26 <HAL_I2S_Receive+0xe6>
    }
  }

  hi2s->State = HAL_I2S_STATE_READY;
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	2201      	movs	r2, #1
 8004fbc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  __HAL_UNLOCK(hi2s);
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	2200      	movs	r2, #0
 8004fc4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  return HAL_OK;
 8004fc8:	2300      	movs	r3, #0
}
 8004fca:	4618      	mov	r0, r3
 8004fcc:	3720      	adds	r7, #32
 8004fce:	46bd      	mov	sp, r7
 8004fd0:	bd80      	pop	{r7, pc}
	...

08004fd4 <HAL_I2S_Receive_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Receive_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 8004fd4:	b580      	push	{r7, lr}
 8004fd6:	b086      	sub	sp, #24
 8004fd8:	af00      	add	r7, sp, #0
 8004fda:	60f8      	str	r0, [r7, #12]
 8004fdc:	60b9      	str	r1, [r7, #8]
 8004fde:	4613      	mov	r3, r2
 8004fe0:	80fb      	strh	r3, [r7, #6]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 8004fe2:	68bb      	ldr	r3, [r7, #8]
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d002      	beq.n	8004fee <HAL_I2S_Receive_DMA+0x1a>
 8004fe8:	88fb      	ldrh	r3, [r7, #6]
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d101      	bne.n	8004ff2 <HAL_I2S_Receive_DMA+0x1e>
  {
    return  HAL_ERROR;
 8004fee:	2301      	movs	r3, #1
 8004ff0:	e0a1      	b.n	8005136 <HAL_I2S_Receive_DMA+0x162>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004ff8:	b2db      	uxtb	r3, r3
 8004ffa:	2b01      	cmp	r3, #1
 8004ffc:	d101      	bne.n	8005002 <HAL_I2S_Receive_DMA+0x2e>
 8004ffe:	2302      	movs	r3, #2
 8005000:	e099      	b.n	8005136 <HAL_I2S_Receive_DMA+0x162>
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	2201      	movs	r2, #1
 8005006:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if (hi2s->State != HAL_I2S_STATE_READY)
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005010:	b2db      	uxtb	r3, r3
 8005012:	2b01      	cmp	r3, #1
 8005014:	d005      	beq.n	8005022 <HAL_I2S_Receive_DMA+0x4e>
  {
    __HAL_UNLOCK(hi2s);
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	2200      	movs	r2, #0
 800501a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    return HAL_BUSY;
 800501e:	2302      	movs	r3, #2
 8005020:	e089      	b.n	8005136 <HAL_I2S_Receive_DMA+0x162>
  }

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_RX;
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	2204      	movs	r2, #4
 8005026:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	2200      	movs	r2, #0
 800502e:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->pRxBuffPtr = pData;
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	68ba      	ldr	r2, [r7, #8]
 8005034:	62da      	str	r2, [r3, #44]	; 0x2c

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	69db      	ldr	r3, [r3, #28]
 800503c:	f003 0307 	and.w	r3, r3, #7
 8005040:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 8005042:	697b      	ldr	r3, [r7, #20]
 8005044:	2b03      	cmp	r3, #3
 8005046:	d002      	beq.n	800504e <HAL_I2S_Receive_DMA+0x7a>
 8005048:	697b      	ldr	r3, [r7, #20]
 800504a:	2b05      	cmp	r3, #5
 800504c:	d10a      	bne.n	8005064 <HAL_I2S_Receive_DMA+0x90>
  {
    hi2s->RxXferSize = (Size << 1U);
 800504e:	88fb      	ldrh	r3, [r7, #6]
 8005050:	005b      	lsls	r3, r3, #1
 8005052:	b29a      	uxth	r2, r3
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	861a      	strh	r2, [r3, #48]	; 0x30
    hi2s->RxXferCount = (Size << 1U);
 8005058:	88fb      	ldrh	r3, [r7, #6]
 800505a:	005b      	lsls	r3, r3, #1
 800505c:	b29a      	uxth	r2, r3
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	865a      	strh	r2, [r3, #50]	; 0x32
 8005062:	e005      	b.n	8005070 <HAL_I2S_Receive_DMA+0x9c>
  }
  else
  {
    hi2s->RxXferSize = Size;
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	88fa      	ldrh	r2, [r7, #6]
 8005068:	861a      	strh	r2, [r3, #48]	; 0x30
    hi2s->RxXferCount = Size;
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	88fa      	ldrh	r2, [r7, #6]
 800506e:	865a      	strh	r2, [r3, #50]	; 0x32
  }

  /* Set the I2S Rx DMA Half transfer complete callback */
  hi2s->hdmarx->XferHalfCpltCallback = I2S_DMARxHalfCplt;
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005074:	4a32      	ldr	r2, [pc, #200]	; (8005140 <HAL_I2S_Receive_DMA+0x16c>)
 8005076:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the I2S Rx DMA transfer complete callback */
  hi2s->hdmarx->XferCpltCallback = I2S_DMARxCplt;
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800507c:	4a31      	ldr	r2, [pc, #196]	; (8005144 <HAL_I2S_Receive_DMA+0x170>)
 800507e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hi2s->hdmarx->XferErrorCallback = I2S_DMAError;
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005084:	4a30      	ldr	r2, [pc, #192]	; (8005148 <HAL_I2S_Receive_DMA+0x174>)
 8005086:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Check if Master Receiver mode is selected */
  if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_RX)
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	69db      	ldr	r3, [r3, #28]
 800508e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005092:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005096:	d10a      	bne.n	80050ae <HAL_I2S_Receive_DMA+0xda>
  {
    /* Clear the Overrun Flag by a read operation to the SPI_DR register followed by a read
    access to the SPI_SR register. */
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8005098:	2300      	movs	r3, #0
 800509a:	613b      	str	r3, [r7, #16]
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	68db      	ldr	r3, [r3, #12]
 80050a2:	613b      	str	r3, [r7, #16]
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	689b      	ldr	r3, [r3, #8]
 80050aa:	613b      	str	r3, [r7, #16]
 80050ac:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the Rx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, (uint32_t)hi2s->pRxBuffPtr,
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	330c      	adds	r3, #12
 80050b8:	4619      	mov	r1, r3
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050be:	461a      	mov	r2, r3
                                 hi2s->RxXferSize))
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 80050c4:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, (uint32_t)hi2s->pRxBuffPtr,
 80050c6:	f7fd ff03 	bl	8002ed0 <HAL_DMA_Start_IT>
 80050ca:	4603      	mov	r3, r0
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d00f      	beq.n	80050f0 <HAL_I2S_Receive_DMA+0x11c>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050d4:	f043 0208 	orr.w	r2, r3, #8
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	645a      	str	r2, [r3, #68]	; 0x44
    hi2s->State = HAL_I2S_STATE_READY;
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	2201      	movs	r2, #1
 80050e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    __HAL_UNLOCK(hi2s);
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	2200      	movs	r2, #0
 80050e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    return HAL_ERROR;
 80050ec:	2301      	movs	r3, #1
 80050ee:	e022      	b.n	8005136 <HAL_I2S_Receive_DMA+0x162>
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	69db      	ldr	r3, [r3, #28]
 80050f6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d107      	bne.n	800510e <HAL_I2S_Receive_DMA+0x13a>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	69da      	ldr	r2, [r3, #28]
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800510c:	61da      	str	r2, [r3, #28]
  }

  /* Check if the I2S Rx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_RXDMAEN))
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	685b      	ldr	r3, [r3, #4]
 8005114:	f003 0301 	and.w	r3, r3, #1
 8005118:	2b00      	cmp	r3, #0
 800511a:	d107      	bne.n	800512c <HAL_I2S_Receive_DMA+0x158>
  {
    /* Enable Rx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	685a      	ldr	r2, [r3, #4]
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	f042 0201 	orr.w	r2, r2, #1
 800512a:	605a      	str	r2, [r3, #4]
  }

  __HAL_UNLOCK(hi2s);
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	2200      	movs	r2, #0
 8005130:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  return HAL_OK;
 8005134:	2300      	movs	r3, #0
}
 8005136:	4618      	mov	r0, r3
 8005138:	3718      	adds	r7, #24
 800513a:	46bd      	mov	sp, r7
 800513c:	bd80      	pop	{r7, pc}
 800513e:	bf00      	nop
 8005140:	080051bb 	.word	0x080051bb
 8005144:	08005179 	.word	0x08005179
 8005148:	080051d7 	.word	0x080051d7

0800514c <HAL_I2S_IRQHandler>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
void HAL_I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 800514c:	b580      	push	{r7, lr}
 800514e:	b082      	sub	sp, #8
 8005150:	af00      	add	r7, sp, #0
 8005152:	6078      	str	r0, [r7, #4]
  /* Call the IrqHandler ISR set during HAL_I2S_INIT */
  hi2s->IrqHandlerISR(hi2s);
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005158:	6878      	ldr	r0, [r7, #4]
 800515a:	4798      	blx	r3
}
 800515c:	bf00      	nop
 800515e:	3708      	adds	r7, #8
 8005160:	46bd      	mov	sp, r7
 8005162:	bd80      	pop	{r7, pc}

08005164 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8005164:	b480      	push	{r7}
 8005166:	b083      	sub	sp, #12
 8005168:	af00      	add	r7, sp, #0
 800516a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 800516c:	bf00      	nop
 800516e:	370c      	adds	r7, #12
 8005170:	46bd      	mov	sp, r7
 8005172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005176:	4770      	bx	lr

08005178 <I2S_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 8005178:	b580      	push	{r7, lr}
 800517a:	b084      	sub	sp, #16
 800517c:	af00      	add	r7, sp, #0
 800517e:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005184:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	69db      	ldr	r3, [r3, #28]
 800518a:	2b00      	cmp	r3, #0
 800518c:	d10e      	bne.n	80051ac <I2S_DMARxCplt+0x34>
  {
    /* Disable Rx DMA Request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	685a      	ldr	r2, [r3, #4]
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	f022 0201 	bic.w	r2, r2, #1
 800519c:	605a      	str	r2, [r3, #4]
    hi2s->RxXferCount = 0U;
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	2200      	movs	r2, #0
 80051a2:	865a      	strh	r2, [r3, #50]	; 0x32
    hi2s->State = HAL_I2S_STATE_READY;
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	2201      	movs	r2, #1
 80051a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }
  /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->RxCpltCallback(hi2s);
#else
  HAL_I2S_RxCpltCallback(hi2s);
 80051ac:	68f8      	ldr	r0, [r7, #12]
 80051ae:	f7fc ffed 	bl	800218c <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 80051b2:	bf00      	nop
 80051b4:	3710      	adds	r7, #16
 80051b6:	46bd      	mov	sp, r7
 80051b8:	bd80      	pop	{r7, pc}

080051ba <I2S_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80051ba:	b580      	push	{r7, lr}
 80051bc:	b084      	sub	sp, #16
 80051be:	af00      	add	r7, sp, #0
 80051c0:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051c6:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->RxHalfCpltCallback(hi2s);
#else
  HAL_I2S_RxHalfCpltCallback(hi2s);
 80051c8:	68f8      	ldr	r0, [r7, #12]
 80051ca:	f7fc ffcf 	bl	800216c <HAL_I2S_RxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 80051ce:	bf00      	nop
 80051d0:	3710      	adds	r7, #16
 80051d2:	46bd      	mov	sp, r7
 80051d4:	bd80      	pop	{r7, pc}

080051d6 <I2S_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
 80051d6:	b580      	push	{r7, lr}
 80051d8:	b084      	sub	sp, #16
 80051da:	af00      	add	r7, sp, #0
 80051dc:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051e2:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	685a      	ldr	r2, [r3, #4]
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	f022 0203 	bic.w	r2, r2, #3
 80051f2:	605a      	str	r2, [r3, #4]
  hi2s->TxXferCount = 0U;
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	2200      	movs	r2, #0
 80051f8:	855a      	strh	r2, [r3, #42]	; 0x2a
  hi2s->RxXferCount = 0U;
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	2200      	movs	r2, #0
 80051fe:	865a      	strh	r2, [r3, #50]	; 0x32

  hi2s->State = HAL_I2S_STATE_READY;
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	2201      	movs	r2, #1
 8005204:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800520c:	f043 0208 	orr.w	r2, r3, #8
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	645a      	str	r2, [r3, #68]	; 0x44
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 8005214:	68f8      	ldr	r0, [r7, #12]
 8005216:	f7ff ffa5 	bl	8005164 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 800521a:	bf00      	nop
 800521c:	3710      	adds	r7, #16
 800521e:	46bd      	mov	sp, r7
 8005220:	bd80      	pop	{r7, pc}

08005222 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8005222:	b580      	push	{r7, lr}
 8005224:	b082      	sub	sp, #8
 8005226:	af00      	add	r7, sp, #0
 8005228:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800522e:	881a      	ldrh	r2, [r3, #0]
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800523a:	1c9a      	adds	r2, r3, #2
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005244:	b29b      	uxth	r3, r3
 8005246:	3b01      	subs	r3, #1
 8005248:	b29a      	uxth	r2, r3
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005252:	b29b      	uxth	r3, r3
 8005254:	2b00      	cmp	r3, #0
 8005256:	d10e      	bne.n	8005276 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	685a      	ldr	r2, [r3, #4]
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005266:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	2201      	movs	r2, #1
 800526c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8005270:	6878      	ldr	r0, [r7, #4]
 8005272:	f7fc ff6b 	bl	800214c <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8005276:	bf00      	nop
 8005278:	3708      	adds	r7, #8
 800527a:	46bd      	mov	sp, r7
 800527c:	bd80      	pop	{r7, pc}

0800527e <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 800527e:	b580      	push	{r7, lr}
 8005280:	b082      	sub	sp, #8
 8005282:	af00      	add	r7, sp, #0
 8005284:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	68da      	ldr	r2, [r3, #12]
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005290:	b292      	uxth	r2, r2
 8005292:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005298:	1c9a      	adds	r2, r3, #2
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80052a2:	b29b      	uxth	r3, r3
 80052a4:	3b01      	subs	r3, #1
 80052a6:	b29a      	uxth	r2, r3
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80052b0:	b29b      	uxth	r3, r3
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d10e      	bne.n	80052d4 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	685a      	ldr	r2, [r3, #4]
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80052c4:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	2201      	movs	r2, #1
 80052ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 80052ce:	6878      	ldr	r0, [r7, #4]
 80052d0:	f7fc ff5c 	bl	800218c <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80052d4:	bf00      	nop
 80052d6:	3708      	adds	r7, #8
 80052d8:	46bd      	mov	sp, r7
 80052da:	bd80      	pop	{r7, pc}

080052dc <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80052dc:	b580      	push	{r7, lr}
 80052de:	b086      	sub	sp, #24
 80052e0:	af00      	add	r7, sp, #0
 80052e2:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	689b      	ldr	r3, [r3, #8]
 80052ea:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80052f2:	b2db      	uxtb	r3, r3
 80052f4:	2b04      	cmp	r3, #4
 80052f6:	d13a      	bne.n	800536e <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 80052f8:	697b      	ldr	r3, [r7, #20]
 80052fa:	f003 0301 	and.w	r3, r3, #1
 80052fe:	2b01      	cmp	r3, #1
 8005300:	d109      	bne.n	8005316 <I2S_IRQHandler+0x3a>
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	685b      	ldr	r3, [r3, #4]
 8005308:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800530c:	2b40      	cmp	r3, #64	; 0x40
 800530e:	d102      	bne.n	8005316 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8005310:	6878      	ldr	r0, [r7, #4]
 8005312:	f7ff ffb4 	bl	800527e <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8005316:	697b      	ldr	r3, [r7, #20]
 8005318:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800531c:	2b40      	cmp	r3, #64	; 0x40
 800531e:	d126      	bne.n	800536e <I2S_IRQHandler+0x92>
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	685b      	ldr	r3, [r3, #4]
 8005326:	f003 0320 	and.w	r3, r3, #32
 800532a:	2b20      	cmp	r3, #32
 800532c:	d11f      	bne.n	800536e <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	685a      	ldr	r2, [r3, #4]
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800533c:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 800533e:	2300      	movs	r3, #0
 8005340:	613b      	str	r3, [r7, #16]
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	68db      	ldr	r3, [r3, #12]
 8005348:	613b      	str	r3, [r7, #16]
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	689b      	ldr	r3, [r3, #8]
 8005350:	613b      	str	r3, [r7, #16]
 8005352:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	2201      	movs	r2, #1
 8005358:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005360:	f043 0202 	orr.w	r2, r3, #2
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005368:	6878      	ldr	r0, [r7, #4]
 800536a:	f7ff fefb 	bl	8005164 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005374:	b2db      	uxtb	r3, r3
 8005376:	2b03      	cmp	r3, #3
 8005378:	d136      	bne.n	80053e8 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 800537a:	697b      	ldr	r3, [r7, #20]
 800537c:	f003 0302 	and.w	r3, r3, #2
 8005380:	2b02      	cmp	r3, #2
 8005382:	d109      	bne.n	8005398 <I2S_IRQHandler+0xbc>
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	685b      	ldr	r3, [r3, #4]
 800538a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800538e:	2b80      	cmp	r3, #128	; 0x80
 8005390:	d102      	bne.n	8005398 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8005392:	6878      	ldr	r0, [r7, #4]
 8005394:	f7ff ff45 	bl	8005222 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8005398:	697b      	ldr	r3, [r7, #20]
 800539a:	f003 0308 	and.w	r3, r3, #8
 800539e:	2b08      	cmp	r3, #8
 80053a0:	d122      	bne.n	80053e8 <I2S_IRQHandler+0x10c>
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	685b      	ldr	r3, [r3, #4]
 80053a8:	f003 0320 	and.w	r3, r3, #32
 80053ac:	2b20      	cmp	r3, #32
 80053ae:	d11b      	bne.n	80053e8 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	685a      	ldr	r2, [r3, #4]
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80053be:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80053c0:	2300      	movs	r3, #0
 80053c2:	60fb      	str	r3, [r7, #12]
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	689b      	ldr	r3, [r3, #8]
 80053ca:	60fb      	str	r3, [r7, #12]
 80053cc:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	2201      	movs	r2, #1
 80053d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053da:	f043 0204 	orr.w	r2, r3, #4
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80053e2:	6878      	ldr	r0, [r7, #4]
 80053e4:	f7ff febe 	bl	8005164 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80053e8:	bf00      	nop
 80053ea:	3718      	adds	r7, #24
 80053ec:	46bd      	mov	sp, r7
 80053ee:	bd80      	pop	{r7, pc}

080053f0 <I2S_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef I2S_WaitFlagStateUntilTimeout(I2S_HandleTypeDef *hi2s, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout)
{
 80053f0:	b580      	push	{r7, lr}
 80053f2:	b086      	sub	sp, #24
 80053f4:	af00      	add	r7, sp, #0
 80053f6:	60f8      	str	r0, [r7, #12]
 80053f8:	60b9      	str	r1, [r7, #8]
 80053fa:	603b      	str	r3, [r7, #0]
 80053fc:	4613      	mov	r3, r2
 80053fe:	71fb      	strb	r3, [r7, #7]
  uint32_t tickstart;

  /* Get tick */
  tickstart = HAL_GetTick();
 8005400:	f7fd f9b2 	bl	8002768 <HAL_GetTick>
 8005404:	6178      	str	r0, [r7, #20]

  /* Wait until flag is set to status*/
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 8005406:	e018      	b.n	800543a <I2S_WaitFlagStateUntilTimeout+0x4a>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005408:	683b      	ldr	r3, [r7, #0]
 800540a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800540e:	d014      	beq.n	800543a <I2S_WaitFlagStateUntilTimeout+0x4a>
    {
      if (((HAL_GetTick() - tickstart) >= Timeout) || (Timeout == 0U))
 8005410:	f7fd f9aa 	bl	8002768 <HAL_GetTick>
 8005414:	4602      	mov	r2, r0
 8005416:	697b      	ldr	r3, [r7, #20]
 8005418:	1ad3      	subs	r3, r2, r3
 800541a:	683a      	ldr	r2, [r7, #0]
 800541c:	429a      	cmp	r2, r3
 800541e:	d902      	bls.n	8005426 <I2S_WaitFlagStateUntilTimeout+0x36>
 8005420:	683b      	ldr	r3, [r7, #0]
 8005422:	2b00      	cmp	r3, #0
 8005424:	d109      	bne.n	800543a <I2S_WaitFlagStateUntilTimeout+0x4a>
      {
        /* Set the I2S State ready */
        hi2s->State = HAL_I2S_STATE_READY;
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	2201      	movs	r2, #1
 800542a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2s);
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	2200      	movs	r2, #0
 8005432:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8005436:	2303      	movs	r3, #3
 8005438:	e00f      	b.n	800545a <I2S_WaitFlagStateUntilTimeout+0x6a>
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	689a      	ldr	r2, [r3, #8]
 8005440:	68bb      	ldr	r3, [r7, #8]
 8005442:	4013      	ands	r3, r2
 8005444:	68ba      	ldr	r2, [r7, #8]
 8005446:	429a      	cmp	r2, r3
 8005448:	bf0c      	ite	eq
 800544a:	2301      	moveq	r3, #1
 800544c:	2300      	movne	r3, #0
 800544e:	b2db      	uxtb	r3, r3
 8005450:	461a      	mov	r2, r3
 8005452:	79fb      	ldrb	r3, [r7, #7]
 8005454:	429a      	cmp	r2, r3
 8005456:	d1d7      	bne.n	8005408 <I2S_WaitFlagStateUntilTimeout+0x18>
      }
    }
  }
  return HAL_OK;
 8005458:	2300      	movs	r3, #0
}
 800545a:	4618      	mov	r0, r3
 800545c:	3718      	adds	r7, #24
 800545e:	46bd      	mov	sp, r7
 8005460:	bd80      	pop	{r7, pc}
	...

08005464 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8005464:	b580      	push	{r7, lr}
 8005466:	b088      	sub	sp, #32
 8005468:	af00      	add	r7, sp, #0
 800546a:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	689b      	ldr	r3, [r3, #8]
 8005472:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	4aa2      	ldr	r2, [pc, #648]	; (8005704 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800547a:	4293      	cmp	r3, r2
 800547c:	d101      	bne.n	8005482 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 800547e:	4ba2      	ldr	r3, [pc, #648]	; (8005708 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8005480:	e001      	b.n	8005486 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8005482:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005486:	689b      	ldr	r3, [r3, #8]
 8005488:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	685b      	ldr	r3, [r3, #4]
 8005490:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	4a9b      	ldr	r2, [pc, #620]	; (8005704 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8005498:	4293      	cmp	r3, r2
 800549a:	d101      	bne.n	80054a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 800549c:	4b9a      	ldr	r3, [pc, #616]	; (8005708 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800549e:	e001      	b.n	80054a4 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 80054a0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80054a4:	685b      	ldr	r3, [r3, #4]
 80054a6:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	685b      	ldr	r3, [r3, #4]
 80054ac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80054b0:	d004      	beq.n	80054bc <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	685b      	ldr	r3, [r3, #4]
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	f040 8099 	bne.w	80055ee <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 80054bc:	69fb      	ldr	r3, [r7, #28]
 80054be:	f003 0302 	and.w	r3, r3, #2
 80054c2:	2b02      	cmp	r3, #2
 80054c4:	d107      	bne.n	80054d6 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 80054c6:	697b      	ldr	r3, [r7, #20]
 80054c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d002      	beq.n	80054d6 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 80054d0:	6878      	ldr	r0, [r7, #4]
 80054d2:	f000 f925 	bl	8005720 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 80054d6:	69bb      	ldr	r3, [r7, #24]
 80054d8:	f003 0301 	and.w	r3, r3, #1
 80054dc:	2b01      	cmp	r3, #1
 80054de:	d107      	bne.n	80054f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 80054e0:	693b      	ldr	r3, [r7, #16]
 80054e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d002      	beq.n	80054f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 80054ea:	6878      	ldr	r0, [r7, #4]
 80054ec:	f000 f9c8 	bl	8005880 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80054f0:	69bb      	ldr	r3, [r7, #24]
 80054f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054f6:	2b40      	cmp	r3, #64	; 0x40
 80054f8:	d13a      	bne.n	8005570 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 80054fa:	693b      	ldr	r3, [r7, #16]
 80054fc:	f003 0320 	and.w	r3, r3, #32
 8005500:	2b00      	cmp	r3, #0
 8005502:	d035      	beq.n	8005570 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	4a7e      	ldr	r2, [pc, #504]	; (8005704 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800550a:	4293      	cmp	r3, r2
 800550c:	d101      	bne.n	8005512 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 800550e:	4b7e      	ldr	r3, [pc, #504]	; (8005708 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8005510:	e001      	b.n	8005516 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8005512:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005516:	685a      	ldr	r2, [r3, #4]
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	4979      	ldr	r1, [pc, #484]	; (8005704 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800551e:	428b      	cmp	r3, r1
 8005520:	d101      	bne.n	8005526 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8005522:	4b79      	ldr	r3, [pc, #484]	; (8005708 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8005524:	e001      	b.n	800552a <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8005526:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800552a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800552e:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	685a      	ldr	r2, [r3, #4]
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800553e:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8005540:	2300      	movs	r3, #0
 8005542:	60fb      	str	r3, [r7, #12]
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	68db      	ldr	r3, [r3, #12]
 800554a:	60fb      	str	r3, [r7, #12]
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	689b      	ldr	r3, [r3, #8]
 8005552:	60fb      	str	r3, [r7, #12]
 8005554:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	2201      	movs	r2, #1
 800555a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005562:	f043 0202 	orr.w	r2, r3, #2
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800556a:	6878      	ldr	r0, [r7, #4]
 800556c:	f7ff fdfa 	bl	8005164 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8005570:	69fb      	ldr	r3, [r7, #28]
 8005572:	f003 0308 	and.w	r3, r3, #8
 8005576:	2b08      	cmp	r3, #8
 8005578:	f040 80be 	bne.w	80056f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 800557c:	697b      	ldr	r3, [r7, #20]
 800557e:	f003 0320 	and.w	r3, r3, #32
 8005582:	2b00      	cmp	r3, #0
 8005584:	f000 80b8 	beq.w	80056f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	685a      	ldr	r2, [r3, #4]
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005596:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	4a59      	ldr	r2, [pc, #356]	; (8005704 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800559e:	4293      	cmp	r3, r2
 80055a0:	d101      	bne.n	80055a6 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 80055a2:	4b59      	ldr	r3, [pc, #356]	; (8005708 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80055a4:	e001      	b.n	80055aa <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 80055a6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80055aa:	685a      	ldr	r2, [r3, #4]
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	4954      	ldr	r1, [pc, #336]	; (8005704 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80055b2:	428b      	cmp	r3, r1
 80055b4:	d101      	bne.n	80055ba <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 80055b6:	4b54      	ldr	r3, [pc, #336]	; (8005708 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80055b8:	e001      	b.n	80055be <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 80055ba:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80055be:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80055c2:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80055c4:	2300      	movs	r3, #0
 80055c6:	60bb      	str	r3, [r7, #8]
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	689b      	ldr	r3, [r3, #8]
 80055ce:	60bb      	str	r3, [r7, #8]
 80055d0:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	2201      	movs	r2, #1
 80055d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055de:	f043 0204 	orr.w	r2, r3, #4
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80055e6:	6878      	ldr	r0, [r7, #4]
 80055e8:	f7ff fdbc 	bl	8005164 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80055ec:	e084      	b.n	80056f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 80055ee:	69bb      	ldr	r3, [r7, #24]
 80055f0:	f003 0302 	and.w	r3, r3, #2
 80055f4:	2b02      	cmp	r3, #2
 80055f6:	d107      	bne.n	8005608 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 80055f8:	693b      	ldr	r3, [r7, #16]
 80055fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d002      	beq.n	8005608 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8005602:	6878      	ldr	r0, [r7, #4]
 8005604:	f000 f8be 	bl	8005784 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8005608:	69fb      	ldr	r3, [r7, #28]
 800560a:	f003 0301 	and.w	r3, r3, #1
 800560e:	2b01      	cmp	r3, #1
 8005610:	d107      	bne.n	8005622 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8005612:	697b      	ldr	r3, [r7, #20]
 8005614:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005618:	2b00      	cmp	r3, #0
 800561a:	d002      	beq.n	8005622 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 800561c:	6878      	ldr	r0, [r7, #4]
 800561e:	f000 f8fd 	bl	800581c <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8005622:	69fb      	ldr	r3, [r7, #28]
 8005624:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005628:	2b40      	cmp	r3, #64	; 0x40
 800562a:	d12f      	bne.n	800568c <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 800562c:	697b      	ldr	r3, [r7, #20]
 800562e:	f003 0320 	and.w	r3, r3, #32
 8005632:	2b00      	cmp	r3, #0
 8005634:	d02a      	beq.n	800568c <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	685a      	ldr	r2, [r3, #4]
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005644:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	4a2e      	ldr	r2, [pc, #184]	; (8005704 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800564c:	4293      	cmp	r3, r2
 800564e:	d101      	bne.n	8005654 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8005650:	4b2d      	ldr	r3, [pc, #180]	; (8005708 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8005652:	e001      	b.n	8005658 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8005654:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005658:	685a      	ldr	r2, [r3, #4]
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	4929      	ldr	r1, [pc, #164]	; (8005704 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8005660:	428b      	cmp	r3, r1
 8005662:	d101      	bne.n	8005668 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8005664:	4b28      	ldr	r3, [pc, #160]	; (8005708 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8005666:	e001      	b.n	800566c <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8005668:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800566c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005670:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	2201      	movs	r2, #1
 8005676:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800567e:	f043 0202 	orr.w	r2, r3, #2
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005686:	6878      	ldr	r0, [r7, #4]
 8005688:	f7ff fd6c 	bl	8005164 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 800568c:	69bb      	ldr	r3, [r7, #24]
 800568e:	f003 0308 	and.w	r3, r3, #8
 8005692:	2b08      	cmp	r3, #8
 8005694:	d131      	bne.n	80056fa <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 8005696:	693b      	ldr	r3, [r7, #16]
 8005698:	f003 0320 	and.w	r3, r3, #32
 800569c:	2b00      	cmp	r3, #0
 800569e:	d02c      	beq.n	80056fa <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	4a17      	ldr	r2, [pc, #92]	; (8005704 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80056a6:	4293      	cmp	r3, r2
 80056a8:	d101      	bne.n	80056ae <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 80056aa:	4b17      	ldr	r3, [pc, #92]	; (8005708 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80056ac:	e001      	b.n	80056b2 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 80056ae:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80056b2:	685a      	ldr	r2, [r3, #4]
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	4912      	ldr	r1, [pc, #72]	; (8005704 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80056ba:	428b      	cmp	r3, r1
 80056bc:	d101      	bne.n	80056c2 <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 80056be:	4b12      	ldr	r3, [pc, #72]	; (8005708 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80056c0:	e001      	b.n	80056c6 <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 80056c2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80056c6:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80056ca:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	685a      	ldr	r2, [r3, #4]
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80056da:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	2201      	movs	r2, #1
 80056e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80056e8:	f043 0204 	orr.w	r2, r3, #4
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80056f0:	6878      	ldr	r0, [r7, #4]
 80056f2:	f7ff fd37 	bl	8005164 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80056f6:	e000      	b.n	80056fa <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80056f8:	bf00      	nop
}
 80056fa:	bf00      	nop
 80056fc:	3720      	adds	r7, #32
 80056fe:	46bd      	mov	sp, r7
 8005700:	bd80      	pop	{r7, pc}
 8005702:	bf00      	nop
 8005704:	40003800 	.word	0x40003800
 8005708:	40003400 	.word	0x40003400

0800570c <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800570c:	b480      	push	{r7}
 800570e:	b083      	sub	sp, #12
 8005710:	af00      	add	r7, sp, #0
 8005712:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8005714:	bf00      	nop
 8005716:	370c      	adds	r7, #12
 8005718:	46bd      	mov	sp, r7
 800571a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800571e:	4770      	bx	lr

08005720 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8005720:	b580      	push	{r7, lr}
 8005722:	b082      	sub	sp, #8
 8005724:	af00      	add	r7, sp, #0
 8005726:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800572c:	1c99      	adds	r1, r3, #2
 800572e:	687a      	ldr	r2, [r7, #4]
 8005730:	6251      	str	r1, [r2, #36]	; 0x24
 8005732:	881a      	ldrh	r2, [r3, #0]
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800573e:	b29b      	uxth	r3, r3
 8005740:	3b01      	subs	r3, #1
 8005742:	b29a      	uxth	r2, r3
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800574c:	b29b      	uxth	r3, r3
 800574e:	2b00      	cmp	r3, #0
 8005750:	d113      	bne.n	800577a <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	685a      	ldr	r2, [r3, #4]
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005760:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005766:	b29b      	uxth	r3, r3
 8005768:	2b00      	cmp	r3, #0
 800576a:	d106      	bne.n	800577a <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	2201      	movs	r2, #1
 8005770:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8005774:	6878      	ldr	r0, [r7, #4]
 8005776:	f7ff ffc9 	bl	800570c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800577a:	bf00      	nop
 800577c:	3708      	adds	r7, #8
 800577e:	46bd      	mov	sp, r7
 8005780:	bd80      	pop	{r7, pc}
	...

08005784 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8005784:	b580      	push	{r7, lr}
 8005786:	b082      	sub	sp, #8
 8005788:	af00      	add	r7, sp, #0
 800578a:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005790:	1c99      	adds	r1, r3, #2
 8005792:	687a      	ldr	r2, [r7, #4]
 8005794:	6251      	str	r1, [r2, #36]	; 0x24
 8005796:	8819      	ldrh	r1, [r3, #0]
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	4a1d      	ldr	r2, [pc, #116]	; (8005814 <I2SEx_TxISR_I2SExt+0x90>)
 800579e:	4293      	cmp	r3, r2
 80057a0:	d101      	bne.n	80057a6 <I2SEx_TxISR_I2SExt+0x22>
 80057a2:	4b1d      	ldr	r3, [pc, #116]	; (8005818 <I2SEx_TxISR_I2SExt+0x94>)
 80057a4:	e001      	b.n	80057aa <I2SEx_TxISR_I2SExt+0x26>
 80057a6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80057aa:	460a      	mov	r2, r1
 80057ac:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80057b2:	b29b      	uxth	r3, r3
 80057b4:	3b01      	subs	r3, #1
 80057b6:	b29a      	uxth	r2, r3
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80057c0:	b29b      	uxth	r3, r3
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d121      	bne.n	800580a <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	4a12      	ldr	r2, [pc, #72]	; (8005814 <I2SEx_TxISR_I2SExt+0x90>)
 80057cc:	4293      	cmp	r3, r2
 80057ce:	d101      	bne.n	80057d4 <I2SEx_TxISR_I2SExt+0x50>
 80057d0:	4b11      	ldr	r3, [pc, #68]	; (8005818 <I2SEx_TxISR_I2SExt+0x94>)
 80057d2:	e001      	b.n	80057d8 <I2SEx_TxISR_I2SExt+0x54>
 80057d4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80057d8:	685a      	ldr	r2, [r3, #4]
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	490d      	ldr	r1, [pc, #52]	; (8005814 <I2SEx_TxISR_I2SExt+0x90>)
 80057e0:	428b      	cmp	r3, r1
 80057e2:	d101      	bne.n	80057e8 <I2SEx_TxISR_I2SExt+0x64>
 80057e4:	4b0c      	ldr	r3, [pc, #48]	; (8005818 <I2SEx_TxISR_I2SExt+0x94>)
 80057e6:	e001      	b.n	80057ec <I2SEx_TxISR_I2SExt+0x68>
 80057e8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80057ec:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80057f0:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80057f6:	b29b      	uxth	r3, r3
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d106      	bne.n	800580a <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	2201      	movs	r2, #1
 8005800:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8005804:	6878      	ldr	r0, [r7, #4]
 8005806:	f7ff ff81 	bl	800570c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800580a:	bf00      	nop
 800580c:	3708      	adds	r7, #8
 800580e:	46bd      	mov	sp, r7
 8005810:	bd80      	pop	{r7, pc}
 8005812:	bf00      	nop
 8005814:	40003800 	.word	0x40003800
 8005818:	40003400 	.word	0x40003400

0800581c <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 800581c:	b580      	push	{r7, lr}
 800581e:	b082      	sub	sp, #8
 8005820:	af00      	add	r7, sp, #0
 8005822:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	68d8      	ldr	r0, [r3, #12]
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800582e:	1c99      	adds	r1, r3, #2
 8005830:	687a      	ldr	r2, [r7, #4]
 8005832:	62d1      	str	r1, [r2, #44]	; 0x2c
 8005834:	b282      	uxth	r2, r0
 8005836:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800583c:	b29b      	uxth	r3, r3
 800583e:	3b01      	subs	r3, #1
 8005840:	b29a      	uxth	r2, r3
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800584a:	b29b      	uxth	r3, r3
 800584c:	2b00      	cmp	r3, #0
 800584e:	d113      	bne.n	8005878 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	685a      	ldr	r2, [r3, #4]
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800585e:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005864:	b29b      	uxth	r3, r3
 8005866:	2b00      	cmp	r3, #0
 8005868:	d106      	bne.n	8005878 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	2201      	movs	r2, #1
 800586e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8005872:	6878      	ldr	r0, [r7, #4]
 8005874:	f7ff ff4a 	bl	800570c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005878:	bf00      	nop
 800587a:	3708      	adds	r7, #8
 800587c:	46bd      	mov	sp, r7
 800587e:	bd80      	pop	{r7, pc}

08005880 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8005880:	b580      	push	{r7, lr}
 8005882:	b082      	sub	sp, #8
 8005884:	af00      	add	r7, sp, #0
 8005886:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	4a20      	ldr	r2, [pc, #128]	; (8005910 <I2SEx_RxISR_I2SExt+0x90>)
 800588e:	4293      	cmp	r3, r2
 8005890:	d101      	bne.n	8005896 <I2SEx_RxISR_I2SExt+0x16>
 8005892:	4b20      	ldr	r3, [pc, #128]	; (8005914 <I2SEx_RxISR_I2SExt+0x94>)
 8005894:	e001      	b.n	800589a <I2SEx_RxISR_I2SExt+0x1a>
 8005896:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800589a:	68d8      	ldr	r0, [r3, #12]
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058a0:	1c99      	adds	r1, r3, #2
 80058a2:	687a      	ldr	r2, [r7, #4]
 80058a4:	62d1      	str	r1, [r2, #44]	; 0x2c
 80058a6:	b282      	uxth	r2, r0
 80058a8:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80058ae:	b29b      	uxth	r3, r3
 80058b0:	3b01      	subs	r3, #1
 80058b2:	b29a      	uxth	r2, r3
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80058bc:	b29b      	uxth	r3, r3
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d121      	bne.n	8005906 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	4a12      	ldr	r2, [pc, #72]	; (8005910 <I2SEx_RxISR_I2SExt+0x90>)
 80058c8:	4293      	cmp	r3, r2
 80058ca:	d101      	bne.n	80058d0 <I2SEx_RxISR_I2SExt+0x50>
 80058cc:	4b11      	ldr	r3, [pc, #68]	; (8005914 <I2SEx_RxISR_I2SExt+0x94>)
 80058ce:	e001      	b.n	80058d4 <I2SEx_RxISR_I2SExt+0x54>
 80058d0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80058d4:	685a      	ldr	r2, [r3, #4]
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	490d      	ldr	r1, [pc, #52]	; (8005910 <I2SEx_RxISR_I2SExt+0x90>)
 80058dc:	428b      	cmp	r3, r1
 80058de:	d101      	bne.n	80058e4 <I2SEx_RxISR_I2SExt+0x64>
 80058e0:	4b0c      	ldr	r3, [pc, #48]	; (8005914 <I2SEx_RxISR_I2SExt+0x94>)
 80058e2:	e001      	b.n	80058e8 <I2SEx_RxISR_I2SExt+0x68>
 80058e4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80058e8:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80058ec:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80058f2:	b29b      	uxth	r3, r3
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d106      	bne.n	8005906 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	2201      	movs	r2, #1
 80058fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8005900:	6878      	ldr	r0, [r7, #4]
 8005902:	f7ff ff03 	bl	800570c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005906:	bf00      	nop
 8005908:	3708      	adds	r7, #8
 800590a:	46bd      	mov	sp, r7
 800590c:	bd80      	pop	{r7, pc}
 800590e:	bf00      	nop
 8005910:	40003800 	.word	0x40003800
 8005914:	40003400 	.word	0x40003400

08005918 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8005918:	b5f0      	push	{r4, r5, r6, r7, lr}
 800591a:	b08f      	sub	sp, #60	; 0x3c
 800591c:	af0a      	add	r7, sp, #40	; 0x28
 800591e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	2b00      	cmp	r3, #0
 8005924:	d101      	bne.n	800592a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8005926:	2301      	movs	r3, #1
 8005928:	e118      	b.n	8005b5c <HAL_PCD_Init+0x244>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005932:	d003      	beq.n	800593c <HAL_PCD_Init+0x24>
 8005934:	2187      	movs	r1, #135	; 0x87
 8005936:	488b      	ldr	r0, [pc, #556]	; (8005b64 <HAL_PCD_Init+0x24c>)
 8005938:	f7fc fc3f 	bl	80021ba <assert_failed>

  USBx = hpcd->Instance;
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8005948:	b2db      	uxtb	r3, r3
 800594a:	2b00      	cmp	r3, #0
 800594c:	d106      	bne.n	800595c <HAL_PCD_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	2200      	movs	r2, #0
 8005952:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8005956:	6878      	ldr	r0, [r7, #4]
 8005958:	f006 feba 	bl	800c6d0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	2203      	movs	r2, #3
 8005960:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8005964:	68bb      	ldr	r3, [r7, #8]
 8005966:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005968:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800596c:	2b00      	cmp	r3, #0
 800596e:	d102      	bne.n	8005976 <HAL_PCD_Init+0x5e>
  {
    hpcd->Init.dma_enable = 0U;
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	2200      	movs	r2, #0
 8005974:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	4618      	mov	r0, r3
 800597c:	f003 feb3 	bl	80096e6 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	603b      	str	r3, [r7, #0]
 8005986:	687e      	ldr	r6, [r7, #4]
 8005988:	466d      	mov	r5, sp
 800598a:	f106 0410 	add.w	r4, r6, #16
 800598e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005990:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005992:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005994:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005996:	e894 0003 	ldmia.w	r4, {r0, r1}
 800599a:	e885 0003 	stmia.w	r5, {r0, r1}
 800599e:	1d33      	adds	r3, r6, #4
 80059a0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80059a2:	6838      	ldr	r0, [r7, #0]
 80059a4:	f003 fd8a 	bl	80094bc <USB_CoreInit>
 80059a8:	4603      	mov	r3, r0
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d005      	beq.n	80059ba <HAL_PCD_Init+0xa2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	2202      	movs	r2, #2
 80059b2:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80059b6:	2301      	movs	r3, #1
 80059b8:	e0d0      	b.n	8005b5c <HAL_PCD_Init+0x244>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	2100      	movs	r1, #0
 80059c0:	4618      	mov	r0, r3
 80059c2:	f003 fea1 	bl	8009708 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80059c6:	2300      	movs	r3, #0
 80059c8:	73fb      	strb	r3, [r7, #15]
 80059ca:	e04a      	b.n	8005a62 <HAL_PCD_Init+0x14a>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80059cc:	7bfa      	ldrb	r2, [r7, #15]
 80059ce:	6879      	ldr	r1, [r7, #4]
 80059d0:	4613      	mov	r3, r2
 80059d2:	00db      	lsls	r3, r3, #3
 80059d4:	1a9b      	subs	r3, r3, r2
 80059d6:	009b      	lsls	r3, r3, #2
 80059d8:	440b      	add	r3, r1
 80059da:	333d      	adds	r3, #61	; 0x3d
 80059dc:	2201      	movs	r2, #1
 80059de:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80059e0:	7bfa      	ldrb	r2, [r7, #15]
 80059e2:	6879      	ldr	r1, [r7, #4]
 80059e4:	4613      	mov	r3, r2
 80059e6:	00db      	lsls	r3, r3, #3
 80059e8:	1a9b      	subs	r3, r3, r2
 80059ea:	009b      	lsls	r3, r3, #2
 80059ec:	440b      	add	r3, r1
 80059ee:	333c      	adds	r3, #60	; 0x3c
 80059f0:	7bfa      	ldrb	r2, [r7, #15]
 80059f2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80059f4:	7bfa      	ldrb	r2, [r7, #15]
 80059f6:	7bfb      	ldrb	r3, [r7, #15]
 80059f8:	b298      	uxth	r0, r3
 80059fa:	6879      	ldr	r1, [r7, #4]
 80059fc:	4613      	mov	r3, r2
 80059fe:	00db      	lsls	r3, r3, #3
 8005a00:	1a9b      	subs	r3, r3, r2
 8005a02:	009b      	lsls	r3, r3, #2
 8005a04:	440b      	add	r3, r1
 8005a06:	3342      	adds	r3, #66	; 0x42
 8005a08:	4602      	mov	r2, r0
 8005a0a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8005a0c:	7bfa      	ldrb	r2, [r7, #15]
 8005a0e:	6879      	ldr	r1, [r7, #4]
 8005a10:	4613      	mov	r3, r2
 8005a12:	00db      	lsls	r3, r3, #3
 8005a14:	1a9b      	subs	r3, r3, r2
 8005a16:	009b      	lsls	r3, r3, #2
 8005a18:	440b      	add	r3, r1
 8005a1a:	333f      	adds	r3, #63	; 0x3f
 8005a1c:	2200      	movs	r2, #0
 8005a1e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8005a20:	7bfa      	ldrb	r2, [r7, #15]
 8005a22:	6879      	ldr	r1, [r7, #4]
 8005a24:	4613      	mov	r3, r2
 8005a26:	00db      	lsls	r3, r3, #3
 8005a28:	1a9b      	subs	r3, r3, r2
 8005a2a:	009b      	lsls	r3, r3, #2
 8005a2c:	440b      	add	r3, r1
 8005a2e:	3344      	adds	r3, #68	; 0x44
 8005a30:	2200      	movs	r2, #0
 8005a32:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8005a34:	7bfa      	ldrb	r2, [r7, #15]
 8005a36:	6879      	ldr	r1, [r7, #4]
 8005a38:	4613      	mov	r3, r2
 8005a3a:	00db      	lsls	r3, r3, #3
 8005a3c:	1a9b      	subs	r3, r3, r2
 8005a3e:	009b      	lsls	r3, r3, #2
 8005a40:	440b      	add	r3, r1
 8005a42:	3348      	adds	r3, #72	; 0x48
 8005a44:	2200      	movs	r2, #0
 8005a46:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8005a48:	7bfa      	ldrb	r2, [r7, #15]
 8005a4a:	6879      	ldr	r1, [r7, #4]
 8005a4c:	4613      	mov	r3, r2
 8005a4e:	00db      	lsls	r3, r3, #3
 8005a50:	1a9b      	subs	r3, r3, r2
 8005a52:	009b      	lsls	r3, r3, #2
 8005a54:	440b      	add	r3, r1
 8005a56:	3350      	adds	r3, #80	; 0x50
 8005a58:	2200      	movs	r2, #0
 8005a5a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005a5c:	7bfb      	ldrb	r3, [r7, #15]
 8005a5e:	3301      	adds	r3, #1
 8005a60:	73fb      	strb	r3, [r7, #15]
 8005a62:	7bfa      	ldrb	r2, [r7, #15]
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	685b      	ldr	r3, [r3, #4]
 8005a68:	429a      	cmp	r2, r3
 8005a6a:	d3af      	bcc.n	80059cc <HAL_PCD_Init+0xb4>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005a6c:	2300      	movs	r3, #0
 8005a6e:	73fb      	strb	r3, [r7, #15]
 8005a70:	e044      	b.n	8005afc <HAL_PCD_Init+0x1e4>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8005a72:	7bfa      	ldrb	r2, [r7, #15]
 8005a74:	6879      	ldr	r1, [r7, #4]
 8005a76:	4613      	mov	r3, r2
 8005a78:	00db      	lsls	r3, r3, #3
 8005a7a:	1a9b      	subs	r3, r3, r2
 8005a7c:	009b      	lsls	r3, r3, #2
 8005a7e:	440b      	add	r3, r1
 8005a80:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8005a84:	2200      	movs	r2, #0
 8005a86:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8005a88:	7bfa      	ldrb	r2, [r7, #15]
 8005a8a:	6879      	ldr	r1, [r7, #4]
 8005a8c:	4613      	mov	r3, r2
 8005a8e:	00db      	lsls	r3, r3, #3
 8005a90:	1a9b      	subs	r3, r3, r2
 8005a92:	009b      	lsls	r3, r3, #2
 8005a94:	440b      	add	r3, r1
 8005a96:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8005a9a:	7bfa      	ldrb	r2, [r7, #15]
 8005a9c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8005a9e:	7bfa      	ldrb	r2, [r7, #15]
 8005aa0:	6879      	ldr	r1, [r7, #4]
 8005aa2:	4613      	mov	r3, r2
 8005aa4:	00db      	lsls	r3, r3, #3
 8005aa6:	1a9b      	subs	r3, r3, r2
 8005aa8:	009b      	lsls	r3, r3, #2
 8005aaa:	440b      	add	r3, r1
 8005aac:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8005ab0:	2200      	movs	r2, #0
 8005ab2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8005ab4:	7bfa      	ldrb	r2, [r7, #15]
 8005ab6:	6879      	ldr	r1, [r7, #4]
 8005ab8:	4613      	mov	r3, r2
 8005aba:	00db      	lsls	r3, r3, #3
 8005abc:	1a9b      	subs	r3, r3, r2
 8005abe:	009b      	lsls	r3, r3, #2
 8005ac0:	440b      	add	r3, r1
 8005ac2:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8005ac6:	2200      	movs	r2, #0
 8005ac8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8005aca:	7bfa      	ldrb	r2, [r7, #15]
 8005acc:	6879      	ldr	r1, [r7, #4]
 8005ace:	4613      	mov	r3, r2
 8005ad0:	00db      	lsls	r3, r3, #3
 8005ad2:	1a9b      	subs	r3, r3, r2
 8005ad4:	009b      	lsls	r3, r3, #2
 8005ad6:	440b      	add	r3, r1
 8005ad8:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8005adc:	2200      	movs	r2, #0
 8005ade:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8005ae0:	7bfa      	ldrb	r2, [r7, #15]
 8005ae2:	6879      	ldr	r1, [r7, #4]
 8005ae4:	4613      	mov	r3, r2
 8005ae6:	00db      	lsls	r3, r3, #3
 8005ae8:	1a9b      	subs	r3, r3, r2
 8005aea:	009b      	lsls	r3, r3, #2
 8005aec:	440b      	add	r3, r1
 8005aee:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8005af2:	2200      	movs	r2, #0
 8005af4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005af6:	7bfb      	ldrb	r3, [r7, #15]
 8005af8:	3301      	adds	r3, #1
 8005afa:	73fb      	strb	r3, [r7, #15]
 8005afc:	7bfa      	ldrb	r2, [r7, #15]
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	685b      	ldr	r3, [r3, #4]
 8005b02:	429a      	cmp	r2, r3
 8005b04:	d3b5      	bcc.n	8005a72 <HAL_PCD_Init+0x15a>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	603b      	str	r3, [r7, #0]
 8005b0c:	687e      	ldr	r6, [r7, #4]
 8005b0e:	466d      	mov	r5, sp
 8005b10:	f106 0410 	add.w	r4, r6, #16
 8005b14:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005b16:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005b18:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005b1a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005b1c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005b20:	e885 0003 	stmia.w	r5, {r0, r1}
 8005b24:	1d33      	adds	r3, r6, #4
 8005b26:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005b28:	6838      	ldr	r0, [r7, #0]
 8005b2a:	f003 fe17 	bl	800975c <USB_DevInit>
 8005b2e:	4603      	mov	r3, r0
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d005      	beq.n	8005b40 <HAL_PCD_Init+0x228>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	2202      	movs	r2, #2
 8005b38:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8005b3c:	2301      	movs	r3, #1
 8005b3e:	e00d      	b.n	8005b5c <HAL_PCD_Init+0x244>
  }

  hpcd->USB_Address = 0U;
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	2200      	movs	r2, #0
 8005b44:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	2201      	movs	r2, #1
 8005b4c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	4618      	mov	r0, r3
 8005b56:	f004 fe5f 	bl	800a818 <USB_DevDisconnect>

  return HAL_OK;
 8005b5a:	2300      	movs	r3, #0
}
 8005b5c:	4618      	mov	r0, r3
 8005b5e:	3714      	adds	r7, #20
 8005b60:	46bd      	mov	sp, r7
 8005b62:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005b64:	0800fb20 	.word	0x0800fb20

08005b68 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8005b68:	b580      	push	{r7, lr}
 8005b6a:	b084      	sub	sp, #16
 8005b6c:	af00      	add	r7, sp, #0
 8005b6e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8005b7c:	2b01      	cmp	r3, #1
 8005b7e:	d101      	bne.n	8005b84 <HAL_PCD_Start+0x1c>
 8005b80:	2302      	movs	r3, #2
 8005b82:	e020      	b.n	8005bc6 <HAL_PCD_Start+0x5e>
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	2201      	movs	r2, #1
 8005b88:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b90:	2b01      	cmp	r3, #1
 8005b92:	d109      	bne.n	8005ba8 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8005b98:	2b01      	cmp	r3, #1
 8005b9a:	d005      	beq.n	8005ba8 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ba0:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	4618      	mov	r0, r3
 8005bae:	f003 fd89 	bl	80096c4 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	4618      	mov	r0, r3
 8005bb8:	f004 fe0d 	bl	800a7d6 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	2200      	movs	r2, #0
 8005bc0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8005bc4:	2300      	movs	r3, #0
}
 8005bc6:	4618      	mov	r0, r3
 8005bc8:	3710      	adds	r7, #16
 8005bca:	46bd      	mov	sp, r7
 8005bcc:	bd80      	pop	{r7, pc}

08005bce <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8005bce:	b590      	push	{r4, r7, lr}
 8005bd0:	b08d      	sub	sp, #52	; 0x34
 8005bd2:	af00      	add	r7, sp, #0
 8005bd4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005bdc:	6a3b      	ldr	r3, [r7, #32]
 8005bde:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	4618      	mov	r0, r3
 8005be6:	f004 fecb 	bl	800a980 <USB_GetMode>
 8005bea:	4603      	mov	r3, r0
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	f040 839d 	bne.w	800632c <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	4618      	mov	r0, r3
 8005bf8:	f004 fe2f 	bl	800a85a <USB_ReadInterrupts>
 8005bfc:	4603      	mov	r3, r0
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	f000 8393 	beq.w	800632a <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	4618      	mov	r0, r3
 8005c0a:	f004 fe26 	bl	800a85a <USB_ReadInterrupts>
 8005c0e:	4603      	mov	r3, r0
 8005c10:	f003 0302 	and.w	r3, r3, #2
 8005c14:	2b02      	cmp	r3, #2
 8005c16:	d107      	bne.n	8005c28 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	695a      	ldr	r2, [r3, #20]
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	f002 0202 	and.w	r2, r2, #2
 8005c26:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	4618      	mov	r0, r3
 8005c2e:	f004 fe14 	bl	800a85a <USB_ReadInterrupts>
 8005c32:	4603      	mov	r3, r0
 8005c34:	f003 0310 	and.w	r3, r3, #16
 8005c38:	2b10      	cmp	r3, #16
 8005c3a:	d161      	bne.n	8005d00 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	699a      	ldr	r2, [r3, #24]
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	f022 0210 	bic.w	r2, r2, #16
 8005c4a:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8005c4c:	6a3b      	ldr	r3, [r7, #32]
 8005c4e:	6a1b      	ldr	r3, [r3, #32]
 8005c50:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8005c52:	69bb      	ldr	r3, [r7, #24]
 8005c54:	f003 020f 	and.w	r2, r3, #15
 8005c58:	4613      	mov	r3, r2
 8005c5a:	00db      	lsls	r3, r3, #3
 8005c5c:	1a9b      	subs	r3, r3, r2
 8005c5e:	009b      	lsls	r3, r3, #2
 8005c60:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8005c64:	687a      	ldr	r2, [r7, #4]
 8005c66:	4413      	add	r3, r2
 8005c68:	3304      	adds	r3, #4
 8005c6a:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8005c6c:	69bb      	ldr	r3, [r7, #24]
 8005c6e:	0c5b      	lsrs	r3, r3, #17
 8005c70:	f003 030f 	and.w	r3, r3, #15
 8005c74:	2b02      	cmp	r3, #2
 8005c76:	d124      	bne.n	8005cc2 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8005c78:	69ba      	ldr	r2, [r7, #24]
 8005c7a:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8005c7e:	4013      	ands	r3, r2
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d035      	beq.n	8005cf0 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8005c84:	697b      	ldr	r3, [r7, #20]
 8005c86:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8005c88:	69bb      	ldr	r3, [r7, #24]
 8005c8a:	091b      	lsrs	r3, r3, #4
 8005c8c:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8005c8e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005c92:	b29b      	uxth	r3, r3
 8005c94:	461a      	mov	r2, r3
 8005c96:	6a38      	ldr	r0, [r7, #32]
 8005c98:	f004 fc7a 	bl	800a590 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005c9c:	697b      	ldr	r3, [r7, #20]
 8005c9e:	68da      	ldr	r2, [r3, #12]
 8005ca0:	69bb      	ldr	r3, [r7, #24]
 8005ca2:	091b      	lsrs	r3, r3, #4
 8005ca4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005ca8:	441a      	add	r2, r3
 8005caa:	697b      	ldr	r3, [r7, #20]
 8005cac:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005cae:	697b      	ldr	r3, [r7, #20]
 8005cb0:	699a      	ldr	r2, [r3, #24]
 8005cb2:	69bb      	ldr	r3, [r7, #24]
 8005cb4:	091b      	lsrs	r3, r3, #4
 8005cb6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005cba:	441a      	add	r2, r3
 8005cbc:	697b      	ldr	r3, [r7, #20]
 8005cbe:	619a      	str	r2, [r3, #24]
 8005cc0:	e016      	b.n	8005cf0 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8005cc2:	69bb      	ldr	r3, [r7, #24]
 8005cc4:	0c5b      	lsrs	r3, r3, #17
 8005cc6:	f003 030f 	and.w	r3, r3, #15
 8005cca:	2b06      	cmp	r3, #6
 8005ccc:	d110      	bne.n	8005cf0 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8005cd4:	2208      	movs	r2, #8
 8005cd6:	4619      	mov	r1, r3
 8005cd8:	6a38      	ldr	r0, [r7, #32]
 8005cda:	f004 fc59 	bl	800a590 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005cde:	697b      	ldr	r3, [r7, #20]
 8005ce0:	699a      	ldr	r2, [r3, #24]
 8005ce2:	69bb      	ldr	r3, [r7, #24]
 8005ce4:	091b      	lsrs	r3, r3, #4
 8005ce6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005cea:	441a      	add	r2, r3
 8005cec:	697b      	ldr	r3, [r7, #20]
 8005cee:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	699a      	ldr	r2, [r3, #24]
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	f042 0210 	orr.w	r2, r2, #16
 8005cfe:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	4618      	mov	r0, r3
 8005d06:	f004 fda8 	bl	800a85a <USB_ReadInterrupts>
 8005d0a:	4603      	mov	r3, r0
 8005d0c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005d10:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005d14:	d16e      	bne.n	8005df4 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8005d16:	2300      	movs	r3, #0
 8005d18:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	4618      	mov	r0, r3
 8005d20:	f004 fdae 	bl	800a880 <USB_ReadDevAllOutEpInterrupt>
 8005d24:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8005d26:	e062      	b.n	8005dee <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8005d28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d2a:	f003 0301 	and.w	r3, r3, #1
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d057      	beq.n	8005de2 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d38:	b2d2      	uxtb	r2, r2
 8005d3a:	4611      	mov	r1, r2
 8005d3c:	4618      	mov	r0, r3
 8005d3e:	f004 fdd3 	bl	800a8e8 <USB_ReadDevOutEPInterrupt>
 8005d42:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8005d44:	693b      	ldr	r3, [r7, #16]
 8005d46:	f003 0301 	and.w	r3, r3, #1
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d00c      	beq.n	8005d68 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8005d4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d50:	015a      	lsls	r2, r3, #5
 8005d52:	69fb      	ldr	r3, [r7, #28]
 8005d54:	4413      	add	r3, r2
 8005d56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d5a:	461a      	mov	r2, r3
 8005d5c:	2301      	movs	r3, #1
 8005d5e:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8005d60:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005d62:	6878      	ldr	r0, [r7, #4]
 8005d64:	f000 fdb0 	bl	80068c8 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8005d68:	693b      	ldr	r3, [r7, #16]
 8005d6a:	f003 0308 	and.w	r3, r3, #8
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d00c      	beq.n	8005d8c <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8005d72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d74:	015a      	lsls	r2, r3, #5
 8005d76:	69fb      	ldr	r3, [r7, #28]
 8005d78:	4413      	add	r3, r2
 8005d7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d7e:	461a      	mov	r2, r3
 8005d80:	2308      	movs	r3, #8
 8005d82:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8005d84:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005d86:	6878      	ldr	r0, [r7, #4]
 8005d88:	f000 feaa 	bl	8006ae0 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8005d8c:	693b      	ldr	r3, [r7, #16]
 8005d8e:	f003 0310 	and.w	r3, r3, #16
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d008      	beq.n	8005da8 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8005d96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d98:	015a      	lsls	r2, r3, #5
 8005d9a:	69fb      	ldr	r3, [r7, #28]
 8005d9c:	4413      	add	r3, r2
 8005d9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005da2:	461a      	mov	r2, r3
 8005da4:	2310      	movs	r3, #16
 8005da6:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8005da8:	693b      	ldr	r3, [r7, #16]
 8005daa:	f003 0320 	and.w	r3, r3, #32
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d008      	beq.n	8005dc4 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005db2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005db4:	015a      	lsls	r2, r3, #5
 8005db6:	69fb      	ldr	r3, [r7, #28]
 8005db8:	4413      	add	r3, r2
 8005dba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005dbe:	461a      	mov	r2, r3
 8005dc0:	2320      	movs	r3, #32
 8005dc2:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8005dc4:	693b      	ldr	r3, [r7, #16]
 8005dc6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d009      	beq.n	8005de2 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8005dce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dd0:	015a      	lsls	r2, r3, #5
 8005dd2:	69fb      	ldr	r3, [r7, #28]
 8005dd4:	4413      	add	r3, r2
 8005dd6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005dda:	461a      	mov	r2, r3
 8005ddc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005de0:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8005de2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005de4:	3301      	adds	r3, #1
 8005de6:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8005de8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dea:	085b      	lsrs	r3, r3, #1
 8005dec:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8005dee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d199      	bne.n	8005d28 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	4618      	mov	r0, r3
 8005dfa:	f004 fd2e 	bl	800a85a <USB_ReadInterrupts>
 8005dfe:	4603      	mov	r3, r0
 8005e00:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005e04:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005e08:	f040 80c0 	bne.w	8005f8c <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	4618      	mov	r0, r3
 8005e12:	f004 fd4f 	bl	800a8b4 <USB_ReadDevAllInEpInterrupt>
 8005e16:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8005e18:	2300      	movs	r3, #0
 8005e1a:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8005e1c:	e0b2      	b.n	8005f84 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8005e1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e20:	f003 0301 	and.w	r3, r3, #1
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	f000 80a7 	beq.w	8005f78 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005e30:	b2d2      	uxtb	r2, r2
 8005e32:	4611      	mov	r1, r2
 8005e34:	4618      	mov	r0, r3
 8005e36:	f004 fd75 	bl	800a924 <USB_ReadDevInEPInterrupt>
 8005e3a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8005e3c:	693b      	ldr	r3, [r7, #16]
 8005e3e:	f003 0301 	and.w	r3, r3, #1
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d057      	beq.n	8005ef6 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8005e46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e48:	f003 030f 	and.w	r3, r3, #15
 8005e4c:	2201      	movs	r2, #1
 8005e4e:	fa02 f303 	lsl.w	r3, r2, r3
 8005e52:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8005e54:	69fb      	ldr	r3, [r7, #28]
 8005e56:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e5a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	43db      	mvns	r3, r3
 8005e60:	69f9      	ldr	r1, [r7, #28]
 8005e62:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005e66:	4013      	ands	r3, r2
 8005e68:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8005e6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e6c:	015a      	lsls	r2, r3, #5
 8005e6e:	69fb      	ldr	r3, [r7, #28]
 8005e70:	4413      	add	r3, r2
 8005e72:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e76:	461a      	mov	r2, r3
 8005e78:	2301      	movs	r3, #1
 8005e7a:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	691b      	ldr	r3, [r3, #16]
 8005e80:	2b01      	cmp	r3, #1
 8005e82:	d132      	bne.n	8005eea <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8005e84:	6879      	ldr	r1, [r7, #4]
 8005e86:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005e88:	4613      	mov	r3, r2
 8005e8a:	00db      	lsls	r3, r3, #3
 8005e8c:	1a9b      	subs	r3, r3, r2
 8005e8e:	009b      	lsls	r3, r3, #2
 8005e90:	440b      	add	r3, r1
 8005e92:	3348      	adds	r3, #72	; 0x48
 8005e94:	6819      	ldr	r1, [r3, #0]
 8005e96:	6878      	ldr	r0, [r7, #4]
 8005e98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005e9a:	4613      	mov	r3, r2
 8005e9c:	00db      	lsls	r3, r3, #3
 8005e9e:	1a9b      	subs	r3, r3, r2
 8005ea0:	009b      	lsls	r3, r3, #2
 8005ea2:	4403      	add	r3, r0
 8005ea4:	3344      	adds	r3, #68	; 0x44
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	4419      	add	r1, r3
 8005eaa:	6878      	ldr	r0, [r7, #4]
 8005eac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005eae:	4613      	mov	r3, r2
 8005eb0:	00db      	lsls	r3, r3, #3
 8005eb2:	1a9b      	subs	r3, r3, r2
 8005eb4:	009b      	lsls	r3, r3, #2
 8005eb6:	4403      	add	r3, r0
 8005eb8:	3348      	adds	r3, #72	; 0x48
 8005eba:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8005ebc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d113      	bne.n	8005eea <HAL_PCD_IRQHandler+0x31c>
 8005ec2:	6879      	ldr	r1, [r7, #4]
 8005ec4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005ec6:	4613      	mov	r3, r2
 8005ec8:	00db      	lsls	r3, r3, #3
 8005eca:	1a9b      	subs	r3, r3, r2
 8005ecc:	009b      	lsls	r3, r3, #2
 8005ece:	440b      	add	r3, r1
 8005ed0:	3350      	adds	r3, #80	; 0x50
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d108      	bne.n	8005eea <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	6818      	ldr	r0, [r3, #0]
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8005ee2:	461a      	mov	r2, r3
 8005ee4:	2101      	movs	r1, #1
 8005ee6:	f004 fd7d 	bl	800a9e4 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8005eea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005eec:	b2db      	uxtb	r3, r3
 8005eee:	4619      	mov	r1, r3
 8005ef0:	6878      	ldr	r0, [r7, #4]
 8005ef2:	f006 fc7c 	bl	800c7ee <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8005ef6:	693b      	ldr	r3, [r7, #16]
 8005ef8:	f003 0308 	and.w	r3, r3, #8
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d008      	beq.n	8005f12 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8005f00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f02:	015a      	lsls	r2, r3, #5
 8005f04:	69fb      	ldr	r3, [r7, #28]
 8005f06:	4413      	add	r3, r2
 8005f08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f0c:	461a      	mov	r2, r3
 8005f0e:	2308      	movs	r3, #8
 8005f10:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8005f12:	693b      	ldr	r3, [r7, #16]
 8005f14:	f003 0310 	and.w	r3, r3, #16
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d008      	beq.n	8005f2e <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8005f1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f1e:	015a      	lsls	r2, r3, #5
 8005f20:	69fb      	ldr	r3, [r7, #28]
 8005f22:	4413      	add	r3, r2
 8005f24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f28:	461a      	mov	r2, r3
 8005f2a:	2310      	movs	r3, #16
 8005f2c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8005f2e:	693b      	ldr	r3, [r7, #16]
 8005f30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d008      	beq.n	8005f4a <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8005f38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f3a:	015a      	lsls	r2, r3, #5
 8005f3c:	69fb      	ldr	r3, [r7, #28]
 8005f3e:	4413      	add	r3, r2
 8005f40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f44:	461a      	mov	r2, r3
 8005f46:	2340      	movs	r3, #64	; 0x40
 8005f48:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8005f4a:	693b      	ldr	r3, [r7, #16]
 8005f4c:	f003 0302 	and.w	r3, r3, #2
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d008      	beq.n	8005f66 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8005f54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f56:	015a      	lsls	r2, r3, #5
 8005f58:	69fb      	ldr	r3, [r7, #28]
 8005f5a:	4413      	add	r3, r2
 8005f5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f60:	461a      	mov	r2, r3
 8005f62:	2302      	movs	r3, #2
 8005f64:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8005f66:	693b      	ldr	r3, [r7, #16]
 8005f68:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d003      	beq.n	8005f78 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8005f70:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005f72:	6878      	ldr	r0, [r7, #4]
 8005f74:	f000 fc1b 	bl	80067ae <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8005f78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f7a:	3301      	adds	r3, #1
 8005f7c:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8005f7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f80:	085b      	lsrs	r3, r3, #1
 8005f82:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8005f84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	f47f af49 	bne.w	8005e1e <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	4618      	mov	r0, r3
 8005f92:	f004 fc62 	bl	800a85a <USB_ReadInterrupts>
 8005f96:	4603      	mov	r3, r0
 8005f98:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005f9c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005fa0:	d122      	bne.n	8005fe8 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8005fa2:	69fb      	ldr	r3, [r7, #28]
 8005fa4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005fa8:	685b      	ldr	r3, [r3, #4]
 8005faa:	69fa      	ldr	r2, [r7, #28]
 8005fac:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005fb0:	f023 0301 	bic.w	r3, r3, #1
 8005fb4:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8005fbc:	2b01      	cmp	r3, #1
 8005fbe:	d108      	bne.n	8005fd2 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	2200      	movs	r2, #0
 8005fc4:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8005fc8:	2100      	movs	r1, #0
 8005fca:	6878      	ldr	r0, [r7, #4]
 8005fcc:	f000 fe26 	bl	8006c1c <HAL_PCDEx_LPM_Callback>
 8005fd0:	e002      	b.n	8005fd8 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8005fd2:	6878      	ldr	r0, [r7, #4]
 8005fd4:	f006 fc78 	bl	800c8c8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	695a      	ldr	r2, [r3, #20]
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8005fe6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	4618      	mov	r0, r3
 8005fee:	f004 fc34 	bl	800a85a <USB_ReadInterrupts>
 8005ff2:	4603      	mov	r3, r0
 8005ff4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005ff8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005ffc:	d112      	bne.n	8006024 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8005ffe:	69fb      	ldr	r3, [r7, #28]
 8006000:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006004:	689b      	ldr	r3, [r3, #8]
 8006006:	f003 0301 	and.w	r3, r3, #1
 800600a:	2b01      	cmp	r3, #1
 800600c:	d102      	bne.n	8006014 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800600e:	6878      	ldr	r0, [r7, #4]
 8006010:	f006 fc34 	bl	800c87c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	695a      	ldr	r2, [r3, #20]
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8006022:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	4618      	mov	r0, r3
 800602a:	f004 fc16 	bl	800a85a <USB_ReadInterrupts>
 800602e:	4603      	mov	r3, r0
 8006030:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006034:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006038:	f040 80c7 	bne.w	80061ca <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800603c:	69fb      	ldr	r3, [r7, #28]
 800603e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006042:	685b      	ldr	r3, [r3, #4]
 8006044:	69fa      	ldr	r2, [r7, #28]
 8006046:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800604a:	f023 0301 	bic.w	r3, r3, #1
 800604e:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	2110      	movs	r1, #16
 8006056:	4618      	mov	r0, r3
 8006058:	f003 fce4 	bl	8009a24 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800605c:	2300      	movs	r3, #0
 800605e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006060:	e056      	b.n	8006110 <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8006062:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006064:	015a      	lsls	r2, r3, #5
 8006066:	69fb      	ldr	r3, [r7, #28]
 8006068:	4413      	add	r3, r2
 800606a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800606e:	461a      	mov	r2, r3
 8006070:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006074:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8006076:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006078:	015a      	lsls	r2, r3, #5
 800607a:	69fb      	ldr	r3, [r7, #28]
 800607c:	4413      	add	r3, r2
 800607e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006086:	0151      	lsls	r1, r2, #5
 8006088:	69fa      	ldr	r2, [r7, #28]
 800608a:	440a      	add	r2, r1
 800608c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006090:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006094:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8006096:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006098:	015a      	lsls	r2, r3, #5
 800609a:	69fb      	ldr	r3, [r7, #28]
 800609c:	4413      	add	r3, r2
 800609e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80060a6:	0151      	lsls	r1, r2, #5
 80060a8:	69fa      	ldr	r2, [r7, #28]
 80060aa:	440a      	add	r2, r1
 80060ac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80060b0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80060b4:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80060b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060b8:	015a      	lsls	r2, r3, #5
 80060ba:	69fb      	ldr	r3, [r7, #28]
 80060bc:	4413      	add	r3, r2
 80060be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060c2:	461a      	mov	r2, r3
 80060c4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80060c8:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80060ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060cc:	015a      	lsls	r2, r3, #5
 80060ce:	69fb      	ldr	r3, [r7, #28]
 80060d0:	4413      	add	r3, r2
 80060d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80060da:	0151      	lsls	r1, r2, #5
 80060dc:	69fa      	ldr	r2, [r7, #28]
 80060de:	440a      	add	r2, r1
 80060e0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80060e4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80060e8:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80060ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060ec:	015a      	lsls	r2, r3, #5
 80060ee:	69fb      	ldr	r3, [r7, #28]
 80060f0:	4413      	add	r3, r2
 80060f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80060fa:	0151      	lsls	r1, r2, #5
 80060fc:	69fa      	ldr	r2, [r7, #28]
 80060fe:	440a      	add	r2, r1
 8006100:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006104:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006108:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800610a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800610c:	3301      	adds	r3, #1
 800610e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	685b      	ldr	r3, [r3, #4]
 8006114:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006116:	429a      	cmp	r2, r3
 8006118:	d3a3      	bcc.n	8006062 <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800611a:	69fb      	ldr	r3, [r7, #28]
 800611c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006120:	69db      	ldr	r3, [r3, #28]
 8006122:	69fa      	ldr	r2, [r7, #28]
 8006124:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006128:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800612c:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006132:	2b00      	cmp	r3, #0
 8006134:	d016      	beq.n	8006164 <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8006136:	69fb      	ldr	r3, [r7, #28]
 8006138:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800613c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006140:	69fa      	ldr	r2, [r7, #28]
 8006142:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006146:	f043 030b 	orr.w	r3, r3, #11
 800614a:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800614e:	69fb      	ldr	r3, [r7, #28]
 8006150:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006154:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006156:	69fa      	ldr	r2, [r7, #28]
 8006158:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800615c:	f043 030b 	orr.w	r3, r3, #11
 8006160:	6453      	str	r3, [r2, #68]	; 0x44
 8006162:	e015      	b.n	8006190 <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8006164:	69fb      	ldr	r3, [r7, #28]
 8006166:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800616a:	695b      	ldr	r3, [r3, #20]
 800616c:	69fa      	ldr	r2, [r7, #28]
 800616e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006172:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8006176:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 800617a:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800617c:	69fb      	ldr	r3, [r7, #28]
 800617e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006182:	691b      	ldr	r3, [r3, #16]
 8006184:	69fa      	ldr	r2, [r7, #28]
 8006186:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800618a:	f043 030b 	orr.w	r3, r3, #11
 800618e:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8006190:	69fb      	ldr	r3, [r7, #28]
 8006192:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	69fa      	ldr	r2, [r7, #28]
 800619a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800619e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80061a2:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	6818      	ldr	r0, [r3, #0]
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	691b      	ldr	r3, [r3, #16]
 80061ac:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80061b4:	461a      	mov	r2, r3
 80061b6:	f004 fc15 	bl	800a9e4 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	695a      	ldr	r2, [r3, #20]
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80061c8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	4618      	mov	r0, r3
 80061d0:	f004 fb43 	bl	800a85a <USB_ReadInterrupts>
 80061d4:	4603      	mov	r3, r0
 80061d6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80061da:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80061de:	d124      	bne.n	800622a <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	4618      	mov	r0, r3
 80061e6:	f004 fbd9 	bl	800a99c <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	4618      	mov	r0, r3
 80061f0:	f003 fc79 	bl	8009ae6 <USB_GetDevSpeed>
 80061f4:	4603      	mov	r3, r0
 80061f6:	461a      	mov	r2, r3
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681c      	ldr	r4, [r3, #0]
 8006200:	f001 fa9e 	bl	8007740 <HAL_RCC_GetHCLKFreq>
 8006204:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800620a:	b2db      	uxtb	r3, r3
 800620c:	461a      	mov	r2, r3
 800620e:	4620      	mov	r0, r4
 8006210:	f003 f9b6 	bl	8009580 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8006214:	6878      	ldr	r0, [r7, #4]
 8006216:	f006 fb12 	bl	800c83e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	695a      	ldr	r2, [r3, #20]
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8006228:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	4618      	mov	r0, r3
 8006230:	f004 fb13 	bl	800a85a <USB_ReadInterrupts>
 8006234:	4603      	mov	r3, r0
 8006236:	f003 0308 	and.w	r3, r3, #8
 800623a:	2b08      	cmp	r3, #8
 800623c:	d10a      	bne.n	8006254 <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800623e:	6878      	ldr	r0, [r7, #4]
 8006240:	f006 faef 	bl	800c822 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	695a      	ldr	r2, [r3, #20]
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	f002 0208 	and.w	r2, r2, #8
 8006252:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	4618      	mov	r0, r3
 800625a:	f004 fafe 	bl	800a85a <USB_ReadInterrupts>
 800625e:	4603      	mov	r3, r0
 8006260:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006264:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006268:	d10f      	bne.n	800628a <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 800626a:	2300      	movs	r3, #0
 800626c:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800626e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006270:	b2db      	uxtb	r3, r3
 8006272:	4619      	mov	r1, r3
 8006274:	6878      	ldr	r0, [r7, #4]
 8006276:	f006 fb47 	bl	800c908 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	695a      	ldr	r2, [r3, #20]
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8006288:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	4618      	mov	r0, r3
 8006290:	f004 fae3 	bl	800a85a <USB_ReadInterrupts>
 8006294:	4603      	mov	r3, r0
 8006296:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800629a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800629e:	d10f      	bne.n	80062c0 <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80062a0:	2300      	movs	r3, #0
 80062a2:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80062a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062a6:	b2db      	uxtb	r3, r3
 80062a8:	4619      	mov	r1, r3
 80062aa:	6878      	ldr	r0, [r7, #4]
 80062ac:	f006 fb1a 	bl	800c8e4 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	695a      	ldr	r2, [r3, #20]
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80062be:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	4618      	mov	r0, r3
 80062c6:	f004 fac8 	bl	800a85a <USB_ReadInterrupts>
 80062ca:	4603      	mov	r3, r0
 80062cc:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80062d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80062d4:	d10a      	bne.n	80062ec <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80062d6:	6878      	ldr	r0, [r7, #4]
 80062d8:	f006 fb28 	bl	800c92c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	695a      	ldr	r2, [r3, #20]
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80062ea:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	4618      	mov	r0, r3
 80062f2:	f004 fab2 	bl	800a85a <USB_ReadInterrupts>
 80062f6:	4603      	mov	r3, r0
 80062f8:	f003 0304 	and.w	r3, r3, #4
 80062fc:	2b04      	cmp	r3, #4
 80062fe:	d115      	bne.n	800632c <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	685b      	ldr	r3, [r3, #4]
 8006306:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8006308:	69bb      	ldr	r3, [r7, #24]
 800630a:	f003 0304 	and.w	r3, r3, #4
 800630e:	2b00      	cmp	r3, #0
 8006310:	d002      	beq.n	8006318 <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8006312:	6878      	ldr	r0, [r7, #4]
 8006314:	f006 fb18 	bl	800c948 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	6859      	ldr	r1, [r3, #4]
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	69ba      	ldr	r2, [r7, #24]
 8006324:	430a      	orrs	r2, r1
 8006326:	605a      	str	r2, [r3, #4]
 8006328:	e000      	b.n	800632c <HAL_PCD_IRQHandler+0x75e>
      return;
 800632a:	bf00      	nop
    }
  }
}
 800632c:	3734      	adds	r7, #52	; 0x34
 800632e:	46bd      	mov	sp, r7
 8006330:	bd90      	pop	{r4, r7, pc}

08006332 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8006332:	b580      	push	{r7, lr}
 8006334:	b082      	sub	sp, #8
 8006336:	af00      	add	r7, sp, #0
 8006338:	6078      	str	r0, [r7, #4]
 800633a:	460b      	mov	r3, r1
 800633c:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8006344:	2b01      	cmp	r3, #1
 8006346:	d101      	bne.n	800634c <HAL_PCD_SetAddress+0x1a>
 8006348:	2302      	movs	r3, #2
 800634a:	e013      	b.n	8006374 <HAL_PCD_SetAddress+0x42>
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	2201      	movs	r2, #1
 8006350:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	78fa      	ldrb	r2, [r7, #3]
 8006358:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	78fa      	ldrb	r2, [r7, #3]
 8006362:	4611      	mov	r1, r2
 8006364:	4618      	mov	r0, r3
 8006366:	f004 fa10 	bl	800a78a <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	2200      	movs	r2, #0
 800636e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8006372:	2300      	movs	r3, #0
}
 8006374:	4618      	mov	r0, r3
 8006376:	3708      	adds	r7, #8
 8006378:	46bd      	mov	sp, r7
 800637a:	bd80      	pop	{r7, pc}

0800637c <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800637c:	b580      	push	{r7, lr}
 800637e:	b084      	sub	sp, #16
 8006380:	af00      	add	r7, sp, #0
 8006382:	6078      	str	r0, [r7, #4]
 8006384:	4608      	mov	r0, r1
 8006386:	4611      	mov	r1, r2
 8006388:	461a      	mov	r2, r3
 800638a:	4603      	mov	r3, r0
 800638c:	70fb      	strb	r3, [r7, #3]
 800638e:	460b      	mov	r3, r1
 8006390:	803b      	strh	r3, [r7, #0]
 8006392:	4613      	mov	r3, r2
 8006394:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8006396:	2300      	movs	r3, #0
 8006398:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800639a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800639e:	2b00      	cmp	r3, #0
 80063a0:	da0f      	bge.n	80063c2 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80063a2:	78fb      	ldrb	r3, [r7, #3]
 80063a4:	f003 020f 	and.w	r2, r3, #15
 80063a8:	4613      	mov	r3, r2
 80063aa:	00db      	lsls	r3, r3, #3
 80063ac:	1a9b      	subs	r3, r3, r2
 80063ae:	009b      	lsls	r3, r3, #2
 80063b0:	3338      	adds	r3, #56	; 0x38
 80063b2:	687a      	ldr	r2, [r7, #4]
 80063b4:	4413      	add	r3, r2
 80063b6:	3304      	adds	r3, #4
 80063b8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	2201      	movs	r2, #1
 80063be:	705a      	strb	r2, [r3, #1]
 80063c0:	e00f      	b.n	80063e2 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80063c2:	78fb      	ldrb	r3, [r7, #3]
 80063c4:	f003 020f 	and.w	r2, r3, #15
 80063c8:	4613      	mov	r3, r2
 80063ca:	00db      	lsls	r3, r3, #3
 80063cc:	1a9b      	subs	r3, r3, r2
 80063ce:	009b      	lsls	r3, r3, #2
 80063d0:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80063d4:	687a      	ldr	r2, [r7, #4]
 80063d6:	4413      	add	r3, r2
 80063d8:	3304      	adds	r3, #4
 80063da:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	2200      	movs	r2, #0
 80063e0:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80063e2:	78fb      	ldrb	r3, [r7, #3]
 80063e4:	f003 030f 	and.w	r3, r3, #15
 80063e8:	b2da      	uxtb	r2, r3
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80063ee:	883a      	ldrh	r2, [r7, #0]
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	78ba      	ldrb	r2, [r7, #2]
 80063f8:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	785b      	ldrb	r3, [r3, #1]
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d004      	beq.n	800640c <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	781b      	ldrb	r3, [r3, #0]
 8006406:	b29a      	uxth	r2, r3
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800640c:	78bb      	ldrb	r3, [r7, #2]
 800640e:	2b02      	cmp	r3, #2
 8006410:	d102      	bne.n	8006418 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	2200      	movs	r2, #0
 8006416:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800641e:	2b01      	cmp	r3, #1
 8006420:	d101      	bne.n	8006426 <HAL_PCD_EP_Open+0xaa>
 8006422:	2302      	movs	r3, #2
 8006424:	e00e      	b.n	8006444 <HAL_PCD_EP_Open+0xc8>
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	2201      	movs	r2, #1
 800642a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	68f9      	ldr	r1, [r7, #12]
 8006434:	4618      	mov	r0, r3
 8006436:	f003 fb7b 	bl	8009b30 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	2200      	movs	r2, #0
 800643e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8006442:	7afb      	ldrb	r3, [r7, #11]
}
 8006444:	4618      	mov	r0, r3
 8006446:	3710      	adds	r7, #16
 8006448:	46bd      	mov	sp, r7
 800644a:	bd80      	pop	{r7, pc}

0800644c <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800644c:	b580      	push	{r7, lr}
 800644e:	b084      	sub	sp, #16
 8006450:	af00      	add	r7, sp, #0
 8006452:	6078      	str	r0, [r7, #4]
 8006454:	460b      	mov	r3, r1
 8006456:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8006458:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800645c:	2b00      	cmp	r3, #0
 800645e:	da0f      	bge.n	8006480 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006460:	78fb      	ldrb	r3, [r7, #3]
 8006462:	f003 020f 	and.w	r2, r3, #15
 8006466:	4613      	mov	r3, r2
 8006468:	00db      	lsls	r3, r3, #3
 800646a:	1a9b      	subs	r3, r3, r2
 800646c:	009b      	lsls	r3, r3, #2
 800646e:	3338      	adds	r3, #56	; 0x38
 8006470:	687a      	ldr	r2, [r7, #4]
 8006472:	4413      	add	r3, r2
 8006474:	3304      	adds	r3, #4
 8006476:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	2201      	movs	r2, #1
 800647c:	705a      	strb	r2, [r3, #1]
 800647e:	e00f      	b.n	80064a0 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006480:	78fb      	ldrb	r3, [r7, #3]
 8006482:	f003 020f 	and.w	r2, r3, #15
 8006486:	4613      	mov	r3, r2
 8006488:	00db      	lsls	r3, r3, #3
 800648a:	1a9b      	subs	r3, r3, r2
 800648c:	009b      	lsls	r3, r3, #2
 800648e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8006492:	687a      	ldr	r2, [r7, #4]
 8006494:	4413      	add	r3, r2
 8006496:	3304      	adds	r3, #4
 8006498:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	2200      	movs	r2, #0
 800649e:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80064a0:	78fb      	ldrb	r3, [r7, #3]
 80064a2:	f003 030f 	and.w	r3, r3, #15
 80064a6:	b2da      	uxtb	r2, r3
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80064b2:	2b01      	cmp	r3, #1
 80064b4:	d101      	bne.n	80064ba <HAL_PCD_EP_Close+0x6e>
 80064b6:	2302      	movs	r3, #2
 80064b8:	e00e      	b.n	80064d8 <HAL_PCD_EP_Close+0x8c>
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	2201      	movs	r2, #1
 80064be:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	68f9      	ldr	r1, [r7, #12]
 80064c8:	4618      	mov	r0, r3
 80064ca:	f003 fbb9 	bl	8009c40 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	2200      	movs	r2, #0
 80064d2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 80064d6:	2300      	movs	r3, #0
}
 80064d8:	4618      	mov	r0, r3
 80064da:	3710      	adds	r7, #16
 80064dc:	46bd      	mov	sp, r7
 80064de:	bd80      	pop	{r7, pc}

080064e0 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80064e0:	b580      	push	{r7, lr}
 80064e2:	b086      	sub	sp, #24
 80064e4:	af00      	add	r7, sp, #0
 80064e6:	60f8      	str	r0, [r7, #12]
 80064e8:	607a      	str	r2, [r7, #4]
 80064ea:	603b      	str	r3, [r7, #0]
 80064ec:	460b      	mov	r3, r1
 80064ee:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80064f0:	7afb      	ldrb	r3, [r7, #11]
 80064f2:	f003 020f 	and.w	r2, r3, #15
 80064f6:	4613      	mov	r3, r2
 80064f8:	00db      	lsls	r3, r3, #3
 80064fa:	1a9b      	subs	r3, r3, r2
 80064fc:	009b      	lsls	r3, r3, #2
 80064fe:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8006502:	68fa      	ldr	r2, [r7, #12]
 8006504:	4413      	add	r3, r2
 8006506:	3304      	adds	r3, #4
 8006508:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800650a:	697b      	ldr	r3, [r7, #20]
 800650c:	687a      	ldr	r2, [r7, #4]
 800650e:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8006510:	697b      	ldr	r3, [r7, #20]
 8006512:	683a      	ldr	r2, [r7, #0]
 8006514:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8006516:	697b      	ldr	r3, [r7, #20]
 8006518:	2200      	movs	r2, #0
 800651a:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 800651c:	697b      	ldr	r3, [r7, #20]
 800651e:	2200      	movs	r2, #0
 8006520:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006522:	7afb      	ldrb	r3, [r7, #11]
 8006524:	f003 030f 	and.w	r3, r3, #15
 8006528:	b2da      	uxtb	r2, r3
 800652a:	697b      	ldr	r3, [r7, #20]
 800652c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	691b      	ldr	r3, [r3, #16]
 8006532:	2b01      	cmp	r3, #1
 8006534:	d102      	bne.n	800653c <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8006536:	687a      	ldr	r2, [r7, #4]
 8006538:	697b      	ldr	r3, [r7, #20]
 800653a:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800653c:	7afb      	ldrb	r3, [r7, #11]
 800653e:	f003 030f 	and.w	r3, r3, #15
 8006542:	2b00      	cmp	r3, #0
 8006544:	d109      	bne.n	800655a <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	6818      	ldr	r0, [r3, #0]
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	691b      	ldr	r3, [r3, #16]
 800654e:	b2db      	uxtb	r3, r3
 8006550:	461a      	mov	r2, r3
 8006552:	6979      	ldr	r1, [r7, #20]
 8006554:	f003 fe94 	bl	800a280 <USB_EP0StartXfer>
 8006558:	e008      	b.n	800656c <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	6818      	ldr	r0, [r3, #0]
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	691b      	ldr	r3, [r3, #16]
 8006562:	b2db      	uxtb	r3, r3
 8006564:	461a      	mov	r2, r3
 8006566:	6979      	ldr	r1, [r7, #20]
 8006568:	f003 fc46 	bl	8009df8 <USB_EPStartXfer>
  }

  return HAL_OK;
 800656c:	2300      	movs	r3, #0
}
 800656e:	4618      	mov	r0, r3
 8006570:	3718      	adds	r7, #24
 8006572:	46bd      	mov	sp, r7
 8006574:	bd80      	pop	{r7, pc}

08006576 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006576:	b480      	push	{r7}
 8006578:	b083      	sub	sp, #12
 800657a:	af00      	add	r7, sp, #0
 800657c:	6078      	str	r0, [r7, #4]
 800657e:	460b      	mov	r3, r1
 8006580:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8006582:	78fb      	ldrb	r3, [r7, #3]
 8006584:	f003 020f 	and.w	r2, r3, #15
 8006588:	6879      	ldr	r1, [r7, #4]
 800658a:	4613      	mov	r3, r2
 800658c:	00db      	lsls	r3, r3, #3
 800658e:	1a9b      	subs	r3, r3, r2
 8006590:	009b      	lsls	r3, r3, #2
 8006592:	440b      	add	r3, r1
 8006594:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8006598:	681b      	ldr	r3, [r3, #0]
}
 800659a:	4618      	mov	r0, r3
 800659c:	370c      	adds	r7, #12
 800659e:	46bd      	mov	sp, r7
 80065a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065a4:	4770      	bx	lr

080065a6 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80065a6:	b580      	push	{r7, lr}
 80065a8:	b086      	sub	sp, #24
 80065aa:	af00      	add	r7, sp, #0
 80065ac:	60f8      	str	r0, [r7, #12]
 80065ae:	607a      	str	r2, [r7, #4]
 80065b0:	603b      	str	r3, [r7, #0]
 80065b2:	460b      	mov	r3, r1
 80065b4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80065b6:	7afb      	ldrb	r3, [r7, #11]
 80065b8:	f003 020f 	and.w	r2, r3, #15
 80065bc:	4613      	mov	r3, r2
 80065be:	00db      	lsls	r3, r3, #3
 80065c0:	1a9b      	subs	r3, r3, r2
 80065c2:	009b      	lsls	r3, r3, #2
 80065c4:	3338      	adds	r3, #56	; 0x38
 80065c6:	68fa      	ldr	r2, [r7, #12]
 80065c8:	4413      	add	r3, r2
 80065ca:	3304      	adds	r3, #4
 80065cc:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80065ce:	697b      	ldr	r3, [r7, #20]
 80065d0:	687a      	ldr	r2, [r7, #4]
 80065d2:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80065d4:	697b      	ldr	r3, [r7, #20]
 80065d6:	683a      	ldr	r2, [r7, #0]
 80065d8:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80065da:	697b      	ldr	r3, [r7, #20]
 80065dc:	2200      	movs	r2, #0
 80065de:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 80065e0:	697b      	ldr	r3, [r7, #20]
 80065e2:	2201      	movs	r2, #1
 80065e4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80065e6:	7afb      	ldrb	r3, [r7, #11]
 80065e8:	f003 030f 	and.w	r3, r3, #15
 80065ec:	b2da      	uxtb	r2, r3
 80065ee:	697b      	ldr	r3, [r7, #20]
 80065f0:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	691b      	ldr	r3, [r3, #16]
 80065f6:	2b01      	cmp	r3, #1
 80065f8:	d102      	bne.n	8006600 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80065fa:	687a      	ldr	r2, [r7, #4]
 80065fc:	697b      	ldr	r3, [r7, #20]
 80065fe:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8006600:	7afb      	ldrb	r3, [r7, #11]
 8006602:	f003 030f 	and.w	r3, r3, #15
 8006606:	2b00      	cmp	r3, #0
 8006608:	d109      	bne.n	800661e <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	6818      	ldr	r0, [r3, #0]
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	691b      	ldr	r3, [r3, #16]
 8006612:	b2db      	uxtb	r3, r3
 8006614:	461a      	mov	r2, r3
 8006616:	6979      	ldr	r1, [r7, #20]
 8006618:	f003 fe32 	bl	800a280 <USB_EP0StartXfer>
 800661c:	e008      	b.n	8006630 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	6818      	ldr	r0, [r3, #0]
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	691b      	ldr	r3, [r3, #16]
 8006626:	b2db      	uxtb	r3, r3
 8006628:	461a      	mov	r2, r3
 800662a:	6979      	ldr	r1, [r7, #20]
 800662c:	f003 fbe4 	bl	8009df8 <USB_EPStartXfer>
  }

  return HAL_OK;
 8006630:	2300      	movs	r3, #0
}
 8006632:	4618      	mov	r0, r3
 8006634:	3718      	adds	r7, #24
 8006636:	46bd      	mov	sp, r7
 8006638:	bd80      	pop	{r7, pc}

0800663a <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800663a:	b580      	push	{r7, lr}
 800663c:	b084      	sub	sp, #16
 800663e:	af00      	add	r7, sp, #0
 8006640:	6078      	str	r0, [r7, #4]
 8006642:	460b      	mov	r3, r1
 8006644:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8006646:	78fb      	ldrb	r3, [r7, #3]
 8006648:	f003 020f 	and.w	r2, r3, #15
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	685b      	ldr	r3, [r3, #4]
 8006650:	429a      	cmp	r2, r3
 8006652:	d901      	bls.n	8006658 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8006654:	2301      	movs	r3, #1
 8006656:	e050      	b.n	80066fa <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8006658:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800665c:	2b00      	cmp	r3, #0
 800665e:	da0f      	bge.n	8006680 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006660:	78fb      	ldrb	r3, [r7, #3]
 8006662:	f003 020f 	and.w	r2, r3, #15
 8006666:	4613      	mov	r3, r2
 8006668:	00db      	lsls	r3, r3, #3
 800666a:	1a9b      	subs	r3, r3, r2
 800666c:	009b      	lsls	r3, r3, #2
 800666e:	3338      	adds	r3, #56	; 0x38
 8006670:	687a      	ldr	r2, [r7, #4]
 8006672:	4413      	add	r3, r2
 8006674:	3304      	adds	r3, #4
 8006676:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	2201      	movs	r2, #1
 800667c:	705a      	strb	r2, [r3, #1]
 800667e:	e00d      	b.n	800669c <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8006680:	78fa      	ldrb	r2, [r7, #3]
 8006682:	4613      	mov	r3, r2
 8006684:	00db      	lsls	r3, r3, #3
 8006686:	1a9b      	subs	r3, r3, r2
 8006688:	009b      	lsls	r3, r3, #2
 800668a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800668e:	687a      	ldr	r2, [r7, #4]
 8006690:	4413      	add	r3, r2
 8006692:	3304      	adds	r3, #4
 8006694:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	2200      	movs	r2, #0
 800669a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	2201      	movs	r2, #1
 80066a0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80066a2:	78fb      	ldrb	r3, [r7, #3]
 80066a4:	f003 030f 	and.w	r3, r3, #15
 80066a8:	b2da      	uxtb	r2, r3
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80066b4:	2b01      	cmp	r3, #1
 80066b6:	d101      	bne.n	80066bc <HAL_PCD_EP_SetStall+0x82>
 80066b8:	2302      	movs	r3, #2
 80066ba:	e01e      	b.n	80066fa <HAL_PCD_EP_SetStall+0xc0>
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	2201      	movs	r2, #1
 80066c0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	68f9      	ldr	r1, [r7, #12]
 80066ca:	4618      	mov	r0, r3
 80066cc:	f003 ff89 	bl	800a5e2 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80066d0:	78fb      	ldrb	r3, [r7, #3]
 80066d2:	f003 030f 	and.w	r3, r3, #15
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d10a      	bne.n	80066f0 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	6818      	ldr	r0, [r3, #0]
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	691b      	ldr	r3, [r3, #16]
 80066e2:	b2d9      	uxtb	r1, r3
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80066ea:	461a      	mov	r2, r3
 80066ec:	f004 f97a 	bl	800a9e4 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	2200      	movs	r2, #0
 80066f4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80066f8:	2300      	movs	r3, #0
}
 80066fa:	4618      	mov	r0, r3
 80066fc:	3710      	adds	r7, #16
 80066fe:	46bd      	mov	sp, r7
 8006700:	bd80      	pop	{r7, pc}

08006702 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006702:	b580      	push	{r7, lr}
 8006704:	b084      	sub	sp, #16
 8006706:	af00      	add	r7, sp, #0
 8006708:	6078      	str	r0, [r7, #4]
 800670a:	460b      	mov	r3, r1
 800670c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800670e:	78fb      	ldrb	r3, [r7, #3]
 8006710:	f003 020f 	and.w	r2, r3, #15
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	685b      	ldr	r3, [r3, #4]
 8006718:	429a      	cmp	r2, r3
 800671a:	d901      	bls.n	8006720 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800671c:	2301      	movs	r3, #1
 800671e:	e042      	b.n	80067a6 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8006720:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006724:	2b00      	cmp	r3, #0
 8006726:	da0f      	bge.n	8006748 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006728:	78fb      	ldrb	r3, [r7, #3]
 800672a:	f003 020f 	and.w	r2, r3, #15
 800672e:	4613      	mov	r3, r2
 8006730:	00db      	lsls	r3, r3, #3
 8006732:	1a9b      	subs	r3, r3, r2
 8006734:	009b      	lsls	r3, r3, #2
 8006736:	3338      	adds	r3, #56	; 0x38
 8006738:	687a      	ldr	r2, [r7, #4]
 800673a:	4413      	add	r3, r2
 800673c:	3304      	adds	r3, #4
 800673e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	2201      	movs	r2, #1
 8006744:	705a      	strb	r2, [r3, #1]
 8006746:	e00f      	b.n	8006768 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006748:	78fb      	ldrb	r3, [r7, #3]
 800674a:	f003 020f 	and.w	r2, r3, #15
 800674e:	4613      	mov	r3, r2
 8006750:	00db      	lsls	r3, r3, #3
 8006752:	1a9b      	subs	r3, r3, r2
 8006754:	009b      	lsls	r3, r3, #2
 8006756:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800675a:	687a      	ldr	r2, [r7, #4]
 800675c:	4413      	add	r3, r2
 800675e:	3304      	adds	r3, #4
 8006760:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	2200      	movs	r2, #0
 8006766:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	2200      	movs	r2, #0
 800676c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800676e:	78fb      	ldrb	r3, [r7, #3]
 8006770:	f003 030f 	and.w	r3, r3, #15
 8006774:	b2da      	uxtb	r2, r3
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8006780:	2b01      	cmp	r3, #1
 8006782:	d101      	bne.n	8006788 <HAL_PCD_EP_ClrStall+0x86>
 8006784:	2302      	movs	r3, #2
 8006786:	e00e      	b.n	80067a6 <HAL_PCD_EP_ClrStall+0xa4>
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	2201      	movs	r2, #1
 800678c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	68f9      	ldr	r1, [r7, #12]
 8006796:	4618      	mov	r0, r3
 8006798:	f003 ff91 	bl	800a6be <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	2200      	movs	r2, #0
 80067a0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80067a4:	2300      	movs	r3, #0
}
 80067a6:	4618      	mov	r0, r3
 80067a8:	3710      	adds	r7, #16
 80067aa:	46bd      	mov	sp, r7
 80067ac:	bd80      	pop	{r7, pc}

080067ae <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80067ae:	b580      	push	{r7, lr}
 80067b0:	b08a      	sub	sp, #40	; 0x28
 80067b2:	af02      	add	r7, sp, #8
 80067b4:	6078      	str	r0, [r7, #4]
 80067b6:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80067be:	697b      	ldr	r3, [r7, #20]
 80067c0:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80067c2:	683a      	ldr	r2, [r7, #0]
 80067c4:	4613      	mov	r3, r2
 80067c6:	00db      	lsls	r3, r3, #3
 80067c8:	1a9b      	subs	r3, r3, r2
 80067ca:	009b      	lsls	r3, r3, #2
 80067cc:	3338      	adds	r3, #56	; 0x38
 80067ce:	687a      	ldr	r2, [r7, #4]
 80067d0:	4413      	add	r3, r2
 80067d2:	3304      	adds	r3, #4
 80067d4:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	699a      	ldr	r2, [r3, #24]
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	695b      	ldr	r3, [r3, #20]
 80067de:	429a      	cmp	r2, r3
 80067e0:	d901      	bls.n	80067e6 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80067e2:	2301      	movs	r3, #1
 80067e4:	e06c      	b.n	80068c0 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	695a      	ldr	r2, [r3, #20]
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	699b      	ldr	r3, [r3, #24]
 80067ee:	1ad3      	subs	r3, r2, r3
 80067f0:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	689b      	ldr	r3, [r3, #8]
 80067f6:	69fa      	ldr	r2, [r7, #28]
 80067f8:	429a      	cmp	r2, r3
 80067fa:	d902      	bls.n	8006802 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	689b      	ldr	r3, [r3, #8]
 8006800:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8006802:	69fb      	ldr	r3, [r7, #28]
 8006804:	3303      	adds	r3, #3
 8006806:	089b      	lsrs	r3, r3, #2
 8006808:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800680a:	e02b      	b.n	8006864 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	695a      	ldr	r2, [r3, #20]
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	699b      	ldr	r3, [r3, #24]
 8006814:	1ad3      	subs	r3, r2, r3
 8006816:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	689b      	ldr	r3, [r3, #8]
 800681c:	69fa      	ldr	r2, [r7, #28]
 800681e:	429a      	cmp	r2, r3
 8006820:	d902      	bls.n	8006828 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	689b      	ldr	r3, [r3, #8]
 8006826:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8006828:	69fb      	ldr	r3, [r7, #28]
 800682a:	3303      	adds	r3, #3
 800682c:	089b      	lsrs	r3, r3, #2
 800682e:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	68d9      	ldr	r1, [r3, #12]
 8006834:	683b      	ldr	r3, [r7, #0]
 8006836:	b2da      	uxtb	r2, r3
 8006838:	69fb      	ldr	r3, [r7, #28]
 800683a:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8006840:	b2db      	uxtb	r3, r3
 8006842:	9300      	str	r3, [sp, #0]
 8006844:	4603      	mov	r3, r0
 8006846:	6978      	ldr	r0, [r7, #20]
 8006848:	f003 fe6d 	bl	800a526 <USB_WritePacket>

    ep->xfer_buff  += len;
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	68da      	ldr	r2, [r3, #12]
 8006850:	69fb      	ldr	r3, [r7, #28]
 8006852:	441a      	add	r2, r3
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	699a      	ldr	r2, [r3, #24]
 800685c:	69fb      	ldr	r3, [r7, #28]
 800685e:	441a      	add	r2, r3
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8006864:	683b      	ldr	r3, [r7, #0]
 8006866:	015a      	lsls	r2, r3, #5
 8006868:	693b      	ldr	r3, [r7, #16]
 800686a:	4413      	add	r3, r2
 800686c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006870:	699b      	ldr	r3, [r3, #24]
 8006872:	b29b      	uxth	r3, r3
 8006874:	69ba      	ldr	r2, [r7, #24]
 8006876:	429a      	cmp	r2, r3
 8006878:	d809      	bhi.n	800688e <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	699a      	ldr	r2, [r3, #24]
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8006882:	429a      	cmp	r2, r3
 8006884:	d203      	bcs.n	800688e <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	695b      	ldr	r3, [r3, #20]
 800688a:	2b00      	cmp	r3, #0
 800688c:	d1be      	bne.n	800680c <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	695a      	ldr	r2, [r3, #20]
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	699b      	ldr	r3, [r3, #24]
 8006896:	429a      	cmp	r2, r3
 8006898:	d811      	bhi.n	80068be <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800689a:	683b      	ldr	r3, [r7, #0]
 800689c:	f003 030f 	and.w	r3, r3, #15
 80068a0:	2201      	movs	r2, #1
 80068a2:	fa02 f303 	lsl.w	r3, r2, r3
 80068a6:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80068a8:	693b      	ldr	r3, [r7, #16]
 80068aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80068ae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80068b0:	68bb      	ldr	r3, [r7, #8]
 80068b2:	43db      	mvns	r3, r3
 80068b4:	6939      	ldr	r1, [r7, #16]
 80068b6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80068ba:	4013      	ands	r3, r2
 80068bc:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80068be:	2300      	movs	r3, #0
}
 80068c0:	4618      	mov	r0, r3
 80068c2:	3720      	adds	r7, #32
 80068c4:	46bd      	mov	sp, r7
 80068c6:	bd80      	pop	{r7, pc}

080068c8 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80068c8:	b580      	push	{r7, lr}
 80068ca:	b086      	sub	sp, #24
 80068cc:	af00      	add	r7, sp, #0
 80068ce:	6078      	str	r0, [r7, #4]
 80068d0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80068d8:	697b      	ldr	r3, [r7, #20]
 80068da:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80068dc:	697b      	ldr	r3, [r7, #20]
 80068de:	333c      	adds	r3, #60	; 0x3c
 80068e0:	3304      	adds	r3, #4
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80068e6:	683b      	ldr	r3, [r7, #0]
 80068e8:	015a      	lsls	r2, r3, #5
 80068ea:	693b      	ldr	r3, [r7, #16]
 80068ec:	4413      	add	r3, r2
 80068ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80068f2:	689b      	ldr	r3, [r3, #8]
 80068f4:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	691b      	ldr	r3, [r3, #16]
 80068fa:	2b01      	cmp	r3, #1
 80068fc:	f040 80a0 	bne.w	8006a40 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8006900:	68bb      	ldr	r3, [r7, #8]
 8006902:	f003 0308 	and.w	r3, r3, #8
 8006906:	2b00      	cmp	r3, #0
 8006908:	d015      	beq.n	8006936 <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	4a72      	ldr	r2, [pc, #456]	; (8006ad8 <PCD_EP_OutXfrComplete_int+0x210>)
 800690e:	4293      	cmp	r3, r2
 8006910:	f240 80dd 	bls.w	8006ace <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8006914:	68bb      	ldr	r3, [r7, #8]
 8006916:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800691a:	2b00      	cmp	r3, #0
 800691c:	f000 80d7 	beq.w	8006ace <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006920:	683b      	ldr	r3, [r7, #0]
 8006922:	015a      	lsls	r2, r3, #5
 8006924:	693b      	ldr	r3, [r7, #16]
 8006926:	4413      	add	r3, r2
 8006928:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800692c:	461a      	mov	r2, r3
 800692e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006932:	6093      	str	r3, [r2, #8]
 8006934:	e0cb      	b.n	8006ace <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8006936:	68bb      	ldr	r3, [r7, #8]
 8006938:	f003 0320 	and.w	r3, r3, #32
 800693c:	2b00      	cmp	r3, #0
 800693e:	d009      	beq.n	8006954 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8006940:	683b      	ldr	r3, [r7, #0]
 8006942:	015a      	lsls	r2, r3, #5
 8006944:	693b      	ldr	r3, [r7, #16]
 8006946:	4413      	add	r3, r2
 8006948:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800694c:	461a      	mov	r2, r3
 800694e:	2320      	movs	r3, #32
 8006950:	6093      	str	r3, [r2, #8]
 8006952:	e0bc      	b.n	8006ace <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8006954:	68bb      	ldr	r3, [r7, #8]
 8006956:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800695a:	2b00      	cmp	r3, #0
 800695c:	f040 80b7 	bne.w	8006ace <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	4a5d      	ldr	r2, [pc, #372]	; (8006ad8 <PCD_EP_OutXfrComplete_int+0x210>)
 8006964:	4293      	cmp	r3, r2
 8006966:	d90f      	bls.n	8006988 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8006968:	68bb      	ldr	r3, [r7, #8]
 800696a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800696e:	2b00      	cmp	r3, #0
 8006970:	d00a      	beq.n	8006988 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006972:	683b      	ldr	r3, [r7, #0]
 8006974:	015a      	lsls	r2, r3, #5
 8006976:	693b      	ldr	r3, [r7, #16]
 8006978:	4413      	add	r3, r2
 800697a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800697e:	461a      	mov	r2, r3
 8006980:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006984:	6093      	str	r3, [r2, #8]
 8006986:	e0a2      	b.n	8006ace <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8006988:	6879      	ldr	r1, [r7, #4]
 800698a:	683a      	ldr	r2, [r7, #0]
 800698c:	4613      	mov	r3, r2
 800698e:	00db      	lsls	r3, r3, #3
 8006990:	1a9b      	subs	r3, r3, r2
 8006992:	009b      	lsls	r3, r3, #2
 8006994:	440b      	add	r3, r1
 8006996:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800699a:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800699c:	683b      	ldr	r3, [r7, #0]
 800699e:	0159      	lsls	r1, r3, #5
 80069a0:	693b      	ldr	r3, [r7, #16]
 80069a2:	440b      	add	r3, r1
 80069a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80069a8:	691b      	ldr	r3, [r3, #16]
 80069aa:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 80069ae:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 80069b0:	6878      	ldr	r0, [r7, #4]
 80069b2:	683a      	ldr	r2, [r7, #0]
 80069b4:	4613      	mov	r3, r2
 80069b6:	00db      	lsls	r3, r3, #3
 80069b8:	1a9b      	subs	r3, r3, r2
 80069ba:	009b      	lsls	r3, r3, #2
 80069bc:	4403      	add	r3, r0
 80069be:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80069c2:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 80069c4:	6879      	ldr	r1, [r7, #4]
 80069c6:	683a      	ldr	r2, [r7, #0]
 80069c8:	4613      	mov	r3, r2
 80069ca:	00db      	lsls	r3, r3, #3
 80069cc:	1a9b      	subs	r3, r3, r2
 80069ce:	009b      	lsls	r3, r3, #2
 80069d0:	440b      	add	r3, r1
 80069d2:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80069d6:	6819      	ldr	r1, [r3, #0]
 80069d8:	6878      	ldr	r0, [r7, #4]
 80069da:	683a      	ldr	r2, [r7, #0]
 80069dc:	4613      	mov	r3, r2
 80069de:	00db      	lsls	r3, r3, #3
 80069e0:	1a9b      	subs	r3, r3, r2
 80069e2:	009b      	lsls	r3, r3, #2
 80069e4:	4403      	add	r3, r0
 80069e6:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	4419      	add	r1, r3
 80069ee:	6878      	ldr	r0, [r7, #4]
 80069f0:	683a      	ldr	r2, [r7, #0]
 80069f2:	4613      	mov	r3, r2
 80069f4:	00db      	lsls	r3, r3, #3
 80069f6:	1a9b      	subs	r3, r3, r2
 80069f8:	009b      	lsls	r3, r3, #2
 80069fa:	4403      	add	r3, r0
 80069fc:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8006a00:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8006a02:	683b      	ldr	r3, [r7, #0]
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d114      	bne.n	8006a32 <PCD_EP_OutXfrComplete_int+0x16a>
 8006a08:	6879      	ldr	r1, [r7, #4]
 8006a0a:	683a      	ldr	r2, [r7, #0]
 8006a0c:	4613      	mov	r3, r2
 8006a0e:	00db      	lsls	r3, r3, #3
 8006a10:	1a9b      	subs	r3, r3, r2
 8006a12:	009b      	lsls	r3, r3, #2
 8006a14:	440b      	add	r3, r1
 8006a16:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d108      	bne.n	8006a32 <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	6818      	ldr	r0, [r3, #0]
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8006a2a:	461a      	mov	r2, r3
 8006a2c:	2101      	movs	r1, #1
 8006a2e:	f003 ffd9 	bl	800a9e4 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006a32:	683b      	ldr	r3, [r7, #0]
 8006a34:	b2db      	uxtb	r3, r3
 8006a36:	4619      	mov	r1, r3
 8006a38:	6878      	ldr	r0, [r7, #4]
 8006a3a:	f005 febd 	bl	800c7b8 <HAL_PCD_DataOutStageCallback>
 8006a3e:	e046      	b.n	8006ace <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	4a26      	ldr	r2, [pc, #152]	; (8006adc <PCD_EP_OutXfrComplete_int+0x214>)
 8006a44:	4293      	cmp	r3, r2
 8006a46:	d124      	bne.n	8006a92 <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8006a48:	68bb      	ldr	r3, [r7, #8]
 8006a4a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d00a      	beq.n	8006a68 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006a52:	683b      	ldr	r3, [r7, #0]
 8006a54:	015a      	lsls	r2, r3, #5
 8006a56:	693b      	ldr	r3, [r7, #16]
 8006a58:	4413      	add	r3, r2
 8006a5a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a5e:	461a      	mov	r2, r3
 8006a60:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006a64:	6093      	str	r3, [r2, #8]
 8006a66:	e032      	b.n	8006ace <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8006a68:	68bb      	ldr	r3, [r7, #8]
 8006a6a:	f003 0320 	and.w	r3, r3, #32
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d008      	beq.n	8006a84 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8006a72:	683b      	ldr	r3, [r7, #0]
 8006a74:	015a      	lsls	r2, r3, #5
 8006a76:	693b      	ldr	r3, [r7, #16]
 8006a78:	4413      	add	r3, r2
 8006a7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a7e:	461a      	mov	r2, r3
 8006a80:	2320      	movs	r3, #32
 8006a82:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006a84:	683b      	ldr	r3, [r7, #0]
 8006a86:	b2db      	uxtb	r3, r3
 8006a88:	4619      	mov	r1, r3
 8006a8a:	6878      	ldr	r0, [r7, #4]
 8006a8c:	f005 fe94 	bl	800c7b8 <HAL_PCD_DataOutStageCallback>
 8006a90:	e01d      	b.n	8006ace <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8006a92:	683b      	ldr	r3, [r7, #0]
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d114      	bne.n	8006ac2 <PCD_EP_OutXfrComplete_int+0x1fa>
 8006a98:	6879      	ldr	r1, [r7, #4]
 8006a9a:	683a      	ldr	r2, [r7, #0]
 8006a9c:	4613      	mov	r3, r2
 8006a9e:	00db      	lsls	r3, r3, #3
 8006aa0:	1a9b      	subs	r3, r3, r2
 8006aa2:	009b      	lsls	r3, r3, #2
 8006aa4:	440b      	add	r3, r1
 8006aa6:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d108      	bne.n	8006ac2 <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	6818      	ldr	r0, [r3, #0]
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8006aba:	461a      	mov	r2, r3
 8006abc:	2100      	movs	r1, #0
 8006abe:	f003 ff91 	bl	800a9e4 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006ac2:	683b      	ldr	r3, [r7, #0]
 8006ac4:	b2db      	uxtb	r3, r3
 8006ac6:	4619      	mov	r1, r3
 8006ac8:	6878      	ldr	r0, [r7, #4]
 8006aca:	f005 fe75 	bl	800c7b8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8006ace:	2300      	movs	r3, #0
}
 8006ad0:	4618      	mov	r0, r3
 8006ad2:	3718      	adds	r7, #24
 8006ad4:	46bd      	mov	sp, r7
 8006ad6:	bd80      	pop	{r7, pc}
 8006ad8:	4f54300a 	.word	0x4f54300a
 8006adc:	4f54310a 	.word	0x4f54310a

08006ae0 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006ae0:	b580      	push	{r7, lr}
 8006ae2:	b086      	sub	sp, #24
 8006ae4:	af00      	add	r7, sp, #0
 8006ae6:	6078      	str	r0, [r7, #4]
 8006ae8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006af0:	697b      	ldr	r3, [r7, #20]
 8006af2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8006af4:	697b      	ldr	r3, [r7, #20]
 8006af6:	333c      	adds	r3, #60	; 0x3c
 8006af8:	3304      	adds	r3, #4
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8006afe:	683b      	ldr	r3, [r7, #0]
 8006b00:	015a      	lsls	r2, r3, #5
 8006b02:	693b      	ldr	r3, [r7, #16]
 8006b04:	4413      	add	r3, r2
 8006b06:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b0a:	689b      	ldr	r3, [r3, #8]
 8006b0c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	4a15      	ldr	r2, [pc, #84]	; (8006b68 <PCD_EP_OutSetupPacket_int+0x88>)
 8006b12:	4293      	cmp	r3, r2
 8006b14:	d90e      	bls.n	8006b34 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8006b16:	68bb      	ldr	r3, [r7, #8]
 8006b18:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d009      	beq.n	8006b34 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006b20:	683b      	ldr	r3, [r7, #0]
 8006b22:	015a      	lsls	r2, r3, #5
 8006b24:	693b      	ldr	r3, [r7, #16]
 8006b26:	4413      	add	r3, r2
 8006b28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b2c:	461a      	mov	r2, r3
 8006b2e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006b32:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8006b34:	6878      	ldr	r0, [r7, #4]
 8006b36:	f005 fe2d 	bl	800c794 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	4a0a      	ldr	r2, [pc, #40]	; (8006b68 <PCD_EP_OutSetupPacket_int+0x88>)
 8006b3e:	4293      	cmp	r3, r2
 8006b40:	d90c      	bls.n	8006b5c <PCD_EP_OutSetupPacket_int+0x7c>
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	691b      	ldr	r3, [r3, #16]
 8006b46:	2b01      	cmp	r3, #1
 8006b48:	d108      	bne.n	8006b5c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	6818      	ldr	r0, [r3, #0]
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8006b54:	461a      	mov	r2, r3
 8006b56:	2101      	movs	r1, #1
 8006b58:	f003 ff44 	bl	800a9e4 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8006b5c:	2300      	movs	r3, #0
}
 8006b5e:	4618      	mov	r0, r3
 8006b60:	3718      	adds	r7, #24
 8006b62:	46bd      	mov	sp, r7
 8006b64:	bd80      	pop	{r7, pc}
 8006b66:	bf00      	nop
 8006b68:	4f54300a 	.word	0x4f54300a

08006b6c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8006b6c:	b480      	push	{r7}
 8006b6e:	b085      	sub	sp, #20
 8006b70:	af00      	add	r7, sp, #0
 8006b72:	6078      	str	r0, [r7, #4]
 8006b74:	460b      	mov	r3, r1
 8006b76:	70fb      	strb	r3, [r7, #3]
 8006b78:	4613      	mov	r3, r2
 8006b7a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b82:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8006b84:	78fb      	ldrb	r3, [r7, #3]
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d107      	bne.n	8006b9a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8006b8a:	883b      	ldrh	r3, [r7, #0]
 8006b8c:	0419      	lsls	r1, r3, #16
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	68ba      	ldr	r2, [r7, #8]
 8006b94:	430a      	orrs	r2, r1
 8006b96:	629a      	str	r2, [r3, #40]	; 0x28
 8006b98:	e028      	b.n	8006bec <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ba0:	0c1b      	lsrs	r3, r3, #16
 8006ba2:	68ba      	ldr	r2, [r7, #8]
 8006ba4:	4413      	add	r3, r2
 8006ba6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8006ba8:	2300      	movs	r3, #0
 8006baa:	73fb      	strb	r3, [r7, #15]
 8006bac:	e00d      	b.n	8006bca <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	681a      	ldr	r2, [r3, #0]
 8006bb2:	7bfb      	ldrb	r3, [r7, #15]
 8006bb4:	3340      	adds	r3, #64	; 0x40
 8006bb6:	009b      	lsls	r3, r3, #2
 8006bb8:	4413      	add	r3, r2
 8006bba:	685b      	ldr	r3, [r3, #4]
 8006bbc:	0c1b      	lsrs	r3, r3, #16
 8006bbe:	68ba      	ldr	r2, [r7, #8]
 8006bc0:	4413      	add	r3, r2
 8006bc2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8006bc4:	7bfb      	ldrb	r3, [r7, #15]
 8006bc6:	3301      	adds	r3, #1
 8006bc8:	73fb      	strb	r3, [r7, #15]
 8006bca:	7bfa      	ldrb	r2, [r7, #15]
 8006bcc:	78fb      	ldrb	r3, [r7, #3]
 8006bce:	3b01      	subs	r3, #1
 8006bd0:	429a      	cmp	r2, r3
 8006bd2:	d3ec      	bcc.n	8006bae <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8006bd4:	883b      	ldrh	r3, [r7, #0]
 8006bd6:	0418      	lsls	r0, r3, #16
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	6819      	ldr	r1, [r3, #0]
 8006bdc:	78fb      	ldrb	r3, [r7, #3]
 8006bde:	3b01      	subs	r3, #1
 8006be0:	68ba      	ldr	r2, [r7, #8]
 8006be2:	4302      	orrs	r2, r0
 8006be4:	3340      	adds	r3, #64	; 0x40
 8006be6:	009b      	lsls	r3, r3, #2
 8006be8:	440b      	add	r3, r1
 8006bea:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8006bec:	2300      	movs	r3, #0
}
 8006bee:	4618      	mov	r0, r3
 8006bf0:	3714      	adds	r7, #20
 8006bf2:	46bd      	mov	sp, r7
 8006bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bf8:	4770      	bx	lr

08006bfa <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8006bfa:	b480      	push	{r7}
 8006bfc:	b083      	sub	sp, #12
 8006bfe:	af00      	add	r7, sp, #0
 8006c00:	6078      	str	r0, [r7, #4]
 8006c02:	460b      	mov	r3, r1
 8006c04:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	887a      	ldrh	r2, [r7, #2]
 8006c0c:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8006c0e:	2300      	movs	r3, #0
}
 8006c10:	4618      	mov	r0, r3
 8006c12:	370c      	adds	r7, #12
 8006c14:	46bd      	mov	sp, r7
 8006c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c1a:	4770      	bx	lr

08006c1c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8006c1c:	b480      	push	{r7}
 8006c1e:	b083      	sub	sp, #12
 8006c20:	af00      	add	r7, sp, #0
 8006c22:	6078      	str	r0, [r7, #4]
 8006c24:	460b      	mov	r3, r1
 8006c26:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8006c28:	bf00      	nop
 8006c2a:	370c      	adds	r7, #12
 8006c2c:	46bd      	mov	sp, r7
 8006c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c32:	4770      	bx	lr

08006c34 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006c34:	b580      	push	{r7, lr}
 8006c36:	b086      	sub	sp, #24
 8006c38:	af00      	add	r7, sp, #0
 8006c3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d101      	bne.n	8006c46 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006c42:	2301      	movs	r3, #1
 8006c44:	e30d      	b.n	8007262 <HAL_RCC_OscConfig+0x62e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	2b0f      	cmp	r3, #15
 8006c4c:	d903      	bls.n	8006c56 <HAL_RCC_OscConfig+0x22>
 8006c4e:	21e8      	movs	r1, #232	; 0xe8
 8006c50:	48a3      	ldr	r0, [pc, #652]	; (8006ee0 <HAL_RCC_OscConfig+0x2ac>)
 8006c52:	f7fb fab2 	bl	80021ba <assert_failed>
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	f003 0301 	and.w	r3, r3, #1
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	f000 8088 	beq.w	8006d74 <HAL_RCC_OscConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	685b      	ldr	r3, [r3, #4]
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d00d      	beq.n	8006c88 <HAL_RCC_OscConfig+0x54>
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	685b      	ldr	r3, [r3, #4]
 8006c70:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006c74:	d008      	beq.n	8006c88 <HAL_RCC_OscConfig+0x54>
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	685b      	ldr	r3, [r3, #4]
 8006c7a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006c7e:	d003      	beq.n	8006c88 <HAL_RCC_OscConfig+0x54>
 8006c80:	21ed      	movs	r1, #237	; 0xed
 8006c82:	4897      	ldr	r0, [pc, #604]	; (8006ee0 <HAL_RCC_OscConfig+0x2ac>)
 8006c84:	f7fb fa99 	bl	80021ba <assert_failed>
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006c88:	4b96      	ldr	r3, [pc, #600]	; (8006ee4 <HAL_RCC_OscConfig+0x2b0>)
 8006c8a:	689b      	ldr	r3, [r3, #8]
 8006c8c:	f003 030c 	and.w	r3, r3, #12
 8006c90:	2b04      	cmp	r3, #4
 8006c92:	d00c      	beq.n	8006cae <HAL_RCC_OscConfig+0x7a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006c94:	4b93      	ldr	r3, [pc, #588]	; (8006ee4 <HAL_RCC_OscConfig+0x2b0>)
 8006c96:	689b      	ldr	r3, [r3, #8]
 8006c98:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006c9c:	2b08      	cmp	r3, #8
 8006c9e:	d112      	bne.n	8006cc6 <HAL_RCC_OscConfig+0x92>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006ca0:	4b90      	ldr	r3, [pc, #576]	; (8006ee4 <HAL_RCC_OscConfig+0x2b0>)
 8006ca2:	685b      	ldr	r3, [r3, #4]
 8006ca4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006ca8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006cac:	d10b      	bne.n	8006cc6 <HAL_RCC_OscConfig+0x92>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006cae:	4b8d      	ldr	r3, [pc, #564]	; (8006ee4 <HAL_RCC_OscConfig+0x2b0>)
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d05b      	beq.n	8006d72 <HAL_RCC_OscConfig+0x13e>
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	685b      	ldr	r3, [r3, #4]
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d157      	bne.n	8006d72 <HAL_RCC_OscConfig+0x13e>
      {
        return HAL_ERROR;
 8006cc2:	2301      	movs	r3, #1
 8006cc4:	e2cd      	b.n	8007262 <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	685b      	ldr	r3, [r3, #4]
 8006cca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006cce:	d106      	bne.n	8006cde <HAL_RCC_OscConfig+0xaa>
 8006cd0:	4b84      	ldr	r3, [pc, #528]	; (8006ee4 <HAL_RCC_OscConfig+0x2b0>)
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	4a83      	ldr	r2, [pc, #524]	; (8006ee4 <HAL_RCC_OscConfig+0x2b0>)
 8006cd6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006cda:	6013      	str	r3, [r2, #0]
 8006cdc:	e01d      	b.n	8006d1a <HAL_RCC_OscConfig+0xe6>
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	685b      	ldr	r3, [r3, #4]
 8006ce2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006ce6:	d10c      	bne.n	8006d02 <HAL_RCC_OscConfig+0xce>
 8006ce8:	4b7e      	ldr	r3, [pc, #504]	; (8006ee4 <HAL_RCC_OscConfig+0x2b0>)
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	4a7d      	ldr	r2, [pc, #500]	; (8006ee4 <HAL_RCC_OscConfig+0x2b0>)
 8006cee:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006cf2:	6013      	str	r3, [r2, #0]
 8006cf4:	4b7b      	ldr	r3, [pc, #492]	; (8006ee4 <HAL_RCC_OscConfig+0x2b0>)
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	4a7a      	ldr	r2, [pc, #488]	; (8006ee4 <HAL_RCC_OscConfig+0x2b0>)
 8006cfa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006cfe:	6013      	str	r3, [r2, #0]
 8006d00:	e00b      	b.n	8006d1a <HAL_RCC_OscConfig+0xe6>
 8006d02:	4b78      	ldr	r3, [pc, #480]	; (8006ee4 <HAL_RCC_OscConfig+0x2b0>)
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	4a77      	ldr	r2, [pc, #476]	; (8006ee4 <HAL_RCC_OscConfig+0x2b0>)
 8006d08:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006d0c:	6013      	str	r3, [r2, #0]
 8006d0e:	4b75      	ldr	r3, [pc, #468]	; (8006ee4 <HAL_RCC_OscConfig+0x2b0>)
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	4a74      	ldr	r2, [pc, #464]	; (8006ee4 <HAL_RCC_OscConfig+0x2b0>)
 8006d14:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006d18:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	685b      	ldr	r3, [r3, #4]
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d013      	beq.n	8006d4a <HAL_RCC_OscConfig+0x116>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006d22:	f7fb fd21 	bl	8002768 <HAL_GetTick>
 8006d26:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006d28:	e008      	b.n	8006d3c <HAL_RCC_OscConfig+0x108>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006d2a:	f7fb fd1d 	bl	8002768 <HAL_GetTick>
 8006d2e:	4602      	mov	r2, r0
 8006d30:	693b      	ldr	r3, [r7, #16]
 8006d32:	1ad3      	subs	r3, r2, r3
 8006d34:	2b64      	cmp	r3, #100	; 0x64
 8006d36:	d901      	bls.n	8006d3c <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8006d38:	2303      	movs	r3, #3
 8006d3a:	e292      	b.n	8007262 <HAL_RCC_OscConfig+0x62e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006d3c:	4b69      	ldr	r3, [pc, #420]	; (8006ee4 <HAL_RCC_OscConfig+0x2b0>)
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d0f0      	beq.n	8006d2a <HAL_RCC_OscConfig+0xf6>
 8006d48:	e014      	b.n	8006d74 <HAL_RCC_OscConfig+0x140>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006d4a:	f7fb fd0d 	bl	8002768 <HAL_GetTick>
 8006d4e:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006d50:	e008      	b.n	8006d64 <HAL_RCC_OscConfig+0x130>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006d52:	f7fb fd09 	bl	8002768 <HAL_GetTick>
 8006d56:	4602      	mov	r2, r0
 8006d58:	693b      	ldr	r3, [r7, #16]
 8006d5a:	1ad3      	subs	r3, r2, r3
 8006d5c:	2b64      	cmp	r3, #100	; 0x64
 8006d5e:	d901      	bls.n	8006d64 <HAL_RCC_OscConfig+0x130>
          {
            return HAL_TIMEOUT;
 8006d60:	2303      	movs	r3, #3
 8006d62:	e27e      	b.n	8007262 <HAL_RCC_OscConfig+0x62e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006d64:	4b5f      	ldr	r3, [pc, #380]	; (8006ee4 <HAL_RCC_OscConfig+0x2b0>)
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d1f0      	bne.n	8006d52 <HAL_RCC_OscConfig+0x11e>
 8006d70:	e000      	b.n	8006d74 <HAL_RCC_OscConfig+0x140>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006d72:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	f003 0302 	and.w	r3, r3, #2
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d079      	beq.n	8006e74 <HAL_RCC_OscConfig+0x240>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	68db      	ldr	r3, [r3, #12]
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d008      	beq.n	8006d9a <HAL_RCC_OscConfig+0x166>
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	68db      	ldr	r3, [r3, #12]
 8006d8c:	2b01      	cmp	r3, #1
 8006d8e:	d004      	beq.n	8006d9a <HAL_RCC_OscConfig+0x166>
 8006d90:	f240 111f 	movw	r1, #287	; 0x11f
 8006d94:	4852      	ldr	r0, [pc, #328]	; (8006ee0 <HAL_RCC_OscConfig+0x2ac>)
 8006d96:	f7fb fa10 	bl	80021ba <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	691b      	ldr	r3, [r3, #16]
 8006d9e:	2b1f      	cmp	r3, #31
 8006da0:	d904      	bls.n	8006dac <HAL_RCC_OscConfig+0x178>
 8006da2:	f44f 7190 	mov.w	r1, #288	; 0x120
 8006da6:	484e      	ldr	r0, [pc, #312]	; (8006ee0 <HAL_RCC_OscConfig+0x2ac>)
 8006da8:	f7fb fa07 	bl	80021ba <assert_failed>

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006dac:	4b4d      	ldr	r3, [pc, #308]	; (8006ee4 <HAL_RCC_OscConfig+0x2b0>)
 8006dae:	689b      	ldr	r3, [r3, #8]
 8006db0:	f003 030c 	and.w	r3, r3, #12
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d00b      	beq.n	8006dd0 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006db8:	4b4a      	ldr	r3, [pc, #296]	; (8006ee4 <HAL_RCC_OscConfig+0x2b0>)
 8006dba:	689b      	ldr	r3, [r3, #8]
 8006dbc:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006dc0:	2b08      	cmp	r3, #8
 8006dc2:	d11c      	bne.n	8006dfe <HAL_RCC_OscConfig+0x1ca>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006dc4:	4b47      	ldr	r3, [pc, #284]	; (8006ee4 <HAL_RCC_OscConfig+0x2b0>)
 8006dc6:	685b      	ldr	r3, [r3, #4]
 8006dc8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d116      	bne.n	8006dfe <HAL_RCC_OscConfig+0x1ca>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006dd0:	4b44      	ldr	r3, [pc, #272]	; (8006ee4 <HAL_RCC_OscConfig+0x2b0>)
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	f003 0302 	and.w	r3, r3, #2
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d005      	beq.n	8006de8 <HAL_RCC_OscConfig+0x1b4>
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	68db      	ldr	r3, [r3, #12]
 8006de0:	2b01      	cmp	r3, #1
 8006de2:	d001      	beq.n	8006de8 <HAL_RCC_OscConfig+0x1b4>
      {
        return HAL_ERROR;
 8006de4:	2301      	movs	r3, #1
 8006de6:	e23c      	b.n	8007262 <HAL_RCC_OscConfig+0x62e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006de8:	4b3e      	ldr	r3, [pc, #248]	; (8006ee4 <HAL_RCC_OscConfig+0x2b0>)
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	691b      	ldr	r3, [r3, #16]
 8006df4:	00db      	lsls	r3, r3, #3
 8006df6:	493b      	ldr	r1, [pc, #236]	; (8006ee4 <HAL_RCC_OscConfig+0x2b0>)
 8006df8:	4313      	orrs	r3, r2
 8006dfa:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006dfc:	e03a      	b.n	8006e74 <HAL_RCC_OscConfig+0x240>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	68db      	ldr	r3, [r3, #12]
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d020      	beq.n	8006e48 <HAL_RCC_OscConfig+0x214>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006e06:	4b38      	ldr	r3, [pc, #224]	; (8006ee8 <HAL_RCC_OscConfig+0x2b4>)
 8006e08:	2201      	movs	r2, #1
 8006e0a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006e0c:	f7fb fcac 	bl	8002768 <HAL_GetTick>
 8006e10:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006e12:	e008      	b.n	8006e26 <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006e14:	f7fb fca8 	bl	8002768 <HAL_GetTick>
 8006e18:	4602      	mov	r2, r0
 8006e1a:	693b      	ldr	r3, [r7, #16]
 8006e1c:	1ad3      	subs	r3, r2, r3
 8006e1e:	2b02      	cmp	r3, #2
 8006e20:	d901      	bls.n	8006e26 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8006e22:	2303      	movs	r3, #3
 8006e24:	e21d      	b.n	8007262 <HAL_RCC_OscConfig+0x62e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006e26:	4b2f      	ldr	r3, [pc, #188]	; (8006ee4 <HAL_RCC_OscConfig+0x2b0>)
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	f003 0302 	and.w	r3, r3, #2
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d0f0      	beq.n	8006e14 <HAL_RCC_OscConfig+0x1e0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006e32:	4b2c      	ldr	r3, [pc, #176]	; (8006ee4 <HAL_RCC_OscConfig+0x2b0>)
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	691b      	ldr	r3, [r3, #16]
 8006e3e:	00db      	lsls	r3, r3, #3
 8006e40:	4928      	ldr	r1, [pc, #160]	; (8006ee4 <HAL_RCC_OscConfig+0x2b0>)
 8006e42:	4313      	orrs	r3, r2
 8006e44:	600b      	str	r3, [r1, #0]
 8006e46:	e015      	b.n	8006e74 <HAL_RCC_OscConfig+0x240>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006e48:	4b27      	ldr	r3, [pc, #156]	; (8006ee8 <HAL_RCC_OscConfig+0x2b4>)
 8006e4a:	2200      	movs	r2, #0
 8006e4c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006e4e:	f7fb fc8b 	bl	8002768 <HAL_GetTick>
 8006e52:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006e54:	e008      	b.n	8006e68 <HAL_RCC_OscConfig+0x234>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006e56:	f7fb fc87 	bl	8002768 <HAL_GetTick>
 8006e5a:	4602      	mov	r2, r0
 8006e5c:	693b      	ldr	r3, [r7, #16]
 8006e5e:	1ad3      	subs	r3, r2, r3
 8006e60:	2b02      	cmp	r3, #2
 8006e62:	d901      	bls.n	8006e68 <HAL_RCC_OscConfig+0x234>
          {
            return HAL_TIMEOUT;
 8006e64:	2303      	movs	r3, #3
 8006e66:	e1fc      	b.n	8007262 <HAL_RCC_OscConfig+0x62e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006e68:	4b1e      	ldr	r3, [pc, #120]	; (8006ee4 <HAL_RCC_OscConfig+0x2b0>)
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	f003 0302 	and.w	r3, r3, #2
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d1f0      	bne.n	8006e56 <HAL_RCC_OscConfig+0x222>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	f003 0308 	and.w	r3, r3, #8
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d046      	beq.n	8006f0e <HAL_RCC_OscConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	695b      	ldr	r3, [r3, #20]
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d008      	beq.n	8006e9a <HAL_RCC_OscConfig+0x266>
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	695b      	ldr	r3, [r3, #20]
 8006e8c:	2b01      	cmp	r3, #1
 8006e8e:	d004      	beq.n	8006e9a <HAL_RCC_OscConfig+0x266>
 8006e90:	f44f 71b0 	mov.w	r1, #352	; 0x160
 8006e94:	4812      	ldr	r0, [pc, #72]	; (8006ee0 <HAL_RCC_OscConfig+0x2ac>)
 8006e96:	f7fb f990 	bl	80021ba <assert_failed>

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	695b      	ldr	r3, [r3, #20]
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d016      	beq.n	8006ed0 <HAL_RCC_OscConfig+0x29c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006ea2:	4b12      	ldr	r3, [pc, #72]	; (8006eec <HAL_RCC_OscConfig+0x2b8>)
 8006ea4:	2201      	movs	r2, #1
 8006ea6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006ea8:	f7fb fc5e 	bl	8002768 <HAL_GetTick>
 8006eac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006eae:	e008      	b.n	8006ec2 <HAL_RCC_OscConfig+0x28e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006eb0:	f7fb fc5a 	bl	8002768 <HAL_GetTick>
 8006eb4:	4602      	mov	r2, r0
 8006eb6:	693b      	ldr	r3, [r7, #16]
 8006eb8:	1ad3      	subs	r3, r2, r3
 8006eba:	2b02      	cmp	r3, #2
 8006ebc:	d901      	bls.n	8006ec2 <HAL_RCC_OscConfig+0x28e>
        {
          return HAL_TIMEOUT;
 8006ebe:	2303      	movs	r3, #3
 8006ec0:	e1cf      	b.n	8007262 <HAL_RCC_OscConfig+0x62e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006ec2:	4b08      	ldr	r3, [pc, #32]	; (8006ee4 <HAL_RCC_OscConfig+0x2b0>)
 8006ec4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006ec6:	f003 0302 	and.w	r3, r3, #2
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d0f0      	beq.n	8006eb0 <HAL_RCC_OscConfig+0x27c>
 8006ece:	e01e      	b.n	8006f0e <HAL_RCC_OscConfig+0x2da>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006ed0:	4b06      	ldr	r3, [pc, #24]	; (8006eec <HAL_RCC_OscConfig+0x2b8>)
 8006ed2:	2200      	movs	r2, #0
 8006ed4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006ed6:	f7fb fc47 	bl	8002768 <HAL_GetTick>
 8006eda:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006edc:	e011      	b.n	8006f02 <HAL_RCC_OscConfig+0x2ce>
 8006ede:	bf00      	nop
 8006ee0:	0800fb58 	.word	0x0800fb58
 8006ee4:	40023800 	.word	0x40023800
 8006ee8:	42470000 	.word	0x42470000
 8006eec:	42470e80 	.word	0x42470e80
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006ef0:	f7fb fc3a 	bl	8002768 <HAL_GetTick>
 8006ef4:	4602      	mov	r2, r0
 8006ef6:	693b      	ldr	r3, [r7, #16]
 8006ef8:	1ad3      	subs	r3, r2, r3
 8006efa:	2b02      	cmp	r3, #2
 8006efc:	d901      	bls.n	8006f02 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8006efe:	2303      	movs	r3, #3
 8006f00:	e1af      	b.n	8007262 <HAL_RCC_OscConfig+0x62e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006f02:	4b97      	ldr	r3, [pc, #604]	; (8007160 <HAL_RCC_OscConfig+0x52c>)
 8006f04:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006f06:	f003 0302 	and.w	r3, r3, #2
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d1f0      	bne.n	8006ef0 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	f003 0304 	and.w	r3, r3, #4
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	f000 80a8 	beq.w	800706c <HAL_RCC_OscConfig+0x438>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006f1c:	2300      	movs	r3, #0
 8006f1e:	75fb      	strb	r3, [r7, #23]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	689b      	ldr	r3, [r3, #8]
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d00c      	beq.n	8006f42 <HAL_RCC_OscConfig+0x30e>
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	689b      	ldr	r3, [r3, #8]
 8006f2c:	2b01      	cmp	r3, #1
 8006f2e:	d008      	beq.n	8006f42 <HAL_RCC_OscConfig+0x30e>
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	689b      	ldr	r3, [r3, #8]
 8006f34:	2b05      	cmp	r3, #5
 8006f36:	d004      	beq.n	8006f42 <HAL_RCC_OscConfig+0x30e>
 8006f38:	f44f 71c6 	mov.w	r1, #396	; 0x18c
 8006f3c:	4889      	ldr	r0, [pc, #548]	; (8007164 <HAL_RCC_OscConfig+0x530>)
 8006f3e:	f7fb f93c 	bl	80021ba <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006f42:	4b87      	ldr	r3, [pc, #540]	; (8007160 <HAL_RCC_OscConfig+0x52c>)
 8006f44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d10f      	bne.n	8006f6e <HAL_RCC_OscConfig+0x33a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006f4e:	2300      	movs	r3, #0
 8006f50:	60bb      	str	r3, [r7, #8]
 8006f52:	4b83      	ldr	r3, [pc, #524]	; (8007160 <HAL_RCC_OscConfig+0x52c>)
 8006f54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f56:	4a82      	ldr	r2, [pc, #520]	; (8007160 <HAL_RCC_OscConfig+0x52c>)
 8006f58:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006f5c:	6413      	str	r3, [r2, #64]	; 0x40
 8006f5e:	4b80      	ldr	r3, [pc, #512]	; (8007160 <HAL_RCC_OscConfig+0x52c>)
 8006f60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006f66:	60bb      	str	r3, [r7, #8]
 8006f68:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006f6a:	2301      	movs	r3, #1
 8006f6c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006f6e:	4b7e      	ldr	r3, [pc, #504]	; (8007168 <HAL_RCC_OscConfig+0x534>)
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d118      	bne.n	8006fac <HAL_RCC_OscConfig+0x378>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006f7a:	4b7b      	ldr	r3, [pc, #492]	; (8007168 <HAL_RCC_OscConfig+0x534>)
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	4a7a      	ldr	r2, [pc, #488]	; (8007168 <HAL_RCC_OscConfig+0x534>)
 8006f80:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006f84:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006f86:	f7fb fbef 	bl	8002768 <HAL_GetTick>
 8006f8a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006f8c:	e008      	b.n	8006fa0 <HAL_RCC_OscConfig+0x36c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006f8e:	f7fb fbeb 	bl	8002768 <HAL_GetTick>
 8006f92:	4602      	mov	r2, r0
 8006f94:	693b      	ldr	r3, [r7, #16]
 8006f96:	1ad3      	subs	r3, r2, r3
 8006f98:	2b02      	cmp	r3, #2
 8006f9a:	d901      	bls.n	8006fa0 <HAL_RCC_OscConfig+0x36c>
        {
          return HAL_TIMEOUT;
 8006f9c:	2303      	movs	r3, #3
 8006f9e:	e160      	b.n	8007262 <HAL_RCC_OscConfig+0x62e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006fa0:	4b71      	ldr	r3, [pc, #452]	; (8007168 <HAL_RCC_OscConfig+0x534>)
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d0f0      	beq.n	8006f8e <HAL_RCC_OscConfig+0x35a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	689b      	ldr	r3, [r3, #8]
 8006fb0:	2b01      	cmp	r3, #1
 8006fb2:	d106      	bne.n	8006fc2 <HAL_RCC_OscConfig+0x38e>
 8006fb4:	4b6a      	ldr	r3, [pc, #424]	; (8007160 <HAL_RCC_OscConfig+0x52c>)
 8006fb6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006fb8:	4a69      	ldr	r2, [pc, #420]	; (8007160 <HAL_RCC_OscConfig+0x52c>)
 8006fba:	f043 0301 	orr.w	r3, r3, #1
 8006fbe:	6713      	str	r3, [r2, #112]	; 0x70
 8006fc0:	e01c      	b.n	8006ffc <HAL_RCC_OscConfig+0x3c8>
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	689b      	ldr	r3, [r3, #8]
 8006fc6:	2b05      	cmp	r3, #5
 8006fc8:	d10c      	bne.n	8006fe4 <HAL_RCC_OscConfig+0x3b0>
 8006fca:	4b65      	ldr	r3, [pc, #404]	; (8007160 <HAL_RCC_OscConfig+0x52c>)
 8006fcc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006fce:	4a64      	ldr	r2, [pc, #400]	; (8007160 <HAL_RCC_OscConfig+0x52c>)
 8006fd0:	f043 0304 	orr.w	r3, r3, #4
 8006fd4:	6713      	str	r3, [r2, #112]	; 0x70
 8006fd6:	4b62      	ldr	r3, [pc, #392]	; (8007160 <HAL_RCC_OscConfig+0x52c>)
 8006fd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006fda:	4a61      	ldr	r2, [pc, #388]	; (8007160 <HAL_RCC_OscConfig+0x52c>)
 8006fdc:	f043 0301 	orr.w	r3, r3, #1
 8006fe0:	6713      	str	r3, [r2, #112]	; 0x70
 8006fe2:	e00b      	b.n	8006ffc <HAL_RCC_OscConfig+0x3c8>
 8006fe4:	4b5e      	ldr	r3, [pc, #376]	; (8007160 <HAL_RCC_OscConfig+0x52c>)
 8006fe6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006fe8:	4a5d      	ldr	r2, [pc, #372]	; (8007160 <HAL_RCC_OscConfig+0x52c>)
 8006fea:	f023 0301 	bic.w	r3, r3, #1
 8006fee:	6713      	str	r3, [r2, #112]	; 0x70
 8006ff0:	4b5b      	ldr	r3, [pc, #364]	; (8007160 <HAL_RCC_OscConfig+0x52c>)
 8006ff2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ff4:	4a5a      	ldr	r2, [pc, #360]	; (8007160 <HAL_RCC_OscConfig+0x52c>)
 8006ff6:	f023 0304 	bic.w	r3, r3, #4
 8006ffa:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	689b      	ldr	r3, [r3, #8]
 8007000:	2b00      	cmp	r3, #0
 8007002:	d015      	beq.n	8007030 <HAL_RCC_OscConfig+0x3fc>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007004:	f7fb fbb0 	bl	8002768 <HAL_GetTick>
 8007008:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800700a:	e00a      	b.n	8007022 <HAL_RCC_OscConfig+0x3ee>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800700c:	f7fb fbac 	bl	8002768 <HAL_GetTick>
 8007010:	4602      	mov	r2, r0
 8007012:	693b      	ldr	r3, [r7, #16]
 8007014:	1ad3      	subs	r3, r2, r3
 8007016:	f241 3288 	movw	r2, #5000	; 0x1388
 800701a:	4293      	cmp	r3, r2
 800701c:	d901      	bls.n	8007022 <HAL_RCC_OscConfig+0x3ee>
        {
          return HAL_TIMEOUT;
 800701e:	2303      	movs	r3, #3
 8007020:	e11f      	b.n	8007262 <HAL_RCC_OscConfig+0x62e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007022:	4b4f      	ldr	r3, [pc, #316]	; (8007160 <HAL_RCC_OscConfig+0x52c>)
 8007024:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007026:	f003 0302 	and.w	r3, r3, #2
 800702a:	2b00      	cmp	r3, #0
 800702c:	d0ee      	beq.n	800700c <HAL_RCC_OscConfig+0x3d8>
 800702e:	e014      	b.n	800705a <HAL_RCC_OscConfig+0x426>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007030:	f7fb fb9a 	bl	8002768 <HAL_GetTick>
 8007034:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007036:	e00a      	b.n	800704e <HAL_RCC_OscConfig+0x41a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007038:	f7fb fb96 	bl	8002768 <HAL_GetTick>
 800703c:	4602      	mov	r2, r0
 800703e:	693b      	ldr	r3, [r7, #16]
 8007040:	1ad3      	subs	r3, r2, r3
 8007042:	f241 3288 	movw	r2, #5000	; 0x1388
 8007046:	4293      	cmp	r3, r2
 8007048:	d901      	bls.n	800704e <HAL_RCC_OscConfig+0x41a>
        {
          return HAL_TIMEOUT;
 800704a:	2303      	movs	r3, #3
 800704c:	e109      	b.n	8007262 <HAL_RCC_OscConfig+0x62e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800704e:	4b44      	ldr	r3, [pc, #272]	; (8007160 <HAL_RCC_OscConfig+0x52c>)
 8007050:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007052:	f003 0302 	and.w	r3, r3, #2
 8007056:	2b00      	cmp	r3, #0
 8007058:	d1ee      	bne.n	8007038 <HAL_RCC_OscConfig+0x404>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800705a:	7dfb      	ldrb	r3, [r7, #23]
 800705c:	2b01      	cmp	r3, #1
 800705e:	d105      	bne.n	800706c <HAL_RCC_OscConfig+0x438>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007060:	4b3f      	ldr	r3, [pc, #252]	; (8007160 <HAL_RCC_OscConfig+0x52c>)
 8007062:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007064:	4a3e      	ldr	r2, [pc, #248]	; (8007160 <HAL_RCC_OscConfig+0x52c>)
 8007066:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800706a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	699b      	ldr	r3, [r3, #24]
 8007070:	2b00      	cmp	r3, #0
 8007072:	d00c      	beq.n	800708e <HAL_RCC_OscConfig+0x45a>
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	699b      	ldr	r3, [r3, #24]
 8007078:	2b01      	cmp	r3, #1
 800707a:	d008      	beq.n	800708e <HAL_RCC_OscConfig+0x45a>
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	699b      	ldr	r3, [r3, #24]
 8007080:	2b02      	cmp	r3, #2
 8007082:	d004      	beq.n	800708e <HAL_RCC_OscConfig+0x45a>
 8007084:	f240 11cf 	movw	r1, #463	; 0x1cf
 8007088:	4836      	ldr	r0, [pc, #216]	; (8007164 <HAL_RCC_OscConfig+0x530>)
 800708a:	f7fb f896 	bl	80021ba <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	699b      	ldr	r3, [r3, #24]
 8007092:	2b00      	cmp	r3, #0
 8007094:	f000 80e4 	beq.w	8007260 <HAL_RCC_OscConfig+0x62c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007098:	4b31      	ldr	r3, [pc, #196]	; (8007160 <HAL_RCC_OscConfig+0x52c>)
 800709a:	689b      	ldr	r3, [r3, #8]
 800709c:	f003 030c 	and.w	r3, r3, #12
 80070a0:	2b08      	cmp	r3, #8
 80070a2:	f000 80ae 	beq.w	8007202 <HAL_RCC_OscConfig+0x5ce>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	699b      	ldr	r3, [r3, #24]
 80070aa:	2b02      	cmp	r3, #2
 80070ac:	f040 8092 	bne.w	80071d4 <HAL_RCC_OscConfig+0x5a0>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	69db      	ldr	r3, [r3, #28]
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d009      	beq.n	80070cc <HAL_RCC_OscConfig+0x498>
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	69db      	ldr	r3, [r3, #28]
 80070bc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80070c0:	d004      	beq.n	80070cc <HAL_RCC_OscConfig+0x498>
 80070c2:	f44f 71ec 	mov.w	r1, #472	; 0x1d8
 80070c6:	4827      	ldr	r0, [pc, #156]	; (8007164 <HAL_RCC_OscConfig+0x530>)
 80070c8:	f7fb f877 	bl	80021ba <assert_failed>
        assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	6a1b      	ldr	r3, [r3, #32]
 80070d0:	2b3f      	cmp	r3, #63	; 0x3f
 80070d2:	d904      	bls.n	80070de <HAL_RCC_OscConfig+0x4aa>
 80070d4:	f240 11d9 	movw	r1, #473	; 0x1d9
 80070d8:	4822      	ldr	r0, [pc, #136]	; (8007164 <HAL_RCC_OscConfig+0x530>)
 80070da:	f7fb f86e 	bl	80021ba <assert_failed>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070e2:	2bbf      	cmp	r3, #191	; 0xbf
 80070e4:	d904      	bls.n	80070f0 <HAL_RCC_OscConfig+0x4bc>
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070ea:	f5b3 7fd8 	cmp.w	r3, #432	; 0x1b0
 80070ee:	d904      	bls.n	80070fa <HAL_RCC_OscConfig+0x4c6>
 80070f0:	f44f 71ed 	mov.w	r1, #474	; 0x1da
 80070f4:	481b      	ldr	r0, [pc, #108]	; (8007164 <HAL_RCC_OscConfig+0x530>)
 80070f6:	f7fb f860 	bl	80021ba <assert_failed>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070fe:	2b02      	cmp	r3, #2
 8007100:	d010      	beq.n	8007124 <HAL_RCC_OscConfig+0x4f0>
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007106:	2b04      	cmp	r3, #4
 8007108:	d00c      	beq.n	8007124 <HAL_RCC_OscConfig+0x4f0>
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800710e:	2b06      	cmp	r3, #6
 8007110:	d008      	beq.n	8007124 <HAL_RCC_OscConfig+0x4f0>
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007116:	2b08      	cmp	r3, #8
 8007118:	d004      	beq.n	8007124 <HAL_RCC_OscConfig+0x4f0>
 800711a:	f240 11db 	movw	r1, #475	; 0x1db
 800711e:	4811      	ldr	r0, [pc, #68]	; (8007164 <HAL_RCC_OscConfig+0x530>)
 8007120:	f7fb f84b 	bl	80021ba <assert_failed>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007128:	2b01      	cmp	r3, #1
 800712a:	d903      	bls.n	8007134 <HAL_RCC_OscConfig+0x500>
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007130:	2b0f      	cmp	r3, #15
 8007132:	d904      	bls.n	800713e <HAL_RCC_OscConfig+0x50a>
 8007134:	f44f 71ee 	mov.w	r1, #476	; 0x1dc
 8007138:	480a      	ldr	r0, [pc, #40]	; (8007164 <HAL_RCC_OscConfig+0x530>)
 800713a:	f7fb f83e 	bl	80021ba <assert_failed>

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800713e:	4b0b      	ldr	r3, [pc, #44]	; (800716c <HAL_RCC_OscConfig+0x538>)
 8007140:	2200      	movs	r2, #0
 8007142:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007144:	f7fb fb10 	bl	8002768 <HAL_GetTick>
 8007148:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800714a:	e011      	b.n	8007170 <HAL_RCC_OscConfig+0x53c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800714c:	f7fb fb0c 	bl	8002768 <HAL_GetTick>
 8007150:	4602      	mov	r2, r0
 8007152:	693b      	ldr	r3, [r7, #16]
 8007154:	1ad3      	subs	r3, r2, r3
 8007156:	2b02      	cmp	r3, #2
 8007158:	d90a      	bls.n	8007170 <HAL_RCC_OscConfig+0x53c>
          {
            return HAL_TIMEOUT;
 800715a:	2303      	movs	r3, #3
 800715c:	e081      	b.n	8007262 <HAL_RCC_OscConfig+0x62e>
 800715e:	bf00      	nop
 8007160:	40023800 	.word	0x40023800
 8007164:	0800fb58 	.word	0x0800fb58
 8007168:	40007000 	.word	0x40007000
 800716c:	42470060 	.word	0x42470060
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007170:	4b3e      	ldr	r3, [pc, #248]	; (800726c <HAL_RCC_OscConfig+0x638>)
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007178:	2b00      	cmp	r3, #0
 800717a:	d1e7      	bne.n	800714c <HAL_RCC_OscConfig+0x518>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	69da      	ldr	r2, [r3, #28]
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	6a1b      	ldr	r3, [r3, #32]
 8007184:	431a      	orrs	r2, r3
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800718a:	019b      	lsls	r3, r3, #6
 800718c:	431a      	orrs	r2, r3
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007192:	085b      	lsrs	r3, r3, #1
 8007194:	3b01      	subs	r3, #1
 8007196:	041b      	lsls	r3, r3, #16
 8007198:	431a      	orrs	r2, r3
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800719e:	061b      	lsls	r3, r3, #24
 80071a0:	4932      	ldr	r1, [pc, #200]	; (800726c <HAL_RCC_OscConfig+0x638>)
 80071a2:	4313      	orrs	r3, r2
 80071a4:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80071a6:	4b32      	ldr	r3, [pc, #200]	; (8007270 <HAL_RCC_OscConfig+0x63c>)
 80071a8:	2201      	movs	r2, #1
 80071aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80071ac:	f7fb fadc 	bl	8002768 <HAL_GetTick>
 80071b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80071b2:	e008      	b.n	80071c6 <HAL_RCC_OscConfig+0x592>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80071b4:	f7fb fad8 	bl	8002768 <HAL_GetTick>
 80071b8:	4602      	mov	r2, r0
 80071ba:	693b      	ldr	r3, [r7, #16]
 80071bc:	1ad3      	subs	r3, r2, r3
 80071be:	2b02      	cmp	r3, #2
 80071c0:	d901      	bls.n	80071c6 <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 80071c2:	2303      	movs	r3, #3
 80071c4:	e04d      	b.n	8007262 <HAL_RCC_OscConfig+0x62e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80071c6:	4b29      	ldr	r3, [pc, #164]	; (800726c <HAL_RCC_OscConfig+0x638>)
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d0f0      	beq.n	80071b4 <HAL_RCC_OscConfig+0x580>
 80071d2:	e045      	b.n	8007260 <HAL_RCC_OscConfig+0x62c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80071d4:	4b26      	ldr	r3, [pc, #152]	; (8007270 <HAL_RCC_OscConfig+0x63c>)
 80071d6:	2200      	movs	r2, #0
 80071d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80071da:	f7fb fac5 	bl	8002768 <HAL_GetTick>
 80071de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80071e0:	e008      	b.n	80071f4 <HAL_RCC_OscConfig+0x5c0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80071e2:	f7fb fac1 	bl	8002768 <HAL_GetTick>
 80071e6:	4602      	mov	r2, r0
 80071e8:	693b      	ldr	r3, [r7, #16]
 80071ea:	1ad3      	subs	r3, r2, r3
 80071ec:	2b02      	cmp	r3, #2
 80071ee:	d901      	bls.n	80071f4 <HAL_RCC_OscConfig+0x5c0>
          {
            return HAL_TIMEOUT;
 80071f0:	2303      	movs	r3, #3
 80071f2:	e036      	b.n	8007262 <HAL_RCC_OscConfig+0x62e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80071f4:	4b1d      	ldr	r3, [pc, #116]	; (800726c <HAL_RCC_OscConfig+0x638>)
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	d1f0      	bne.n	80071e2 <HAL_RCC_OscConfig+0x5ae>
 8007200:	e02e      	b.n	8007260 <HAL_RCC_OscConfig+0x62c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	699b      	ldr	r3, [r3, #24]
 8007206:	2b01      	cmp	r3, #1
 8007208:	d101      	bne.n	800720e <HAL_RCC_OscConfig+0x5da>
      {
        return HAL_ERROR;
 800720a:	2301      	movs	r3, #1
 800720c:	e029      	b.n	8007262 <HAL_RCC_OscConfig+0x62e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800720e:	4b17      	ldr	r3, [pc, #92]	; (800726c <HAL_RCC_OscConfig+0x638>)
 8007210:	685b      	ldr	r3, [r3, #4]
 8007212:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	69db      	ldr	r3, [r3, #28]
 800721e:	429a      	cmp	r2, r3
 8007220:	d11c      	bne.n	800725c <HAL_RCC_OscConfig+0x628>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800722c:	429a      	cmp	r2, r3
 800722e:	d115      	bne.n	800725c <HAL_RCC_OscConfig+0x628>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8007230:	68fa      	ldr	r2, [r7, #12]
 8007232:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8007236:	4013      	ands	r3, r2
 8007238:	687a      	ldr	r2, [r7, #4]
 800723a:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800723c:	4293      	cmp	r3, r2
 800723e:	d10d      	bne.n	800725c <HAL_RCC_OscConfig+0x628>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800724a:	429a      	cmp	r2, r3
 800724c:	d106      	bne.n	800725c <HAL_RCC_OscConfig+0x628>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8007258:	429a      	cmp	r2, r3
 800725a:	d001      	beq.n	8007260 <HAL_RCC_OscConfig+0x62c>
        {
          return HAL_ERROR;
 800725c:	2301      	movs	r3, #1
 800725e:	e000      	b.n	8007262 <HAL_RCC_OscConfig+0x62e>
        }
      }
    }
  }
  return HAL_OK;
 8007260:	2300      	movs	r3, #0
}
 8007262:	4618      	mov	r0, r3
 8007264:	3718      	adds	r7, #24
 8007266:	46bd      	mov	sp, r7
 8007268:	bd80      	pop	{r7, pc}
 800726a:	bf00      	nop
 800726c:	40023800 	.word	0x40023800
 8007270:	42470060 	.word	0x42470060

08007274 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007274:	b580      	push	{r7, lr}
 8007276:	b084      	sub	sp, #16
 8007278:	af00      	add	r7, sp, #0
 800727a:	6078      	str	r0, [r7, #4]
 800727c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	2b00      	cmp	r3, #0
 8007282:	d101      	bne.n	8007288 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007284:	2301      	movs	r3, #1
 8007286:	e174      	b.n	8007572 <HAL_RCC_ClockConfig+0x2fe>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	2b00      	cmp	r3, #0
 800728e:	d003      	beq.n	8007298 <HAL_RCC_ClockConfig+0x24>
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	2b0f      	cmp	r3, #15
 8007296:	d904      	bls.n	80072a2 <HAL_RCC_ClockConfig+0x2e>
 8007298:	f240 2151 	movw	r1, #593	; 0x251
 800729c:	487b      	ldr	r0, [pc, #492]	; (800748c <HAL_RCC_ClockConfig+0x218>)
 800729e:	f7fa ff8c 	bl	80021ba <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 80072a2:	683b      	ldr	r3, [r7, #0]
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d019      	beq.n	80072dc <HAL_RCC_ClockConfig+0x68>
 80072a8:	683b      	ldr	r3, [r7, #0]
 80072aa:	2b01      	cmp	r3, #1
 80072ac:	d016      	beq.n	80072dc <HAL_RCC_ClockConfig+0x68>
 80072ae:	683b      	ldr	r3, [r7, #0]
 80072b0:	2b02      	cmp	r3, #2
 80072b2:	d013      	beq.n	80072dc <HAL_RCC_ClockConfig+0x68>
 80072b4:	683b      	ldr	r3, [r7, #0]
 80072b6:	2b03      	cmp	r3, #3
 80072b8:	d010      	beq.n	80072dc <HAL_RCC_ClockConfig+0x68>
 80072ba:	683b      	ldr	r3, [r7, #0]
 80072bc:	2b04      	cmp	r3, #4
 80072be:	d00d      	beq.n	80072dc <HAL_RCC_ClockConfig+0x68>
 80072c0:	683b      	ldr	r3, [r7, #0]
 80072c2:	2b05      	cmp	r3, #5
 80072c4:	d00a      	beq.n	80072dc <HAL_RCC_ClockConfig+0x68>
 80072c6:	683b      	ldr	r3, [r7, #0]
 80072c8:	2b06      	cmp	r3, #6
 80072ca:	d007      	beq.n	80072dc <HAL_RCC_ClockConfig+0x68>
 80072cc:	683b      	ldr	r3, [r7, #0]
 80072ce:	2b07      	cmp	r3, #7
 80072d0:	d004      	beq.n	80072dc <HAL_RCC_ClockConfig+0x68>
 80072d2:	f240 2152 	movw	r1, #594	; 0x252
 80072d6:	486d      	ldr	r0, [pc, #436]	; (800748c <HAL_RCC_ClockConfig+0x218>)
 80072d8:	f7fa ff6f 	bl	80021ba <assert_failed>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80072dc:	4b6c      	ldr	r3, [pc, #432]	; (8007490 <HAL_RCC_ClockConfig+0x21c>)
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	f003 030f 	and.w	r3, r3, #15
 80072e4:	683a      	ldr	r2, [r7, #0]
 80072e6:	429a      	cmp	r2, r3
 80072e8:	d90c      	bls.n	8007304 <HAL_RCC_ClockConfig+0x90>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80072ea:	4b69      	ldr	r3, [pc, #420]	; (8007490 <HAL_RCC_ClockConfig+0x21c>)
 80072ec:	683a      	ldr	r2, [r7, #0]
 80072ee:	b2d2      	uxtb	r2, r2
 80072f0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80072f2:	4b67      	ldr	r3, [pc, #412]	; (8007490 <HAL_RCC_ClockConfig+0x21c>)
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	f003 030f 	and.w	r3, r3, #15
 80072fa:	683a      	ldr	r2, [r7, #0]
 80072fc:	429a      	cmp	r2, r3
 80072fe:	d001      	beq.n	8007304 <HAL_RCC_ClockConfig+0x90>
    {
      return HAL_ERROR;
 8007300:	2301      	movs	r3, #1
 8007302:	e136      	b.n	8007572 <HAL_RCC_ClockConfig+0x2fe>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	f003 0302 	and.w	r3, r3, #2
 800730c:	2b00      	cmp	r3, #0
 800730e:	d049      	beq.n	80073a4 <HAL_RCC_ClockConfig+0x130>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	f003 0304 	and.w	r3, r3, #4
 8007318:	2b00      	cmp	r3, #0
 800731a:	d005      	beq.n	8007328 <HAL_RCC_ClockConfig+0xb4>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800731c:	4b5d      	ldr	r3, [pc, #372]	; (8007494 <HAL_RCC_ClockConfig+0x220>)
 800731e:	689b      	ldr	r3, [r3, #8]
 8007320:	4a5c      	ldr	r2, [pc, #368]	; (8007494 <HAL_RCC_ClockConfig+0x220>)
 8007322:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8007326:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	f003 0308 	and.w	r3, r3, #8
 8007330:	2b00      	cmp	r3, #0
 8007332:	d005      	beq.n	8007340 <HAL_RCC_ClockConfig+0xcc>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007334:	4b57      	ldr	r3, [pc, #348]	; (8007494 <HAL_RCC_ClockConfig+0x220>)
 8007336:	689b      	ldr	r3, [r3, #8]
 8007338:	4a56      	ldr	r2, [pc, #344]	; (8007494 <HAL_RCC_ClockConfig+0x220>)
 800733a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800733e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	689b      	ldr	r3, [r3, #8]
 8007344:	2b00      	cmp	r3, #0
 8007346:	d024      	beq.n	8007392 <HAL_RCC_ClockConfig+0x11e>
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	689b      	ldr	r3, [r3, #8]
 800734c:	2b80      	cmp	r3, #128	; 0x80
 800734e:	d020      	beq.n	8007392 <HAL_RCC_ClockConfig+0x11e>
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	689b      	ldr	r3, [r3, #8]
 8007354:	2b90      	cmp	r3, #144	; 0x90
 8007356:	d01c      	beq.n	8007392 <HAL_RCC_ClockConfig+0x11e>
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	689b      	ldr	r3, [r3, #8]
 800735c:	2ba0      	cmp	r3, #160	; 0xa0
 800735e:	d018      	beq.n	8007392 <HAL_RCC_ClockConfig+0x11e>
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	689b      	ldr	r3, [r3, #8]
 8007364:	2bb0      	cmp	r3, #176	; 0xb0
 8007366:	d014      	beq.n	8007392 <HAL_RCC_ClockConfig+0x11e>
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	689b      	ldr	r3, [r3, #8]
 800736c:	2bc0      	cmp	r3, #192	; 0xc0
 800736e:	d010      	beq.n	8007392 <HAL_RCC_ClockConfig+0x11e>
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	689b      	ldr	r3, [r3, #8]
 8007374:	2bd0      	cmp	r3, #208	; 0xd0
 8007376:	d00c      	beq.n	8007392 <HAL_RCC_ClockConfig+0x11e>
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	689b      	ldr	r3, [r3, #8]
 800737c:	2be0      	cmp	r3, #224	; 0xe0
 800737e:	d008      	beq.n	8007392 <HAL_RCC_ClockConfig+0x11e>
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	689b      	ldr	r3, [r3, #8]
 8007384:	2bf0      	cmp	r3, #240	; 0xf0
 8007386:	d004      	beq.n	8007392 <HAL_RCC_ClockConfig+0x11e>
 8007388:	f240 2175 	movw	r1, #629	; 0x275
 800738c:	483f      	ldr	r0, [pc, #252]	; (800748c <HAL_RCC_ClockConfig+0x218>)
 800738e:	f7fa ff14 	bl	80021ba <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007392:	4b40      	ldr	r3, [pc, #256]	; (8007494 <HAL_RCC_ClockConfig+0x220>)
 8007394:	689b      	ldr	r3, [r3, #8]
 8007396:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	689b      	ldr	r3, [r3, #8]
 800739e:	493d      	ldr	r1, [pc, #244]	; (8007494 <HAL_RCC_ClockConfig+0x220>)
 80073a0:	4313      	orrs	r3, r2
 80073a2:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	f003 0301 	and.w	r3, r3, #1
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d059      	beq.n	8007464 <HAL_RCC_ClockConfig+0x1f0>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	685b      	ldr	r3, [r3, #4]
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	d010      	beq.n	80073da <HAL_RCC_ClockConfig+0x166>
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	685b      	ldr	r3, [r3, #4]
 80073bc:	2b01      	cmp	r3, #1
 80073be:	d00c      	beq.n	80073da <HAL_RCC_ClockConfig+0x166>
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	685b      	ldr	r3, [r3, #4]
 80073c4:	2b02      	cmp	r3, #2
 80073c6:	d008      	beq.n	80073da <HAL_RCC_ClockConfig+0x166>
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	685b      	ldr	r3, [r3, #4]
 80073cc:	2b03      	cmp	r3, #3
 80073ce:	d004      	beq.n	80073da <HAL_RCC_ClockConfig+0x166>
 80073d0:	f44f 711f 	mov.w	r1, #636	; 0x27c
 80073d4:	482d      	ldr	r0, [pc, #180]	; (800748c <HAL_RCC_ClockConfig+0x218>)
 80073d6:	f7fa fef0 	bl	80021ba <assert_failed>

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	685b      	ldr	r3, [r3, #4]
 80073de:	2b01      	cmp	r3, #1
 80073e0:	d107      	bne.n	80073f2 <HAL_RCC_ClockConfig+0x17e>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80073e2:	4b2c      	ldr	r3, [pc, #176]	; (8007494 <HAL_RCC_ClockConfig+0x220>)
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d119      	bne.n	8007422 <HAL_RCC_ClockConfig+0x1ae>
      {
        return HAL_ERROR;
 80073ee:	2301      	movs	r3, #1
 80073f0:	e0bf      	b.n	8007572 <HAL_RCC_ClockConfig+0x2fe>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	685b      	ldr	r3, [r3, #4]
 80073f6:	2b02      	cmp	r3, #2
 80073f8:	d003      	beq.n	8007402 <HAL_RCC_ClockConfig+0x18e>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80073fe:	2b03      	cmp	r3, #3
 8007400:	d107      	bne.n	8007412 <HAL_RCC_ClockConfig+0x19e>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007402:	4b24      	ldr	r3, [pc, #144]	; (8007494 <HAL_RCC_ClockConfig+0x220>)
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800740a:	2b00      	cmp	r3, #0
 800740c:	d109      	bne.n	8007422 <HAL_RCC_ClockConfig+0x1ae>
      {
        return HAL_ERROR;
 800740e:	2301      	movs	r3, #1
 8007410:	e0af      	b.n	8007572 <HAL_RCC_ClockConfig+0x2fe>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007412:	4b20      	ldr	r3, [pc, #128]	; (8007494 <HAL_RCC_ClockConfig+0x220>)
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	f003 0302 	and.w	r3, r3, #2
 800741a:	2b00      	cmp	r3, #0
 800741c:	d101      	bne.n	8007422 <HAL_RCC_ClockConfig+0x1ae>
      {
        return HAL_ERROR;
 800741e:	2301      	movs	r3, #1
 8007420:	e0a7      	b.n	8007572 <HAL_RCC_ClockConfig+0x2fe>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007422:	4b1c      	ldr	r3, [pc, #112]	; (8007494 <HAL_RCC_ClockConfig+0x220>)
 8007424:	689b      	ldr	r3, [r3, #8]
 8007426:	f023 0203 	bic.w	r2, r3, #3
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	685b      	ldr	r3, [r3, #4]
 800742e:	4919      	ldr	r1, [pc, #100]	; (8007494 <HAL_RCC_ClockConfig+0x220>)
 8007430:	4313      	orrs	r3, r2
 8007432:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007434:	f7fb f998 	bl	8002768 <HAL_GetTick>
 8007438:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800743a:	e00a      	b.n	8007452 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800743c:	f7fb f994 	bl	8002768 <HAL_GetTick>
 8007440:	4602      	mov	r2, r0
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	1ad3      	subs	r3, r2, r3
 8007446:	f241 3288 	movw	r2, #5000	; 0x1388
 800744a:	4293      	cmp	r3, r2
 800744c:	d901      	bls.n	8007452 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800744e:	2303      	movs	r3, #3
 8007450:	e08f      	b.n	8007572 <HAL_RCC_ClockConfig+0x2fe>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007452:	4b10      	ldr	r3, [pc, #64]	; (8007494 <HAL_RCC_ClockConfig+0x220>)
 8007454:	689b      	ldr	r3, [r3, #8]
 8007456:	f003 020c 	and.w	r2, r3, #12
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	685b      	ldr	r3, [r3, #4]
 800745e:	009b      	lsls	r3, r3, #2
 8007460:	429a      	cmp	r2, r3
 8007462:	d1eb      	bne.n	800743c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007464:	4b0a      	ldr	r3, [pc, #40]	; (8007490 <HAL_RCC_ClockConfig+0x21c>)
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	f003 030f 	and.w	r3, r3, #15
 800746c:	683a      	ldr	r2, [r7, #0]
 800746e:	429a      	cmp	r2, r3
 8007470:	d212      	bcs.n	8007498 <HAL_RCC_ClockConfig+0x224>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007472:	4b07      	ldr	r3, [pc, #28]	; (8007490 <HAL_RCC_ClockConfig+0x21c>)
 8007474:	683a      	ldr	r2, [r7, #0]
 8007476:	b2d2      	uxtb	r2, r2
 8007478:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800747a:	4b05      	ldr	r3, [pc, #20]	; (8007490 <HAL_RCC_ClockConfig+0x21c>)
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	f003 030f 	and.w	r3, r3, #15
 8007482:	683a      	ldr	r2, [r7, #0]
 8007484:	429a      	cmp	r2, r3
 8007486:	d007      	beq.n	8007498 <HAL_RCC_ClockConfig+0x224>
    {
      return HAL_ERROR;
 8007488:	2301      	movs	r3, #1
 800748a:	e072      	b.n	8007572 <HAL_RCC_ClockConfig+0x2fe>
 800748c:	0800fb58 	.word	0x0800fb58
 8007490:	40023c00 	.word	0x40023c00
 8007494:	40023800 	.word	0x40023800
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	f003 0304 	and.w	r3, r3, #4
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	d025      	beq.n	80074f0 <HAL_RCC_ClockConfig+0x27c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	68db      	ldr	r3, [r3, #12]
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d018      	beq.n	80074de <HAL_RCC_ClockConfig+0x26a>
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	68db      	ldr	r3, [r3, #12]
 80074b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80074b4:	d013      	beq.n	80074de <HAL_RCC_ClockConfig+0x26a>
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	68db      	ldr	r3, [r3, #12]
 80074ba:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80074be:	d00e      	beq.n	80074de <HAL_RCC_ClockConfig+0x26a>
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	68db      	ldr	r3, [r3, #12]
 80074c4:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 80074c8:	d009      	beq.n	80074de <HAL_RCC_ClockConfig+0x26a>
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	68db      	ldr	r3, [r3, #12]
 80074ce:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 80074d2:	d004      	beq.n	80074de <HAL_RCC_ClockConfig+0x26a>
 80074d4:	f240 21ba 	movw	r1, #698	; 0x2ba
 80074d8:	4828      	ldr	r0, [pc, #160]	; (800757c <HAL_RCC_ClockConfig+0x308>)
 80074da:	f7fa fe6e 	bl	80021ba <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80074de:	4b28      	ldr	r3, [pc, #160]	; (8007580 <HAL_RCC_ClockConfig+0x30c>)
 80074e0:	689b      	ldr	r3, [r3, #8]
 80074e2:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	68db      	ldr	r3, [r3, #12]
 80074ea:	4925      	ldr	r1, [pc, #148]	; (8007580 <HAL_RCC_ClockConfig+0x30c>)
 80074ec:	4313      	orrs	r3, r2
 80074ee:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	f003 0308 	and.w	r3, r3, #8
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	d026      	beq.n	800754a <HAL_RCC_ClockConfig+0x2d6>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	691b      	ldr	r3, [r3, #16]
 8007500:	2b00      	cmp	r3, #0
 8007502:	d018      	beq.n	8007536 <HAL_RCC_ClockConfig+0x2c2>
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	691b      	ldr	r3, [r3, #16]
 8007508:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800750c:	d013      	beq.n	8007536 <HAL_RCC_ClockConfig+0x2c2>
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	691b      	ldr	r3, [r3, #16]
 8007512:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8007516:	d00e      	beq.n	8007536 <HAL_RCC_ClockConfig+0x2c2>
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	691b      	ldr	r3, [r3, #16]
 800751c:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8007520:	d009      	beq.n	8007536 <HAL_RCC_ClockConfig+0x2c2>
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	691b      	ldr	r3, [r3, #16]
 8007526:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 800752a:	d004      	beq.n	8007536 <HAL_RCC_ClockConfig+0x2c2>
 800752c:	f240 21c1 	movw	r1, #705	; 0x2c1
 8007530:	4812      	ldr	r0, [pc, #72]	; (800757c <HAL_RCC_ClockConfig+0x308>)
 8007532:	f7fa fe42 	bl	80021ba <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007536:	4b12      	ldr	r3, [pc, #72]	; (8007580 <HAL_RCC_ClockConfig+0x30c>)
 8007538:	689b      	ldr	r3, [r3, #8]
 800753a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	691b      	ldr	r3, [r3, #16]
 8007542:	00db      	lsls	r3, r3, #3
 8007544:	490e      	ldr	r1, [pc, #56]	; (8007580 <HAL_RCC_ClockConfig+0x30c>)
 8007546:	4313      	orrs	r3, r2
 8007548:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800754a:	f000 f821 	bl	8007590 <HAL_RCC_GetSysClockFreq>
 800754e:	4601      	mov	r1, r0
 8007550:	4b0b      	ldr	r3, [pc, #44]	; (8007580 <HAL_RCC_ClockConfig+0x30c>)
 8007552:	689b      	ldr	r3, [r3, #8]
 8007554:	091b      	lsrs	r3, r3, #4
 8007556:	f003 030f 	and.w	r3, r3, #15
 800755a:	4a0a      	ldr	r2, [pc, #40]	; (8007584 <HAL_RCC_ClockConfig+0x310>)
 800755c:	5cd3      	ldrb	r3, [r2, r3]
 800755e:	fa21 f303 	lsr.w	r3, r1, r3
 8007562:	4a09      	ldr	r2, [pc, #36]	; (8007588 <HAL_RCC_ClockConfig+0x314>)
 8007564:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8007566:	4b09      	ldr	r3, [pc, #36]	; (800758c <HAL_RCC_ClockConfig+0x318>)
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	4618      	mov	r0, r3
 800756c:	f7fb f8b8 	bl	80026e0 <HAL_InitTick>

  return HAL_OK;
 8007570:	2300      	movs	r3, #0
}
 8007572:	4618      	mov	r0, r3
 8007574:	3710      	adds	r7, #16
 8007576:	46bd      	mov	sp, r7
 8007578:	bd80      	pop	{r7, pc}
 800757a:	bf00      	nop
 800757c:	0800fb58 	.word	0x0800fb58
 8007580:	40023800 	.word	0x40023800
 8007584:	0800fd68 	.word	0x0800fd68
 8007588:	20000400 	.word	0x20000400
 800758c:	20000404 	.word	0x20000404

08007590 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007590:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007592:	b085      	sub	sp, #20
 8007594:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8007596:	2300      	movs	r3, #0
 8007598:	607b      	str	r3, [r7, #4]
 800759a:	2300      	movs	r3, #0
 800759c:	60fb      	str	r3, [r7, #12]
 800759e:	2300      	movs	r3, #0
 80075a0:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80075a2:	2300      	movs	r3, #0
 80075a4:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80075a6:	4b63      	ldr	r3, [pc, #396]	; (8007734 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80075a8:	689b      	ldr	r3, [r3, #8]
 80075aa:	f003 030c 	and.w	r3, r3, #12
 80075ae:	2b04      	cmp	r3, #4
 80075b0:	d007      	beq.n	80075c2 <HAL_RCC_GetSysClockFreq+0x32>
 80075b2:	2b08      	cmp	r3, #8
 80075b4:	d008      	beq.n	80075c8 <HAL_RCC_GetSysClockFreq+0x38>
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	f040 80b4 	bne.w	8007724 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80075bc:	4b5e      	ldr	r3, [pc, #376]	; (8007738 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80075be:	60bb      	str	r3, [r7, #8]
       break;
 80075c0:	e0b3      	b.n	800772a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80075c2:	4b5e      	ldr	r3, [pc, #376]	; (800773c <HAL_RCC_GetSysClockFreq+0x1ac>)
 80075c4:	60bb      	str	r3, [r7, #8]
      break;
 80075c6:	e0b0      	b.n	800772a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80075c8:	4b5a      	ldr	r3, [pc, #360]	; (8007734 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80075ca:	685b      	ldr	r3, [r3, #4]
 80075cc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80075d0:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80075d2:	4b58      	ldr	r3, [pc, #352]	; (8007734 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80075d4:	685b      	ldr	r3, [r3, #4]
 80075d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d04a      	beq.n	8007674 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80075de:	4b55      	ldr	r3, [pc, #340]	; (8007734 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80075e0:	685b      	ldr	r3, [r3, #4]
 80075e2:	099b      	lsrs	r3, r3, #6
 80075e4:	f04f 0400 	mov.w	r4, #0
 80075e8:	f240 11ff 	movw	r1, #511	; 0x1ff
 80075ec:	f04f 0200 	mov.w	r2, #0
 80075f0:	ea03 0501 	and.w	r5, r3, r1
 80075f4:	ea04 0602 	and.w	r6, r4, r2
 80075f8:	4629      	mov	r1, r5
 80075fa:	4632      	mov	r2, r6
 80075fc:	f04f 0300 	mov.w	r3, #0
 8007600:	f04f 0400 	mov.w	r4, #0
 8007604:	0154      	lsls	r4, r2, #5
 8007606:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800760a:	014b      	lsls	r3, r1, #5
 800760c:	4619      	mov	r1, r3
 800760e:	4622      	mov	r2, r4
 8007610:	1b49      	subs	r1, r1, r5
 8007612:	eb62 0206 	sbc.w	r2, r2, r6
 8007616:	f04f 0300 	mov.w	r3, #0
 800761a:	f04f 0400 	mov.w	r4, #0
 800761e:	0194      	lsls	r4, r2, #6
 8007620:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8007624:	018b      	lsls	r3, r1, #6
 8007626:	1a5b      	subs	r3, r3, r1
 8007628:	eb64 0402 	sbc.w	r4, r4, r2
 800762c:	f04f 0100 	mov.w	r1, #0
 8007630:	f04f 0200 	mov.w	r2, #0
 8007634:	00e2      	lsls	r2, r4, #3
 8007636:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800763a:	00d9      	lsls	r1, r3, #3
 800763c:	460b      	mov	r3, r1
 800763e:	4614      	mov	r4, r2
 8007640:	195b      	adds	r3, r3, r5
 8007642:	eb44 0406 	adc.w	r4, r4, r6
 8007646:	f04f 0100 	mov.w	r1, #0
 800764a:	f04f 0200 	mov.w	r2, #0
 800764e:	0262      	lsls	r2, r4, #9
 8007650:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8007654:	0259      	lsls	r1, r3, #9
 8007656:	460b      	mov	r3, r1
 8007658:	4614      	mov	r4, r2
 800765a:	4618      	mov	r0, r3
 800765c:	4621      	mov	r1, r4
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	f04f 0400 	mov.w	r4, #0
 8007664:	461a      	mov	r2, r3
 8007666:	4623      	mov	r3, r4
 8007668:	f7f9 fa72 	bl	8000b50 <__aeabi_uldivmod>
 800766c:	4603      	mov	r3, r0
 800766e:	460c      	mov	r4, r1
 8007670:	60fb      	str	r3, [r7, #12]
 8007672:	e049      	b.n	8007708 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007674:	4b2f      	ldr	r3, [pc, #188]	; (8007734 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8007676:	685b      	ldr	r3, [r3, #4]
 8007678:	099b      	lsrs	r3, r3, #6
 800767a:	f04f 0400 	mov.w	r4, #0
 800767e:	f240 11ff 	movw	r1, #511	; 0x1ff
 8007682:	f04f 0200 	mov.w	r2, #0
 8007686:	ea03 0501 	and.w	r5, r3, r1
 800768a:	ea04 0602 	and.w	r6, r4, r2
 800768e:	4629      	mov	r1, r5
 8007690:	4632      	mov	r2, r6
 8007692:	f04f 0300 	mov.w	r3, #0
 8007696:	f04f 0400 	mov.w	r4, #0
 800769a:	0154      	lsls	r4, r2, #5
 800769c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80076a0:	014b      	lsls	r3, r1, #5
 80076a2:	4619      	mov	r1, r3
 80076a4:	4622      	mov	r2, r4
 80076a6:	1b49      	subs	r1, r1, r5
 80076a8:	eb62 0206 	sbc.w	r2, r2, r6
 80076ac:	f04f 0300 	mov.w	r3, #0
 80076b0:	f04f 0400 	mov.w	r4, #0
 80076b4:	0194      	lsls	r4, r2, #6
 80076b6:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80076ba:	018b      	lsls	r3, r1, #6
 80076bc:	1a5b      	subs	r3, r3, r1
 80076be:	eb64 0402 	sbc.w	r4, r4, r2
 80076c2:	f04f 0100 	mov.w	r1, #0
 80076c6:	f04f 0200 	mov.w	r2, #0
 80076ca:	00e2      	lsls	r2, r4, #3
 80076cc:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80076d0:	00d9      	lsls	r1, r3, #3
 80076d2:	460b      	mov	r3, r1
 80076d4:	4614      	mov	r4, r2
 80076d6:	195b      	adds	r3, r3, r5
 80076d8:	eb44 0406 	adc.w	r4, r4, r6
 80076dc:	f04f 0100 	mov.w	r1, #0
 80076e0:	f04f 0200 	mov.w	r2, #0
 80076e4:	02a2      	lsls	r2, r4, #10
 80076e6:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80076ea:	0299      	lsls	r1, r3, #10
 80076ec:	460b      	mov	r3, r1
 80076ee:	4614      	mov	r4, r2
 80076f0:	4618      	mov	r0, r3
 80076f2:	4621      	mov	r1, r4
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	f04f 0400 	mov.w	r4, #0
 80076fa:	461a      	mov	r2, r3
 80076fc:	4623      	mov	r3, r4
 80076fe:	f7f9 fa27 	bl	8000b50 <__aeabi_uldivmod>
 8007702:	4603      	mov	r3, r0
 8007704:	460c      	mov	r4, r1
 8007706:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8007708:	4b0a      	ldr	r3, [pc, #40]	; (8007734 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800770a:	685b      	ldr	r3, [r3, #4]
 800770c:	0c1b      	lsrs	r3, r3, #16
 800770e:	f003 0303 	and.w	r3, r3, #3
 8007712:	3301      	adds	r3, #1
 8007714:	005b      	lsls	r3, r3, #1
 8007716:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8007718:	68fa      	ldr	r2, [r7, #12]
 800771a:	683b      	ldr	r3, [r7, #0]
 800771c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007720:	60bb      	str	r3, [r7, #8]
      break;
 8007722:	e002      	b.n	800772a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007724:	4b04      	ldr	r3, [pc, #16]	; (8007738 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8007726:	60bb      	str	r3, [r7, #8]
      break;
 8007728:	bf00      	nop
    }
  }
  return sysclockfreq;
 800772a:	68bb      	ldr	r3, [r7, #8]
}
 800772c:	4618      	mov	r0, r3
 800772e:	3714      	adds	r7, #20
 8007730:	46bd      	mov	sp, r7
 8007732:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007734:	40023800 	.word	0x40023800
 8007738:	00f42400 	.word	0x00f42400
 800773c:	007a1200 	.word	0x007a1200

08007740 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007740:	b480      	push	{r7}
 8007742:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007744:	4b03      	ldr	r3, [pc, #12]	; (8007754 <HAL_RCC_GetHCLKFreq+0x14>)
 8007746:	681b      	ldr	r3, [r3, #0]
}
 8007748:	4618      	mov	r0, r3
 800774a:	46bd      	mov	sp, r7
 800774c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007750:	4770      	bx	lr
 8007752:	bf00      	nop
 8007754:	20000400 	.word	0x20000400

08007758 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007758:	b580      	push	{r7, lr}
 800775a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800775c:	f7ff fff0 	bl	8007740 <HAL_RCC_GetHCLKFreq>
 8007760:	4601      	mov	r1, r0
 8007762:	4b05      	ldr	r3, [pc, #20]	; (8007778 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007764:	689b      	ldr	r3, [r3, #8]
 8007766:	0a9b      	lsrs	r3, r3, #10
 8007768:	f003 0307 	and.w	r3, r3, #7
 800776c:	4a03      	ldr	r2, [pc, #12]	; (800777c <HAL_RCC_GetPCLK1Freq+0x24>)
 800776e:	5cd3      	ldrb	r3, [r2, r3]
 8007770:	fa21 f303 	lsr.w	r3, r1, r3
}
 8007774:	4618      	mov	r0, r3
 8007776:	bd80      	pop	{r7, pc}
 8007778:	40023800 	.word	0x40023800
 800777c:	0800fd78 	.word	0x0800fd78

08007780 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007780:	b580      	push	{r7, lr}
 8007782:	b086      	sub	sp, #24
 8007784:	af00      	add	r7, sp, #0
 8007786:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007788:	2300      	movs	r3, #0
 800778a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 800778c:	2300      	movs	r3, #0
 800778e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	2b00      	cmp	r3, #0
 8007796:	d003      	beq.n	80077a0 <HAL_RCCEx_PeriphCLKConfig+0x20>
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	2b0f      	cmp	r3, #15
 800779e:	d904      	bls.n	80077aa <HAL_RCCEx_PeriphCLKConfig+0x2a>
 80077a0:	f640 11d9 	movw	r1, #2521	; 0x9d9
 80077a4:	489d      	ldr	r0, [pc, #628]	; (8007a1c <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80077a6:	f7fa fd08 	bl	80021ba <assert_failed>

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	f003 0301 	and.w	r3, r3, #1
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d105      	bne.n	80077c2 <HAL_RCCEx_PeriphCLKConfig+0x42>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d060      	beq.n	8007884 <HAL_RCCEx_PeriphCLKConfig+0x104>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	68db      	ldr	r3, [r3, #12]
 80077c6:	2b01      	cmp	r3, #1
 80077c8:	d903      	bls.n	80077d2 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	68db      	ldr	r3, [r3, #12]
 80077ce:	2b07      	cmp	r3, #7
 80077d0:	d904      	bls.n	80077dc <HAL_RCCEx_PeriphCLKConfig+0x5c>
 80077d2:	f44f 611e 	mov.w	r1, #2528	; 0x9e0
 80077d6:	4891      	ldr	r0, [pc, #580]	; (8007a1c <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80077d8:	f7fa fcef 	bl	80021ba <assert_failed>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	689b      	ldr	r3, [r3, #8]
 80077e0:	2bbf      	cmp	r3, #191	; 0xbf
 80077e2:	d904      	bls.n	80077ee <HAL_RCCEx_PeriphCLKConfig+0x6e>
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	689b      	ldr	r3, [r3, #8]
 80077e8:	f5b3 7fd8 	cmp.w	r3, #432	; 0x1b0
 80077ec:	d904      	bls.n	80077f8 <HAL_RCCEx_PeriphCLKConfig+0x78>
 80077ee:	f640 11e1 	movw	r1, #2529	; 0x9e1
 80077f2:	488a      	ldr	r0, [pc, #552]	; (8007a1c <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80077f4:	f7fa fce1 	bl	80021ba <assert_failed>
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	685b      	ldr	r3, [r3, #4]
 80077fc:	2b01      	cmp	r3, #1
 80077fe:	d903      	bls.n	8007808 <HAL_RCCEx_PeriphCLKConfig+0x88>
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	685b      	ldr	r3, [r3, #4]
 8007804:	2b3f      	cmp	r3, #63	; 0x3f
 8007806:	d904      	bls.n	8007812 <HAL_RCCEx_PeriphCLKConfig+0x92>
 8007808:	f640 11e3 	movw	r1, #2531	; 0x9e3
 800780c:	4883      	ldr	r0, [pc, #524]	; (8007a1c <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 800780e:	f7fa fcd4 	bl	80021ba <assert_failed>
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8007812:	4b83      	ldr	r3, [pc, #524]	; (8007a20 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 8007814:	2200      	movs	r2, #0
 8007816:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8007818:	f7fa ffa6 	bl	8002768 <HAL_GetTick>
 800781c:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800781e:	e008      	b.n	8007832 <HAL_RCCEx_PeriphCLKConfig+0xb2>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8007820:	f7fa ffa2 	bl	8002768 <HAL_GetTick>
 8007824:	4602      	mov	r2, r0
 8007826:	697b      	ldr	r3, [r7, #20]
 8007828:	1ad3      	subs	r3, r2, r3
 800782a:	2b02      	cmp	r3, #2
 800782c:	d901      	bls.n	8007832 <HAL_RCCEx_PeriphCLKConfig+0xb2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800782e:	2303      	movs	r3, #3
 8007830:	e1ae      	b.n	8007b90 <HAL_RCCEx_PeriphCLKConfig+0x410>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007832:	4b7c      	ldr	r3, [pc, #496]	; (8007a24 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800783a:	2b00      	cmp	r3, #0
 800783c:	d1f0      	bne.n	8007820 <HAL_RCCEx_PeriphCLKConfig+0xa0>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	685a      	ldr	r2, [r3, #4]
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	689b      	ldr	r3, [r3, #8]
 8007846:	019b      	lsls	r3, r3, #6
 8007848:	431a      	orrs	r2, r3
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	68db      	ldr	r3, [r3, #12]
 800784e:	071b      	lsls	r3, r3, #28
 8007850:	4974      	ldr	r1, [pc, #464]	; (8007a24 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 8007852:	4313      	orrs	r3, r2
 8007854:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8007858:	4b71      	ldr	r3, [pc, #452]	; (8007a20 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 800785a:	2201      	movs	r2, #1
 800785c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800785e:	f7fa ff83 	bl	8002768 <HAL_GetTick>
 8007862:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007864:	e008      	b.n	8007878 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8007866:	f7fa ff7f 	bl	8002768 <HAL_GetTick>
 800786a:	4602      	mov	r2, r0
 800786c:	697b      	ldr	r3, [r7, #20]
 800786e:	1ad3      	subs	r3, r2, r3
 8007870:	2b02      	cmp	r3, #2
 8007872:	d901      	bls.n	8007878 <HAL_RCCEx_PeriphCLKConfig+0xf8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007874:	2303      	movs	r3, #3
 8007876:	e18b      	b.n	8007b90 <HAL_RCCEx_PeriphCLKConfig+0x410>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007878:	4b6a      	ldr	r3, [pc, #424]	; (8007a24 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007880:	2b00      	cmp	r3, #0
 8007882:	d0f0      	beq.n	8007866 <HAL_RCCEx_PeriphCLKConfig+0xe6>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	f003 0302 	and.w	r3, r3, #2
 800788c:	2b00      	cmp	r3, #0
 800788e:	f000 8174 	beq.w	8007b7a <HAL_RCCEx_PeriphCLKConfig+0x3fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	691b      	ldr	r3, [r3, #16]
 8007896:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800789a:	f000 80a6 	beq.w	80079ea <HAL_RCCEx_PeriphCLKConfig+0x26a>
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	691b      	ldr	r3, [r3, #16]
 80078a2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80078a6:	f000 80a0 	beq.w	80079ea <HAL_RCCEx_PeriphCLKConfig+0x26a>
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	691b      	ldr	r3, [r3, #16]
 80078ae:	4a5e      	ldr	r2, [pc, #376]	; (8007a28 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 80078b0:	4293      	cmp	r3, r2
 80078b2:	f000 809a 	beq.w	80079ea <HAL_RCCEx_PeriphCLKConfig+0x26a>
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	691b      	ldr	r3, [r3, #16]
 80078ba:	4a5c      	ldr	r2, [pc, #368]	; (8007a2c <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 80078bc:	4293      	cmp	r3, r2
 80078be:	f000 8094 	beq.w	80079ea <HAL_RCCEx_PeriphCLKConfig+0x26a>
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	691b      	ldr	r3, [r3, #16]
 80078c6:	4a5a      	ldr	r2, [pc, #360]	; (8007a30 <HAL_RCCEx_PeriphCLKConfig+0x2b0>)
 80078c8:	4293      	cmp	r3, r2
 80078ca:	f000 808e 	beq.w	80079ea <HAL_RCCEx_PeriphCLKConfig+0x26a>
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	691b      	ldr	r3, [r3, #16]
 80078d2:	4a58      	ldr	r2, [pc, #352]	; (8007a34 <HAL_RCCEx_PeriphCLKConfig+0x2b4>)
 80078d4:	4293      	cmp	r3, r2
 80078d6:	f000 8088 	beq.w	80079ea <HAL_RCCEx_PeriphCLKConfig+0x26a>
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	691b      	ldr	r3, [r3, #16]
 80078de:	4a56      	ldr	r2, [pc, #344]	; (8007a38 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 80078e0:	4293      	cmp	r3, r2
 80078e2:	f000 8082 	beq.w	80079ea <HAL_RCCEx_PeriphCLKConfig+0x26a>
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	691b      	ldr	r3, [r3, #16]
 80078ea:	4a54      	ldr	r2, [pc, #336]	; (8007a3c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80078ec:	4293      	cmp	r3, r2
 80078ee:	d07c      	beq.n	80079ea <HAL_RCCEx_PeriphCLKConfig+0x26a>
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	691b      	ldr	r3, [r3, #16]
 80078f4:	4a52      	ldr	r2, [pc, #328]	; (8007a40 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 80078f6:	4293      	cmp	r3, r2
 80078f8:	d077      	beq.n	80079ea <HAL_RCCEx_PeriphCLKConfig+0x26a>
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	691b      	ldr	r3, [r3, #16]
 80078fe:	4a51      	ldr	r2, [pc, #324]	; (8007a44 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8007900:	4293      	cmp	r3, r2
 8007902:	d072      	beq.n	80079ea <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	691b      	ldr	r3, [r3, #16]
 8007908:	4a4f      	ldr	r2, [pc, #316]	; (8007a48 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 800790a:	4293      	cmp	r3, r2
 800790c:	d06d      	beq.n	80079ea <HAL_RCCEx_PeriphCLKConfig+0x26a>
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	691b      	ldr	r3, [r3, #16]
 8007912:	4a4e      	ldr	r2, [pc, #312]	; (8007a4c <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8007914:	4293      	cmp	r3, r2
 8007916:	d068      	beq.n	80079ea <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	691b      	ldr	r3, [r3, #16]
 800791c:	4a4c      	ldr	r2, [pc, #304]	; (8007a50 <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 800791e:	4293      	cmp	r3, r2
 8007920:	d063      	beq.n	80079ea <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	691b      	ldr	r3, [r3, #16]
 8007926:	4a4b      	ldr	r2, [pc, #300]	; (8007a54 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8007928:	4293      	cmp	r3, r2
 800792a:	d05e      	beq.n	80079ea <HAL_RCCEx_PeriphCLKConfig+0x26a>
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	691b      	ldr	r3, [r3, #16]
 8007930:	4a49      	ldr	r2, [pc, #292]	; (8007a58 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8007932:	4293      	cmp	r3, r2
 8007934:	d059      	beq.n	80079ea <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	691b      	ldr	r3, [r3, #16]
 800793a:	4a48      	ldr	r2, [pc, #288]	; (8007a5c <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 800793c:	4293      	cmp	r3, r2
 800793e:	d054      	beq.n	80079ea <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	691b      	ldr	r3, [r3, #16]
 8007944:	4a46      	ldr	r2, [pc, #280]	; (8007a60 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8007946:	4293      	cmp	r3, r2
 8007948:	d04f      	beq.n	80079ea <HAL_RCCEx_PeriphCLKConfig+0x26a>
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	691b      	ldr	r3, [r3, #16]
 800794e:	4a45      	ldr	r2, [pc, #276]	; (8007a64 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8007950:	4293      	cmp	r3, r2
 8007952:	d04a      	beq.n	80079ea <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	691b      	ldr	r3, [r3, #16]
 8007958:	4a43      	ldr	r2, [pc, #268]	; (8007a68 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800795a:	4293      	cmp	r3, r2
 800795c:	d045      	beq.n	80079ea <HAL_RCCEx_PeriphCLKConfig+0x26a>
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	691b      	ldr	r3, [r3, #16]
 8007962:	4a42      	ldr	r2, [pc, #264]	; (8007a6c <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8007964:	4293      	cmp	r3, r2
 8007966:	d040      	beq.n	80079ea <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	691b      	ldr	r3, [r3, #16]
 800796c:	4a40      	ldr	r2, [pc, #256]	; (8007a70 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800796e:	4293      	cmp	r3, r2
 8007970:	d03b      	beq.n	80079ea <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	691b      	ldr	r3, [r3, #16]
 8007976:	4a3f      	ldr	r2, [pc, #252]	; (8007a74 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007978:	4293      	cmp	r3, r2
 800797a:	d036      	beq.n	80079ea <HAL_RCCEx_PeriphCLKConfig+0x26a>
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	691b      	ldr	r3, [r3, #16]
 8007980:	4a3d      	ldr	r2, [pc, #244]	; (8007a78 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8007982:	4293      	cmp	r3, r2
 8007984:	d031      	beq.n	80079ea <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	691b      	ldr	r3, [r3, #16]
 800798a:	4a3c      	ldr	r2, [pc, #240]	; (8007a7c <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 800798c:	4293      	cmp	r3, r2
 800798e:	d02c      	beq.n	80079ea <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	691b      	ldr	r3, [r3, #16]
 8007994:	4a3a      	ldr	r2, [pc, #232]	; (8007a80 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8007996:	4293      	cmp	r3, r2
 8007998:	d027      	beq.n	80079ea <HAL_RCCEx_PeriphCLKConfig+0x26a>
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	691b      	ldr	r3, [r3, #16]
 800799e:	4a39      	ldr	r2, [pc, #228]	; (8007a84 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80079a0:	4293      	cmp	r3, r2
 80079a2:	d022      	beq.n	80079ea <HAL_RCCEx_PeriphCLKConfig+0x26a>
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	691b      	ldr	r3, [r3, #16]
 80079a8:	4a37      	ldr	r2, [pc, #220]	; (8007a88 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80079aa:	4293      	cmp	r3, r2
 80079ac:	d01d      	beq.n	80079ea <HAL_RCCEx_PeriphCLKConfig+0x26a>
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	691b      	ldr	r3, [r3, #16]
 80079b2:	4a36      	ldr	r2, [pc, #216]	; (8007a8c <HAL_RCCEx_PeriphCLKConfig+0x30c>)
 80079b4:	4293      	cmp	r3, r2
 80079b6:	d018      	beq.n	80079ea <HAL_RCCEx_PeriphCLKConfig+0x26a>
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	691b      	ldr	r3, [r3, #16]
 80079bc:	4a34      	ldr	r2, [pc, #208]	; (8007a90 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80079be:	4293      	cmp	r3, r2
 80079c0:	d013      	beq.n	80079ea <HAL_RCCEx_PeriphCLKConfig+0x26a>
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	691b      	ldr	r3, [r3, #16]
 80079c6:	4a33      	ldr	r2, [pc, #204]	; (8007a94 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 80079c8:	4293      	cmp	r3, r2
 80079ca:	d00e      	beq.n	80079ea <HAL_RCCEx_PeriphCLKConfig+0x26a>
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	691b      	ldr	r3, [r3, #16]
 80079d0:	4a31      	ldr	r2, [pc, #196]	; (8007a98 <HAL_RCCEx_PeriphCLKConfig+0x318>)
 80079d2:	4293      	cmp	r3, r2
 80079d4:	d009      	beq.n	80079ea <HAL_RCCEx_PeriphCLKConfig+0x26a>
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	691b      	ldr	r3, [r3, #16]
 80079da:	4a30      	ldr	r2, [pc, #192]	; (8007a9c <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 80079dc:	4293      	cmp	r3, r2
 80079de:	d004      	beq.n	80079ea <HAL_RCCEx_PeriphCLKConfig+0x26a>
 80079e0:	f640 2112 	movw	r1, #2578	; 0xa12
 80079e4:	480d      	ldr	r0, [pc, #52]	; (8007a1c <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80079e6:	f7fa fbe8 	bl	80021ba <assert_failed>

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80079ea:	2300      	movs	r3, #0
 80079ec:	60fb      	str	r3, [r7, #12]
 80079ee:	4b0d      	ldr	r3, [pc, #52]	; (8007a24 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 80079f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079f2:	4a0c      	ldr	r2, [pc, #48]	; (8007a24 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 80079f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80079f8:	6413      	str	r3, [r2, #64]	; 0x40
 80079fa:	4b0a      	ldr	r3, [pc, #40]	; (8007a24 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 80079fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007a02:	60fb      	str	r3, [r7, #12]
 8007a04:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8007a06:	4b26      	ldr	r3, [pc, #152]	; (8007aa0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	4a25      	ldr	r2, [pc, #148]	; (8007aa0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8007a0c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007a10:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8007a12:	f7fa fea9 	bl	8002768 <HAL_GetTick>
 8007a16:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8007a18:	e04d      	b.n	8007ab6 <HAL_RCCEx_PeriphCLKConfig+0x336>
 8007a1a:	bf00      	nop
 8007a1c:	0800fb90 	.word	0x0800fb90
 8007a20:	42470068 	.word	0x42470068
 8007a24:	40023800 	.word	0x40023800
 8007a28:	00020300 	.word	0x00020300
 8007a2c:	00030300 	.word	0x00030300
 8007a30:	00040300 	.word	0x00040300
 8007a34:	00050300 	.word	0x00050300
 8007a38:	00060300 	.word	0x00060300
 8007a3c:	00070300 	.word	0x00070300
 8007a40:	00080300 	.word	0x00080300
 8007a44:	00090300 	.word	0x00090300
 8007a48:	000a0300 	.word	0x000a0300
 8007a4c:	000b0300 	.word	0x000b0300
 8007a50:	000c0300 	.word	0x000c0300
 8007a54:	000d0300 	.word	0x000d0300
 8007a58:	000e0300 	.word	0x000e0300
 8007a5c:	000f0300 	.word	0x000f0300
 8007a60:	00100300 	.word	0x00100300
 8007a64:	00110300 	.word	0x00110300
 8007a68:	00120300 	.word	0x00120300
 8007a6c:	00130300 	.word	0x00130300
 8007a70:	00140300 	.word	0x00140300
 8007a74:	00150300 	.word	0x00150300
 8007a78:	00160300 	.word	0x00160300
 8007a7c:	00170300 	.word	0x00170300
 8007a80:	00180300 	.word	0x00180300
 8007a84:	00190300 	.word	0x00190300
 8007a88:	001a0300 	.word	0x001a0300
 8007a8c:	001b0300 	.word	0x001b0300
 8007a90:	001c0300 	.word	0x001c0300
 8007a94:	001d0300 	.word	0x001d0300
 8007a98:	001e0300 	.word	0x001e0300
 8007a9c:	001f0300 	.word	0x001f0300
 8007aa0:	40007000 	.word	0x40007000
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8007aa4:	f7fa fe60 	bl	8002768 <HAL_GetTick>
 8007aa8:	4602      	mov	r2, r0
 8007aaa:	697b      	ldr	r3, [r7, #20]
 8007aac:	1ad3      	subs	r3, r2, r3
 8007aae:	2b02      	cmp	r3, #2
 8007ab0:	d901      	bls.n	8007ab6 <HAL_RCCEx_PeriphCLKConfig+0x336>
      {
        return HAL_TIMEOUT;
 8007ab2:	2303      	movs	r3, #3
 8007ab4:	e06c      	b.n	8007b90 <HAL_RCCEx_PeriphCLKConfig+0x410>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8007ab6:	4b38      	ldr	r3, [pc, #224]	; (8007b98 <HAL_RCCEx_PeriphCLKConfig+0x418>)
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	d0f0      	beq.n	8007aa4 <HAL_RCCEx_PeriphCLKConfig+0x324>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8007ac2:	4b36      	ldr	r3, [pc, #216]	; (8007b9c <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8007ac4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ac6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007aca:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8007acc:	693b      	ldr	r3, [r7, #16]
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d02f      	beq.n	8007b32 <HAL_RCCEx_PeriphCLKConfig+0x3b2>
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	691b      	ldr	r3, [r3, #16]
 8007ad6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007ada:	693a      	ldr	r2, [r7, #16]
 8007adc:	429a      	cmp	r2, r3
 8007ade:	d028      	beq.n	8007b32 <HAL_RCCEx_PeriphCLKConfig+0x3b2>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007ae0:	4b2e      	ldr	r3, [pc, #184]	; (8007b9c <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8007ae2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ae4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007ae8:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8007aea:	4b2d      	ldr	r3, [pc, #180]	; (8007ba0 <HAL_RCCEx_PeriphCLKConfig+0x420>)
 8007aec:	2201      	movs	r2, #1
 8007aee:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8007af0:	4b2b      	ldr	r3, [pc, #172]	; (8007ba0 <HAL_RCCEx_PeriphCLKConfig+0x420>)
 8007af2:	2200      	movs	r2, #0
 8007af4:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8007af6:	4a29      	ldr	r2, [pc, #164]	; (8007b9c <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8007af8:	693b      	ldr	r3, [r7, #16]
 8007afa:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8007afc:	4b27      	ldr	r3, [pc, #156]	; (8007b9c <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8007afe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b00:	f003 0301 	and.w	r3, r3, #1
 8007b04:	2b01      	cmp	r3, #1
 8007b06:	d114      	bne.n	8007b32 <HAL_RCCEx_PeriphCLKConfig+0x3b2>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8007b08:	f7fa fe2e 	bl	8002768 <HAL_GetTick>
 8007b0c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007b0e:	e00a      	b.n	8007b26 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007b10:	f7fa fe2a 	bl	8002768 <HAL_GetTick>
 8007b14:	4602      	mov	r2, r0
 8007b16:	697b      	ldr	r3, [r7, #20]
 8007b18:	1ad3      	subs	r3, r2, r3
 8007b1a:	f241 3288 	movw	r2, #5000	; 0x1388
 8007b1e:	4293      	cmp	r3, r2
 8007b20:	d901      	bls.n	8007b26 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
          {
            return HAL_TIMEOUT;
 8007b22:	2303      	movs	r3, #3
 8007b24:	e034      	b.n	8007b90 <HAL_RCCEx_PeriphCLKConfig+0x410>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007b26:	4b1d      	ldr	r3, [pc, #116]	; (8007b9c <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8007b28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b2a:	f003 0302 	and.w	r3, r3, #2
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d0ee      	beq.n	8007b10 <HAL_RCCEx_PeriphCLKConfig+0x390>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	691b      	ldr	r3, [r3, #16]
 8007b36:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007b3a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007b3e:	d10d      	bne.n	8007b5c <HAL_RCCEx_PeriphCLKConfig+0x3dc>
 8007b40:	4b16      	ldr	r3, [pc, #88]	; (8007b9c <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8007b42:	689b      	ldr	r3, [r3, #8]
 8007b44:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	691b      	ldr	r3, [r3, #16]
 8007b4c:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8007b50:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007b54:	4911      	ldr	r1, [pc, #68]	; (8007b9c <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8007b56:	4313      	orrs	r3, r2
 8007b58:	608b      	str	r3, [r1, #8]
 8007b5a:	e005      	b.n	8007b68 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8007b5c:	4b0f      	ldr	r3, [pc, #60]	; (8007b9c <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8007b5e:	689b      	ldr	r3, [r3, #8]
 8007b60:	4a0e      	ldr	r2, [pc, #56]	; (8007b9c <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8007b62:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8007b66:	6093      	str	r3, [r2, #8]
 8007b68:	4b0c      	ldr	r3, [pc, #48]	; (8007b9c <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8007b6a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	691b      	ldr	r3, [r3, #16]
 8007b70:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007b74:	4909      	ldr	r1, [pc, #36]	; (8007b9c <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8007b76:	4313      	orrs	r3, r2
 8007b78:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	f003 0308 	and.w	r3, r3, #8
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	d003      	beq.n	8007b8e <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	7d1a      	ldrb	r2, [r3, #20]
 8007b8a:	4b06      	ldr	r3, [pc, #24]	; (8007ba4 <HAL_RCCEx_PeriphCLKConfig+0x424>)
 8007b8c:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8007b8e:	2300      	movs	r3, #0
}
 8007b90:	4618      	mov	r0, r3
 8007b92:	3718      	adds	r7, #24
 8007b94:	46bd      	mov	sp, r7
 8007b96:	bd80      	pop	{r7, pc}
 8007b98:	40007000 	.word	0x40007000
 8007b9c:	40023800 	.word	0x40023800
 8007ba0:	42470e40 	.word	0x42470e40
 8007ba4:	424711e0 	.word	0x424711e0

08007ba8 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8007ba8:	b480      	push	{r7}
 8007baa:	b087      	sub	sp, #28
 8007bac:	af00      	add	r7, sp, #0
 8007bae:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8007bb0:	2300      	movs	r3, #0
 8007bb2:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8007bb4:	2300      	movs	r3, #0
 8007bb6:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8007bb8:	2300      	movs	r3, #0
 8007bba:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8007bbc:	2300      	movs	r3, #0
 8007bbe:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	2b01      	cmp	r3, #1
 8007bc4:	d13f      	bne.n	8007c46 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8007bc6:	4b23      	ldr	r3, [pc, #140]	; (8007c54 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8007bc8:	689b      	ldr	r3, [r3, #8]
 8007bca:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007bce:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	d004      	beq.n	8007be0 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8007bd6:	2b01      	cmp	r3, #1
 8007bd8:	d131      	bne.n	8007c3e <HAL_RCCEx_GetPeriphCLKFreq+0x96>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8007bda:	4b1f      	ldr	r3, [pc, #124]	; (8007c58 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8007bdc:	617b      	str	r3, [r7, #20]
          break;
 8007bde:	e031      	b.n	8007c44 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
      case RCC_I2SCLKSOURCE_PLLI2S:
        {
#if defined(STM32F411xE)
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8007be0:	4b1c      	ldr	r3, [pc, #112]	; (8007c54 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8007be2:	685b      	ldr	r3, [r3, #4]
 8007be4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007be8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007bec:	d109      	bne.n	8007c02 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8007bee:	4b19      	ldr	r3, [pc, #100]	; (8007c54 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8007bf0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007bf4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007bf8:	4a18      	ldr	r2, [pc, #96]	; (8007c5c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8007bfa:	fbb2 f3f3 	udiv	r3, r2, r3
 8007bfe:	613b      	str	r3, [r7, #16]
 8007c00:	e008      	b.n	8007c14 <HAL_RCCEx_GetPeriphCLKFreq+0x6c>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8007c02:	4b14      	ldr	r3, [pc, #80]	; (8007c54 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8007c04:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007c08:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007c0c:	4a14      	ldr	r2, [pc, #80]	; (8007c60 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8007c0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007c12:	613b      	str	r3, [r7, #16]
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8007c14:	4b0f      	ldr	r3, [pc, #60]	; (8007c54 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8007c16:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007c1a:	099b      	lsrs	r3, r3, #6
 8007c1c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007c20:	693b      	ldr	r3, [r7, #16]
 8007c22:	fb02 f303 	mul.w	r3, r2, r3
 8007c26:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8007c28:	4b0a      	ldr	r3, [pc, #40]	; (8007c54 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8007c2a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007c2e:	0f1b      	lsrs	r3, r3, #28
 8007c30:	f003 0307 	and.w	r3, r3, #7
 8007c34:	68ba      	ldr	r2, [r7, #8]
 8007c36:	fbb2 f3f3 	udiv	r3, r2, r3
 8007c3a:	617b      	str	r3, [r7, #20]
          break;
 8007c3c:	e002      	b.n	8007c44 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8007c3e:	2300      	movs	r3, #0
 8007c40:	617b      	str	r3, [r7, #20]
          break;
 8007c42:	bf00      	nop
        }
      }
      break;
 8007c44:	bf00      	nop
    }
  }
  return frequency;
 8007c46:	697b      	ldr	r3, [r7, #20]
}
 8007c48:	4618      	mov	r0, r3
 8007c4a:	371c      	adds	r7, #28
 8007c4c:	46bd      	mov	sp, r7
 8007c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c52:	4770      	bx	lr
 8007c54:	40023800 	.word	0x40023800
 8007c58:	00bb8000 	.word	0x00bb8000
 8007c5c:	007a1200 	.word	0x007a1200
 8007c60:	00f42400 	.word	0x00f42400

08007c64 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007c64:	b580      	push	{r7, lr}
 8007c66:	b082      	sub	sp, #8
 8007c68:	af00      	add	r7, sp, #0
 8007c6a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	d101      	bne.n	8007c76 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007c72:	2301      	movs	r3, #1
 8007c74:	e113      	b.n	8007e9e <HAL_SPI_Init+0x23a>
  }

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	4a8b      	ldr	r2, [pc, #556]	; (8007ea8 <HAL_SPI_Init+0x244>)
 8007c7c:	4293      	cmp	r3, r2
 8007c7e:	d018      	beq.n	8007cb2 <HAL_SPI_Init+0x4e>
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	4a89      	ldr	r2, [pc, #548]	; (8007eac <HAL_SPI_Init+0x248>)
 8007c86:	4293      	cmp	r3, r2
 8007c88:	d013      	beq.n	8007cb2 <HAL_SPI_Init+0x4e>
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	4a88      	ldr	r2, [pc, #544]	; (8007eb0 <HAL_SPI_Init+0x24c>)
 8007c90:	4293      	cmp	r3, r2
 8007c92:	d00e      	beq.n	8007cb2 <HAL_SPI_Init+0x4e>
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	4a86      	ldr	r2, [pc, #536]	; (8007eb4 <HAL_SPI_Init+0x250>)
 8007c9a:	4293      	cmp	r3, r2
 8007c9c:	d009      	beq.n	8007cb2 <HAL_SPI_Init+0x4e>
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	4a85      	ldr	r2, [pc, #532]	; (8007eb8 <HAL_SPI_Init+0x254>)
 8007ca4:	4293      	cmp	r3, r2
 8007ca6:	d004      	beq.n	8007cb2 <HAL_SPI_Init+0x4e>
 8007ca8:	f44f 71a1 	mov.w	r1, #322	; 0x142
 8007cac:	4883      	ldr	r0, [pc, #524]	; (8007ebc <HAL_SPI_Init+0x258>)
 8007cae:	f7fa fa84 	bl	80021ba <assert_failed>
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	685b      	ldr	r3, [r3, #4]
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	d009      	beq.n	8007cce <HAL_SPI_Init+0x6a>
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	685b      	ldr	r3, [r3, #4]
 8007cbe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007cc2:	d004      	beq.n	8007cce <HAL_SPI_Init+0x6a>
 8007cc4:	f240 1143 	movw	r1, #323	; 0x143
 8007cc8:	487c      	ldr	r0, [pc, #496]	; (8007ebc <HAL_SPI_Init+0x258>)
 8007cca:	f7fa fa76 	bl	80021ba <assert_failed>
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	689b      	ldr	r3, [r3, #8]
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	d00e      	beq.n	8007cf4 <HAL_SPI_Init+0x90>
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	689b      	ldr	r3, [r3, #8]
 8007cda:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007cde:	d009      	beq.n	8007cf4 <HAL_SPI_Init+0x90>
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	689b      	ldr	r3, [r3, #8]
 8007ce4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007ce8:	d004      	beq.n	8007cf4 <HAL_SPI_Init+0x90>
 8007cea:	f44f 71a2 	mov.w	r1, #324	; 0x144
 8007cee:	4873      	ldr	r0, [pc, #460]	; (8007ebc <HAL_SPI_Init+0x258>)
 8007cf0:	f7fa fa63 	bl	80021ba <assert_failed>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	68db      	ldr	r3, [r3, #12]
 8007cf8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007cfc:	d008      	beq.n	8007d10 <HAL_SPI_Init+0xac>
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	68db      	ldr	r3, [r3, #12]
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	d004      	beq.n	8007d10 <HAL_SPI_Init+0xac>
 8007d06:	f240 1145 	movw	r1, #325	; 0x145
 8007d0a:	486c      	ldr	r0, [pc, #432]	; (8007ebc <HAL_SPI_Init+0x258>)
 8007d0c:	f7fa fa55 	bl	80021ba <assert_failed>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	699b      	ldr	r3, [r3, #24]
 8007d14:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007d18:	d00d      	beq.n	8007d36 <HAL_SPI_Init+0xd2>
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	699b      	ldr	r3, [r3, #24]
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d009      	beq.n	8007d36 <HAL_SPI_Init+0xd2>
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	699b      	ldr	r3, [r3, #24]
 8007d26:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007d2a:	d004      	beq.n	8007d36 <HAL_SPI_Init+0xd2>
 8007d2c:	f44f 71a3 	mov.w	r1, #326	; 0x146
 8007d30:	4862      	ldr	r0, [pc, #392]	; (8007ebc <HAL_SPI_Init+0x258>)
 8007d32:	f7fa fa42 	bl	80021ba <assert_failed>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	69db      	ldr	r3, [r3, #28]
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	d020      	beq.n	8007d80 <HAL_SPI_Init+0x11c>
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	69db      	ldr	r3, [r3, #28]
 8007d42:	2b08      	cmp	r3, #8
 8007d44:	d01c      	beq.n	8007d80 <HAL_SPI_Init+0x11c>
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	69db      	ldr	r3, [r3, #28]
 8007d4a:	2b10      	cmp	r3, #16
 8007d4c:	d018      	beq.n	8007d80 <HAL_SPI_Init+0x11c>
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	69db      	ldr	r3, [r3, #28]
 8007d52:	2b18      	cmp	r3, #24
 8007d54:	d014      	beq.n	8007d80 <HAL_SPI_Init+0x11c>
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	69db      	ldr	r3, [r3, #28]
 8007d5a:	2b20      	cmp	r3, #32
 8007d5c:	d010      	beq.n	8007d80 <HAL_SPI_Init+0x11c>
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	69db      	ldr	r3, [r3, #28]
 8007d62:	2b28      	cmp	r3, #40	; 0x28
 8007d64:	d00c      	beq.n	8007d80 <HAL_SPI_Init+0x11c>
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	69db      	ldr	r3, [r3, #28]
 8007d6a:	2b30      	cmp	r3, #48	; 0x30
 8007d6c:	d008      	beq.n	8007d80 <HAL_SPI_Init+0x11c>
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	69db      	ldr	r3, [r3, #28]
 8007d72:	2b38      	cmp	r3, #56	; 0x38
 8007d74:	d004      	beq.n	8007d80 <HAL_SPI_Init+0x11c>
 8007d76:	f240 1147 	movw	r1, #327	; 0x147
 8007d7a:	4850      	ldr	r0, [pc, #320]	; (8007ebc <HAL_SPI_Init+0x258>)
 8007d7c:	f7fa fa1d 	bl	80021ba <assert_failed>
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	6a1b      	ldr	r3, [r3, #32]
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	d008      	beq.n	8007d9a <HAL_SPI_Init+0x136>
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	6a1b      	ldr	r3, [r3, #32]
 8007d8c:	2b80      	cmp	r3, #128	; 0x80
 8007d8e:	d004      	beq.n	8007d9a <HAL_SPI_Init+0x136>
 8007d90:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8007d94:	4849      	ldr	r0, [pc, #292]	; (8007ebc <HAL_SPI_Init+0x258>)
 8007d96:	f7fa fa10 	bl	80021ba <assert_failed>
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	d008      	beq.n	8007db4 <HAL_SPI_Init+0x150>
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007da6:	2b10      	cmp	r3, #16
 8007da8:	d004      	beq.n	8007db4 <HAL_SPI_Init+0x150>
 8007daa:	f240 1149 	movw	r1, #329	; 0x149
 8007dae:	4843      	ldr	r0, [pc, #268]	; (8007ebc <HAL_SPI_Init+0x258>)
 8007db0:	f7fa fa03 	bl	80021ba <assert_failed>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	d119      	bne.n	8007df0 <HAL_SPI_Init+0x18c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	691b      	ldr	r3, [r3, #16]
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	d008      	beq.n	8007dd6 <HAL_SPI_Init+0x172>
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	691b      	ldr	r3, [r3, #16]
 8007dc8:	2b02      	cmp	r3, #2
 8007dca:	d004      	beq.n	8007dd6 <HAL_SPI_Init+0x172>
 8007dcc:	f44f 71a6 	mov.w	r1, #332	; 0x14c
 8007dd0:	483a      	ldr	r0, [pc, #232]	; (8007ebc <HAL_SPI_Init+0x258>)
 8007dd2:	f7fa f9f2 	bl	80021ba <assert_failed>
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	695b      	ldr	r3, [r3, #20]
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	d008      	beq.n	8007df0 <HAL_SPI_Init+0x18c>
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	695b      	ldr	r3, [r3, #20]
 8007de2:	2b01      	cmp	r3, #1
 8007de4:	d004      	beq.n	8007df0 <HAL_SPI_Init+0x18c>
 8007de6:	f240 114d 	movw	r1, #333	; 0x14d
 8007dea:	4834      	ldr	r0, [pc, #208]	; (8007ebc <HAL_SPI_Init+0x258>)
 8007dec:	f7fa f9e5 	bl	80021ba <assert_failed>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	2200      	movs	r2, #0
 8007df4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007dfc:	b2db      	uxtb	r3, r3
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	d106      	bne.n	8007e10 <HAL_SPI_Init+0x1ac>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	2200      	movs	r2, #0
 8007e06:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007e0a:	6878      	ldr	r0, [r7, #4]
 8007e0c:	f7fa fa16 	bl	800223c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	2202      	movs	r2, #2
 8007e14:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	681a      	ldr	r2, [r3, #0]
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007e26:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	685a      	ldr	r2, [r3, #4]
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	689b      	ldr	r3, [r3, #8]
 8007e30:	431a      	orrs	r2, r3
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	68db      	ldr	r3, [r3, #12]
 8007e36:	431a      	orrs	r2, r3
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	691b      	ldr	r3, [r3, #16]
 8007e3c:	431a      	orrs	r2, r3
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	695b      	ldr	r3, [r3, #20]
 8007e42:	431a      	orrs	r2, r3
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	699b      	ldr	r3, [r3, #24]
 8007e48:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007e4c:	431a      	orrs	r2, r3
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	69db      	ldr	r3, [r3, #28]
 8007e52:	431a      	orrs	r2, r3
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	6a1b      	ldr	r3, [r3, #32]
 8007e58:	ea42 0103 	orr.w	r1, r2, r3
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	430a      	orrs	r2, r1
 8007e66:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	699b      	ldr	r3, [r3, #24]
 8007e6c:	0c1b      	lsrs	r3, r3, #16
 8007e6e:	f003 0104 	and.w	r1, r3, #4
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	430a      	orrs	r2, r1
 8007e7c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	69da      	ldr	r2, [r3, #28]
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007e8c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	2200      	movs	r2, #0
 8007e92:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	2201      	movs	r2, #1
 8007e98:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8007e9c:	2300      	movs	r3, #0
}
 8007e9e:	4618      	mov	r0, r3
 8007ea0:	3708      	adds	r7, #8
 8007ea2:	46bd      	mov	sp, r7
 8007ea4:	bd80      	pop	{r7, pc}
 8007ea6:	bf00      	nop
 8007ea8:	40013000 	.word	0x40013000
 8007eac:	40003800 	.word	0x40003800
 8007eb0:	40003c00 	.word	0x40003c00
 8007eb4:	40013400 	.word	0x40013400
 8007eb8:	40015000 	.word	0x40015000
 8007ebc:	0800fbcc 	.word	0x0800fbcc

08007ec0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007ec0:	b580      	push	{r7, lr}
 8007ec2:	b082      	sub	sp, #8
 8007ec4:	af00      	add	r7, sp, #0
 8007ec6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	d101      	bne.n	8007ed2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007ece:	2301      	movs	r3, #1
 8007ed0:	e083      	b.n	8007fda <HAL_TIM_Base_Init+0x11a>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	4a43      	ldr	r2, [pc, #268]	; (8007fe4 <HAL_TIM_Base_Init+0x124>)
 8007ed8:	4293      	cmp	r3, r2
 8007eda:	d027      	beq.n	8007f2c <HAL_TIM_Base_Init+0x6c>
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007ee4:	d022      	beq.n	8007f2c <HAL_TIM_Base_Init+0x6c>
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	4a3f      	ldr	r2, [pc, #252]	; (8007fe8 <HAL_TIM_Base_Init+0x128>)
 8007eec:	4293      	cmp	r3, r2
 8007eee:	d01d      	beq.n	8007f2c <HAL_TIM_Base_Init+0x6c>
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	4a3d      	ldr	r2, [pc, #244]	; (8007fec <HAL_TIM_Base_Init+0x12c>)
 8007ef6:	4293      	cmp	r3, r2
 8007ef8:	d018      	beq.n	8007f2c <HAL_TIM_Base_Init+0x6c>
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	4a3c      	ldr	r2, [pc, #240]	; (8007ff0 <HAL_TIM_Base_Init+0x130>)
 8007f00:	4293      	cmp	r3, r2
 8007f02:	d013      	beq.n	8007f2c <HAL_TIM_Base_Init+0x6c>
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	4a3a      	ldr	r2, [pc, #232]	; (8007ff4 <HAL_TIM_Base_Init+0x134>)
 8007f0a:	4293      	cmp	r3, r2
 8007f0c:	d00e      	beq.n	8007f2c <HAL_TIM_Base_Init+0x6c>
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	4a39      	ldr	r2, [pc, #228]	; (8007ff8 <HAL_TIM_Base_Init+0x138>)
 8007f14:	4293      	cmp	r3, r2
 8007f16:	d009      	beq.n	8007f2c <HAL_TIM_Base_Init+0x6c>
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	4a37      	ldr	r2, [pc, #220]	; (8007ffc <HAL_TIM_Base_Init+0x13c>)
 8007f1e:	4293      	cmp	r3, r2
 8007f20:	d004      	beq.n	8007f2c <HAL_TIM_Base_Init+0x6c>
 8007f22:	f44f 7189 	mov.w	r1, #274	; 0x112
 8007f26:	4836      	ldr	r0, [pc, #216]	; (8008000 <HAL_TIM_Base_Init+0x140>)
 8007f28:	f7fa f947 	bl	80021ba <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	689b      	ldr	r3, [r3, #8]
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	d014      	beq.n	8007f5e <HAL_TIM_Base_Init+0x9e>
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	689b      	ldr	r3, [r3, #8]
 8007f38:	2b10      	cmp	r3, #16
 8007f3a:	d010      	beq.n	8007f5e <HAL_TIM_Base_Init+0x9e>
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	689b      	ldr	r3, [r3, #8]
 8007f40:	2b20      	cmp	r3, #32
 8007f42:	d00c      	beq.n	8007f5e <HAL_TIM_Base_Init+0x9e>
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	689b      	ldr	r3, [r3, #8]
 8007f48:	2b40      	cmp	r3, #64	; 0x40
 8007f4a:	d008      	beq.n	8007f5e <HAL_TIM_Base_Init+0x9e>
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	689b      	ldr	r3, [r3, #8]
 8007f50:	2b60      	cmp	r3, #96	; 0x60
 8007f52:	d004      	beq.n	8007f5e <HAL_TIM_Base_Init+0x9e>
 8007f54:	f240 1113 	movw	r1, #275	; 0x113
 8007f58:	4829      	ldr	r0, [pc, #164]	; (8008000 <HAL_TIM_Base_Init+0x140>)
 8007f5a:	f7fa f92e 	bl	80021ba <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	691b      	ldr	r3, [r3, #16]
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	d00e      	beq.n	8007f84 <HAL_TIM_Base_Init+0xc4>
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	691b      	ldr	r3, [r3, #16]
 8007f6a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007f6e:	d009      	beq.n	8007f84 <HAL_TIM_Base_Init+0xc4>
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	691b      	ldr	r3, [r3, #16]
 8007f74:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007f78:	d004      	beq.n	8007f84 <HAL_TIM_Base_Init+0xc4>
 8007f7a:	f44f 718a 	mov.w	r1, #276	; 0x114
 8007f7e:	4820      	ldr	r0, [pc, #128]	; (8008000 <HAL_TIM_Base_Init+0x140>)
 8007f80:	f7fa f91b 	bl	80021ba <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	699b      	ldr	r3, [r3, #24]
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	d008      	beq.n	8007f9e <HAL_TIM_Base_Init+0xde>
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	699b      	ldr	r3, [r3, #24]
 8007f90:	2b80      	cmp	r3, #128	; 0x80
 8007f92:	d004      	beq.n	8007f9e <HAL_TIM_Base_Init+0xde>
 8007f94:	f240 1115 	movw	r1, #277	; 0x115
 8007f98:	4819      	ldr	r0, [pc, #100]	; (8008000 <HAL_TIM_Base_Init+0x140>)
 8007f9a:	f7fa f90e 	bl	80021ba <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007fa4:	b2db      	uxtb	r3, r3
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	d106      	bne.n	8007fb8 <HAL_TIM_Base_Init+0xf8>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	2200      	movs	r2, #0
 8007fae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007fb2:	6878      	ldr	r0, [r7, #4]
 8007fb4:	f7fa faec 	bl	8002590 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	2202      	movs	r2, #2
 8007fbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	681a      	ldr	r2, [r3, #0]
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	3304      	adds	r3, #4
 8007fc8:	4619      	mov	r1, r3
 8007fca:	4610      	mov	r0, r2
 8007fcc:	f000 fe1c 	bl	8008c08 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	2201      	movs	r2, #1
 8007fd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007fd8:	2300      	movs	r3, #0
}
 8007fda:	4618      	mov	r0, r3
 8007fdc:	3708      	adds	r7, #8
 8007fde:	46bd      	mov	sp, r7
 8007fe0:	bd80      	pop	{r7, pc}
 8007fe2:	bf00      	nop
 8007fe4:	40010000 	.word	0x40010000
 8007fe8:	40000400 	.word	0x40000400
 8007fec:	40000800 	.word	0x40000800
 8007ff0:	40000c00 	.word	0x40000c00
 8007ff4:	40014000 	.word	0x40014000
 8007ff8:	40014400 	.word	0x40014400
 8007ffc:	40014800 	.word	0x40014800
 8008000:	0800fc04 	.word	0x0800fc04

08008004 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008004:	b580      	push	{r7, lr}
 8008006:	b082      	sub	sp, #8
 8008008:	af00      	add	r7, sp, #0
 800800a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	2b00      	cmp	r3, #0
 8008010:	d101      	bne.n	8008016 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8008012:	2301      	movs	r3, #1
 8008014:	e083      	b.n	800811e <HAL_TIM_PWM_Init+0x11a>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	4a43      	ldr	r2, [pc, #268]	; (8008128 <HAL_TIM_PWM_Init+0x124>)
 800801c:	4293      	cmp	r3, r2
 800801e:	d027      	beq.n	8008070 <HAL_TIM_PWM_Init+0x6c>
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008028:	d022      	beq.n	8008070 <HAL_TIM_PWM_Init+0x6c>
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	4a3f      	ldr	r2, [pc, #252]	; (800812c <HAL_TIM_PWM_Init+0x128>)
 8008030:	4293      	cmp	r3, r2
 8008032:	d01d      	beq.n	8008070 <HAL_TIM_PWM_Init+0x6c>
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	4a3d      	ldr	r2, [pc, #244]	; (8008130 <HAL_TIM_PWM_Init+0x12c>)
 800803a:	4293      	cmp	r3, r2
 800803c:	d018      	beq.n	8008070 <HAL_TIM_PWM_Init+0x6c>
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	4a3c      	ldr	r2, [pc, #240]	; (8008134 <HAL_TIM_PWM_Init+0x130>)
 8008044:	4293      	cmp	r3, r2
 8008046:	d013      	beq.n	8008070 <HAL_TIM_PWM_Init+0x6c>
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	4a3a      	ldr	r2, [pc, #232]	; (8008138 <HAL_TIM_PWM_Init+0x134>)
 800804e:	4293      	cmp	r3, r2
 8008050:	d00e      	beq.n	8008070 <HAL_TIM_PWM_Init+0x6c>
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	4a39      	ldr	r2, [pc, #228]	; (800813c <HAL_TIM_PWM_Init+0x138>)
 8008058:	4293      	cmp	r3, r2
 800805a:	d009      	beq.n	8008070 <HAL_TIM_PWM_Init+0x6c>
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	4a37      	ldr	r2, [pc, #220]	; (8008140 <HAL_TIM_PWM_Init+0x13c>)
 8008062:	4293      	cmp	r3, r2
 8008064:	d004      	beq.n	8008070 <HAL_TIM_PWM_Init+0x6c>
 8008066:	f240 419b 	movw	r1, #1179	; 0x49b
 800806a:	4836      	ldr	r0, [pc, #216]	; (8008144 <HAL_TIM_PWM_Init+0x140>)
 800806c:	f7fa f8a5 	bl	80021ba <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	689b      	ldr	r3, [r3, #8]
 8008074:	2b00      	cmp	r3, #0
 8008076:	d014      	beq.n	80080a2 <HAL_TIM_PWM_Init+0x9e>
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	689b      	ldr	r3, [r3, #8]
 800807c:	2b10      	cmp	r3, #16
 800807e:	d010      	beq.n	80080a2 <HAL_TIM_PWM_Init+0x9e>
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	689b      	ldr	r3, [r3, #8]
 8008084:	2b20      	cmp	r3, #32
 8008086:	d00c      	beq.n	80080a2 <HAL_TIM_PWM_Init+0x9e>
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	689b      	ldr	r3, [r3, #8]
 800808c:	2b40      	cmp	r3, #64	; 0x40
 800808e:	d008      	beq.n	80080a2 <HAL_TIM_PWM_Init+0x9e>
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	689b      	ldr	r3, [r3, #8]
 8008094:	2b60      	cmp	r3, #96	; 0x60
 8008096:	d004      	beq.n	80080a2 <HAL_TIM_PWM_Init+0x9e>
 8008098:	f240 419c 	movw	r1, #1180	; 0x49c
 800809c:	4829      	ldr	r0, [pc, #164]	; (8008144 <HAL_TIM_PWM_Init+0x140>)
 800809e:	f7fa f88c 	bl	80021ba <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	691b      	ldr	r3, [r3, #16]
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	d00e      	beq.n	80080c8 <HAL_TIM_PWM_Init+0xc4>
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	691b      	ldr	r3, [r3, #16]
 80080ae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80080b2:	d009      	beq.n	80080c8 <HAL_TIM_PWM_Init+0xc4>
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	691b      	ldr	r3, [r3, #16]
 80080b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80080bc:	d004      	beq.n	80080c8 <HAL_TIM_PWM_Init+0xc4>
 80080be:	f240 419d 	movw	r1, #1181	; 0x49d
 80080c2:	4820      	ldr	r0, [pc, #128]	; (8008144 <HAL_TIM_PWM_Init+0x140>)
 80080c4:	f7fa f879 	bl	80021ba <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	699b      	ldr	r3, [r3, #24]
 80080cc:	2b00      	cmp	r3, #0
 80080ce:	d008      	beq.n	80080e2 <HAL_TIM_PWM_Init+0xde>
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	699b      	ldr	r3, [r3, #24]
 80080d4:	2b80      	cmp	r3, #128	; 0x80
 80080d6:	d004      	beq.n	80080e2 <HAL_TIM_PWM_Init+0xde>
 80080d8:	f240 419e 	movw	r1, #1182	; 0x49e
 80080dc:	4819      	ldr	r0, [pc, #100]	; (8008144 <HAL_TIM_PWM_Init+0x140>)
 80080de:	f7fa f86c 	bl	80021ba <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80080e8:	b2db      	uxtb	r3, r3
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	d106      	bne.n	80080fc <HAL_TIM_PWM_Init+0xf8>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	2200      	movs	r2, #0
 80080f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80080f6:	6878      	ldr	r0, [r7, #4]
 80080f8:	f000 f826 	bl	8008148 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	2202      	movs	r2, #2
 8008100:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	681a      	ldr	r2, [r3, #0]
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	3304      	adds	r3, #4
 800810c:	4619      	mov	r1, r3
 800810e:	4610      	mov	r0, r2
 8008110:	f000 fd7a 	bl	8008c08 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	2201      	movs	r2, #1
 8008118:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800811c:	2300      	movs	r3, #0
}
 800811e:	4618      	mov	r0, r3
 8008120:	3708      	adds	r7, #8
 8008122:	46bd      	mov	sp, r7
 8008124:	bd80      	pop	{r7, pc}
 8008126:	bf00      	nop
 8008128:	40010000 	.word	0x40010000
 800812c:	40000400 	.word	0x40000400
 8008130:	40000800 	.word	0x40000800
 8008134:	40000c00 	.word	0x40000c00
 8008138:	40014000 	.word	0x40014000
 800813c:	40014400 	.word	0x40014400
 8008140:	40014800 	.word	0x40014800
 8008144:	0800fc04 	.word	0x0800fc04

08008148 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8008148:	b480      	push	{r7}
 800814a:	b083      	sub	sp, #12
 800814c:	af00      	add	r7, sp, #0
 800814e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8008150:	bf00      	nop
 8008152:	370c      	adds	r7, #12
 8008154:	46bd      	mov	sp, r7
 8008156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800815a:	4770      	bx	lr

0800815c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800815c:	b580      	push	{r7, lr}
 800815e:	b084      	sub	sp, #16
 8008160:	af00      	add	r7, sp, #0
 8008162:	6078      	str	r0, [r7, #4]
 8008164:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	4a4e      	ldr	r2, [pc, #312]	; (80082a4 <HAL_TIM_PWM_Start+0x148>)
 800816c:	4293      	cmp	r3, r2
 800816e:	d10b      	bne.n	8008188 <HAL_TIM_PWM_Start+0x2c>
 8008170:	683b      	ldr	r3, [r7, #0]
 8008172:	2b00      	cmp	r3, #0
 8008174:	d06c      	beq.n	8008250 <HAL_TIM_PWM_Start+0xf4>
 8008176:	683b      	ldr	r3, [r7, #0]
 8008178:	2b04      	cmp	r3, #4
 800817a:	d069      	beq.n	8008250 <HAL_TIM_PWM_Start+0xf4>
 800817c:	683b      	ldr	r3, [r7, #0]
 800817e:	2b08      	cmp	r3, #8
 8008180:	d066      	beq.n	8008250 <HAL_TIM_PWM_Start+0xf4>
 8008182:	683b      	ldr	r3, [r7, #0]
 8008184:	2b0c      	cmp	r3, #12
 8008186:	d063      	beq.n	8008250 <HAL_TIM_PWM_Start+0xf4>
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008190:	d10b      	bne.n	80081aa <HAL_TIM_PWM_Start+0x4e>
 8008192:	683b      	ldr	r3, [r7, #0]
 8008194:	2b00      	cmp	r3, #0
 8008196:	d05b      	beq.n	8008250 <HAL_TIM_PWM_Start+0xf4>
 8008198:	683b      	ldr	r3, [r7, #0]
 800819a:	2b04      	cmp	r3, #4
 800819c:	d058      	beq.n	8008250 <HAL_TIM_PWM_Start+0xf4>
 800819e:	683b      	ldr	r3, [r7, #0]
 80081a0:	2b08      	cmp	r3, #8
 80081a2:	d055      	beq.n	8008250 <HAL_TIM_PWM_Start+0xf4>
 80081a4:	683b      	ldr	r3, [r7, #0]
 80081a6:	2b0c      	cmp	r3, #12
 80081a8:	d052      	beq.n	8008250 <HAL_TIM_PWM_Start+0xf4>
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	4a3e      	ldr	r2, [pc, #248]	; (80082a8 <HAL_TIM_PWM_Start+0x14c>)
 80081b0:	4293      	cmp	r3, r2
 80081b2:	d10b      	bne.n	80081cc <HAL_TIM_PWM_Start+0x70>
 80081b4:	683b      	ldr	r3, [r7, #0]
 80081b6:	2b00      	cmp	r3, #0
 80081b8:	d04a      	beq.n	8008250 <HAL_TIM_PWM_Start+0xf4>
 80081ba:	683b      	ldr	r3, [r7, #0]
 80081bc:	2b04      	cmp	r3, #4
 80081be:	d047      	beq.n	8008250 <HAL_TIM_PWM_Start+0xf4>
 80081c0:	683b      	ldr	r3, [r7, #0]
 80081c2:	2b08      	cmp	r3, #8
 80081c4:	d044      	beq.n	8008250 <HAL_TIM_PWM_Start+0xf4>
 80081c6:	683b      	ldr	r3, [r7, #0]
 80081c8:	2b0c      	cmp	r3, #12
 80081ca:	d041      	beq.n	8008250 <HAL_TIM_PWM_Start+0xf4>
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	4a36      	ldr	r2, [pc, #216]	; (80082ac <HAL_TIM_PWM_Start+0x150>)
 80081d2:	4293      	cmp	r3, r2
 80081d4:	d10b      	bne.n	80081ee <HAL_TIM_PWM_Start+0x92>
 80081d6:	683b      	ldr	r3, [r7, #0]
 80081d8:	2b00      	cmp	r3, #0
 80081da:	d039      	beq.n	8008250 <HAL_TIM_PWM_Start+0xf4>
 80081dc:	683b      	ldr	r3, [r7, #0]
 80081de:	2b04      	cmp	r3, #4
 80081e0:	d036      	beq.n	8008250 <HAL_TIM_PWM_Start+0xf4>
 80081e2:	683b      	ldr	r3, [r7, #0]
 80081e4:	2b08      	cmp	r3, #8
 80081e6:	d033      	beq.n	8008250 <HAL_TIM_PWM_Start+0xf4>
 80081e8:	683b      	ldr	r3, [r7, #0]
 80081ea:	2b0c      	cmp	r3, #12
 80081ec:	d030      	beq.n	8008250 <HAL_TIM_PWM_Start+0xf4>
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	4a2f      	ldr	r2, [pc, #188]	; (80082b0 <HAL_TIM_PWM_Start+0x154>)
 80081f4:	4293      	cmp	r3, r2
 80081f6:	d10b      	bne.n	8008210 <HAL_TIM_PWM_Start+0xb4>
 80081f8:	683b      	ldr	r3, [r7, #0]
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	d028      	beq.n	8008250 <HAL_TIM_PWM_Start+0xf4>
 80081fe:	683b      	ldr	r3, [r7, #0]
 8008200:	2b04      	cmp	r3, #4
 8008202:	d025      	beq.n	8008250 <HAL_TIM_PWM_Start+0xf4>
 8008204:	683b      	ldr	r3, [r7, #0]
 8008206:	2b08      	cmp	r3, #8
 8008208:	d022      	beq.n	8008250 <HAL_TIM_PWM_Start+0xf4>
 800820a:	683b      	ldr	r3, [r7, #0]
 800820c:	2b0c      	cmp	r3, #12
 800820e:	d01f      	beq.n	8008250 <HAL_TIM_PWM_Start+0xf4>
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	4a27      	ldr	r2, [pc, #156]	; (80082b4 <HAL_TIM_PWM_Start+0x158>)
 8008216:	4293      	cmp	r3, r2
 8008218:	d105      	bne.n	8008226 <HAL_TIM_PWM_Start+0xca>
 800821a:	683b      	ldr	r3, [r7, #0]
 800821c:	2b00      	cmp	r3, #0
 800821e:	d017      	beq.n	8008250 <HAL_TIM_PWM_Start+0xf4>
 8008220:	683b      	ldr	r3, [r7, #0]
 8008222:	2b04      	cmp	r3, #4
 8008224:	d014      	beq.n	8008250 <HAL_TIM_PWM_Start+0xf4>
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	4a23      	ldr	r2, [pc, #140]	; (80082b8 <HAL_TIM_PWM_Start+0x15c>)
 800822c:	4293      	cmp	r3, r2
 800822e:	d102      	bne.n	8008236 <HAL_TIM_PWM_Start+0xda>
 8008230:	683b      	ldr	r3, [r7, #0]
 8008232:	2b00      	cmp	r3, #0
 8008234:	d00c      	beq.n	8008250 <HAL_TIM_PWM_Start+0xf4>
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	4a20      	ldr	r2, [pc, #128]	; (80082bc <HAL_TIM_PWM_Start+0x160>)
 800823c:	4293      	cmp	r3, r2
 800823e:	d102      	bne.n	8008246 <HAL_TIM_PWM_Start+0xea>
 8008240:	683b      	ldr	r3, [r7, #0]
 8008242:	2b00      	cmp	r3, #0
 8008244:	d004      	beq.n	8008250 <HAL_TIM_PWM_Start+0xf4>
 8008246:	f240 5113 	movw	r1, #1299	; 0x513
 800824a:	481d      	ldr	r0, [pc, #116]	; (80082c0 <HAL_TIM_PWM_Start+0x164>)
 800824c:	f7f9 ffb5 	bl	80021ba <assert_failed>

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	2201      	movs	r2, #1
 8008256:	6839      	ldr	r1, [r7, #0]
 8008258:	4618      	mov	r0, r3
 800825a:	f001 f805 	bl	8009268 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	4a10      	ldr	r2, [pc, #64]	; (80082a4 <HAL_TIM_PWM_Start+0x148>)
 8008264:	4293      	cmp	r3, r2
 8008266:	d107      	bne.n	8008278 <HAL_TIM_PWM_Start+0x11c>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008276:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	689b      	ldr	r3, [r3, #8]
 800827e:	f003 0307 	and.w	r3, r3, #7
 8008282:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008284:	68fb      	ldr	r3, [r7, #12]
 8008286:	2b06      	cmp	r3, #6
 8008288:	d007      	beq.n	800829a <HAL_TIM_PWM_Start+0x13e>
  {
    __HAL_TIM_ENABLE(htim);
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	681a      	ldr	r2, [r3, #0]
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	f042 0201 	orr.w	r2, r2, #1
 8008298:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800829a:	2300      	movs	r3, #0
}
 800829c:	4618      	mov	r0, r3
 800829e:	3710      	adds	r7, #16
 80082a0:	46bd      	mov	sp, r7
 80082a2:	bd80      	pop	{r7, pc}
 80082a4:	40010000 	.word	0x40010000
 80082a8:	40000400 	.word	0x40000400
 80082ac:	40000800 	.word	0x40000800
 80082b0:	40000c00 	.word	0x40000c00
 80082b4:	40014000 	.word	0x40014000
 80082b8:	40014400 	.word	0x40014400
 80082bc:	40014800 	.word	0x40014800
 80082c0:	0800fc04 	.word	0x0800fc04

080082c4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80082c4:	b580      	push	{r7, lr}
 80082c6:	b084      	sub	sp, #16
 80082c8:	af00      	add	r7, sp, #0
 80082ca:	60f8      	str	r0, [r7, #12]
 80082cc:	60b9      	str	r1, [r7, #8]
 80082ce:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_CHANNELS(Channel));
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	d010      	beq.n	80082f8 <HAL_TIM_PWM_ConfigChannel+0x34>
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	2b04      	cmp	r3, #4
 80082da:	d00d      	beq.n	80082f8 <HAL_TIM_PWM_ConfigChannel+0x34>
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	2b08      	cmp	r3, #8
 80082e0:	d00a      	beq.n	80082f8 <HAL_TIM_PWM_ConfigChannel+0x34>
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	2b0c      	cmp	r3, #12
 80082e6:	d007      	beq.n	80082f8 <HAL_TIM_PWM_ConfigChannel+0x34>
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	2b3c      	cmp	r3, #60	; 0x3c
 80082ec:	d004      	beq.n	80082f8 <HAL_TIM_PWM_ConfigChannel+0x34>
 80082ee:	f640 51ec 	movw	r1, #3564	; 0xdec
 80082f2:	4895      	ldr	r0, [pc, #596]	; (8008548 <HAL_TIM_PWM_ConfigChannel+0x284>)
 80082f4:	f7f9 ff61 	bl	80021ba <assert_failed>
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
 80082f8:	68bb      	ldr	r3, [r7, #8]
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	2b60      	cmp	r3, #96	; 0x60
 80082fe:	d008      	beq.n	8008312 <HAL_TIM_PWM_ConfigChannel+0x4e>
 8008300:	68bb      	ldr	r3, [r7, #8]
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	2b70      	cmp	r3, #112	; 0x70
 8008306:	d004      	beq.n	8008312 <HAL_TIM_PWM_ConfigChannel+0x4e>
 8008308:	f640 51ed 	movw	r1, #3565	; 0xded
 800830c:	488e      	ldr	r0, [pc, #568]	; (8008548 <HAL_TIM_PWM_ConfigChannel+0x284>)
 800830e:	f7f9 ff54 	bl	80021ba <assert_failed>
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
 8008312:	68bb      	ldr	r3, [r7, #8]
 8008314:	689b      	ldr	r3, [r3, #8]
 8008316:	2b00      	cmp	r3, #0
 8008318:	d008      	beq.n	800832c <HAL_TIM_PWM_ConfigChannel+0x68>
 800831a:	68bb      	ldr	r3, [r7, #8]
 800831c:	689b      	ldr	r3, [r3, #8]
 800831e:	2b02      	cmp	r3, #2
 8008320:	d004      	beq.n	800832c <HAL_TIM_PWM_ConfigChannel+0x68>
 8008322:	f640 51ee 	movw	r1, #3566	; 0xdee
 8008326:	4888      	ldr	r0, [pc, #544]	; (8008548 <HAL_TIM_PWM_ConfigChannel+0x284>)
 8008328:	f7f9 ff47 	bl	80021ba <assert_failed>
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));
 800832c:	68bb      	ldr	r3, [r7, #8]
 800832e:	691b      	ldr	r3, [r3, #16]
 8008330:	2b00      	cmp	r3, #0
 8008332:	d008      	beq.n	8008346 <HAL_TIM_PWM_ConfigChannel+0x82>
 8008334:	68bb      	ldr	r3, [r7, #8]
 8008336:	691b      	ldr	r3, [r3, #16]
 8008338:	2b04      	cmp	r3, #4
 800833a:	d004      	beq.n	8008346 <HAL_TIM_PWM_ConfigChannel+0x82>
 800833c:	f640 51ef 	movw	r1, #3567	; 0xdef
 8008340:	4881      	ldr	r0, [pc, #516]	; (8008548 <HAL_TIM_PWM_ConfigChannel+0x284>)
 8008342:	f7f9 ff3a 	bl	80021ba <assert_failed>

  /* Process Locked */
  __HAL_LOCK(htim);
 8008346:	68fb      	ldr	r3, [r7, #12]
 8008348:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800834c:	2b01      	cmp	r3, #1
 800834e:	d101      	bne.n	8008354 <HAL_TIM_PWM_ConfigChannel+0x90>
 8008350:	2302      	movs	r3, #2
 8008352:	e152      	b.n	80085fa <HAL_TIM_PWM_ConfigChannel+0x336>
 8008354:	68fb      	ldr	r3, [r7, #12]
 8008356:	2201      	movs	r2, #1
 8008358:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800835c:	68fb      	ldr	r3, [r7, #12]
 800835e:	2202      	movs	r2, #2
 8008360:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	2b0c      	cmp	r3, #12
 8008368:	f200 813d 	bhi.w	80085e6 <HAL_TIM_PWM_ConfigChannel+0x322>
 800836c:	a201      	add	r2, pc, #4	; (adr r2, 8008374 <HAL_TIM_PWM_ConfigChannel+0xb0>)
 800836e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008372:	bf00      	nop
 8008374:	080083a9 	.word	0x080083a9
 8008378:	080085e7 	.word	0x080085e7
 800837c:	080085e7 	.word	0x080085e7
 8008380:	080085e7 	.word	0x080085e7
 8008384:	08008443 	.word	0x08008443
 8008388:	080085e7 	.word	0x080085e7
 800838c:	080085e7 	.word	0x080085e7
 8008390:	080085e7 	.word	0x080085e7
 8008394:	080084cb 	.word	0x080084cb
 8008398:	080085e7 	.word	0x080085e7
 800839c:	080085e7 	.word	0x080085e7
 80083a0:	080085e7 	.word	0x080085e7
 80083a4:	08008569 	.word	0x08008569
  {
    case TIM_CHANNEL_1:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 80083a8:	68fb      	ldr	r3, [r7, #12]
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	4a67      	ldr	r2, [pc, #412]	; (800854c <HAL_TIM_PWM_ConfigChannel+0x288>)
 80083ae:	4293      	cmp	r3, r2
 80083b0:	d027      	beq.n	8008402 <HAL_TIM_PWM_ConfigChannel+0x13e>
 80083b2:	68fb      	ldr	r3, [r7, #12]
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80083ba:	d022      	beq.n	8008402 <HAL_TIM_PWM_ConfigChannel+0x13e>
 80083bc:	68fb      	ldr	r3, [r7, #12]
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	4a63      	ldr	r2, [pc, #396]	; (8008550 <HAL_TIM_PWM_ConfigChannel+0x28c>)
 80083c2:	4293      	cmp	r3, r2
 80083c4:	d01d      	beq.n	8008402 <HAL_TIM_PWM_ConfigChannel+0x13e>
 80083c6:	68fb      	ldr	r3, [r7, #12]
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	4a62      	ldr	r2, [pc, #392]	; (8008554 <HAL_TIM_PWM_ConfigChannel+0x290>)
 80083cc:	4293      	cmp	r3, r2
 80083ce:	d018      	beq.n	8008402 <HAL_TIM_PWM_ConfigChannel+0x13e>
 80083d0:	68fb      	ldr	r3, [r7, #12]
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	4a60      	ldr	r2, [pc, #384]	; (8008558 <HAL_TIM_PWM_ConfigChannel+0x294>)
 80083d6:	4293      	cmp	r3, r2
 80083d8:	d013      	beq.n	8008402 <HAL_TIM_PWM_ConfigChannel+0x13e>
 80083da:	68fb      	ldr	r3, [r7, #12]
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	4a5f      	ldr	r2, [pc, #380]	; (800855c <HAL_TIM_PWM_ConfigChannel+0x298>)
 80083e0:	4293      	cmp	r3, r2
 80083e2:	d00e      	beq.n	8008402 <HAL_TIM_PWM_ConfigChannel+0x13e>
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	4a5d      	ldr	r2, [pc, #372]	; (8008560 <HAL_TIM_PWM_ConfigChannel+0x29c>)
 80083ea:	4293      	cmp	r3, r2
 80083ec:	d009      	beq.n	8008402 <HAL_TIM_PWM_ConfigChannel+0x13e>
 80083ee:	68fb      	ldr	r3, [r7, #12]
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	4a5c      	ldr	r2, [pc, #368]	; (8008564 <HAL_TIM_PWM_ConfigChannel+0x2a0>)
 80083f4:	4293      	cmp	r3, r2
 80083f6:	d004      	beq.n	8008402 <HAL_TIM_PWM_ConfigChannel+0x13e>
 80083f8:	f640 51fb 	movw	r1, #3579	; 0xdfb
 80083fc:	4852      	ldr	r0, [pc, #328]	; (8008548 <HAL_TIM_PWM_ConfigChannel+0x284>)
 80083fe:	f7f9 fedc 	bl	80021ba <assert_failed>

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008402:	68fb      	ldr	r3, [r7, #12]
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	68b9      	ldr	r1, [r7, #8]
 8008408:	4618      	mov	r0, r3
 800840a:	f000 fc7d 	bl	8008d08 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800840e:	68fb      	ldr	r3, [r7, #12]
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	699a      	ldr	r2, [r3, #24]
 8008414:	68fb      	ldr	r3, [r7, #12]
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	f042 0208 	orr.w	r2, r2, #8
 800841c:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800841e:	68fb      	ldr	r3, [r7, #12]
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	699a      	ldr	r2, [r3, #24]
 8008424:	68fb      	ldr	r3, [r7, #12]
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	f022 0204 	bic.w	r2, r2, #4
 800842c:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800842e:	68fb      	ldr	r3, [r7, #12]
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	6999      	ldr	r1, [r3, #24]
 8008434:	68bb      	ldr	r3, [r7, #8]
 8008436:	691a      	ldr	r2, [r3, #16]
 8008438:	68fb      	ldr	r3, [r7, #12]
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	430a      	orrs	r2, r1
 800843e:	619a      	str	r2, [r3, #24]
      break;
 8008440:	e0d2      	b.n	80085e8 <HAL_TIM_PWM_ConfigChannel+0x324>
    }

    case TIM_CHANNEL_2:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 8008442:	68fb      	ldr	r3, [r7, #12]
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	4a41      	ldr	r2, [pc, #260]	; (800854c <HAL_TIM_PWM_ConfigChannel+0x288>)
 8008448:	4293      	cmp	r3, r2
 800844a:	d01d      	beq.n	8008488 <HAL_TIM_PWM_ConfigChannel+0x1c4>
 800844c:	68fb      	ldr	r3, [r7, #12]
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008454:	d018      	beq.n	8008488 <HAL_TIM_PWM_ConfigChannel+0x1c4>
 8008456:	68fb      	ldr	r3, [r7, #12]
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	4a3d      	ldr	r2, [pc, #244]	; (8008550 <HAL_TIM_PWM_ConfigChannel+0x28c>)
 800845c:	4293      	cmp	r3, r2
 800845e:	d013      	beq.n	8008488 <HAL_TIM_PWM_ConfigChannel+0x1c4>
 8008460:	68fb      	ldr	r3, [r7, #12]
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	4a3b      	ldr	r2, [pc, #236]	; (8008554 <HAL_TIM_PWM_ConfigChannel+0x290>)
 8008466:	4293      	cmp	r3, r2
 8008468:	d00e      	beq.n	8008488 <HAL_TIM_PWM_ConfigChannel+0x1c4>
 800846a:	68fb      	ldr	r3, [r7, #12]
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	4a3a      	ldr	r2, [pc, #232]	; (8008558 <HAL_TIM_PWM_ConfigChannel+0x294>)
 8008470:	4293      	cmp	r3, r2
 8008472:	d009      	beq.n	8008488 <HAL_TIM_PWM_ConfigChannel+0x1c4>
 8008474:	68fb      	ldr	r3, [r7, #12]
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	4a38      	ldr	r2, [pc, #224]	; (800855c <HAL_TIM_PWM_ConfigChannel+0x298>)
 800847a:	4293      	cmp	r3, r2
 800847c:	d004      	beq.n	8008488 <HAL_TIM_PWM_ConfigChannel+0x1c4>
 800847e:	f640 610c 	movw	r1, #3596	; 0xe0c
 8008482:	4831      	ldr	r0, [pc, #196]	; (8008548 <HAL_TIM_PWM_ConfigChannel+0x284>)
 8008484:	f7f9 fe99 	bl	80021ba <assert_failed>

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008488:	68fb      	ldr	r3, [r7, #12]
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	68b9      	ldr	r1, [r7, #8]
 800848e:	4618      	mov	r0, r3
 8008490:	f000 fcca 	bl	8008e28 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008494:	68fb      	ldr	r3, [r7, #12]
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	699a      	ldr	r2, [r3, #24]
 800849a:	68fb      	ldr	r3, [r7, #12]
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80084a2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80084a4:	68fb      	ldr	r3, [r7, #12]
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	699a      	ldr	r2, [r3, #24]
 80084aa:	68fb      	ldr	r3, [r7, #12]
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80084b2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80084b4:	68fb      	ldr	r3, [r7, #12]
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	6999      	ldr	r1, [r3, #24]
 80084ba:	68bb      	ldr	r3, [r7, #8]
 80084bc:	691b      	ldr	r3, [r3, #16]
 80084be:	021a      	lsls	r2, r3, #8
 80084c0:	68fb      	ldr	r3, [r7, #12]
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	430a      	orrs	r2, r1
 80084c6:	619a      	str	r2, [r3, #24]
      break;
 80084c8:	e08e      	b.n	80085e8 <HAL_TIM_PWM_ConfigChannel+0x324>
    }

    case TIM_CHANNEL_3:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
 80084ca:	68fb      	ldr	r3, [r7, #12]
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	4a1f      	ldr	r2, [pc, #124]	; (800854c <HAL_TIM_PWM_ConfigChannel+0x288>)
 80084d0:	4293      	cmp	r3, r2
 80084d2:	d018      	beq.n	8008506 <HAL_TIM_PWM_ConfigChannel+0x242>
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80084dc:	d013      	beq.n	8008506 <HAL_TIM_PWM_ConfigChannel+0x242>
 80084de:	68fb      	ldr	r3, [r7, #12]
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	4a1b      	ldr	r2, [pc, #108]	; (8008550 <HAL_TIM_PWM_ConfigChannel+0x28c>)
 80084e4:	4293      	cmp	r3, r2
 80084e6:	d00e      	beq.n	8008506 <HAL_TIM_PWM_ConfigChannel+0x242>
 80084e8:	68fb      	ldr	r3, [r7, #12]
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	4a19      	ldr	r2, [pc, #100]	; (8008554 <HAL_TIM_PWM_ConfigChannel+0x290>)
 80084ee:	4293      	cmp	r3, r2
 80084f0:	d009      	beq.n	8008506 <HAL_TIM_PWM_ConfigChannel+0x242>
 80084f2:	68fb      	ldr	r3, [r7, #12]
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	4a18      	ldr	r2, [pc, #96]	; (8008558 <HAL_TIM_PWM_ConfigChannel+0x294>)
 80084f8:	4293      	cmp	r3, r2
 80084fa:	d004      	beq.n	8008506 <HAL_TIM_PWM_ConfigChannel+0x242>
 80084fc:	f640 611d 	movw	r1, #3613	; 0xe1d
 8008500:	4811      	ldr	r0, [pc, #68]	; (8008548 <HAL_TIM_PWM_ConfigChannel+0x284>)
 8008502:	f7f9 fe5a 	bl	80021ba <assert_failed>

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008506:	68fb      	ldr	r3, [r7, #12]
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	68b9      	ldr	r1, [r7, #8]
 800850c:	4618      	mov	r0, r3
 800850e:	f000 fd1f 	bl	8008f50 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008512:	68fb      	ldr	r3, [r7, #12]
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	69da      	ldr	r2, [r3, #28]
 8008518:	68fb      	ldr	r3, [r7, #12]
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	f042 0208 	orr.w	r2, r2, #8
 8008520:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008522:	68fb      	ldr	r3, [r7, #12]
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	69da      	ldr	r2, [r3, #28]
 8008528:	68fb      	ldr	r3, [r7, #12]
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	f022 0204 	bic.w	r2, r2, #4
 8008530:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008532:	68fb      	ldr	r3, [r7, #12]
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	69d9      	ldr	r1, [r3, #28]
 8008538:	68bb      	ldr	r3, [r7, #8]
 800853a:	691a      	ldr	r2, [r3, #16]
 800853c:	68fb      	ldr	r3, [r7, #12]
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	430a      	orrs	r2, r1
 8008542:	61da      	str	r2, [r3, #28]
      break;
 8008544:	e050      	b.n	80085e8 <HAL_TIM_PWM_ConfigChannel+0x324>
 8008546:	bf00      	nop
 8008548:	0800fc04 	.word	0x0800fc04
 800854c:	40010000 	.word	0x40010000
 8008550:	40000400 	.word	0x40000400
 8008554:	40000800 	.word	0x40000800
 8008558:	40000c00 	.word	0x40000c00
 800855c:	40014000 	.word	0x40014000
 8008560:	40014400 	.word	0x40014400
 8008564:	40014800 	.word	0x40014800
    }

    case TIM_CHANNEL_4:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	4a25      	ldr	r2, [pc, #148]	; (8008604 <HAL_TIM_PWM_ConfigChannel+0x340>)
 800856e:	4293      	cmp	r3, r2
 8008570:	d018      	beq.n	80085a4 <HAL_TIM_PWM_ConfigChannel+0x2e0>
 8008572:	68fb      	ldr	r3, [r7, #12]
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800857a:	d013      	beq.n	80085a4 <HAL_TIM_PWM_ConfigChannel+0x2e0>
 800857c:	68fb      	ldr	r3, [r7, #12]
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	4a21      	ldr	r2, [pc, #132]	; (8008608 <HAL_TIM_PWM_ConfigChannel+0x344>)
 8008582:	4293      	cmp	r3, r2
 8008584:	d00e      	beq.n	80085a4 <HAL_TIM_PWM_ConfigChannel+0x2e0>
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	4a20      	ldr	r2, [pc, #128]	; (800860c <HAL_TIM_PWM_ConfigChannel+0x348>)
 800858c:	4293      	cmp	r3, r2
 800858e:	d009      	beq.n	80085a4 <HAL_TIM_PWM_ConfigChannel+0x2e0>
 8008590:	68fb      	ldr	r3, [r7, #12]
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	4a1e      	ldr	r2, [pc, #120]	; (8008610 <HAL_TIM_PWM_ConfigChannel+0x34c>)
 8008596:	4293      	cmp	r3, r2
 8008598:	d004      	beq.n	80085a4 <HAL_TIM_PWM_ConfigChannel+0x2e0>
 800859a:	f640 612e 	movw	r1, #3630	; 0xe2e
 800859e:	481d      	ldr	r0, [pc, #116]	; (8008614 <HAL_TIM_PWM_ConfigChannel+0x350>)
 80085a0:	f7f9 fe0b 	bl	80021ba <assert_failed>

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80085a4:	68fb      	ldr	r3, [r7, #12]
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	68b9      	ldr	r1, [r7, #8]
 80085aa:	4618      	mov	r0, r3
 80085ac:	f000 fd64 	bl	8009078 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80085b0:	68fb      	ldr	r3, [r7, #12]
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	69da      	ldr	r2, [r3, #28]
 80085b6:	68fb      	ldr	r3, [r7, #12]
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80085be:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80085c0:	68fb      	ldr	r3, [r7, #12]
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	69da      	ldr	r2, [r3, #28]
 80085c6:	68fb      	ldr	r3, [r7, #12]
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80085ce:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80085d0:	68fb      	ldr	r3, [r7, #12]
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	69d9      	ldr	r1, [r3, #28]
 80085d6:	68bb      	ldr	r3, [r7, #8]
 80085d8:	691b      	ldr	r3, [r3, #16]
 80085da:	021a      	lsls	r2, r3, #8
 80085dc:	68fb      	ldr	r3, [r7, #12]
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	430a      	orrs	r2, r1
 80085e2:	61da      	str	r2, [r3, #28]
      break;
 80085e4:	e000      	b.n	80085e8 <HAL_TIM_PWM_ConfigChannel+0x324>
    }

    default:
      break;
 80085e6:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	2201      	movs	r2, #1
 80085ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80085f0:	68fb      	ldr	r3, [r7, #12]
 80085f2:	2200      	movs	r2, #0
 80085f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80085f8:	2300      	movs	r3, #0
}
 80085fa:	4618      	mov	r0, r3
 80085fc:	3710      	adds	r7, #16
 80085fe:	46bd      	mov	sp, r7
 8008600:	bd80      	pop	{r7, pc}
 8008602:	bf00      	nop
 8008604:	40010000 	.word	0x40010000
 8008608:	40000400 	.word	0x40000400
 800860c:	40000800 	.word	0x40000800
 8008610:	40000c00 	.word	0x40000c00
 8008614:	0800fc04 	.word	0x0800fc04

08008618 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008618:	b580      	push	{r7, lr}
 800861a:	b084      	sub	sp, #16
 800861c:	af00      	add	r7, sp, #0
 800861e:	6078      	str	r0, [r7, #4]
 8008620:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008628:	2b01      	cmp	r3, #1
 800862a:	d101      	bne.n	8008630 <HAL_TIM_ConfigClockSource+0x18>
 800862c:	2302      	movs	r3, #2
 800862e:	e2db      	b.n	8008be8 <HAL_TIM_ConfigClockSource+0x5d0>
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	2201      	movs	r2, #1
 8008634:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	2202      	movs	r2, #2
 800863c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));
 8008640:	683b      	ldr	r3, [r7, #0]
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008648:	d029      	beq.n	800869e <HAL_TIM_ConfigClockSource+0x86>
 800864a:	683b      	ldr	r3, [r7, #0]
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008652:	d024      	beq.n	800869e <HAL_TIM_ConfigClockSource+0x86>
 8008654:	683b      	ldr	r3, [r7, #0]
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	2b00      	cmp	r3, #0
 800865a:	d020      	beq.n	800869e <HAL_TIM_ConfigClockSource+0x86>
 800865c:	683b      	ldr	r3, [r7, #0]
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	2b10      	cmp	r3, #16
 8008662:	d01c      	beq.n	800869e <HAL_TIM_ConfigClockSource+0x86>
 8008664:	683b      	ldr	r3, [r7, #0]
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	2b20      	cmp	r3, #32
 800866a:	d018      	beq.n	800869e <HAL_TIM_ConfigClockSource+0x86>
 800866c:	683b      	ldr	r3, [r7, #0]
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	2b30      	cmp	r3, #48	; 0x30
 8008672:	d014      	beq.n	800869e <HAL_TIM_ConfigClockSource+0x86>
 8008674:	683b      	ldr	r3, [r7, #0]
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	2b40      	cmp	r3, #64	; 0x40
 800867a:	d010      	beq.n	800869e <HAL_TIM_ConfigClockSource+0x86>
 800867c:	683b      	ldr	r3, [r7, #0]
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	2b50      	cmp	r3, #80	; 0x50
 8008682:	d00c      	beq.n	800869e <HAL_TIM_ConfigClockSource+0x86>
 8008684:	683b      	ldr	r3, [r7, #0]
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	2b60      	cmp	r3, #96	; 0x60
 800868a:	d008      	beq.n	800869e <HAL_TIM_ConfigClockSource+0x86>
 800868c:	683b      	ldr	r3, [r7, #0]
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	2b70      	cmp	r3, #112	; 0x70
 8008692:	d004      	beq.n	800869e <HAL_TIM_ConfigClockSource+0x86>
 8008694:	f241 118b 	movw	r1, #4491	; 0x118b
 8008698:	4873      	ldr	r0, [pc, #460]	; (8008868 <HAL_TIM_ConfigClockSource+0x250>)
 800869a:	f7f9 fd8e 	bl	80021ba <assert_failed>

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	689b      	ldr	r3, [r3, #8]
 80086a4:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80086a6:	68fb      	ldr	r3, [r7, #12]
 80086a8:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80086ac:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80086ae:	68fb      	ldr	r3, [r7, #12]
 80086b0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80086b4:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	68fa      	ldr	r2, [r7, #12]
 80086bc:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80086be:	683b      	ldr	r3, [r7, #0]
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	2b40      	cmp	r3, #64	; 0x40
 80086c4:	f000 8204 	beq.w	8008ad0 <HAL_TIM_ConfigClockSource+0x4b8>
 80086c8:	2b40      	cmp	r3, #64	; 0x40
 80086ca:	d80f      	bhi.n	80086ec <HAL_TIM_ConfigClockSource+0xd4>
 80086cc:	2b10      	cmp	r3, #16
 80086ce:	f000 8255 	beq.w	8008b7c <HAL_TIM_ConfigClockSource+0x564>
 80086d2:	2b10      	cmp	r3, #16
 80086d4:	d803      	bhi.n	80086de <HAL_TIM_ConfigClockSource+0xc6>
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	f000 8250 	beq.w	8008b7c <HAL_TIM_ConfigClockSource+0x564>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80086dc:	e27b      	b.n	8008bd6 <HAL_TIM_ConfigClockSource+0x5be>
  switch (sClockSourceConfig->ClockSource)
 80086de:	2b20      	cmp	r3, #32
 80086e0:	f000 824c 	beq.w	8008b7c <HAL_TIM_ConfigClockSource+0x564>
 80086e4:	2b30      	cmp	r3, #48	; 0x30
 80086e6:	f000 8249 	beq.w	8008b7c <HAL_TIM_ConfigClockSource+0x564>
      break;
 80086ea:	e274      	b.n	8008bd6 <HAL_TIM_ConfigClockSource+0x5be>
  switch (sClockSourceConfig->ClockSource)
 80086ec:	2b70      	cmp	r3, #112	; 0x70
 80086ee:	d046      	beq.n	800877e <HAL_TIM_ConfigClockSource+0x166>
 80086f0:	2b70      	cmp	r3, #112	; 0x70
 80086f2:	d806      	bhi.n	8008702 <HAL_TIM_ConfigClockSource+0xea>
 80086f4:	2b50      	cmp	r3, #80	; 0x50
 80086f6:	f000 8133 	beq.w	8008960 <HAL_TIM_ConfigClockSource+0x348>
 80086fa:	2b60      	cmp	r3, #96	; 0x60
 80086fc:	f000 8186 	beq.w	8008a0c <HAL_TIM_ConfigClockSource+0x3f4>
      break;
 8008700:	e269      	b.n	8008bd6 <HAL_TIM_ConfigClockSource+0x5be>
  switch (sClockSourceConfig->ClockSource)
 8008702:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008706:	d004      	beq.n	8008712 <HAL_TIM_ConfigClockSource+0xfa>
 8008708:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800870c:	f000 80bc 	beq.w	8008888 <HAL_TIM_ConfigClockSource+0x270>
      break;
 8008710:	e261      	b.n	8008bd6 <HAL_TIM_ConfigClockSource+0x5be>
      assert_param(IS_TIM_INSTANCE(htim->Instance));
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	4a55      	ldr	r2, [pc, #340]	; (800886c <HAL_TIM_ConfigClockSource+0x254>)
 8008718:	4293      	cmp	r3, r2
 800871a:	f000 825b 	beq.w	8008bd4 <HAL_TIM_ConfigClockSource+0x5bc>
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008726:	f000 8255 	beq.w	8008bd4 <HAL_TIM_ConfigClockSource+0x5bc>
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	4a50      	ldr	r2, [pc, #320]	; (8008870 <HAL_TIM_ConfigClockSource+0x258>)
 8008730:	4293      	cmp	r3, r2
 8008732:	f000 824f 	beq.w	8008bd4 <HAL_TIM_ConfigClockSource+0x5bc>
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	4a4e      	ldr	r2, [pc, #312]	; (8008874 <HAL_TIM_ConfigClockSource+0x25c>)
 800873c:	4293      	cmp	r3, r2
 800873e:	f000 8249 	beq.w	8008bd4 <HAL_TIM_ConfigClockSource+0x5bc>
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	4a4c      	ldr	r2, [pc, #304]	; (8008878 <HAL_TIM_ConfigClockSource+0x260>)
 8008748:	4293      	cmp	r3, r2
 800874a:	f000 8243 	beq.w	8008bd4 <HAL_TIM_ConfigClockSource+0x5bc>
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	4a4a      	ldr	r2, [pc, #296]	; (800887c <HAL_TIM_ConfigClockSource+0x264>)
 8008754:	4293      	cmp	r3, r2
 8008756:	f000 823d 	beq.w	8008bd4 <HAL_TIM_ConfigClockSource+0x5bc>
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	4a48      	ldr	r2, [pc, #288]	; (8008880 <HAL_TIM_ConfigClockSource+0x268>)
 8008760:	4293      	cmp	r3, r2
 8008762:	f000 8237 	beq.w	8008bd4 <HAL_TIM_ConfigClockSource+0x5bc>
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	4a46      	ldr	r2, [pc, #280]	; (8008884 <HAL_TIM_ConfigClockSource+0x26c>)
 800876c:	4293      	cmp	r3, r2
 800876e:	f000 8231 	beq.w	8008bd4 <HAL_TIM_ConfigClockSource+0x5bc>
 8008772:	f241 1197 	movw	r1, #4503	; 0x1197
 8008776:	483c      	ldr	r0, [pc, #240]	; (8008868 <HAL_TIM_ConfigClockSource+0x250>)
 8008778:	f7f9 fd1f 	bl	80021ba <assert_failed>
      break;
 800877c:	e22a      	b.n	8008bd4 <HAL_TIM_ConfigClockSource+0x5bc>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	4a3a      	ldr	r2, [pc, #232]	; (800886c <HAL_TIM_ConfigClockSource+0x254>)
 8008784:	4293      	cmp	r3, r2
 8008786:	d01d      	beq.n	80087c4 <HAL_TIM_ConfigClockSource+0x1ac>
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008790:	d018      	beq.n	80087c4 <HAL_TIM_ConfigClockSource+0x1ac>
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	4a36      	ldr	r2, [pc, #216]	; (8008870 <HAL_TIM_ConfigClockSource+0x258>)
 8008798:	4293      	cmp	r3, r2
 800879a:	d013      	beq.n	80087c4 <HAL_TIM_ConfigClockSource+0x1ac>
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	4a34      	ldr	r2, [pc, #208]	; (8008874 <HAL_TIM_ConfigClockSource+0x25c>)
 80087a2:	4293      	cmp	r3, r2
 80087a4:	d00e      	beq.n	80087c4 <HAL_TIM_ConfigClockSource+0x1ac>
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	4a33      	ldr	r2, [pc, #204]	; (8008878 <HAL_TIM_ConfigClockSource+0x260>)
 80087ac:	4293      	cmp	r3, r2
 80087ae:	d009      	beq.n	80087c4 <HAL_TIM_ConfigClockSource+0x1ac>
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	4a31      	ldr	r2, [pc, #196]	; (800887c <HAL_TIM_ConfigClockSource+0x264>)
 80087b6:	4293      	cmp	r3, r2
 80087b8:	d004      	beq.n	80087c4 <HAL_TIM_ConfigClockSource+0x1ac>
 80087ba:	f241 119e 	movw	r1, #4510	; 0x119e
 80087be:	482a      	ldr	r0, [pc, #168]	; (8008868 <HAL_TIM_ConfigClockSource+0x250>)
 80087c0:	f7f9 fcfb 	bl	80021ba <assert_failed>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 80087c4:	683b      	ldr	r3, [r7, #0]
 80087c6:	689b      	ldr	r3, [r3, #8]
 80087c8:	2b00      	cmp	r3, #0
 80087ca:	d013      	beq.n	80087f4 <HAL_TIM_ConfigClockSource+0x1dc>
 80087cc:	683b      	ldr	r3, [r7, #0]
 80087ce:	689b      	ldr	r3, [r3, #8]
 80087d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80087d4:	d00e      	beq.n	80087f4 <HAL_TIM_ConfigClockSource+0x1dc>
 80087d6:	683b      	ldr	r3, [r7, #0]
 80087d8:	689b      	ldr	r3, [r3, #8]
 80087da:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80087de:	d009      	beq.n	80087f4 <HAL_TIM_ConfigClockSource+0x1dc>
 80087e0:	683b      	ldr	r3, [r7, #0]
 80087e2:	689b      	ldr	r3, [r3, #8]
 80087e4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80087e8:	d004      	beq.n	80087f4 <HAL_TIM_ConfigClockSource+0x1dc>
 80087ea:	f241 11a1 	movw	r1, #4513	; 0x11a1
 80087ee:	481e      	ldr	r0, [pc, #120]	; (8008868 <HAL_TIM_ConfigClockSource+0x250>)
 80087f0:	f7f9 fce3 	bl	80021ba <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 80087f4:	683b      	ldr	r3, [r7, #0]
 80087f6:	685b      	ldr	r3, [r3, #4]
 80087f8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80087fc:	d014      	beq.n	8008828 <HAL_TIM_ConfigClockSource+0x210>
 80087fe:	683b      	ldr	r3, [r7, #0]
 8008800:	685b      	ldr	r3, [r3, #4]
 8008802:	2b00      	cmp	r3, #0
 8008804:	d010      	beq.n	8008828 <HAL_TIM_ConfigClockSource+0x210>
 8008806:	683b      	ldr	r3, [r7, #0]
 8008808:	685b      	ldr	r3, [r3, #4]
 800880a:	2b00      	cmp	r3, #0
 800880c:	d00c      	beq.n	8008828 <HAL_TIM_ConfigClockSource+0x210>
 800880e:	683b      	ldr	r3, [r7, #0]
 8008810:	685b      	ldr	r3, [r3, #4]
 8008812:	2b02      	cmp	r3, #2
 8008814:	d008      	beq.n	8008828 <HAL_TIM_ConfigClockSource+0x210>
 8008816:	683b      	ldr	r3, [r7, #0]
 8008818:	685b      	ldr	r3, [r3, #4]
 800881a:	2b0a      	cmp	r3, #10
 800881c:	d004      	beq.n	8008828 <HAL_TIM_ConfigClockSource+0x210>
 800881e:	f241 11a2 	movw	r1, #4514	; 0x11a2
 8008822:	4811      	ldr	r0, [pc, #68]	; (8008868 <HAL_TIM_ConfigClockSource+0x250>)
 8008824:	f7f9 fcc9 	bl	80021ba <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8008828:	683b      	ldr	r3, [r7, #0]
 800882a:	68db      	ldr	r3, [r3, #12]
 800882c:	2b0f      	cmp	r3, #15
 800882e:	d904      	bls.n	800883a <HAL_TIM_ConfigClockSource+0x222>
 8008830:	f241 11a3 	movw	r1, #4515	; 0x11a3
 8008834:	480c      	ldr	r0, [pc, #48]	; (8008868 <HAL_TIM_ConfigClockSource+0x250>)
 8008836:	f7f9 fcc0 	bl	80021ba <assert_failed>
      TIM_ETR_SetConfig(htim->Instance,
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	6818      	ldr	r0, [r3, #0]
 800883e:	683b      	ldr	r3, [r7, #0]
 8008840:	6899      	ldr	r1, [r3, #8]
 8008842:	683b      	ldr	r3, [r7, #0]
 8008844:	685a      	ldr	r2, [r3, #4]
 8008846:	683b      	ldr	r3, [r7, #0]
 8008848:	68db      	ldr	r3, [r3, #12]
 800884a:	f000 fced 	bl	8009228 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	689b      	ldr	r3, [r3, #8]
 8008854:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008856:	68fb      	ldr	r3, [r7, #12]
 8008858:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800885c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	68fa      	ldr	r2, [r7, #12]
 8008864:	609a      	str	r2, [r3, #8]
      break;
 8008866:	e1b6      	b.n	8008bd6 <HAL_TIM_ConfigClockSource+0x5be>
 8008868:	0800fc04 	.word	0x0800fc04
 800886c:	40010000 	.word	0x40010000
 8008870:	40000400 	.word	0x40000400
 8008874:	40000800 	.word	0x40000800
 8008878:	40000c00 	.word	0x40000c00
 800887c:	40014000 	.word	0x40014000
 8008880:	40014400 	.word	0x40014400
 8008884:	40014800 	.word	0x40014800
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE2_INSTANCE(htim->Instance));
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	4a8a      	ldr	r2, [pc, #552]	; (8008ab8 <HAL_TIM_ConfigClockSource+0x4a0>)
 800888e:	4293      	cmp	r3, r2
 8008890:	d018      	beq.n	80088c4 <HAL_TIM_ConfigClockSource+0x2ac>
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800889a:	d013      	beq.n	80088c4 <HAL_TIM_ConfigClockSource+0x2ac>
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	4a86      	ldr	r2, [pc, #536]	; (8008abc <HAL_TIM_ConfigClockSource+0x4a4>)
 80088a2:	4293      	cmp	r3, r2
 80088a4:	d00e      	beq.n	80088c4 <HAL_TIM_ConfigClockSource+0x2ac>
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	4a85      	ldr	r2, [pc, #532]	; (8008ac0 <HAL_TIM_ConfigClockSource+0x4a8>)
 80088ac:	4293      	cmp	r3, r2
 80088ae:	d009      	beq.n	80088c4 <HAL_TIM_ConfigClockSource+0x2ac>
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	4a83      	ldr	r2, [pc, #524]	; (8008ac4 <HAL_TIM_ConfigClockSource+0x4ac>)
 80088b6:	4293      	cmp	r3, r2
 80088b8:	d004      	beq.n	80088c4 <HAL_TIM_ConfigClockSource+0x2ac>
 80088ba:	f241 11b6 	movw	r1, #4534	; 0x11b6
 80088be:	4882      	ldr	r0, [pc, #520]	; (8008ac8 <HAL_TIM_ConfigClockSource+0x4b0>)
 80088c0:	f7f9 fc7b 	bl	80021ba <assert_failed>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 80088c4:	683b      	ldr	r3, [r7, #0]
 80088c6:	689b      	ldr	r3, [r3, #8]
 80088c8:	2b00      	cmp	r3, #0
 80088ca:	d013      	beq.n	80088f4 <HAL_TIM_ConfigClockSource+0x2dc>
 80088cc:	683b      	ldr	r3, [r7, #0]
 80088ce:	689b      	ldr	r3, [r3, #8]
 80088d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80088d4:	d00e      	beq.n	80088f4 <HAL_TIM_ConfigClockSource+0x2dc>
 80088d6:	683b      	ldr	r3, [r7, #0]
 80088d8:	689b      	ldr	r3, [r3, #8]
 80088da:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80088de:	d009      	beq.n	80088f4 <HAL_TIM_ConfigClockSource+0x2dc>
 80088e0:	683b      	ldr	r3, [r7, #0]
 80088e2:	689b      	ldr	r3, [r3, #8]
 80088e4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80088e8:	d004      	beq.n	80088f4 <HAL_TIM_ConfigClockSource+0x2dc>
 80088ea:	f241 11b9 	movw	r1, #4537	; 0x11b9
 80088ee:	4876      	ldr	r0, [pc, #472]	; (8008ac8 <HAL_TIM_ConfigClockSource+0x4b0>)
 80088f0:	f7f9 fc63 	bl	80021ba <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 80088f4:	683b      	ldr	r3, [r7, #0]
 80088f6:	685b      	ldr	r3, [r3, #4]
 80088f8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80088fc:	d014      	beq.n	8008928 <HAL_TIM_ConfigClockSource+0x310>
 80088fe:	683b      	ldr	r3, [r7, #0]
 8008900:	685b      	ldr	r3, [r3, #4]
 8008902:	2b00      	cmp	r3, #0
 8008904:	d010      	beq.n	8008928 <HAL_TIM_ConfigClockSource+0x310>
 8008906:	683b      	ldr	r3, [r7, #0]
 8008908:	685b      	ldr	r3, [r3, #4]
 800890a:	2b00      	cmp	r3, #0
 800890c:	d00c      	beq.n	8008928 <HAL_TIM_ConfigClockSource+0x310>
 800890e:	683b      	ldr	r3, [r7, #0]
 8008910:	685b      	ldr	r3, [r3, #4]
 8008912:	2b02      	cmp	r3, #2
 8008914:	d008      	beq.n	8008928 <HAL_TIM_ConfigClockSource+0x310>
 8008916:	683b      	ldr	r3, [r7, #0]
 8008918:	685b      	ldr	r3, [r3, #4]
 800891a:	2b0a      	cmp	r3, #10
 800891c:	d004      	beq.n	8008928 <HAL_TIM_ConfigClockSource+0x310>
 800891e:	f241 11ba 	movw	r1, #4538	; 0x11ba
 8008922:	4869      	ldr	r0, [pc, #420]	; (8008ac8 <HAL_TIM_ConfigClockSource+0x4b0>)
 8008924:	f7f9 fc49 	bl	80021ba <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8008928:	683b      	ldr	r3, [r7, #0]
 800892a:	68db      	ldr	r3, [r3, #12]
 800892c:	2b0f      	cmp	r3, #15
 800892e:	d904      	bls.n	800893a <HAL_TIM_ConfigClockSource+0x322>
 8008930:	f241 11bb 	movw	r1, #4539	; 0x11bb
 8008934:	4864      	ldr	r0, [pc, #400]	; (8008ac8 <HAL_TIM_ConfigClockSource+0x4b0>)
 8008936:	f7f9 fc40 	bl	80021ba <assert_failed>
      TIM_ETR_SetConfig(htim->Instance,
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	6818      	ldr	r0, [r3, #0]
 800893e:	683b      	ldr	r3, [r7, #0]
 8008940:	6899      	ldr	r1, [r3, #8]
 8008942:	683b      	ldr	r3, [r7, #0]
 8008944:	685a      	ldr	r2, [r3, #4]
 8008946:	683b      	ldr	r3, [r7, #0]
 8008948:	68db      	ldr	r3, [r3, #12]
 800894a:	f000 fc6d 	bl	8009228 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	689a      	ldr	r2, [r3, #8]
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800895c:	609a      	str	r2, [r3, #8]
      break;
 800895e:	e13a      	b.n	8008bd6 <HAL_TIM_ConfigClockSource+0x5be>
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	4a54      	ldr	r2, [pc, #336]	; (8008ab8 <HAL_TIM_ConfigClockSource+0x4a0>)
 8008966:	4293      	cmp	r3, r2
 8008968:	d01d      	beq.n	80089a6 <HAL_TIM_ConfigClockSource+0x38e>
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008972:	d018      	beq.n	80089a6 <HAL_TIM_ConfigClockSource+0x38e>
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	4a50      	ldr	r2, [pc, #320]	; (8008abc <HAL_TIM_ConfigClockSource+0x4a4>)
 800897a:	4293      	cmp	r3, r2
 800897c:	d013      	beq.n	80089a6 <HAL_TIM_ConfigClockSource+0x38e>
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	4a4f      	ldr	r2, [pc, #316]	; (8008ac0 <HAL_TIM_ConfigClockSource+0x4a8>)
 8008984:	4293      	cmp	r3, r2
 8008986:	d00e      	beq.n	80089a6 <HAL_TIM_ConfigClockSource+0x38e>
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	4a4d      	ldr	r2, [pc, #308]	; (8008ac4 <HAL_TIM_ConfigClockSource+0x4ac>)
 800898e:	4293      	cmp	r3, r2
 8008990:	d009      	beq.n	80089a6 <HAL_TIM_ConfigClockSource+0x38e>
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	4a4d      	ldr	r2, [pc, #308]	; (8008acc <HAL_TIM_ConfigClockSource+0x4b4>)
 8008998:	4293      	cmp	r3, r2
 800899a:	d004      	beq.n	80089a6 <HAL_TIM_ConfigClockSource+0x38e>
 800899c:	f241 11ca 	movw	r1, #4554	; 0x11ca
 80089a0:	4849      	ldr	r0, [pc, #292]	; (8008ac8 <HAL_TIM_ConfigClockSource+0x4b0>)
 80089a2:	f7f9 fc0a 	bl	80021ba <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 80089a6:	683b      	ldr	r3, [r7, #0]
 80089a8:	685b      	ldr	r3, [r3, #4]
 80089aa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80089ae:	d014      	beq.n	80089da <HAL_TIM_ConfigClockSource+0x3c2>
 80089b0:	683b      	ldr	r3, [r7, #0]
 80089b2:	685b      	ldr	r3, [r3, #4]
 80089b4:	2b00      	cmp	r3, #0
 80089b6:	d010      	beq.n	80089da <HAL_TIM_ConfigClockSource+0x3c2>
 80089b8:	683b      	ldr	r3, [r7, #0]
 80089ba:	685b      	ldr	r3, [r3, #4]
 80089bc:	2b00      	cmp	r3, #0
 80089be:	d00c      	beq.n	80089da <HAL_TIM_ConfigClockSource+0x3c2>
 80089c0:	683b      	ldr	r3, [r7, #0]
 80089c2:	685b      	ldr	r3, [r3, #4]
 80089c4:	2b02      	cmp	r3, #2
 80089c6:	d008      	beq.n	80089da <HAL_TIM_ConfigClockSource+0x3c2>
 80089c8:	683b      	ldr	r3, [r7, #0]
 80089ca:	685b      	ldr	r3, [r3, #4]
 80089cc:	2b0a      	cmp	r3, #10
 80089ce:	d004      	beq.n	80089da <HAL_TIM_ConfigClockSource+0x3c2>
 80089d0:	f241 11cd 	movw	r1, #4557	; 0x11cd
 80089d4:	483c      	ldr	r0, [pc, #240]	; (8008ac8 <HAL_TIM_ConfigClockSource+0x4b0>)
 80089d6:	f7f9 fbf0 	bl	80021ba <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 80089da:	683b      	ldr	r3, [r7, #0]
 80089dc:	68db      	ldr	r3, [r3, #12]
 80089de:	2b0f      	cmp	r3, #15
 80089e0:	d904      	bls.n	80089ec <HAL_TIM_ConfigClockSource+0x3d4>
 80089e2:	f241 11ce 	movw	r1, #4558	; 0x11ce
 80089e6:	4838      	ldr	r0, [pc, #224]	; (8008ac8 <HAL_TIM_ConfigClockSource+0x4b0>)
 80089e8:	f7f9 fbe7 	bl	80021ba <assert_failed>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	6818      	ldr	r0, [r3, #0]
 80089f0:	683b      	ldr	r3, [r7, #0]
 80089f2:	6859      	ldr	r1, [r3, #4]
 80089f4:	683b      	ldr	r3, [r7, #0]
 80089f6:	68db      	ldr	r3, [r3, #12]
 80089f8:	461a      	mov	r2, r3
 80089fa:	f000 fb9b 	bl	8009134 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	2150      	movs	r1, #80	; 0x50
 8008a04:	4618      	mov	r0, r3
 8008a06:	f000 fbf4 	bl	80091f2 <TIM_ITRx_SetConfig>
      break;
 8008a0a:	e0e4      	b.n	8008bd6 <HAL_TIM_ConfigClockSource+0x5be>
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	4a29      	ldr	r2, [pc, #164]	; (8008ab8 <HAL_TIM_ConfigClockSource+0x4a0>)
 8008a12:	4293      	cmp	r3, r2
 8008a14:	d01d      	beq.n	8008a52 <HAL_TIM_ConfigClockSource+0x43a>
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	681b      	ldr	r3, [r3, #0]
 8008a1a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008a1e:	d018      	beq.n	8008a52 <HAL_TIM_ConfigClockSource+0x43a>
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	4a25      	ldr	r2, [pc, #148]	; (8008abc <HAL_TIM_ConfigClockSource+0x4a4>)
 8008a26:	4293      	cmp	r3, r2
 8008a28:	d013      	beq.n	8008a52 <HAL_TIM_ConfigClockSource+0x43a>
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	4a24      	ldr	r2, [pc, #144]	; (8008ac0 <HAL_TIM_ConfigClockSource+0x4a8>)
 8008a30:	4293      	cmp	r3, r2
 8008a32:	d00e      	beq.n	8008a52 <HAL_TIM_ConfigClockSource+0x43a>
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	4a22      	ldr	r2, [pc, #136]	; (8008ac4 <HAL_TIM_ConfigClockSource+0x4ac>)
 8008a3a:	4293      	cmp	r3, r2
 8008a3c:	d009      	beq.n	8008a52 <HAL_TIM_ConfigClockSource+0x43a>
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	4a22      	ldr	r2, [pc, #136]	; (8008acc <HAL_TIM_ConfigClockSource+0x4b4>)
 8008a44:	4293      	cmp	r3, r2
 8008a46:	d004      	beq.n	8008a52 <HAL_TIM_ConfigClockSource+0x43a>
 8008a48:	f241 11da 	movw	r1, #4570	; 0x11da
 8008a4c:	481e      	ldr	r0, [pc, #120]	; (8008ac8 <HAL_TIM_ConfigClockSource+0x4b0>)
 8008a4e:	f7f9 fbb4 	bl	80021ba <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8008a52:	683b      	ldr	r3, [r7, #0]
 8008a54:	685b      	ldr	r3, [r3, #4]
 8008a56:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008a5a:	d014      	beq.n	8008a86 <HAL_TIM_ConfigClockSource+0x46e>
 8008a5c:	683b      	ldr	r3, [r7, #0]
 8008a5e:	685b      	ldr	r3, [r3, #4]
 8008a60:	2b00      	cmp	r3, #0
 8008a62:	d010      	beq.n	8008a86 <HAL_TIM_ConfigClockSource+0x46e>
 8008a64:	683b      	ldr	r3, [r7, #0]
 8008a66:	685b      	ldr	r3, [r3, #4]
 8008a68:	2b00      	cmp	r3, #0
 8008a6a:	d00c      	beq.n	8008a86 <HAL_TIM_ConfigClockSource+0x46e>
 8008a6c:	683b      	ldr	r3, [r7, #0]
 8008a6e:	685b      	ldr	r3, [r3, #4]
 8008a70:	2b02      	cmp	r3, #2
 8008a72:	d008      	beq.n	8008a86 <HAL_TIM_ConfigClockSource+0x46e>
 8008a74:	683b      	ldr	r3, [r7, #0]
 8008a76:	685b      	ldr	r3, [r3, #4]
 8008a78:	2b0a      	cmp	r3, #10
 8008a7a:	d004      	beq.n	8008a86 <HAL_TIM_ConfigClockSource+0x46e>
 8008a7c:	f241 11dd 	movw	r1, #4573	; 0x11dd
 8008a80:	4811      	ldr	r0, [pc, #68]	; (8008ac8 <HAL_TIM_ConfigClockSource+0x4b0>)
 8008a82:	f7f9 fb9a 	bl	80021ba <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8008a86:	683b      	ldr	r3, [r7, #0]
 8008a88:	68db      	ldr	r3, [r3, #12]
 8008a8a:	2b0f      	cmp	r3, #15
 8008a8c:	d904      	bls.n	8008a98 <HAL_TIM_ConfigClockSource+0x480>
 8008a8e:	f241 11de 	movw	r1, #4574	; 0x11de
 8008a92:	480d      	ldr	r0, [pc, #52]	; (8008ac8 <HAL_TIM_ConfigClockSource+0x4b0>)
 8008a94:	f7f9 fb91 	bl	80021ba <assert_failed>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	6818      	ldr	r0, [r3, #0]
 8008a9c:	683b      	ldr	r3, [r7, #0]
 8008a9e:	6859      	ldr	r1, [r3, #4]
 8008aa0:	683b      	ldr	r3, [r7, #0]
 8008aa2:	68db      	ldr	r3, [r3, #12]
 8008aa4:	461a      	mov	r2, r3
 8008aa6:	f000 fb74 	bl	8009192 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	2160      	movs	r1, #96	; 0x60
 8008ab0:	4618      	mov	r0, r3
 8008ab2:	f000 fb9e 	bl	80091f2 <TIM_ITRx_SetConfig>
      break;
 8008ab6:	e08e      	b.n	8008bd6 <HAL_TIM_ConfigClockSource+0x5be>
 8008ab8:	40010000 	.word	0x40010000
 8008abc:	40000400 	.word	0x40000400
 8008ac0:	40000800 	.word	0x40000800
 8008ac4:	40000c00 	.word	0x40000c00
 8008ac8:	0800fc04 	.word	0x0800fc04
 8008acc:	40014000 	.word	0x40014000
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	4a46      	ldr	r2, [pc, #280]	; (8008bf0 <HAL_TIM_ConfigClockSource+0x5d8>)
 8008ad6:	4293      	cmp	r3, r2
 8008ad8:	d01d      	beq.n	8008b16 <HAL_TIM_ConfigClockSource+0x4fe>
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008ae2:	d018      	beq.n	8008b16 <HAL_TIM_ConfigClockSource+0x4fe>
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	4a42      	ldr	r2, [pc, #264]	; (8008bf4 <HAL_TIM_ConfigClockSource+0x5dc>)
 8008aea:	4293      	cmp	r3, r2
 8008aec:	d013      	beq.n	8008b16 <HAL_TIM_ConfigClockSource+0x4fe>
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	4a41      	ldr	r2, [pc, #260]	; (8008bf8 <HAL_TIM_ConfigClockSource+0x5e0>)
 8008af4:	4293      	cmp	r3, r2
 8008af6:	d00e      	beq.n	8008b16 <HAL_TIM_ConfigClockSource+0x4fe>
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	4a3f      	ldr	r2, [pc, #252]	; (8008bfc <HAL_TIM_ConfigClockSource+0x5e4>)
 8008afe:	4293      	cmp	r3, r2
 8008b00:	d009      	beq.n	8008b16 <HAL_TIM_ConfigClockSource+0x4fe>
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	4a3e      	ldr	r2, [pc, #248]	; (8008c00 <HAL_TIM_ConfigClockSource+0x5e8>)
 8008b08:	4293      	cmp	r3, r2
 8008b0a:	d004      	beq.n	8008b16 <HAL_TIM_ConfigClockSource+0x4fe>
 8008b0c:	f241 11ea 	movw	r1, #4586	; 0x11ea
 8008b10:	483c      	ldr	r0, [pc, #240]	; (8008c04 <HAL_TIM_ConfigClockSource+0x5ec>)
 8008b12:	f7f9 fb52 	bl	80021ba <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8008b16:	683b      	ldr	r3, [r7, #0]
 8008b18:	685b      	ldr	r3, [r3, #4]
 8008b1a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008b1e:	d014      	beq.n	8008b4a <HAL_TIM_ConfigClockSource+0x532>
 8008b20:	683b      	ldr	r3, [r7, #0]
 8008b22:	685b      	ldr	r3, [r3, #4]
 8008b24:	2b00      	cmp	r3, #0
 8008b26:	d010      	beq.n	8008b4a <HAL_TIM_ConfigClockSource+0x532>
 8008b28:	683b      	ldr	r3, [r7, #0]
 8008b2a:	685b      	ldr	r3, [r3, #4]
 8008b2c:	2b00      	cmp	r3, #0
 8008b2e:	d00c      	beq.n	8008b4a <HAL_TIM_ConfigClockSource+0x532>
 8008b30:	683b      	ldr	r3, [r7, #0]
 8008b32:	685b      	ldr	r3, [r3, #4]
 8008b34:	2b02      	cmp	r3, #2
 8008b36:	d008      	beq.n	8008b4a <HAL_TIM_ConfigClockSource+0x532>
 8008b38:	683b      	ldr	r3, [r7, #0]
 8008b3a:	685b      	ldr	r3, [r3, #4]
 8008b3c:	2b0a      	cmp	r3, #10
 8008b3e:	d004      	beq.n	8008b4a <HAL_TIM_ConfigClockSource+0x532>
 8008b40:	f241 11ed 	movw	r1, #4589	; 0x11ed
 8008b44:	482f      	ldr	r0, [pc, #188]	; (8008c04 <HAL_TIM_ConfigClockSource+0x5ec>)
 8008b46:	f7f9 fb38 	bl	80021ba <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8008b4a:	683b      	ldr	r3, [r7, #0]
 8008b4c:	68db      	ldr	r3, [r3, #12]
 8008b4e:	2b0f      	cmp	r3, #15
 8008b50:	d904      	bls.n	8008b5c <HAL_TIM_ConfigClockSource+0x544>
 8008b52:	f241 11ee 	movw	r1, #4590	; 0x11ee
 8008b56:	482b      	ldr	r0, [pc, #172]	; (8008c04 <HAL_TIM_ConfigClockSource+0x5ec>)
 8008b58:	f7f9 fb2f 	bl	80021ba <assert_failed>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	6818      	ldr	r0, [r3, #0]
 8008b60:	683b      	ldr	r3, [r7, #0]
 8008b62:	6859      	ldr	r1, [r3, #4]
 8008b64:	683b      	ldr	r3, [r7, #0]
 8008b66:	68db      	ldr	r3, [r3, #12]
 8008b68:	461a      	mov	r2, r3
 8008b6a:	f000 fae3 	bl	8009134 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	2140      	movs	r1, #64	; 0x40
 8008b74:	4618      	mov	r0, r3
 8008b76:	f000 fb3c 	bl	80091f2 <TIM_ITRx_SetConfig>
      break;
 8008b7a:	e02c      	b.n	8008bd6 <HAL_TIM_ConfigClockSource+0x5be>
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	4a1b      	ldr	r2, [pc, #108]	; (8008bf0 <HAL_TIM_ConfigClockSource+0x5d8>)
 8008b82:	4293      	cmp	r3, r2
 8008b84:	d01d      	beq.n	8008bc2 <HAL_TIM_ConfigClockSource+0x5aa>
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008b8e:	d018      	beq.n	8008bc2 <HAL_TIM_ConfigClockSource+0x5aa>
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	4a17      	ldr	r2, [pc, #92]	; (8008bf4 <HAL_TIM_ConfigClockSource+0x5dc>)
 8008b96:	4293      	cmp	r3, r2
 8008b98:	d013      	beq.n	8008bc2 <HAL_TIM_ConfigClockSource+0x5aa>
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	681b      	ldr	r3, [r3, #0]
 8008b9e:	4a16      	ldr	r2, [pc, #88]	; (8008bf8 <HAL_TIM_ConfigClockSource+0x5e0>)
 8008ba0:	4293      	cmp	r3, r2
 8008ba2:	d00e      	beq.n	8008bc2 <HAL_TIM_ConfigClockSource+0x5aa>
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	4a14      	ldr	r2, [pc, #80]	; (8008bfc <HAL_TIM_ConfigClockSource+0x5e4>)
 8008baa:	4293      	cmp	r3, r2
 8008bac:	d009      	beq.n	8008bc2 <HAL_TIM_ConfigClockSource+0x5aa>
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	681b      	ldr	r3, [r3, #0]
 8008bb2:	4a13      	ldr	r2, [pc, #76]	; (8008c00 <HAL_TIM_ConfigClockSource+0x5e8>)
 8008bb4:	4293      	cmp	r3, r2
 8008bb6:	d004      	beq.n	8008bc2 <HAL_TIM_ConfigClockSource+0x5aa>
 8008bb8:	f241 11fd 	movw	r1, #4605	; 0x11fd
 8008bbc:	4811      	ldr	r0, [pc, #68]	; (8008c04 <HAL_TIM_ConfigClockSource+0x5ec>)
 8008bbe:	f7f9 fafc 	bl	80021ba <assert_failed>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	681a      	ldr	r2, [r3, #0]
 8008bc6:	683b      	ldr	r3, [r7, #0]
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	4619      	mov	r1, r3
 8008bcc:	4610      	mov	r0, r2
 8008bce:	f000 fb10 	bl	80091f2 <TIM_ITRx_SetConfig>
      break;
 8008bd2:	e000      	b.n	8008bd6 <HAL_TIM_ConfigClockSource+0x5be>
      break;
 8008bd4:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	2201      	movs	r2, #1
 8008bda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	2200      	movs	r2, #0
 8008be2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008be6:	2300      	movs	r3, #0
}
 8008be8:	4618      	mov	r0, r3
 8008bea:	3710      	adds	r7, #16
 8008bec:	46bd      	mov	sp, r7
 8008bee:	bd80      	pop	{r7, pc}
 8008bf0:	40010000 	.word	0x40010000
 8008bf4:	40000400 	.word	0x40000400
 8008bf8:	40000800 	.word	0x40000800
 8008bfc:	40000c00 	.word	0x40000c00
 8008c00:	40014000 	.word	0x40014000
 8008c04:	0800fc04 	.word	0x0800fc04

08008c08 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008c08:	b480      	push	{r7}
 8008c0a:	b085      	sub	sp, #20
 8008c0c:	af00      	add	r7, sp, #0
 8008c0e:	6078      	str	r0, [r7, #4]
 8008c10:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	4a34      	ldr	r2, [pc, #208]	; (8008cec <TIM_Base_SetConfig+0xe4>)
 8008c1c:	4293      	cmp	r3, r2
 8008c1e:	d00f      	beq.n	8008c40 <TIM_Base_SetConfig+0x38>
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008c26:	d00b      	beq.n	8008c40 <TIM_Base_SetConfig+0x38>
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	4a31      	ldr	r2, [pc, #196]	; (8008cf0 <TIM_Base_SetConfig+0xe8>)
 8008c2c:	4293      	cmp	r3, r2
 8008c2e:	d007      	beq.n	8008c40 <TIM_Base_SetConfig+0x38>
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	4a30      	ldr	r2, [pc, #192]	; (8008cf4 <TIM_Base_SetConfig+0xec>)
 8008c34:	4293      	cmp	r3, r2
 8008c36:	d003      	beq.n	8008c40 <TIM_Base_SetConfig+0x38>
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	4a2f      	ldr	r2, [pc, #188]	; (8008cf8 <TIM_Base_SetConfig+0xf0>)
 8008c3c:	4293      	cmp	r3, r2
 8008c3e:	d108      	bne.n	8008c52 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008c40:	68fb      	ldr	r3, [r7, #12]
 8008c42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008c46:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008c48:	683b      	ldr	r3, [r7, #0]
 8008c4a:	685b      	ldr	r3, [r3, #4]
 8008c4c:	68fa      	ldr	r2, [r7, #12]
 8008c4e:	4313      	orrs	r3, r2
 8008c50:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	4a25      	ldr	r2, [pc, #148]	; (8008cec <TIM_Base_SetConfig+0xe4>)
 8008c56:	4293      	cmp	r3, r2
 8008c58:	d01b      	beq.n	8008c92 <TIM_Base_SetConfig+0x8a>
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008c60:	d017      	beq.n	8008c92 <TIM_Base_SetConfig+0x8a>
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	4a22      	ldr	r2, [pc, #136]	; (8008cf0 <TIM_Base_SetConfig+0xe8>)
 8008c66:	4293      	cmp	r3, r2
 8008c68:	d013      	beq.n	8008c92 <TIM_Base_SetConfig+0x8a>
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	4a21      	ldr	r2, [pc, #132]	; (8008cf4 <TIM_Base_SetConfig+0xec>)
 8008c6e:	4293      	cmp	r3, r2
 8008c70:	d00f      	beq.n	8008c92 <TIM_Base_SetConfig+0x8a>
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	4a20      	ldr	r2, [pc, #128]	; (8008cf8 <TIM_Base_SetConfig+0xf0>)
 8008c76:	4293      	cmp	r3, r2
 8008c78:	d00b      	beq.n	8008c92 <TIM_Base_SetConfig+0x8a>
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	4a1f      	ldr	r2, [pc, #124]	; (8008cfc <TIM_Base_SetConfig+0xf4>)
 8008c7e:	4293      	cmp	r3, r2
 8008c80:	d007      	beq.n	8008c92 <TIM_Base_SetConfig+0x8a>
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	4a1e      	ldr	r2, [pc, #120]	; (8008d00 <TIM_Base_SetConfig+0xf8>)
 8008c86:	4293      	cmp	r3, r2
 8008c88:	d003      	beq.n	8008c92 <TIM_Base_SetConfig+0x8a>
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	4a1d      	ldr	r2, [pc, #116]	; (8008d04 <TIM_Base_SetConfig+0xfc>)
 8008c8e:	4293      	cmp	r3, r2
 8008c90:	d108      	bne.n	8008ca4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008c92:	68fb      	ldr	r3, [r7, #12]
 8008c94:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008c98:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008c9a:	683b      	ldr	r3, [r7, #0]
 8008c9c:	68db      	ldr	r3, [r3, #12]
 8008c9e:	68fa      	ldr	r2, [r7, #12]
 8008ca0:	4313      	orrs	r3, r2
 8008ca2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008ca4:	68fb      	ldr	r3, [r7, #12]
 8008ca6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008caa:	683b      	ldr	r3, [r7, #0]
 8008cac:	695b      	ldr	r3, [r3, #20]
 8008cae:	4313      	orrs	r3, r2
 8008cb0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	68fa      	ldr	r2, [r7, #12]
 8008cb6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008cb8:	683b      	ldr	r3, [r7, #0]
 8008cba:	689a      	ldr	r2, [r3, #8]
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008cc0:	683b      	ldr	r3, [r7, #0]
 8008cc2:	681a      	ldr	r2, [r3, #0]
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	4a08      	ldr	r2, [pc, #32]	; (8008cec <TIM_Base_SetConfig+0xe4>)
 8008ccc:	4293      	cmp	r3, r2
 8008cce:	d103      	bne.n	8008cd8 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008cd0:	683b      	ldr	r3, [r7, #0]
 8008cd2:	691a      	ldr	r2, [r3, #16]
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	2201      	movs	r2, #1
 8008cdc:	615a      	str	r2, [r3, #20]
}
 8008cde:	bf00      	nop
 8008ce0:	3714      	adds	r7, #20
 8008ce2:	46bd      	mov	sp, r7
 8008ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ce8:	4770      	bx	lr
 8008cea:	bf00      	nop
 8008cec:	40010000 	.word	0x40010000
 8008cf0:	40000400 	.word	0x40000400
 8008cf4:	40000800 	.word	0x40000800
 8008cf8:	40000c00 	.word	0x40000c00
 8008cfc:	40014000 	.word	0x40014000
 8008d00:	40014400 	.word	0x40014400
 8008d04:	40014800 	.word	0x40014800

08008d08 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008d08:	b580      	push	{r7, lr}
 8008d0a:	b086      	sub	sp, #24
 8008d0c:	af00      	add	r7, sp, #0
 8008d0e:	6078      	str	r0, [r7, #4]
 8008d10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	6a1b      	ldr	r3, [r3, #32]
 8008d16:	f023 0201 	bic.w	r2, r3, #1
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	6a1b      	ldr	r3, [r3, #32]
 8008d22:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	685b      	ldr	r3, [r3, #4]
 8008d28:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	699b      	ldr	r3, [r3, #24]
 8008d2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008d30:	68fb      	ldr	r3, [r7, #12]
 8008d32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008d36:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008d38:	68fb      	ldr	r3, [r7, #12]
 8008d3a:	f023 0303 	bic.w	r3, r3, #3
 8008d3e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008d40:	683b      	ldr	r3, [r7, #0]
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	68fa      	ldr	r2, [r7, #12]
 8008d46:	4313      	orrs	r3, r2
 8008d48:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008d4a:	697b      	ldr	r3, [r7, #20]
 8008d4c:	f023 0302 	bic.w	r3, r3, #2
 8008d50:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008d52:	683b      	ldr	r3, [r7, #0]
 8008d54:	689b      	ldr	r3, [r3, #8]
 8008d56:	697a      	ldr	r2, [r7, #20]
 8008d58:	4313      	orrs	r3, r2
 8008d5a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	4a30      	ldr	r2, [pc, #192]	; (8008e20 <TIM_OC1_SetConfig+0x118>)
 8008d60:	4293      	cmp	r3, r2
 8008d62:	d119      	bne.n	8008d98 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 8008d64:	683b      	ldr	r3, [r7, #0]
 8008d66:	68db      	ldr	r3, [r3, #12]
 8008d68:	2b00      	cmp	r3, #0
 8008d6a:	d008      	beq.n	8008d7e <TIM_OC1_SetConfig+0x76>
 8008d6c:	683b      	ldr	r3, [r7, #0]
 8008d6e:	68db      	ldr	r3, [r3, #12]
 8008d70:	2b08      	cmp	r3, #8
 8008d72:	d004      	beq.n	8008d7e <TIM_OC1_SetConfig+0x76>
 8008d74:	f241 7102 	movw	r1, #5890	; 0x1702
 8008d78:	482a      	ldr	r0, [pc, #168]	; (8008e24 <TIM_OC1_SetConfig+0x11c>)
 8008d7a:	f7f9 fa1e 	bl	80021ba <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008d7e:	697b      	ldr	r3, [r7, #20]
 8008d80:	f023 0308 	bic.w	r3, r3, #8
 8008d84:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008d86:	683b      	ldr	r3, [r7, #0]
 8008d88:	68db      	ldr	r3, [r3, #12]
 8008d8a:	697a      	ldr	r2, [r7, #20]
 8008d8c:	4313      	orrs	r3, r2
 8008d8e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008d90:	697b      	ldr	r3, [r7, #20]
 8008d92:	f023 0304 	bic.w	r3, r3, #4
 8008d96:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	4a21      	ldr	r2, [pc, #132]	; (8008e20 <TIM_OC1_SetConfig+0x118>)
 8008d9c:	4293      	cmp	r3, r2
 8008d9e:	d12d      	bne.n	8008dfc <TIM_OC1_SetConfig+0xf4>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 8008da0:	683b      	ldr	r3, [r7, #0]
 8008da2:	699b      	ldr	r3, [r3, #24]
 8008da4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008da8:	d008      	beq.n	8008dbc <TIM_OC1_SetConfig+0xb4>
 8008daa:	683b      	ldr	r3, [r7, #0]
 8008dac:	699b      	ldr	r3, [r3, #24]
 8008dae:	2b00      	cmp	r3, #0
 8008db0:	d004      	beq.n	8008dbc <TIM_OC1_SetConfig+0xb4>
 8008db2:	f241 710f 	movw	r1, #5903	; 0x170f
 8008db6:	481b      	ldr	r0, [pc, #108]	; (8008e24 <TIM_OC1_SetConfig+0x11c>)
 8008db8:	f7f9 f9ff 	bl	80021ba <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 8008dbc:	683b      	ldr	r3, [r7, #0]
 8008dbe:	695b      	ldr	r3, [r3, #20]
 8008dc0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008dc4:	d008      	beq.n	8008dd8 <TIM_OC1_SetConfig+0xd0>
 8008dc6:	683b      	ldr	r3, [r7, #0]
 8008dc8:	695b      	ldr	r3, [r3, #20]
 8008dca:	2b00      	cmp	r3, #0
 8008dcc:	d004      	beq.n	8008dd8 <TIM_OC1_SetConfig+0xd0>
 8008dce:	f241 7110 	movw	r1, #5904	; 0x1710
 8008dd2:	4814      	ldr	r0, [pc, #80]	; (8008e24 <TIM_OC1_SetConfig+0x11c>)
 8008dd4:	f7f9 f9f1 	bl	80021ba <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008dd8:	693b      	ldr	r3, [r7, #16]
 8008dda:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008dde:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008de0:	693b      	ldr	r3, [r7, #16]
 8008de2:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008de6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008de8:	683b      	ldr	r3, [r7, #0]
 8008dea:	695b      	ldr	r3, [r3, #20]
 8008dec:	693a      	ldr	r2, [r7, #16]
 8008dee:	4313      	orrs	r3, r2
 8008df0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008df2:	683b      	ldr	r3, [r7, #0]
 8008df4:	699b      	ldr	r3, [r3, #24]
 8008df6:	693a      	ldr	r2, [r7, #16]
 8008df8:	4313      	orrs	r3, r2
 8008dfa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	693a      	ldr	r2, [r7, #16]
 8008e00:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	68fa      	ldr	r2, [r7, #12]
 8008e06:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008e08:	683b      	ldr	r3, [r7, #0]
 8008e0a:	685a      	ldr	r2, [r3, #4]
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	697a      	ldr	r2, [r7, #20]
 8008e14:	621a      	str	r2, [r3, #32]
}
 8008e16:	bf00      	nop
 8008e18:	3718      	adds	r7, #24
 8008e1a:	46bd      	mov	sp, r7
 8008e1c:	bd80      	pop	{r7, pc}
 8008e1e:	bf00      	nop
 8008e20:	40010000 	.word	0x40010000
 8008e24:	0800fc04 	.word	0x0800fc04

08008e28 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008e28:	b580      	push	{r7, lr}
 8008e2a:	b086      	sub	sp, #24
 8008e2c:	af00      	add	r7, sp, #0
 8008e2e:	6078      	str	r0, [r7, #4]
 8008e30:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	6a1b      	ldr	r3, [r3, #32]
 8008e36:	f023 0210 	bic.w	r2, r3, #16
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	6a1b      	ldr	r3, [r3, #32]
 8008e42:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	685b      	ldr	r3, [r3, #4]
 8008e48:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	699b      	ldr	r3, [r3, #24]
 8008e4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008e50:	68fb      	ldr	r3, [r7, #12]
 8008e52:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008e56:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008e58:	68fb      	ldr	r3, [r7, #12]
 8008e5a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008e5e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008e60:	683b      	ldr	r3, [r7, #0]
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	021b      	lsls	r3, r3, #8
 8008e66:	68fa      	ldr	r2, [r7, #12]
 8008e68:	4313      	orrs	r3, r2
 8008e6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008e6c:	697b      	ldr	r3, [r7, #20]
 8008e6e:	f023 0320 	bic.w	r3, r3, #32
 8008e72:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008e74:	683b      	ldr	r3, [r7, #0]
 8008e76:	689b      	ldr	r3, [r3, #8]
 8008e78:	011b      	lsls	r3, r3, #4
 8008e7a:	697a      	ldr	r2, [r7, #20]
 8008e7c:	4313      	orrs	r3, r2
 8008e7e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	4a31      	ldr	r2, [pc, #196]	; (8008f48 <TIM_OC2_SetConfig+0x120>)
 8008e84:	4293      	cmp	r3, r2
 8008e86:	d11a      	bne.n	8008ebe <TIM_OC2_SetConfig+0x96>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 8008e88:	683b      	ldr	r3, [r7, #0]
 8008e8a:	68db      	ldr	r3, [r3, #12]
 8008e8c:	2b00      	cmp	r3, #0
 8008e8e:	d008      	beq.n	8008ea2 <TIM_OC2_SetConfig+0x7a>
 8008e90:	683b      	ldr	r3, [r7, #0]
 8008e92:	68db      	ldr	r3, [r3, #12]
 8008e94:	2b08      	cmp	r3, #8
 8008e96:	d004      	beq.n	8008ea2 <TIM_OC2_SetConfig+0x7a>
 8008e98:	f241 714d 	movw	r1, #5965	; 0x174d
 8008e9c:	482b      	ldr	r0, [pc, #172]	; (8008f4c <TIM_OC2_SetConfig+0x124>)
 8008e9e:	f7f9 f98c 	bl	80021ba <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008ea2:	697b      	ldr	r3, [r7, #20]
 8008ea4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008ea8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008eaa:	683b      	ldr	r3, [r7, #0]
 8008eac:	68db      	ldr	r3, [r3, #12]
 8008eae:	011b      	lsls	r3, r3, #4
 8008eb0:	697a      	ldr	r2, [r7, #20]
 8008eb2:	4313      	orrs	r3, r2
 8008eb4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008eb6:	697b      	ldr	r3, [r7, #20]
 8008eb8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008ebc:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	4a21      	ldr	r2, [pc, #132]	; (8008f48 <TIM_OC2_SetConfig+0x120>)
 8008ec2:	4293      	cmp	r3, r2
 8008ec4:	d12f      	bne.n	8008f26 <TIM_OC2_SetConfig+0xfe>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 8008ec6:	683b      	ldr	r3, [r7, #0]
 8008ec8:	699b      	ldr	r3, [r3, #24]
 8008eca:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008ece:	d008      	beq.n	8008ee2 <TIM_OC2_SetConfig+0xba>
 8008ed0:	683b      	ldr	r3, [r7, #0]
 8008ed2:	699b      	ldr	r3, [r3, #24]
 8008ed4:	2b00      	cmp	r3, #0
 8008ed6:	d004      	beq.n	8008ee2 <TIM_OC2_SetConfig+0xba>
 8008ed8:	f241 715b 	movw	r1, #5979	; 0x175b
 8008edc:	481b      	ldr	r0, [pc, #108]	; (8008f4c <TIM_OC2_SetConfig+0x124>)
 8008ede:	f7f9 f96c 	bl	80021ba <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 8008ee2:	683b      	ldr	r3, [r7, #0]
 8008ee4:	695b      	ldr	r3, [r3, #20]
 8008ee6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008eea:	d008      	beq.n	8008efe <TIM_OC2_SetConfig+0xd6>
 8008eec:	683b      	ldr	r3, [r7, #0]
 8008eee:	695b      	ldr	r3, [r3, #20]
 8008ef0:	2b00      	cmp	r3, #0
 8008ef2:	d004      	beq.n	8008efe <TIM_OC2_SetConfig+0xd6>
 8008ef4:	f241 715c 	movw	r1, #5980	; 0x175c
 8008ef8:	4814      	ldr	r0, [pc, #80]	; (8008f4c <TIM_OC2_SetConfig+0x124>)
 8008efa:	f7f9 f95e 	bl	80021ba <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008efe:	693b      	ldr	r3, [r7, #16]
 8008f00:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008f04:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008f06:	693b      	ldr	r3, [r7, #16]
 8008f08:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008f0c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008f0e:	683b      	ldr	r3, [r7, #0]
 8008f10:	695b      	ldr	r3, [r3, #20]
 8008f12:	009b      	lsls	r3, r3, #2
 8008f14:	693a      	ldr	r2, [r7, #16]
 8008f16:	4313      	orrs	r3, r2
 8008f18:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008f1a:	683b      	ldr	r3, [r7, #0]
 8008f1c:	699b      	ldr	r3, [r3, #24]
 8008f1e:	009b      	lsls	r3, r3, #2
 8008f20:	693a      	ldr	r2, [r7, #16]
 8008f22:	4313      	orrs	r3, r2
 8008f24:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	693a      	ldr	r2, [r7, #16]
 8008f2a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	68fa      	ldr	r2, [r7, #12]
 8008f30:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008f32:	683b      	ldr	r3, [r7, #0]
 8008f34:	685a      	ldr	r2, [r3, #4]
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	697a      	ldr	r2, [r7, #20]
 8008f3e:	621a      	str	r2, [r3, #32]
}
 8008f40:	bf00      	nop
 8008f42:	3718      	adds	r7, #24
 8008f44:	46bd      	mov	sp, r7
 8008f46:	bd80      	pop	{r7, pc}
 8008f48:	40010000 	.word	0x40010000
 8008f4c:	0800fc04 	.word	0x0800fc04

08008f50 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008f50:	b580      	push	{r7, lr}
 8008f52:	b086      	sub	sp, #24
 8008f54:	af00      	add	r7, sp, #0
 8008f56:	6078      	str	r0, [r7, #4]
 8008f58:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	6a1b      	ldr	r3, [r3, #32]
 8008f5e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	6a1b      	ldr	r3, [r3, #32]
 8008f6a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	685b      	ldr	r3, [r3, #4]
 8008f70:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	69db      	ldr	r3, [r3, #28]
 8008f76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008f78:	68fb      	ldr	r3, [r7, #12]
 8008f7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008f7e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008f80:	68fb      	ldr	r3, [r7, #12]
 8008f82:	f023 0303 	bic.w	r3, r3, #3
 8008f86:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008f88:	683b      	ldr	r3, [r7, #0]
 8008f8a:	681b      	ldr	r3, [r3, #0]
 8008f8c:	68fa      	ldr	r2, [r7, #12]
 8008f8e:	4313      	orrs	r3, r2
 8008f90:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008f92:	697b      	ldr	r3, [r7, #20]
 8008f94:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008f98:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008f9a:	683b      	ldr	r3, [r7, #0]
 8008f9c:	689b      	ldr	r3, [r3, #8]
 8008f9e:	021b      	lsls	r3, r3, #8
 8008fa0:	697a      	ldr	r2, [r7, #20]
 8008fa2:	4313      	orrs	r3, r2
 8008fa4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	4a31      	ldr	r2, [pc, #196]	; (8009070 <TIM_OC3_SetConfig+0x120>)
 8008faa:	4293      	cmp	r3, r2
 8008fac:	d11a      	bne.n	8008fe4 <TIM_OC3_SetConfig+0x94>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 8008fae:	683b      	ldr	r3, [r7, #0]
 8008fb0:	68db      	ldr	r3, [r3, #12]
 8008fb2:	2b00      	cmp	r3, #0
 8008fb4:	d008      	beq.n	8008fc8 <TIM_OC3_SetConfig+0x78>
 8008fb6:	683b      	ldr	r3, [r7, #0]
 8008fb8:	68db      	ldr	r3, [r3, #12]
 8008fba:	2b08      	cmp	r3, #8
 8008fbc:	d004      	beq.n	8008fc8 <TIM_OC3_SetConfig+0x78>
 8008fbe:	f241 7198 	movw	r1, #6040	; 0x1798
 8008fc2:	482c      	ldr	r0, [pc, #176]	; (8009074 <TIM_OC3_SetConfig+0x124>)
 8008fc4:	f7f9 f8f9 	bl	80021ba <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008fc8:	697b      	ldr	r3, [r7, #20]
 8008fca:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008fce:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008fd0:	683b      	ldr	r3, [r7, #0]
 8008fd2:	68db      	ldr	r3, [r3, #12]
 8008fd4:	021b      	lsls	r3, r3, #8
 8008fd6:	697a      	ldr	r2, [r7, #20]
 8008fd8:	4313      	orrs	r3, r2
 8008fda:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008fdc:	697b      	ldr	r3, [r7, #20]
 8008fde:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008fe2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	4a22      	ldr	r2, [pc, #136]	; (8009070 <TIM_OC3_SetConfig+0x120>)
 8008fe8:	4293      	cmp	r3, r2
 8008fea:	d12f      	bne.n	800904c <TIM_OC3_SetConfig+0xfc>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 8008fec:	683b      	ldr	r3, [r7, #0]
 8008fee:	699b      	ldr	r3, [r3, #24]
 8008ff0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008ff4:	d008      	beq.n	8009008 <TIM_OC3_SetConfig+0xb8>
 8008ff6:	683b      	ldr	r3, [r7, #0]
 8008ff8:	699b      	ldr	r3, [r3, #24]
 8008ffa:	2b00      	cmp	r3, #0
 8008ffc:	d004      	beq.n	8009008 <TIM_OC3_SetConfig+0xb8>
 8008ffe:	f241 71a5 	movw	r1, #6053	; 0x17a5
 8009002:	481c      	ldr	r0, [pc, #112]	; (8009074 <TIM_OC3_SetConfig+0x124>)
 8009004:	f7f9 f8d9 	bl	80021ba <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 8009008:	683b      	ldr	r3, [r7, #0]
 800900a:	695b      	ldr	r3, [r3, #20]
 800900c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009010:	d008      	beq.n	8009024 <TIM_OC3_SetConfig+0xd4>
 8009012:	683b      	ldr	r3, [r7, #0]
 8009014:	695b      	ldr	r3, [r3, #20]
 8009016:	2b00      	cmp	r3, #0
 8009018:	d004      	beq.n	8009024 <TIM_OC3_SetConfig+0xd4>
 800901a:	f241 71a6 	movw	r1, #6054	; 0x17a6
 800901e:	4815      	ldr	r0, [pc, #84]	; (8009074 <TIM_OC3_SetConfig+0x124>)
 8009020:	f7f9 f8cb 	bl	80021ba <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8009024:	693b      	ldr	r3, [r7, #16]
 8009026:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800902a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800902c:	693b      	ldr	r3, [r7, #16]
 800902e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009032:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8009034:	683b      	ldr	r3, [r7, #0]
 8009036:	695b      	ldr	r3, [r3, #20]
 8009038:	011b      	lsls	r3, r3, #4
 800903a:	693a      	ldr	r2, [r7, #16]
 800903c:	4313      	orrs	r3, r2
 800903e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8009040:	683b      	ldr	r3, [r7, #0]
 8009042:	699b      	ldr	r3, [r3, #24]
 8009044:	011b      	lsls	r3, r3, #4
 8009046:	693a      	ldr	r2, [r7, #16]
 8009048:	4313      	orrs	r3, r2
 800904a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	693a      	ldr	r2, [r7, #16]
 8009050:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	68fa      	ldr	r2, [r7, #12]
 8009056:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8009058:	683b      	ldr	r3, [r7, #0]
 800905a:	685a      	ldr	r2, [r3, #4]
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	697a      	ldr	r2, [r7, #20]
 8009064:	621a      	str	r2, [r3, #32]
}
 8009066:	bf00      	nop
 8009068:	3718      	adds	r7, #24
 800906a:	46bd      	mov	sp, r7
 800906c:	bd80      	pop	{r7, pc}
 800906e:	bf00      	nop
 8009070:	40010000 	.word	0x40010000
 8009074:	0800fc04 	.word	0x0800fc04

08009078 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009078:	b580      	push	{r7, lr}
 800907a:	b086      	sub	sp, #24
 800907c:	af00      	add	r7, sp, #0
 800907e:	6078      	str	r0, [r7, #4]
 8009080:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	6a1b      	ldr	r3, [r3, #32]
 8009086:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	6a1b      	ldr	r3, [r3, #32]
 8009092:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	685b      	ldr	r3, [r3, #4]
 8009098:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	69db      	ldr	r3, [r3, #28]
 800909e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80090a0:	68fb      	ldr	r3, [r7, #12]
 80090a2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80090a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80090a8:	68fb      	ldr	r3, [r7, #12]
 80090aa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80090ae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80090b0:	683b      	ldr	r3, [r7, #0]
 80090b2:	681b      	ldr	r3, [r3, #0]
 80090b4:	021b      	lsls	r3, r3, #8
 80090b6:	68fa      	ldr	r2, [r7, #12]
 80090b8:	4313      	orrs	r3, r2
 80090ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80090bc:	693b      	ldr	r3, [r7, #16]
 80090be:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80090c2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80090c4:	683b      	ldr	r3, [r7, #0]
 80090c6:	689b      	ldr	r3, [r3, #8]
 80090c8:	031b      	lsls	r3, r3, #12
 80090ca:	693a      	ldr	r2, [r7, #16]
 80090cc:	4313      	orrs	r3, r2
 80090ce:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	4a16      	ldr	r2, [pc, #88]	; (800912c <TIM_OC4_SetConfig+0xb4>)
 80090d4:	4293      	cmp	r3, r2
 80090d6:	d117      	bne.n	8009108 <TIM_OC4_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 80090d8:	683b      	ldr	r3, [r7, #0]
 80090da:	695b      	ldr	r3, [r3, #20]
 80090dc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80090e0:	d008      	beq.n	80090f4 <TIM_OC4_SetConfig+0x7c>
 80090e2:	683b      	ldr	r3, [r7, #0]
 80090e4:	695b      	ldr	r3, [r3, #20]
 80090e6:	2b00      	cmp	r3, #0
 80090e8:	d004      	beq.n	80090f4 <TIM_OC4_SetConfig+0x7c>
 80090ea:	f241 71e4 	movw	r1, #6116	; 0x17e4
 80090ee:	4810      	ldr	r0, [pc, #64]	; (8009130 <TIM_OC4_SetConfig+0xb8>)
 80090f0:	f7f9 f863 	bl	80021ba <assert_failed>

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80090f4:	697b      	ldr	r3, [r7, #20]
 80090f6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80090fa:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80090fc:	683b      	ldr	r3, [r7, #0]
 80090fe:	695b      	ldr	r3, [r3, #20]
 8009100:	019b      	lsls	r3, r3, #6
 8009102:	697a      	ldr	r2, [r7, #20]
 8009104:	4313      	orrs	r3, r2
 8009106:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	697a      	ldr	r2, [r7, #20]
 800910c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	68fa      	ldr	r2, [r7, #12]
 8009112:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009114:	683b      	ldr	r3, [r7, #0]
 8009116:	685a      	ldr	r2, [r3, #4]
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	693a      	ldr	r2, [r7, #16]
 8009120:	621a      	str	r2, [r3, #32]
}
 8009122:	bf00      	nop
 8009124:	3718      	adds	r7, #24
 8009126:	46bd      	mov	sp, r7
 8009128:	bd80      	pop	{r7, pc}
 800912a:	bf00      	nop
 800912c:	40010000 	.word	0x40010000
 8009130:	0800fc04 	.word	0x0800fc04

08009134 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009134:	b480      	push	{r7}
 8009136:	b087      	sub	sp, #28
 8009138:	af00      	add	r7, sp, #0
 800913a:	60f8      	str	r0, [r7, #12]
 800913c:	60b9      	str	r1, [r7, #8]
 800913e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009140:	68fb      	ldr	r3, [r7, #12]
 8009142:	6a1b      	ldr	r3, [r3, #32]
 8009144:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009146:	68fb      	ldr	r3, [r7, #12]
 8009148:	6a1b      	ldr	r3, [r3, #32]
 800914a:	f023 0201 	bic.w	r2, r3, #1
 800914e:	68fb      	ldr	r3, [r7, #12]
 8009150:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009152:	68fb      	ldr	r3, [r7, #12]
 8009154:	699b      	ldr	r3, [r3, #24]
 8009156:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009158:	693b      	ldr	r3, [r7, #16]
 800915a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800915e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	011b      	lsls	r3, r3, #4
 8009164:	693a      	ldr	r2, [r7, #16]
 8009166:	4313      	orrs	r3, r2
 8009168:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800916a:	697b      	ldr	r3, [r7, #20]
 800916c:	f023 030a 	bic.w	r3, r3, #10
 8009170:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009172:	697a      	ldr	r2, [r7, #20]
 8009174:	68bb      	ldr	r3, [r7, #8]
 8009176:	4313      	orrs	r3, r2
 8009178:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800917a:	68fb      	ldr	r3, [r7, #12]
 800917c:	693a      	ldr	r2, [r7, #16]
 800917e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009180:	68fb      	ldr	r3, [r7, #12]
 8009182:	697a      	ldr	r2, [r7, #20]
 8009184:	621a      	str	r2, [r3, #32]
}
 8009186:	bf00      	nop
 8009188:	371c      	adds	r7, #28
 800918a:	46bd      	mov	sp, r7
 800918c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009190:	4770      	bx	lr

08009192 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009192:	b480      	push	{r7}
 8009194:	b087      	sub	sp, #28
 8009196:	af00      	add	r7, sp, #0
 8009198:	60f8      	str	r0, [r7, #12]
 800919a:	60b9      	str	r1, [r7, #8]
 800919c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800919e:	68fb      	ldr	r3, [r7, #12]
 80091a0:	6a1b      	ldr	r3, [r3, #32]
 80091a2:	f023 0210 	bic.w	r2, r3, #16
 80091a6:	68fb      	ldr	r3, [r7, #12]
 80091a8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80091aa:	68fb      	ldr	r3, [r7, #12]
 80091ac:	699b      	ldr	r3, [r3, #24]
 80091ae:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80091b0:	68fb      	ldr	r3, [r7, #12]
 80091b2:	6a1b      	ldr	r3, [r3, #32]
 80091b4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80091b6:	697b      	ldr	r3, [r7, #20]
 80091b8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80091bc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	031b      	lsls	r3, r3, #12
 80091c2:	697a      	ldr	r2, [r7, #20]
 80091c4:	4313      	orrs	r3, r2
 80091c6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80091c8:	693b      	ldr	r3, [r7, #16]
 80091ca:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80091ce:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80091d0:	68bb      	ldr	r3, [r7, #8]
 80091d2:	011b      	lsls	r3, r3, #4
 80091d4:	693a      	ldr	r2, [r7, #16]
 80091d6:	4313      	orrs	r3, r2
 80091d8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80091da:	68fb      	ldr	r3, [r7, #12]
 80091dc:	697a      	ldr	r2, [r7, #20]
 80091de:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80091e0:	68fb      	ldr	r3, [r7, #12]
 80091e2:	693a      	ldr	r2, [r7, #16]
 80091e4:	621a      	str	r2, [r3, #32]
}
 80091e6:	bf00      	nop
 80091e8:	371c      	adds	r7, #28
 80091ea:	46bd      	mov	sp, r7
 80091ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091f0:	4770      	bx	lr

080091f2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80091f2:	b480      	push	{r7}
 80091f4:	b085      	sub	sp, #20
 80091f6:	af00      	add	r7, sp, #0
 80091f8:	6078      	str	r0, [r7, #4]
 80091fa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	689b      	ldr	r3, [r3, #8]
 8009200:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009202:	68fb      	ldr	r3, [r7, #12]
 8009204:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009208:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800920a:	683a      	ldr	r2, [r7, #0]
 800920c:	68fb      	ldr	r3, [r7, #12]
 800920e:	4313      	orrs	r3, r2
 8009210:	f043 0307 	orr.w	r3, r3, #7
 8009214:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	68fa      	ldr	r2, [r7, #12]
 800921a:	609a      	str	r2, [r3, #8]
}
 800921c:	bf00      	nop
 800921e:	3714      	adds	r7, #20
 8009220:	46bd      	mov	sp, r7
 8009222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009226:	4770      	bx	lr

08009228 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009228:	b480      	push	{r7}
 800922a:	b087      	sub	sp, #28
 800922c:	af00      	add	r7, sp, #0
 800922e:	60f8      	str	r0, [r7, #12]
 8009230:	60b9      	str	r1, [r7, #8]
 8009232:	607a      	str	r2, [r7, #4]
 8009234:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009236:	68fb      	ldr	r3, [r7, #12]
 8009238:	689b      	ldr	r3, [r3, #8]
 800923a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800923c:	697b      	ldr	r3, [r7, #20]
 800923e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009242:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009244:	683b      	ldr	r3, [r7, #0]
 8009246:	021a      	lsls	r2, r3, #8
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	431a      	orrs	r2, r3
 800924c:	68bb      	ldr	r3, [r7, #8]
 800924e:	4313      	orrs	r3, r2
 8009250:	697a      	ldr	r2, [r7, #20]
 8009252:	4313      	orrs	r3, r2
 8009254:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009256:	68fb      	ldr	r3, [r7, #12]
 8009258:	697a      	ldr	r2, [r7, #20]
 800925a:	609a      	str	r2, [r3, #8]
}
 800925c:	bf00      	nop
 800925e:	371c      	adds	r7, #28
 8009260:	46bd      	mov	sp, r7
 8009262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009266:	4770      	bx	lr

08009268 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8009268:	b580      	push	{r7, lr}
 800926a:	b086      	sub	sp, #24
 800926c:	af00      	add	r7, sp, #0
 800926e:	60f8      	str	r0, [r7, #12]
 8009270:	60b9      	str	r1, [r7, #8]
 8009272:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
 8009274:	68fb      	ldr	r3, [r7, #12]
 8009276:	4a2a      	ldr	r2, [pc, #168]	; (8009320 <TIM_CCxChannelCmd+0xb8>)
 8009278:	4293      	cmp	r3, r2
 800927a:	d020      	beq.n	80092be <TIM_CCxChannelCmd+0x56>
 800927c:	68fb      	ldr	r3, [r7, #12]
 800927e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009282:	d01c      	beq.n	80092be <TIM_CCxChannelCmd+0x56>
 8009284:	68fb      	ldr	r3, [r7, #12]
 8009286:	4a27      	ldr	r2, [pc, #156]	; (8009324 <TIM_CCxChannelCmd+0xbc>)
 8009288:	4293      	cmp	r3, r2
 800928a:	d018      	beq.n	80092be <TIM_CCxChannelCmd+0x56>
 800928c:	68fb      	ldr	r3, [r7, #12]
 800928e:	4a26      	ldr	r2, [pc, #152]	; (8009328 <TIM_CCxChannelCmd+0xc0>)
 8009290:	4293      	cmp	r3, r2
 8009292:	d014      	beq.n	80092be <TIM_CCxChannelCmd+0x56>
 8009294:	68fb      	ldr	r3, [r7, #12]
 8009296:	4a25      	ldr	r2, [pc, #148]	; (800932c <TIM_CCxChannelCmd+0xc4>)
 8009298:	4293      	cmp	r3, r2
 800929a:	d010      	beq.n	80092be <TIM_CCxChannelCmd+0x56>
 800929c:	68fb      	ldr	r3, [r7, #12]
 800929e:	4a24      	ldr	r2, [pc, #144]	; (8009330 <TIM_CCxChannelCmd+0xc8>)
 80092a0:	4293      	cmp	r3, r2
 80092a2:	d00c      	beq.n	80092be <TIM_CCxChannelCmd+0x56>
 80092a4:	68fb      	ldr	r3, [r7, #12]
 80092a6:	4a23      	ldr	r2, [pc, #140]	; (8009334 <TIM_CCxChannelCmd+0xcc>)
 80092a8:	4293      	cmp	r3, r2
 80092aa:	d008      	beq.n	80092be <TIM_CCxChannelCmd+0x56>
 80092ac:	68fb      	ldr	r3, [r7, #12]
 80092ae:	4a22      	ldr	r2, [pc, #136]	; (8009338 <TIM_CCxChannelCmd+0xd0>)
 80092b0:	4293      	cmp	r3, r2
 80092b2:	d004      	beq.n	80092be <TIM_CCxChannelCmd+0x56>
 80092b4:	f641 11cc 	movw	r1, #6604	; 0x19cc
 80092b8:	4820      	ldr	r0, [pc, #128]	; (800933c <TIM_CCxChannelCmd+0xd4>)
 80092ba:	f7f8 ff7e 	bl	80021ba <assert_failed>
  assert_param(IS_TIM_CHANNELS(Channel));
 80092be:	68bb      	ldr	r3, [r7, #8]
 80092c0:	2b00      	cmp	r3, #0
 80092c2:	d010      	beq.n	80092e6 <TIM_CCxChannelCmd+0x7e>
 80092c4:	68bb      	ldr	r3, [r7, #8]
 80092c6:	2b04      	cmp	r3, #4
 80092c8:	d00d      	beq.n	80092e6 <TIM_CCxChannelCmd+0x7e>
 80092ca:	68bb      	ldr	r3, [r7, #8]
 80092cc:	2b08      	cmp	r3, #8
 80092ce:	d00a      	beq.n	80092e6 <TIM_CCxChannelCmd+0x7e>
 80092d0:	68bb      	ldr	r3, [r7, #8]
 80092d2:	2b0c      	cmp	r3, #12
 80092d4:	d007      	beq.n	80092e6 <TIM_CCxChannelCmd+0x7e>
 80092d6:	68bb      	ldr	r3, [r7, #8]
 80092d8:	2b3c      	cmp	r3, #60	; 0x3c
 80092da:	d004      	beq.n	80092e6 <TIM_CCxChannelCmd+0x7e>
 80092dc:	f641 11cd 	movw	r1, #6605	; 0x19cd
 80092e0:	4816      	ldr	r0, [pc, #88]	; (800933c <TIM_CCxChannelCmd+0xd4>)
 80092e2:	f7f8 ff6a 	bl	80021ba <assert_failed>

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80092e6:	68bb      	ldr	r3, [r7, #8]
 80092e8:	f003 031f 	and.w	r3, r3, #31
 80092ec:	2201      	movs	r2, #1
 80092ee:	fa02 f303 	lsl.w	r3, r2, r3
 80092f2:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80092f4:	68fb      	ldr	r3, [r7, #12]
 80092f6:	6a1a      	ldr	r2, [r3, #32]
 80092f8:	697b      	ldr	r3, [r7, #20]
 80092fa:	43db      	mvns	r3, r3
 80092fc:	401a      	ands	r2, r3
 80092fe:	68fb      	ldr	r3, [r7, #12]
 8009300:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009302:	68fb      	ldr	r3, [r7, #12]
 8009304:	6a1a      	ldr	r2, [r3, #32]
 8009306:	68bb      	ldr	r3, [r7, #8]
 8009308:	f003 031f 	and.w	r3, r3, #31
 800930c:	6879      	ldr	r1, [r7, #4]
 800930e:	fa01 f303 	lsl.w	r3, r1, r3
 8009312:	431a      	orrs	r2, r3
 8009314:	68fb      	ldr	r3, [r7, #12]
 8009316:	621a      	str	r2, [r3, #32]
}
 8009318:	bf00      	nop
 800931a:	3718      	adds	r7, #24
 800931c:	46bd      	mov	sp, r7
 800931e:	bd80      	pop	{r7, pc}
 8009320:	40010000 	.word	0x40010000
 8009324:	40000400 	.word	0x40000400
 8009328:	40000800 	.word	0x40000800
 800932c:	40000c00 	.word	0x40000c00
 8009330:	40014000 	.word	0x40014000
 8009334:	40014400 	.word	0x40014400
 8009338:	40014800 	.word	0x40014800
 800933c:	0800fc04 	.word	0x0800fc04

08009340 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009340:	b580      	push	{r7, lr}
 8009342:	b084      	sub	sp, #16
 8009344:	af00      	add	r7, sp, #0
 8009346:	6078      	str	r0, [r7, #4]
 8009348:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr2;
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	681b      	ldr	r3, [r3, #0]
 800934e:	4a55      	ldr	r2, [pc, #340]	; (80094a4 <HAL_TIMEx_MasterConfigSynchronization+0x164>)
 8009350:	4293      	cmp	r3, r2
 8009352:	d018      	beq.n	8009386 <HAL_TIMEx_MasterConfigSynchronization+0x46>
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	681b      	ldr	r3, [r3, #0]
 8009358:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800935c:	d013      	beq.n	8009386 <HAL_TIMEx_MasterConfigSynchronization+0x46>
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	681b      	ldr	r3, [r3, #0]
 8009362:	4a51      	ldr	r2, [pc, #324]	; (80094a8 <HAL_TIMEx_MasterConfigSynchronization+0x168>)
 8009364:	4293      	cmp	r3, r2
 8009366:	d00e      	beq.n	8009386 <HAL_TIMEx_MasterConfigSynchronization+0x46>
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	681b      	ldr	r3, [r3, #0]
 800936c:	4a4f      	ldr	r2, [pc, #316]	; (80094ac <HAL_TIMEx_MasterConfigSynchronization+0x16c>)
 800936e:	4293      	cmp	r3, r2
 8009370:	d009      	beq.n	8009386 <HAL_TIMEx_MasterConfigSynchronization+0x46>
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	681b      	ldr	r3, [r3, #0]
 8009376:	4a4e      	ldr	r2, [pc, #312]	; (80094b0 <HAL_TIMEx_MasterConfigSynchronization+0x170>)
 8009378:	4293      	cmp	r3, r2
 800937a:	d004      	beq.n	8009386 <HAL_TIMEx_MasterConfigSynchronization+0x46>
 800937c:	f240 6164 	movw	r1, #1636	; 0x664
 8009380:	484c      	ldr	r0, [pc, #304]	; (80094b4 <HAL_TIMEx_MasterConfigSynchronization+0x174>)
 8009382:	f7f8 ff1a 	bl	80021ba <assert_failed>
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
 8009386:	683b      	ldr	r3, [r7, #0]
 8009388:	681b      	ldr	r3, [r3, #0]
 800938a:	2b00      	cmp	r3, #0
 800938c:	d020      	beq.n	80093d0 <HAL_TIMEx_MasterConfigSynchronization+0x90>
 800938e:	683b      	ldr	r3, [r7, #0]
 8009390:	681b      	ldr	r3, [r3, #0]
 8009392:	2b10      	cmp	r3, #16
 8009394:	d01c      	beq.n	80093d0 <HAL_TIMEx_MasterConfigSynchronization+0x90>
 8009396:	683b      	ldr	r3, [r7, #0]
 8009398:	681b      	ldr	r3, [r3, #0]
 800939a:	2b20      	cmp	r3, #32
 800939c:	d018      	beq.n	80093d0 <HAL_TIMEx_MasterConfigSynchronization+0x90>
 800939e:	683b      	ldr	r3, [r7, #0]
 80093a0:	681b      	ldr	r3, [r3, #0]
 80093a2:	2b30      	cmp	r3, #48	; 0x30
 80093a4:	d014      	beq.n	80093d0 <HAL_TIMEx_MasterConfigSynchronization+0x90>
 80093a6:	683b      	ldr	r3, [r7, #0]
 80093a8:	681b      	ldr	r3, [r3, #0]
 80093aa:	2b40      	cmp	r3, #64	; 0x40
 80093ac:	d010      	beq.n	80093d0 <HAL_TIMEx_MasterConfigSynchronization+0x90>
 80093ae:	683b      	ldr	r3, [r7, #0]
 80093b0:	681b      	ldr	r3, [r3, #0]
 80093b2:	2b50      	cmp	r3, #80	; 0x50
 80093b4:	d00c      	beq.n	80093d0 <HAL_TIMEx_MasterConfigSynchronization+0x90>
 80093b6:	683b      	ldr	r3, [r7, #0]
 80093b8:	681b      	ldr	r3, [r3, #0]
 80093ba:	2b60      	cmp	r3, #96	; 0x60
 80093bc:	d008      	beq.n	80093d0 <HAL_TIMEx_MasterConfigSynchronization+0x90>
 80093be:	683b      	ldr	r3, [r7, #0]
 80093c0:	681b      	ldr	r3, [r3, #0]
 80093c2:	2b70      	cmp	r3, #112	; 0x70
 80093c4:	d004      	beq.n	80093d0 <HAL_TIMEx_MasterConfigSynchronization+0x90>
 80093c6:	f240 6165 	movw	r1, #1637	; 0x665
 80093ca:	483a      	ldr	r0, [pc, #232]	; (80094b4 <HAL_TIMEx_MasterConfigSynchronization+0x174>)
 80093cc:	f7f8 fef5 	bl	80021ba <assert_failed>
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
 80093d0:	683b      	ldr	r3, [r7, #0]
 80093d2:	685b      	ldr	r3, [r3, #4]
 80093d4:	2b80      	cmp	r3, #128	; 0x80
 80093d6:	d008      	beq.n	80093ea <HAL_TIMEx_MasterConfigSynchronization+0xaa>
 80093d8:	683b      	ldr	r3, [r7, #0]
 80093da:	685b      	ldr	r3, [r3, #4]
 80093dc:	2b00      	cmp	r3, #0
 80093de:	d004      	beq.n	80093ea <HAL_TIMEx_MasterConfigSynchronization+0xaa>
 80093e0:	f240 6166 	movw	r1, #1638	; 0x666
 80093e4:	4833      	ldr	r0, [pc, #204]	; (80094b4 <HAL_TIMEx_MasterConfigSynchronization+0x174>)
 80093e6:	f7f8 fee8 	bl	80021ba <assert_failed>

  /* Check input state */
  __HAL_LOCK(htim);
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80093f0:	2b01      	cmp	r3, #1
 80093f2:	d101      	bne.n	80093f8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80093f4:	2302      	movs	r3, #2
 80093f6:	e050      	b.n	800949a <HAL_TIMEx_MasterConfigSynchronization+0x15a>
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	2201      	movs	r2, #1
 80093fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	2202      	movs	r2, #2
 8009404:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	681b      	ldr	r3, [r3, #0]
 800940c:	685b      	ldr	r3, [r3, #4]
 800940e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	681b      	ldr	r3, [r3, #0]
 8009414:	689b      	ldr	r3, [r3, #8]
 8009416:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009418:	68fb      	ldr	r3, [r7, #12]
 800941a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800941e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009420:	683b      	ldr	r3, [r7, #0]
 8009422:	681b      	ldr	r3, [r3, #0]
 8009424:	68fa      	ldr	r2, [r7, #12]
 8009426:	4313      	orrs	r3, r2
 8009428:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	681b      	ldr	r3, [r3, #0]
 800942e:	68fa      	ldr	r2, [r7, #12]
 8009430:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	681b      	ldr	r3, [r3, #0]
 8009436:	4a1b      	ldr	r2, [pc, #108]	; (80094a4 <HAL_TIMEx_MasterConfigSynchronization+0x164>)
 8009438:	4293      	cmp	r3, r2
 800943a:	d018      	beq.n	800946e <HAL_TIMEx_MasterConfigSynchronization+0x12e>
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	681b      	ldr	r3, [r3, #0]
 8009440:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009444:	d013      	beq.n	800946e <HAL_TIMEx_MasterConfigSynchronization+0x12e>
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	681b      	ldr	r3, [r3, #0]
 800944a:	4a17      	ldr	r2, [pc, #92]	; (80094a8 <HAL_TIMEx_MasterConfigSynchronization+0x168>)
 800944c:	4293      	cmp	r3, r2
 800944e:	d00e      	beq.n	800946e <HAL_TIMEx_MasterConfigSynchronization+0x12e>
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	681b      	ldr	r3, [r3, #0]
 8009454:	4a15      	ldr	r2, [pc, #84]	; (80094ac <HAL_TIMEx_MasterConfigSynchronization+0x16c>)
 8009456:	4293      	cmp	r3, r2
 8009458:	d009      	beq.n	800946e <HAL_TIMEx_MasterConfigSynchronization+0x12e>
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	681b      	ldr	r3, [r3, #0]
 800945e:	4a14      	ldr	r2, [pc, #80]	; (80094b0 <HAL_TIMEx_MasterConfigSynchronization+0x170>)
 8009460:	4293      	cmp	r3, r2
 8009462:	d004      	beq.n	800946e <HAL_TIMEx_MasterConfigSynchronization+0x12e>
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	681b      	ldr	r3, [r3, #0]
 8009468:	4a13      	ldr	r2, [pc, #76]	; (80094b8 <HAL_TIMEx_MasterConfigSynchronization+0x178>)
 800946a:	4293      	cmp	r3, r2
 800946c:	d10c      	bne.n	8009488 <HAL_TIMEx_MasterConfigSynchronization+0x148>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800946e:	68bb      	ldr	r3, [r7, #8]
 8009470:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009474:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009476:	683b      	ldr	r3, [r7, #0]
 8009478:	685b      	ldr	r3, [r3, #4]
 800947a:	68ba      	ldr	r2, [r7, #8]
 800947c:	4313      	orrs	r3, r2
 800947e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	681b      	ldr	r3, [r3, #0]
 8009484:	68ba      	ldr	r2, [r7, #8]
 8009486:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	2201      	movs	r2, #1
 800948c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	2200      	movs	r2, #0
 8009494:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009498:	2300      	movs	r3, #0
}
 800949a:	4618      	mov	r0, r3
 800949c:	3710      	adds	r7, #16
 800949e:	46bd      	mov	sp, r7
 80094a0:	bd80      	pop	{r7, pc}
 80094a2:	bf00      	nop
 80094a4:	40010000 	.word	0x40010000
 80094a8:	40000400 	.word	0x40000400
 80094ac:	40000800 	.word	0x40000800
 80094b0:	40000c00 	.word	0x40000c00
 80094b4:	0800fc3c 	.word	0x0800fc3c
 80094b8:	40014000 	.word	0x40014000

080094bc <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80094bc:	b084      	sub	sp, #16
 80094be:	b580      	push	{r7, lr}
 80094c0:	b084      	sub	sp, #16
 80094c2:	af00      	add	r7, sp, #0
 80094c4:	6078      	str	r0, [r7, #4]
 80094c6:	f107 001c 	add.w	r0, r7, #28
 80094ca:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80094ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094d0:	2b01      	cmp	r3, #1
 80094d2:	d122      	bne.n	800951a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80094d8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	68db      	ldr	r3, [r3, #12]
 80094e4:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80094e8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80094ec:	687a      	ldr	r2, [r7, #4]
 80094ee:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	68db      	ldr	r3, [r3, #12]
 80094f4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80094fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80094fe:	2b01      	cmp	r3, #1
 8009500:	d105      	bne.n	800950e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	68db      	ldr	r3, [r3, #12]
 8009506:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800950e:	6878      	ldr	r0, [r7, #4]
 8009510:	f001 fac6 	bl	800aaa0 <USB_CoreReset>
 8009514:	4603      	mov	r3, r0
 8009516:	73fb      	strb	r3, [r7, #15]
 8009518:	e01a      	b.n	8009550 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	68db      	ldr	r3, [r3, #12]
 800951e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8009526:	6878      	ldr	r0, [r7, #4]
 8009528:	f001 faba 	bl	800aaa0 <USB_CoreReset>
 800952c:	4603      	mov	r3, r0
 800952e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8009530:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009532:	2b00      	cmp	r3, #0
 8009534:	d106      	bne.n	8009544 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800953a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	639a      	str	r2, [r3, #56]	; 0x38
 8009542:	e005      	b.n	8009550 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009548:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8009550:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009552:	2b01      	cmp	r3, #1
 8009554:	d10b      	bne.n	800956e <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	689b      	ldr	r3, [r3, #8]
 800955a:	f043 0206 	orr.w	r2, r3, #6
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	689b      	ldr	r3, [r3, #8]
 8009566:	f043 0220 	orr.w	r2, r3, #32
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800956e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009570:	4618      	mov	r0, r3
 8009572:	3710      	adds	r7, #16
 8009574:	46bd      	mov	sp, r7
 8009576:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800957a:	b004      	add	sp, #16
 800957c:	4770      	bx	lr
	...

08009580 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8009580:	b480      	push	{r7}
 8009582:	b087      	sub	sp, #28
 8009584:	af00      	add	r7, sp, #0
 8009586:	60f8      	str	r0, [r7, #12]
 8009588:	60b9      	str	r1, [r7, #8]
 800958a:	4613      	mov	r3, r2
 800958c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800958e:	79fb      	ldrb	r3, [r7, #7]
 8009590:	2b02      	cmp	r3, #2
 8009592:	d165      	bne.n	8009660 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8009594:	68bb      	ldr	r3, [r7, #8]
 8009596:	4a41      	ldr	r2, [pc, #260]	; (800969c <USB_SetTurnaroundTime+0x11c>)
 8009598:	4293      	cmp	r3, r2
 800959a:	d906      	bls.n	80095aa <USB_SetTurnaroundTime+0x2a>
 800959c:	68bb      	ldr	r3, [r7, #8]
 800959e:	4a40      	ldr	r2, [pc, #256]	; (80096a0 <USB_SetTurnaroundTime+0x120>)
 80095a0:	4293      	cmp	r3, r2
 80095a2:	d802      	bhi.n	80095aa <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80095a4:	230f      	movs	r3, #15
 80095a6:	617b      	str	r3, [r7, #20]
 80095a8:	e062      	b.n	8009670 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80095aa:	68bb      	ldr	r3, [r7, #8]
 80095ac:	4a3c      	ldr	r2, [pc, #240]	; (80096a0 <USB_SetTurnaroundTime+0x120>)
 80095ae:	4293      	cmp	r3, r2
 80095b0:	d906      	bls.n	80095c0 <USB_SetTurnaroundTime+0x40>
 80095b2:	68bb      	ldr	r3, [r7, #8]
 80095b4:	4a3b      	ldr	r2, [pc, #236]	; (80096a4 <USB_SetTurnaroundTime+0x124>)
 80095b6:	4293      	cmp	r3, r2
 80095b8:	d802      	bhi.n	80095c0 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80095ba:	230e      	movs	r3, #14
 80095bc:	617b      	str	r3, [r7, #20]
 80095be:	e057      	b.n	8009670 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80095c0:	68bb      	ldr	r3, [r7, #8]
 80095c2:	4a38      	ldr	r2, [pc, #224]	; (80096a4 <USB_SetTurnaroundTime+0x124>)
 80095c4:	4293      	cmp	r3, r2
 80095c6:	d906      	bls.n	80095d6 <USB_SetTurnaroundTime+0x56>
 80095c8:	68bb      	ldr	r3, [r7, #8]
 80095ca:	4a37      	ldr	r2, [pc, #220]	; (80096a8 <USB_SetTurnaroundTime+0x128>)
 80095cc:	4293      	cmp	r3, r2
 80095ce:	d802      	bhi.n	80095d6 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80095d0:	230d      	movs	r3, #13
 80095d2:	617b      	str	r3, [r7, #20]
 80095d4:	e04c      	b.n	8009670 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80095d6:	68bb      	ldr	r3, [r7, #8]
 80095d8:	4a33      	ldr	r2, [pc, #204]	; (80096a8 <USB_SetTurnaroundTime+0x128>)
 80095da:	4293      	cmp	r3, r2
 80095dc:	d906      	bls.n	80095ec <USB_SetTurnaroundTime+0x6c>
 80095de:	68bb      	ldr	r3, [r7, #8]
 80095e0:	4a32      	ldr	r2, [pc, #200]	; (80096ac <USB_SetTurnaroundTime+0x12c>)
 80095e2:	4293      	cmp	r3, r2
 80095e4:	d802      	bhi.n	80095ec <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80095e6:	230c      	movs	r3, #12
 80095e8:	617b      	str	r3, [r7, #20]
 80095ea:	e041      	b.n	8009670 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80095ec:	68bb      	ldr	r3, [r7, #8]
 80095ee:	4a2f      	ldr	r2, [pc, #188]	; (80096ac <USB_SetTurnaroundTime+0x12c>)
 80095f0:	4293      	cmp	r3, r2
 80095f2:	d906      	bls.n	8009602 <USB_SetTurnaroundTime+0x82>
 80095f4:	68bb      	ldr	r3, [r7, #8]
 80095f6:	4a2e      	ldr	r2, [pc, #184]	; (80096b0 <USB_SetTurnaroundTime+0x130>)
 80095f8:	4293      	cmp	r3, r2
 80095fa:	d802      	bhi.n	8009602 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80095fc:	230b      	movs	r3, #11
 80095fe:	617b      	str	r3, [r7, #20]
 8009600:	e036      	b.n	8009670 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8009602:	68bb      	ldr	r3, [r7, #8]
 8009604:	4a2a      	ldr	r2, [pc, #168]	; (80096b0 <USB_SetTurnaroundTime+0x130>)
 8009606:	4293      	cmp	r3, r2
 8009608:	d906      	bls.n	8009618 <USB_SetTurnaroundTime+0x98>
 800960a:	68bb      	ldr	r3, [r7, #8]
 800960c:	4a29      	ldr	r2, [pc, #164]	; (80096b4 <USB_SetTurnaroundTime+0x134>)
 800960e:	4293      	cmp	r3, r2
 8009610:	d802      	bhi.n	8009618 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8009612:	230a      	movs	r3, #10
 8009614:	617b      	str	r3, [r7, #20]
 8009616:	e02b      	b.n	8009670 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8009618:	68bb      	ldr	r3, [r7, #8]
 800961a:	4a26      	ldr	r2, [pc, #152]	; (80096b4 <USB_SetTurnaroundTime+0x134>)
 800961c:	4293      	cmp	r3, r2
 800961e:	d906      	bls.n	800962e <USB_SetTurnaroundTime+0xae>
 8009620:	68bb      	ldr	r3, [r7, #8]
 8009622:	4a25      	ldr	r2, [pc, #148]	; (80096b8 <USB_SetTurnaroundTime+0x138>)
 8009624:	4293      	cmp	r3, r2
 8009626:	d802      	bhi.n	800962e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8009628:	2309      	movs	r3, #9
 800962a:	617b      	str	r3, [r7, #20]
 800962c:	e020      	b.n	8009670 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800962e:	68bb      	ldr	r3, [r7, #8]
 8009630:	4a21      	ldr	r2, [pc, #132]	; (80096b8 <USB_SetTurnaroundTime+0x138>)
 8009632:	4293      	cmp	r3, r2
 8009634:	d906      	bls.n	8009644 <USB_SetTurnaroundTime+0xc4>
 8009636:	68bb      	ldr	r3, [r7, #8]
 8009638:	4a20      	ldr	r2, [pc, #128]	; (80096bc <USB_SetTurnaroundTime+0x13c>)
 800963a:	4293      	cmp	r3, r2
 800963c:	d802      	bhi.n	8009644 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800963e:	2308      	movs	r3, #8
 8009640:	617b      	str	r3, [r7, #20]
 8009642:	e015      	b.n	8009670 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8009644:	68bb      	ldr	r3, [r7, #8]
 8009646:	4a1d      	ldr	r2, [pc, #116]	; (80096bc <USB_SetTurnaroundTime+0x13c>)
 8009648:	4293      	cmp	r3, r2
 800964a:	d906      	bls.n	800965a <USB_SetTurnaroundTime+0xda>
 800964c:	68bb      	ldr	r3, [r7, #8]
 800964e:	4a1c      	ldr	r2, [pc, #112]	; (80096c0 <USB_SetTurnaroundTime+0x140>)
 8009650:	4293      	cmp	r3, r2
 8009652:	d802      	bhi.n	800965a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8009654:	2307      	movs	r3, #7
 8009656:	617b      	str	r3, [r7, #20]
 8009658:	e00a      	b.n	8009670 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800965a:	2306      	movs	r3, #6
 800965c:	617b      	str	r3, [r7, #20]
 800965e:	e007      	b.n	8009670 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8009660:	79fb      	ldrb	r3, [r7, #7]
 8009662:	2b00      	cmp	r3, #0
 8009664:	d102      	bne.n	800966c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8009666:	2309      	movs	r3, #9
 8009668:	617b      	str	r3, [r7, #20]
 800966a:	e001      	b.n	8009670 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800966c:	2309      	movs	r3, #9
 800966e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8009670:	68fb      	ldr	r3, [r7, #12]
 8009672:	68db      	ldr	r3, [r3, #12]
 8009674:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8009678:	68fb      	ldr	r3, [r7, #12]
 800967a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800967c:	68fb      	ldr	r3, [r7, #12]
 800967e:	68da      	ldr	r2, [r3, #12]
 8009680:	697b      	ldr	r3, [r7, #20]
 8009682:	029b      	lsls	r3, r3, #10
 8009684:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8009688:	431a      	orrs	r2, r3
 800968a:	68fb      	ldr	r3, [r7, #12]
 800968c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800968e:	2300      	movs	r3, #0
}
 8009690:	4618      	mov	r0, r3
 8009692:	371c      	adds	r7, #28
 8009694:	46bd      	mov	sp, r7
 8009696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800969a:	4770      	bx	lr
 800969c:	00d8acbf 	.word	0x00d8acbf
 80096a0:	00e4e1bf 	.word	0x00e4e1bf
 80096a4:	00f423ff 	.word	0x00f423ff
 80096a8:	0106737f 	.word	0x0106737f
 80096ac:	011a499f 	.word	0x011a499f
 80096b0:	01312cff 	.word	0x01312cff
 80096b4:	014ca43f 	.word	0x014ca43f
 80096b8:	016e35ff 	.word	0x016e35ff
 80096bc:	01a6ab1f 	.word	0x01a6ab1f
 80096c0:	01e847ff 	.word	0x01e847ff

080096c4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80096c4:	b480      	push	{r7}
 80096c6:	b083      	sub	sp, #12
 80096c8:	af00      	add	r7, sp, #0
 80096ca:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	689b      	ldr	r3, [r3, #8]
 80096d0:	f043 0201 	orr.w	r2, r3, #1
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80096d8:	2300      	movs	r3, #0
}
 80096da:	4618      	mov	r0, r3
 80096dc:	370c      	adds	r7, #12
 80096de:	46bd      	mov	sp, r7
 80096e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096e4:	4770      	bx	lr

080096e6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80096e6:	b480      	push	{r7}
 80096e8:	b083      	sub	sp, #12
 80096ea:	af00      	add	r7, sp, #0
 80096ec:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	689b      	ldr	r3, [r3, #8]
 80096f2:	f023 0201 	bic.w	r2, r3, #1
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80096fa:	2300      	movs	r3, #0
}
 80096fc:	4618      	mov	r0, r3
 80096fe:	370c      	adds	r7, #12
 8009700:	46bd      	mov	sp, r7
 8009702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009706:	4770      	bx	lr

08009708 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8009708:	b580      	push	{r7, lr}
 800970a:	b082      	sub	sp, #8
 800970c:	af00      	add	r7, sp, #0
 800970e:	6078      	str	r0, [r7, #4]
 8009710:	460b      	mov	r3, r1
 8009712:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	68db      	ldr	r3, [r3, #12]
 8009718:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8009720:	78fb      	ldrb	r3, [r7, #3]
 8009722:	2b01      	cmp	r3, #1
 8009724:	d106      	bne.n	8009734 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	68db      	ldr	r3, [r3, #12]
 800972a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	60da      	str	r2, [r3, #12]
 8009732:	e00b      	b.n	800974c <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8009734:	78fb      	ldrb	r3, [r7, #3]
 8009736:	2b00      	cmp	r3, #0
 8009738:	d106      	bne.n	8009748 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	68db      	ldr	r3, [r3, #12]
 800973e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	60da      	str	r2, [r3, #12]
 8009746:	e001      	b.n	800974c <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8009748:	2301      	movs	r3, #1
 800974a:	e003      	b.n	8009754 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800974c:	2032      	movs	r0, #50	; 0x32
 800974e:	f7f9 f817 	bl	8002780 <HAL_Delay>

  return HAL_OK;
 8009752:	2300      	movs	r3, #0
}
 8009754:	4618      	mov	r0, r3
 8009756:	3708      	adds	r7, #8
 8009758:	46bd      	mov	sp, r7
 800975a:	bd80      	pop	{r7, pc}

0800975c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800975c:	b084      	sub	sp, #16
 800975e:	b580      	push	{r7, lr}
 8009760:	b086      	sub	sp, #24
 8009762:	af00      	add	r7, sp, #0
 8009764:	6078      	str	r0, [r7, #4]
 8009766:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800976a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800976e:	2300      	movs	r3, #0
 8009770:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8009776:	2300      	movs	r3, #0
 8009778:	613b      	str	r3, [r7, #16]
 800977a:	e009      	b.n	8009790 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800977c:	687a      	ldr	r2, [r7, #4]
 800977e:	693b      	ldr	r3, [r7, #16]
 8009780:	3340      	adds	r3, #64	; 0x40
 8009782:	009b      	lsls	r3, r3, #2
 8009784:	4413      	add	r3, r2
 8009786:	2200      	movs	r2, #0
 8009788:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800978a:	693b      	ldr	r3, [r7, #16]
 800978c:	3301      	adds	r3, #1
 800978e:	613b      	str	r3, [r7, #16]
 8009790:	693b      	ldr	r3, [r7, #16]
 8009792:	2b0e      	cmp	r3, #14
 8009794:	d9f2      	bls.n	800977c <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8009796:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009798:	2b00      	cmp	r3, #0
 800979a:	d11c      	bne.n	80097d6 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800979c:	68fb      	ldr	r3, [r7, #12]
 800979e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80097a2:	685b      	ldr	r3, [r3, #4]
 80097a4:	68fa      	ldr	r2, [r7, #12]
 80097a6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80097aa:	f043 0302 	orr.w	r3, r3, #2
 80097ae:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80097b4:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80097c0:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80097cc:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	639a      	str	r2, [r3, #56]	; 0x38
 80097d4:	e00b      	b.n	80097ee <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80097da:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80097e6:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80097ee:	68fb      	ldr	r3, [r7, #12]
 80097f0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80097f4:	461a      	mov	r2, r3
 80097f6:	2300      	movs	r3, #0
 80097f8:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80097fa:	68fb      	ldr	r3, [r7, #12]
 80097fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009800:	4619      	mov	r1, r3
 8009802:	68fb      	ldr	r3, [r7, #12]
 8009804:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009808:	461a      	mov	r2, r3
 800980a:	680b      	ldr	r3, [r1, #0]
 800980c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800980e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009810:	2b01      	cmp	r3, #1
 8009812:	d10c      	bne.n	800982e <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8009814:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009816:	2b00      	cmp	r3, #0
 8009818:	d104      	bne.n	8009824 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800981a:	2100      	movs	r1, #0
 800981c:	6878      	ldr	r0, [r7, #4]
 800981e:	f000 f949 	bl	8009ab4 <USB_SetDevSpeed>
 8009822:	e008      	b.n	8009836 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8009824:	2101      	movs	r1, #1
 8009826:	6878      	ldr	r0, [r7, #4]
 8009828:	f000 f944 	bl	8009ab4 <USB_SetDevSpeed>
 800982c:	e003      	b.n	8009836 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800982e:	2103      	movs	r1, #3
 8009830:	6878      	ldr	r0, [r7, #4]
 8009832:	f000 f93f 	bl	8009ab4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8009836:	2110      	movs	r1, #16
 8009838:	6878      	ldr	r0, [r7, #4]
 800983a:	f000 f8f3 	bl	8009a24 <USB_FlushTxFifo>
 800983e:	4603      	mov	r3, r0
 8009840:	2b00      	cmp	r3, #0
 8009842:	d001      	beq.n	8009848 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8009844:	2301      	movs	r3, #1
 8009846:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8009848:	6878      	ldr	r0, [r7, #4]
 800984a:	f000 f911 	bl	8009a70 <USB_FlushRxFifo>
 800984e:	4603      	mov	r3, r0
 8009850:	2b00      	cmp	r3, #0
 8009852:	d001      	beq.n	8009858 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8009854:	2301      	movs	r3, #1
 8009856:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8009858:	68fb      	ldr	r3, [r7, #12]
 800985a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800985e:	461a      	mov	r2, r3
 8009860:	2300      	movs	r3, #0
 8009862:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8009864:	68fb      	ldr	r3, [r7, #12]
 8009866:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800986a:	461a      	mov	r2, r3
 800986c:	2300      	movs	r3, #0
 800986e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8009870:	68fb      	ldr	r3, [r7, #12]
 8009872:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009876:	461a      	mov	r2, r3
 8009878:	2300      	movs	r3, #0
 800987a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800987c:	2300      	movs	r3, #0
 800987e:	613b      	str	r3, [r7, #16]
 8009880:	e043      	b.n	800990a <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009882:	693b      	ldr	r3, [r7, #16]
 8009884:	015a      	lsls	r2, r3, #5
 8009886:	68fb      	ldr	r3, [r7, #12]
 8009888:	4413      	add	r3, r2
 800988a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800988e:	681b      	ldr	r3, [r3, #0]
 8009890:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009894:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009898:	d118      	bne.n	80098cc <USB_DevInit+0x170>
    {
      if (i == 0U)
 800989a:	693b      	ldr	r3, [r7, #16]
 800989c:	2b00      	cmp	r3, #0
 800989e:	d10a      	bne.n	80098b6 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80098a0:	693b      	ldr	r3, [r7, #16]
 80098a2:	015a      	lsls	r2, r3, #5
 80098a4:	68fb      	ldr	r3, [r7, #12]
 80098a6:	4413      	add	r3, r2
 80098a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80098ac:	461a      	mov	r2, r3
 80098ae:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80098b2:	6013      	str	r3, [r2, #0]
 80098b4:	e013      	b.n	80098de <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80098b6:	693b      	ldr	r3, [r7, #16]
 80098b8:	015a      	lsls	r2, r3, #5
 80098ba:	68fb      	ldr	r3, [r7, #12]
 80098bc:	4413      	add	r3, r2
 80098be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80098c2:	461a      	mov	r2, r3
 80098c4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80098c8:	6013      	str	r3, [r2, #0]
 80098ca:	e008      	b.n	80098de <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80098cc:	693b      	ldr	r3, [r7, #16]
 80098ce:	015a      	lsls	r2, r3, #5
 80098d0:	68fb      	ldr	r3, [r7, #12]
 80098d2:	4413      	add	r3, r2
 80098d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80098d8:	461a      	mov	r2, r3
 80098da:	2300      	movs	r3, #0
 80098dc:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80098de:	693b      	ldr	r3, [r7, #16]
 80098e0:	015a      	lsls	r2, r3, #5
 80098e2:	68fb      	ldr	r3, [r7, #12]
 80098e4:	4413      	add	r3, r2
 80098e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80098ea:	461a      	mov	r2, r3
 80098ec:	2300      	movs	r3, #0
 80098ee:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80098f0:	693b      	ldr	r3, [r7, #16]
 80098f2:	015a      	lsls	r2, r3, #5
 80098f4:	68fb      	ldr	r3, [r7, #12]
 80098f6:	4413      	add	r3, r2
 80098f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80098fc:	461a      	mov	r2, r3
 80098fe:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8009902:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009904:	693b      	ldr	r3, [r7, #16]
 8009906:	3301      	adds	r3, #1
 8009908:	613b      	str	r3, [r7, #16]
 800990a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800990c:	693a      	ldr	r2, [r7, #16]
 800990e:	429a      	cmp	r2, r3
 8009910:	d3b7      	bcc.n	8009882 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009912:	2300      	movs	r3, #0
 8009914:	613b      	str	r3, [r7, #16]
 8009916:	e043      	b.n	80099a0 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009918:	693b      	ldr	r3, [r7, #16]
 800991a:	015a      	lsls	r2, r3, #5
 800991c:	68fb      	ldr	r3, [r7, #12]
 800991e:	4413      	add	r3, r2
 8009920:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009924:	681b      	ldr	r3, [r3, #0]
 8009926:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800992a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800992e:	d118      	bne.n	8009962 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8009930:	693b      	ldr	r3, [r7, #16]
 8009932:	2b00      	cmp	r3, #0
 8009934:	d10a      	bne.n	800994c <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8009936:	693b      	ldr	r3, [r7, #16]
 8009938:	015a      	lsls	r2, r3, #5
 800993a:	68fb      	ldr	r3, [r7, #12]
 800993c:	4413      	add	r3, r2
 800993e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009942:	461a      	mov	r2, r3
 8009944:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8009948:	6013      	str	r3, [r2, #0]
 800994a:	e013      	b.n	8009974 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800994c:	693b      	ldr	r3, [r7, #16]
 800994e:	015a      	lsls	r2, r3, #5
 8009950:	68fb      	ldr	r3, [r7, #12]
 8009952:	4413      	add	r3, r2
 8009954:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009958:	461a      	mov	r2, r3
 800995a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800995e:	6013      	str	r3, [r2, #0]
 8009960:	e008      	b.n	8009974 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8009962:	693b      	ldr	r3, [r7, #16]
 8009964:	015a      	lsls	r2, r3, #5
 8009966:	68fb      	ldr	r3, [r7, #12]
 8009968:	4413      	add	r3, r2
 800996a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800996e:	461a      	mov	r2, r3
 8009970:	2300      	movs	r3, #0
 8009972:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8009974:	693b      	ldr	r3, [r7, #16]
 8009976:	015a      	lsls	r2, r3, #5
 8009978:	68fb      	ldr	r3, [r7, #12]
 800997a:	4413      	add	r3, r2
 800997c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009980:	461a      	mov	r2, r3
 8009982:	2300      	movs	r3, #0
 8009984:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8009986:	693b      	ldr	r3, [r7, #16]
 8009988:	015a      	lsls	r2, r3, #5
 800998a:	68fb      	ldr	r3, [r7, #12]
 800998c:	4413      	add	r3, r2
 800998e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009992:	461a      	mov	r2, r3
 8009994:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8009998:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800999a:	693b      	ldr	r3, [r7, #16]
 800999c:	3301      	adds	r3, #1
 800999e:	613b      	str	r3, [r7, #16]
 80099a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099a2:	693a      	ldr	r2, [r7, #16]
 80099a4:	429a      	cmp	r2, r3
 80099a6:	d3b7      	bcc.n	8009918 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80099a8:	68fb      	ldr	r3, [r7, #12]
 80099aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80099ae:	691b      	ldr	r3, [r3, #16]
 80099b0:	68fa      	ldr	r2, [r7, #12]
 80099b2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80099b6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80099ba:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	2200      	movs	r2, #0
 80099c0:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80099c8:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80099ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099cc:	2b00      	cmp	r3, #0
 80099ce:	d105      	bne.n	80099dc <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	699b      	ldr	r3, [r3, #24]
 80099d4:	f043 0210 	orr.w	r2, r3, #16
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	699a      	ldr	r2, [r3, #24]
 80099e0:	4b0f      	ldr	r3, [pc, #60]	; (8009a20 <USB_DevInit+0x2c4>)
 80099e2:	4313      	orrs	r3, r2
 80099e4:	687a      	ldr	r2, [r7, #4]
 80099e6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80099e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80099ea:	2b00      	cmp	r3, #0
 80099ec:	d005      	beq.n	80099fa <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	699b      	ldr	r3, [r3, #24]
 80099f2:	f043 0208 	orr.w	r2, r3, #8
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80099fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80099fc:	2b01      	cmp	r3, #1
 80099fe:	d107      	bne.n	8009a10 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	699b      	ldr	r3, [r3, #24]
 8009a04:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009a08:	f043 0304 	orr.w	r3, r3, #4
 8009a0c:	687a      	ldr	r2, [r7, #4]
 8009a0e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8009a10:	7dfb      	ldrb	r3, [r7, #23]
}
 8009a12:	4618      	mov	r0, r3
 8009a14:	3718      	adds	r7, #24
 8009a16:	46bd      	mov	sp, r7
 8009a18:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009a1c:	b004      	add	sp, #16
 8009a1e:	4770      	bx	lr
 8009a20:	803c3800 	.word	0x803c3800

08009a24 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8009a24:	b480      	push	{r7}
 8009a26:	b085      	sub	sp, #20
 8009a28:	af00      	add	r7, sp, #0
 8009a2a:	6078      	str	r0, [r7, #4]
 8009a2c:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8009a2e:	2300      	movs	r3, #0
 8009a30:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8009a32:	683b      	ldr	r3, [r7, #0]
 8009a34:	019b      	lsls	r3, r3, #6
 8009a36:	f043 0220 	orr.w	r2, r3, #32
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8009a3e:	68fb      	ldr	r3, [r7, #12]
 8009a40:	3301      	adds	r3, #1
 8009a42:	60fb      	str	r3, [r7, #12]
 8009a44:	68fb      	ldr	r3, [r7, #12]
 8009a46:	4a09      	ldr	r2, [pc, #36]	; (8009a6c <USB_FlushTxFifo+0x48>)
 8009a48:	4293      	cmp	r3, r2
 8009a4a:	d901      	bls.n	8009a50 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8009a4c:	2303      	movs	r3, #3
 8009a4e:	e006      	b.n	8009a5e <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	691b      	ldr	r3, [r3, #16]
 8009a54:	f003 0320 	and.w	r3, r3, #32
 8009a58:	2b20      	cmp	r3, #32
 8009a5a:	d0f0      	beq.n	8009a3e <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8009a5c:	2300      	movs	r3, #0
}
 8009a5e:	4618      	mov	r0, r3
 8009a60:	3714      	adds	r7, #20
 8009a62:	46bd      	mov	sp, r7
 8009a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a68:	4770      	bx	lr
 8009a6a:	bf00      	nop
 8009a6c:	00030d40 	.word	0x00030d40

08009a70 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8009a70:	b480      	push	{r7}
 8009a72:	b085      	sub	sp, #20
 8009a74:	af00      	add	r7, sp, #0
 8009a76:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8009a78:	2300      	movs	r3, #0
 8009a7a:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	2210      	movs	r2, #16
 8009a80:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8009a82:	68fb      	ldr	r3, [r7, #12]
 8009a84:	3301      	adds	r3, #1
 8009a86:	60fb      	str	r3, [r7, #12]
 8009a88:	68fb      	ldr	r3, [r7, #12]
 8009a8a:	4a09      	ldr	r2, [pc, #36]	; (8009ab0 <USB_FlushRxFifo+0x40>)
 8009a8c:	4293      	cmp	r3, r2
 8009a8e:	d901      	bls.n	8009a94 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8009a90:	2303      	movs	r3, #3
 8009a92:	e006      	b.n	8009aa2 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	691b      	ldr	r3, [r3, #16]
 8009a98:	f003 0310 	and.w	r3, r3, #16
 8009a9c:	2b10      	cmp	r3, #16
 8009a9e:	d0f0      	beq.n	8009a82 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8009aa0:	2300      	movs	r3, #0
}
 8009aa2:	4618      	mov	r0, r3
 8009aa4:	3714      	adds	r7, #20
 8009aa6:	46bd      	mov	sp, r7
 8009aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aac:	4770      	bx	lr
 8009aae:	bf00      	nop
 8009ab0:	00030d40 	.word	0x00030d40

08009ab4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8009ab4:	b480      	push	{r7}
 8009ab6:	b085      	sub	sp, #20
 8009ab8:	af00      	add	r7, sp, #0
 8009aba:	6078      	str	r0, [r7, #4]
 8009abc:	460b      	mov	r3, r1
 8009abe:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8009ac4:	68fb      	ldr	r3, [r7, #12]
 8009ac6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009aca:	681a      	ldr	r2, [r3, #0]
 8009acc:	78fb      	ldrb	r3, [r7, #3]
 8009ace:	68f9      	ldr	r1, [r7, #12]
 8009ad0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009ad4:	4313      	orrs	r3, r2
 8009ad6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8009ad8:	2300      	movs	r3, #0
}
 8009ada:	4618      	mov	r0, r3
 8009adc:	3714      	adds	r7, #20
 8009ade:	46bd      	mov	sp, r7
 8009ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ae4:	4770      	bx	lr

08009ae6 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8009ae6:	b480      	push	{r7}
 8009ae8:	b087      	sub	sp, #28
 8009aea:	af00      	add	r7, sp, #0
 8009aec:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8009af2:	693b      	ldr	r3, [r7, #16]
 8009af4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009af8:	689b      	ldr	r3, [r3, #8]
 8009afa:	f003 0306 	and.w	r3, r3, #6
 8009afe:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8009b00:	68fb      	ldr	r3, [r7, #12]
 8009b02:	2b00      	cmp	r3, #0
 8009b04:	d102      	bne.n	8009b0c <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8009b06:	2300      	movs	r3, #0
 8009b08:	75fb      	strb	r3, [r7, #23]
 8009b0a:	e00a      	b.n	8009b22 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8009b0c:	68fb      	ldr	r3, [r7, #12]
 8009b0e:	2b02      	cmp	r3, #2
 8009b10:	d002      	beq.n	8009b18 <USB_GetDevSpeed+0x32>
 8009b12:	68fb      	ldr	r3, [r7, #12]
 8009b14:	2b06      	cmp	r3, #6
 8009b16:	d102      	bne.n	8009b1e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8009b18:	2302      	movs	r3, #2
 8009b1a:	75fb      	strb	r3, [r7, #23]
 8009b1c:	e001      	b.n	8009b22 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8009b1e:	230f      	movs	r3, #15
 8009b20:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8009b22:	7dfb      	ldrb	r3, [r7, #23]
}
 8009b24:	4618      	mov	r0, r3
 8009b26:	371c      	adds	r7, #28
 8009b28:	46bd      	mov	sp, r7
 8009b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b2e:	4770      	bx	lr

08009b30 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009b30:	b480      	push	{r7}
 8009b32:	b085      	sub	sp, #20
 8009b34:	af00      	add	r7, sp, #0
 8009b36:	6078      	str	r0, [r7, #4]
 8009b38:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009b3e:	683b      	ldr	r3, [r7, #0]
 8009b40:	781b      	ldrb	r3, [r3, #0]
 8009b42:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009b44:	683b      	ldr	r3, [r7, #0]
 8009b46:	785b      	ldrb	r3, [r3, #1]
 8009b48:	2b01      	cmp	r3, #1
 8009b4a:	d13a      	bne.n	8009bc2 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8009b4c:	68fb      	ldr	r3, [r7, #12]
 8009b4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009b52:	69da      	ldr	r2, [r3, #28]
 8009b54:	683b      	ldr	r3, [r7, #0]
 8009b56:	781b      	ldrb	r3, [r3, #0]
 8009b58:	f003 030f 	and.w	r3, r3, #15
 8009b5c:	2101      	movs	r1, #1
 8009b5e:	fa01 f303 	lsl.w	r3, r1, r3
 8009b62:	b29b      	uxth	r3, r3
 8009b64:	68f9      	ldr	r1, [r7, #12]
 8009b66:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009b6a:	4313      	orrs	r3, r2
 8009b6c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8009b6e:	68bb      	ldr	r3, [r7, #8]
 8009b70:	015a      	lsls	r2, r3, #5
 8009b72:	68fb      	ldr	r3, [r7, #12]
 8009b74:	4413      	add	r3, r2
 8009b76:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009b7a:	681b      	ldr	r3, [r3, #0]
 8009b7c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009b80:	2b00      	cmp	r3, #0
 8009b82:	d155      	bne.n	8009c30 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009b84:	68bb      	ldr	r3, [r7, #8]
 8009b86:	015a      	lsls	r2, r3, #5
 8009b88:	68fb      	ldr	r3, [r7, #12]
 8009b8a:	4413      	add	r3, r2
 8009b8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009b90:	681a      	ldr	r2, [r3, #0]
 8009b92:	683b      	ldr	r3, [r7, #0]
 8009b94:	689b      	ldr	r3, [r3, #8]
 8009b96:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8009b9a:	683b      	ldr	r3, [r7, #0]
 8009b9c:	78db      	ldrb	r3, [r3, #3]
 8009b9e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009ba0:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8009ba2:	68bb      	ldr	r3, [r7, #8]
 8009ba4:	059b      	lsls	r3, r3, #22
 8009ba6:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009ba8:	4313      	orrs	r3, r2
 8009baa:	68ba      	ldr	r2, [r7, #8]
 8009bac:	0151      	lsls	r1, r2, #5
 8009bae:	68fa      	ldr	r2, [r7, #12]
 8009bb0:	440a      	add	r2, r1
 8009bb2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009bb6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009bba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009bbe:	6013      	str	r3, [r2, #0]
 8009bc0:	e036      	b.n	8009c30 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8009bc2:	68fb      	ldr	r3, [r7, #12]
 8009bc4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009bc8:	69da      	ldr	r2, [r3, #28]
 8009bca:	683b      	ldr	r3, [r7, #0]
 8009bcc:	781b      	ldrb	r3, [r3, #0]
 8009bce:	f003 030f 	and.w	r3, r3, #15
 8009bd2:	2101      	movs	r1, #1
 8009bd4:	fa01 f303 	lsl.w	r3, r1, r3
 8009bd8:	041b      	lsls	r3, r3, #16
 8009bda:	68f9      	ldr	r1, [r7, #12]
 8009bdc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009be0:	4313      	orrs	r3, r2
 8009be2:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8009be4:	68bb      	ldr	r3, [r7, #8]
 8009be6:	015a      	lsls	r2, r3, #5
 8009be8:	68fb      	ldr	r3, [r7, #12]
 8009bea:	4413      	add	r3, r2
 8009bec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009bf0:	681b      	ldr	r3, [r3, #0]
 8009bf2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009bf6:	2b00      	cmp	r3, #0
 8009bf8:	d11a      	bne.n	8009c30 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8009bfa:	68bb      	ldr	r3, [r7, #8]
 8009bfc:	015a      	lsls	r2, r3, #5
 8009bfe:	68fb      	ldr	r3, [r7, #12]
 8009c00:	4413      	add	r3, r2
 8009c02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009c06:	681a      	ldr	r2, [r3, #0]
 8009c08:	683b      	ldr	r3, [r7, #0]
 8009c0a:	689b      	ldr	r3, [r3, #8]
 8009c0c:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8009c10:	683b      	ldr	r3, [r7, #0]
 8009c12:	78db      	ldrb	r3, [r3, #3]
 8009c14:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8009c16:	430b      	orrs	r3, r1
 8009c18:	4313      	orrs	r3, r2
 8009c1a:	68ba      	ldr	r2, [r7, #8]
 8009c1c:	0151      	lsls	r1, r2, #5
 8009c1e:	68fa      	ldr	r2, [r7, #12]
 8009c20:	440a      	add	r2, r1
 8009c22:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009c26:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009c2a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009c2e:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8009c30:	2300      	movs	r3, #0
}
 8009c32:	4618      	mov	r0, r3
 8009c34:	3714      	adds	r7, #20
 8009c36:	46bd      	mov	sp, r7
 8009c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c3c:	4770      	bx	lr
	...

08009c40 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009c40:	b480      	push	{r7}
 8009c42:	b085      	sub	sp, #20
 8009c44:	af00      	add	r7, sp, #0
 8009c46:	6078      	str	r0, [r7, #4]
 8009c48:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009c4e:	683b      	ldr	r3, [r7, #0]
 8009c50:	781b      	ldrb	r3, [r3, #0]
 8009c52:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8009c54:	683b      	ldr	r3, [r7, #0]
 8009c56:	785b      	ldrb	r3, [r3, #1]
 8009c58:	2b01      	cmp	r3, #1
 8009c5a:	d161      	bne.n	8009d20 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009c5c:	68bb      	ldr	r3, [r7, #8]
 8009c5e:	015a      	lsls	r2, r3, #5
 8009c60:	68fb      	ldr	r3, [r7, #12]
 8009c62:	4413      	add	r3, r2
 8009c64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009c68:	681b      	ldr	r3, [r3, #0]
 8009c6a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009c6e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009c72:	d11f      	bne.n	8009cb4 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8009c74:	68bb      	ldr	r3, [r7, #8]
 8009c76:	015a      	lsls	r2, r3, #5
 8009c78:	68fb      	ldr	r3, [r7, #12]
 8009c7a:	4413      	add	r3, r2
 8009c7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009c80:	681b      	ldr	r3, [r3, #0]
 8009c82:	68ba      	ldr	r2, [r7, #8]
 8009c84:	0151      	lsls	r1, r2, #5
 8009c86:	68fa      	ldr	r2, [r7, #12]
 8009c88:	440a      	add	r2, r1
 8009c8a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009c8e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8009c92:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8009c94:	68bb      	ldr	r3, [r7, #8]
 8009c96:	015a      	lsls	r2, r3, #5
 8009c98:	68fb      	ldr	r3, [r7, #12]
 8009c9a:	4413      	add	r3, r2
 8009c9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009ca0:	681b      	ldr	r3, [r3, #0]
 8009ca2:	68ba      	ldr	r2, [r7, #8]
 8009ca4:	0151      	lsls	r1, r2, #5
 8009ca6:	68fa      	ldr	r2, [r7, #12]
 8009ca8:	440a      	add	r2, r1
 8009caa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009cae:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009cb2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8009cb4:	68fb      	ldr	r3, [r7, #12]
 8009cb6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009cba:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009cbc:	683b      	ldr	r3, [r7, #0]
 8009cbe:	781b      	ldrb	r3, [r3, #0]
 8009cc0:	f003 030f 	and.w	r3, r3, #15
 8009cc4:	2101      	movs	r1, #1
 8009cc6:	fa01 f303 	lsl.w	r3, r1, r3
 8009cca:	b29b      	uxth	r3, r3
 8009ccc:	43db      	mvns	r3, r3
 8009cce:	68f9      	ldr	r1, [r7, #12]
 8009cd0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009cd4:	4013      	ands	r3, r2
 8009cd6:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8009cd8:	68fb      	ldr	r3, [r7, #12]
 8009cda:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009cde:	69da      	ldr	r2, [r3, #28]
 8009ce0:	683b      	ldr	r3, [r7, #0]
 8009ce2:	781b      	ldrb	r3, [r3, #0]
 8009ce4:	f003 030f 	and.w	r3, r3, #15
 8009ce8:	2101      	movs	r1, #1
 8009cea:	fa01 f303 	lsl.w	r3, r1, r3
 8009cee:	b29b      	uxth	r3, r3
 8009cf0:	43db      	mvns	r3, r3
 8009cf2:	68f9      	ldr	r1, [r7, #12]
 8009cf4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009cf8:	4013      	ands	r3, r2
 8009cfa:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8009cfc:	68bb      	ldr	r3, [r7, #8]
 8009cfe:	015a      	lsls	r2, r3, #5
 8009d00:	68fb      	ldr	r3, [r7, #12]
 8009d02:	4413      	add	r3, r2
 8009d04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009d08:	681a      	ldr	r2, [r3, #0]
 8009d0a:	68bb      	ldr	r3, [r7, #8]
 8009d0c:	0159      	lsls	r1, r3, #5
 8009d0e:	68fb      	ldr	r3, [r7, #12]
 8009d10:	440b      	add	r3, r1
 8009d12:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009d16:	4619      	mov	r1, r3
 8009d18:	4b35      	ldr	r3, [pc, #212]	; (8009df0 <USB_DeactivateEndpoint+0x1b0>)
 8009d1a:	4013      	ands	r3, r2
 8009d1c:	600b      	str	r3, [r1, #0]
 8009d1e:	e060      	b.n	8009de2 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009d20:	68bb      	ldr	r3, [r7, #8]
 8009d22:	015a      	lsls	r2, r3, #5
 8009d24:	68fb      	ldr	r3, [r7, #12]
 8009d26:	4413      	add	r3, r2
 8009d28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009d2c:	681b      	ldr	r3, [r3, #0]
 8009d2e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009d32:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009d36:	d11f      	bne.n	8009d78 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8009d38:	68bb      	ldr	r3, [r7, #8]
 8009d3a:	015a      	lsls	r2, r3, #5
 8009d3c:	68fb      	ldr	r3, [r7, #12]
 8009d3e:	4413      	add	r3, r2
 8009d40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009d44:	681b      	ldr	r3, [r3, #0]
 8009d46:	68ba      	ldr	r2, [r7, #8]
 8009d48:	0151      	lsls	r1, r2, #5
 8009d4a:	68fa      	ldr	r2, [r7, #12]
 8009d4c:	440a      	add	r2, r1
 8009d4e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009d52:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8009d56:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8009d58:	68bb      	ldr	r3, [r7, #8]
 8009d5a:	015a      	lsls	r2, r3, #5
 8009d5c:	68fb      	ldr	r3, [r7, #12]
 8009d5e:	4413      	add	r3, r2
 8009d60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009d64:	681b      	ldr	r3, [r3, #0]
 8009d66:	68ba      	ldr	r2, [r7, #8]
 8009d68:	0151      	lsls	r1, r2, #5
 8009d6a:	68fa      	ldr	r2, [r7, #12]
 8009d6c:	440a      	add	r2, r1
 8009d6e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009d72:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009d76:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8009d78:	68fb      	ldr	r3, [r7, #12]
 8009d7a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009d7e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009d80:	683b      	ldr	r3, [r7, #0]
 8009d82:	781b      	ldrb	r3, [r3, #0]
 8009d84:	f003 030f 	and.w	r3, r3, #15
 8009d88:	2101      	movs	r1, #1
 8009d8a:	fa01 f303 	lsl.w	r3, r1, r3
 8009d8e:	041b      	lsls	r3, r3, #16
 8009d90:	43db      	mvns	r3, r3
 8009d92:	68f9      	ldr	r1, [r7, #12]
 8009d94:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009d98:	4013      	ands	r3, r2
 8009d9a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8009d9c:	68fb      	ldr	r3, [r7, #12]
 8009d9e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009da2:	69da      	ldr	r2, [r3, #28]
 8009da4:	683b      	ldr	r3, [r7, #0]
 8009da6:	781b      	ldrb	r3, [r3, #0]
 8009da8:	f003 030f 	and.w	r3, r3, #15
 8009dac:	2101      	movs	r1, #1
 8009dae:	fa01 f303 	lsl.w	r3, r1, r3
 8009db2:	041b      	lsls	r3, r3, #16
 8009db4:	43db      	mvns	r3, r3
 8009db6:	68f9      	ldr	r1, [r7, #12]
 8009db8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009dbc:	4013      	ands	r3, r2
 8009dbe:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8009dc0:	68bb      	ldr	r3, [r7, #8]
 8009dc2:	015a      	lsls	r2, r3, #5
 8009dc4:	68fb      	ldr	r3, [r7, #12]
 8009dc6:	4413      	add	r3, r2
 8009dc8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009dcc:	681a      	ldr	r2, [r3, #0]
 8009dce:	68bb      	ldr	r3, [r7, #8]
 8009dd0:	0159      	lsls	r1, r3, #5
 8009dd2:	68fb      	ldr	r3, [r7, #12]
 8009dd4:	440b      	add	r3, r1
 8009dd6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009dda:	4619      	mov	r1, r3
 8009ddc:	4b05      	ldr	r3, [pc, #20]	; (8009df4 <USB_DeactivateEndpoint+0x1b4>)
 8009dde:	4013      	ands	r3, r2
 8009de0:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8009de2:	2300      	movs	r3, #0
}
 8009de4:	4618      	mov	r0, r3
 8009de6:	3714      	adds	r7, #20
 8009de8:	46bd      	mov	sp, r7
 8009dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dee:	4770      	bx	lr
 8009df0:	ec337800 	.word	0xec337800
 8009df4:	eff37800 	.word	0xeff37800

08009df8 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8009df8:	b580      	push	{r7, lr}
 8009dfa:	b08a      	sub	sp, #40	; 0x28
 8009dfc:	af02      	add	r7, sp, #8
 8009dfe:	60f8      	str	r0, [r7, #12]
 8009e00:	60b9      	str	r1, [r7, #8]
 8009e02:	4613      	mov	r3, r2
 8009e04:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009e06:	68fb      	ldr	r3, [r7, #12]
 8009e08:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8009e0a:	68bb      	ldr	r3, [r7, #8]
 8009e0c:	781b      	ldrb	r3, [r3, #0]
 8009e0e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8009e10:	68bb      	ldr	r3, [r7, #8]
 8009e12:	785b      	ldrb	r3, [r3, #1]
 8009e14:	2b01      	cmp	r3, #1
 8009e16:	f040 815c 	bne.w	800a0d2 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8009e1a:	68bb      	ldr	r3, [r7, #8]
 8009e1c:	695b      	ldr	r3, [r3, #20]
 8009e1e:	2b00      	cmp	r3, #0
 8009e20:	d132      	bne.n	8009e88 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8009e22:	69bb      	ldr	r3, [r7, #24]
 8009e24:	015a      	lsls	r2, r3, #5
 8009e26:	69fb      	ldr	r3, [r7, #28]
 8009e28:	4413      	add	r3, r2
 8009e2a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009e2e:	691b      	ldr	r3, [r3, #16]
 8009e30:	69ba      	ldr	r2, [r7, #24]
 8009e32:	0151      	lsls	r1, r2, #5
 8009e34:	69fa      	ldr	r2, [r7, #28]
 8009e36:	440a      	add	r2, r1
 8009e38:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009e3c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8009e40:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8009e44:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8009e46:	69bb      	ldr	r3, [r7, #24]
 8009e48:	015a      	lsls	r2, r3, #5
 8009e4a:	69fb      	ldr	r3, [r7, #28]
 8009e4c:	4413      	add	r3, r2
 8009e4e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009e52:	691b      	ldr	r3, [r3, #16]
 8009e54:	69ba      	ldr	r2, [r7, #24]
 8009e56:	0151      	lsls	r1, r2, #5
 8009e58:	69fa      	ldr	r2, [r7, #28]
 8009e5a:	440a      	add	r2, r1
 8009e5c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009e60:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009e64:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009e66:	69bb      	ldr	r3, [r7, #24]
 8009e68:	015a      	lsls	r2, r3, #5
 8009e6a:	69fb      	ldr	r3, [r7, #28]
 8009e6c:	4413      	add	r3, r2
 8009e6e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009e72:	691b      	ldr	r3, [r3, #16]
 8009e74:	69ba      	ldr	r2, [r7, #24]
 8009e76:	0151      	lsls	r1, r2, #5
 8009e78:	69fa      	ldr	r2, [r7, #28]
 8009e7a:	440a      	add	r2, r1
 8009e7c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009e80:	0cdb      	lsrs	r3, r3, #19
 8009e82:	04db      	lsls	r3, r3, #19
 8009e84:	6113      	str	r3, [r2, #16]
 8009e86:	e074      	b.n	8009f72 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009e88:	69bb      	ldr	r3, [r7, #24]
 8009e8a:	015a      	lsls	r2, r3, #5
 8009e8c:	69fb      	ldr	r3, [r7, #28]
 8009e8e:	4413      	add	r3, r2
 8009e90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009e94:	691b      	ldr	r3, [r3, #16]
 8009e96:	69ba      	ldr	r2, [r7, #24]
 8009e98:	0151      	lsls	r1, r2, #5
 8009e9a:	69fa      	ldr	r2, [r7, #28]
 8009e9c:	440a      	add	r2, r1
 8009e9e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009ea2:	0cdb      	lsrs	r3, r3, #19
 8009ea4:	04db      	lsls	r3, r3, #19
 8009ea6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8009ea8:	69bb      	ldr	r3, [r7, #24]
 8009eaa:	015a      	lsls	r2, r3, #5
 8009eac:	69fb      	ldr	r3, [r7, #28]
 8009eae:	4413      	add	r3, r2
 8009eb0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009eb4:	691b      	ldr	r3, [r3, #16]
 8009eb6:	69ba      	ldr	r2, [r7, #24]
 8009eb8:	0151      	lsls	r1, r2, #5
 8009eba:	69fa      	ldr	r2, [r7, #28]
 8009ebc:	440a      	add	r2, r1
 8009ebe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009ec2:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8009ec6:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8009eca:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8009ecc:	69bb      	ldr	r3, [r7, #24]
 8009ece:	015a      	lsls	r2, r3, #5
 8009ed0:	69fb      	ldr	r3, [r7, #28]
 8009ed2:	4413      	add	r3, r2
 8009ed4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009ed8:	691a      	ldr	r2, [r3, #16]
 8009eda:	68bb      	ldr	r3, [r7, #8]
 8009edc:	6959      	ldr	r1, [r3, #20]
 8009ede:	68bb      	ldr	r3, [r7, #8]
 8009ee0:	689b      	ldr	r3, [r3, #8]
 8009ee2:	440b      	add	r3, r1
 8009ee4:	1e59      	subs	r1, r3, #1
 8009ee6:	68bb      	ldr	r3, [r7, #8]
 8009ee8:	689b      	ldr	r3, [r3, #8]
 8009eea:	fbb1 f3f3 	udiv	r3, r1, r3
 8009eee:	04d9      	lsls	r1, r3, #19
 8009ef0:	4b9d      	ldr	r3, [pc, #628]	; (800a168 <USB_EPStartXfer+0x370>)
 8009ef2:	400b      	ands	r3, r1
 8009ef4:	69b9      	ldr	r1, [r7, #24]
 8009ef6:	0148      	lsls	r0, r1, #5
 8009ef8:	69f9      	ldr	r1, [r7, #28]
 8009efa:	4401      	add	r1, r0
 8009efc:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8009f00:	4313      	orrs	r3, r2
 8009f02:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8009f04:	69bb      	ldr	r3, [r7, #24]
 8009f06:	015a      	lsls	r2, r3, #5
 8009f08:	69fb      	ldr	r3, [r7, #28]
 8009f0a:	4413      	add	r3, r2
 8009f0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009f10:	691a      	ldr	r2, [r3, #16]
 8009f12:	68bb      	ldr	r3, [r7, #8]
 8009f14:	695b      	ldr	r3, [r3, #20]
 8009f16:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009f1a:	69b9      	ldr	r1, [r7, #24]
 8009f1c:	0148      	lsls	r0, r1, #5
 8009f1e:	69f9      	ldr	r1, [r7, #28]
 8009f20:	4401      	add	r1, r0
 8009f22:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8009f26:	4313      	orrs	r3, r2
 8009f28:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8009f2a:	68bb      	ldr	r3, [r7, #8]
 8009f2c:	78db      	ldrb	r3, [r3, #3]
 8009f2e:	2b01      	cmp	r3, #1
 8009f30:	d11f      	bne.n	8009f72 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8009f32:	69bb      	ldr	r3, [r7, #24]
 8009f34:	015a      	lsls	r2, r3, #5
 8009f36:	69fb      	ldr	r3, [r7, #28]
 8009f38:	4413      	add	r3, r2
 8009f3a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009f3e:	691b      	ldr	r3, [r3, #16]
 8009f40:	69ba      	ldr	r2, [r7, #24]
 8009f42:	0151      	lsls	r1, r2, #5
 8009f44:	69fa      	ldr	r2, [r7, #28]
 8009f46:	440a      	add	r2, r1
 8009f48:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009f4c:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8009f50:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8009f52:	69bb      	ldr	r3, [r7, #24]
 8009f54:	015a      	lsls	r2, r3, #5
 8009f56:	69fb      	ldr	r3, [r7, #28]
 8009f58:	4413      	add	r3, r2
 8009f5a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009f5e:	691b      	ldr	r3, [r3, #16]
 8009f60:	69ba      	ldr	r2, [r7, #24]
 8009f62:	0151      	lsls	r1, r2, #5
 8009f64:	69fa      	ldr	r2, [r7, #28]
 8009f66:	440a      	add	r2, r1
 8009f68:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009f6c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009f70:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8009f72:	79fb      	ldrb	r3, [r7, #7]
 8009f74:	2b01      	cmp	r3, #1
 8009f76:	d14b      	bne.n	800a010 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8009f78:	68bb      	ldr	r3, [r7, #8]
 8009f7a:	691b      	ldr	r3, [r3, #16]
 8009f7c:	2b00      	cmp	r3, #0
 8009f7e:	d009      	beq.n	8009f94 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8009f80:	69bb      	ldr	r3, [r7, #24]
 8009f82:	015a      	lsls	r2, r3, #5
 8009f84:	69fb      	ldr	r3, [r7, #28]
 8009f86:	4413      	add	r3, r2
 8009f88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009f8c:	461a      	mov	r2, r3
 8009f8e:	68bb      	ldr	r3, [r7, #8]
 8009f90:	691b      	ldr	r3, [r3, #16]
 8009f92:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8009f94:	68bb      	ldr	r3, [r7, #8]
 8009f96:	78db      	ldrb	r3, [r3, #3]
 8009f98:	2b01      	cmp	r3, #1
 8009f9a:	d128      	bne.n	8009fee <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8009f9c:	69fb      	ldr	r3, [r7, #28]
 8009f9e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009fa2:	689b      	ldr	r3, [r3, #8]
 8009fa4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009fa8:	2b00      	cmp	r3, #0
 8009faa:	d110      	bne.n	8009fce <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8009fac:	69bb      	ldr	r3, [r7, #24]
 8009fae:	015a      	lsls	r2, r3, #5
 8009fb0:	69fb      	ldr	r3, [r7, #28]
 8009fb2:	4413      	add	r3, r2
 8009fb4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009fb8:	681b      	ldr	r3, [r3, #0]
 8009fba:	69ba      	ldr	r2, [r7, #24]
 8009fbc:	0151      	lsls	r1, r2, #5
 8009fbe:	69fa      	ldr	r2, [r7, #28]
 8009fc0:	440a      	add	r2, r1
 8009fc2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009fc6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009fca:	6013      	str	r3, [r2, #0]
 8009fcc:	e00f      	b.n	8009fee <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8009fce:	69bb      	ldr	r3, [r7, #24]
 8009fd0:	015a      	lsls	r2, r3, #5
 8009fd2:	69fb      	ldr	r3, [r7, #28]
 8009fd4:	4413      	add	r3, r2
 8009fd6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009fda:	681b      	ldr	r3, [r3, #0]
 8009fdc:	69ba      	ldr	r2, [r7, #24]
 8009fde:	0151      	lsls	r1, r2, #5
 8009fe0:	69fa      	ldr	r2, [r7, #28]
 8009fe2:	440a      	add	r2, r1
 8009fe4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009fe8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009fec:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8009fee:	69bb      	ldr	r3, [r7, #24]
 8009ff0:	015a      	lsls	r2, r3, #5
 8009ff2:	69fb      	ldr	r3, [r7, #28]
 8009ff4:	4413      	add	r3, r2
 8009ff6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009ffa:	681b      	ldr	r3, [r3, #0]
 8009ffc:	69ba      	ldr	r2, [r7, #24]
 8009ffe:	0151      	lsls	r1, r2, #5
 800a000:	69fa      	ldr	r2, [r7, #28]
 800a002:	440a      	add	r2, r1
 800a004:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a008:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800a00c:	6013      	str	r3, [r2, #0]
 800a00e:	e12f      	b.n	800a270 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800a010:	69bb      	ldr	r3, [r7, #24]
 800a012:	015a      	lsls	r2, r3, #5
 800a014:	69fb      	ldr	r3, [r7, #28]
 800a016:	4413      	add	r3, r2
 800a018:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a01c:	681b      	ldr	r3, [r3, #0]
 800a01e:	69ba      	ldr	r2, [r7, #24]
 800a020:	0151      	lsls	r1, r2, #5
 800a022:	69fa      	ldr	r2, [r7, #28]
 800a024:	440a      	add	r2, r1
 800a026:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a02a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800a02e:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800a030:	68bb      	ldr	r3, [r7, #8]
 800a032:	78db      	ldrb	r3, [r3, #3]
 800a034:	2b01      	cmp	r3, #1
 800a036:	d015      	beq.n	800a064 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800a038:	68bb      	ldr	r3, [r7, #8]
 800a03a:	695b      	ldr	r3, [r3, #20]
 800a03c:	2b00      	cmp	r3, #0
 800a03e:	f000 8117 	beq.w	800a270 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800a042:	69fb      	ldr	r3, [r7, #28]
 800a044:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a048:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a04a:	68bb      	ldr	r3, [r7, #8]
 800a04c:	781b      	ldrb	r3, [r3, #0]
 800a04e:	f003 030f 	and.w	r3, r3, #15
 800a052:	2101      	movs	r1, #1
 800a054:	fa01 f303 	lsl.w	r3, r1, r3
 800a058:	69f9      	ldr	r1, [r7, #28]
 800a05a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a05e:	4313      	orrs	r3, r2
 800a060:	634b      	str	r3, [r1, #52]	; 0x34
 800a062:	e105      	b.n	800a270 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800a064:	69fb      	ldr	r3, [r7, #28]
 800a066:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a06a:	689b      	ldr	r3, [r3, #8]
 800a06c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a070:	2b00      	cmp	r3, #0
 800a072:	d110      	bne.n	800a096 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800a074:	69bb      	ldr	r3, [r7, #24]
 800a076:	015a      	lsls	r2, r3, #5
 800a078:	69fb      	ldr	r3, [r7, #28]
 800a07a:	4413      	add	r3, r2
 800a07c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a080:	681b      	ldr	r3, [r3, #0]
 800a082:	69ba      	ldr	r2, [r7, #24]
 800a084:	0151      	lsls	r1, r2, #5
 800a086:	69fa      	ldr	r2, [r7, #28]
 800a088:	440a      	add	r2, r1
 800a08a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a08e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800a092:	6013      	str	r3, [r2, #0]
 800a094:	e00f      	b.n	800a0b6 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800a096:	69bb      	ldr	r3, [r7, #24]
 800a098:	015a      	lsls	r2, r3, #5
 800a09a:	69fb      	ldr	r3, [r7, #28]
 800a09c:	4413      	add	r3, r2
 800a09e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a0a2:	681b      	ldr	r3, [r3, #0]
 800a0a4:	69ba      	ldr	r2, [r7, #24]
 800a0a6:	0151      	lsls	r1, r2, #5
 800a0a8:	69fa      	ldr	r2, [r7, #28]
 800a0aa:	440a      	add	r2, r1
 800a0ac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a0b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a0b4:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800a0b6:	68bb      	ldr	r3, [r7, #8]
 800a0b8:	68d9      	ldr	r1, [r3, #12]
 800a0ba:	68bb      	ldr	r3, [r7, #8]
 800a0bc:	781a      	ldrb	r2, [r3, #0]
 800a0be:	68bb      	ldr	r3, [r7, #8]
 800a0c0:	695b      	ldr	r3, [r3, #20]
 800a0c2:	b298      	uxth	r0, r3
 800a0c4:	79fb      	ldrb	r3, [r7, #7]
 800a0c6:	9300      	str	r3, [sp, #0]
 800a0c8:	4603      	mov	r3, r0
 800a0ca:	68f8      	ldr	r0, [r7, #12]
 800a0cc:	f000 fa2b 	bl	800a526 <USB_WritePacket>
 800a0d0:	e0ce      	b.n	800a270 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800a0d2:	69bb      	ldr	r3, [r7, #24]
 800a0d4:	015a      	lsls	r2, r3, #5
 800a0d6:	69fb      	ldr	r3, [r7, #28]
 800a0d8:	4413      	add	r3, r2
 800a0da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a0de:	691b      	ldr	r3, [r3, #16]
 800a0e0:	69ba      	ldr	r2, [r7, #24]
 800a0e2:	0151      	lsls	r1, r2, #5
 800a0e4:	69fa      	ldr	r2, [r7, #28]
 800a0e6:	440a      	add	r2, r1
 800a0e8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a0ec:	0cdb      	lsrs	r3, r3, #19
 800a0ee:	04db      	lsls	r3, r3, #19
 800a0f0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800a0f2:	69bb      	ldr	r3, [r7, #24]
 800a0f4:	015a      	lsls	r2, r3, #5
 800a0f6:	69fb      	ldr	r3, [r7, #28]
 800a0f8:	4413      	add	r3, r2
 800a0fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a0fe:	691b      	ldr	r3, [r3, #16]
 800a100:	69ba      	ldr	r2, [r7, #24]
 800a102:	0151      	lsls	r1, r2, #5
 800a104:	69fa      	ldr	r2, [r7, #28]
 800a106:	440a      	add	r2, r1
 800a108:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a10c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800a110:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800a114:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800a116:	68bb      	ldr	r3, [r7, #8]
 800a118:	695b      	ldr	r3, [r3, #20]
 800a11a:	2b00      	cmp	r3, #0
 800a11c:	d126      	bne.n	800a16c <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800a11e:	69bb      	ldr	r3, [r7, #24]
 800a120:	015a      	lsls	r2, r3, #5
 800a122:	69fb      	ldr	r3, [r7, #28]
 800a124:	4413      	add	r3, r2
 800a126:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a12a:	691a      	ldr	r2, [r3, #16]
 800a12c:	68bb      	ldr	r3, [r7, #8]
 800a12e:	689b      	ldr	r3, [r3, #8]
 800a130:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a134:	69b9      	ldr	r1, [r7, #24]
 800a136:	0148      	lsls	r0, r1, #5
 800a138:	69f9      	ldr	r1, [r7, #28]
 800a13a:	4401      	add	r1, r0
 800a13c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800a140:	4313      	orrs	r3, r2
 800a142:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800a144:	69bb      	ldr	r3, [r7, #24]
 800a146:	015a      	lsls	r2, r3, #5
 800a148:	69fb      	ldr	r3, [r7, #28]
 800a14a:	4413      	add	r3, r2
 800a14c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a150:	691b      	ldr	r3, [r3, #16]
 800a152:	69ba      	ldr	r2, [r7, #24]
 800a154:	0151      	lsls	r1, r2, #5
 800a156:	69fa      	ldr	r2, [r7, #28]
 800a158:	440a      	add	r2, r1
 800a15a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a15e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a162:	6113      	str	r3, [r2, #16]
 800a164:	e036      	b.n	800a1d4 <USB_EPStartXfer+0x3dc>
 800a166:	bf00      	nop
 800a168:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800a16c:	68bb      	ldr	r3, [r7, #8]
 800a16e:	695a      	ldr	r2, [r3, #20]
 800a170:	68bb      	ldr	r3, [r7, #8]
 800a172:	689b      	ldr	r3, [r3, #8]
 800a174:	4413      	add	r3, r2
 800a176:	1e5a      	subs	r2, r3, #1
 800a178:	68bb      	ldr	r3, [r7, #8]
 800a17a:	689b      	ldr	r3, [r3, #8]
 800a17c:	fbb2 f3f3 	udiv	r3, r2, r3
 800a180:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800a182:	69bb      	ldr	r3, [r7, #24]
 800a184:	015a      	lsls	r2, r3, #5
 800a186:	69fb      	ldr	r3, [r7, #28]
 800a188:	4413      	add	r3, r2
 800a18a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a18e:	691a      	ldr	r2, [r3, #16]
 800a190:	8afb      	ldrh	r3, [r7, #22]
 800a192:	04d9      	lsls	r1, r3, #19
 800a194:	4b39      	ldr	r3, [pc, #228]	; (800a27c <USB_EPStartXfer+0x484>)
 800a196:	400b      	ands	r3, r1
 800a198:	69b9      	ldr	r1, [r7, #24]
 800a19a:	0148      	lsls	r0, r1, #5
 800a19c:	69f9      	ldr	r1, [r7, #28]
 800a19e:	4401      	add	r1, r0
 800a1a0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800a1a4:	4313      	orrs	r3, r2
 800a1a6:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 800a1a8:	69bb      	ldr	r3, [r7, #24]
 800a1aa:	015a      	lsls	r2, r3, #5
 800a1ac:	69fb      	ldr	r3, [r7, #28]
 800a1ae:	4413      	add	r3, r2
 800a1b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a1b4:	691a      	ldr	r2, [r3, #16]
 800a1b6:	68bb      	ldr	r3, [r7, #8]
 800a1b8:	689b      	ldr	r3, [r3, #8]
 800a1ba:	8af9      	ldrh	r1, [r7, #22]
 800a1bc:	fb01 f303 	mul.w	r3, r1, r3
 800a1c0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a1c4:	69b9      	ldr	r1, [r7, #24]
 800a1c6:	0148      	lsls	r0, r1, #5
 800a1c8:	69f9      	ldr	r1, [r7, #28]
 800a1ca:	4401      	add	r1, r0
 800a1cc:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800a1d0:	4313      	orrs	r3, r2
 800a1d2:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800a1d4:	79fb      	ldrb	r3, [r7, #7]
 800a1d6:	2b01      	cmp	r3, #1
 800a1d8:	d10d      	bne.n	800a1f6 <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800a1da:	68bb      	ldr	r3, [r7, #8]
 800a1dc:	68db      	ldr	r3, [r3, #12]
 800a1de:	2b00      	cmp	r3, #0
 800a1e0:	d009      	beq.n	800a1f6 <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800a1e2:	68bb      	ldr	r3, [r7, #8]
 800a1e4:	68d9      	ldr	r1, [r3, #12]
 800a1e6:	69bb      	ldr	r3, [r7, #24]
 800a1e8:	015a      	lsls	r2, r3, #5
 800a1ea:	69fb      	ldr	r3, [r7, #28]
 800a1ec:	4413      	add	r3, r2
 800a1ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a1f2:	460a      	mov	r2, r1
 800a1f4:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800a1f6:	68bb      	ldr	r3, [r7, #8]
 800a1f8:	78db      	ldrb	r3, [r3, #3]
 800a1fa:	2b01      	cmp	r3, #1
 800a1fc:	d128      	bne.n	800a250 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800a1fe:	69fb      	ldr	r3, [r7, #28]
 800a200:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a204:	689b      	ldr	r3, [r3, #8]
 800a206:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a20a:	2b00      	cmp	r3, #0
 800a20c:	d110      	bne.n	800a230 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800a20e:	69bb      	ldr	r3, [r7, #24]
 800a210:	015a      	lsls	r2, r3, #5
 800a212:	69fb      	ldr	r3, [r7, #28]
 800a214:	4413      	add	r3, r2
 800a216:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a21a:	681b      	ldr	r3, [r3, #0]
 800a21c:	69ba      	ldr	r2, [r7, #24]
 800a21e:	0151      	lsls	r1, r2, #5
 800a220:	69fa      	ldr	r2, [r7, #28]
 800a222:	440a      	add	r2, r1
 800a224:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a228:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800a22c:	6013      	str	r3, [r2, #0]
 800a22e:	e00f      	b.n	800a250 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800a230:	69bb      	ldr	r3, [r7, #24]
 800a232:	015a      	lsls	r2, r3, #5
 800a234:	69fb      	ldr	r3, [r7, #28]
 800a236:	4413      	add	r3, r2
 800a238:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a23c:	681b      	ldr	r3, [r3, #0]
 800a23e:	69ba      	ldr	r2, [r7, #24]
 800a240:	0151      	lsls	r1, r2, #5
 800a242:	69fa      	ldr	r2, [r7, #28]
 800a244:	440a      	add	r2, r1
 800a246:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a24a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a24e:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800a250:	69bb      	ldr	r3, [r7, #24]
 800a252:	015a      	lsls	r2, r3, #5
 800a254:	69fb      	ldr	r3, [r7, #28]
 800a256:	4413      	add	r3, r2
 800a258:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a25c:	681b      	ldr	r3, [r3, #0]
 800a25e:	69ba      	ldr	r2, [r7, #24]
 800a260:	0151      	lsls	r1, r2, #5
 800a262:	69fa      	ldr	r2, [r7, #28]
 800a264:	440a      	add	r2, r1
 800a266:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a26a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800a26e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a270:	2300      	movs	r3, #0
}
 800a272:	4618      	mov	r0, r3
 800a274:	3720      	adds	r7, #32
 800a276:	46bd      	mov	sp, r7
 800a278:	bd80      	pop	{r7, pc}
 800a27a:	bf00      	nop
 800a27c:	1ff80000 	.word	0x1ff80000

0800a280 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800a280:	b480      	push	{r7}
 800a282:	b087      	sub	sp, #28
 800a284:	af00      	add	r7, sp, #0
 800a286:	60f8      	str	r0, [r7, #12]
 800a288:	60b9      	str	r1, [r7, #8]
 800a28a:	4613      	mov	r3, r2
 800a28c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a28e:	68fb      	ldr	r3, [r7, #12]
 800a290:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800a292:	68bb      	ldr	r3, [r7, #8]
 800a294:	781b      	ldrb	r3, [r3, #0]
 800a296:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800a298:	68bb      	ldr	r3, [r7, #8]
 800a29a:	785b      	ldrb	r3, [r3, #1]
 800a29c:	2b01      	cmp	r3, #1
 800a29e:	f040 80cd 	bne.w	800a43c <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800a2a2:	68bb      	ldr	r3, [r7, #8]
 800a2a4:	695b      	ldr	r3, [r3, #20]
 800a2a6:	2b00      	cmp	r3, #0
 800a2a8:	d132      	bne.n	800a310 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800a2aa:	693b      	ldr	r3, [r7, #16]
 800a2ac:	015a      	lsls	r2, r3, #5
 800a2ae:	697b      	ldr	r3, [r7, #20]
 800a2b0:	4413      	add	r3, r2
 800a2b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a2b6:	691b      	ldr	r3, [r3, #16]
 800a2b8:	693a      	ldr	r2, [r7, #16]
 800a2ba:	0151      	lsls	r1, r2, #5
 800a2bc:	697a      	ldr	r2, [r7, #20]
 800a2be:	440a      	add	r2, r1
 800a2c0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a2c4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800a2c8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800a2cc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800a2ce:	693b      	ldr	r3, [r7, #16]
 800a2d0:	015a      	lsls	r2, r3, #5
 800a2d2:	697b      	ldr	r3, [r7, #20]
 800a2d4:	4413      	add	r3, r2
 800a2d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a2da:	691b      	ldr	r3, [r3, #16]
 800a2dc:	693a      	ldr	r2, [r7, #16]
 800a2de:	0151      	lsls	r1, r2, #5
 800a2e0:	697a      	ldr	r2, [r7, #20]
 800a2e2:	440a      	add	r2, r1
 800a2e4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a2e8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a2ec:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800a2ee:	693b      	ldr	r3, [r7, #16]
 800a2f0:	015a      	lsls	r2, r3, #5
 800a2f2:	697b      	ldr	r3, [r7, #20]
 800a2f4:	4413      	add	r3, r2
 800a2f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a2fa:	691b      	ldr	r3, [r3, #16]
 800a2fc:	693a      	ldr	r2, [r7, #16]
 800a2fe:	0151      	lsls	r1, r2, #5
 800a300:	697a      	ldr	r2, [r7, #20]
 800a302:	440a      	add	r2, r1
 800a304:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a308:	0cdb      	lsrs	r3, r3, #19
 800a30a:	04db      	lsls	r3, r3, #19
 800a30c:	6113      	str	r3, [r2, #16]
 800a30e:	e04e      	b.n	800a3ae <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800a310:	693b      	ldr	r3, [r7, #16]
 800a312:	015a      	lsls	r2, r3, #5
 800a314:	697b      	ldr	r3, [r7, #20]
 800a316:	4413      	add	r3, r2
 800a318:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a31c:	691b      	ldr	r3, [r3, #16]
 800a31e:	693a      	ldr	r2, [r7, #16]
 800a320:	0151      	lsls	r1, r2, #5
 800a322:	697a      	ldr	r2, [r7, #20]
 800a324:	440a      	add	r2, r1
 800a326:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a32a:	0cdb      	lsrs	r3, r3, #19
 800a32c:	04db      	lsls	r3, r3, #19
 800a32e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800a330:	693b      	ldr	r3, [r7, #16]
 800a332:	015a      	lsls	r2, r3, #5
 800a334:	697b      	ldr	r3, [r7, #20]
 800a336:	4413      	add	r3, r2
 800a338:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a33c:	691b      	ldr	r3, [r3, #16]
 800a33e:	693a      	ldr	r2, [r7, #16]
 800a340:	0151      	lsls	r1, r2, #5
 800a342:	697a      	ldr	r2, [r7, #20]
 800a344:	440a      	add	r2, r1
 800a346:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a34a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800a34e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800a352:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 800a354:	68bb      	ldr	r3, [r7, #8]
 800a356:	695a      	ldr	r2, [r3, #20]
 800a358:	68bb      	ldr	r3, [r7, #8]
 800a35a:	689b      	ldr	r3, [r3, #8]
 800a35c:	429a      	cmp	r2, r3
 800a35e:	d903      	bls.n	800a368 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800a360:	68bb      	ldr	r3, [r7, #8]
 800a362:	689a      	ldr	r2, [r3, #8]
 800a364:	68bb      	ldr	r3, [r7, #8]
 800a366:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800a368:	693b      	ldr	r3, [r7, #16]
 800a36a:	015a      	lsls	r2, r3, #5
 800a36c:	697b      	ldr	r3, [r7, #20]
 800a36e:	4413      	add	r3, r2
 800a370:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a374:	691b      	ldr	r3, [r3, #16]
 800a376:	693a      	ldr	r2, [r7, #16]
 800a378:	0151      	lsls	r1, r2, #5
 800a37a:	697a      	ldr	r2, [r7, #20]
 800a37c:	440a      	add	r2, r1
 800a37e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a382:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a386:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800a388:	693b      	ldr	r3, [r7, #16]
 800a38a:	015a      	lsls	r2, r3, #5
 800a38c:	697b      	ldr	r3, [r7, #20]
 800a38e:	4413      	add	r3, r2
 800a390:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a394:	691a      	ldr	r2, [r3, #16]
 800a396:	68bb      	ldr	r3, [r7, #8]
 800a398:	695b      	ldr	r3, [r3, #20]
 800a39a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a39e:	6939      	ldr	r1, [r7, #16]
 800a3a0:	0148      	lsls	r0, r1, #5
 800a3a2:	6979      	ldr	r1, [r7, #20]
 800a3a4:	4401      	add	r1, r0
 800a3a6:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800a3aa:	4313      	orrs	r3, r2
 800a3ac:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800a3ae:	79fb      	ldrb	r3, [r7, #7]
 800a3b0:	2b01      	cmp	r3, #1
 800a3b2:	d11e      	bne.n	800a3f2 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800a3b4:	68bb      	ldr	r3, [r7, #8]
 800a3b6:	691b      	ldr	r3, [r3, #16]
 800a3b8:	2b00      	cmp	r3, #0
 800a3ba:	d009      	beq.n	800a3d0 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800a3bc:	693b      	ldr	r3, [r7, #16]
 800a3be:	015a      	lsls	r2, r3, #5
 800a3c0:	697b      	ldr	r3, [r7, #20]
 800a3c2:	4413      	add	r3, r2
 800a3c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a3c8:	461a      	mov	r2, r3
 800a3ca:	68bb      	ldr	r3, [r7, #8]
 800a3cc:	691b      	ldr	r3, [r3, #16]
 800a3ce:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800a3d0:	693b      	ldr	r3, [r7, #16]
 800a3d2:	015a      	lsls	r2, r3, #5
 800a3d4:	697b      	ldr	r3, [r7, #20]
 800a3d6:	4413      	add	r3, r2
 800a3d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a3dc:	681b      	ldr	r3, [r3, #0]
 800a3de:	693a      	ldr	r2, [r7, #16]
 800a3e0:	0151      	lsls	r1, r2, #5
 800a3e2:	697a      	ldr	r2, [r7, #20]
 800a3e4:	440a      	add	r2, r1
 800a3e6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a3ea:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800a3ee:	6013      	str	r3, [r2, #0]
 800a3f0:	e092      	b.n	800a518 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800a3f2:	693b      	ldr	r3, [r7, #16]
 800a3f4:	015a      	lsls	r2, r3, #5
 800a3f6:	697b      	ldr	r3, [r7, #20]
 800a3f8:	4413      	add	r3, r2
 800a3fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a3fe:	681b      	ldr	r3, [r3, #0]
 800a400:	693a      	ldr	r2, [r7, #16]
 800a402:	0151      	lsls	r1, r2, #5
 800a404:	697a      	ldr	r2, [r7, #20]
 800a406:	440a      	add	r2, r1
 800a408:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a40c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800a410:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800a412:	68bb      	ldr	r3, [r7, #8]
 800a414:	695b      	ldr	r3, [r3, #20]
 800a416:	2b00      	cmp	r3, #0
 800a418:	d07e      	beq.n	800a518 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800a41a:	697b      	ldr	r3, [r7, #20]
 800a41c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a420:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a422:	68bb      	ldr	r3, [r7, #8]
 800a424:	781b      	ldrb	r3, [r3, #0]
 800a426:	f003 030f 	and.w	r3, r3, #15
 800a42a:	2101      	movs	r1, #1
 800a42c:	fa01 f303 	lsl.w	r3, r1, r3
 800a430:	6979      	ldr	r1, [r7, #20]
 800a432:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a436:	4313      	orrs	r3, r2
 800a438:	634b      	str	r3, [r1, #52]	; 0x34
 800a43a:	e06d      	b.n	800a518 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800a43c:	693b      	ldr	r3, [r7, #16]
 800a43e:	015a      	lsls	r2, r3, #5
 800a440:	697b      	ldr	r3, [r7, #20]
 800a442:	4413      	add	r3, r2
 800a444:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a448:	691b      	ldr	r3, [r3, #16]
 800a44a:	693a      	ldr	r2, [r7, #16]
 800a44c:	0151      	lsls	r1, r2, #5
 800a44e:	697a      	ldr	r2, [r7, #20]
 800a450:	440a      	add	r2, r1
 800a452:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a456:	0cdb      	lsrs	r3, r3, #19
 800a458:	04db      	lsls	r3, r3, #19
 800a45a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800a45c:	693b      	ldr	r3, [r7, #16]
 800a45e:	015a      	lsls	r2, r3, #5
 800a460:	697b      	ldr	r3, [r7, #20]
 800a462:	4413      	add	r3, r2
 800a464:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a468:	691b      	ldr	r3, [r3, #16]
 800a46a:	693a      	ldr	r2, [r7, #16]
 800a46c:	0151      	lsls	r1, r2, #5
 800a46e:	697a      	ldr	r2, [r7, #20]
 800a470:	440a      	add	r2, r1
 800a472:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a476:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800a47a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800a47e:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800a480:	68bb      	ldr	r3, [r7, #8]
 800a482:	695b      	ldr	r3, [r3, #20]
 800a484:	2b00      	cmp	r3, #0
 800a486:	d003      	beq.n	800a490 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 800a488:	68bb      	ldr	r3, [r7, #8]
 800a48a:	689a      	ldr	r2, [r3, #8]
 800a48c:	68bb      	ldr	r3, [r7, #8]
 800a48e:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800a490:	693b      	ldr	r3, [r7, #16]
 800a492:	015a      	lsls	r2, r3, #5
 800a494:	697b      	ldr	r3, [r7, #20]
 800a496:	4413      	add	r3, r2
 800a498:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a49c:	691b      	ldr	r3, [r3, #16]
 800a49e:	693a      	ldr	r2, [r7, #16]
 800a4a0:	0151      	lsls	r1, r2, #5
 800a4a2:	697a      	ldr	r2, [r7, #20]
 800a4a4:	440a      	add	r2, r1
 800a4a6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a4aa:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a4ae:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 800a4b0:	693b      	ldr	r3, [r7, #16]
 800a4b2:	015a      	lsls	r2, r3, #5
 800a4b4:	697b      	ldr	r3, [r7, #20]
 800a4b6:	4413      	add	r3, r2
 800a4b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a4bc:	691a      	ldr	r2, [r3, #16]
 800a4be:	68bb      	ldr	r3, [r7, #8]
 800a4c0:	689b      	ldr	r3, [r3, #8]
 800a4c2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a4c6:	6939      	ldr	r1, [r7, #16]
 800a4c8:	0148      	lsls	r0, r1, #5
 800a4ca:	6979      	ldr	r1, [r7, #20]
 800a4cc:	4401      	add	r1, r0
 800a4ce:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800a4d2:	4313      	orrs	r3, r2
 800a4d4:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800a4d6:	79fb      	ldrb	r3, [r7, #7]
 800a4d8:	2b01      	cmp	r3, #1
 800a4da:	d10d      	bne.n	800a4f8 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800a4dc:	68bb      	ldr	r3, [r7, #8]
 800a4de:	68db      	ldr	r3, [r3, #12]
 800a4e0:	2b00      	cmp	r3, #0
 800a4e2:	d009      	beq.n	800a4f8 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800a4e4:	68bb      	ldr	r3, [r7, #8]
 800a4e6:	68d9      	ldr	r1, [r3, #12]
 800a4e8:	693b      	ldr	r3, [r7, #16]
 800a4ea:	015a      	lsls	r2, r3, #5
 800a4ec:	697b      	ldr	r3, [r7, #20]
 800a4ee:	4413      	add	r3, r2
 800a4f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a4f4:	460a      	mov	r2, r1
 800a4f6:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800a4f8:	693b      	ldr	r3, [r7, #16]
 800a4fa:	015a      	lsls	r2, r3, #5
 800a4fc:	697b      	ldr	r3, [r7, #20]
 800a4fe:	4413      	add	r3, r2
 800a500:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a504:	681b      	ldr	r3, [r3, #0]
 800a506:	693a      	ldr	r2, [r7, #16]
 800a508:	0151      	lsls	r1, r2, #5
 800a50a:	697a      	ldr	r2, [r7, #20]
 800a50c:	440a      	add	r2, r1
 800a50e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a512:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800a516:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a518:	2300      	movs	r3, #0
}
 800a51a:	4618      	mov	r0, r3
 800a51c:	371c      	adds	r7, #28
 800a51e:	46bd      	mov	sp, r7
 800a520:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a524:	4770      	bx	lr

0800a526 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800a526:	b480      	push	{r7}
 800a528:	b089      	sub	sp, #36	; 0x24
 800a52a:	af00      	add	r7, sp, #0
 800a52c:	60f8      	str	r0, [r7, #12]
 800a52e:	60b9      	str	r1, [r7, #8]
 800a530:	4611      	mov	r1, r2
 800a532:	461a      	mov	r2, r3
 800a534:	460b      	mov	r3, r1
 800a536:	71fb      	strb	r3, [r7, #7]
 800a538:	4613      	mov	r3, r2
 800a53a:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a53c:	68fb      	ldr	r3, [r7, #12]
 800a53e:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 800a540:	68bb      	ldr	r3, [r7, #8]
 800a542:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 800a544:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800a548:	2b00      	cmp	r3, #0
 800a54a:	d11a      	bne.n	800a582 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800a54c:	88bb      	ldrh	r3, [r7, #4]
 800a54e:	3303      	adds	r3, #3
 800a550:	089b      	lsrs	r3, r3, #2
 800a552:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800a554:	2300      	movs	r3, #0
 800a556:	61bb      	str	r3, [r7, #24]
 800a558:	e00f      	b.n	800a57a <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800a55a:	79fb      	ldrb	r3, [r7, #7]
 800a55c:	031a      	lsls	r2, r3, #12
 800a55e:	697b      	ldr	r3, [r7, #20]
 800a560:	4413      	add	r3, r2
 800a562:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a566:	461a      	mov	r2, r3
 800a568:	69fb      	ldr	r3, [r7, #28]
 800a56a:	681b      	ldr	r3, [r3, #0]
 800a56c:	6013      	str	r3, [r2, #0]
      pSrc++;
 800a56e:	69fb      	ldr	r3, [r7, #28]
 800a570:	3304      	adds	r3, #4
 800a572:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800a574:	69bb      	ldr	r3, [r7, #24]
 800a576:	3301      	adds	r3, #1
 800a578:	61bb      	str	r3, [r7, #24]
 800a57a:	69ba      	ldr	r2, [r7, #24]
 800a57c:	693b      	ldr	r3, [r7, #16]
 800a57e:	429a      	cmp	r2, r3
 800a580:	d3eb      	bcc.n	800a55a <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800a582:	2300      	movs	r3, #0
}
 800a584:	4618      	mov	r0, r3
 800a586:	3724      	adds	r7, #36	; 0x24
 800a588:	46bd      	mov	sp, r7
 800a58a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a58e:	4770      	bx	lr

0800a590 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800a590:	b480      	push	{r7}
 800a592:	b089      	sub	sp, #36	; 0x24
 800a594:	af00      	add	r7, sp, #0
 800a596:	60f8      	str	r0, [r7, #12]
 800a598:	60b9      	str	r1, [r7, #8]
 800a59a:	4613      	mov	r3, r2
 800a59c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a59e:	68fb      	ldr	r3, [r7, #12]
 800a5a0:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 800a5a2:	68bb      	ldr	r3, [r7, #8]
 800a5a4:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 800a5a6:	88fb      	ldrh	r3, [r7, #6]
 800a5a8:	3303      	adds	r3, #3
 800a5aa:	089b      	lsrs	r3, r3, #2
 800a5ac:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 800a5ae:	2300      	movs	r3, #0
 800a5b0:	61bb      	str	r3, [r7, #24]
 800a5b2:	e00b      	b.n	800a5cc <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800a5b4:	697b      	ldr	r3, [r7, #20]
 800a5b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a5ba:	681a      	ldr	r2, [r3, #0]
 800a5bc:	69fb      	ldr	r3, [r7, #28]
 800a5be:	601a      	str	r2, [r3, #0]
    pDest++;
 800a5c0:	69fb      	ldr	r3, [r7, #28]
 800a5c2:	3304      	adds	r3, #4
 800a5c4:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800a5c6:	69bb      	ldr	r3, [r7, #24]
 800a5c8:	3301      	adds	r3, #1
 800a5ca:	61bb      	str	r3, [r7, #24]
 800a5cc:	69ba      	ldr	r2, [r7, #24]
 800a5ce:	693b      	ldr	r3, [r7, #16]
 800a5d0:	429a      	cmp	r2, r3
 800a5d2:	d3ef      	bcc.n	800a5b4 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 800a5d4:	69fb      	ldr	r3, [r7, #28]
}
 800a5d6:	4618      	mov	r0, r3
 800a5d8:	3724      	adds	r7, #36	; 0x24
 800a5da:	46bd      	mov	sp, r7
 800a5dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5e0:	4770      	bx	lr

0800a5e2 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a5e2:	b480      	push	{r7}
 800a5e4:	b085      	sub	sp, #20
 800a5e6:	af00      	add	r7, sp, #0
 800a5e8:	6078      	str	r0, [r7, #4]
 800a5ea:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a5f0:	683b      	ldr	r3, [r7, #0]
 800a5f2:	781b      	ldrb	r3, [r3, #0]
 800a5f4:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800a5f6:	683b      	ldr	r3, [r7, #0]
 800a5f8:	785b      	ldrb	r3, [r3, #1]
 800a5fa:	2b01      	cmp	r3, #1
 800a5fc:	d12c      	bne.n	800a658 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800a5fe:	68bb      	ldr	r3, [r7, #8]
 800a600:	015a      	lsls	r2, r3, #5
 800a602:	68fb      	ldr	r3, [r7, #12]
 800a604:	4413      	add	r3, r2
 800a606:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a60a:	681b      	ldr	r3, [r3, #0]
 800a60c:	2b00      	cmp	r3, #0
 800a60e:	db12      	blt.n	800a636 <USB_EPSetStall+0x54>
 800a610:	68bb      	ldr	r3, [r7, #8]
 800a612:	2b00      	cmp	r3, #0
 800a614:	d00f      	beq.n	800a636 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800a616:	68bb      	ldr	r3, [r7, #8]
 800a618:	015a      	lsls	r2, r3, #5
 800a61a:	68fb      	ldr	r3, [r7, #12]
 800a61c:	4413      	add	r3, r2
 800a61e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a622:	681b      	ldr	r3, [r3, #0]
 800a624:	68ba      	ldr	r2, [r7, #8]
 800a626:	0151      	lsls	r1, r2, #5
 800a628:	68fa      	ldr	r2, [r7, #12]
 800a62a:	440a      	add	r2, r1
 800a62c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a630:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800a634:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800a636:	68bb      	ldr	r3, [r7, #8]
 800a638:	015a      	lsls	r2, r3, #5
 800a63a:	68fb      	ldr	r3, [r7, #12]
 800a63c:	4413      	add	r3, r2
 800a63e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a642:	681b      	ldr	r3, [r3, #0]
 800a644:	68ba      	ldr	r2, [r7, #8]
 800a646:	0151      	lsls	r1, r2, #5
 800a648:	68fa      	ldr	r2, [r7, #12]
 800a64a:	440a      	add	r2, r1
 800a64c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a650:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800a654:	6013      	str	r3, [r2, #0]
 800a656:	e02b      	b.n	800a6b0 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800a658:	68bb      	ldr	r3, [r7, #8]
 800a65a:	015a      	lsls	r2, r3, #5
 800a65c:	68fb      	ldr	r3, [r7, #12]
 800a65e:	4413      	add	r3, r2
 800a660:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a664:	681b      	ldr	r3, [r3, #0]
 800a666:	2b00      	cmp	r3, #0
 800a668:	db12      	blt.n	800a690 <USB_EPSetStall+0xae>
 800a66a:	68bb      	ldr	r3, [r7, #8]
 800a66c:	2b00      	cmp	r3, #0
 800a66e:	d00f      	beq.n	800a690 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800a670:	68bb      	ldr	r3, [r7, #8]
 800a672:	015a      	lsls	r2, r3, #5
 800a674:	68fb      	ldr	r3, [r7, #12]
 800a676:	4413      	add	r3, r2
 800a678:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a67c:	681b      	ldr	r3, [r3, #0]
 800a67e:	68ba      	ldr	r2, [r7, #8]
 800a680:	0151      	lsls	r1, r2, #5
 800a682:	68fa      	ldr	r2, [r7, #12]
 800a684:	440a      	add	r2, r1
 800a686:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a68a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800a68e:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800a690:	68bb      	ldr	r3, [r7, #8]
 800a692:	015a      	lsls	r2, r3, #5
 800a694:	68fb      	ldr	r3, [r7, #12]
 800a696:	4413      	add	r3, r2
 800a698:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a69c:	681b      	ldr	r3, [r3, #0]
 800a69e:	68ba      	ldr	r2, [r7, #8]
 800a6a0:	0151      	lsls	r1, r2, #5
 800a6a2:	68fa      	ldr	r2, [r7, #12]
 800a6a4:	440a      	add	r2, r1
 800a6a6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a6aa:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800a6ae:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a6b0:	2300      	movs	r3, #0
}
 800a6b2:	4618      	mov	r0, r3
 800a6b4:	3714      	adds	r7, #20
 800a6b6:	46bd      	mov	sp, r7
 800a6b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6bc:	4770      	bx	lr

0800a6be <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a6be:	b480      	push	{r7}
 800a6c0:	b085      	sub	sp, #20
 800a6c2:	af00      	add	r7, sp, #0
 800a6c4:	6078      	str	r0, [r7, #4]
 800a6c6:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a6cc:	683b      	ldr	r3, [r7, #0]
 800a6ce:	781b      	ldrb	r3, [r3, #0]
 800a6d0:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800a6d2:	683b      	ldr	r3, [r7, #0]
 800a6d4:	785b      	ldrb	r3, [r3, #1]
 800a6d6:	2b01      	cmp	r3, #1
 800a6d8:	d128      	bne.n	800a72c <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800a6da:	68bb      	ldr	r3, [r7, #8]
 800a6dc:	015a      	lsls	r2, r3, #5
 800a6de:	68fb      	ldr	r3, [r7, #12]
 800a6e0:	4413      	add	r3, r2
 800a6e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a6e6:	681b      	ldr	r3, [r3, #0]
 800a6e8:	68ba      	ldr	r2, [r7, #8]
 800a6ea:	0151      	lsls	r1, r2, #5
 800a6ec:	68fa      	ldr	r2, [r7, #12]
 800a6ee:	440a      	add	r2, r1
 800a6f0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a6f4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800a6f8:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800a6fa:	683b      	ldr	r3, [r7, #0]
 800a6fc:	78db      	ldrb	r3, [r3, #3]
 800a6fe:	2b03      	cmp	r3, #3
 800a700:	d003      	beq.n	800a70a <USB_EPClearStall+0x4c>
 800a702:	683b      	ldr	r3, [r7, #0]
 800a704:	78db      	ldrb	r3, [r3, #3]
 800a706:	2b02      	cmp	r3, #2
 800a708:	d138      	bne.n	800a77c <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800a70a:	68bb      	ldr	r3, [r7, #8]
 800a70c:	015a      	lsls	r2, r3, #5
 800a70e:	68fb      	ldr	r3, [r7, #12]
 800a710:	4413      	add	r3, r2
 800a712:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a716:	681b      	ldr	r3, [r3, #0]
 800a718:	68ba      	ldr	r2, [r7, #8]
 800a71a:	0151      	lsls	r1, r2, #5
 800a71c:	68fa      	ldr	r2, [r7, #12]
 800a71e:	440a      	add	r2, r1
 800a720:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a724:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a728:	6013      	str	r3, [r2, #0]
 800a72a:	e027      	b.n	800a77c <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800a72c:	68bb      	ldr	r3, [r7, #8]
 800a72e:	015a      	lsls	r2, r3, #5
 800a730:	68fb      	ldr	r3, [r7, #12]
 800a732:	4413      	add	r3, r2
 800a734:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a738:	681b      	ldr	r3, [r3, #0]
 800a73a:	68ba      	ldr	r2, [r7, #8]
 800a73c:	0151      	lsls	r1, r2, #5
 800a73e:	68fa      	ldr	r2, [r7, #12]
 800a740:	440a      	add	r2, r1
 800a742:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a746:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800a74a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800a74c:	683b      	ldr	r3, [r7, #0]
 800a74e:	78db      	ldrb	r3, [r3, #3]
 800a750:	2b03      	cmp	r3, #3
 800a752:	d003      	beq.n	800a75c <USB_EPClearStall+0x9e>
 800a754:	683b      	ldr	r3, [r7, #0]
 800a756:	78db      	ldrb	r3, [r3, #3]
 800a758:	2b02      	cmp	r3, #2
 800a75a:	d10f      	bne.n	800a77c <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800a75c:	68bb      	ldr	r3, [r7, #8]
 800a75e:	015a      	lsls	r2, r3, #5
 800a760:	68fb      	ldr	r3, [r7, #12]
 800a762:	4413      	add	r3, r2
 800a764:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a768:	681b      	ldr	r3, [r3, #0]
 800a76a:	68ba      	ldr	r2, [r7, #8]
 800a76c:	0151      	lsls	r1, r2, #5
 800a76e:	68fa      	ldr	r2, [r7, #12]
 800a770:	440a      	add	r2, r1
 800a772:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a776:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a77a:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800a77c:	2300      	movs	r3, #0
}
 800a77e:	4618      	mov	r0, r3
 800a780:	3714      	adds	r7, #20
 800a782:	46bd      	mov	sp, r7
 800a784:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a788:	4770      	bx	lr

0800a78a <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800a78a:	b480      	push	{r7}
 800a78c:	b085      	sub	sp, #20
 800a78e:	af00      	add	r7, sp, #0
 800a790:	6078      	str	r0, [r7, #4]
 800a792:	460b      	mov	r3, r1
 800a794:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800a79a:	68fb      	ldr	r3, [r7, #12]
 800a79c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a7a0:	681b      	ldr	r3, [r3, #0]
 800a7a2:	68fa      	ldr	r2, [r7, #12]
 800a7a4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a7a8:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800a7ac:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800a7ae:	68fb      	ldr	r3, [r7, #12]
 800a7b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a7b4:	681a      	ldr	r2, [r3, #0]
 800a7b6:	78fb      	ldrb	r3, [r7, #3]
 800a7b8:	011b      	lsls	r3, r3, #4
 800a7ba:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800a7be:	68f9      	ldr	r1, [r7, #12]
 800a7c0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a7c4:	4313      	orrs	r3, r2
 800a7c6:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800a7c8:	2300      	movs	r3, #0
}
 800a7ca:	4618      	mov	r0, r3
 800a7cc:	3714      	adds	r7, #20
 800a7ce:	46bd      	mov	sp, r7
 800a7d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7d4:	4770      	bx	lr

0800a7d6 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800a7d6:	b480      	push	{r7}
 800a7d8:	b085      	sub	sp, #20
 800a7da:	af00      	add	r7, sp, #0
 800a7dc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800a7e2:	68fb      	ldr	r3, [r7, #12]
 800a7e4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a7e8:	681b      	ldr	r3, [r3, #0]
 800a7ea:	68fa      	ldr	r2, [r7, #12]
 800a7ec:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800a7f0:	f023 0303 	bic.w	r3, r3, #3
 800a7f4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800a7f6:	68fb      	ldr	r3, [r7, #12]
 800a7f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a7fc:	685b      	ldr	r3, [r3, #4]
 800a7fe:	68fa      	ldr	r2, [r7, #12]
 800a800:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a804:	f023 0302 	bic.w	r3, r3, #2
 800a808:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a80a:	2300      	movs	r3, #0
}
 800a80c:	4618      	mov	r0, r3
 800a80e:	3714      	adds	r7, #20
 800a810:	46bd      	mov	sp, r7
 800a812:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a816:	4770      	bx	lr

0800a818 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800a818:	b480      	push	{r7}
 800a81a:	b085      	sub	sp, #20
 800a81c:	af00      	add	r7, sp, #0
 800a81e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800a824:	68fb      	ldr	r3, [r7, #12]
 800a826:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a82a:	681b      	ldr	r3, [r3, #0]
 800a82c:	68fa      	ldr	r2, [r7, #12]
 800a82e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800a832:	f023 0303 	bic.w	r3, r3, #3
 800a836:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800a838:	68fb      	ldr	r3, [r7, #12]
 800a83a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a83e:	685b      	ldr	r3, [r3, #4]
 800a840:	68fa      	ldr	r2, [r7, #12]
 800a842:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a846:	f043 0302 	orr.w	r3, r3, #2
 800a84a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a84c:	2300      	movs	r3, #0
}
 800a84e:	4618      	mov	r0, r3
 800a850:	3714      	adds	r7, #20
 800a852:	46bd      	mov	sp, r7
 800a854:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a858:	4770      	bx	lr

0800a85a <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800a85a:	b480      	push	{r7}
 800a85c:	b085      	sub	sp, #20
 800a85e:	af00      	add	r7, sp, #0
 800a860:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	695b      	ldr	r3, [r3, #20]
 800a866:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	699b      	ldr	r3, [r3, #24]
 800a86c:	68fa      	ldr	r2, [r7, #12]
 800a86e:	4013      	ands	r3, r2
 800a870:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800a872:	68fb      	ldr	r3, [r7, #12]
}
 800a874:	4618      	mov	r0, r3
 800a876:	3714      	adds	r7, #20
 800a878:	46bd      	mov	sp, r7
 800a87a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a87e:	4770      	bx	lr

0800a880 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800a880:	b480      	push	{r7}
 800a882:	b085      	sub	sp, #20
 800a884:	af00      	add	r7, sp, #0
 800a886:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800a88c:	68fb      	ldr	r3, [r7, #12]
 800a88e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a892:	699b      	ldr	r3, [r3, #24]
 800a894:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800a896:	68fb      	ldr	r3, [r7, #12]
 800a898:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a89c:	69db      	ldr	r3, [r3, #28]
 800a89e:	68ba      	ldr	r2, [r7, #8]
 800a8a0:	4013      	ands	r3, r2
 800a8a2:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800a8a4:	68bb      	ldr	r3, [r7, #8]
 800a8a6:	0c1b      	lsrs	r3, r3, #16
}
 800a8a8:	4618      	mov	r0, r3
 800a8aa:	3714      	adds	r7, #20
 800a8ac:	46bd      	mov	sp, r7
 800a8ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8b2:	4770      	bx	lr

0800a8b4 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800a8b4:	b480      	push	{r7}
 800a8b6:	b085      	sub	sp, #20
 800a8b8:	af00      	add	r7, sp, #0
 800a8ba:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800a8c0:	68fb      	ldr	r3, [r7, #12]
 800a8c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a8c6:	699b      	ldr	r3, [r3, #24]
 800a8c8:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800a8ca:	68fb      	ldr	r3, [r7, #12]
 800a8cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a8d0:	69db      	ldr	r3, [r3, #28]
 800a8d2:	68ba      	ldr	r2, [r7, #8]
 800a8d4:	4013      	ands	r3, r2
 800a8d6:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800a8d8:	68bb      	ldr	r3, [r7, #8]
 800a8da:	b29b      	uxth	r3, r3
}
 800a8dc:	4618      	mov	r0, r3
 800a8de:	3714      	adds	r7, #20
 800a8e0:	46bd      	mov	sp, r7
 800a8e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8e6:	4770      	bx	lr

0800a8e8 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800a8e8:	b480      	push	{r7}
 800a8ea:	b085      	sub	sp, #20
 800a8ec:	af00      	add	r7, sp, #0
 800a8ee:	6078      	str	r0, [r7, #4]
 800a8f0:	460b      	mov	r3, r1
 800a8f2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800a8f8:	78fb      	ldrb	r3, [r7, #3]
 800a8fa:	015a      	lsls	r2, r3, #5
 800a8fc:	68fb      	ldr	r3, [r7, #12]
 800a8fe:	4413      	add	r3, r2
 800a900:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a904:	689b      	ldr	r3, [r3, #8]
 800a906:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800a908:	68fb      	ldr	r3, [r7, #12]
 800a90a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a90e:	695b      	ldr	r3, [r3, #20]
 800a910:	68ba      	ldr	r2, [r7, #8]
 800a912:	4013      	ands	r3, r2
 800a914:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800a916:	68bb      	ldr	r3, [r7, #8]
}
 800a918:	4618      	mov	r0, r3
 800a91a:	3714      	adds	r7, #20
 800a91c:	46bd      	mov	sp, r7
 800a91e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a922:	4770      	bx	lr

0800a924 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800a924:	b480      	push	{r7}
 800a926:	b087      	sub	sp, #28
 800a928:	af00      	add	r7, sp, #0
 800a92a:	6078      	str	r0, [r7, #4]
 800a92c:	460b      	mov	r3, r1
 800a92e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 800a934:	697b      	ldr	r3, [r7, #20]
 800a936:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a93a:	691b      	ldr	r3, [r3, #16]
 800a93c:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800a93e:	697b      	ldr	r3, [r7, #20]
 800a940:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a944:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a946:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800a948:	78fb      	ldrb	r3, [r7, #3]
 800a94a:	f003 030f 	and.w	r3, r3, #15
 800a94e:	68fa      	ldr	r2, [r7, #12]
 800a950:	fa22 f303 	lsr.w	r3, r2, r3
 800a954:	01db      	lsls	r3, r3, #7
 800a956:	b2db      	uxtb	r3, r3
 800a958:	693a      	ldr	r2, [r7, #16]
 800a95a:	4313      	orrs	r3, r2
 800a95c:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800a95e:	78fb      	ldrb	r3, [r7, #3]
 800a960:	015a      	lsls	r2, r3, #5
 800a962:	697b      	ldr	r3, [r7, #20]
 800a964:	4413      	add	r3, r2
 800a966:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a96a:	689b      	ldr	r3, [r3, #8]
 800a96c:	693a      	ldr	r2, [r7, #16]
 800a96e:	4013      	ands	r3, r2
 800a970:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800a972:	68bb      	ldr	r3, [r7, #8]
}
 800a974:	4618      	mov	r0, r3
 800a976:	371c      	adds	r7, #28
 800a978:	46bd      	mov	sp, r7
 800a97a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a97e:	4770      	bx	lr

0800a980 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800a980:	b480      	push	{r7}
 800a982:	b083      	sub	sp, #12
 800a984:	af00      	add	r7, sp, #0
 800a986:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	695b      	ldr	r3, [r3, #20]
 800a98c:	f003 0301 	and.w	r3, r3, #1
}
 800a990:	4618      	mov	r0, r3
 800a992:	370c      	adds	r7, #12
 800a994:	46bd      	mov	sp, r7
 800a996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a99a:	4770      	bx	lr

0800a99c <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800a99c:	b480      	push	{r7}
 800a99e:	b085      	sub	sp, #20
 800a9a0:	af00      	add	r7, sp, #0
 800a9a2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800a9a8:	68fb      	ldr	r3, [r7, #12]
 800a9aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a9ae:	681b      	ldr	r3, [r3, #0]
 800a9b0:	68fa      	ldr	r2, [r7, #12]
 800a9b2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a9b6:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800a9ba:	f023 0307 	bic.w	r3, r3, #7
 800a9be:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800a9c0:	68fb      	ldr	r3, [r7, #12]
 800a9c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a9c6:	685b      	ldr	r3, [r3, #4]
 800a9c8:	68fa      	ldr	r2, [r7, #12]
 800a9ca:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a9ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a9d2:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a9d4:	2300      	movs	r3, #0
}
 800a9d6:	4618      	mov	r0, r3
 800a9d8:	3714      	adds	r7, #20
 800a9da:	46bd      	mov	sp, r7
 800a9dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9e0:	4770      	bx	lr
	...

0800a9e4 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800a9e4:	b480      	push	{r7}
 800a9e6:	b087      	sub	sp, #28
 800a9e8:	af00      	add	r7, sp, #0
 800a9ea:	60f8      	str	r0, [r7, #12]
 800a9ec:	460b      	mov	r3, r1
 800a9ee:	607a      	str	r2, [r7, #4]
 800a9f0:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a9f2:	68fb      	ldr	r3, [r7, #12]
 800a9f4:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800a9f6:	68fb      	ldr	r3, [r7, #12]
 800a9f8:	333c      	adds	r3, #60	; 0x3c
 800a9fa:	3304      	adds	r3, #4
 800a9fc:	681b      	ldr	r3, [r3, #0]
 800a9fe:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800aa00:	693b      	ldr	r3, [r7, #16]
 800aa02:	4a26      	ldr	r2, [pc, #152]	; (800aa9c <USB_EP0_OutStart+0xb8>)
 800aa04:	4293      	cmp	r3, r2
 800aa06:	d90a      	bls.n	800aa1e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800aa08:	697b      	ldr	r3, [r7, #20]
 800aa0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aa0e:	681b      	ldr	r3, [r3, #0]
 800aa10:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800aa14:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800aa18:	d101      	bne.n	800aa1e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800aa1a:	2300      	movs	r3, #0
 800aa1c:	e037      	b.n	800aa8e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800aa1e:	697b      	ldr	r3, [r7, #20]
 800aa20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aa24:	461a      	mov	r2, r3
 800aa26:	2300      	movs	r3, #0
 800aa28:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800aa2a:	697b      	ldr	r3, [r7, #20]
 800aa2c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aa30:	691b      	ldr	r3, [r3, #16]
 800aa32:	697a      	ldr	r2, [r7, #20]
 800aa34:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800aa38:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800aa3c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800aa3e:	697b      	ldr	r3, [r7, #20]
 800aa40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aa44:	691b      	ldr	r3, [r3, #16]
 800aa46:	697a      	ldr	r2, [r7, #20]
 800aa48:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800aa4c:	f043 0318 	orr.w	r3, r3, #24
 800aa50:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800aa52:	697b      	ldr	r3, [r7, #20]
 800aa54:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aa58:	691b      	ldr	r3, [r3, #16]
 800aa5a:	697a      	ldr	r2, [r7, #20]
 800aa5c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800aa60:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800aa64:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800aa66:	7afb      	ldrb	r3, [r7, #11]
 800aa68:	2b01      	cmp	r3, #1
 800aa6a:	d10f      	bne.n	800aa8c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800aa6c:	697b      	ldr	r3, [r7, #20]
 800aa6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aa72:	461a      	mov	r2, r3
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800aa78:	697b      	ldr	r3, [r7, #20]
 800aa7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aa7e:	681b      	ldr	r3, [r3, #0]
 800aa80:	697a      	ldr	r2, [r7, #20]
 800aa82:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800aa86:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800aa8a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800aa8c:	2300      	movs	r3, #0
}
 800aa8e:	4618      	mov	r0, r3
 800aa90:	371c      	adds	r7, #28
 800aa92:	46bd      	mov	sp, r7
 800aa94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa98:	4770      	bx	lr
 800aa9a:	bf00      	nop
 800aa9c:	4f54300a 	.word	0x4f54300a

0800aaa0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800aaa0:	b480      	push	{r7}
 800aaa2:	b085      	sub	sp, #20
 800aaa4:	af00      	add	r7, sp, #0
 800aaa6:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800aaa8:	2300      	movs	r3, #0
 800aaaa:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800aaac:	68fb      	ldr	r3, [r7, #12]
 800aaae:	3301      	adds	r3, #1
 800aab0:	60fb      	str	r3, [r7, #12]
 800aab2:	68fb      	ldr	r3, [r7, #12]
 800aab4:	4a13      	ldr	r2, [pc, #76]	; (800ab04 <USB_CoreReset+0x64>)
 800aab6:	4293      	cmp	r3, r2
 800aab8:	d901      	bls.n	800aabe <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800aaba:	2303      	movs	r3, #3
 800aabc:	e01b      	b.n	800aaf6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	691b      	ldr	r3, [r3, #16]
 800aac2:	2b00      	cmp	r3, #0
 800aac4:	daf2      	bge.n	800aaac <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800aac6:	2300      	movs	r3, #0
 800aac8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	691b      	ldr	r3, [r3, #16]
 800aace:	f043 0201 	orr.w	r2, r3, #1
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800aad6:	68fb      	ldr	r3, [r7, #12]
 800aad8:	3301      	adds	r3, #1
 800aada:	60fb      	str	r3, [r7, #12]
 800aadc:	68fb      	ldr	r3, [r7, #12]
 800aade:	4a09      	ldr	r2, [pc, #36]	; (800ab04 <USB_CoreReset+0x64>)
 800aae0:	4293      	cmp	r3, r2
 800aae2:	d901      	bls.n	800aae8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800aae4:	2303      	movs	r3, #3
 800aae6:	e006      	b.n	800aaf6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	691b      	ldr	r3, [r3, #16]
 800aaec:	f003 0301 	and.w	r3, r3, #1
 800aaf0:	2b01      	cmp	r3, #1
 800aaf2:	d0f0      	beq.n	800aad6 <USB_CoreReset+0x36>

  return HAL_OK;
 800aaf4:	2300      	movs	r3, #0
}
 800aaf6:	4618      	mov	r0, r3
 800aaf8:	3714      	adds	r7, #20
 800aafa:	46bd      	mov	sp, r7
 800aafc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab00:	4770      	bx	lr
 800ab02:	bf00      	nop
 800ab04:	00030d40 	.word	0x00030d40

0800ab08 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ab08:	b580      	push	{r7, lr}
 800ab0a:	b084      	sub	sp, #16
 800ab0c:	af00      	add	r7, sp, #0
 800ab0e:	6078      	str	r0, [r7, #4]
 800ab10:	460b      	mov	r3, r1
 800ab12:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800ab14:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800ab18:	f004 f82a 	bl	800eb70 <malloc>
 800ab1c:	4603      	mov	r3, r0
 800ab1e:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800ab20:	68fb      	ldr	r3, [r7, #12]
 800ab22:	2b00      	cmp	r3, #0
 800ab24:	d105      	bne.n	800ab32 <USBD_CDC_Init+0x2a>
  {
    pdev->pClassData = NULL;
 800ab26:	687b      	ldr	r3, [r7, #4]
 800ab28:	2200      	movs	r2, #0
 800ab2a:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 800ab2e:	2302      	movs	r3, #2
 800ab30:	e066      	b.n	800ac00 <USBD_CDC_Init+0xf8>
  }

  pdev->pClassData = (void *)hcdc;
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	68fa      	ldr	r2, [r7, #12]
 800ab36:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	7c1b      	ldrb	r3, [r3, #16]
 800ab3e:	2b00      	cmp	r3, #0
 800ab40:	d119      	bne.n	800ab76 <USBD_CDC_Init+0x6e>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800ab42:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ab46:	2202      	movs	r2, #2
 800ab48:	2181      	movs	r1, #129	; 0x81
 800ab4a:	6878      	ldr	r0, [r7, #4]
 800ab4c:	f001 ff71 	bl	800ca32 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	2201      	movs	r2, #1
 800ab54:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800ab56:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ab5a:	2202      	movs	r2, #2
 800ab5c:	2101      	movs	r1, #1
 800ab5e:	6878      	ldr	r0, [r7, #4]
 800ab60:	f001 ff67 	bl	800ca32 <USBD_LL_OpenEP>
                          CDC_DATA_HS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	2201      	movs	r2, #1
 800ab68:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CDC CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	2210      	movs	r2, #16
 800ab70:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 800ab74:	e016      	b.n	800aba4 <USBD_CDC_Init+0x9c>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800ab76:	2340      	movs	r3, #64	; 0x40
 800ab78:	2202      	movs	r2, #2
 800ab7a:	2181      	movs	r1, #129	; 0x81
 800ab7c:	6878      	ldr	r0, [r7, #4]
 800ab7e:	f001 ff58 	bl	800ca32 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	2201      	movs	r2, #1
 800ab86:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800ab88:	2340      	movs	r3, #64	; 0x40
 800ab8a:	2202      	movs	r2, #2
 800ab8c:	2101      	movs	r1, #1
 800ab8e:	6878      	ldr	r0, [r7, #4]
 800ab90:	f001 ff4f 	bl	800ca32 <USBD_LL_OpenEP>
                          CDC_DATA_FS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	2201      	movs	r2, #1
 800ab98:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	2210      	movs	r2, #16
 800aba0:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800aba4:	2308      	movs	r3, #8
 800aba6:	2203      	movs	r2, #3
 800aba8:	2182      	movs	r1, #130	; 0x82
 800abaa:	6878      	ldr	r0, [r7, #4]
 800abac:	f001 ff41 	bl	800ca32 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	2201      	movs	r2, #1
 800abb4:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800abbe:	681b      	ldr	r3, [r3, #0]
 800abc0:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800abc2:	68fb      	ldr	r3, [r7, #12]
 800abc4:	2200      	movs	r2, #0
 800abc6:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800abca:	68fb      	ldr	r3, [r7, #12]
 800abcc:	2200      	movs	r2, #0
 800abce:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	7c1b      	ldrb	r3, [r3, #16]
 800abd6:	2b00      	cmp	r3, #0
 800abd8:	d109      	bne.n	800abee <USBD_CDC_Init+0xe6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800abda:	68fb      	ldr	r3, [r7, #12]
 800abdc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800abe0:	f44f 7300 	mov.w	r3, #512	; 0x200
 800abe4:	2101      	movs	r1, #1
 800abe6:	6878      	ldr	r0, [r7, #4]
 800abe8:	f002 f812 	bl	800cc10 <USBD_LL_PrepareReceive>
 800abec:	e007      	b.n	800abfe <USBD_CDC_Init+0xf6>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800abee:	68fb      	ldr	r3, [r7, #12]
 800abf0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800abf4:	2340      	movs	r3, #64	; 0x40
 800abf6:	2101      	movs	r1, #1
 800abf8:	6878      	ldr	r0, [r7, #4]
 800abfa:	f002 f809 	bl	800cc10 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800abfe:	2300      	movs	r3, #0
}
 800ac00:	4618      	mov	r0, r3
 800ac02:	3710      	adds	r7, #16
 800ac04:	46bd      	mov	sp, r7
 800ac06:	bd80      	pop	{r7, pc}

0800ac08 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ac08:	b580      	push	{r7, lr}
 800ac0a:	b084      	sub	sp, #16
 800ac0c:	af00      	add	r7, sp, #0
 800ac0e:	6078      	str	r0, [r7, #4]
 800ac10:	460b      	mov	r3, r1
 800ac12:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  uint8_t ret = 0U;
 800ac14:	2300      	movs	r3, #0
 800ac16:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800ac18:	2181      	movs	r1, #129	; 0x81
 800ac1a:	6878      	ldr	r0, [r7, #4]
 800ac1c:	f001 ff2f 	bl	800ca7e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	2200      	movs	r2, #0
 800ac24:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800ac26:	2101      	movs	r1, #1
 800ac28:	6878      	ldr	r0, [r7, #4]
 800ac2a:	f001 ff28 	bl	800ca7e <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800ac2e:	687b      	ldr	r3, [r7, #4]
 800ac30:	2200      	movs	r2, #0
 800ac32:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800ac36:	2182      	movs	r1, #130	; 0x82
 800ac38:	6878      	ldr	r0, [r7, #4]
 800ac3a:	f001 ff20 	bl	800ca7e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	2200      	movs	r2, #0
 800ac42:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	2200      	movs	r2, #0
 800ac4a:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ac54:	2b00      	cmp	r3, #0
 800ac56:	d00e      	beq.n	800ac76 <USBD_CDC_DeInit+0x6e>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ac5e:	685b      	ldr	r3, [r3, #4]
 800ac60:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ac68:	4618      	mov	r0, r3
 800ac6a:	f003 ff89 	bl	800eb80 <free>
    pdev->pClassData = NULL;
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	2200      	movs	r2, #0
 800ac72:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return ret;
 800ac76:	7bfb      	ldrb	r3, [r7, #15]
}
 800ac78:	4618      	mov	r0, r3
 800ac7a:	3710      	adds	r7, #16
 800ac7c:	46bd      	mov	sp, r7
 800ac7e:	bd80      	pop	{r7, pc}

0800ac80 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800ac80:	b580      	push	{r7, lr}
 800ac82:	b086      	sub	sp, #24
 800ac84:	af00      	add	r7, sp, #0
 800ac86:	6078      	str	r0, [r7, #4]
 800ac88:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ac90:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 800ac92:	2300      	movs	r3, #0
 800ac94:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 800ac96:	2300      	movs	r3, #0
 800ac98:	81bb      	strh	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 800ac9a:	2300      	movs	r3, #0
 800ac9c:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ac9e:	683b      	ldr	r3, [r7, #0]
 800aca0:	781b      	ldrb	r3, [r3, #0]
 800aca2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800aca6:	2b00      	cmp	r3, #0
 800aca8:	d03a      	beq.n	800ad20 <USBD_CDC_Setup+0xa0>
 800acaa:	2b20      	cmp	r3, #32
 800acac:	f040 8097 	bne.w	800adde <USBD_CDC_Setup+0x15e>
  {
  case USB_REQ_TYPE_CLASS:
    if (req->wLength != 0U)
 800acb0:	683b      	ldr	r3, [r7, #0]
 800acb2:	88db      	ldrh	r3, [r3, #6]
 800acb4:	2b00      	cmp	r3, #0
 800acb6:	d029      	beq.n	800ad0c <USBD_CDC_Setup+0x8c>
    {
      if ((req->bmRequest & 0x80U) != 0U)
 800acb8:	683b      	ldr	r3, [r7, #0]
 800acba:	781b      	ldrb	r3, [r3, #0]
 800acbc:	b25b      	sxtb	r3, r3
 800acbe:	2b00      	cmp	r3, #0
 800acc0:	da11      	bge.n	800ace6 <USBD_CDC_Setup+0x66>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800acc8:	689b      	ldr	r3, [r3, #8]
 800acca:	683a      	ldr	r2, [r7, #0]
 800accc:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)hcdc->data,
 800acce:	6939      	ldr	r1, [r7, #16]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800acd0:	683a      	ldr	r2, [r7, #0]
 800acd2:	88d2      	ldrh	r2, [r2, #6]
 800acd4:	4798      	blx	r3
                                                          req->wLength);

          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, req->wLength);
 800acd6:	6939      	ldr	r1, [r7, #16]
 800acd8:	683b      	ldr	r3, [r7, #0]
 800acda:	88db      	ldrh	r3, [r3, #6]
 800acdc:	461a      	mov	r2, r3
 800acde:	6878      	ldr	r0, [r7, #4]
 800ace0:	f001 fa6d 	bl	800c1be <USBD_CtlSendData>
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t *)req, 0U);
    }
    break;
 800ace4:	e082      	b.n	800adec <USBD_CDC_Setup+0x16c>
        hcdc->CmdOpCode = req->bRequest;
 800ace6:	683b      	ldr	r3, [r7, #0]
 800ace8:	785a      	ldrb	r2, [r3, #1]
 800acea:	693b      	ldr	r3, [r7, #16]
 800acec:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 800acf0:	683b      	ldr	r3, [r7, #0]
 800acf2:	88db      	ldrh	r3, [r3, #6]
 800acf4:	b2da      	uxtb	r2, r3
 800acf6:	693b      	ldr	r3, [r7, #16]
 800acf8:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
        (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 800acfc:	6939      	ldr	r1, [r7, #16]
 800acfe:	683b      	ldr	r3, [r7, #0]
 800ad00:	88db      	ldrh	r3, [r3, #6]
 800ad02:	461a      	mov	r2, r3
 800ad04:	6878      	ldr	r0, [r7, #4]
 800ad06:	f001 fa86 	bl	800c216 <USBD_CtlPrepareRx>
    break;
 800ad0a:	e06f      	b.n	800adec <USBD_CDC_Setup+0x16c>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ad12:	689b      	ldr	r3, [r3, #8]
 800ad14:	683a      	ldr	r2, [r7, #0]
 800ad16:	7850      	ldrb	r0, [r2, #1]
 800ad18:	2200      	movs	r2, #0
 800ad1a:	6839      	ldr	r1, [r7, #0]
 800ad1c:	4798      	blx	r3
    break;
 800ad1e:	e065      	b.n	800adec <USBD_CDC_Setup+0x16c>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800ad20:	683b      	ldr	r3, [r7, #0]
 800ad22:	785b      	ldrb	r3, [r3, #1]
 800ad24:	2b0b      	cmp	r3, #11
 800ad26:	d84f      	bhi.n	800adc8 <USBD_CDC_Setup+0x148>
 800ad28:	a201      	add	r2, pc, #4	; (adr r2, 800ad30 <USBD_CDC_Setup+0xb0>)
 800ad2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ad2e:	bf00      	nop
 800ad30:	0800ad61 	.word	0x0800ad61
 800ad34:	0800add7 	.word	0x0800add7
 800ad38:	0800adc9 	.word	0x0800adc9
 800ad3c:	0800adc9 	.word	0x0800adc9
 800ad40:	0800adc9 	.word	0x0800adc9
 800ad44:	0800adc9 	.word	0x0800adc9
 800ad48:	0800adc9 	.word	0x0800adc9
 800ad4c:	0800adc9 	.word	0x0800adc9
 800ad50:	0800adc9 	.word	0x0800adc9
 800ad54:	0800adc9 	.word	0x0800adc9
 800ad58:	0800ad89 	.word	0x0800ad89
 800ad5c:	0800adb1 	.word	0x0800adb1
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ad66:	2b03      	cmp	r3, #3
 800ad68:	d107      	bne.n	800ad7a <USBD_CDC_Setup+0xfa>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800ad6a:	f107 030c 	add.w	r3, r7, #12
 800ad6e:	2202      	movs	r2, #2
 800ad70:	4619      	mov	r1, r3
 800ad72:	6878      	ldr	r0, [r7, #4]
 800ad74:	f001 fa23 	bl	800c1be <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 800ad78:	e030      	b.n	800addc <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 800ad7a:	6839      	ldr	r1, [r7, #0]
 800ad7c:	6878      	ldr	r0, [r7, #4]
 800ad7e:	f001 f9ad 	bl	800c0dc <USBD_CtlError>
        ret = USBD_FAIL;
 800ad82:	2303      	movs	r3, #3
 800ad84:	75fb      	strb	r3, [r7, #23]
      break;
 800ad86:	e029      	b.n	800addc <USBD_CDC_Setup+0x15c>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ad8e:	2b03      	cmp	r3, #3
 800ad90:	d107      	bne.n	800ada2 <USBD_CDC_Setup+0x122>
      {
        (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800ad92:	f107 030f 	add.w	r3, r7, #15
 800ad96:	2201      	movs	r2, #1
 800ad98:	4619      	mov	r1, r3
 800ad9a:	6878      	ldr	r0, [r7, #4]
 800ad9c:	f001 fa0f 	bl	800c1be <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 800ada0:	e01c      	b.n	800addc <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 800ada2:	6839      	ldr	r1, [r7, #0]
 800ada4:	6878      	ldr	r0, [r7, #4]
 800ada6:	f001 f999 	bl	800c0dc <USBD_CtlError>
        ret = USBD_FAIL;
 800adaa:	2303      	movs	r3, #3
 800adac:	75fb      	strb	r3, [r7, #23]
      break;
 800adae:	e015      	b.n	800addc <USBD_CDC_Setup+0x15c>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800adb6:	2b03      	cmp	r3, #3
 800adb8:	d00f      	beq.n	800adda <USBD_CDC_Setup+0x15a>
      {
        USBD_CtlError(pdev, req);
 800adba:	6839      	ldr	r1, [r7, #0]
 800adbc:	6878      	ldr	r0, [r7, #4]
 800adbe:	f001 f98d 	bl	800c0dc <USBD_CtlError>
        ret = USBD_FAIL;
 800adc2:	2303      	movs	r3, #3
 800adc4:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800adc6:	e008      	b.n	800adda <USBD_CDC_Setup+0x15a>

    case USB_REQ_CLEAR_FEATURE:
      break;

    default:
      USBD_CtlError(pdev, req);
 800adc8:	6839      	ldr	r1, [r7, #0]
 800adca:	6878      	ldr	r0, [r7, #4]
 800adcc:	f001 f986 	bl	800c0dc <USBD_CtlError>
      ret = USBD_FAIL;
 800add0:	2303      	movs	r3, #3
 800add2:	75fb      	strb	r3, [r7, #23]
      break;
 800add4:	e002      	b.n	800addc <USBD_CDC_Setup+0x15c>
      break;
 800add6:	bf00      	nop
 800add8:	e008      	b.n	800adec <USBD_CDC_Setup+0x16c>
      break;
 800adda:	bf00      	nop
    }
    break;
 800addc:	e006      	b.n	800adec <USBD_CDC_Setup+0x16c>

  default:
    USBD_CtlError(pdev, req);
 800adde:	6839      	ldr	r1, [r7, #0]
 800ade0:	6878      	ldr	r0, [r7, #4]
 800ade2:	f001 f97b 	bl	800c0dc <USBD_CtlError>
    ret = USBD_FAIL;
 800ade6:	2303      	movs	r3, #3
 800ade8:	75fb      	strb	r3, [r7, #23]
    break;
 800adea:	bf00      	nop
  }

  return (uint8_t)ret;
 800adec:	7dfb      	ldrb	r3, [r7, #23]
}
 800adee:	4618      	mov	r0, r3
 800adf0:	3718      	adds	r7, #24
 800adf2:	46bd      	mov	sp, r7
 800adf4:	bd80      	pop	{r7, pc}
 800adf6:	bf00      	nop

0800adf8 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800adf8:	b580      	push	{r7, lr}
 800adfa:	b084      	sub	sp, #16
 800adfc:	af00      	add	r7, sp, #0
 800adfe:	6078      	str	r0, [r7, #4]
 800ae00:	460b      	mov	r3, r1
 800ae02:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800ae0a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ae12:	2b00      	cmp	r3, #0
 800ae14:	d101      	bne.n	800ae1a <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800ae16:	2303      	movs	r3, #3
 800ae18:	e049      	b.n	800aeae <USBD_CDC_DataIn+0xb6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800ae1a:	687b      	ldr	r3, [r7, #4]
 800ae1c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ae20:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800ae22:	78fa      	ldrb	r2, [r7, #3]
 800ae24:	6879      	ldr	r1, [r7, #4]
 800ae26:	4613      	mov	r3, r2
 800ae28:	009b      	lsls	r3, r3, #2
 800ae2a:	4413      	add	r3, r2
 800ae2c:	009b      	lsls	r3, r3, #2
 800ae2e:	440b      	add	r3, r1
 800ae30:	3318      	adds	r3, #24
 800ae32:	681b      	ldr	r3, [r3, #0]
 800ae34:	2b00      	cmp	r3, #0
 800ae36:	d029      	beq.n	800ae8c <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800ae38:	78fa      	ldrb	r2, [r7, #3]
 800ae3a:	6879      	ldr	r1, [r7, #4]
 800ae3c:	4613      	mov	r3, r2
 800ae3e:	009b      	lsls	r3, r3, #2
 800ae40:	4413      	add	r3, r2
 800ae42:	009b      	lsls	r3, r3, #2
 800ae44:	440b      	add	r3, r1
 800ae46:	3318      	adds	r3, #24
 800ae48:	681a      	ldr	r2, [r3, #0]
 800ae4a:	78f9      	ldrb	r1, [r7, #3]
 800ae4c:	68f8      	ldr	r0, [r7, #12]
 800ae4e:	460b      	mov	r3, r1
 800ae50:	00db      	lsls	r3, r3, #3
 800ae52:	1a5b      	subs	r3, r3, r1
 800ae54:	009b      	lsls	r3, r3, #2
 800ae56:	4403      	add	r3, r0
 800ae58:	3344      	adds	r3, #68	; 0x44
 800ae5a:	681b      	ldr	r3, [r3, #0]
 800ae5c:	fbb2 f1f3 	udiv	r1, r2, r3
 800ae60:	fb03 f301 	mul.w	r3, r3, r1
 800ae64:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800ae66:	2b00      	cmp	r3, #0
 800ae68:	d110      	bne.n	800ae8c <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800ae6a:	78fa      	ldrb	r2, [r7, #3]
 800ae6c:	6879      	ldr	r1, [r7, #4]
 800ae6e:	4613      	mov	r3, r2
 800ae70:	009b      	lsls	r3, r3, #2
 800ae72:	4413      	add	r3, r2
 800ae74:	009b      	lsls	r3, r3, #2
 800ae76:	440b      	add	r3, r1
 800ae78:	3318      	adds	r3, #24
 800ae7a:	2200      	movs	r2, #0
 800ae7c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800ae7e:	78f9      	ldrb	r1, [r7, #3]
 800ae80:	2300      	movs	r3, #0
 800ae82:	2200      	movs	r2, #0
 800ae84:	6878      	ldr	r0, [r7, #4]
 800ae86:	f001 fea2 	bl	800cbce <USBD_LL_Transmit>
 800ae8a:	e00f      	b.n	800aeac <USBD_CDC_DataIn+0xb4>
  }
  else
  {
    hcdc->TxState = 0U;
 800ae8c:	68bb      	ldr	r3, [r7, #8]
 800ae8e:	2200      	movs	r2, #0
 800ae90:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ae9a:	691b      	ldr	r3, [r3, #16]
 800ae9c:	68ba      	ldr	r2, [r7, #8]
 800ae9e:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800aea2:	68ba      	ldr	r2, [r7, #8]
 800aea4:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800aea8:	78fa      	ldrb	r2, [r7, #3]
 800aeaa:	4798      	blx	r3
  }

  return (uint8_t)USBD_OK;
 800aeac:	2300      	movs	r3, #0
}
 800aeae:	4618      	mov	r0, r3
 800aeb0:	3710      	adds	r7, #16
 800aeb2:	46bd      	mov	sp, r7
 800aeb4:	bd80      	pop	{r7, pc}

0800aeb6 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800aeb6:	b580      	push	{r7, lr}
 800aeb8:	b084      	sub	sp, #16
 800aeba:	af00      	add	r7, sp, #0
 800aebc:	6078      	str	r0, [r7, #4]
 800aebe:	460b      	mov	r3, r1
 800aec0:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800aec8:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800aed0:	2b00      	cmp	r3, #0
 800aed2:	d101      	bne.n	800aed8 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800aed4:	2303      	movs	r3, #3
 800aed6:	e015      	b.n	800af04 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800aed8:	78fb      	ldrb	r3, [r7, #3]
 800aeda:	4619      	mov	r1, r3
 800aedc:	6878      	ldr	r0, [r7, #4]
 800aede:	f001 feb8 	bl	800cc52 <USBD_LL_GetRxDataSize>
 800aee2:	4602      	mov	r2, r0
 800aee4:	68fb      	ldr	r3, [r7, #12]
 800aee6:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800aef0:	68db      	ldr	r3, [r3, #12]
 800aef2:	68fa      	ldr	r2, [r7, #12]
 800aef4:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800aef8:	68fa      	ldr	r2, [r7, #12]
 800aefa:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800aefe:	4611      	mov	r1, r2
 800af00:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800af02:	2300      	movs	r3, #0
}
 800af04:	4618      	mov	r0, r3
 800af06:	3710      	adds	r7, #16
 800af08:	46bd      	mov	sp, r7
 800af0a:	bd80      	pop	{r7, pc}

0800af0c <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800af0c:	b580      	push	{r7, lr}
 800af0e:	b084      	sub	sp, #16
 800af10:	af00      	add	r7, sp, #0
 800af12:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800af1a:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800af22:	2b00      	cmp	r3, #0
 800af24:	d015      	beq.n	800af52 <USBD_CDC_EP0_RxReady+0x46>
 800af26:	68fb      	ldr	r3, [r7, #12]
 800af28:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800af2c:	2bff      	cmp	r3, #255	; 0xff
 800af2e:	d010      	beq.n	800af52 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800af36:	689b      	ldr	r3, [r3, #8]
 800af38:	68fa      	ldr	r2, [r7, #12]
 800af3a:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 800af3e:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800af40:	68fa      	ldr	r2, [r7, #12]
 800af42:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800af46:	b292      	uxth	r2, r2
 800af48:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800af4a:	68fb      	ldr	r3, [r7, #12]
 800af4c:	22ff      	movs	r2, #255	; 0xff
 800af4e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }

  return (uint8_t)USBD_OK;
 800af52:	2300      	movs	r3, #0
}
 800af54:	4618      	mov	r0, r3
 800af56:	3710      	adds	r7, #16
 800af58:	46bd      	mov	sp, r7
 800af5a:	bd80      	pop	{r7, pc}

0800af5c <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800af5c:	b480      	push	{r7}
 800af5e:	b083      	sub	sp, #12
 800af60:	af00      	add	r7, sp, #0
 800af62:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800af64:	687b      	ldr	r3, [r7, #4]
 800af66:	2243      	movs	r2, #67	; 0x43
 800af68:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800af6a:	4b03      	ldr	r3, [pc, #12]	; (800af78 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800af6c:	4618      	mov	r0, r3
 800af6e:	370c      	adds	r7, #12
 800af70:	46bd      	mov	sp, r7
 800af72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af76:	4770      	bx	lr
 800af78:	20000494 	.word	0x20000494

0800af7c <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800af7c:	b480      	push	{r7}
 800af7e:	b083      	sub	sp, #12
 800af80:	af00      	add	r7, sp, #0
 800af82:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	2243      	movs	r2, #67	; 0x43
 800af88:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800af8a:	4b03      	ldr	r3, [pc, #12]	; (800af98 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800af8c:	4618      	mov	r0, r3
 800af8e:	370c      	adds	r7, #12
 800af90:	46bd      	mov	sp, r7
 800af92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af96:	4770      	bx	lr
 800af98:	20000450 	.word	0x20000450

0800af9c <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800af9c:	b480      	push	{r7}
 800af9e:	b083      	sub	sp, #12
 800afa0:	af00      	add	r7, sp, #0
 800afa2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	2243      	movs	r2, #67	; 0x43
 800afa8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800afaa:	4b03      	ldr	r3, [pc, #12]	; (800afb8 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800afac:	4618      	mov	r0, r3
 800afae:	370c      	adds	r7, #12
 800afb0:	46bd      	mov	sp, r7
 800afb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afb6:	4770      	bx	lr
 800afb8:	200004d8 	.word	0x200004d8

0800afbc <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800afbc:	b480      	push	{r7}
 800afbe:	b083      	sub	sp, #12
 800afc0:	af00      	add	r7, sp, #0
 800afc2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	220a      	movs	r2, #10
 800afc8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800afca:	4b03      	ldr	r3, [pc, #12]	; (800afd8 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800afcc:	4618      	mov	r0, r3
 800afce:	370c      	adds	r7, #12
 800afd0:	46bd      	mov	sp, r7
 800afd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afd6:	4770      	bx	lr
 800afd8:	2000040c 	.word	0x2000040c

0800afdc <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800afdc:	b480      	push	{r7}
 800afde:	b083      	sub	sp, #12
 800afe0:	af00      	add	r7, sp, #0
 800afe2:	6078      	str	r0, [r7, #4]
 800afe4:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800afe6:	683b      	ldr	r3, [r7, #0]
 800afe8:	2b00      	cmp	r3, #0
 800afea:	d101      	bne.n	800aff0 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800afec:	2303      	movs	r3, #3
 800afee:	e004      	b.n	800affa <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	683a      	ldr	r2, [r7, #0]
 800aff4:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 800aff8:	2300      	movs	r3, #0
}
 800affa:	4618      	mov	r0, r3
 800affc:	370c      	adds	r7, #12
 800affe:	46bd      	mov	sp, r7
 800b000:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b004:	4770      	bx	lr

0800b006 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800b006:	b480      	push	{r7}
 800b008:	b087      	sub	sp, #28
 800b00a:	af00      	add	r7, sp, #0
 800b00c:	60f8      	str	r0, [r7, #12]
 800b00e:	60b9      	str	r1, [r7, #8]
 800b010:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800b012:	68fb      	ldr	r3, [r7, #12]
 800b014:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b018:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800b01a:	697b      	ldr	r3, [r7, #20]
 800b01c:	68ba      	ldr	r2, [r7, #8]
 800b01e:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800b022:	697b      	ldr	r3, [r7, #20]
 800b024:	687a      	ldr	r2, [r7, #4]
 800b026:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800b02a:	2300      	movs	r3, #0
}
 800b02c:	4618      	mov	r0, r3
 800b02e:	371c      	adds	r7, #28
 800b030:	46bd      	mov	sp, r7
 800b032:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b036:	4770      	bx	lr

0800b038 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800b038:	b480      	push	{r7}
 800b03a:	b085      	sub	sp, #20
 800b03c:	af00      	add	r7, sp, #0
 800b03e:	6078      	str	r0, [r7, #4]
 800b040:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800b042:	687b      	ldr	r3, [r7, #4]
 800b044:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b048:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800b04a:	68fb      	ldr	r3, [r7, #12]
 800b04c:	683a      	ldr	r2, [r7, #0]
 800b04e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800b052:	2300      	movs	r3, #0
}
 800b054:	4618      	mov	r0, r3
 800b056:	3714      	adds	r7, #20
 800b058:	46bd      	mov	sp, r7
 800b05a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b05e:	4770      	bx	lr

0800b060 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800b060:	b580      	push	{r7, lr}
 800b062:	b084      	sub	sp, #16
 800b064:	af00      	add	r7, sp, #0
 800b066:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b06e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800b070:	687b      	ldr	r3, [r7, #4]
 800b072:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b076:	2b00      	cmp	r3, #0
 800b078:	d101      	bne.n	800b07e <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800b07a:	2303      	movs	r3, #3
 800b07c:	e016      	b.n	800b0ac <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	7c1b      	ldrb	r3, [r3, #16]
 800b082:	2b00      	cmp	r3, #0
 800b084:	d109      	bne.n	800b09a <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800b086:	68fb      	ldr	r3, [r7, #12]
 800b088:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800b08c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b090:	2101      	movs	r1, #1
 800b092:	6878      	ldr	r0, [r7, #4]
 800b094:	f001 fdbc 	bl	800cc10 <USBD_LL_PrepareReceive>
 800b098:	e007      	b.n	800b0aa <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800b09a:	68fb      	ldr	r3, [r7, #12]
 800b09c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800b0a0:	2340      	movs	r3, #64	; 0x40
 800b0a2:	2101      	movs	r1, #1
 800b0a4:	6878      	ldr	r0, [r7, #4]
 800b0a6:	f001 fdb3 	bl	800cc10 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800b0aa:	2300      	movs	r3, #0
}
 800b0ac:	4618      	mov	r0, r3
 800b0ae:	3710      	adds	r7, #16
 800b0b0:	46bd      	mov	sp, r7
 800b0b2:	bd80      	pop	{r7, pc}

0800b0b4 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800b0b4:	b580      	push	{r7, lr}
 800b0b6:	b086      	sub	sp, #24
 800b0b8:	af00      	add	r7, sp, #0
 800b0ba:	60f8      	str	r0, [r7, #12]
 800b0bc:	60b9      	str	r1, [r7, #8]
 800b0be:	4613      	mov	r3, r2
 800b0c0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800b0c2:	68fb      	ldr	r3, [r7, #12]
 800b0c4:	2b00      	cmp	r3, #0
 800b0c6:	d101      	bne.n	800b0cc <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800b0c8:	2303      	movs	r3, #3
 800b0ca:	e025      	b.n	800b118 <USBD_Init+0x64>
  }

  /* Unlink previous class */
  if (pdev->pClass != NULL)
 800b0cc:	68fb      	ldr	r3, [r7, #12]
 800b0ce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b0d2:	2b00      	cmp	r3, #0
 800b0d4:	d003      	beq.n	800b0de <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800b0d6:	68fb      	ldr	r3, [r7, #12]
 800b0d8:	2200      	movs	r2, #0
 800b0da:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  if (pdev->pConfDesc != NULL)
 800b0de:	68fb      	ldr	r3, [r7, #12]
 800b0e0:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 800b0e4:	2b00      	cmp	r3, #0
 800b0e6:	d003      	beq.n	800b0f0 <USBD_Init+0x3c>
  {
    pdev->pConfDesc = NULL;
 800b0e8:	68fb      	ldr	r3, [r7, #12]
 800b0ea:	2200      	movs	r2, #0
 800b0ec:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800b0f0:	68bb      	ldr	r3, [r7, #8]
 800b0f2:	2b00      	cmp	r3, #0
 800b0f4:	d003      	beq.n	800b0fe <USBD_Init+0x4a>
  {
    pdev->pDesc = pdesc;
 800b0f6:	68fb      	ldr	r3, [r7, #12]
 800b0f8:	68ba      	ldr	r2, [r7, #8]
 800b0fa:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b0fe:	68fb      	ldr	r3, [r7, #12]
 800b100:	2201      	movs	r2, #1
 800b102:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800b106:	68fb      	ldr	r3, [r7, #12]
 800b108:	79fa      	ldrb	r2, [r7, #7]
 800b10a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800b10c:	68f8      	ldr	r0, [r7, #12]
 800b10e:	f001 fc29 	bl	800c964 <USBD_LL_Init>
 800b112:	4603      	mov	r3, r0
 800b114:	75fb      	strb	r3, [r7, #23]

  return ret;
 800b116:	7dfb      	ldrb	r3, [r7, #23]
}
 800b118:	4618      	mov	r0, r3
 800b11a:	3718      	adds	r7, #24
 800b11c:	46bd      	mov	sp, r7
 800b11e:	bd80      	pop	{r7, pc}

0800b120 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800b120:	b580      	push	{r7, lr}
 800b122:	b084      	sub	sp, #16
 800b124:	af00      	add	r7, sp, #0
 800b126:	6078      	str	r0, [r7, #4]
 800b128:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800b12a:	2300      	movs	r3, #0
 800b12c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800b12e:	683b      	ldr	r3, [r7, #0]
 800b130:	2b00      	cmp	r3, #0
 800b132:	d101      	bne.n	800b138 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800b134:	2303      	movs	r3, #3
 800b136:	e010      	b.n	800b15a <USBD_RegisterClass+0x3a>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	683a      	ldr	r2, [r7, #0]
 800b13c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  /* Get Device Configuration Descriptor */
#ifdef USE_USB_FS
  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
#else /* USE_USB_HS */
  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b146:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b148:	f107 020e 	add.w	r2, r7, #14
 800b14c:	4610      	mov	r0, r2
 800b14e:	4798      	blx	r3
 800b150:	4602      	mov	r2, r0
 800b152:	687b      	ldr	r3, [r7, #4]
 800b154:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#endif /* USE_USB_FS */


  return USBD_OK;
 800b158:	2300      	movs	r3, #0
}
 800b15a:	4618      	mov	r0, r3
 800b15c:	3710      	adds	r7, #16
 800b15e:	46bd      	mov	sp, r7
 800b160:	bd80      	pop	{r7, pc}

0800b162 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800b162:	b580      	push	{r7, lr}
 800b164:	b082      	sub	sp, #8
 800b166:	af00      	add	r7, sp, #0
 800b168:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800b16a:	6878      	ldr	r0, [r7, #4]
 800b16c:	f001 fc46 	bl	800c9fc <USBD_LL_Start>
 800b170:	4603      	mov	r3, r0
}
 800b172:	4618      	mov	r0, r3
 800b174:	3708      	adds	r7, #8
 800b176:	46bd      	mov	sp, r7
 800b178:	bd80      	pop	{r7, pc}

0800b17a <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800b17a:	b480      	push	{r7}
 800b17c:	b083      	sub	sp, #12
 800b17e:	af00      	add	r7, sp, #0
 800b180:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800b182:	2300      	movs	r3, #0
}
 800b184:	4618      	mov	r0, r3
 800b186:	370c      	adds	r7, #12
 800b188:	46bd      	mov	sp, r7
 800b18a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b18e:	4770      	bx	lr

0800b190 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b190:	b580      	push	{r7, lr}
 800b192:	b084      	sub	sp, #16
 800b194:	af00      	add	r7, sp, #0
 800b196:	6078      	str	r0, [r7, #4]
 800b198:	460b      	mov	r3, r1
 800b19a:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800b19c:	2303      	movs	r3, #3
 800b19e:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b1a6:	2b00      	cmp	r3, #0
 800b1a8:	d009      	beq.n	800b1be <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b1b0:	681b      	ldr	r3, [r3, #0]
 800b1b2:	78fa      	ldrb	r2, [r7, #3]
 800b1b4:	4611      	mov	r1, r2
 800b1b6:	6878      	ldr	r0, [r7, #4]
 800b1b8:	4798      	blx	r3
 800b1ba:	4603      	mov	r3, r0
 800b1bc:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800b1be:	7bfb      	ldrb	r3, [r7, #15]
}
 800b1c0:	4618      	mov	r0, r3
 800b1c2:	3710      	adds	r7, #16
 800b1c4:	46bd      	mov	sp, r7
 800b1c6:	bd80      	pop	{r7, pc}

0800b1c8 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b1c8:	b580      	push	{r7, lr}
 800b1ca:	b082      	sub	sp, #8
 800b1cc:	af00      	add	r7, sp, #0
 800b1ce:	6078      	str	r0, [r7, #4]
 800b1d0:	460b      	mov	r3, r1
 800b1d2:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b1da:	2b00      	cmp	r3, #0
 800b1dc:	d007      	beq.n	800b1ee <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800b1de:	687b      	ldr	r3, [r7, #4]
 800b1e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b1e4:	685b      	ldr	r3, [r3, #4]
 800b1e6:	78fa      	ldrb	r2, [r7, #3]
 800b1e8:	4611      	mov	r1, r2
 800b1ea:	6878      	ldr	r0, [r7, #4]
 800b1ec:	4798      	blx	r3
  }

  return USBD_OK;
 800b1ee:	2300      	movs	r3, #0
}
 800b1f0:	4618      	mov	r0, r3
 800b1f2:	3708      	adds	r7, #8
 800b1f4:	46bd      	mov	sp, r7
 800b1f6:	bd80      	pop	{r7, pc}

0800b1f8 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800b1f8:	b580      	push	{r7, lr}
 800b1fa:	b084      	sub	sp, #16
 800b1fc:	af00      	add	r7, sp, #0
 800b1fe:	6078      	str	r0, [r7, #4]
 800b200:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800b208:	6839      	ldr	r1, [r7, #0]
 800b20a:	4618      	mov	r0, r3
 800b20c:	f000 ff2c 	bl	800c068 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	2201      	movs	r2, #1
 800b214:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800b218:	687b      	ldr	r3, [r7, #4]
 800b21a:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800b21e:	461a      	mov	r2, r3
 800b220:	687b      	ldr	r3, [r7, #4]
 800b222:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800b226:	687b      	ldr	r3, [r7, #4]
 800b228:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800b22c:	f003 031f 	and.w	r3, r3, #31
 800b230:	2b01      	cmp	r3, #1
 800b232:	d00e      	beq.n	800b252 <USBD_LL_SetupStage+0x5a>
 800b234:	2b01      	cmp	r3, #1
 800b236:	d302      	bcc.n	800b23e <USBD_LL_SetupStage+0x46>
 800b238:	2b02      	cmp	r3, #2
 800b23a:	d014      	beq.n	800b266 <USBD_LL_SetupStage+0x6e>
 800b23c:	e01d      	b.n	800b27a <USBD_LL_SetupStage+0x82>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800b23e:	687b      	ldr	r3, [r7, #4]
 800b240:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800b244:	4619      	mov	r1, r3
 800b246:	6878      	ldr	r0, [r7, #4]
 800b248:	f000 fa18 	bl	800b67c <USBD_StdDevReq>
 800b24c:	4603      	mov	r3, r0
 800b24e:	73fb      	strb	r3, [r7, #15]
      break;
 800b250:	e020      	b.n	800b294 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800b252:	687b      	ldr	r3, [r7, #4]
 800b254:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800b258:	4619      	mov	r1, r3
 800b25a:	6878      	ldr	r0, [r7, #4]
 800b25c:	f000 fa7c 	bl	800b758 <USBD_StdItfReq>
 800b260:	4603      	mov	r3, r0
 800b262:	73fb      	strb	r3, [r7, #15]
      break;
 800b264:	e016      	b.n	800b294 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800b266:	687b      	ldr	r3, [r7, #4]
 800b268:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800b26c:	4619      	mov	r1, r3
 800b26e:	6878      	ldr	r0, [r7, #4]
 800b270:	f000 fab8 	bl	800b7e4 <USBD_StdEPReq>
 800b274:	4603      	mov	r3, r0
 800b276:	73fb      	strb	r3, [r7, #15]
      break;
 800b278:	e00c      	b.n	800b294 <USBD_LL_SetupStage+0x9c>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800b280:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800b284:	b2db      	uxtb	r3, r3
 800b286:	4619      	mov	r1, r3
 800b288:	6878      	ldr	r0, [r7, #4]
 800b28a:	f001 fc17 	bl	800cabc <USBD_LL_StallEP>
 800b28e:	4603      	mov	r3, r0
 800b290:	73fb      	strb	r3, [r7, #15]
      break;
 800b292:	bf00      	nop
  }

  return ret;
 800b294:	7bfb      	ldrb	r3, [r7, #15]
}
 800b296:	4618      	mov	r0, r3
 800b298:	3710      	adds	r7, #16
 800b29a:	46bd      	mov	sp, r7
 800b29c:	bd80      	pop	{r7, pc}

0800b29e <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800b29e:	b580      	push	{r7, lr}
 800b2a0:	b086      	sub	sp, #24
 800b2a2:	af00      	add	r7, sp, #0
 800b2a4:	60f8      	str	r0, [r7, #12]
 800b2a6:	460b      	mov	r3, r1
 800b2a8:	607a      	str	r2, [r7, #4]
 800b2aa:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800b2ac:	7afb      	ldrb	r3, [r7, #11]
 800b2ae:	2b00      	cmp	r3, #0
 800b2b0:	d137      	bne.n	800b322 <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 800b2b2:	68fb      	ldr	r3, [r7, #12]
 800b2b4:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800b2b8:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800b2ba:	68fb      	ldr	r3, [r7, #12]
 800b2bc:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800b2c0:	2b03      	cmp	r3, #3
 800b2c2:	d14a      	bne.n	800b35a <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800b2c4:	693b      	ldr	r3, [r7, #16]
 800b2c6:	689a      	ldr	r2, [r3, #8]
 800b2c8:	693b      	ldr	r3, [r7, #16]
 800b2ca:	68db      	ldr	r3, [r3, #12]
 800b2cc:	429a      	cmp	r2, r3
 800b2ce:	d913      	bls.n	800b2f8 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800b2d0:	693b      	ldr	r3, [r7, #16]
 800b2d2:	689a      	ldr	r2, [r3, #8]
 800b2d4:	693b      	ldr	r3, [r7, #16]
 800b2d6:	68db      	ldr	r3, [r3, #12]
 800b2d8:	1ad2      	subs	r2, r2, r3
 800b2da:	693b      	ldr	r3, [r7, #16]
 800b2dc:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800b2de:	693b      	ldr	r3, [r7, #16]
 800b2e0:	68da      	ldr	r2, [r3, #12]
 800b2e2:	693b      	ldr	r3, [r7, #16]
 800b2e4:	689b      	ldr	r3, [r3, #8]
 800b2e6:	4293      	cmp	r3, r2
 800b2e8:	bf28      	it	cs
 800b2ea:	4613      	movcs	r3, r2
 800b2ec:	461a      	mov	r2, r3
 800b2ee:	6879      	ldr	r1, [r7, #4]
 800b2f0:	68f8      	ldr	r0, [r7, #12]
 800b2f2:	f000 ffad 	bl	800c250 <USBD_CtlContinueRx>
 800b2f6:	e030      	b.n	800b35a <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800b2f8:	68fb      	ldr	r3, [r7, #12]
 800b2fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b2fe:	691b      	ldr	r3, [r3, #16]
 800b300:	2b00      	cmp	r3, #0
 800b302:	d00a      	beq.n	800b31a <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800b304:	68fb      	ldr	r3, [r7, #12]
 800b306:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800b30a:	2b03      	cmp	r3, #3
 800b30c:	d105      	bne.n	800b31a <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800b30e:	68fb      	ldr	r3, [r7, #12]
 800b310:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b314:	691b      	ldr	r3, [r3, #16]
 800b316:	68f8      	ldr	r0, [r7, #12]
 800b318:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 800b31a:	68f8      	ldr	r0, [r7, #12]
 800b31c:	f000 ffa9 	bl	800c272 <USBD_CtlSendStatus>
 800b320:	e01b      	b.n	800b35a <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800b322:	68fb      	ldr	r3, [r7, #12]
 800b324:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b328:	699b      	ldr	r3, [r3, #24]
 800b32a:	2b00      	cmp	r3, #0
 800b32c:	d013      	beq.n	800b356 <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800b32e:	68fb      	ldr	r3, [r7, #12]
 800b330:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800b334:	2b03      	cmp	r3, #3
 800b336:	d10e      	bne.n	800b356 <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800b338:	68fb      	ldr	r3, [r7, #12]
 800b33a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b33e:	699b      	ldr	r3, [r3, #24]
 800b340:	7afa      	ldrb	r2, [r7, #11]
 800b342:	4611      	mov	r1, r2
 800b344:	68f8      	ldr	r0, [r7, #12]
 800b346:	4798      	blx	r3
 800b348:	4603      	mov	r3, r0
 800b34a:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 800b34c:	7dfb      	ldrb	r3, [r7, #23]
 800b34e:	2b00      	cmp	r3, #0
 800b350:	d003      	beq.n	800b35a <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 800b352:	7dfb      	ldrb	r3, [r7, #23]
 800b354:	e002      	b.n	800b35c <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800b356:	2303      	movs	r3, #3
 800b358:	e000      	b.n	800b35c <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 800b35a:	2300      	movs	r3, #0
}
 800b35c:	4618      	mov	r0, r3
 800b35e:	3718      	adds	r7, #24
 800b360:	46bd      	mov	sp, r7
 800b362:	bd80      	pop	{r7, pc}

0800b364 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800b364:	b580      	push	{r7, lr}
 800b366:	b086      	sub	sp, #24
 800b368:	af00      	add	r7, sp, #0
 800b36a:	60f8      	str	r0, [r7, #12]
 800b36c:	460b      	mov	r3, r1
 800b36e:	607a      	str	r2, [r7, #4]
 800b370:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800b372:	7afb      	ldrb	r3, [r7, #11]
 800b374:	2b00      	cmp	r3, #0
 800b376:	d16a      	bne.n	800b44e <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 800b378:	68fb      	ldr	r3, [r7, #12]
 800b37a:	3314      	adds	r3, #20
 800b37c:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800b37e:	68fb      	ldr	r3, [r7, #12]
 800b380:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800b384:	2b02      	cmp	r3, #2
 800b386:	d155      	bne.n	800b434 <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 800b388:	693b      	ldr	r3, [r7, #16]
 800b38a:	689a      	ldr	r2, [r3, #8]
 800b38c:	693b      	ldr	r3, [r7, #16]
 800b38e:	68db      	ldr	r3, [r3, #12]
 800b390:	429a      	cmp	r2, r3
 800b392:	d914      	bls.n	800b3be <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800b394:	693b      	ldr	r3, [r7, #16]
 800b396:	689a      	ldr	r2, [r3, #8]
 800b398:	693b      	ldr	r3, [r7, #16]
 800b39a:	68db      	ldr	r3, [r3, #12]
 800b39c:	1ad2      	subs	r2, r2, r3
 800b39e:	693b      	ldr	r3, [r7, #16]
 800b3a0:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800b3a2:	693b      	ldr	r3, [r7, #16]
 800b3a4:	689b      	ldr	r3, [r3, #8]
 800b3a6:	461a      	mov	r2, r3
 800b3a8:	6879      	ldr	r1, [r7, #4]
 800b3aa:	68f8      	ldr	r0, [r7, #12]
 800b3ac:	f000 ff22 	bl	800c1f4 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b3b0:	2300      	movs	r3, #0
 800b3b2:	2200      	movs	r2, #0
 800b3b4:	2100      	movs	r1, #0
 800b3b6:	68f8      	ldr	r0, [r7, #12]
 800b3b8:	f001 fc2a 	bl	800cc10 <USBD_LL_PrepareReceive>
 800b3bc:	e03a      	b.n	800b434 <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800b3be:	693b      	ldr	r3, [r7, #16]
 800b3c0:	68da      	ldr	r2, [r3, #12]
 800b3c2:	693b      	ldr	r3, [r7, #16]
 800b3c4:	689b      	ldr	r3, [r3, #8]
 800b3c6:	429a      	cmp	r2, r3
 800b3c8:	d11c      	bne.n	800b404 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800b3ca:	693b      	ldr	r3, [r7, #16]
 800b3cc:	685a      	ldr	r2, [r3, #4]
 800b3ce:	693b      	ldr	r3, [r7, #16]
 800b3d0:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800b3d2:	429a      	cmp	r2, r3
 800b3d4:	d316      	bcc.n	800b404 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800b3d6:	693b      	ldr	r3, [r7, #16]
 800b3d8:	685a      	ldr	r2, [r3, #4]
 800b3da:	68fb      	ldr	r3, [r7, #12]
 800b3dc:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800b3e0:	429a      	cmp	r2, r3
 800b3e2:	d20f      	bcs.n	800b404 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800b3e4:	2200      	movs	r2, #0
 800b3e6:	2100      	movs	r1, #0
 800b3e8:	68f8      	ldr	r0, [r7, #12]
 800b3ea:	f000 ff03 	bl	800c1f4 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800b3ee:	68fb      	ldr	r3, [r7, #12]
 800b3f0:	2200      	movs	r2, #0
 800b3f2:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b3f6:	2300      	movs	r3, #0
 800b3f8:	2200      	movs	r2, #0
 800b3fa:	2100      	movs	r1, #0
 800b3fc:	68f8      	ldr	r0, [r7, #12]
 800b3fe:	f001 fc07 	bl	800cc10 <USBD_LL_PrepareReceive>
 800b402:	e017      	b.n	800b434 <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800b404:	68fb      	ldr	r3, [r7, #12]
 800b406:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b40a:	68db      	ldr	r3, [r3, #12]
 800b40c:	2b00      	cmp	r3, #0
 800b40e:	d00a      	beq.n	800b426 <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800b410:	68fb      	ldr	r3, [r7, #12]
 800b412:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800b416:	2b03      	cmp	r3, #3
 800b418:	d105      	bne.n	800b426 <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800b41a:	68fb      	ldr	r3, [r7, #12]
 800b41c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b420:	68db      	ldr	r3, [r3, #12]
 800b422:	68f8      	ldr	r0, [r7, #12]
 800b424:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800b426:	2180      	movs	r1, #128	; 0x80
 800b428:	68f8      	ldr	r0, [r7, #12]
 800b42a:	f001 fb47 	bl	800cabc <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800b42e:	68f8      	ldr	r0, [r7, #12]
 800b430:	f000 ff32 	bl	800c298 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800b434:	68fb      	ldr	r3, [r7, #12]
 800b436:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800b43a:	2b01      	cmp	r3, #1
 800b43c:	d123      	bne.n	800b486 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800b43e:	68f8      	ldr	r0, [r7, #12]
 800b440:	f7ff fe9b 	bl	800b17a <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800b444:	68fb      	ldr	r3, [r7, #12]
 800b446:	2200      	movs	r2, #0
 800b448:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800b44c:	e01b      	b.n	800b486 <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800b44e:	68fb      	ldr	r3, [r7, #12]
 800b450:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b454:	695b      	ldr	r3, [r3, #20]
 800b456:	2b00      	cmp	r3, #0
 800b458:	d013      	beq.n	800b482 <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800b45a:	68fb      	ldr	r3, [r7, #12]
 800b45c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800b460:	2b03      	cmp	r3, #3
 800b462:	d10e      	bne.n	800b482 <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800b464:	68fb      	ldr	r3, [r7, #12]
 800b466:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b46a:	695b      	ldr	r3, [r3, #20]
 800b46c:	7afa      	ldrb	r2, [r7, #11]
 800b46e:	4611      	mov	r1, r2
 800b470:	68f8      	ldr	r0, [r7, #12]
 800b472:	4798      	blx	r3
 800b474:	4603      	mov	r3, r0
 800b476:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 800b478:	7dfb      	ldrb	r3, [r7, #23]
 800b47a:	2b00      	cmp	r3, #0
 800b47c:	d003      	beq.n	800b486 <USBD_LL_DataInStage+0x122>
    {
      return ret;
 800b47e:	7dfb      	ldrb	r3, [r7, #23]
 800b480:	e002      	b.n	800b488 <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800b482:	2303      	movs	r3, #3
 800b484:	e000      	b.n	800b488 <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 800b486:	2300      	movs	r3, #0
}
 800b488:	4618      	mov	r0, r3
 800b48a:	3718      	adds	r7, #24
 800b48c:	46bd      	mov	sp, r7
 800b48e:	bd80      	pop	{r7, pc}

0800b490 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800b490:	b580      	push	{r7, lr}
 800b492:	b082      	sub	sp, #8
 800b494:	af00      	add	r7, sp, #0
 800b496:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	2201      	movs	r2, #1
 800b49c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800b4a0:	687b      	ldr	r3, [r7, #4]
 800b4a2:	2200      	movs	r2, #0
 800b4a4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800b4a8:	687b      	ldr	r3, [r7, #4]
 800b4aa:	2200      	movs	r2, #0
 800b4ac:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800b4ae:	687b      	ldr	r3, [r7, #4]
 800b4b0:	2200      	movs	r2, #0
 800b4b2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 800b4b6:	687b      	ldr	r3, [r7, #4]
 800b4b8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b4bc:	2b00      	cmp	r3, #0
 800b4be:	d009      	beq.n	800b4d4 <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800b4c0:	687b      	ldr	r3, [r7, #4]
 800b4c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b4c6:	685b      	ldr	r3, [r3, #4]
 800b4c8:	687a      	ldr	r2, [r7, #4]
 800b4ca:	6852      	ldr	r2, [r2, #4]
 800b4cc:	b2d2      	uxtb	r2, r2
 800b4ce:	4611      	mov	r1, r2
 800b4d0:	6878      	ldr	r0, [r7, #4]
 800b4d2:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b4d4:	2340      	movs	r3, #64	; 0x40
 800b4d6:	2200      	movs	r2, #0
 800b4d8:	2100      	movs	r1, #0
 800b4da:	6878      	ldr	r0, [r7, #4]
 800b4dc:	f001 faa9 	bl	800ca32 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800b4e0:	687b      	ldr	r3, [r7, #4]
 800b4e2:	2201      	movs	r2, #1
 800b4e4:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	2240      	movs	r2, #64	; 0x40
 800b4ec:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b4f0:	2340      	movs	r3, #64	; 0x40
 800b4f2:	2200      	movs	r2, #0
 800b4f4:	2180      	movs	r1, #128	; 0x80
 800b4f6:	6878      	ldr	r0, [r7, #4]
 800b4f8:	f001 fa9b 	bl	800ca32 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	2201      	movs	r2, #1
 800b500:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800b502:	687b      	ldr	r3, [r7, #4]
 800b504:	2240      	movs	r2, #64	; 0x40
 800b506:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800b508:	2300      	movs	r3, #0
}
 800b50a:	4618      	mov	r0, r3
 800b50c:	3708      	adds	r7, #8
 800b50e:	46bd      	mov	sp, r7
 800b510:	bd80      	pop	{r7, pc}

0800b512 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800b512:	b480      	push	{r7}
 800b514:	b083      	sub	sp, #12
 800b516:	af00      	add	r7, sp, #0
 800b518:	6078      	str	r0, [r7, #4]
 800b51a:	460b      	mov	r3, r1
 800b51c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800b51e:	687b      	ldr	r3, [r7, #4]
 800b520:	78fa      	ldrb	r2, [r7, #3]
 800b522:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800b524:	2300      	movs	r3, #0
}
 800b526:	4618      	mov	r0, r3
 800b528:	370c      	adds	r7, #12
 800b52a:	46bd      	mov	sp, r7
 800b52c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b530:	4770      	bx	lr

0800b532 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800b532:	b480      	push	{r7}
 800b534:	b083      	sub	sp, #12
 800b536:	af00      	add	r7, sp, #0
 800b538:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800b53a:	687b      	ldr	r3, [r7, #4]
 800b53c:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 800b540:	687b      	ldr	r3, [r7, #4]
 800b542:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800b546:	687b      	ldr	r3, [r7, #4]
 800b548:	2204      	movs	r2, #4
 800b54a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800b54e:	2300      	movs	r3, #0
}
 800b550:	4618      	mov	r0, r3
 800b552:	370c      	adds	r7, #12
 800b554:	46bd      	mov	sp, r7
 800b556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b55a:	4770      	bx	lr

0800b55c <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800b55c:	b480      	push	{r7}
 800b55e:	b083      	sub	sp, #12
 800b560:	af00      	add	r7, sp, #0
 800b562:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800b564:	687b      	ldr	r3, [r7, #4]
 800b566:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b56a:	2b04      	cmp	r3, #4
 800b56c:	d105      	bne.n	800b57a <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800b56e:	687b      	ldr	r3, [r7, #4]
 800b570:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800b57a:	2300      	movs	r3, #0
}
 800b57c:	4618      	mov	r0, r3
 800b57e:	370c      	adds	r7, #12
 800b580:	46bd      	mov	sp, r7
 800b582:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b586:	4770      	bx	lr

0800b588 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800b588:	b580      	push	{r7, lr}
 800b58a:	b082      	sub	sp, #8
 800b58c:	af00      	add	r7, sp, #0
 800b58e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b596:	2b03      	cmp	r3, #3
 800b598:	d10b      	bne.n	800b5b2 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800b59a:	687b      	ldr	r3, [r7, #4]
 800b59c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b5a0:	69db      	ldr	r3, [r3, #28]
 800b5a2:	2b00      	cmp	r3, #0
 800b5a4:	d005      	beq.n	800b5b2 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800b5a6:	687b      	ldr	r3, [r7, #4]
 800b5a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b5ac:	69db      	ldr	r3, [r3, #28]
 800b5ae:	6878      	ldr	r0, [r7, #4]
 800b5b0:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800b5b2:	2300      	movs	r3, #0
}
 800b5b4:	4618      	mov	r0, r3
 800b5b6:	3708      	adds	r7, #8
 800b5b8:	46bd      	mov	sp, r7
 800b5ba:	bd80      	pop	{r7, pc}

0800b5bc <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800b5bc:	b480      	push	{r7}
 800b5be:	b083      	sub	sp, #12
 800b5c0:	af00      	add	r7, sp, #0
 800b5c2:	6078      	str	r0, [r7, #4]
 800b5c4:	460b      	mov	r3, r1
 800b5c6:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800b5c8:	2300      	movs	r3, #0
}
 800b5ca:	4618      	mov	r0, r3
 800b5cc:	370c      	adds	r7, #12
 800b5ce:	46bd      	mov	sp, r7
 800b5d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5d4:	4770      	bx	lr

0800b5d6 <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800b5d6:	b480      	push	{r7}
 800b5d8:	b083      	sub	sp, #12
 800b5da:	af00      	add	r7, sp, #0
 800b5dc:	6078      	str	r0, [r7, #4]
 800b5de:	460b      	mov	r3, r1
 800b5e0:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800b5e2:	2300      	movs	r3, #0
}
 800b5e4:	4618      	mov	r0, r3
 800b5e6:	370c      	adds	r7, #12
 800b5e8:	46bd      	mov	sp, r7
 800b5ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5ee:	4770      	bx	lr

0800b5f0 <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800b5f0:	b480      	push	{r7}
 800b5f2:	b083      	sub	sp, #12
 800b5f4:	af00      	add	r7, sp, #0
 800b5f6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800b5f8:	2300      	movs	r3, #0
}
 800b5fa:	4618      	mov	r0, r3
 800b5fc:	370c      	adds	r7, #12
 800b5fe:	46bd      	mov	sp, r7
 800b600:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b604:	4770      	bx	lr

0800b606 <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800b606:	b580      	push	{r7, lr}
 800b608:	b082      	sub	sp, #8
 800b60a:	af00      	add	r7, sp, #0
 800b60c:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b60e:	687b      	ldr	r3, [r7, #4]
 800b610:	2201      	movs	r2, #1
 800b612:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 800b616:	687b      	ldr	r3, [r7, #4]
 800b618:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b61c:	2b00      	cmp	r3, #0
 800b61e:	d009      	beq.n	800b634 <USBD_LL_DevDisconnected+0x2e>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800b620:	687b      	ldr	r3, [r7, #4]
 800b622:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b626:	685b      	ldr	r3, [r3, #4]
 800b628:	687a      	ldr	r2, [r7, #4]
 800b62a:	6852      	ldr	r2, [r2, #4]
 800b62c:	b2d2      	uxtb	r2, r2
 800b62e:	4611      	mov	r1, r2
 800b630:	6878      	ldr	r0, [r7, #4]
 800b632:	4798      	blx	r3
  }

  return USBD_OK;
 800b634:	2300      	movs	r3, #0
}
 800b636:	4618      	mov	r0, r3
 800b638:	3708      	adds	r7, #8
 800b63a:	46bd      	mov	sp, r7
 800b63c:	bd80      	pop	{r7, pc}

0800b63e <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800b63e:	b480      	push	{r7}
 800b640:	b087      	sub	sp, #28
 800b642:	af00      	add	r7, sp, #0
 800b644:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800b646:	687b      	ldr	r3, [r7, #4]
 800b648:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800b64a:	697b      	ldr	r3, [r7, #20]
 800b64c:	781b      	ldrb	r3, [r3, #0]
 800b64e:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800b650:	697b      	ldr	r3, [r7, #20]
 800b652:	3301      	adds	r3, #1
 800b654:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800b656:	697b      	ldr	r3, [r7, #20]
 800b658:	781b      	ldrb	r3, [r3, #0]
 800b65a:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800b65c:	8a3b      	ldrh	r3, [r7, #16]
 800b65e:	021b      	lsls	r3, r3, #8
 800b660:	b21a      	sxth	r2, r3
 800b662:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800b666:	4313      	orrs	r3, r2
 800b668:	b21b      	sxth	r3, r3
 800b66a:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800b66c:	89fb      	ldrh	r3, [r7, #14]
}
 800b66e:	4618      	mov	r0, r3
 800b670:	371c      	adds	r7, #28
 800b672:	46bd      	mov	sp, r7
 800b674:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b678:	4770      	bx	lr
	...

0800b67c <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b67c:	b580      	push	{r7, lr}
 800b67e:	b084      	sub	sp, #16
 800b680:	af00      	add	r7, sp, #0
 800b682:	6078      	str	r0, [r7, #4]
 800b684:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b686:	2300      	movs	r3, #0
 800b688:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b68a:	683b      	ldr	r3, [r7, #0]
 800b68c:	781b      	ldrb	r3, [r3, #0]
 800b68e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b692:	2b20      	cmp	r3, #32
 800b694:	d004      	beq.n	800b6a0 <USBD_StdDevReq+0x24>
 800b696:	2b40      	cmp	r3, #64	; 0x40
 800b698:	d002      	beq.n	800b6a0 <USBD_StdDevReq+0x24>
 800b69a:	2b00      	cmp	r3, #0
 800b69c:	d00a      	beq.n	800b6b4 <USBD_StdDevReq+0x38>
 800b69e:	e050      	b.n	800b742 <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800b6a0:	687b      	ldr	r3, [r7, #4]
 800b6a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b6a6:	689b      	ldr	r3, [r3, #8]
 800b6a8:	6839      	ldr	r1, [r7, #0]
 800b6aa:	6878      	ldr	r0, [r7, #4]
 800b6ac:	4798      	blx	r3
 800b6ae:	4603      	mov	r3, r0
 800b6b0:	73fb      	strb	r3, [r7, #15]
    break;
 800b6b2:	e04b      	b.n	800b74c <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800b6b4:	683b      	ldr	r3, [r7, #0]
 800b6b6:	785b      	ldrb	r3, [r3, #1]
 800b6b8:	2b09      	cmp	r3, #9
 800b6ba:	d83c      	bhi.n	800b736 <USBD_StdDevReq+0xba>
 800b6bc:	a201      	add	r2, pc, #4	; (adr r2, 800b6c4 <USBD_StdDevReq+0x48>)
 800b6be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b6c2:	bf00      	nop
 800b6c4:	0800b719 	.word	0x0800b719
 800b6c8:	0800b72d 	.word	0x0800b72d
 800b6cc:	0800b737 	.word	0x0800b737
 800b6d0:	0800b723 	.word	0x0800b723
 800b6d4:	0800b737 	.word	0x0800b737
 800b6d8:	0800b6f7 	.word	0x0800b6f7
 800b6dc:	0800b6ed 	.word	0x0800b6ed
 800b6e0:	0800b737 	.word	0x0800b737
 800b6e4:	0800b70f 	.word	0x0800b70f
 800b6e8:	0800b701 	.word	0x0800b701
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 800b6ec:	6839      	ldr	r1, [r7, #0]
 800b6ee:	6878      	ldr	r0, [r7, #4]
 800b6f0:	f000 f9ce 	bl	800ba90 <USBD_GetDescriptor>
      break;
 800b6f4:	e024      	b.n	800b740 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 800b6f6:	6839      	ldr	r1, [r7, #0]
 800b6f8:	6878      	ldr	r0, [r7, #4]
 800b6fa:	f000 fb33 	bl	800bd64 <USBD_SetAddress>
      break;
 800b6fe:	e01f      	b.n	800b740 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 800b700:	6839      	ldr	r1, [r7, #0]
 800b702:	6878      	ldr	r0, [r7, #4]
 800b704:	f000 fb70 	bl	800bde8 <USBD_SetConfig>
 800b708:	4603      	mov	r3, r0
 800b70a:	73fb      	strb	r3, [r7, #15]
      break;
 800b70c:	e018      	b.n	800b740 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 800b70e:	6839      	ldr	r1, [r7, #0]
 800b710:	6878      	ldr	r0, [r7, #4]
 800b712:	f000 fc0d 	bl	800bf30 <USBD_GetConfig>
      break;
 800b716:	e013      	b.n	800b740 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 800b718:	6839      	ldr	r1, [r7, #0]
 800b71a:	6878      	ldr	r0, [r7, #4]
 800b71c:	f000 fc3c 	bl	800bf98 <USBD_GetStatus>
      break;
 800b720:	e00e      	b.n	800b740 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 800b722:	6839      	ldr	r1, [r7, #0]
 800b724:	6878      	ldr	r0, [r7, #4]
 800b726:	f000 fc6a 	bl	800bffe <USBD_SetFeature>
      break;
 800b72a:	e009      	b.n	800b740 <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 800b72c:	6839      	ldr	r1, [r7, #0]
 800b72e:	6878      	ldr	r0, [r7, #4]
 800b730:	f000 fc79 	bl	800c026 <USBD_ClrFeature>
      break;
 800b734:	e004      	b.n	800b740 <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 800b736:	6839      	ldr	r1, [r7, #0]
 800b738:	6878      	ldr	r0, [r7, #4]
 800b73a:	f000 fccf 	bl	800c0dc <USBD_CtlError>
      break;
 800b73e:	bf00      	nop
    }
    break;
 800b740:	e004      	b.n	800b74c <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 800b742:	6839      	ldr	r1, [r7, #0]
 800b744:	6878      	ldr	r0, [r7, #4]
 800b746:	f000 fcc9 	bl	800c0dc <USBD_CtlError>
    break;
 800b74a:	bf00      	nop
  }

  return ret;
 800b74c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b74e:	4618      	mov	r0, r3
 800b750:	3710      	adds	r7, #16
 800b752:	46bd      	mov	sp, r7
 800b754:	bd80      	pop	{r7, pc}
 800b756:	bf00      	nop

0800b758 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b758:	b580      	push	{r7, lr}
 800b75a:	b084      	sub	sp, #16
 800b75c:	af00      	add	r7, sp, #0
 800b75e:	6078      	str	r0, [r7, #4]
 800b760:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b762:	2300      	movs	r3, #0
 800b764:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b766:	683b      	ldr	r3, [r7, #0]
 800b768:	781b      	ldrb	r3, [r3, #0]
 800b76a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b76e:	2b20      	cmp	r3, #32
 800b770:	d003      	beq.n	800b77a <USBD_StdItfReq+0x22>
 800b772:	2b40      	cmp	r3, #64	; 0x40
 800b774:	d001      	beq.n	800b77a <USBD_StdItfReq+0x22>
 800b776:	2b00      	cmp	r3, #0
 800b778:	d12a      	bne.n	800b7d0 <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 800b77a:	687b      	ldr	r3, [r7, #4]
 800b77c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b780:	3b01      	subs	r3, #1
 800b782:	2b02      	cmp	r3, #2
 800b784:	d81d      	bhi.n	800b7c2 <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800b786:	683b      	ldr	r3, [r7, #0]
 800b788:	889b      	ldrh	r3, [r3, #4]
 800b78a:	b2db      	uxtb	r3, r3
 800b78c:	2b01      	cmp	r3, #1
 800b78e:	d813      	bhi.n	800b7b8 <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800b790:	687b      	ldr	r3, [r7, #4]
 800b792:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b796:	689b      	ldr	r3, [r3, #8]
 800b798:	6839      	ldr	r1, [r7, #0]
 800b79a:	6878      	ldr	r0, [r7, #4]
 800b79c:	4798      	blx	r3
 800b79e:	4603      	mov	r3, r0
 800b7a0:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 800b7a2:	683b      	ldr	r3, [r7, #0]
 800b7a4:	88db      	ldrh	r3, [r3, #6]
 800b7a6:	2b00      	cmp	r3, #0
 800b7a8:	d110      	bne.n	800b7cc <USBD_StdItfReq+0x74>
 800b7aa:	7bfb      	ldrb	r3, [r7, #15]
 800b7ac:	2b00      	cmp	r3, #0
 800b7ae:	d10d      	bne.n	800b7cc <USBD_StdItfReq+0x74>
        {
          (void)USBD_CtlSendStatus(pdev);
 800b7b0:	6878      	ldr	r0, [r7, #4]
 800b7b2:	f000 fd5e 	bl	800c272 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 800b7b6:	e009      	b.n	800b7cc <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 800b7b8:	6839      	ldr	r1, [r7, #0]
 800b7ba:	6878      	ldr	r0, [r7, #4]
 800b7bc:	f000 fc8e 	bl	800c0dc <USBD_CtlError>
      break;
 800b7c0:	e004      	b.n	800b7cc <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 800b7c2:	6839      	ldr	r1, [r7, #0]
 800b7c4:	6878      	ldr	r0, [r7, #4]
 800b7c6:	f000 fc89 	bl	800c0dc <USBD_CtlError>
      break;
 800b7ca:	e000      	b.n	800b7ce <USBD_StdItfReq+0x76>
      break;
 800b7cc:	bf00      	nop
    }
    break;
 800b7ce:	e004      	b.n	800b7da <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 800b7d0:	6839      	ldr	r1, [r7, #0]
 800b7d2:	6878      	ldr	r0, [r7, #4]
 800b7d4:	f000 fc82 	bl	800c0dc <USBD_CtlError>
    break;
 800b7d8:	bf00      	nop
  }

  return ret;
 800b7da:	7bfb      	ldrb	r3, [r7, #15]
}
 800b7dc:	4618      	mov	r0, r3
 800b7de:	3710      	adds	r7, #16
 800b7e0:	46bd      	mov	sp, r7
 800b7e2:	bd80      	pop	{r7, pc}

0800b7e4 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b7e4:	b580      	push	{r7, lr}
 800b7e6:	b084      	sub	sp, #16
 800b7e8:	af00      	add	r7, sp, #0
 800b7ea:	6078      	str	r0, [r7, #4]
 800b7ec:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800b7ee:	2300      	movs	r3, #0
 800b7f0:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800b7f2:	683b      	ldr	r3, [r7, #0]
 800b7f4:	889b      	ldrh	r3, [r3, #4]
 800b7f6:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b7f8:	683b      	ldr	r3, [r7, #0]
 800b7fa:	781b      	ldrb	r3, [r3, #0]
 800b7fc:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b800:	2b20      	cmp	r3, #32
 800b802:	d004      	beq.n	800b80e <USBD_StdEPReq+0x2a>
 800b804:	2b40      	cmp	r3, #64	; 0x40
 800b806:	d002      	beq.n	800b80e <USBD_StdEPReq+0x2a>
 800b808:	2b00      	cmp	r3, #0
 800b80a:	d00a      	beq.n	800b822 <USBD_StdEPReq+0x3e>
 800b80c:	e135      	b.n	800ba7a <USBD_StdEPReq+0x296>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800b80e:	687b      	ldr	r3, [r7, #4]
 800b810:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b814:	689b      	ldr	r3, [r3, #8]
 800b816:	6839      	ldr	r1, [r7, #0]
 800b818:	6878      	ldr	r0, [r7, #4]
 800b81a:	4798      	blx	r3
 800b81c:	4603      	mov	r3, r0
 800b81e:	73fb      	strb	r3, [r7, #15]
    break;
 800b820:	e130      	b.n	800ba84 <USBD_StdEPReq+0x2a0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800b822:	683b      	ldr	r3, [r7, #0]
 800b824:	785b      	ldrb	r3, [r3, #1]
 800b826:	2b01      	cmp	r3, #1
 800b828:	d03e      	beq.n	800b8a8 <USBD_StdEPReq+0xc4>
 800b82a:	2b03      	cmp	r3, #3
 800b82c:	d002      	beq.n	800b834 <USBD_StdEPReq+0x50>
 800b82e:	2b00      	cmp	r3, #0
 800b830:	d077      	beq.n	800b922 <USBD_StdEPReq+0x13e>
 800b832:	e11c      	b.n	800ba6e <USBD_StdEPReq+0x28a>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 800b834:	687b      	ldr	r3, [r7, #4]
 800b836:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b83a:	2b02      	cmp	r3, #2
 800b83c:	d002      	beq.n	800b844 <USBD_StdEPReq+0x60>
 800b83e:	2b03      	cmp	r3, #3
 800b840:	d015      	beq.n	800b86e <USBD_StdEPReq+0x8a>
 800b842:	e02b      	b.n	800b89c <USBD_StdEPReq+0xb8>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b844:	7bbb      	ldrb	r3, [r7, #14]
 800b846:	2b00      	cmp	r3, #0
 800b848:	d00c      	beq.n	800b864 <USBD_StdEPReq+0x80>
 800b84a:	7bbb      	ldrb	r3, [r7, #14]
 800b84c:	2b80      	cmp	r3, #128	; 0x80
 800b84e:	d009      	beq.n	800b864 <USBD_StdEPReq+0x80>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 800b850:	7bbb      	ldrb	r3, [r7, #14]
 800b852:	4619      	mov	r1, r3
 800b854:	6878      	ldr	r0, [r7, #4]
 800b856:	f001 f931 	bl	800cabc <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800b85a:	2180      	movs	r1, #128	; 0x80
 800b85c:	6878      	ldr	r0, [r7, #4]
 800b85e:	f001 f92d 	bl	800cabc <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800b862:	e020      	b.n	800b8a6 <USBD_StdEPReq+0xc2>
          USBD_CtlError(pdev, req);
 800b864:	6839      	ldr	r1, [r7, #0]
 800b866:	6878      	ldr	r0, [r7, #4]
 800b868:	f000 fc38 	bl	800c0dc <USBD_CtlError>
        break;
 800b86c:	e01b      	b.n	800b8a6 <USBD_StdEPReq+0xc2>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800b86e:	683b      	ldr	r3, [r7, #0]
 800b870:	885b      	ldrh	r3, [r3, #2]
 800b872:	2b00      	cmp	r3, #0
 800b874:	d10e      	bne.n	800b894 <USBD_StdEPReq+0xb0>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800b876:	7bbb      	ldrb	r3, [r7, #14]
 800b878:	2b00      	cmp	r3, #0
 800b87a:	d00b      	beq.n	800b894 <USBD_StdEPReq+0xb0>
 800b87c:	7bbb      	ldrb	r3, [r7, #14]
 800b87e:	2b80      	cmp	r3, #128	; 0x80
 800b880:	d008      	beq.n	800b894 <USBD_StdEPReq+0xb0>
 800b882:	683b      	ldr	r3, [r7, #0]
 800b884:	88db      	ldrh	r3, [r3, #6]
 800b886:	2b00      	cmp	r3, #0
 800b888:	d104      	bne.n	800b894 <USBD_StdEPReq+0xb0>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 800b88a:	7bbb      	ldrb	r3, [r7, #14]
 800b88c:	4619      	mov	r1, r3
 800b88e:	6878      	ldr	r0, [r7, #4]
 800b890:	f001 f914 	bl	800cabc <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 800b894:	6878      	ldr	r0, [r7, #4]
 800b896:	f000 fcec 	bl	800c272 <USBD_CtlSendStatus>

        break;
 800b89a:	e004      	b.n	800b8a6 <USBD_StdEPReq+0xc2>

      default:
        USBD_CtlError(pdev, req);
 800b89c:	6839      	ldr	r1, [r7, #0]
 800b89e:	6878      	ldr	r0, [r7, #4]
 800b8a0:	f000 fc1c 	bl	800c0dc <USBD_CtlError>
        break;
 800b8a4:	bf00      	nop
      }
      break;
 800b8a6:	e0e7      	b.n	800ba78 <USBD_StdEPReq+0x294>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 800b8a8:	687b      	ldr	r3, [r7, #4]
 800b8aa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b8ae:	2b02      	cmp	r3, #2
 800b8b0:	d002      	beq.n	800b8b8 <USBD_StdEPReq+0xd4>
 800b8b2:	2b03      	cmp	r3, #3
 800b8b4:	d015      	beq.n	800b8e2 <USBD_StdEPReq+0xfe>
 800b8b6:	e02d      	b.n	800b914 <USBD_StdEPReq+0x130>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b8b8:	7bbb      	ldrb	r3, [r7, #14]
 800b8ba:	2b00      	cmp	r3, #0
 800b8bc:	d00c      	beq.n	800b8d8 <USBD_StdEPReq+0xf4>
 800b8be:	7bbb      	ldrb	r3, [r7, #14]
 800b8c0:	2b80      	cmp	r3, #128	; 0x80
 800b8c2:	d009      	beq.n	800b8d8 <USBD_StdEPReq+0xf4>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 800b8c4:	7bbb      	ldrb	r3, [r7, #14]
 800b8c6:	4619      	mov	r1, r3
 800b8c8:	6878      	ldr	r0, [r7, #4]
 800b8ca:	f001 f8f7 	bl	800cabc <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800b8ce:	2180      	movs	r1, #128	; 0x80
 800b8d0:	6878      	ldr	r0, [r7, #4]
 800b8d2:	f001 f8f3 	bl	800cabc <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800b8d6:	e023      	b.n	800b920 <USBD_StdEPReq+0x13c>
          USBD_CtlError(pdev, req);
 800b8d8:	6839      	ldr	r1, [r7, #0]
 800b8da:	6878      	ldr	r0, [r7, #4]
 800b8dc:	f000 fbfe 	bl	800c0dc <USBD_CtlError>
        break;
 800b8e0:	e01e      	b.n	800b920 <USBD_StdEPReq+0x13c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800b8e2:	683b      	ldr	r3, [r7, #0]
 800b8e4:	885b      	ldrh	r3, [r3, #2]
 800b8e6:	2b00      	cmp	r3, #0
 800b8e8:	d119      	bne.n	800b91e <USBD_StdEPReq+0x13a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 800b8ea:	7bbb      	ldrb	r3, [r7, #14]
 800b8ec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b8f0:	2b00      	cmp	r3, #0
 800b8f2:	d004      	beq.n	800b8fe <USBD_StdEPReq+0x11a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800b8f4:	7bbb      	ldrb	r3, [r7, #14]
 800b8f6:	4619      	mov	r1, r3
 800b8f8:	6878      	ldr	r0, [r7, #4]
 800b8fa:	f001 f8fe 	bl	800cafa <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 800b8fe:	6878      	ldr	r0, [r7, #4]
 800b900:	f000 fcb7 	bl	800c272 <USBD_CtlSendStatus>
          (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800b904:	687b      	ldr	r3, [r7, #4]
 800b906:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b90a:	689b      	ldr	r3, [r3, #8]
 800b90c:	6839      	ldr	r1, [r7, #0]
 800b90e:	6878      	ldr	r0, [r7, #4]
 800b910:	4798      	blx	r3
        }
        break;
 800b912:	e004      	b.n	800b91e <USBD_StdEPReq+0x13a>

      default:
        USBD_CtlError(pdev, req);
 800b914:	6839      	ldr	r1, [r7, #0]
 800b916:	6878      	ldr	r0, [r7, #4]
 800b918:	f000 fbe0 	bl	800c0dc <USBD_CtlError>
        break;
 800b91c:	e000      	b.n	800b920 <USBD_StdEPReq+0x13c>
        break;
 800b91e:	bf00      	nop
      }
      break;
 800b920:	e0aa      	b.n	800ba78 <USBD_StdEPReq+0x294>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 800b922:	687b      	ldr	r3, [r7, #4]
 800b924:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b928:	2b02      	cmp	r3, #2
 800b92a:	d002      	beq.n	800b932 <USBD_StdEPReq+0x14e>
 800b92c:	2b03      	cmp	r3, #3
 800b92e:	d032      	beq.n	800b996 <USBD_StdEPReq+0x1b2>
 800b930:	e097      	b.n	800ba62 <USBD_StdEPReq+0x27e>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b932:	7bbb      	ldrb	r3, [r7, #14]
 800b934:	2b00      	cmp	r3, #0
 800b936:	d007      	beq.n	800b948 <USBD_StdEPReq+0x164>
 800b938:	7bbb      	ldrb	r3, [r7, #14]
 800b93a:	2b80      	cmp	r3, #128	; 0x80
 800b93c:	d004      	beq.n	800b948 <USBD_StdEPReq+0x164>
        {
          USBD_CtlError(pdev, req);
 800b93e:	6839      	ldr	r1, [r7, #0]
 800b940:	6878      	ldr	r0, [r7, #4]
 800b942:	f000 fbcb 	bl	800c0dc <USBD_CtlError>
          break;
 800b946:	e091      	b.n	800ba6c <USBD_StdEPReq+0x288>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b948:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b94c:	2b00      	cmp	r3, #0
 800b94e:	da0b      	bge.n	800b968 <USBD_StdEPReq+0x184>
 800b950:	7bbb      	ldrb	r3, [r7, #14]
 800b952:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b956:	4613      	mov	r3, r2
 800b958:	009b      	lsls	r3, r3, #2
 800b95a:	4413      	add	r3, r2
 800b95c:	009b      	lsls	r3, r3, #2
 800b95e:	3310      	adds	r3, #16
 800b960:	687a      	ldr	r2, [r7, #4]
 800b962:	4413      	add	r3, r2
 800b964:	3304      	adds	r3, #4
 800b966:	e00b      	b.n	800b980 <USBD_StdEPReq+0x19c>
              &pdev->ep_out[ep_addr & 0x7FU];
 800b968:	7bbb      	ldrb	r3, [r7, #14]
 800b96a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b96e:	4613      	mov	r3, r2
 800b970:	009b      	lsls	r3, r3, #2
 800b972:	4413      	add	r3, r2
 800b974:	009b      	lsls	r3, r3, #2
 800b976:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800b97a:	687a      	ldr	r2, [r7, #4]
 800b97c:	4413      	add	r3, r2
 800b97e:	3304      	adds	r3, #4
 800b980:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 800b982:	68bb      	ldr	r3, [r7, #8]
 800b984:	2200      	movs	r2, #0
 800b986:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800b988:	68bb      	ldr	r3, [r7, #8]
 800b98a:	2202      	movs	r2, #2
 800b98c:	4619      	mov	r1, r3
 800b98e:	6878      	ldr	r0, [r7, #4]
 800b990:	f000 fc15 	bl	800c1be <USBD_CtlSendData>
        break;
 800b994:	e06a      	b.n	800ba6c <USBD_StdEPReq+0x288>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 800b996:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b99a:	2b00      	cmp	r3, #0
 800b99c:	da11      	bge.n	800b9c2 <USBD_StdEPReq+0x1de>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800b99e:	7bbb      	ldrb	r3, [r7, #14]
 800b9a0:	f003 020f 	and.w	r2, r3, #15
 800b9a4:	6879      	ldr	r1, [r7, #4]
 800b9a6:	4613      	mov	r3, r2
 800b9a8:	009b      	lsls	r3, r3, #2
 800b9aa:	4413      	add	r3, r2
 800b9ac:	009b      	lsls	r3, r3, #2
 800b9ae:	440b      	add	r3, r1
 800b9b0:	3324      	adds	r3, #36	; 0x24
 800b9b2:	881b      	ldrh	r3, [r3, #0]
 800b9b4:	2b00      	cmp	r3, #0
 800b9b6:	d117      	bne.n	800b9e8 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 800b9b8:	6839      	ldr	r1, [r7, #0]
 800b9ba:	6878      	ldr	r0, [r7, #4]
 800b9bc:	f000 fb8e 	bl	800c0dc <USBD_CtlError>
            break;
 800b9c0:	e054      	b.n	800ba6c <USBD_StdEPReq+0x288>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800b9c2:	7bbb      	ldrb	r3, [r7, #14]
 800b9c4:	f003 020f 	and.w	r2, r3, #15
 800b9c8:	6879      	ldr	r1, [r7, #4]
 800b9ca:	4613      	mov	r3, r2
 800b9cc:	009b      	lsls	r3, r3, #2
 800b9ce:	4413      	add	r3, r2
 800b9d0:	009b      	lsls	r3, r3, #2
 800b9d2:	440b      	add	r3, r1
 800b9d4:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800b9d8:	881b      	ldrh	r3, [r3, #0]
 800b9da:	2b00      	cmp	r3, #0
 800b9dc:	d104      	bne.n	800b9e8 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 800b9de:	6839      	ldr	r1, [r7, #0]
 800b9e0:	6878      	ldr	r0, [r7, #4]
 800b9e2:	f000 fb7b 	bl	800c0dc <USBD_CtlError>
            break;
 800b9e6:	e041      	b.n	800ba6c <USBD_StdEPReq+0x288>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b9e8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b9ec:	2b00      	cmp	r3, #0
 800b9ee:	da0b      	bge.n	800ba08 <USBD_StdEPReq+0x224>
 800b9f0:	7bbb      	ldrb	r3, [r7, #14]
 800b9f2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b9f6:	4613      	mov	r3, r2
 800b9f8:	009b      	lsls	r3, r3, #2
 800b9fa:	4413      	add	r3, r2
 800b9fc:	009b      	lsls	r3, r3, #2
 800b9fe:	3310      	adds	r3, #16
 800ba00:	687a      	ldr	r2, [r7, #4]
 800ba02:	4413      	add	r3, r2
 800ba04:	3304      	adds	r3, #4
 800ba06:	e00b      	b.n	800ba20 <USBD_StdEPReq+0x23c>
              &pdev->ep_out[ep_addr & 0x7FU];
 800ba08:	7bbb      	ldrb	r3, [r7, #14]
 800ba0a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ba0e:	4613      	mov	r3, r2
 800ba10:	009b      	lsls	r3, r3, #2
 800ba12:	4413      	add	r3, r2
 800ba14:	009b      	lsls	r3, r3, #2
 800ba16:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800ba1a:	687a      	ldr	r2, [r7, #4]
 800ba1c:	4413      	add	r3, r2
 800ba1e:	3304      	adds	r3, #4
 800ba20:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800ba22:	7bbb      	ldrb	r3, [r7, #14]
 800ba24:	2b00      	cmp	r3, #0
 800ba26:	d002      	beq.n	800ba2e <USBD_StdEPReq+0x24a>
 800ba28:	7bbb      	ldrb	r3, [r7, #14]
 800ba2a:	2b80      	cmp	r3, #128	; 0x80
 800ba2c:	d103      	bne.n	800ba36 <USBD_StdEPReq+0x252>
          {
            pep->status = 0x0000U;
 800ba2e:	68bb      	ldr	r3, [r7, #8]
 800ba30:	2200      	movs	r2, #0
 800ba32:	601a      	str	r2, [r3, #0]
 800ba34:	e00e      	b.n	800ba54 <USBD_StdEPReq+0x270>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800ba36:	7bbb      	ldrb	r3, [r7, #14]
 800ba38:	4619      	mov	r1, r3
 800ba3a:	6878      	ldr	r0, [r7, #4]
 800ba3c:	f001 f87c 	bl	800cb38 <USBD_LL_IsStallEP>
 800ba40:	4603      	mov	r3, r0
 800ba42:	2b00      	cmp	r3, #0
 800ba44:	d003      	beq.n	800ba4e <USBD_StdEPReq+0x26a>
          {
            pep->status = 0x0001U;
 800ba46:	68bb      	ldr	r3, [r7, #8]
 800ba48:	2201      	movs	r2, #1
 800ba4a:	601a      	str	r2, [r3, #0]
 800ba4c:	e002      	b.n	800ba54 <USBD_StdEPReq+0x270>
          }
          else
          {
            pep->status = 0x0000U;
 800ba4e:	68bb      	ldr	r3, [r7, #8]
 800ba50:	2200      	movs	r2, #0
 800ba52:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800ba54:	68bb      	ldr	r3, [r7, #8]
 800ba56:	2202      	movs	r2, #2
 800ba58:	4619      	mov	r1, r3
 800ba5a:	6878      	ldr	r0, [r7, #4]
 800ba5c:	f000 fbaf 	bl	800c1be <USBD_CtlSendData>
          break;
 800ba60:	e004      	b.n	800ba6c <USBD_StdEPReq+0x288>

      default:
        USBD_CtlError(pdev, req);
 800ba62:	6839      	ldr	r1, [r7, #0]
 800ba64:	6878      	ldr	r0, [r7, #4]
 800ba66:	f000 fb39 	bl	800c0dc <USBD_CtlError>
        break;
 800ba6a:	bf00      	nop
      }
      break;
 800ba6c:	e004      	b.n	800ba78 <USBD_StdEPReq+0x294>

    default:
      USBD_CtlError(pdev, req);
 800ba6e:	6839      	ldr	r1, [r7, #0]
 800ba70:	6878      	ldr	r0, [r7, #4]
 800ba72:	f000 fb33 	bl	800c0dc <USBD_CtlError>
      break;
 800ba76:	bf00      	nop
    }
    break;
 800ba78:	e004      	b.n	800ba84 <USBD_StdEPReq+0x2a0>

  default:
    USBD_CtlError(pdev, req);
 800ba7a:	6839      	ldr	r1, [r7, #0]
 800ba7c:	6878      	ldr	r0, [r7, #4]
 800ba7e:	f000 fb2d 	bl	800c0dc <USBD_CtlError>
    break;
 800ba82:	bf00      	nop
  }

  return ret;
 800ba84:	7bfb      	ldrb	r3, [r7, #15]
}
 800ba86:	4618      	mov	r0, r3
 800ba88:	3710      	adds	r7, #16
 800ba8a:	46bd      	mov	sp, r7
 800ba8c:	bd80      	pop	{r7, pc}
	...

0800ba90 <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ba90:	b580      	push	{r7, lr}
 800ba92:	b084      	sub	sp, #16
 800ba94:	af00      	add	r7, sp, #0
 800ba96:	6078      	str	r0, [r7, #4]
 800ba98:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800ba9a:	2300      	movs	r3, #0
 800ba9c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800ba9e:	2300      	movs	r3, #0
 800baa0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800baa2:	2300      	movs	r3, #0
 800baa4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800baa6:	683b      	ldr	r3, [r7, #0]
 800baa8:	885b      	ldrh	r3, [r3, #2]
 800baaa:	0a1b      	lsrs	r3, r3, #8
 800baac:	b29b      	uxth	r3, r3
 800baae:	3b01      	subs	r3, #1
 800bab0:	2b06      	cmp	r3, #6
 800bab2:	f200 8128 	bhi.w	800bd06 <USBD_GetDescriptor+0x276>
 800bab6:	a201      	add	r2, pc, #4	; (adr r2, 800babc <USBD_GetDescriptor+0x2c>)
 800bab8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800babc:	0800bad9 	.word	0x0800bad9
 800bac0:	0800baf1 	.word	0x0800baf1
 800bac4:	0800bb31 	.word	0x0800bb31
 800bac8:	0800bd07 	.word	0x0800bd07
 800bacc:	0800bd07 	.word	0x0800bd07
 800bad0:	0800bca7 	.word	0x0800bca7
 800bad4:	0800bcd3 	.word	0x0800bcd3
      err++;
    }
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800bad8:	687b      	ldr	r3, [r7, #4]
 800bada:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bade:	681b      	ldr	r3, [r3, #0]
 800bae0:	687a      	ldr	r2, [r7, #4]
 800bae2:	7c12      	ldrb	r2, [r2, #16]
 800bae4:	f107 0108 	add.w	r1, r7, #8
 800bae8:	4610      	mov	r0, r2
 800baea:	4798      	blx	r3
 800baec:	60f8      	str	r0, [r7, #12]
    break;
 800baee:	e112      	b.n	800bd16 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800baf0:	687b      	ldr	r3, [r7, #4]
 800baf2:	7c1b      	ldrb	r3, [r3, #16]
 800baf4:	2b00      	cmp	r3, #0
 800baf6:	d10d      	bne.n	800bb14 <USBD_GetDescriptor+0x84>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800baf8:	687b      	ldr	r3, [r7, #4]
 800bafa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bafe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bb00:	f107 0208 	add.w	r2, r7, #8
 800bb04:	4610      	mov	r0, r2
 800bb06:	4798      	blx	r3
 800bb08:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800bb0a:	68fb      	ldr	r3, [r7, #12]
 800bb0c:	3301      	adds	r3, #1
 800bb0e:	2202      	movs	r2, #2
 800bb10:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 800bb12:	e100      	b.n	800bd16 <USBD_GetDescriptor+0x286>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800bb14:	687b      	ldr	r3, [r7, #4]
 800bb16:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bb1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb1c:	f107 0208 	add.w	r2, r7, #8
 800bb20:	4610      	mov	r0, r2
 800bb22:	4798      	blx	r3
 800bb24:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800bb26:	68fb      	ldr	r3, [r7, #12]
 800bb28:	3301      	adds	r3, #1
 800bb2a:	2202      	movs	r2, #2
 800bb2c:	701a      	strb	r2, [r3, #0]
    break;
 800bb2e:	e0f2      	b.n	800bd16 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 800bb30:	683b      	ldr	r3, [r7, #0]
 800bb32:	885b      	ldrh	r3, [r3, #2]
 800bb34:	b2db      	uxtb	r3, r3
 800bb36:	2b05      	cmp	r3, #5
 800bb38:	f200 80ac 	bhi.w	800bc94 <USBD_GetDescriptor+0x204>
 800bb3c:	a201      	add	r2, pc, #4	; (adr r2, 800bb44 <USBD_GetDescriptor+0xb4>)
 800bb3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bb42:	bf00      	nop
 800bb44:	0800bb5d 	.word	0x0800bb5d
 800bb48:	0800bb91 	.word	0x0800bb91
 800bb4c:	0800bbc5 	.word	0x0800bbc5
 800bb50:	0800bbf9 	.word	0x0800bbf9
 800bb54:	0800bc2d 	.word	0x0800bc2d
 800bb58:	0800bc61 	.word	0x0800bc61
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800bb5c:	687b      	ldr	r3, [r7, #4]
 800bb5e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bb62:	685b      	ldr	r3, [r3, #4]
 800bb64:	2b00      	cmp	r3, #0
 800bb66:	d00b      	beq.n	800bb80 <USBD_GetDescriptor+0xf0>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800bb68:	687b      	ldr	r3, [r7, #4]
 800bb6a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bb6e:	685b      	ldr	r3, [r3, #4]
 800bb70:	687a      	ldr	r2, [r7, #4]
 800bb72:	7c12      	ldrb	r2, [r2, #16]
 800bb74:	f107 0108 	add.w	r1, r7, #8
 800bb78:	4610      	mov	r0, r2
 800bb7a:	4798      	blx	r3
 800bb7c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800bb7e:	e091      	b.n	800bca4 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800bb80:	6839      	ldr	r1, [r7, #0]
 800bb82:	6878      	ldr	r0, [r7, #4]
 800bb84:	f000 faaa 	bl	800c0dc <USBD_CtlError>
        err++;
 800bb88:	7afb      	ldrb	r3, [r7, #11]
 800bb8a:	3301      	adds	r3, #1
 800bb8c:	72fb      	strb	r3, [r7, #11]
      break;
 800bb8e:	e089      	b.n	800bca4 <USBD_GetDescriptor+0x214>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800bb90:	687b      	ldr	r3, [r7, #4]
 800bb92:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bb96:	689b      	ldr	r3, [r3, #8]
 800bb98:	2b00      	cmp	r3, #0
 800bb9a:	d00b      	beq.n	800bbb4 <USBD_GetDescriptor+0x124>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800bb9c:	687b      	ldr	r3, [r7, #4]
 800bb9e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bba2:	689b      	ldr	r3, [r3, #8]
 800bba4:	687a      	ldr	r2, [r7, #4]
 800bba6:	7c12      	ldrb	r2, [r2, #16]
 800bba8:	f107 0108 	add.w	r1, r7, #8
 800bbac:	4610      	mov	r0, r2
 800bbae:	4798      	blx	r3
 800bbb0:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800bbb2:	e077      	b.n	800bca4 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800bbb4:	6839      	ldr	r1, [r7, #0]
 800bbb6:	6878      	ldr	r0, [r7, #4]
 800bbb8:	f000 fa90 	bl	800c0dc <USBD_CtlError>
        err++;
 800bbbc:	7afb      	ldrb	r3, [r7, #11]
 800bbbe:	3301      	adds	r3, #1
 800bbc0:	72fb      	strb	r3, [r7, #11]
      break;
 800bbc2:	e06f      	b.n	800bca4 <USBD_GetDescriptor+0x214>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800bbc4:	687b      	ldr	r3, [r7, #4]
 800bbc6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bbca:	68db      	ldr	r3, [r3, #12]
 800bbcc:	2b00      	cmp	r3, #0
 800bbce:	d00b      	beq.n	800bbe8 <USBD_GetDescriptor+0x158>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800bbd0:	687b      	ldr	r3, [r7, #4]
 800bbd2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bbd6:	68db      	ldr	r3, [r3, #12]
 800bbd8:	687a      	ldr	r2, [r7, #4]
 800bbda:	7c12      	ldrb	r2, [r2, #16]
 800bbdc:	f107 0108 	add.w	r1, r7, #8
 800bbe0:	4610      	mov	r0, r2
 800bbe2:	4798      	blx	r3
 800bbe4:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800bbe6:	e05d      	b.n	800bca4 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800bbe8:	6839      	ldr	r1, [r7, #0]
 800bbea:	6878      	ldr	r0, [r7, #4]
 800bbec:	f000 fa76 	bl	800c0dc <USBD_CtlError>
        err++;
 800bbf0:	7afb      	ldrb	r3, [r7, #11]
 800bbf2:	3301      	adds	r3, #1
 800bbf4:	72fb      	strb	r3, [r7, #11]
      break;
 800bbf6:	e055      	b.n	800bca4 <USBD_GetDescriptor+0x214>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800bbf8:	687b      	ldr	r3, [r7, #4]
 800bbfa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bbfe:	691b      	ldr	r3, [r3, #16]
 800bc00:	2b00      	cmp	r3, #0
 800bc02:	d00b      	beq.n	800bc1c <USBD_GetDescriptor+0x18c>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800bc04:	687b      	ldr	r3, [r7, #4]
 800bc06:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bc0a:	691b      	ldr	r3, [r3, #16]
 800bc0c:	687a      	ldr	r2, [r7, #4]
 800bc0e:	7c12      	ldrb	r2, [r2, #16]
 800bc10:	f107 0108 	add.w	r1, r7, #8
 800bc14:	4610      	mov	r0, r2
 800bc16:	4798      	blx	r3
 800bc18:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800bc1a:	e043      	b.n	800bca4 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800bc1c:	6839      	ldr	r1, [r7, #0]
 800bc1e:	6878      	ldr	r0, [r7, #4]
 800bc20:	f000 fa5c 	bl	800c0dc <USBD_CtlError>
        err++;
 800bc24:	7afb      	ldrb	r3, [r7, #11]
 800bc26:	3301      	adds	r3, #1
 800bc28:	72fb      	strb	r3, [r7, #11]
      break;
 800bc2a:	e03b      	b.n	800bca4 <USBD_GetDescriptor+0x214>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800bc2c:	687b      	ldr	r3, [r7, #4]
 800bc2e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bc32:	695b      	ldr	r3, [r3, #20]
 800bc34:	2b00      	cmp	r3, #0
 800bc36:	d00b      	beq.n	800bc50 <USBD_GetDescriptor+0x1c0>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800bc38:	687b      	ldr	r3, [r7, #4]
 800bc3a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bc3e:	695b      	ldr	r3, [r3, #20]
 800bc40:	687a      	ldr	r2, [r7, #4]
 800bc42:	7c12      	ldrb	r2, [r2, #16]
 800bc44:	f107 0108 	add.w	r1, r7, #8
 800bc48:	4610      	mov	r0, r2
 800bc4a:	4798      	blx	r3
 800bc4c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800bc4e:	e029      	b.n	800bca4 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800bc50:	6839      	ldr	r1, [r7, #0]
 800bc52:	6878      	ldr	r0, [r7, #4]
 800bc54:	f000 fa42 	bl	800c0dc <USBD_CtlError>
        err++;
 800bc58:	7afb      	ldrb	r3, [r7, #11]
 800bc5a:	3301      	adds	r3, #1
 800bc5c:	72fb      	strb	r3, [r7, #11]
      break;
 800bc5e:	e021      	b.n	800bca4 <USBD_GetDescriptor+0x214>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800bc60:	687b      	ldr	r3, [r7, #4]
 800bc62:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bc66:	699b      	ldr	r3, [r3, #24]
 800bc68:	2b00      	cmp	r3, #0
 800bc6a:	d00b      	beq.n	800bc84 <USBD_GetDescriptor+0x1f4>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800bc6c:	687b      	ldr	r3, [r7, #4]
 800bc6e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bc72:	699b      	ldr	r3, [r3, #24]
 800bc74:	687a      	ldr	r2, [r7, #4]
 800bc76:	7c12      	ldrb	r2, [r2, #16]
 800bc78:	f107 0108 	add.w	r1, r7, #8
 800bc7c:	4610      	mov	r0, r2
 800bc7e:	4798      	blx	r3
 800bc80:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800bc82:	e00f      	b.n	800bca4 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800bc84:	6839      	ldr	r1, [r7, #0]
 800bc86:	6878      	ldr	r0, [r7, #4]
 800bc88:	f000 fa28 	bl	800c0dc <USBD_CtlError>
        err++;
 800bc8c:	7afb      	ldrb	r3, [r7, #11]
 800bc8e:	3301      	adds	r3, #1
 800bc90:	72fb      	strb	r3, [r7, #11]
      break;
 800bc92:	e007      	b.n	800bca4 <USBD_GetDescriptor+0x214>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 800bc94:	6839      	ldr	r1, [r7, #0]
 800bc96:	6878      	ldr	r0, [r7, #4]
 800bc98:	f000 fa20 	bl	800c0dc <USBD_CtlError>
      err++;
 800bc9c:	7afb      	ldrb	r3, [r7, #11]
 800bc9e:	3301      	adds	r3, #1
 800bca0:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 800bca2:	bf00      	nop
    }
    break;
 800bca4:	e037      	b.n	800bd16 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bca6:	687b      	ldr	r3, [r7, #4]
 800bca8:	7c1b      	ldrb	r3, [r3, #16]
 800bcaa:	2b00      	cmp	r3, #0
 800bcac:	d109      	bne.n	800bcc2 <USBD_GetDescriptor+0x232>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800bcae:	687b      	ldr	r3, [r7, #4]
 800bcb0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bcb4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bcb6:	f107 0208 	add.w	r2, r7, #8
 800bcba:	4610      	mov	r0, r2
 800bcbc:	4798      	blx	r3
 800bcbe:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 800bcc0:	e029      	b.n	800bd16 <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 800bcc2:	6839      	ldr	r1, [r7, #0]
 800bcc4:	6878      	ldr	r0, [r7, #4]
 800bcc6:	f000 fa09 	bl	800c0dc <USBD_CtlError>
      err++;
 800bcca:	7afb      	ldrb	r3, [r7, #11]
 800bccc:	3301      	adds	r3, #1
 800bcce:	72fb      	strb	r3, [r7, #11]
    break;
 800bcd0:	e021      	b.n	800bd16 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bcd2:	687b      	ldr	r3, [r7, #4]
 800bcd4:	7c1b      	ldrb	r3, [r3, #16]
 800bcd6:	2b00      	cmp	r3, #0
 800bcd8:	d10d      	bne.n	800bcf6 <USBD_GetDescriptor+0x266>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800bcda:	687b      	ldr	r3, [r7, #4]
 800bcdc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bce0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bce2:	f107 0208 	add.w	r2, r7, #8
 800bce6:	4610      	mov	r0, r2
 800bce8:	4798      	blx	r3
 800bcea:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800bcec:	68fb      	ldr	r3, [r7, #12]
 800bcee:	3301      	adds	r3, #1
 800bcf0:	2207      	movs	r2, #7
 800bcf2:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 800bcf4:	e00f      	b.n	800bd16 <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 800bcf6:	6839      	ldr	r1, [r7, #0]
 800bcf8:	6878      	ldr	r0, [r7, #4]
 800bcfa:	f000 f9ef 	bl	800c0dc <USBD_CtlError>
      err++;
 800bcfe:	7afb      	ldrb	r3, [r7, #11]
 800bd00:	3301      	adds	r3, #1
 800bd02:	72fb      	strb	r3, [r7, #11]
    break;
 800bd04:	e007      	b.n	800bd16 <USBD_GetDescriptor+0x286>

  default:
    USBD_CtlError(pdev, req);
 800bd06:	6839      	ldr	r1, [r7, #0]
 800bd08:	6878      	ldr	r0, [r7, #4]
 800bd0a:	f000 f9e7 	bl	800c0dc <USBD_CtlError>
    err++;
 800bd0e:	7afb      	ldrb	r3, [r7, #11]
 800bd10:	3301      	adds	r3, #1
 800bd12:	72fb      	strb	r3, [r7, #11]
    break;
 800bd14:	bf00      	nop
  }

  if (err != 0U)
 800bd16:	7afb      	ldrb	r3, [r7, #11]
 800bd18:	2b00      	cmp	r3, #0
 800bd1a:	d11e      	bne.n	800bd5a <USBD_GetDescriptor+0x2ca>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 800bd1c:	683b      	ldr	r3, [r7, #0]
 800bd1e:	88db      	ldrh	r3, [r3, #6]
 800bd20:	2b00      	cmp	r3, #0
 800bd22:	d016      	beq.n	800bd52 <USBD_GetDescriptor+0x2c2>
    {
      if (len != 0U)
 800bd24:	893b      	ldrh	r3, [r7, #8]
 800bd26:	2b00      	cmp	r3, #0
 800bd28:	d00e      	beq.n	800bd48 <USBD_GetDescriptor+0x2b8>
      {
        len = MIN(len, req->wLength);
 800bd2a:	683b      	ldr	r3, [r7, #0]
 800bd2c:	88da      	ldrh	r2, [r3, #6]
 800bd2e:	893b      	ldrh	r3, [r7, #8]
 800bd30:	4293      	cmp	r3, r2
 800bd32:	bf28      	it	cs
 800bd34:	4613      	movcs	r3, r2
 800bd36:	b29b      	uxth	r3, r3
 800bd38:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 800bd3a:	893b      	ldrh	r3, [r7, #8]
 800bd3c:	461a      	mov	r2, r3
 800bd3e:	68f9      	ldr	r1, [r7, #12]
 800bd40:	6878      	ldr	r0, [r7, #4]
 800bd42:	f000 fa3c 	bl	800c1be <USBD_CtlSendData>
 800bd46:	e009      	b.n	800bd5c <USBD_GetDescriptor+0x2cc>
      }
      else
      {
        USBD_CtlError(pdev, req);
 800bd48:	6839      	ldr	r1, [r7, #0]
 800bd4a:	6878      	ldr	r0, [r7, #4]
 800bd4c:	f000 f9c6 	bl	800c0dc <USBD_CtlError>
 800bd50:	e004      	b.n	800bd5c <USBD_GetDescriptor+0x2cc>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 800bd52:	6878      	ldr	r0, [r7, #4]
 800bd54:	f000 fa8d 	bl	800c272 <USBD_CtlSendStatus>
 800bd58:	e000      	b.n	800bd5c <USBD_GetDescriptor+0x2cc>
    return;
 800bd5a:	bf00      	nop
    }
  }
}
 800bd5c:	3710      	adds	r7, #16
 800bd5e:	46bd      	mov	sp, r7
 800bd60:	bd80      	pop	{r7, pc}
 800bd62:	bf00      	nop

0800bd64 <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bd64:	b580      	push	{r7, lr}
 800bd66:	b084      	sub	sp, #16
 800bd68:	af00      	add	r7, sp, #0
 800bd6a:	6078      	str	r0, [r7, #4]
 800bd6c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800bd6e:	683b      	ldr	r3, [r7, #0]
 800bd70:	889b      	ldrh	r3, [r3, #4]
 800bd72:	2b00      	cmp	r3, #0
 800bd74:	d130      	bne.n	800bdd8 <USBD_SetAddress+0x74>
 800bd76:	683b      	ldr	r3, [r7, #0]
 800bd78:	88db      	ldrh	r3, [r3, #6]
 800bd7a:	2b00      	cmp	r3, #0
 800bd7c:	d12c      	bne.n	800bdd8 <USBD_SetAddress+0x74>
 800bd7e:	683b      	ldr	r3, [r7, #0]
 800bd80:	885b      	ldrh	r3, [r3, #2]
 800bd82:	2b7f      	cmp	r3, #127	; 0x7f
 800bd84:	d828      	bhi.n	800bdd8 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800bd86:	683b      	ldr	r3, [r7, #0]
 800bd88:	885b      	ldrh	r3, [r3, #2]
 800bd8a:	b2db      	uxtb	r3, r3
 800bd8c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bd90:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bd92:	687b      	ldr	r3, [r7, #4]
 800bd94:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bd98:	2b03      	cmp	r3, #3
 800bd9a:	d104      	bne.n	800bda6 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800bd9c:	6839      	ldr	r1, [r7, #0]
 800bd9e:	6878      	ldr	r0, [r7, #4]
 800bda0:	f000 f99c 	bl	800c0dc <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bda4:	e01c      	b.n	800bde0 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800bda6:	687b      	ldr	r3, [r7, #4]
 800bda8:	7bfa      	ldrb	r2, [r7, #15]
 800bdaa:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800bdae:	7bfb      	ldrb	r3, [r7, #15]
 800bdb0:	4619      	mov	r1, r3
 800bdb2:	6878      	ldr	r0, [r7, #4]
 800bdb4:	f000 feec 	bl	800cb90 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800bdb8:	6878      	ldr	r0, [r7, #4]
 800bdba:	f000 fa5a 	bl	800c272 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800bdbe:	7bfb      	ldrb	r3, [r7, #15]
 800bdc0:	2b00      	cmp	r3, #0
 800bdc2:	d004      	beq.n	800bdce <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800bdc4:	687b      	ldr	r3, [r7, #4]
 800bdc6:	2202      	movs	r2, #2
 800bdc8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bdcc:	e008      	b.n	800bde0 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800bdce:	687b      	ldr	r3, [r7, #4]
 800bdd0:	2201      	movs	r2, #1
 800bdd2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bdd6:	e003      	b.n	800bde0 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800bdd8:	6839      	ldr	r1, [r7, #0]
 800bdda:	6878      	ldr	r0, [r7, #4]
 800bddc:	f000 f97e 	bl	800c0dc <USBD_CtlError>
  }
}
 800bde0:	bf00      	nop
 800bde2:	3710      	adds	r7, #16
 800bde4:	46bd      	mov	sp, r7
 800bde6:	bd80      	pop	{r7, pc}

0800bde8 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bde8:	b580      	push	{r7, lr}
 800bdea:	b084      	sub	sp, #16
 800bdec:	af00      	add	r7, sp, #0
 800bdee:	6078      	str	r0, [r7, #4]
 800bdf0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800bdf2:	2300      	movs	r3, #0
 800bdf4:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800bdf6:	683b      	ldr	r3, [r7, #0]
 800bdf8:	885b      	ldrh	r3, [r3, #2]
 800bdfa:	b2da      	uxtb	r2, r3
 800bdfc:	4b4b      	ldr	r3, [pc, #300]	; (800bf2c <USBD_SetConfig+0x144>)
 800bdfe:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800be00:	4b4a      	ldr	r3, [pc, #296]	; (800bf2c <USBD_SetConfig+0x144>)
 800be02:	781b      	ldrb	r3, [r3, #0]
 800be04:	2b01      	cmp	r3, #1
 800be06:	d905      	bls.n	800be14 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800be08:	6839      	ldr	r1, [r7, #0]
 800be0a:	6878      	ldr	r0, [r7, #4]
 800be0c:	f000 f966 	bl	800c0dc <USBD_CtlError>
    return USBD_FAIL;
 800be10:	2303      	movs	r3, #3
 800be12:	e087      	b.n	800bf24 <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 800be14:	687b      	ldr	r3, [r7, #4]
 800be16:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800be1a:	2b02      	cmp	r3, #2
 800be1c:	d002      	beq.n	800be24 <USBD_SetConfig+0x3c>
 800be1e:	2b03      	cmp	r3, #3
 800be20:	d025      	beq.n	800be6e <USBD_SetConfig+0x86>
 800be22:	e071      	b.n	800bf08 <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 800be24:	4b41      	ldr	r3, [pc, #260]	; (800bf2c <USBD_SetConfig+0x144>)
 800be26:	781b      	ldrb	r3, [r3, #0]
 800be28:	2b00      	cmp	r3, #0
 800be2a:	d01c      	beq.n	800be66 <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 800be2c:	4b3f      	ldr	r3, [pc, #252]	; (800bf2c <USBD_SetConfig+0x144>)
 800be2e:	781b      	ldrb	r3, [r3, #0]
 800be30:	461a      	mov	r2, r3
 800be32:	687b      	ldr	r3, [r7, #4]
 800be34:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 800be36:	4b3d      	ldr	r3, [pc, #244]	; (800bf2c <USBD_SetConfig+0x144>)
 800be38:	781b      	ldrb	r3, [r3, #0]
 800be3a:	4619      	mov	r1, r3
 800be3c:	6878      	ldr	r0, [r7, #4]
 800be3e:	f7ff f9a7 	bl	800b190 <USBD_SetClassConfig>
 800be42:	4603      	mov	r3, r0
 800be44:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 800be46:	7bfb      	ldrb	r3, [r7, #15]
 800be48:	2b00      	cmp	r3, #0
 800be4a:	d004      	beq.n	800be56 <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 800be4c:	6839      	ldr	r1, [r7, #0]
 800be4e:	6878      	ldr	r0, [r7, #4]
 800be50:	f000 f944 	bl	800c0dc <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 800be54:	e065      	b.n	800bf22 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 800be56:	6878      	ldr	r0, [r7, #4]
 800be58:	f000 fa0b 	bl	800c272 <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 800be5c:	687b      	ldr	r3, [r7, #4]
 800be5e:	2203      	movs	r2, #3
 800be60:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 800be64:	e05d      	b.n	800bf22 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 800be66:	6878      	ldr	r0, [r7, #4]
 800be68:	f000 fa03 	bl	800c272 <USBD_CtlSendStatus>
    break;
 800be6c:	e059      	b.n	800bf22 <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 800be6e:	4b2f      	ldr	r3, [pc, #188]	; (800bf2c <USBD_SetConfig+0x144>)
 800be70:	781b      	ldrb	r3, [r3, #0]
 800be72:	2b00      	cmp	r3, #0
 800be74:	d112      	bne.n	800be9c <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 800be76:	687b      	ldr	r3, [r7, #4]
 800be78:	2202      	movs	r2, #2
 800be7a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 800be7e:	4b2b      	ldr	r3, [pc, #172]	; (800bf2c <USBD_SetConfig+0x144>)
 800be80:	781b      	ldrb	r3, [r3, #0]
 800be82:	461a      	mov	r2, r3
 800be84:	687b      	ldr	r3, [r7, #4]
 800be86:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800be88:	4b28      	ldr	r3, [pc, #160]	; (800bf2c <USBD_SetConfig+0x144>)
 800be8a:	781b      	ldrb	r3, [r3, #0]
 800be8c:	4619      	mov	r1, r3
 800be8e:	6878      	ldr	r0, [r7, #4]
 800be90:	f7ff f99a 	bl	800b1c8 <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 800be94:	6878      	ldr	r0, [r7, #4]
 800be96:	f000 f9ec 	bl	800c272 <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 800be9a:	e042      	b.n	800bf22 <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 800be9c:	4b23      	ldr	r3, [pc, #140]	; (800bf2c <USBD_SetConfig+0x144>)
 800be9e:	781b      	ldrb	r3, [r3, #0]
 800bea0:	461a      	mov	r2, r3
 800bea2:	687b      	ldr	r3, [r7, #4]
 800bea4:	685b      	ldr	r3, [r3, #4]
 800bea6:	429a      	cmp	r2, r3
 800bea8:	d02a      	beq.n	800bf00 <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800beaa:	687b      	ldr	r3, [r7, #4]
 800beac:	685b      	ldr	r3, [r3, #4]
 800beae:	b2db      	uxtb	r3, r3
 800beb0:	4619      	mov	r1, r3
 800beb2:	6878      	ldr	r0, [r7, #4]
 800beb4:	f7ff f988 	bl	800b1c8 <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 800beb8:	4b1c      	ldr	r3, [pc, #112]	; (800bf2c <USBD_SetConfig+0x144>)
 800beba:	781b      	ldrb	r3, [r3, #0]
 800bebc:	461a      	mov	r2, r3
 800bebe:	687b      	ldr	r3, [r7, #4]
 800bec0:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 800bec2:	4b1a      	ldr	r3, [pc, #104]	; (800bf2c <USBD_SetConfig+0x144>)
 800bec4:	781b      	ldrb	r3, [r3, #0]
 800bec6:	4619      	mov	r1, r3
 800bec8:	6878      	ldr	r0, [r7, #4]
 800beca:	f7ff f961 	bl	800b190 <USBD_SetClassConfig>
 800bece:	4603      	mov	r3, r0
 800bed0:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 800bed2:	7bfb      	ldrb	r3, [r7, #15]
 800bed4:	2b00      	cmp	r3, #0
 800bed6:	d00f      	beq.n	800bef8 <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 800bed8:	6839      	ldr	r1, [r7, #0]
 800beda:	6878      	ldr	r0, [r7, #4]
 800bedc:	f000 f8fe 	bl	800c0dc <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800bee0:	687b      	ldr	r3, [r7, #4]
 800bee2:	685b      	ldr	r3, [r3, #4]
 800bee4:	b2db      	uxtb	r3, r3
 800bee6:	4619      	mov	r1, r3
 800bee8:	6878      	ldr	r0, [r7, #4]
 800beea:	f7ff f96d 	bl	800b1c8 <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800beee:	687b      	ldr	r3, [r7, #4]
 800bef0:	2202      	movs	r2, #2
 800bef2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 800bef6:	e014      	b.n	800bf22 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 800bef8:	6878      	ldr	r0, [r7, #4]
 800befa:	f000 f9ba 	bl	800c272 <USBD_CtlSendStatus>
    break;
 800befe:	e010      	b.n	800bf22 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 800bf00:	6878      	ldr	r0, [r7, #4]
 800bf02:	f000 f9b6 	bl	800c272 <USBD_CtlSendStatus>
    break;
 800bf06:	e00c      	b.n	800bf22 <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 800bf08:	6839      	ldr	r1, [r7, #0]
 800bf0a:	6878      	ldr	r0, [r7, #4]
 800bf0c:	f000 f8e6 	bl	800c0dc <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 800bf10:	4b06      	ldr	r3, [pc, #24]	; (800bf2c <USBD_SetConfig+0x144>)
 800bf12:	781b      	ldrb	r3, [r3, #0]
 800bf14:	4619      	mov	r1, r3
 800bf16:	6878      	ldr	r0, [r7, #4]
 800bf18:	f7ff f956 	bl	800b1c8 <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 800bf1c:	2303      	movs	r3, #3
 800bf1e:	73fb      	strb	r3, [r7, #15]
    break;
 800bf20:	bf00      	nop
  }

  return ret;
 800bf22:	7bfb      	ldrb	r3, [r7, #15]
}
 800bf24:	4618      	mov	r0, r3
 800bf26:	3710      	adds	r7, #16
 800bf28:	46bd      	mov	sp, r7
 800bf2a:	bd80      	pop	{r7, pc}
 800bf2c:	20000668 	.word	0x20000668

0800bf30 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bf30:	b580      	push	{r7, lr}
 800bf32:	b082      	sub	sp, #8
 800bf34:	af00      	add	r7, sp, #0
 800bf36:	6078      	str	r0, [r7, #4]
 800bf38:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800bf3a:	683b      	ldr	r3, [r7, #0]
 800bf3c:	88db      	ldrh	r3, [r3, #6]
 800bf3e:	2b01      	cmp	r3, #1
 800bf40:	d004      	beq.n	800bf4c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800bf42:	6839      	ldr	r1, [r7, #0]
 800bf44:	6878      	ldr	r0, [r7, #4]
 800bf46:	f000 f8c9 	bl	800c0dc <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 800bf4a:	e021      	b.n	800bf90 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 800bf4c:	687b      	ldr	r3, [r7, #4]
 800bf4e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bf52:	2b01      	cmp	r3, #1
 800bf54:	db17      	blt.n	800bf86 <USBD_GetConfig+0x56>
 800bf56:	2b02      	cmp	r3, #2
 800bf58:	dd02      	ble.n	800bf60 <USBD_GetConfig+0x30>
 800bf5a:	2b03      	cmp	r3, #3
 800bf5c:	d00b      	beq.n	800bf76 <USBD_GetConfig+0x46>
 800bf5e:	e012      	b.n	800bf86 <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 800bf60:	687b      	ldr	r3, [r7, #4]
 800bf62:	2200      	movs	r2, #0
 800bf64:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800bf66:	687b      	ldr	r3, [r7, #4]
 800bf68:	3308      	adds	r3, #8
 800bf6a:	2201      	movs	r2, #1
 800bf6c:	4619      	mov	r1, r3
 800bf6e:	6878      	ldr	r0, [r7, #4]
 800bf70:	f000 f925 	bl	800c1be <USBD_CtlSendData>
      break;
 800bf74:	e00c      	b.n	800bf90 <USBD_GetConfig+0x60>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800bf76:	687b      	ldr	r3, [r7, #4]
 800bf78:	3304      	adds	r3, #4
 800bf7a:	2201      	movs	r2, #1
 800bf7c:	4619      	mov	r1, r3
 800bf7e:	6878      	ldr	r0, [r7, #4]
 800bf80:	f000 f91d 	bl	800c1be <USBD_CtlSendData>
      break;
 800bf84:	e004      	b.n	800bf90 <USBD_GetConfig+0x60>
      USBD_CtlError(pdev, req);
 800bf86:	6839      	ldr	r1, [r7, #0]
 800bf88:	6878      	ldr	r0, [r7, #4]
 800bf8a:	f000 f8a7 	bl	800c0dc <USBD_CtlError>
      break;
 800bf8e:	bf00      	nop
}
 800bf90:	bf00      	nop
 800bf92:	3708      	adds	r7, #8
 800bf94:	46bd      	mov	sp, r7
 800bf96:	bd80      	pop	{r7, pc}

0800bf98 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bf98:	b580      	push	{r7, lr}
 800bf9a:	b082      	sub	sp, #8
 800bf9c:	af00      	add	r7, sp, #0
 800bf9e:	6078      	str	r0, [r7, #4]
 800bfa0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800bfa2:	687b      	ldr	r3, [r7, #4]
 800bfa4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bfa8:	3b01      	subs	r3, #1
 800bfaa:	2b02      	cmp	r3, #2
 800bfac:	d81e      	bhi.n	800bfec <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 800bfae:	683b      	ldr	r3, [r7, #0]
 800bfb0:	88db      	ldrh	r3, [r3, #6]
 800bfb2:	2b02      	cmp	r3, #2
 800bfb4:	d004      	beq.n	800bfc0 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 800bfb6:	6839      	ldr	r1, [r7, #0]
 800bfb8:	6878      	ldr	r0, [r7, #4]
 800bfba:	f000 f88f 	bl	800c0dc <USBD_CtlError>
      break;
 800bfbe:	e01a      	b.n	800bff6 <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800bfc0:	687b      	ldr	r3, [r7, #4]
 800bfc2:	2201      	movs	r2, #1
 800bfc4:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup != 0U)
 800bfc6:	687b      	ldr	r3, [r7, #4]
 800bfc8:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800bfcc:	2b00      	cmp	r3, #0
 800bfce:	d005      	beq.n	800bfdc <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800bfd0:	687b      	ldr	r3, [r7, #4]
 800bfd2:	68db      	ldr	r3, [r3, #12]
 800bfd4:	f043 0202 	orr.w	r2, r3, #2
 800bfd8:	687b      	ldr	r3, [r7, #4]
 800bfda:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800bfdc:	687b      	ldr	r3, [r7, #4]
 800bfde:	330c      	adds	r3, #12
 800bfe0:	2202      	movs	r2, #2
 800bfe2:	4619      	mov	r1, r3
 800bfe4:	6878      	ldr	r0, [r7, #4]
 800bfe6:	f000 f8ea 	bl	800c1be <USBD_CtlSendData>
    break;
 800bfea:	e004      	b.n	800bff6 <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 800bfec:	6839      	ldr	r1, [r7, #0]
 800bfee:	6878      	ldr	r0, [r7, #4]
 800bff0:	f000 f874 	bl	800c0dc <USBD_CtlError>
    break;
 800bff4:	bf00      	nop
  }
}
 800bff6:	bf00      	nop
 800bff8:	3708      	adds	r7, #8
 800bffa:	46bd      	mov	sp, r7
 800bffc:	bd80      	pop	{r7, pc}

0800bffe <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bffe:	b580      	push	{r7, lr}
 800c000:	b082      	sub	sp, #8
 800c002:	af00      	add	r7, sp, #0
 800c004:	6078      	str	r0, [r7, #4]
 800c006:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c008:	683b      	ldr	r3, [r7, #0]
 800c00a:	885b      	ldrh	r3, [r3, #2]
 800c00c:	2b01      	cmp	r3, #1
 800c00e:	d106      	bne.n	800c01e <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800c010:	687b      	ldr	r3, [r7, #4]
 800c012:	2201      	movs	r2, #1
 800c014:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800c018:	6878      	ldr	r0, [r7, #4]
 800c01a:	f000 f92a 	bl	800c272 <USBD_CtlSendStatus>
  }
}
 800c01e:	bf00      	nop
 800c020:	3708      	adds	r7, #8
 800c022:	46bd      	mov	sp, r7
 800c024:	bd80      	pop	{r7, pc}

0800c026 <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c026:	b580      	push	{r7, lr}
 800c028:	b082      	sub	sp, #8
 800c02a:	af00      	add	r7, sp, #0
 800c02c:	6078      	str	r0, [r7, #4]
 800c02e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c030:	687b      	ldr	r3, [r7, #4]
 800c032:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c036:	3b01      	subs	r3, #1
 800c038:	2b02      	cmp	r3, #2
 800c03a:	d80b      	bhi.n	800c054 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c03c:	683b      	ldr	r3, [r7, #0]
 800c03e:	885b      	ldrh	r3, [r3, #2]
 800c040:	2b01      	cmp	r3, #1
 800c042:	d10c      	bne.n	800c05e <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800c044:	687b      	ldr	r3, [r7, #4]
 800c046:	2200      	movs	r2, #0
 800c048:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800c04c:	6878      	ldr	r0, [r7, #4]
 800c04e:	f000 f910 	bl	800c272 <USBD_CtlSendStatus>
      }
      break;
 800c052:	e004      	b.n	800c05e <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800c054:	6839      	ldr	r1, [r7, #0]
 800c056:	6878      	ldr	r0, [r7, #4]
 800c058:	f000 f840 	bl	800c0dc <USBD_CtlError>
      break;
 800c05c:	e000      	b.n	800c060 <USBD_ClrFeature+0x3a>
      break;
 800c05e:	bf00      	nop
  }
}
 800c060:	bf00      	nop
 800c062:	3708      	adds	r7, #8
 800c064:	46bd      	mov	sp, r7
 800c066:	bd80      	pop	{r7, pc}

0800c068 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800c068:	b580      	push	{r7, lr}
 800c06a:	b084      	sub	sp, #16
 800c06c:	af00      	add	r7, sp, #0
 800c06e:	6078      	str	r0, [r7, #4]
 800c070:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800c072:	683b      	ldr	r3, [r7, #0]
 800c074:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800c076:	68fb      	ldr	r3, [r7, #12]
 800c078:	781a      	ldrb	r2, [r3, #0]
 800c07a:	687b      	ldr	r3, [r7, #4]
 800c07c:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800c07e:	68fb      	ldr	r3, [r7, #12]
 800c080:	3301      	adds	r3, #1
 800c082:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800c084:	68fb      	ldr	r3, [r7, #12]
 800c086:	781a      	ldrb	r2, [r3, #0]
 800c088:	687b      	ldr	r3, [r7, #4]
 800c08a:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800c08c:	68fb      	ldr	r3, [r7, #12]
 800c08e:	3301      	adds	r3, #1
 800c090:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800c092:	68f8      	ldr	r0, [r7, #12]
 800c094:	f7ff fad3 	bl	800b63e <SWAPBYTE>
 800c098:	4603      	mov	r3, r0
 800c09a:	461a      	mov	r2, r3
 800c09c:	687b      	ldr	r3, [r7, #4]
 800c09e:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800c0a0:	68fb      	ldr	r3, [r7, #12]
 800c0a2:	3301      	adds	r3, #1
 800c0a4:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800c0a6:	68fb      	ldr	r3, [r7, #12]
 800c0a8:	3301      	adds	r3, #1
 800c0aa:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800c0ac:	68f8      	ldr	r0, [r7, #12]
 800c0ae:	f7ff fac6 	bl	800b63e <SWAPBYTE>
 800c0b2:	4603      	mov	r3, r0
 800c0b4:	461a      	mov	r2, r3
 800c0b6:	687b      	ldr	r3, [r7, #4]
 800c0b8:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800c0ba:	68fb      	ldr	r3, [r7, #12]
 800c0bc:	3301      	adds	r3, #1
 800c0be:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800c0c0:	68fb      	ldr	r3, [r7, #12]
 800c0c2:	3301      	adds	r3, #1
 800c0c4:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800c0c6:	68f8      	ldr	r0, [r7, #12]
 800c0c8:	f7ff fab9 	bl	800b63e <SWAPBYTE>
 800c0cc:	4603      	mov	r3, r0
 800c0ce:	461a      	mov	r2, r3
 800c0d0:	687b      	ldr	r3, [r7, #4]
 800c0d2:	80da      	strh	r2, [r3, #6]
}
 800c0d4:	bf00      	nop
 800c0d6:	3710      	adds	r7, #16
 800c0d8:	46bd      	mov	sp, r7
 800c0da:	bd80      	pop	{r7, pc}

0800c0dc <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c0dc:	b580      	push	{r7, lr}
 800c0de:	b082      	sub	sp, #8
 800c0e0:	af00      	add	r7, sp, #0
 800c0e2:	6078      	str	r0, [r7, #4]
 800c0e4:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800c0e6:	2180      	movs	r1, #128	; 0x80
 800c0e8:	6878      	ldr	r0, [r7, #4]
 800c0ea:	f000 fce7 	bl	800cabc <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800c0ee:	2100      	movs	r1, #0
 800c0f0:	6878      	ldr	r0, [r7, #4]
 800c0f2:	f000 fce3 	bl	800cabc <USBD_LL_StallEP>
}
 800c0f6:	bf00      	nop
 800c0f8:	3708      	adds	r7, #8
 800c0fa:	46bd      	mov	sp, r7
 800c0fc:	bd80      	pop	{r7, pc}

0800c0fe <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800c0fe:	b580      	push	{r7, lr}
 800c100:	b086      	sub	sp, #24
 800c102:	af00      	add	r7, sp, #0
 800c104:	60f8      	str	r0, [r7, #12]
 800c106:	60b9      	str	r1, [r7, #8]
 800c108:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800c10a:	2300      	movs	r3, #0
 800c10c:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800c10e:	68fb      	ldr	r3, [r7, #12]
 800c110:	2b00      	cmp	r3, #0
 800c112:	d036      	beq.n	800c182 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800c114:	68fb      	ldr	r3, [r7, #12]
 800c116:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800c118:	6938      	ldr	r0, [r7, #16]
 800c11a:	f000 f836 	bl	800c18a <USBD_GetLen>
 800c11e:	4603      	mov	r3, r0
 800c120:	3301      	adds	r3, #1
 800c122:	b29b      	uxth	r3, r3
 800c124:	005b      	lsls	r3, r3, #1
 800c126:	b29a      	uxth	r2, r3
 800c128:	687b      	ldr	r3, [r7, #4]
 800c12a:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800c12c:	7dfb      	ldrb	r3, [r7, #23]
 800c12e:	68ba      	ldr	r2, [r7, #8]
 800c130:	4413      	add	r3, r2
 800c132:	687a      	ldr	r2, [r7, #4]
 800c134:	7812      	ldrb	r2, [r2, #0]
 800c136:	701a      	strb	r2, [r3, #0]
  idx++;
 800c138:	7dfb      	ldrb	r3, [r7, #23]
 800c13a:	3301      	adds	r3, #1
 800c13c:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800c13e:	7dfb      	ldrb	r3, [r7, #23]
 800c140:	68ba      	ldr	r2, [r7, #8]
 800c142:	4413      	add	r3, r2
 800c144:	2203      	movs	r2, #3
 800c146:	701a      	strb	r2, [r3, #0]
  idx++;
 800c148:	7dfb      	ldrb	r3, [r7, #23]
 800c14a:	3301      	adds	r3, #1
 800c14c:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800c14e:	e013      	b.n	800c178 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800c150:	7dfb      	ldrb	r3, [r7, #23]
 800c152:	68ba      	ldr	r2, [r7, #8]
 800c154:	4413      	add	r3, r2
 800c156:	693a      	ldr	r2, [r7, #16]
 800c158:	7812      	ldrb	r2, [r2, #0]
 800c15a:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800c15c:	693b      	ldr	r3, [r7, #16]
 800c15e:	3301      	adds	r3, #1
 800c160:	613b      	str	r3, [r7, #16]
    idx++;
 800c162:	7dfb      	ldrb	r3, [r7, #23]
 800c164:	3301      	adds	r3, #1
 800c166:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800c168:	7dfb      	ldrb	r3, [r7, #23]
 800c16a:	68ba      	ldr	r2, [r7, #8]
 800c16c:	4413      	add	r3, r2
 800c16e:	2200      	movs	r2, #0
 800c170:	701a      	strb	r2, [r3, #0]
    idx++;
 800c172:	7dfb      	ldrb	r3, [r7, #23]
 800c174:	3301      	adds	r3, #1
 800c176:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800c178:	693b      	ldr	r3, [r7, #16]
 800c17a:	781b      	ldrb	r3, [r3, #0]
 800c17c:	2b00      	cmp	r3, #0
 800c17e:	d1e7      	bne.n	800c150 <USBD_GetString+0x52>
 800c180:	e000      	b.n	800c184 <USBD_GetString+0x86>
    return;
 800c182:	bf00      	nop
  }
}
 800c184:	3718      	adds	r7, #24
 800c186:	46bd      	mov	sp, r7
 800c188:	bd80      	pop	{r7, pc}

0800c18a <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800c18a:	b480      	push	{r7}
 800c18c:	b085      	sub	sp, #20
 800c18e:	af00      	add	r7, sp, #0
 800c190:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800c192:	2300      	movs	r3, #0
 800c194:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800c196:	687b      	ldr	r3, [r7, #4]
 800c198:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800c19a:	e005      	b.n	800c1a8 <USBD_GetLen+0x1e>
  {
    len++;
 800c19c:	7bfb      	ldrb	r3, [r7, #15]
 800c19e:	3301      	adds	r3, #1
 800c1a0:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800c1a2:	68bb      	ldr	r3, [r7, #8]
 800c1a4:	3301      	adds	r3, #1
 800c1a6:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800c1a8:	68bb      	ldr	r3, [r7, #8]
 800c1aa:	781b      	ldrb	r3, [r3, #0]
 800c1ac:	2b00      	cmp	r3, #0
 800c1ae:	d1f5      	bne.n	800c19c <USBD_GetLen+0x12>
  }

  return len;
 800c1b0:	7bfb      	ldrb	r3, [r7, #15]
}
 800c1b2:	4618      	mov	r0, r3
 800c1b4:	3714      	adds	r7, #20
 800c1b6:	46bd      	mov	sp, r7
 800c1b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1bc:	4770      	bx	lr

0800c1be <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800c1be:	b580      	push	{r7, lr}
 800c1c0:	b084      	sub	sp, #16
 800c1c2:	af00      	add	r7, sp, #0
 800c1c4:	60f8      	str	r0, [r7, #12]
 800c1c6:	60b9      	str	r1, [r7, #8]
 800c1c8:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800c1ca:	68fb      	ldr	r3, [r7, #12]
 800c1cc:	2202      	movs	r2, #2
 800c1ce:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800c1d2:	68fb      	ldr	r3, [r7, #12]
 800c1d4:	687a      	ldr	r2, [r7, #4]
 800c1d6:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 800c1d8:	68fb      	ldr	r3, [r7, #12]
 800c1da:	687a      	ldr	r2, [r7, #4]
 800c1dc:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c1de:	687b      	ldr	r3, [r7, #4]
 800c1e0:	68ba      	ldr	r2, [r7, #8]
 800c1e2:	2100      	movs	r1, #0
 800c1e4:	68f8      	ldr	r0, [r7, #12]
 800c1e6:	f000 fcf2 	bl	800cbce <USBD_LL_Transmit>

  return USBD_OK;
 800c1ea:	2300      	movs	r3, #0
}
 800c1ec:	4618      	mov	r0, r3
 800c1ee:	3710      	adds	r7, #16
 800c1f0:	46bd      	mov	sp, r7
 800c1f2:	bd80      	pop	{r7, pc}

0800c1f4 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800c1f4:	b580      	push	{r7, lr}
 800c1f6:	b084      	sub	sp, #16
 800c1f8:	af00      	add	r7, sp, #0
 800c1fa:	60f8      	str	r0, [r7, #12]
 800c1fc:	60b9      	str	r1, [r7, #8]
 800c1fe:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c200:	687b      	ldr	r3, [r7, #4]
 800c202:	68ba      	ldr	r2, [r7, #8]
 800c204:	2100      	movs	r1, #0
 800c206:	68f8      	ldr	r0, [r7, #12]
 800c208:	f000 fce1 	bl	800cbce <USBD_LL_Transmit>

  return USBD_OK;
 800c20c:	2300      	movs	r3, #0
}
 800c20e:	4618      	mov	r0, r3
 800c210:	3710      	adds	r7, #16
 800c212:	46bd      	mov	sp, r7
 800c214:	bd80      	pop	{r7, pc}

0800c216 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800c216:	b580      	push	{r7, lr}
 800c218:	b084      	sub	sp, #16
 800c21a:	af00      	add	r7, sp, #0
 800c21c:	60f8      	str	r0, [r7, #12]
 800c21e:	60b9      	str	r1, [r7, #8]
 800c220:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800c222:	68fb      	ldr	r3, [r7, #12]
 800c224:	2203      	movs	r2, #3
 800c226:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800c22a:	68fb      	ldr	r3, [r7, #12]
 800c22c:	687a      	ldr	r2, [r7, #4]
 800c22e:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  pdev->ep_out[0].rem_length = len;
 800c232:	68fb      	ldr	r3, [r7, #12]
 800c234:	687a      	ldr	r2, [r7, #4]
 800c236:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800c23a:	687b      	ldr	r3, [r7, #4]
 800c23c:	68ba      	ldr	r2, [r7, #8]
 800c23e:	2100      	movs	r1, #0
 800c240:	68f8      	ldr	r0, [r7, #12]
 800c242:	f000 fce5 	bl	800cc10 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c246:	2300      	movs	r3, #0
}
 800c248:	4618      	mov	r0, r3
 800c24a:	3710      	adds	r7, #16
 800c24c:	46bd      	mov	sp, r7
 800c24e:	bd80      	pop	{r7, pc}

0800c250 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800c250:	b580      	push	{r7, lr}
 800c252:	b084      	sub	sp, #16
 800c254:	af00      	add	r7, sp, #0
 800c256:	60f8      	str	r0, [r7, #12]
 800c258:	60b9      	str	r1, [r7, #8]
 800c25a:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800c25c:	687b      	ldr	r3, [r7, #4]
 800c25e:	68ba      	ldr	r2, [r7, #8]
 800c260:	2100      	movs	r1, #0
 800c262:	68f8      	ldr	r0, [r7, #12]
 800c264:	f000 fcd4 	bl	800cc10 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c268:	2300      	movs	r3, #0
}
 800c26a:	4618      	mov	r0, r3
 800c26c:	3710      	adds	r7, #16
 800c26e:	46bd      	mov	sp, r7
 800c270:	bd80      	pop	{r7, pc}

0800c272 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800c272:	b580      	push	{r7, lr}
 800c274:	b082      	sub	sp, #8
 800c276:	af00      	add	r7, sp, #0
 800c278:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800c27a:	687b      	ldr	r3, [r7, #4]
 800c27c:	2204      	movs	r2, #4
 800c27e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800c282:	2300      	movs	r3, #0
 800c284:	2200      	movs	r2, #0
 800c286:	2100      	movs	r1, #0
 800c288:	6878      	ldr	r0, [r7, #4]
 800c28a:	f000 fca0 	bl	800cbce <USBD_LL_Transmit>

  return USBD_OK;
 800c28e:	2300      	movs	r3, #0
}
 800c290:	4618      	mov	r0, r3
 800c292:	3708      	adds	r7, #8
 800c294:	46bd      	mov	sp, r7
 800c296:	bd80      	pop	{r7, pc}

0800c298 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800c298:	b580      	push	{r7, lr}
 800c29a:	b082      	sub	sp, #8
 800c29c:	af00      	add	r7, sp, #0
 800c29e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800c2a0:	687b      	ldr	r3, [r7, #4]
 800c2a2:	2205      	movs	r2, #5
 800c2a4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c2a8:	2300      	movs	r3, #0
 800c2aa:	2200      	movs	r2, #0
 800c2ac:	2100      	movs	r1, #0
 800c2ae:	6878      	ldr	r0, [r7, #4]
 800c2b0:	f000 fcae 	bl	800cc10 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c2b4:	2300      	movs	r3, #0
}
 800c2b6:	4618      	mov	r0, r3
 800c2b8:	3708      	adds	r7, #8
 800c2ba:	46bd      	mov	sp, r7
 800c2bc:	bd80      	pop	{r7, pc}
	...

0800c2c0 <MX_PDM2PCM_Init>:
/* USER CODE BEGIN 1 */
/* USER CODE END 1 */

/* PDM2PCM init function */
void MX_PDM2PCM_Init(void)
{
 800c2c0:	b580      	push	{r7, lr}
 800c2c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 2 */
  /* USER CODE END 2 */

   /**
  */
  PDM1_filter_handler.bit_order = PDM_FILTER_BIT_ORDER_LSB;
 800c2c4:	4b10      	ldr	r3, [pc, #64]	; (800c308 <MX_PDM2PCM_Init+0x48>)
 800c2c6:	2200      	movs	r2, #0
 800c2c8:	801a      	strh	r2, [r3, #0]
  PDM1_filter_handler.endianness = PDM_FILTER_ENDIANNESS_BE;
 800c2ca:	4b0f      	ldr	r3, [pc, #60]	; (800c308 <MX_PDM2PCM_Init+0x48>)
 800c2cc:	2201      	movs	r2, #1
 800c2ce:	805a      	strh	r2, [r3, #2]
  PDM1_filter_handler.high_pass_tap = 2104533974;
 800c2d0:	4b0d      	ldr	r3, [pc, #52]	; (800c308 <MX_PDM2PCM_Init+0x48>)
 800c2d2:	4a0e      	ldr	r2, [pc, #56]	; (800c30c <MX_PDM2PCM_Init+0x4c>)
 800c2d4:	605a      	str	r2, [r3, #4]
  PDM1_filter_handler.in_ptr_channels = 1;
 800c2d6:	4b0c      	ldr	r3, [pc, #48]	; (800c308 <MX_PDM2PCM_Init+0x48>)
 800c2d8:	2201      	movs	r2, #1
 800c2da:	811a      	strh	r2, [r3, #8]
  PDM1_filter_handler.out_ptr_channels = 1;
 800c2dc:	4b0a      	ldr	r3, [pc, #40]	; (800c308 <MX_PDM2PCM_Init+0x48>)
 800c2de:	2201      	movs	r2, #1
 800c2e0:	815a      	strh	r2, [r3, #10]
  PDM_Filter_Init(&PDM1_filter_handler);
 800c2e2:	4809      	ldr	r0, [pc, #36]	; (800c308 <MX_PDM2PCM_Init+0x48>)
 800c2e4:	f002 fa44 	bl	800e770 <PDM_Filter_Init>

  PDM1_filter_config.decimation_factor = PDM_FILTER_DEC_FACTOR_64;
 800c2e8:	4b09      	ldr	r3, [pc, #36]	; (800c310 <MX_PDM2PCM_Init+0x50>)
 800c2ea:	2202      	movs	r2, #2
 800c2ec:	801a      	strh	r2, [r3, #0]
  PDM1_filter_config.output_samples_number = 16;
 800c2ee:	4b08      	ldr	r3, [pc, #32]	; (800c310 <MX_PDM2PCM_Init+0x50>)
 800c2f0:	2210      	movs	r2, #16
 800c2f2:	805a      	strh	r2, [r3, #2]
  PDM1_filter_config.mic_gain = 24;
 800c2f4:	4b06      	ldr	r3, [pc, #24]	; (800c310 <MX_PDM2PCM_Init+0x50>)
 800c2f6:	2218      	movs	r2, #24
 800c2f8:	809a      	strh	r2, [r3, #4]
  PDM_Filter_setConfig(&PDM1_filter_handler, &PDM1_filter_config);
 800c2fa:	4905      	ldr	r1, [pc, #20]	; (800c310 <MX_PDM2PCM_Init+0x50>)
 800c2fc:	4802      	ldr	r0, [pc, #8]	; (800c308 <MX_PDM2PCM_Init+0x48>)
 800c2fe:	f002 fac1 	bl	800e884 <PDM_Filter_setConfig>

  /* USER CODE BEGIN 3 */
  /* USER CODE END 3 */

}
 800c302:	bf00      	nop
 800c304:	bd80      	pop	{r7, pc}
 800c306:	bf00      	nop
 800c308:	20003384 	.word	0x20003384
 800c30c:	7d70a3d6 	.word	0x7d70a3d6
 800c310:	2000337c 	.word	0x2000337c

0800c314 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800c314:	b580      	push	{r7, lr}
 800c316:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800c318:	2200      	movs	r2, #0
 800c31a:	4912      	ldr	r1, [pc, #72]	; (800c364 <MX_USB_DEVICE_Init+0x50>)
 800c31c:	4812      	ldr	r0, [pc, #72]	; (800c368 <MX_USB_DEVICE_Init+0x54>)
 800c31e:	f7fe fec9 	bl	800b0b4 <USBD_Init>
 800c322:	4603      	mov	r3, r0
 800c324:	2b00      	cmp	r3, #0
 800c326:	d001      	beq.n	800c32c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800c328:	f7f5 ff40 	bl	80021ac <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800c32c:	490f      	ldr	r1, [pc, #60]	; (800c36c <MX_USB_DEVICE_Init+0x58>)
 800c32e:	480e      	ldr	r0, [pc, #56]	; (800c368 <MX_USB_DEVICE_Init+0x54>)
 800c330:	f7fe fef6 	bl	800b120 <USBD_RegisterClass>
 800c334:	4603      	mov	r3, r0
 800c336:	2b00      	cmp	r3, #0
 800c338:	d001      	beq.n	800c33e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800c33a:	f7f5 ff37 	bl	80021ac <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800c33e:	490c      	ldr	r1, [pc, #48]	; (800c370 <MX_USB_DEVICE_Init+0x5c>)
 800c340:	4809      	ldr	r0, [pc, #36]	; (800c368 <MX_USB_DEVICE_Init+0x54>)
 800c342:	f7fe fe4b 	bl	800afdc <USBD_CDC_RegisterInterface>
 800c346:	4603      	mov	r3, r0
 800c348:	2b00      	cmp	r3, #0
 800c34a:	d001      	beq.n	800c350 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800c34c:	f7f5 ff2e 	bl	80021ac <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800c350:	4805      	ldr	r0, [pc, #20]	; (800c368 <MX_USB_DEVICE_Init+0x54>)
 800c352:	f7fe ff06 	bl	800b162 <USBD_Start>
 800c356:	4603      	mov	r3, r0
 800c358:	2b00      	cmp	r3, #0
 800c35a:	d001      	beq.n	800c360 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800c35c:	f7f5 ff26 	bl	80021ac <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800c360:	bf00      	nop
 800c362:	bd80      	pop	{r7, pc}
 800c364:	20000530 	.word	0x20000530
 800c368:	200033d0 	.word	0x200033d0
 800c36c:	20000418 	.word	0x20000418
 800c370:	2000051c 	.word	0x2000051c

0800c374 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800c374:	b580      	push	{r7, lr}
 800c376:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800c378:	2200      	movs	r2, #0
 800c37a:	4905      	ldr	r1, [pc, #20]	; (800c390 <CDC_Init_FS+0x1c>)
 800c37c:	4805      	ldr	r0, [pc, #20]	; (800c394 <CDC_Init_FS+0x20>)
 800c37e:	f7fe fe42 	bl	800b006 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800c382:	4905      	ldr	r1, [pc, #20]	; (800c398 <CDC_Init_FS+0x24>)
 800c384:	4803      	ldr	r0, [pc, #12]	; (800c394 <CDC_Init_FS+0x20>)
 800c386:	f7fe fe57 	bl	800b038 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800c38a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800c38c:	4618      	mov	r0, r3
 800c38e:	bd80      	pop	{r7, pc}
 800c390:	20003ea0 	.word	0x20003ea0
 800c394:	200033d0 	.word	0x200033d0
 800c398:	200036a0 	.word	0x200036a0

0800c39c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800c39c:	b480      	push	{r7}
 800c39e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800c3a0:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800c3a2:	4618      	mov	r0, r3
 800c3a4:	46bd      	mov	sp, r7
 800c3a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3aa:	4770      	bx	lr

0800c3ac <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800c3ac:	b480      	push	{r7}
 800c3ae:	b083      	sub	sp, #12
 800c3b0:	af00      	add	r7, sp, #0
 800c3b2:	4603      	mov	r3, r0
 800c3b4:	6039      	str	r1, [r7, #0]
 800c3b6:	71fb      	strb	r3, [r7, #7]
 800c3b8:	4613      	mov	r3, r2
 800c3ba:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800c3bc:	79fb      	ldrb	r3, [r7, #7]
 800c3be:	2b23      	cmp	r3, #35	; 0x23
 800c3c0:	d84a      	bhi.n	800c458 <CDC_Control_FS+0xac>
 800c3c2:	a201      	add	r2, pc, #4	; (adr r2, 800c3c8 <CDC_Control_FS+0x1c>)
 800c3c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c3c8:	0800c459 	.word	0x0800c459
 800c3cc:	0800c459 	.word	0x0800c459
 800c3d0:	0800c459 	.word	0x0800c459
 800c3d4:	0800c459 	.word	0x0800c459
 800c3d8:	0800c459 	.word	0x0800c459
 800c3dc:	0800c459 	.word	0x0800c459
 800c3e0:	0800c459 	.word	0x0800c459
 800c3e4:	0800c459 	.word	0x0800c459
 800c3e8:	0800c459 	.word	0x0800c459
 800c3ec:	0800c459 	.word	0x0800c459
 800c3f0:	0800c459 	.word	0x0800c459
 800c3f4:	0800c459 	.word	0x0800c459
 800c3f8:	0800c459 	.word	0x0800c459
 800c3fc:	0800c459 	.word	0x0800c459
 800c400:	0800c459 	.word	0x0800c459
 800c404:	0800c459 	.word	0x0800c459
 800c408:	0800c459 	.word	0x0800c459
 800c40c:	0800c459 	.word	0x0800c459
 800c410:	0800c459 	.word	0x0800c459
 800c414:	0800c459 	.word	0x0800c459
 800c418:	0800c459 	.word	0x0800c459
 800c41c:	0800c459 	.word	0x0800c459
 800c420:	0800c459 	.word	0x0800c459
 800c424:	0800c459 	.word	0x0800c459
 800c428:	0800c459 	.word	0x0800c459
 800c42c:	0800c459 	.word	0x0800c459
 800c430:	0800c459 	.word	0x0800c459
 800c434:	0800c459 	.word	0x0800c459
 800c438:	0800c459 	.word	0x0800c459
 800c43c:	0800c459 	.word	0x0800c459
 800c440:	0800c459 	.word	0x0800c459
 800c444:	0800c459 	.word	0x0800c459
 800c448:	0800c459 	.word	0x0800c459
 800c44c:	0800c459 	.word	0x0800c459
 800c450:	0800c459 	.word	0x0800c459
 800c454:	0800c459 	.word	0x0800c459
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800c458:	bf00      	nop
  }

  return (USBD_OK);
 800c45a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800c45c:	4618      	mov	r0, r3
 800c45e:	370c      	adds	r7, #12
 800c460:	46bd      	mov	sp, r7
 800c462:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c466:	4770      	bx	lr

0800c468 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800c468:	b580      	push	{r7, lr}
 800c46a:	b082      	sub	sp, #8
 800c46c:	af00      	add	r7, sp, #0
 800c46e:	6078      	str	r0, [r7, #4]
 800c470:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800c472:	6879      	ldr	r1, [r7, #4]
 800c474:	4805      	ldr	r0, [pc, #20]	; (800c48c <CDC_Receive_FS+0x24>)
 800c476:	f7fe fddf 	bl	800b038 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800c47a:	4804      	ldr	r0, [pc, #16]	; (800c48c <CDC_Receive_FS+0x24>)
 800c47c:	f7fe fdf0 	bl	800b060 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800c480:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800c482:	4618      	mov	r0, r3
 800c484:	3708      	adds	r7, #8
 800c486:	46bd      	mov	sp, r7
 800c488:	bd80      	pop	{r7, pc}
 800c48a:	bf00      	nop
 800c48c:	200033d0 	.word	0x200033d0

0800c490 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800c490:	b480      	push	{r7}
 800c492:	b087      	sub	sp, #28
 800c494:	af00      	add	r7, sp, #0
 800c496:	60f8      	str	r0, [r7, #12]
 800c498:	60b9      	str	r1, [r7, #8]
 800c49a:	4613      	mov	r3, r2
 800c49c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800c49e:	2300      	movs	r3, #0
 800c4a0:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800c4a2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800c4a6:	4618      	mov	r0, r3
 800c4a8:	371c      	adds	r7, #28
 800c4aa:	46bd      	mov	sp, r7
 800c4ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4b0:	4770      	bx	lr
	...

0800c4b4 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c4b4:	b480      	push	{r7}
 800c4b6:	b083      	sub	sp, #12
 800c4b8:	af00      	add	r7, sp, #0
 800c4ba:	4603      	mov	r3, r0
 800c4bc:	6039      	str	r1, [r7, #0]
 800c4be:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800c4c0:	683b      	ldr	r3, [r7, #0]
 800c4c2:	2212      	movs	r2, #18
 800c4c4:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800c4c6:	4b03      	ldr	r3, [pc, #12]	; (800c4d4 <USBD_FS_DeviceDescriptor+0x20>)
}
 800c4c8:	4618      	mov	r0, r3
 800c4ca:	370c      	adds	r7, #12
 800c4cc:	46bd      	mov	sp, r7
 800c4ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4d2:	4770      	bx	lr
 800c4d4:	2000054c 	.word	0x2000054c

0800c4d8 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c4d8:	b480      	push	{r7}
 800c4da:	b083      	sub	sp, #12
 800c4dc:	af00      	add	r7, sp, #0
 800c4de:	4603      	mov	r3, r0
 800c4e0:	6039      	str	r1, [r7, #0]
 800c4e2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800c4e4:	683b      	ldr	r3, [r7, #0]
 800c4e6:	2204      	movs	r2, #4
 800c4e8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800c4ea:	4b03      	ldr	r3, [pc, #12]	; (800c4f8 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800c4ec:	4618      	mov	r0, r3
 800c4ee:	370c      	adds	r7, #12
 800c4f0:	46bd      	mov	sp, r7
 800c4f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4f6:	4770      	bx	lr
 800c4f8:	20000560 	.word	0x20000560

0800c4fc <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c4fc:	b580      	push	{r7, lr}
 800c4fe:	b082      	sub	sp, #8
 800c500:	af00      	add	r7, sp, #0
 800c502:	4603      	mov	r3, r0
 800c504:	6039      	str	r1, [r7, #0]
 800c506:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800c508:	79fb      	ldrb	r3, [r7, #7]
 800c50a:	2b00      	cmp	r3, #0
 800c50c:	d105      	bne.n	800c51a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800c50e:	683a      	ldr	r2, [r7, #0]
 800c510:	4907      	ldr	r1, [pc, #28]	; (800c530 <USBD_FS_ProductStrDescriptor+0x34>)
 800c512:	4808      	ldr	r0, [pc, #32]	; (800c534 <USBD_FS_ProductStrDescriptor+0x38>)
 800c514:	f7ff fdf3 	bl	800c0fe <USBD_GetString>
 800c518:	e004      	b.n	800c524 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800c51a:	683a      	ldr	r2, [r7, #0]
 800c51c:	4904      	ldr	r1, [pc, #16]	; (800c530 <USBD_FS_ProductStrDescriptor+0x34>)
 800c51e:	4805      	ldr	r0, [pc, #20]	; (800c534 <USBD_FS_ProductStrDescriptor+0x38>)
 800c520:	f7ff fded 	bl	800c0fe <USBD_GetString>
  }
  return USBD_StrDesc;
 800c524:	4b02      	ldr	r3, [pc, #8]	; (800c530 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800c526:	4618      	mov	r0, r3
 800c528:	3708      	adds	r7, #8
 800c52a:	46bd      	mov	sp, r7
 800c52c:	bd80      	pop	{r7, pc}
 800c52e:	bf00      	nop
 800c530:	200046a0 	.word	0x200046a0
 800c534:	0800fc78 	.word	0x0800fc78

0800c538 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c538:	b580      	push	{r7, lr}
 800c53a:	b082      	sub	sp, #8
 800c53c:	af00      	add	r7, sp, #0
 800c53e:	4603      	mov	r3, r0
 800c540:	6039      	str	r1, [r7, #0]
 800c542:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800c544:	683a      	ldr	r2, [r7, #0]
 800c546:	4904      	ldr	r1, [pc, #16]	; (800c558 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800c548:	4804      	ldr	r0, [pc, #16]	; (800c55c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800c54a:	f7ff fdd8 	bl	800c0fe <USBD_GetString>
  return USBD_StrDesc;
 800c54e:	4b02      	ldr	r3, [pc, #8]	; (800c558 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800c550:	4618      	mov	r0, r3
 800c552:	3708      	adds	r7, #8
 800c554:	46bd      	mov	sp, r7
 800c556:	bd80      	pop	{r7, pc}
 800c558:	200046a0 	.word	0x200046a0
 800c55c:	0800fc90 	.word	0x0800fc90

0800c560 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c560:	b580      	push	{r7, lr}
 800c562:	b082      	sub	sp, #8
 800c564:	af00      	add	r7, sp, #0
 800c566:	4603      	mov	r3, r0
 800c568:	6039      	str	r1, [r7, #0]
 800c56a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800c56c:	683b      	ldr	r3, [r7, #0]
 800c56e:	221a      	movs	r2, #26
 800c570:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800c572:	f000 f843 	bl	800c5fc <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800c576:	4b02      	ldr	r3, [pc, #8]	; (800c580 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800c578:	4618      	mov	r0, r3
 800c57a:	3708      	adds	r7, #8
 800c57c:	46bd      	mov	sp, r7
 800c57e:	bd80      	pop	{r7, pc}
 800c580:	20000564 	.word	0x20000564

0800c584 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c584:	b580      	push	{r7, lr}
 800c586:	b082      	sub	sp, #8
 800c588:	af00      	add	r7, sp, #0
 800c58a:	4603      	mov	r3, r0
 800c58c:	6039      	str	r1, [r7, #0]
 800c58e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800c590:	79fb      	ldrb	r3, [r7, #7]
 800c592:	2b00      	cmp	r3, #0
 800c594:	d105      	bne.n	800c5a2 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800c596:	683a      	ldr	r2, [r7, #0]
 800c598:	4907      	ldr	r1, [pc, #28]	; (800c5b8 <USBD_FS_ConfigStrDescriptor+0x34>)
 800c59a:	4808      	ldr	r0, [pc, #32]	; (800c5bc <USBD_FS_ConfigStrDescriptor+0x38>)
 800c59c:	f7ff fdaf 	bl	800c0fe <USBD_GetString>
 800c5a0:	e004      	b.n	800c5ac <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800c5a2:	683a      	ldr	r2, [r7, #0]
 800c5a4:	4904      	ldr	r1, [pc, #16]	; (800c5b8 <USBD_FS_ConfigStrDescriptor+0x34>)
 800c5a6:	4805      	ldr	r0, [pc, #20]	; (800c5bc <USBD_FS_ConfigStrDescriptor+0x38>)
 800c5a8:	f7ff fda9 	bl	800c0fe <USBD_GetString>
  }
  return USBD_StrDesc;
 800c5ac:	4b02      	ldr	r3, [pc, #8]	; (800c5b8 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800c5ae:	4618      	mov	r0, r3
 800c5b0:	3708      	adds	r7, #8
 800c5b2:	46bd      	mov	sp, r7
 800c5b4:	bd80      	pop	{r7, pc}
 800c5b6:	bf00      	nop
 800c5b8:	200046a0 	.word	0x200046a0
 800c5bc:	0800fca4 	.word	0x0800fca4

0800c5c0 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c5c0:	b580      	push	{r7, lr}
 800c5c2:	b082      	sub	sp, #8
 800c5c4:	af00      	add	r7, sp, #0
 800c5c6:	4603      	mov	r3, r0
 800c5c8:	6039      	str	r1, [r7, #0]
 800c5ca:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800c5cc:	79fb      	ldrb	r3, [r7, #7]
 800c5ce:	2b00      	cmp	r3, #0
 800c5d0:	d105      	bne.n	800c5de <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800c5d2:	683a      	ldr	r2, [r7, #0]
 800c5d4:	4907      	ldr	r1, [pc, #28]	; (800c5f4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800c5d6:	4808      	ldr	r0, [pc, #32]	; (800c5f8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800c5d8:	f7ff fd91 	bl	800c0fe <USBD_GetString>
 800c5dc:	e004      	b.n	800c5e8 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800c5de:	683a      	ldr	r2, [r7, #0]
 800c5e0:	4904      	ldr	r1, [pc, #16]	; (800c5f4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800c5e2:	4805      	ldr	r0, [pc, #20]	; (800c5f8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800c5e4:	f7ff fd8b 	bl	800c0fe <USBD_GetString>
  }
  return USBD_StrDesc;
 800c5e8:	4b02      	ldr	r3, [pc, #8]	; (800c5f4 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800c5ea:	4618      	mov	r0, r3
 800c5ec:	3708      	adds	r7, #8
 800c5ee:	46bd      	mov	sp, r7
 800c5f0:	bd80      	pop	{r7, pc}
 800c5f2:	bf00      	nop
 800c5f4:	200046a0 	.word	0x200046a0
 800c5f8:	0800fcb0 	.word	0x0800fcb0

0800c5fc <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800c5fc:	b580      	push	{r7, lr}
 800c5fe:	b084      	sub	sp, #16
 800c600:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800c602:	4b0f      	ldr	r3, [pc, #60]	; (800c640 <Get_SerialNum+0x44>)
 800c604:	681b      	ldr	r3, [r3, #0]
 800c606:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800c608:	4b0e      	ldr	r3, [pc, #56]	; (800c644 <Get_SerialNum+0x48>)
 800c60a:	681b      	ldr	r3, [r3, #0]
 800c60c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800c60e:	4b0e      	ldr	r3, [pc, #56]	; (800c648 <Get_SerialNum+0x4c>)
 800c610:	681b      	ldr	r3, [r3, #0]
 800c612:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800c614:	68fa      	ldr	r2, [r7, #12]
 800c616:	687b      	ldr	r3, [r7, #4]
 800c618:	4413      	add	r3, r2
 800c61a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800c61c:	68fb      	ldr	r3, [r7, #12]
 800c61e:	2b00      	cmp	r3, #0
 800c620:	d009      	beq.n	800c636 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800c622:	2208      	movs	r2, #8
 800c624:	4909      	ldr	r1, [pc, #36]	; (800c64c <Get_SerialNum+0x50>)
 800c626:	68f8      	ldr	r0, [r7, #12]
 800c628:	f000 f814 	bl	800c654 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800c62c:	2204      	movs	r2, #4
 800c62e:	4908      	ldr	r1, [pc, #32]	; (800c650 <Get_SerialNum+0x54>)
 800c630:	68b8      	ldr	r0, [r7, #8]
 800c632:	f000 f80f 	bl	800c654 <IntToUnicode>
  }
}
 800c636:	bf00      	nop
 800c638:	3710      	adds	r7, #16
 800c63a:	46bd      	mov	sp, r7
 800c63c:	bd80      	pop	{r7, pc}
 800c63e:	bf00      	nop
 800c640:	1fff7a10 	.word	0x1fff7a10
 800c644:	1fff7a14 	.word	0x1fff7a14
 800c648:	1fff7a18 	.word	0x1fff7a18
 800c64c:	20000566 	.word	0x20000566
 800c650:	20000576 	.word	0x20000576

0800c654 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800c654:	b480      	push	{r7}
 800c656:	b087      	sub	sp, #28
 800c658:	af00      	add	r7, sp, #0
 800c65a:	60f8      	str	r0, [r7, #12]
 800c65c:	60b9      	str	r1, [r7, #8]
 800c65e:	4613      	mov	r3, r2
 800c660:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800c662:	2300      	movs	r3, #0
 800c664:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800c666:	2300      	movs	r3, #0
 800c668:	75fb      	strb	r3, [r7, #23]
 800c66a:	e027      	b.n	800c6bc <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800c66c:	68fb      	ldr	r3, [r7, #12]
 800c66e:	0f1b      	lsrs	r3, r3, #28
 800c670:	2b09      	cmp	r3, #9
 800c672:	d80b      	bhi.n	800c68c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800c674:	68fb      	ldr	r3, [r7, #12]
 800c676:	0f1b      	lsrs	r3, r3, #28
 800c678:	b2da      	uxtb	r2, r3
 800c67a:	7dfb      	ldrb	r3, [r7, #23]
 800c67c:	005b      	lsls	r3, r3, #1
 800c67e:	4619      	mov	r1, r3
 800c680:	68bb      	ldr	r3, [r7, #8]
 800c682:	440b      	add	r3, r1
 800c684:	3230      	adds	r2, #48	; 0x30
 800c686:	b2d2      	uxtb	r2, r2
 800c688:	701a      	strb	r2, [r3, #0]
 800c68a:	e00a      	b.n	800c6a2 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800c68c:	68fb      	ldr	r3, [r7, #12]
 800c68e:	0f1b      	lsrs	r3, r3, #28
 800c690:	b2da      	uxtb	r2, r3
 800c692:	7dfb      	ldrb	r3, [r7, #23]
 800c694:	005b      	lsls	r3, r3, #1
 800c696:	4619      	mov	r1, r3
 800c698:	68bb      	ldr	r3, [r7, #8]
 800c69a:	440b      	add	r3, r1
 800c69c:	3237      	adds	r2, #55	; 0x37
 800c69e:	b2d2      	uxtb	r2, r2
 800c6a0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800c6a2:	68fb      	ldr	r3, [r7, #12]
 800c6a4:	011b      	lsls	r3, r3, #4
 800c6a6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800c6a8:	7dfb      	ldrb	r3, [r7, #23]
 800c6aa:	005b      	lsls	r3, r3, #1
 800c6ac:	3301      	adds	r3, #1
 800c6ae:	68ba      	ldr	r2, [r7, #8]
 800c6b0:	4413      	add	r3, r2
 800c6b2:	2200      	movs	r2, #0
 800c6b4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800c6b6:	7dfb      	ldrb	r3, [r7, #23]
 800c6b8:	3301      	adds	r3, #1
 800c6ba:	75fb      	strb	r3, [r7, #23]
 800c6bc:	7dfa      	ldrb	r2, [r7, #23]
 800c6be:	79fb      	ldrb	r3, [r7, #7]
 800c6c0:	429a      	cmp	r2, r3
 800c6c2:	d3d3      	bcc.n	800c66c <IntToUnicode+0x18>
  }
}
 800c6c4:	bf00      	nop
 800c6c6:	371c      	adds	r7, #28
 800c6c8:	46bd      	mov	sp, r7
 800c6ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6ce:	4770      	bx	lr

0800c6d0 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800c6d0:	b580      	push	{r7, lr}
 800c6d2:	b08a      	sub	sp, #40	; 0x28
 800c6d4:	af00      	add	r7, sp, #0
 800c6d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c6d8:	f107 0314 	add.w	r3, r7, #20
 800c6dc:	2200      	movs	r2, #0
 800c6de:	601a      	str	r2, [r3, #0]
 800c6e0:	605a      	str	r2, [r3, #4]
 800c6e2:	609a      	str	r2, [r3, #8]
 800c6e4:	60da      	str	r2, [r3, #12]
 800c6e6:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800c6e8:	687b      	ldr	r3, [r7, #4]
 800c6ea:	681b      	ldr	r3, [r3, #0]
 800c6ec:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800c6f0:	d147      	bne.n	800c782 <HAL_PCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800c6f2:	2300      	movs	r3, #0
 800c6f4:	613b      	str	r3, [r7, #16]
 800c6f6:	4b25      	ldr	r3, [pc, #148]	; (800c78c <HAL_PCD_MspInit+0xbc>)
 800c6f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c6fa:	4a24      	ldr	r2, [pc, #144]	; (800c78c <HAL_PCD_MspInit+0xbc>)
 800c6fc:	f043 0301 	orr.w	r3, r3, #1
 800c700:	6313      	str	r3, [r2, #48]	; 0x30
 800c702:	4b22      	ldr	r3, [pc, #136]	; (800c78c <HAL_PCD_MspInit+0xbc>)
 800c704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c706:	f003 0301 	and.w	r3, r3, #1
 800c70a:	613b      	str	r3, [r7, #16]
 800c70c:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800c70e:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c712:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800c714:	2300      	movs	r3, #0
 800c716:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c718:	2300      	movs	r3, #0
 800c71a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800c71c:	f107 0314 	add.w	r3, r7, #20
 800c720:	4619      	mov	r1, r3
 800c722:	481b      	ldr	r0, [pc, #108]	; (800c790 <HAL_PCD_MspInit+0xc0>)
 800c724:	f7f6 fea2 	bl	800346c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800c728:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800c72c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c72e:	2302      	movs	r3, #2
 800c730:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c732:	2300      	movs	r3, #0
 800c734:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800c736:	2303      	movs	r3, #3
 800c738:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800c73a:	230a      	movs	r3, #10
 800c73c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c73e:	f107 0314 	add.w	r3, r7, #20
 800c742:	4619      	mov	r1, r3
 800c744:	4812      	ldr	r0, [pc, #72]	; (800c790 <HAL_PCD_MspInit+0xc0>)
 800c746:	f7f6 fe91 	bl	800346c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800c74a:	4b10      	ldr	r3, [pc, #64]	; (800c78c <HAL_PCD_MspInit+0xbc>)
 800c74c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c74e:	4a0f      	ldr	r2, [pc, #60]	; (800c78c <HAL_PCD_MspInit+0xbc>)
 800c750:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c754:	6353      	str	r3, [r2, #52]	; 0x34
 800c756:	2300      	movs	r3, #0
 800c758:	60fb      	str	r3, [r7, #12]
 800c75a:	4b0c      	ldr	r3, [pc, #48]	; (800c78c <HAL_PCD_MspInit+0xbc>)
 800c75c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c75e:	4a0b      	ldr	r2, [pc, #44]	; (800c78c <HAL_PCD_MspInit+0xbc>)
 800c760:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800c764:	6453      	str	r3, [r2, #68]	; 0x44
 800c766:	4b09      	ldr	r3, [pc, #36]	; (800c78c <HAL_PCD_MspInit+0xbc>)
 800c768:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c76a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c76e:	60fb      	str	r3, [r7, #12]
 800c770:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800c772:	2200      	movs	r2, #0
 800c774:	2100      	movs	r1, #0
 800c776:	2043      	movs	r0, #67	; 0x43
 800c778:	f7f6 f914 	bl	80029a4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800c77c:	2043      	movs	r0, #67	; 0x43
 800c77e:	f7f6 f93d 	bl	80029fc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800c782:	bf00      	nop
 800c784:	3728      	adds	r7, #40	; 0x28
 800c786:	46bd      	mov	sp, r7
 800c788:	bd80      	pop	{r7, pc}
 800c78a:	bf00      	nop
 800c78c:	40023800 	.word	0x40023800
 800c790:	40020000 	.word	0x40020000

0800c794 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c794:	b580      	push	{r7, lr}
 800c796:	b082      	sub	sp, #8
 800c798:	af00      	add	r7, sp, #0
 800c79a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800c79c:	687b      	ldr	r3, [r7, #4]
 800c79e:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 800c7a2:	687b      	ldr	r3, [r7, #4]
 800c7a4:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800c7a8:	4619      	mov	r1, r3
 800c7aa:	4610      	mov	r0, r2
 800c7ac:	f7fe fd24 	bl	800b1f8 <USBD_LL_SetupStage>
}
 800c7b0:	bf00      	nop
 800c7b2:	3708      	adds	r7, #8
 800c7b4:	46bd      	mov	sp, r7
 800c7b6:	bd80      	pop	{r7, pc}

0800c7b8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c7b8:	b580      	push	{r7, lr}
 800c7ba:	b082      	sub	sp, #8
 800c7bc:	af00      	add	r7, sp, #0
 800c7be:	6078      	str	r0, [r7, #4]
 800c7c0:	460b      	mov	r3, r1
 800c7c2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800c7c4:	687b      	ldr	r3, [r7, #4]
 800c7c6:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800c7ca:	78fa      	ldrb	r2, [r7, #3]
 800c7cc:	6879      	ldr	r1, [r7, #4]
 800c7ce:	4613      	mov	r3, r2
 800c7d0:	00db      	lsls	r3, r3, #3
 800c7d2:	1a9b      	subs	r3, r3, r2
 800c7d4:	009b      	lsls	r3, r3, #2
 800c7d6:	440b      	add	r3, r1
 800c7d8:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800c7dc:	681a      	ldr	r2, [r3, #0]
 800c7de:	78fb      	ldrb	r3, [r7, #3]
 800c7e0:	4619      	mov	r1, r3
 800c7e2:	f7fe fd5c 	bl	800b29e <USBD_LL_DataOutStage>
}
 800c7e6:	bf00      	nop
 800c7e8:	3708      	adds	r7, #8
 800c7ea:	46bd      	mov	sp, r7
 800c7ec:	bd80      	pop	{r7, pc}

0800c7ee <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c7ee:	b580      	push	{r7, lr}
 800c7f0:	b082      	sub	sp, #8
 800c7f2:	af00      	add	r7, sp, #0
 800c7f4:	6078      	str	r0, [r7, #4]
 800c7f6:	460b      	mov	r3, r1
 800c7f8:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800c7fa:	687b      	ldr	r3, [r7, #4]
 800c7fc:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800c800:	78fa      	ldrb	r2, [r7, #3]
 800c802:	6879      	ldr	r1, [r7, #4]
 800c804:	4613      	mov	r3, r2
 800c806:	00db      	lsls	r3, r3, #3
 800c808:	1a9b      	subs	r3, r3, r2
 800c80a:	009b      	lsls	r3, r3, #2
 800c80c:	440b      	add	r3, r1
 800c80e:	3348      	adds	r3, #72	; 0x48
 800c810:	681a      	ldr	r2, [r3, #0]
 800c812:	78fb      	ldrb	r3, [r7, #3]
 800c814:	4619      	mov	r1, r3
 800c816:	f7fe fda5 	bl	800b364 <USBD_LL_DataInStage>
}
 800c81a:	bf00      	nop
 800c81c:	3708      	adds	r7, #8
 800c81e:	46bd      	mov	sp, r7
 800c820:	bd80      	pop	{r7, pc}

0800c822 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c822:	b580      	push	{r7, lr}
 800c824:	b082      	sub	sp, #8
 800c826:	af00      	add	r7, sp, #0
 800c828:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800c82a:	687b      	ldr	r3, [r7, #4]
 800c82c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800c830:	4618      	mov	r0, r3
 800c832:	f7fe fea9 	bl	800b588 <USBD_LL_SOF>
}
 800c836:	bf00      	nop
 800c838:	3708      	adds	r7, #8
 800c83a:	46bd      	mov	sp, r7
 800c83c:	bd80      	pop	{r7, pc}

0800c83e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c83e:	b580      	push	{r7, lr}
 800c840:	b084      	sub	sp, #16
 800c842:	af00      	add	r7, sp, #0
 800c844:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800c846:	2301      	movs	r3, #1
 800c848:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800c84a:	687b      	ldr	r3, [r7, #4]
 800c84c:	68db      	ldr	r3, [r3, #12]
 800c84e:	2b02      	cmp	r3, #2
 800c850:	d001      	beq.n	800c856 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800c852:	f7f5 fcab 	bl	80021ac <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800c856:	687b      	ldr	r3, [r7, #4]
 800c858:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800c85c:	7bfa      	ldrb	r2, [r7, #15]
 800c85e:	4611      	mov	r1, r2
 800c860:	4618      	mov	r0, r3
 800c862:	f7fe fe56 	bl	800b512 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800c866:	687b      	ldr	r3, [r7, #4]
 800c868:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800c86c:	4618      	mov	r0, r3
 800c86e:	f7fe fe0f 	bl	800b490 <USBD_LL_Reset>
}
 800c872:	bf00      	nop
 800c874:	3710      	adds	r7, #16
 800c876:	46bd      	mov	sp, r7
 800c878:	bd80      	pop	{r7, pc}
	...

0800c87c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c87c:	b580      	push	{r7, lr}
 800c87e:	b082      	sub	sp, #8
 800c880:	af00      	add	r7, sp, #0
 800c882:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800c884:	687b      	ldr	r3, [r7, #4]
 800c886:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800c88a:	4618      	mov	r0, r3
 800c88c:	f7fe fe51 	bl	800b532 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800c890:	687b      	ldr	r3, [r7, #4]
 800c892:	681b      	ldr	r3, [r3, #0]
 800c894:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800c898:	681b      	ldr	r3, [r3, #0]
 800c89a:	687a      	ldr	r2, [r7, #4]
 800c89c:	6812      	ldr	r2, [r2, #0]
 800c89e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800c8a2:	f043 0301 	orr.w	r3, r3, #1
 800c8a6:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800c8a8:	687b      	ldr	r3, [r7, #4]
 800c8aa:	6a1b      	ldr	r3, [r3, #32]
 800c8ac:	2b00      	cmp	r3, #0
 800c8ae:	d005      	beq.n	800c8bc <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800c8b0:	4b04      	ldr	r3, [pc, #16]	; (800c8c4 <HAL_PCD_SuspendCallback+0x48>)
 800c8b2:	691b      	ldr	r3, [r3, #16]
 800c8b4:	4a03      	ldr	r2, [pc, #12]	; (800c8c4 <HAL_PCD_SuspendCallback+0x48>)
 800c8b6:	f043 0306 	orr.w	r3, r3, #6
 800c8ba:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800c8bc:	bf00      	nop
 800c8be:	3708      	adds	r7, #8
 800c8c0:	46bd      	mov	sp, r7
 800c8c2:	bd80      	pop	{r7, pc}
 800c8c4:	e000ed00 	.word	0xe000ed00

0800c8c8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c8c8:	b580      	push	{r7, lr}
 800c8ca:	b082      	sub	sp, #8
 800c8cc:	af00      	add	r7, sp, #0
 800c8ce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800c8d0:	687b      	ldr	r3, [r7, #4]
 800c8d2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800c8d6:	4618      	mov	r0, r3
 800c8d8:	f7fe fe40 	bl	800b55c <USBD_LL_Resume>
}
 800c8dc:	bf00      	nop
 800c8de:	3708      	adds	r7, #8
 800c8e0:	46bd      	mov	sp, r7
 800c8e2:	bd80      	pop	{r7, pc}

0800c8e4 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c8e4:	b580      	push	{r7, lr}
 800c8e6:	b082      	sub	sp, #8
 800c8e8:	af00      	add	r7, sp, #0
 800c8ea:	6078      	str	r0, [r7, #4]
 800c8ec:	460b      	mov	r3, r1
 800c8ee:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800c8f0:	687b      	ldr	r3, [r7, #4]
 800c8f2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800c8f6:	78fa      	ldrb	r2, [r7, #3]
 800c8f8:	4611      	mov	r1, r2
 800c8fa:	4618      	mov	r0, r3
 800c8fc:	f7fe fe6b 	bl	800b5d6 <USBD_LL_IsoOUTIncomplete>
}
 800c900:	bf00      	nop
 800c902:	3708      	adds	r7, #8
 800c904:	46bd      	mov	sp, r7
 800c906:	bd80      	pop	{r7, pc}

0800c908 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c908:	b580      	push	{r7, lr}
 800c90a:	b082      	sub	sp, #8
 800c90c:	af00      	add	r7, sp, #0
 800c90e:	6078      	str	r0, [r7, #4]
 800c910:	460b      	mov	r3, r1
 800c912:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800c914:	687b      	ldr	r3, [r7, #4]
 800c916:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800c91a:	78fa      	ldrb	r2, [r7, #3]
 800c91c:	4611      	mov	r1, r2
 800c91e:	4618      	mov	r0, r3
 800c920:	f7fe fe4c 	bl	800b5bc <USBD_LL_IsoINIncomplete>
}
 800c924:	bf00      	nop
 800c926:	3708      	adds	r7, #8
 800c928:	46bd      	mov	sp, r7
 800c92a:	bd80      	pop	{r7, pc}

0800c92c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c92c:	b580      	push	{r7, lr}
 800c92e:	b082      	sub	sp, #8
 800c930:	af00      	add	r7, sp, #0
 800c932:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800c934:	687b      	ldr	r3, [r7, #4]
 800c936:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800c93a:	4618      	mov	r0, r3
 800c93c:	f7fe fe58 	bl	800b5f0 <USBD_LL_DevConnected>
}
 800c940:	bf00      	nop
 800c942:	3708      	adds	r7, #8
 800c944:	46bd      	mov	sp, r7
 800c946:	bd80      	pop	{r7, pc}

0800c948 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c948:	b580      	push	{r7, lr}
 800c94a:	b082      	sub	sp, #8
 800c94c:	af00      	add	r7, sp, #0
 800c94e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800c950:	687b      	ldr	r3, [r7, #4]
 800c952:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800c956:	4618      	mov	r0, r3
 800c958:	f7fe fe55 	bl	800b606 <USBD_LL_DevDisconnected>
}
 800c95c:	bf00      	nop
 800c95e:	3708      	adds	r7, #8
 800c960:	46bd      	mov	sp, r7
 800c962:	bd80      	pop	{r7, pc}

0800c964 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800c964:	b580      	push	{r7, lr}
 800c966:	b082      	sub	sp, #8
 800c968:	af00      	add	r7, sp, #0
 800c96a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800c96c:	687b      	ldr	r3, [r7, #4]
 800c96e:	781b      	ldrb	r3, [r3, #0]
 800c970:	2b00      	cmp	r3, #0
 800c972:	d13c      	bne.n	800c9ee <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800c974:	4a20      	ldr	r2, [pc, #128]	; (800c9f8 <USBD_LL_Init+0x94>)
 800c976:	687b      	ldr	r3, [r7, #4]
 800c978:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 800c97c:	687b      	ldr	r3, [r7, #4]
 800c97e:	4a1e      	ldr	r2, [pc, #120]	; (800c9f8 <USBD_LL_Init+0x94>)
 800c980:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800c984:	4b1c      	ldr	r3, [pc, #112]	; (800c9f8 <USBD_LL_Init+0x94>)
 800c986:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800c98a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800c98c:	4b1a      	ldr	r3, [pc, #104]	; (800c9f8 <USBD_LL_Init+0x94>)
 800c98e:	2204      	movs	r2, #4
 800c990:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800c992:	4b19      	ldr	r3, [pc, #100]	; (800c9f8 <USBD_LL_Init+0x94>)
 800c994:	2202      	movs	r2, #2
 800c996:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800c998:	4b17      	ldr	r3, [pc, #92]	; (800c9f8 <USBD_LL_Init+0x94>)
 800c99a:	2200      	movs	r2, #0
 800c99c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800c99e:	4b16      	ldr	r3, [pc, #88]	; (800c9f8 <USBD_LL_Init+0x94>)
 800c9a0:	2202      	movs	r2, #2
 800c9a2:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800c9a4:	4b14      	ldr	r3, [pc, #80]	; (800c9f8 <USBD_LL_Init+0x94>)
 800c9a6:	2200      	movs	r2, #0
 800c9a8:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800c9aa:	4b13      	ldr	r3, [pc, #76]	; (800c9f8 <USBD_LL_Init+0x94>)
 800c9ac:	2200      	movs	r2, #0
 800c9ae:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800c9b0:	4b11      	ldr	r3, [pc, #68]	; (800c9f8 <USBD_LL_Init+0x94>)
 800c9b2:	2200      	movs	r2, #0
 800c9b4:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800c9b6:	4b10      	ldr	r3, [pc, #64]	; (800c9f8 <USBD_LL_Init+0x94>)
 800c9b8:	2201      	movs	r2, #1
 800c9ba:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800c9bc:	4b0e      	ldr	r3, [pc, #56]	; (800c9f8 <USBD_LL_Init+0x94>)
 800c9be:	2200      	movs	r2, #0
 800c9c0:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800c9c2:	480d      	ldr	r0, [pc, #52]	; (800c9f8 <USBD_LL_Init+0x94>)
 800c9c4:	f7f8 ffa8 	bl	8005918 <HAL_PCD_Init>
 800c9c8:	4603      	mov	r3, r0
 800c9ca:	2b00      	cmp	r3, #0
 800c9cc:	d001      	beq.n	800c9d2 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800c9ce:	f7f5 fbed 	bl	80021ac <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800c9d2:	2180      	movs	r1, #128	; 0x80
 800c9d4:	4808      	ldr	r0, [pc, #32]	; (800c9f8 <USBD_LL_Init+0x94>)
 800c9d6:	f7fa f910 	bl	8006bfa <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800c9da:	2240      	movs	r2, #64	; 0x40
 800c9dc:	2100      	movs	r1, #0
 800c9de:	4806      	ldr	r0, [pc, #24]	; (800c9f8 <USBD_LL_Init+0x94>)
 800c9e0:	f7fa f8c4 	bl	8006b6c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800c9e4:	2280      	movs	r2, #128	; 0x80
 800c9e6:	2101      	movs	r1, #1
 800c9e8:	4803      	ldr	r0, [pc, #12]	; (800c9f8 <USBD_LL_Init+0x94>)
 800c9ea:	f7fa f8bf 	bl	8006b6c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800c9ee:	2300      	movs	r3, #0
}
 800c9f0:	4618      	mov	r0, r3
 800c9f2:	3708      	adds	r7, #8
 800c9f4:	46bd      	mov	sp, r7
 800c9f6:	bd80      	pop	{r7, pc}
 800c9f8:	200048a0 	.word	0x200048a0

0800c9fc <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800c9fc:	b580      	push	{r7, lr}
 800c9fe:	b084      	sub	sp, #16
 800ca00:	af00      	add	r7, sp, #0
 800ca02:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ca04:	2300      	movs	r3, #0
 800ca06:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ca08:	2300      	movs	r3, #0
 800ca0a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800ca0c:	687b      	ldr	r3, [r7, #4]
 800ca0e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800ca12:	4618      	mov	r0, r3
 800ca14:	f7f9 f8a8 	bl	8005b68 <HAL_PCD_Start>
 800ca18:	4603      	mov	r3, r0
 800ca1a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ca1c:	7bfb      	ldrb	r3, [r7, #15]
 800ca1e:	4618      	mov	r0, r3
 800ca20:	f000 f92a 	bl	800cc78 <USBD_Get_USB_Status>
 800ca24:	4603      	mov	r3, r0
 800ca26:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ca28:	7bbb      	ldrb	r3, [r7, #14]
}
 800ca2a:	4618      	mov	r0, r3
 800ca2c:	3710      	adds	r7, #16
 800ca2e:	46bd      	mov	sp, r7
 800ca30:	bd80      	pop	{r7, pc}

0800ca32 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800ca32:	b580      	push	{r7, lr}
 800ca34:	b084      	sub	sp, #16
 800ca36:	af00      	add	r7, sp, #0
 800ca38:	6078      	str	r0, [r7, #4]
 800ca3a:	4608      	mov	r0, r1
 800ca3c:	4611      	mov	r1, r2
 800ca3e:	461a      	mov	r2, r3
 800ca40:	4603      	mov	r3, r0
 800ca42:	70fb      	strb	r3, [r7, #3]
 800ca44:	460b      	mov	r3, r1
 800ca46:	70bb      	strb	r3, [r7, #2]
 800ca48:	4613      	mov	r3, r2
 800ca4a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ca4c:	2300      	movs	r3, #0
 800ca4e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ca50:	2300      	movs	r3, #0
 800ca52:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800ca54:	687b      	ldr	r3, [r7, #4]
 800ca56:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800ca5a:	78bb      	ldrb	r3, [r7, #2]
 800ca5c:	883a      	ldrh	r2, [r7, #0]
 800ca5e:	78f9      	ldrb	r1, [r7, #3]
 800ca60:	f7f9 fc8c 	bl	800637c <HAL_PCD_EP_Open>
 800ca64:	4603      	mov	r3, r0
 800ca66:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ca68:	7bfb      	ldrb	r3, [r7, #15]
 800ca6a:	4618      	mov	r0, r3
 800ca6c:	f000 f904 	bl	800cc78 <USBD_Get_USB_Status>
 800ca70:	4603      	mov	r3, r0
 800ca72:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ca74:	7bbb      	ldrb	r3, [r7, #14]
}
 800ca76:	4618      	mov	r0, r3
 800ca78:	3710      	adds	r7, #16
 800ca7a:	46bd      	mov	sp, r7
 800ca7c:	bd80      	pop	{r7, pc}

0800ca7e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ca7e:	b580      	push	{r7, lr}
 800ca80:	b084      	sub	sp, #16
 800ca82:	af00      	add	r7, sp, #0
 800ca84:	6078      	str	r0, [r7, #4]
 800ca86:	460b      	mov	r3, r1
 800ca88:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ca8a:	2300      	movs	r3, #0
 800ca8c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ca8e:	2300      	movs	r3, #0
 800ca90:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800ca92:	687b      	ldr	r3, [r7, #4]
 800ca94:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800ca98:	78fa      	ldrb	r2, [r7, #3]
 800ca9a:	4611      	mov	r1, r2
 800ca9c:	4618      	mov	r0, r3
 800ca9e:	f7f9 fcd5 	bl	800644c <HAL_PCD_EP_Close>
 800caa2:	4603      	mov	r3, r0
 800caa4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800caa6:	7bfb      	ldrb	r3, [r7, #15]
 800caa8:	4618      	mov	r0, r3
 800caaa:	f000 f8e5 	bl	800cc78 <USBD_Get_USB_Status>
 800caae:	4603      	mov	r3, r0
 800cab0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cab2:	7bbb      	ldrb	r3, [r7, #14]
}
 800cab4:	4618      	mov	r0, r3
 800cab6:	3710      	adds	r7, #16
 800cab8:	46bd      	mov	sp, r7
 800caba:	bd80      	pop	{r7, pc}

0800cabc <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cabc:	b580      	push	{r7, lr}
 800cabe:	b084      	sub	sp, #16
 800cac0:	af00      	add	r7, sp, #0
 800cac2:	6078      	str	r0, [r7, #4]
 800cac4:	460b      	mov	r3, r1
 800cac6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cac8:	2300      	movs	r3, #0
 800caca:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cacc:	2300      	movs	r3, #0
 800cace:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800cad0:	687b      	ldr	r3, [r7, #4]
 800cad2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800cad6:	78fa      	ldrb	r2, [r7, #3]
 800cad8:	4611      	mov	r1, r2
 800cada:	4618      	mov	r0, r3
 800cadc:	f7f9 fdad 	bl	800663a <HAL_PCD_EP_SetStall>
 800cae0:	4603      	mov	r3, r0
 800cae2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cae4:	7bfb      	ldrb	r3, [r7, #15]
 800cae6:	4618      	mov	r0, r3
 800cae8:	f000 f8c6 	bl	800cc78 <USBD_Get_USB_Status>
 800caec:	4603      	mov	r3, r0
 800caee:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800caf0:	7bbb      	ldrb	r3, [r7, #14]
}
 800caf2:	4618      	mov	r0, r3
 800caf4:	3710      	adds	r7, #16
 800caf6:	46bd      	mov	sp, r7
 800caf8:	bd80      	pop	{r7, pc}

0800cafa <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cafa:	b580      	push	{r7, lr}
 800cafc:	b084      	sub	sp, #16
 800cafe:	af00      	add	r7, sp, #0
 800cb00:	6078      	str	r0, [r7, #4]
 800cb02:	460b      	mov	r3, r1
 800cb04:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cb06:	2300      	movs	r3, #0
 800cb08:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cb0a:	2300      	movs	r3, #0
 800cb0c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800cb0e:	687b      	ldr	r3, [r7, #4]
 800cb10:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800cb14:	78fa      	ldrb	r2, [r7, #3]
 800cb16:	4611      	mov	r1, r2
 800cb18:	4618      	mov	r0, r3
 800cb1a:	f7f9 fdf2 	bl	8006702 <HAL_PCD_EP_ClrStall>
 800cb1e:	4603      	mov	r3, r0
 800cb20:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cb22:	7bfb      	ldrb	r3, [r7, #15]
 800cb24:	4618      	mov	r0, r3
 800cb26:	f000 f8a7 	bl	800cc78 <USBD_Get_USB_Status>
 800cb2a:	4603      	mov	r3, r0
 800cb2c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cb2e:	7bbb      	ldrb	r3, [r7, #14]
}
 800cb30:	4618      	mov	r0, r3
 800cb32:	3710      	adds	r7, #16
 800cb34:	46bd      	mov	sp, r7
 800cb36:	bd80      	pop	{r7, pc}

0800cb38 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cb38:	b480      	push	{r7}
 800cb3a:	b085      	sub	sp, #20
 800cb3c:	af00      	add	r7, sp, #0
 800cb3e:	6078      	str	r0, [r7, #4]
 800cb40:	460b      	mov	r3, r1
 800cb42:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800cb44:	687b      	ldr	r3, [r7, #4]
 800cb46:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800cb4a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800cb4c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800cb50:	2b00      	cmp	r3, #0
 800cb52:	da0b      	bge.n	800cb6c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800cb54:	78fb      	ldrb	r3, [r7, #3]
 800cb56:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800cb5a:	68f9      	ldr	r1, [r7, #12]
 800cb5c:	4613      	mov	r3, r2
 800cb5e:	00db      	lsls	r3, r3, #3
 800cb60:	1a9b      	subs	r3, r3, r2
 800cb62:	009b      	lsls	r3, r3, #2
 800cb64:	440b      	add	r3, r1
 800cb66:	333e      	adds	r3, #62	; 0x3e
 800cb68:	781b      	ldrb	r3, [r3, #0]
 800cb6a:	e00b      	b.n	800cb84 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800cb6c:	78fb      	ldrb	r3, [r7, #3]
 800cb6e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800cb72:	68f9      	ldr	r1, [r7, #12]
 800cb74:	4613      	mov	r3, r2
 800cb76:	00db      	lsls	r3, r3, #3
 800cb78:	1a9b      	subs	r3, r3, r2
 800cb7a:	009b      	lsls	r3, r3, #2
 800cb7c:	440b      	add	r3, r1
 800cb7e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800cb82:	781b      	ldrb	r3, [r3, #0]
  }
}
 800cb84:	4618      	mov	r0, r3
 800cb86:	3714      	adds	r7, #20
 800cb88:	46bd      	mov	sp, r7
 800cb8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb8e:	4770      	bx	lr

0800cb90 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800cb90:	b580      	push	{r7, lr}
 800cb92:	b084      	sub	sp, #16
 800cb94:	af00      	add	r7, sp, #0
 800cb96:	6078      	str	r0, [r7, #4]
 800cb98:	460b      	mov	r3, r1
 800cb9a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cb9c:	2300      	movs	r3, #0
 800cb9e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cba0:	2300      	movs	r3, #0
 800cba2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800cba4:	687b      	ldr	r3, [r7, #4]
 800cba6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800cbaa:	78fa      	ldrb	r2, [r7, #3]
 800cbac:	4611      	mov	r1, r2
 800cbae:	4618      	mov	r0, r3
 800cbb0:	f7f9 fbbf 	bl	8006332 <HAL_PCD_SetAddress>
 800cbb4:	4603      	mov	r3, r0
 800cbb6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cbb8:	7bfb      	ldrb	r3, [r7, #15]
 800cbba:	4618      	mov	r0, r3
 800cbbc:	f000 f85c 	bl	800cc78 <USBD_Get_USB_Status>
 800cbc0:	4603      	mov	r3, r0
 800cbc2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cbc4:	7bbb      	ldrb	r3, [r7, #14]
}
 800cbc6:	4618      	mov	r0, r3
 800cbc8:	3710      	adds	r7, #16
 800cbca:	46bd      	mov	sp, r7
 800cbcc:	bd80      	pop	{r7, pc}

0800cbce <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800cbce:	b580      	push	{r7, lr}
 800cbd0:	b086      	sub	sp, #24
 800cbd2:	af00      	add	r7, sp, #0
 800cbd4:	60f8      	str	r0, [r7, #12]
 800cbd6:	607a      	str	r2, [r7, #4]
 800cbd8:	603b      	str	r3, [r7, #0]
 800cbda:	460b      	mov	r3, r1
 800cbdc:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cbde:	2300      	movs	r3, #0
 800cbe0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cbe2:	2300      	movs	r3, #0
 800cbe4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800cbe6:	68fb      	ldr	r3, [r7, #12]
 800cbe8:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800cbec:	7af9      	ldrb	r1, [r7, #11]
 800cbee:	683b      	ldr	r3, [r7, #0]
 800cbf0:	687a      	ldr	r2, [r7, #4]
 800cbf2:	f7f9 fcd8 	bl	80065a6 <HAL_PCD_EP_Transmit>
 800cbf6:	4603      	mov	r3, r0
 800cbf8:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cbfa:	7dfb      	ldrb	r3, [r7, #23]
 800cbfc:	4618      	mov	r0, r3
 800cbfe:	f000 f83b 	bl	800cc78 <USBD_Get_USB_Status>
 800cc02:	4603      	mov	r3, r0
 800cc04:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800cc06:	7dbb      	ldrb	r3, [r7, #22]
}
 800cc08:	4618      	mov	r0, r3
 800cc0a:	3718      	adds	r7, #24
 800cc0c:	46bd      	mov	sp, r7
 800cc0e:	bd80      	pop	{r7, pc}

0800cc10 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800cc10:	b580      	push	{r7, lr}
 800cc12:	b086      	sub	sp, #24
 800cc14:	af00      	add	r7, sp, #0
 800cc16:	60f8      	str	r0, [r7, #12]
 800cc18:	607a      	str	r2, [r7, #4]
 800cc1a:	603b      	str	r3, [r7, #0]
 800cc1c:	460b      	mov	r3, r1
 800cc1e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cc20:	2300      	movs	r3, #0
 800cc22:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cc24:	2300      	movs	r3, #0
 800cc26:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800cc28:	68fb      	ldr	r3, [r7, #12]
 800cc2a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800cc2e:	7af9      	ldrb	r1, [r7, #11]
 800cc30:	683b      	ldr	r3, [r7, #0]
 800cc32:	687a      	ldr	r2, [r7, #4]
 800cc34:	f7f9 fc54 	bl	80064e0 <HAL_PCD_EP_Receive>
 800cc38:	4603      	mov	r3, r0
 800cc3a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cc3c:	7dfb      	ldrb	r3, [r7, #23]
 800cc3e:	4618      	mov	r0, r3
 800cc40:	f000 f81a 	bl	800cc78 <USBD_Get_USB_Status>
 800cc44:	4603      	mov	r3, r0
 800cc46:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800cc48:	7dbb      	ldrb	r3, [r7, #22]
}
 800cc4a:	4618      	mov	r0, r3
 800cc4c:	3718      	adds	r7, #24
 800cc4e:	46bd      	mov	sp, r7
 800cc50:	bd80      	pop	{r7, pc}

0800cc52 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cc52:	b580      	push	{r7, lr}
 800cc54:	b082      	sub	sp, #8
 800cc56:	af00      	add	r7, sp, #0
 800cc58:	6078      	str	r0, [r7, #4]
 800cc5a:	460b      	mov	r3, r1
 800cc5c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800cc5e:	687b      	ldr	r3, [r7, #4]
 800cc60:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800cc64:	78fa      	ldrb	r2, [r7, #3]
 800cc66:	4611      	mov	r1, r2
 800cc68:	4618      	mov	r0, r3
 800cc6a:	f7f9 fc84 	bl	8006576 <HAL_PCD_EP_GetRxCount>
 800cc6e:	4603      	mov	r3, r0
}
 800cc70:	4618      	mov	r0, r3
 800cc72:	3708      	adds	r7, #8
 800cc74:	46bd      	mov	sp, r7
 800cc76:	bd80      	pop	{r7, pc}

0800cc78 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800cc78:	b480      	push	{r7}
 800cc7a:	b085      	sub	sp, #20
 800cc7c:	af00      	add	r7, sp, #0
 800cc7e:	4603      	mov	r3, r0
 800cc80:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cc82:	2300      	movs	r3, #0
 800cc84:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800cc86:	79fb      	ldrb	r3, [r7, #7]
 800cc88:	2b03      	cmp	r3, #3
 800cc8a:	d817      	bhi.n	800ccbc <USBD_Get_USB_Status+0x44>
 800cc8c:	a201      	add	r2, pc, #4	; (adr r2, 800cc94 <USBD_Get_USB_Status+0x1c>)
 800cc8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cc92:	bf00      	nop
 800cc94:	0800cca5 	.word	0x0800cca5
 800cc98:	0800ccab 	.word	0x0800ccab
 800cc9c:	0800ccb1 	.word	0x0800ccb1
 800cca0:	0800ccb7 	.word	0x0800ccb7
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800cca4:	2300      	movs	r3, #0
 800cca6:	73fb      	strb	r3, [r7, #15]
    break;
 800cca8:	e00b      	b.n	800ccc2 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800ccaa:	2303      	movs	r3, #3
 800ccac:	73fb      	strb	r3, [r7, #15]
    break;
 800ccae:	e008      	b.n	800ccc2 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800ccb0:	2301      	movs	r3, #1
 800ccb2:	73fb      	strb	r3, [r7, #15]
    break;
 800ccb4:	e005      	b.n	800ccc2 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800ccb6:	2303      	movs	r3, #3
 800ccb8:	73fb      	strb	r3, [r7, #15]
    break;
 800ccba:	e002      	b.n	800ccc2 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800ccbc:	2303      	movs	r3, #3
 800ccbe:	73fb      	strb	r3, [r7, #15]
    break;
 800ccc0:	bf00      	nop
  }
  return usb_status;
 800ccc2:	7bfb      	ldrb	r3, [r7, #15]
}
 800ccc4:	4618      	mov	r0, r3
 800ccc6:	3714      	adds	r7, #20
 800ccc8:	46bd      	mov	sp, r7
 800ccca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccce:	4770      	bx	lr

0800ccd0 <D16_GENERIC>:
 800ccd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ccd4:	b089      	sub	sp, #36	; 0x24
 800ccd6:	68d4      	ldr	r4, [r2, #12]
 800ccd8:	8cd5      	ldrh	r5, [r2, #38]	; 0x26
 800ccda:	6993      	ldr	r3, [r2, #24]
 800ccdc:	9407      	str	r4, [sp, #28]
 800ccde:	6b14      	ldr	r4, [r2, #48]	; 0x30
 800cce0:	9306      	str	r3, [sp, #24]
 800cce2:	9402      	str	r4, [sp, #8]
 800cce4:	f8d2 a010 	ldr.w	sl, [r2, #16]
 800cce8:	f8d2 b014 	ldr.w	fp, [r2, #20]
 800ccec:	69d3      	ldr	r3, [r2, #28]
 800ccee:	6896      	ldr	r6, [r2, #8]
 800ccf0:	6b54      	ldr	r4, [r2, #52]	; 0x34
 800ccf2:	9103      	str	r1, [sp, #12]
 800ccf4:	2d00      	cmp	r5, #0
 800ccf6:	d066      	beq.n	800cdc6 <D16_GENERIC+0xf6>
 800ccf8:	f004 0510 	and.w	r5, r4, #16
 800ccfc:	f004 0420 	and.w	r4, r4, #32
 800cd00:	9504      	str	r5, [sp, #16]
 800cd02:	4938      	ldr	r1, [pc, #224]	; (800cde4 <D16_GENERIC+0x114>)
 800cd04:	9405      	str	r4, [sp, #20]
 800cd06:	f04f 0e00 	mov.w	lr, #0
 800cd0a:	4635      	mov	r5, r6
 800cd0c:	e04f      	b.n	800cdae <D16_GENERIC+0xde>
 800cd0e:	5d87      	ldrb	r7, [r0, r6]
 800cd10:	7804      	ldrb	r4, [r0, #0]
 800cd12:	eb00 0046 	add.w	r0, r0, r6, lsl #1
 800cd16:	eb04 2407 	add.w	r4, r4, r7, lsl #8
 800cd1a:	b2e6      	uxtb	r6, r4
 800cd1c:	f3c4 2407 	ubfx	r4, r4, #8, #8
 800cd20:	f851 6026 	ldr.w	r6, [r1, r6, lsl #2]
 800cd24:	f851 4024 	ldr.w	r4, [r1, r4, lsl #2]
 800cd28:	4433      	add	r3, r6
 800cd2a:	eb04 2493 	add.w	r4, r4, r3, lsr #10
 800cd2e:	f3c4 0609 	ubfx	r6, r4, #0, #10
 800cd32:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800cd36:	ea46 4603 	orr.w	r6, r6, r3, lsl #16
 800cd3a:	0aa3      	lsrs	r3, r4, #10
 800cd3c:	4c2a      	ldr	r4, [pc, #168]	; (800cde8 <D16_GENERIC+0x118>)
 800cd3e:	fb26 5404 	smlad	r4, r6, r4, r5
 800cd42:	4d2a      	ldr	r5, [pc, #168]	; (800cdec <D16_GENERIC+0x11c>)
 800cd44:	fb26 f505 	smuad	r5, r6, r5
 800cd48:	f5a4 6400 	sub.w	r4, r4, #2048	; 0x800
 800cd4c:	eb04 080a 	add.w	r8, r4, sl
 800cd50:	eba8 080b 	sub.w	r8, r8, fp
 800cd54:	4646      	mov	r6, r8
 800cd56:	17f7      	asrs	r7, r6, #31
 800cd58:	e9cd 6700 	strd	r6, r7, [sp]
 800cd5c:	9e04      	ldr	r6, [sp, #16]
 800cd5e:	f10e 0c01 	add.w	ip, lr, #1
 800cd62:	b16e      	cbz	r6, 800cd80 <D16_GENERIC+0xb0>
 800cd64:	6a16      	ldr	r6, [r2, #32]
 800cd66:	9f01      	ldr	r7, [sp, #4]
 800cd68:	fba8 8906 	umull	r8, r9, r8, r6
 800cd6c:	fb06 9907 	mla	r9, r6, r7, r9
 800cd70:	f118 4800 	adds.w	r8, r8, #2147483648	; 0x80000000
 800cd74:	f149 0900 	adc.w	r9, r9, #0
 800cd78:	ea4f 0a49 	mov.w	sl, r9, lsl #1
 800cd7c:	46a3      	mov	fp, r4
 800cd7e:	4654      	mov	r4, sl
 800cd80:	8d16      	ldrh	r6, [r2, #40]	; 0x28
 800cd82:	9f02      	ldr	r7, [sp, #8]
 800cd84:	0424      	lsls	r4, r4, #16
 800cd86:	f04f 4800 	mov.w	r8, #2147483648	; 0x80000000
 800cd8a:	f04f 0900 	mov.w	r9, #0
 800cd8e:	fb0e fe06 	mul.w	lr, lr, r6
 800cd92:	fbc7 8904 	smlal	r8, r9, r7, r4
 800cd96:	9e03      	ldr	r6, [sp, #12]
 800cd98:	464f      	mov	r7, r9
 800cd9a:	10bc      	asrs	r4, r7, #2
 800cd9c:	f304 040f 	ssat	r4, #16, r4
 800cda0:	f826 401e 	strh.w	r4, [r6, lr, lsl #1]
 800cda4:	8cd4      	ldrh	r4, [r2, #38]	; 0x26
 800cda6:	fa1f fe8c 	uxth.w	lr, ip
 800cdaa:	4574      	cmp	r4, lr
 800cdac:	d90a      	bls.n	800cdc4 <D16_GENERIC+0xf4>
 800cdae:	8d54      	ldrh	r4, [r2, #42]	; 0x2a
 800cdb0:	2c01      	cmp	r4, #1
 800cdb2:	b2e6      	uxtb	r6, r4
 800cdb4:	d1ab      	bne.n	800cd0e <D16_GENERIC+0x3e>
 800cdb6:	9e05      	ldr	r6, [sp, #20]
 800cdb8:	f850 4b02 	ldr.w	r4, [r0], #2
 800cdbc:	2e00      	cmp	r6, #0
 800cdbe:	d0ac      	beq.n	800cd1a <D16_GENERIC+0x4a>
 800cdc0:	ba64      	rev16	r4, r4
 800cdc2:	e7aa      	b.n	800cd1a <D16_GENERIC+0x4a>
 800cdc4:	462e      	mov	r6, r5
 800cdc6:	9907      	ldr	r1, [sp, #28]
 800cdc8:	61d3      	str	r3, [r2, #28]
 800cdca:	9b06      	ldr	r3, [sp, #24]
 800cdcc:	6096      	str	r6, [r2, #8]
 800cdce:	2000      	movs	r0, #0
 800cdd0:	60d1      	str	r1, [r2, #12]
 800cdd2:	f8c2 a010 	str.w	sl, [r2, #16]
 800cdd6:	f8c2 b014 	str.w	fp, [r2, #20]
 800cdda:	6193      	str	r3, [r2, #24]
 800cddc:	b009      	add	sp, #36	; 0x24
 800cdde:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cde2:	bf00      	nop
 800cde4:	20000000 	.word	0x20000000
 800cde8:	00030001 	.word	0x00030001
 800cdec:	00010003 	.word	0x00010003

0800cdf0 <D24_GENERIC>:
 800cdf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cdf4:	8cd6      	ldrh	r6, [r2, #38]	; 0x26
 800cdf6:	6993      	ldr	r3, [r2, #24]
 800cdf8:	6b15      	ldr	r5, [r2, #48]	; 0x30
 800cdfa:	f8d2 a010 	ldr.w	sl, [r2, #16]
 800cdfe:	f8d2 9014 	ldr.w	r9, [r2, #20]
 800ce02:	6894      	ldr	r4, [r2, #8]
 800ce04:	f8d2 b00c 	ldr.w	fp, [r2, #12]
 800ce08:	b089      	sub	sp, #36	; 0x24
 800ce0a:	9307      	str	r3, [sp, #28]
 800ce0c:	9503      	str	r5, [sp, #12]
 800ce0e:	69d3      	ldr	r3, [r2, #28]
 800ce10:	6b55      	ldr	r5, [r2, #52]	; 0x34
 800ce12:	9104      	str	r1, [sp, #16]
 800ce14:	2e00      	cmp	r6, #0
 800ce16:	f000 8096 	beq.w	800cf46 <D24_GENERIC+0x156>
 800ce1a:	f005 0610 	and.w	r6, r5, #16
 800ce1e:	f005 0520 	and.w	r5, r5, #32
 800ce22:	4954      	ldr	r1, [pc, #336]	; (800cf74 <D24_GENERIC+0x184>)
 800ce24:	9605      	str	r6, [sp, #20]
 800ce26:	9506      	str	r5, [sp, #24]
 800ce28:	f04f 0e00 	mov.w	lr, #0
 800ce2c:	f8cd 9008 	str.w	r9, [sp, #8]
 800ce30:	e06a      	b.n	800cf08 <D24_GENERIC+0x118>
 800ce32:	f810 5016 	ldrb.w	r5, [r0, r6, lsl #1]
 800ce36:	f810 8007 	ldrb.w	r8, [r0, r7]
 800ce3a:	f890 c000 	ldrb.w	ip, [r0]
 800ce3e:	042d      	lsls	r5, r5, #16
 800ce40:	eb00 0046 	add.w	r0, r0, r6, lsl #1
 800ce44:	eb05 2508 	add.w	r5, r5, r8, lsl #8
 800ce48:	44ac      	add	ip, r5
 800ce4a:	4438      	add	r0, r7
 800ce4c:	fa5f f68c 	uxtb.w	r6, ip
 800ce50:	f3cc 2507 	ubfx	r5, ip, #8, #8
 800ce54:	f851 6026 	ldr.w	r6, [r1, r6, lsl #2]
 800ce58:	f851 7025 	ldr.w	r7, [r1, r5, lsl #2]
 800ce5c:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800ce60:	eb06 2693 	add.w	r6, r6, r3, lsr #10
 800ce64:	eb07 2796 	add.w	r7, r7, r6, lsr #10
 800ce68:	f851 302c 	ldr.w	r3, [r1, ip, lsl #2]
 800ce6c:	f3c7 0509 	ubfx	r5, r7, #0, #10
 800ce70:	f3c6 0609 	ubfx	r6, r6, #0, #10
 800ce74:	ea45 4606 	orr.w	r6, r5, r6, lsl #16
 800ce78:	eb03 2397 	add.w	r3, r3, r7, lsr #10
 800ce7c:	4d3e      	ldr	r5, [pc, #248]	; (800cf78 <D24_GENERIC+0x188>)
 800ce7e:	fb26 b705 	smlad	r7, r6, r5, fp
 800ce82:	4d3e      	ldr	r5, [pc, #248]	; (800cf7c <D24_GENERIC+0x18c>)
 800ce84:	fb26 4b05 	smlad	fp, r6, r5, r4
 800ce88:	f3c3 0409 	ubfx	r4, r3, #0, #10
 800ce8c:	eb04 0844 	add.w	r8, r4, r4, lsl #1
 800ce90:	eb0b 0b48 	add.w	fp, fp, r8, lsl #1
 800ce94:	2401      	movs	r4, #1
 800ce96:	fb26 f604 	smuad	r6, r6, r4
 800ce9a:	f5a7 55d8 	sub.w	r5, r7, #6912	; 0x1b00
 800ce9e:	9f02      	ldr	r7, [sp, #8]
 800cea0:	eb0e 0c04 	add.w	ip, lr, r4
 800cea4:	eb08 0406 	add.w	r4, r8, r6
 800cea8:	eb05 060a 	add.w	r6, r5, sl
 800ceac:	1bf6      	subs	r6, r6, r7
 800ceae:	4637      	mov	r7, r6
 800ceb0:	ea4f 78e6 	mov.w	r8, r6, asr #31
 800ceb4:	e9cd 7800 	strd	r7, r8, [sp]
 800ceb8:	9f05      	ldr	r7, [sp, #20]
 800ceba:	b177      	cbz	r7, 800ceda <D24_GENERIC+0xea>
 800cebc:	f8d2 8020 	ldr.w	r8, [r2, #32]
 800cec0:	9502      	str	r5, [sp, #8]
 800cec2:	fba6 9a08 	umull	r9, sl, r6, r8
 800cec6:	9e01      	ldr	r6, [sp, #4]
 800cec8:	fb08 aa06 	mla	sl, r8, r6, sl
 800cecc:	f119 4600 	adds.w	r6, r9, #2147483648	; 0x80000000
 800ced0:	f14a 0700 	adc.w	r7, sl, #0
 800ced4:	ea4f 0a47 	mov.w	sl, r7, lsl #1
 800ced8:	4655      	mov	r5, sl
 800ceda:	8d16      	ldrh	r6, [r2, #40]	; 0x28
 800cedc:	9f03      	ldr	r7, [sp, #12]
 800cede:	03ad      	lsls	r5, r5, #14
 800cee0:	f04f 4800 	mov.w	r8, #2147483648	; 0x80000000
 800cee4:	f04f 0900 	mov.w	r9, #0
 800cee8:	fb0e fe06 	mul.w	lr, lr, r6
 800ceec:	fbc7 8905 	smlal	r8, r9, r7, r5
 800cef0:	9e04      	ldr	r6, [sp, #16]
 800cef2:	464f      	mov	r7, r9
 800cef4:	10bd      	asrs	r5, r7, #2
 800cef6:	f305 050f 	ssat	r5, #16, r5
 800cefa:	f826 501e 	strh.w	r5, [r6, lr, lsl #1]
 800cefe:	8cd5      	ldrh	r5, [r2, #38]	; 0x26
 800cf00:	fa1f fe8c 	uxth.w	lr, ip
 800cf04:	4575      	cmp	r5, lr
 800cf06:	d91c      	bls.n	800cf42 <D24_GENERIC+0x152>
 800cf08:	8d55      	ldrh	r5, [r2, #42]	; 0x2a
 800cf0a:	b2ef      	uxtb	r7, r5
 800cf0c:	2d01      	cmp	r5, #1
 800cf0e:	b23e      	sxth	r6, r7
 800cf10:	d18f      	bne.n	800ce32 <D24_GENERIC+0x42>
 800cf12:	9d06      	ldr	r5, [sp, #24]
 800cf14:	b15d      	cbz	r5, 800cf2e <D24_GENERIC+0x13e>
 800cf16:	f01e 0f01 	tst.w	lr, #1
 800cf1a:	d122      	bne.n	800cf62 <D24_GENERIC+0x172>
 800cf1c:	7805      	ldrb	r5, [r0, #0]
 800cf1e:	78c7      	ldrb	r7, [r0, #3]
 800cf20:	7846      	ldrb	r6, [r0, #1]
 800cf22:	022d      	lsls	r5, r5, #8
 800cf24:	eb05 4c07 	add.w	ip, r5, r7, lsl #16
 800cf28:	44b4      	add	ip, r6
 800cf2a:	3002      	adds	r0, #2
 800cf2c:	e78e      	b.n	800ce4c <D24_GENERIC+0x5c>
 800cf2e:	7846      	ldrb	r6, [r0, #1]
 800cf30:	f890 c002 	ldrb.w	ip, [r0, #2]
 800cf34:	f810 5b03 	ldrb.w	r5, [r0], #3
 800cf38:	0236      	lsls	r6, r6, #8
 800cf3a:	eb06 4c0c 	add.w	ip, r6, ip, lsl #16
 800cf3e:	44ac      	add	ip, r5
 800cf40:	e784      	b.n	800ce4c <D24_GENERIC+0x5c>
 800cf42:	f8dd 9008 	ldr.w	r9, [sp, #8]
 800cf46:	61d3      	str	r3, [r2, #28]
 800cf48:	9b07      	ldr	r3, [sp, #28]
 800cf4a:	6094      	str	r4, [r2, #8]
 800cf4c:	2000      	movs	r0, #0
 800cf4e:	f8c2 b00c 	str.w	fp, [r2, #12]
 800cf52:	f8c2 a010 	str.w	sl, [r2, #16]
 800cf56:	f8c2 9014 	str.w	r9, [r2, #20]
 800cf5a:	6193      	str	r3, [r2, #24]
 800cf5c:	b009      	add	sp, #36	; 0x24
 800cf5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cf62:	78c5      	ldrb	r5, [r0, #3]
 800cf64:	7887      	ldrb	r7, [r0, #2]
 800cf66:	f810 6b04 	ldrb.w	r6, [r0], #4
 800cf6a:	022d      	lsls	r5, r5, #8
 800cf6c:	eb05 4c07 	add.w	ip, r5, r7, lsl #16
 800cf70:	44b4      	add	ip, r6
 800cf72:	e76b      	b.n	800ce4c <D24_GENERIC+0x5c>
 800cf74:	20000000 	.word	0x20000000
 800cf78:	00030001 	.word	0x00030001
 800cf7c:	00060007 	.word	0x00060007

0800cf80 <D32_GENERIC>:
 800cf80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cf84:	8cd5      	ldrh	r5, [r2, #38]	; 0x26
 800cf86:	6993      	ldr	r3, [r2, #24]
 800cf88:	6b14      	ldr	r4, [r2, #48]	; 0x30
 800cf8a:	f8d2 a010 	ldr.w	sl, [r2, #16]
 800cf8e:	f8d2 9014 	ldr.w	r9, [r2, #20]
 800cf92:	69d6      	ldr	r6, [r2, #28]
 800cf94:	f8d2 b00c 	ldr.w	fp, [r2, #12]
 800cf98:	b089      	sub	sp, #36	; 0x24
 800cf9a:	9307      	str	r3, [sp, #28]
 800cf9c:	9403      	str	r4, [sp, #12]
 800cf9e:	6893      	ldr	r3, [r2, #8]
 800cfa0:	6b54      	ldr	r4, [r2, #52]	; 0x34
 800cfa2:	9104      	str	r1, [sp, #16]
 800cfa4:	2d00      	cmp	r5, #0
 800cfa6:	f000 809f 	beq.w	800d0e8 <D32_GENERIC+0x168>
 800cfaa:	f004 0510 	and.w	r5, r4, #16
 800cfae:	f004 0420 	and.w	r4, r4, #32
 800cfb2:	9505      	str	r5, [sp, #20]
 800cfb4:	4953      	ldr	r1, [pc, #332]	; (800d104 <D32_GENERIC+0x184>)
 800cfb6:	9406      	str	r4, [sp, #24]
 800cfb8:	f04f 0c00 	mov.w	ip, #0
 800cfbc:	f8cd 9008 	str.w	r9, [sp, #8]
 800cfc0:	461d      	mov	r5, r3
 800cfc2:	4617      	mov	r7, r2
 800cfc4:	e077      	b.n	800d0b6 <D32_GENERIC+0x136>
 800cfc6:	f818 3003 	ldrb.w	r3, [r8, r3]
 800cfca:	f810 800e 	ldrb.w	r8, [r0, lr]
 800cfce:	f810 e002 	ldrb.w	lr, [r0, r2]
 800cfd2:	7800      	ldrb	r0, [r0, #0]
 800cfd4:	041b      	lsls	r3, r3, #16
 800cfd6:	eb03 6308 	add.w	r3, r3, r8, lsl #24
 800cfda:	eb03 230e 	add.w	r3, r3, lr, lsl #8
 800cfde:	4403      	add	r3, r0
 800cfe0:	eb04 0042 	add.w	r0, r4, r2, lsl #1
 800cfe4:	b2dc      	uxtb	r4, r3
 800cfe6:	f3c3 2207 	ubfx	r2, r3, #8, #8
 800cfea:	f3c3 4807 	ubfx	r8, r3, #16, #8
 800cfee:	f851 4024 	ldr.w	r4, [r1, r4, lsl #2]
 800cff2:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800cff6:	0e1b      	lsrs	r3, r3, #24
 800cff8:	eb04 2496 	add.w	r4, r4, r6, lsr #10
 800cffc:	f851 6028 	ldr.w	r6, [r1, r8, lsl #2]
 800d000:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800d004:	eb02 2294 	add.w	r2, r2, r4, lsr #10
 800d008:	eb06 2e92 	add.w	lr, r6, r2, lsr #10
 800d00c:	eb03 269e 	add.w	r6, r3, lr, lsr #10
 800d010:	f3c6 0309 	ubfx	r3, r6, #0, #10
 800d014:	f3c4 0409 	ubfx	r4, r4, #0, #10
 800d018:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800d01c:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 800d020:	ea43 4e0e 	orr.w	lr, r3, lr, lsl #16
 800d024:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800d028:	4b37      	ldr	r3, [pc, #220]	; (800d108 <D32_GENERIC+0x188>)
 800d02a:	fb22 b403 	smlad	r4, r2, r3, fp
 800d02e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800d032:	fb2e 4803 	smlad	r8, lr, r3, r4
 800d036:	4b35      	ldr	r3, [pc, #212]	; (800d10c <D32_GENERIC+0x18c>)
 800d038:	fb22 5503 	smlad	r5, r2, r3, r5
 800d03c:	4b34      	ldr	r3, [pc, #208]	; (800d110 <D32_GENERIC+0x190>)
 800d03e:	fb2e 5b03 	smlad	fp, lr, r3, r5
 800d042:	2301      	movs	r3, #1
 800d044:	fb22 f203 	smuad	r2, r2, r3
 800d048:	4b32      	ldr	r3, [pc, #200]	; (800d114 <D32_GENERIC+0x194>)
 800d04a:	fb2e 2503 	smlad	r5, lr, r3, r2
 800d04e:	9b02      	ldr	r3, [sp, #8]
 800d050:	f5a8 4480 	sub.w	r4, r8, #16384	; 0x4000
 800d054:	eb04 080a 	add.w	r8, r4, sl
 800d058:	eba8 0803 	sub.w	r8, r8, r3
 800d05c:	4642      	mov	r2, r8
 800d05e:	17d3      	asrs	r3, r2, #31
 800d060:	e9cd 2300 	strd	r2, r3, [sp]
 800d064:	9b05      	ldr	r3, [sp, #20]
 800d066:	f10c 0e01 	add.w	lr, ip, #1
 800d06a:	b16b      	cbz	r3, 800d088 <D32_GENERIC+0x108>
 800d06c:	6a3a      	ldr	r2, [r7, #32]
 800d06e:	9b01      	ldr	r3, [sp, #4]
 800d070:	9402      	str	r4, [sp, #8]
 800d072:	fba8 8902 	umull	r8, r9, r8, r2
 800d076:	fb02 9903 	mla	r9, r2, r3, r9
 800d07a:	f118 4800 	adds.w	r8, r8, #2147483648	; 0x80000000
 800d07e:	f149 0900 	adc.w	r9, r9, #0
 800d082:	ea4f 0a49 	mov.w	sl, r9, lsl #1
 800d086:	4654      	mov	r4, sl
 800d088:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800d08a:	9a04      	ldr	r2, [sp, #16]
 800d08c:	fb0c fc03 	mul.w	ip, ip, r3
 800d090:	9b03      	ldr	r3, [sp, #12]
 800d092:	0364      	lsls	r4, r4, #13
 800d094:	f04f 4800 	mov.w	r8, #2147483648	; 0x80000000
 800d098:	f04f 0900 	mov.w	r9, #0
 800d09c:	fbc3 8904 	smlal	r8, r9, r3, r4
 800d0a0:	464b      	mov	r3, r9
 800d0a2:	109b      	asrs	r3, r3, #2
 800d0a4:	f303 030f 	ssat	r3, #16, r3
 800d0a8:	f822 301c 	strh.w	r3, [r2, ip, lsl #1]
 800d0ac:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800d0ae:	fa1f fc8e 	uxth.w	ip, lr
 800d0b2:	4563      	cmp	r3, ip
 800d0b4:	d914      	bls.n	800d0e0 <D32_GENERIC+0x160>
 800d0b6:	8d7c      	ldrh	r4, [r7, #42]	; 0x2a
 800d0b8:	b2e2      	uxtb	r2, r4
 800d0ba:	eb02 0e42 	add.w	lr, r2, r2, lsl #1
 800d0be:	eb00 080e 	add.w	r8, r0, lr
 800d0c2:	4253      	negs	r3, r2
 800d0c4:	2c01      	cmp	r4, #1
 800d0c6:	eb08 0403 	add.w	r4, r8, r3
 800d0ca:	f47f af7c 	bne.w	800cfc6 <D32_GENERIC+0x46>
 800d0ce:	1d02      	adds	r2, r0, #4
 800d0d0:	6803      	ldr	r3, [r0, #0]
 800d0d2:	9806      	ldr	r0, [sp, #24]
 800d0d4:	b110      	cbz	r0, 800d0dc <D32_GENERIC+0x15c>
 800d0d6:	ba5b      	rev16	r3, r3
 800d0d8:	4610      	mov	r0, r2
 800d0da:	e783      	b.n	800cfe4 <D32_GENERIC+0x64>
 800d0dc:	4610      	mov	r0, r2
 800d0de:	e781      	b.n	800cfe4 <D32_GENERIC+0x64>
 800d0e0:	f8dd 9008 	ldr.w	r9, [sp, #8]
 800d0e4:	462b      	mov	r3, r5
 800d0e6:	463a      	mov	r2, r7
 800d0e8:	6093      	str	r3, [r2, #8]
 800d0ea:	9b07      	ldr	r3, [sp, #28]
 800d0ec:	f8c2 b00c 	str.w	fp, [r2, #12]
 800d0f0:	2000      	movs	r0, #0
 800d0f2:	61d6      	str	r6, [r2, #28]
 800d0f4:	f8c2 a010 	str.w	sl, [r2, #16]
 800d0f8:	f8c2 9014 	str.w	r9, [r2, #20]
 800d0fc:	6193      	str	r3, [r2, #24]
 800d0fe:	b009      	add	sp, #36	; 0x24
 800d100:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d104:	20000000 	.word	0x20000000
 800d108:	00060003 	.word	0x00060003
 800d10c:	000a000c 	.word	0x000a000c
 800d110:	000c000a 	.word	0x000c000a
 800d114:	00030006 	.word	0x00030006

0800d118 <D48_GENERIC>:
 800d118:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d11c:	b089      	sub	sp, #36	; 0x24
 800d11e:	6953      	ldr	r3, [r2, #20]
 800d120:	68d4      	ldr	r4, [r2, #12]
 800d122:	8cd5      	ldrh	r5, [r2, #38]	; 0x26
 800d124:	9302      	str	r3, [sp, #8]
 800d126:	9400      	str	r4, [sp, #0]
 800d128:	6993      	ldr	r3, [r2, #24]
 800d12a:	6b14      	ldr	r4, [r2, #48]	; 0x30
 800d12c:	9307      	str	r3, [sp, #28]
 800d12e:	9403      	str	r4, [sp, #12]
 800d130:	f8d2 a010 	ldr.w	sl, [r2, #16]
 800d134:	69d6      	ldr	r6, [r2, #28]
 800d136:	6893      	ldr	r3, [r2, #8]
 800d138:	6b54      	ldr	r4, [r2, #52]	; 0x34
 800d13a:	9104      	str	r1, [sp, #16]
 800d13c:	2d00      	cmp	r5, #0
 800d13e:	f000 80c5 	beq.w	800d2cc <D48_GENERIC+0x1b4>
 800d142:	f004 0510 	and.w	r5, r4, #16
 800d146:	f004 0420 	and.w	r4, r4, #32
 800d14a:	4967      	ldr	r1, [pc, #412]	; (800d2e8 <D48_GENERIC+0x1d0>)
 800d14c:	9505      	str	r5, [sp, #20]
 800d14e:	9406      	str	r4, [sp, #24]
 800d150:	f04f 0c00 	mov.w	ip, #0
 800d154:	4657      	mov	r7, sl
 800d156:	9301      	str	r3, [sp, #4]
 800d158:	e09c      	b.n	800d294 <D48_GENERIC+0x17c>
 800d15a:	f81b 4005 	ldrb.w	r4, [fp, r5]
 800d15e:	f810 b009 	ldrb.w	fp, [r0, r9]
 800d162:	f81a 9009 	ldrb.w	r9, [sl, r9]
 800d166:	f810 a00e 	ldrb.w	sl, [r0, lr]
 800d16a:	7800      	ldrb	r0, [r0, #0]
 800d16c:	0424      	lsls	r4, r4, #16
 800d16e:	eb04 6b0b 	add.w	fp, r4, fp, lsl #24
 800d172:	f818 4005 	ldrb.w	r4, [r8, r5]
 800d176:	eb0b 2b0a 	add.w	fp, fp, sl, lsl #8
 800d17a:	44a8      	add	r8, r5
 800d17c:	eb04 2409 	add.w	r4, r4, r9, lsl #8
 800d180:	eb0b 0500 	add.w	r5, fp, r0
 800d184:	eb08 004e 	add.w	r0, r8, lr, lsl #1
 800d188:	fa5f f885 	uxtb.w	r8, r5
 800d18c:	f3c5 2e07 	ubfx	lr, r5, #8, #8
 800d190:	f851 a028 	ldr.w	sl, [r1, r8, lsl #2]
 800d194:	f851 902e 	ldr.w	r9, [r1, lr, lsl #2]
 800d198:	f3c5 4e07 	ubfx	lr, r5, #16, #8
 800d19c:	0e2d      	lsrs	r5, r5, #24
 800d19e:	eb0a 2a96 	add.w	sl, sl, r6, lsr #10
 800d1a2:	f851 802e 	ldr.w	r8, [r1, lr, lsl #2]
 800d1a6:	f851 e025 	ldr.w	lr, [r1, r5, lsl #2]
 800d1aa:	b2e6      	uxtb	r6, r4
 800d1ac:	eb09 259a 	add.w	r5, r9, sl, lsr #10
 800d1b0:	f3c4 2407 	ubfx	r4, r4, #8, #8
 800d1b4:	eb08 2895 	add.w	r8, r8, r5, lsr #10
 800d1b8:	f851 6026 	ldr.w	r6, [r1, r6, lsl #2]
 800d1bc:	f851 9024 	ldr.w	r9, [r1, r4, lsl #2]
 800d1c0:	eb0e 2498 	add.w	r4, lr, r8, lsr #10
 800d1c4:	eb06 2e94 	add.w	lr, r6, r4, lsr #10
 800d1c8:	eb09 269e 	add.w	r6, r9, lr, lsr #10
 800d1cc:	f3c5 0509 	ubfx	r5, r5, #0, #10
 800d1d0:	f3c4 0409 	ubfx	r4, r4, #0, #10
 800d1d4:	f3c6 0909 	ubfx	r9, r6, #0, #10
 800d1d8:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 800d1dc:	f3c8 0809 	ubfx	r8, r8, #0, #10
 800d1e0:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 800d1e4:	ea45 4a0a 	orr.w	sl, r5, sl, lsl #16
 800d1e8:	ea44 4808 	orr.w	r8, r4, r8, lsl #16
 800d1ec:	ea49 4e0e 	orr.w	lr, r9, lr, lsl #16
 800d1f0:	4c3e      	ldr	r4, [pc, #248]	; (800d2ec <D48_GENERIC+0x1d4>)
 800d1f2:	9d00      	ldr	r5, [sp, #0]
 800d1f4:	fb2a 5404 	smlad	r4, sl, r4, r5
 800d1f8:	4d3d      	ldr	r5, [pc, #244]	; (800d2f0 <D48_GENERIC+0x1d8>)
 800d1fa:	fb28 4405 	smlad	r4, r8, r5, r4
 800d1fe:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800d202:	fb2e 4b03 	smlad	fp, lr, r3, r4
 800d206:	4c3b      	ldr	r4, [pc, #236]	; (800d2f4 <D48_GENERIC+0x1dc>)
 800d208:	9b01      	ldr	r3, [sp, #4]
 800d20a:	fb2a 3304 	smlad	r3, sl, r4, r3
 800d20e:	f04f 141b 	mov.w	r4, #1769499	; 0x1b001b
 800d212:	fb28 3304 	smlad	r3, r8, r4, r3
 800d216:	4c38      	ldr	r4, [pc, #224]	; (800d2f8 <D48_GENERIC+0x1e0>)
 800d218:	fb2e 3304 	smlad	r3, lr, r4, r3
 800d21c:	2501      	movs	r5, #1
 800d21e:	9300      	str	r3, [sp, #0]
 800d220:	fb2a fa05 	smuad	sl, sl, r5
 800d224:	4b35      	ldr	r3, [pc, #212]	; (800d2fc <D48_GENERIC+0x1e4>)
 800d226:	fb28 a803 	smlad	r8, r8, r3, sl
 800d22a:	4b35      	ldr	r3, [pc, #212]	; (800d300 <D48_GENERIC+0x1e8>)
 800d22c:	fb2e 8303 	smlad	r3, lr, r3, r8
 800d230:	f5ab 4458 	sub.w	r4, fp, #55296	; 0xd800
 800d234:	9301      	str	r3, [sp, #4]
 800d236:	9b02      	ldr	r3, [sp, #8]
 800d238:	eb04 0807 	add.w	r8, r4, r7
 800d23c:	eba8 0803 	sub.w	r8, r8, r3
 800d240:	9b05      	ldr	r3, [sp, #20]
 800d242:	4465      	add	r5, ip
 800d244:	ea4f 7be8 	mov.w	fp, r8, asr #31
 800d248:	b163      	cbz	r3, 800d264 <D48_GENERIC+0x14c>
 800d24a:	6a17      	ldr	r7, [r2, #32]
 800d24c:	9402      	str	r4, [sp, #8]
 800d24e:	fba8 8907 	umull	r8, r9, r8, r7
 800d252:	fb07 990b 	mla	r9, r7, fp, r9
 800d256:	f118 4800 	adds.w	r8, r8, #2147483648	; 0x80000000
 800d25a:	f149 0900 	adc.w	r9, r9, #0
 800d25e:	ea4f 0749 	mov.w	r7, r9, lsl #1
 800d262:	463c      	mov	r4, r7
 800d264:	f8b2 e028 	ldrh.w	lr, [r2, #40]	; 0x28
 800d268:	9b03      	ldr	r3, [sp, #12]
 800d26a:	02e4      	lsls	r4, r4, #11
 800d26c:	f04f 4800 	mov.w	r8, #2147483648	; 0x80000000
 800d270:	f04f 0900 	mov.w	r9, #0
 800d274:	fb0c fc0e 	mul.w	ip, ip, lr
 800d278:	fbc3 8904 	smlal	r8, r9, r3, r4
 800d27c:	9b04      	ldr	r3, [sp, #16]
 800d27e:	ea4f 04a9 	mov.w	r4, r9, asr #2
 800d282:	f304 040f 	ssat	r4, #16, r4
 800d286:	f823 401c 	strh.w	r4, [r3, ip, lsl #1]
 800d28a:	8cd4      	ldrh	r4, [r2, #38]	; 0x26
 800d28c:	fa1f fc85 	uxth.w	ip, r5
 800d290:	4564      	cmp	r4, ip
 800d292:	d919      	bls.n	800d2c8 <D48_GENERIC+0x1b0>
 800d294:	8d54      	ldrh	r4, [r2, #42]	; 0x2a
 800d296:	fa5f fe84 	uxtb.w	lr, r4
 800d29a:	eb0e 094e 	add.w	r9, lr, lr, lsl #1
 800d29e:	f1ce 0500 	rsb	r5, lr, #0
 800d2a2:	eb00 0b09 	add.w	fp, r0, r9
 800d2a6:	eb0b 0a05 	add.w	sl, fp, r5
 800d2aa:	2c01      	cmp	r4, #1
 800d2ac:	eb0a 0809 	add.w	r8, sl, r9
 800d2b0:	f47f af53 	bne.w	800d15a <D48_GENERIC+0x42>
 800d2b4:	9b06      	ldr	r3, [sp, #24]
 800d2b6:	6805      	ldr	r5, [r0, #0]
 800d2b8:	6844      	ldr	r4, [r0, #4]
 800d2ba:	3006      	adds	r0, #6
 800d2bc:	2b00      	cmp	r3, #0
 800d2be:	f43f af63 	beq.w	800d188 <D48_GENERIC+0x70>
 800d2c2:	ba6d      	rev16	r5, r5
 800d2c4:	ba64      	rev16	r4, r4
 800d2c6:	e75f      	b.n	800d188 <D48_GENERIC+0x70>
 800d2c8:	9b01      	ldr	r3, [sp, #4]
 800d2ca:	46ba      	mov	sl, r7
 800d2cc:	6093      	str	r3, [r2, #8]
 800d2ce:	9b00      	ldr	r3, [sp, #0]
 800d2d0:	60d3      	str	r3, [r2, #12]
 800d2d2:	9b02      	ldr	r3, [sp, #8]
 800d2d4:	6153      	str	r3, [r2, #20]
 800d2d6:	9b07      	ldr	r3, [sp, #28]
 800d2d8:	61d6      	str	r6, [r2, #28]
 800d2da:	2000      	movs	r0, #0
 800d2dc:	f8c2 a010 	str.w	sl, [r2, #16]
 800d2e0:	6193      	str	r3, [r2, #24]
 800d2e2:	b009      	add	sp, #36	; 0x24
 800d2e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d2e8:	20000000 	.word	0x20000000
 800d2ec:	000f000a 	.word	0x000f000a
 800d2f0:	00060003 	.word	0x00060003
 800d2f4:	00150019 	.word	0x00150019
 800d2f8:	00190015 	.word	0x00190015
 800d2fc:	00030006 	.word	0x00030006
 800d300:	000a000f 	.word	0x000a000f

0800d304 <D64_GENERIC>:
 800d304:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d308:	b089      	sub	sp, #36	; 0x24
 800d30a:	6913      	ldr	r3, [r2, #16]
 800d30c:	6895      	ldr	r5, [r2, #8]
 800d30e:	9303      	str	r3, [sp, #12]
 800d310:	9501      	str	r5, [sp, #4]
 800d312:	6953      	ldr	r3, [r2, #20]
 800d314:	68d5      	ldr	r5, [r2, #12]
 800d316:	8cd4      	ldrh	r4, [r2, #38]	; 0x26
 800d318:	9304      	str	r3, [sp, #16]
 800d31a:	9500      	str	r5, [sp, #0]
 800d31c:	6993      	ldr	r3, [r2, #24]
 800d31e:	6b15      	ldr	r5, [r2, #48]	; 0x30
 800d320:	9307      	str	r3, [sp, #28]
 800d322:	9505      	str	r5, [sp, #20]
 800d324:	69d3      	ldr	r3, [r2, #28]
 800d326:	9106      	str	r1, [sp, #24]
 800d328:	2c00      	cmp	r4, #0
 800d32a:	f000 80d9 	beq.w	800d4e0 <D64_GENERIC+0x1dc>
 800d32e:	6a11      	ldr	r1, [r2, #32]
 800d330:	9102      	str	r1, [sp, #8]
 800d332:	f8df e1ec 	ldr.w	lr, [pc, #492]	; 800d520 <D64_GENERIC+0x21c>
 800d336:	f04f 0c00 	mov.w	ip, #0
 800d33a:	4681      	mov	r9, r0
 800d33c:	e0c1      	b.n	800d4c2 <D64_GENERIC+0x1be>
 800d33e:	eb06 0846 	add.w	r8, r6, r6, lsl #1
 800d342:	4274      	negs	r4, r6
 800d344:	eb09 0708 	add.w	r7, r9, r8
 800d348:	eb07 0a44 	add.w	sl, r7, r4, lsl #1
 800d34c:	eb0a 0548 	add.w	r5, sl, r8, lsl #1
 800d350:	5d38      	ldrb	r0, [r7, r4]
 800d352:	5d29      	ldrb	r1, [r5, r4]
 800d354:	f81a b018 	ldrb.w	fp, [sl, r8, lsl #1]
 800d358:	f819 a008 	ldrb.w	sl, [r9, r8]
 800d35c:	f817 8014 	ldrb.w	r8, [r7, r4, lsl #1]
 800d360:	f899 7000 	ldrb.w	r7, [r9]
 800d364:	f815 9014 	ldrb.w	r9, [r5, r4, lsl #1]
 800d368:	4425      	add	r5, r4
 800d36a:	0409      	lsls	r1, r1, #16
 800d36c:	0400      	lsls	r0, r0, #16
 800d36e:	eb01 610b 	add.w	r1, r1, fp, lsl #24
 800d372:	eb00 600a 	add.w	r0, r0, sl, lsl #24
 800d376:	f815 b014 	ldrb.w	fp, [r5, r4, lsl #1]
 800d37a:	eb01 2109 	add.w	r1, r1, r9, lsl #8
 800d37e:	eb05 0444 	add.w	r4, r5, r4, lsl #1
 800d382:	eb00 2008 	add.w	r0, r0, r8, lsl #8
 800d386:	4459      	add	r1, fp
 800d388:	eb04 0986 	add.w	r9, r4, r6, lsl #2
 800d38c:	4438      	add	r0, r7
 800d38e:	b2c5      	uxtb	r5, r0
 800d390:	f3c0 2407 	ubfx	r4, r0, #8, #8
 800d394:	f85e 6025 	ldr.w	r6, [lr, r5, lsl #2]
 800d398:	f85e 5024 	ldr.w	r5, [lr, r4, lsl #2]
 800d39c:	f3c0 4407 	ubfx	r4, r0, #16, #8
 800d3a0:	0e00      	lsrs	r0, r0, #24
 800d3a2:	eb03 0806 	add.w	r8, r3, r6
 800d3a6:	f85e 7024 	ldr.w	r7, [lr, r4, lsl #2]
 800d3aa:	f85e 4020 	ldr.w	r4, [lr, r0, lsl #2]
 800d3ae:	f3c1 2307 	ubfx	r3, r1, #8, #8
 800d3b2:	b2c8      	uxtb	r0, r1
 800d3b4:	eb05 2598 	add.w	r5, r5, r8, lsr #10
 800d3b8:	eb07 2795 	add.w	r7, r7, r5, lsr #10
 800d3bc:	f85e 6020 	ldr.w	r6, [lr, r0, lsl #2]
 800d3c0:	f85e 0023 	ldr.w	r0, [lr, r3, lsl #2]
 800d3c4:	f3c1 4307 	ubfx	r3, r1, #16, #8
 800d3c8:	eb04 2497 	add.w	r4, r4, r7, lsr #10
 800d3cc:	0e09      	lsrs	r1, r1, #24
 800d3ce:	eb06 2694 	add.w	r6, r6, r4, lsr #10
 800d3d2:	f85e 3023 	ldr.w	r3, [lr, r3, lsl #2]
 800d3d6:	f85e 1021 	ldr.w	r1, [lr, r1, lsl #2]
 800d3da:	eb00 2096 	add.w	r0, r0, r6, lsr #10
 800d3de:	eb03 2a90 	add.w	sl, r3, r0, lsr #10
 800d3e2:	eb01 219a 	add.w	r1, r1, sl, lsr #10
 800d3e6:	f3ca 0309 	ubfx	r3, sl, #0, #10
 800d3ea:	f3c5 0509 	ubfx	r5, r5, #0, #10
 800d3ee:	f3c4 0409 	ubfx	r4, r4, #0, #10
 800d3f2:	f3c6 0609 	ubfx	r6, r6, #0, #10
 800d3f6:	f3c1 0a09 	ubfx	sl, r1, #0, #10
 800d3fa:	f3c8 0809 	ubfx	r8, r8, #0, #10
 800d3fe:	f3c7 0709 	ubfx	r7, r7, #0, #10
 800d402:	f3c0 0009 	ubfx	r0, r0, #0, #10
 800d406:	ea44 4707 	orr.w	r7, r4, r7, lsl #16
 800d40a:	ea4a 4a03 	orr.w	sl, sl, r3, lsl #16
 800d40e:	ea45 4808 	orr.w	r8, r5, r8, lsl #16
 800d412:	0a8b      	lsrs	r3, r1, #10
 800d414:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800d418:	4939      	ldr	r1, [pc, #228]	; (800d500 <D64_GENERIC+0x1fc>)
 800d41a:	9c00      	ldr	r4, [sp, #0]
 800d41c:	fb28 4101 	smlad	r1, r8, r1, r4
 800d420:	4c38      	ldr	r4, [pc, #224]	; (800d504 <D64_GENERIC+0x200>)
 800d422:	fb27 1104 	smlad	r1, r7, r4, r1
 800d426:	4c38      	ldr	r4, [pc, #224]	; (800d508 <D64_GENERIC+0x204>)
 800d428:	fb20 1104 	smlad	r1, r0, r4, r1
 800d42c:	f44f 3680 	mov.w	r6, #65536	; 0x10000
 800d430:	fb2a 1106 	smlad	r1, sl, r6, r1
 800d434:	4c35      	ldr	r4, [pc, #212]	; (800d50c <D64_GENERIC+0x208>)
 800d436:	9d01      	ldr	r5, [sp, #4]
 800d438:	fb28 5404 	smlad	r4, r8, r4, r5
 800d43c:	4d33      	ldr	r5, [pc, #204]	; (800d50c <D64_GENERIC+0x208>)
 800d43e:	fb2a 4415 	smladx	r4, sl, r5, r4
 800d442:	4d33      	ldr	r5, [pc, #204]	; (800d510 <D64_GENERIC+0x20c>)
 800d444:	fb27 4405 	smlad	r4, r7, r5, r4
 800d448:	fb20 4415 	smladx	r4, r0, r5, r4
 800d44c:	2501      	movs	r5, #1
 800d44e:	9400      	str	r4, [sp, #0]
 800d450:	fb28 f805 	smuad	r8, r8, r5
 800d454:	4c2f      	ldr	r4, [pc, #188]	; (800d514 <D64_GENERIC+0x210>)
 800d456:	fb27 8704 	smlad	r7, r7, r4, r8
 800d45a:	4c2f      	ldr	r4, [pc, #188]	; (800d518 <D64_GENERIC+0x214>)
 800d45c:	fb20 7004 	smlad	r0, r0, r4, r7
 800d460:	4c2e      	ldr	r4, [pc, #184]	; (800d51c <D64_GENERIC+0x218>)
 800d462:	fb2a 0004 	smlad	r0, sl, r4, r0
 800d466:	f5a1 3600 	sub.w	r6, r1, #131072	; 0x20000
 800d46a:	9902      	ldr	r1, [sp, #8]
 800d46c:	9001      	str	r0, [sp, #4]
 800d46e:	b189      	cbz	r1, 800d494 <D64_GENERIC+0x190>
 800d470:	9803      	ldr	r0, [sp, #12]
 800d472:	9c04      	ldr	r4, [sp, #16]
 800d474:	9604      	str	r6, [sp, #16]
 800d476:	4430      	add	r0, r6
 800d478:	1b00      	subs	r0, r0, r4
 800d47a:	17c5      	asrs	r5, r0, #31
 800d47c:	460f      	mov	r7, r1
 800d47e:	fba0 0101 	umull	r0, r1, r0, r1
 800d482:	fb07 1105 	mla	r1, r7, r5, r1
 800d486:	f110 4000 	adds.w	r0, r0, #2147483648	; 0x80000000
 800d48a:	f141 0100 	adc.w	r1, r1, #0
 800d48e:	0049      	lsls	r1, r1, #1
 800d490:	9103      	str	r1, [sp, #12]
 800d492:	460e      	mov	r6, r1
 800d494:	8d14      	ldrh	r4, [r2, #40]	; 0x28
 800d496:	9905      	ldr	r1, [sp, #20]
 800d498:	9806      	ldr	r0, [sp, #24]
 800d49a:	02b6      	lsls	r6, r6, #10
 800d49c:	f04f 4700 	mov.w	r7, #2147483648	; 0x80000000
 800d4a0:	f04f 0800 	mov.w	r8, #0
 800d4a4:	fb0c f404 	mul.w	r4, ip, r4
 800d4a8:	fbc1 7806 	smlal	r7, r8, r1, r6
 800d4ac:	4641      	mov	r1, r8
 800d4ae:	1089      	asrs	r1, r1, #2
 800d4b0:	f301 010f 	ssat	r1, #16, r1
 800d4b4:	f820 1014 	strh.w	r1, [r0, r4, lsl #1]
 800d4b8:	8cd1      	ldrh	r1, [r2, #38]	; 0x26
 800d4ba:	f10c 0c01 	add.w	ip, ip, #1
 800d4be:	4561      	cmp	r1, ip
 800d4c0:	dd0e      	ble.n	800d4e0 <D64_GENERIC+0x1dc>
 800d4c2:	8d56      	ldrh	r6, [r2, #42]	; 0x2a
 800d4c4:	2e01      	cmp	r6, #1
 800d4c6:	f47f af3a 	bne.w	800d33e <D64_GENERIC+0x3a>
 800d4ca:	6b56      	ldr	r6, [r2, #52]	; 0x34
 800d4cc:	06b4      	lsls	r4, r6, #26
 800d4ce:	e899 0003 	ldmia.w	r9, {r0, r1}
 800d4d2:	f109 0908 	add.w	r9, r9, #8
 800d4d6:	f57f af5a 	bpl.w	800d38e <D64_GENERIC+0x8a>
 800d4da:	ba40      	rev16	r0, r0
 800d4dc:	ba49      	rev16	r1, r1
 800d4de:	e756      	b.n	800d38e <D64_GENERIC+0x8a>
 800d4e0:	61d3      	str	r3, [r2, #28]
 800d4e2:	9b03      	ldr	r3, [sp, #12]
 800d4e4:	9901      	ldr	r1, [sp, #4]
 800d4e6:	6113      	str	r3, [r2, #16]
 800d4e8:	9b04      	ldr	r3, [sp, #16]
 800d4ea:	6091      	str	r1, [r2, #8]
 800d4ec:	6153      	str	r3, [r2, #20]
 800d4ee:	9900      	ldr	r1, [sp, #0]
 800d4f0:	9b07      	ldr	r3, [sp, #28]
 800d4f2:	60d1      	str	r1, [r2, #12]
 800d4f4:	2000      	movs	r0, #0
 800d4f6:	6193      	str	r3, [r2, #24]
 800d4f8:	b009      	add	sp, #36	; 0x24
 800d4fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d4fe:	bf00      	nop
 800d500:	001c0015 	.word	0x001c0015
 800d504:	000f000a 	.word	0x000f000a
 800d508:	00060003 	.word	0x00060003
 800d50c:	0024002a 	.word	0x0024002a
 800d510:	002e0030 	.word	0x002e0030
 800d514:	00030006 	.word	0x00030006
 800d518:	000a000f 	.word	0x000a000f
 800d51c:	0015001c 	.word	0x0015001c
 800d520:	20000000 	.word	0x20000000

0800d524 <D80_GENERIC>:
 800d524:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d528:	b08b      	sub	sp, #44	; 0x2c
 800d52a:	6914      	ldr	r4, [r2, #16]
 800d52c:	9404      	str	r4, [sp, #16]
 800d52e:	6954      	ldr	r4, [r2, #20]
 800d530:	9405      	str	r4, [sp, #20]
 800d532:	6994      	ldr	r4, [r2, #24]
 800d534:	9409      	str	r4, [sp, #36]	; 0x24
 800d536:	6894      	ldr	r4, [r2, #8]
 800d538:	9402      	str	r4, [sp, #8]
 800d53a:	8cd3      	ldrh	r3, [r2, #38]	; 0x26
 800d53c:	68d4      	ldr	r4, [r2, #12]
 800d53e:	9401      	str	r4, [sp, #4]
 800d540:	6b14      	ldr	r4, [r2, #48]	; 0x30
 800d542:	f8d2 b01c 	ldr.w	fp, [r2, #28]
 800d546:	9406      	str	r4, [sp, #24]
 800d548:	9107      	str	r1, [sp, #28]
 800d54a:	2b00      	cmp	r3, #0
 800d54c:	f000 810f 	beq.w	800d76e <D80_GENERIC+0x24a>
 800d550:	6a13      	ldr	r3, [r2, #32]
 800d552:	9308      	str	r3, [sp, #32]
 800d554:	2300      	movs	r3, #0
 800d556:	9200      	str	r2, [sp, #0]
 800d558:	f8df 9264 	ldr.w	r9, [pc, #612]	; 800d7c0 <D80_GENERIC+0x29c>
 800d55c:	f8cd b00c 	str.w	fp, [sp, #12]
 800d560:	461a      	mov	r2, r3
 800d562:	e0ed      	b.n	800d740 <D80_GENERIC+0x21c>
 800d564:	fa5f fc8c 	uxtb.w	ip, ip
 800d568:	fa0f f48c 	sxth.w	r4, ip
 800d56c:	0066      	lsls	r6, r4, #1
 800d56e:	eb06 0804 	add.w	r8, r6, r4
 800d572:	f1cc 0500 	rsb	r5, ip, #0
 800d576:	eb00 0108 	add.w	r1, r0, r8
 800d57a:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 800d57e:	194b      	adds	r3, r1, r5
 800d580:	5d49      	ldrb	r1, [r1, r5]
 800d582:	f810 a008 	ldrb.w	sl, [r0, r8]
 800d586:	f813 b004 	ldrb.w	fp, [r3, r4]
 800d58a:	f810 c00c 	ldrb.w	ip, [r0, ip]
 800d58e:	f890 8000 	ldrb.w	r8, [r0]
 800d592:	eb03 0e04 	add.w	lr, r3, r4
 800d596:	eb0e 0705 	add.w	r7, lr, r5
 800d59a:	0409      	lsls	r1, r1, #16
 800d59c:	f81e 3005 	ldrb.w	r3, [lr, r5]
 800d5a0:	f81e e015 	ldrb.w	lr, [lr, r5, lsl #1]
 800d5a4:	eb01 610a 	add.w	r1, r1, sl, lsl #24
 800d5a8:	eb07 0a45 	add.w	sl, r7, r5, lsl #1
 800d5ac:	eb0a 0004 	add.w	r0, sl, r4
 800d5b0:	041b      	lsls	r3, r3, #16
 800d5b2:	f81a a004 	ldrb.w	sl, [sl, r4]
 800d5b6:	f817 7015 	ldrb.w	r7, [r7, r5, lsl #1]
 800d5ba:	5d44      	ldrb	r4, [r0, r5]
 800d5bc:	eb03 630b 	add.w	r3, r3, fp, lsl #24
 800d5c0:	eb01 210c 	add.w	r1, r1, ip, lsl #8
 800d5c4:	4428      	add	r0, r5
 800d5c6:	eb03 230e 	add.w	r3, r3, lr, lsl #8
 800d5ca:	4441      	add	r1, r8
 800d5cc:	4430      	add	r0, r6
 800d5ce:	eb04 240a 	add.w	r4, r4, sl, lsl #8
 800d5d2:	441f      	add	r7, r3
 800d5d4:	b2cd      	uxtb	r5, r1
 800d5d6:	f3c1 2307 	ubfx	r3, r1, #8, #8
 800d5da:	f859 6025 	ldr.w	r6, [r9, r5, lsl #2]
 800d5de:	f859 e023 	ldr.w	lr, [r9, r3, lsl #2]
 800d5e2:	9b03      	ldr	r3, [sp, #12]
 800d5e4:	f3c1 4507 	ubfx	r5, r1, #16, #8
 800d5e8:	0e09      	lsrs	r1, r1, #24
 800d5ea:	4433      	add	r3, r6
 800d5ec:	f859 8025 	ldr.w	r8, [r9, r5, lsl #2]
 800d5f0:	f859 6021 	ldr.w	r6, [r9, r1, lsl #2]
 800d5f4:	b2fd      	uxtb	r5, r7
 800d5f6:	eb0e 2193 	add.w	r1, lr, r3, lsr #10
 800d5fa:	469b      	mov	fp, r3
 800d5fc:	f3c7 2307 	ubfx	r3, r7, #8, #8
 800d600:	eb08 2891 	add.w	r8, r8, r1, lsr #10
 800d604:	f859 c025 	ldr.w	ip, [r9, r5, lsl #2]
 800d608:	f859 5023 	ldr.w	r5, [r9, r3, lsl #2]
 800d60c:	f3c7 4e07 	ubfx	lr, r7, #16, #8
 800d610:	eb06 2698 	add.w	r6, r6, r8, lsr #10
 800d614:	0e3b      	lsrs	r3, r7, #24
 800d616:	eb0c 2c96 	add.w	ip, ip, r6, lsr #10
 800d61a:	f859 702e 	ldr.w	r7, [r9, lr, lsl #2]
 800d61e:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800d622:	fa5f fe84 	uxtb.w	lr, r4
 800d626:	eb05 259c 	add.w	r5, r5, ip, lsr #10
 800d62a:	f3c4 2407 	ubfx	r4, r4, #8, #8
 800d62e:	eb07 2795 	add.w	r7, r7, r5, lsr #10
 800d632:	f859 e02e 	ldr.w	lr, [r9, lr, lsl #2]
 800d636:	f859 4024 	ldr.w	r4, [r9, r4, lsl #2]
 800d63a:	eb03 2397 	add.w	r3, r3, r7, lsr #10
 800d63e:	eb0e 2e93 	add.w	lr, lr, r3, lsr #10
 800d642:	eb04 249e 	add.w	r4, r4, lr, lsr #10
 800d646:	f3c1 0109 	ubfx	r1, r1, #0, #10
 800d64a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800d64e:	f3cb 0b09 	ubfx	fp, fp, #0, #10
 800d652:	f3c7 0709 	ubfx	r7, r7, #0, #10
 800d656:	f3c6 0609 	ubfx	r6, r6, #0, #10
 800d65a:	f3c5 0509 	ubfx	r5, r5, #0, #10
 800d65e:	ea41 4b0b 	orr.w	fp, r1, fp, lsl #16
 800d662:	ea43 4707 	orr.w	r7, r3, r7, lsl #16
 800d666:	f3c4 0109 	ubfx	r1, r4, #0, #10
 800d66a:	0aa3      	lsrs	r3, r4, #10
 800d66c:	f3c8 0809 	ubfx	r8, r8, #0, #10
 800d670:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 800d674:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 800d678:	ea41 4e0e 	orr.w	lr, r1, lr, lsl #16
 800d67c:	9303      	str	r3, [sp, #12]
 800d67e:	ea46 4808 	orr.w	r8, r6, r8, lsl #16
 800d682:	ea45 4c0c 	orr.w	ip, r5, ip, lsl #16
 800d686:	4b42      	ldr	r3, [pc, #264]	; (800d790 <D80_GENERIC+0x26c>)
 800d688:	9901      	ldr	r1, [sp, #4]
 800d68a:	fb2b 1303 	smlad	r3, fp, r3, r1
 800d68e:	4941      	ldr	r1, [pc, #260]	; (800d794 <D80_GENERIC+0x270>)
 800d690:	fb28 3301 	smlad	r3, r8, r1, r3
 800d694:	4940      	ldr	r1, [pc, #256]	; (800d798 <D80_GENERIC+0x274>)
 800d696:	fb2c 3301 	smlad	r3, ip, r1, r3
 800d69a:	4940      	ldr	r1, [pc, #256]	; (800d79c <D80_GENERIC+0x278>)
 800d69c:	fb27 3301 	smlad	r3, r7, r1, r3
 800d6a0:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 800d6a4:	fb2e 3301 	smlad	r3, lr, r1, r3
 800d6a8:	493d      	ldr	r1, [pc, #244]	; (800d7a0 <D80_GENERIC+0x27c>)
 800d6aa:	9c02      	ldr	r4, [sp, #8]
 800d6ac:	fb2b 4401 	smlad	r4, fp, r1, r4
 800d6b0:	493c      	ldr	r1, [pc, #240]	; (800d7a4 <D80_GENERIC+0x280>)
 800d6b2:	fb28 4401 	smlad	r4, r8, r1, r4
 800d6b6:	f04f 114b 	mov.w	r1, #4915275	; 0x4b004b
 800d6ba:	fb2c 4101 	smlad	r1, ip, r1, r4
 800d6be:	4c3a      	ldr	r4, [pc, #232]	; (800d7a8 <D80_GENERIC+0x284>)
 800d6c0:	fb27 1104 	smlad	r1, r7, r4, r1
 800d6c4:	4c39      	ldr	r4, [pc, #228]	; (800d7ac <D80_GENERIC+0x288>)
 800d6c6:	fb2e 1104 	smlad	r1, lr, r4, r1
 800d6ca:	9101      	str	r1, [sp, #4]
 800d6cc:	2101      	movs	r1, #1
 800d6ce:	fb2b fb01 	smuad	fp, fp, r1
 800d6d2:	4937      	ldr	r1, [pc, #220]	; (800d7b0 <D80_GENERIC+0x28c>)
 800d6d4:	fb28 b801 	smlad	r8, r8, r1, fp
 800d6d8:	4d36      	ldr	r5, [pc, #216]	; (800d7b4 <D80_GENERIC+0x290>)
 800d6da:	fb2c 8c05 	smlad	ip, ip, r5, r8
 800d6de:	4d36      	ldr	r5, [pc, #216]	; (800d7b8 <D80_GENERIC+0x294>)
 800d6e0:	fb27 c705 	smlad	r7, r7, r5, ip
 800d6e4:	4d35      	ldr	r5, [pc, #212]	; (800d7bc <D80_GENERIC+0x298>)
 800d6e6:	fb2e 7105 	smlad	r1, lr, r5, r7
 800d6ea:	9102      	str	r1, [sp, #8]
 800d6ec:	9908      	ldr	r1, [sp, #32]
 800d6ee:	f5a3 337a 	sub.w	r3, r3, #256000	; 0x3e800
 800d6f2:	b181      	cbz	r1, 800d716 <D80_GENERIC+0x1f2>
 800d6f4:	9c04      	ldr	r4, [sp, #16]
 800d6f6:	9d05      	ldr	r5, [sp, #20]
 800d6f8:	9305      	str	r3, [sp, #20]
 800d6fa:	441c      	add	r4, r3
 800d6fc:	1b64      	subs	r4, r4, r5
 800d6fe:	17e7      	asrs	r7, r4, #31
 800d700:	fba4 4501 	umull	r4, r5, r4, r1
 800d704:	fb01 5507 	mla	r5, r1, r7, r5
 800d708:	f114 4400 	adds.w	r4, r4, #2147483648	; 0x80000000
 800d70c:	f145 0500 	adc.w	r5, r5, #0
 800d710:	0069      	lsls	r1, r5, #1
 800d712:	9104      	str	r1, [sp, #16]
 800d714:	460b      	mov	r3, r1
 800d716:	9e00      	ldr	r6, [sp, #0]
 800d718:	9f06      	ldr	r7, [sp, #24]
 800d71a:	8d31      	ldrh	r1, [r6, #40]	; 0x28
 800d71c:	025b      	lsls	r3, r3, #9
 800d71e:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800d722:	2500      	movs	r5, #0
 800d724:	fb02 f101 	mul.w	r1, r2, r1
 800d728:	fbc7 4503 	smlal	r4, r5, r7, r3
 800d72c:	9c07      	ldr	r4, [sp, #28]
 800d72e:	10ab      	asrs	r3, r5, #2
 800d730:	f303 030f 	ssat	r3, #16, r3
 800d734:	f824 3011 	strh.w	r3, [r4, r1, lsl #1]
 800d738:	8cf3      	ldrh	r3, [r6, #38]	; 0x26
 800d73a:	3201      	adds	r2, #1
 800d73c:	4293      	cmp	r3, r2
 800d73e:	dd13      	ble.n	800d768 <D80_GENERIC+0x244>
 800d740:	9b00      	ldr	r3, [sp, #0]
 800d742:	f8b3 c02a 	ldrh.w	ip, [r3, #42]	; 0x2a
 800d746:	f1bc 0f01 	cmp.w	ip, #1
 800d74a:	f47f af0b 	bne.w	800d564 <D80_GENERIC+0x40>
 800d74e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d750:	6884      	ldr	r4, [r0, #8]
 800d752:	069b      	lsls	r3, r3, #26
 800d754:	e890 0082 	ldmia.w	r0, {r1, r7}
 800d758:	f100 000a 	add.w	r0, r0, #10
 800d75c:	f57f af3a 	bpl.w	800d5d4 <D80_GENERIC+0xb0>
 800d760:	ba49      	rev16	r1, r1
 800d762:	ba7f      	rev16	r7, r7
 800d764:	ba64      	rev16	r4, r4
 800d766:	e735      	b.n	800d5d4 <D80_GENERIC+0xb0>
 800d768:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800d76c:	4632      	mov	r2, r6
 800d76e:	9b02      	ldr	r3, [sp, #8]
 800d770:	6093      	str	r3, [r2, #8]
 800d772:	9b01      	ldr	r3, [sp, #4]
 800d774:	60d3      	str	r3, [r2, #12]
 800d776:	9b04      	ldr	r3, [sp, #16]
 800d778:	6113      	str	r3, [r2, #16]
 800d77a:	9b05      	ldr	r3, [sp, #20]
 800d77c:	6153      	str	r3, [r2, #20]
 800d77e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d780:	f8c2 b01c 	str.w	fp, [r2, #28]
 800d784:	2000      	movs	r0, #0
 800d786:	6193      	str	r3, [r2, #24]
 800d788:	b00b      	add	sp, #44	; 0x2c
 800d78a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d78e:	bf00      	nop
 800d790:	002d0024 	.word	0x002d0024
 800d794:	001c0015 	.word	0x001c0015
 800d798:	000f000a 	.word	0x000f000a
 800d79c:	00060003 	.word	0x00060003
 800d7a0:	0037003f 	.word	0x0037003f
 800d7a4:	00450049 	.word	0x00450049
 800d7a8:	00490045 	.word	0x00490045
 800d7ac:	003f0037 	.word	0x003f0037
 800d7b0:	00030006 	.word	0x00030006
 800d7b4:	000a000f 	.word	0x000a000f
 800d7b8:	0015001c 	.word	0x0015001c
 800d7bc:	0024002d 	.word	0x0024002d
 800d7c0:	20000000 	.word	0x20000000

0800d7c4 <D128_GENERIC>:
 800d7c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d7c8:	b093      	sub	sp, #76	; 0x4c
 800d7ca:	8cd3      	ldrh	r3, [r2, #38]	; 0x26
 800d7cc:	9005      	str	r0, [sp, #20]
 800d7ce:	4610      	mov	r0, r2
 800d7d0:	9201      	str	r2, [sp, #4]
 800d7d2:	6912      	ldr	r2, [r2, #16]
 800d7d4:	920c      	str	r2, [sp, #48]	; 0x30
 800d7d6:	4602      	mov	r2, r0
 800d7d8:	6940      	ldr	r0, [r0, #20]
 800d7da:	900d      	str	r0, [sp, #52]	; 0x34
 800d7dc:	4610      	mov	r0, r2
 800d7de:	4614      	mov	r4, r2
 800d7e0:	6992      	ldr	r2, [r2, #24]
 800d7e2:	9211      	str	r2, [sp, #68]	; 0x44
 800d7e4:	69c2      	ldr	r2, [r0, #28]
 800d7e6:	9202      	str	r2, [sp, #8]
 800d7e8:	68e2      	ldr	r2, [r4, #12]
 800d7ea:	6880      	ldr	r0, [r0, #8]
 800d7ec:	9203      	str	r2, [sp, #12]
 800d7ee:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800d7f0:	9004      	str	r0, [sp, #16]
 800d7f2:	920e      	str	r2, [sp, #56]	; 0x38
 800d7f4:	910f      	str	r1, [sp, #60]	; 0x3c
 800d7f6:	2b00      	cmp	r3, #0
 800d7f8:	f000 819b 	beq.w	800db32 <D128_GENERIC+0x36e>
 800d7fc:	6a23      	ldr	r3, [r4, #32]
 800d7fe:	9310      	str	r3, [sp, #64]	; 0x40
 800d800:	2300      	movs	r3, #0
 800d802:	f8df 93a8 	ldr.w	r9, [pc, #936]	; 800dbac <D128_GENERIC+0x3e8>
 800d806:	9306      	str	r3, [sp, #24]
 800d808:	e17a      	b.n	800db00 <D128_GENERIC+0x33c>
 800d80a:	b2d2      	uxtb	r2, r2
 800d80c:	9d05      	ldr	r5, [sp, #20]
 800d80e:	b214      	sxth	r4, r2
 800d810:	eb04 0a44 	add.w	sl, r4, r4, lsl #1
 800d814:	4250      	negs	r0, r2
 800d816:	eb05 010a 	add.w	r1, r5, sl
 800d81a:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800d81e:	eb01 0800 	add.w	r8, r1, r0
 800d822:	eb0b 0c04 	add.w	ip, fp, r4
 800d826:	eb08 070c 	add.w	r7, r8, ip
 800d82a:	183b      	adds	r3, r7, r0
 800d82c:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
 800d830:	eb03 0e40 	add.w	lr, r3, r0, lsl #1
 800d834:	eb0e 0604 	add.w	r6, lr, r4
 800d838:	9307      	str	r3, [sp, #28]
 800d83a:	1833      	adds	r3, r6, r0
 800d83c:	9305      	str	r3, [sp, #20]
 800d83e:	462b      	mov	r3, r5
 800d840:	f815 a00a 	ldrb.w	sl, [r5, sl]
 800d844:	f8cd a020 	str.w	sl, [sp, #32]
 800d848:	f818 a00c 	ldrb.w	sl, [r8, ip]
 800d84c:	f813 c002 	ldrb.w	ip, [r3, r2]
 800d850:	f81e 8004 	ldrb.w	r8, [lr, r4]
 800d854:	5c3a      	ldrb	r2, [r7, r0]
 800d856:	f817 e010 	ldrb.w	lr, [r7, r0, lsl #1]
 800d85a:	781f      	ldrb	r7, [r3, #0]
 800d85c:	9b07      	ldr	r3, [sp, #28]
 800d85e:	9d05      	ldr	r5, [sp, #20]
 800d860:	f813 3010 	ldrb.w	r3, [r3, r0, lsl #1]
 800d864:	5c09      	ldrb	r1, [r1, r0]
 800d866:	9709      	str	r7, [sp, #36]	; 0x24
 800d868:	9307      	str	r3, [sp, #28]
 800d86a:	f816 7010 	ldrb.w	r7, [r6, r0, lsl #1]
 800d86e:	5c33      	ldrb	r3, [r6, r0]
 800d870:	0412      	lsls	r2, r2, #16
 800d872:	eb05 0640 	add.w	r6, r5, r0, lsl #1
 800d876:	eb02 620a 	add.w	r2, r2, sl, lsl #24
 800d87a:	9d08      	ldr	r5, [sp, #32]
 800d87c:	eb06 0a04 	add.w	sl, r6, r4
 800d880:	0409      	lsls	r1, r1, #16
 800d882:	eb01 6105 	add.w	r1, r1, r5, lsl #24
 800d886:	f81a 5000 	ldrb.w	r5, [sl, r0]
 800d88a:	5d36      	ldrb	r6, [r6, r4]
 800d88c:	9c05      	ldr	r4, [sp, #20]
 800d88e:	042d      	lsls	r5, r5, #16
 800d890:	eb05 6606 	add.w	r6, r5, r6, lsl #24
 800d894:	eb01 210c 	add.w	r1, r1, ip, lsl #8
 800d898:	f81a 5010 	ldrb.w	r5, [sl, r0, lsl #1]
 800d89c:	f814 4010 	ldrb.w	r4, [r4, r0, lsl #1]
 800d8a0:	eb0a 0c00 	add.w	ip, sl, r0
 800d8a4:	041b      	lsls	r3, r3, #16
 800d8a6:	eb03 6308 	add.w	r3, r3, r8, lsl #24
 800d8aa:	eb06 2605 	add.w	r6, r6, r5, lsl #8
 800d8ae:	f81c a010 	ldrb.w	sl, [ip, r0, lsl #1]
 800d8b2:	9d07      	ldr	r5, [sp, #28]
 800d8b4:	eb03 2307 	add.w	r3, r3, r7, lsl #8
 800d8b8:	eb0c 0040 	add.w	r0, ip, r0, lsl #1
 800d8bc:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800d8be:	4458      	add	r0, fp
 800d8c0:	eb02 220e 	add.w	r2, r2, lr, lsl #8
 800d8c4:	9005      	str	r0, [sp, #20]
 800d8c6:	4439      	add	r1, r7
 800d8c8:	442a      	add	r2, r5
 800d8ca:	44b2      	add	sl, r6
 800d8cc:	1918      	adds	r0, r3, r4
 800d8ce:	b2cb      	uxtb	r3, r1
 800d8d0:	f3c1 2407 	ubfx	r4, r1, #8, #8
 800d8d4:	9e02      	ldr	r6, [sp, #8]
 800d8d6:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800d8da:	f859 5024 	ldr.w	r5, [r9, r4, lsl #2]
 800d8de:	f3c1 4407 	ubfx	r4, r1, #16, #8
 800d8e2:	441e      	add	r6, r3
 800d8e4:	0e09      	lsrs	r1, r1, #24
 800d8e6:	4633      	mov	r3, r6
 800d8e8:	f859 6024 	ldr.w	r6, [r9, r4, lsl #2]
 800d8ec:	f859 7021 	ldr.w	r7, [r9, r1, lsl #2]
 800d8f0:	b2d4      	uxtb	r4, r2
 800d8f2:	eb05 2593 	add.w	r5, r5, r3, lsr #10
 800d8f6:	f3c2 2107 	ubfx	r1, r2, #8, #8
 800d8fa:	eb06 2b95 	add.w	fp, r6, r5, lsr #10
 800d8fe:	f859 6024 	ldr.w	r6, [r9, r4, lsl #2]
 800d902:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800d906:	f3c2 4407 	ubfx	r4, r2, #16, #8
 800d90a:	0e12      	lsrs	r2, r2, #24
 800d90c:	eb07 279b 	add.w	r7, r7, fp, lsr #10
 800d910:	eb06 2897 	add.w	r8, r6, r7, lsr #10
 800d914:	f859 6024 	ldr.w	r6, [r9, r4, lsl #2]
 800d918:	f859 4022 	ldr.w	r4, [r9, r2, lsl #2]
 800d91c:	9702      	str	r7, [sp, #8]
 800d91e:	b2c2      	uxtb	r2, r0
 800d920:	eb01 2198 	add.w	r1, r1, r8, lsr #10
 800d924:	eb06 2c91 	add.w	ip, r6, r1, lsr #10
 800d928:	f859 6022 	ldr.w	r6, [r9, r2, lsl #2]
 800d92c:	eb04 249c 	add.w	r4, r4, ip, lsr #10
 800d930:	f3c0 2207 	ubfx	r2, r0, #8, #8
 800d934:	eb06 2e94 	add.w	lr, r6, r4, lsr #10
 800d938:	f3c0 4607 	ubfx	r6, r0, #16, #8
 800d93c:	f859 2022 	ldr.w	r2, [r9, r2, lsl #2]
 800d940:	f859 7026 	ldr.w	r7, [r9, r6, lsl #2]
 800d944:	0e00      	lsrs	r0, r0, #24
 800d946:	fa5f f68a 	uxtb.w	r6, sl
 800d94a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800d94e:	9309      	str	r3, [sp, #36]	; 0x24
 800d950:	f859 0020 	ldr.w	r0, [r9, r0, lsl #2]
 800d954:	f859 6026 	ldr.w	r6, [r9, r6, lsl #2]
 800d958:	eb02 229e 	add.w	r2, r2, lr, lsr #10
 800d95c:	f3ca 2307 	ubfx	r3, sl, #8, #8
 800d960:	f3c5 0509 	ubfx	r5, r5, #0, #10
 800d964:	950a      	str	r5, [sp, #40]	; 0x28
 800d966:	eb07 2792 	add.w	r7, r7, r2, lsr #10
 800d96a:	f3ca 4507 	ubfx	r5, sl, #16, #8
 800d96e:	eb00 2097 	add.w	r0, r0, r7, lsr #10
 800d972:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800d976:	f859 5025 	ldr.w	r5, [r9, r5, lsl #2]
 800d97a:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800d97e:	920b      	str	r2, [sp, #44]	; 0x2c
 800d980:	eb06 2690 	add.w	r6, r6, r0, lsr #10
 800d984:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d986:	eb03 2396 	add.w	r3, r3, r6, lsr #10
 800d98a:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 800d98e:	9307      	str	r3, [sp, #28]
 800d990:	eb05 2593 	add.w	r5, r5, r3, lsr #10
 800d994:	ea4f 6a1a 	mov.w	sl, sl, lsr #24
 800d998:	9b02      	ldr	r3, [sp, #8]
 800d99a:	f8cd c008 	str.w	ip, [sp, #8]
 800d99e:	4694      	mov	ip, r2
 800d9a0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d9a2:	f859 a02a 	ldr.w	sl, [r9, sl, lsl #2]
 800d9a6:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 800d9aa:	9a02      	ldr	r2, [sp, #8]
 800d9ac:	f3c4 0409 	ubfx	r4, r4, #0, #10
 800d9b0:	eb0a 2a95 	add.w	sl, sl, r5, lsr #10
 800d9b4:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800d9b8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800d9ba:	f8cd a020 	str.w	sl, [sp, #32]
 800d9be:	f3c8 0809 	ubfx	r8, r8, #0, #10
 800d9c2:	f3c3 0a09 	ubfx	sl, r3, #0, #10
 800d9c6:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 800d9ca:	9b07      	ldr	r3, [sp, #28]
 800d9cc:	f3c1 0109 	ubfx	r1, r1, #0, #10
 800d9d0:	ea41 4108 	orr.w	r1, r1, r8, lsl #16
 800d9d4:	ea42 480e 	orr.w	r8, r2, lr, lsl #16
 800d9d8:	9a08      	ldr	r2, [sp, #32]
 800d9da:	f3c6 0609 	ubfx	r6, r6, #0, #10
 800d9de:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800d9e2:	f3cb 0b09 	ubfx	fp, fp, #0, #10
 800d9e6:	f3c7 0709 	ubfx	r7, r7, #0, #10
 800d9ea:	f3c2 0e09 	ubfx	lr, r2, #0, #10
 800d9ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800d9f2:	f3c0 0009 	ubfx	r0, r0, #0, #10
 800d9f6:	0a96      	lsrs	r6, r2, #10
 800d9f8:	f3c5 0509 	ubfx	r5, r5, #0, #10
 800d9fc:	9602      	str	r6, [sp, #8]
 800d9fe:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 800da02:	ea4a 4a0b 	orr.w	sl, sl, fp, lsl #16
 800da06:	ea4e 4505 	orr.w	r5, lr, r5, lsl #16
 800da0a:	4e53      	ldr	r6, [pc, #332]	; (800db58 <D128_GENERIC+0x394>)
 800da0c:	9f03      	ldr	r7, [sp, #12]
 800da0e:	fb2c 7606 	smlad	r6, ip, r6, r7
 800da12:	4f52      	ldr	r7, [pc, #328]	; (800db5c <D128_GENERIC+0x398>)
 800da14:	fb2a 6607 	smlad	r6, sl, r7, r6
 800da18:	4f51      	ldr	r7, [pc, #324]	; (800db60 <D128_GENERIC+0x39c>)
 800da1a:	fb21 6607 	smlad	r6, r1, r7, r6
 800da1e:	4f51      	ldr	r7, [pc, #324]	; (800db64 <D128_GENERIC+0x3a0>)
 800da20:	fb24 6607 	smlad	r6, r4, r7, r6
 800da24:	4f50      	ldr	r7, [pc, #320]	; (800db68 <D128_GENERIC+0x3a4>)
 800da26:	fb28 6607 	smlad	r6, r8, r7, r6
 800da2a:	4f50      	ldr	r7, [pc, #320]	; (800db6c <D128_GENERIC+0x3a8>)
 800da2c:	fb20 6607 	smlad	r6, r0, r7, r6
 800da30:	4f4f      	ldr	r7, [pc, #316]	; (800db70 <D128_GENERIC+0x3ac>)
 800da32:	fb23 6607 	smlad	r6, r3, r7, r6
 800da36:	f44f 3780 	mov.w	r7, #65536	; 0x10000
 800da3a:	fb25 6607 	smlad	r6, r5, r7, r6
 800da3e:	4f4d      	ldr	r7, [pc, #308]	; (800db74 <D128_GENERIC+0x3b0>)
 800da40:	9a04      	ldr	r2, [sp, #16]
 800da42:	fb2c 2e07 	smlad	lr, ip, r7, r2
 800da46:	4a4c      	ldr	r2, [pc, #304]	; (800db78 <D128_GENERIC+0x3b4>)
 800da48:	fb2a ee02 	smlad	lr, sl, r2, lr
 800da4c:	4f4b      	ldr	r7, [pc, #300]	; (800db7c <D128_GENERIC+0x3b8>)
 800da4e:	fb21 ee07 	smlad	lr, r1, r7, lr
 800da52:	4f4b      	ldr	r7, [pc, #300]	; (800db80 <D128_GENERIC+0x3bc>)
 800da54:	fb24 ee07 	smlad	lr, r4, r7, lr
 800da58:	4f4a      	ldr	r7, [pc, #296]	; (800db84 <D128_GENERIC+0x3c0>)
 800da5a:	fb28 ee07 	smlad	lr, r8, r7, lr
 800da5e:	4f4a      	ldr	r7, [pc, #296]	; (800db88 <D128_GENERIC+0x3c4>)
 800da60:	fb20 ee07 	smlad	lr, r0, r7, lr
 800da64:	4f49      	ldr	r7, [pc, #292]	; (800db8c <D128_GENERIC+0x3c8>)
 800da66:	fb23 e707 	smlad	r7, r3, r7, lr
 800da6a:	f8df e144 	ldr.w	lr, [pc, #324]	; 800dbb0 <D128_GENERIC+0x3ec>
 800da6e:	fb25 720e 	smlad	r2, r5, lr, r7
 800da72:	f04f 0b01 	mov.w	fp, #1
 800da76:	9203      	str	r2, [sp, #12]
 800da78:	fb2c fb0b 	smuad	fp, ip, fp
 800da7c:	4f44      	ldr	r7, [pc, #272]	; (800db90 <D128_GENERIC+0x3cc>)
 800da7e:	fb2a ba07 	smlad	sl, sl, r7, fp
 800da82:	4f44      	ldr	r7, [pc, #272]	; (800db94 <D128_GENERIC+0x3d0>)
 800da84:	fb21 aa07 	smlad	sl, r1, r7, sl
 800da88:	4f43      	ldr	r7, [pc, #268]	; (800db98 <D128_GENERIC+0x3d4>)
 800da8a:	fb24 aa07 	smlad	sl, r4, r7, sl
 800da8e:	4f43      	ldr	r7, [pc, #268]	; (800db9c <D128_GENERIC+0x3d8>)
 800da90:	fb28 a707 	smlad	r7, r8, r7, sl
 800da94:	4a42      	ldr	r2, [pc, #264]	; (800dba0 <D128_GENERIC+0x3dc>)
 800da96:	fb20 7702 	smlad	r7, r0, r2, r7
 800da9a:	4a42      	ldr	r2, [pc, #264]	; (800dba4 <D128_GENERIC+0x3e0>)
 800da9c:	fb23 7702 	smlad	r7, r3, r2, r7
 800daa0:	4b41      	ldr	r3, [pc, #260]	; (800dba8 <D128_GENERIC+0x3e4>)
 800daa2:	fb25 7303 	smlad	r3, r5, r3, r7
 800daa6:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800daa8:	9304      	str	r3, [sp, #16]
 800daaa:	f5a6 1680 	sub.w	r6, r6, #1048576	; 0x100000
 800daae:	b185      	cbz	r5, 800dad2 <D128_GENERIC+0x30e>
 800dab0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800dab2:	990d      	ldr	r1, [sp, #52]	; 0x34
 800dab4:	960d      	str	r6, [sp, #52]	; 0x34
 800dab6:	4432      	add	r2, r6
 800dab8:	1a52      	subs	r2, r2, r1
 800daba:	17d1      	asrs	r1, r2, #31
 800dabc:	fba2 2305 	umull	r2, r3, r2, r5
 800dac0:	fb05 3301 	mla	r3, r5, r1, r3
 800dac4:	f112 4200 	adds.w	r2, r2, #2147483648	; 0x80000000
 800dac8:	f143 0300 	adc.w	r3, r3, #0
 800dacc:	005b      	lsls	r3, r3, #1
 800dace:	930c      	str	r3, [sp, #48]	; 0x30
 800dad0:	461e      	mov	r6, r3
 800dad2:	9801      	ldr	r0, [sp, #4]
 800dad4:	9c06      	ldr	r4, [sp, #24]
 800dad6:	8d01      	ldrh	r1, [r0, #40]	; 0x28
 800dad8:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 800dada:	01f6      	lsls	r6, r6, #7
 800dadc:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800dae0:	2300      	movs	r3, #0
 800dae2:	fbc5 2306 	smlal	r2, r3, r5, r6
 800dae6:	fb04 f101 	mul.w	r1, r4, r1
 800daea:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800daec:	109b      	asrs	r3, r3, #2
 800daee:	f303 030f 	ssat	r3, #16, r3
 800daf2:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
 800daf6:	8cc3      	ldrh	r3, [r0, #38]	; 0x26
 800daf8:	1c62      	adds	r2, r4, #1
 800dafa:	4293      	cmp	r3, r2
 800dafc:	9206      	str	r2, [sp, #24]
 800dafe:	dd18      	ble.n	800db32 <D128_GENERIC+0x36e>
 800db00:	9b01      	ldr	r3, [sp, #4]
 800db02:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800db04:	2a01      	cmp	r2, #1
 800db06:	f47f ae80 	bne.w	800d80a <D128_GENERIC+0x46>
 800db0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800db0c:	9d05      	ldr	r5, [sp, #20]
 800db0e:	069b      	lsls	r3, r3, #26
 800db10:	6829      	ldr	r1, [r5, #0]
 800db12:	686a      	ldr	r2, [r5, #4]
 800db14:	68a8      	ldr	r0, [r5, #8]
 800db16:	f8d5 a00c 	ldr.w	sl, [r5, #12]
 800db1a:	f105 0410 	add.w	r4, r5, #16
 800db1e:	d506      	bpl.n	800db2e <D128_GENERIC+0x36a>
 800db20:	ba49      	rev16	r1, r1
 800db22:	ba52      	rev16	r2, r2
 800db24:	ba40      	rev16	r0, r0
 800db26:	fa9a fa9a 	rev16.w	sl, sl
 800db2a:	9405      	str	r4, [sp, #20]
 800db2c:	e6cf      	b.n	800d8ce <D128_GENERIC+0x10a>
 800db2e:	9405      	str	r4, [sp, #20]
 800db30:	e6cd      	b.n	800d8ce <D128_GENERIC+0x10a>
 800db32:	9a01      	ldr	r2, [sp, #4]
 800db34:	9904      	ldr	r1, [sp, #16]
 800db36:	6091      	str	r1, [r2, #8]
 800db38:	9903      	ldr	r1, [sp, #12]
 800db3a:	60d1      	str	r1, [r2, #12]
 800db3c:	9b02      	ldr	r3, [sp, #8]
 800db3e:	61d3      	str	r3, [r2, #28]
 800db40:	4611      	mov	r1, r2
 800db42:	4613      	mov	r3, r2
 800db44:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800db46:	610a      	str	r2, [r1, #16]
 800db48:	990d      	ldr	r1, [sp, #52]	; 0x34
 800db4a:	6159      	str	r1, [r3, #20]
 800db4c:	9911      	ldr	r1, [sp, #68]	; 0x44
 800db4e:	6199      	str	r1, [r3, #24]
 800db50:	2000      	movs	r0, #0
 800db52:	b013      	add	sp, #76	; 0x4c
 800db54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800db58:	00780069 	.word	0x00780069
 800db5c:	005b004e 	.word	0x005b004e
 800db60:	00420037 	.word	0x00420037
 800db64:	002d0024 	.word	0x002d0024
 800db68:	001c0015 	.word	0x001c0015
 800db6c:	000f000a 	.word	0x000f000a
 800db70:	00060003 	.word	0x00060003
 800db74:	00880096 	.word	0x00880096
 800db78:	00a200ac 	.word	0x00a200ac
 800db7c:	00b400ba 	.word	0x00b400ba
 800db80:	00be00c0 	.word	0x00be00c0
 800db84:	00c000be 	.word	0x00c000be
 800db88:	00ba00b4 	.word	0x00ba00b4
 800db8c:	00ac00a2 	.word	0x00ac00a2
 800db90:	00030006 	.word	0x00030006
 800db94:	000a000f 	.word	0x000a000f
 800db98:	0015001c 	.word	0x0015001c
 800db9c:	0024002d 	.word	0x0024002d
 800dba0:	00370042 	.word	0x00370042
 800dba4:	004e005b 	.word	0x004e005b
 800dba8:	00690078 	.word	0x00690078
 800dbac:	20000000 	.word	0x20000000
 800dbb0:	00960088 	.word	0x00960088

0800dbb4 <D16_1CH_HTONS_VOL_HP>:
 800dbb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dbb8:	4691      	mov	r9, r2
 800dbba:	b083      	sub	sp, #12
 800dbbc:	8cd2      	ldrh	r2, [r2, #38]	; 0x26
 800dbbe:	f8d9 3018 	ldr.w	r3, [r9, #24]
 800dbc2:	f8d9 400c 	ldr.w	r4, [r9, #12]
 800dbc6:	9300      	str	r3, [sp, #0]
 800dbc8:	4680      	mov	r8, r0
 800dbca:	f8d9 7014 	ldr.w	r7, [r9, #20]
 800dbce:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800dbd2:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800dbd6:	f8d9 5008 	ldr.w	r5, [r9, #8]
 800dbda:	9401      	str	r4, [sp, #4]
 800dbdc:	f8d9 a030 	ldr.w	sl, [r9, #48]	; 0x30
 800dbe0:	f8d9 e020 	ldr.w	lr, [r9, #32]
 800dbe4:	2a00      	cmp	r2, #0
 800dbe6:	d04e      	beq.n	800dc86 <D16_1CH_HTONS_VOL_HP+0xd2>
 800dbe8:	f8df c0a8 	ldr.w	ip, [pc, #168]	; 800dc94 <D16_1CH_HTONS_VOL_HP+0xe0>
 800dbec:	1e8c      	subs	r4, r1, #2
 800dbee:	eb08 0b42 	add.w	fp, r8, r2, lsl #1
 800dbf2:	f858 2b02 	ldr.w	r2, [r8], #2
 800dbf6:	ba52      	rev16	r2, r2
 800dbf8:	b2d6      	uxtb	r6, r2
 800dbfa:	f3c2 2107 	ubfx	r1, r2, #8, #8
 800dbfe:	f85c 2026 	ldr.w	r2, [ip, r6, lsl #2]
 800dc02:	f85c 1021 	ldr.w	r1, [ip, r1, lsl #2]
 800dc06:	4413      	add	r3, r2
 800dc08:	eb01 2293 	add.w	r2, r1, r3, lsr #10
 800dc0c:	f3c2 0109 	ubfx	r1, r2, #0, #10
 800dc10:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800dc14:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800dc18:	0a93      	lsrs	r3, r2, #10
 800dc1a:	4a1c      	ldr	r2, [pc, #112]	; (800dc8c <D16_1CH_HTONS_VOL_HP+0xd8>)
 800dc1c:	fb21 5202 	smlad	r2, r1, r2, r5
 800dc20:	4d1b      	ldr	r5, [pc, #108]	; (800dc90 <D16_1CH_HTONS_VOL_HP+0xdc>)
 800dc22:	fb21 f505 	smuad	r5, r1, r5
 800dc26:	f5a2 6200 	sub.w	r2, r2, #2048	; 0x800
 800dc2a:	4410      	add	r0, r2
 800dc2c:	1bc0      	subs	r0, r0, r7
 800dc2e:	17c7      	asrs	r7, r0, #31
 800dc30:	fba0 010e 	umull	r0, r1, r0, lr
 800dc34:	f110 4000 	adds.w	r0, r0, #2147483648	; 0x80000000
 800dc38:	fb0e 1107 	mla	r1, lr, r7, r1
 800dc3c:	f141 0100 	adc.w	r1, r1, #0
 800dc40:	0448      	lsls	r0, r1, #17
 800dc42:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800dc46:	2700      	movs	r7, #0
 800dc48:	fbc0 670a 	smlal	r6, r7, r0, sl
 800dc4c:	45d8      	cmp	r8, fp
 800dc4e:	ea4f 0041 	mov.w	r0, r1, lsl #1
 800dc52:	ea4f 01a7 	mov.w	r1, r7, asr #2
 800dc56:	4617      	mov	r7, r2
 800dc58:	f301 010f 	ssat	r1, #16, r1
 800dc5c:	f824 1f02 	strh.w	r1, [r4, #2]!
 800dc60:	d1c7      	bne.n	800dbf2 <D16_1CH_HTONS_VOL_HP+0x3e>
 800dc62:	9901      	ldr	r1, [sp, #4]
 800dc64:	f8c9 301c 	str.w	r3, [r9, #28]
 800dc68:	9b00      	ldr	r3, [sp, #0]
 800dc6a:	f8c9 0010 	str.w	r0, [r9, #16]
 800dc6e:	2000      	movs	r0, #0
 800dc70:	f8c9 5008 	str.w	r5, [r9, #8]
 800dc74:	f8c9 100c 	str.w	r1, [r9, #12]
 800dc78:	f8c9 2014 	str.w	r2, [r9, #20]
 800dc7c:	f8c9 3018 	str.w	r3, [r9, #24]
 800dc80:	b003      	add	sp, #12
 800dc82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dc86:	463a      	mov	r2, r7
 800dc88:	4621      	mov	r1, r4
 800dc8a:	e7eb      	b.n	800dc64 <D16_1CH_HTONS_VOL_HP+0xb0>
 800dc8c:	00030001 	.word	0x00030001
 800dc90:	00010003 	.word	0x00010003
 800dc94:	20000000 	.word	0x20000000

0800dc98 <D24_1CH_HTONS_VOL_HP>:
 800dc98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dc9c:	b089      	sub	sp, #36	; 0x24
 800dc9e:	8cd3      	ldrh	r3, [r2, #38]	; 0x26
 800dca0:	6996      	ldr	r6, [r2, #24]
 800dca2:	9304      	str	r3, [sp, #16]
 800dca4:	6b17      	ldr	r7, [r2, #48]	; 0x30
 800dca6:	9207      	str	r2, [sp, #28]
 800dca8:	6915      	ldr	r5, [r2, #16]
 800dcaa:	6954      	ldr	r4, [r2, #20]
 800dcac:	9606      	str	r6, [sp, #24]
 800dcae:	6893      	ldr	r3, [r2, #8]
 800dcb0:	69d6      	ldr	r6, [r2, #28]
 800dcb2:	f8d2 c00c 	ldr.w	ip, [r2, #12]
 800dcb6:	f8d2 a020 	ldr.w	sl, [r2, #32]
 800dcba:	9a04      	ldr	r2, [sp, #16]
 800dcbc:	9705      	str	r7, [sp, #20]
 800dcbe:	2a00      	cmp	r2, #0
 800dcc0:	d07e      	beq.n	800ddc0 <D24_1CH_HTONS_VOL_HP+0x128>
 800dcc2:	f1a1 0b02 	sub.w	fp, r1, #2
 800dcc6:	2700      	movs	r7, #0
 800dcc8:	46a8      	mov	r8, r5
 800dcca:	f8cd b004 	str.w	fp, [sp, #4]
 800dcce:	4655      	mov	r5, sl
 800dcd0:	46e3      	mov	fp, ip
 800dcd2:	f8df e0f8 	ldr.w	lr, [pc, #248]	; 800ddcc <D24_1CH_HTONS_VOL_HP+0x134>
 800dcd6:	46ba      	mov	sl, r7
 800dcd8:	469c      	mov	ip, r3
 800dcda:	e055      	b.n	800dd88 <D24_1CH_HTONS_VOL_HP+0xf0>
 800dcdc:	7802      	ldrb	r2, [r0, #0]
 800dcde:	78c3      	ldrb	r3, [r0, #3]
 800dce0:	7841      	ldrb	r1, [r0, #1]
 800dce2:	0212      	lsls	r2, r2, #8
 800dce4:	eb02 4303 	add.w	r3, r2, r3, lsl #16
 800dce8:	440b      	add	r3, r1
 800dcea:	3002      	adds	r0, #2
 800dcec:	b2d9      	uxtb	r1, r3
 800dcee:	f3c3 2207 	ubfx	r2, r3, #8, #8
 800dcf2:	f85e 7021 	ldr.w	r7, [lr, r1, lsl #2]
 800dcf6:	f85e 2022 	ldr.w	r2, [lr, r2, lsl #2]
 800dcfa:	0c1b      	lsrs	r3, r3, #16
 800dcfc:	eb07 2796 	add.w	r7, r7, r6, lsr #10
 800dd00:	eb02 2297 	add.w	r2, r2, r7, lsr #10
 800dd04:	f85e 6023 	ldr.w	r6, [lr, r3, lsl #2]
 800dd08:	f3c7 0309 	ubfx	r3, r7, #0, #10
 800dd0c:	f3c2 0709 	ubfx	r7, r2, #0, #10
 800dd10:	eb06 2692 	add.w	r6, r6, r2, lsr #10
 800dd14:	ea47 4303 	orr.w	r3, r7, r3, lsl #16
 800dd18:	4a2a      	ldr	r2, [pc, #168]	; (800ddc4 <D24_1CH_HTONS_VOL_HP+0x12c>)
 800dd1a:	fb23 b102 	smlad	r1, r3, r2, fp
 800dd1e:	4a2a      	ldr	r2, [pc, #168]	; (800ddc8 <D24_1CH_HTONS_VOL_HP+0x130>)
 800dd20:	fb23 cb02 	smlad	fp, r3, r2, ip
 800dd24:	f3c6 0c09 	ubfx	ip, r6, #0, #10
 800dd28:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 800dd2c:	eb0b 0b4c 	add.w	fp, fp, ip, lsl #1
 800dd30:	2201      	movs	r2, #1
 800dd32:	fb23 f702 	smuad	r7, r3, r2
 800dd36:	f5a1 51d8 	sub.w	r1, r1, #6912	; 0x1b00
 800dd3a:	eb01 0208 	add.w	r2, r1, r8
 800dd3e:	1b12      	subs	r2, r2, r4
 800dd40:	17d4      	asrs	r4, r2, #31
 800dd42:	fba2 2305 	umull	r2, r3, r2, r5
 800dd46:	f112 4200 	adds.w	r2, r2, #2147483648	; 0x80000000
 800dd4a:	fb05 3304 	mla	r3, r5, r4, r3
 800dd4e:	f143 0300 	adc.w	r3, r3, #0
 800dd52:	9c05      	ldr	r4, [sp, #20]
 800dd54:	03da      	lsls	r2, r3, #15
 800dd56:	f04f 4800 	mov.w	r8, #2147483648	; 0x80000000
 800dd5a:	f04f 0900 	mov.w	r9, #0
 800dd5e:	fbc4 8902 	smlal	r8, r9, r4, r2
 800dd62:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800dd66:	9a01      	ldr	r2, [sp, #4]
 800dd68:	ea4f 0843 	mov.w	r8, r3, lsl #1
 800dd6c:	9b03      	ldr	r3, [sp, #12]
 800dd6e:	109b      	asrs	r3, r3, #2
 800dd70:	f303 030f 	ssat	r3, #16, r3
 800dd74:	f822 3f02 	strh.w	r3, [r2, #2]!
 800dd78:	9b04      	ldr	r3, [sp, #16]
 800dd7a:	9201      	str	r2, [sp, #4]
 800dd7c:	f10a 0a01 	add.w	sl, sl, #1
 800dd80:	459a      	cmp	sl, r3
 800dd82:	44bc      	add	ip, r7
 800dd84:	460c      	mov	r4, r1
 800dd86:	d00b      	beq.n	800dda0 <D24_1CH_HTONS_VOL_HP+0x108>
 800dd88:	f01a 0f01 	tst.w	sl, #1
 800dd8c:	d0a6      	beq.n	800dcdc <D24_1CH_HTONS_VOL_HP+0x44>
 800dd8e:	78c2      	ldrb	r2, [r0, #3]
 800dd90:	7883      	ldrb	r3, [r0, #2]
 800dd92:	f810 1b04 	ldrb.w	r1, [r0], #4
 800dd96:	0212      	lsls	r2, r2, #8
 800dd98:	eb02 4303 	add.w	r3, r2, r3, lsl #16
 800dd9c:	440b      	add	r3, r1
 800dd9e:	e7a5      	b.n	800dcec <D24_1CH_HTONS_VOL_HP+0x54>
 800dda0:	4663      	mov	r3, ip
 800dda2:	4645      	mov	r5, r8
 800dda4:	46dc      	mov	ip, fp
 800dda6:	9807      	ldr	r0, [sp, #28]
 800dda8:	6141      	str	r1, [r0, #20]
 800ddaa:	9906      	ldr	r1, [sp, #24]
 800ddac:	6083      	str	r3, [r0, #8]
 800ddae:	f8c0 c00c 	str.w	ip, [r0, #12]
 800ddb2:	61c6      	str	r6, [r0, #28]
 800ddb4:	6105      	str	r5, [r0, #16]
 800ddb6:	6181      	str	r1, [r0, #24]
 800ddb8:	2000      	movs	r0, #0
 800ddba:	b009      	add	sp, #36	; 0x24
 800ddbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ddc0:	4621      	mov	r1, r4
 800ddc2:	e7f0      	b.n	800dda6 <D24_1CH_HTONS_VOL_HP+0x10e>
 800ddc4:	00030001 	.word	0x00030001
 800ddc8:	00060007 	.word	0x00060007
 800ddcc:	20000000 	.word	0x20000000

0800ddd0 <D32_1CH_HTONS_VOL_HP>:
 800ddd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ddd4:	4692      	mov	sl, r2
 800ddd6:	b087      	sub	sp, #28
 800ddd8:	8cd2      	ldrh	r2, [r2, #38]	; 0x26
 800ddda:	f8da 3018 	ldr.w	r3, [sl, #24]
 800ddde:	f8da 5030 	ldr.w	r5, [sl, #48]	; 0x30
 800dde2:	9304      	str	r3, [sp, #16]
 800dde4:	f8da 4010 	ldr.w	r4, [sl, #16]
 800dde8:	f8da 8014 	ldr.w	r8, [sl, #20]
 800ddec:	f8da 601c 	ldr.w	r6, [sl, #28]
 800ddf0:	f8da 3008 	ldr.w	r3, [sl, #8]
 800ddf4:	f8da e00c 	ldr.w	lr, [sl, #12]
 800ddf8:	9501      	str	r5, [sp, #4]
 800ddfa:	f8da c020 	ldr.w	ip, [sl, #32]
 800ddfe:	2a00      	cmp	r2, #0
 800de00:	d07b      	beq.n	800defa <D32_1CH_HTONS_VOL_HP+0x12a>
 800de02:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 800de06:	4f3e      	ldr	r7, [pc, #248]	; (800df00 <D32_1CH_HTONS_VOL_HP+0x130>)
 800de08:	f8cd c00c 	str.w	ip, [sp, #12]
 800de0c:	9202      	str	r2, [sp, #8]
 800de0e:	460d      	mov	r5, r1
 800de10:	46a1      	mov	r9, r4
 800de12:	4684      	mov	ip, r0
 800de14:	f8cd a014 	str.w	sl, [sp, #20]
 800de18:	f85c 1b04 	ldr.w	r1, [ip], #4
 800de1c:	ba49      	rev16	r1, r1
 800de1e:	b2c8      	uxtb	r0, r1
 800de20:	f3c1 2207 	ubfx	r2, r1, #8, #8
 800de24:	f3c1 4a07 	ubfx	sl, r1, #16, #8
 800de28:	f857 0020 	ldr.w	r0, [r7, r0, lsl #2]
 800de2c:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
 800de30:	0e09      	lsrs	r1, r1, #24
 800de32:	eb00 2096 	add.w	r0, r0, r6, lsr #10
 800de36:	f857 602a 	ldr.w	r6, [r7, sl, lsl #2]
 800de3a:	f857 1021 	ldr.w	r1, [r7, r1, lsl #2]
 800de3e:	eb02 2290 	add.w	r2, r2, r0, lsr #10
 800de42:	eb06 2a92 	add.w	sl, r6, r2, lsr #10
 800de46:	eb01 269a 	add.w	r6, r1, sl, lsr #10
 800de4a:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800de4e:	f3c6 0109 	ubfx	r1, r6, #0, #10
 800de52:	f3c0 0009 	ubfx	r0, r0, #0, #10
 800de56:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 800de5a:	ea42 4000 	orr.w	r0, r2, r0, lsl #16
 800de5e:	ea41 4a0a 	orr.w	sl, r1, sl, lsl #16
 800de62:	4a28      	ldr	r2, [pc, #160]	; (800df04 <D32_1CH_HTONS_VOL_HP+0x134>)
 800de64:	fb20 e202 	smlad	r2, r0, r2, lr
 800de68:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 800de6c:	fb2a 2101 	smlad	r1, sl, r1, r2
 800de70:	4a25      	ldr	r2, [pc, #148]	; (800df08 <D32_1CH_HTONS_VOL_HP+0x138>)
 800de72:	fb20 3302 	smlad	r3, r0, r2, r3
 800de76:	4a25      	ldr	r2, [pc, #148]	; (800df0c <D32_1CH_HTONS_VOL_HP+0x13c>)
 800de78:	fb2a 3e02 	smlad	lr, sl, r2, r3
 800de7c:	2301      	movs	r3, #1
 800de7e:	fb20 f003 	smuad	r0, r0, r3
 800de82:	4b23      	ldr	r3, [pc, #140]	; (800df10 <D32_1CH_HTONS_VOL_HP+0x140>)
 800de84:	fb2a 0303 	smlad	r3, sl, r3, r0
 800de88:	f5a1 4280 	sub.w	r2, r1, #16384	; 0x4000
 800de8c:	9c03      	ldr	r4, [sp, #12]
 800de8e:	eb02 0009 	add.w	r0, r2, r9
 800de92:	eba0 0008 	sub.w	r0, r0, r8
 800de96:	ea4f 7be0 	mov.w	fp, r0, asr #31
 800de9a:	fba0 0104 	umull	r0, r1, r0, r4
 800de9e:	f110 4000 	adds.w	r0, r0, #2147483648	; 0x80000000
 800dea2:	fb04 110b 	mla	r1, r4, fp, r1
 800dea6:	f141 0100 	adc.w	r1, r1, #0
 800deaa:	9c01      	ldr	r4, [sp, #4]
 800deac:	0388      	lsls	r0, r1, #14
 800deae:	f04f 4800 	mov.w	r8, #2147483648	; 0x80000000
 800deb2:	f04f 0900 	mov.w	r9, #0
 800deb6:	fbc0 8904 	smlal	r8, r9, r0, r4
 800deba:	ea4f 00a9 	mov.w	r0, r9, asr #2
 800debe:	ea4f 0941 	mov.w	r9, r1, lsl #1
 800dec2:	f300 000f 	ssat	r0, #16, r0
 800dec6:	9902      	ldr	r1, [sp, #8]
 800dec8:	f825 0b02 	strh.w	r0, [r5], #2
 800decc:	428d      	cmp	r5, r1
 800dece:	4690      	mov	r8, r2
 800ded0:	d1a2      	bne.n	800de18 <D32_1CH_HTONS_VOL_HP+0x48>
 800ded2:	f8dd a014 	ldr.w	sl, [sp, #20]
 800ded6:	464c      	mov	r4, r9
 800ded8:	f8ca 3008 	str.w	r3, [sl, #8]
 800dedc:	9b04      	ldr	r3, [sp, #16]
 800dede:	f8ca e00c 	str.w	lr, [sl, #12]
 800dee2:	2000      	movs	r0, #0
 800dee4:	f8ca 601c 	str.w	r6, [sl, #28]
 800dee8:	f8ca 4010 	str.w	r4, [sl, #16]
 800deec:	f8ca 2014 	str.w	r2, [sl, #20]
 800def0:	f8ca 3018 	str.w	r3, [sl, #24]
 800def4:	b007      	add	sp, #28
 800def6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800defa:	4642      	mov	r2, r8
 800defc:	e7ec      	b.n	800ded8 <D32_1CH_HTONS_VOL_HP+0x108>
 800defe:	bf00      	nop
 800df00:	20000000 	.word	0x20000000
 800df04:	00060003 	.word	0x00060003
 800df08:	000a000c 	.word	0x000a000c
 800df0c:	000c000a 	.word	0x000c000a
 800df10:	00030006 	.word	0x00030006

0800df14 <D48_1CH_HTONS_VOL_HP>:
 800df14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800df18:	4613      	mov	r3, r2
 800df1a:	461c      	mov	r4, r3
 800df1c:	b087      	sub	sp, #28
 800df1e:	4625      	mov	r5, r4
 800df20:	4626      	mov	r6, r4
 800df22:	6b2d      	ldr	r5, [r5, #48]	; 0x30
 800df24:	9205      	str	r2, [sp, #20]
 800df26:	8cd2      	ldrh	r2, [r2, #38]	; 0x26
 800df28:	f8d3 9014 	ldr.w	r9, [r3, #20]
 800df2c:	9501      	str	r5, [sp, #4]
 800df2e:	4680      	mov	r8, r0
 800df30:	6a35      	ldr	r5, [r6, #32]
 800df32:	6918      	ldr	r0, [r3, #16]
 800df34:	699b      	ldr	r3, [r3, #24]
 800df36:	9304      	str	r3, [sp, #16]
 800df38:	f8d4 e01c 	ldr.w	lr, [r4, #28]
 800df3c:	68a3      	ldr	r3, [r4, #8]
 800df3e:	9502      	str	r5, [sp, #8]
 800df40:	68e4      	ldr	r4, [r4, #12]
 800df42:	2a00      	cmp	r2, #0
 800df44:	f000 808c 	beq.w	800e060 <D48_1CH_HTONS_VOL_HP+0x14c>
 800df48:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 800df4c:	4d45      	ldr	r5, [pc, #276]	; (800e064 <D48_1CH_HTONS_VOL_HP+0x150>)
 800df4e:	9203      	str	r2, [sp, #12]
 800df50:	468c      	mov	ip, r1
 800df52:	e898 0044 	ldmia.w	r8, {r2, r6}
 800df56:	f108 0806 	add.w	r8, r8, #6
 800df5a:	ba52      	rev16	r2, r2
 800df5c:	ba76      	rev16	r6, r6
 800df5e:	b2d7      	uxtb	r7, r2
 800df60:	f3c2 2107 	ubfx	r1, r2, #8, #8
 800df64:	f855 a027 	ldr.w	sl, [r5, r7, lsl #2]
 800df68:	f855 1021 	ldr.w	r1, [r5, r1, lsl #2]
 800df6c:	f3c2 4707 	ubfx	r7, r2, #16, #8
 800df70:	0e12      	lsrs	r2, r2, #24
 800df72:	eb0a 2a9e 	add.w	sl, sl, lr, lsr #10
 800df76:	f855 7027 	ldr.w	r7, [r5, r7, lsl #2]
 800df7a:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 800df7e:	fa5f fb86 	uxtb.w	fp, r6
 800df82:	eb01 219a 	add.w	r1, r1, sl, lsr #10
 800df86:	f3c6 2e07 	ubfx	lr, r6, #8, #8
 800df8a:	eb07 2791 	add.w	r7, r7, r1, lsr #10
 800df8e:	f855 602b 	ldr.w	r6, [r5, fp, lsl #2]
 800df92:	f855 e02e 	ldr.w	lr, [r5, lr, lsl #2]
 800df96:	eb02 2297 	add.w	r2, r2, r7, lsr #10
 800df9a:	eb06 2692 	add.w	r6, r6, r2, lsr #10
 800df9e:	eb0e 2e96 	add.w	lr, lr, r6, lsr #10
 800dfa2:	f3c1 0109 	ubfx	r1, r1, #0, #10
 800dfa6:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800dfaa:	f3ce 0b09 	ubfx	fp, lr, #0, #10
 800dfae:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 800dfb2:	f3c7 0709 	ubfx	r7, r7, #0, #10
 800dfb6:	f3c6 0609 	ubfx	r6, r6, #0, #10
 800dfba:	ea42 4707 	orr.w	r7, r2, r7, lsl #16
 800dfbe:	ea41 4a0a 	orr.w	sl, r1, sl, lsl #16
 800dfc2:	ea4b 4606 	orr.w	r6, fp, r6, lsl #16
 800dfc6:	4a28      	ldr	r2, [pc, #160]	; (800e068 <D48_1CH_HTONS_VOL_HP+0x154>)
 800dfc8:	fb2a 4202 	smlad	r2, sl, r2, r4
 800dfcc:	4927      	ldr	r1, [pc, #156]	; (800e06c <D48_1CH_HTONS_VOL_HP+0x158>)
 800dfce:	fb27 2201 	smlad	r2, r7, r1, r2
 800dfd2:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 800dfd6:	fb26 2201 	smlad	r2, r6, r1, r2
 800dfda:	4925      	ldr	r1, [pc, #148]	; (800e070 <D48_1CH_HTONS_VOL_HP+0x15c>)
 800dfdc:	fb2a 3401 	smlad	r4, sl, r1, r3
 800dfe0:	f04f 131b 	mov.w	r3, #1769499	; 0x1b001b
 800dfe4:	fb27 4403 	smlad	r4, r7, r3, r4
 800dfe8:	4b22      	ldr	r3, [pc, #136]	; (800e074 <D48_1CH_HTONS_VOL_HP+0x160>)
 800dfea:	fb26 4403 	smlad	r4, r6, r3, r4
 800dfee:	2101      	movs	r1, #1
 800dff0:	fb2a fa01 	smuad	sl, sl, r1
 800dff4:	4b20      	ldr	r3, [pc, #128]	; (800e078 <D48_1CH_HTONS_VOL_HP+0x164>)
 800dff6:	fb27 a703 	smlad	r7, r7, r3, sl
 800dffa:	4b20      	ldr	r3, [pc, #128]	; (800e07c <D48_1CH_HTONS_VOL_HP+0x168>)
 800dffc:	fb26 7303 	smlad	r3, r6, r3, r7
 800e000:	f5a2 4258 	sub.w	r2, r2, #55296	; 0xd800
 800e004:	9e02      	ldr	r6, [sp, #8]
 800e006:	9f01      	ldr	r7, [sp, #4]
 800e008:	4410      	add	r0, r2
 800e00a:	eba0 0009 	sub.w	r0, r0, r9
 800e00e:	ea4f 7ae0 	mov.w	sl, r0, asr #31
 800e012:	fba0 0106 	umull	r0, r1, r0, r6
 800e016:	f110 4000 	adds.w	r0, r0, #2147483648	; 0x80000000
 800e01a:	fb06 110a 	mla	r1, r6, sl, r1
 800e01e:	f141 0100 	adc.w	r1, r1, #0
 800e022:	0308      	lsls	r0, r1, #12
 800e024:	f04f 4900 	mov.w	r9, #2147483648	; 0x80000000
 800e028:	f04f 0a00 	mov.w	sl, #0
 800e02c:	fbc0 9a07 	smlal	r9, sl, r0, r7
 800e030:	4657      	mov	r7, sl
 800e032:	10b8      	asrs	r0, r7, #2
 800e034:	f300 000f 	ssat	r0, #16, r0
 800e038:	f82c 0b02 	strh.w	r0, [ip], #2
 800e03c:	0048      	lsls	r0, r1, #1
 800e03e:	9903      	ldr	r1, [sp, #12]
 800e040:	458c      	cmp	ip, r1
 800e042:	4691      	mov	r9, r2
 800e044:	d185      	bne.n	800df52 <D48_1CH_HTONS_VOL_HP+0x3e>
 800e046:	9d05      	ldr	r5, [sp, #20]
 800e048:	616a      	str	r2, [r5, #20]
 800e04a:	9a04      	ldr	r2, [sp, #16]
 800e04c:	6128      	str	r0, [r5, #16]
 800e04e:	2000      	movs	r0, #0
 800e050:	60ab      	str	r3, [r5, #8]
 800e052:	60ec      	str	r4, [r5, #12]
 800e054:	f8c5 e01c 	str.w	lr, [r5, #28]
 800e058:	61aa      	str	r2, [r5, #24]
 800e05a:	b007      	add	sp, #28
 800e05c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e060:	464a      	mov	r2, r9
 800e062:	e7f0      	b.n	800e046 <D48_1CH_HTONS_VOL_HP+0x132>
 800e064:	20000000 	.word	0x20000000
 800e068:	000f000a 	.word	0x000f000a
 800e06c:	00060003 	.word	0x00060003
 800e070:	00150019 	.word	0x00150019
 800e074:	00190015 	.word	0x00190015
 800e078:	00030006 	.word	0x00030006
 800e07c:	000a000f 	.word	0x000a000f

0800e080 <D64_1CH_HTONS_VOL_HP>:
 800e080:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e084:	b089      	sub	sp, #36	; 0x24
 800e086:	4614      	mov	r4, r2
 800e088:	9207      	str	r2, [sp, #28]
 800e08a:	8cd3      	ldrh	r3, [r2, #38]	; 0x26
 800e08c:	f8d2 c010 	ldr.w	ip, [r2, #16]
 800e090:	f8d2 8014 	ldr.w	r8, [r2, #20]
 800e094:	6992      	ldr	r2, [r2, #24]
 800e096:	9206      	str	r2, [sp, #24]
 800e098:	68e2      	ldr	r2, [r4, #12]
 800e09a:	9201      	str	r2, [sp, #4]
 800e09c:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800e09e:	9203      	str	r2, [sp, #12]
 800e0a0:	6a22      	ldr	r2, [r4, #32]
 800e0a2:	69e5      	ldr	r5, [r4, #28]
 800e0a4:	68a6      	ldr	r6, [r4, #8]
 800e0a6:	9204      	str	r2, [sp, #16]
 800e0a8:	2b00      	cmp	r3, #0
 800e0aa:	f000 80b0 	beq.w	800e20e <D64_1CH_HTONS_VOL_HP+0x18e>
 800e0ae:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 800e0b2:	4f58      	ldr	r7, [pc, #352]	; (800e214 <D64_1CH_HTONS_VOL_HP+0x194>)
 800e0b4:	9305      	str	r3, [sp, #20]
 800e0b6:	9102      	str	r1, [sp, #8]
 800e0b8:	f850 2b08 	ldr.w	r2, [r0], #8
 800e0bc:	f850 3c04 	ldr.w	r3, [r0, #-4]
 800e0c0:	ba52      	rev16	r2, r2
 800e0c2:	fa93 f993 	rev16.w	r9, r3
 800e0c6:	b2d4      	uxtb	r4, r2
 800e0c8:	f3c2 2307 	ubfx	r3, r2, #8, #8
 800e0cc:	f857 b024 	ldr.w	fp, [r7, r4, lsl #2]
 800e0d0:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
 800e0d4:	9901      	ldr	r1, [sp, #4]
 800e0d6:	f3c2 4407 	ubfx	r4, r2, #16, #8
 800e0da:	0e12      	lsrs	r2, r2, #24
 800e0dc:	44ab      	add	fp, r5
 800e0de:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800e0e2:	f857 4022 	ldr.w	r4, [r7, r2, lsl #2]
 800e0e6:	fa5f f289 	uxtb.w	r2, r9
 800e0ea:	eb03 2e9b 	add.w	lr, r3, fp, lsr #10
 800e0ee:	f3c9 2307 	ubfx	r3, r9, #8, #8
 800e0f2:	eb05 2a9e 	add.w	sl, r5, lr, lsr #10
 800e0f6:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
 800e0fa:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
 800e0fe:	f3c9 4507 	ubfx	r5, r9, #16, #8
 800e102:	eb04 249a 	add.w	r4, r4, sl, lsr #10
 800e106:	ea4f 6919 	mov.w	r9, r9, lsr #24
 800e10a:	eb02 2294 	add.w	r2, r2, r4, lsr #10
 800e10e:	f857 5025 	ldr.w	r5, [r7, r5, lsl #2]
 800e112:	f857 9029 	ldr.w	r9, [r7, r9, lsl #2]
 800e116:	eb03 2392 	add.w	r3, r3, r2, lsr #10
 800e11a:	eb05 2593 	add.w	r5, r5, r3, lsr #10
 800e11e:	eb09 2995 	add.w	r9, r9, r5, lsr #10
 800e122:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 800e126:	f3cb 0b09 	ubfx	fp, fp, #0, #10
 800e12a:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 800e12e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800e132:	f3c5 0509 	ubfx	r5, r5, #0, #10
 800e136:	ea4e 4b0b 	orr.w	fp, lr, fp, lsl #16
 800e13a:	f3c4 0409 	ubfx	r4, r4, #0, #10
 800e13e:	f3c9 0e09 	ubfx	lr, r9, #0, #10
 800e142:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800e146:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
 800e14a:	ea4e 4e05 	orr.w	lr, lr, r5, lsl #16
 800e14e:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800e152:	ea4f 2599 	mov.w	r5, r9, lsr #10
 800e156:	4b30      	ldr	r3, [pc, #192]	; (800e218 <D64_1CH_HTONS_VOL_HP+0x198>)
 800e158:	fb2b 1303 	smlad	r3, fp, r3, r1
 800e15c:	492f      	ldr	r1, [pc, #188]	; (800e21c <D64_1CH_HTONS_VOL_HP+0x19c>)
 800e15e:	fb24 3301 	smlad	r3, r4, r1, r3
 800e162:	492f      	ldr	r1, [pc, #188]	; (800e220 <D64_1CH_HTONS_VOL_HP+0x1a0>)
 800e164:	fb22 3301 	smlad	r3, r2, r1, r3
 800e168:	f44f 3a80 	mov.w	sl, #65536	; 0x10000
 800e16c:	fb2e 390a 	smlad	r9, lr, sl, r3
 800e170:	4b2c      	ldr	r3, [pc, #176]	; (800e224 <D64_1CH_HTONS_VOL_HP+0x1a4>)
 800e172:	fb2b 6603 	smlad	r6, fp, r3, r6
 800e176:	fb2e 6613 	smladx	r6, lr, r3, r6
 800e17a:	4b2b      	ldr	r3, [pc, #172]	; (800e228 <D64_1CH_HTONS_VOL_HP+0x1a8>)
 800e17c:	fb24 6603 	smlad	r6, r4, r3, r6
 800e180:	fb22 6313 	smladx	r3, r2, r3, r6
 800e184:	f04f 0a01 	mov.w	sl, #1
 800e188:	9301      	str	r3, [sp, #4]
 800e18a:	fb2b fb0a 	smuad	fp, fp, sl
 800e18e:	4b27      	ldr	r3, [pc, #156]	; (800e22c <D64_1CH_HTONS_VOL_HP+0x1ac>)
 800e190:	fb24 ba03 	smlad	sl, r4, r3, fp
 800e194:	4b26      	ldr	r3, [pc, #152]	; (800e230 <D64_1CH_HTONS_VOL_HP+0x1b0>)
 800e196:	fb22 a203 	smlad	r2, r2, r3, sl
 800e19a:	4b26      	ldr	r3, [pc, #152]	; (800e234 <D64_1CH_HTONS_VOL_HP+0x1b4>)
 800e19c:	fb2e 2603 	smlad	r6, lr, r3, r2
 800e1a0:	f5a9 3a00 	sub.w	sl, r9, #131072	; 0x20000
 800e1a4:	eb0a 020c 	add.w	r2, sl, ip
 800e1a8:	9c04      	ldr	r4, [sp, #16]
 800e1aa:	9903      	ldr	r1, [sp, #12]
 800e1ac:	eba2 0208 	sub.w	r2, r2, r8
 800e1b0:	ea4f 79e2 	mov.w	r9, r2, asr #31
 800e1b4:	fba2 2304 	umull	r2, r3, r2, r4
 800e1b8:	f112 4200 	adds.w	r2, r2, #2147483648	; 0x80000000
 800e1bc:	fb04 3309 	mla	r3, r4, r9, r3
 800e1c0:	f143 0300 	adc.w	r3, r3, #0
 800e1c4:	02da      	lsls	r2, r3, #11
 800e1c6:	f04f 4800 	mov.w	r8, #2147483648	; 0x80000000
 800e1ca:	f04f 0900 	mov.w	r9, #0
 800e1ce:	fbc1 8902 	smlal	r8, r9, r1, r2
 800e1d2:	9902      	ldr	r1, [sp, #8]
 800e1d4:	ea4f 02a9 	mov.w	r2, r9, asr #2
 800e1d8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800e1dc:	f302 020f 	ssat	r2, #16, r2
 800e1e0:	9b05      	ldr	r3, [sp, #20]
 800e1e2:	f821 2b02 	strh.w	r2, [r1], #2
 800e1e6:	4299      	cmp	r1, r3
 800e1e8:	9102      	str	r1, [sp, #8]
 800e1ea:	46d0      	mov	r8, sl
 800e1ec:	f47f af64 	bne.w	800e0b8 <D64_1CH_HTONS_VOL_HP+0x38>
 800e1f0:	9a07      	ldr	r2, [sp, #28]
 800e1f2:	9901      	ldr	r1, [sp, #4]
 800e1f4:	60d1      	str	r1, [r2, #12]
 800e1f6:	9906      	ldr	r1, [sp, #24]
 800e1f8:	6096      	str	r6, [r2, #8]
 800e1fa:	2000      	movs	r0, #0
 800e1fc:	61d5      	str	r5, [r2, #28]
 800e1fe:	f8c2 c010 	str.w	ip, [r2, #16]
 800e202:	f8c2 a014 	str.w	sl, [r2, #20]
 800e206:	6191      	str	r1, [r2, #24]
 800e208:	b009      	add	sp, #36	; 0x24
 800e20a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e20e:	46c2      	mov	sl, r8
 800e210:	4622      	mov	r2, r4
 800e212:	e7ee      	b.n	800e1f2 <D64_1CH_HTONS_VOL_HP+0x172>
 800e214:	20000000 	.word	0x20000000
 800e218:	001c0015 	.word	0x001c0015
 800e21c:	000f000a 	.word	0x000f000a
 800e220:	00060003 	.word	0x00060003
 800e224:	0024002a 	.word	0x0024002a
 800e228:	002e0030 	.word	0x002e0030
 800e22c:	00030006 	.word	0x00030006
 800e230:	000a000f 	.word	0x000a000f
 800e234:	0015001c 	.word	0x0015001c

0800e238 <D80_1CH_HTONS_VOL_HP>:
 800e238:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e23c:	4613      	mov	r3, r2
 800e23e:	b089      	sub	sp, #36	; 0x24
 800e240:	4686      	mov	lr, r0
 800e242:	6918      	ldr	r0, [r3, #16]
 800e244:	9000      	str	r0, [sp, #0]
 800e246:	4618      	mov	r0, r3
 800e248:	461c      	mov	r4, r3
 800e24a:	695b      	ldr	r3, [r3, #20]
 800e24c:	9302      	str	r3, [sp, #8]
 800e24e:	6983      	ldr	r3, [r0, #24]
 800e250:	9306      	str	r3, [sp, #24]
 800e252:	f8d0 c008 	ldr.w	ip, [r0, #8]
 800e256:	69c3      	ldr	r3, [r0, #28]
 800e258:	68c0      	ldr	r0, [r0, #12]
 800e25a:	9207      	str	r2, [sp, #28]
 800e25c:	9001      	str	r0, [sp, #4]
 800e25e:	8cd2      	ldrh	r2, [r2, #38]	; 0x26
 800e260:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800e262:	9003      	str	r0, [sp, #12]
 800e264:	6a20      	ldr	r0, [r4, #32]
 800e266:	9004      	str	r0, [sp, #16]
 800e268:	2a00      	cmp	r2, #0
 800e26a:	f000 80d2 	beq.w	800e412 <D80_1CH_HTONS_VOL_HP+0x1da>
 800e26e:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 800e272:	4869      	ldr	r0, [pc, #420]	; (800e418 <D80_1CH_HTONS_VOL_HP+0x1e0>)
 800e274:	9205      	str	r2, [sp, #20]
 800e276:	461c      	mov	r4, r3
 800e278:	f8de 5000 	ldr.w	r5, [lr]
 800e27c:	f8de 2004 	ldr.w	r2, [lr, #4]
 800e280:	f8de 3008 	ldr.w	r3, [lr, #8]
 800e284:	f10e 0e0a 	add.w	lr, lr, #10
 800e288:	ba6d      	rev16	r5, r5
 800e28a:	ba52      	rev16	r2, r2
 800e28c:	fa93 fb93 	rev16.w	fp, r3
 800e290:	b2ee      	uxtb	r6, r5
 800e292:	f3c5 2307 	ubfx	r3, r5, #8, #8
 800e296:	f850 7026 	ldr.w	r7, [r0, r6, lsl #2]
 800e29a:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800e29e:	f3c5 4607 	ubfx	r6, r5, #16, #8
 800e2a2:	eb04 0a07 	add.w	sl, r4, r7
 800e2a6:	0e2d      	lsrs	r5, r5, #24
 800e2a8:	f850 4026 	ldr.w	r4, [r0, r6, lsl #2]
 800e2ac:	f850 6025 	ldr.w	r6, [r0, r5, lsl #2]
 800e2b0:	eb03 239a 	add.w	r3, r3, sl, lsr #10
 800e2b4:	eb04 2993 	add.w	r9, r4, r3, lsr #10
 800e2b8:	b2d5      	uxtb	r5, r2
 800e2ba:	f3c2 2407 	ubfx	r4, r2, #8, #8
 800e2be:	f850 7025 	ldr.w	r7, [r0, r5, lsl #2]
 800e2c2:	f850 5024 	ldr.w	r5, [r0, r4, lsl #2]
 800e2c6:	f3c2 4407 	ubfx	r4, r2, #16, #8
 800e2ca:	eb06 2699 	add.w	r6, r6, r9, lsr #10
 800e2ce:	0e12      	lsrs	r2, r2, #24
 800e2d0:	eb07 2896 	add.w	r8, r7, r6, lsr #10
 800e2d4:	f850 7024 	ldr.w	r7, [r0, r4, lsl #2]
 800e2d8:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
 800e2dc:	fa5f f48b 	uxtb.w	r4, fp
 800e2e0:	eb05 2598 	add.w	r5, r5, r8, lsr #10
 800e2e4:	f3cb 2b07 	ubfx	fp, fp, #8, #8
 800e2e8:	eb07 2795 	add.w	r7, r7, r5, lsr #10
 800e2ec:	f850 4024 	ldr.w	r4, [r0, r4, lsl #2]
 800e2f0:	f850 b02b 	ldr.w	fp, [r0, fp, lsl #2]
 800e2f4:	eb02 2297 	add.w	r2, r2, r7, lsr #10
 800e2f8:	eb04 2492 	add.w	r4, r4, r2, lsr #10
 800e2fc:	eb0b 2b94 	add.w	fp, fp, r4, lsr #10
 800e300:	f3c6 0609 	ubfx	r6, r6, #0, #10
 800e304:	f3c9 0909 	ubfx	r9, r9, #0, #10
 800e308:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 800e30c:	f3c5 0509 	ubfx	r5, r5, #0, #10
 800e310:	f3c7 0709 	ubfx	r7, r7, #0, #10
 800e314:	f3c4 0409 	ubfx	r4, r4, #0, #10
 800e318:	ea46 4909 	orr.w	r9, r6, r9, lsl #16
 800e31c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800e320:	f3cb 0609 	ubfx	r6, fp, #0, #10
 800e324:	f3c8 0809 	ubfx	r8, r8, #0, #10
 800e328:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800e32c:	ea45 4808 	orr.w	r8, r5, r8, lsl #16
 800e330:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800e334:	ea46 4604 	orr.w	r6, r6, r4, lsl #16
 800e338:	ea43 430a 	orr.w	r3, r3, sl, lsl #16
 800e33c:	ea4f 249b 	mov.w	r4, fp, lsr #10
 800e340:	4d36      	ldr	r5, [pc, #216]	; (800e41c <D80_1CH_HTONS_VOL_HP+0x1e4>)
 800e342:	9f01      	ldr	r7, [sp, #4]
 800e344:	fb23 7505 	smlad	r5, r3, r5, r7
 800e348:	4f35      	ldr	r7, [pc, #212]	; (800e420 <D80_1CH_HTONS_VOL_HP+0x1e8>)
 800e34a:	fb29 5507 	smlad	r5, r9, r7, r5
 800e34e:	4f35      	ldr	r7, [pc, #212]	; (800e424 <D80_1CH_HTONS_VOL_HP+0x1ec>)
 800e350:	fb28 5507 	smlad	r5, r8, r7, r5
 800e354:	4f34      	ldr	r7, [pc, #208]	; (800e428 <D80_1CH_HTONS_VOL_HP+0x1f0>)
 800e356:	fb22 5507 	smlad	r5, r2, r7, r5
 800e35a:	f44f 3a80 	mov.w	sl, #65536	; 0x10000
 800e35e:	fb26 5b0a 	smlad	fp, r6, sl, r5
 800e362:	4d32      	ldr	r5, [pc, #200]	; (800e42c <D80_1CH_HTONS_VOL_HP+0x1f4>)
 800e364:	fb23 cc05 	smlad	ip, r3, r5, ip
 800e368:	4d31      	ldr	r5, [pc, #196]	; (800e430 <D80_1CH_HTONS_VOL_HP+0x1f8>)
 800e36a:	fb29 cc05 	smlad	ip, r9, r5, ip
 800e36e:	f04f 154b 	mov.w	r5, #4915275	; 0x4b004b
 800e372:	fb28 c505 	smlad	r5, r8, r5, ip
 800e376:	4f2f      	ldr	r7, [pc, #188]	; (800e434 <D80_1CH_HTONS_VOL_HP+0x1fc>)
 800e378:	fb22 5507 	smlad	r5, r2, r7, r5
 800e37c:	4f2e      	ldr	r7, [pc, #184]	; (800e438 <D80_1CH_HTONS_VOL_HP+0x200>)
 800e37e:	fb26 5507 	smlad	r5, r6, r7, r5
 800e382:	f04f 0a01 	mov.w	sl, #1
 800e386:	9501      	str	r5, [sp, #4]
 800e388:	fb23 fa0a 	smuad	sl, r3, sl
 800e38c:	4b2b      	ldr	r3, [pc, #172]	; (800e43c <D80_1CH_HTONS_VOL_HP+0x204>)
 800e38e:	fb29 a903 	smlad	r9, r9, r3, sl
 800e392:	4d2b      	ldr	r5, [pc, #172]	; (800e440 <D80_1CH_HTONS_VOL_HP+0x208>)
 800e394:	fb28 9805 	smlad	r8, r8, r5, r9
 800e398:	4d2a      	ldr	r5, [pc, #168]	; (800e444 <D80_1CH_HTONS_VOL_HP+0x20c>)
 800e39a:	fb22 8205 	smlad	r2, r2, r5, r8
 800e39e:	4b2a      	ldr	r3, [pc, #168]	; (800e448 <D80_1CH_HTONS_VOL_HP+0x210>)
 800e3a0:	fb26 2c03 	smlad	ip, r6, r3, r2
 800e3a4:	9b00      	ldr	r3, [sp, #0]
 800e3a6:	9d04      	ldr	r5, [sp, #16]
 800e3a8:	f5ab 3a7a 	sub.w	sl, fp, #256000	; 0x3e800
 800e3ac:	4453      	add	r3, sl
 800e3ae:	461a      	mov	r2, r3
 800e3b0:	9b02      	ldr	r3, [sp, #8]
 800e3b2:	f8cd a008 	str.w	sl, [sp, #8]
 800e3b6:	1ad2      	subs	r2, r2, r3
 800e3b8:	17d7      	asrs	r7, r2, #31
 800e3ba:	fba2 2305 	umull	r2, r3, r2, r5
 800e3be:	fb05 3307 	mla	r3, r5, r7, r3
 800e3c2:	f112 4200 	adds.w	r2, r2, #2147483648	; 0x80000000
 800e3c6:	f143 0300 	adc.w	r3, r3, #0
 800e3ca:	9d03      	ldr	r5, [sp, #12]
 800e3cc:	029a      	lsls	r2, r3, #10
 800e3ce:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800e3d2:	2700      	movs	r7, #0
 800e3d4:	005b      	lsls	r3, r3, #1
 800e3d6:	fbc5 6702 	smlal	r6, r7, r5, r2
 800e3da:	10ba      	asrs	r2, r7, #2
 800e3dc:	9300      	str	r3, [sp, #0]
 800e3de:	f302 020f 	ssat	r2, #16, r2
 800e3e2:	9b05      	ldr	r3, [sp, #20]
 800e3e4:	f821 2b02 	strh.w	r2, [r1], #2
 800e3e8:	4299      	cmp	r1, r3
 800e3ea:	f47f af45 	bne.w	800e278 <D80_1CH_HTONS_VOL_HP+0x40>
 800e3ee:	4623      	mov	r3, r4
 800e3f0:	9907      	ldr	r1, [sp, #28]
 800e3f2:	9801      	ldr	r0, [sp, #4]
 800e3f4:	60c8      	str	r0, [r1, #12]
 800e3f6:	9a00      	ldr	r2, [sp, #0]
 800e3f8:	f8c1 c008 	str.w	ip, [r1, #8]
 800e3fc:	4608      	mov	r0, r1
 800e3fe:	61cb      	str	r3, [r1, #28]
 800e400:	610a      	str	r2, [r1, #16]
 800e402:	f8c1 a014 	str.w	sl, [r1, #20]
 800e406:	9906      	ldr	r1, [sp, #24]
 800e408:	6181      	str	r1, [r0, #24]
 800e40a:	2000      	movs	r0, #0
 800e40c:	b009      	add	sp, #36	; 0x24
 800e40e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e412:	f8dd a008 	ldr.w	sl, [sp, #8]
 800e416:	e7eb      	b.n	800e3f0 <D80_1CH_HTONS_VOL_HP+0x1b8>
 800e418:	20000000 	.word	0x20000000
 800e41c:	002d0024 	.word	0x002d0024
 800e420:	001c0015 	.word	0x001c0015
 800e424:	000f000a 	.word	0x000f000a
 800e428:	00060003 	.word	0x00060003
 800e42c:	0037003f 	.word	0x0037003f
 800e430:	00450049 	.word	0x00450049
 800e434:	00490045 	.word	0x00490045
 800e438:	003f0037 	.word	0x003f0037
 800e43c:	00030006 	.word	0x00030006
 800e440:	000a000f 	.word	0x000a000f
 800e444:	0015001c 	.word	0x0015001c
 800e448:	0024002d 	.word	0x0024002d

0800e44c <D128_1CH_HTONS_VOL_HP>:
 800e44c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e450:	b093      	sub	sp, #76	; 0x4c
 800e452:	4614      	mov	r4, r2
 800e454:	9211      	str	r2, [sp, #68]	; 0x44
 800e456:	8cd3      	ldrh	r3, [r2, #38]	; 0x26
 800e458:	6912      	ldr	r2, [r2, #16]
 800e45a:	9203      	str	r2, [sp, #12]
 800e45c:	4622      	mov	r2, r4
 800e45e:	4615      	mov	r5, r2
 800e460:	6964      	ldr	r4, [r4, #20]
 800e462:	9406      	str	r4, [sp, #24]
 800e464:	4614      	mov	r4, r2
 800e466:	6992      	ldr	r2, [r2, #24]
 800e468:	9210      	str	r2, [sp, #64]	; 0x40
 800e46a:	68ea      	ldr	r2, [r5, #12]
 800e46c:	9204      	str	r2, [sp, #16]
 800e46e:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 800e470:	69e6      	ldr	r6, [r4, #28]
 800e472:	920d      	str	r2, [sp, #52]	; 0x34
 800e474:	68a4      	ldr	r4, [r4, #8]
 800e476:	6a2a      	ldr	r2, [r5, #32]
 800e478:	9405      	str	r4, [sp, #20]
 800e47a:	920e      	str	r2, [sp, #56]	; 0x38
 800e47c:	2b00      	cmp	r3, #0
 800e47e:	f000 8145 	beq.w	800e70c <D128_1CH_HTONS_VOL_HP+0x2c0>
 800e482:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 800e486:	930f      	str	r3, [sp, #60]	; 0x3c
 800e488:	f8df 82dc 	ldr.w	r8, [pc, #732]	; 800e768 <D128_1CH_HTONS_VOL_HP+0x31c>
 800e48c:	9107      	str	r1, [sp, #28]
 800e48e:	f100 0310 	add.w	r3, r0, #16
 800e492:	4699      	mov	r9, r3
 800e494:	f1a9 0110 	sub.w	r1, r9, #16
 800e498:	c90e      	ldmia	r1, {r1, r2, r3}
 800e49a:	f859 0c04 	ldr.w	r0, [r9, #-4]
 800e49e:	ba49      	rev16	r1, r1
 800e4a0:	ba52      	rev16	r2, r2
 800e4a2:	ba5b      	rev16	r3, r3
 800e4a4:	fa90 fa90 	rev16.w	sl, r0
 800e4a8:	f3c1 2007 	ubfx	r0, r1, #8, #8
 800e4ac:	b2cc      	uxtb	r4, r1
 800e4ae:	f858 5020 	ldr.w	r5, [r8, r0, lsl #2]
 800e4b2:	f858 4024 	ldr.w	r4, [r8, r4, lsl #2]
 800e4b6:	f3c1 4007 	ubfx	r0, r1, #16, #8
 800e4ba:	0e09      	lsrs	r1, r1, #24
 800e4bc:	4426      	add	r6, r4
 800e4be:	f858 4020 	ldr.w	r4, [r8, r0, lsl #2]
 800e4c2:	f858 7021 	ldr.w	r7, [r8, r1, lsl #2]
 800e4c6:	b2d0      	uxtb	r0, r2
 800e4c8:	eb05 2596 	add.w	r5, r5, r6, lsr #10
 800e4cc:	eb04 2b95 	add.w	fp, r4, r5, lsr #10
 800e4d0:	f3c2 2107 	ubfx	r1, r2, #8, #8
 800e4d4:	f858 4020 	ldr.w	r4, [r8, r0, lsl #2]
 800e4d8:	f858 1021 	ldr.w	r1, [r8, r1, lsl #2]
 800e4dc:	eb07 279b 	add.w	r7, r7, fp, lsr #10
 800e4e0:	f3c2 4007 	ubfx	r0, r2, #16, #8
 800e4e4:	0e12      	lsrs	r2, r2, #24
 800e4e6:	eb04 2497 	add.w	r4, r4, r7, lsr #10
 800e4ea:	9701      	str	r7, [sp, #4]
 800e4ec:	f858 0020 	ldr.w	r0, [r8, r0, lsl #2]
 800e4f0:	4627      	mov	r7, r4
 800e4f2:	f858 4022 	ldr.w	r4, [r8, r2, lsl #2]
 800e4f6:	9702      	str	r7, [sp, #8]
 800e4f8:	b2da      	uxtb	r2, r3
 800e4fa:	eb01 2197 	add.w	r1, r1, r7, lsr #10
 800e4fe:	eb00 2c91 	add.w	ip, r0, r1, lsr #10
 800e502:	f858 0022 	ldr.w	r0, [r8, r2, lsl #2]
 800e506:	eb04 249c 	add.w	r4, r4, ip, lsr #10
 800e50a:	eb00 2e94 	add.w	lr, r0, r4, lsr #10
 800e50e:	f3c3 2207 	ubfx	r2, r3, #8, #8
 800e512:	f3c3 4007 	ubfx	r0, r3, #16, #8
 800e516:	0e1b      	lsrs	r3, r3, #24
 800e518:	f858 7020 	ldr.w	r7, [r8, r0, lsl #2]
 800e51c:	f858 2022 	ldr.w	r2, [r8, r2, lsl #2]
 800e520:	f858 0023 	ldr.w	r0, [r8, r3, lsl #2]
 800e524:	fa5f f38a 	uxtb.w	r3, sl
 800e528:	f3c6 0609 	ubfx	r6, r6, #0, #10
 800e52c:	960a      	str	r6, [sp, #40]	; 0x28
 800e52e:	eb02 229e 	add.w	r2, r2, lr, lsr #10
 800e532:	f858 6023 	ldr.w	r6, [r8, r3, lsl #2]
 800e536:	f3c5 0509 	ubfx	r5, r5, #0, #10
 800e53a:	f3ca 2307 	ubfx	r3, sl, #8, #8
 800e53e:	950b      	str	r5, [sp, #44]	; 0x2c
 800e540:	eb07 2792 	add.w	r7, r7, r2, lsr #10
 800e544:	f3ca 4507 	ubfx	r5, sl, #16, #8
 800e548:	eb00 2097 	add.w	r0, r0, r7, lsr #10
 800e54c:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
 800e550:	f858 5025 	ldr.w	r5, [r8, r5, lsl #2]
 800e554:	ea4f 6a1a 	mov.w	sl, sl, lsr #24
 800e558:	eb06 2690 	add.w	r6, r6, r0, lsr #10
 800e55c:	eb03 2396 	add.w	r3, r3, r6, lsr #10
 800e560:	f858 a02a 	ldr.w	sl, [r8, sl, lsl #2]
 800e564:	9308      	str	r3, [sp, #32]
 800e566:	eb05 2593 	add.w	r5, r5, r3, lsr #10
 800e56a:	9b01      	ldr	r3, [sp, #4]
 800e56c:	eb0a 2a95 	add.w	sl, sl, r5, lsr #10
 800e570:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 800e574:	f3c3 0a09 	ubfx	sl, r3, #0, #10
 800e578:	9b02      	ldr	r3, [sp, #8]
 800e57a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800e57e:	9302      	str	r3, [sp, #8]
 800e580:	9b08      	ldr	r3, [sp, #32]
 800e582:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800e586:	9308      	str	r3, [sp, #32]
 800e588:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e58a:	f3c5 0509 	ubfx	r5, r5, #0, #10
 800e58e:	950c      	str	r5, [sp, #48]	; 0x30
 800e590:	461d      	mov	r5, r3
 800e592:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e594:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 800e598:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800e59c:	ea45 4303 	orr.w	r3, r5, r3, lsl #16
 800e5a0:	ea42 420e 	orr.w	r2, r2, lr, lsl #16
 800e5a4:	9301      	str	r3, [sp, #4]
 800e5a6:	9b02      	ldr	r3, [sp, #8]
 800e5a8:	9202      	str	r2, [sp, #8]
 800e5aa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e5ac:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800e5ae:	f3c7 0709 	ubfx	r7, r7, #0, #10
 800e5b2:	f3c0 0009 	ubfx	r0, r0, #0, #10
 800e5b6:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 800e5ba:	f3c1 0109 	ubfx	r1, r1, #0, #10
 800e5be:	f3c2 0709 	ubfx	r7, r2, #0, #10
 800e5c2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800e5c6:	ea47 4505 	orr.w	r5, r7, r5, lsl #16
 800e5ca:	9b08      	ldr	r3, [sp, #32]
 800e5cc:	9f01      	ldr	r7, [sp, #4]
 800e5ce:	f3cb 0b09 	ubfx	fp, fp, #0, #10
 800e5d2:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 800e5d6:	f3c6 0609 	ubfx	r6, r6, #0, #10
 800e5da:	f3c4 0409 	ubfx	r4, r4, #0, #10
 800e5de:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800e5e2:	46be      	mov	lr, r7
 800e5e4:	0a96      	lsrs	r6, r2, #10
 800e5e6:	ea4a 4a0b 	orr.w	sl, sl, fp, lsl #16
 800e5ea:	ea44 440c 	orr.w	r4, r4, ip, lsl #16
 800e5ee:	4f49      	ldr	r7, [pc, #292]	; (800e714 <D128_1CH_HTONS_VOL_HP+0x2c8>)
 800e5f0:	9a04      	ldr	r2, [sp, #16]
 800e5f2:	fb2e 2e07 	smlad	lr, lr, r7, r2
 800e5f6:	4a48      	ldr	r2, [pc, #288]	; (800e718 <D128_1CH_HTONS_VOL_HP+0x2cc>)
 800e5f8:	fb2a ee02 	smlad	lr, sl, r2, lr
 800e5fc:	4a47      	ldr	r2, [pc, #284]	; (800e71c <D128_1CH_HTONS_VOL_HP+0x2d0>)
 800e5fe:	fb21 ee02 	smlad	lr, r1, r2, lr
 800e602:	4a47      	ldr	r2, [pc, #284]	; (800e720 <D128_1CH_HTONS_VOL_HP+0x2d4>)
 800e604:	fb24 ee02 	smlad	lr, r4, r2, lr
 800e608:	4a46      	ldr	r2, [pc, #280]	; (800e724 <D128_1CH_HTONS_VOL_HP+0x2d8>)
 800e60a:	9f02      	ldr	r7, [sp, #8]
 800e60c:	fb27 ee02 	smlad	lr, r7, r2, lr
 800e610:	4a45      	ldr	r2, [pc, #276]	; (800e728 <D128_1CH_HTONS_VOL_HP+0x2dc>)
 800e612:	fb20 ee02 	smlad	lr, r0, r2, lr
 800e616:	4a45      	ldr	r2, [pc, #276]	; (800e72c <D128_1CH_HTONS_VOL_HP+0x2e0>)
 800e618:	fb23 e702 	smlad	r7, r3, r2, lr
 800e61c:	f44f 3e80 	mov.w	lr, #65536	; 0x10000
 800e620:	fb25 7e0e 	smlad	lr, r5, lr, r7
 800e624:	9f01      	ldr	r7, [sp, #4]
 800e626:	4a42      	ldr	r2, [pc, #264]	; (800e730 <D128_1CH_HTONS_VOL_HP+0x2e4>)
 800e628:	46bc      	mov	ip, r7
 800e62a:	9f05      	ldr	r7, [sp, #20]
 800e62c:	fb2c 7c02 	smlad	ip, ip, r2, r7
 800e630:	4a40      	ldr	r2, [pc, #256]	; (800e734 <D128_1CH_HTONS_VOL_HP+0x2e8>)
 800e632:	fb2a cc02 	smlad	ip, sl, r2, ip
 800e636:	4f40      	ldr	r7, [pc, #256]	; (800e738 <D128_1CH_HTONS_VOL_HP+0x2ec>)
 800e638:	fb21 cc07 	smlad	ip, r1, r7, ip
 800e63c:	4f3f      	ldr	r7, [pc, #252]	; (800e73c <D128_1CH_HTONS_VOL_HP+0x2f0>)
 800e63e:	fb24 cc07 	smlad	ip, r4, r7, ip
 800e642:	4f3f      	ldr	r7, [pc, #252]	; (800e740 <D128_1CH_HTONS_VOL_HP+0x2f4>)
 800e644:	9a02      	ldr	r2, [sp, #8]
 800e646:	fb22 cc07 	smlad	ip, r2, r7, ip
 800e64a:	4f3e      	ldr	r7, [pc, #248]	; (800e744 <D128_1CH_HTONS_VOL_HP+0x2f8>)
 800e64c:	fb20 cc07 	smlad	ip, r0, r7, ip
 800e650:	4f3d      	ldr	r7, [pc, #244]	; (800e748 <D128_1CH_HTONS_VOL_HP+0x2fc>)
 800e652:	fb23 c707 	smlad	r7, r3, r7, ip
 800e656:	f8df c114 	ldr.w	ip, [pc, #276]	; 800e76c <D128_1CH_HTONS_VOL_HP+0x320>
 800e65a:	fb25 720c 	smlad	r2, r5, ip, r7
 800e65e:	f04f 0b01 	mov.w	fp, #1
 800e662:	9204      	str	r2, [sp, #16]
 800e664:	9f01      	ldr	r7, [sp, #4]
 800e666:	fb27 fb0b 	smuad	fp, r7, fp
 800e66a:	4f38      	ldr	r7, [pc, #224]	; (800e74c <D128_1CH_HTONS_VOL_HP+0x300>)
 800e66c:	fb2a ba07 	smlad	sl, sl, r7, fp
 800e670:	4f37      	ldr	r7, [pc, #220]	; (800e750 <D128_1CH_HTONS_VOL_HP+0x304>)
 800e672:	fb21 aa07 	smlad	sl, r1, r7, sl
 800e676:	4f37      	ldr	r7, [pc, #220]	; (800e754 <D128_1CH_HTONS_VOL_HP+0x308>)
 800e678:	fb24 aa07 	smlad	sl, r4, r7, sl
 800e67c:	4f36      	ldr	r7, [pc, #216]	; (800e758 <D128_1CH_HTONS_VOL_HP+0x30c>)
 800e67e:	9a02      	ldr	r2, [sp, #8]
 800e680:	fb22 a707 	smlad	r7, r2, r7, sl
 800e684:	4a35      	ldr	r2, [pc, #212]	; (800e75c <D128_1CH_HTONS_VOL_HP+0x310>)
 800e686:	fb20 7702 	smlad	r7, r0, r2, r7
 800e68a:	4a35      	ldr	r2, [pc, #212]	; (800e760 <D128_1CH_HTONS_VOL_HP+0x314>)
 800e68c:	fb23 7702 	smlad	r7, r3, r2, r7
 800e690:	4b34      	ldr	r3, [pc, #208]	; (800e764 <D128_1CH_HTONS_VOL_HP+0x318>)
 800e692:	fb25 7303 	smlad	r3, r5, r3, r7
 800e696:	9305      	str	r3, [sp, #20]
 800e698:	9b03      	ldr	r3, [sp, #12]
 800e69a:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 800e69c:	f5ae 1e80 	sub.w	lr, lr, #1048576	; 0x100000
 800e6a0:	4473      	add	r3, lr
 800e6a2:	461a      	mov	r2, r3
 800e6a4:	9b06      	ldr	r3, [sp, #24]
 800e6a6:	f8cd e018 	str.w	lr, [sp, #24]
 800e6aa:	1ad2      	subs	r2, r2, r3
 800e6ac:	17d1      	asrs	r1, r2, #31
 800e6ae:	fba2 2304 	umull	r2, r3, r2, r4
 800e6b2:	fb04 3301 	mla	r3, r4, r1, r3
 800e6b6:	f112 4200 	adds.w	r2, r2, #2147483648	; 0x80000000
 800e6ba:	f143 0300 	adc.w	r3, r3, #0
 800e6be:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 800e6c0:	021a      	lsls	r2, r3, #8
 800e6c2:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 800e6c6:	2100      	movs	r1, #0
 800e6c8:	fbc4 0102 	smlal	r0, r1, r4, r2
 800e6cc:	108a      	asrs	r2, r1, #2
 800e6ce:	9907      	ldr	r1, [sp, #28]
 800e6d0:	f302 020f 	ssat	r2, #16, r2
 800e6d4:	005b      	lsls	r3, r3, #1
 800e6d6:	f821 2b02 	strh.w	r2, [r1], #2
 800e6da:	9303      	str	r3, [sp, #12]
 800e6dc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800e6de:	9107      	str	r1, [sp, #28]
 800e6e0:	4299      	cmp	r1, r3
 800e6e2:	f109 0910 	add.w	r9, r9, #16
 800e6e6:	f47f aed5 	bne.w	800e494 <D128_1CH_HTONS_VOL_HP+0x48>
 800e6ea:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800e6ec:	9905      	ldr	r1, [sp, #20]
 800e6ee:	6091      	str	r1, [r2, #8]
 800e6f0:	9904      	ldr	r1, [sp, #16]
 800e6f2:	60d1      	str	r1, [r2, #12]
 800e6f4:	4613      	mov	r3, r2
 800e6f6:	61d6      	str	r6, [r2, #28]
 800e6f8:	9910      	ldr	r1, [sp, #64]	; 0x40
 800e6fa:	9a03      	ldr	r2, [sp, #12]
 800e6fc:	611a      	str	r2, [r3, #16]
 800e6fe:	2000      	movs	r0, #0
 800e700:	f8c3 e014 	str.w	lr, [r3, #20]
 800e704:	6199      	str	r1, [r3, #24]
 800e706:	b013      	add	sp, #76	; 0x4c
 800e708:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e70c:	f8dd e018 	ldr.w	lr, [sp, #24]
 800e710:	e7eb      	b.n	800e6ea <D128_1CH_HTONS_VOL_HP+0x29e>
 800e712:	bf00      	nop
 800e714:	00780069 	.word	0x00780069
 800e718:	005b004e 	.word	0x005b004e
 800e71c:	00420037 	.word	0x00420037
 800e720:	002d0024 	.word	0x002d0024
 800e724:	001c0015 	.word	0x001c0015
 800e728:	000f000a 	.word	0x000f000a
 800e72c:	00060003 	.word	0x00060003
 800e730:	00880096 	.word	0x00880096
 800e734:	00a200ac 	.word	0x00a200ac
 800e738:	00b400ba 	.word	0x00b400ba
 800e73c:	00be00c0 	.word	0x00be00c0
 800e740:	00c000be 	.word	0x00c000be
 800e744:	00ba00b4 	.word	0x00ba00b4
 800e748:	00ac00a2 	.word	0x00ac00a2
 800e74c:	00030006 	.word	0x00030006
 800e750:	000a000f 	.word	0x000a000f
 800e754:	0015001c 	.word	0x0015001c
 800e758:	0024002d 	.word	0x0024002d
 800e75c:	00370042 	.word	0x00370042
 800e760:	004e005b 	.word	0x004e005b
 800e764:	00690078 	.word	0x00690078
 800e768:	20000000 	.word	0x20000000
 800e76c:	00960088 	.word	0x00960088

0800e770 <PDM_Filter_Init>:
 800e770:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e772:	2240      	movs	r2, #64	; 0x40
 800e774:	4604      	mov	r4, r0
 800e776:	2100      	movs	r1, #0
 800e778:	300c      	adds	r0, #12
 800e77a:	f000 fa14 	bl	800eba6 <memset>
 800e77e:	493b      	ldr	r1, [pc, #236]	; (800e86c <PDM_Filter_Init+0xfc>)
 800e780:	483b      	ldr	r0, [pc, #236]	; (800e870 <PDM_Filter_Init+0x100>)
 800e782:	f000 f98d 	bl	800eaa0 <CRC_Lock>
 800e786:	8822      	ldrh	r2, [r4, #0]
 800e788:	8963      	ldrh	r3, [r4, #10]
 800e78a:	4938      	ldr	r1, [pc, #224]	; (800e86c <PDM_Filter_Init+0xfc>)
 800e78c:	8925      	ldrh	r5, [r4, #8]
 800e78e:	86a3      	strh	r3, [r4, #52]	; 0x34
 800e790:	2801      	cmp	r0, #1
 800e792:	f04f 0300 	mov.w	r3, #0
 800e796:	bf18      	it	ne
 800e798:	2100      	movne	r1, #0
 800e79a:	2a01      	cmp	r2, #1
 800e79c:	6461      	str	r1, [r4, #68]	; 0x44
 800e79e:	86e5      	strh	r5, [r4, #54]	; 0x36
 800e7a0:	61a3      	str	r3, [r4, #24]
 800e7a2:	6123      	str	r3, [r4, #16]
 800e7a4:	6163      	str	r3, [r4, #20]
 800e7a6:	60e3      	str	r3, [r4, #12]
 800e7a8:	6263      	str	r3, [r4, #36]	; 0x24
 800e7aa:	61e3      	str	r3, [r4, #28]
 800e7ac:	6223      	str	r3, [r4, #32]
 800e7ae:	6423      	str	r3, [r4, #64]	; 0x40
 800e7b0:	d918      	bls.n	800e7e4 <PDM_Filter_Init+0x74>
 800e7b2:	2003      	movs	r0, #3
 800e7b4:	2302      	movs	r3, #2
 800e7b6:	8862      	ldrh	r2, [r4, #2]
 800e7b8:	2a01      	cmp	r2, #1
 800e7ba:	d91d      	bls.n	800e7f8 <PDM_Filter_Init+0x88>
 800e7bc:	2140      	movs	r1, #64	; 0x40
 800e7be:	2300      	movs	r3, #0
 800e7c0:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800e7c2:	f1b2 1f01 	cmp.w	r2, #65537	; 0x10001
 800e7c6:	6862      	ldr	r2, [r4, #4]
 800e7c8:	bf04      	itt	eq
 800e7ca:	6421      	streq	r1, [r4, #64]	; 0x40
 800e7cc:	460b      	moveq	r3, r1
 800e7ce:	b11a      	cbz	r2, 800e7d8 <PDM_Filter_Init+0x68>
 800e7d0:	f043 0310 	orr.w	r3, r3, #16
 800e7d4:	6423      	str	r3, [r4, #64]	; 0x40
 800e7d6:	62e2      	str	r2, [r4, #44]	; 0x2c
 800e7d8:	2200      	movs	r2, #0
 800e7da:	8722      	strh	r2, [r4, #56]	; 0x38
 800e7dc:	b908      	cbnz	r0, 800e7e2 <PDM_Filter_Init+0x72>
 800e7de:	3380      	adds	r3, #128	; 0x80
 800e7e0:	6423      	str	r3, [r4, #64]	; 0x40
 800e7e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e7e4:	4d23      	ldr	r5, [pc, #140]	; (800e874 <PDM_Filter_Init+0x104>)
 800e7e6:	d010      	beq.n	800e80a <PDM_Filter_Init+0x9a>
 800e7e8:	782a      	ldrb	r2, [r5, #0]
 800e7ea:	2a01      	cmp	r2, #1
 800e7ec:	d027      	beq.n	800e83e <PDM_Filter_Init+0xce>
 800e7ee:	8862      	ldrh	r2, [r4, #2]
 800e7f0:	2a01      	cmp	r2, #1
 800e7f2:	f04f 0001 	mov.w	r0, #1
 800e7f6:	d8e1      	bhi.n	800e7bc <PDM_Filter_Init+0x4c>
 800e7f8:	d001      	beq.n	800e7fe <PDM_Filter_Init+0x8e>
 800e7fa:	4618      	mov	r0, r3
 800e7fc:	e7de      	b.n	800e7bc <PDM_Filter_Init+0x4c>
 800e7fe:	2220      	movs	r2, #32
 800e800:	4618      	mov	r0, r3
 800e802:	6422      	str	r2, [r4, #64]	; 0x40
 800e804:	4613      	mov	r3, r2
 800e806:	2160      	movs	r1, #96	; 0x60
 800e808:	e7da      	b.n	800e7c0 <PDM_Filter_Init+0x50>
 800e80a:	7829      	ldrb	r1, [r5, #0]
 800e80c:	2900      	cmp	r1, #0
 800e80e:	d1ee      	bne.n	800e7ee <PDM_Filter_Init+0x7e>
 800e810:	4919      	ldr	r1, [pc, #100]	; (800e878 <PDM_Filter_Init+0x108>)
 800e812:	f8df e06c 	ldr.w	lr, [pc, #108]	; 800e880 <PDM_Filter_Init+0x110>
 800e816:	4f19      	ldr	r7, [pc, #100]	; (800e87c <PDM_Filter_Init+0x10c>)
 800e818:	f501 6680 	add.w	r6, r1, #1024	; 0x400
 800e81c:	684a      	ldr	r2, [r1, #4]
 800e81e:	ea0e 5302 	and.w	r3, lr, r2, lsl #20
 800e822:	ea02 0007 	and.w	r0, r2, r7
 800e826:	4303      	orrs	r3, r0
 800e828:	f3c2 5209 	ubfx	r2, r2, #20, #10
 800e82c:	4413      	add	r3, r2
 800e82e:	f841 3f04 	str.w	r3, [r1, #4]!
 800e832:	428e      	cmp	r6, r1
 800e834:	d1f2      	bne.n	800e81c <PDM_Filter_Init+0xac>
 800e836:	2001      	movs	r0, #1
 800e838:	7028      	strb	r0, [r5, #0]
 800e83a:	2300      	movs	r3, #0
 800e83c:	e7bb      	b.n	800e7b6 <PDM_Filter_Init+0x46>
 800e83e:	490e      	ldr	r1, [pc, #56]	; (800e878 <PDM_Filter_Init+0x108>)
 800e840:	f8df e03c 	ldr.w	lr, [pc, #60]	; 800e880 <PDM_Filter_Init+0x110>
 800e844:	4f0d      	ldr	r7, [pc, #52]	; (800e87c <PDM_Filter_Init+0x10c>)
 800e846:	f501 6680 	add.w	r6, r1, #1024	; 0x400
 800e84a:	684a      	ldr	r2, [r1, #4]
 800e84c:	ea0e 5302 	and.w	r3, lr, r2, lsl #20
 800e850:	ea02 0007 	and.w	r0, r2, r7
 800e854:	4303      	orrs	r3, r0
 800e856:	f3c2 5209 	ubfx	r2, r2, #20, #10
 800e85a:	4413      	add	r3, r2
 800e85c:	f841 3f04 	str.w	r3, [r1, #4]!
 800e860:	428e      	cmp	r6, r1
 800e862:	d1f2      	bne.n	800e84a <PDM_Filter_Init+0xda>
 800e864:	2300      	movs	r3, #0
 800e866:	702b      	strb	r3, [r5, #0]
 800e868:	e7c1      	b.n	800e7ee <PDM_Filter_Init+0x7e>
 800e86a:	bf00      	nop
 800e86c:	b5e8b5cd 	.word	0xb5e8b5cd
 800e870:	f407a5c2 	.word	0xf407a5c2
 800e874:	20000604 	.word	0x20000604
 800e878:	1ffffffc 	.word	0x1ffffffc
 800e87c:	000ffc00 	.word	0x000ffc00
 800e880:	3ff00000 	.word	0x3ff00000

0800e884 <PDM_Filter_setConfig>:
 800e884:	4b66      	ldr	r3, [pc, #408]	; (800ea20 <PDM_Filter_setConfig+0x19c>)
 800e886:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800e888:	429a      	cmp	r2, r3
 800e88a:	d001      	beq.n	800e890 <PDM_Filter_setConfig+0xc>
 800e88c:	2004      	movs	r0, #4
 800e88e:	4770      	bx	lr
 800e890:	b530      	push	{r4, r5, lr}
 800e892:	880a      	ldrh	r2, [r1, #0]
 800e894:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800e896:	ed2d 8b04 	vpush	{d8-d9}
 800e89a:	4604      	mov	r4, r0
 800e89c:	460d      	mov	r5, r1
 800e89e:	1e51      	subs	r1, r2, #1
 800e8a0:	f423 7080 	bic.w	r0, r3, #256	; 0x100
 800e8a4:	2906      	cmp	r1, #6
 800e8a6:	b083      	sub	sp, #12
 800e8a8:	6420      	str	r0, [r4, #64]	; 0x40
 800e8aa:	d91a      	bls.n	800e8e2 <PDM_Filter_setConfig+0x5e>
 800e8ac:	2008      	movs	r0, #8
 800e8ae:	f9b4 1038 	ldrsh.w	r1, [r4, #56]	; 0x38
 800e8b2:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
 800e8b6:	4299      	cmp	r1, r3
 800e8b8:	d07e      	beq.n	800e9b8 <PDM_Filter_setConfig+0x134>
 800e8ba:	f113 0f0c 	cmn.w	r3, #12
 800e8be:	da2a      	bge.n	800e916 <PDM_Filter_setConfig+0x92>
 800e8c0:	f64f 73f4 	movw	r3, #65524	; 0xfff4
 800e8c4:	3040      	adds	r0, #64	; 0x40
 800e8c6:	80ab      	strh	r3, [r5, #4]
 800e8c8:	8622      	strh	r2, [r4, #48]	; 0x30
 800e8ca:	886b      	ldrh	r3, [r5, #2]
 800e8cc:	8663      	strh	r3, [r4, #50]	; 0x32
 800e8ce:	b920      	cbnz	r0, 800e8da <PDM_Filter_setConfig+0x56>
 800e8d0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800e8d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800e8d6:	6423      	str	r3, [r4, #64]	; 0x40
 800e8d8:	2000      	movs	r0, #0
 800e8da:	b003      	add	sp, #12
 800e8dc:	ecbd 8b04 	vpop	{d8-d9}
 800e8e0:	bd30      	pop	{r4, r5, pc}
 800e8e2:	8e21      	ldrh	r1, [r4, #48]	; 0x30
 800e8e4:	4291      	cmp	r1, r2
 800e8e6:	d06c      	beq.n	800e9c2 <PDM_Filter_setConfig+0x13e>
 800e8e8:	f423 7387 	bic.w	r3, r3, #270	; 0x10e
 800e8ec:	f023 0301 	bic.w	r3, r3, #1
 800e8f0:	4313      	orrs	r3, r2
 800e8f2:	f003 0170 	and.w	r1, r3, #112	; 0x70
 800e8f6:	6423      	str	r3, [r4, #64]	; 0x40
 800e8f8:	2970      	cmp	r1, #112	; 0x70
 800e8fa:	f003 030f 	and.w	r3, r3, #15
 800e8fe:	f103 33ff 	add.w	r3, r3, #4294967295
 800e902:	d066      	beq.n	800e9d2 <PDM_Filter_setConfig+0x14e>
 800e904:	2b06      	cmp	r3, #6
 800e906:	f200 8089 	bhi.w	800ea1c <PDM_Filter_setConfig+0x198>
 800e90a:	e8df f003 	tbb	[pc, r3]
 800e90e:	4f52      	.short	0x4f52
 800e910:	3d43494c 	.word	0x3d43494c
 800e914:	46          	.byte	0x46
 800e915:	00          	.byte	0x00
 800e916:	2b33      	cmp	r3, #51	; 0x33
 800e918:	dc32      	bgt.n	800e980 <PDM_Filter_setConfig+0xfc>
 800e91a:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800e91c:	f002 020f 	and.w	r2, r2, #15
 800e920:	3a01      	subs	r2, #1
 800e922:	2a06      	cmp	r2, #6
 800e924:	d872      	bhi.n	800ea0c <PDM_Filter_setConfig+0x188>
 800e926:	493f      	ldr	r1, [pc, #252]	; (800ea24 <PDM_Filter_setConfig+0x1a0>)
 800e928:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 800e92c:	ed92 9a00 	vldr	s18, [r2]
 800e930:	ed92 8a07 	vldr	s16, [r2, #28]
 800e934:	9001      	str	r0, [sp, #4]
 800e936:	ee07 3a90 	vmov	s15, r3
 800e93a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e93e:	eef3 0a04 	vmov.f32	s1, #52	; 0x41a00000  20.0
 800e942:	eec7 0aa0 	vdiv.f32	s1, s15, s1
 800e946:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 800e94a:	f000 fa6f 	bl	800ee2c <powf>
 800e94e:	eddf 0a36 	vldr	s1, [pc, #216]	; 800ea28 <PDM_Filter_setConfig+0x1a4>
 800e952:	eef0 8a40 	vmov.f32	s17, s0
 800e956:	ee70 0ac9 	vsub.f32	s1, s1, s18
 800e95a:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 800e95e:	f000 fa65 	bl	800ee2c <powf>
 800e962:	ee28 8a28 	vmul.f32	s16, s16, s17
 800e966:	ee28 0a00 	vmul.f32	s0, s16, s0
 800e96a:	f000 f9df 	bl	800ed2c <roundf>
 800e96e:	eebc 0ac0 	vcvt.u32.f32	s0, s0
 800e972:	88ab      	ldrh	r3, [r5, #4]
 800e974:	882a      	ldrh	r2, [r5, #0]
 800e976:	9801      	ldr	r0, [sp, #4]
 800e978:	ed84 0a0f 	vstr	s0, [r4, #60]	; 0x3c
 800e97c:	8723      	strh	r3, [r4, #56]	; 0x38
 800e97e:	e7a3      	b.n	800e8c8 <PDM_Filter_setConfig+0x44>
 800e980:	2333      	movs	r3, #51	; 0x33
 800e982:	3040      	adds	r0, #64	; 0x40
 800e984:	80ab      	strh	r3, [r5, #4]
 800e986:	e79f      	b.n	800e8c8 <PDM_Filter_setConfig+0x44>
 800e988:	4b28      	ldr	r3, [pc, #160]	; (800ea2c <PDM_Filter_setConfig+0x1a8>)
 800e98a:	64a3      	str	r3, [r4, #72]	; 0x48
 800e98c:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
 800e990:	2000      	movs	r0, #0
 800e992:	e792      	b.n	800e8ba <PDM_Filter_setConfig+0x36>
 800e994:	4b26      	ldr	r3, [pc, #152]	; (800ea30 <PDM_Filter_setConfig+0x1ac>)
 800e996:	64a3      	str	r3, [r4, #72]	; 0x48
 800e998:	e7f8      	b.n	800e98c <PDM_Filter_setConfig+0x108>
 800e99a:	4b26      	ldr	r3, [pc, #152]	; (800ea34 <PDM_Filter_setConfig+0x1b0>)
 800e99c:	64a3      	str	r3, [r4, #72]	; 0x48
 800e99e:	e7f5      	b.n	800e98c <PDM_Filter_setConfig+0x108>
 800e9a0:	4b25      	ldr	r3, [pc, #148]	; (800ea38 <PDM_Filter_setConfig+0x1b4>)
 800e9a2:	64a3      	str	r3, [r4, #72]	; 0x48
 800e9a4:	e7f2      	b.n	800e98c <PDM_Filter_setConfig+0x108>
 800e9a6:	4b25      	ldr	r3, [pc, #148]	; (800ea3c <PDM_Filter_setConfig+0x1b8>)
 800e9a8:	64a3      	str	r3, [r4, #72]	; 0x48
 800e9aa:	e7ef      	b.n	800e98c <PDM_Filter_setConfig+0x108>
 800e9ac:	4b24      	ldr	r3, [pc, #144]	; (800ea40 <PDM_Filter_setConfig+0x1bc>)
 800e9ae:	64a3      	str	r3, [r4, #72]	; 0x48
 800e9b0:	e7ec      	b.n	800e98c <PDM_Filter_setConfig+0x108>
 800e9b2:	4b24      	ldr	r3, [pc, #144]	; (800ea44 <PDM_Filter_setConfig+0x1c0>)
 800e9b4:	64a3      	str	r3, [r4, #72]	; 0x48
 800e9b6:	e7e9      	b.n	800e98c <PDM_Filter_setConfig+0x108>
 800e9b8:	8e21      	ldrh	r1, [r4, #48]	; 0x30
 800e9ba:	4291      	cmp	r1, r2
 800e9bc:	f47f af7d 	bne.w	800e8ba <PDM_Filter_setConfig+0x36>
 800e9c0:	e783      	b.n	800e8ca <PDM_Filter_setConfig+0x46>
 800e9c2:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
 800e9c6:	f9b4 1038 	ldrsh.w	r1, [r4, #56]	; 0x38
 800e9ca:	4299      	cmp	r1, r3
 800e9cc:	d023      	beq.n	800ea16 <PDM_Filter_setConfig+0x192>
 800e9ce:	2000      	movs	r0, #0
 800e9d0:	e773      	b.n	800e8ba <PDM_Filter_setConfig+0x36>
 800e9d2:	2b06      	cmp	r3, #6
 800e9d4:	d822      	bhi.n	800ea1c <PDM_Filter_setConfig+0x198>
 800e9d6:	e8df f003 	tbb	[pc, r3]
 800e9da:	1316      	.short	0x1316
 800e9dc:	070a0d10 	.word	0x070a0d10
 800e9e0:	04          	.byte	0x04
 800e9e1:	00          	.byte	0x00
 800e9e2:	4b19      	ldr	r3, [pc, #100]	; (800ea48 <PDM_Filter_setConfig+0x1c4>)
 800e9e4:	64a3      	str	r3, [r4, #72]	; 0x48
 800e9e6:	e7d1      	b.n	800e98c <PDM_Filter_setConfig+0x108>
 800e9e8:	4b18      	ldr	r3, [pc, #96]	; (800ea4c <PDM_Filter_setConfig+0x1c8>)
 800e9ea:	64a3      	str	r3, [r4, #72]	; 0x48
 800e9ec:	e7ce      	b.n	800e98c <PDM_Filter_setConfig+0x108>
 800e9ee:	4b18      	ldr	r3, [pc, #96]	; (800ea50 <PDM_Filter_setConfig+0x1cc>)
 800e9f0:	64a3      	str	r3, [r4, #72]	; 0x48
 800e9f2:	e7cb      	b.n	800e98c <PDM_Filter_setConfig+0x108>
 800e9f4:	4b17      	ldr	r3, [pc, #92]	; (800ea54 <PDM_Filter_setConfig+0x1d0>)
 800e9f6:	64a3      	str	r3, [r4, #72]	; 0x48
 800e9f8:	e7c8      	b.n	800e98c <PDM_Filter_setConfig+0x108>
 800e9fa:	4b17      	ldr	r3, [pc, #92]	; (800ea58 <PDM_Filter_setConfig+0x1d4>)
 800e9fc:	64a3      	str	r3, [r4, #72]	; 0x48
 800e9fe:	e7c5      	b.n	800e98c <PDM_Filter_setConfig+0x108>
 800ea00:	4b16      	ldr	r3, [pc, #88]	; (800ea5c <PDM_Filter_setConfig+0x1d8>)
 800ea02:	64a3      	str	r3, [r4, #72]	; 0x48
 800ea04:	e7c2      	b.n	800e98c <PDM_Filter_setConfig+0x108>
 800ea06:	4b16      	ldr	r3, [pc, #88]	; (800ea60 <PDM_Filter_setConfig+0x1dc>)
 800ea08:	64a3      	str	r3, [r4, #72]	; 0x48
 800ea0a:	e7bf      	b.n	800e98c <PDM_Filter_setConfig+0x108>
 800ea0c:	ed9f 8a15 	vldr	s16, [pc, #84]	; 800ea64 <PDM_Filter_setConfig+0x1e0>
 800ea10:	eeb0 9a48 	vmov.f32	s18, s16
 800ea14:	e78e      	b.n	800e934 <PDM_Filter_setConfig+0xb0>
 800ea16:	886b      	ldrh	r3, [r5, #2]
 800ea18:	8663      	strh	r3, [r4, #50]	; 0x32
 800ea1a:	e759      	b.n	800e8d0 <PDM_Filter_setConfig+0x4c>
 800ea1c:	2000      	movs	r0, #0
 800ea1e:	e746      	b.n	800e8ae <PDM_Filter_setConfig+0x2a>
 800ea20:	b5e8b5cd 	.word	0xb5e8b5cd
 800ea24:	0800fcc0 	.word	0x0800fcc0
 800ea28:	42000000 	.word	0x42000000
 800ea2c:	0800cdf1 	.word	0x0800cdf1
 800ea30:	0800ccd1 	.word	0x0800ccd1
 800ea34:	0800cf81 	.word	0x0800cf81
 800ea38:	0800d7c5 	.word	0x0800d7c5
 800ea3c:	0800d525 	.word	0x0800d525
 800ea40:	0800d305 	.word	0x0800d305
 800ea44:	0800d119 	.word	0x0800d119
 800ea48:	0800ddd1 	.word	0x0800ddd1
 800ea4c:	0800dc99 	.word	0x0800dc99
 800ea50:	0800dbb5 	.word	0x0800dbb5
 800ea54:	0800e44d 	.word	0x0800e44d
 800ea58:	0800e239 	.word	0x0800e239
 800ea5c:	0800e081 	.word	0x0800e081
 800ea60:	0800df15 	.word	0x0800df15
 800ea64:	00000000 	.word	0x00000000

0800ea68 <PDM_Filter>:
 800ea68:	b410      	push	{r4}
 800ea6a:	4b0c      	ldr	r3, [pc, #48]	; (800ea9c <PDM_Filter+0x34>)
 800ea6c:	6c54      	ldr	r4, [r2, #68]	; 0x44
 800ea6e:	429c      	cmp	r4, r3
 800ea70:	d003      	beq.n	800ea7a <PDM_Filter+0x12>
 800ea72:	2004      	movs	r0, #4
 800ea74:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ea78:	4770      	bx	lr
 800ea7a:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800ea7c:	05dc      	lsls	r4, r3, #23
 800ea7e:	d407      	bmi.n	800ea90 <PDM_Filter+0x28>
 800ea80:	f013 0f80 	tst.w	r3, #128	; 0x80
 800ea84:	bf14      	ite	ne
 800ea86:	2020      	movne	r0, #32
 800ea88:	2030      	moveq	r0, #48	; 0x30
 800ea8a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ea8e:	4770      	bx	lr
 800ea90:	6c93      	ldr	r3, [r2, #72]	; 0x48
 800ea92:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ea96:	320c      	adds	r2, #12
 800ea98:	4718      	bx	r3
 800ea9a:	bf00      	nop
 800ea9c:	b5e8b5cd 	.word	0xb5e8b5cd

0800eaa0 <CRC_Lock>:
 800eaa0:	4a17      	ldr	r2, [pc, #92]	; (800eb00 <CRC_Lock+0x60>)
 800eaa2:	6813      	ldr	r3, [r2, #0]
 800eaa4:	b410      	push	{r4}
 800eaa6:	f023 0301 	bic.w	r3, r3, #1
 800eaaa:	4c16      	ldr	r4, [pc, #88]	; (800eb04 <CRC_Lock+0x64>)
 800eaac:	6013      	str	r3, [r2, #0]
 800eaae:	6823      	ldr	r3, [r4, #0]
 800eab0:	b933      	cbnz	r3, 800eac0 <CRC_Lock+0x20>
 800eab2:	4b15      	ldr	r3, [pc, #84]	; (800eb08 <CRC_Lock+0x68>)
 800eab4:	681b      	ldr	r3, [r3, #0]
 800eab6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800eaba:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 800eabe:	d00f      	beq.n	800eae0 <CRC_Lock+0x40>
 800eac0:	4a12      	ldr	r2, [pc, #72]	; (800eb0c <CRC_Lock+0x6c>)
 800eac2:	2301      	movs	r3, #1
 800eac4:	6013      	str	r3, [r2, #0]
 800eac6:	6813      	ldr	r3, [r2, #0]
 800eac8:	2b00      	cmp	r3, #0
 800eaca:	d1fc      	bne.n	800eac6 <CRC_Lock+0x26>
 800eacc:	4b10      	ldr	r3, [pc, #64]	; (800eb10 <CRC_Lock+0x70>)
 800eace:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ead2:	6018      	str	r0, [r3, #0]
 800ead4:	6818      	ldr	r0, [r3, #0]
 800ead6:	1a08      	subs	r0, r1, r0
 800ead8:	fab0 f080 	clz	r0, r0
 800eadc:	0940      	lsrs	r0, r0, #5
 800eade:	4770      	bx	lr
 800eae0:	4a0c      	ldr	r2, [pc, #48]	; (800eb14 <CRC_Lock+0x74>)
 800eae2:	2301      	movs	r3, #1
 800eae4:	6013      	str	r3, [r2, #0]
 800eae6:	6813      	ldr	r3, [r2, #0]
 800eae8:	2b00      	cmp	r3, #0
 800eaea:	d1fc      	bne.n	800eae6 <CRC_Lock+0x46>
 800eaec:	4b0a      	ldr	r3, [pc, #40]	; (800eb18 <CRC_Lock+0x78>)
 800eaee:	f85d 4b04 	ldr.w	r4, [sp], #4
 800eaf2:	6018      	str	r0, [r3, #0]
 800eaf4:	6818      	ldr	r0, [r3, #0]
 800eaf6:	1a40      	subs	r0, r0, r1
 800eaf8:	fab0 f080 	clz	r0, r0
 800eafc:	0940      	lsrs	r0, r0, #5
 800eafe:	4770      	bx	lr
 800eb00:	e0002000 	.word	0xe0002000
 800eb04:	e0042000 	.word	0xe0042000
 800eb08:	5c001000 	.word	0x5c001000
 800eb0c:	40023008 	.word	0x40023008
 800eb10:	40023000 	.word	0x40023000
 800eb14:	58024c08 	.word	0x58024c08
 800eb18:	58024c00 	.word	0x58024c00

0800eb1c <__errno>:
 800eb1c:	4b01      	ldr	r3, [pc, #4]	; (800eb24 <__errno+0x8>)
 800eb1e:	6818      	ldr	r0, [r3, #0]
 800eb20:	4770      	bx	lr
 800eb22:	bf00      	nop
 800eb24:	20000580 	.word	0x20000580

0800eb28 <__libc_init_array>:
 800eb28:	b570      	push	{r4, r5, r6, lr}
 800eb2a:	4e0d      	ldr	r6, [pc, #52]	; (800eb60 <__libc_init_array+0x38>)
 800eb2c:	4c0d      	ldr	r4, [pc, #52]	; (800eb64 <__libc_init_array+0x3c>)
 800eb2e:	1ba4      	subs	r4, r4, r6
 800eb30:	10a4      	asrs	r4, r4, #2
 800eb32:	2500      	movs	r5, #0
 800eb34:	42a5      	cmp	r5, r4
 800eb36:	d109      	bne.n	800eb4c <__libc_init_array+0x24>
 800eb38:	4e0b      	ldr	r6, [pc, #44]	; (800eb68 <__libc_init_array+0x40>)
 800eb3a:	4c0c      	ldr	r4, [pc, #48]	; (800eb6c <__libc_init_array+0x44>)
 800eb3c:	f000 ff2c 	bl	800f998 <_init>
 800eb40:	1ba4      	subs	r4, r4, r6
 800eb42:	10a4      	asrs	r4, r4, #2
 800eb44:	2500      	movs	r5, #0
 800eb46:	42a5      	cmp	r5, r4
 800eb48:	d105      	bne.n	800eb56 <__libc_init_array+0x2e>
 800eb4a:	bd70      	pop	{r4, r5, r6, pc}
 800eb4c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800eb50:	4798      	blx	r3
 800eb52:	3501      	adds	r5, #1
 800eb54:	e7ee      	b.n	800eb34 <__libc_init_array+0xc>
 800eb56:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800eb5a:	4798      	blx	r3
 800eb5c:	3501      	adds	r5, #1
 800eb5e:	e7f2      	b.n	800eb46 <__libc_init_array+0x1e>
 800eb60:	0800fdbc 	.word	0x0800fdbc
 800eb64:	0800fdbc 	.word	0x0800fdbc
 800eb68:	0800fdbc 	.word	0x0800fdbc
 800eb6c:	0800fdc0 	.word	0x0800fdc0

0800eb70 <malloc>:
 800eb70:	4b02      	ldr	r3, [pc, #8]	; (800eb7c <malloc+0xc>)
 800eb72:	4601      	mov	r1, r0
 800eb74:	6818      	ldr	r0, [r3, #0]
 800eb76:	f000 b86d 	b.w	800ec54 <_malloc_r>
 800eb7a:	bf00      	nop
 800eb7c:	20000580 	.word	0x20000580

0800eb80 <free>:
 800eb80:	4b02      	ldr	r3, [pc, #8]	; (800eb8c <free+0xc>)
 800eb82:	4601      	mov	r1, r0
 800eb84:	6818      	ldr	r0, [r3, #0]
 800eb86:	f000 b817 	b.w	800ebb8 <_free_r>
 800eb8a:	bf00      	nop
 800eb8c:	20000580 	.word	0x20000580

0800eb90 <memcpy>:
 800eb90:	b510      	push	{r4, lr}
 800eb92:	1e43      	subs	r3, r0, #1
 800eb94:	440a      	add	r2, r1
 800eb96:	4291      	cmp	r1, r2
 800eb98:	d100      	bne.n	800eb9c <memcpy+0xc>
 800eb9a:	bd10      	pop	{r4, pc}
 800eb9c:	f811 4b01 	ldrb.w	r4, [r1], #1
 800eba0:	f803 4f01 	strb.w	r4, [r3, #1]!
 800eba4:	e7f7      	b.n	800eb96 <memcpy+0x6>

0800eba6 <memset>:
 800eba6:	4402      	add	r2, r0
 800eba8:	4603      	mov	r3, r0
 800ebaa:	4293      	cmp	r3, r2
 800ebac:	d100      	bne.n	800ebb0 <memset+0xa>
 800ebae:	4770      	bx	lr
 800ebb0:	f803 1b01 	strb.w	r1, [r3], #1
 800ebb4:	e7f9      	b.n	800ebaa <memset+0x4>
	...

0800ebb8 <_free_r>:
 800ebb8:	b538      	push	{r3, r4, r5, lr}
 800ebba:	4605      	mov	r5, r0
 800ebbc:	2900      	cmp	r1, #0
 800ebbe:	d045      	beq.n	800ec4c <_free_r+0x94>
 800ebc0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ebc4:	1f0c      	subs	r4, r1, #4
 800ebc6:	2b00      	cmp	r3, #0
 800ebc8:	bfb8      	it	lt
 800ebca:	18e4      	addlt	r4, r4, r3
 800ebcc:	f000 f8ac 	bl	800ed28 <__malloc_lock>
 800ebd0:	4a1f      	ldr	r2, [pc, #124]	; (800ec50 <_free_r+0x98>)
 800ebd2:	6813      	ldr	r3, [r2, #0]
 800ebd4:	4610      	mov	r0, r2
 800ebd6:	b933      	cbnz	r3, 800ebe6 <_free_r+0x2e>
 800ebd8:	6063      	str	r3, [r4, #4]
 800ebda:	6014      	str	r4, [r2, #0]
 800ebdc:	4628      	mov	r0, r5
 800ebde:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ebe2:	f000 b8a2 	b.w	800ed2a <__malloc_unlock>
 800ebe6:	42a3      	cmp	r3, r4
 800ebe8:	d90c      	bls.n	800ec04 <_free_r+0x4c>
 800ebea:	6821      	ldr	r1, [r4, #0]
 800ebec:	1862      	adds	r2, r4, r1
 800ebee:	4293      	cmp	r3, r2
 800ebf0:	bf04      	itt	eq
 800ebf2:	681a      	ldreq	r2, [r3, #0]
 800ebf4:	685b      	ldreq	r3, [r3, #4]
 800ebf6:	6063      	str	r3, [r4, #4]
 800ebf8:	bf04      	itt	eq
 800ebfa:	1852      	addeq	r2, r2, r1
 800ebfc:	6022      	streq	r2, [r4, #0]
 800ebfe:	6004      	str	r4, [r0, #0]
 800ec00:	e7ec      	b.n	800ebdc <_free_r+0x24>
 800ec02:	4613      	mov	r3, r2
 800ec04:	685a      	ldr	r2, [r3, #4]
 800ec06:	b10a      	cbz	r2, 800ec0c <_free_r+0x54>
 800ec08:	42a2      	cmp	r2, r4
 800ec0a:	d9fa      	bls.n	800ec02 <_free_r+0x4a>
 800ec0c:	6819      	ldr	r1, [r3, #0]
 800ec0e:	1858      	adds	r0, r3, r1
 800ec10:	42a0      	cmp	r0, r4
 800ec12:	d10b      	bne.n	800ec2c <_free_r+0x74>
 800ec14:	6820      	ldr	r0, [r4, #0]
 800ec16:	4401      	add	r1, r0
 800ec18:	1858      	adds	r0, r3, r1
 800ec1a:	4282      	cmp	r2, r0
 800ec1c:	6019      	str	r1, [r3, #0]
 800ec1e:	d1dd      	bne.n	800ebdc <_free_r+0x24>
 800ec20:	6810      	ldr	r0, [r2, #0]
 800ec22:	6852      	ldr	r2, [r2, #4]
 800ec24:	605a      	str	r2, [r3, #4]
 800ec26:	4401      	add	r1, r0
 800ec28:	6019      	str	r1, [r3, #0]
 800ec2a:	e7d7      	b.n	800ebdc <_free_r+0x24>
 800ec2c:	d902      	bls.n	800ec34 <_free_r+0x7c>
 800ec2e:	230c      	movs	r3, #12
 800ec30:	602b      	str	r3, [r5, #0]
 800ec32:	e7d3      	b.n	800ebdc <_free_r+0x24>
 800ec34:	6820      	ldr	r0, [r4, #0]
 800ec36:	1821      	adds	r1, r4, r0
 800ec38:	428a      	cmp	r2, r1
 800ec3a:	bf04      	itt	eq
 800ec3c:	6811      	ldreq	r1, [r2, #0]
 800ec3e:	6852      	ldreq	r2, [r2, #4]
 800ec40:	6062      	str	r2, [r4, #4]
 800ec42:	bf04      	itt	eq
 800ec44:	1809      	addeq	r1, r1, r0
 800ec46:	6021      	streq	r1, [r4, #0]
 800ec48:	605c      	str	r4, [r3, #4]
 800ec4a:	e7c7      	b.n	800ebdc <_free_r+0x24>
 800ec4c:	bd38      	pop	{r3, r4, r5, pc}
 800ec4e:	bf00      	nop
 800ec50:	2000066c 	.word	0x2000066c

0800ec54 <_malloc_r>:
 800ec54:	b570      	push	{r4, r5, r6, lr}
 800ec56:	1ccd      	adds	r5, r1, #3
 800ec58:	f025 0503 	bic.w	r5, r5, #3
 800ec5c:	3508      	adds	r5, #8
 800ec5e:	2d0c      	cmp	r5, #12
 800ec60:	bf38      	it	cc
 800ec62:	250c      	movcc	r5, #12
 800ec64:	2d00      	cmp	r5, #0
 800ec66:	4606      	mov	r6, r0
 800ec68:	db01      	blt.n	800ec6e <_malloc_r+0x1a>
 800ec6a:	42a9      	cmp	r1, r5
 800ec6c:	d903      	bls.n	800ec76 <_malloc_r+0x22>
 800ec6e:	230c      	movs	r3, #12
 800ec70:	6033      	str	r3, [r6, #0]
 800ec72:	2000      	movs	r0, #0
 800ec74:	bd70      	pop	{r4, r5, r6, pc}
 800ec76:	f000 f857 	bl	800ed28 <__malloc_lock>
 800ec7a:	4a21      	ldr	r2, [pc, #132]	; (800ed00 <_malloc_r+0xac>)
 800ec7c:	6814      	ldr	r4, [r2, #0]
 800ec7e:	4621      	mov	r1, r4
 800ec80:	b991      	cbnz	r1, 800eca8 <_malloc_r+0x54>
 800ec82:	4c20      	ldr	r4, [pc, #128]	; (800ed04 <_malloc_r+0xb0>)
 800ec84:	6823      	ldr	r3, [r4, #0]
 800ec86:	b91b      	cbnz	r3, 800ec90 <_malloc_r+0x3c>
 800ec88:	4630      	mov	r0, r6
 800ec8a:	f000 f83d 	bl	800ed08 <_sbrk_r>
 800ec8e:	6020      	str	r0, [r4, #0]
 800ec90:	4629      	mov	r1, r5
 800ec92:	4630      	mov	r0, r6
 800ec94:	f000 f838 	bl	800ed08 <_sbrk_r>
 800ec98:	1c43      	adds	r3, r0, #1
 800ec9a:	d124      	bne.n	800ece6 <_malloc_r+0x92>
 800ec9c:	230c      	movs	r3, #12
 800ec9e:	6033      	str	r3, [r6, #0]
 800eca0:	4630      	mov	r0, r6
 800eca2:	f000 f842 	bl	800ed2a <__malloc_unlock>
 800eca6:	e7e4      	b.n	800ec72 <_malloc_r+0x1e>
 800eca8:	680b      	ldr	r3, [r1, #0]
 800ecaa:	1b5b      	subs	r3, r3, r5
 800ecac:	d418      	bmi.n	800ece0 <_malloc_r+0x8c>
 800ecae:	2b0b      	cmp	r3, #11
 800ecb0:	d90f      	bls.n	800ecd2 <_malloc_r+0x7e>
 800ecb2:	600b      	str	r3, [r1, #0]
 800ecb4:	50cd      	str	r5, [r1, r3]
 800ecb6:	18cc      	adds	r4, r1, r3
 800ecb8:	4630      	mov	r0, r6
 800ecba:	f000 f836 	bl	800ed2a <__malloc_unlock>
 800ecbe:	f104 000b 	add.w	r0, r4, #11
 800ecc2:	1d23      	adds	r3, r4, #4
 800ecc4:	f020 0007 	bic.w	r0, r0, #7
 800ecc8:	1ac3      	subs	r3, r0, r3
 800ecca:	d0d3      	beq.n	800ec74 <_malloc_r+0x20>
 800eccc:	425a      	negs	r2, r3
 800ecce:	50e2      	str	r2, [r4, r3]
 800ecd0:	e7d0      	b.n	800ec74 <_malloc_r+0x20>
 800ecd2:	428c      	cmp	r4, r1
 800ecd4:	684b      	ldr	r3, [r1, #4]
 800ecd6:	bf16      	itet	ne
 800ecd8:	6063      	strne	r3, [r4, #4]
 800ecda:	6013      	streq	r3, [r2, #0]
 800ecdc:	460c      	movne	r4, r1
 800ecde:	e7eb      	b.n	800ecb8 <_malloc_r+0x64>
 800ece0:	460c      	mov	r4, r1
 800ece2:	6849      	ldr	r1, [r1, #4]
 800ece4:	e7cc      	b.n	800ec80 <_malloc_r+0x2c>
 800ece6:	1cc4      	adds	r4, r0, #3
 800ece8:	f024 0403 	bic.w	r4, r4, #3
 800ecec:	42a0      	cmp	r0, r4
 800ecee:	d005      	beq.n	800ecfc <_malloc_r+0xa8>
 800ecf0:	1a21      	subs	r1, r4, r0
 800ecf2:	4630      	mov	r0, r6
 800ecf4:	f000 f808 	bl	800ed08 <_sbrk_r>
 800ecf8:	3001      	adds	r0, #1
 800ecfa:	d0cf      	beq.n	800ec9c <_malloc_r+0x48>
 800ecfc:	6025      	str	r5, [r4, #0]
 800ecfe:	e7db      	b.n	800ecb8 <_malloc_r+0x64>
 800ed00:	2000066c 	.word	0x2000066c
 800ed04:	20000670 	.word	0x20000670

0800ed08 <_sbrk_r>:
 800ed08:	b538      	push	{r3, r4, r5, lr}
 800ed0a:	4c06      	ldr	r4, [pc, #24]	; (800ed24 <_sbrk_r+0x1c>)
 800ed0c:	2300      	movs	r3, #0
 800ed0e:	4605      	mov	r5, r0
 800ed10:	4608      	mov	r0, r1
 800ed12:	6023      	str	r3, [r4, #0]
 800ed14:	f7f3 fb58 	bl	80023c8 <_sbrk>
 800ed18:	1c43      	adds	r3, r0, #1
 800ed1a:	d102      	bne.n	800ed22 <_sbrk_r+0x1a>
 800ed1c:	6823      	ldr	r3, [r4, #0]
 800ed1e:	b103      	cbz	r3, 800ed22 <_sbrk_r+0x1a>
 800ed20:	602b      	str	r3, [r5, #0]
 800ed22:	bd38      	pop	{r3, r4, r5, pc}
 800ed24:	20004ca8 	.word	0x20004ca8

0800ed28 <__malloc_lock>:
 800ed28:	4770      	bx	lr

0800ed2a <__malloc_unlock>:
 800ed2a:	4770      	bx	lr

0800ed2c <roundf>:
 800ed2c:	ee10 0a10 	vmov	r0, s0
 800ed30:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 800ed34:	f1a3 027f 	sub.w	r2, r3, #127	; 0x7f
 800ed38:	2a16      	cmp	r2, #22
 800ed3a:	dc15      	bgt.n	800ed68 <roundf+0x3c>
 800ed3c:	2a00      	cmp	r2, #0
 800ed3e:	da08      	bge.n	800ed52 <roundf+0x26>
 800ed40:	3201      	adds	r2, #1
 800ed42:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800ed46:	d101      	bne.n	800ed4c <roundf+0x20>
 800ed48:	f043 537e 	orr.w	r3, r3, #1065353216	; 0x3f800000
 800ed4c:	ee00 3a10 	vmov	s0, r3
 800ed50:	4770      	bx	lr
 800ed52:	4908      	ldr	r1, [pc, #32]	; (800ed74 <roundf+0x48>)
 800ed54:	4111      	asrs	r1, r2
 800ed56:	4208      	tst	r0, r1
 800ed58:	d0fa      	beq.n	800ed50 <roundf+0x24>
 800ed5a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800ed5e:	4113      	asrs	r3, r2
 800ed60:	4403      	add	r3, r0
 800ed62:	ea23 0301 	bic.w	r3, r3, r1
 800ed66:	e7f1      	b.n	800ed4c <roundf+0x20>
 800ed68:	2a80      	cmp	r2, #128	; 0x80
 800ed6a:	d1f1      	bne.n	800ed50 <roundf+0x24>
 800ed6c:	ee30 0a00 	vadd.f32	s0, s0, s0
 800ed70:	4770      	bx	lr
 800ed72:	bf00      	nop
 800ed74:	007fffff 	.word	0x007fffff

0800ed78 <sqrt>:
 800ed78:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ed7c:	ed2d 8b02 	vpush	{d8}
 800ed80:	b08b      	sub	sp, #44	; 0x2c
 800ed82:	ec55 4b10 	vmov	r4, r5, d0
 800ed86:	f000 f9b5 	bl	800f0f4 <__ieee754_sqrt>
 800ed8a:	4b26      	ldr	r3, [pc, #152]	; (800ee24 <sqrt+0xac>)
 800ed8c:	eeb0 8a40 	vmov.f32	s16, s0
 800ed90:	eef0 8a60 	vmov.f32	s17, s1
 800ed94:	f993 6000 	ldrsb.w	r6, [r3]
 800ed98:	1c73      	adds	r3, r6, #1
 800ed9a:	d02a      	beq.n	800edf2 <sqrt+0x7a>
 800ed9c:	4622      	mov	r2, r4
 800ed9e:	462b      	mov	r3, r5
 800eda0:	4620      	mov	r0, r4
 800eda2:	4629      	mov	r1, r5
 800eda4:	f7f1 fe6e 	bl	8000a84 <__aeabi_dcmpun>
 800eda8:	4607      	mov	r7, r0
 800edaa:	bb10      	cbnz	r0, 800edf2 <sqrt+0x7a>
 800edac:	f04f 0800 	mov.w	r8, #0
 800edb0:	f04f 0900 	mov.w	r9, #0
 800edb4:	4642      	mov	r2, r8
 800edb6:	464b      	mov	r3, r9
 800edb8:	4620      	mov	r0, r4
 800edba:	4629      	mov	r1, r5
 800edbc:	f7f1 fe3a 	bl	8000a34 <__aeabi_dcmplt>
 800edc0:	b1b8      	cbz	r0, 800edf2 <sqrt+0x7a>
 800edc2:	2301      	movs	r3, #1
 800edc4:	9300      	str	r3, [sp, #0]
 800edc6:	4b18      	ldr	r3, [pc, #96]	; (800ee28 <sqrt+0xb0>)
 800edc8:	9301      	str	r3, [sp, #4]
 800edca:	9708      	str	r7, [sp, #32]
 800edcc:	e9cd 4504 	strd	r4, r5, [sp, #16]
 800edd0:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800edd4:	b9b6      	cbnz	r6, 800ee04 <sqrt+0x8c>
 800edd6:	e9cd 8906 	strd	r8, r9, [sp, #24]
 800edda:	4668      	mov	r0, sp
 800eddc:	f000 fcfd 	bl	800f7da <matherr>
 800ede0:	b1d0      	cbz	r0, 800ee18 <sqrt+0xa0>
 800ede2:	9b08      	ldr	r3, [sp, #32]
 800ede4:	b11b      	cbz	r3, 800edee <sqrt+0x76>
 800ede6:	f7ff fe99 	bl	800eb1c <__errno>
 800edea:	9b08      	ldr	r3, [sp, #32]
 800edec:	6003      	str	r3, [r0, #0]
 800edee:	ed9d 8b06 	vldr	d8, [sp, #24]
 800edf2:	eeb0 0a48 	vmov.f32	s0, s16
 800edf6:	eef0 0a68 	vmov.f32	s1, s17
 800edfa:	b00b      	add	sp, #44	; 0x2c
 800edfc:	ecbd 8b02 	vpop	{d8}
 800ee00:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ee04:	4642      	mov	r2, r8
 800ee06:	464b      	mov	r3, r9
 800ee08:	4640      	mov	r0, r8
 800ee0a:	4649      	mov	r1, r9
 800ee0c:	f7f1 fcca 	bl	80007a4 <__aeabi_ddiv>
 800ee10:	2e02      	cmp	r6, #2
 800ee12:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800ee16:	d1e0      	bne.n	800edda <sqrt+0x62>
 800ee18:	f7ff fe80 	bl	800eb1c <__errno>
 800ee1c:	2321      	movs	r3, #33	; 0x21
 800ee1e:	6003      	str	r3, [r0, #0]
 800ee20:	e7df      	b.n	800ede2 <sqrt+0x6a>
 800ee22:	bf00      	nop
 800ee24:	200005e4 	.word	0x200005e4
 800ee28:	0800fd88 	.word	0x0800fd88

0800ee2c <powf>:
 800ee2c:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
 800ee30:	ed2d 8b04 	vpush	{d8-d9}
 800ee34:	4ca7      	ldr	r4, [pc, #668]	; (800f0d4 <powf+0x2a8>)
 800ee36:	b08a      	sub	sp, #40	; 0x28
 800ee38:	eef0 8a40 	vmov.f32	s17, s0
 800ee3c:	eeb0 8a60 	vmov.f32	s16, s1
 800ee40:	f000 fa08 	bl	800f254 <__ieee754_powf>
 800ee44:	f994 5000 	ldrsb.w	r5, [r4]
 800ee48:	1c6b      	adds	r3, r5, #1
 800ee4a:	eeb0 9a40 	vmov.f32	s18, s0
 800ee4e:	4626      	mov	r6, r4
 800ee50:	d05f      	beq.n	800ef12 <powf+0xe6>
 800ee52:	eeb4 8a48 	vcmp.f32	s16, s16
 800ee56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ee5a:	d65a      	bvs.n	800ef12 <powf+0xe6>
 800ee5c:	eef4 8a68 	vcmp.f32	s17, s17
 800ee60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ee64:	d721      	bvc.n	800eeaa <powf+0x7e>
 800ee66:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800ee6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ee6e:	d150      	bne.n	800ef12 <powf+0xe6>
 800ee70:	2301      	movs	r3, #1
 800ee72:	9300      	str	r3, [sp, #0]
 800ee74:	4b98      	ldr	r3, [pc, #608]	; (800f0d8 <powf+0x2ac>)
 800ee76:	9301      	str	r3, [sp, #4]
 800ee78:	ee18 0a90 	vmov	r0, s17
 800ee7c:	2300      	movs	r3, #0
 800ee7e:	9308      	str	r3, [sp, #32]
 800ee80:	f7f1 fb0e 	bl	80004a0 <__aeabi_f2d>
 800ee84:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ee88:	ee18 0a10 	vmov	r0, s16
 800ee8c:	f7f1 fb08 	bl	80004a0 <__aeabi_f2d>
 800ee90:	4b92      	ldr	r3, [pc, #584]	; (800f0dc <powf+0x2b0>)
 800ee92:	2200      	movs	r2, #0
 800ee94:	2d02      	cmp	r5, #2
 800ee96:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ee9a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800ee9e:	d032      	beq.n	800ef06 <powf+0xda>
 800eea0:	4668      	mov	r0, sp
 800eea2:	f000 fc9a 	bl	800f7da <matherr>
 800eea6:	bb40      	cbnz	r0, 800eefa <powf+0xce>
 800eea8:	e065      	b.n	800ef76 <powf+0x14a>
 800eeaa:	eddf 9a8d 	vldr	s19, [pc, #564]	; 800f0e0 <powf+0x2b4>
 800eeae:	eef4 8a69 	vcmp.f32	s17, s19
 800eeb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eeb6:	d163      	bne.n	800ef80 <powf+0x154>
 800eeb8:	eeb4 8a69 	vcmp.f32	s16, s19
 800eebc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eec0:	d12e      	bne.n	800ef20 <powf+0xf4>
 800eec2:	2301      	movs	r3, #1
 800eec4:	9300      	str	r3, [sp, #0]
 800eec6:	4b84      	ldr	r3, [pc, #528]	; (800f0d8 <powf+0x2ac>)
 800eec8:	9301      	str	r3, [sp, #4]
 800eeca:	ee18 0a90 	vmov	r0, s17
 800eece:	2300      	movs	r3, #0
 800eed0:	9308      	str	r3, [sp, #32]
 800eed2:	f7f1 fae5 	bl	80004a0 <__aeabi_f2d>
 800eed6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800eeda:	ee18 0a10 	vmov	r0, s16
 800eede:	f7f1 fadf 	bl	80004a0 <__aeabi_f2d>
 800eee2:	2200      	movs	r2, #0
 800eee4:	2300      	movs	r3, #0
 800eee6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800eeea:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800eeee:	2d00      	cmp	r5, #0
 800eef0:	d0d6      	beq.n	800eea0 <powf+0x74>
 800eef2:	4b7a      	ldr	r3, [pc, #488]	; (800f0dc <powf+0x2b0>)
 800eef4:	2200      	movs	r2, #0
 800eef6:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800eefa:	9b08      	ldr	r3, [sp, #32]
 800eefc:	b11b      	cbz	r3, 800ef06 <powf+0xda>
 800eefe:	f7ff fe0d 	bl	800eb1c <__errno>
 800ef02:	9b08      	ldr	r3, [sp, #32]
 800ef04:	6003      	str	r3, [r0, #0]
 800ef06:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ef0a:	f7f1 fdd1 	bl	8000ab0 <__aeabi_d2f>
 800ef0e:	ee09 0a10 	vmov	s18, r0
 800ef12:	eeb0 0a49 	vmov.f32	s0, s18
 800ef16:	b00a      	add	sp, #40	; 0x28
 800ef18:	ecbd 8b04 	vpop	{d8-d9}
 800ef1c:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 800ef20:	eeb0 0a48 	vmov.f32	s0, s16
 800ef24:	f000 fc62 	bl	800f7ec <finitef>
 800ef28:	2800      	cmp	r0, #0
 800ef2a:	d0f2      	beq.n	800ef12 <powf+0xe6>
 800ef2c:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800ef30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ef34:	d5ed      	bpl.n	800ef12 <powf+0xe6>
 800ef36:	2301      	movs	r3, #1
 800ef38:	9300      	str	r3, [sp, #0]
 800ef3a:	4b67      	ldr	r3, [pc, #412]	; (800f0d8 <powf+0x2ac>)
 800ef3c:	9301      	str	r3, [sp, #4]
 800ef3e:	ee18 0a90 	vmov	r0, s17
 800ef42:	2300      	movs	r3, #0
 800ef44:	9308      	str	r3, [sp, #32]
 800ef46:	f7f1 faab 	bl	80004a0 <__aeabi_f2d>
 800ef4a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ef4e:	ee18 0a10 	vmov	r0, s16
 800ef52:	f7f1 faa5 	bl	80004a0 <__aeabi_f2d>
 800ef56:	f994 3000 	ldrsb.w	r3, [r4]
 800ef5a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ef5e:	b923      	cbnz	r3, 800ef6a <powf+0x13e>
 800ef60:	2200      	movs	r2, #0
 800ef62:	2300      	movs	r3, #0
 800ef64:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800ef68:	e79a      	b.n	800eea0 <powf+0x74>
 800ef6a:	495e      	ldr	r1, [pc, #376]	; (800f0e4 <powf+0x2b8>)
 800ef6c:	2000      	movs	r0, #0
 800ef6e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800ef72:	2b02      	cmp	r3, #2
 800ef74:	d194      	bne.n	800eea0 <powf+0x74>
 800ef76:	f7ff fdd1 	bl	800eb1c <__errno>
 800ef7a:	2321      	movs	r3, #33	; 0x21
 800ef7c:	6003      	str	r3, [r0, #0]
 800ef7e:	e7bc      	b.n	800eefa <powf+0xce>
 800ef80:	f000 fc34 	bl	800f7ec <finitef>
 800ef84:	4605      	mov	r5, r0
 800ef86:	2800      	cmp	r0, #0
 800ef88:	d173      	bne.n	800f072 <powf+0x246>
 800ef8a:	eeb0 0a68 	vmov.f32	s0, s17
 800ef8e:	f000 fc2d 	bl	800f7ec <finitef>
 800ef92:	2800      	cmp	r0, #0
 800ef94:	d06d      	beq.n	800f072 <powf+0x246>
 800ef96:	eeb0 0a48 	vmov.f32	s0, s16
 800ef9a:	f000 fc27 	bl	800f7ec <finitef>
 800ef9e:	2800      	cmp	r0, #0
 800efa0:	d067      	beq.n	800f072 <powf+0x246>
 800efa2:	ee18 0a90 	vmov	r0, s17
 800efa6:	f7f1 fa7b 	bl	80004a0 <__aeabi_f2d>
 800efaa:	4680      	mov	r8, r0
 800efac:	ee18 0a10 	vmov	r0, s16
 800efb0:	4689      	mov	r9, r1
 800efb2:	f7f1 fa75 	bl	80004a0 <__aeabi_f2d>
 800efb6:	eeb4 9a49 	vcmp.f32	s18, s18
 800efba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800efbe:	f994 4000 	ldrsb.w	r4, [r4]
 800efc2:	4b45      	ldr	r3, [pc, #276]	; (800f0d8 <powf+0x2ac>)
 800efc4:	d713      	bvc.n	800efee <powf+0x1c2>
 800efc6:	2201      	movs	r2, #1
 800efc8:	e9cd 2300 	strd	r2, r3, [sp]
 800efcc:	9508      	str	r5, [sp, #32]
 800efce:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800efd2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800efd6:	2c00      	cmp	r4, #0
 800efd8:	d0c2      	beq.n	800ef60 <powf+0x134>
 800efda:	eec9 7aa9 	vdiv.f32	s15, s19, s19
 800efde:	ee17 0a90 	vmov	r0, s15
 800efe2:	f7f1 fa5d 	bl	80004a0 <__aeabi_f2d>
 800efe6:	2c02      	cmp	r4, #2
 800efe8:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800efec:	e7c2      	b.n	800ef74 <powf+0x148>
 800efee:	2203      	movs	r2, #3
 800eff0:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800eff4:	e9cd 2300 	strd	r2, r3, [sp]
 800eff8:	9508      	str	r5, [sp, #32]
 800effa:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800effe:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800f002:	ee28 8a27 	vmul.f32	s16, s16, s15
 800f006:	b9fc      	cbnz	r4, 800f048 <powf+0x21c>
 800f008:	4b37      	ldr	r3, [pc, #220]	; (800f0e8 <powf+0x2bc>)
 800f00a:	eef5 8ac0 	vcmpe.f32	s17, #0.0
 800f00e:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800f012:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f016:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800f01a:	d553      	bpl.n	800f0c4 <powf+0x298>
 800f01c:	eeb0 0a48 	vmov.f32	s0, s16
 800f020:	f000 fbf4 	bl	800f80c <rintf>
 800f024:	eeb4 0a48 	vcmp.f32	s0, s16
 800f028:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f02c:	d004      	beq.n	800f038 <powf+0x20c>
 800f02e:	4b2f      	ldr	r3, [pc, #188]	; (800f0ec <powf+0x2c0>)
 800f030:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800f034:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800f038:	f996 3000 	ldrsb.w	r3, [r6]
 800f03c:	2b02      	cmp	r3, #2
 800f03e:	d141      	bne.n	800f0c4 <powf+0x298>
 800f040:	f7ff fd6c 	bl	800eb1c <__errno>
 800f044:	2322      	movs	r3, #34	; 0x22
 800f046:	e799      	b.n	800ef7c <powf+0x150>
 800f048:	4b29      	ldr	r3, [pc, #164]	; (800f0f0 <powf+0x2c4>)
 800f04a:	eef5 8ac0 	vcmpe.f32	s17, #0.0
 800f04e:	2200      	movs	r2, #0
 800f050:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f054:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800f058:	d5ee      	bpl.n	800f038 <powf+0x20c>
 800f05a:	eeb0 0a48 	vmov.f32	s0, s16
 800f05e:	f000 fbd5 	bl	800f80c <rintf>
 800f062:	eeb4 0a48 	vcmp.f32	s0, s16
 800f066:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f06a:	d0e5      	beq.n	800f038 <powf+0x20c>
 800f06c:	2200      	movs	r2, #0
 800f06e:	4b1d      	ldr	r3, [pc, #116]	; (800f0e4 <powf+0x2b8>)
 800f070:	e7e0      	b.n	800f034 <powf+0x208>
 800f072:	eeb5 9a40 	vcmp.f32	s18, #0.0
 800f076:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f07a:	f47f af4a 	bne.w	800ef12 <powf+0xe6>
 800f07e:	eeb0 0a68 	vmov.f32	s0, s17
 800f082:	f000 fbb3 	bl	800f7ec <finitef>
 800f086:	2800      	cmp	r0, #0
 800f088:	f43f af43 	beq.w	800ef12 <powf+0xe6>
 800f08c:	eeb0 0a48 	vmov.f32	s0, s16
 800f090:	f000 fbac 	bl	800f7ec <finitef>
 800f094:	2800      	cmp	r0, #0
 800f096:	f43f af3c 	beq.w	800ef12 <powf+0xe6>
 800f09a:	2304      	movs	r3, #4
 800f09c:	9300      	str	r3, [sp, #0]
 800f09e:	4b0e      	ldr	r3, [pc, #56]	; (800f0d8 <powf+0x2ac>)
 800f0a0:	9301      	str	r3, [sp, #4]
 800f0a2:	ee18 0a90 	vmov	r0, s17
 800f0a6:	2300      	movs	r3, #0
 800f0a8:	9308      	str	r3, [sp, #32]
 800f0aa:	f7f1 f9f9 	bl	80004a0 <__aeabi_f2d>
 800f0ae:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f0b2:	ee18 0a10 	vmov	r0, s16
 800f0b6:	f7f1 f9f3 	bl	80004a0 <__aeabi_f2d>
 800f0ba:	2200      	movs	r2, #0
 800f0bc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800f0c0:	2300      	movs	r3, #0
 800f0c2:	e7b7      	b.n	800f034 <powf+0x208>
 800f0c4:	4668      	mov	r0, sp
 800f0c6:	f000 fb88 	bl	800f7da <matherr>
 800f0ca:	2800      	cmp	r0, #0
 800f0cc:	f47f af15 	bne.w	800eefa <powf+0xce>
 800f0d0:	e7b6      	b.n	800f040 <powf+0x214>
 800f0d2:	bf00      	nop
 800f0d4:	200005e4 	.word	0x200005e4
 800f0d8:	0800fd8d 	.word	0x0800fd8d
 800f0dc:	3ff00000 	.word	0x3ff00000
 800f0e0:	00000000 	.word	0x00000000
 800f0e4:	fff00000 	.word	0xfff00000
 800f0e8:	47efffff 	.word	0x47efffff
 800f0ec:	c7efffff 	.word	0xc7efffff
 800f0f0:	7ff00000 	.word	0x7ff00000

0800f0f4 <__ieee754_sqrt>:
 800f0f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f0f8:	4955      	ldr	r1, [pc, #340]	; (800f250 <__ieee754_sqrt+0x15c>)
 800f0fa:	ec55 4b10 	vmov	r4, r5, d0
 800f0fe:	43a9      	bics	r1, r5
 800f100:	462b      	mov	r3, r5
 800f102:	462a      	mov	r2, r5
 800f104:	d112      	bne.n	800f12c <__ieee754_sqrt+0x38>
 800f106:	ee10 2a10 	vmov	r2, s0
 800f10a:	ee10 0a10 	vmov	r0, s0
 800f10e:	4629      	mov	r1, r5
 800f110:	f7f1 fa1e 	bl	8000550 <__aeabi_dmul>
 800f114:	4602      	mov	r2, r0
 800f116:	460b      	mov	r3, r1
 800f118:	4620      	mov	r0, r4
 800f11a:	4629      	mov	r1, r5
 800f11c:	f7f1 f862 	bl	80001e4 <__adddf3>
 800f120:	4604      	mov	r4, r0
 800f122:	460d      	mov	r5, r1
 800f124:	ec45 4b10 	vmov	d0, r4, r5
 800f128:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f12c:	2d00      	cmp	r5, #0
 800f12e:	ee10 0a10 	vmov	r0, s0
 800f132:	4621      	mov	r1, r4
 800f134:	dc0f      	bgt.n	800f156 <__ieee754_sqrt+0x62>
 800f136:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800f13a:	4330      	orrs	r0, r6
 800f13c:	d0f2      	beq.n	800f124 <__ieee754_sqrt+0x30>
 800f13e:	b155      	cbz	r5, 800f156 <__ieee754_sqrt+0x62>
 800f140:	ee10 2a10 	vmov	r2, s0
 800f144:	4620      	mov	r0, r4
 800f146:	4629      	mov	r1, r5
 800f148:	f7f1 f84a 	bl	80001e0 <__aeabi_dsub>
 800f14c:	4602      	mov	r2, r0
 800f14e:	460b      	mov	r3, r1
 800f150:	f7f1 fb28 	bl	80007a4 <__aeabi_ddiv>
 800f154:	e7e4      	b.n	800f120 <__ieee754_sqrt+0x2c>
 800f156:	151b      	asrs	r3, r3, #20
 800f158:	d073      	beq.n	800f242 <__ieee754_sqrt+0x14e>
 800f15a:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800f15e:	07dd      	lsls	r5, r3, #31
 800f160:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800f164:	bf48      	it	mi
 800f166:	0fc8      	lsrmi	r0, r1, #31
 800f168:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800f16c:	bf44      	itt	mi
 800f16e:	0049      	lslmi	r1, r1, #1
 800f170:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 800f174:	2500      	movs	r5, #0
 800f176:	1058      	asrs	r0, r3, #1
 800f178:	0fcb      	lsrs	r3, r1, #31
 800f17a:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 800f17e:	0049      	lsls	r1, r1, #1
 800f180:	2316      	movs	r3, #22
 800f182:	462c      	mov	r4, r5
 800f184:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 800f188:	19a7      	adds	r7, r4, r6
 800f18a:	4297      	cmp	r7, r2
 800f18c:	bfde      	ittt	le
 800f18e:	19bc      	addle	r4, r7, r6
 800f190:	1bd2      	suble	r2, r2, r7
 800f192:	19ad      	addle	r5, r5, r6
 800f194:	0fcf      	lsrs	r7, r1, #31
 800f196:	3b01      	subs	r3, #1
 800f198:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 800f19c:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800f1a0:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800f1a4:	d1f0      	bne.n	800f188 <__ieee754_sqrt+0x94>
 800f1a6:	f04f 0c20 	mov.w	ip, #32
 800f1aa:	469e      	mov	lr, r3
 800f1ac:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800f1b0:	42a2      	cmp	r2, r4
 800f1b2:	eb06 070e 	add.w	r7, r6, lr
 800f1b6:	dc02      	bgt.n	800f1be <__ieee754_sqrt+0xca>
 800f1b8:	d112      	bne.n	800f1e0 <__ieee754_sqrt+0xec>
 800f1ba:	428f      	cmp	r7, r1
 800f1bc:	d810      	bhi.n	800f1e0 <__ieee754_sqrt+0xec>
 800f1be:	2f00      	cmp	r7, #0
 800f1c0:	eb07 0e06 	add.w	lr, r7, r6
 800f1c4:	da42      	bge.n	800f24c <__ieee754_sqrt+0x158>
 800f1c6:	f1be 0f00 	cmp.w	lr, #0
 800f1ca:	db3f      	blt.n	800f24c <__ieee754_sqrt+0x158>
 800f1cc:	f104 0801 	add.w	r8, r4, #1
 800f1d0:	1b12      	subs	r2, r2, r4
 800f1d2:	428f      	cmp	r7, r1
 800f1d4:	bf88      	it	hi
 800f1d6:	f102 32ff 	addhi.w	r2, r2, #4294967295
 800f1da:	1bc9      	subs	r1, r1, r7
 800f1dc:	4433      	add	r3, r6
 800f1de:	4644      	mov	r4, r8
 800f1e0:	0052      	lsls	r2, r2, #1
 800f1e2:	f1bc 0c01 	subs.w	ip, ip, #1
 800f1e6:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 800f1ea:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800f1ee:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800f1f2:	d1dd      	bne.n	800f1b0 <__ieee754_sqrt+0xbc>
 800f1f4:	430a      	orrs	r2, r1
 800f1f6:	d006      	beq.n	800f206 <__ieee754_sqrt+0x112>
 800f1f8:	1c5c      	adds	r4, r3, #1
 800f1fa:	bf13      	iteet	ne
 800f1fc:	3301      	addne	r3, #1
 800f1fe:	3501      	addeq	r5, #1
 800f200:	4663      	moveq	r3, ip
 800f202:	f023 0301 	bicne.w	r3, r3, #1
 800f206:	106a      	asrs	r2, r5, #1
 800f208:	085b      	lsrs	r3, r3, #1
 800f20a:	07e9      	lsls	r1, r5, #31
 800f20c:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 800f210:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 800f214:	bf48      	it	mi
 800f216:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 800f21a:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 800f21e:	461c      	mov	r4, r3
 800f220:	e780      	b.n	800f124 <__ieee754_sqrt+0x30>
 800f222:	0aca      	lsrs	r2, r1, #11
 800f224:	3815      	subs	r0, #21
 800f226:	0549      	lsls	r1, r1, #21
 800f228:	2a00      	cmp	r2, #0
 800f22a:	d0fa      	beq.n	800f222 <__ieee754_sqrt+0x12e>
 800f22c:	02d6      	lsls	r6, r2, #11
 800f22e:	d50a      	bpl.n	800f246 <__ieee754_sqrt+0x152>
 800f230:	f1c3 0420 	rsb	r4, r3, #32
 800f234:	fa21 f404 	lsr.w	r4, r1, r4
 800f238:	1e5d      	subs	r5, r3, #1
 800f23a:	4099      	lsls	r1, r3
 800f23c:	4322      	orrs	r2, r4
 800f23e:	1b43      	subs	r3, r0, r5
 800f240:	e78b      	b.n	800f15a <__ieee754_sqrt+0x66>
 800f242:	4618      	mov	r0, r3
 800f244:	e7f0      	b.n	800f228 <__ieee754_sqrt+0x134>
 800f246:	0052      	lsls	r2, r2, #1
 800f248:	3301      	adds	r3, #1
 800f24a:	e7ef      	b.n	800f22c <__ieee754_sqrt+0x138>
 800f24c:	46a0      	mov	r8, r4
 800f24e:	e7bf      	b.n	800f1d0 <__ieee754_sqrt+0xdc>
 800f250:	7ff00000 	.word	0x7ff00000

0800f254 <__ieee754_powf>:
 800f254:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f258:	ee10 5a90 	vmov	r5, s1
 800f25c:	f035 4700 	bics.w	r7, r5, #2147483648	; 0x80000000
 800f260:	ed2d 8b02 	vpush	{d8}
 800f264:	eeb0 8a40 	vmov.f32	s16, s0
 800f268:	eef0 8a60 	vmov.f32	s17, s1
 800f26c:	f000 8293 	beq.w	800f796 <__ieee754_powf+0x542>
 800f270:	ee10 8a10 	vmov	r8, s0
 800f274:	f028 4400 	bic.w	r4, r8, #2147483648	; 0x80000000
 800f278:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 800f27c:	dc06      	bgt.n	800f28c <__ieee754_powf+0x38>
 800f27e:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
 800f282:	dd0a      	ble.n	800f29a <__ieee754_powf+0x46>
 800f284:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 800f288:	f000 8285 	beq.w	800f796 <__ieee754_powf+0x542>
 800f28c:	ecbd 8b02 	vpop	{d8}
 800f290:	48d9      	ldr	r0, [pc, #868]	; (800f5f8 <__ieee754_powf+0x3a4>)
 800f292:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f296:	f000 bab3 	b.w	800f800 <nanf>
 800f29a:	f1b8 0f00 	cmp.w	r8, #0
 800f29e:	da1d      	bge.n	800f2dc <__ieee754_powf+0x88>
 800f2a0:	f1b7 4f97 	cmp.w	r7, #1266679808	; 0x4b800000
 800f2a4:	da2c      	bge.n	800f300 <__ieee754_powf+0xac>
 800f2a6:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 800f2aa:	db30      	blt.n	800f30e <__ieee754_powf+0xba>
 800f2ac:	15fb      	asrs	r3, r7, #23
 800f2ae:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 800f2b2:	fa47 f603 	asr.w	r6, r7, r3
 800f2b6:	fa06 f303 	lsl.w	r3, r6, r3
 800f2ba:	42bb      	cmp	r3, r7
 800f2bc:	d127      	bne.n	800f30e <__ieee754_powf+0xba>
 800f2be:	f006 0601 	and.w	r6, r6, #1
 800f2c2:	f1c6 0602 	rsb	r6, r6, #2
 800f2c6:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 800f2ca:	d122      	bne.n	800f312 <__ieee754_powf+0xbe>
 800f2cc:	2d00      	cmp	r5, #0
 800f2ce:	f280 8268 	bge.w	800f7a2 <__ieee754_powf+0x54e>
 800f2d2:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800f2d6:	ee87 0a88 	vdiv.f32	s0, s15, s16
 800f2da:	e00d      	b.n	800f2f8 <__ieee754_powf+0xa4>
 800f2dc:	2600      	movs	r6, #0
 800f2de:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
 800f2e2:	d1f0      	bne.n	800f2c6 <__ieee754_powf+0x72>
 800f2e4:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 800f2e8:	f000 8255 	beq.w	800f796 <__ieee754_powf+0x542>
 800f2ec:	dd0a      	ble.n	800f304 <__ieee754_powf+0xb0>
 800f2ee:	2d00      	cmp	r5, #0
 800f2f0:	f280 8254 	bge.w	800f79c <__ieee754_powf+0x548>
 800f2f4:	ed9f 0ac1 	vldr	s0, [pc, #772]	; 800f5fc <__ieee754_powf+0x3a8>
 800f2f8:	ecbd 8b02 	vpop	{d8}
 800f2fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f300:	2602      	movs	r6, #2
 800f302:	e7ec      	b.n	800f2de <__ieee754_powf+0x8a>
 800f304:	2d00      	cmp	r5, #0
 800f306:	daf5      	bge.n	800f2f4 <__ieee754_powf+0xa0>
 800f308:	eeb1 0a68 	vneg.f32	s0, s17
 800f30c:	e7f4      	b.n	800f2f8 <__ieee754_powf+0xa4>
 800f30e:	2600      	movs	r6, #0
 800f310:	e7d9      	b.n	800f2c6 <__ieee754_powf+0x72>
 800f312:	f1b5 4f80 	cmp.w	r5, #1073741824	; 0x40000000
 800f316:	d102      	bne.n	800f31e <__ieee754_powf+0xca>
 800f318:	ee28 0a08 	vmul.f32	s0, s16, s16
 800f31c:	e7ec      	b.n	800f2f8 <__ieee754_powf+0xa4>
 800f31e:	f1b5 5f7c 	cmp.w	r5, #1056964608	; 0x3f000000
 800f322:	eeb0 0a48 	vmov.f32	s0, s16
 800f326:	d108      	bne.n	800f33a <__ieee754_powf+0xe6>
 800f328:	f1b8 0f00 	cmp.w	r8, #0
 800f32c:	db05      	blt.n	800f33a <__ieee754_powf+0xe6>
 800f32e:	ecbd 8b02 	vpop	{d8}
 800f332:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f336:	f000 ba4d 	b.w	800f7d4 <__ieee754_sqrtf>
 800f33a:	f000 fa50 	bl	800f7de <fabsf>
 800f33e:	b124      	cbz	r4, 800f34a <__ieee754_powf+0xf6>
 800f340:	f028 4340 	bic.w	r3, r8, #3221225472	; 0xc0000000
 800f344:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 800f348:	d117      	bne.n	800f37a <__ieee754_powf+0x126>
 800f34a:	2d00      	cmp	r5, #0
 800f34c:	bfbc      	itt	lt
 800f34e:	eef7 7a00 	vmovlt.f32	s15, #112	; 0x3f800000  1.0
 800f352:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 800f356:	f1b8 0f00 	cmp.w	r8, #0
 800f35a:	dacd      	bge.n	800f2f8 <__ieee754_powf+0xa4>
 800f35c:	f1a4 547e 	sub.w	r4, r4, #1065353216	; 0x3f800000
 800f360:	ea54 0306 	orrs.w	r3, r4, r6
 800f364:	d104      	bne.n	800f370 <__ieee754_powf+0x11c>
 800f366:	ee70 7a40 	vsub.f32	s15, s0, s0
 800f36a:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 800f36e:	e7c3      	b.n	800f2f8 <__ieee754_powf+0xa4>
 800f370:	2e01      	cmp	r6, #1
 800f372:	d1c1      	bne.n	800f2f8 <__ieee754_powf+0xa4>
 800f374:	eeb1 0a40 	vneg.f32	s0, s0
 800f378:	e7be      	b.n	800f2f8 <__ieee754_powf+0xa4>
 800f37a:	ea4f 70d8 	mov.w	r0, r8, lsr #31
 800f37e:	3801      	subs	r0, #1
 800f380:	ea56 0300 	orrs.w	r3, r6, r0
 800f384:	d104      	bne.n	800f390 <__ieee754_powf+0x13c>
 800f386:	ee38 8a48 	vsub.f32	s16, s16, s16
 800f38a:	ee88 0a08 	vdiv.f32	s0, s16, s16
 800f38e:	e7b3      	b.n	800f2f8 <__ieee754_powf+0xa4>
 800f390:	f1b7 4f9a 	cmp.w	r7, #1291845632	; 0x4d000000
 800f394:	dd6d      	ble.n	800f472 <__ieee754_powf+0x21e>
 800f396:	4b9a      	ldr	r3, [pc, #616]	; (800f600 <__ieee754_powf+0x3ac>)
 800f398:	429c      	cmp	r4, r3
 800f39a:	dc06      	bgt.n	800f3aa <__ieee754_powf+0x156>
 800f39c:	2d00      	cmp	r5, #0
 800f39e:	daa9      	bge.n	800f2f4 <__ieee754_powf+0xa0>
 800f3a0:	ed9f 0a98 	vldr	s0, [pc, #608]	; 800f604 <__ieee754_powf+0x3b0>
 800f3a4:	ee20 0a00 	vmul.f32	s0, s0, s0
 800f3a8:	e7a6      	b.n	800f2f8 <__ieee754_powf+0xa4>
 800f3aa:	4b97      	ldr	r3, [pc, #604]	; (800f608 <__ieee754_powf+0x3b4>)
 800f3ac:	429c      	cmp	r4, r3
 800f3ae:	dd02      	ble.n	800f3b6 <__ieee754_powf+0x162>
 800f3b0:	2d00      	cmp	r5, #0
 800f3b2:	dcf5      	bgt.n	800f3a0 <__ieee754_powf+0x14c>
 800f3b4:	e79e      	b.n	800f2f4 <__ieee754_powf+0xa0>
 800f3b6:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800f3ba:	ee30 0a67 	vsub.f32	s0, s0, s15
 800f3be:	ed9f 7a93 	vldr	s14, [pc, #588]	; 800f60c <__ieee754_powf+0x3b8>
 800f3c2:	eef1 6a40 	vneg.f32	s13, s0
 800f3c6:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 800f3ca:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800f3ce:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800f3d2:	eee7 7a40 	vfms.f32	s15, s14, s0
 800f3d6:	ee60 0a00 	vmul.f32	s1, s0, s0
 800f3da:	ed9f 7a8d 	vldr	s14, [pc, #564]	; 800f610 <__ieee754_powf+0x3bc>
 800f3de:	ee67 0aa0 	vmul.f32	s1, s15, s1
 800f3e2:	eddf 7a8c 	vldr	s15, [pc, #560]	; 800f614 <__ieee754_powf+0x3c0>
 800f3e6:	ee67 7ae0 	vnmul.f32	s15, s15, s1
 800f3ea:	eee0 7a07 	vfma.f32	s15, s0, s14
 800f3ee:	ed9f 7a8a 	vldr	s14, [pc, #552]	; 800f618 <__ieee754_powf+0x3c4>
 800f3f2:	eeb0 6a67 	vmov.f32	s12, s15
 800f3f6:	eea0 6a07 	vfma.f32	s12, s0, s14
 800f3fa:	ee16 3a10 	vmov	r3, s12
 800f3fe:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800f402:	f023 030f 	bic.w	r3, r3, #15
 800f406:	ee00 3a90 	vmov	s1, r3
 800f40a:	eee6 0a87 	vfma.f32	s1, s13, s14
 800f40e:	ee77 7ae0 	vsub.f32	s15, s15, s1
 800f412:	f425 657f 	bic.w	r5, r5, #4080	; 0xff0
 800f416:	f025 050f 	bic.w	r5, r5, #15
 800f41a:	ee07 5a10 	vmov	s14, r5
 800f41e:	ee67 0aa8 	vmul.f32	s1, s15, s17
 800f422:	ee38 7ac7 	vsub.f32	s14, s17, s14
 800f426:	ee07 3a90 	vmov	s15, r3
 800f42a:	eee7 0a27 	vfma.f32	s1, s14, s15
 800f42e:	3e01      	subs	r6, #1
 800f430:	ea56 0200 	orrs.w	r2, r6, r0
 800f434:	ee07 5a10 	vmov	s14, r5
 800f438:	ee67 7a87 	vmul.f32	s15, s15, s14
 800f43c:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 800f440:	ee30 7aa7 	vadd.f32	s14, s1, s15
 800f444:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 800f448:	ee17 4a10 	vmov	r4, s14
 800f44c:	bf08      	it	eq
 800f44e:	eeb0 8a40 	vmoveq.f32	s16, s0
 800f452:	2c00      	cmp	r4, #0
 800f454:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800f458:	f340 8184 	ble.w	800f764 <__ieee754_powf+0x510>
 800f45c:	f1b3 4f86 	cmp.w	r3, #1124073472	; 0x43000000
 800f460:	f340 80fc 	ble.w	800f65c <__ieee754_powf+0x408>
 800f464:	eddf 7a67 	vldr	s15, [pc, #412]	; 800f604 <__ieee754_powf+0x3b0>
 800f468:	ee28 0a27 	vmul.f32	s0, s16, s15
 800f46c:	ee20 0a27 	vmul.f32	s0, s0, s15
 800f470:	e742      	b.n	800f2f8 <__ieee754_powf+0xa4>
 800f472:	f5b4 0f00 	cmp.w	r4, #8388608	; 0x800000
 800f476:	bfbf      	itttt	lt
 800f478:	eddf 7a68 	vldrlt	s15, [pc, #416]	; 800f61c <__ieee754_powf+0x3c8>
 800f47c:	ee60 7a27 	vmullt.f32	s15, s0, s15
 800f480:	f06f 0217 	mvnlt.w	r2, #23
 800f484:	ee17 4a90 	vmovlt	r4, s15
 800f488:	ea4f 53e4 	mov.w	r3, r4, asr #23
 800f48c:	bfa8      	it	ge
 800f48e:	2200      	movge	r2, #0
 800f490:	3b7f      	subs	r3, #127	; 0x7f
 800f492:	4413      	add	r3, r2
 800f494:	4a62      	ldr	r2, [pc, #392]	; (800f620 <__ieee754_powf+0x3cc>)
 800f496:	f3c4 0416 	ubfx	r4, r4, #0, #23
 800f49a:	4294      	cmp	r4, r2
 800f49c:	f044 517e 	orr.w	r1, r4, #1065353216	; 0x3f800000
 800f4a0:	dd06      	ble.n	800f4b0 <__ieee754_powf+0x25c>
 800f4a2:	4a60      	ldr	r2, [pc, #384]	; (800f624 <__ieee754_powf+0x3d0>)
 800f4a4:	4294      	cmp	r4, r2
 800f4a6:	f340 80a5 	ble.w	800f5f4 <__ieee754_powf+0x3a0>
 800f4aa:	3301      	adds	r3, #1
 800f4ac:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 800f4b0:	2400      	movs	r4, #0
 800f4b2:	4a5d      	ldr	r2, [pc, #372]	; (800f628 <__ieee754_powf+0x3d4>)
 800f4b4:	00a7      	lsls	r7, r4, #2
 800f4b6:	443a      	add	r2, r7
 800f4b8:	ee07 1a90 	vmov	s15, r1
 800f4bc:	ed92 7a00 	vldr	s14, [r2]
 800f4c0:	4a5a      	ldr	r2, [pc, #360]	; (800f62c <__ieee754_powf+0x3d8>)
 800f4c2:	ee37 6a27 	vadd.f32	s12, s14, s15
 800f4c6:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 800f4ca:	eec5 6a06 	vdiv.f32	s13, s10, s12
 800f4ce:	1049      	asrs	r1, r1, #1
 800f4d0:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
 800f4d4:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
 800f4d8:	eb01 5144 	add.w	r1, r1, r4, lsl #21
 800f4dc:	ee77 5ac7 	vsub.f32	s11, s15, s14
 800f4e0:	ee06 1a10 	vmov	s12, r1
 800f4e4:	ee65 4aa6 	vmul.f32	s9, s11, s13
 800f4e8:	ee14 ca90 	vmov	ip, s9
 800f4ec:	ea02 0c0c 	and.w	ip, r2, ip
 800f4f0:	ee05 ca10 	vmov	s10, ip
 800f4f4:	eeb1 4a45 	vneg.f32	s8, s10
 800f4f8:	eee4 5a06 	vfma.f32	s11, s8, s12
 800f4fc:	ee36 6a47 	vsub.f32	s12, s12, s14
 800f500:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 800f630 <__ieee754_powf+0x3dc>
 800f504:	ee37 6ac6 	vsub.f32	s12, s15, s12
 800f508:	ee64 7aa4 	vmul.f32	s15, s9, s9
 800f50c:	eee4 5a06 	vfma.f32	s11, s8, s12
 800f510:	ee67 3aa7 	vmul.f32	s7, s15, s15
 800f514:	ee25 6aa6 	vmul.f32	s12, s11, s13
 800f518:	eddf 5a46 	vldr	s11, [pc, #280]	; 800f634 <__ieee754_powf+0x3e0>
 800f51c:	eea7 7aa5 	vfma.f32	s14, s15, s11
 800f520:	eddf 5a45 	vldr	s11, [pc, #276]	; 800f638 <__ieee754_powf+0x3e4>
 800f524:	eee7 5a27 	vfma.f32	s11, s14, s15
 800f528:	ed9f 7a38 	vldr	s14, [pc, #224]	; 800f60c <__ieee754_powf+0x3b8>
 800f52c:	eea5 7aa7 	vfma.f32	s14, s11, s15
 800f530:	eddf 5a42 	vldr	s11, [pc, #264]	; 800f63c <__ieee754_powf+0x3e8>
 800f534:	eee7 5a27 	vfma.f32	s11, s14, s15
 800f538:	ed9f 7a41 	vldr	s14, [pc, #260]	; 800f640 <__ieee754_powf+0x3ec>
 800f53c:	ee75 6a24 	vadd.f32	s13, s10, s9
 800f540:	eea5 7aa7 	vfma.f32	s14, s11, s15
 800f544:	ee66 6a86 	vmul.f32	s13, s13, s12
 800f548:	eef0 5a08 	vmov.f32	s11, #8	; 0x40400000  3.0
 800f54c:	eef0 7a65 	vmov.f32	s15, s11
 800f550:	eee3 6a87 	vfma.f32	s13, s7, s14
 800f554:	eee5 7a05 	vfma.f32	s15, s10, s10
 800f558:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f55c:	ee17 1a90 	vmov	r1, s15
 800f560:	4011      	ands	r1, r2
 800f562:	ee07 1a90 	vmov	s15, r1
 800f566:	ee37 7ae5 	vsub.f32	s14, s15, s11
 800f56a:	eddf 5a36 	vldr	s11, [pc, #216]	; 800f644 <__ieee754_powf+0x3f0>
 800f56e:	eea4 7a05 	vfma.f32	s14, s8, s10
 800f572:	ee36 7ac7 	vsub.f32	s14, s13, s14
 800f576:	ee27 7a24 	vmul.f32	s14, s14, s9
 800f57a:	eea7 7a86 	vfma.f32	s14, s15, s12
 800f57e:	eeb0 6a47 	vmov.f32	s12, s14
 800f582:	eea5 6a27 	vfma.f32	s12, s10, s15
 800f586:	ee16 1a10 	vmov	r1, s12
 800f58a:	4011      	ands	r1, r2
 800f58c:	ee06 1a90 	vmov	s13, r1
 800f590:	eee4 6a27 	vfma.f32	s13, s8, s15
 800f594:	eddf 7a2c 	vldr	s15, [pc, #176]	; 800f648 <__ieee754_powf+0x3f4>
 800f598:	ee37 7a66 	vsub.f32	s14, s14, s13
 800f59c:	ee06 1a10 	vmov	s12, r1
 800f5a0:	ee27 7a27 	vmul.f32	s14, s14, s15
 800f5a4:	eddf 7a29 	vldr	s15, [pc, #164]	; 800f64c <__ieee754_powf+0x3f8>
 800f5a8:	4929      	ldr	r1, [pc, #164]	; (800f650 <__ieee754_powf+0x3fc>)
 800f5aa:	eea6 7a27 	vfma.f32	s14, s12, s15
 800f5ae:	4439      	add	r1, r7
 800f5b0:	edd1 7a00 	vldr	s15, [r1]
 800f5b4:	ee37 7a27 	vadd.f32	s14, s14, s15
 800f5b8:	ee07 3a90 	vmov	s15, r3
 800f5bc:	eef0 0a47 	vmov.f32	s1, s14
 800f5c0:	4b24      	ldr	r3, [pc, #144]	; (800f654 <__ieee754_powf+0x400>)
 800f5c2:	eee6 0a25 	vfma.f32	s1, s12, s11
 800f5c6:	443b      	add	r3, r7
 800f5c8:	ed93 5a00 	vldr	s10, [r3]
 800f5cc:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800f5d0:	ee70 0a85 	vadd.f32	s1, s1, s10
 800f5d4:	ee70 7aa6 	vadd.f32	s15, s1, s13
 800f5d8:	ee17 3a90 	vmov	r3, s15
 800f5dc:	4013      	ands	r3, r2
 800f5de:	ee07 3a90 	vmov	s15, r3
 800f5e2:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800f5e6:	ee77 7ac5 	vsub.f32	s15, s15, s10
 800f5ea:	eee6 7a65 	vfms.f32	s15, s12, s11
 800f5ee:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f5f2:	e70e      	b.n	800f412 <__ieee754_powf+0x1be>
 800f5f4:	2401      	movs	r4, #1
 800f5f6:	e75c      	b.n	800f4b2 <__ieee754_powf+0x25e>
 800f5f8:	0800fd91 	.word	0x0800fd91
 800f5fc:	00000000 	.word	0x00000000
 800f600:	3f7ffff7 	.word	0x3f7ffff7
 800f604:	7149f2ca 	.word	0x7149f2ca
 800f608:	3f800007 	.word	0x3f800007
 800f60c:	3eaaaaab 	.word	0x3eaaaaab
 800f610:	36eca570 	.word	0x36eca570
 800f614:	3fb8aa3b 	.word	0x3fb8aa3b
 800f618:	3fb8aa00 	.word	0x3fb8aa00
 800f61c:	4b800000 	.word	0x4b800000
 800f620:	001cc471 	.word	0x001cc471
 800f624:	005db3d6 	.word	0x005db3d6
 800f628:	0800fd94 	.word	0x0800fd94
 800f62c:	fffff000 	.word	0xfffff000
 800f630:	3e6c3255 	.word	0x3e6c3255
 800f634:	3e53f142 	.word	0x3e53f142
 800f638:	3e8ba305 	.word	0x3e8ba305
 800f63c:	3edb6db7 	.word	0x3edb6db7
 800f640:	3f19999a 	.word	0x3f19999a
 800f644:	3f763800 	.word	0x3f763800
 800f648:	3f76384f 	.word	0x3f76384f
 800f64c:	369dc3a0 	.word	0x369dc3a0
 800f650:	0800fda4 	.word	0x0800fda4
 800f654:	0800fd9c 	.word	0x0800fd9c
 800f658:	3338aa3c 	.word	0x3338aa3c
 800f65c:	f040 8092 	bne.w	800f784 <__ieee754_powf+0x530>
 800f660:	ed5f 6a03 	vldr	s13, [pc, #-12]	; 800f658 <__ieee754_powf+0x404>
 800f664:	ee37 7a67 	vsub.f32	s14, s14, s15
 800f668:	ee70 6aa6 	vadd.f32	s13, s1, s13
 800f66c:	eef4 6ac7 	vcmpe.f32	s13, s14
 800f670:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f674:	f73f aef6 	bgt.w	800f464 <__ieee754_powf+0x210>
 800f678:	15db      	asrs	r3, r3, #23
 800f67a:	f1a3 007e 	sub.w	r0, r3, #126	; 0x7e
 800f67e:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800f682:	4103      	asrs	r3, r0
 800f684:	4423      	add	r3, r4
 800f686:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800f68a:	4947      	ldr	r1, [pc, #284]	; (800f7a8 <__ieee754_powf+0x554>)
 800f68c:	3a7f      	subs	r2, #127	; 0x7f
 800f68e:	4111      	asrs	r1, r2
 800f690:	ea23 0101 	bic.w	r1, r3, r1
 800f694:	f3c3 0016 	ubfx	r0, r3, #0, #23
 800f698:	ee07 1a10 	vmov	s14, r1
 800f69c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800f6a0:	f1c2 0217 	rsb	r2, r2, #23
 800f6a4:	4110      	asrs	r0, r2
 800f6a6:	2c00      	cmp	r4, #0
 800f6a8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800f6ac:	bfb8      	it	lt
 800f6ae:	4240      	neglt	r0, r0
 800f6b0:	ee37 7aa0 	vadd.f32	s14, s15, s1
 800f6b4:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800f7ac <__ieee754_powf+0x558>
 800f6b8:	ee17 3a10 	vmov	r3, s14
 800f6bc:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800f6c0:	f023 030f 	bic.w	r3, r3, #15
 800f6c4:	ee07 3a10 	vmov	s14, r3
 800f6c8:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f6cc:	ee70 0ae7 	vsub.f32	s1, s1, s15
 800f6d0:	eddf 7a37 	vldr	s15, [pc, #220]	; 800f7b0 <__ieee754_powf+0x55c>
 800f6d4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f6d8:	eee0 7aa6 	vfma.f32	s15, s1, s13
 800f6dc:	eddf 6a35 	vldr	s13, [pc, #212]	; 800f7b4 <__ieee754_powf+0x560>
 800f6e0:	eeb0 0a67 	vmov.f32	s0, s15
 800f6e4:	eea7 0a26 	vfma.f32	s0, s14, s13
 800f6e8:	eeb0 6a40 	vmov.f32	s12, s0
 800f6ec:	eea7 6a66 	vfms.f32	s12, s14, s13
 800f6f0:	ee20 7a00 	vmul.f32	s14, s0, s0
 800f6f4:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800f6f8:	eddf 6a2f 	vldr	s13, [pc, #188]	; 800f7b8 <__ieee754_powf+0x564>
 800f6fc:	ed9f 6a2f 	vldr	s12, [pc, #188]	; 800f7bc <__ieee754_powf+0x568>
 800f700:	eea7 6a26 	vfma.f32	s12, s14, s13
 800f704:	eddf 6a2e 	vldr	s13, [pc, #184]	; 800f7c0 <__ieee754_powf+0x56c>
 800f708:	eee6 6a07 	vfma.f32	s13, s12, s14
 800f70c:	ed9f 6a2d 	vldr	s12, [pc, #180]	; 800f7c4 <__ieee754_powf+0x570>
 800f710:	eea6 6a87 	vfma.f32	s12, s13, s14
 800f714:	eddf 6a2c 	vldr	s13, [pc, #176]	; 800f7c8 <__ieee754_powf+0x574>
 800f718:	eee6 6a07 	vfma.f32	s13, s12, s14
 800f71c:	eeb0 6a40 	vmov.f32	s12, s0
 800f720:	eea6 6ac7 	vfms.f32	s12, s13, s14
 800f724:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800f728:	eeb0 7a46 	vmov.f32	s14, s12
 800f72c:	ee77 6a66 	vsub.f32	s13, s14, s13
 800f730:	ee20 6a06 	vmul.f32	s12, s0, s12
 800f734:	eee0 7a27 	vfma.f32	s15, s0, s15
 800f738:	ee86 7a26 	vdiv.f32	s14, s12, s13
 800f73c:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f740:	ee37 0ac0 	vsub.f32	s0, s15, s0
 800f744:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800f748:	ee37 0ac0 	vsub.f32	s0, s15, s0
 800f74c:	ee10 3a10 	vmov	r3, s0
 800f750:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 800f754:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800f758:	da1a      	bge.n	800f790 <__ieee754_powf+0x53c>
 800f75a:	f000 f8b1 	bl	800f8c0 <scalbnf>
 800f75e:	ee20 0a08 	vmul.f32	s0, s0, s16
 800f762:	e5c9      	b.n	800f2f8 <__ieee754_powf+0xa4>
 800f764:	4a19      	ldr	r2, [pc, #100]	; (800f7cc <__ieee754_powf+0x578>)
 800f766:	4293      	cmp	r3, r2
 800f768:	dd02      	ble.n	800f770 <__ieee754_powf+0x51c>
 800f76a:	eddf 7a19 	vldr	s15, [pc, #100]	; 800f7d0 <__ieee754_powf+0x57c>
 800f76e:	e67b      	b.n	800f468 <__ieee754_powf+0x214>
 800f770:	d108      	bne.n	800f784 <__ieee754_powf+0x530>
 800f772:	ee37 7a67 	vsub.f32	s14, s14, s15
 800f776:	eeb4 7ae0 	vcmpe.f32	s14, s1
 800f77a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f77e:	f6ff af7b 	blt.w	800f678 <__ieee754_powf+0x424>
 800f782:	e7f2      	b.n	800f76a <__ieee754_powf+0x516>
 800f784:	f1b3 5f7c 	cmp.w	r3, #1056964608	; 0x3f000000
 800f788:	f73f af76 	bgt.w	800f678 <__ieee754_powf+0x424>
 800f78c:	2000      	movs	r0, #0
 800f78e:	e78f      	b.n	800f6b0 <__ieee754_powf+0x45c>
 800f790:	ee00 3a10 	vmov	s0, r3
 800f794:	e7e3      	b.n	800f75e <__ieee754_powf+0x50a>
 800f796:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800f79a:	e5ad      	b.n	800f2f8 <__ieee754_powf+0xa4>
 800f79c:	eeb0 0a68 	vmov.f32	s0, s17
 800f7a0:	e5aa      	b.n	800f2f8 <__ieee754_powf+0xa4>
 800f7a2:	eeb0 0a48 	vmov.f32	s0, s16
 800f7a6:	e5a7      	b.n	800f2f8 <__ieee754_powf+0xa4>
 800f7a8:	007fffff 	.word	0x007fffff
 800f7ac:	3f317218 	.word	0x3f317218
 800f7b0:	35bfbe8c 	.word	0x35bfbe8c
 800f7b4:	3f317200 	.word	0x3f317200
 800f7b8:	3331bb4c 	.word	0x3331bb4c
 800f7bc:	b5ddea0e 	.word	0xb5ddea0e
 800f7c0:	388ab355 	.word	0x388ab355
 800f7c4:	bb360b61 	.word	0xbb360b61
 800f7c8:	3e2aaaab 	.word	0x3e2aaaab
 800f7cc:	43160000 	.word	0x43160000
 800f7d0:	0da24260 	.word	0x0da24260

0800f7d4 <__ieee754_sqrtf>:
 800f7d4:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800f7d8:	4770      	bx	lr

0800f7da <matherr>:
 800f7da:	2000      	movs	r0, #0
 800f7dc:	4770      	bx	lr

0800f7de <fabsf>:
 800f7de:	ee10 3a10 	vmov	r3, s0
 800f7e2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800f7e6:	ee00 3a10 	vmov	s0, r3
 800f7ea:	4770      	bx	lr

0800f7ec <finitef>:
 800f7ec:	ee10 3a10 	vmov	r3, s0
 800f7f0:	f023 4000 	bic.w	r0, r3, #2147483648	; 0x80000000
 800f7f4:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 800f7f8:	bfac      	ite	ge
 800f7fa:	2000      	movge	r0, #0
 800f7fc:	2001      	movlt	r0, #1
 800f7fe:	4770      	bx	lr

0800f800 <nanf>:
 800f800:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800f808 <nanf+0x8>
 800f804:	4770      	bx	lr
 800f806:	bf00      	nop
 800f808:	7fc00000 	.word	0x7fc00000

0800f80c <rintf>:
 800f80c:	b513      	push	{r0, r1, r4, lr}
 800f80e:	ee10 1a10 	vmov	r1, s0
 800f812:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800f816:	0ddc      	lsrs	r4, r3, #23
 800f818:	3c7f      	subs	r4, #127	; 0x7f
 800f81a:	2c16      	cmp	r4, #22
 800f81c:	dc46      	bgt.n	800f8ac <rintf+0xa0>
 800f81e:	b32b      	cbz	r3, 800f86c <rintf+0x60>
 800f820:	2c00      	cmp	r4, #0
 800f822:	ee10 2a10 	vmov	r2, s0
 800f826:	ea4f 70d1 	mov.w	r0, r1, lsr #31
 800f82a:	da21      	bge.n	800f870 <rintf+0x64>
 800f82c:	f3c1 0316 	ubfx	r3, r1, #0, #23
 800f830:	425b      	negs	r3, r3
 800f832:	4a21      	ldr	r2, [pc, #132]	; (800f8b8 <rintf+0xac>)
 800f834:	0a5b      	lsrs	r3, r3, #9
 800f836:	0d09      	lsrs	r1, r1, #20
 800f838:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800f83c:	0509      	lsls	r1, r1, #20
 800f83e:	430b      	orrs	r3, r1
 800f840:	eb02 0280 	add.w	r2, r2, r0, lsl #2
 800f844:	ee07 3a90 	vmov	s15, r3
 800f848:	edd2 6a00 	vldr	s13, [r2]
 800f84c:	ee36 7aa7 	vadd.f32	s14, s13, s15
 800f850:	ed8d 7a01 	vstr	s14, [sp, #4]
 800f854:	eddd 7a01 	vldr	s15, [sp, #4]
 800f858:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800f85c:	ee17 3a90 	vmov	r3, s15
 800f860:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800f864:	ea43 73c0 	orr.w	r3, r3, r0, lsl #31
 800f868:	ee00 3a10 	vmov	s0, r3
 800f86c:	b002      	add	sp, #8
 800f86e:	bd10      	pop	{r4, pc}
 800f870:	4b12      	ldr	r3, [pc, #72]	; (800f8bc <rintf+0xb0>)
 800f872:	4123      	asrs	r3, r4
 800f874:	4219      	tst	r1, r3
 800f876:	d0f9      	beq.n	800f86c <rintf+0x60>
 800f878:	085b      	lsrs	r3, r3, #1
 800f87a:	4219      	tst	r1, r3
 800f87c:	d006      	beq.n	800f88c <rintf+0x80>
 800f87e:	ea21 0203 	bic.w	r2, r1, r3
 800f882:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800f886:	fa43 f404 	asr.w	r4, r3, r4
 800f88a:	4322      	orrs	r2, r4
 800f88c:	4b0a      	ldr	r3, [pc, #40]	; (800f8b8 <rintf+0xac>)
 800f88e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800f892:	ed90 7a00 	vldr	s14, [r0]
 800f896:	ee07 2a90 	vmov	s15, r2
 800f89a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f89e:	edcd 7a01 	vstr	s15, [sp, #4]
 800f8a2:	ed9d 0a01 	vldr	s0, [sp, #4]
 800f8a6:	ee30 0a47 	vsub.f32	s0, s0, s14
 800f8aa:	e7df      	b.n	800f86c <rintf+0x60>
 800f8ac:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800f8b0:	d3dc      	bcc.n	800f86c <rintf+0x60>
 800f8b2:	ee30 0a00 	vadd.f32	s0, s0, s0
 800f8b6:	e7d9      	b.n	800f86c <rintf+0x60>
 800f8b8:	0800fdac 	.word	0x0800fdac
 800f8bc:	007fffff 	.word	0x007fffff

0800f8c0 <scalbnf>:
 800f8c0:	b508      	push	{r3, lr}
 800f8c2:	ee10 2a10 	vmov	r2, s0
 800f8c6:	f032 4300 	bics.w	r3, r2, #2147483648	; 0x80000000
 800f8ca:	ed2d 8b02 	vpush	{d8}
 800f8ce:	eef0 0a40 	vmov.f32	s1, s0
 800f8d2:	d004      	beq.n	800f8de <scalbnf+0x1e>
 800f8d4:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800f8d8:	d306      	bcc.n	800f8e8 <scalbnf+0x28>
 800f8da:	ee70 0a00 	vadd.f32	s1, s0, s0
 800f8de:	ecbd 8b02 	vpop	{d8}
 800f8e2:	eeb0 0a60 	vmov.f32	s0, s1
 800f8e6:	bd08      	pop	{r3, pc}
 800f8e8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800f8ec:	d21c      	bcs.n	800f928 <scalbnf+0x68>
 800f8ee:	4b1f      	ldr	r3, [pc, #124]	; (800f96c <scalbnf+0xac>)
 800f8f0:	eddf 7a1f 	vldr	s15, [pc, #124]	; 800f970 <scalbnf+0xb0>
 800f8f4:	4298      	cmp	r0, r3
 800f8f6:	ee60 0a27 	vmul.f32	s1, s0, s15
 800f8fa:	db10      	blt.n	800f91e <scalbnf+0x5e>
 800f8fc:	ee10 2a90 	vmov	r2, s1
 800f900:	f3c2 53c7 	ubfx	r3, r2, #23, #8
 800f904:	3b19      	subs	r3, #25
 800f906:	4403      	add	r3, r0
 800f908:	2bfe      	cmp	r3, #254	; 0xfe
 800f90a:	dd0f      	ble.n	800f92c <scalbnf+0x6c>
 800f90c:	ed9f 8a19 	vldr	s16, [pc, #100]	; 800f974 <scalbnf+0xb4>
 800f910:	eeb0 0a48 	vmov.f32	s0, s16
 800f914:	f000 f834 	bl	800f980 <copysignf>
 800f918:	ee60 0a08 	vmul.f32	s1, s0, s16
 800f91c:	e7df      	b.n	800f8de <scalbnf+0x1e>
 800f91e:	eddf 7a16 	vldr	s15, [pc, #88]	; 800f978 <scalbnf+0xb8>
 800f922:	ee60 0aa7 	vmul.f32	s1, s1, s15
 800f926:	e7da      	b.n	800f8de <scalbnf+0x1e>
 800f928:	0ddb      	lsrs	r3, r3, #23
 800f92a:	e7ec      	b.n	800f906 <scalbnf+0x46>
 800f92c:	2b00      	cmp	r3, #0
 800f92e:	dd06      	ble.n	800f93e <scalbnf+0x7e>
 800f930:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 800f934:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 800f938:	ee00 3a90 	vmov	s1, r3
 800f93c:	e7cf      	b.n	800f8de <scalbnf+0x1e>
 800f93e:	f113 0f16 	cmn.w	r3, #22
 800f942:	da06      	bge.n	800f952 <scalbnf+0x92>
 800f944:	f24c 3350 	movw	r3, #50000	; 0xc350
 800f948:	4298      	cmp	r0, r3
 800f94a:	dcdf      	bgt.n	800f90c <scalbnf+0x4c>
 800f94c:	ed9f 8a0a 	vldr	s16, [pc, #40]	; 800f978 <scalbnf+0xb8>
 800f950:	e7de      	b.n	800f910 <scalbnf+0x50>
 800f952:	3319      	adds	r3, #25
 800f954:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 800f958:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 800f95c:	eddf 7a07 	vldr	s15, [pc, #28]	; 800f97c <scalbnf+0xbc>
 800f960:	ee07 3a10 	vmov	s14, r3
 800f964:	ee67 0a27 	vmul.f32	s1, s14, s15
 800f968:	e7b9      	b.n	800f8de <scalbnf+0x1e>
 800f96a:	bf00      	nop
 800f96c:	ffff3cb0 	.word	0xffff3cb0
 800f970:	4c000000 	.word	0x4c000000
 800f974:	7149f2ca 	.word	0x7149f2ca
 800f978:	0da24260 	.word	0x0da24260
 800f97c:	33000000 	.word	0x33000000

0800f980 <copysignf>:
 800f980:	ee10 3a10 	vmov	r3, s0
 800f984:	ee10 2a90 	vmov	r2, s1
 800f988:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800f98c:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800f990:	4313      	orrs	r3, r2
 800f992:	ee00 3a10 	vmov	s0, r3
 800f996:	4770      	bx	lr

0800f998 <_init>:
 800f998:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f99a:	bf00      	nop
 800f99c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f99e:	bc08      	pop	{r3}
 800f9a0:	469e      	mov	lr, r3
 800f9a2:	4770      	bx	lr

0800f9a4 <_fini>:
 800f9a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f9a6:	bf00      	nop
 800f9a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f9aa:	bc08      	pop	{r3}
 800f9ac:	469e      	mov	lr, r3
 800f9ae:	4770      	bx	lr
